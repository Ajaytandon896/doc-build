import{S as VZt,i as XZt,s as zZt,e as a,k as l,w as F,t as o,M as WZt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as QZt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as odt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function HZt($){let g,v,u,f,p,d,h,Ao,Ii,Xm,dt,Ni,qi,Oy,zm,Oe,Qe,ji,Dn,Vy,Gn,On,Xy,Di,Vn,zy,Gi,Wm,Ia;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Ii=a("code"),Xm=o("model_type"),dt=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),qi=o('"new-model"'),Oy=o(")."),zm=l(),Oe=a("p"),Qe=o("Likewise, if your "),ji=a("code"),Dn=o("NewModel"),Vy=o(" is a subclass of "),Gn=a("a"),On=o("PreTrainedModel"),Xy=o(`, make sure its
`),Di=a("code"),Vn=o("config_class"),zy=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Wm=o("NewModelConfig"),Ia=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var $R=s(u);f=r($R,"NewModelConfig"),$R.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Oi=s(d);h=r(Oi,"PretrainedConfig"),Oi.forEach(t),Ao=r(Ae,`, make sure its
`),Ii=n(Ae,"CODE",{});var kR=s(Ii);Xm=r(kR,"model_type"),kR.forEach(t),dt=r(Ae," attribute is set to the same key you use when registering the config (here "),Ni=n(Ae,"CODE",{});var SR=s(Ni);qi=r(SR,'"new-model"'),SR.forEach(t),Oy=r(Ae,")."),Ae.forEach(t),zm=i(He),Oe=n(He,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),ji=n(Lo,"CODE",{});var Na=s(ji);Dn=r(Na,"NewModel"),Na.forEach(t),Vy=r(Lo," is a subclass of "),Gn=n(Lo,"A",{href:!0});var RR=s(Gn);On=r(RR,"PreTrainedModel"),RR.forEach(t),Xy=r(Lo,`, make sure its
`),Di=n(Lo,"CODE",{});var Qm=s(Di);Vn=r(Qm,"config_class"),Qm.forEach(t),zy=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(Lo,"CODE",{});var PR=s(Gi);Wm=r(PR,"NewModelConfig"),PR.forEach(t),Ia=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(Gn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Ao),e(g,Ii),e(Ii,Xm),e(g,dt),e(g,Ni),e(Ni,qi),e(g,Oy),b(He,zm,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,ji),e(ji,Dn),e(Oe,Vy),e(Oe,Gn),e(Gn,On),e(Oe,Xy),e(Oe,Di),e(Di,Vn),e(Oe,zy),e(Oe,Gi),e(Gi,Wm),e(Oe,Ia)},d(He){He&&t(g),He&&t(zm),He&&t(Oe)}}}function UZt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JZt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YZt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function KZt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZZt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function eea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $ea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zea($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ooa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function roa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function toa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function noa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function soa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function loa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ioa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function doa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function coa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function moa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function foa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function goa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function poa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _oa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function boa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function voa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Foa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Toa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Moa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Coa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function woa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Loa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $oa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function koa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Soa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Roa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Poa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Boa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ioa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Noa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function joa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Doa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Goa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ooa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Voa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Woa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hoa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uoa($){let g,v,u,f,p,d,h,Ao,Ii,Xm,dt,Ni,qi,Oy,zm,Oe,Qe,ji,Dn,Vy,Gn,On,Xy,Di,Vn,zy,Gi,Wm,Ia,He,Ae,$R,Oi,kR,SR,Lo,Na,RR,Qm,PR,eYe,BWe,Vi,Hm,Kne,Wy,oYe,Zne,rYe,IWe,Xn,tYe,ese,aYe,nYe,ose,sYe,lYe,NWe,Qy,qWe,BR,iYe,jWe,Um,DWe,Xi,Jm,rse,Hy,dYe,tse,cYe,GWe,yo,Uy,mYe,Jy,fYe,IR,gYe,hYe,uYe,Yy,pYe,ase,_Ye,bYe,vYe,$r,Ky,FYe,nse,TYe,MYe,zi,EYe,sse,CYe,wYe,lse,AYe,LYe,yYe,A,Ym,ise,xYe,$Ye,NR,kYe,SYe,RYe,Km,dse,PYe,BYe,qR,IYe,NYe,qYe,Zm,cse,jYe,DYe,jR,GYe,OYe,VYe,ef,mse,XYe,zYe,DR,WYe,QYe,HYe,of,fse,UYe,JYe,GR,YYe,KYe,ZYe,rf,gse,eKe,oKe,OR,rKe,tKe,aKe,tf,hse,nKe,sKe,VR,lKe,iKe,dKe,af,use,cKe,mKe,XR,fKe,gKe,hKe,nf,pse,uKe,pKe,zR,_Ke,bKe,vKe,sf,_se,FKe,TKe,WR,MKe,EKe,CKe,lf,bse,wKe,AKe,QR,LKe,yKe,xKe,df,vse,$Ke,kKe,HR,SKe,RKe,PKe,cf,Fse,BKe,IKe,UR,NKe,qKe,jKe,mf,Tse,DKe,GKe,JR,OKe,VKe,XKe,ff,Mse,zKe,WKe,YR,QKe,HKe,UKe,gf,Ese,JKe,YKe,KR,KKe,ZKe,eZe,hf,Cse,oZe,rZe,ZR,tZe,aZe,nZe,uf,wse,sZe,lZe,eP,iZe,dZe,cZe,pf,Ase,mZe,fZe,oP,gZe,hZe,uZe,_f,Lse,pZe,_Ze,rP,bZe,vZe,FZe,bf,yse,TZe,MZe,tP,EZe,CZe,wZe,vf,xse,AZe,LZe,aP,yZe,xZe,$Ze,Ff,$se,kZe,SZe,nP,RZe,PZe,BZe,Tf,kse,IZe,NZe,sP,qZe,jZe,DZe,Mf,Sse,GZe,OZe,lP,VZe,XZe,zZe,Ef,Rse,WZe,QZe,iP,HZe,UZe,JZe,Cf,Pse,YZe,KZe,dP,ZZe,eeo,oeo,wf,Bse,reo,teo,cP,aeo,neo,seo,Af,Ise,leo,ieo,mP,deo,ceo,meo,Lf,Nse,feo,geo,fP,heo,ueo,peo,yf,qse,_eo,beo,gP,veo,Feo,Teo,xf,jse,Meo,Eeo,hP,Ceo,weo,Aeo,$f,Dse,Leo,yeo,uP,xeo,$eo,keo,kf,Gse,Seo,Reo,pP,Peo,Beo,Ieo,Sf,Ose,Neo,qeo,_P,jeo,Deo,Geo,Rf,Vse,Oeo,Veo,bP,Xeo,zeo,Weo,Pf,Xse,Qeo,Heo,vP,Ueo,Jeo,Yeo,Bf,zse,Keo,Zeo,FP,eoo,ooo,roo,If,Wse,too,aoo,TP,noo,soo,loo,Nf,Qse,ioo,doo,MP,coo,moo,foo,qf,Hse,goo,hoo,EP,uoo,poo,_oo,jf,Use,boo,voo,CP,Foo,Too,Moo,Df,Jse,Eoo,Coo,wP,woo,Aoo,Loo,Gf,Yse,yoo,xoo,AP,$oo,koo,Soo,Of,Kse,Roo,Poo,LP,Boo,Ioo,Noo,Vf,Zse,qoo,joo,yP,Doo,Goo,Ooo,Xf,ele,Voo,Xoo,xP,zoo,Woo,Qoo,zf,ole,Hoo,Uoo,$P,Joo,Yoo,Koo,Wf,rle,Zoo,ero,kP,oro,rro,tro,Qf,tle,aro,nro,SP,sro,lro,iro,Hf,ale,dro,cro,RP,mro,fro,gro,Uf,nle,hro,uro,PP,pro,_ro,bro,Jf,sle,vro,Fro,BP,Tro,Mro,Ero,Yf,lle,Cro,wro,IP,Aro,Lro,yro,Kf,ile,xro,$ro,NP,kro,Sro,Rro,Zf,dle,Pro,Bro,qP,Iro,Nro,qro,eg,cle,jro,Dro,jP,Gro,Oro,Vro,og,mle,Xro,zro,DP,Wro,Qro,Hro,rg,fle,Uro,Jro,GP,Yro,Kro,Zro,tg,gle,eto,oto,OP,rto,tto,ato,ag,hle,nto,sto,VP,lto,ito,dto,ng,ule,cto,mto,XP,fto,gto,hto,sg,ple,uto,pto,zP,_to,bto,vto,lg,_le,Fto,Tto,WP,Mto,Eto,Cto,ig,ble,wto,Ato,QP,Lto,yto,xto,dg,vle,$to,kto,HP,Sto,Rto,Pto,cg,Fle,Bto,Ito,UP,Nto,qto,jto,mg,Tle,Dto,Gto,JP,Oto,Vto,Xto,fg,Mle,zto,Wto,YP,Qto,Hto,Uto,gg,Ele,Jto,Yto,KP,Kto,Zto,eao,hg,Cle,oao,rao,ZP,tao,aao,nao,ug,wle,sao,lao,eB,iao,dao,cao,pg,Ale,mao,fao,oB,gao,hao,uao,_g,Lle,pao,_ao,rB,bao,vao,Fao,bg,yle,Tao,Mao,tB,Eao,Cao,wao,vg,xle,Aao,Lao,aB,yao,xao,$ao,Fg,$le,kao,Sao,nB,Rao,Pao,Bao,Tg,kle,Iao,Nao,sB,qao,jao,Dao,Mg,Sle,Gao,Oao,lB,Vao,Xao,zao,Eg,Rle,Wao,Qao,iB,Hao,Uao,Jao,Cg,Ple,Yao,Kao,dB,Zao,eno,ono,wg,Ble,rno,tno,cB,ano,nno,sno,Ag,Ile,lno,ino,mB,dno,cno,mno,Lg,Nle,fno,gno,fB,hno,uno,pno,yg,qle,_no,bno,gB,vno,Fno,Tno,xg,jle,Mno,Eno,hB,Cno,wno,Ano,$g,Dle,Lno,yno,uB,xno,$no,kno,kg,Gle,Sno,Rno,pB,Pno,Bno,Ino,Sg,Ole,Nno,qno,_B,jno,Dno,Gno,Rg,Vle,Ono,Vno,bB,Xno,zno,Wno,Pg,Xle,Qno,Hno,vB,Uno,Jno,Yno,Bg,zle,Kno,Zno,FB,eso,oso,rso,Ig,Wle,tso,aso,TB,nso,sso,lso,Ng,Qle,iso,dso,MB,cso,mso,fso,qg,Hle,gso,hso,EB,uso,pso,_so,jg,Ule,bso,vso,CB,Fso,Tso,Mso,Dg,Jle,Eso,Cso,wB,wso,Aso,Lso,Gg,Yle,yso,xso,AB,$so,kso,Sso,Og,Kle,Rso,Pso,LB,Bso,Iso,Nso,Vg,Zle,qso,jso,yB,Dso,Gso,Oso,Xg,eie,Vso,Xso,xB,zso,Wso,Qso,zg,oie,Hso,Uso,$B,Jso,Yso,Kso,Wg,rie,Zso,elo,kB,olo,rlo,tlo,Qg,tie,alo,nlo,SB,slo,llo,ilo,Hg,aie,dlo,clo,RB,mlo,flo,glo,Ug,nie,hlo,ulo,PB,plo,_lo,blo,Jg,sie,vlo,Flo,BB,Tlo,Mlo,Elo,Yg,lie,Clo,wlo,IB,Alo,Llo,ylo,Kg,iie,xlo,$lo,NB,klo,Slo,Rlo,Zg,die,Plo,Blo,qB,Ilo,Nlo,qlo,eh,cie,jlo,Dlo,jB,Glo,Olo,Vlo,oh,mie,Xlo,zlo,DB,Wlo,Qlo,Hlo,rh,fie,Ulo,Jlo,GB,Ylo,Klo,Zlo,th,gie,eio,oio,OB,rio,tio,aio,ah,hie,nio,sio,VB,lio,iio,dio,nh,uie,cio,mio,XB,fio,gio,hio,sh,pie,uio,pio,zB,_io,bio,vio,lh,_ie,Fio,Tio,WB,Mio,Eio,Cio,ih,bie,wio,Aio,QB,Lio,yio,xio,dh,vie,$io,kio,HB,Sio,Rio,Pio,ch,Fie,Bio,Iio,UB,Nio,qio,jio,mh,Dio,fh,Zy,Gio,Tie,Oio,OWe,Wi,gh,Mie,e8,Vio,Eie,Xio,VWe,xo,o8,zio,r8,Wio,JB,Qio,Hio,Uio,t8,Jio,Cie,Yio,Kio,Zio,kr,a8,edo,wie,odo,rdo,qa,tdo,Aie,ado,ndo,Lie,sdo,ldo,yie,ido,ddo,cdo,k,zn,xie,mdo,fdo,YB,gdo,hdo,KB,udo,pdo,_do,Wn,$ie,bdo,vdo,ZB,Fdo,Tdo,eI,Mdo,Edo,Cdo,Qn,kie,wdo,Ado,oI,Ldo,ydo,rI,xdo,$do,kdo,hh,Sie,Sdo,Rdo,tI,Pdo,Bdo,Ido,Hn,Rie,Ndo,qdo,aI,jdo,Ddo,nI,Gdo,Odo,Vdo,uh,Pie,Xdo,zdo,sI,Wdo,Qdo,Hdo,ph,Bie,Udo,Jdo,lI,Ydo,Kdo,Zdo,_h,Iie,eco,oco,iI,rco,tco,aco,Un,Nie,nco,sco,dI,lco,ico,cI,dco,cco,mco,Jn,qie,fco,gco,mI,hco,uco,fI,pco,_co,bco,Yn,jie,vco,Fco,gI,Tco,Mco,hI,Eco,Cco,wco,bh,Die,Aco,Lco,uI,yco,xco,$co,vh,Gie,kco,Sco,pI,Rco,Pco,Bco,Fh,Oie,Ico,Nco,_I,qco,jco,Dco,Kn,Vie,Gco,Oco,bI,Vco,Xco,vI,zco,Wco,Qco,Th,Xie,Hco,Uco,FI,Jco,Yco,Kco,Zn,zie,Zco,emo,TI,omo,rmo,MI,tmo,amo,nmo,es,Wie,smo,lmo,EI,imo,dmo,CI,cmo,mmo,fmo,os,Qie,gmo,hmo,wI,umo,pmo,AI,_mo,bmo,vmo,rs,Hie,Fmo,Tmo,LI,Mmo,Emo,yI,Cmo,wmo,Amo,Mh,Uie,Lmo,ymo,xI,xmo,$mo,kmo,ts,Jie,Smo,Rmo,$I,Pmo,Bmo,kI,Imo,Nmo,qmo,as,Yie,jmo,Dmo,SI,Gmo,Omo,RI,Vmo,Xmo,zmo,ns,Kie,Wmo,Qmo,PI,Hmo,Umo,BI,Jmo,Ymo,Kmo,ss,Zie,Zmo,efo,II,ofo,rfo,NI,tfo,afo,nfo,ls,ede,sfo,lfo,qI,ifo,dfo,jI,cfo,mfo,ffo,is,ode,gfo,hfo,DI,ufo,pfo,GI,_fo,bfo,vfo,Eh,rde,Ffo,Tfo,OI,Mfo,Efo,Cfo,ds,tde,wfo,Afo,VI,Lfo,yfo,XI,xfo,$fo,kfo,Ch,ade,Sfo,Rfo,zI,Pfo,Bfo,Ifo,cs,nde,Nfo,qfo,WI,jfo,Dfo,QI,Gfo,Ofo,Vfo,ms,sde,Xfo,zfo,HI,Wfo,Qfo,UI,Hfo,Ufo,Jfo,fs,lde,Yfo,Kfo,JI,Zfo,ego,YI,ogo,rgo,tgo,wh,ide,ago,ngo,KI,sgo,lgo,igo,gs,dde,dgo,cgo,ZI,mgo,fgo,eN,ggo,hgo,ugo,hs,cde,pgo,_go,oN,bgo,vgo,rN,Fgo,Tgo,Mgo,us,mde,Ego,Cgo,tN,wgo,Ago,aN,Lgo,ygo,xgo,Ah,fde,$go,kgo,nN,Sgo,Rgo,Pgo,ps,gde,Bgo,Igo,sN,Ngo,qgo,lN,jgo,Dgo,Ggo,_s,hde,Ogo,Vgo,iN,Xgo,zgo,dN,Wgo,Qgo,Hgo,bs,ude,Ugo,Jgo,cN,Ygo,Kgo,mN,Zgo,eho,oho,vs,pde,rho,tho,fN,aho,nho,gN,sho,lho,iho,Fs,_de,dho,cho,hN,mho,fho,uN,gho,hho,uho,Ts,bde,pho,_ho,pN,bho,vho,_N,Fho,Tho,Mho,Ms,vde,Eho,Cho,bN,who,Aho,vN,Lho,yho,xho,Es,Fde,$ho,kho,FN,Sho,Rho,TN,Pho,Bho,Iho,Lh,Tde,Nho,qho,MN,jho,Dho,Gho,Cs,Mde,Oho,Vho,EN,Xho,zho,CN,Who,Qho,Hho,yh,Ede,Uho,Jho,wN,Yho,Kho,Zho,xh,Cde,euo,ouo,AN,ruo,tuo,auo,ws,wde,nuo,suo,LN,luo,iuo,yN,duo,cuo,muo,As,Ade,fuo,guo,xN,huo,uuo,$N,puo,_uo,buo,Ls,Lde,vuo,Fuo,kN,Tuo,Muo,SN,Euo,Cuo,wuo,$h,yde,Auo,Luo,RN,yuo,xuo,$uo,ys,xde,kuo,Suo,PN,Ruo,Puo,BN,Buo,Iuo,Nuo,xs,$de,quo,juo,IN,Duo,Guo,NN,Ouo,Vuo,Xuo,$s,kde,zuo,Wuo,qN,Quo,Huo,jN,Uuo,Juo,Yuo,ks,Sde,Kuo,Zuo,DN,epo,opo,GN,rpo,tpo,apo,Ss,Rde,npo,spo,ON,lpo,ipo,VN,dpo,cpo,mpo,Rs,Pde,fpo,gpo,XN,hpo,upo,zN,ppo,_po,bpo,Ps,Bde,vpo,Fpo,WN,Tpo,Mpo,QN,Epo,Cpo,wpo,Bs,Ide,Apo,Lpo,HN,ypo,xpo,UN,$po,kpo,Spo,kh,Nde,Rpo,Ppo,JN,Bpo,Ipo,Npo,Is,qde,qpo,jpo,YN,Dpo,Gpo,KN,Opo,Vpo,Xpo,Ns,jde,zpo,Wpo,ZN,Qpo,Hpo,eq,Upo,Jpo,Ypo,Sh,Dde,Kpo,Zpo,oq,e_o,o_o,r_o,Rh,Gde,t_o,a_o,rq,n_o,s_o,l_o,Ph,Ode,i_o,d_o,tq,c_o,m_o,f_o,Bh,Vde,g_o,h_o,aq,u_o,p_o,__o,qs,Xde,b_o,v_o,nq,F_o,T_o,sq,M_o,E_o,C_o,Ih,zde,w_o,A_o,lq,L_o,y_o,x_o,js,Wde,$_o,k_o,iq,S_o,R_o,dq,P_o,B_o,I_o,Ds,Qde,N_o,q_o,cq,j_o,D_o,mq,G_o,O_o,V_o,Gs,Hde,X_o,z_o,fq,W_o,Q_o,gq,H_o,U_o,J_o,Os,Ude,Y_o,K_o,hq,Z_o,e2o,uq,o2o,r2o,t2o,Vs,Jde,a2o,n2o,pq,s2o,l2o,_q,i2o,d2o,c2o,Xs,Yde,m2o,f2o,bq,g2o,h2o,vq,u2o,p2o,_2o,Nh,Kde,b2o,v2o,Fq,F2o,T2o,M2o,qh,Zde,E2o,C2o,Tq,w2o,A2o,L2o,zs,ece,y2o,x2o,Mq,$2o,k2o,Eq,S2o,R2o,P2o,Ws,oce,B2o,I2o,Cq,N2o,q2o,wq,j2o,D2o,G2o,Qs,rce,O2o,V2o,Aq,X2o,z2o,Lq,W2o,Q2o,H2o,jh,tce,U2o,J2o,yq,Y2o,K2o,Z2o,Dh,ace,ebo,obo,xq,rbo,tbo,abo,Gh,nce,nbo,sbo,$q,lbo,ibo,dbo,Hs,sce,cbo,mbo,kq,fbo,gbo,Sq,hbo,ubo,pbo,Us,lce,_bo,bbo,Rq,vbo,Fbo,Pq,Tbo,Mbo,Ebo,Oh,ice,Cbo,wbo,Bq,Abo,Lbo,ybo,Vh,dce,xbo,$bo,Iq,kbo,Sbo,Rbo,Xh,cce,Pbo,Bbo,Nq,Ibo,Nbo,qbo,Js,mce,jbo,Dbo,qq,Gbo,Obo,jq,Vbo,Xbo,zbo,zh,fce,Wbo,Qbo,Dq,Hbo,Ubo,Jbo,Wh,gce,Ybo,Kbo,Gq,Zbo,evo,ovo,Ys,hce,rvo,tvo,Oq,avo,nvo,Vq,svo,lvo,ivo,Ks,uce,dvo,cvo,Xq,mvo,fvo,zq,gvo,hvo,uvo,Zs,pce,pvo,_vo,Wq,bvo,vvo,Qq,Fvo,Tvo,Mvo,el,_ce,Evo,Cvo,Hq,wvo,Avo,Uq,Lvo,yvo,xvo,Qh,$vo,Hh,n8,kvo,bce,Svo,XWe,Qi,Uh,vce,s8,Rvo,Fce,Pvo,zWe,$o,l8,Bvo,i8,Ivo,Jq,Nvo,qvo,jvo,d8,Dvo,Tce,Gvo,Ovo,Vvo,Ue,c8,Xvo,Mce,zvo,Wvo,ja,Qvo,Ece,Hvo,Uvo,Cce,Jvo,Yvo,wce,Kvo,Zvo,e1o,H,Jh,Ace,o1o,r1o,Yq,t1o,a1o,n1o,Yh,Lce,s1o,l1o,Kq,i1o,d1o,c1o,Kh,yce,m1o,f1o,Zq,g1o,h1o,u1o,Zh,xce,p1o,_1o,ej,b1o,v1o,F1o,eu,$ce,T1o,M1o,oj,E1o,C1o,w1o,ou,kce,A1o,L1o,rj,y1o,x1o,$1o,ru,Sce,k1o,S1o,tj,R1o,P1o,B1o,tu,Rce,I1o,N1o,aj,q1o,j1o,D1o,au,Pce,G1o,O1o,nj,V1o,X1o,z1o,nu,Bce,W1o,Q1o,sj,H1o,U1o,J1o,su,Ice,Y1o,K1o,lj,Z1o,eFo,oFo,lu,Nce,rFo,tFo,ij,aFo,nFo,sFo,iu,qce,lFo,iFo,dj,dFo,cFo,mFo,du,jce,fFo,gFo,cj,hFo,uFo,pFo,cu,Dce,_Fo,bFo,mj,vFo,FFo,TFo,mu,Gce,MFo,EFo,fj,CFo,wFo,AFo,fu,Oce,LFo,yFo,gj,xFo,$Fo,kFo,gu,Vce,SFo,RFo,hj,PFo,BFo,IFo,hu,Xce,NFo,qFo,uj,jFo,DFo,GFo,uu,zce,OFo,VFo,pj,XFo,zFo,WFo,pu,Wce,QFo,HFo,_j,UFo,JFo,YFo,_u,Qce,KFo,ZFo,bj,eTo,oTo,rTo,bu,Hce,tTo,aTo,vj,nTo,sTo,lTo,vu,Uce,iTo,dTo,Fj,cTo,mTo,fTo,Fu,Jce,gTo,hTo,Tj,uTo,pTo,_To,Tu,Yce,bTo,vTo,Mj,FTo,TTo,MTo,Mu,Kce,ETo,CTo,Ej,wTo,ATo,LTo,Eu,Zce,yTo,xTo,Cj,$To,kTo,STo,Cu,eme,RTo,PTo,wj,BTo,ITo,NTo,wu,ome,qTo,jTo,Aj,DTo,GTo,OTo,Au,rme,VTo,XTo,Lj,zTo,WTo,QTo,Lu,tme,HTo,UTo,yj,JTo,YTo,KTo,yu,ame,ZTo,eMo,xj,oMo,rMo,tMo,xu,nme,aMo,nMo,$j,sMo,lMo,iMo,$u,sme,dMo,cMo,kj,mMo,fMo,gMo,ku,lme,hMo,uMo,Sj,pMo,_Mo,bMo,Su,ime,vMo,FMo,Rj,TMo,MMo,EMo,Ru,CMo,Pu,wMo,Bu,m8,AMo,dme,LMo,WWe,Hi,Iu,cme,f8,yMo,mme,xMo,QWe,ko,g8,$Mo,h8,kMo,Pj,SMo,RMo,PMo,u8,BMo,fme,IMo,NMo,qMo,Je,p8,jMo,gme,DMo,GMo,Ui,OMo,hme,VMo,XMo,ume,zMo,WMo,QMo,me,Nu,pme,HMo,UMo,Bj,JMo,YMo,KMo,qu,_me,ZMo,eEo,Ij,oEo,rEo,tEo,ju,bme,aEo,nEo,Nj,sEo,lEo,iEo,Du,vme,dEo,cEo,qj,mEo,fEo,gEo,Gu,Fme,hEo,uEo,jj,pEo,_Eo,bEo,Ou,Tme,vEo,FEo,Dj,TEo,MEo,EEo,Vu,Mme,CEo,wEo,Gj,AEo,LEo,yEo,Xu,Eme,xEo,$Eo,Oj,kEo,SEo,REo,zu,Cme,PEo,BEo,Vj,IEo,NEo,qEo,Wu,wme,jEo,DEo,Xj,GEo,OEo,VEo,Qu,Ame,XEo,zEo,zj,WEo,QEo,HEo,Hu,Lme,UEo,JEo,Wj,YEo,KEo,ZEo,Uu,yme,e4o,o4o,Qj,r4o,t4o,a4o,Ju,xme,n4o,s4o,Hj,l4o,i4o,d4o,Yu,$me,c4o,m4o,Uj,f4o,g4o,h4o,Ku,kme,u4o,p4o,Jj,_4o,b4o,v4o,Zu,Sme,F4o,T4o,Yj,M4o,E4o,C4o,ep,Rme,w4o,A4o,Kj,L4o,y4o,x4o,op,Pme,$4o,k4o,Zj,S4o,R4o,P4o,rp,B4o,tp,I4o,ap,_8,N4o,Bme,q4o,HWe,Ji,np,Ime,b8,j4o,Nme,D4o,UWe,So,v8,G4o,Yi,O4o,eD,V4o,X4o,oD,z4o,W4o,Q4o,F8,H4o,qme,U4o,J4o,Y4o,ct,T8,K4o,jme,Z4o,eCo,Ki,oCo,Dme,rCo,tCo,rD,aCo,nCo,sCo,sp,lCo,Ye,M8,iCo,Gme,dCo,cCo,Da,mCo,Ome,fCo,gCo,Vme,hCo,uCo,Xme,pCo,_Co,bCo,y,lp,zme,vCo,FCo,tD,TCo,MCo,ECo,ip,Wme,CCo,wCo,aD,ACo,LCo,yCo,dp,Qme,xCo,$Co,nD,kCo,SCo,RCo,cp,Hme,PCo,BCo,sD,ICo,NCo,qCo,mp,Ume,jCo,DCo,lD,GCo,OCo,VCo,fp,Jme,XCo,zCo,iD,WCo,QCo,HCo,gp,Yme,UCo,JCo,dD,YCo,KCo,ZCo,hp,Kme,e5o,o5o,cD,r5o,t5o,a5o,up,Zme,n5o,s5o,mD,l5o,i5o,d5o,pp,efe,c5o,m5o,fD,f5o,g5o,h5o,_p,ofe,u5o,p5o,gD,_5o,b5o,v5o,bp,rfe,F5o,T5o,hD,M5o,E5o,C5o,vp,tfe,w5o,A5o,uD,L5o,y5o,x5o,Fp,afe,$5o,k5o,pD,S5o,R5o,P5o,Tp,nfe,B5o,I5o,_D,N5o,q5o,j5o,Mp,sfe,D5o,G5o,bD,O5o,V5o,X5o,Ep,lfe,z5o,W5o,vD,Q5o,H5o,U5o,Cp,ife,J5o,Y5o,FD,K5o,Z5o,e3o,wp,dfe,o3o,r3o,TD,t3o,a3o,n3o,Ap,cfe,s3o,l3o,MD,i3o,d3o,c3o,Lp,mfe,m3o,f3o,ED,g3o,h3o,u3o,yp,ffe,p3o,_3o,CD,b3o,v3o,F3o,xp,gfe,T3o,M3o,wD,E3o,C3o,w3o,$p,hfe,A3o,L3o,AD,y3o,x3o,$3o,kp,ufe,k3o,S3o,LD,R3o,P3o,B3o,Sp,pfe,I3o,N3o,yD,q3o,j3o,D3o,Rp,_fe,G3o,O3o,xD,V3o,X3o,z3o,Pp,bfe,W3o,Q3o,$D,H3o,U3o,J3o,Bp,vfe,Y3o,K3o,kD,Z3o,e0o,o0o,Ip,Ffe,r0o,t0o,SD,a0o,n0o,s0o,Np,Tfe,l0o,i0o,RD,d0o,c0o,m0o,qp,Mfe,f0o,g0o,PD,h0o,u0o,p0o,jp,Efe,_0o,b0o,BD,v0o,F0o,T0o,Dp,Cfe,M0o,E0o,ID,C0o,w0o,A0o,ol,wfe,L0o,y0o,ND,x0o,$0o,qD,k0o,S0o,R0o,Gp,Afe,P0o,B0o,jD,I0o,N0o,q0o,Op,Lfe,j0o,D0o,DD,G0o,O0o,V0o,Vp,yfe,X0o,z0o,GD,W0o,Q0o,H0o,Xp,xfe,U0o,J0o,OD,Y0o,K0o,Z0o,zp,$fe,ewo,owo,VD,rwo,two,awo,Wp,kfe,nwo,swo,XD,lwo,iwo,dwo,Qp,Sfe,cwo,mwo,zD,fwo,gwo,hwo,Hp,Rfe,uwo,pwo,WD,_wo,bwo,vwo,Up,Pfe,Fwo,Two,QD,Mwo,Ewo,Cwo,Jp,Bfe,wwo,Awo,HD,Lwo,ywo,xwo,Yp,Ife,$wo,kwo,UD,Swo,Rwo,Pwo,Kp,Nfe,Bwo,Iwo,JD,Nwo,qwo,jwo,Zp,qfe,Dwo,Gwo,YD,Owo,Vwo,Xwo,e_,jfe,zwo,Wwo,KD,Qwo,Hwo,Uwo,o_,Dfe,Jwo,Ywo,ZD,Kwo,Zwo,e6o,r_,Gfe,o6o,r6o,eG,t6o,a6o,n6o,t_,Ofe,s6o,l6o,oG,i6o,d6o,c6o,a_,Vfe,m6o,f6o,rG,g6o,h6o,u6o,n_,Xfe,p6o,_6o,tG,b6o,v6o,F6o,s_,zfe,T6o,M6o,aG,E6o,C6o,w6o,l_,Wfe,A6o,L6o,nG,y6o,x6o,$6o,i_,Qfe,k6o,S6o,sG,R6o,P6o,B6o,d_,Hfe,I6o,N6o,lG,q6o,j6o,D6o,c_,Ufe,G6o,O6o,iG,V6o,X6o,z6o,m_,Jfe,W6o,Q6o,dG,H6o,U6o,J6o,f_,Yfe,Y6o,K6o,cG,Z6o,eAo,oAo,g_,Kfe,rAo,tAo,mG,aAo,nAo,sAo,h_,Zfe,lAo,iAo,fG,dAo,cAo,mAo,u_,ege,fAo,gAo,gG,hAo,uAo,pAo,p_,oge,_Ao,bAo,hG,vAo,FAo,TAo,__,rge,MAo,EAo,uG,CAo,wAo,AAo,b_,tge,LAo,yAo,pG,xAo,$Ao,kAo,v_,age,SAo,RAo,_G,PAo,BAo,IAo,F_,nge,NAo,qAo,bG,jAo,DAo,GAo,T_,sge,OAo,VAo,vG,XAo,zAo,WAo,M_,lge,QAo,HAo,FG,UAo,JAo,YAo,E_,ige,KAo,ZAo,TG,e7o,o7o,r7o,C_,dge,t7o,a7o,MG,n7o,s7o,l7o,w_,cge,i7o,d7o,EG,c7o,m7o,f7o,A_,mge,g7o,h7o,CG,u7o,p7o,_7o,L_,fge,b7o,v7o,wG,F7o,T7o,M7o,y_,gge,E7o,C7o,AG,w7o,A7o,L7o,x_,hge,y7o,x7o,LG,$7o,k7o,S7o,$_,uge,R7o,P7o,yG,B7o,I7o,N7o,k_,pge,q7o,j7o,xG,D7o,G7o,O7o,S_,_ge,V7o,X7o,$G,z7o,W7o,Q7o,R_,bge,H7o,U7o,kG,J7o,Y7o,K7o,P_,vge,Z7o,eLo,SG,oLo,rLo,tLo,B_,Fge,aLo,nLo,RG,sLo,lLo,iLo,I_,Tge,dLo,cLo,PG,mLo,fLo,gLo,N_,Mge,hLo,uLo,BG,pLo,_Lo,bLo,q_,Ege,vLo,FLo,IG,TLo,MLo,ELo,j_,Cge,CLo,wLo,NG,ALo,LLo,yLo,D_,wge,xLo,$Lo,qG,kLo,SLo,RLo,G_,Age,PLo,BLo,jG,ILo,NLo,qLo,O_,Lge,jLo,DLo,DG,GLo,OLo,VLo,V_,yge,XLo,zLo,GG,WLo,QLo,HLo,X_,xge,ULo,JLo,OG,YLo,KLo,ZLo,z_,$ge,eyo,oyo,VG,ryo,tyo,ayo,W_,kge,nyo,syo,XG,lyo,iyo,dyo,Q_,Sge,cyo,myo,zG,fyo,gyo,hyo,H_,Rge,uyo,pyo,WG,_yo,byo,vyo,U_,Pge,Fyo,Tyo,QG,Myo,Eyo,Cyo,J_,Bge,wyo,Ayo,HG,Lyo,yyo,xyo,Y_,Ige,$yo,kyo,UG,Syo,Ryo,Pyo,K_,Nge,Byo,Iyo,JG,Nyo,qyo,jyo,Z_,qge,Dyo,Gyo,YG,Oyo,Vyo,Xyo,e2,jge,zyo,Wyo,KG,Qyo,Hyo,Uyo,o2,Dge,Jyo,Yyo,ZG,Kyo,Zyo,e8o,r2,Gge,o8o,r8o,eO,t8o,a8o,n8o,t2,Oge,s8o,l8o,oO,i8o,d8o,c8o,a2,Vge,m8o,f8o,rO,g8o,h8o,u8o,n2,Xge,p8o,_8o,tO,b8o,v8o,F8o,s2,zge,T8o,M8o,aO,E8o,C8o,w8o,l2,Wge,A8o,L8o,nO,y8o,x8o,$8o,i2,Qge,k8o,S8o,sO,R8o,P8o,B8o,d2,Hge,I8o,N8o,lO,q8o,j8o,D8o,c2,Uge,G8o,O8o,iO,V8o,X8o,z8o,m2,Jge,W8o,Q8o,dO,H8o,U8o,J8o,f2,Yge,Y8o,K8o,cO,Z8o,e9o,o9o,g2,r9o,Kge,t9o,a9o,Zge,n9o,s9o,h2,JWe,Zi,u2,ehe,E8,l9o,ohe,i9o,YWe,Ro,C8,d9o,ed,c9o,mO,m9o,f9o,fO,g9o,h9o,u9o,w8,p9o,rhe,_9o,b9o,v9o,mt,A8,F9o,the,T9o,M9o,od,E9o,ahe,C9o,w9o,gO,A9o,L9o,y9o,p2,x9o,Ke,L8,$9o,nhe,k9o,S9o,Ga,R9o,she,P9o,B9o,lhe,I9o,N9o,ihe,q9o,j9o,D9o,G,_2,dhe,G9o,O9o,hO,V9o,X9o,z9o,b2,che,W9o,Q9o,uO,H9o,U9o,J9o,v2,mhe,Y9o,K9o,pO,Z9o,exo,oxo,F2,fhe,rxo,txo,_O,axo,nxo,sxo,T2,ghe,lxo,ixo,bO,dxo,cxo,mxo,M2,hhe,fxo,gxo,vO,hxo,uxo,pxo,E2,uhe,_xo,bxo,FO,vxo,Fxo,Txo,C2,phe,Mxo,Exo,TO,Cxo,wxo,Axo,w2,_he,Lxo,yxo,MO,xxo,$xo,kxo,A2,bhe,Sxo,Rxo,EO,Pxo,Bxo,Ixo,L2,vhe,Nxo,qxo,CO,jxo,Dxo,Gxo,y2,Fhe,Oxo,Vxo,wO,Xxo,zxo,Wxo,x2,The,Qxo,Hxo,AO,Uxo,Jxo,Yxo,$2,Mhe,Kxo,Zxo,LO,e$o,o$o,r$o,k2,Ehe,t$o,a$o,yO,n$o,s$o,l$o,S2,Che,i$o,d$o,xO,c$o,m$o,f$o,R2,whe,g$o,h$o,$O,u$o,p$o,_$o,P2,Ahe,b$o,v$o,kO,F$o,T$o,M$o,B2,Lhe,E$o,C$o,SO,w$o,A$o,L$o,I2,yhe,y$o,x$o,RO,$$o,k$o,S$o,N2,xhe,R$o,P$o,PO,B$o,I$o,N$o,q2,$he,q$o,j$o,BO,D$o,G$o,O$o,j2,khe,V$o,X$o,IO,z$o,W$o,Q$o,D2,She,H$o,U$o,NO,J$o,Y$o,K$o,G2,Rhe,Z$o,eko,qO,oko,rko,tko,O2,Phe,ako,nko,jO,sko,lko,iko,V2,Bhe,dko,cko,DO,mko,fko,gko,X2,Ihe,hko,uko,GO,pko,_ko,bko,z2,Nhe,vko,Fko,OO,Tko,Mko,Eko,W2,qhe,Cko,wko,VO,Ako,Lko,yko,Q2,jhe,xko,$ko,XO,kko,Sko,Rko,H2,Dhe,Pko,Bko,zO,Iko,Nko,qko,U2,Ghe,jko,Dko,WO,Gko,Oko,Vko,J2,Ohe,Xko,zko,QO,Wko,Qko,Hko,Y2,Vhe,Uko,Jko,HO,Yko,Kko,Zko,K2,Xhe,eSo,oSo,UO,rSo,tSo,aSo,Z2,zhe,nSo,sSo,JO,lSo,iSo,dSo,eb,Whe,cSo,mSo,YO,fSo,gSo,hSo,ob,Qhe,uSo,pSo,KO,_So,bSo,vSo,rb,Hhe,FSo,TSo,ZO,MSo,ESo,CSo,tb,Uhe,wSo,ASo,eV,LSo,ySo,xSo,ab,Jhe,$So,kSo,oV,SSo,RSo,PSo,nb,Yhe,BSo,ISo,rV,NSo,qSo,jSo,sb,Khe,DSo,GSo,tV,OSo,VSo,XSo,lb,Zhe,zSo,WSo,aV,QSo,HSo,USo,ib,eue,JSo,YSo,nV,KSo,ZSo,eRo,db,oue,oRo,rRo,sV,tRo,aRo,nRo,cb,sRo,rue,lRo,iRo,tue,dRo,cRo,mb,KWe,rd,fb,aue,y8,mRo,nue,fRo,ZWe,Po,x8,gRo,td,hRo,lV,uRo,pRo,iV,_Ro,bRo,vRo,$8,FRo,sue,TRo,MRo,ERo,ft,k8,CRo,lue,wRo,ARo,ad,LRo,iue,yRo,xRo,dV,$Ro,kRo,SRo,gb,RRo,Ze,S8,PRo,due,BRo,IRo,Oa,NRo,cue,qRo,jRo,mue,DRo,GRo,fue,ORo,VRo,XRo,z,hb,gue,zRo,WRo,cV,QRo,HRo,URo,ub,hue,JRo,YRo,mV,KRo,ZRo,ePo,pb,uue,oPo,rPo,fV,tPo,aPo,nPo,_b,pue,sPo,lPo,gV,iPo,dPo,cPo,bb,_ue,mPo,fPo,hV,gPo,hPo,uPo,vb,bue,pPo,_Po,uV,bPo,vPo,FPo,Fb,vue,TPo,MPo,pV,EPo,CPo,wPo,Tb,Fue,APo,LPo,_V,yPo,xPo,$Po,Mb,Tue,kPo,SPo,bV,RPo,PPo,BPo,Eb,Mue,IPo,NPo,vV,qPo,jPo,DPo,Cb,Eue,GPo,OPo,FV,VPo,XPo,zPo,wb,Cue,WPo,QPo,TV,HPo,UPo,JPo,Ab,wue,YPo,KPo,MV,ZPo,eBo,oBo,Lb,Aue,rBo,tBo,EV,aBo,nBo,sBo,yb,Lue,lBo,iBo,CV,dBo,cBo,mBo,xb,yue,fBo,gBo,wV,hBo,uBo,pBo,$b,xue,_Bo,bBo,AV,vBo,FBo,TBo,kb,$ue,MBo,EBo,LV,CBo,wBo,ABo,Sb,kue,LBo,yBo,yV,xBo,$Bo,kBo,Rb,Sue,SBo,RBo,xV,PBo,BBo,IBo,Pb,Rue,NBo,qBo,$V,jBo,DBo,GBo,Bb,Pue,OBo,VBo,kV,XBo,zBo,WBo,Ib,Bue,QBo,HBo,SV,UBo,JBo,YBo,Nb,Iue,KBo,ZBo,RV,eIo,oIo,rIo,qb,Nue,tIo,aIo,PV,nIo,sIo,lIo,jb,que,iIo,dIo,BV,cIo,mIo,fIo,Db,jue,gIo,hIo,IV,uIo,pIo,_Io,Gb,Due,bIo,vIo,NV,FIo,TIo,MIo,Ob,Gue,EIo,CIo,qV,wIo,AIo,LIo,Vb,Oue,yIo,xIo,jV,$Io,kIo,SIo,Xb,Vue,RIo,PIo,DV,BIo,IIo,NIo,zb,Xue,qIo,jIo,GV,DIo,GIo,OIo,Wb,zue,VIo,XIo,OV,zIo,WIo,QIo,Qb,Wue,HIo,UIo,VV,JIo,YIo,KIo,Hb,Que,ZIo,eNo,XV,oNo,rNo,tNo,Ub,Hue,aNo,nNo,zV,sNo,lNo,iNo,Jb,Uue,dNo,cNo,WV,mNo,fNo,gNo,Yb,Jue,hNo,uNo,QV,pNo,_No,bNo,Kb,Yue,vNo,FNo,HV,TNo,MNo,ENo,Zb,Kue,CNo,wNo,UV,ANo,LNo,yNo,ev,xNo,Zue,$No,kNo,epe,SNo,RNo,ov,eQe,nd,rv,ope,R8,PNo,rpe,BNo,oQe,Bo,P8,INo,sd,NNo,JV,qNo,jNo,YV,DNo,GNo,ONo,B8,VNo,tpe,XNo,zNo,WNo,gt,I8,QNo,ape,HNo,UNo,ld,JNo,npe,YNo,KNo,KV,ZNo,eqo,oqo,tv,rqo,eo,N8,tqo,spe,aqo,nqo,Va,sqo,lpe,lqo,iqo,ipe,dqo,cqo,dpe,mqo,fqo,gqo,Q,av,cpe,hqo,uqo,ZV,pqo,_qo,bqo,nv,mpe,vqo,Fqo,eX,Tqo,Mqo,Eqo,sv,fpe,Cqo,wqo,oX,Aqo,Lqo,yqo,lv,gpe,xqo,$qo,rX,kqo,Sqo,Rqo,iv,hpe,Pqo,Bqo,tX,Iqo,Nqo,qqo,dv,upe,jqo,Dqo,aX,Gqo,Oqo,Vqo,cv,ppe,Xqo,zqo,nX,Wqo,Qqo,Hqo,mv,_pe,Uqo,Jqo,sX,Yqo,Kqo,Zqo,fv,bpe,ejo,ojo,lX,rjo,tjo,ajo,gv,vpe,njo,sjo,iX,ljo,ijo,djo,hv,Fpe,cjo,mjo,dX,fjo,gjo,hjo,uv,Tpe,ujo,pjo,cX,_jo,bjo,vjo,pv,Mpe,Fjo,Tjo,mX,Mjo,Ejo,Cjo,_v,Epe,wjo,Ajo,fX,Ljo,yjo,xjo,bv,Cpe,$jo,kjo,gX,Sjo,Rjo,Pjo,vv,wpe,Bjo,Ijo,hX,Njo,qjo,jjo,Fv,Ape,Djo,Gjo,uX,Ojo,Vjo,Xjo,Tv,Lpe,zjo,Wjo,pX,Qjo,Hjo,Ujo,Mv,ype,Jjo,Yjo,_X,Kjo,Zjo,eDo,Ev,xpe,oDo,rDo,bX,tDo,aDo,nDo,Cv,$pe,sDo,lDo,vX,iDo,dDo,cDo,wv,kpe,mDo,fDo,FX,gDo,hDo,uDo,Av,Spe,pDo,_Do,TX,bDo,vDo,FDo,Lv,Rpe,TDo,MDo,MX,EDo,CDo,wDo,yv,Ppe,ADo,LDo,EX,yDo,xDo,$Do,xv,Bpe,kDo,SDo,CX,RDo,PDo,BDo,$v,Ipe,IDo,NDo,wX,qDo,jDo,DDo,kv,Npe,GDo,ODo,AX,VDo,XDo,zDo,Sv,qpe,WDo,QDo,LX,HDo,UDo,JDo,Rv,jpe,YDo,KDo,yX,ZDo,eGo,oGo,Pv,Dpe,rGo,tGo,xX,aGo,nGo,sGo,Bv,Gpe,lGo,iGo,$X,dGo,cGo,mGo,Iv,Ope,fGo,gGo,kX,hGo,uGo,pGo,Nv,Vpe,_Go,bGo,Xpe,vGo,FGo,TGo,qv,zpe,MGo,EGo,SX,CGo,wGo,AGo,jv,Wpe,LGo,yGo,RX,xGo,$Go,kGo,Dv,Qpe,SGo,RGo,PX,PGo,BGo,IGo,Gv,Hpe,NGo,qGo,BX,jGo,DGo,GGo,Ov,OGo,Upe,VGo,XGo,Jpe,zGo,WGo,Vv,rQe,id,Xv,Ype,q8,QGo,Kpe,HGo,tQe,Io,j8,UGo,dd,JGo,IX,YGo,KGo,NX,ZGo,eOo,oOo,D8,rOo,Zpe,tOo,aOo,nOo,ht,G8,sOo,e_e,lOo,iOo,cd,dOo,o_e,cOo,mOo,qX,fOo,gOo,hOo,zv,uOo,oo,O8,pOo,r_e,_Oo,bOo,Xa,vOo,t_e,FOo,TOo,a_e,MOo,EOo,n_e,COo,wOo,AOo,fe,Wv,s_e,LOo,yOo,jX,xOo,$Oo,kOo,Qv,l_e,SOo,ROo,DX,POo,BOo,IOo,Hv,i_e,NOo,qOo,GX,jOo,DOo,GOo,Uv,d_e,OOo,VOo,OX,XOo,zOo,WOo,Jv,c_e,QOo,HOo,VX,UOo,JOo,YOo,Yv,m_e,KOo,ZOo,XX,eVo,oVo,rVo,Kv,f_e,tVo,aVo,zX,nVo,sVo,lVo,Zv,g_e,iVo,dVo,WX,cVo,mVo,fVo,e1,h_e,gVo,hVo,QX,uVo,pVo,_Vo,o1,u_e,bVo,vVo,HX,FVo,TVo,MVo,r1,p_e,EVo,CVo,UX,wVo,AVo,LVo,t1,__e,yVo,xVo,JX,$Vo,kVo,SVo,a1,b_e,RVo,PVo,YX,BVo,IVo,NVo,n1,v_e,qVo,jVo,KX,DVo,GVo,OVo,s1,F_e,VVo,XVo,ZX,zVo,WVo,QVo,l1,T_e,HVo,UVo,ez,JVo,YVo,KVo,i1,M_e,ZVo,eXo,oz,oXo,rXo,tXo,d1,E_e,aXo,nXo,rz,sXo,lXo,iXo,c1,C_e,dXo,cXo,tz,mXo,fXo,gXo,m1,hXo,w_e,uXo,pXo,A_e,_Xo,bXo,f1,aQe,md,g1,L_e,V8,vXo,y_e,FXo,nQe,No,X8,TXo,fd,MXo,az,EXo,CXo,nz,wXo,AXo,LXo,z8,yXo,x_e,xXo,$Xo,kXo,ut,W8,SXo,$_e,RXo,PXo,gd,BXo,k_e,IXo,NXo,sz,qXo,jXo,DXo,h1,GXo,ro,Q8,OXo,S_e,VXo,XXo,za,zXo,R_e,WXo,QXo,P_e,HXo,UXo,B_e,JXo,YXo,KXo,B,u1,I_e,ZXo,ezo,lz,ozo,rzo,tzo,p1,N_e,azo,nzo,iz,szo,lzo,izo,_1,q_e,dzo,czo,dz,mzo,fzo,gzo,b1,j_e,hzo,uzo,cz,pzo,_zo,bzo,v1,D_e,vzo,Fzo,mz,Tzo,Mzo,Ezo,F1,G_e,Czo,wzo,fz,Azo,Lzo,yzo,T1,O_e,xzo,$zo,gz,kzo,Szo,Rzo,M1,V_e,Pzo,Bzo,hz,Izo,Nzo,qzo,E1,X_e,jzo,Dzo,uz,Gzo,Ozo,Vzo,C1,z_e,Xzo,zzo,pz,Wzo,Qzo,Hzo,w1,W_e,Uzo,Jzo,_z,Yzo,Kzo,Zzo,A1,Q_e,eWo,oWo,bz,rWo,tWo,aWo,L1,H_e,nWo,sWo,vz,lWo,iWo,dWo,y1,U_e,cWo,mWo,Fz,fWo,gWo,hWo,x1,J_e,uWo,pWo,Tz,_Wo,bWo,vWo,$1,Y_e,FWo,TWo,Mz,MWo,EWo,CWo,k1,K_e,wWo,AWo,Ez,LWo,yWo,xWo,S1,Z_e,$Wo,kWo,Cz,SWo,RWo,PWo,R1,e2e,BWo,IWo,wz,NWo,qWo,jWo,P1,o2e,DWo,GWo,Az,OWo,VWo,XWo,B1,r2e,zWo,WWo,Lz,QWo,HWo,UWo,I1,t2e,JWo,YWo,yz,KWo,ZWo,eQo,N1,a2e,oQo,rQo,xz,tQo,aQo,nQo,q1,n2e,sQo,lQo,$z,iQo,dQo,cQo,j1,s2e,mQo,fQo,kz,gQo,hQo,uQo,D1,l2e,pQo,_Qo,Sz,bQo,vQo,FQo,G1,i2e,TQo,MQo,Rz,EQo,CQo,wQo,O1,d2e,AQo,LQo,Pz,yQo,xQo,$Qo,V1,c2e,kQo,SQo,Bz,RQo,PQo,BQo,X1,m2e,IQo,NQo,Iz,qQo,jQo,DQo,z1,f2e,GQo,OQo,Nz,VQo,XQo,zQo,W1,g2e,WQo,QQo,qz,HQo,UQo,JQo,Q1,h2e,YQo,KQo,jz,ZQo,eHo,oHo,H1,u2e,rHo,tHo,Dz,aHo,nHo,sHo,U1,p2e,lHo,iHo,Gz,dHo,cHo,mHo,J1,_2e,fHo,gHo,Oz,hHo,uHo,pHo,Y1,b2e,_Ho,bHo,Vz,vHo,FHo,THo,K1,v2e,MHo,EHo,Xz,CHo,wHo,AHo,Z1,F2e,LHo,yHo,zz,xHo,$Ho,kHo,eF,T2e,SHo,RHo,Wz,PHo,BHo,IHo,oF,M2e,NHo,qHo,Qz,jHo,DHo,GHo,rF,E2e,OHo,VHo,Hz,XHo,zHo,WHo,tF,C2e,QHo,HHo,Uz,UHo,JHo,YHo,aF,w2e,KHo,ZHo,Jz,eUo,oUo,rUo,nF,A2e,tUo,aUo,Yz,nUo,sUo,lUo,sF,L2e,iUo,dUo,Kz,cUo,mUo,fUo,lF,y2e,gUo,hUo,Zz,uUo,pUo,_Uo,iF,x2e,bUo,vUo,eW,FUo,TUo,MUo,dF,$2e,EUo,CUo,oW,wUo,AUo,LUo,cF,k2e,yUo,xUo,rW,$Uo,kUo,SUo,mF,S2e,RUo,PUo,tW,BUo,IUo,NUo,fF,R2e,qUo,jUo,aW,DUo,GUo,OUo,gF,VUo,P2e,XUo,zUo,B2e,WUo,QUo,hF,sQe,hd,uF,I2e,H8,HUo,N2e,UUo,lQe,qo,U8,JUo,ud,YUo,nW,KUo,ZUo,sW,eJo,oJo,rJo,J8,tJo,q2e,aJo,nJo,sJo,pt,Y8,lJo,j2e,iJo,dJo,pd,cJo,D2e,mJo,fJo,lW,gJo,hJo,uJo,pF,pJo,to,K8,_Jo,G2e,bJo,vJo,Wa,FJo,O2e,TJo,MJo,V2e,EJo,CJo,X2e,wJo,AJo,LJo,Z,_F,z2e,yJo,xJo,iW,$Jo,kJo,SJo,bF,W2e,RJo,PJo,dW,BJo,IJo,NJo,vF,Q2e,qJo,jJo,cW,DJo,GJo,OJo,FF,H2e,VJo,XJo,mW,zJo,WJo,QJo,TF,U2e,HJo,UJo,fW,JJo,YJo,KJo,MF,J2e,ZJo,eYo,gW,oYo,rYo,tYo,EF,Y2e,aYo,nYo,hW,sYo,lYo,iYo,CF,K2e,dYo,cYo,uW,mYo,fYo,gYo,wF,Z2e,hYo,uYo,pW,pYo,_Yo,bYo,AF,ebe,vYo,FYo,_W,TYo,MYo,EYo,LF,obe,CYo,wYo,bW,AYo,LYo,yYo,yF,rbe,xYo,$Yo,vW,kYo,SYo,RYo,xF,tbe,PYo,BYo,FW,IYo,NYo,qYo,$F,abe,jYo,DYo,TW,GYo,OYo,VYo,kF,nbe,XYo,zYo,MW,WYo,QYo,HYo,SF,sbe,UYo,JYo,EW,YYo,KYo,ZYo,RF,lbe,eKo,oKo,CW,rKo,tKo,aKo,PF,ibe,nKo,sKo,wW,lKo,iKo,dKo,BF,dbe,cKo,mKo,AW,fKo,gKo,hKo,IF,cbe,uKo,pKo,LW,_Ko,bKo,vKo,NF,mbe,FKo,TKo,yW,MKo,EKo,CKo,qF,fbe,wKo,AKo,xW,LKo,yKo,xKo,jF,gbe,$Ko,kKo,$W,SKo,RKo,PKo,DF,hbe,BKo,IKo,kW,NKo,qKo,jKo,GF,ube,DKo,GKo,SW,OKo,VKo,XKo,OF,pbe,zKo,WKo,RW,QKo,HKo,UKo,VF,_be,JKo,YKo,PW,KKo,ZKo,eZo,XF,bbe,oZo,rZo,BW,tZo,aZo,nZo,zF,vbe,sZo,lZo,IW,iZo,dZo,cZo,WF,Fbe,mZo,fZo,NW,gZo,hZo,uZo,QF,Tbe,pZo,_Zo,qW,bZo,vZo,FZo,HF,TZo,Mbe,MZo,EZo,Ebe,CZo,wZo,UF,iQe,_d,JF,Cbe,Z8,AZo,wbe,LZo,dQe,jo,e9,yZo,bd,xZo,jW,$Zo,kZo,DW,SZo,RZo,PZo,o9,BZo,Abe,IZo,NZo,qZo,_t,r9,jZo,Lbe,DZo,GZo,vd,OZo,ybe,VZo,XZo,GW,zZo,WZo,QZo,YF,HZo,ao,t9,UZo,xbe,JZo,YZo,Qa,KZo,$be,ZZo,eer,kbe,oer,rer,Sbe,ter,aer,ner,Do,KF,Rbe,ser,ler,OW,ier,der,cer,ZF,Pbe,mer,fer,VW,ger,her,uer,eT,Bbe,per,_er,XW,ber,ver,Fer,oT,Ibe,Ter,Mer,zW,Eer,Cer,wer,rT,Nbe,Aer,Ler,WW,yer,xer,$er,tT,qbe,ker,Ser,QW,Rer,Per,Ber,aT,Ier,jbe,Ner,qer,Dbe,jer,Der,nT,cQe,Fd,sT,Gbe,a9,Ger,Obe,Oer,mQe,Go,n9,Ver,Td,Xer,HW,zer,Wer,UW,Qer,Her,Uer,s9,Jer,Vbe,Yer,Ker,Zer,bt,l9,eor,Xbe,oor,ror,Md,tor,zbe,aor,nor,JW,sor,lor,ior,lT,dor,no,i9,cor,Wbe,mor,gor,Ha,hor,Qbe,uor,por,Hbe,_or,bor,Ube,vor,For,Tor,U,iT,Jbe,Mor,Eor,YW,Cor,wor,Aor,dT,Ybe,Lor,yor,KW,xor,$or,kor,cT,Kbe,Sor,Ror,ZW,Por,Bor,Ior,mT,Zbe,Nor,qor,eQ,jor,Dor,Gor,fT,eve,Oor,Vor,oQ,Xor,zor,Wor,gT,ove,Qor,Hor,rQ,Uor,Jor,Yor,hT,rve,Kor,Zor,tQ,err,orr,rrr,uT,tve,trr,arr,aQ,nrr,srr,lrr,pT,ave,irr,drr,nQ,crr,mrr,frr,_T,nve,grr,hrr,sQ,urr,prr,_rr,bT,sve,brr,vrr,lQ,Frr,Trr,Mrr,vT,lve,Err,Crr,iQ,wrr,Arr,Lrr,FT,ive,yrr,xrr,dQ,$rr,krr,Srr,TT,dve,Rrr,Prr,cQ,Brr,Irr,Nrr,MT,cve,qrr,jrr,mQ,Drr,Grr,Orr,ET,mve,Vrr,Xrr,fQ,zrr,Wrr,Qrr,CT,fve,Hrr,Urr,gQ,Jrr,Yrr,Krr,wT,gve,Zrr,etr,hQ,otr,rtr,ttr,AT,hve,atr,ntr,uQ,str,ltr,itr,LT,uve,dtr,ctr,pQ,mtr,ftr,gtr,yT,pve,htr,utr,_Q,ptr,_tr,btr,xT,_ve,vtr,Ftr,bQ,Ttr,Mtr,Etr,$T,bve,Ctr,wtr,vQ,Atr,Ltr,ytr,kT,vve,xtr,$tr,FQ,ktr,Str,Rtr,ST,Fve,Ptr,Btr,TQ,Itr,Ntr,qtr,RT,Tve,jtr,Dtr,MQ,Gtr,Otr,Vtr,PT,Mve,Xtr,ztr,EQ,Wtr,Qtr,Htr,BT,Eve,Utr,Jtr,CQ,Ytr,Ktr,Ztr,IT,Cve,ear,oar,wQ,rar,tar,aar,NT,wve,nar,sar,AQ,lar,iar,dar,qT,Ave,car,mar,LQ,far,gar,har,jT,Lve,uar,par,yQ,_ar,bar,Far,DT,yve,Tar,Mar,xQ,Ear,Car,war,GT,xve,Aar,Lar,$Q,yar,xar,$ar,OT,$ve,kar,Sar,kQ,Rar,Par,Bar,VT,kve,Iar,Nar,SQ,qar,jar,Dar,XT,Sve,Gar,Oar,RQ,Var,Xar,zar,zT,War,Rve,Qar,Har,Pve,Uar,Jar,WT,fQe,Ed,QT,Bve,d9,Yar,Ive,Kar,gQe,Oo,c9,Zar,Cd,enr,PQ,onr,rnr,BQ,tnr,anr,nnr,m9,snr,Nve,lnr,inr,dnr,vt,f9,cnr,qve,mnr,fnr,wd,gnr,jve,hnr,unr,IQ,pnr,_nr,bnr,HT,vnr,so,g9,Fnr,Dve,Tnr,Mnr,Ua,Enr,Gve,Cnr,wnr,Ove,Anr,Lnr,Vve,ynr,xnr,$nr,V,UT,Xve,knr,Snr,NQ,Rnr,Pnr,Bnr,JT,zve,Inr,Nnr,qQ,qnr,jnr,Dnr,YT,Wve,Gnr,Onr,jQ,Vnr,Xnr,znr,KT,Qve,Wnr,Qnr,DQ,Hnr,Unr,Jnr,ZT,Hve,Ynr,Knr,GQ,Znr,esr,osr,eM,Uve,rsr,tsr,OQ,asr,nsr,ssr,oM,Jve,lsr,isr,VQ,dsr,csr,msr,rM,Yve,fsr,gsr,XQ,hsr,usr,psr,tM,Kve,_sr,bsr,zQ,vsr,Fsr,Tsr,aM,Zve,Msr,Esr,WQ,Csr,wsr,Asr,nM,e1e,Lsr,ysr,QQ,xsr,$sr,ksr,sM,o1e,Ssr,Rsr,HQ,Psr,Bsr,Isr,lM,r1e,Nsr,qsr,UQ,jsr,Dsr,Gsr,iM,t1e,Osr,Vsr,JQ,Xsr,zsr,Wsr,dM,a1e,Qsr,Hsr,YQ,Usr,Jsr,Ysr,cM,n1e,Ksr,Zsr,KQ,elr,olr,rlr,mM,s1e,tlr,alr,ZQ,nlr,slr,llr,fM,l1e,ilr,dlr,eH,clr,mlr,flr,gM,i1e,glr,hlr,oH,ulr,plr,_lr,hM,d1e,blr,vlr,rH,Flr,Tlr,Mlr,uM,c1e,Elr,Clr,tH,wlr,Alr,Llr,pM,m1e,ylr,xlr,aH,$lr,klr,Slr,_M,f1e,Rlr,Plr,nH,Blr,Ilr,Nlr,bM,g1e,qlr,jlr,sH,Dlr,Glr,Olr,vM,h1e,Vlr,Xlr,lH,zlr,Wlr,Qlr,FM,u1e,Hlr,Ulr,iH,Jlr,Ylr,Klr,TM,p1e,Zlr,eir,dH,oir,rir,tir,MM,_1e,air,nir,cH,sir,lir,iir,EM,b1e,dir,cir,mH,mir,fir,gir,CM,v1e,hir,uir,fH,pir,_ir,bir,wM,F1e,vir,Fir,gH,Tir,Mir,Eir,AM,T1e,Cir,wir,hH,Air,Lir,yir,LM,M1e,xir,$ir,uH,kir,Sir,Rir,yM,E1e,Pir,Bir,pH,Iir,Nir,qir,xM,C1e,jir,Dir,_H,Gir,Oir,Vir,$M,w1e,Xir,zir,bH,Wir,Qir,Hir,kM,A1e,Uir,Jir,vH,Yir,Kir,Zir,SM,L1e,edr,odr,FH,rdr,tdr,adr,RM,y1e,ndr,sdr,TH,ldr,idr,ddr,PM,x1e,cdr,mdr,MH,fdr,gdr,hdr,BM,$1e,udr,pdr,EH,_dr,bdr,vdr,IM,k1e,Fdr,Tdr,CH,Mdr,Edr,Cdr,NM,S1e,wdr,Adr,wH,Ldr,ydr,xdr,qM,$dr,R1e,kdr,Sdr,P1e,Rdr,Pdr,jM,hQe,Ad,DM,B1e,h9,Bdr,I1e,Idr,uQe,Vo,u9,Ndr,Ld,qdr,AH,jdr,Ddr,LH,Gdr,Odr,Vdr,p9,Xdr,N1e,zdr,Wdr,Qdr,Ft,_9,Hdr,q1e,Udr,Jdr,yd,Ydr,j1e,Kdr,Zdr,yH,ecr,ocr,rcr,GM,tcr,lo,b9,acr,D1e,ncr,scr,Ja,lcr,G1e,icr,dcr,O1e,ccr,mcr,V1e,fcr,gcr,hcr,X1e,OM,z1e,ucr,pcr,xH,_cr,bcr,vcr,VM,Fcr,W1e,Tcr,Mcr,Q1e,Ecr,Ccr,XM,pQe,xd,zM,H1e,v9,wcr,U1e,Acr,_Qe,Xo,F9,Lcr,$d,ycr,$H,xcr,$cr,kH,kcr,Scr,Rcr,T9,Pcr,J1e,Bcr,Icr,Ncr,Tt,M9,qcr,Y1e,jcr,Dcr,kd,Gcr,K1e,Ocr,Vcr,SH,Xcr,zcr,Wcr,WM,Qcr,io,E9,Hcr,Z1e,Ucr,Jcr,Ya,Ycr,eFe,Kcr,Zcr,oFe,emr,omr,rFe,rmr,tmr,amr,be,QM,tFe,nmr,smr,RH,lmr,imr,dmr,HM,aFe,cmr,mmr,PH,fmr,gmr,hmr,UM,nFe,umr,pmr,BH,_mr,bmr,vmr,JM,sFe,Fmr,Tmr,IH,Mmr,Emr,Cmr,rl,lFe,wmr,Amr,NH,Lmr,ymr,qH,xmr,$mr,kmr,YM,iFe,Smr,Rmr,jH,Pmr,Bmr,Imr,tl,dFe,Nmr,qmr,DH,jmr,Dmr,GH,Gmr,Omr,Vmr,KM,cFe,Xmr,zmr,OH,Wmr,Qmr,Hmr,Mt,mFe,Umr,Jmr,VH,Ymr,Kmr,XH,Zmr,efr,zH,ofr,rfr,tfr,ZM,fFe,afr,nfr,WH,sfr,lfr,ifr,eE,gFe,dfr,cfr,QH,mfr,ffr,gfr,oE,hFe,hfr,ufr,HH,pfr,_fr,bfr,rE,uFe,vfr,Ffr,UH,Tfr,Mfr,Efr,tE,pFe,Cfr,wfr,JH,Afr,Lfr,yfr,aE,_Fe,xfr,$fr,YH,kfr,Sfr,Rfr,nE,bFe,Pfr,Bfr,KH,Ifr,Nfr,qfr,sE,vFe,jfr,Dfr,ZH,Gfr,Ofr,Vfr,lE,Xfr,FFe,zfr,Wfr,TFe,Qfr,Hfr,iE,bQe,Sd,dE,MFe,C9,Ufr,EFe,Jfr,vQe,zo,w9,Yfr,Rd,Kfr,eU,Zfr,egr,oU,ogr,rgr,tgr,A9,agr,CFe,ngr,sgr,lgr,Et,L9,igr,wFe,dgr,cgr,Pd,mgr,AFe,fgr,ggr,rU,hgr,ugr,pgr,cE,_gr,co,y9,bgr,LFe,vgr,Fgr,Ka,Tgr,yFe,Mgr,Egr,xFe,Cgr,wgr,$Fe,Agr,Lgr,ygr,kFe,mE,SFe,xgr,$gr,tU,kgr,Sgr,Rgr,fE,Pgr,RFe,Bgr,Igr,PFe,Ngr,qgr,gE,FQe,Bd,hE,BFe,x9,jgr,IFe,Dgr,TQe,Wo,$9,Ggr,Id,Ogr,aU,Vgr,Xgr,nU,zgr,Wgr,Qgr,k9,Hgr,NFe,Ugr,Jgr,Ygr,Ct,S9,Kgr,qFe,Zgr,ehr,Nd,ohr,jFe,rhr,thr,sU,ahr,nhr,shr,uE,lhr,mo,R9,ihr,DFe,dhr,chr,Za,mhr,GFe,fhr,ghr,OFe,hhr,uhr,VFe,phr,_hr,bhr,XFe,pE,zFe,vhr,Fhr,lU,Thr,Mhr,Ehr,_E,Chr,WFe,whr,Ahr,QFe,Lhr,yhr,bE,MQe,qd,vE,HFe,P9,xhr,UFe,$hr,EQe,Qo,B9,khr,jd,Shr,iU,Rhr,Phr,dU,Bhr,Ihr,Nhr,I9,qhr,JFe,jhr,Dhr,Ghr,wt,N9,Ohr,YFe,Vhr,Xhr,Dd,zhr,KFe,Whr,Qhr,cU,Hhr,Uhr,Jhr,FE,Yhr,fo,q9,Khr,ZFe,Zhr,eur,en,our,eTe,rur,tur,oTe,aur,nur,rTe,sur,lur,iur,tTe,TE,aTe,dur,cur,mU,mur,fur,gur,ME,hur,nTe,uur,pur,sTe,_ur,bur,EE,CQe,Gd,CE,lTe,j9,vur,iTe,Fur,wQe,Ho,D9,Tur,Od,Mur,fU,Eur,Cur,gU,wur,Aur,Lur,G9,yur,dTe,xur,$ur,kur,At,O9,Sur,cTe,Rur,Pur,Vd,Bur,mTe,Iur,Nur,hU,qur,jur,Dur,wE,Gur,go,V9,Our,fTe,Vur,Xur,on,zur,gTe,Wur,Qur,hTe,Hur,Uur,uTe,Jur,Yur,Kur,Pe,AE,pTe,Zur,epr,uU,opr,rpr,tpr,LE,_Te,apr,npr,pU,spr,lpr,ipr,yE,bTe,dpr,cpr,_U,mpr,fpr,gpr,xE,vTe,hpr,upr,bU,ppr,_pr,bpr,$E,FTe,vpr,Fpr,vU,Tpr,Mpr,Epr,kE,TTe,Cpr,wpr,FU,Apr,Lpr,ypr,SE,MTe,xpr,$pr,TU,kpr,Spr,Rpr,RE,ETe,Ppr,Bpr,MU,Ipr,Npr,qpr,PE,CTe,jpr,Dpr,EU,Gpr,Opr,Vpr,BE,Xpr,wTe,zpr,Wpr,ATe,Qpr,Hpr,IE,AQe,Xd,NE,LTe,X9,Upr,yTe,Jpr,LQe,Uo,z9,Ypr,zd,Kpr,CU,Zpr,e_r,wU,o_r,r_r,t_r,W9,a_r,xTe,n_r,s_r,l_r,Lt,Q9,i_r,$Te,d_r,c_r,Wd,m_r,kTe,f_r,g_r,AU,h_r,u_r,p_r,qE,__r,ho,H9,b_r,STe,v_r,F_r,rn,T_r,RTe,M_r,E_r,PTe,C_r,w_r,BTe,A_r,L_r,y_r,at,jE,ITe,x_r,$_r,LU,k_r,S_r,R_r,DE,NTe,P_r,B_r,yU,I_r,N_r,q_r,GE,qTe,j_r,D_r,xU,G_r,O_r,V_r,OE,jTe,X_r,z_r,$U,W_r,Q_r,H_r,VE,DTe,U_r,J_r,kU,Y_r,K_r,Z_r,XE,e2r,GTe,o2r,r2r,OTe,t2r,a2r,zE,yQe,Qd,WE,VTe,U9,n2r,XTe,s2r,xQe,Jo,J9,l2r,Hd,i2r,SU,d2r,c2r,RU,m2r,f2r,g2r,Y9,h2r,zTe,u2r,p2r,_2r,yt,K9,b2r,WTe,v2r,F2r,Ud,T2r,QTe,M2r,E2r,PU,C2r,w2r,A2r,QE,L2r,uo,Z9,y2r,HTe,x2r,$2r,tn,k2r,UTe,S2r,R2r,JTe,P2r,B2r,YTe,I2r,N2r,q2r,Le,HE,KTe,j2r,D2r,BU,G2r,O2r,V2r,UE,ZTe,X2r,z2r,IU,W2r,Q2r,H2r,JE,eMe,U2r,J2r,NU,Y2r,K2r,Z2r,YE,oMe,ebr,obr,qU,rbr,tbr,abr,KE,rMe,nbr,sbr,jU,lbr,ibr,dbr,ZE,tMe,cbr,mbr,DU,fbr,gbr,hbr,e4,aMe,ubr,pbr,GU,_br,bbr,vbr,o4,nMe,Fbr,Tbr,OU,Mbr,Ebr,Cbr,r4,sMe,wbr,Abr,VU,Lbr,ybr,xbr,t4,lMe,$br,kbr,XU,Sbr,Rbr,Pbr,a4,Bbr,iMe,Ibr,Nbr,dMe,qbr,jbr,n4,$Qe,Jd,s4,cMe,ex,Dbr,mMe,Gbr,kQe,Yo,ox,Obr,Yd,Vbr,zU,Xbr,zbr,WU,Wbr,Qbr,Hbr,rx,Ubr,fMe,Jbr,Ybr,Kbr,xt,tx,Zbr,gMe,evr,ovr,Kd,rvr,hMe,tvr,avr,QU,nvr,svr,lvr,l4,ivr,po,ax,dvr,uMe,cvr,mvr,an,fvr,pMe,gvr,hvr,_Me,uvr,pvr,bMe,_vr,bvr,vvr,nx,i4,vMe,Fvr,Tvr,HU,Mvr,Evr,Cvr,d4,FMe,wvr,Avr,UU,Lvr,yvr,xvr,c4,$vr,TMe,kvr,Svr,MMe,Rvr,Pvr,m4,SQe,Zd,f4,EMe,sx,Bvr,CMe,Ivr,RQe,Ko,lx,Nvr,ec,qvr,JU,jvr,Dvr,YU,Gvr,Ovr,Vvr,ix,Xvr,wMe,zvr,Wvr,Qvr,$t,dx,Hvr,AMe,Uvr,Jvr,oc,Yvr,LMe,Kvr,Zvr,KU,e1r,o1r,r1r,g4,t1r,_o,cx,a1r,yMe,n1r,s1r,nn,l1r,xMe,i1r,d1r,$Me,c1r,m1r,kMe,f1r,g1r,h1r,nt,h4,SMe,u1r,p1r,ZU,_1r,b1r,v1r,u4,RMe,F1r,T1r,eJ,M1r,E1r,C1r,p4,PMe,w1r,A1r,oJ,L1r,y1r,x1r,_4,BMe,$1r,k1r,rJ,S1r,R1r,P1r,b4,IMe,B1r,I1r,tJ,N1r,q1r,j1r,v4,D1r,NMe,G1r,O1r,qMe,V1r,X1r,F4,PQe,rc,T4,jMe,mx,z1r,DMe,W1r,BQe,Zo,fx,Q1r,tc,H1r,aJ,U1r,J1r,nJ,Y1r,K1r,Z1r,gx,eFr,GMe,oFr,rFr,tFr,kt,hx,aFr,OMe,nFr,sFr,ac,lFr,VMe,iFr,dFr,sJ,cFr,mFr,fFr,M4,gFr,bo,ux,hFr,XMe,uFr,pFr,sn,_Fr,zMe,bFr,vFr,WMe,FFr,TFr,QMe,MFr,EFr,CFr,ln,E4,HMe,wFr,AFr,lJ,LFr,yFr,xFr,C4,UMe,$Fr,kFr,iJ,SFr,RFr,PFr,w4,JMe,BFr,IFr,dJ,NFr,qFr,jFr,A4,YMe,DFr,GFr,cJ,OFr,VFr,XFr,L4,zFr,KMe,WFr,QFr,ZMe,HFr,UFr,y4,IQe,nc,x4,eEe,px,JFr,oEe,YFr,NQe,er,_x,KFr,sc,ZFr,mJ,eTr,oTr,fJ,rTr,tTr,aTr,bx,nTr,rEe,sTr,lTr,iTr,St,vx,dTr,tEe,cTr,mTr,lc,fTr,aEe,gTr,hTr,gJ,uTr,pTr,_Tr,$4,bTr,vo,Fx,vTr,nEe,FTr,TTr,dn,MTr,sEe,ETr,CTr,lEe,wTr,ATr,iEe,LTr,yTr,xTr,Tx,k4,dEe,$Tr,kTr,hJ,STr,RTr,PTr,S4,cEe,BTr,ITr,uJ,NTr,qTr,jTr,R4,DTr,mEe,GTr,OTr,fEe,VTr,XTr,P4,qQe,ic,B4,gEe,Mx,zTr,hEe,WTr,jQe,or,Ex,QTr,dc,HTr,pJ,UTr,JTr,_J,YTr,KTr,ZTr,Cx,eMr,uEe,oMr,rMr,tMr,Rt,wx,aMr,pEe,nMr,sMr,cc,lMr,_Ee,iMr,dMr,bJ,cMr,mMr,fMr,I4,gMr,Fo,Ax,hMr,bEe,uMr,pMr,cn,_Mr,vEe,bMr,vMr,FEe,FMr,TMr,TEe,MMr,EMr,CMr,MEe,N4,EEe,wMr,AMr,vJ,LMr,yMr,xMr,q4,$Mr,CEe,kMr,SMr,wEe,RMr,PMr,j4,DQe,mc,D4,AEe,Lx,BMr,LEe,IMr,GQe,rr,yx,NMr,fc,qMr,FJ,jMr,DMr,TJ,GMr,OMr,VMr,xx,XMr,yEe,zMr,WMr,QMr,Pt,$x,HMr,xEe,UMr,JMr,gc,YMr,$Ee,KMr,ZMr,MJ,eEr,oEr,rEr,G4,tEr,To,kx,aEr,kEe,nEr,sEr,mn,lEr,SEe,iEr,dEr,REe,cEr,mEr,PEe,fEr,gEr,hEr,st,O4,BEe,uEr,pEr,EJ,_Er,bEr,vEr,V4,IEe,FEr,TEr,CJ,MEr,EEr,CEr,X4,NEe,wEr,AEr,wJ,LEr,yEr,xEr,z4,qEe,$Er,kEr,AJ,SEr,REr,PEr,W4,jEe,BEr,IEr,LJ,NEr,qEr,jEr,Q4,DEr,DEe,GEr,OEr,GEe,VEr,XEr,H4,OQe,hc,U4,OEe,Sx,zEr,VEe,WEr,VQe,tr,Rx,QEr,uc,HEr,yJ,UEr,JEr,xJ,YEr,KEr,ZEr,Px,e4r,XEe,o4r,r4r,t4r,Bt,Bx,a4r,zEe,n4r,s4r,pc,l4r,WEe,i4r,d4r,$J,c4r,m4r,f4r,J4,g4r,Mo,Ix,h4r,QEe,u4r,p4r,fn,_4r,HEe,b4r,v4r,UEe,F4r,T4r,JEe,M4r,E4r,C4r,YEe,Y4,KEe,w4r,A4r,kJ,L4r,y4r,x4r,K4,$4r,ZEe,k4r,S4r,e4e,R4r,P4r,Z4,XQe,_c,eC,o4e,Nx,B4r,r4e,I4r,zQe,ar,qx,N4r,bc,q4r,SJ,j4r,D4r,RJ,G4r,O4r,V4r,jx,X4r,t4e,z4r,W4r,Q4r,It,Dx,H4r,a4e,U4r,J4r,vc,Y4r,n4e,K4r,Z4r,PJ,eCr,oCr,rCr,oC,tCr,Sr,Gx,aCr,s4e,nCr,sCr,gn,lCr,l4e,iCr,dCr,i4e,cCr,mCr,d4e,fCr,gCr,hCr,q,rC,c4e,uCr,pCr,BJ,_Cr,bCr,vCr,tC,m4e,FCr,TCr,IJ,MCr,ECr,CCr,aC,f4e,wCr,ACr,NJ,LCr,yCr,xCr,nC,g4e,$Cr,kCr,qJ,SCr,RCr,PCr,sC,h4e,BCr,ICr,jJ,NCr,qCr,jCr,lC,u4e,DCr,GCr,DJ,OCr,VCr,XCr,iC,p4e,zCr,WCr,GJ,QCr,HCr,UCr,dC,_4e,JCr,YCr,OJ,KCr,ZCr,e5r,cC,b4e,o5r,r5r,VJ,t5r,a5r,n5r,mC,v4e,s5r,l5r,XJ,i5r,d5r,c5r,fC,F4e,m5r,f5r,zJ,g5r,h5r,u5r,gC,T4e,p5r,_5r,WJ,b5r,v5r,F5r,hC,M4e,T5r,M5r,QJ,E5r,C5r,w5r,uC,E4e,A5r,L5r,HJ,y5r,x5r,$5r,pC,C4e,k5r,S5r,UJ,R5r,P5r,B5r,_C,w4e,I5r,N5r,JJ,q5r,j5r,D5r,bC,A4e,G5r,O5r,YJ,V5r,X5r,z5r,vC,L4e,W5r,Q5r,KJ,H5r,U5r,J5r,al,y4e,Y5r,K5r,ZJ,Z5r,e3r,eY,o3r,r3r,t3r,FC,x4e,a3r,n3r,oY,s3r,l3r,i3r,TC,$4e,d3r,c3r,rY,m3r,f3r,g3r,MC,k4e,h3r,u3r,tY,p3r,_3r,b3r,EC,S4e,v3r,F3r,aY,T3r,M3r,E3r,CC,R4e,C3r,w3r,nY,A3r,L3r,y3r,wC,P4e,x3r,$3r,sY,k3r,S3r,R3r,AC,B4e,P3r,B3r,lY,I3r,N3r,q3r,LC,I4e,j3r,D3r,iY,G3r,O3r,V3r,yC,N4e,X3r,z3r,dY,W3r,Q3r,H3r,xC,q4e,U3r,J3r,cY,Y3r,K3r,Z3r,$C,j4e,e0r,o0r,mY,r0r,t0r,a0r,kC,D4e,n0r,s0r,fY,l0r,i0r,d0r,SC,G4e,c0r,m0r,gY,f0r,g0r,h0r,RC,O4e,u0r,p0r,hY,_0r,b0r,v0r,PC,V4e,F0r,T0r,uY,M0r,E0r,C0r,BC,X4e,w0r,A0r,pY,L0r,y0r,x0r,IC,z4e,$0r,k0r,_Y,S0r,R0r,P0r,NC,W4e,B0r,I0r,bY,N0r,q0r,j0r,qC,Q4e,D0r,G0r,vY,O0r,V0r,X0r,jC,H4e,z0r,W0r,FY,Q0r,H0r,U0r,DC,U4e,J0r,Y0r,TY,K0r,Z0r,ewr,GC,J4e,owr,rwr,MY,twr,awr,nwr,OC,Y4e,swr,lwr,EY,iwr,dwr,cwr,VC,K4e,mwr,fwr,CY,gwr,hwr,uwr,XC,Z4e,pwr,_wr,wY,bwr,vwr,Fwr,zC,eCe,Twr,Mwr,AY,Ewr,Cwr,wwr,WC,oCe,Awr,Lwr,LY,ywr,xwr,$wr,QC,rCe,kwr,Swr,yY,Rwr,Pwr,Bwr,HC,tCe,Iwr,Nwr,xY,qwr,jwr,Dwr,UC,aCe,Gwr,Owr,$Y,Vwr,Xwr,zwr,JC,nCe,Wwr,Qwr,kY,Hwr,Uwr,Jwr,YC,sCe,Ywr,Kwr,SY,Zwr,e6r,o6r,KC,WQe,Fc,ZC,lCe,Ox,r6r,iCe,t6r,QQe,nr,Vx,a6r,Tc,n6r,RY,s6r,l6r,PY,i6r,d6r,c6r,Xx,m6r,dCe,f6r,g6r,h6r,Nt,zx,u6r,cCe,p6r,_6r,Mc,b6r,mCe,v6r,F6r,BY,T6r,M6r,E6r,e5,C6r,Rr,Wx,w6r,fCe,A6r,L6r,hn,y6r,gCe,x6r,$6r,hCe,k6r,S6r,uCe,R6r,P6r,B6r,se,o5,pCe,I6r,N6r,IY,q6r,j6r,D6r,r5,_Ce,G6r,O6r,NY,V6r,X6r,z6r,t5,bCe,W6r,Q6r,qY,H6r,U6r,J6r,a5,vCe,Y6r,K6r,jY,Z6r,eAr,oAr,n5,FCe,rAr,tAr,DY,aAr,nAr,sAr,s5,TCe,lAr,iAr,GY,dAr,cAr,mAr,l5,MCe,fAr,gAr,OY,hAr,uAr,pAr,i5,ECe,_Ar,bAr,VY,vAr,FAr,TAr,d5,CCe,MAr,EAr,XY,CAr,wAr,AAr,c5,wCe,LAr,yAr,zY,xAr,$Ar,kAr,m5,ACe,SAr,RAr,WY,PAr,BAr,IAr,f5,LCe,NAr,qAr,QY,jAr,DAr,GAr,g5,yCe,OAr,VAr,HY,XAr,zAr,WAr,h5,xCe,QAr,HAr,UY,UAr,JAr,YAr,u5,$Ce,KAr,ZAr,JY,e7r,o7r,r7r,p5,kCe,t7r,a7r,YY,n7r,s7r,l7r,_5,SCe,i7r,d7r,KY,c7r,m7r,f7r,b5,RCe,g7r,h7r,ZY,u7r,p7r,_7r,v5,PCe,b7r,v7r,eK,F7r,T7r,M7r,F5,BCe,E7r,C7r,oK,w7r,A7r,L7r,T5,ICe,y7r,x7r,rK,$7r,k7r,S7r,M5,NCe,R7r,P7r,tK,B7r,I7r,N7r,E5,qCe,q7r,j7r,aK,D7r,G7r,O7r,C5,HQe,Ec,w5,jCe,Qx,V7r,DCe,X7r,UQe,sr,Hx,z7r,Cc,W7r,nK,Q7r,H7r,sK,U7r,J7r,Y7r,Ux,K7r,GCe,Z7r,eLr,oLr,qt,Jx,rLr,OCe,tLr,aLr,wc,nLr,VCe,sLr,lLr,lK,iLr,dLr,cLr,A5,mLr,Pr,Yx,fLr,XCe,gLr,hLr,un,uLr,zCe,pLr,_Lr,WCe,bLr,vLr,QCe,FLr,TLr,MLr,Me,L5,HCe,ELr,CLr,iK,wLr,ALr,LLr,y5,UCe,yLr,xLr,dK,$Lr,kLr,SLr,x5,JCe,RLr,PLr,cK,BLr,ILr,NLr,$5,YCe,qLr,jLr,mK,DLr,GLr,OLr,k5,KCe,VLr,XLr,fK,zLr,WLr,QLr,S5,ZCe,HLr,ULr,gK,JLr,YLr,KLr,R5,e5e,ZLr,eyr,hK,oyr,ryr,tyr,P5,o5e,ayr,nyr,uK,syr,lyr,iyr,B5,r5e,dyr,cyr,pK,myr,fyr,gyr,I5,t5e,hyr,uyr,_K,pyr,_yr,byr,N5,a5e,vyr,Fyr,bK,Tyr,Myr,Eyr,q5,n5e,Cyr,wyr,vK,Ayr,Lyr,yyr,j5,s5e,xyr,$yr,FK,kyr,Syr,Ryr,D5,JQe,Ac,G5,l5e,Kx,Pyr,i5e,Byr,YQe,lr,Zx,Iyr,Lc,Nyr,TK,qyr,jyr,MK,Dyr,Gyr,Oyr,e$,Vyr,d5e,Xyr,zyr,Wyr,jt,o$,Qyr,c5e,Hyr,Uyr,yc,Jyr,m5e,Yyr,Kyr,EK,Zyr,e8r,o8r,O5,r8r,Br,r$,t8r,f5e,a8r,n8r,pn,s8r,g5e,l8r,i8r,h5e,d8r,c8r,u5e,m8r,f8r,g8r,Ve,V5,p5e,h8r,u8r,CK,p8r,_8r,b8r,X5,_5e,v8r,F8r,wK,T8r,M8r,E8r,nl,b5e,C8r,w8r,AK,A8r,L8r,LK,y8r,x8r,$8r,z5,v5e,k8r,S8r,yK,R8r,P8r,B8r,W5,F5e,I8r,N8r,xK,q8r,j8r,D8r,Q5,T5e,G8r,O8r,$K,V8r,X8r,z8r,H5,M5e,W8r,Q8r,kK,H8r,U8r,J8r,U5,E5e,Y8r,K8r,SK,Z8r,e9r,o9r,J5,KQe,xc,Y5,C5e,t$,r9r,w5e,t9r,ZQe,ir,a$,a9r,$c,n9r,RK,s9r,l9r,PK,i9r,d9r,c9r,n$,m9r,A5e,f9r,g9r,h9r,Dt,s$,u9r,L5e,p9r,_9r,kc,b9r,y5e,v9r,F9r,BK,T9r,M9r,E9r,K5,C9r,Ir,l$,w9r,x5e,A9r,L9r,_n,y9r,$5e,x9r,$9r,k5e,k9r,S9r,S5e,R9r,P9r,B9r,ie,Z5,R5e,I9r,N9r,IK,q9r,j9r,D9r,e3,P5e,G9r,O9r,NK,V9r,X9r,z9r,o3,B5e,W9r,Q9r,qK,H9r,U9r,J9r,r3,I5e,Y9r,K9r,jK,Z9r,exr,oxr,t3,N5e,rxr,txr,DK,axr,nxr,sxr,a3,q5e,lxr,ixr,GK,dxr,cxr,mxr,n3,j5e,fxr,gxr,OK,hxr,uxr,pxr,s3,D5e,_xr,bxr,VK,vxr,Fxr,Txr,l3,G5e,Mxr,Exr,XK,Cxr,wxr,Axr,i3,O5e,Lxr,yxr,zK,xxr,$xr,kxr,d3,V5e,Sxr,Rxr,WK,Pxr,Bxr,Ixr,c3,X5e,Nxr,qxr,QK,jxr,Dxr,Gxr,m3,z5e,Oxr,Vxr,HK,Xxr,zxr,Wxr,f3,W5e,Qxr,Hxr,UK,Uxr,Jxr,Yxr,g3,Q5e,Kxr,Zxr,JK,e$r,o$r,r$r,h3,H5e,t$r,a$r,YK,n$r,s$r,l$r,u3,U5e,i$r,d$r,KK,c$r,m$r,f$r,p3,J5e,g$r,h$r,ZK,u$r,p$r,_$r,_3,Y5e,b$r,v$r,eZ,F$r,T$r,M$r,b3,K5e,E$r,C$r,oZ,w$r,A$r,L$r,v3,eHe,Sc,F3,Z5e,i$,y$r,e3e,x$r,oHe,dr,d$,$$r,Rc,k$r,rZ,S$r,R$r,tZ,P$r,B$r,I$r,c$,N$r,o3e,q$r,j$r,D$r,Gt,m$,G$r,r3e,O$r,V$r,Pc,X$r,t3e,z$r,W$r,aZ,Q$r,H$r,U$r,T3,J$r,Nr,f$,Y$r,a3e,K$r,Z$r,bn,ekr,n3e,okr,rkr,s3e,tkr,akr,l3e,nkr,skr,lkr,ye,M3,i3e,ikr,dkr,nZ,ckr,mkr,fkr,E3,d3e,gkr,hkr,sZ,ukr,pkr,_kr,C3,c3e,bkr,vkr,lZ,Fkr,Tkr,Mkr,w3,m3e,Ekr,Ckr,iZ,wkr,Akr,Lkr,A3,f3e,ykr,xkr,dZ,$kr,kkr,Skr,L3,g3e,Rkr,Pkr,cZ,Bkr,Ikr,Nkr,y3,h3e,qkr,jkr,mZ,Dkr,Gkr,Okr,x3,u3e,Vkr,Xkr,fZ,zkr,Wkr,Qkr,$3,p3e,Hkr,Ukr,gZ,Jkr,Ykr,Kkr,k3,_3e,Zkr,eSr,hZ,oSr,rSr,tSr,S3,rHe,Bc,R3,b3e,g$,aSr,v3e,nSr,tHe,cr,h$,sSr,Ic,lSr,uZ,iSr,dSr,pZ,cSr,mSr,fSr,u$,gSr,F3e,hSr,uSr,pSr,Ot,p$,_Sr,T3e,bSr,vSr,Nc,FSr,M3e,TSr,MSr,_Z,ESr,CSr,wSr,P3,ASr,qr,_$,LSr,E3e,ySr,xSr,vn,$Sr,C3e,kSr,SSr,w3e,RSr,PSr,A3e,BSr,ISr,NSr,te,B3,L3e,qSr,jSr,bZ,DSr,GSr,OSr,I3,y3e,VSr,XSr,vZ,zSr,WSr,QSr,N3,x3e,HSr,USr,FZ,JSr,YSr,KSr,q3,$3e,ZSr,eRr,TZ,oRr,rRr,tRr,j3,k3e,aRr,nRr,MZ,sRr,lRr,iRr,D3,S3e,dRr,cRr,EZ,mRr,fRr,gRr,G3,R3e,hRr,uRr,CZ,pRr,_Rr,bRr,O3,P3e,vRr,FRr,wZ,TRr,MRr,ERr,V3,B3e,CRr,wRr,AZ,ARr,LRr,yRr,X3,I3e,xRr,$Rr,LZ,kRr,SRr,RRr,z3,N3e,PRr,BRr,yZ,IRr,NRr,qRr,W3,q3e,jRr,DRr,xZ,GRr,ORr,VRr,Q3,j3e,XRr,zRr,$Z,WRr,QRr,HRr,H3,D3e,URr,JRr,kZ,YRr,KRr,ZRr,U3,G3e,ePr,oPr,SZ,rPr,tPr,aPr,J3,O3e,nPr,sPr,RZ,lPr,iPr,dPr,Y3,V3e,cPr,mPr,PZ,fPr,gPr,hPr,K3,X3e,uPr,pPr,BZ,_Pr,bPr,vPr,Z3,z3e,FPr,TPr,IZ,MPr,EPr,CPr,e0,W3e,wPr,APr,NZ,LPr,yPr,xPr,o0,Q3e,$Pr,kPr,qZ,SPr,RPr,PPr,r0,H3e,BPr,IPr,jZ,NPr,qPr,jPr,t0,U3e,DPr,GPr,DZ,OPr,VPr,XPr,a0,J3e,zPr,WPr,GZ,QPr,HPr,UPr,n0,Y3e,JPr,YPr,OZ,KPr,ZPr,eBr,s0,K3e,oBr,rBr,VZ,tBr,aBr,nBr,l0,aHe,qc,i0,Z3e,b$,sBr,e0e,lBr,nHe,mr,v$,iBr,jc,dBr,XZ,cBr,mBr,zZ,fBr,gBr,hBr,F$,uBr,o0e,pBr,_Br,bBr,Vt,T$,vBr,r0e,FBr,TBr,Dc,MBr,t0e,EBr,CBr,WZ,wBr,ABr,LBr,d0,yBr,jr,M$,xBr,a0e,$Br,kBr,Fn,SBr,n0e,RBr,PBr,s0e,BBr,IBr,l0e,NBr,qBr,jBr,ve,c0,i0e,DBr,GBr,QZ,OBr,VBr,XBr,m0,d0e,zBr,WBr,HZ,QBr,HBr,UBr,f0,c0e,JBr,YBr,UZ,KBr,ZBr,eIr,g0,m0e,oIr,rIr,JZ,tIr,aIr,nIr,h0,f0e,sIr,lIr,YZ,iIr,dIr,cIr,u0,g0e,mIr,fIr,KZ,gIr,hIr,uIr,p0,h0e,pIr,_Ir,ZZ,bIr,vIr,FIr,_0,u0e,TIr,MIr,eee,EIr,CIr,wIr,b0,p0e,AIr,LIr,oee,yIr,xIr,$Ir,v0,_0e,kIr,SIr,ree,RIr,PIr,BIr,F0,b0e,IIr,NIr,tee,qIr,jIr,DIr,T0,v0e,GIr,OIr,aee,VIr,XIr,zIr,M0,F0e,WIr,QIr,nee,HIr,UIr,JIr,E0,T0e,YIr,KIr,see,ZIr,eNr,oNr,C0,M0e,rNr,tNr,lee,aNr,nNr,sNr,w0,E0e,lNr,iNr,iee,dNr,cNr,mNr,A0,C0e,fNr,gNr,dee,hNr,uNr,pNr,L0,sHe,Gc,y0,w0e,E$,_Nr,A0e,bNr,lHe,fr,C$,vNr,Oc,FNr,cee,TNr,MNr,mee,ENr,CNr,wNr,w$,ANr,L0e,LNr,yNr,xNr,Xt,A$,$Nr,y0e,kNr,SNr,Vc,RNr,x0e,PNr,BNr,fee,INr,NNr,qNr,x0,jNr,Dr,L$,DNr,$0e,GNr,ONr,Tn,VNr,k0e,XNr,zNr,S0e,WNr,QNr,R0e,HNr,UNr,JNr,y$,$0,P0e,YNr,KNr,gee,ZNr,eqr,oqr,k0,B0e,rqr,tqr,hee,aqr,nqr,sqr,S0,iHe,Xc,R0,I0e,x$,lqr,N0e,iqr,dHe,gr,$$,dqr,zc,cqr,uee,mqr,fqr,pee,gqr,hqr,uqr,k$,pqr,q0e,_qr,bqr,vqr,zt,S$,Fqr,j0e,Tqr,Mqr,Wc,Eqr,D0e,Cqr,wqr,_ee,Aqr,Lqr,yqr,P0,xqr,Gr,R$,$qr,G0e,kqr,Sqr,Mn,Rqr,O0e,Pqr,Bqr,V0e,Iqr,Nqr,X0e,qqr,jqr,Dqr,z0e,B0,W0e,Gqr,Oqr,bee,Vqr,Xqr,zqr,I0,cHe,Qc,N0,Q0e,P$,Wqr,H0e,Qqr,mHe,hr,B$,Hqr,Hc,Uqr,vee,Jqr,Yqr,Fee,Kqr,Zqr,ejr,I$,ojr,U0e,rjr,tjr,ajr,Wt,N$,njr,J0e,sjr,ljr,Uc,ijr,Y0e,djr,cjr,Tee,mjr,fjr,gjr,q0,hjr,Or,q$,ujr,K0e,pjr,_jr,En,bjr,Z0e,vjr,Fjr,ewe,Tjr,Mjr,owe,Ejr,Cjr,wjr,de,j0,rwe,Ajr,Ljr,Mee,yjr,xjr,$jr,D0,twe,kjr,Sjr,Eee,Rjr,Pjr,Bjr,G0,awe,Ijr,Njr,Cee,qjr,jjr,Djr,O0,nwe,Gjr,Ojr,wee,Vjr,Xjr,zjr,V0,swe,Wjr,Qjr,Aee,Hjr,Ujr,Jjr,X0,lwe,Yjr,Kjr,Lee,Zjr,eDr,oDr,z0,iwe,rDr,tDr,yee,aDr,nDr,sDr,W0,dwe,lDr,iDr,xee,dDr,cDr,mDr,Q0,cwe,fDr,gDr,$ee,hDr,uDr,pDr,H0,mwe,_Dr,bDr,kee,vDr,FDr,TDr,U0,fwe,MDr,EDr,See,CDr,wDr,ADr,J0,gwe,LDr,yDr,Ree,xDr,$Dr,kDr,Y0,hwe,SDr,RDr,Pee,PDr,BDr,IDr,K0,uwe,NDr,qDr,Bee,jDr,DDr,GDr,Z0,pwe,ODr,VDr,Iee,XDr,zDr,WDr,ew,_we,QDr,HDr,Nee,UDr,JDr,YDr,ow,bwe,KDr,ZDr,qee,eGr,oGr,rGr,rw,vwe,tGr,aGr,jee,nGr,sGr,lGr,tw,Fwe,iGr,dGr,Dee,cGr,mGr,fGr,aw,Twe,gGr,hGr,Gee,uGr,pGr,_Gr,nw,fHe,Jc,sw,Mwe,j$,bGr,Ewe,vGr,gHe,ur,D$,FGr,Yc,TGr,Oee,MGr,EGr,Vee,CGr,wGr,AGr,G$,LGr,Cwe,yGr,xGr,$Gr,Qt,O$,kGr,wwe,SGr,RGr,Kc,PGr,Awe,BGr,IGr,Xee,NGr,qGr,jGr,lw,DGr,Vr,V$,GGr,Lwe,OGr,VGr,Cn,XGr,ywe,zGr,WGr,xwe,QGr,HGr,$we,UGr,JGr,YGr,ce,iw,kwe,KGr,ZGr,zee,eOr,oOr,rOr,dw,Swe,tOr,aOr,Wee,nOr,sOr,lOr,cw,Rwe,iOr,dOr,Qee,cOr,mOr,fOr,mw,Pwe,gOr,hOr,Hee,uOr,pOr,_Or,fw,Bwe,bOr,vOr,Uee,FOr,TOr,MOr,gw,Iwe,EOr,COr,Jee,wOr,AOr,LOr,hw,Nwe,yOr,xOr,Yee,$Or,kOr,SOr,uw,qwe,ROr,POr,Kee,BOr,IOr,NOr,pw,jwe,qOr,jOr,Zee,DOr,GOr,OOr,_w,Dwe,VOr,XOr,eoe,zOr,WOr,QOr,bw,Gwe,HOr,UOr,ooe,JOr,YOr,KOr,vw,Owe,ZOr,eVr,roe,oVr,rVr,tVr,Fw,Vwe,aVr,nVr,toe,sVr,lVr,iVr,Tw,Xwe,dVr,cVr,aoe,mVr,fVr,gVr,Mw,zwe,hVr,uVr,noe,pVr,_Vr,bVr,Ew,Wwe,vVr,FVr,soe,TVr,MVr,EVr,Cw,Qwe,CVr,wVr,loe,AVr,LVr,yVr,ww,Hwe,xVr,$Vr,ioe,kVr,SVr,RVr,Aw,Uwe,PVr,BVr,doe,IVr,NVr,qVr,Lw,Jwe,jVr,DVr,coe,GVr,OVr,VVr,yw,hHe,Zc,xw,Ywe,X$,XVr,Kwe,zVr,uHe,pr,z$,WVr,em,QVr,moe,HVr,UVr,foe,JVr,YVr,KVr,W$,ZVr,Zwe,eXr,oXr,rXr,Ht,Q$,tXr,e6e,aXr,nXr,om,sXr,o6e,lXr,iXr,goe,dXr,cXr,mXr,$w,fXr,Xr,H$,gXr,r6e,hXr,uXr,wn,pXr,t6e,_Xr,bXr,a6e,vXr,FXr,n6e,TXr,MXr,EXr,s6e,kw,l6e,CXr,wXr,hoe,AXr,LXr,yXr,Sw,pHe,rm,Rw,i6e,U$,xXr,d6e,$Xr,_He,_r,J$,kXr,tm,SXr,uoe,RXr,PXr,poe,BXr,IXr,NXr,Y$,qXr,c6e,jXr,DXr,GXr,Ut,K$,OXr,m6e,VXr,XXr,am,zXr,f6e,WXr,QXr,_oe,HXr,UXr,JXr,Pw,YXr,zr,Z$,KXr,g6e,ZXr,ezr,An,ozr,h6e,rzr,tzr,u6e,azr,nzr,p6e,szr,lzr,izr,_6e,Bw,b6e,dzr,czr,boe,mzr,fzr,gzr,Iw,bHe,nm,Nw,v6e,ek,hzr,F6e,uzr,vHe,br,ok,pzr,sm,_zr,voe,bzr,vzr,Foe,Fzr,Tzr,Mzr,rk,Ezr,T6e,Czr,wzr,Azr,Jt,tk,Lzr,M6e,yzr,xzr,lm,$zr,E6e,kzr,Szr,Toe,Rzr,Pzr,Bzr,qw,Izr,Wr,ak,Nzr,C6e,qzr,jzr,Ln,Dzr,w6e,Gzr,Ozr,A6e,Vzr,Xzr,L6e,zzr,Wzr,Qzr,oe,jw,y6e,Hzr,Uzr,Moe,Jzr,Yzr,Kzr,Dw,x6e,Zzr,eWr,Eoe,oWr,rWr,tWr,Gw,$6e,aWr,nWr,Coe,sWr,lWr,iWr,Ow,k6e,dWr,cWr,woe,mWr,fWr,gWr,Vw,S6e,hWr,uWr,Aoe,pWr,_Wr,bWr,Xw,R6e,vWr,FWr,Loe,TWr,MWr,EWr,zw,P6e,CWr,wWr,yoe,AWr,LWr,yWr,Ww,B6e,xWr,$Wr,xoe,kWr,SWr,RWr,Qw,I6e,PWr,BWr,$oe,IWr,NWr,qWr,Hw,N6e,jWr,DWr,koe,GWr,OWr,VWr,Uw,q6e,XWr,zWr,Soe,WWr,QWr,HWr,Jw,j6e,UWr,JWr,Roe,YWr,KWr,ZWr,Yw,D6e,eQr,oQr,Poe,rQr,tQr,aQr,Kw,G6e,nQr,sQr,Boe,lQr,iQr,dQr,Zw,O6e,cQr,mQr,Ioe,fQr,gQr,hQr,e6,V6e,uQr,pQr,Noe,_Qr,bQr,vQr,o6,X6e,FQr,TQr,qoe,MQr,EQr,CQr,r6,z6e,wQr,AQr,joe,LQr,yQr,xQr,t6,W6e,$Qr,kQr,Doe,SQr,RQr,PQr,a6,Q6e,BQr,IQr,Goe,NQr,qQr,jQr,n6,H6e,DQr,GQr,Ooe,OQr,VQr,XQr,s6,U6e,zQr,WQr,Voe,QQr,HQr,UQr,l6,J6e,JQr,YQr,Xoe,KQr,ZQr,eHr,i6,Y6e,oHr,rHr,zoe,tHr,aHr,nHr,d6,K6e,sHr,lHr,Woe,iHr,dHr,cHr,c6,Z6e,mHr,fHr,Qoe,gHr,hHr,uHr,m6,eAe,pHr,_Hr,Hoe,bHr,vHr,FHr,f6,FHe,im,g6,oAe,nk,THr,rAe,MHr,THe,vr,sk,EHr,dm,CHr,Uoe,wHr,AHr,Joe,LHr,yHr,xHr,lk,$Hr,tAe,kHr,SHr,RHr,Yt,ik,PHr,aAe,BHr,IHr,cm,NHr,nAe,qHr,jHr,Yoe,DHr,GHr,OHr,h6,VHr,Qr,dk,XHr,sAe,zHr,WHr,yn,QHr,lAe,HHr,UHr,iAe,JHr,YHr,dAe,KHr,ZHr,eUr,xe,u6,cAe,oUr,rUr,Koe,tUr,aUr,nUr,p6,mAe,sUr,lUr,Zoe,iUr,dUr,cUr,_6,fAe,mUr,fUr,ere,gUr,hUr,uUr,b6,gAe,pUr,_Ur,ore,bUr,vUr,FUr,v6,hAe,TUr,MUr,rre,EUr,CUr,wUr,F6,uAe,AUr,LUr,tre,yUr,xUr,$Ur,T6,pAe,kUr,SUr,are,RUr,PUr,BUr,M6,_Ae,IUr,NUr,nre,qUr,jUr,DUr,E6,bAe,GUr,OUr,sre,VUr,XUr,zUr,C6,vAe,WUr,QUr,lre,HUr,UUr,JUr,w6,MHe,mm,A6,FAe,ck,YUr,TAe,KUr,EHe,Fr,mk,ZUr,fm,eJr,ire,oJr,rJr,dre,tJr,aJr,nJr,fk,sJr,MAe,lJr,iJr,dJr,Kt,gk,cJr,EAe,mJr,fJr,gm,gJr,CAe,hJr,uJr,cre,pJr,_Jr,bJr,L6,vJr,Hr,hk,FJr,wAe,TJr,MJr,xn,EJr,AAe,CJr,wJr,LAe,AJr,LJr,yAe,yJr,xJr,$Jr,Ee,y6,xAe,kJr,SJr,mre,RJr,PJr,BJr,x6,$Ae,IJr,NJr,fre,qJr,jJr,DJr,$6,kAe,GJr,OJr,gre,VJr,XJr,zJr,k6,SAe,WJr,QJr,hre,HJr,UJr,JJr,S6,RAe,YJr,KJr,ure,ZJr,eYr,oYr,R6,PAe,rYr,tYr,pre,aYr,nYr,sYr,P6,BAe,lYr,iYr,_re,dYr,cYr,mYr,B6,IAe,fYr,gYr,bre,hYr,uYr,pYr,I6,NAe,_Yr,bYr,vre,vYr,FYr,TYr,N6,qAe,MYr,EYr,Fre,CYr,wYr,AYr,q6,jAe,LYr,yYr,Tre,xYr,$Yr,kYr,j6,DAe,SYr,RYr,Mre,PYr,BYr,IYr,D6,GAe,NYr,qYr,Ere,jYr,DYr,GYr,G6,CHe,hm,O6,OAe,uk,OYr,VAe,VYr,wHe,Tr,pk,XYr,um,zYr,Cre,WYr,QYr,wre,HYr,UYr,JYr,_k,YYr,XAe,KYr,ZYr,eKr,Zt,bk,oKr,zAe,rKr,tKr,pm,aKr,WAe,nKr,sKr,Are,lKr,iKr,dKr,V6,cKr,Ur,vk,mKr,QAe,fKr,gKr,$n,hKr,HAe,uKr,pKr,UAe,_Kr,bKr,JAe,vKr,FKr,TKr,$e,X6,YAe,MKr,EKr,Lre,CKr,wKr,AKr,z6,KAe,LKr,yKr,yre,xKr,$Kr,kKr,W6,ZAe,SKr,RKr,xre,PKr,BKr,IKr,Q6,e7e,NKr,qKr,$re,jKr,DKr,GKr,H6,o7e,OKr,VKr,kre,XKr,zKr,WKr,U6,r7e,QKr,HKr,Sre,UKr,JKr,YKr,J6,t7e,KKr,ZKr,Rre,eZr,oZr,rZr,Y6,a7e,tZr,aZr,Pre,nZr,sZr,lZr,K6,n7e,iZr,dZr,Bre,cZr,mZr,fZr,Z6,s7e,gZr,hZr,Ire,uZr,pZr,_Zr,eA,AHe,_m,oA,l7e,Fk,bZr,i7e,vZr,LHe,Mr,Tk,FZr,bm,TZr,Nre,MZr,EZr,qre,CZr,wZr,AZr,Mk,LZr,d7e,yZr,xZr,$Zr,ea,Ek,kZr,c7e,SZr,RZr,vm,PZr,m7e,BZr,IZr,jre,NZr,qZr,jZr,rA,DZr,Jr,Ck,GZr,f7e,OZr,VZr,kn,XZr,g7e,zZr,WZr,h7e,QZr,HZr,u7e,UZr,JZr,YZr,ke,tA,p7e,KZr,ZZr,Dre,eet,oet,ret,aA,_7e,tet,aet,Gre,net,set,iet,nA,b7e,det,cet,Ore,met,fet,get,sA,v7e,het,uet,Vre,pet,_et,bet,lA,F7e,vet,Fet,Xre,Tet,Met,Eet,iA,T7e,Cet,wet,zre,Aet,Let,yet,dA,M7e,xet,$et,Wre,ket,Set,Ret,cA,E7e,Pet,Bet,Qre,Iet,Net,qet,mA,C7e,jet,Det,Hre,Get,Oet,Vet,fA,w7e,Xet,zet,Ure,Wet,Qet,Het,gA,yHe,Fm,hA,A7e,wk,Uet,L7e,Jet,xHe,Er,Ak,Yet,Tm,Ket,Jre,Zet,eot,Yre,oot,rot,tot,Lk,aot,y7e,not,sot,lot,oa,yk,iot,x7e,dot,cot,Mm,mot,$7e,fot,got,Kre,hot,uot,pot,uA,_ot,Yr,xk,bot,k7e,vot,Fot,Sn,Tot,S7e,Mot,Eot,R7e,Cot,wot,P7e,Aot,Lot,yot,Se,pA,B7e,xot,$ot,Zre,kot,Sot,Rot,_A,I7e,Pot,Bot,ete,Iot,Not,qot,bA,N7e,jot,Dot,ote,Got,Oot,Vot,vA,q7e,Xot,zot,rte,Wot,Qot,Hot,FA,j7e,Uot,Jot,tte,Yot,Kot,Zot,TA,D7e,ert,ort,ate,rrt,trt,art,MA,G7e,nrt,srt,nte,lrt,irt,drt,EA,O7e,crt,mrt,ste,frt,grt,hrt,CA,V7e,urt,prt,lte,_rt,brt,vrt,wA,X7e,Frt,Trt,ite,Mrt,Ert,Crt,AA,$He,Em,LA,z7e,$k,wrt,W7e,Art,kHe,Cr,kk,Lrt,Cm,yrt,dte,xrt,$rt,cte,krt,Srt,Rrt,Sk,Prt,Q7e,Brt,Irt,Nrt,ra,Rk,qrt,H7e,jrt,Drt,wm,Grt,U7e,Ort,Vrt,mte,Xrt,zrt,Wrt,yA,Qrt,Kr,Pk,Hrt,J7e,Urt,Jrt,Rn,Yrt,Y7e,Krt,Zrt,K7e,ett,ott,Z7e,rtt,ttt,att,Re,xA,eLe,ntt,stt,fte,ltt,itt,dtt,$A,oLe,ctt,mtt,gte,ftt,gtt,htt,kA,rLe,utt,ptt,hte,_tt,btt,vtt,SA,tLe,Ftt,Ttt,ute,Mtt,Ett,Ctt,RA,aLe,wtt,Att,pte,Ltt,ytt,xtt,PA,nLe,$tt,ktt,_te,Stt,Rtt,Ptt,BA,sLe,Btt,Itt,bte,Ntt,qtt,jtt,IA,lLe,Dtt,Gtt,vte,Ott,Vtt,Xtt,NA,iLe,ztt,Wtt,Fte,Qtt,Htt,Utt,qA,dLe,Jtt,Ytt,Tte,Ktt,Ztt,eat,jA,SHe,Am,DA,cLe,Bk,oat,mLe,rat,RHe,wr,Ik,tat,Lm,aat,Mte,nat,sat,Ete,lat,iat,dat,Nk,cat,fLe,mat,fat,gat,ta,qk,hat,gLe,uat,pat,ym,_at,hLe,bat,vat,Cte,Fat,Tat,Mat,GA,Eat,Zr,jk,Cat,uLe,wat,Aat,Pn,Lat,pLe,yat,xat,_Le,$at,kat,bLe,Sat,Rat,Pat,Xe,OA,vLe,Bat,Iat,wte,Nat,qat,jat,VA,FLe,Dat,Gat,Ate,Oat,Vat,Xat,XA,TLe,zat,Wat,Lte,Qat,Hat,Uat,zA,MLe,Jat,Yat,yte,Kat,Zat,ent,WA,ELe,ont,rnt,xte,tnt,ant,nnt,QA,CLe,snt,lnt,$te,int,dnt,cnt,HA,wLe,mnt,fnt,kte,gnt,hnt,unt,UA,ALe,pnt,_nt,Ste,bnt,vnt,Fnt,JA,PHe,xm,YA,LLe,Dk,Tnt,yLe,Mnt,BHe,Ar,Gk,Ent,$m,Cnt,Rte,wnt,Ant,Pte,Lnt,ynt,xnt,Ok,$nt,xLe,knt,Snt,Rnt,aa,Vk,Pnt,$Le,Bnt,Int,km,Nnt,kLe,qnt,jnt,Bte,Dnt,Gnt,Ont,KA,Vnt,et,Xk,Xnt,SLe,znt,Wnt,Bn,Qnt,RLe,Hnt,Unt,PLe,Jnt,Ynt,BLe,Knt,Znt,est,ze,ZA,ILe,ost,rst,Ite,tst,ast,nst,e7,NLe,sst,lst,Nte,ist,dst,cst,o7,qLe,mst,fst,qte,gst,hst,ust,r7,jLe,pst,_st,jte,bst,vst,Fst,t7,DLe,Tst,Mst,Dte,Est,Cst,wst,a7,GLe,Ast,Lst,Gte,yst,xst,$st,n7,OLe,kst,Sst,Ote,Rst,Pst,Bst,s7,VLe,Ist,Nst,Vte,qst,jst,Dst,l7,IHe,Sm,i7,XLe,zk,Gst,zLe,Ost,NHe,Lr,Wk,Vst,Rm,Xst,Xte,zst,Wst,zte,Qst,Hst,Ust,Qk,Jst,WLe,Yst,Kst,Zst,na,Hk,elt,QLe,olt,rlt,Pm,tlt,HLe,alt,nlt,Wte,slt,llt,ilt,d7,dlt,ot,Uk,clt,ULe,mlt,flt,In,glt,JLe,hlt,ult,YLe,plt,_lt,KLe,blt,vlt,Flt,ZLe,c7,eye,Tlt,Mlt,Qte,Elt,Clt,wlt,m7,qHe,Bm,f7,oye,Jk,Alt,rye,Llt,jHe,yr,Yk,ylt,Im,xlt,Hte,$lt,klt,Ute,Slt,Rlt,Plt,Kk,Blt,tye,Ilt,Nlt,qlt,sa,Zk,jlt,aye,Dlt,Glt,Nm,Olt,nye,Vlt,Xlt,Jte,zlt,Wlt,Qlt,g7,Hlt,rt,eS,Ult,sye,Jlt,Ylt,Nn,Klt,lye,Zlt,eit,iye,oit,rit,dye,tit,ait,nit,oS,h7,cye,sit,lit,Yte,iit,dit,cit,u7,mye,mit,fit,Kte,git,hit,uit,p7,DHe,qm,_7,fye,rS,pit,gye,_it,GHe,xr,tS,bit,jm,vit,Zte,Fit,Tit,eae,Mit,Eit,Cit,aS,wit,hye,Ait,Lit,yit,la,nS,xit,uye,$it,kit,Dm,Sit,pye,Rit,Pit,oae,Bit,Iit,Nit,b7,qit,tt,sS,jit,_ye,Dit,Git,qn,Oit,bye,Vit,Xit,vye,zit,Wit,Fye,Qit,Hit,Uit,Tye,v7,Mye,Jit,Yit,rae,Kit,Zit,edt,F7,OHe;return d=new re({}),Ia=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Wy=new re({}),Qy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Um=new odt({props:{warning:!0,$$slots:{default:[HZt]},$$scope:{ctx:$}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L620"}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L643"}}),mh=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[UZt]},$$scope:{ctx:$}}}),Zy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L766"}}),e8=new re({}),o8=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L411"}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L425"}}),Qh=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[JZt]},$$scope:{ctx:$}}}),n8=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L624"}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L198"}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L212"}}),Ru=new odt({props:{$$slots:{default:[YZt]},$$scope:{ctx:$}}}),Pu=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[KZt]},$$scope:{ctx:$}}}),m8=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L339"}}),f8=new re({}),g8=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L104"}}),rp=new odt({props:{$$slots:{default:[ZZt]},$$scope:{ctx:$}}}),tp=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[eea]},$$scope:{ctx:$}}}),_8=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L257"}}),b8=new re({}),v8=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L807"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sp=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[oea]},$$scope:{ctx:$}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[rea]},$$scope:{ctx:$}}}),E8=new re({}),C8=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L814"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p2=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[tea]},$$scope:{ctx:$}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[aea]},$$scope:{ctx:$}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L829"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[nea]},$$scope:{ctx:$}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ov=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[sea]},$$scope:{ctx:$}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L836"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tv=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[lea]},$$scope:{ctx:$}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[iea]},$$scope:{ctx:$}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dea]},$$scope:{ctx:$}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f1=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cea]},$$scope:{ctx:$}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L852"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h1=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[mea]},$$scope:{ctx:$}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fea]},$$scope:{ctx:$}}}),H8=new re({}),U8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L897"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[gea]},$$scope:{ctx:$}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hea]},$$scope:{ctx:$}}}),Z8=new re({}),e9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L904"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uea]},$$scope:{ctx:$}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pea]},$$scope:{ctx:$}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L890"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[_ea]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bea]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L861"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vea]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Fea]},$$scope:{ctx:$}}}),h9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L868"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Tea]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Mea]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L913"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Eea]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Cea]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L952"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[wea]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Aea]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L959"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Lea]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yea]},$$scope:{ctx:$}}}),P9=new re({}),B9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L879"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[xea]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[$ea]},$$scope:{ctx:$}}}),j9=new re({}),D9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L966"}}),O9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kea]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Sea]},$$scope:{ctx:$}}}),X9=new re({}),z9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L989"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Rea]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Pea]},$$scope:{ctx:$}}}),U9=new re({}),J9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L973"}}),K9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Bea]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Iea]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L980"}}),tx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Nea]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m4=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qea]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L998"}}),dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g4=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jea]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Dea]},$$scope:{ctx:$}}}),mx=new re({}),fx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1005"}}),hx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Gea]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Oea]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L945"}}),vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Vea]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Xea]},$$scope:{ctx:$}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L920"}}),wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zea]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Wea]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L927"}}),$x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Qea]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Hea]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L936"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Uea]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Jea]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Yea]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Kea]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Zea]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eoa]},$$scope:{ctx:$}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[ooa]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[roa]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[toa]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aoa]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[noa]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[soa]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),m$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[loa]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ioa]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),p$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[doa]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[coa]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),T$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[moa]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[foa]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),A$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[goa]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hoa]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),S$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[uoa]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[poa]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),N$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[_oa]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[boa]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),O$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[voa]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Foa]},$$scope:{ctx:$}}}),X$=new re({}),z$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Toa]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Moa]},$$scope:{ctx:$}}}),U$=new re({}),J$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),K$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Eoa]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Iw=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Coa]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[woa]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f6=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Aoa]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h6=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Loa]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w6=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[yoa]},$$scope:{ctx:$}}}),ck=new re({}),mk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L6=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[xoa]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G6=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$oa]},$$scope:{ctx:$}}}),uk=new re({}),pk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V6=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[koa]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Soa]},$$scope:{ctx:$}}}),Fk=new re({}),Tk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rA=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Roa]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gA=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Poa]},$$scope:{ctx:$}}}),wk=new re({}),Ak=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),yk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uA=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Boa]},$$scope:{ctx:$}}}),xk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ioa]},$$scope:{ctx:$}}}),$k=new re({}),kk=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Noa]},$$scope:{ctx:$}}}),Pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qoa]},$$scope:{ctx:$}}}),Bk=new re({}),Ik=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),qk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[joa]},$$scope:{ctx:$}}}),jk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JA=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Doa]},$$scope:{ctx:$}}}),Dk=new re({}),Gk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Vk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KA=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Goa]},$$scope:{ctx:$}}}),Xk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ooa]},$$scope:{ctx:$}}}),zk=new re({}),Wk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Voa]},$$scope:{ctx:$}}}),Uk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Xoa]},$$scope:{ctx:$}}}),Jk=new re({}),Yk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Zk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[zoa]},$$scope:{ctx:$}}}),eS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Woa]},$$scope:{ctx:$}}}),rS=new re({}),tS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),nS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b7=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Qoa]},$$scope:{ctx:$}}}),sS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Hoa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Ii=o("Auto Classes"),Xm=l(),dt=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),qi=a("code"),Oy=o("from_pretrained()"),zm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),ji=o("Instantiating one of "),Dn=a("a"),Vy=o("AutoConfig"),Gn=o(", "),On=a("a"),Xy=o("AutoModel"),Di=o(`, and
`),Vn=a("a"),zy=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Wm=l(),F(Ia.$$.fragment),He=l(),Ae=a("p"),$R=o("will create a model that is an instance of "),Oi=a("a"),kR=o("BertModel"),SR=o("."),Lo=l(),Na=a("p"),RR=o("There is one class of "),Qm=a("code"),PR=o("AutoModel"),eYe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BWe=l(),Vi=a("h2"),Hm=a("a"),Kne=a("span"),F(Wy.$$.fragment),oYe=l(),Zne=a("span"),rYe=o("Extending the Auto Classes"),IWe=l(),Xn=a("p"),tYe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ese=a("code"),aYe=o("NewModel"),nYe=o(", make sure you have a "),ose=a("code"),sYe=o("NewModelConfig"),lYe=o(` then you can add those to the auto
classes like this:`),NWe=l(),F(Qy.$$.fragment),qWe=l(),BR=a("p"),iYe=o("You will then be able to use the auto classes like you would usually do!"),jWe=l(),F(Um.$$.fragment),DWe=l(),Xi=a("h2"),Jm=a("a"),rse=a("span"),F(Hy.$$.fragment),dYe=l(),tse=a("span"),cYe=o("AutoConfig"),GWe=l(),yo=a("div"),F(Uy.$$.fragment),mYe=l(),Jy=a("p"),fYe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),IR=a("a"),gYe=o("from_pretrained()"),hYe=o(" class method."),uYe=l(),Yy=a("p"),pYe=o("This class cannot be instantiated directly using "),ase=a("code"),_Ye=o("__init__()"),bYe=o(" (throws an error)."),vYe=l(),$r=a("div"),F(Ky.$$.fragment),FYe=l(),nse=a("p"),TYe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),MYe=l(),zi=a("p"),EYe=o("The configuration class to instantiate is selected based on the "),sse=a("code"),CYe=o("model_type"),wYe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lse=a("code"),AYe=o("pretrained_model_name_or_path"),LYe=o(":"),yYe=l(),A=a("ul"),Ym=a("li"),ise=a("strong"),xYe=o("albert"),$Ye=o(" \u2014 "),NR=a("a"),kYe=o("AlbertConfig"),SYe=o(" (ALBERT model)"),RYe=l(),Km=a("li"),dse=a("strong"),PYe=o("bart"),BYe=o(" \u2014 "),qR=a("a"),IYe=o("BartConfig"),NYe=o(" (BART model)"),qYe=l(),Zm=a("li"),cse=a("strong"),jYe=o("beit"),DYe=o(" \u2014 "),jR=a("a"),GYe=o("BeitConfig"),OYe=o(" (BEiT model)"),VYe=l(),ef=a("li"),mse=a("strong"),XYe=o("bert"),zYe=o(" \u2014 "),DR=a("a"),WYe=o("BertConfig"),QYe=o(" (BERT model)"),HYe=l(),of=a("li"),fse=a("strong"),UYe=o("bert-generation"),JYe=o(" \u2014 "),GR=a("a"),YYe=o("BertGenerationConfig"),KYe=o(" (Bert Generation model)"),ZYe=l(),rf=a("li"),gse=a("strong"),eKe=o("big_bird"),oKe=o(" \u2014 "),OR=a("a"),rKe=o("BigBirdConfig"),tKe=o(" (BigBird model)"),aKe=l(),tf=a("li"),hse=a("strong"),nKe=o("bigbird_pegasus"),sKe=o(" \u2014 "),VR=a("a"),lKe=o("BigBirdPegasusConfig"),iKe=o(" (BigBird-Pegasus model)"),dKe=l(),af=a("li"),use=a("strong"),cKe=o("blenderbot"),mKe=o(" \u2014 "),XR=a("a"),fKe=o("BlenderbotConfig"),gKe=o(" (Blenderbot model)"),hKe=l(),nf=a("li"),pse=a("strong"),uKe=o("blenderbot-small"),pKe=o(" \u2014 "),zR=a("a"),_Ke=o("BlenderbotSmallConfig"),bKe=o(" (BlenderbotSmall model)"),vKe=l(),sf=a("li"),_se=a("strong"),FKe=o("bloom"),TKe=o(" \u2014 "),WR=a("a"),MKe=o("BloomConfig"),EKe=o(" (BLOOM model)"),CKe=l(),lf=a("li"),bse=a("strong"),wKe=o("camembert"),AKe=o(" \u2014 "),QR=a("a"),LKe=o("CamembertConfig"),yKe=o(" (CamemBERT model)"),xKe=l(),df=a("li"),vse=a("strong"),$Ke=o("canine"),kKe=o(" \u2014 "),HR=a("a"),SKe=o("CanineConfig"),RKe=o(" (CANINE model)"),PKe=l(),cf=a("li"),Fse=a("strong"),BKe=o("clip"),IKe=o(" \u2014 "),UR=a("a"),NKe=o("CLIPConfig"),qKe=o(" (CLIP model)"),jKe=l(),mf=a("li"),Tse=a("strong"),DKe=o("codegen"),GKe=o(" \u2014 "),JR=a("a"),OKe=o("CodeGenConfig"),VKe=o(" (CodeGen model)"),XKe=l(),ff=a("li"),Mse=a("strong"),zKe=o("convbert"),WKe=o(" \u2014 "),YR=a("a"),QKe=o("ConvBertConfig"),HKe=o(" (ConvBERT model)"),UKe=l(),gf=a("li"),Ese=a("strong"),JKe=o("convnext"),YKe=o(" \u2014 "),KR=a("a"),KKe=o("ConvNextConfig"),ZKe=o(" (ConvNeXT model)"),eZe=l(),hf=a("li"),Cse=a("strong"),oZe=o("ctrl"),rZe=o(" \u2014 "),ZR=a("a"),tZe=o("CTRLConfig"),aZe=o(" (CTRL model)"),nZe=l(),uf=a("li"),wse=a("strong"),sZe=o("cvt"),lZe=o(" \u2014 "),eP=a("a"),iZe=o("CvtConfig"),dZe=o(" (CvT model)"),cZe=l(),pf=a("li"),Ase=a("strong"),mZe=o("data2vec-audio"),fZe=o(" \u2014 "),oP=a("a"),gZe=o("Data2VecAudioConfig"),hZe=o(" (Data2VecAudio model)"),uZe=l(),_f=a("li"),Lse=a("strong"),pZe=o("data2vec-text"),_Ze=o(" \u2014 "),rP=a("a"),bZe=o("Data2VecTextConfig"),vZe=o(" (Data2VecText model)"),FZe=l(),bf=a("li"),yse=a("strong"),TZe=o("data2vec-vision"),MZe=o(" \u2014 "),tP=a("a"),EZe=o("Data2VecVisionConfig"),CZe=o(" (Data2VecVision model)"),wZe=l(),vf=a("li"),xse=a("strong"),AZe=o("deberta"),LZe=o(" \u2014 "),aP=a("a"),yZe=o("DebertaConfig"),xZe=o(" (DeBERTa model)"),$Ze=l(),Ff=a("li"),$se=a("strong"),kZe=o("deberta-v2"),SZe=o(" \u2014 "),nP=a("a"),RZe=o("DebertaV2Config"),PZe=o(" (DeBERTa-v2 model)"),BZe=l(),Tf=a("li"),kse=a("strong"),IZe=o("decision_transformer"),NZe=o(" \u2014 "),sP=a("a"),qZe=o("DecisionTransformerConfig"),jZe=o(" (Decision Transformer model)"),DZe=l(),Mf=a("li"),Sse=a("strong"),GZe=o("deit"),OZe=o(" \u2014 "),lP=a("a"),VZe=o("DeiTConfig"),XZe=o(" (DeiT model)"),zZe=l(),Ef=a("li"),Rse=a("strong"),WZe=o("detr"),QZe=o(" \u2014 "),iP=a("a"),HZe=o("DetrConfig"),UZe=o(" (DETR model)"),JZe=l(),Cf=a("li"),Pse=a("strong"),YZe=o("distilbert"),KZe=o(" \u2014 "),dP=a("a"),ZZe=o("DistilBertConfig"),eeo=o(" (DistilBERT model)"),oeo=l(),wf=a("li"),Bse=a("strong"),reo=o("dpr"),teo=o(" \u2014 "),cP=a("a"),aeo=o("DPRConfig"),neo=o(" (DPR model)"),seo=l(),Af=a("li"),Ise=a("strong"),leo=o("dpt"),ieo=o(" \u2014 "),mP=a("a"),deo=o("DPTConfig"),ceo=o(" (DPT model)"),meo=l(),Lf=a("li"),Nse=a("strong"),feo=o("electra"),geo=o(" \u2014 "),fP=a("a"),heo=o("ElectraConfig"),ueo=o(" (ELECTRA model)"),peo=l(),yf=a("li"),qse=a("strong"),_eo=o("encoder-decoder"),beo=o(" \u2014 "),gP=a("a"),veo=o("EncoderDecoderConfig"),Feo=o(" (Encoder decoder model)"),Teo=l(),xf=a("li"),jse=a("strong"),Meo=o("flaubert"),Eeo=o(" \u2014 "),hP=a("a"),Ceo=o("FlaubertConfig"),weo=o(" (FlauBERT model)"),Aeo=l(),$f=a("li"),Dse=a("strong"),Leo=o("flava"),yeo=o(" \u2014 "),uP=a("a"),xeo=o("FlavaConfig"),$eo=o(" (FLAVA model)"),keo=l(),kf=a("li"),Gse=a("strong"),Seo=o("fnet"),Reo=o(" \u2014 "),pP=a("a"),Peo=o("FNetConfig"),Beo=o(" (FNet model)"),Ieo=l(),Sf=a("li"),Ose=a("strong"),Neo=o("fsmt"),qeo=o(" \u2014 "),_P=a("a"),jeo=o("FSMTConfig"),Deo=o(" (FairSeq Machine-Translation model)"),Geo=l(),Rf=a("li"),Vse=a("strong"),Oeo=o("funnel"),Veo=o(" \u2014 "),bP=a("a"),Xeo=o("FunnelConfig"),zeo=o(" (Funnel Transformer model)"),Weo=l(),Pf=a("li"),Xse=a("strong"),Qeo=o("glpn"),Heo=o(" \u2014 "),vP=a("a"),Ueo=o("GLPNConfig"),Jeo=o(" (GLPN model)"),Yeo=l(),Bf=a("li"),zse=a("strong"),Keo=o("gpt2"),Zeo=o(" \u2014 "),FP=a("a"),eoo=o("GPT2Config"),ooo=o(" (OpenAI GPT-2 model)"),roo=l(),If=a("li"),Wse=a("strong"),too=o("gpt_neo"),aoo=o(" \u2014 "),TP=a("a"),noo=o("GPTNeoConfig"),soo=o(" (GPT Neo model)"),loo=l(),Nf=a("li"),Qse=a("strong"),ioo=o("gpt_neox"),doo=o(" \u2014 "),MP=a("a"),coo=o("GPTNeoXConfig"),moo=o(" (GPT NeoX model)"),foo=l(),qf=a("li"),Hse=a("strong"),goo=o("gptj"),hoo=o(" \u2014 "),EP=a("a"),uoo=o("GPTJConfig"),poo=o(" (GPT-J model)"),_oo=l(),jf=a("li"),Use=a("strong"),boo=o("groupvit"),voo=o(" \u2014 "),CP=a("a"),Foo=o("GroupViTConfig"),Too=o(" (GroupViT model)"),Moo=l(),Df=a("li"),Jse=a("strong"),Eoo=o("hubert"),Coo=o(" \u2014 "),wP=a("a"),woo=o("HubertConfig"),Aoo=o(" (Hubert model)"),Loo=l(),Gf=a("li"),Yse=a("strong"),yoo=o("ibert"),xoo=o(" \u2014 "),AP=a("a"),$oo=o("IBertConfig"),koo=o(" (I-BERT model)"),Soo=l(),Of=a("li"),Kse=a("strong"),Roo=o("imagegpt"),Poo=o(" \u2014 "),LP=a("a"),Boo=o("ImageGPTConfig"),Ioo=o(" (ImageGPT model)"),Noo=l(),Vf=a("li"),Zse=a("strong"),qoo=o("layoutlm"),joo=o(" \u2014 "),yP=a("a"),Doo=o("LayoutLMConfig"),Goo=o(" (LayoutLM model)"),Ooo=l(),Xf=a("li"),ele=a("strong"),Voo=o("layoutlmv2"),Xoo=o(" \u2014 "),xP=a("a"),zoo=o("LayoutLMv2Config"),Woo=o(" (LayoutLMv2 model)"),Qoo=l(),zf=a("li"),ole=a("strong"),Hoo=o("layoutlmv3"),Uoo=o(" \u2014 "),$P=a("a"),Joo=o("LayoutLMv3Config"),Yoo=o(" (LayoutLMv3 model)"),Koo=l(),Wf=a("li"),rle=a("strong"),Zoo=o("led"),ero=o(" \u2014 "),kP=a("a"),oro=o("LEDConfig"),rro=o(" (LED model)"),tro=l(),Qf=a("li"),tle=a("strong"),aro=o("levit"),nro=o(" \u2014 "),SP=a("a"),sro=o("LevitConfig"),lro=o(" (LeViT model)"),iro=l(),Hf=a("li"),ale=a("strong"),dro=o("longformer"),cro=o(" \u2014 "),RP=a("a"),mro=o("LongformerConfig"),fro=o(" (Longformer model)"),gro=l(),Uf=a("li"),nle=a("strong"),hro=o("longt5"),uro=o(" \u2014 "),PP=a("a"),pro=o("LongT5Config"),_ro=o(" (LongT5 model)"),bro=l(),Jf=a("li"),sle=a("strong"),vro=o("luke"),Fro=o(" \u2014 "),BP=a("a"),Tro=o("LukeConfig"),Mro=o(" (LUKE model)"),Ero=l(),Yf=a("li"),lle=a("strong"),Cro=o("lxmert"),wro=o(" \u2014 "),IP=a("a"),Aro=o("LxmertConfig"),Lro=o(" (LXMERT model)"),yro=l(),Kf=a("li"),ile=a("strong"),xro=o("m2m_100"),$ro=o(" \u2014 "),NP=a("a"),kro=o("M2M100Config"),Sro=o(" (M2M100 model)"),Rro=l(),Zf=a("li"),dle=a("strong"),Pro=o("marian"),Bro=o(" \u2014 "),qP=a("a"),Iro=o("MarianConfig"),Nro=o(" (Marian model)"),qro=l(),eg=a("li"),cle=a("strong"),jro=o("maskformer"),Dro=o(" \u2014 "),jP=a("a"),Gro=o("MaskFormerConfig"),Oro=o(" (MaskFormer model)"),Vro=l(),og=a("li"),mle=a("strong"),Xro=o("mbart"),zro=o(" \u2014 "),DP=a("a"),Wro=o("MBartConfig"),Qro=o(" (mBART model)"),Hro=l(),rg=a("li"),fle=a("strong"),Uro=o("mctct"),Jro=o(" \u2014 "),GP=a("a"),Yro=o("MCTCTConfig"),Kro=o(" (M-CTC-T model)"),Zro=l(),tg=a("li"),gle=a("strong"),eto=o("megatron-bert"),oto=o(" \u2014 "),OP=a("a"),rto=o("MegatronBertConfig"),tto=o(" (Megatron-BERT model)"),ato=l(),ag=a("li"),hle=a("strong"),nto=o("mobilebert"),sto=o(" \u2014 "),VP=a("a"),lto=o("MobileBertConfig"),ito=o(" (MobileBERT model)"),dto=l(),ng=a("li"),ule=a("strong"),cto=o("mobilevit"),mto=o(" \u2014 "),XP=a("a"),fto=o("MobileViTConfig"),gto=o(" (MobileViT model)"),hto=l(),sg=a("li"),ple=a("strong"),uto=o("mpnet"),pto=o(" \u2014 "),zP=a("a"),_to=o("MPNetConfig"),bto=o(" (MPNet model)"),vto=l(),lg=a("li"),_le=a("strong"),Fto=o("mt5"),Tto=o(" \u2014 "),WP=a("a"),Mto=o("MT5Config"),Eto=o(" (MT5 model)"),Cto=l(),ig=a("li"),ble=a("strong"),wto=o("mvp"),Ato=o(" \u2014 "),QP=a("a"),Lto=o("MvpConfig"),yto=o(" (MVP model)"),xto=l(),dg=a("li"),vle=a("strong"),$to=o("nezha"),kto=o(" \u2014 "),HP=a("a"),Sto=o("NezhaConfig"),Rto=o(" (Nezha model)"),Pto=l(),cg=a("li"),Fle=a("strong"),Bto=o("nystromformer"),Ito=o(" \u2014 "),UP=a("a"),Nto=o("NystromformerConfig"),qto=o(" (Nystr\xF6mformer model)"),jto=l(),mg=a("li"),Tle=a("strong"),Dto=o("openai-gpt"),Gto=o(" \u2014 "),JP=a("a"),Oto=o("OpenAIGPTConfig"),Vto=o(" (OpenAI GPT model)"),Xto=l(),fg=a("li"),Mle=a("strong"),zto=o("opt"),Wto=o(" \u2014 "),YP=a("a"),Qto=o("OPTConfig"),Hto=o(" (OPT model)"),Uto=l(),gg=a("li"),Ele=a("strong"),Jto=o("owlvit"),Yto=o(" \u2014 "),KP=a("a"),Kto=o("OwlViTConfig"),Zto=o(" (OWL-ViT model)"),eao=l(),hg=a("li"),Cle=a("strong"),oao=o("pegasus"),rao=o(" \u2014 "),ZP=a("a"),tao=o("PegasusConfig"),aao=o(" (Pegasus model)"),nao=l(),ug=a("li"),wle=a("strong"),sao=o("perceiver"),lao=o(" \u2014 "),eB=a("a"),iao=o("PerceiverConfig"),dao=o(" (Perceiver model)"),cao=l(),pg=a("li"),Ale=a("strong"),mao=o("plbart"),fao=o(" \u2014 "),oB=a("a"),gao=o("PLBartConfig"),hao=o(" (PLBart model)"),uao=l(),_g=a("li"),Lle=a("strong"),pao=o("poolformer"),_ao=o(" \u2014 "),rB=a("a"),bao=o("PoolFormerConfig"),vao=o(" (PoolFormer model)"),Fao=l(),bg=a("li"),yle=a("strong"),Tao=o("prophetnet"),Mao=o(" \u2014 "),tB=a("a"),Eao=o("ProphetNetConfig"),Cao=o(" (ProphetNet model)"),wao=l(),vg=a("li"),xle=a("strong"),Aao=o("qdqbert"),Lao=o(" \u2014 "),aB=a("a"),yao=o("QDQBertConfig"),xao=o(" (QDQBert model)"),$ao=l(),Fg=a("li"),$le=a("strong"),kao=o("rag"),Sao=o(" \u2014 "),nB=a("a"),Rao=o("RagConfig"),Pao=o(" (RAG model)"),Bao=l(),Tg=a("li"),kle=a("strong"),Iao=o("realm"),Nao=o(" \u2014 "),sB=a("a"),qao=o("RealmConfig"),jao=o(" (REALM model)"),Dao=l(),Mg=a("li"),Sle=a("strong"),Gao=o("reformer"),Oao=o(" \u2014 "),lB=a("a"),Vao=o("ReformerConfig"),Xao=o(" (Reformer model)"),zao=l(),Eg=a("li"),Rle=a("strong"),Wao=o("regnet"),Qao=o(" \u2014 "),iB=a("a"),Hao=o("RegNetConfig"),Uao=o(" (RegNet model)"),Jao=l(),Cg=a("li"),Ple=a("strong"),Yao=o("rembert"),Kao=o(" \u2014 "),dB=a("a"),Zao=o("RemBertConfig"),eno=o(" (RemBERT model)"),ono=l(),wg=a("li"),Ble=a("strong"),rno=o("resnet"),tno=o(" \u2014 "),cB=a("a"),ano=o("ResNetConfig"),nno=o(" (ResNet model)"),sno=l(),Ag=a("li"),Ile=a("strong"),lno=o("retribert"),ino=o(" \u2014 "),mB=a("a"),dno=o("RetriBertConfig"),cno=o(" (RetriBERT model)"),mno=l(),Lg=a("li"),Nle=a("strong"),fno=o("roberta"),gno=o(" \u2014 "),fB=a("a"),hno=o("RobertaConfig"),uno=o(" (RoBERTa model)"),pno=l(),yg=a("li"),qle=a("strong"),_no=o("roformer"),bno=o(" \u2014 "),gB=a("a"),vno=o("RoFormerConfig"),Fno=o(" (RoFormer model)"),Tno=l(),xg=a("li"),jle=a("strong"),Mno=o("segformer"),Eno=o(" \u2014 "),hB=a("a"),Cno=o("SegformerConfig"),wno=o(" (SegFormer model)"),Ano=l(),$g=a("li"),Dle=a("strong"),Lno=o("sew"),yno=o(" \u2014 "),uB=a("a"),xno=o("SEWConfig"),$no=o(" (SEW model)"),kno=l(),kg=a("li"),Gle=a("strong"),Sno=o("sew-d"),Rno=o(" \u2014 "),pB=a("a"),Pno=o("SEWDConfig"),Bno=o(" (SEW-D model)"),Ino=l(),Sg=a("li"),Ole=a("strong"),Nno=o("speech-encoder-decoder"),qno=o(" \u2014 "),_B=a("a"),jno=o("SpeechEncoderDecoderConfig"),Dno=o(" (Speech Encoder decoder model)"),Gno=l(),Rg=a("li"),Vle=a("strong"),Ono=o("speech_to_text"),Vno=o(" \u2014 "),bB=a("a"),Xno=o("Speech2TextConfig"),zno=o(" (Speech2Text model)"),Wno=l(),Pg=a("li"),Xle=a("strong"),Qno=o("speech_to_text_2"),Hno=o(" \u2014 "),vB=a("a"),Uno=o("Speech2Text2Config"),Jno=o(" (Speech2Text2 model)"),Yno=l(),Bg=a("li"),zle=a("strong"),Kno=o("splinter"),Zno=o(" \u2014 "),FB=a("a"),eso=o("SplinterConfig"),oso=o(" (Splinter model)"),rso=l(),Ig=a("li"),Wle=a("strong"),tso=o("squeezebert"),aso=o(" \u2014 "),TB=a("a"),nso=o("SqueezeBertConfig"),sso=o(" (SqueezeBERT model)"),lso=l(),Ng=a("li"),Qle=a("strong"),iso=o("swin"),dso=o(" \u2014 "),MB=a("a"),cso=o("SwinConfig"),mso=o(" (Swin Transformer model)"),fso=l(),qg=a("li"),Hle=a("strong"),gso=o("swinv2"),hso=o(" \u2014 "),EB=a("a"),uso=o("Swinv2Config"),pso=o(" (Swin Transformer V2 model)"),_so=l(),jg=a("li"),Ule=a("strong"),bso=o("t5"),vso=o(" \u2014 "),CB=a("a"),Fso=o("T5Config"),Tso=o(" (T5 model)"),Mso=l(),Dg=a("li"),Jle=a("strong"),Eso=o("tapas"),Cso=o(" \u2014 "),wB=a("a"),wso=o("TapasConfig"),Aso=o(" (TAPAS model)"),Lso=l(),Gg=a("li"),Yle=a("strong"),yso=o("trajectory_transformer"),xso=o(" \u2014 "),AB=a("a"),$so=o("TrajectoryTransformerConfig"),kso=o(" (Trajectory Transformer model)"),Sso=l(),Og=a("li"),Kle=a("strong"),Rso=o("transfo-xl"),Pso=o(" \u2014 "),LB=a("a"),Bso=o("TransfoXLConfig"),Iso=o(" (Transformer-XL model)"),Nso=l(),Vg=a("li"),Zle=a("strong"),qso=o("trocr"),jso=o(" \u2014 "),yB=a("a"),Dso=o("TrOCRConfig"),Gso=o(" (TrOCR model)"),Oso=l(),Xg=a("li"),eie=a("strong"),Vso=o("unispeech"),Xso=o(" \u2014 "),xB=a("a"),zso=o("UniSpeechConfig"),Wso=o(" (UniSpeech model)"),Qso=l(),zg=a("li"),oie=a("strong"),Hso=o("unispeech-sat"),Uso=o(" \u2014 "),$B=a("a"),Jso=o("UniSpeechSatConfig"),Yso=o(" (UniSpeechSat model)"),Kso=l(),Wg=a("li"),rie=a("strong"),Zso=o("van"),elo=o(" \u2014 "),kB=a("a"),olo=o("VanConfig"),rlo=o(" (VAN model)"),tlo=l(),Qg=a("li"),tie=a("strong"),alo=o("videomae"),nlo=o(" \u2014 "),SB=a("a"),slo=o("VideoMAEConfig"),llo=o(" (VideoMAE model)"),ilo=l(),Hg=a("li"),aie=a("strong"),dlo=o("vilt"),clo=o(" \u2014 "),RB=a("a"),mlo=o("ViltConfig"),flo=o(" (ViLT model)"),glo=l(),Ug=a("li"),nie=a("strong"),hlo=o("vision-encoder-decoder"),ulo=o(" \u2014 "),PB=a("a"),plo=o("VisionEncoderDecoderConfig"),_lo=o(" (Vision Encoder decoder model)"),blo=l(),Jg=a("li"),sie=a("strong"),vlo=o("vision-text-dual-encoder"),Flo=o(" \u2014 "),BB=a("a"),Tlo=o("VisionTextDualEncoderConfig"),Mlo=o(" (VisionTextDualEncoder model)"),Elo=l(),Yg=a("li"),lie=a("strong"),Clo=o("visual_bert"),wlo=o(" \u2014 "),IB=a("a"),Alo=o("VisualBertConfig"),Llo=o(" (VisualBERT model)"),ylo=l(),Kg=a("li"),iie=a("strong"),xlo=o("vit"),$lo=o(" \u2014 "),NB=a("a"),klo=o("ViTConfig"),Slo=o(" (ViT model)"),Rlo=l(),Zg=a("li"),die=a("strong"),Plo=o("vit_mae"),Blo=o(" \u2014 "),qB=a("a"),Ilo=o("ViTMAEConfig"),Nlo=o(" (ViTMAE model)"),qlo=l(),eh=a("li"),cie=a("strong"),jlo=o("wav2vec2"),Dlo=o(" \u2014 "),jB=a("a"),Glo=o("Wav2Vec2Config"),Olo=o(" (Wav2Vec2 model)"),Vlo=l(),oh=a("li"),mie=a("strong"),Xlo=o("wav2vec2-conformer"),zlo=o(" \u2014 "),DB=a("a"),Wlo=o("Wav2Vec2ConformerConfig"),Qlo=o(" (Wav2Vec2-Conformer model)"),Hlo=l(),rh=a("li"),fie=a("strong"),Ulo=o("wavlm"),Jlo=o(" \u2014 "),GB=a("a"),Ylo=o("WavLMConfig"),Klo=o(" (WavLM model)"),Zlo=l(),th=a("li"),gie=a("strong"),eio=o("xglm"),oio=o(" \u2014 "),OB=a("a"),rio=o("XGLMConfig"),tio=o(" (XGLM model)"),aio=l(),ah=a("li"),hie=a("strong"),nio=o("xlm"),sio=o(" \u2014 "),VB=a("a"),lio=o("XLMConfig"),iio=o(" (XLM model)"),dio=l(),nh=a("li"),uie=a("strong"),cio=o("xlm-prophetnet"),mio=o(" \u2014 "),XB=a("a"),fio=o("XLMProphetNetConfig"),gio=o(" (XLM-ProphetNet model)"),hio=l(),sh=a("li"),pie=a("strong"),uio=o("xlm-roberta"),pio=o(" \u2014 "),zB=a("a"),_io=o("XLMRobertaConfig"),bio=o(" (XLM-RoBERTa model)"),vio=l(),lh=a("li"),_ie=a("strong"),Fio=o("xlm-roberta-xl"),Tio=o(" \u2014 "),WB=a("a"),Mio=o("XLMRobertaXLConfig"),Eio=o(" (XLM-RoBERTa-XL model)"),Cio=l(),ih=a("li"),bie=a("strong"),wio=o("xlnet"),Aio=o(" \u2014 "),QB=a("a"),Lio=o("XLNetConfig"),yio=o(" (XLNet model)"),xio=l(),dh=a("li"),vie=a("strong"),$io=o("yolos"),kio=o(" \u2014 "),HB=a("a"),Sio=o("YolosConfig"),Rio=o(" (YOLOS model)"),Pio=l(),ch=a("li"),Fie=a("strong"),Bio=o("yoso"),Iio=o(" \u2014 "),UB=a("a"),Nio=o("YosoConfig"),qio=o(" (YOSO model)"),jio=l(),F(mh.$$.fragment),Dio=l(),fh=a("div"),F(Zy.$$.fragment),Gio=l(),Tie=a("p"),Oio=o("Register a new configuration for this class."),OWe=l(),Wi=a("h2"),gh=a("a"),Mie=a("span"),F(e8.$$.fragment),Vio=l(),Eie=a("span"),Xio=o("AutoTokenizer"),VWe=l(),xo=a("div"),F(o8.$$.fragment),zio=l(),r8=a("p"),Wio=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JB=a("a"),Qio=o("AutoTokenizer.from_pretrained()"),Hio=o(" class method."),Uio=l(),t8=a("p"),Jio=o("This class cannot be instantiated directly using "),Cie=a("code"),Yio=o("__init__()"),Kio=o(" (throws an error)."),Zio=l(),kr=a("div"),F(a8.$$.fragment),edo=l(),wie=a("p"),odo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),rdo=l(),qa=a("p"),tdo=o("The tokenizer class to instantiate is selected based on the "),Aie=a("code"),ado=o("model_type"),ndo=o(` property of the config object (either
passed as an argument or loaded from `),Lie=a("code"),sdo=o("pretrained_model_name_or_path"),ldo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),ido=o("pretrained_model_name_or_path"),ddo=o(":"),cdo=l(),k=a("ul"),zn=a("li"),xie=a("strong"),mdo=o("albert"),fdo=o(" \u2014 "),YB=a("a"),gdo=o("AlbertTokenizer"),hdo=o(" or "),KB=a("a"),udo=o("AlbertTokenizerFast"),pdo=o(" (ALBERT model)"),_do=l(),Wn=a("li"),$ie=a("strong"),bdo=o("bart"),vdo=o(" \u2014 "),ZB=a("a"),Fdo=o("BartTokenizer"),Tdo=o(" or "),eI=a("a"),Mdo=o("BartTokenizerFast"),Edo=o(" (BART model)"),Cdo=l(),Qn=a("li"),kie=a("strong"),wdo=o("barthez"),Ado=o(" \u2014 "),oI=a("a"),Ldo=o("BarthezTokenizer"),ydo=o(" or "),rI=a("a"),xdo=o("BarthezTokenizerFast"),$do=o(" (BARThez model)"),kdo=l(),hh=a("li"),Sie=a("strong"),Sdo=o("bartpho"),Rdo=o(" \u2014 "),tI=a("a"),Pdo=o("BartphoTokenizer"),Bdo=o(" (BARTpho model)"),Ido=l(),Hn=a("li"),Rie=a("strong"),Ndo=o("bert"),qdo=o(" \u2014 "),aI=a("a"),jdo=o("BertTokenizer"),Ddo=o(" or "),nI=a("a"),Gdo=o("BertTokenizerFast"),Odo=o(" (BERT model)"),Vdo=l(),uh=a("li"),Pie=a("strong"),Xdo=o("bert-generation"),zdo=o(" \u2014 "),sI=a("a"),Wdo=o("BertGenerationTokenizer"),Qdo=o(" (Bert Generation model)"),Hdo=l(),ph=a("li"),Bie=a("strong"),Udo=o("bert-japanese"),Jdo=o(" \u2014 "),lI=a("a"),Ydo=o("BertJapaneseTokenizer"),Kdo=o(" (BertJapanese model)"),Zdo=l(),_h=a("li"),Iie=a("strong"),eco=o("bertweet"),oco=o(" \u2014 "),iI=a("a"),rco=o("BertweetTokenizer"),tco=o(" (BERTweet model)"),aco=l(),Un=a("li"),Nie=a("strong"),nco=o("big_bird"),sco=o(" \u2014 "),dI=a("a"),lco=o("BigBirdTokenizer"),ico=o(" or "),cI=a("a"),dco=o("BigBirdTokenizerFast"),cco=o(" (BigBird model)"),mco=l(),Jn=a("li"),qie=a("strong"),fco=o("bigbird_pegasus"),gco=o(" \u2014 "),mI=a("a"),hco=o("PegasusTokenizer"),uco=o(" or "),fI=a("a"),pco=o("PegasusTokenizerFast"),_co=o(" (BigBird-Pegasus model)"),bco=l(),Yn=a("li"),jie=a("strong"),vco=o("blenderbot"),Fco=o(" \u2014 "),gI=a("a"),Tco=o("BlenderbotTokenizer"),Mco=o(" or "),hI=a("a"),Eco=o("BlenderbotTokenizerFast"),Cco=o(" (Blenderbot model)"),wco=l(),bh=a("li"),Die=a("strong"),Aco=o("blenderbot-small"),Lco=o(" \u2014 "),uI=a("a"),yco=o("BlenderbotSmallTokenizer"),xco=o(" (BlenderbotSmall model)"),$co=l(),vh=a("li"),Gie=a("strong"),kco=o("bloom"),Sco=o(" \u2014 "),pI=a("a"),Rco=o("BloomTokenizerFast"),Pco=o(" (BLOOM model)"),Bco=l(),Fh=a("li"),Oie=a("strong"),Ico=o("byt5"),Nco=o(" \u2014 "),_I=a("a"),qco=o("ByT5Tokenizer"),jco=o(" (ByT5 model)"),Dco=l(),Kn=a("li"),Vie=a("strong"),Gco=o("camembert"),Oco=o(" \u2014 "),bI=a("a"),Vco=o("CamembertTokenizer"),Xco=o(" or "),vI=a("a"),zco=o("CamembertTokenizerFast"),Wco=o(" (CamemBERT model)"),Qco=l(),Th=a("li"),Xie=a("strong"),Hco=o("canine"),Uco=o(" \u2014 "),FI=a("a"),Jco=o("CanineTokenizer"),Yco=o(" (CANINE model)"),Kco=l(),Zn=a("li"),zie=a("strong"),Zco=o("clip"),emo=o(" \u2014 "),TI=a("a"),omo=o("CLIPTokenizer"),rmo=o(" or "),MI=a("a"),tmo=o("CLIPTokenizerFast"),amo=o(" (CLIP model)"),nmo=l(),es=a("li"),Wie=a("strong"),smo=o("codegen"),lmo=o(" \u2014 "),EI=a("a"),imo=o("CodeGenTokenizer"),dmo=o(" or "),CI=a("a"),cmo=o("CodeGenTokenizerFast"),mmo=o(" (CodeGen model)"),fmo=l(),os=a("li"),Qie=a("strong"),gmo=o("convbert"),hmo=o(" \u2014 "),wI=a("a"),umo=o("ConvBertTokenizer"),pmo=o(" or "),AI=a("a"),_mo=o("ConvBertTokenizerFast"),bmo=o(" (ConvBERT model)"),vmo=l(),rs=a("li"),Hie=a("strong"),Fmo=o("cpm"),Tmo=o(" \u2014 "),LI=a("a"),Mmo=o("CpmTokenizer"),Emo=o(" or "),yI=a("a"),Cmo=o("CpmTokenizerFast"),wmo=o(" (CPM model)"),Amo=l(),Mh=a("li"),Uie=a("strong"),Lmo=o("ctrl"),ymo=o(" \u2014 "),xI=a("a"),xmo=o("CTRLTokenizer"),$mo=o(" (CTRL model)"),kmo=l(),ts=a("li"),Jie=a("strong"),Smo=o("data2vec-text"),Rmo=o(" \u2014 "),$I=a("a"),Pmo=o("RobertaTokenizer"),Bmo=o(" or "),kI=a("a"),Imo=o("RobertaTokenizerFast"),Nmo=o(" (Data2VecText model)"),qmo=l(),as=a("li"),Yie=a("strong"),jmo=o("deberta"),Dmo=o(" \u2014 "),SI=a("a"),Gmo=o("DebertaTokenizer"),Omo=o(" or "),RI=a("a"),Vmo=o("DebertaTokenizerFast"),Xmo=o(" (DeBERTa model)"),zmo=l(),ns=a("li"),Kie=a("strong"),Wmo=o("deberta-v2"),Qmo=o(" \u2014 "),PI=a("a"),Hmo=o("DebertaV2Tokenizer"),Umo=o(" or "),BI=a("a"),Jmo=o("DebertaV2TokenizerFast"),Ymo=o(" (DeBERTa-v2 model)"),Kmo=l(),ss=a("li"),Zie=a("strong"),Zmo=o("distilbert"),efo=o(" \u2014 "),II=a("a"),ofo=o("DistilBertTokenizer"),rfo=o(" or "),NI=a("a"),tfo=o("DistilBertTokenizerFast"),afo=o(" (DistilBERT model)"),nfo=l(),ls=a("li"),ede=a("strong"),sfo=o("dpr"),lfo=o(" \u2014 "),qI=a("a"),ifo=o("DPRQuestionEncoderTokenizer"),dfo=o(" or "),jI=a("a"),cfo=o("DPRQuestionEncoderTokenizerFast"),mfo=o(" (DPR model)"),ffo=l(),is=a("li"),ode=a("strong"),gfo=o("electra"),hfo=o(" \u2014 "),DI=a("a"),ufo=o("ElectraTokenizer"),pfo=o(" or "),GI=a("a"),_fo=o("ElectraTokenizerFast"),bfo=o(" (ELECTRA model)"),vfo=l(),Eh=a("li"),rde=a("strong"),Ffo=o("flaubert"),Tfo=o(" \u2014 "),OI=a("a"),Mfo=o("FlaubertTokenizer"),Efo=o(" (FlauBERT model)"),Cfo=l(),ds=a("li"),tde=a("strong"),wfo=o("fnet"),Afo=o(" \u2014 "),VI=a("a"),Lfo=o("FNetTokenizer"),yfo=o(" or "),XI=a("a"),xfo=o("FNetTokenizerFast"),$fo=o(" (FNet model)"),kfo=l(),Ch=a("li"),ade=a("strong"),Sfo=o("fsmt"),Rfo=o(" \u2014 "),zI=a("a"),Pfo=o("FSMTTokenizer"),Bfo=o(" (FairSeq Machine-Translation model)"),Ifo=l(),cs=a("li"),nde=a("strong"),Nfo=o("funnel"),qfo=o(" \u2014 "),WI=a("a"),jfo=o("FunnelTokenizer"),Dfo=o(" or "),QI=a("a"),Gfo=o("FunnelTokenizerFast"),Ofo=o(" (Funnel Transformer model)"),Vfo=l(),ms=a("li"),sde=a("strong"),Xfo=o("gpt2"),zfo=o(" \u2014 "),HI=a("a"),Wfo=o("GPT2Tokenizer"),Qfo=o(" or "),UI=a("a"),Hfo=o("GPT2TokenizerFast"),Ufo=o(" (OpenAI GPT-2 model)"),Jfo=l(),fs=a("li"),lde=a("strong"),Yfo=o("gpt_neo"),Kfo=o(" \u2014 "),JI=a("a"),Zfo=o("GPT2Tokenizer"),ego=o(" or "),YI=a("a"),ogo=o("GPT2TokenizerFast"),rgo=o(" (GPT Neo model)"),tgo=l(),wh=a("li"),ide=a("strong"),ago=o("gpt_neox"),ngo=o(" \u2014 "),KI=a("a"),sgo=o("GPTNeoXTokenizerFast"),lgo=o(" (GPT NeoX model)"),igo=l(),gs=a("li"),dde=a("strong"),dgo=o("gptj"),cgo=o(" \u2014 "),ZI=a("a"),mgo=o("GPT2Tokenizer"),fgo=o(" or "),eN=a("a"),ggo=o("GPT2TokenizerFast"),hgo=o(" (GPT-J model)"),ugo=l(),hs=a("li"),cde=a("strong"),pgo=o("groupvit"),_go=o(" \u2014 "),oN=a("a"),bgo=o("CLIPTokenizer"),vgo=o(" or "),rN=a("a"),Fgo=o("CLIPTokenizerFast"),Tgo=o(" (GroupViT model)"),Mgo=l(),us=a("li"),mde=a("strong"),Ego=o("herbert"),Cgo=o(" \u2014 "),tN=a("a"),wgo=o("HerbertTokenizer"),Ago=o(" or "),aN=a("a"),Lgo=o("HerbertTokenizerFast"),ygo=o(" (HerBERT model)"),xgo=l(),Ah=a("li"),fde=a("strong"),$go=o("hubert"),kgo=o(" \u2014 "),nN=a("a"),Sgo=o("Wav2Vec2CTCTokenizer"),Rgo=o(" (Hubert model)"),Pgo=l(),ps=a("li"),gde=a("strong"),Bgo=o("ibert"),Igo=o(" \u2014 "),sN=a("a"),Ngo=o("RobertaTokenizer"),qgo=o(" or "),lN=a("a"),jgo=o("RobertaTokenizerFast"),Dgo=o(" (I-BERT model)"),Ggo=l(),_s=a("li"),hde=a("strong"),Ogo=o("layoutlm"),Vgo=o(" \u2014 "),iN=a("a"),Xgo=o("LayoutLMTokenizer"),zgo=o(" or "),dN=a("a"),Wgo=o("LayoutLMTokenizerFast"),Qgo=o(" (LayoutLM model)"),Hgo=l(),bs=a("li"),ude=a("strong"),Ugo=o("layoutlmv2"),Jgo=o(" \u2014 "),cN=a("a"),Ygo=o("LayoutLMv2Tokenizer"),Kgo=o(" or "),mN=a("a"),Zgo=o("LayoutLMv2TokenizerFast"),eho=o(" (LayoutLMv2 model)"),oho=l(),vs=a("li"),pde=a("strong"),rho=o("layoutlmv3"),tho=o(" \u2014 "),fN=a("a"),aho=o("LayoutLMv3Tokenizer"),nho=o(" or "),gN=a("a"),sho=o("LayoutLMv3TokenizerFast"),lho=o(" (LayoutLMv3 model)"),iho=l(),Fs=a("li"),_de=a("strong"),dho=o("layoutxlm"),cho=o(" \u2014 "),hN=a("a"),mho=o("LayoutXLMTokenizer"),fho=o(" or "),uN=a("a"),gho=o("LayoutXLMTokenizerFast"),hho=o(" (LayoutXLM model)"),uho=l(),Ts=a("li"),bde=a("strong"),pho=o("led"),_ho=o(" \u2014 "),pN=a("a"),bho=o("LEDTokenizer"),vho=o(" or "),_N=a("a"),Fho=o("LEDTokenizerFast"),Tho=o(" (LED model)"),Mho=l(),Ms=a("li"),vde=a("strong"),Eho=o("longformer"),Cho=o(" \u2014 "),bN=a("a"),who=o("LongformerTokenizer"),Aho=o(" or "),vN=a("a"),Lho=o("LongformerTokenizerFast"),yho=o(" (Longformer model)"),xho=l(),Es=a("li"),Fde=a("strong"),$ho=o("longt5"),kho=o(" \u2014 "),FN=a("a"),Sho=o("T5Tokenizer"),Rho=o(" or "),TN=a("a"),Pho=o("T5TokenizerFast"),Bho=o(" (LongT5 model)"),Iho=l(),Lh=a("li"),Tde=a("strong"),Nho=o("luke"),qho=o(" \u2014 "),MN=a("a"),jho=o("LukeTokenizer"),Dho=o(" (LUKE model)"),Gho=l(),Cs=a("li"),Mde=a("strong"),Oho=o("lxmert"),Vho=o(" \u2014 "),EN=a("a"),Xho=o("LxmertTokenizer"),zho=o(" or "),CN=a("a"),Who=o("LxmertTokenizerFast"),Qho=o(" (LXMERT model)"),Hho=l(),yh=a("li"),Ede=a("strong"),Uho=o("m2m_100"),Jho=o(" \u2014 "),wN=a("a"),Yho=o("M2M100Tokenizer"),Kho=o(" (M2M100 model)"),Zho=l(),xh=a("li"),Cde=a("strong"),euo=o("marian"),ouo=o(" \u2014 "),AN=a("a"),ruo=o("MarianTokenizer"),tuo=o(" (Marian model)"),auo=l(),ws=a("li"),wde=a("strong"),nuo=o("mbart"),suo=o(" \u2014 "),LN=a("a"),luo=o("MBartTokenizer"),iuo=o(" or "),yN=a("a"),duo=o("MBartTokenizerFast"),cuo=o(" (mBART model)"),muo=l(),As=a("li"),Ade=a("strong"),fuo=o("mbart50"),guo=o(" \u2014 "),xN=a("a"),huo=o("MBart50Tokenizer"),uuo=o(" or "),$N=a("a"),puo=o("MBart50TokenizerFast"),_uo=o(" (mBART-50 model)"),buo=l(),Ls=a("li"),Lde=a("strong"),vuo=o("megatron-bert"),Fuo=o(" \u2014 "),kN=a("a"),Tuo=o("BertTokenizer"),Muo=o(" or "),SN=a("a"),Euo=o("BertTokenizerFast"),Cuo=o(" (Megatron-BERT model)"),wuo=l(),$h=a("li"),yde=a("strong"),Auo=o("mluke"),Luo=o(" \u2014 "),RN=a("a"),yuo=o("MLukeTokenizer"),xuo=o(" (mLUKE model)"),$uo=l(),ys=a("li"),xde=a("strong"),kuo=o("mobilebert"),Suo=o(" \u2014 "),PN=a("a"),Ruo=o("MobileBertTokenizer"),Puo=o(" or "),BN=a("a"),Buo=o("MobileBertTokenizerFast"),Iuo=o(" (MobileBERT model)"),Nuo=l(),xs=a("li"),$de=a("strong"),quo=o("mpnet"),juo=o(" \u2014 "),IN=a("a"),Duo=o("MPNetTokenizer"),Guo=o(" or "),NN=a("a"),Ouo=o("MPNetTokenizerFast"),Vuo=o(" (MPNet model)"),Xuo=l(),$s=a("li"),kde=a("strong"),zuo=o("mt5"),Wuo=o(" \u2014 "),qN=a("a"),Quo=o("MT5Tokenizer"),Huo=o(" or "),jN=a("a"),Uuo=o("MT5TokenizerFast"),Juo=o(" (MT5 model)"),Yuo=l(),ks=a("li"),Sde=a("strong"),Kuo=o("mvp"),Zuo=o(" \u2014 "),DN=a("a"),epo=o("MvpTokenizer"),opo=o(" or "),GN=a("a"),rpo=o("MvpTokenizerFast"),tpo=o(" (MVP model)"),apo=l(),Ss=a("li"),Rde=a("strong"),npo=o("nezha"),spo=o(" \u2014 "),ON=a("a"),lpo=o("BertTokenizer"),ipo=o(" or "),VN=a("a"),dpo=o("BertTokenizerFast"),cpo=o(" (Nezha model)"),mpo=l(),Rs=a("li"),Pde=a("strong"),fpo=o("nllb"),gpo=o(" \u2014 "),XN=a("a"),hpo=o("NllbTokenizer"),upo=o(" or "),zN=a("a"),ppo=o("NllbTokenizerFast"),_po=o(" (NLLB model)"),bpo=l(),Ps=a("li"),Bde=a("strong"),vpo=o("nystromformer"),Fpo=o(" \u2014 "),WN=a("a"),Tpo=o("AlbertTokenizer"),Mpo=o(" or "),QN=a("a"),Epo=o("AlbertTokenizerFast"),Cpo=o(" (Nystr\xF6mformer model)"),wpo=l(),Bs=a("li"),Ide=a("strong"),Apo=o("openai-gpt"),Lpo=o(" \u2014 "),HN=a("a"),ypo=o("OpenAIGPTTokenizer"),xpo=o(" or "),UN=a("a"),$po=o("OpenAIGPTTokenizerFast"),kpo=o(" (OpenAI GPT model)"),Spo=l(),kh=a("li"),Nde=a("strong"),Rpo=o("opt"),Ppo=o(" \u2014 "),JN=a("a"),Bpo=o("GPT2Tokenizer"),Ipo=o(" (OPT model)"),Npo=l(),Is=a("li"),qde=a("strong"),qpo=o("owlvit"),jpo=o(" \u2014 "),YN=a("a"),Dpo=o("CLIPTokenizer"),Gpo=o(" or "),KN=a("a"),Opo=o("CLIPTokenizerFast"),Vpo=o(" (OWL-ViT model)"),Xpo=l(),Ns=a("li"),jde=a("strong"),zpo=o("pegasus"),Wpo=o(" \u2014 "),ZN=a("a"),Qpo=o("PegasusTokenizer"),Hpo=o(" or "),eq=a("a"),Upo=o("PegasusTokenizerFast"),Jpo=o(" (Pegasus model)"),Ypo=l(),Sh=a("li"),Dde=a("strong"),Kpo=o("perceiver"),Zpo=o(" \u2014 "),oq=a("a"),e_o=o("PerceiverTokenizer"),o_o=o(" (Perceiver model)"),r_o=l(),Rh=a("li"),Gde=a("strong"),t_o=o("phobert"),a_o=o(" \u2014 "),rq=a("a"),n_o=o("PhobertTokenizer"),s_o=o(" (PhoBERT model)"),l_o=l(),Ph=a("li"),Ode=a("strong"),i_o=o("plbart"),d_o=o(" \u2014 "),tq=a("a"),c_o=o("PLBartTokenizer"),m_o=o(" (PLBart model)"),f_o=l(),Bh=a("li"),Vde=a("strong"),g_o=o("prophetnet"),h_o=o(" \u2014 "),aq=a("a"),u_o=o("ProphetNetTokenizer"),p_o=o(" (ProphetNet model)"),__o=l(),qs=a("li"),Xde=a("strong"),b_o=o("qdqbert"),v_o=o(" \u2014 "),nq=a("a"),F_o=o("BertTokenizer"),T_o=o(" or "),sq=a("a"),M_o=o("BertTokenizerFast"),E_o=o(" (QDQBert model)"),C_o=l(),Ih=a("li"),zde=a("strong"),w_o=o("rag"),A_o=o(" \u2014 "),lq=a("a"),L_o=o("RagTokenizer"),y_o=o(" (RAG model)"),x_o=l(),js=a("li"),Wde=a("strong"),$_o=o("realm"),k_o=o(" \u2014 "),iq=a("a"),S_o=o("RealmTokenizer"),R_o=o(" or "),dq=a("a"),P_o=o("RealmTokenizerFast"),B_o=o(" (REALM model)"),I_o=l(),Ds=a("li"),Qde=a("strong"),N_o=o("reformer"),q_o=o(" \u2014 "),cq=a("a"),j_o=o("ReformerTokenizer"),D_o=o(" or "),mq=a("a"),G_o=o("ReformerTokenizerFast"),O_o=o(" (Reformer model)"),V_o=l(),Gs=a("li"),Hde=a("strong"),X_o=o("rembert"),z_o=o(" \u2014 "),fq=a("a"),W_o=o("RemBertTokenizer"),Q_o=o(" or "),gq=a("a"),H_o=o("RemBertTokenizerFast"),U_o=o(" (RemBERT model)"),J_o=l(),Os=a("li"),Ude=a("strong"),Y_o=o("retribert"),K_o=o(" \u2014 "),hq=a("a"),Z_o=o("RetriBertTokenizer"),e2o=o(" or "),uq=a("a"),o2o=o("RetriBertTokenizerFast"),r2o=o(" (RetriBERT model)"),t2o=l(),Vs=a("li"),Jde=a("strong"),a2o=o("roberta"),n2o=o(" \u2014 "),pq=a("a"),s2o=o("RobertaTokenizer"),l2o=o(" or "),_q=a("a"),i2o=o("RobertaTokenizerFast"),d2o=o(" (RoBERTa model)"),c2o=l(),Xs=a("li"),Yde=a("strong"),m2o=o("roformer"),f2o=o(" \u2014 "),bq=a("a"),g2o=o("RoFormerTokenizer"),h2o=o(" or "),vq=a("a"),u2o=o("RoFormerTokenizerFast"),p2o=o(" (RoFormer model)"),_2o=l(),Nh=a("li"),Kde=a("strong"),b2o=o("speech_to_text"),v2o=o(" \u2014 "),Fq=a("a"),F2o=o("Speech2TextTokenizer"),T2o=o(" (Speech2Text model)"),M2o=l(),qh=a("li"),Zde=a("strong"),E2o=o("speech_to_text_2"),C2o=o(" \u2014 "),Tq=a("a"),w2o=o("Speech2Text2Tokenizer"),A2o=o(" (Speech2Text2 model)"),L2o=l(),zs=a("li"),ece=a("strong"),y2o=o("splinter"),x2o=o(" \u2014 "),Mq=a("a"),$2o=o("SplinterTokenizer"),k2o=o(" or "),Eq=a("a"),S2o=o("SplinterTokenizerFast"),R2o=o(" (Splinter model)"),P2o=l(),Ws=a("li"),oce=a("strong"),B2o=o("squeezebert"),I2o=o(" \u2014 "),Cq=a("a"),N2o=o("SqueezeBertTokenizer"),q2o=o(" or "),wq=a("a"),j2o=o("SqueezeBertTokenizerFast"),D2o=o(" (SqueezeBERT model)"),G2o=l(),Qs=a("li"),rce=a("strong"),O2o=o("t5"),V2o=o(" \u2014 "),Aq=a("a"),X2o=o("T5Tokenizer"),z2o=o(" or "),Lq=a("a"),W2o=o("T5TokenizerFast"),Q2o=o(" (T5 model)"),H2o=l(),jh=a("li"),tce=a("strong"),U2o=o("tapas"),J2o=o(" \u2014 "),yq=a("a"),Y2o=o("TapasTokenizer"),K2o=o(" (TAPAS model)"),Z2o=l(),Dh=a("li"),ace=a("strong"),ebo=o("tapex"),obo=o(" \u2014 "),xq=a("a"),rbo=o("TapexTokenizer"),tbo=o(" (TAPEX model)"),abo=l(),Gh=a("li"),nce=a("strong"),nbo=o("transfo-xl"),sbo=o(" \u2014 "),$q=a("a"),lbo=o("TransfoXLTokenizer"),ibo=o(" (Transformer-XL model)"),dbo=l(),Hs=a("li"),sce=a("strong"),cbo=o("vilt"),mbo=o(" \u2014 "),kq=a("a"),fbo=o("BertTokenizer"),gbo=o(" or "),Sq=a("a"),hbo=o("BertTokenizerFast"),ubo=o(" (ViLT model)"),pbo=l(),Us=a("li"),lce=a("strong"),_bo=o("visual_bert"),bbo=o(" \u2014 "),Rq=a("a"),vbo=o("BertTokenizer"),Fbo=o(" or "),Pq=a("a"),Tbo=o("BertTokenizerFast"),Mbo=o(" (VisualBERT model)"),Ebo=l(),Oh=a("li"),ice=a("strong"),Cbo=o("wav2vec2"),wbo=o(" \u2014 "),Bq=a("a"),Abo=o("Wav2Vec2CTCTokenizer"),Lbo=o(" (Wav2Vec2 model)"),ybo=l(),Vh=a("li"),dce=a("strong"),xbo=o("wav2vec2-conformer"),$bo=o(" \u2014 "),Iq=a("a"),kbo=o("Wav2Vec2CTCTokenizer"),Sbo=o(" (Wav2Vec2-Conformer model)"),Rbo=l(),Xh=a("li"),cce=a("strong"),Pbo=o("wav2vec2_phoneme"),Bbo=o(" \u2014 "),Nq=a("a"),Ibo=o("Wav2Vec2PhonemeCTCTokenizer"),Nbo=o(" (Wav2Vec2Phoneme model)"),qbo=l(),Js=a("li"),mce=a("strong"),jbo=o("xglm"),Dbo=o(" \u2014 "),qq=a("a"),Gbo=o("XGLMTokenizer"),Obo=o(" or "),jq=a("a"),Vbo=o("XGLMTokenizerFast"),Xbo=o(" (XGLM model)"),zbo=l(),zh=a("li"),fce=a("strong"),Wbo=o("xlm"),Qbo=o(" \u2014 "),Dq=a("a"),Hbo=o("XLMTokenizer"),Ubo=o(" (XLM model)"),Jbo=l(),Wh=a("li"),gce=a("strong"),Ybo=o("xlm-prophetnet"),Kbo=o(" \u2014 "),Gq=a("a"),Zbo=o("XLMProphetNetTokenizer"),evo=o(" (XLM-ProphetNet model)"),ovo=l(),Ys=a("li"),hce=a("strong"),rvo=o("xlm-roberta"),tvo=o(" \u2014 "),Oq=a("a"),avo=o("XLMRobertaTokenizer"),nvo=o(" or "),Vq=a("a"),svo=o("XLMRobertaTokenizerFast"),lvo=o(" (XLM-RoBERTa model)"),ivo=l(),Ks=a("li"),uce=a("strong"),dvo=o("xlm-roberta-xl"),cvo=o(" \u2014 "),Xq=a("a"),mvo=o("RobertaTokenizer"),fvo=o(" or "),zq=a("a"),gvo=o("RobertaTokenizerFast"),hvo=o(" (XLM-RoBERTa-XL model)"),uvo=l(),Zs=a("li"),pce=a("strong"),pvo=o("xlnet"),_vo=o(" \u2014 "),Wq=a("a"),bvo=o("XLNetTokenizer"),vvo=o(" or "),Qq=a("a"),Fvo=o("XLNetTokenizerFast"),Tvo=o(" (XLNet model)"),Mvo=l(),el=a("li"),_ce=a("strong"),Evo=o("yoso"),Cvo=o(" \u2014 "),Hq=a("a"),wvo=o("AlbertTokenizer"),Avo=o(" or "),Uq=a("a"),Lvo=o("AlbertTokenizerFast"),yvo=o(" (YOSO model)"),xvo=l(),F(Qh.$$.fragment),$vo=l(),Hh=a("div"),F(n8.$$.fragment),kvo=l(),bce=a("p"),Svo=o("Register a new tokenizer in this mapping."),XWe=l(),Qi=a("h2"),Uh=a("a"),vce=a("span"),F(s8.$$.fragment),Rvo=l(),Fce=a("span"),Pvo=o("AutoFeatureExtractor"),zWe=l(),$o=a("div"),F(l8.$$.fragment),Bvo=l(),i8=a("p"),Ivo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Jq=a("a"),Nvo=o("AutoFeatureExtractor.from_pretrained()"),qvo=o(" class method."),jvo=l(),d8=a("p"),Dvo=o("This class cannot be instantiated directly using "),Tce=a("code"),Gvo=o("__init__()"),Ovo=o(" (throws an error)."),Vvo=l(),Ue=a("div"),F(c8.$$.fragment),Xvo=l(),Mce=a("p"),zvo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Wvo=l(),ja=a("p"),Qvo=o("The feature extractor class to instantiate is selected based on the "),Ece=a("code"),Hvo=o("model_type"),Uvo=o(` property of the config object
(either passed as an argument or loaded from `),Cce=a("code"),Jvo=o("pretrained_model_name_or_path"),Yvo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wce=a("code"),Kvo=o("pretrained_model_name_or_path"),Zvo=o(":"),e1o=l(),H=a("ul"),Jh=a("li"),Ace=a("strong"),o1o=o("beit"),r1o=o(" \u2014 "),Yq=a("a"),t1o=o("BeitFeatureExtractor"),a1o=o(" (BEiT model)"),n1o=l(),Yh=a("li"),Lce=a("strong"),s1o=o("clip"),l1o=o(" \u2014 "),Kq=a("a"),i1o=o("CLIPFeatureExtractor"),d1o=o(" (CLIP model)"),c1o=l(),Kh=a("li"),yce=a("strong"),m1o=o("convnext"),f1o=o(" \u2014 "),Zq=a("a"),g1o=o("ConvNextFeatureExtractor"),h1o=o(" (ConvNeXT model)"),u1o=l(),Zh=a("li"),xce=a("strong"),p1o=o("cvt"),_1o=o(" \u2014 "),ej=a("a"),b1o=o("ConvNextFeatureExtractor"),v1o=o(" (CvT model)"),F1o=l(),eu=a("li"),$ce=a("strong"),T1o=o("data2vec-audio"),M1o=o(" \u2014 "),oj=a("a"),E1o=o("Wav2Vec2FeatureExtractor"),C1o=o(" (Data2VecAudio model)"),w1o=l(),ou=a("li"),kce=a("strong"),A1o=o("data2vec-vision"),L1o=o(" \u2014 "),rj=a("a"),y1o=o("BeitFeatureExtractor"),x1o=o(" (Data2VecVision model)"),$1o=l(),ru=a("li"),Sce=a("strong"),k1o=o("deit"),S1o=o(" \u2014 "),tj=a("a"),R1o=o("DeiTFeatureExtractor"),P1o=o(" (DeiT model)"),B1o=l(),tu=a("li"),Rce=a("strong"),I1o=o("detr"),N1o=o(" \u2014 "),aj=a("a"),q1o=o("DetrFeatureExtractor"),j1o=o(" (DETR model)"),D1o=l(),au=a("li"),Pce=a("strong"),G1o=o("dpt"),O1o=o(" \u2014 "),nj=a("a"),V1o=o("DPTFeatureExtractor"),X1o=o(" (DPT model)"),z1o=l(),nu=a("li"),Bce=a("strong"),W1o=o("flava"),Q1o=o(" \u2014 "),sj=a("a"),H1o=o("FlavaFeatureExtractor"),U1o=o(" (FLAVA model)"),J1o=l(),su=a("li"),Ice=a("strong"),Y1o=o("glpn"),K1o=o(" \u2014 "),lj=a("a"),Z1o=o("GLPNFeatureExtractor"),eFo=o(" (GLPN model)"),oFo=l(),lu=a("li"),Nce=a("strong"),rFo=o("groupvit"),tFo=o(" \u2014 "),ij=a("a"),aFo=o("CLIPFeatureExtractor"),nFo=o(" (GroupViT model)"),sFo=l(),iu=a("li"),qce=a("strong"),lFo=o("hubert"),iFo=o(" \u2014 "),dj=a("a"),dFo=o("Wav2Vec2FeatureExtractor"),cFo=o(" (Hubert model)"),mFo=l(),du=a("li"),jce=a("strong"),fFo=o("imagegpt"),gFo=o(" \u2014 "),cj=a("a"),hFo=o("ImageGPTFeatureExtractor"),uFo=o(" (ImageGPT model)"),pFo=l(),cu=a("li"),Dce=a("strong"),_Fo=o("layoutlmv2"),bFo=o(" \u2014 "),mj=a("a"),vFo=o("LayoutLMv2FeatureExtractor"),FFo=o(" (LayoutLMv2 model)"),TFo=l(),mu=a("li"),Gce=a("strong"),MFo=o("layoutlmv3"),EFo=o(" \u2014 "),fj=a("a"),CFo=o("LayoutLMv3FeatureExtractor"),wFo=o(" (LayoutLMv3 model)"),AFo=l(),fu=a("li"),Oce=a("strong"),LFo=o("levit"),yFo=o(" \u2014 "),gj=a("a"),xFo=o("LevitFeatureExtractor"),$Fo=o(" (LeViT model)"),kFo=l(),gu=a("li"),Vce=a("strong"),SFo=o("maskformer"),RFo=o(" \u2014 "),hj=a("a"),PFo=o("MaskFormerFeatureExtractor"),BFo=o(" (MaskFormer model)"),IFo=l(),hu=a("li"),Xce=a("strong"),NFo=o("mctct"),qFo=o(" \u2014 "),uj=a("a"),jFo=o("MCTCTFeatureExtractor"),DFo=o(" (M-CTC-T model)"),GFo=l(),uu=a("li"),zce=a("strong"),OFo=o("mobilevit"),VFo=o(" \u2014 "),pj=a("a"),XFo=o("MobileViTFeatureExtractor"),zFo=o(" (MobileViT model)"),WFo=l(),pu=a("li"),Wce=a("strong"),QFo=o("owlvit"),HFo=o(" \u2014 "),_j=a("a"),UFo=o("OwlViTFeatureExtractor"),JFo=o(" (OWL-ViT model)"),YFo=l(),_u=a("li"),Qce=a("strong"),KFo=o("perceiver"),ZFo=o(" \u2014 "),bj=a("a"),eTo=o("PerceiverFeatureExtractor"),oTo=o(" (Perceiver model)"),rTo=l(),bu=a("li"),Hce=a("strong"),tTo=o("poolformer"),aTo=o(" \u2014 "),vj=a("a"),nTo=o("PoolFormerFeatureExtractor"),sTo=o(" (PoolFormer model)"),lTo=l(),vu=a("li"),Uce=a("strong"),iTo=o("regnet"),dTo=o(" \u2014 "),Fj=a("a"),cTo=o("ConvNextFeatureExtractor"),mTo=o(" (RegNet model)"),fTo=l(),Fu=a("li"),Jce=a("strong"),gTo=o("resnet"),hTo=o(" \u2014 "),Tj=a("a"),uTo=o("ConvNextFeatureExtractor"),pTo=o(" (ResNet model)"),_To=l(),Tu=a("li"),Yce=a("strong"),bTo=o("segformer"),vTo=o(" \u2014 "),Mj=a("a"),FTo=o("SegformerFeatureExtractor"),TTo=o(" (SegFormer model)"),MTo=l(),Mu=a("li"),Kce=a("strong"),ETo=o("speech_to_text"),CTo=o(" \u2014 "),Ej=a("a"),wTo=o("Speech2TextFeatureExtractor"),ATo=o(" (Speech2Text model)"),LTo=l(),Eu=a("li"),Zce=a("strong"),yTo=o("swin"),xTo=o(" \u2014 "),Cj=a("a"),$To=o("ViTFeatureExtractor"),kTo=o(" (Swin Transformer model)"),STo=l(),Cu=a("li"),eme=a("strong"),RTo=o("swinv2"),PTo=o(" \u2014 "),wj=a("a"),BTo=o("ViTFeatureExtractor"),ITo=o(" (Swin Transformer V2 model)"),NTo=l(),wu=a("li"),ome=a("strong"),qTo=o("van"),jTo=o(" \u2014 "),Aj=a("a"),DTo=o("ConvNextFeatureExtractor"),GTo=o(" (VAN model)"),OTo=l(),Au=a("li"),rme=a("strong"),VTo=o("videomae"),XTo=o(" \u2014 "),Lj=a("a"),zTo=o("ViTFeatureExtractor"),WTo=o(" (VideoMAE model)"),QTo=l(),Lu=a("li"),tme=a("strong"),HTo=o("vilt"),UTo=o(" \u2014 "),yj=a("a"),JTo=o("ViltFeatureExtractor"),YTo=o(" (ViLT model)"),KTo=l(),yu=a("li"),ame=a("strong"),ZTo=o("vit"),eMo=o(" \u2014 "),xj=a("a"),oMo=o("ViTFeatureExtractor"),rMo=o(" (ViT model)"),tMo=l(),xu=a("li"),nme=a("strong"),aMo=o("vit_mae"),nMo=o(" \u2014 "),$j=a("a"),sMo=o("ViTFeatureExtractor"),lMo=o(" (ViTMAE model)"),iMo=l(),$u=a("li"),sme=a("strong"),dMo=o("wav2vec2"),cMo=o(" \u2014 "),kj=a("a"),mMo=o("Wav2Vec2FeatureExtractor"),fMo=o(" (Wav2Vec2 model)"),gMo=l(),ku=a("li"),lme=a("strong"),hMo=o("wav2vec2-conformer"),uMo=o(" \u2014 "),Sj=a("a"),pMo=o("Wav2Vec2FeatureExtractor"),_Mo=o(" (Wav2Vec2-Conformer model)"),bMo=l(),Su=a("li"),ime=a("strong"),vMo=o("yolos"),FMo=o(" \u2014 "),Rj=a("a"),TMo=o("YolosFeatureExtractor"),MMo=o(" (YOLOS model)"),EMo=l(),F(Ru.$$.fragment),CMo=l(),F(Pu.$$.fragment),wMo=l(),Bu=a("div"),F(m8.$$.fragment),AMo=l(),dme=a("p"),LMo=o("Register a new feature extractor for this class."),WWe=l(),Hi=a("h2"),Iu=a("a"),cme=a("span"),F(f8.$$.fragment),yMo=l(),mme=a("span"),xMo=o("AutoProcessor"),QWe=l(),ko=a("div"),F(g8.$$.fragment),$Mo=l(),h8=a("p"),kMo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Pj=a("a"),SMo=o("AutoProcessor.from_pretrained()"),RMo=o(" class method."),PMo=l(),u8=a("p"),BMo=o("This class cannot be instantiated directly using "),fme=a("code"),IMo=o("__init__()"),NMo=o(" (throws an error)."),qMo=l(),Je=a("div"),F(p8.$$.fragment),jMo=l(),gme=a("p"),DMo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),GMo=l(),Ui=a("p"),OMo=o("The processor class to instantiate is selected based on the "),hme=a("code"),VMo=o("model_type"),XMo=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),zMo=o("pretrained_model_name_or_path"),WMo=o(" if possible):"),QMo=l(),me=a("ul"),Nu=a("li"),pme=a("strong"),HMo=o("clip"),UMo=o(" \u2014 "),Bj=a("a"),JMo=o("CLIPProcessor"),YMo=o(" (CLIP model)"),KMo=l(),qu=a("li"),_me=a("strong"),ZMo=o("flava"),eEo=o(" \u2014 "),Ij=a("a"),oEo=o("FlavaProcessor"),rEo=o(" (FLAVA model)"),tEo=l(),ju=a("li"),bme=a("strong"),aEo=o("groupvit"),nEo=o(" \u2014 "),Nj=a("a"),sEo=o("CLIPProcessor"),lEo=o(" (GroupViT model)"),iEo=l(),Du=a("li"),vme=a("strong"),dEo=o("layoutlmv2"),cEo=o(" \u2014 "),qj=a("a"),mEo=o("LayoutLMv2Processor"),fEo=o(" (LayoutLMv2 model)"),gEo=l(),Gu=a("li"),Fme=a("strong"),hEo=o("layoutlmv3"),uEo=o(" \u2014 "),jj=a("a"),pEo=o("LayoutLMv3Processor"),_Eo=o(" (LayoutLMv3 model)"),bEo=l(),Ou=a("li"),Tme=a("strong"),vEo=o("layoutxlm"),FEo=o(" \u2014 "),Dj=a("a"),TEo=o("LayoutXLMProcessor"),MEo=o(" (LayoutXLM model)"),EEo=l(),Vu=a("li"),Mme=a("strong"),CEo=o("owlvit"),wEo=o(" \u2014 "),Gj=a("a"),AEo=o("OwlViTProcessor"),LEo=o(" (OWL-ViT model)"),yEo=l(),Xu=a("li"),Eme=a("strong"),xEo=o("sew"),$Eo=o(" \u2014 "),Oj=a("a"),kEo=o("Wav2Vec2Processor"),SEo=o(" (SEW model)"),REo=l(),zu=a("li"),Cme=a("strong"),PEo=o("sew-d"),BEo=o(" \u2014 "),Vj=a("a"),IEo=o("Wav2Vec2Processor"),NEo=o(" (SEW-D model)"),qEo=l(),Wu=a("li"),wme=a("strong"),jEo=o("speech_to_text"),DEo=o(" \u2014 "),Xj=a("a"),GEo=o("Speech2TextProcessor"),OEo=o(" (Speech2Text model)"),VEo=l(),Qu=a("li"),Ame=a("strong"),XEo=o("speech_to_text_2"),zEo=o(" \u2014 "),zj=a("a"),WEo=o("Speech2Text2Processor"),QEo=o(" (Speech2Text2 model)"),HEo=l(),Hu=a("li"),Lme=a("strong"),UEo=o("trocr"),JEo=o(" \u2014 "),Wj=a("a"),YEo=o("TrOCRProcessor"),KEo=o(" (TrOCR model)"),ZEo=l(),Uu=a("li"),yme=a("strong"),e4o=o("unispeech"),o4o=o(" \u2014 "),Qj=a("a"),r4o=o("Wav2Vec2Processor"),t4o=o(" (UniSpeech model)"),a4o=l(),Ju=a("li"),xme=a("strong"),n4o=o("unispeech-sat"),s4o=o(" \u2014 "),Hj=a("a"),l4o=o("Wav2Vec2Processor"),i4o=o(" (UniSpeechSat model)"),d4o=l(),Yu=a("li"),$me=a("strong"),c4o=o("vilt"),m4o=o(" \u2014 "),Uj=a("a"),f4o=o("ViltProcessor"),g4o=o(" (ViLT model)"),h4o=l(),Ku=a("li"),kme=a("strong"),u4o=o("vision-text-dual-encoder"),p4o=o(" \u2014 "),Jj=a("a"),_4o=o("VisionTextDualEncoderProcessor"),b4o=o(" (VisionTextDualEncoder model)"),v4o=l(),Zu=a("li"),Sme=a("strong"),F4o=o("wav2vec2"),T4o=o(" \u2014 "),Yj=a("a"),M4o=o("Wav2Vec2Processor"),E4o=o(" (Wav2Vec2 model)"),C4o=l(),ep=a("li"),Rme=a("strong"),w4o=o("wav2vec2-conformer"),A4o=o(" \u2014 "),Kj=a("a"),L4o=o("Wav2Vec2Processor"),y4o=o(" (Wav2Vec2-Conformer model)"),x4o=l(),op=a("li"),Pme=a("strong"),$4o=o("wavlm"),k4o=o(" \u2014 "),Zj=a("a"),S4o=o("Wav2Vec2Processor"),R4o=o(" (WavLM model)"),P4o=l(),F(rp.$$.fragment),B4o=l(),F(tp.$$.fragment),I4o=l(),ap=a("div"),F(_8.$$.fragment),N4o=l(),Bme=a("p"),q4o=o("Register a new processor for this class."),HWe=l(),Ji=a("h2"),np=a("a"),Ime=a("span"),F(b8.$$.fragment),j4o=l(),Nme=a("span"),D4o=o("AutoModel"),UWe=l(),So=a("div"),F(v8.$$.fragment),G4o=l(),Yi=a("p"),O4o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eD=a("a"),V4o=o("from_pretrained()"),X4o=o(" class method or the "),oD=a("a"),z4o=o("from_config()"),W4o=o(` class
method.`),Q4o=l(),F8=a("p"),H4o=o("This class cannot be instantiated directly using "),qme=a("code"),U4o=o("__init__()"),J4o=o(" (throws an error)."),Y4o=l(),ct=a("div"),F(T8.$$.fragment),K4o=l(),jme=a("p"),Z4o=o("Instantiates one of the base model classes of the library from a configuration."),eCo=l(),Ki=a("p"),oCo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),rCo=o("not"),tCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),aCo=o("from_pretrained()"),nCo=o(" to load the model weights."),sCo=l(),F(sp.$$.fragment),lCo=l(),Ye=a("div"),F(M8.$$.fragment),iCo=l(),Gme=a("p"),dCo=o("Instantiate one of the base model classes of the library from a pretrained model."),cCo=l(),Da=a("p"),mCo=o("The model class to instantiate is selected based on the "),Ome=a("code"),fCo=o("model_type"),gCo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),hCo=o("pretrained_model_name_or_path"),uCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),pCo=o("pretrained_model_name_or_path"),_Co=o(":"),bCo=l(),y=a("ul"),lp=a("li"),zme=a("strong"),vCo=o("albert"),FCo=o(" \u2014 "),tD=a("a"),TCo=o("AlbertModel"),MCo=o(" (ALBERT model)"),ECo=l(),ip=a("li"),Wme=a("strong"),CCo=o("bart"),wCo=o(" \u2014 "),aD=a("a"),ACo=o("BartModel"),LCo=o(" (BART model)"),yCo=l(),dp=a("li"),Qme=a("strong"),xCo=o("beit"),$Co=o(" \u2014 "),nD=a("a"),kCo=o("BeitModel"),SCo=o(" (BEiT model)"),RCo=l(),cp=a("li"),Hme=a("strong"),PCo=o("bert"),BCo=o(" \u2014 "),sD=a("a"),ICo=o("BertModel"),NCo=o(" (BERT model)"),qCo=l(),mp=a("li"),Ume=a("strong"),jCo=o("bert-generation"),DCo=o(" \u2014 "),lD=a("a"),GCo=o("BertGenerationEncoder"),OCo=o(" (Bert Generation model)"),VCo=l(),fp=a("li"),Jme=a("strong"),XCo=o("big_bird"),zCo=o(" \u2014 "),iD=a("a"),WCo=o("BigBirdModel"),QCo=o(" (BigBird model)"),HCo=l(),gp=a("li"),Yme=a("strong"),UCo=o("bigbird_pegasus"),JCo=o(" \u2014 "),dD=a("a"),YCo=o("BigBirdPegasusModel"),KCo=o(" (BigBird-Pegasus model)"),ZCo=l(),hp=a("li"),Kme=a("strong"),e5o=o("blenderbot"),o5o=o(" \u2014 "),cD=a("a"),r5o=o("BlenderbotModel"),t5o=o(" (Blenderbot model)"),a5o=l(),up=a("li"),Zme=a("strong"),n5o=o("blenderbot-small"),s5o=o(" \u2014 "),mD=a("a"),l5o=o("BlenderbotSmallModel"),i5o=o(" (BlenderbotSmall model)"),d5o=l(),pp=a("li"),efe=a("strong"),c5o=o("bloom"),m5o=o(" \u2014 "),fD=a("a"),f5o=o("BloomModel"),g5o=o(" (BLOOM model)"),h5o=l(),_p=a("li"),ofe=a("strong"),u5o=o("camembert"),p5o=o(" \u2014 "),gD=a("a"),_5o=o("CamembertModel"),b5o=o(" (CamemBERT model)"),v5o=l(),bp=a("li"),rfe=a("strong"),F5o=o("canine"),T5o=o(" \u2014 "),hD=a("a"),M5o=o("CanineModel"),E5o=o(" (CANINE model)"),C5o=l(),vp=a("li"),tfe=a("strong"),w5o=o("clip"),A5o=o(" \u2014 "),uD=a("a"),L5o=o("CLIPModel"),y5o=o(" (CLIP model)"),x5o=l(),Fp=a("li"),afe=a("strong"),$5o=o("codegen"),k5o=o(" \u2014 "),pD=a("a"),S5o=o("CodeGenModel"),R5o=o(" (CodeGen model)"),P5o=l(),Tp=a("li"),nfe=a("strong"),B5o=o("convbert"),I5o=o(" \u2014 "),_D=a("a"),N5o=o("ConvBertModel"),q5o=o(" (ConvBERT model)"),j5o=l(),Mp=a("li"),sfe=a("strong"),D5o=o("convnext"),G5o=o(" \u2014 "),bD=a("a"),O5o=o("ConvNextModel"),V5o=o(" (ConvNeXT model)"),X5o=l(),Ep=a("li"),lfe=a("strong"),z5o=o("ctrl"),W5o=o(" \u2014 "),vD=a("a"),Q5o=o("CTRLModel"),H5o=o(" (CTRL model)"),U5o=l(),Cp=a("li"),ife=a("strong"),J5o=o("cvt"),Y5o=o(" \u2014 "),FD=a("a"),K5o=o("CvtModel"),Z5o=o(" (CvT model)"),e3o=l(),wp=a("li"),dfe=a("strong"),o3o=o("data2vec-audio"),r3o=o(" \u2014 "),TD=a("a"),t3o=o("Data2VecAudioModel"),a3o=o(" (Data2VecAudio model)"),n3o=l(),Ap=a("li"),cfe=a("strong"),s3o=o("data2vec-text"),l3o=o(" \u2014 "),MD=a("a"),i3o=o("Data2VecTextModel"),d3o=o(" (Data2VecText model)"),c3o=l(),Lp=a("li"),mfe=a("strong"),m3o=o("data2vec-vision"),f3o=o(" \u2014 "),ED=a("a"),g3o=o("Data2VecVisionModel"),h3o=o(" (Data2VecVision model)"),u3o=l(),yp=a("li"),ffe=a("strong"),p3o=o("deberta"),_3o=o(" \u2014 "),CD=a("a"),b3o=o("DebertaModel"),v3o=o(" (DeBERTa model)"),F3o=l(),xp=a("li"),gfe=a("strong"),T3o=o("deberta-v2"),M3o=o(" \u2014 "),wD=a("a"),E3o=o("DebertaV2Model"),C3o=o(" (DeBERTa-v2 model)"),w3o=l(),$p=a("li"),hfe=a("strong"),A3o=o("decision_transformer"),L3o=o(" \u2014 "),AD=a("a"),y3o=o("DecisionTransformerModel"),x3o=o(" (Decision Transformer model)"),$3o=l(),kp=a("li"),ufe=a("strong"),k3o=o("deit"),S3o=o(" \u2014 "),LD=a("a"),R3o=o("DeiTModel"),P3o=o(" (DeiT model)"),B3o=l(),Sp=a("li"),pfe=a("strong"),I3o=o("detr"),N3o=o(" \u2014 "),yD=a("a"),q3o=o("DetrModel"),j3o=o(" (DETR model)"),D3o=l(),Rp=a("li"),_fe=a("strong"),G3o=o("distilbert"),O3o=o(" \u2014 "),xD=a("a"),V3o=o("DistilBertModel"),X3o=o(" (DistilBERT model)"),z3o=l(),Pp=a("li"),bfe=a("strong"),W3o=o("dpr"),Q3o=o(" \u2014 "),$D=a("a"),H3o=o("DPRQuestionEncoder"),U3o=o(" (DPR model)"),J3o=l(),Bp=a("li"),vfe=a("strong"),Y3o=o("dpt"),K3o=o(" \u2014 "),kD=a("a"),Z3o=o("DPTModel"),e0o=o(" (DPT model)"),o0o=l(),Ip=a("li"),Ffe=a("strong"),r0o=o("electra"),t0o=o(" \u2014 "),SD=a("a"),a0o=o("ElectraModel"),n0o=o(" (ELECTRA model)"),s0o=l(),Np=a("li"),Tfe=a("strong"),l0o=o("flaubert"),i0o=o(" \u2014 "),RD=a("a"),d0o=o("FlaubertModel"),c0o=o(" (FlauBERT model)"),m0o=l(),qp=a("li"),Mfe=a("strong"),f0o=o("flava"),g0o=o(" \u2014 "),PD=a("a"),h0o=o("FlavaModel"),u0o=o(" (FLAVA model)"),p0o=l(),jp=a("li"),Efe=a("strong"),_0o=o("fnet"),b0o=o(" \u2014 "),BD=a("a"),v0o=o("FNetModel"),F0o=o(" (FNet model)"),T0o=l(),Dp=a("li"),Cfe=a("strong"),M0o=o("fsmt"),E0o=o(" \u2014 "),ID=a("a"),C0o=o("FSMTModel"),w0o=o(" (FairSeq Machine-Translation model)"),A0o=l(),ol=a("li"),wfe=a("strong"),L0o=o("funnel"),y0o=o(" \u2014 "),ND=a("a"),x0o=o("FunnelModel"),$0o=o(" or "),qD=a("a"),k0o=o("FunnelBaseModel"),S0o=o(" (Funnel Transformer model)"),R0o=l(),Gp=a("li"),Afe=a("strong"),P0o=o("glpn"),B0o=o(" \u2014 "),jD=a("a"),I0o=o("GLPNModel"),N0o=o(" (GLPN model)"),q0o=l(),Op=a("li"),Lfe=a("strong"),j0o=o("gpt2"),D0o=o(" \u2014 "),DD=a("a"),G0o=o("GPT2Model"),O0o=o(" (OpenAI GPT-2 model)"),V0o=l(),Vp=a("li"),yfe=a("strong"),X0o=o("gpt_neo"),z0o=o(" \u2014 "),GD=a("a"),W0o=o("GPTNeoModel"),Q0o=o(" (GPT Neo model)"),H0o=l(),Xp=a("li"),xfe=a("strong"),U0o=o("gpt_neox"),J0o=o(" \u2014 "),OD=a("a"),Y0o=o("GPTNeoXModel"),K0o=o(" (GPT NeoX model)"),Z0o=l(),zp=a("li"),$fe=a("strong"),ewo=o("gptj"),owo=o(" \u2014 "),VD=a("a"),rwo=o("GPTJModel"),two=o(" (GPT-J model)"),awo=l(),Wp=a("li"),kfe=a("strong"),nwo=o("groupvit"),swo=o(" \u2014 "),XD=a("a"),lwo=o("GroupViTModel"),iwo=o(" (GroupViT model)"),dwo=l(),Qp=a("li"),Sfe=a("strong"),cwo=o("hubert"),mwo=o(" \u2014 "),zD=a("a"),fwo=o("HubertModel"),gwo=o(" (Hubert model)"),hwo=l(),Hp=a("li"),Rfe=a("strong"),uwo=o("ibert"),pwo=o(" \u2014 "),WD=a("a"),_wo=o("IBertModel"),bwo=o(" (I-BERT model)"),vwo=l(),Up=a("li"),Pfe=a("strong"),Fwo=o("imagegpt"),Two=o(" \u2014 "),QD=a("a"),Mwo=o("ImageGPTModel"),Ewo=o(" (ImageGPT model)"),Cwo=l(),Jp=a("li"),Bfe=a("strong"),wwo=o("layoutlm"),Awo=o(" \u2014 "),HD=a("a"),Lwo=o("LayoutLMModel"),ywo=o(" (LayoutLM model)"),xwo=l(),Yp=a("li"),Ife=a("strong"),$wo=o("layoutlmv2"),kwo=o(" \u2014 "),UD=a("a"),Swo=o("LayoutLMv2Model"),Rwo=o(" (LayoutLMv2 model)"),Pwo=l(),Kp=a("li"),Nfe=a("strong"),Bwo=o("layoutlmv3"),Iwo=o(" \u2014 "),JD=a("a"),Nwo=o("LayoutLMv3Model"),qwo=o(" (LayoutLMv3 model)"),jwo=l(),Zp=a("li"),qfe=a("strong"),Dwo=o("led"),Gwo=o(" \u2014 "),YD=a("a"),Owo=o("LEDModel"),Vwo=o(" (LED model)"),Xwo=l(),e_=a("li"),jfe=a("strong"),zwo=o("levit"),Wwo=o(" \u2014 "),KD=a("a"),Qwo=o("LevitModel"),Hwo=o(" (LeViT model)"),Uwo=l(),o_=a("li"),Dfe=a("strong"),Jwo=o("longformer"),Ywo=o(" \u2014 "),ZD=a("a"),Kwo=o("LongformerModel"),Zwo=o(" (Longformer model)"),e6o=l(),r_=a("li"),Gfe=a("strong"),o6o=o("longt5"),r6o=o(" \u2014 "),eG=a("a"),t6o=o("LongT5Model"),a6o=o(" (LongT5 model)"),n6o=l(),t_=a("li"),Ofe=a("strong"),s6o=o("luke"),l6o=o(" \u2014 "),oG=a("a"),i6o=o("LukeModel"),d6o=o(" (LUKE model)"),c6o=l(),a_=a("li"),Vfe=a("strong"),m6o=o("lxmert"),f6o=o(" \u2014 "),rG=a("a"),g6o=o("LxmertModel"),h6o=o(" (LXMERT model)"),u6o=l(),n_=a("li"),Xfe=a("strong"),p6o=o("m2m_100"),_6o=o(" \u2014 "),tG=a("a"),b6o=o("M2M100Model"),v6o=o(" (M2M100 model)"),F6o=l(),s_=a("li"),zfe=a("strong"),T6o=o("marian"),M6o=o(" \u2014 "),aG=a("a"),E6o=o("MarianModel"),C6o=o(" (Marian model)"),w6o=l(),l_=a("li"),Wfe=a("strong"),A6o=o("maskformer"),L6o=o(" \u2014 "),nG=a("a"),y6o=o("MaskFormerModel"),x6o=o(" (MaskFormer model)"),$6o=l(),i_=a("li"),Qfe=a("strong"),k6o=o("mbart"),S6o=o(" \u2014 "),sG=a("a"),R6o=o("MBartModel"),P6o=o(" (mBART model)"),B6o=l(),d_=a("li"),Hfe=a("strong"),I6o=o("mctct"),N6o=o(" \u2014 "),lG=a("a"),q6o=o("MCTCTModel"),j6o=o(" (M-CTC-T model)"),D6o=l(),c_=a("li"),Ufe=a("strong"),G6o=o("megatron-bert"),O6o=o(" \u2014 "),iG=a("a"),V6o=o("MegatronBertModel"),X6o=o(" (Megatron-BERT model)"),z6o=l(),m_=a("li"),Jfe=a("strong"),W6o=o("mobilebert"),Q6o=o(" \u2014 "),dG=a("a"),H6o=o("MobileBertModel"),U6o=o(" (MobileBERT model)"),J6o=l(),f_=a("li"),Yfe=a("strong"),Y6o=o("mobilevit"),K6o=o(" \u2014 "),cG=a("a"),Z6o=o("MobileViTModel"),eAo=o(" (MobileViT model)"),oAo=l(),g_=a("li"),Kfe=a("strong"),rAo=o("mpnet"),tAo=o(" \u2014 "),mG=a("a"),aAo=o("MPNetModel"),nAo=o(" (MPNet model)"),sAo=l(),h_=a("li"),Zfe=a("strong"),lAo=o("mt5"),iAo=o(" \u2014 "),fG=a("a"),dAo=o("MT5Model"),cAo=o(" (MT5 model)"),mAo=l(),u_=a("li"),ege=a("strong"),fAo=o("mvp"),gAo=o(" \u2014 "),gG=a("a"),hAo=o("MvpModel"),uAo=o(" (MVP model)"),pAo=l(),p_=a("li"),oge=a("strong"),_Ao=o("nezha"),bAo=o(" \u2014 "),hG=a("a"),vAo=o("NezhaModel"),FAo=o(" (Nezha model)"),TAo=l(),__=a("li"),rge=a("strong"),MAo=o("nllb"),EAo=o(" \u2014 "),uG=a("a"),CAo=o("M2M100Model"),wAo=o(" (NLLB model)"),AAo=l(),b_=a("li"),tge=a("strong"),LAo=o("nystromformer"),yAo=o(" \u2014 "),pG=a("a"),xAo=o("NystromformerModel"),$Ao=o(" (Nystr\xF6mformer model)"),kAo=l(),v_=a("li"),age=a("strong"),SAo=o("openai-gpt"),RAo=o(" \u2014 "),_G=a("a"),PAo=o("OpenAIGPTModel"),BAo=o(" (OpenAI GPT model)"),IAo=l(),F_=a("li"),nge=a("strong"),NAo=o("opt"),qAo=o(" \u2014 "),bG=a("a"),jAo=o("OPTModel"),DAo=o(" (OPT model)"),GAo=l(),T_=a("li"),sge=a("strong"),OAo=o("owlvit"),VAo=o(" \u2014 "),vG=a("a"),XAo=o("OwlViTModel"),zAo=o(" (OWL-ViT model)"),WAo=l(),M_=a("li"),lge=a("strong"),QAo=o("pegasus"),HAo=o(" \u2014 "),FG=a("a"),UAo=o("PegasusModel"),JAo=o(" (Pegasus model)"),YAo=l(),E_=a("li"),ige=a("strong"),KAo=o("perceiver"),ZAo=o(" \u2014 "),TG=a("a"),e7o=o("PerceiverModel"),o7o=o(" (Perceiver model)"),r7o=l(),C_=a("li"),dge=a("strong"),t7o=o("plbart"),a7o=o(" \u2014 "),MG=a("a"),n7o=o("PLBartModel"),s7o=o(" (PLBart model)"),l7o=l(),w_=a("li"),cge=a("strong"),i7o=o("poolformer"),d7o=o(" \u2014 "),EG=a("a"),c7o=o("PoolFormerModel"),m7o=o(" (PoolFormer model)"),f7o=l(),A_=a("li"),mge=a("strong"),g7o=o("prophetnet"),h7o=o(" \u2014 "),CG=a("a"),u7o=o("ProphetNetModel"),p7o=o(" (ProphetNet model)"),_7o=l(),L_=a("li"),fge=a("strong"),b7o=o("qdqbert"),v7o=o(" \u2014 "),wG=a("a"),F7o=o("QDQBertModel"),T7o=o(" (QDQBert model)"),M7o=l(),y_=a("li"),gge=a("strong"),E7o=o("reformer"),C7o=o(" \u2014 "),AG=a("a"),w7o=o("ReformerModel"),A7o=o(" (Reformer model)"),L7o=l(),x_=a("li"),hge=a("strong"),y7o=o("regnet"),x7o=o(" \u2014 "),LG=a("a"),$7o=o("RegNetModel"),k7o=o(" (RegNet model)"),S7o=l(),$_=a("li"),uge=a("strong"),R7o=o("rembert"),P7o=o(" \u2014 "),yG=a("a"),B7o=o("RemBertModel"),I7o=o(" (RemBERT model)"),N7o=l(),k_=a("li"),pge=a("strong"),q7o=o("resnet"),j7o=o(" \u2014 "),xG=a("a"),D7o=o("ResNetModel"),G7o=o(" (ResNet model)"),O7o=l(),S_=a("li"),_ge=a("strong"),V7o=o("retribert"),X7o=o(" \u2014 "),$G=a("a"),z7o=o("RetriBertModel"),W7o=o(" (RetriBERT model)"),Q7o=l(),R_=a("li"),bge=a("strong"),H7o=o("roberta"),U7o=o(" \u2014 "),kG=a("a"),J7o=o("RobertaModel"),Y7o=o(" (RoBERTa model)"),K7o=l(),P_=a("li"),vge=a("strong"),Z7o=o("roformer"),eLo=o(" \u2014 "),SG=a("a"),oLo=o("RoFormerModel"),rLo=o(" (RoFormer model)"),tLo=l(),B_=a("li"),Fge=a("strong"),aLo=o("segformer"),nLo=o(" \u2014 "),RG=a("a"),sLo=o("SegformerModel"),lLo=o(" (SegFormer model)"),iLo=l(),I_=a("li"),Tge=a("strong"),dLo=o("sew"),cLo=o(" \u2014 "),PG=a("a"),mLo=o("SEWModel"),fLo=o(" (SEW model)"),gLo=l(),N_=a("li"),Mge=a("strong"),hLo=o("sew-d"),uLo=o(" \u2014 "),BG=a("a"),pLo=o("SEWDModel"),_Lo=o(" (SEW-D model)"),bLo=l(),q_=a("li"),Ege=a("strong"),vLo=o("speech_to_text"),FLo=o(" \u2014 "),IG=a("a"),TLo=o("Speech2TextModel"),MLo=o(" (Speech2Text model)"),ELo=l(),j_=a("li"),Cge=a("strong"),CLo=o("splinter"),wLo=o(" \u2014 "),NG=a("a"),ALo=o("SplinterModel"),LLo=o(" (Splinter model)"),yLo=l(),D_=a("li"),wge=a("strong"),xLo=o("squeezebert"),$Lo=o(" \u2014 "),qG=a("a"),kLo=o("SqueezeBertModel"),SLo=o(" (SqueezeBERT model)"),RLo=l(),G_=a("li"),Age=a("strong"),PLo=o("swin"),BLo=o(" \u2014 "),jG=a("a"),ILo=o("SwinModel"),NLo=o(" (Swin Transformer model)"),qLo=l(),O_=a("li"),Lge=a("strong"),jLo=o("swinv2"),DLo=o(" \u2014 "),DG=a("a"),GLo=o("Swinv2Model"),OLo=o(" (Swin Transformer V2 model)"),VLo=l(),V_=a("li"),yge=a("strong"),XLo=o("t5"),zLo=o(" \u2014 "),GG=a("a"),WLo=o("T5Model"),QLo=o(" (T5 model)"),HLo=l(),X_=a("li"),xge=a("strong"),ULo=o("tapas"),JLo=o(" \u2014 "),OG=a("a"),YLo=o("TapasModel"),KLo=o(" (TAPAS model)"),ZLo=l(),z_=a("li"),$ge=a("strong"),eyo=o("trajectory_transformer"),oyo=o(" \u2014 "),VG=a("a"),ryo=o("TrajectoryTransformerModel"),tyo=o(" (Trajectory Transformer model)"),ayo=l(),W_=a("li"),kge=a("strong"),nyo=o("transfo-xl"),syo=o(" \u2014 "),XG=a("a"),lyo=o("TransfoXLModel"),iyo=o(" (Transformer-XL model)"),dyo=l(),Q_=a("li"),Sge=a("strong"),cyo=o("unispeech"),myo=o(" \u2014 "),zG=a("a"),fyo=o("UniSpeechModel"),gyo=o(" (UniSpeech model)"),hyo=l(),H_=a("li"),Rge=a("strong"),uyo=o("unispeech-sat"),pyo=o(" \u2014 "),WG=a("a"),_yo=o("UniSpeechSatModel"),byo=o(" (UniSpeechSat model)"),vyo=l(),U_=a("li"),Pge=a("strong"),Fyo=o("van"),Tyo=o(" \u2014 "),QG=a("a"),Myo=o("VanModel"),Eyo=o(" (VAN model)"),Cyo=l(),J_=a("li"),Bge=a("strong"),wyo=o("videomae"),Ayo=o(" \u2014 "),HG=a("a"),Lyo=o("VideoMAEModel"),yyo=o(" (VideoMAE model)"),xyo=l(),Y_=a("li"),Ige=a("strong"),$yo=o("vilt"),kyo=o(" \u2014 "),UG=a("a"),Syo=o("ViltModel"),Ryo=o(" (ViLT model)"),Pyo=l(),K_=a("li"),Nge=a("strong"),Byo=o("vision-text-dual-encoder"),Iyo=o(" \u2014 "),JG=a("a"),Nyo=o("VisionTextDualEncoderModel"),qyo=o(" (VisionTextDualEncoder model)"),jyo=l(),Z_=a("li"),qge=a("strong"),Dyo=o("visual_bert"),Gyo=o(" \u2014 "),YG=a("a"),Oyo=o("VisualBertModel"),Vyo=o(" (VisualBERT model)"),Xyo=l(),e2=a("li"),jge=a("strong"),zyo=o("vit"),Wyo=o(" \u2014 "),KG=a("a"),Qyo=o("ViTModel"),Hyo=o(" (ViT model)"),Uyo=l(),o2=a("li"),Dge=a("strong"),Jyo=o("vit_mae"),Yyo=o(" \u2014 "),ZG=a("a"),Kyo=o("ViTMAEModel"),Zyo=o(" (ViTMAE model)"),e8o=l(),r2=a("li"),Gge=a("strong"),o8o=o("wav2vec2"),r8o=o(" \u2014 "),eO=a("a"),t8o=o("Wav2Vec2Model"),a8o=o(" (Wav2Vec2 model)"),n8o=l(),t2=a("li"),Oge=a("strong"),s8o=o("wav2vec2-conformer"),l8o=o(" \u2014 "),oO=a("a"),i8o=o("Wav2Vec2ConformerModel"),d8o=o(" (Wav2Vec2-Conformer model)"),c8o=l(),a2=a("li"),Vge=a("strong"),m8o=o("wavlm"),f8o=o(" \u2014 "),rO=a("a"),g8o=o("WavLMModel"),h8o=o(" (WavLM model)"),u8o=l(),n2=a("li"),Xge=a("strong"),p8o=o("xglm"),_8o=o(" \u2014 "),tO=a("a"),b8o=o("XGLMModel"),v8o=o(" (XGLM model)"),F8o=l(),s2=a("li"),zge=a("strong"),T8o=o("xlm"),M8o=o(" \u2014 "),aO=a("a"),E8o=o("XLMModel"),C8o=o(" (XLM model)"),w8o=l(),l2=a("li"),Wge=a("strong"),A8o=o("xlm-prophetnet"),L8o=o(" \u2014 "),nO=a("a"),y8o=o("XLMProphetNetModel"),x8o=o(" (XLM-ProphetNet model)"),$8o=l(),i2=a("li"),Qge=a("strong"),k8o=o("xlm-roberta"),S8o=o(" \u2014 "),sO=a("a"),R8o=o("XLMRobertaModel"),P8o=o(" (XLM-RoBERTa model)"),B8o=l(),d2=a("li"),Hge=a("strong"),I8o=o("xlm-roberta-xl"),N8o=o(" \u2014 "),lO=a("a"),q8o=o("XLMRobertaXLModel"),j8o=o(" (XLM-RoBERTa-XL model)"),D8o=l(),c2=a("li"),Uge=a("strong"),G8o=o("xlnet"),O8o=o(" \u2014 "),iO=a("a"),V8o=o("XLNetModel"),X8o=o(" (XLNet model)"),z8o=l(),m2=a("li"),Jge=a("strong"),W8o=o("yolos"),Q8o=o(" \u2014 "),dO=a("a"),H8o=o("YolosModel"),U8o=o(" (YOLOS model)"),J8o=l(),f2=a("li"),Yge=a("strong"),Y8o=o("yoso"),K8o=o(" \u2014 "),cO=a("a"),Z8o=o("YosoModel"),e9o=o(" (YOSO model)"),o9o=l(),g2=a("p"),r9o=o("The model is set in evaluation mode by default using "),Kge=a("code"),t9o=o("model.eval()"),a9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=a("code"),n9o=o("model.train()"),s9o=l(),F(h2.$$.fragment),JWe=l(),Zi=a("h2"),u2=a("a"),ehe=a("span"),F(E8.$$.fragment),l9o=l(),ohe=a("span"),i9o=o("AutoModelForPreTraining"),YWe=l(),Ro=a("div"),F(C8.$$.fragment),d9o=l(),ed=a("p"),c9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mO=a("a"),m9o=o("from_pretrained()"),f9o=o(" class method or the "),fO=a("a"),g9o=o("from_config()"),h9o=o(` class
method.`),u9o=l(),w8=a("p"),p9o=o("This class cannot be instantiated directly using "),rhe=a("code"),_9o=o("__init__()"),b9o=o(" (throws an error)."),v9o=l(),mt=a("div"),F(A8.$$.fragment),F9o=l(),the=a("p"),T9o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),M9o=l(),od=a("p"),E9o=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),C9o=o("not"),w9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),A9o=o("from_pretrained()"),L9o=o(" to load the model weights."),y9o=l(),F(p2.$$.fragment),x9o=l(),Ke=a("div"),F(L8.$$.fragment),$9o=l(),nhe=a("p"),k9o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),S9o=l(),Ga=a("p"),R9o=o("The model class to instantiate is selected based on the "),she=a("code"),P9o=o("model_type"),B9o=o(` property of the config object (either
passed as an argument or loaded from `),lhe=a("code"),I9o=o("pretrained_model_name_or_path"),N9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=a("code"),q9o=o("pretrained_model_name_or_path"),j9o=o(":"),D9o=l(),G=a("ul"),_2=a("li"),dhe=a("strong"),G9o=o("albert"),O9o=o(" \u2014 "),hO=a("a"),V9o=o("AlbertForPreTraining"),X9o=o(" (ALBERT model)"),z9o=l(),b2=a("li"),che=a("strong"),W9o=o("bart"),Q9o=o(" \u2014 "),uO=a("a"),H9o=o("BartForConditionalGeneration"),U9o=o(" (BART model)"),J9o=l(),v2=a("li"),mhe=a("strong"),Y9o=o("bert"),K9o=o(" \u2014 "),pO=a("a"),Z9o=o("BertForPreTraining"),exo=o(" (BERT model)"),oxo=l(),F2=a("li"),fhe=a("strong"),rxo=o("big_bird"),txo=o(" \u2014 "),_O=a("a"),axo=o("BigBirdForPreTraining"),nxo=o(" (BigBird model)"),sxo=l(),T2=a("li"),ghe=a("strong"),lxo=o("bloom"),ixo=o(" \u2014 "),bO=a("a"),dxo=o("BloomForCausalLM"),cxo=o(" (BLOOM model)"),mxo=l(),M2=a("li"),hhe=a("strong"),fxo=o("camembert"),gxo=o(" \u2014 "),vO=a("a"),hxo=o("CamembertForMaskedLM"),uxo=o(" (CamemBERT model)"),pxo=l(),E2=a("li"),uhe=a("strong"),_xo=o("ctrl"),bxo=o(" \u2014 "),FO=a("a"),vxo=o("CTRLLMHeadModel"),Fxo=o(" (CTRL model)"),Txo=l(),C2=a("li"),phe=a("strong"),Mxo=o("data2vec-text"),Exo=o(" \u2014 "),TO=a("a"),Cxo=o("Data2VecTextForMaskedLM"),wxo=o(" (Data2VecText model)"),Axo=l(),w2=a("li"),_he=a("strong"),Lxo=o("deberta"),yxo=o(" \u2014 "),MO=a("a"),xxo=o("DebertaForMaskedLM"),$xo=o(" (DeBERTa model)"),kxo=l(),A2=a("li"),bhe=a("strong"),Sxo=o("deberta-v2"),Rxo=o(" \u2014 "),EO=a("a"),Pxo=o("DebertaV2ForMaskedLM"),Bxo=o(" (DeBERTa-v2 model)"),Ixo=l(),L2=a("li"),vhe=a("strong"),Nxo=o("distilbert"),qxo=o(" \u2014 "),CO=a("a"),jxo=o("DistilBertForMaskedLM"),Dxo=o(" (DistilBERT model)"),Gxo=l(),y2=a("li"),Fhe=a("strong"),Oxo=o("electra"),Vxo=o(" \u2014 "),wO=a("a"),Xxo=o("ElectraForPreTraining"),zxo=o(" (ELECTRA model)"),Wxo=l(),x2=a("li"),The=a("strong"),Qxo=o("flaubert"),Hxo=o(" \u2014 "),AO=a("a"),Uxo=o("FlaubertWithLMHeadModel"),Jxo=o(" (FlauBERT model)"),Yxo=l(),$2=a("li"),Mhe=a("strong"),Kxo=o("flava"),Zxo=o(" \u2014 "),LO=a("a"),e$o=o("FlavaForPreTraining"),o$o=o(" (FLAVA model)"),r$o=l(),k2=a("li"),Ehe=a("strong"),t$o=o("fnet"),a$o=o(" \u2014 "),yO=a("a"),n$o=o("FNetForPreTraining"),s$o=o(" (FNet model)"),l$o=l(),S2=a("li"),Che=a("strong"),i$o=o("fsmt"),d$o=o(" \u2014 "),xO=a("a"),c$o=o("FSMTForConditionalGeneration"),m$o=o(" (FairSeq Machine-Translation model)"),f$o=l(),R2=a("li"),whe=a("strong"),g$o=o("funnel"),h$o=o(" \u2014 "),$O=a("a"),u$o=o("FunnelForPreTraining"),p$o=o(" (Funnel Transformer model)"),_$o=l(),P2=a("li"),Ahe=a("strong"),b$o=o("gpt2"),v$o=o(" \u2014 "),kO=a("a"),F$o=o("GPT2LMHeadModel"),T$o=o(" (OpenAI GPT-2 model)"),M$o=l(),B2=a("li"),Lhe=a("strong"),E$o=o("ibert"),C$o=o(" \u2014 "),SO=a("a"),w$o=o("IBertForMaskedLM"),A$o=o(" (I-BERT model)"),L$o=l(),I2=a("li"),yhe=a("strong"),y$o=o("layoutlm"),x$o=o(" \u2014 "),RO=a("a"),$$o=o("LayoutLMForMaskedLM"),k$o=o(" (LayoutLM model)"),S$o=l(),N2=a("li"),xhe=a("strong"),R$o=o("longformer"),P$o=o(" \u2014 "),PO=a("a"),B$o=o("LongformerForMaskedLM"),I$o=o(" (Longformer model)"),N$o=l(),q2=a("li"),$he=a("strong"),q$o=o("luke"),j$o=o(" \u2014 "),BO=a("a"),D$o=o("LukeForMaskedLM"),G$o=o(" (LUKE model)"),O$o=l(),j2=a("li"),khe=a("strong"),V$o=o("lxmert"),X$o=o(" \u2014 "),IO=a("a"),z$o=o("LxmertForPreTraining"),W$o=o(" (LXMERT model)"),Q$o=l(),D2=a("li"),She=a("strong"),H$o=o("megatron-bert"),U$o=o(" \u2014 "),NO=a("a"),J$o=o("MegatronBertForPreTraining"),Y$o=o(" (Megatron-BERT model)"),K$o=l(),G2=a("li"),Rhe=a("strong"),Z$o=o("mobilebert"),eko=o(" \u2014 "),qO=a("a"),oko=o("MobileBertForPreTraining"),rko=o(" (MobileBERT model)"),tko=l(),O2=a("li"),Phe=a("strong"),ako=o("mpnet"),nko=o(" \u2014 "),jO=a("a"),sko=o("MPNetForMaskedLM"),lko=o(" (MPNet model)"),iko=l(),V2=a("li"),Bhe=a("strong"),dko=o("mvp"),cko=o(" \u2014 "),DO=a("a"),mko=o("MvpForConditionalGeneration"),fko=o(" (MVP model)"),gko=l(),X2=a("li"),Ihe=a("strong"),hko=o("nezha"),uko=o(" \u2014 "),GO=a("a"),pko=o("NezhaForPreTraining"),_ko=o(" (Nezha model)"),bko=l(),z2=a("li"),Nhe=a("strong"),vko=o("openai-gpt"),Fko=o(" \u2014 "),OO=a("a"),Tko=o("OpenAIGPTLMHeadModel"),Mko=o(" (OpenAI GPT model)"),Eko=l(),W2=a("li"),qhe=a("strong"),Cko=o("retribert"),wko=o(" \u2014 "),VO=a("a"),Ako=o("RetriBertModel"),Lko=o(" (RetriBERT model)"),yko=l(),Q2=a("li"),jhe=a("strong"),xko=o("roberta"),$ko=o(" \u2014 "),XO=a("a"),kko=o("RobertaForMaskedLM"),Sko=o(" (RoBERTa model)"),Rko=l(),H2=a("li"),Dhe=a("strong"),Pko=o("splinter"),Bko=o(" \u2014 "),zO=a("a"),Iko=o("SplinterForPreTraining"),Nko=o(" (Splinter model)"),qko=l(),U2=a("li"),Ghe=a("strong"),jko=o("squeezebert"),Dko=o(" \u2014 "),WO=a("a"),Gko=o("SqueezeBertForMaskedLM"),Oko=o(" (SqueezeBERT model)"),Vko=l(),J2=a("li"),Ohe=a("strong"),Xko=o("t5"),zko=o(" \u2014 "),QO=a("a"),Wko=o("T5ForConditionalGeneration"),Qko=o(" (T5 model)"),Hko=l(),Y2=a("li"),Vhe=a("strong"),Uko=o("tapas"),Jko=o(" \u2014 "),HO=a("a"),Yko=o("TapasForMaskedLM"),Kko=o(" (TAPAS model)"),Zko=l(),K2=a("li"),Xhe=a("strong"),eSo=o("transfo-xl"),oSo=o(" \u2014 "),UO=a("a"),rSo=o("TransfoXLLMHeadModel"),tSo=o(" (Transformer-XL model)"),aSo=l(),Z2=a("li"),zhe=a("strong"),nSo=o("unispeech"),sSo=o(" \u2014 "),JO=a("a"),lSo=o("UniSpeechForPreTraining"),iSo=o(" (UniSpeech model)"),dSo=l(),eb=a("li"),Whe=a("strong"),cSo=o("unispeech-sat"),mSo=o(" \u2014 "),YO=a("a"),fSo=o("UniSpeechSatForPreTraining"),gSo=o(" (UniSpeechSat model)"),hSo=l(),ob=a("li"),Qhe=a("strong"),uSo=o("videomae"),pSo=o(" \u2014 "),KO=a("a"),_So=o("VideoMAEForPreTraining"),bSo=o(" (VideoMAE model)"),vSo=l(),rb=a("li"),Hhe=a("strong"),FSo=o("visual_bert"),TSo=o(" \u2014 "),ZO=a("a"),MSo=o("VisualBertForPreTraining"),ESo=o(" (VisualBERT model)"),CSo=l(),tb=a("li"),Uhe=a("strong"),wSo=o("vit_mae"),ASo=o(" \u2014 "),eV=a("a"),LSo=o("ViTMAEForPreTraining"),ySo=o(" (ViTMAE model)"),xSo=l(),ab=a("li"),Jhe=a("strong"),$So=o("wav2vec2"),kSo=o(" \u2014 "),oV=a("a"),SSo=o("Wav2Vec2ForPreTraining"),RSo=o(" (Wav2Vec2 model)"),PSo=l(),nb=a("li"),Yhe=a("strong"),BSo=o("wav2vec2-conformer"),ISo=o(" \u2014 "),rV=a("a"),NSo=o("Wav2Vec2ConformerForPreTraining"),qSo=o(" (Wav2Vec2-Conformer model)"),jSo=l(),sb=a("li"),Khe=a("strong"),DSo=o("xlm"),GSo=o(" \u2014 "),tV=a("a"),OSo=o("XLMWithLMHeadModel"),VSo=o(" (XLM model)"),XSo=l(),lb=a("li"),Zhe=a("strong"),zSo=o("xlm-roberta"),WSo=o(" \u2014 "),aV=a("a"),QSo=o("XLMRobertaForMaskedLM"),HSo=o(" (XLM-RoBERTa model)"),USo=l(),ib=a("li"),eue=a("strong"),JSo=o("xlm-roberta-xl"),YSo=o(" \u2014 "),nV=a("a"),KSo=o("XLMRobertaXLForMaskedLM"),ZSo=o(" (XLM-RoBERTa-XL model)"),eRo=l(),db=a("li"),oue=a("strong"),oRo=o("xlnet"),rRo=o(" \u2014 "),sV=a("a"),tRo=o("XLNetLMHeadModel"),aRo=o(" (XLNet model)"),nRo=l(),cb=a("p"),sRo=o("The model is set in evaluation mode by default using "),rue=a("code"),lRo=o("model.eval()"),iRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=a("code"),dRo=o("model.train()"),cRo=l(),F(mb.$$.fragment),KWe=l(),rd=a("h2"),fb=a("a"),aue=a("span"),F(y8.$$.fragment),mRo=l(),nue=a("span"),fRo=o("AutoModelForCausalLM"),ZWe=l(),Po=a("div"),F(x8.$$.fragment),gRo=l(),td=a("p"),hRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lV=a("a"),uRo=o("from_pretrained()"),pRo=o(" class method or the "),iV=a("a"),_Ro=o("from_config()"),bRo=o(` class
method.`),vRo=l(),$8=a("p"),FRo=o("This class cannot be instantiated directly using "),sue=a("code"),TRo=o("__init__()"),MRo=o(" (throws an error)."),ERo=l(),ft=a("div"),F(k8.$$.fragment),CRo=l(),lue=a("p"),wRo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ARo=l(),ad=a("p"),LRo=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),yRo=o("not"),xRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),$Ro=o("from_pretrained()"),kRo=o(" to load the model weights."),SRo=l(),F(gb.$$.fragment),RRo=l(),Ze=a("div"),F(S8.$$.fragment),PRo=l(),due=a("p"),BRo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),IRo=l(),Oa=a("p"),NRo=o("The model class to instantiate is selected based on the "),cue=a("code"),qRo=o("model_type"),jRo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),DRo=o("pretrained_model_name_or_path"),GRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),ORo=o("pretrained_model_name_or_path"),VRo=o(":"),XRo=l(),z=a("ul"),hb=a("li"),gue=a("strong"),zRo=o("bart"),WRo=o(" \u2014 "),cV=a("a"),QRo=o("BartForCausalLM"),HRo=o(" (BART model)"),URo=l(),ub=a("li"),hue=a("strong"),JRo=o("bert"),YRo=o(" \u2014 "),mV=a("a"),KRo=o("BertLMHeadModel"),ZRo=o(" (BERT model)"),ePo=l(),pb=a("li"),uue=a("strong"),oPo=o("bert-generation"),rPo=o(" \u2014 "),fV=a("a"),tPo=o("BertGenerationDecoder"),aPo=o(" (Bert Generation model)"),nPo=l(),_b=a("li"),pue=a("strong"),sPo=o("big_bird"),lPo=o(" \u2014 "),gV=a("a"),iPo=o("BigBirdForCausalLM"),dPo=o(" (BigBird model)"),cPo=l(),bb=a("li"),_ue=a("strong"),mPo=o("bigbird_pegasus"),fPo=o(" \u2014 "),hV=a("a"),gPo=o("BigBirdPegasusForCausalLM"),hPo=o(" (BigBird-Pegasus model)"),uPo=l(),vb=a("li"),bue=a("strong"),pPo=o("blenderbot"),_Po=o(" \u2014 "),uV=a("a"),bPo=o("BlenderbotForCausalLM"),vPo=o(" (Blenderbot model)"),FPo=l(),Fb=a("li"),vue=a("strong"),TPo=o("blenderbot-small"),MPo=o(" \u2014 "),pV=a("a"),EPo=o("BlenderbotSmallForCausalLM"),CPo=o(" (BlenderbotSmall model)"),wPo=l(),Tb=a("li"),Fue=a("strong"),APo=o("bloom"),LPo=o(" \u2014 "),_V=a("a"),yPo=o("BloomForCausalLM"),xPo=o(" (BLOOM model)"),$Po=l(),Mb=a("li"),Tue=a("strong"),kPo=o("camembert"),SPo=o(" \u2014 "),bV=a("a"),RPo=o("CamembertForCausalLM"),PPo=o(" (CamemBERT model)"),BPo=l(),Eb=a("li"),Mue=a("strong"),IPo=o("codegen"),NPo=o(" \u2014 "),vV=a("a"),qPo=o("CodeGenForCausalLM"),jPo=o(" (CodeGen model)"),DPo=l(),Cb=a("li"),Eue=a("strong"),GPo=o("ctrl"),OPo=o(" \u2014 "),FV=a("a"),VPo=o("CTRLLMHeadModel"),XPo=o(" (CTRL model)"),zPo=l(),wb=a("li"),Cue=a("strong"),WPo=o("data2vec-text"),QPo=o(" \u2014 "),TV=a("a"),HPo=o("Data2VecTextForCausalLM"),UPo=o(" (Data2VecText model)"),JPo=l(),Ab=a("li"),wue=a("strong"),YPo=o("electra"),KPo=o(" \u2014 "),MV=a("a"),ZPo=o("ElectraForCausalLM"),eBo=o(" (ELECTRA model)"),oBo=l(),Lb=a("li"),Aue=a("strong"),rBo=o("gpt2"),tBo=o(" \u2014 "),EV=a("a"),aBo=o("GPT2LMHeadModel"),nBo=o(" (OpenAI GPT-2 model)"),sBo=l(),yb=a("li"),Lue=a("strong"),lBo=o("gpt_neo"),iBo=o(" \u2014 "),CV=a("a"),dBo=o("GPTNeoForCausalLM"),cBo=o(" (GPT Neo model)"),mBo=l(),xb=a("li"),yue=a("strong"),fBo=o("gpt_neox"),gBo=o(" \u2014 "),wV=a("a"),hBo=o("GPTNeoXForCausalLM"),uBo=o(" (GPT NeoX model)"),pBo=l(),$b=a("li"),xue=a("strong"),_Bo=o("gptj"),bBo=o(" \u2014 "),AV=a("a"),vBo=o("GPTJForCausalLM"),FBo=o(" (GPT-J model)"),TBo=l(),kb=a("li"),$ue=a("strong"),MBo=o("marian"),EBo=o(" \u2014 "),LV=a("a"),CBo=o("MarianForCausalLM"),wBo=o(" (Marian model)"),ABo=l(),Sb=a("li"),kue=a("strong"),LBo=o("mbart"),yBo=o(" \u2014 "),yV=a("a"),xBo=o("MBartForCausalLM"),$Bo=o(" (mBART model)"),kBo=l(),Rb=a("li"),Sue=a("strong"),SBo=o("megatron-bert"),RBo=o(" \u2014 "),xV=a("a"),PBo=o("MegatronBertForCausalLM"),BBo=o(" (Megatron-BERT model)"),IBo=l(),Pb=a("li"),Rue=a("strong"),NBo=o("mvp"),qBo=o(" \u2014 "),$V=a("a"),jBo=o("MvpForCausalLM"),DBo=o(" (MVP model)"),GBo=l(),Bb=a("li"),Pue=a("strong"),OBo=o("openai-gpt"),VBo=o(" \u2014 "),kV=a("a"),XBo=o("OpenAIGPTLMHeadModel"),zBo=o(" (OpenAI GPT model)"),WBo=l(),Ib=a("li"),Bue=a("strong"),QBo=o("opt"),HBo=o(" \u2014 "),SV=a("a"),UBo=o("OPTForCausalLM"),JBo=o(" (OPT model)"),YBo=l(),Nb=a("li"),Iue=a("strong"),KBo=o("pegasus"),ZBo=o(" \u2014 "),RV=a("a"),eIo=o("PegasusForCausalLM"),oIo=o(" (Pegasus model)"),rIo=l(),qb=a("li"),Nue=a("strong"),tIo=o("plbart"),aIo=o(" \u2014 "),PV=a("a"),nIo=o("PLBartForCausalLM"),sIo=o(" (PLBart model)"),lIo=l(),jb=a("li"),que=a("strong"),iIo=o("prophetnet"),dIo=o(" \u2014 "),BV=a("a"),cIo=o("ProphetNetForCausalLM"),mIo=o(" (ProphetNet model)"),fIo=l(),Db=a("li"),jue=a("strong"),gIo=o("qdqbert"),hIo=o(" \u2014 "),IV=a("a"),uIo=o("QDQBertLMHeadModel"),pIo=o(" (QDQBert model)"),_Io=l(),Gb=a("li"),Due=a("strong"),bIo=o("reformer"),vIo=o(" \u2014 "),NV=a("a"),FIo=o("ReformerModelWithLMHead"),TIo=o(" (Reformer model)"),MIo=l(),Ob=a("li"),Gue=a("strong"),EIo=o("rembert"),CIo=o(" \u2014 "),qV=a("a"),wIo=o("RemBertForCausalLM"),AIo=o(" (RemBERT model)"),LIo=l(),Vb=a("li"),Oue=a("strong"),yIo=o("roberta"),xIo=o(" \u2014 "),jV=a("a"),$Io=o("RobertaForCausalLM"),kIo=o(" (RoBERTa model)"),SIo=l(),Xb=a("li"),Vue=a("strong"),RIo=o("roformer"),PIo=o(" \u2014 "),DV=a("a"),BIo=o("RoFormerForCausalLM"),IIo=o(" (RoFormer model)"),NIo=l(),zb=a("li"),Xue=a("strong"),qIo=o("speech_to_text_2"),jIo=o(" \u2014 "),GV=a("a"),DIo=o("Speech2Text2ForCausalLM"),GIo=o(" (Speech2Text2 model)"),OIo=l(),Wb=a("li"),zue=a("strong"),VIo=o("transfo-xl"),XIo=o(" \u2014 "),OV=a("a"),zIo=o("TransfoXLLMHeadModel"),WIo=o(" (Transformer-XL model)"),QIo=l(),Qb=a("li"),Wue=a("strong"),HIo=o("trocr"),UIo=o(" \u2014 "),VV=a("a"),JIo=o("TrOCRForCausalLM"),YIo=o(" (TrOCR model)"),KIo=l(),Hb=a("li"),Que=a("strong"),ZIo=o("xglm"),eNo=o(" \u2014 "),XV=a("a"),oNo=o("XGLMForCausalLM"),rNo=o(" (XGLM model)"),tNo=l(),Ub=a("li"),Hue=a("strong"),aNo=o("xlm"),nNo=o(" \u2014 "),zV=a("a"),sNo=o("XLMWithLMHeadModel"),lNo=o(" (XLM model)"),iNo=l(),Jb=a("li"),Uue=a("strong"),dNo=o("xlm-prophetnet"),cNo=o(" \u2014 "),WV=a("a"),mNo=o("XLMProphetNetForCausalLM"),fNo=o(" (XLM-ProphetNet model)"),gNo=l(),Yb=a("li"),Jue=a("strong"),hNo=o("xlm-roberta"),uNo=o(" \u2014 "),QV=a("a"),pNo=o("XLMRobertaForCausalLM"),_No=o(" (XLM-RoBERTa model)"),bNo=l(),Kb=a("li"),Yue=a("strong"),vNo=o("xlm-roberta-xl"),FNo=o(" \u2014 "),HV=a("a"),TNo=o("XLMRobertaXLForCausalLM"),MNo=o(" (XLM-RoBERTa-XL model)"),ENo=l(),Zb=a("li"),Kue=a("strong"),CNo=o("xlnet"),wNo=o(" \u2014 "),UV=a("a"),ANo=o("XLNetLMHeadModel"),LNo=o(" (XLNet model)"),yNo=l(),ev=a("p"),xNo=o("The model is set in evaluation mode by default using "),Zue=a("code"),$No=o("model.eval()"),kNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),SNo=o("model.train()"),RNo=l(),F(ov.$$.fragment),eQe=l(),nd=a("h2"),rv=a("a"),ope=a("span"),F(R8.$$.fragment),PNo=l(),rpe=a("span"),BNo=o("AutoModelForMaskedLM"),oQe=l(),Bo=a("div"),F(P8.$$.fragment),INo=l(),sd=a("p"),NNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JV=a("a"),qNo=o("from_pretrained()"),jNo=o(" class method or the "),YV=a("a"),DNo=o("from_config()"),GNo=o(` class
method.`),ONo=l(),B8=a("p"),VNo=o("This class cannot be instantiated directly using "),tpe=a("code"),XNo=o("__init__()"),zNo=o(" (throws an error)."),WNo=l(),gt=a("div"),F(I8.$$.fragment),QNo=l(),ape=a("p"),HNo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UNo=l(),ld=a("p"),JNo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),YNo=o("not"),KNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),ZNo=o("from_pretrained()"),eqo=o(" to load the model weights."),oqo=l(),F(tv.$$.fragment),rqo=l(),eo=a("div"),F(N8.$$.fragment),tqo=l(),spe=a("p"),aqo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nqo=l(),Va=a("p"),sqo=o("The model class to instantiate is selected based on the "),lpe=a("code"),lqo=o("model_type"),iqo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),dqo=o("pretrained_model_name_or_path"),cqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),mqo=o("pretrained_model_name_or_path"),fqo=o(":"),gqo=l(),Q=a("ul"),av=a("li"),cpe=a("strong"),hqo=o("albert"),uqo=o(" \u2014 "),ZV=a("a"),pqo=o("AlbertForMaskedLM"),_qo=o(" (ALBERT model)"),bqo=l(),nv=a("li"),mpe=a("strong"),vqo=o("bart"),Fqo=o(" \u2014 "),eX=a("a"),Tqo=o("BartForConditionalGeneration"),Mqo=o(" (BART model)"),Eqo=l(),sv=a("li"),fpe=a("strong"),Cqo=o("bert"),wqo=o(" \u2014 "),oX=a("a"),Aqo=o("BertForMaskedLM"),Lqo=o(" (BERT model)"),yqo=l(),lv=a("li"),gpe=a("strong"),xqo=o("big_bird"),$qo=o(" \u2014 "),rX=a("a"),kqo=o("BigBirdForMaskedLM"),Sqo=o(" (BigBird model)"),Rqo=l(),iv=a("li"),hpe=a("strong"),Pqo=o("camembert"),Bqo=o(" \u2014 "),tX=a("a"),Iqo=o("CamembertForMaskedLM"),Nqo=o(" (CamemBERT model)"),qqo=l(),dv=a("li"),upe=a("strong"),jqo=o("convbert"),Dqo=o(" \u2014 "),aX=a("a"),Gqo=o("ConvBertForMaskedLM"),Oqo=o(" (ConvBERT model)"),Vqo=l(),cv=a("li"),ppe=a("strong"),Xqo=o("data2vec-text"),zqo=o(" \u2014 "),nX=a("a"),Wqo=o("Data2VecTextForMaskedLM"),Qqo=o(" (Data2VecText model)"),Hqo=l(),mv=a("li"),_pe=a("strong"),Uqo=o("deberta"),Jqo=o(" \u2014 "),sX=a("a"),Yqo=o("DebertaForMaskedLM"),Kqo=o(" (DeBERTa model)"),Zqo=l(),fv=a("li"),bpe=a("strong"),ejo=o("deberta-v2"),ojo=o(" \u2014 "),lX=a("a"),rjo=o("DebertaV2ForMaskedLM"),tjo=o(" (DeBERTa-v2 model)"),ajo=l(),gv=a("li"),vpe=a("strong"),njo=o("distilbert"),sjo=o(" \u2014 "),iX=a("a"),ljo=o("DistilBertForMaskedLM"),ijo=o(" (DistilBERT model)"),djo=l(),hv=a("li"),Fpe=a("strong"),cjo=o("electra"),mjo=o(" \u2014 "),dX=a("a"),fjo=o("ElectraForMaskedLM"),gjo=o(" (ELECTRA model)"),hjo=l(),uv=a("li"),Tpe=a("strong"),ujo=o("flaubert"),pjo=o(" \u2014 "),cX=a("a"),_jo=o("FlaubertWithLMHeadModel"),bjo=o(" (FlauBERT model)"),vjo=l(),pv=a("li"),Mpe=a("strong"),Fjo=o("fnet"),Tjo=o(" \u2014 "),mX=a("a"),Mjo=o("FNetForMaskedLM"),Ejo=o(" (FNet model)"),Cjo=l(),_v=a("li"),Epe=a("strong"),wjo=o("funnel"),Ajo=o(" \u2014 "),fX=a("a"),Ljo=o("FunnelForMaskedLM"),yjo=o(" (Funnel Transformer model)"),xjo=l(),bv=a("li"),Cpe=a("strong"),$jo=o("ibert"),kjo=o(" \u2014 "),gX=a("a"),Sjo=o("IBertForMaskedLM"),Rjo=o(" (I-BERT model)"),Pjo=l(),vv=a("li"),wpe=a("strong"),Bjo=o("layoutlm"),Ijo=o(" \u2014 "),hX=a("a"),Njo=o("LayoutLMForMaskedLM"),qjo=o(" (LayoutLM model)"),jjo=l(),Fv=a("li"),Ape=a("strong"),Djo=o("longformer"),Gjo=o(" \u2014 "),uX=a("a"),Ojo=o("LongformerForMaskedLM"),Vjo=o(" (Longformer model)"),Xjo=l(),Tv=a("li"),Lpe=a("strong"),zjo=o("luke"),Wjo=o(" \u2014 "),pX=a("a"),Qjo=o("LukeForMaskedLM"),Hjo=o(" (LUKE model)"),Ujo=l(),Mv=a("li"),ype=a("strong"),Jjo=o("mbart"),Yjo=o(" \u2014 "),_X=a("a"),Kjo=o("MBartForConditionalGeneration"),Zjo=o(" (mBART model)"),eDo=l(),Ev=a("li"),xpe=a("strong"),oDo=o("megatron-bert"),rDo=o(" \u2014 "),bX=a("a"),tDo=o("MegatronBertForMaskedLM"),aDo=o(" (Megatron-BERT model)"),nDo=l(),Cv=a("li"),$pe=a("strong"),sDo=o("mobilebert"),lDo=o(" \u2014 "),vX=a("a"),iDo=o("MobileBertForMaskedLM"),dDo=o(" (MobileBERT model)"),cDo=l(),wv=a("li"),kpe=a("strong"),mDo=o("mpnet"),fDo=o(" \u2014 "),FX=a("a"),gDo=o("MPNetForMaskedLM"),hDo=o(" (MPNet model)"),uDo=l(),Av=a("li"),Spe=a("strong"),pDo=o("mvp"),_Do=o(" \u2014 "),TX=a("a"),bDo=o("MvpForConditionalGeneration"),vDo=o(" (MVP model)"),FDo=l(),Lv=a("li"),Rpe=a("strong"),TDo=o("nezha"),MDo=o(" \u2014 "),MX=a("a"),EDo=o("NezhaForMaskedLM"),CDo=o(" (Nezha model)"),wDo=l(),yv=a("li"),Ppe=a("strong"),ADo=o("nystromformer"),LDo=o(" \u2014 "),EX=a("a"),yDo=o("NystromformerForMaskedLM"),xDo=o(" (Nystr\xF6mformer model)"),$Do=l(),xv=a("li"),Bpe=a("strong"),kDo=o("perceiver"),SDo=o(" \u2014 "),CX=a("a"),RDo=o("PerceiverForMaskedLM"),PDo=o(" (Perceiver model)"),BDo=l(),$v=a("li"),Ipe=a("strong"),IDo=o("qdqbert"),NDo=o(" \u2014 "),wX=a("a"),qDo=o("QDQBertForMaskedLM"),jDo=o(" (QDQBert model)"),DDo=l(),kv=a("li"),Npe=a("strong"),GDo=o("reformer"),ODo=o(" \u2014 "),AX=a("a"),VDo=o("ReformerForMaskedLM"),XDo=o(" (Reformer model)"),zDo=l(),Sv=a("li"),qpe=a("strong"),WDo=o("rembert"),QDo=o(" \u2014 "),LX=a("a"),HDo=o("RemBertForMaskedLM"),UDo=o(" (RemBERT model)"),JDo=l(),Rv=a("li"),jpe=a("strong"),YDo=o("roberta"),KDo=o(" \u2014 "),yX=a("a"),ZDo=o("RobertaForMaskedLM"),eGo=o(" (RoBERTa model)"),oGo=l(),Pv=a("li"),Dpe=a("strong"),rGo=o("roformer"),tGo=o(" \u2014 "),xX=a("a"),aGo=o("RoFormerForMaskedLM"),nGo=o(" (RoFormer model)"),sGo=l(),Bv=a("li"),Gpe=a("strong"),lGo=o("squeezebert"),iGo=o(" \u2014 "),$X=a("a"),dGo=o("SqueezeBertForMaskedLM"),cGo=o(" (SqueezeBERT model)"),mGo=l(),Iv=a("li"),Ope=a("strong"),fGo=o("tapas"),gGo=o(" \u2014 "),kX=a("a"),hGo=o("TapasForMaskedLM"),uGo=o(" (TAPAS model)"),pGo=l(),Nv=a("li"),Vpe=a("strong"),_Go=o("wav2vec2"),bGo=o(" \u2014 "),Xpe=a("code"),vGo=o("Wav2Vec2ForMaskedLM"),FGo=o(" (Wav2Vec2 model)"),TGo=l(),qv=a("li"),zpe=a("strong"),MGo=o("xlm"),EGo=o(" \u2014 "),SX=a("a"),CGo=o("XLMWithLMHeadModel"),wGo=o(" (XLM model)"),AGo=l(),jv=a("li"),Wpe=a("strong"),LGo=o("xlm-roberta"),yGo=o(" \u2014 "),RX=a("a"),xGo=o("XLMRobertaForMaskedLM"),$Go=o(" (XLM-RoBERTa model)"),kGo=l(),Dv=a("li"),Qpe=a("strong"),SGo=o("xlm-roberta-xl"),RGo=o(" \u2014 "),PX=a("a"),PGo=o("XLMRobertaXLForMaskedLM"),BGo=o(" (XLM-RoBERTa-XL model)"),IGo=l(),Gv=a("li"),Hpe=a("strong"),NGo=o("yoso"),qGo=o(" \u2014 "),BX=a("a"),jGo=o("YosoForMaskedLM"),DGo=o(" (YOSO model)"),GGo=l(),Ov=a("p"),OGo=o("The model is set in evaluation mode by default using "),Upe=a("code"),VGo=o("model.eval()"),XGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),zGo=o("model.train()"),WGo=l(),F(Vv.$$.fragment),rQe=l(),id=a("h2"),Xv=a("a"),Ype=a("span"),F(q8.$$.fragment),QGo=l(),Kpe=a("span"),HGo=o("AutoModelForSeq2SeqLM"),tQe=l(),Io=a("div"),F(j8.$$.fragment),UGo=l(),dd=a("p"),JGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=a("a"),YGo=o("from_pretrained()"),KGo=o(" class method or the "),NX=a("a"),ZGo=o("from_config()"),eOo=o(` class
method.`),oOo=l(),D8=a("p"),rOo=o("This class cannot be instantiated directly using "),Zpe=a("code"),tOo=o("__init__()"),aOo=o(" (throws an error)."),nOo=l(),ht=a("div"),F(G8.$$.fragment),sOo=l(),e_e=a("p"),lOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iOo=l(),cd=a("p"),dOo=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),cOo=o("not"),mOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),fOo=o("from_pretrained()"),gOo=o(" to load the model weights."),hOo=l(),F(zv.$$.fragment),uOo=l(),oo=a("div"),F(O8.$$.fragment),pOo=l(),r_e=a("p"),_Oo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bOo=l(),Xa=a("p"),vOo=o("The model class to instantiate is selected based on the "),t_e=a("code"),FOo=o("model_type"),TOo=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),MOo=o("pretrained_model_name_or_path"),EOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),COo=o("pretrained_model_name_or_path"),wOo=o(":"),AOo=l(),fe=a("ul"),Wv=a("li"),s_e=a("strong"),LOo=o("bart"),yOo=o(" \u2014 "),jX=a("a"),xOo=o("BartForConditionalGeneration"),$Oo=o(" (BART model)"),kOo=l(),Qv=a("li"),l_e=a("strong"),SOo=o("bigbird_pegasus"),ROo=o(" \u2014 "),DX=a("a"),POo=o("BigBirdPegasusForConditionalGeneration"),BOo=o(" (BigBird-Pegasus model)"),IOo=l(),Hv=a("li"),i_e=a("strong"),NOo=o("blenderbot"),qOo=o(" \u2014 "),GX=a("a"),jOo=o("BlenderbotForConditionalGeneration"),DOo=o(" (Blenderbot model)"),GOo=l(),Uv=a("li"),d_e=a("strong"),OOo=o("blenderbot-small"),VOo=o(" \u2014 "),OX=a("a"),XOo=o("BlenderbotSmallForConditionalGeneration"),zOo=o(" (BlenderbotSmall model)"),WOo=l(),Jv=a("li"),c_e=a("strong"),QOo=o("encoder-decoder"),HOo=o(" \u2014 "),VX=a("a"),UOo=o("EncoderDecoderModel"),JOo=o(" (Encoder decoder model)"),YOo=l(),Yv=a("li"),m_e=a("strong"),KOo=o("fsmt"),ZOo=o(" \u2014 "),XX=a("a"),eVo=o("FSMTForConditionalGeneration"),oVo=o(" (FairSeq Machine-Translation model)"),rVo=l(),Kv=a("li"),f_e=a("strong"),tVo=o("led"),aVo=o(" \u2014 "),zX=a("a"),nVo=o("LEDForConditionalGeneration"),sVo=o(" (LED model)"),lVo=l(),Zv=a("li"),g_e=a("strong"),iVo=o("longt5"),dVo=o(" \u2014 "),WX=a("a"),cVo=o("LongT5ForConditionalGeneration"),mVo=o(" (LongT5 model)"),fVo=l(),e1=a("li"),h_e=a("strong"),gVo=o("m2m_100"),hVo=o(" \u2014 "),QX=a("a"),uVo=o("M2M100ForConditionalGeneration"),pVo=o(" (M2M100 model)"),_Vo=l(),o1=a("li"),u_e=a("strong"),bVo=o("marian"),vVo=o(" \u2014 "),HX=a("a"),FVo=o("MarianMTModel"),TVo=o(" (Marian model)"),MVo=l(),r1=a("li"),p_e=a("strong"),EVo=o("mbart"),CVo=o(" \u2014 "),UX=a("a"),wVo=o("MBartForConditionalGeneration"),AVo=o(" (mBART model)"),LVo=l(),t1=a("li"),__e=a("strong"),yVo=o("mt5"),xVo=o(" \u2014 "),JX=a("a"),$Vo=o("MT5ForConditionalGeneration"),kVo=o(" (MT5 model)"),SVo=l(),a1=a("li"),b_e=a("strong"),RVo=o("mvp"),PVo=o(" \u2014 "),YX=a("a"),BVo=o("MvpForConditionalGeneration"),IVo=o(" (MVP model)"),NVo=l(),n1=a("li"),v_e=a("strong"),qVo=o("nllb"),jVo=o(" \u2014 "),KX=a("a"),DVo=o("M2M100ForConditionalGeneration"),GVo=o(" (NLLB model)"),OVo=l(),s1=a("li"),F_e=a("strong"),VVo=o("pegasus"),XVo=o(" \u2014 "),ZX=a("a"),zVo=o("PegasusForConditionalGeneration"),WVo=o(" (Pegasus model)"),QVo=l(),l1=a("li"),T_e=a("strong"),HVo=o("plbart"),UVo=o(" \u2014 "),ez=a("a"),JVo=o("PLBartForConditionalGeneration"),YVo=o(" (PLBart model)"),KVo=l(),i1=a("li"),M_e=a("strong"),ZVo=o("prophetnet"),eXo=o(" \u2014 "),oz=a("a"),oXo=o("ProphetNetForConditionalGeneration"),rXo=o(" (ProphetNet model)"),tXo=l(),d1=a("li"),E_e=a("strong"),aXo=o("t5"),nXo=o(" \u2014 "),rz=a("a"),sXo=o("T5ForConditionalGeneration"),lXo=o(" (T5 model)"),iXo=l(),c1=a("li"),C_e=a("strong"),dXo=o("xlm-prophetnet"),cXo=o(" \u2014 "),tz=a("a"),mXo=o("XLMProphetNetForConditionalGeneration"),fXo=o(" (XLM-ProphetNet model)"),gXo=l(),m1=a("p"),hXo=o("The model is set in evaluation mode by default using "),w_e=a("code"),uXo=o("model.eval()"),pXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=a("code"),_Xo=o("model.train()"),bXo=l(),F(f1.$$.fragment),aQe=l(),md=a("h2"),g1=a("a"),L_e=a("span"),F(V8.$$.fragment),vXo=l(),y_e=a("span"),FXo=o("AutoModelForSequenceClassification"),nQe=l(),No=a("div"),F(X8.$$.fragment),TXo=l(),fd=a("p"),MXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),az=a("a"),EXo=o("from_pretrained()"),CXo=o(" class method or the "),nz=a("a"),wXo=o("from_config()"),AXo=o(` class
method.`),LXo=l(),z8=a("p"),yXo=o("This class cannot be instantiated directly using "),x_e=a("code"),xXo=o("__init__()"),$Xo=o(" (throws an error)."),kXo=l(),ut=a("div"),F(W8.$$.fragment),SXo=l(),$_e=a("p"),RXo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PXo=l(),gd=a("p"),BXo=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),IXo=o("not"),NXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),qXo=o("from_pretrained()"),jXo=o(" to load the model weights."),DXo=l(),F(h1.$$.fragment),GXo=l(),ro=a("div"),F(Q8.$$.fragment),OXo=l(),S_e=a("p"),VXo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XXo=l(),za=a("p"),zXo=o("The model class to instantiate is selected based on the "),R_e=a("code"),WXo=o("model_type"),QXo=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),HXo=o("pretrained_model_name_or_path"),UXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),JXo=o("pretrained_model_name_or_path"),YXo=o(":"),KXo=l(),B=a("ul"),u1=a("li"),I_e=a("strong"),ZXo=o("albert"),ezo=o(" \u2014 "),lz=a("a"),ozo=o("AlbertForSequenceClassification"),rzo=o(" (ALBERT model)"),tzo=l(),p1=a("li"),N_e=a("strong"),azo=o("bart"),nzo=o(" \u2014 "),iz=a("a"),szo=o("BartForSequenceClassification"),lzo=o(" (BART model)"),izo=l(),_1=a("li"),q_e=a("strong"),dzo=o("bert"),czo=o(" \u2014 "),dz=a("a"),mzo=o("BertForSequenceClassification"),fzo=o(" (BERT model)"),gzo=l(),b1=a("li"),j_e=a("strong"),hzo=o("big_bird"),uzo=o(" \u2014 "),cz=a("a"),pzo=o("BigBirdForSequenceClassification"),_zo=o(" (BigBird model)"),bzo=l(),v1=a("li"),D_e=a("strong"),vzo=o("bigbird_pegasus"),Fzo=o(" \u2014 "),mz=a("a"),Tzo=o("BigBirdPegasusForSequenceClassification"),Mzo=o(" (BigBird-Pegasus model)"),Ezo=l(),F1=a("li"),G_e=a("strong"),Czo=o("bloom"),wzo=o(" \u2014 "),fz=a("a"),Azo=o("BloomForSequenceClassification"),Lzo=o(" (BLOOM model)"),yzo=l(),T1=a("li"),O_e=a("strong"),xzo=o("camembert"),$zo=o(" \u2014 "),gz=a("a"),kzo=o("CamembertForSequenceClassification"),Szo=o(" (CamemBERT model)"),Rzo=l(),M1=a("li"),V_e=a("strong"),Pzo=o("canine"),Bzo=o(" \u2014 "),hz=a("a"),Izo=o("CanineForSequenceClassification"),Nzo=o(" (CANINE model)"),qzo=l(),E1=a("li"),X_e=a("strong"),jzo=o("convbert"),Dzo=o(" \u2014 "),uz=a("a"),Gzo=o("ConvBertForSequenceClassification"),Ozo=o(" (ConvBERT model)"),Vzo=l(),C1=a("li"),z_e=a("strong"),Xzo=o("ctrl"),zzo=o(" \u2014 "),pz=a("a"),Wzo=o("CTRLForSequenceClassification"),Qzo=o(" (CTRL model)"),Hzo=l(),w1=a("li"),W_e=a("strong"),Uzo=o("data2vec-text"),Jzo=o(" \u2014 "),_z=a("a"),Yzo=o("Data2VecTextForSequenceClassification"),Kzo=o(" (Data2VecText model)"),Zzo=l(),A1=a("li"),Q_e=a("strong"),eWo=o("deberta"),oWo=o(" \u2014 "),bz=a("a"),rWo=o("DebertaForSequenceClassification"),tWo=o(" (DeBERTa model)"),aWo=l(),L1=a("li"),H_e=a("strong"),nWo=o("deberta-v2"),sWo=o(" \u2014 "),vz=a("a"),lWo=o("DebertaV2ForSequenceClassification"),iWo=o(" (DeBERTa-v2 model)"),dWo=l(),y1=a("li"),U_e=a("strong"),cWo=o("distilbert"),mWo=o(" \u2014 "),Fz=a("a"),fWo=o("DistilBertForSequenceClassification"),gWo=o(" (DistilBERT model)"),hWo=l(),x1=a("li"),J_e=a("strong"),uWo=o("electra"),pWo=o(" \u2014 "),Tz=a("a"),_Wo=o("ElectraForSequenceClassification"),bWo=o(" (ELECTRA model)"),vWo=l(),$1=a("li"),Y_e=a("strong"),FWo=o("flaubert"),TWo=o(" \u2014 "),Mz=a("a"),MWo=o("FlaubertForSequenceClassification"),EWo=o(" (FlauBERT model)"),CWo=l(),k1=a("li"),K_e=a("strong"),wWo=o("fnet"),AWo=o(" \u2014 "),Ez=a("a"),LWo=o("FNetForSequenceClassification"),yWo=o(" (FNet model)"),xWo=l(),S1=a("li"),Z_e=a("strong"),$Wo=o("funnel"),kWo=o(" \u2014 "),Cz=a("a"),SWo=o("FunnelForSequenceClassification"),RWo=o(" (Funnel Transformer model)"),PWo=l(),R1=a("li"),e2e=a("strong"),BWo=o("gpt2"),IWo=o(" \u2014 "),wz=a("a"),NWo=o("GPT2ForSequenceClassification"),qWo=o(" (OpenAI GPT-2 model)"),jWo=l(),P1=a("li"),o2e=a("strong"),DWo=o("gpt_neo"),GWo=o(" \u2014 "),Az=a("a"),OWo=o("GPTNeoForSequenceClassification"),VWo=o(" (GPT Neo model)"),XWo=l(),B1=a("li"),r2e=a("strong"),zWo=o("gptj"),WWo=o(" \u2014 "),Lz=a("a"),QWo=o("GPTJForSequenceClassification"),HWo=o(" (GPT-J model)"),UWo=l(),I1=a("li"),t2e=a("strong"),JWo=o("ibert"),YWo=o(" \u2014 "),yz=a("a"),KWo=o("IBertForSequenceClassification"),ZWo=o(" (I-BERT model)"),eQo=l(),N1=a("li"),a2e=a("strong"),oQo=o("layoutlm"),rQo=o(" \u2014 "),xz=a("a"),tQo=o("LayoutLMForSequenceClassification"),aQo=o(" (LayoutLM model)"),nQo=l(),q1=a("li"),n2e=a("strong"),sQo=o("layoutlmv2"),lQo=o(" \u2014 "),$z=a("a"),iQo=o("LayoutLMv2ForSequenceClassification"),dQo=o(" (LayoutLMv2 model)"),cQo=l(),j1=a("li"),s2e=a("strong"),mQo=o("layoutlmv3"),fQo=o(" \u2014 "),kz=a("a"),gQo=o("LayoutLMv3ForSequenceClassification"),hQo=o(" (LayoutLMv3 model)"),uQo=l(),D1=a("li"),l2e=a("strong"),pQo=o("led"),_Qo=o(" \u2014 "),Sz=a("a"),bQo=o("LEDForSequenceClassification"),vQo=o(" (LED model)"),FQo=l(),G1=a("li"),i2e=a("strong"),TQo=o("longformer"),MQo=o(" \u2014 "),Rz=a("a"),EQo=o("LongformerForSequenceClassification"),CQo=o(" (Longformer model)"),wQo=l(),O1=a("li"),d2e=a("strong"),AQo=o("luke"),LQo=o(" \u2014 "),Pz=a("a"),yQo=o("LukeForSequenceClassification"),xQo=o(" (LUKE model)"),$Qo=l(),V1=a("li"),c2e=a("strong"),kQo=o("mbart"),SQo=o(" \u2014 "),Bz=a("a"),RQo=o("MBartForSequenceClassification"),PQo=o(" (mBART model)"),BQo=l(),X1=a("li"),m2e=a("strong"),IQo=o("megatron-bert"),NQo=o(" \u2014 "),Iz=a("a"),qQo=o("MegatronBertForSequenceClassification"),jQo=o(" (Megatron-BERT model)"),DQo=l(),z1=a("li"),f2e=a("strong"),GQo=o("mobilebert"),OQo=o(" \u2014 "),Nz=a("a"),VQo=o("MobileBertForSequenceClassification"),XQo=o(" (MobileBERT model)"),zQo=l(),W1=a("li"),g2e=a("strong"),WQo=o("mpnet"),QQo=o(" \u2014 "),qz=a("a"),HQo=o("MPNetForSequenceClassification"),UQo=o(" (MPNet model)"),JQo=l(),Q1=a("li"),h2e=a("strong"),YQo=o("mvp"),KQo=o(" \u2014 "),jz=a("a"),ZQo=o("MvpForSequenceClassification"),eHo=o(" (MVP model)"),oHo=l(),H1=a("li"),u2e=a("strong"),rHo=o("nezha"),tHo=o(" \u2014 "),Dz=a("a"),aHo=o("NezhaForSequenceClassification"),nHo=o(" (Nezha model)"),sHo=l(),U1=a("li"),p2e=a("strong"),lHo=o("nystromformer"),iHo=o(" \u2014 "),Gz=a("a"),dHo=o("NystromformerForSequenceClassification"),cHo=o(" (Nystr\xF6mformer model)"),mHo=l(),J1=a("li"),_2e=a("strong"),fHo=o("openai-gpt"),gHo=o(" \u2014 "),Oz=a("a"),hHo=o("OpenAIGPTForSequenceClassification"),uHo=o(" (OpenAI GPT model)"),pHo=l(),Y1=a("li"),b2e=a("strong"),_Ho=o("opt"),bHo=o(" \u2014 "),Vz=a("a"),vHo=o("OPTForSequenceClassification"),FHo=o(" (OPT model)"),THo=l(),K1=a("li"),v2e=a("strong"),MHo=o("perceiver"),EHo=o(" \u2014 "),Xz=a("a"),CHo=o("PerceiverForSequenceClassification"),wHo=o(" (Perceiver model)"),AHo=l(),Z1=a("li"),F2e=a("strong"),LHo=o("plbart"),yHo=o(" \u2014 "),zz=a("a"),xHo=o("PLBartForSequenceClassification"),$Ho=o(" (PLBart model)"),kHo=l(),eF=a("li"),T2e=a("strong"),SHo=o("qdqbert"),RHo=o(" \u2014 "),Wz=a("a"),PHo=o("QDQBertForSequenceClassification"),BHo=o(" (QDQBert model)"),IHo=l(),oF=a("li"),M2e=a("strong"),NHo=o("reformer"),qHo=o(" \u2014 "),Qz=a("a"),jHo=o("ReformerForSequenceClassification"),DHo=o(" (Reformer model)"),GHo=l(),rF=a("li"),E2e=a("strong"),OHo=o("rembert"),VHo=o(" \u2014 "),Hz=a("a"),XHo=o("RemBertForSequenceClassification"),zHo=o(" (RemBERT model)"),WHo=l(),tF=a("li"),C2e=a("strong"),QHo=o("roberta"),HHo=o(" \u2014 "),Uz=a("a"),UHo=o("RobertaForSequenceClassification"),JHo=o(" (RoBERTa model)"),YHo=l(),aF=a("li"),w2e=a("strong"),KHo=o("roformer"),ZHo=o(" \u2014 "),Jz=a("a"),eUo=o("RoFormerForSequenceClassification"),oUo=o(" (RoFormer model)"),rUo=l(),nF=a("li"),A2e=a("strong"),tUo=o("squeezebert"),aUo=o(" \u2014 "),Yz=a("a"),nUo=o("SqueezeBertForSequenceClassification"),sUo=o(" (SqueezeBERT model)"),lUo=l(),sF=a("li"),L2e=a("strong"),iUo=o("tapas"),dUo=o(" \u2014 "),Kz=a("a"),cUo=o("TapasForSequenceClassification"),mUo=o(" (TAPAS model)"),fUo=l(),lF=a("li"),y2e=a("strong"),gUo=o("transfo-xl"),hUo=o(" \u2014 "),Zz=a("a"),uUo=o("TransfoXLForSequenceClassification"),pUo=o(" (Transformer-XL model)"),_Uo=l(),iF=a("li"),x2e=a("strong"),bUo=o("xlm"),vUo=o(" \u2014 "),eW=a("a"),FUo=o("XLMForSequenceClassification"),TUo=o(" (XLM model)"),MUo=l(),dF=a("li"),$2e=a("strong"),EUo=o("xlm-roberta"),CUo=o(" \u2014 "),oW=a("a"),wUo=o("XLMRobertaForSequenceClassification"),AUo=o(" (XLM-RoBERTa model)"),LUo=l(),cF=a("li"),k2e=a("strong"),yUo=o("xlm-roberta-xl"),xUo=o(" \u2014 "),rW=a("a"),$Uo=o("XLMRobertaXLForSequenceClassification"),kUo=o(" (XLM-RoBERTa-XL model)"),SUo=l(),mF=a("li"),S2e=a("strong"),RUo=o("xlnet"),PUo=o(" \u2014 "),tW=a("a"),BUo=o("XLNetForSequenceClassification"),IUo=o(" (XLNet model)"),NUo=l(),fF=a("li"),R2e=a("strong"),qUo=o("yoso"),jUo=o(" \u2014 "),aW=a("a"),DUo=o("YosoForSequenceClassification"),GUo=o(" (YOSO model)"),OUo=l(),gF=a("p"),VUo=o("The model is set in evaluation mode by default using "),P2e=a("code"),XUo=o("model.eval()"),zUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),WUo=o("model.train()"),QUo=l(),F(hF.$$.fragment),sQe=l(),hd=a("h2"),uF=a("a"),I2e=a("span"),F(H8.$$.fragment),HUo=l(),N2e=a("span"),UUo=o("AutoModelForMultipleChoice"),lQe=l(),qo=a("div"),F(U8.$$.fragment),JUo=l(),ud=a("p"),YUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nW=a("a"),KUo=o("from_pretrained()"),ZUo=o(" class method or the "),sW=a("a"),eJo=o("from_config()"),oJo=o(` class
method.`),rJo=l(),J8=a("p"),tJo=o("This class cannot be instantiated directly using "),q2e=a("code"),aJo=o("__init__()"),nJo=o(" (throws an error)."),sJo=l(),pt=a("div"),F(Y8.$$.fragment),lJo=l(),j2e=a("p"),iJo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dJo=l(),pd=a("p"),cJo=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),mJo=o("not"),fJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),gJo=o("from_pretrained()"),hJo=o(" to load the model weights."),uJo=l(),F(pF.$$.fragment),pJo=l(),to=a("div"),F(K8.$$.fragment),_Jo=l(),G2e=a("p"),bJo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vJo=l(),Wa=a("p"),FJo=o("The model class to instantiate is selected based on the "),O2e=a("code"),TJo=o("model_type"),MJo=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),EJo=o("pretrained_model_name_or_path"),CJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),wJo=o("pretrained_model_name_or_path"),AJo=o(":"),LJo=l(),Z=a("ul"),_F=a("li"),z2e=a("strong"),yJo=o("albert"),xJo=o(" \u2014 "),iW=a("a"),$Jo=o("AlbertForMultipleChoice"),kJo=o(" (ALBERT model)"),SJo=l(),bF=a("li"),W2e=a("strong"),RJo=o("bert"),PJo=o(" \u2014 "),dW=a("a"),BJo=o("BertForMultipleChoice"),IJo=o(" (BERT model)"),NJo=l(),vF=a("li"),Q2e=a("strong"),qJo=o("big_bird"),jJo=o(" \u2014 "),cW=a("a"),DJo=o("BigBirdForMultipleChoice"),GJo=o(" (BigBird model)"),OJo=l(),FF=a("li"),H2e=a("strong"),VJo=o("camembert"),XJo=o(" \u2014 "),mW=a("a"),zJo=o("CamembertForMultipleChoice"),WJo=o(" (CamemBERT model)"),QJo=l(),TF=a("li"),U2e=a("strong"),HJo=o("canine"),UJo=o(" \u2014 "),fW=a("a"),JJo=o("CanineForMultipleChoice"),YJo=o(" (CANINE model)"),KJo=l(),MF=a("li"),J2e=a("strong"),ZJo=o("convbert"),eYo=o(" \u2014 "),gW=a("a"),oYo=o("ConvBertForMultipleChoice"),rYo=o(" (ConvBERT model)"),tYo=l(),EF=a("li"),Y2e=a("strong"),aYo=o("data2vec-text"),nYo=o(" \u2014 "),hW=a("a"),sYo=o("Data2VecTextForMultipleChoice"),lYo=o(" (Data2VecText model)"),iYo=l(),CF=a("li"),K2e=a("strong"),dYo=o("deberta-v2"),cYo=o(" \u2014 "),uW=a("a"),mYo=o("DebertaV2ForMultipleChoice"),fYo=o(" (DeBERTa-v2 model)"),gYo=l(),wF=a("li"),Z2e=a("strong"),hYo=o("distilbert"),uYo=o(" \u2014 "),pW=a("a"),pYo=o("DistilBertForMultipleChoice"),_Yo=o(" (DistilBERT model)"),bYo=l(),AF=a("li"),ebe=a("strong"),vYo=o("electra"),FYo=o(" \u2014 "),_W=a("a"),TYo=o("ElectraForMultipleChoice"),MYo=o(" (ELECTRA model)"),EYo=l(),LF=a("li"),obe=a("strong"),CYo=o("flaubert"),wYo=o(" \u2014 "),bW=a("a"),AYo=o("FlaubertForMultipleChoice"),LYo=o(" (FlauBERT model)"),yYo=l(),yF=a("li"),rbe=a("strong"),xYo=o("fnet"),$Yo=o(" \u2014 "),vW=a("a"),kYo=o("FNetForMultipleChoice"),SYo=o(" (FNet model)"),RYo=l(),xF=a("li"),tbe=a("strong"),PYo=o("funnel"),BYo=o(" \u2014 "),FW=a("a"),IYo=o("FunnelForMultipleChoice"),NYo=o(" (Funnel Transformer model)"),qYo=l(),$F=a("li"),abe=a("strong"),jYo=o("ibert"),DYo=o(" \u2014 "),TW=a("a"),GYo=o("IBertForMultipleChoice"),OYo=o(" (I-BERT model)"),VYo=l(),kF=a("li"),nbe=a("strong"),XYo=o("longformer"),zYo=o(" \u2014 "),MW=a("a"),WYo=o("LongformerForMultipleChoice"),QYo=o(" (Longformer model)"),HYo=l(),SF=a("li"),sbe=a("strong"),UYo=o("luke"),JYo=o(" \u2014 "),EW=a("a"),YYo=o("LukeForMultipleChoice"),KYo=o(" (LUKE model)"),ZYo=l(),RF=a("li"),lbe=a("strong"),eKo=o("megatron-bert"),oKo=o(" \u2014 "),CW=a("a"),rKo=o("MegatronBertForMultipleChoice"),tKo=o(" (Megatron-BERT model)"),aKo=l(),PF=a("li"),ibe=a("strong"),nKo=o("mobilebert"),sKo=o(" \u2014 "),wW=a("a"),lKo=o("MobileBertForMultipleChoice"),iKo=o(" (MobileBERT model)"),dKo=l(),BF=a("li"),dbe=a("strong"),cKo=o("mpnet"),mKo=o(" \u2014 "),AW=a("a"),fKo=o("MPNetForMultipleChoice"),gKo=o(" (MPNet model)"),hKo=l(),IF=a("li"),cbe=a("strong"),uKo=o("nezha"),pKo=o(" \u2014 "),LW=a("a"),_Ko=o("NezhaForMultipleChoice"),bKo=o(" (Nezha model)"),vKo=l(),NF=a("li"),mbe=a("strong"),FKo=o("nystromformer"),TKo=o(" \u2014 "),yW=a("a"),MKo=o("NystromformerForMultipleChoice"),EKo=o(" (Nystr\xF6mformer model)"),CKo=l(),qF=a("li"),fbe=a("strong"),wKo=o("qdqbert"),AKo=o(" \u2014 "),xW=a("a"),LKo=o("QDQBertForMultipleChoice"),yKo=o(" (QDQBert model)"),xKo=l(),jF=a("li"),gbe=a("strong"),$Ko=o("rembert"),kKo=o(" \u2014 "),$W=a("a"),SKo=o("RemBertForMultipleChoice"),RKo=o(" (RemBERT model)"),PKo=l(),DF=a("li"),hbe=a("strong"),BKo=o("roberta"),IKo=o(" \u2014 "),kW=a("a"),NKo=o("RobertaForMultipleChoice"),qKo=o(" (RoBERTa model)"),jKo=l(),GF=a("li"),ube=a("strong"),DKo=o("roformer"),GKo=o(" \u2014 "),SW=a("a"),OKo=o("RoFormerForMultipleChoice"),VKo=o(" (RoFormer model)"),XKo=l(),OF=a("li"),pbe=a("strong"),zKo=o("squeezebert"),WKo=o(" \u2014 "),RW=a("a"),QKo=o("SqueezeBertForMultipleChoice"),HKo=o(" (SqueezeBERT model)"),UKo=l(),VF=a("li"),_be=a("strong"),JKo=o("xlm"),YKo=o(" \u2014 "),PW=a("a"),KKo=o("XLMForMultipleChoice"),ZKo=o(" (XLM model)"),eZo=l(),XF=a("li"),bbe=a("strong"),oZo=o("xlm-roberta"),rZo=o(" \u2014 "),BW=a("a"),tZo=o("XLMRobertaForMultipleChoice"),aZo=o(" (XLM-RoBERTa model)"),nZo=l(),zF=a("li"),vbe=a("strong"),sZo=o("xlm-roberta-xl"),lZo=o(" \u2014 "),IW=a("a"),iZo=o("XLMRobertaXLForMultipleChoice"),dZo=o(" (XLM-RoBERTa-XL model)"),cZo=l(),WF=a("li"),Fbe=a("strong"),mZo=o("xlnet"),fZo=o(" \u2014 "),NW=a("a"),gZo=o("XLNetForMultipleChoice"),hZo=o(" (XLNet model)"),uZo=l(),QF=a("li"),Tbe=a("strong"),pZo=o("yoso"),_Zo=o(" \u2014 "),qW=a("a"),bZo=o("YosoForMultipleChoice"),vZo=o(" (YOSO model)"),FZo=l(),HF=a("p"),TZo=o("The model is set in evaluation mode by default using "),Mbe=a("code"),MZo=o("model.eval()"),EZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=a("code"),CZo=o("model.train()"),wZo=l(),F(UF.$$.fragment),iQe=l(),_d=a("h2"),JF=a("a"),Cbe=a("span"),F(Z8.$$.fragment),AZo=l(),wbe=a("span"),LZo=o("AutoModelForNextSentencePrediction"),dQe=l(),jo=a("div"),F(e9.$$.fragment),yZo=l(),bd=a("p"),xZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jW=a("a"),$Zo=o("from_pretrained()"),kZo=o(" class method or the "),DW=a("a"),SZo=o("from_config()"),RZo=o(` class
method.`),PZo=l(),o9=a("p"),BZo=o("This class cannot be instantiated directly using "),Abe=a("code"),IZo=o("__init__()"),NZo=o(" (throws an error)."),qZo=l(),_t=a("div"),F(r9.$$.fragment),jZo=l(),Lbe=a("p"),DZo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GZo=l(),vd=a("p"),OZo=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),VZo=o("not"),XZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),zZo=o("from_pretrained()"),WZo=o(" to load the model weights."),QZo=l(),F(YF.$$.fragment),HZo=l(),ao=a("div"),F(t9.$$.fragment),UZo=l(),xbe=a("p"),JZo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YZo=l(),Qa=a("p"),KZo=o("The model class to instantiate is selected based on the "),$be=a("code"),ZZo=o("model_type"),eer=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),ter=o("pretrained_model_name_or_path"),aer=o(":"),ner=l(),Do=a("ul"),KF=a("li"),Rbe=a("strong"),ser=o("bert"),ler=o(" \u2014 "),OW=a("a"),ier=o("BertForNextSentencePrediction"),der=o(" (BERT model)"),cer=l(),ZF=a("li"),Pbe=a("strong"),mer=o("fnet"),fer=o(" \u2014 "),VW=a("a"),ger=o("FNetForNextSentencePrediction"),her=o(" (FNet model)"),uer=l(),eT=a("li"),Bbe=a("strong"),per=o("megatron-bert"),_er=o(" \u2014 "),XW=a("a"),ber=o("MegatronBertForNextSentencePrediction"),ver=o(" (Megatron-BERT model)"),Fer=l(),oT=a("li"),Ibe=a("strong"),Ter=o("mobilebert"),Mer=o(" \u2014 "),zW=a("a"),Eer=o("MobileBertForNextSentencePrediction"),Cer=o(" (MobileBERT model)"),wer=l(),rT=a("li"),Nbe=a("strong"),Aer=o("nezha"),Ler=o(" \u2014 "),WW=a("a"),yer=o("NezhaForNextSentencePrediction"),xer=o(" (Nezha model)"),$er=l(),tT=a("li"),qbe=a("strong"),ker=o("qdqbert"),Ser=o(" \u2014 "),QW=a("a"),Rer=o("QDQBertForNextSentencePrediction"),Per=o(" (QDQBert model)"),Ber=l(),aT=a("p"),Ier=o("The model is set in evaluation mode by default using "),jbe=a("code"),Ner=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=a("code"),jer=o("model.train()"),Der=l(),F(nT.$$.fragment),cQe=l(),Fd=a("h2"),sT=a("a"),Gbe=a("span"),F(a9.$$.fragment),Ger=l(),Obe=a("span"),Oer=o("AutoModelForTokenClassification"),mQe=l(),Go=a("div"),F(n9.$$.fragment),Ver=l(),Td=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HW=a("a"),zer=o("from_pretrained()"),Wer=o(" class method or the "),UW=a("a"),Qer=o("from_config()"),Her=o(` class
method.`),Uer=l(),s9=a("p"),Jer=o("This class cannot be instantiated directly using "),Vbe=a("code"),Yer=o("__init__()"),Ker=o(" (throws an error)."),Zer=l(),bt=a("div"),F(l9.$$.fragment),eor=l(),Xbe=a("p"),oor=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ror=l(),Md=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),F(lT.$$.fragment),dor=l(),no=a("div"),F(i9.$$.fragment),cor=l(),Wbe=a("p"),mor=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gor=l(),Ha=a("p"),hor=o("The model class to instantiate is selected based on the "),Qbe=a("code"),uor=o("model_type"),por=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),_or=o("pretrained_model_name_or_path"),bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),vor=o("pretrained_model_name_or_path"),For=o(":"),Tor=l(),U=a("ul"),iT=a("li"),Jbe=a("strong"),Mor=o("albert"),Eor=o(" \u2014 "),YW=a("a"),Cor=o("AlbertForTokenClassification"),wor=o(" (ALBERT model)"),Aor=l(),dT=a("li"),Ybe=a("strong"),Lor=o("bert"),yor=o(" \u2014 "),KW=a("a"),xor=o("BertForTokenClassification"),$or=o(" (BERT model)"),kor=l(),cT=a("li"),Kbe=a("strong"),Sor=o("big_bird"),Ror=o(" \u2014 "),ZW=a("a"),Por=o("BigBirdForTokenClassification"),Bor=o(" (BigBird model)"),Ior=l(),mT=a("li"),Zbe=a("strong"),Nor=o("bloom"),qor=o(" \u2014 "),eQ=a("a"),jor=o("BloomForTokenClassification"),Dor=o(" (BLOOM model)"),Gor=l(),fT=a("li"),eve=a("strong"),Oor=o("camembert"),Vor=o(" \u2014 "),oQ=a("a"),Xor=o("CamembertForTokenClassification"),zor=o(" (CamemBERT model)"),Wor=l(),gT=a("li"),ove=a("strong"),Qor=o("canine"),Hor=o(" \u2014 "),rQ=a("a"),Uor=o("CanineForTokenClassification"),Jor=o(" (CANINE model)"),Yor=l(),hT=a("li"),rve=a("strong"),Kor=o("convbert"),Zor=o(" \u2014 "),tQ=a("a"),err=o("ConvBertForTokenClassification"),orr=o(" (ConvBERT model)"),rrr=l(),uT=a("li"),tve=a("strong"),trr=o("data2vec-text"),arr=o(" \u2014 "),aQ=a("a"),nrr=o("Data2VecTextForTokenClassification"),srr=o(" (Data2VecText model)"),lrr=l(),pT=a("li"),ave=a("strong"),irr=o("deberta"),drr=o(" \u2014 "),nQ=a("a"),crr=o("DebertaForTokenClassification"),mrr=o(" (DeBERTa model)"),frr=l(),_T=a("li"),nve=a("strong"),grr=o("deberta-v2"),hrr=o(" \u2014 "),sQ=a("a"),urr=o("DebertaV2ForTokenClassification"),prr=o(" (DeBERTa-v2 model)"),_rr=l(),bT=a("li"),sve=a("strong"),brr=o("distilbert"),vrr=o(" \u2014 "),lQ=a("a"),Frr=o("DistilBertForTokenClassification"),Trr=o(" (DistilBERT model)"),Mrr=l(),vT=a("li"),lve=a("strong"),Err=o("electra"),Crr=o(" \u2014 "),iQ=a("a"),wrr=o("ElectraForTokenClassification"),Arr=o(" (ELECTRA model)"),Lrr=l(),FT=a("li"),ive=a("strong"),yrr=o("flaubert"),xrr=o(" \u2014 "),dQ=a("a"),$rr=o("FlaubertForTokenClassification"),krr=o(" (FlauBERT model)"),Srr=l(),TT=a("li"),dve=a("strong"),Rrr=o("fnet"),Prr=o(" \u2014 "),cQ=a("a"),Brr=o("FNetForTokenClassification"),Irr=o(" (FNet model)"),Nrr=l(),MT=a("li"),cve=a("strong"),qrr=o("funnel"),jrr=o(" \u2014 "),mQ=a("a"),Drr=o("FunnelForTokenClassification"),Grr=o(" (Funnel Transformer model)"),Orr=l(),ET=a("li"),mve=a("strong"),Vrr=o("gpt2"),Xrr=o(" \u2014 "),fQ=a("a"),zrr=o("GPT2ForTokenClassification"),Wrr=o(" (OpenAI GPT-2 model)"),Qrr=l(),CT=a("li"),fve=a("strong"),Hrr=o("ibert"),Urr=o(" \u2014 "),gQ=a("a"),Jrr=o("IBertForTokenClassification"),Yrr=o(" (I-BERT model)"),Krr=l(),wT=a("li"),gve=a("strong"),Zrr=o("layoutlm"),etr=o(" \u2014 "),hQ=a("a"),otr=o("LayoutLMForTokenClassification"),rtr=o(" (LayoutLM model)"),ttr=l(),AT=a("li"),hve=a("strong"),atr=o("layoutlmv2"),ntr=o(" \u2014 "),uQ=a("a"),str=o("LayoutLMv2ForTokenClassification"),ltr=o(" (LayoutLMv2 model)"),itr=l(),LT=a("li"),uve=a("strong"),dtr=o("layoutlmv3"),ctr=o(" \u2014 "),pQ=a("a"),mtr=o("LayoutLMv3ForTokenClassification"),ftr=o(" (LayoutLMv3 model)"),gtr=l(),yT=a("li"),pve=a("strong"),htr=o("longformer"),utr=o(" \u2014 "),_Q=a("a"),ptr=o("LongformerForTokenClassification"),_tr=o(" (Longformer model)"),btr=l(),xT=a("li"),_ve=a("strong"),vtr=o("luke"),Ftr=o(" \u2014 "),bQ=a("a"),Ttr=o("LukeForTokenClassification"),Mtr=o(" (LUKE model)"),Etr=l(),$T=a("li"),bve=a("strong"),Ctr=o("megatron-bert"),wtr=o(" \u2014 "),vQ=a("a"),Atr=o("MegatronBertForTokenClassification"),Ltr=o(" (Megatron-BERT model)"),ytr=l(),kT=a("li"),vve=a("strong"),xtr=o("mobilebert"),$tr=o(" \u2014 "),FQ=a("a"),ktr=o("MobileBertForTokenClassification"),Str=o(" (MobileBERT model)"),Rtr=l(),ST=a("li"),Fve=a("strong"),Ptr=o("mpnet"),Btr=o(" \u2014 "),TQ=a("a"),Itr=o("MPNetForTokenClassification"),Ntr=o(" (MPNet model)"),qtr=l(),RT=a("li"),Tve=a("strong"),jtr=o("nezha"),Dtr=o(" \u2014 "),MQ=a("a"),Gtr=o("NezhaForTokenClassification"),Otr=o(" (Nezha model)"),Vtr=l(),PT=a("li"),Mve=a("strong"),Xtr=o("nystromformer"),ztr=o(" \u2014 "),EQ=a("a"),Wtr=o("NystromformerForTokenClassification"),Qtr=o(" (Nystr\xF6mformer model)"),Htr=l(),BT=a("li"),Eve=a("strong"),Utr=o("qdqbert"),Jtr=o(" \u2014 "),CQ=a("a"),Ytr=o("QDQBertForTokenClassification"),Ktr=o(" (QDQBert model)"),Ztr=l(),IT=a("li"),Cve=a("strong"),ear=o("rembert"),oar=o(" \u2014 "),wQ=a("a"),rar=o("RemBertForTokenClassification"),tar=o(" (RemBERT model)"),aar=l(),NT=a("li"),wve=a("strong"),nar=o("roberta"),sar=o(" \u2014 "),AQ=a("a"),lar=o("RobertaForTokenClassification"),iar=o(" (RoBERTa model)"),dar=l(),qT=a("li"),Ave=a("strong"),car=o("roformer"),mar=o(" \u2014 "),LQ=a("a"),far=o("RoFormerForTokenClassification"),gar=o(" (RoFormer model)"),har=l(),jT=a("li"),Lve=a("strong"),uar=o("squeezebert"),par=o(" \u2014 "),yQ=a("a"),_ar=o("SqueezeBertForTokenClassification"),bar=o(" (SqueezeBERT model)"),Far=l(),DT=a("li"),yve=a("strong"),Tar=o("xlm"),Mar=o(" \u2014 "),xQ=a("a"),Ear=o("XLMForTokenClassification"),Car=o(" (XLM model)"),war=l(),GT=a("li"),xve=a("strong"),Aar=o("xlm-roberta"),Lar=o(" \u2014 "),$Q=a("a"),yar=o("XLMRobertaForTokenClassification"),xar=o(" (XLM-RoBERTa model)"),$ar=l(),OT=a("li"),$ve=a("strong"),kar=o("xlm-roberta-xl"),Sar=o(" \u2014 "),kQ=a("a"),Rar=o("XLMRobertaXLForTokenClassification"),Par=o(" (XLM-RoBERTa-XL model)"),Bar=l(),VT=a("li"),kve=a("strong"),Iar=o("xlnet"),Nar=o(" \u2014 "),SQ=a("a"),qar=o("XLNetForTokenClassification"),jar=o(" (XLNet model)"),Dar=l(),XT=a("li"),Sve=a("strong"),Gar=o("yoso"),Oar=o(" \u2014 "),RQ=a("a"),Var=o("YosoForTokenClassification"),Xar=o(" (YOSO model)"),zar=l(),zT=a("p"),War=o("The model is set in evaluation mode by default using "),Rve=a("code"),Qar=o("model.eval()"),Har=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=a("code"),Uar=o("model.train()"),Jar=l(),F(WT.$$.fragment),fQe=l(),Ed=a("h2"),QT=a("a"),Bve=a("span"),F(d9.$$.fragment),Yar=l(),Ive=a("span"),Kar=o("AutoModelForQuestionAnswering"),gQe=l(),Oo=a("div"),F(c9.$$.fragment),Zar=l(),Cd=a("p"),enr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PQ=a("a"),onr=o("from_pretrained()"),rnr=o(" class method or the "),BQ=a("a"),tnr=o("from_config()"),anr=o(` class
method.`),nnr=l(),m9=a("p"),snr=o("This class cannot be instantiated directly using "),Nve=a("code"),lnr=o("__init__()"),inr=o(" (throws an error)."),dnr=l(),vt=a("div"),F(f9.$$.fragment),cnr=l(),qve=a("p"),mnr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fnr=l(),wd=a("p"),gnr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),hnr=o("not"),unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),pnr=o("from_pretrained()"),_nr=o(" to load the model weights."),bnr=l(),F(HT.$$.fragment),vnr=l(),so=a("div"),F(g9.$$.fragment),Fnr=l(),Dve=a("p"),Tnr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mnr=l(),Ua=a("p"),Enr=o("The model class to instantiate is selected based on the "),Gve=a("code"),Cnr=o("model_type"),wnr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),Anr=o("pretrained_model_name_or_path"),Lnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),ynr=o("pretrained_model_name_or_path"),xnr=o(":"),$nr=l(),V=a("ul"),UT=a("li"),Xve=a("strong"),knr=o("albert"),Snr=o(" \u2014 "),NQ=a("a"),Rnr=o("AlbertForQuestionAnswering"),Pnr=o(" (ALBERT model)"),Bnr=l(),JT=a("li"),zve=a("strong"),Inr=o("bart"),Nnr=o(" \u2014 "),qQ=a("a"),qnr=o("BartForQuestionAnswering"),jnr=o(" (BART model)"),Dnr=l(),YT=a("li"),Wve=a("strong"),Gnr=o("bert"),Onr=o(" \u2014 "),jQ=a("a"),Vnr=o("BertForQuestionAnswering"),Xnr=o(" (BERT model)"),znr=l(),KT=a("li"),Qve=a("strong"),Wnr=o("big_bird"),Qnr=o(" \u2014 "),DQ=a("a"),Hnr=o("BigBirdForQuestionAnswering"),Unr=o(" (BigBird model)"),Jnr=l(),ZT=a("li"),Hve=a("strong"),Ynr=o("bigbird_pegasus"),Knr=o(" \u2014 "),GQ=a("a"),Znr=o("BigBirdPegasusForQuestionAnswering"),esr=o(" (BigBird-Pegasus model)"),osr=l(),eM=a("li"),Uve=a("strong"),rsr=o("camembert"),tsr=o(" \u2014 "),OQ=a("a"),asr=o("CamembertForQuestionAnswering"),nsr=o(" (CamemBERT model)"),ssr=l(),oM=a("li"),Jve=a("strong"),lsr=o("canine"),isr=o(" \u2014 "),VQ=a("a"),dsr=o("CanineForQuestionAnswering"),csr=o(" (CANINE model)"),msr=l(),rM=a("li"),Yve=a("strong"),fsr=o("convbert"),gsr=o(" \u2014 "),XQ=a("a"),hsr=o("ConvBertForQuestionAnswering"),usr=o(" (ConvBERT model)"),psr=l(),tM=a("li"),Kve=a("strong"),_sr=o("data2vec-text"),bsr=o(" \u2014 "),zQ=a("a"),vsr=o("Data2VecTextForQuestionAnswering"),Fsr=o(" (Data2VecText model)"),Tsr=l(),aM=a("li"),Zve=a("strong"),Msr=o("deberta"),Esr=o(" \u2014 "),WQ=a("a"),Csr=o("DebertaForQuestionAnswering"),wsr=o(" (DeBERTa model)"),Asr=l(),nM=a("li"),e1e=a("strong"),Lsr=o("deberta-v2"),ysr=o(" \u2014 "),QQ=a("a"),xsr=o("DebertaV2ForQuestionAnswering"),$sr=o(" (DeBERTa-v2 model)"),ksr=l(),sM=a("li"),o1e=a("strong"),Ssr=o("distilbert"),Rsr=o(" \u2014 "),HQ=a("a"),Psr=o("DistilBertForQuestionAnswering"),Bsr=o(" (DistilBERT model)"),Isr=l(),lM=a("li"),r1e=a("strong"),Nsr=o("electra"),qsr=o(" \u2014 "),UQ=a("a"),jsr=o("ElectraForQuestionAnswering"),Dsr=o(" (ELECTRA model)"),Gsr=l(),iM=a("li"),t1e=a("strong"),Osr=o("flaubert"),Vsr=o(" \u2014 "),JQ=a("a"),Xsr=o("FlaubertForQuestionAnsweringSimple"),zsr=o(" (FlauBERT model)"),Wsr=l(),dM=a("li"),a1e=a("strong"),Qsr=o("fnet"),Hsr=o(" \u2014 "),YQ=a("a"),Usr=o("FNetForQuestionAnswering"),Jsr=o(" (FNet model)"),Ysr=l(),cM=a("li"),n1e=a("strong"),Ksr=o("funnel"),Zsr=o(" \u2014 "),KQ=a("a"),elr=o("FunnelForQuestionAnswering"),olr=o(" (Funnel Transformer model)"),rlr=l(),mM=a("li"),s1e=a("strong"),tlr=o("gptj"),alr=o(" \u2014 "),ZQ=a("a"),nlr=o("GPTJForQuestionAnswering"),slr=o(" (GPT-J model)"),llr=l(),fM=a("li"),l1e=a("strong"),ilr=o("ibert"),dlr=o(" \u2014 "),eH=a("a"),clr=o("IBertForQuestionAnswering"),mlr=o(" (I-BERT model)"),flr=l(),gM=a("li"),i1e=a("strong"),glr=o("layoutlmv2"),hlr=o(" \u2014 "),oH=a("a"),ulr=o("LayoutLMv2ForQuestionAnswering"),plr=o(" (LayoutLMv2 model)"),_lr=l(),hM=a("li"),d1e=a("strong"),blr=o("layoutlmv3"),vlr=o(" \u2014 "),rH=a("a"),Flr=o("LayoutLMv3ForQuestionAnswering"),Tlr=o(" (LayoutLMv3 model)"),Mlr=l(),uM=a("li"),c1e=a("strong"),Elr=o("led"),Clr=o(" \u2014 "),tH=a("a"),wlr=o("LEDForQuestionAnswering"),Alr=o(" (LED model)"),Llr=l(),pM=a("li"),m1e=a("strong"),ylr=o("longformer"),xlr=o(" \u2014 "),aH=a("a"),$lr=o("LongformerForQuestionAnswering"),klr=o(" (Longformer model)"),Slr=l(),_M=a("li"),f1e=a("strong"),Rlr=o("luke"),Plr=o(" \u2014 "),nH=a("a"),Blr=o("LukeForQuestionAnswering"),Ilr=o(" (LUKE model)"),Nlr=l(),bM=a("li"),g1e=a("strong"),qlr=o("lxmert"),jlr=o(" \u2014 "),sH=a("a"),Dlr=o("LxmertForQuestionAnswering"),Glr=o(" (LXMERT model)"),Olr=l(),vM=a("li"),h1e=a("strong"),Vlr=o("mbart"),Xlr=o(" \u2014 "),lH=a("a"),zlr=o("MBartForQuestionAnswering"),Wlr=o(" (mBART model)"),Qlr=l(),FM=a("li"),u1e=a("strong"),Hlr=o("megatron-bert"),Ulr=o(" \u2014 "),iH=a("a"),Jlr=o("MegatronBertForQuestionAnswering"),Ylr=o(" (Megatron-BERT model)"),Klr=l(),TM=a("li"),p1e=a("strong"),Zlr=o("mobilebert"),eir=o(" \u2014 "),dH=a("a"),oir=o("MobileBertForQuestionAnswering"),rir=o(" (MobileBERT model)"),tir=l(),MM=a("li"),_1e=a("strong"),air=o("mpnet"),nir=o(" \u2014 "),cH=a("a"),sir=o("MPNetForQuestionAnswering"),lir=o(" (MPNet model)"),iir=l(),EM=a("li"),b1e=a("strong"),dir=o("mvp"),cir=o(" \u2014 "),mH=a("a"),mir=o("MvpForQuestionAnswering"),fir=o(" (MVP model)"),gir=l(),CM=a("li"),v1e=a("strong"),hir=o("nezha"),uir=o(" \u2014 "),fH=a("a"),pir=o("NezhaForQuestionAnswering"),_ir=o(" (Nezha model)"),bir=l(),wM=a("li"),F1e=a("strong"),vir=o("nystromformer"),Fir=o(" \u2014 "),gH=a("a"),Tir=o("NystromformerForQuestionAnswering"),Mir=o(" (Nystr\xF6mformer model)"),Eir=l(),AM=a("li"),T1e=a("strong"),Cir=o("qdqbert"),wir=o(" \u2014 "),hH=a("a"),Air=o("QDQBertForQuestionAnswering"),Lir=o(" (QDQBert model)"),yir=l(),LM=a("li"),M1e=a("strong"),xir=o("reformer"),$ir=o(" \u2014 "),uH=a("a"),kir=o("ReformerForQuestionAnswering"),Sir=o(" (Reformer model)"),Rir=l(),yM=a("li"),E1e=a("strong"),Pir=o("rembert"),Bir=o(" \u2014 "),pH=a("a"),Iir=o("RemBertForQuestionAnswering"),Nir=o(" (RemBERT model)"),qir=l(),xM=a("li"),C1e=a("strong"),jir=o("roberta"),Dir=o(" \u2014 "),_H=a("a"),Gir=o("RobertaForQuestionAnswering"),Oir=o(" (RoBERTa model)"),Vir=l(),$M=a("li"),w1e=a("strong"),Xir=o("roformer"),zir=o(" \u2014 "),bH=a("a"),Wir=o("RoFormerForQuestionAnswering"),Qir=o(" (RoFormer model)"),Hir=l(),kM=a("li"),A1e=a("strong"),Uir=o("splinter"),Jir=o(" \u2014 "),vH=a("a"),Yir=o("SplinterForQuestionAnswering"),Kir=o(" (Splinter model)"),Zir=l(),SM=a("li"),L1e=a("strong"),edr=o("squeezebert"),odr=o(" \u2014 "),FH=a("a"),rdr=o("SqueezeBertForQuestionAnswering"),tdr=o(" (SqueezeBERT model)"),adr=l(),RM=a("li"),y1e=a("strong"),ndr=o("xlm"),sdr=o(" \u2014 "),TH=a("a"),ldr=o("XLMForQuestionAnsweringSimple"),idr=o(" (XLM model)"),ddr=l(),PM=a("li"),x1e=a("strong"),cdr=o("xlm-roberta"),mdr=o(" \u2014 "),MH=a("a"),fdr=o("XLMRobertaForQuestionAnswering"),gdr=o(" (XLM-RoBERTa model)"),hdr=l(),BM=a("li"),$1e=a("strong"),udr=o("xlm-roberta-xl"),pdr=o(" \u2014 "),EH=a("a"),_dr=o("XLMRobertaXLForQuestionAnswering"),bdr=o(" (XLM-RoBERTa-XL model)"),vdr=l(),IM=a("li"),k1e=a("strong"),Fdr=o("xlnet"),Tdr=o(" \u2014 "),CH=a("a"),Mdr=o("XLNetForQuestionAnsweringSimple"),Edr=o(" (XLNet model)"),Cdr=l(),NM=a("li"),S1e=a("strong"),wdr=o("yoso"),Adr=o(" \u2014 "),wH=a("a"),Ldr=o("YosoForQuestionAnswering"),ydr=o(" (YOSO model)"),xdr=l(),qM=a("p"),$dr=o("The model is set in evaluation mode by default using "),R1e=a("code"),kdr=o("model.eval()"),Sdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),Rdr=o("model.train()"),Pdr=l(),F(jM.$$.fragment),hQe=l(),Ad=a("h2"),DM=a("a"),B1e=a("span"),F(h9.$$.fragment),Bdr=l(),I1e=a("span"),Idr=o("AutoModelForTableQuestionAnswering"),uQe=l(),Vo=a("div"),F(u9.$$.fragment),Ndr=l(),Ld=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AH=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),LH=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),p9=a("p"),Xdr=o("This class cannot be instantiated directly using "),N1e=a("code"),zdr=o("__init__()"),Wdr=o(" (throws an error)."),Qdr=l(),Ft=a("div"),F(_9.$$.fragment),Hdr=l(),q1e=a("p"),Udr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jdr=l(),yd=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),Kdr=o("not"),Zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),ecr=o("from_pretrained()"),ocr=o(" to load the model weights."),rcr=l(),F(GM.$$.fragment),tcr=l(),lo=a("div"),F(b9.$$.fragment),acr=l(),D1e=a("p"),ncr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),scr=l(),Ja=a("p"),lcr=o("The model class to instantiate is selected based on the "),G1e=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),ccr=o("pretrained_model_name_or_path"),mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),fcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),X1e=a("ul"),OM=a("li"),z1e=a("strong"),ucr=o("tapas"),pcr=o(" \u2014 "),xH=a("a"),_cr=o("TapasForQuestionAnswering"),bcr=o(" (TAPAS model)"),vcr=l(),VM=a("p"),Fcr=o("The model is set in evaluation mode by default using "),W1e=a("code"),Tcr=o("model.eval()"),Mcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=a("code"),Ecr=o("model.train()"),Ccr=l(),F(XM.$$.fragment),pQe=l(),xd=a("h2"),zM=a("a"),H1e=a("span"),F(v9.$$.fragment),wcr=l(),U1e=a("span"),Acr=o("AutoModelForImageClassification"),_Qe=l(),Xo=a("div"),F(F9.$$.fragment),Lcr=l(),$d=a("p"),ycr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$H=a("a"),xcr=o("from_pretrained()"),$cr=o(" class method or the "),kH=a("a"),kcr=o("from_config()"),Scr=o(` class
method.`),Rcr=l(),T9=a("p"),Pcr=o("This class cannot be instantiated directly using "),J1e=a("code"),Bcr=o("__init__()"),Icr=o(" (throws an error)."),Ncr=l(),Tt=a("div"),F(M9.$$.fragment),qcr=l(),Y1e=a("p"),jcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dcr=l(),kd=a("p"),Gcr=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),Ocr=o("not"),Vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),Xcr=o("from_pretrained()"),zcr=o(" to load the model weights."),Wcr=l(),F(WM.$$.fragment),Qcr=l(),io=a("div"),F(E9.$$.fragment),Hcr=l(),Z1e=a("p"),Ucr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jcr=l(),Ya=a("p"),Ycr=o("The model class to instantiate is selected based on the "),eFe=a("code"),Kcr=o("model_type"),Zcr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(":"),amr=l(),be=a("ul"),QM=a("li"),tFe=a("strong"),nmr=o("beit"),smr=o(" \u2014 "),RH=a("a"),lmr=o("BeitForImageClassification"),imr=o(" (BEiT model)"),dmr=l(),HM=a("li"),aFe=a("strong"),cmr=o("convnext"),mmr=o(" \u2014 "),PH=a("a"),fmr=o("ConvNextForImageClassification"),gmr=o(" (ConvNeXT model)"),hmr=l(),UM=a("li"),nFe=a("strong"),umr=o("cvt"),pmr=o(" \u2014 "),BH=a("a"),_mr=o("CvtForImageClassification"),bmr=o(" (CvT model)"),vmr=l(),JM=a("li"),sFe=a("strong"),Fmr=o("data2vec-vision"),Tmr=o(" \u2014 "),IH=a("a"),Mmr=o("Data2VecVisionForImageClassification"),Emr=o(" (Data2VecVision model)"),Cmr=l(),rl=a("li"),lFe=a("strong"),wmr=o("deit"),Amr=o(" \u2014 "),NH=a("a"),Lmr=o("DeiTForImageClassification"),ymr=o(" or "),qH=a("a"),xmr=o("DeiTForImageClassificationWithTeacher"),$mr=o(" (DeiT model)"),kmr=l(),YM=a("li"),iFe=a("strong"),Smr=o("imagegpt"),Rmr=o(" \u2014 "),jH=a("a"),Pmr=o("ImageGPTForImageClassification"),Bmr=o(" (ImageGPT model)"),Imr=l(),tl=a("li"),dFe=a("strong"),Nmr=o("levit"),qmr=o(" \u2014 "),DH=a("a"),jmr=o("LevitForImageClassification"),Dmr=o(" or "),GH=a("a"),Gmr=o("LevitForImageClassificationWithTeacher"),Omr=o(" (LeViT model)"),Vmr=l(),KM=a("li"),cFe=a("strong"),Xmr=o("mobilevit"),zmr=o(" \u2014 "),OH=a("a"),Wmr=o("MobileViTForImageClassification"),Qmr=o(" (MobileViT model)"),Hmr=l(),Mt=a("li"),mFe=a("strong"),Umr=o("perceiver"),Jmr=o(" \u2014 "),VH=a("a"),Ymr=o("PerceiverForImageClassificationLearned"),Kmr=o(" or "),XH=a("a"),Zmr=o("PerceiverForImageClassificationFourier"),efr=o(" or "),zH=a("a"),ofr=o("PerceiverForImageClassificationConvProcessing"),rfr=o(" (Perceiver model)"),tfr=l(),ZM=a("li"),fFe=a("strong"),afr=o("poolformer"),nfr=o(" \u2014 "),WH=a("a"),sfr=o("PoolFormerForImageClassification"),lfr=o(" (PoolFormer model)"),ifr=l(),eE=a("li"),gFe=a("strong"),dfr=o("regnet"),cfr=o(" \u2014 "),QH=a("a"),mfr=o("RegNetForImageClassification"),ffr=o(" (RegNet model)"),gfr=l(),oE=a("li"),hFe=a("strong"),hfr=o("resnet"),ufr=o(" \u2014 "),HH=a("a"),pfr=o("ResNetForImageClassification"),_fr=o(" (ResNet model)"),bfr=l(),rE=a("li"),uFe=a("strong"),vfr=o("segformer"),Ffr=o(" \u2014 "),UH=a("a"),Tfr=o("SegformerForImageClassification"),Mfr=o(" (SegFormer model)"),Efr=l(),tE=a("li"),pFe=a("strong"),Cfr=o("swin"),wfr=o(" \u2014 "),JH=a("a"),Afr=o("SwinForImageClassification"),Lfr=o(" (Swin Transformer model)"),yfr=l(),aE=a("li"),_Fe=a("strong"),xfr=o("swinv2"),$fr=o(" \u2014 "),YH=a("a"),kfr=o("Swinv2ForImageClassification"),Sfr=o(" (Swin Transformer V2 model)"),Rfr=l(),nE=a("li"),bFe=a("strong"),Pfr=o("van"),Bfr=o(" \u2014 "),KH=a("a"),Ifr=o("VanForImageClassification"),Nfr=o(" (VAN model)"),qfr=l(),sE=a("li"),vFe=a("strong"),jfr=o("vit"),Dfr=o(" \u2014 "),ZH=a("a"),Gfr=o("ViTForImageClassification"),Ofr=o(" (ViT model)"),Vfr=l(),lE=a("p"),Xfr=o("The model is set in evaluation mode by default using "),FFe=a("code"),zfr=o("model.eval()"),Wfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=a("code"),Qfr=o("model.train()"),Hfr=l(),F(iE.$$.fragment),bQe=l(),Sd=a("h2"),dE=a("a"),MFe=a("span"),F(C9.$$.fragment),Ufr=l(),EFe=a("span"),Jfr=o("AutoModelForVideoClassification"),vQe=l(),zo=a("div"),F(w9.$$.fragment),Yfr=l(),Rd=a("p"),Kfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),eU=a("a"),Zfr=o("from_pretrained()"),egr=o(" class method or the "),oU=a("a"),ogr=o("from_config()"),rgr=o(` class
method.`),tgr=l(),A9=a("p"),agr=o("This class cannot be instantiated directly using "),CFe=a("code"),ngr=o("__init__()"),sgr=o(" (throws an error)."),lgr=l(),Et=a("div"),F(L9.$$.fragment),igr=l(),wFe=a("p"),dgr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),cgr=l(),Pd=a("p"),mgr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),fgr=o("not"),ggr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),hgr=o("from_pretrained()"),ugr=o(" to load the model weights."),pgr=l(),F(cE.$$.fragment),_gr=l(),co=a("div"),F(y9.$$.fragment),bgr=l(),LFe=a("p"),vgr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Fgr=l(),Ka=a("p"),Tgr=o("The model class to instantiate is selected based on the "),yFe=a("code"),Mgr=o("model_type"),Egr=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),Cgr=o("pretrained_model_name_or_path"),wgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),Agr=o("pretrained_model_name_or_path"),Lgr=o(":"),ygr=l(),kFe=a("ul"),mE=a("li"),SFe=a("strong"),xgr=o("videomae"),$gr=o(" \u2014 "),tU=a("a"),kgr=o("VideoMAEForVideoClassification"),Sgr=o(" (VideoMAE model)"),Rgr=l(),fE=a("p"),Pgr=o("The model is set in evaluation mode by default using "),RFe=a("code"),Bgr=o("model.eval()"),Igr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=a("code"),Ngr=o("model.train()"),qgr=l(),F(gE.$$.fragment),FQe=l(),Bd=a("h2"),hE=a("a"),BFe=a("span"),F(x9.$$.fragment),jgr=l(),IFe=a("span"),Dgr=o("AutoModelForVision2Seq"),TQe=l(),Wo=a("div"),F($9.$$.fragment),Ggr=l(),Id=a("p"),Ogr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" class method or the "),nU=a("a"),zgr=o("from_config()"),Wgr=o(` class
method.`),Qgr=l(),k9=a("p"),Hgr=o("This class cannot be instantiated directly using "),NFe=a("code"),Ugr=o("__init__()"),Jgr=o(" (throws an error)."),Ygr=l(),Ct=a("div"),F(S9.$$.fragment),Kgr=l(),qFe=a("p"),Zgr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ehr=l(),Nd=a("p"),ohr=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),rhr=o("not"),thr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),ahr=o("from_pretrained()"),nhr=o(" to load the model weights."),shr=l(),F(uE.$$.fragment),lhr=l(),mo=a("div"),F(R9.$$.fragment),ihr=l(),DFe=a("p"),dhr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),chr=l(),Za=a("p"),mhr=o("The model class to instantiate is selected based on the "),GFe=a("code"),fhr=o("model_type"),ghr=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),hhr=o("pretrained_model_name_or_path"),uhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),phr=o("pretrained_model_name_or_path"),_hr=o(":"),bhr=l(),XFe=a("ul"),pE=a("li"),zFe=a("strong"),vhr=o("vision-encoder-decoder"),Fhr=o(" \u2014 "),lU=a("a"),Thr=o("VisionEncoderDecoderModel"),Mhr=o(" (Vision Encoder decoder model)"),Ehr=l(),_E=a("p"),Chr=o("The model is set in evaluation mode by default using "),WFe=a("code"),whr=o("model.eval()"),Ahr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=a("code"),Lhr=o("model.train()"),yhr=l(),F(bE.$$.fragment),MQe=l(),qd=a("h2"),vE=a("a"),HFe=a("span"),F(P9.$$.fragment),xhr=l(),UFe=a("span"),$hr=o("AutoModelForVisualQuestionAnswering"),EQe=l(),Qo=a("div"),F(B9.$$.fragment),khr=l(),jd=a("p"),Shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),iU=a("a"),Rhr=o("from_pretrained()"),Phr=o(" class method or the "),dU=a("a"),Bhr=o("from_config()"),Ihr=o(` class
method.`),Nhr=l(),I9=a("p"),qhr=o("This class cannot be instantiated directly using "),JFe=a("code"),jhr=o("__init__()"),Dhr=o(" (throws an error)."),Ghr=l(),wt=a("div"),F(N9.$$.fragment),Ohr=l(),YFe=a("p"),Vhr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Xhr=l(),Dd=a("p"),zhr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),Whr=o("not"),Qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),Hhr=o("from_pretrained()"),Uhr=o(" to load the model weights."),Jhr=l(),F(FE.$$.fragment),Yhr=l(),fo=a("div"),F(q9.$$.fragment),Khr=l(),ZFe=a("p"),Zhr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),eur=l(),en=a("p"),our=o("The model class to instantiate is selected based on the "),eTe=a("code"),rur=o("model_type"),tur=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),aur=o("pretrained_model_name_or_path"),nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),sur=o("pretrained_model_name_or_path"),lur=o(":"),iur=l(),tTe=a("ul"),TE=a("li"),aTe=a("strong"),dur=o("vilt"),cur=o(" \u2014 "),mU=a("a"),mur=o("ViltForQuestionAnswering"),fur=o(" (ViLT model)"),gur=l(),ME=a("p"),hur=o("The model is set in evaluation mode by default using "),nTe=a("code"),uur=o("model.eval()"),pur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=a("code"),_ur=o("model.train()"),bur=l(),F(EE.$$.fragment),CQe=l(),Gd=a("h2"),CE=a("a"),lTe=a("span"),F(j9.$$.fragment),vur=l(),iTe=a("span"),Fur=o("AutoModelForAudioClassification"),wQe=l(),Ho=a("div"),F(D9.$$.fragment),Tur=l(),Od=a("p"),Mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fU=a("a"),Eur=o("from_pretrained()"),Cur=o(" class method or the "),gU=a("a"),wur=o("from_config()"),Aur=o(` class
method.`),Lur=l(),G9=a("p"),yur=o("This class cannot be instantiated directly using "),dTe=a("code"),xur=o("__init__()"),$ur=o(" (throws an error)."),kur=l(),At=a("div"),F(O9.$$.fragment),Sur=l(),cTe=a("p"),Rur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Pur=l(),Vd=a("p"),Bur=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),Iur=o("not"),Nur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),qur=o("from_pretrained()"),jur=o(" to load the model weights."),Dur=l(),F(wE.$$.fragment),Gur=l(),go=a("div"),F(V9.$$.fragment),Our=l(),fTe=a("p"),Vur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Xur=l(),on=a("p"),zur=o("The model class to instantiate is selected based on the "),gTe=a("code"),Wur=o("model_type"),Qur=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),Jur=o("pretrained_model_name_or_path"),Yur=o(":"),Kur=l(),Pe=a("ul"),AE=a("li"),pTe=a("strong"),Zur=o("data2vec-audio"),epr=o(" \u2014 "),uU=a("a"),opr=o("Data2VecAudioForSequenceClassification"),rpr=o(" (Data2VecAudio model)"),tpr=l(),LE=a("li"),_Te=a("strong"),apr=o("hubert"),npr=o(" \u2014 "),pU=a("a"),spr=o("HubertForSequenceClassification"),lpr=o(" (Hubert model)"),ipr=l(),yE=a("li"),bTe=a("strong"),dpr=o("sew"),cpr=o(" \u2014 "),_U=a("a"),mpr=o("SEWForSequenceClassification"),fpr=o(" (SEW model)"),gpr=l(),xE=a("li"),vTe=a("strong"),hpr=o("sew-d"),upr=o(" \u2014 "),bU=a("a"),ppr=o("SEWDForSequenceClassification"),_pr=o(" (SEW-D model)"),bpr=l(),$E=a("li"),FTe=a("strong"),vpr=o("unispeech"),Fpr=o(" \u2014 "),vU=a("a"),Tpr=o("UniSpeechForSequenceClassification"),Mpr=o(" (UniSpeech model)"),Epr=l(),kE=a("li"),TTe=a("strong"),Cpr=o("unispeech-sat"),wpr=o(" \u2014 "),FU=a("a"),Apr=o("UniSpeechSatForSequenceClassification"),Lpr=o(" (UniSpeechSat model)"),ypr=l(),SE=a("li"),MTe=a("strong"),xpr=o("wav2vec2"),$pr=o(" \u2014 "),TU=a("a"),kpr=o("Wav2Vec2ForSequenceClassification"),Spr=o(" (Wav2Vec2 model)"),Rpr=l(),RE=a("li"),ETe=a("strong"),Ppr=o("wav2vec2-conformer"),Bpr=o(" \u2014 "),MU=a("a"),Ipr=o("Wav2Vec2ConformerForSequenceClassification"),Npr=o(" (Wav2Vec2-Conformer model)"),qpr=l(),PE=a("li"),CTe=a("strong"),jpr=o("wavlm"),Dpr=o(" \u2014 "),EU=a("a"),Gpr=o("WavLMForSequenceClassification"),Opr=o(" (WavLM model)"),Vpr=l(),BE=a("p"),Xpr=o("The model is set in evaluation mode by default using "),wTe=a("code"),zpr=o("model.eval()"),Wpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ATe=a("code"),Qpr=o("model.train()"),Hpr=l(),F(IE.$$.fragment),AQe=l(),Xd=a("h2"),NE=a("a"),LTe=a("span"),F(X9.$$.fragment),Upr=l(),yTe=a("span"),Jpr=o("AutoModelForAudioFrameClassification"),LQe=l(),Uo=a("div"),F(z9.$$.fragment),Ypr=l(),zd=a("p"),Kpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CU=a("a"),Zpr=o("from_pretrained()"),e_r=o(" class method or the "),wU=a("a"),o_r=o("from_config()"),r_r=o(` class
method.`),t_r=l(),W9=a("p"),a_r=o("This class cannot be instantiated directly using "),xTe=a("code"),n_r=o("__init__()"),s_r=o(" (throws an error)."),l_r=l(),Lt=a("div"),F(Q9.$$.fragment),i_r=l(),$Te=a("p"),d_r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),c_r=l(),Wd=a("p"),m_r=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),f_r=o("not"),g_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),h_r=o("from_pretrained()"),u_r=o(" to load the model weights."),p_r=l(),F(qE.$$.fragment),__r=l(),ho=a("div"),F(H9.$$.fragment),b_r=l(),STe=a("p"),v_r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),F_r=l(),rn=a("p"),T_r=o("The model class to instantiate is selected based on the "),RTe=a("code"),M_r=o("model_type"),E_r=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),C_r=o("pretrained_model_name_or_path"),w_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),A_r=o("pretrained_model_name_or_path"),L_r=o(":"),y_r=l(),at=a("ul"),jE=a("li"),ITe=a("strong"),x_r=o("data2vec-audio"),$_r=o(" \u2014 "),LU=a("a"),k_r=o("Data2VecAudioForAudioFrameClassification"),S_r=o(" (Data2VecAudio model)"),R_r=l(),DE=a("li"),NTe=a("strong"),P_r=o("unispeech-sat"),B_r=o(" \u2014 "),yU=a("a"),I_r=o("UniSpeechSatForAudioFrameClassification"),N_r=o(" (UniSpeechSat model)"),q_r=l(),GE=a("li"),qTe=a("strong"),j_r=o("wav2vec2"),D_r=o(" \u2014 "),xU=a("a"),G_r=o("Wav2Vec2ForAudioFrameClassification"),O_r=o(" (Wav2Vec2 model)"),V_r=l(),OE=a("li"),jTe=a("strong"),X_r=o("wav2vec2-conformer"),z_r=o(" \u2014 "),$U=a("a"),W_r=o("Wav2Vec2ConformerForAudioFrameClassification"),Q_r=o(" (Wav2Vec2-Conformer model)"),H_r=l(),VE=a("li"),DTe=a("strong"),U_r=o("wavlm"),J_r=o(" \u2014 "),kU=a("a"),Y_r=o("WavLMForAudioFrameClassification"),K_r=o(" (WavLM model)"),Z_r=l(),XE=a("p"),e2r=o("The model is set in evaluation mode by default using "),GTe=a("code"),o2r=o("model.eval()"),r2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OTe=a("code"),t2r=o("model.train()"),a2r=l(),F(zE.$$.fragment),yQe=l(),Qd=a("h2"),WE=a("a"),VTe=a("span"),F(U9.$$.fragment),n2r=l(),XTe=a("span"),s2r=o("AutoModelForCTC"),xQe=l(),Jo=a("div"),F(J9.$$.fragment),l2r=l(),Hd=a("p"),i2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SU=a("a"),d2r=o("from_pretrained()"),c2r=o(" class method or the "),RU=a("a"),m2r=o("from_config()"),f2r=o(` class
method.`),g2r=l(),Y9=a("p"),h2r=o("This class cannot be instantiated directly using "),zTe=a("code"),u2r=o("__init__()"),p2r=o(" (throws an error)."),_2r=l(),yt=a("div"),F(K9.$$.fragment),b2r=l(),WTe=a("p"),v2r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),F2r=l(),Ud=a("p"),T2r=o(`Note:
Loading a model from its configuration file does `),QTe=a("strong"),M2r=o("not"),E2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),C2r=o("from_pretrained()"),w2r=o(" to load the model weights."),A2r=l(),F(QE.$$.fragment),L2r=l(),uo=a("div"),F(Z9.$$.fragment),y2r=l(),HTe=a("p"),x2r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$2r=l(),tn=a("p"),k2r=o("The model class to instantiate is selected based on the "),UTe=a("code"),S2r=o("model_type"),R2r=o(` property of the config object (either
passed as an argument or loaded from `),JTe=a("code"),P2r=o("pretrained_model_name_or_path"),B2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=a("code"),I2r=o("pretrained_model_name_or_path"),N2r=o(":"),q2r=l(),Le=a("ul"),HE=a("li"),KTe=a("strong"),j2r=o("data2vec-audio"),D2r=o(" \u2014 "),BU=a("a"),G2r=o("Data2VecAudioForCTC"),O2r=o(" (Data2VecAudio model)"),V2r=l(),UE=a("li"),ZTe=a("strong"),X2r=o("hubert"),z2r=o(" \u2014 "),IU=a("a"),W2r=o("HubertForCTC"),Q2r=o(" (Hubert model)"),H2r=l(),JE=a("li"),eMe=a("strong"),U2r=o("mctct"),J2r=o(" \u2014 "),NU=a("a"),Y2r=o("MCTCTForCTC"),K2r=o(" (M-CTC-T model)"),Z2r=l(),YE=a("li"),oMe=a("strong"),ebr=o("sew"),obr=o(" \u2014 "),qU=a("a"),rbr=o("SEWForCTC"),tbr=o(" (SEW model)"),abr=l(),KE=a("li"),rMe=a("strong"),nbr=o("sew-d"),sbr=o(" \u2014 "),jU=a("a"),lbr=o("SEWDForCTC"),ibr=o(" (SEW-D model)"),dbr=l(),ZE=a("li"),tMe=a("strong"),cbr=o("unispeech"),mbr=o(" \u2014 "),DU=a("a"),fbr=o("UniSpeechForCTC"),gbr=o(" (UniSpeech model)"),hbr=l(),e4=a("li"),aMe=a("strong"),ubr=o("unispeech-sat"),pbr=o(" \u2014 "),GU=a("a"),_br=o("UniSpeechSatForCTC"),bbr=o(" (UniSpeechSat model)"),vbr=l(),o4=a("li"),nMe=a("strong"),Fbr=o("wav2vec2"),Tbr=o(" \u2014 "),OU=a("a"),Mbr=o("Wav2Vec2ForCTC"),Ebr=o(" (Wav2Vec2 model)"),Cbr=l(),r4=a("li"),sMe=a("strong"),wbr=o("wav2vec2-conformer"),Abr=o(" \u2014 "),VU=a("a"),Lbr=o("Wav2Vec2ConformerForCTC"),ybr=o(" (Wav2Vec2-Conformer model)"),xbr=l(),t4=a("li"),lMe=a("strong"),$br=o("wavlm"),kbr=o(" \u2014 "),XU=a("a"),Sbr=o("WavLMForCTC"),Rbr=o(" (WavLM model)"),Pbr=l(),a4=a("p"),Bbr=o("The model is set in evaluation mode by default using "),iMe=a("code"),Ibr=o("model.eval()"),Nbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dMe=a("code"),qbr=o("model.train()"),jbr=l(),F(n4.$$.fragment),$Qe=l(),Jd=a("h2"),s4=a("a"),cMe=a("span"),F(ex.$$.fragment),Dbr=l(),mMe=a("span"),Gbr=o("AutoModelForSpeechSeq2Seq"),kQe=l(),Yo=a("div"),F(ox.$$.fragment),Obr=l(),Yd=a("p"),Vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=a("a"),Xbr=o("from_pretrained()"),zbr=o(" class method or the "),WU=a("a"),Wbr=o("from_config()"),Qbr=o(` class
method.`),Hbr=l(),rx=a("p"),Ubr=o("This class cannot be instantiated directly using "),fMe=a("code"),Jbr=o("__init__()"),Ybr=o(" (throws an error)."),Kbr=l(),xt=a("div"),F(tx.$$.fragment),Zbr=l(),gMe=a("p"),evr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ovr=l(),Kd=a("p"),rvr=o(`Note:
Loading a model from its configuration file does `),hMe=a("strong"),tvr=o("not"),avr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),nvr=o("from_pretrained()"),svr=o(" to load the model weights."),lvr=l(),F(l4.$$.fragment),ivr=l(),po=a("div"),F(ax.$$.fragment),dvr=l(),uMe=a("p"),cvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mvr=l(),an=a("p"),fvr=o("The model class to instantiate is selected based on the "),pMe=a("code"),gvr=o("model_type"),hvr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),uvr=o("pretrained_model_name_or_path"),pvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),_vr=o("pretrained_model_name_or_path"),bvr=o(":"),vvr=l(),nx=a("ul"),i4=a("li"),vMe=a("strong"),Fvr=o("speech-encoder-decoder"),Tvr=o(" \u2014 "),HU=a("a"),Mvr=o("SpeechEncoderDecoderModel"),Evr=o(" (Speech Encoder decoder model)"),Cvr=l(),d4=a("li"),FMe=a("strong"),wvr=o("speech_to_text"),Avr=o(" \u2014 "),UU=a("a"),Lvr=o("Speech2TextForConditionalGeneration"),yvr=o(" (Speech2Text model)"),xvr=l(),c4=a("p"),$vr=o("The model is set in evaluation mode by default using "),TMe=a("code"),kvr=o("model.eval()"),Svr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MMe=a("code"),Rvr=o("model.train()"),Pvr=l(),F(m4.$$.fragment),SQe=l(),Zd=a("h2"),f4=a("a"),EMe=a("span"),F(sx.$$.fragment),Bvr=l(),CMe=a("span"),Ivr=o("AutoModelForAudioXVector"),RQe=l(),Ko=a("div"),F(lx.$$.fragment),Nvr=l(),ec=a("p"),qvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JU=a("a"),jvr=o("from_pretrained()"),Dvr=o(" class method or the "),YU=a("a"),Gvr=o("from_config()"),Ovr=o(` class
method.`),Vvr=l(),ix=a("p"),Xvr=o("This class cannot be instantiated directly using "),wMe=a("code"),zvr=o("__init__()"),Wvr=o(" (throws an error)."),Qvr=l(),$t=a("div"),F(dx.$$.fragment),Hvr=l(),AMe=a("p"),Uvr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jvr=l(),oc=a("p"),Yvr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),Kvr=o("not"),Zvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),e1r=o("from_pretrained()"),o1r=o(" to load the model weights."),r1r=l(),F(g4.$$.fragment),t1r=l(),_o=a("div"),F(cx.$$.fragment),a1r=l(),yMe=a("p"),n1r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),s1r=l(),nn=a("p"),l1r=o("The model class to instantiate is selected based on the "),xMe=a("code"),i1r=o("model_type"),d1r=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),c1r=o("pretrained_model_name_or_path"),m1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),f1r=o("pretrained_model_name_or_path"),g1r=o(":"),h1r=l(),nt=a("ul"),h4=a("li"),SMe=a("strong"),u1r=o("data2vec-audio"),p1r=o(" \u2014 "),ZU=a("a"),_1r=o("Data2VecAudioForXVector"),b1r=o(" (Data2VecAudio model)"),v1r=l(),u4=a("li"),RMe=a("strong"),F1r=o("unispeech-sat"),T1r=o(" \u2014 "),eJ=a("a"),M1r=o("UniSpeechSatForXVector"),E1r=o(" (UniSpeechSat model)"),C1r=l(),p4=a("li"),PMe=a("strong"),w1r=o("wav2vec2"),A1r=o(" \u2014 "),oJ=a("a"),L1r=o("Wav2Vec2ForXVector"),y1r=o(" (Wav2Vec2 model)"),x1r=l(),_4=a("li"),BMe=a("strong"),$1r=o("wav2vec2-conformer"),k1r=o(" \u2014 "),rJ=a("a"),S1r=o("Wav2Vec2ConformerForXVector"),R1r=o(" (Wav2Vec2-Conformer model)"),P1r=l(),b4=a("li"),IMe=a("strong"),B1r=o("wavlm"),I1r=o(" \u2014 "),tJ=a("a"),N1r=o("WavLMForXVector"),q1r=o(" (WavLM model)"),j1r=l(),v4=a("p"),D1r=o("The model is set in evaluation mode by default using "),NMe=a("code"),G1r=o("model.eval()"),O1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qMe=a("code"),V1r=o("model.train()"),X1r=l(),F(F4.$$.fragment),PQe=l(),rc=a("h2"),T4=a("a"),jMe=a("span"),F(mx.$$.fragment),z1r=l(),DMe=a("span"),W1r=o("AutoModelForMaskedImageModeling"),BQe=l(),Zo=a("div"),F(fx.$$.fragment),Q1r=l(),tc=a("p"),H1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aJ=a("a"),U1r=o("from_pretrained()"),J1r=o(" class method or the "),nJ=a("a"),Y1r=o("from_config()"),K1r=o(` class
method.`),Z1r=l(),gx=a("p"),eFr=o("This class cannot be instantiated directly using "),GMe=a("code"),oFr=o("__init__()"),rFr=o(" (throws an error)."),tFr=l(),kt=a("div"),F(hx.$$.fragment),aFr=l(),OMe=a("p"),nFr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),sFr=l(),ac=a("p"),lFr=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),iFr=o("not"),dFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),cFr=o("from_pretrained()"),mFr=o(" to load the model weights."),fFr=l(),F(M4.$$.fragment),gFr=l(),bo=a("div"),F(ux.$$.fragment),hFr=l(),XMe=a("p"),uFr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pFr=l(),sn=a("p"),_Fr=o("The model class to instantiate is selected based on the "),zMe=a("code"),bFr=o("model_type"),vFr=o(` property of the config object (either
passed as an argument or loaded from `),WMe=a("code"),FFr=o("pretrained_model_name_or_path"),TFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),MFr=o("pretrained_model_name_or_path"),EFr=o(":"),CFr=l(),ln=a("ul"),E4=a("li"),HMe=a("strong"),wFr=o("deit"),AFr=o(" \u2014 "),lJ=a("a"),LFr=o("DeiTForMaskedImageModeling"),yFr=o(" (DeiT model)"),xFr=l(),C4=a("li"),UMe=a("strong"),$Fr=o("swin"),kFr=o(" \u2014 "),iJ=a("a"),SFr=o("SwinForMaskedImageModeling"),RFr=o(" (Swin Transformer model)"),PFr=l(),w4=a("li"),JMe=a("strong"),BFr=o("swinv2"),IFr=o(" \u2014 "),dJ=a("a"),NFr=o("Swinv2ForMaskedImageModeling"),qFr=o(" (Swin Transformer V2 model)"),jFr=l(),A4=a("li"),YMe=a("strong"),DFr=o("vit"),GFr=o(" \u2014 "),cJ=a("a"),OFr=o("ViTForMaskedImageModeling"),VFr=o(" (ViT model)"),XFr=l(),L4=a("p"),zFr=o("The model is set in evaluation mode by default using "),KMe=a("code"),WFr=o("model.eval()"),QFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZMe=a("code"),HFr=o("model.train()"),UFr=l(),F(y4.$$.fragment),IQe=l(),nc=a("h2"),x4=a("a"),eEe=a("span"),F(px.$$.fragment),JFr=l(),oEe=a("span"),YFr=o("AutoModelForObjectDetection"),NQe=l(),er=a("div"),F(_x.$$.fragment),KFr=l(),sc=a("p"),ZFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mJ=a("a"),eTr=o("from_pretrained()"),oTr=o(" class method or the "),fJ=a("a"),rTr=o("from_config()"),tTr=o(` class
method.`),aTr=l(),bx=a("p"),nTr=o("This class cannot be instantiated directly using "),rEe=a("code"),sTr=o("__init__()"),lTr=o(" (throws an error)."),iTr=l(),St=a("div"),F(vx.$$.fragment),dTr=l(),tEe=a("p"),cTr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mTr=l(),lc=a("p"),fTr=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),gTr=o("not"),hTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),uTr=o("from_pretrained()"),pTr=o(" to load the model weights."),_Tr=l(),F($4.$$.fragment),bTr=l(),vo=a("div"),F(Fx.$$.fragment),vTr=l(),nEe=a("p"),FTr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),TTr=l(),dn=a("p"),MTr=o("The model class to instantiate is selected based on the "),sEe=a("code"),ETr=o("model_type"),CTr=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),wTr=o("pretrained_model_name_or_path"),ATr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),LTr=o("pretrained_model_name_or_path"),yTr=o(":"),xTr=l(),Tx=a("ul"),k4=a("li"),dEe=a("strong"),$Tr=o("detr"),kTr=o(" \u2014 "),hJ=a("a"),STr=o("DetrForObjectDetection"),RTr=o(" (DETR model)"),PTr=l(),S4=a("li"),cEe=a("strong"),BTr=o("yolos"),ITr=o(" \u2014 "),uJ=a("a"),NTr=o("YolosForObjectDetection"),qTr=o(" (YOLOS model)"),jTr=l(),R4=a("p"),DTr=o("The model is set in evaluation mode by default using "),mEe=a("code"),GTr=o("model.eval()"),OTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fEe=a("code"),VTr=o("model.train()"),XTr=l(),F(P4.$$.fragment),qQe=l(),ic=a("h2"),B4=a("a"),gEe=a("span"),F(Mx.$$.fragment),zTr=l(),hEe=a("span"),WTr=o("AutoModelForImageSegmentation"),jQe=l(),or=a("div"),F(Ex.$$.fragment),QTr=l(),dc=a("p"),HTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pJ=a("a"),UTr=o("from_pretrained()"),JTr=o(" class method or the "),_J=a("a"),YTr=o("from_config()"),KTr=o(` class
method.`),ZTr=l(),Cx=a("p"),eMr=o("This class cannot be instantiated directly using "),uEe=a("code"),oMr=o("__init__()"),rMr=o(" (throws an error)."),tMr=l(),Rt=a("div"),F(wx.$$.fragment),aMr=l(),pEe=a("p"),nMr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sMr=l(),cc=a("p"),lMr=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),iMr=o("not"),dMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),cMr=o("from_pretrained()"),mMr=o(" to load the model weights."),fMr=l(),F(I4.$$.fragment),gMr=l(),Fo=a("div"),F(Ax.$$.fragment),hMr=l(),bEe=a("p"),uMr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pMr=l(),cn=a("p"),_Mr=o("The model class to instantiate is selected based on the "),vEe=a("code"),bMr=o("model_type"),vMr=o(` property of the config object (either
passed as an argument or loaded from `),FEe=a("code"),FMr=o("pretrained_model_name_or_path"),TMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(":"),CMr=l(),MEe=a("ul"),N4=a("li"),EEe=a("strong"),wMr=o("detr"),AMr=o(" \u2014 "),vJ=a("a"),LMr=o("DetrForSegmentation"),yMr=o(" (DETR model)"),xMr=l(),q4=a("p"),$Mr=o("The model is set in evaluation mode by default using "),CEe=a("code"),kMr=o("model.eval()"),SMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wEe=a("code"),RMr=o("model.train()"),PMr=l(),F(j4.$$.fragment),DQe=l(),mc=a("h2"),D4=a("a"),AEe=a("span"),F(Lx.$$.fragment),BMr=l(),LEe=a("span"),IMr=o("AutoModelForSemanticSegmentation"),GQe=l(),rr=a("div"),F(yx.$$.fragment),NMr=l(),fc=a("p"),qMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FJ=a("a"),jMr=o("from_pretrained()"),DMr=o(" class method or the "),TJ=a("a"),GMr=o("from_config()"),OMr=o(` class
method.`),VMr=l(),xx=a("p"),XMr=o("This class cannot be instantiated directly using "),yEe=a("code"),zMr=o("__init__()"),WMr=o(" (throws an error)."),QMr=l(),Pt=a("div"),F($x.$$.fragment),HMr=l(),xEe=a("p"),UMr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),JMr=l(),gc=a("p"),YMr=o(`Note:
Loading a model from its configuration file does `),$Ee=a("strong"),KMr=o("not"),ZMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),eEr=o("from_pretrained()"),oEr=o(" to load the model weights."),rEr=l(),F(G4.$$.fragment),tEr=l(),To=a("div"),F(kx.$$.fragment),aEr=l(),kEe=a("p"),nEr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sEr=l(),mn=a("p"),lEr=o("The model class to instantiate is selected based on the "),SEe=a("code"),iEr=o("model_type"),dEr=o(` property of the config object (either
passed as an argument or loaded from `),REe=a("code"),cEr=o("pretrained_model_name_or_path"),mEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),fEr=o("pretrained_model_name_or_path"),gEr=o(":"),hEr=l(),st=a("ul"),O4=a("li"),BEe=a("strong"),uEr=o("beit"),pEr=o(" \u2014 "),EJ=a("a"),_Er=o("BeitForSemanticSegmentation"),bEr=o(" (BEiT model)"),vEr=l(),V4=a("li"),IEe=a("strong"),FEr=o("data2vec-vision"),TEr=o(" \u2014 "),CJ=a("a"),MEr=o("Data2VecVisionForSemanticSegmentation"),EEr=o(" (Data2VecVision model)"),CEr=l(),X4=a("li"),NEe=a("strong"),wEr=o("dpt"),AEr=o(" \u2014 "),wJ=a("a"),LEr=o("DPTForSemanticSegmentation"),yEr=o(" (DPT model)"),xEr=l(),z4=a("li"),qEe=a("strong"),$Er=o("mobilevit"),kEr=o(" \u2014 "),AJ=a("a"),SEr=o("MobileViTForSemanticSegmentation"),REr=o(" (MobileViT model)"),PEr=l(),W4=a("li"),jEe=a("strong"),BEr=o("segformer"),IEr=o(" \u2014 "),LJ=a("a"),NEr=o("SegformerForSemanticSegmentation"),qEr=o(" (SegFormer model)"),jEr=l(),Q4=a("p"),DEr=o("The model is set in evaluation mode by default using "),DEe=a("code"),GEr=o("model.eval()"),OEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GEe=a("code"),VEr=o("model.train()"),XEr=l(),F(H4.$$.fragment),OQe=l(),hc=a("h2"),U4=a("a"),OEe=a("span"),F(Sx.$$.fragment),zEr=l(),VEe=a("span"),WEr=o("AutoModelForInstanceSegmentation"),VQe=l(),tr=a("div"),F(Rx.$$.fragment),QEr=l(),uc=a("p"),HEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yJ=a("a"),UEr=o("from_pretrained()"),JEr=o(" class method or the "),xJ=a("a"),YEr=o("from_config()"),KEr=o(` class
method.`),ZEr=l(),Px=a("p"),e4r=o("This class cannot be instantiated directly using "),XEe=a("code"),o4r=o("__init__()"),r4r=o(" (throws an error)."),t4r=l(),Bt=a("div"),F(Bx.$$.fragment),a4r=l(),zEe=a("p"),n4r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),s4r=l(),pc=a("p"),l4r=o(`Note:
Loading a model from its configuration file does `),WEe=a("strong"),i4r=o("not"),d4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),c4r=o("from_pretrained()"),m4r=o(" to load the model weights."),f4r=l(),F(J4.$$.fragment),g4r=l(),Mo=a("div"),F(Ix.$$.fragment),h4r=l(),QEe=a("p"),u4r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),p4r=l(),fn=a("p"),_4r=o("The model class to instantiate is selected based on the "),HEe=a("code"),b4r=o("model_type"),v4r=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),F4r=o("pretrained_model_name_or_path"),T4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(":"),C4r=l(),YEe=a("ul"),Y4=a("li"),KEe=a("strong"),w4r=o("maskformer"),A4r=o(" \u2014 "),kJ=a("a"),L4r=o("MaskFormerForInstanceSegmentation"),y4r=o(" (MaskFormer model)"),x4r=l(),K4=a("p"),$4r=o("The model is set in evaluation mode by default using "),ZEe=a("code"),k4r=o("model.eval()"),S4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e4e=a("code"),R4r=o("model.train()"),P4r=l(),F(Z4.$$.fragment),XQe=l(),_c=a("h2"),eC=a("a"),o4e=a("span"),F(Nx.$$.fragment),B4r=l(),r4e=a("span"),I4r=o("TFAutoModel"),zQe=l(),ar=a("div"),F(qx.$$.fragment),N4r=l(),bc=a("p"),q4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SJ=a("a"),j4r=o("from_pretrained()"),D4r=o(" class method or the "),RJ=a("a"),G4r=o("from_config()"),O4r=o(` class
method.`),V4r=l(),jx=a("p"),X4r=o("This class cannot be instantiated directly using "),t4e=a("code"),z4r=o("__init__()"),W4r=o(" (throws an error)."),Q4r=l(),It=a("div"),F(Dx.$$.fragment),H4r=l(),a4e=a("p"),U4r=o("Instantiates one of the base model classes of the library from a configuration."),J4r=l(),vc=a("p"),Y4r=o(`Note:
Loading a model from its configuration file does `),n4e=a("strong"),K4r=o("not"),Z4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),eCr=o("from_pretrained()"),oCr=o(" to load the model weights."),rCr=l(),F(oC.$$.fragment),tCr=l(),Sr=a("div"),F(Gx.$$.fragment),aCr=l(),s4e=a("p"),nCr=o("Instantiate one of the base model classes of the library from a pretrained model."),sCr=l(),gn=a("p"),lCr=o("The model class to instantiate is selected based on the "),l4e=a("code"),iCr=o("model_type"),dCr=o(` property of the config object (either
passed as an argument or loaded from `),i4e=a("code"),cCr=o("pretrained_model_name_or_path"),mCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=a("code"),fCr=o("pretrained_model_name_or_path"),gCr=o(":"),hCr=l(),q=a("ul"),rC=a("li"),c4e=a("strong"),uCr=o("albert"),pCr=o(" \u2014 "),BJ=a("a"),_Cr=o("TFAlbertModel"),bCr=o(" (ALBERT model)"),vCr=l(),tC=a("li"),m4e=a("strong"),FCr=o("bart"),TCr=o(" \u2014 "),IJ=a("a"),MCr=o("TFBartModel"),ECr=o(" (BART model)"),CCr=l(),aC=a("li"),f4e=a("strong"),wCr=o("bert"),ACr=o(" \u2014 "),NJ=a("a"),LCr=o("TFBertModel"),yCr=o(" (BERT model)"),xCr=l(),nC=a("li"),g4e=a("strong"),$Cr=o("blenderbot"),kCr=o(" \u2014 "),qJ=a("a"),SCr=o("TFBlenderbotModel"),RCr=o(" (Blenderbot model)"),PCr=l(),sC=a("li"),h4e=a("strong"),BCr=o("blenderbot-small"),ICr=o(" \u2014 "),jJ=a("a"),NCr=o("TFBlenderbotSmallModel"),qCr=o(" (BlenderbotSmall model)"),jCr=l(),lC=a("li"),u4e=a("strong"),DCr=o("camembert"),GCr=o(" \u2014 "),DJ=a("a"),OCr=o("TFCamembertModel"),VCr=o(" (CamemBERT model)"),XCr=l(),iC=a("li"),p4e=a("strong"),zCr=o("clip"),WCr=o(" \u2014 "),GJ=a("a"),QCr=o("TFCLIPModel"),HCr=o(" (CLIP model)"),UCr=l(),dC=a("li"),_4e=a("strong"),JCr=o("convbert"),YCr=o(" \u2014 "),OJ=a("a"),KCr=o("TFConvBertModel"),ZCr=o(" (ConvBERT model)"),e5r=l(),cC=a("li"),b4e=a("strong"),o5r=o("convnext"),r5r=o(" \u2014 "),VJ=a("a"),t5r=o("TFConvNextModel"),a5r=o(" (ConvNeXT model)"),n5r=l(),mC=a("li"),v4e=a("strong"),s5r=o("ctrl"),l5r=o(" \u2014 "),XJ=a("a"),i5r=o("TFCTRLModel"),d5r=o(" (CTRL model)"),c5r=l(),fC=a("li"),F4e=a("strong"),m5r=o("data2vec-vision"),f5r=o(" \u2014 "),zJ=a("a"),g5r=o("TFData2VecVisionModel"),h5r=o(" (Data2VecVision model)"),u5r=l(),gC=a("li"),T4e=a("strong"),p5r=o("deberta"),_5r=o(" \u2014 "),WJ=a("a"),b5r=o("TFDebertaModel"),v5r=o(" (DeBERTa model)"),F5r=l(),hC=a("li"),M4e=a("strong"),T5r=o("deberta-v2"),M5r=o(" \u2014 "),QJ=a("a"),E5r=o("TFDebertaV2Model"),C5r=o(" (DeBERTa-v2 model)"),w5r=l(),uC=a("li"),E4e=a("strong"),A5r=o("deit"),L5r=o(" \u2014 "),HJ=a("a"),y5r=o("TFDeiTModel"),x5r=o(" (DeiT model)"),$5r=l(),pC=a("li"),C4e=a("strong"),k5r=o("distilbert"),S5r=o(" \u2014 "),UJ=a("a"),R5r=o("TFDistilBertModel"),P5r=o(" (DistilBERT model)"),B5r=l(),_C=a("li"),w4e=a("strong"),I5r=o("dpr"),N5r=o(" \u2014 "),JJ=a("a"),q5r=o("TFDPRQuestionEncoder"),j5r=o(" (DPR model)"),D5r=l(),bC=a("li"),A4e=a("strong"),G5r=o("electra"),O5r=o(" \u2014 "),YJ=a("a"),V5r=o("TFElectraModel"),X5r=o(" (ELECTRA model)"),z5r=l(),vC=a("li"),L4e=a("strong"),W5r=o("flaubert"),Q5r=o(" \u2014 "),KJ=a("a"),H5r=o("TFFlaubertModel"),U5r=o(" (FlauBERT model)"),J5r=l(),al=a("li"),y4e=a("strong"),Y5r=o("funnel"),K5r=o(" \u2014 "),ZJ=a("a"),Z5r=o("TFFunnelModel"),e3r=o(" or "),eY=a("a"),o3r=o("TFFunnelBaseModel"),r3r=o(" (Funnel Transformer model)"),t3r=l(),FC=a("li"),x4e=a("strong"),a3r=o("gpt2"),n3r=o(" \u2014 "),oY=a("a"),s3r=o("TFGPT2Model"),l3r=o(" (OpenAI GPT-2 model)"),i3r=l(),TC=a("li"),$4e=a("strong"),d3r=o("gptj"),c3r=o(" \u2014 "),rY=a("a"),m3r=o("TFGPTJModel"),f3r=o(" (GPT-J model)"),g3r=l(),MC=a("li"),k4e=a("strong"),h3r=o("hubert"),u3r=o(" \u2014 "),tY=a("a"),p3r=o("TFHubertModel"),_3r=o(" (Hubert model)"),b3r=l(),EC=a("li"),S4e=a("strong"),v3r=o("layoutlm"),F3r=o(" \u2014 "),aY=a("a"),T3r=o("TFLayoutLMModel"),M3r=o(" (LayoutLM model)"),E3r=l(),CC=a("li"),R4e=a("strong"),C3r=o("led"),w3r=o(" \u2014 "),nY=a("a"),A3r=o("TFLEDModel"),L3r=o(" (LED model)"),y3r=l(),wC=a("li"),P4e=a("strong"),x3r=o("longformer"),$3r=o(" \u2014 "),sY=a("a"),k3r=o("TFLongformerModel"),S3r=o(" (Longformer model)"),R3r=l(),AC=a("li"),B4e=a("strong"),P3r=o("lxmert"),B3r=o(" \u2014 "),lY=a("a"),I3r=o("TFLxmertModel"),N3r=o(" (LXMERT model)"),q3r=l(),LC=a("li"),I4e=a("strong"),j3r=o("marian"),D3r=o(" \u2014 "),iY=a("a"),G3r=o("TFMarianModel"),O3r=o(" (Marian model)"),V3r=l(),yC=a("li"),N4e=a("strong"),X3r=o("mbart"),z3r=o(" \u2014 "),dY=a("a"),W3r=o("TFMBartModel"),Q3r=o(" (mBART model)"),H3r=l(),xC=a("li"),q4e=a("strong"),U3r=o("mobilebert"),J3r=o(" \u2014 "),cY=a("a"),Y3r=o("TFMobileBertModel"),K3r=o(" (MobileBERT model)"),Z3r=l(),$C=a("li"),j4e=a("strong"),e0r=o("mpnet"),o0r=o(" \u2014 "),mY=a("a"),r0r=o("TFMPNetModel"),t0r=o(" (MPNet model)"),a0r=l(),kC=a("li"),D4e=a("strong"),n0r=o("mt5"),s0r=o(" \u2014 "),fY=a("a"),l0r=o("TFMT5Model"),i0r=o(" (MT5 model)"),d0r=l(),SC=a("li"),G4e=a("strong"),c0r=o("openai-gpt"),m0r=o(" \u2014 "),gY=a("a"),f0r=o("TFOpenAIGPTModel"),g0r=o(" (OpenAI GPT model)"),h0r=l(),RC=a("li"),O4e=a("strong"),u0r=o("opt"),p0r=o(" \u2014 "),hY=a("a"),_0r=o("TFOPTModel"),b0r=o(" (OPT model)"),v0r=l(),PC=a("li"),V4e=a("strong"),F0r=o("pegasus"),T0r=o(" \u2014 "),uY=a("a"),M0r=o("TFPegasusModel"),E0r=o(" (Pegasus model)"),C0r=l(),BC=a("li"),X4e=a("strong"),w0r=o("regnet"),A0r=o(" \u2014 "),pY=a("a"),L0r=o("TFRegNetModel"),y0r=o(" (RegNet model)"),x0r=l(),IC=a("li"),z4e=a("strong"),$0r=o("rembert"),k0r=o(" \u2014 "),_Y=a("a"),S0r=o("TFRemBertModel"),R0r=o(" (RemBERT model)"),P0r=l(),NC=a("li"),W4e=a("strong"),B0r=o("resnet"),I0r=o(" \u2014 "),bY=a("a"),N0r=o("TFResNetModel"),q0r=o(" (ResNet model)"),j0r=l(),qC=a("li"),Q4e=a("strong"),D0r=o("roberta"),G0r=o(" \u2014 "),vY=a("a"),O0r=o("TFRobertaModel"),V0r=o(" (RoBERTa model)"),X0r=l(),jC=a("li"),H4e=a("strong"),z0r=o("roformer"),W0r=o(" \u2014 "),FY=a("a"),Q0r=o("TFRoFormerModel"),H0r=o(" (RoFormer model)"),U0r=l(),DC=a("li"),U4e=a("strong"),J0r=o("segformer"),Y0r=o(" \u2014 "),TY=a("a"),K0r=o("TFSegformerModel"),Z0r=o(" (SegFormer model)"),ewr=l(),GC=a("li"),J4e=a("strong"),owr=o("speech_to_text"),rwr=o(" \u2014 "),MY=a("a"),twr=o("TFSpeech2TextModel"),awr=o(" (Speech2Text model)"),nwr=l(),OC=a("li"),Y4e=a("strong"),swr=o("swin"),lwr=o(" \u2014 "),EY=a("a"),iwr=o("TFSwinModel"),dwr=o(" (Swin Transformer model)"),cwr=l(),VC=a("li"),K4e=a("strong"),mwr=o("t5"),fwr=o(" \u2014 "),CY=a("a"),gwr=o("TFT5Model"),hwr=o(" (T5 model)"),uwr=l(),XC=a("li"),Z4e=a("strong"),pwr=o("tapas"),_wr=o(" \u2014 "),wY=a("a"),bwr=o("TFTapasModel"),vwr=o(" (TAPAS model)"),Fwr=l(),zC=a("li"),eCe=a("strong"),Twr=o("transfo-xl"),Mwr=o(" \u2014 "),AY=a("a"),Ewr=o("TFTransfoXLModel"),Cwr=o(" (Transformer-XL model)"),wwr=l(),WC=a("li"),oCe=a("strong"),Awr=o("vit"),Lwr=o(" \u2014 "),LY=a("a"),ywr=o("TFViTModel"),xwr=o(" (ViT model)"),$wr=l(),QC=a("li"),rCe=a("strong"),kwr=o("vit_mae"),Swr=o(" \u2014 "),yY=a("a"),Rwr=o("TFViTMAEModel"),Pwr=o(" (ViTMAE model)"),Bwr=l(),HC=a("li"),tCe=a("strong"),Iwr=o("wav2vec2"),Nwr=o(" \u2014 "),xY=a("a"),qwr=o("TFWav2Vec2Model"),jwr=o(" (Wav2Vec2 model)"),Dwr=l(),UC=a("li"),aCe=a("strong"),Gwr=o("xlm"),Owr=o(" \u2014 "),$Y=a("a"),Vwr=o("TFXLMModel"),Xwr=o(" (XLM model)"),zwr=l(),JC=a("li"),nCe=a("strong"),Wwr=o("xlm-roberta"),Qwr=o(" \u2014 "),kY=a("a"),Hwr=o("TFXLMRobertaModel"),Uwr=o(" (XLM-RoBERTa model)"),Jwr=l(),YC=a("li"),sCe=a("strong"),Ywr=o("xlnet"),Kwr=o(" \u2014 "),SY=a("a"),Zwr=o("TFXLNetModel"),e6r=o(" (XLNet model)"),o6r=l(),F(KC.$$.fragment),WQe=l(),Fc=a("h2"),ZC=a("a"),lCe=a("span"),F(Ox.$$.fragment),r6r=l(),iCe=a("span"),t6r=o("TFAutoModelForPreTraining"),QQe=l(),nr=a("div"),F(Vx.$$.fragment),a6r=l(),Tc=a("p"),n6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RY=a("a"),s6r=o("from_pretrained()"),l6r=o(" class method or the "),PY=a("a"),i6r=o("from_config()"),d6r=o(` class
method.`),c6r=l(),Xx=a("p"),m6r=o("This class cannot be instantiated directly using "),dCe=a("code"),f6r=o("__init__()"),g6r=o(" (throws an error)."),h6r=l(),Nt=a("div"),F(zx.$$.fragment),u6r=l(),cCe=a("p"),p6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_6r=l(),Mc=a("p"),b6r=o(`Note:
Loading a model from its configuration file does `),mCe=a("strong"),v6r=o("not"),F6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),T6r=o("from_pretrained()"),M6r=o(" to load the model weights."),E6r=l(),F(e5.$$.fragment),C6r=l(),Rr=a("div"),F(Wx.$$.fragment),w6r=l(),fCe=a("p"),A6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),L6r=l(),hn=a("p"),y6r=o("The model class to instantiate is selected based on the "),gCe=a("code"),x6r=o("model_type"),$6r=o(` property of the config object (either
passed as an argument or loaded from `),hCe=a("code"),k6r=o("pretrained_model_name_or_path"),S6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=a("code"),R6r=o("pretrained_model_name_or_path"),P6r=o(":"),B6r=l(),se=a("ul"),o5=a("li"),pCe=a("strong"),I6r=o("albert"),N6r=o(" \u2014 "),IY=a("a"),q6r=o("TFAlbertForPreTraining"),j6r=o(" (ALBERT model)"),D6r=l(),r5=a("li"),_Ce=a("strong"),G6r=o("bart"),O6r=o(" \u2014 "),NY=a("a"),V6r=o("TFBartForConditionalGeneration"),X6r=o(" (BART model)"),z6r=l(),t5=a("li"),bCe=a("strong"),W6r=o("bert"),Q6r=o(" \u2014 "),qY=a("a"),H6r=o("TFBertForPreTraining"),U6r=o(" (BERT model)"),J6r=l(),a5=a("li"),vCe=a("strong"),Y6r=o("camembert"),K6r=o(" \u2014 "),jY=a("a"),Z6r=o("TFCamembertForMaskedLM"),eAr=o(" (CamemBERT model)"),oAr=l(),n5=a("li"),FCe=a("strong"),rAr=o("ctrl"),tAr=o(" \u2014 "),DY=a("a"),aAr=o("TFCTRLLMHeadModel"),nAr=o(" (CTRL model)"),sAr=l(),s5=a("li"),TCe=a("strong"),lAr=o("distilbert"),iAr=o(" \u2014 "),GY=a("a"),dAr=o("TFDistilBertForMaskedLM"),cAr=o(" (DistilBERT model)"),mAr=l(),l5=a("li"),MCe=a("strong"),fAr=o("electra"),gAr=o(" \u2014 "),OY=a("a"),hAr=o("TFElectraForPreTraining"),uAr=o(" (ELECTRA model)"),pAr=l(),i5=a("li"),ECe=a("strong"),_Ar=o("flaubert"),bAr=o(" \u2014 "),VY=a("a"),vAr=o("TFFlaubertWithLMHeadModel"),FAr=o(" (FlauBERT model)"),TAr=l(),d5=a("li"),CCe=a("strong"),MAr=o("funnel"),EAr=o(" \u2014 "),XY=a("a"),CAr=o("TFFunnelForPreTraining"),wAr=o(" (Funnel Transformer model)"),AAr=l(),c5=a("li"),wCe=a("strong"),LAr=o("gpt2"),yAr=o(" \u2014 "),zY=a("a"),xAr=o("TFGPT2LMHeadModel"),$Ar=o(" (OpenAI GPT-2 model)"),kAr=l(),m5=a("li"),ACe=a("strong"),SAr=o("layoutlm"),RAr=o(" \u2014 "),WY=a("a"),PAr=o("TFLayoutLMForMaskedLM"),BAr=o(" (LayoutLM model)"),IAr=l(),f5=a("li"),LCe=a("strong"),NAr=o("lxmert"),qAr=o(" \u2014 "),QY=a("a"),jAr=o("TFLxmertForPreTraining"),DAr=o(" (LXMERT model)"),GAr=l(),g5=a("li"),yCe=a("strong"),OAr=o("mobilebert"),VAr=o(" \u2014 "),HY=a("a"),XAr=o("TFMobileBertForPreTraining"),zAr=o(" (MobileBERT model)"),WAr=l(),h5=a("li"),xCe=a("strong"),QAr=o("mpnet"),HAr=o(" \u2014 "),UY=a("a"),UAr=o("TFMPNetForMaskedLM"),JAr=o(" (MPNet model)"),YAr=l(),u5=a("li"),$Ce=a("strong"),KAr=o("openai-gpt"),ZAr=o(" \u2014 "),JY=a("a"),e7r=o("TFOpenAIGPTLMHeadModel"),o7r=o(" (OpenAI GPT model)"),r7r=l(),p5=a("li"),kCe=a("strong"),t7r=o("roberta"),a7r=o(" \u2014 "),YY=a("a"),n7r=o("TFRobertaForMaskedLM"),s7r=o(" (RoBERTa model)"),l7r=l(),_5=a("li"),SCe=a("strong"),i7r=o("t5"),d7r=o(" \u2014 "),KY=a("a"),c7r=o("TFT5ForConditionalGeneration"),m7r=o(" (T5 model)"),f7r=l(),b5=a("li"),RCe=a("strong"),g7r=o("tapas"),h7r=o(" \u2014 "),ZY=a("a"),u7r=o("TFTapasForMaskedLM"),p7r=o(" (TAPAS model)"),_7r=l(),v5=a("li"),PCe=a("strong"),b7r=o("transfo-xl"),v7r=o(" \u2014 "),eK=a("a"),F7r=o("TFTransfoXLLMHeadModel"),T7r=o(" (Transformer-XL model)"),M7r=l(),F5=a("li"),BCe=a("strong"),E7r=o("vit_mae"),C7r=o(" \u2014 "),oK=a("a"),w7r=o("TFViTMAEForPreTraining"),A7r=o(" (ViTMAE model)"),L7r=l(),T5=a("li"),ICe=a("strong"),y7r=o("xlm"),x7r=o(" \u2014 "),rK=a("a"),$7r=o("TFXLMWithLMHeadModel"),k7r=o(" (XLM model)"),S7r=l(),M5=a("li"),NCe=a("strong"),R7r=o("xlm-roberta"),P7r=o(" \u2014 "),tK=a("a"),B7r=o("TFXLMRobertaForMaskedLM"),I7r=o(" (XLM-RoBERTa model)"),N7r=l(),E5=a("li"),qCe=a("strong"),q7r=o("xlnet"),j7r=o(" \u2014 "),aK=a("a"),D7r=o("TFXLNetLMHeadModel"),G7r=o(" (XLNet model)"),O7r=l(),F(C5.$$.fragment),HQe=l(),Ec=a("h2"),w5=a("a"),jCe=a("span"),F(Qx.$$.fragment),V7r=l(),DCe=a("span"),X7r=o("TFAutoModelForCausalLM"),UQe=l(),sr=a("div"),F(Hx.$$.fragment),z7r=l(),Cc=a("p"),W7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nK=a("a"),Q7r=o("from_pretrained()"),H7r=o(" class method or the "),sK=a("a"),U7r=o("from_config()"),J7r=o(` class
method.`),Y7r=l(),Ux=a("p"),K7r=o("This class cannot be instantiated directly using "),GCe=a("code"),Z7r=o("__init__()"),eLr=o(" (throws an error)."),oLr=l(),qt=a("div"),F(Jx.$$.fragment),rLr=l(),OCe=a("p"),tLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aLr=l(),wc=a("p"),nLr=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),sLr=o("not"),lLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),iLr=o("from_pretrained()"),dLr=o(" to load the model weights."),cLr=l(),F(A5.$$.fragment),mLr=l(),Pr=a("div"),F(Yx.$$.fragment),fLr=l(),XCe=a("p"),gLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hLr=l(),un=a("p"),uLr=o("The model class to instantiate is selected based on the "),zCe=a("code"),pLr=o("model_type"),_Lr=o(` property of the config object (either
passed as an argument or loaded from `),WCe=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(":"),MLr=l(),Me=a("ul"),L5=a("li"),HCe=a("strong"),ELr=o("bert"),CLr=o(" \u2014 "),iK=a("a"),wLr=o("TFBertLMHeadModel"),ALr=o(" (BERT model)"),LLr=l(),y5=a("li"),UCe=a("strong"),yLr=o("camembert"),xLr=o(" \u2014 "),dK=a("a"),$Lr=o("TFCamembertForCausalLM"),kLr=o(" (CamemBERT model)"),SLr=l(),x5=a("li"),JCe=a("strong"),RLr=o("ctrl"),PLr=o(" \u2014 "),cK=a("a"),BLr=o("TFCTRLLMHeadModel"),ILr=o(" (CTRL model)"),NLr=l(),$5=a("li"),YCe=a("strong"),qLr=o("gpt2"),jLr=o(" \u2014 "),mK=a("a"),DLr=o("TFGPT2LMHeadModel"),GLr=o(" (OpenAI GPT-2 model)"),OLr=l(),k5=a("li"),KCe=a("strong"),VLr=o("gptj"),XLr=o(" \u2014 "),fK=a("a"),zLr=o("TFGPTJForCausalLM"),WLr=o(" (GPT-J model)"),QLr=l(),S5=a("li"),ZCe=a("strong"),HLr=o("openai-gpt"),ULr=o(" \u2014 "),gK=a("a"),JLr=o("TFOpenAIGPTLMHeadModel"),YLr=o(" (OpenAI GPT model)"),KLr=l(),R5=a("li"),e5e=a("strong"),ZLr=o("opt"),eyr=o(" \u2014 "),hK=a("a"),oyr=o("TFOPTForCausalLM"),ryr=o(" (OPT model)"),tyr=l(),P5=a("li"),o5e=a("strong"),ayr=o("rembert"),nyr=o(" \u2014 "),uK=a("a"),syr=o("TFRemBertForCausalLM"),lyr=o(" (RemBERT model)"),iyr=l(),B5=a("li"),r5e=a("strong"),dyr=o("roberta"),cyr=o(" \u2014 "),pK=a("a"),myr=o("TFRobertaForCausalLM"),fyr=o(" (RoBERTa model)"),gyr=l(),I5=a("li"),t5e=a("strong"),hyr=o("roformer"),uyr=o(" \u2014 "),_K=a("a"),pyr=o("TFRoFormerForCausalLM"),_yr=o(" (RoFormer model)"),byr=l(),N5=a("li"),a5e=a("strong"),vyr=o("transfo-xl"),Fyr=o(" \u2014 "),bK=a("a"),Tyr=o("TFTransfoXLLMHeadModel"),Myr=o(" (Transformer-XL model)"),Eyr=l(),q5=a("li"),n5e=a("strong"),Cyr=o("xlm"),wyr=o(" \u2014 "),vK=a("a"),Ayr=o("TFXLMWithLMHeadModel"),Lyr=o(" (XLM model)"),yyr=l(),j5=a("li"),s5e=a("strong"),xyr=o("xlnet"),$yr=o(" \u2014 "),FK=a("a"),kyr=o("TFXLNetLMHeadModel"),Syr=o(" (XLNet model)"),Ryr=l(),F(D5.$$.fragment),JQe=l(),Ac=a("h2"),G5=a("a"),l5e=a("span"),F(Kx.$$.fragment),Pyr=l(),i5e=a("span"),Byr=o("TFAutoModelForImageClassification"),YQe=l(),lr=a("div"),F(Zx.$$.fragment),Iyr=l(),Lc=a("p"),Nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TK=a("a"),qyr=o("from_pretrained()"),jyr=o(" class method or the "),MK=a("a"),Dyr=o("from_config()"),Gyr=o(` class
method.`),Oyr=l(),e$=a("p"),Vyr=o("This class cannot be instantiated directly using "),d5e=a("code"),Xyr=o("__init__()"),zyr=o(" (throws an error)."),Wyr=l(),jt=a("div"),F(o$.$$.fragment),Qyr=l(),c5e=a("p"),Hyr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Uyr=l(),yc=a("p"),Jyr=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),Yyr=o("not"),Kyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),Zyr=o("from_pretrained()"),e8r=o(" to load the model weights."),o8r=l(),F(O5.$$.fragment),r8r=l(),Br=a("div"),F(r$.$$.fragment),t8r=l(),f5e=a("p"),a8r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),n8r=l(),pn=a("p"),s8r=o("The model class to instantiate is selected based on the "),g5e=a("code"),l8r=o("model_type"),i8r=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),d8r=o("pretrained_model_name_or_path"),c8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),m8r=o("pretrained_model_name_or_path"),f8r=o(":"),g8r=l(),Ve=a("ul"),V5=a("li"),p5e=a("strong"),h8r=o("convnext"),u8r=o(" \u2014 "),CK=a("a"),p8r=o("TFConvNextForImageClassification"),_8r=o(" (ConvNeXT model)"),b8r=l(),X5=a("li"),_5e=a("strong"),v8r=o("data2vec-vision"),F8r=o(" \u2014 "),wK=a("a"),T8r=o("TFData2VecVisionForImageClassification"),M8r=o(" (Data2VecVision model)"),E8r=l(),nl=a("li"),b5e=a("strong"),C8r=o("deit"),w8r=o(" \u2014 "),AK=a("a"),A8r=o("TFDeiTForImageClassification"),L8r=o(" or "),LK=a("a"),y8r=o("TFDeiTForImageClassificationWithTeacher"),x8r=o(" (DeiT model)"),$8r=l(),z5=a("li"),v5e=a("strong"),k8r=o("regnet"),S8r=o(" \u2014 "),yK=a("a"),R8r=o("TFRegNetForImageClassification"),P8r=o(" (RegNet model)"),B8r=l(),W5=a("li"),F5e=a("strong"),I8r=o("resnet"),N8r=o(" \u2014 "),xK=a("a"),q8r=o("TFResNetForImageClassification"),j8r=o(" (ResNet model)"),D8r=l(),Q5=a("li"),T5e=a("strong"),G8r=o("segformer"),O8r=o(" \u2014 "),$K=a("a"),V8r=o("TFSegformerForImageClassification"),X8r=o(" (SegFormer model)"),z8r=l(),H5=a("li"),M5e=a("strong"),W8r=o("swin"),Q8r=o(" \u2014 "),kK=a("a"),H8r=o("TFSwinForImageClassification"),U8r=o(" (Swin Transformer model)"),J8r=l(),U5=a("li"),E5e=a("strong"),Y8r=o("vit"),K8r=o(" \u2014 "),SK=a("a"),Z8r=o("TFViTForImageClassification"),e9r=o(" (ViT model)"),o9r=l(),F(J5.$$.fragment),KQe=l(),xc=a("h2"),Y5=a("a"),C5e=a("span"),F(t$.$$.fragment),r9r=l(),w5e=a("span"),t9r=o("TFAutoModelForMaskedLM"),ZQe=l(),ir=a("div"),F(a$.$$.fragment),a9r=l(),$c=a("p"),n9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RK=a("a"),s9r=o("from_pretrained()"),l9r=o(" class method or the "),PK=a("a"),i9r=o("from_config()"),d9r=o(` class
method.`),c9r=l(),n$=a("p"),m9r=o("This class cannot be instantiated directly using "),A5e=a("code"),f9r=o("__init__()"),g9r=o(" (throws an error)."),h9r=l(),Dt=a("div"),F(s$.$$.fragment),u9r=l(),L5e=a("p"),p9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_9r=l(),kc=a("p"),b9r=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),v9r=o("not"),F9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),T9r=o("from_pretrained()"),M9r=o(" to load the model weights."),E9r=l(),F(K5.$$.fragment),C9r=l(),Ir=a("div"),F(l$.$$.fragment),w9r=l(),x5e=a("p"),A9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L9r=l(),_n=a("p"),y9r=o("The model class to instantiate is selected based on the "),$5e=a("code"),x9r=o("model_type"),$9r=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),k9r=o("pretrained_model_name_or_path"),S9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),R9r=o("pretrained_model_name_or_path"),P9r=o(":"),B9r=l(),ie=a("ul"),Z5=a("li"),R5e=a("strong"),I9r=o("albert"),N9r=o(" \u2014 "),IK=a("a"),q9r=o("TFAlbertForMaskedLM"),j9r=o(" (ALBERT model)"),D9r=l(),e3=a("li"),P5e=a("strong"),G9r=o("bert"),O9r=o(" \u2014 "),NK=a("a"),V9r=o("TFBertForMaskedLM"),X9r=o(" (BERT model)"),z9r=l(),o3=a("li"),B5e=a("strong"),W9r=o("camembert"),Q9r=o(" \u2014 "),qK=a("a"),H9r=o("TFCamembertForMaskedLM"),U9r=o(" (CamemBERT model)"),J9r=l(),r3=a("li"),I5e=a("strong"),Y9r=o("convbert"),K9r=o(" \u2014 "),jK=a("a"),Z9r=o("TFConvBertForMaskedLM"),exr=o(" (ConvBERT model)"),oxr=l(),t3=a("li"),N5e=a("strong"),rxr=o("deberta"),txr=o(" \u2014 "),DK=a("a"),axr=o("TFDebertaForMaskedLM"),nxr=o(" (DeBERTa model)"),sxr=l(),a3=a("li"),q5e=a("strong"),lxr=o("deberta-v2"),ixr=o(" \u2014 "),GK=a("a"),dxr=o("TFDebertaV2ForMaskedLM"),cxr=o(" (DeBERTa-v2 model)"),mxr=l(),n3=a("li"),j5e=a("strong"),fxr=o("distilbert"),gxr=o(" \u2014 "),OK=a("a"),hxr=o("TFDistilBertForMaskedLM"),uxr=o(" (DistilBERT model)"),pxr=l(),s3=a("li"),D5e=a("strong"),_xr=o("electra"),bxr=o(" \u2014 "),VK=a("a"),vxr=o("TFElectraForMaskedLM"),Fxr=o(" (ELECTRA model)"),Txr=l(),l3=a("li"),G5e=a("strong"),Mxr=o("flaubert"),Exr=o(" \u2014 "),XK=a("a"),Cxr=o("TFFlaubertWithLMHeadModel"),wxr=o(" (FlauBERT model)"),Axr=l(),i3=a("li"),O5e=a("strong"),Lxr=o("funnel"),yxr=o(" \u2014 "),zK=a("a"),xxr=o("TFFunnelForMaskedLM"),$xr=o(" (Funnel Transformer model)"),kxr=l(),d3=a("li"),V5e=a("strong"),Sxr=o("layoutlm"),Rxr=o(" \u2014 "),WK=a("a"),Pxr=o("TFLayoutLMForMaskedLM"),Bxr=o(" (LayoutLM model)"),Ixr=l(),c3=a("li"),X5e=a("strong"),Nxr=o("longformer"),qxr=o(" \u2014 "),QK=a("a"),jxr=o("TFLongformerForMaskedLM"),Dxr=o(" (Longformer model)"),Gxr=l(),m3=a("li"),z5e=a("strong"),Oxr=o("mobilebert"),Vxr=o(" \u2014 "),HK=a("a"),Xxr=o("TFMobileBertForMaskedLM"),zxr=o(" (MobileBERT model)"),Wxr=l(),f3=a("li"),W5e=a("strong"),Qxr=o("mpnet"),Hxr=o(" \u2014 "),UK=a("a"),Uxr=o("TFMPNetForMaskedLM"),Jxr=o(" (MPNet model)"),Yxr=l(),g3=a("li"),Q5e=a("strong"),Kxr=o("rembert"),Zxr=o(" \u2014 "),JK=a("a"),e$r=o("TFRemBertForMaskedLM"),o$r=o(" (RemBERT model)"),r$r=l(),h3=a("li"),H5e=a("strong"),t$r=o("roberta"),a$r=o(" \u2014 "),YK=a("a"),n$r=o("TFRobertaForMaskedLM"),s$r=o(" (RoBERTa model)"),l$r=l(),u3=a("li"),U5e=a("strong"),i$r=o("roformer"),d$r=o(" \u2014 "),KK=a("a"),c$r=o("TFRoFormerForMaskedLM"),m$r=o(" (RoFormer model)"),f$r=l(),p3=a("li"),J5e=a("strong"),g$r=o("tapas"),h$r=o(" \u2014 "),ZK=a("a"),u$r=o("TFTapasForMaskedLM"),p$r=o(" (TAPAS model)"),_$r=l(),_3=a("li"),Y5e=a("strong"),b$r=o("xlm"),v$r=o(" \u2014 "),eZ=a("a"),F$r=o("TFXLMWithLMHeadModel"),T$r=o(" (XLM model)"),M$r=l(),b3=a("li"),K5e=a("strong"),E$r=o("xlm-roberta"),C$r=o(" \u2014 "),oZ=a("a"),w$r=o("TFXLMRobertaForMaskedLM"),A$r=o(" (XLM-RoBERTa model)"),L$r=l(),F(v3.$$.fragment),eHe=l(),Sc=a("h2"),F3=a("a"),Z5e=a("span"),F(i$.$$.fragment),y$r=l(),e3e=a("span"),x$r=o("TFAutoModelForSeq2SeqLM"),oHe=l(),dr=a("div"),F(d$.$$.fragment),$$r=l(),Rc=a("p"),k$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rZ=a("a"),S$r=o("from_pretrained()"),R$r=o(" class method or the "),tZ=a("a"),P$r=o("from_config()"),B$r=o(` class
method.`),I$r=l(),c$=a("p"),N$r=o("This class cannot be instantiated directly using "),o3e=a("code"),q$r=o("__init__()"),j$r=o(" (throws an error)."),D$r=l(),Gt=a("div"),F(m$.$$.fragment),G$r=l(),r3e=a("p"),O$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),V$r=l(),Pc=a("p"),X$r=o(`Note:
Loading a model from its configuration file does `),t3e=a("strong"),z$r=o("not"),W$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),Q$r=o("from_pretrained()"),H$r=o(" to load the model weights."),U$r=l(),F(T3.$$.fragment),J$r=l(),Nr=a("div"),F(f$.$$.fragment),Y$r=l(),a3e=a("p"),K$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Z$r=l(),bn=a("p"),ekr=o("The model class to instantiate is selected based on the "),n3e=a("code"),okr=o("model_type"),rkr=o(` property of the config object (either
passed as an argument or loaded from `),s3e=a("code"),tkr=o("pretrained_model_name_or_path"),akr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=a("code"),nkr=o("pretrained_model_name_or_path"),skr=o(":"),lkr=l(),ye=a("ul"),M3=a("li"),i3e=a("strong"),ikr=o("bart"),dkr=o(" \u2014 "),nZ=a("a"),ckr=o("TFBartForConditionalGeneration"),mkr=o(" (BART model)"),fkr=l(),E3=a("li"),d3e=a("strong"),gkr=o("blenderbot"),hkr=o(" \u2014 "),sZ=a("a"),ukr=o("TFBlenderbotForConditionalGeneration"),pkr=o(" (Blenderbot model)"),_kr=l(),C3=a("li"),c3e=a("strong"),bkr=o("blenderbot-small"),vkr=o(" \u2014 "),lZ=a("a"),Fkr=o("TFBlenderbotSmallForConditionalGeneration"),Tkr=o(" (BlenderbotSmall model)"),Mkr=l(),w3=a("li"),m3e=a("strong"),Ekr=o("encoder-decoder"),Ckr=o(" \u2014 "),iZ=a("a"),wkr=o("TFEncoderDecoderModel"),Akr=o(" (Encoder decoder model)"),Lkr=l(),A3=a("li"),f3e=a("strong"),ykr=o("led"),xkr=o(" \u2014 "),dZ=a("a"),$kr=o("TFLEDForConditionalGeneration"),kkr=o(" (LED model)"),Skr=l(),L3=a("li"),g3e=a("strong"),Rkr=o("marian"),Pkr=o(" \u2014 "),cZ=a("a"),Bkr=o("TFMarianMTModel"),Ikr=o(" (Marian model)"),Nkr=l(),y3=a("li"),h3e=a("strong"),qkr=o("mbart"),jkr=o(" \u2014 "),mZ=a("a"),Dkr=o("TFMBartForConditionalGeneration"),Gkr=o(" (mBART model)"),Okr=l(),x3=a("li"),u3e=a("strong"),Vkr=o("mt5"),Xkr=o(" \u2014 "),fZ=a("a"),zkr=o("TFMT5ForConditionalGeneration"),Wkr=o(" (MT5 model)"),Qkr=l(),$3=a("li"),p3e=a("strong"),Hkr=o("pegasus"),Ukr=o(" \u2014 "),gZ=a("a"),Jkr=o("TFPegasusForConditionalGeneration"),Ykr=o(" (Pegasus model)"),Kkr=l(),k3=a("li"),_3e=a("strong"),Zkr=o("t5"),eSr=o(" \u2014 "),hZ=a("a"),oSr=o("TFT5ForConditionalGeneration"),rSr=o(" (T5 model)"),tSr=l(),F(S3.$$.fragment),rHe=l(),Bc=a("h2"),R3=a("a"),b3e=a("span"),F(g$.$$.fragment),aSr=l(),v3e=a("span"),nSr=o("TFAutoModelForSequenceClassification"),tHe=l(),cr=a("div"),F(h$.$$.fragment),sSr=l(),Ic=a("p"),lSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uZ=a("a"),iSr=o("from_pretrained()"),dSr=o(" class method or the "),pZ=a("a"),cSr=o("from_config()"),mSr=o(` class
method.`),fSr=l(),u$=a("p"),gSr=o("This class cannot be instantiated directly using "),F3e=a("code"),hSr=o("__init__()"),uSr=o(" (throws an error)."),pSr=l(),Ot=a("div"),F(p$.$$.fragment),_Sr=l(),T3e=a("p"),bSr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vSr=l(),Nc=a("p"),FSr=o(`Note:
Loading a model from its configuration file does `),M3e=a("strong"),TSr=o("not"),MSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),ESr=o("from_pretrained()"),CSr=o(" to load the model weights."),wSr=l(),F(P3.$$.fragment),ASr=l(),qr=a("div"),F(_$.$$.fragment),LSr=l(),E3e=a("p"),ySr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xSr=l(),vn=a("p"),$Sr=o("The model class to instantiate is selected based on the "),C3e=a("code"),kSr=o("model_type"),SSr=o(` property of the config object (either
passed as an argument or loaded from `),w3e=a("code"),RSr=o("pretrained_model_name_or_path"),PSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=a("code"),BSr=o("pretrained_model_name_or_path"),ISr=o(":"),NSr=l(),te=a("ul"),B3=a("li"),L3e=a("strong"),qSr=o("albert"),jSr=o(" \u2014 "),bZ=a("a"),DSr=o("TFAlbertForSequenceClassification"),GSr=o(" (ALBERT model)"),OSr=l(),I3=a("li"),y3e=a("strong"),VSr=o("bert"),XSr=o(" \u2014 "),vZ=a("a"),zSr=o("TFBertForSequenceClassification"),WSr=o(" (BERT model)"),QSr=l(),N3=a("li"),x3e=a("strong"),HSr=o("camembert"),USr=o(" \u2014 "),FZ=a("a"),JSr=o("TFCamembertForSequenceClassification"),YSr=o(" (CamemBERT model)"),KSr=l(),q3=a("li"),$3e=a("strong"),ZSr=o("convbert"),eRr=o(" \u2014 "),TZ=a("a"),oRr=o("TFConvBertForSequenceClassification"),rRr=o(" (ConvBERT model)"),tRr=l(),j3=a("li"),k3e=a("strong"),aRr=o("ctrl"),nRr=o(" \u2014 "),MZ=a("a"),sRr=o("TFCTRLForSequenceClassification"),lRr=o(" (CTRL model)"),iRr=l(),D3=a("li"),S3e=a("strong"),dRr=o("deberta"),cRr=o(" \u2014 "),EZ=a("a"),mRr=o("TFDebertaForSequenceClassification"),fRr=o(" (DeBERTa model)"),gRr=l(),G3=a("li"),R3e=a("strong"),hRr=o("deberta-v2"),uRr=o(" \u2014 "),CZ=a("a"),pRr=o("TFDebertaV2ForSequenceClassification"),_Rr=o(" (DeBERTa-v2 model)"),bRr=l(),O3=a("li"),P3e=a("strong"),vRr=o("distilbert"),FRr=o(" \u2014 "),wZ=a("a"),TRr=o("TFDistilBertForSequenceClassification"),MRr=o(" (DistilBERT model)"),ERr=l(),V3=a("li"),B3e=a("strong"),CRr=o("electra"),wRr=o(" \u2014 "),AZ=a("a"),ARr=o("TFElectraForSequenceClassification"),LRr=o(" (ELECTRA model)"),yRr=l(),X3=a("li"),I3e=a("strong"),xRr=o("flaubert"),$Rr=o(" \u2014 "),LZ=a("a"),kRr=o("TFFlaubertForSequenceClassification"),SRr=o(" (FlauBERT model)"),RRr=l(),z3=a("li"),N3e=a("strong"),PRr=o("funnel"),BRr=o(" \u2014 "),yZ=a("a"),IRr=o("TFFunnelForSequenceClassification"),NRr=o(" (Funnel Transformer model)"),qRr=l(),W3=a("li"),q3e=a("strong"),jRr=o("gpt2"),DRr=o(" \u2014 "),xZ=a("a"),GRr=o("TFGPT2ForSequenceClassification"),ORr=o(" (OpenAI GPT-2 model)"),VRr=l(),Q3=a("li"),j3e=a("strong"),XRr=o("gptj"),zRr=o(" \u2014 "),$Z=a("a"),WRr=o("TFGPTJForSequenceClassification"),QRr=o(" (GPT-J model)"),HRr=l(),H3=a("li"),D3e=a("strong"),URr=o("layoutlm"),JRr=o(" \u2014 "),kZ=a("a"),YRr=o("TFLayoutLMForSequenceClassification"),KRr=o(" (LayoutLM model)"),ZRr=l(),U3=a("li"),G3e=a("strong"),ePr=o("longformer"),oPr=o(" \u2014 "),SZ=a("a"),rPr=o("TFLongformerForSequenceClassification"),tPr=o(" (Longformer model)"),aPr=l(),J3=a("li"),O3e=a("strong"),nPr=o("mobilebert"),sPr=o(" \u2014 "),RZ=a("a"),lPr=o("TFMobileBertForSequenceClassification"),iPr=o(" (MobileBERT model)"),dPr=l(),Y3=a("li"),V3e=a("strong"),cPr=o("mpnet"),mPr=o(" \u2014 "),PZ=a("a"),fPr=o("TFMPNetForSequenceClassification"),gPr=o(" (MPNet model)"),hPr=l(),K3=a("li"),X3e=a("strong"),uPr=o("openai-gpt"),pPr=o(" \u2014 "),BZ=a("a"),_Pr=o("TFOpenAIGPTForSequenceClassification"),bPr=o(" (OpenAI GPT model)"),vPr=l(),Z3=a("li"),z3e=a("strong"),FPr=o("rembert"),TPr=o(" \u2014 "),IZ=a("a"),MPr=o("TFRemBertForSequenceClassification"),EPr=o(" (RemBERT model)"),CPr=l(),e0=a("li"),W3e=a("strong"),wPr=o("roberta"),APr=o(" \u2014 "),NZ=a("a"),LPr=o("TFRobertaForSequenceClassification"),yPr=o(" (RoBERTa model)"),xPr=l(),o0=a("li"),Q3e=a("strong"),$Pr=o("roformer"),kPr=o(" \u2014 "),qZ=a("a"),SPr=o("TFRoFormerForSequenceClassification"),RPr=o(" (RoFormer model)"),PPr=l(),r0=a("li"),H3e=a("strong"),BPr=o("tapas"),IPr=o(" \u2014 "),jZ=a("a"),NPr=o("TFTapasForSequenceClassification"),qPr=o(" (TAPAS model)"),jPr=l(),t0=a("li"),U3e=a("strong"),DPr=o("transfo-xl"),GPr=o(" \u2014 "),DZ=a("a"),OPr=o("TFTransfoXLForSequenceClassification"),VPr=o(" (Transformer-XL model)"),XPr=l(),a0=a("li"),J3e=a("strong"),zPr=o("xlm"),WPr=o(" \u2014 "),GZ=a("a"),QPr=o("TFXLMForSequenceClassification"),HPr=o(" (XLM model)"),UPr=l(),n0=a("li"),Y3e=a("strong"),JPr=o("xlm-roberta"),YPr=o(" \u2014 "),OZ=a("a"),KPr=o("TFXLMRobertaForSequenceClassification"),ZPr=o(" (XLM-RoBERTa model)"),eBr=l(),s0=a("li"),K3e=a("strong"),oBr=o("xlnet"),rBr=o(" \u2014 "),VZ=a("a"),tBr=o("TFXLNetForSequenceClassification"),aBr=o(" (XLNet model)"),nBr=l(),F(l0.$$.fragment),aHe=l(),qc=a("h2"),i0=a("a"),Z3e=a("span"),F(b$.$$.fragment),sBr=l(),e0e=a("span"),lBr=o("TFAutoModelForMultipleChoice"),nHe=l(),mr=a("div"),F(v$.$$.fragment),iBr=l(),jc=a("p"),dBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XZ=a("a"),cBr=o("from_pretrained()"),mBr=o(" class method or the "),zZ=a("a"),fBr=o("from_config()"),gBr=o(` class
method.`),hBr=l(),F$=a("p"),uBr=o("This class cannot be instantiated directly using "),o0e=a("code"),pBr=o("__init__()"),_Br=o(" (throws an error)."),bBr=l(),Vt=a("div"),F(T$.$$.fragment),vBr=l(),r0e=a("p"),FBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TBr=l(),Dc=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),t0e=a("strong"),EBr=o("not"),CBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),wBr=o("from_pretrained()"),ABr=o(" to load the model weights."),LBr=l(),F(d0.$$.fragment),yBr=l(),jr=a("div"),F(M$.$$.fragment),xBr=l(),a0e=a("p"),$Br=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kBr=l(),Fn=a("p"),SBr=o("The model class to instantiate is selected based on the "),n0e=a("code"),RBr=o("model_type"),PBr=o(` property of the config object (either
passed as an argument or loaded from `),s0e=a("code"),BBr=o("pretrained_model_name_or_path"),IBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=a("code"),NBr=o("pretrained_model_name_or_path"),qBr=o(":"),jBr=l(),ve=a("ul"),c0=a("li"),i0e=a("strong"),DBr=o("albert"),GBr=o(" \u2014 "),QZ=a("a"),OBr=o("TFAlbertForMultipleChoice"),VBr=o(" (ALBERT model)"),XBr=l(),m0=a("li"),d0e=a("strong"),zBr=o("bert"),WBr=o(" \u2014 "),HZ=a("a"),QBr=o("TFBertForMultipleChoice"),HBr=o(" (BERT model)"),UBr=l(),f0=a("li"),c0e=a("strong"),JBr=o("camembert"),YBr=o(" \u2014 "),UZ=a("a"),KBr=o("TFCamembertForMultipleChoice"),ZBr=o(" (CamemBERT model)"),eIr=l(),g0=a("li"),m0e=a("strong"),oIr=o("convbert"),rIr=o(" \u2014 "),JZ=a("a"),tIr=o("TFConvBertForMultipleChoice"),aIr=o(" (ConvBERT model)"),nIr=l(),h0=a("li"),f0e=a("strong"),sIr=o("distilbert"),lIr=o(" \u2014 "),YZ=a("a"),iIr=o("TFDistilBertForMultipleChoice"),dIr=o(" (DistilBERT model)"),cIr=l(),u0=a("li"),g0e=a("strong"),mIr=o("electra"),fIr=o(" \u2014 "),KZ=a("a"),gIr=o("TFElectraForMultipleChoice"),hIr=o(" (ELECTRA model)"),uIr=l(),p0=a("li"),h0e=a("strong"),pIr=o("flaubert"),_Ir=o(" \u2014 "),ZZ=a("a"),bIr=o("TFFlaubertForMultipleChoice"),vIr=o(" (FlauBERT model)"),FIr=l(),_0=a("li"),u0e=a("strong"),TIr=o("funnel"),MIr=o(" \u2014 "),eee=a("a"),EIr=o("TFFunnelForMultipleChoice"),CIr=o(" (Funnel Transformer model)"),wIr=l(),b0=a("li"),p0e=a("strong"),AIr=o("longformer"),LIr=o(" \u2014 "),oee=a("a"),yIr=o("TFLongformerForMultipleChoice"),xIr=o(" (Longformer model)"),$Ir=l(),v0=a("li"),_0e=a("strong"),kIr=o("mobilebert"),SIr=o(" \u2014 "),ree=a("a"),RIr=o("TFMobileBertForMultipleChoice"),PIr=o(" (MobileBERT model)"),BIr=l(),F0=a("li"),b0e=a("strong"),IIr=o("mpnet"),NIr=o(" \u2014 "),tee=a("a"),qIr=o("TFMPNetForMultipleChoice"),jIr=o(" (MPNet model)"),DIr=l(),T0=a("li"),v0e=a("strong"),GIr=o("rembert"),OIr=o(" \u2014 "),aee=a("a"),VIr=o("TFRemBertForMultipleChoice"),XIr=o(" (RemBERT model)"),zIr=l(),M0=a("li"),F0e=a("strong"),WIr=o("roberta"),QIr=o(" \u2014 "),nee=a("a"),HIr=o("TFRobertaForMultipleChoice"),UIr=o(" (RoBERTa model)"),JIr=l(),E0=a("li"),T0e=a("strong"),YIr=o("roformer"),KIr=o(" \u2014 "),see=a("a"),ZIr=o("TFRoFormerForMultipleChoice"),eNr=o(" (RoFormer model)"),oNr=l(),C0=a("li"),M0e=a("strong"),rNr=o("xlm"),tNr=o(" \u2014 "),lee=a("a"),aNr=o("TFXLMForMultipleChoice"),nNr=o(" (XLM model)"),sNr=l(),w0=a("li"),E0e=a("strong"),lNr=o("xlm-roberta"),iNr=o(" \u2014 "),iee=a("a"),dNr=o("TFXLMRobertaForMultipleChoice"),cNr=o(" (XLM-RoBERTa model)"),mNr=l(),A0=a("li"),C0e=a("strong"),fNr=o("xlnet"),gNr=o(" \u2014 "),dee=a("a"),hNr=o("TFXLNetForMultipleChoice"),uNr=o(" (XLNet model)"),pNr=l(),F(L0.$$.fragment),sHe=l(),Gc=a("h2"),y0=a("a"),w0e=a("span"),F(E$.$$.fragment),_Nr=l(),A0e=a("span"),bNr=o("TFAutoModelForNextSentencePrediction"),lHe=l(),fr=a("div"),F(C$.$$.fragment),vNr=l(),Oc=a("p"),FNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cee=a("a"),TNr=o("from_pretrained()"),MNr=o(" class method or the "),mee=a("a"),ENr=o("from_config()"),CNr=o(` class
method.`),wNr=l(),w$=a("p"),ANr=o("This class cannot be instantiated directly using "),L0e=a("code"),LNr=o("__init__()"),yNr=o(" (throws an error)."),xNr=l(),Xt=a("div"),F(A$.$$.fragment),$Nr=l(),y0e=a("p"),kNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SNr=l(),Vc=a("p"),RNr=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),PNr=o("not"),BNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=a("a"),INr=o("from_pretrained()"),NNr=o(" to load the model weights."),qNr=l(),F(x0.$$.fragment),jNr=l(),Dr=a("div"),F(L$.$$.fragment),DNr=l(),$0e=a("p"),GNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ONr=l(),Tn=a("p"),VNr=o("The model class to instantiate is selected based on the "),k0e=a("code"),XNr=o("model_type"),zNr=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),WNr=o("pretrained_model_name_or_path"),QNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=a("code"),HNr=o("pretrained_model_name_or_path"),UNr=o(":"),JNr=l(),y$=a("ul"),$0=a("li"),P0e=a("strong"),YNr=o("bert"),KNr=o(" \u2014 "),gee=a("a"),ZNr=o("TFBertForNextSentencePrediction"),eqr=o(" (BERT model)"),oqr=l(),k0=a("li"),B0e=a("strong"),rqr=o("mobilebert"),tqr=o(" \u2014 "),hee=a("a"),aqr=o("TFMobileBertForNextSentencePrediction"),nqr=o(" (MobileBERT model)"),sqr=l(),F(S0.$$.fragment),iHe=l(),Xc=a("h2"),R0=a("a"),I0e=a("span"),F(x$.$$.fragment),lqr=l(),N0e=a("span"),iqr=o("TFAutoModelForTableQuestionAnswering"),dHe=l(),gr=a("div"),F($$.$$.fragment),dqr=l(),zc=a("p"),cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uee=a("a"),mqr=o("from_pretrained()"),fqr=o(" class method or the "),pee=a("a"),gqr=o("from_config()"),hqr=o(` class
method.`),uqr=l(),k$=a("p"),pqr=o("This class cannot be instantiated directly using "),q0e=a("code"),_qr=o("__init__()"),bqr=o(" (throws an error)."),vqr=l(),zt=a("div"),F(S$.$$.fragment),Fqr=l(),j0e=a("p"),Tqr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Mqr=l(),Wc=a("p"),Eqr=o(`Note:
Loading a model from its configuration file does `),D0e=a("strong"),Cqr=o("not"),wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("a"),Aqr=o("from_pretrained()"),Lqr=o(" to load the model weights."),yqr=l(),F(P0.$$.fragment),xqr=l(),Gr=a("div"),F(R$.$$.fragment),$qr=l(),G0e=a("p"),kqr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Sqr=l(),Mn=a("p"),Rqr=o("The model class to instantiate is selected based on the "),O0e=a("code"),Pqr=o("model_type"),Bqr=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),Iqr=o("pretrained_model_name_or_path"),Nqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=a("code"),qqr=o("pretrained_model_name_or_path"),jqr=o(":"),Dqr=l(),z0e=a("ul"),B0=a("li"),W0e=a("strong"),Gqr=o("tapas"),Oqr=o(" \u2014 "),bee=a("a"),Vqr=o("TFTapasForQuestionAnswering"),Xqr=o(" (TAPAS model)"),zqr=l(),F(I0.$$.fragment),cHe=l(),Qc=a("h2"),N0=a("a"),Q0e=a("span"),F(P$.$$.fragment),Wqr=l(),H0e=a("span"),Qqr=o("TFAutoModelForTokenClassification"),mHe=l(),hr=a("div"),F(B$.$$.fragment),Hqr=l(),Hc=a("p"),Uqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=a("a"),Jqr=o("from_pretrained()"),Yqr=o(" class method or the "),Fee=a("a"),Kqr=o("from_config()"),Zqr=o(` class
method.`),ejr=l(),I$=a("p"),ojr=o("This class cannot be instantiated directly using "),U0e=a("code"),rjr=o("__init__()"),tjr=o(" (throws an error)."),ajr=l(),Wt=a("div"),F(N$.$$.fragment),njr=l(),J0e=a("p"),sjr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ljr=l(),Uc=a("p"),ijr=o(`Note:
Loading a model from its configuration file does `),Y0e=a("strong"),djr=o("not"),cjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=a("a"),mjr=o("from_pretrained()"),fjr=o(" to load the model weights."),gjr=l(),F(q0.$$.fragment),hjr=l(),Or=a("div"),F(q$.$$.fragment),ujr=l(),K0e=a("p"),pjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_jr=l(),En=a("p"),bjr=o("The model class to instantiate is selected based on the "),Z0e=a("code"),vjr=o("model_type"),Fjr=o(` property of the config object (either
passed as an argument or loaded from `),ewe=a("code"),Tjr=o("pretrained_model_name_or_path"),Mjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),owe=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(":"),wjr=l(),de=a("ul"),j0=a("li"),rwe=a("strong"),Ajr=o("albert"),Ljr=o(" \u2014 "),Mee=a("a"),yjr=o("TFAlbertForTokenClassification"),xjr=o(" (ALBERT model)"),$jr=l(),D0=a("li"),twe=a("strong"),kjr=o("bert"),Sjr=o(" \u2014 "),Eee=a("a"),Rjr=o("TFBertForTokenClassification"),Pjr=o(" (BERT model)"),Bjr=l(),G0=a("li"),awe=a("strong"),Ijr=o("camembert"),Njr=o(" \u2014 "),Cee=a("a"),qjr=o("TFCamembertForTokenClassification"),jjr=o(" (CamemBERT model)"),Djr=l(),O0=a("li"),nwe=a("strong"),Gjr=o("convbert"),Ojr=o(" \u2014 "),wee=a("a"),Vjr=o("TFConvBertForTokenClassification"),Xjr=o(" (ConvBERT model)"),zjr=l(),V0=a("li"),swe=a("strong"),Wjr=o("deberta"),Qjr=o(" \u2014 "),Aee=a("a"),Hjr=o("TFDebertaForTokenClassification"),Ujr=o(" (DeBERTa model)"),Jjr=l(),X0=a("li"),lwe=a("strong"),Yjr=o("deberta-v2"),Kjr=o(" \u2014 "),Lee=a("a"),Zjr=o("TFDebertaV2ForTokenClassification"),eDr=o(" (DeBERTa-v2 model)"),oDr=l(),z0=a("li"),iwe=a("strong"),rDr=o("distilbert"),tDr=o(" \u2014 "),yee=a("a"),aDr=o("TFDistilBertForTokenClassification"),nDr=o(" (DistilBERT model)"),sDr=l(),W0=a("li"),dwe=a("strong"),lDr=o("electra"),iDr=o(" \u2014 "),xee=a("a"),dDr=o("TFElectraForTokenClassification"),cDr=o(" (ELECTRA model)"),mDr=l(),Q0=a("li"),cwe=a("strong"),fDr=o("flaubert"),gDr=o(" \u2014 "),$ee=a("a"),hDr=o("TFFlaubertForTokenClassification"),uDr=o(" (FlauBERT model)"),pDr=l(),H0=a("li"),mwe=a("strong"),_Dr=o("funnel"),bDr=o(" \u2014 "),kee=a("a"),vDr=o("TFFunnelForTokenClassification"),FDr=o(" (Funnel Transformer model)"),TDr=l(),U0=a("li"),fwe=a("strong"),MDr=o("layoutlm"),EDr=o(" \u2014 "),See=a("a"),CDr=o("TFLayoutLMForTokenClassification"),wDr=o(" (LayoutLM model)"),ADr=l(),J0=a("li"),gwe=a("strong"),LDr=o("longformer"),yDr=o(" \u2014 "),Ree=a("a"),xDr=o("TFLongformerForTokenClassification"),$Dr=o(" (Longformer model)"),kDr=l(),Y0=a("li"),hwe=a("strong"),SDr=o("mobilebert"),RDr=o(" \u2014 "),Pee=a("a"),PDr=o("TFMobileBertForTokenClassification"),BDr=o(" (MobileBERT model)"),IDr=l(),K0=a("li"),uwe=a("strong"),NDr=o("mpnet"),qDr=o(" \u2014 "),Bee=a("a"),jDr=o("TFMPNetForTokenClassification"),DDr=o(" (MPNet model)"),GDr=l(),Z0=a("li"),pwe=a("strong"),ODr=o("rembert"),VDr=o(" \u2014 "),Iee=a("a"),XDr=o("TFRemBertForTokenClassification"),zDr=o(" (RemBERT model)"),WDr=l(),ew=a("li"),_we=a("strong"),QDr=o("roberta"),HDr=o(" \u2014 "),Nee=a("a"),UDr=o("TFRobertaForTokenClassification"),JDr=o(" (RoBERTa model)"),YDr=l(),ow=a("li"),bwe=a("strong"),KDr=o("roformer"),ZDr=o(" \u2014 "),qee=a("a"),eGr=o("TFRoFormerForTokenClassification"),oGr=o(" (RoFormer model)"),rGr=l(),rw=a("li"),vwe=a("strong"),tGr=o("xlm"),aGr=o(" \u2014 "),jee=a("a"),nGr=o("TFXLMForTokenClassification"),sGr=o(" (XLM model)"),lGr=l(),tw=a("li"),Fwe=a("strong"),iGr=o("xlm-roberta"),dGr=o(" \u2014 "),Dee=a("a"),cGr=o("TFXLMRobertaForTokenClassification"),mGr=o(" (XLM-RoBERTa model)"),fGr=l(),aw=a("li"),Twe=a("strong"),gGr=o("xlnet"),hGr=o(" \u2014 "),Gee=a("a"),uGr=o("TFXLNetForTokenClassification"),pGr=o(" (XLNet model)"),_Gr=l(),F(nw.$$.fragment),fHe=l(),Jc=a("h2"),sw=a("a"),Mwe=a("span"),F(j$.$$.fragment),bGr=l(),Ewe=a("span"),vGr=o("TFAutoModelForQuestionAnswering"),gHe=l(),ur=a("div"),F(D$.$$.fragment),FGr=l(),Yc=a("p"),TGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oee=a("a"),MGr=o("from_pretrained()"),EGr=o(" class method or the "),Vee=a("a"),CGr=o("from_config()"),wGr=o(` class
method.`),AGr=l(),G$=a("p"),LGr=o("This class cannot be instantiated directly using "),Cwe=a("code"),yGr=o("__init__()"),xGr=o(" (throws an error)."),$Gr=l(),Qt=a("div"),F(O$.$$.fragment),kGr=l(),wwe=a("p"),SGr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RGr=l(),Kc=a("p"),PGr=o(`Note:
Loading a model from its configuration file does `),Awe=a("strong"),BGr=o("not"),IGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("a"),NGr=o("from_pretrained()"),qGr=o(" to load the model weights."),jGr=l(),F(lw.$$.fragment),DGr=l(),Vr=a("div"),F(V$.$$.fragment),GGr=l(),Lwe=a("p"),OGr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VGr=l(),Cn=a("p"),XGr=o("The model class to instantiate is selected based on the "),ywe=a("code"),zGr=o("model_type"),WGr=o(` property of the config object (either
passed as an argument or loaded from `),xwe=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=a("code"),UGr=o("pretrained_model_name_or_path"),JGr=o(":"),YGr=l(),ce=a("ul"),iw=a("li"),kwe=a("strong"),KGr=o("albert"),ZGr=o(" \u2014 "),zee=a("a"),eOr=o("TFAlbertForQuestionAnswering"),oOr=o(" (ALBERT model)"),rOr=l(),dw=a("li"),Swe=a("strong"),tOr=o("bert"),aOr=o(" \u2014 "),Wee=a("a"),nOr=o("TFBertForQuestionAnswering"),sOr=o(" (BERT model)"),lOr=l(),cw=a("li"),Rwe=a("strong"),iOr=o("camembert"),dOr=o(" \u2014 "),Qee=a("a"),cOr=o("TFCamembertForQuestionAnswering"),mOr=o(" (CamemBERT model)"),fOr=l(),mw=a("li"),Pwe=a("strong"),gOr=o("convbert"),hOr=o(" \u2014 "),Hee=a("a"),uOr=o("TFConvBertForQuestionAnswering"),pOr=o(" (ConvBERT model)"),_Or=l(),fw=a("li"),Bwe=a("strong"),bOr=o("deberta"),vOr=o(" \u2014 "),Uee=a("a"),FOr=o("TFDebertaForQuestionAnswering"),TOr=o(" (DeBERTa model)"),MOr=l(),gw=a("li"),Iwe=a("strong"),EOr=o("deberta-v2"),COr=o(" \u2014 "),Jee=a("a"),wOr=o("TFDebertaV2ForQuestionAnswering"),AOr=o(" (DeBERTa-v2 model)"),LOr=l(),hw=a("li"),Nwe=a("strong"),yOr=o("distilbert"),xOr=o(" \u2014 "),Yee=a("a"),$Or=o("TFDistilBertForQuestionAnswering"),kOr=o(" (DistilBERT model)"),SOr=l(),uw=a("li"),qwe=a("strong"),ROr=o("electra"),POr=o(" \u2014 "),Kee=a("a"),BOr=o("TFElectraForQuestionAnswering"),IOr=o(" (ELECTRA model)"),NOr=l(),pw=a("li"),jwe=a("strong"),qOr=o("flaubert"),jOr=o(" \u2014 "),Zee=a("a"),DOr=o("TFFlaubertForQuestionAnsweringSimple"),GOr=o(" (FlauBERT model)"),OOr=l(),_w=a("li"),Dwe=a("strong"),VOr=o("funnel"),XOr=o(" \u2014 "),eoe=a("a"),zOr=o("TFFunnelForQuestionAnswering"),WOr=o(" (Funnel Transformer model)"),QOr=l(),bw=a("li"),Gwe=a("strong"),HOr=o("gptj"),UOr=o(" \u2014 "),ooe=a("a"),JOr=o("TFGPTJForQuestionAnswering"),YOr=o(" (GPT-J model)"),KOr=l(),vw=a("li"),Owe=a("strong"),ZOr=o("longformer"),eVr=o(" \u2014 "),roe=a("a"),oVr=o("TFLongformerForQuestionAnswering"),rVr=o(" (Longformer model)"),tVr=l(),Fw=a("li"),Vwe=a("strong"),aVr=o("mobilebert"),nVr=o(" \u2014 "),toe=a("a"),sVr=o("TFMobileBertForQuestionAnswering"),lVr=o(" (MobileBERT model)"),iVr=l(),Tw=a("li"),Xwe=a("strong"),dVr=o("mpnet"),cVr=o(" \u2014 "),aoe=a("a"),mVr=o("TFMPNetForQuestionAnswering"),fVr=o(" (MPNet model)"),gVr=l(),Mw=a("li"),zwe=a("strong"),hVr=o("rembert"),uVr=o(" \u2014 "),noe=a("a"),pVr=o("TFRemBertForQuestionAnswering"),_Vr=o(" (RemBERT model)"),bVr=l(),Ew=a("li"),Wwe=a("strong"),vVr=o("roberta"),FVr=o(" \u2014 "),soe=a("a"),TVr=o("TFRobertaForQuestionAnswering"),MVr=o(" (RoBERTa model)"),EVr=l(),Cw=a("li"),Qwe=a("strong"),CVr=o("roformer"),wVr=o(" \u2014 "),loe=a("a"),AVr=o("TFRoFormerForQuestionAnswering"),LVr=o(" (RoFormer model)"),yVr=l(),ww=a("li"),Hwe=a("strong"),xVr=o("xlm"),$Vr=o(" \u2014 "),ioe=a("a"),kVr=o("TFXLMForQuestionAnsweringSimple"),SVr=o(" (XLM model)"),RVr=l(),Aw=a("li"),Uwe=a("strong"),PVr=o("xlm-roberta"),BVr=o(" \u2014 "),doe=a("a"),IVr=o("TFXLMRobertaForQuestionAnswering"),NVr=o(" (XLM-RoBERTa model)"),qVr=l(),Lw=a("li"),Jwe=a("strong"),jVr=o("xlnet"),DVr=o(" \u2014 "),coe=a("a"),GVr=o("TFXLNetForQuestionAnsweringSimple"),OVr=o(" (XLNet model)"),VVr=l(),F(yw.$$.fragment),hHe=l(),Zc=a("h2"),xw=a("a"),Ywe=a("span"),F(X$.$$.fragment),XVr=l(),Kwe=a("span"),zVr=o("TFAutoModelForVision2Seq"),uHe=l(),pr=a("div"),F(z$.$$.fragment),WVr=l(),em=a("p"),QVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),moe=a("a"),HVr=o("from_pretrained()"),UVr=o(" class method or the "),foe=a("a"),JVr=o("from_config()"),YVr=o(` class
method.`),KVr=l(),W$=a("p"),ZVr=o("This class cannot be instantiated directly using "),Zwe=a("code"),eXr=o("__init__()"),oXr=o(" (throws an error)."),rXr=l(),Ht=a("div"),F(Q$.$$.fragment),tXr=l(),e6e=a("p"),aXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nXr=l(),om=a("p"),sXr=o(`Note:
Loading a model from its configuration file does `),o6e=a("strong"),lXr=o("not"),iXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=a("a"),dXr=o("from_pretrained()"),cXr=o(" to load the model weights."),mXr=l(),F($w.$$.fragment),fXr=l(),Xr=a("div"),F(H$.$$.fragment),gXr=l(),r6e=a("p"),hXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uXr=l(),wn=a("p"),pXr=o("The model class to instantiate is selected based on the "),t6e=a("code"),_Xr=o("model_type"),bXr=o(` property of the config object (either
passed as an argument or loaded from `),a6e=a("code"),vXr=o("pretrained_model_name_or_path"),FXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=a("code"),TXr=o("pretrained_model_name_or_path"),MXr=o(":"),EXr=l(),s6e=a("ul"),kw=a("li"),l6e=a("strong"),CXr=o("vision-encoder-decoder"),wXr=o(" \u2014 "),hoe=a("a"),AXr=o("TFVisionEncoderDecoderModel"),LXr=o(" (Vision Encoder decoder model)"),yXr=l(),F(Sw.$$.fragment),pHe=l(),rm=a("h2"),Rw=a("a"),i6e=a("span"),F(U$.$$.fragment),xXr=l(),d6e=a("span"),$Xr=o("TFAutoModelForSpeechSeq2Seq"),_He=l(),_r=a("div"),F(J$.$$.fragment),kXr=l(),tm=a("p"),SXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uoe=a("a"),RXr=o("from_pretrained()"),PXr=o(" class method or the "),poe=a("a"),BXr=o("from_config()"),IXr=o(` class
method.`),NXr=l(),Y$=a("p"),qXr=o("This class cannot be instantiated directly using "),c6e=a("code"),jXr=o("__init__()"),DXr=o(" (throws an error)."),GXr=l(),Ut=a("div"),F(K$.$$.fragment),OXr=l(),m6e=a("p"),VXr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),XXr=l(),am=a("p"),zXr=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),WXr=o("not"),QXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=a("a"),HXr=o("from_pretrained()"),UXr=o(" to load the model weights."),JXr=l(),F(Pw.$$.fragment),YXr=l(),zr=a("div"),F(Z$.$$.fragment),KXr=l(),g6e=a("p"),ZXr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ezr=l(),An=a("p"),ozr=o("The model class to instantiate is selected based on the "),h6e=a("code"),rzr=o("model_type"),tzr=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),azr=o("pretrained_model_name_or_path"),nzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),szr=o("pretrained_model_name_or_path"),lzr=o(":"),izr=l(),_6e=a("ul"),Bw=a("li"),b6e=a("strong"),dzr=o("speech_to_text"),czr=o(" \u2014 "),boe=a("a"),mzr=o("TFSpeech2TextForConditionalGeneration"),fzr=o(" (Speech2Text model)"),gzr=l(),F(Iw.$$.fragment),bHe=l(),nm=a("h2"),Nw=a("a"),v6e=a("span"),F(ek.$$.fragment),hzr=l(),F6e=a("span"),uzr=o("FlaxAutoModel"),vHe=l(),br=a("div"),F(ok.$$.fragment),pzr=l(),sm=a("p"),_zr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),voe=a("a"),bzr=o("from_pretrained()"),vzr=o(" class method or the "),Foe=a("a"),Fzr=o("from_config()"),Tzr=o(` class
method.`),Mzr=l(),rk=a("p"),Ezr=o("This class cannot be instantiated directly using "),T6e=a("code"),Czr=o("__init__()"),wzr=o(" (throws an error)."),Azr=l(),Jt=a("div"),F(tk.$$.fragment),Lzr=l(),M6e=a("p"),yzr=o("Instantiates one of the base model classes of the library from a configuration."),xzr=l(),lm=a("p"),$zr=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),kzr=o("not"),Szr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),Rzr=o("from_pretrained()"),Pzr=o(" to load the model weights."),Bzr=l(),F(qw.$$.fragment),Izr=l(),Wr=a("div"),F(ak.$$.fragment),Nzr=l(),C6e=a("p"),qzr=o("Instantiate one of the base model classes of the library from a pretrained model."),jzr=l(),Ln=a("p"),Dzr=o("The model class to instantiate is selected based on the "),w6e=a("code"),Gzr=o("model_type"),Ozr=o(` property of the config object (either
passed as an argument or loaded from `),A6e=a("code"),Vzr=o("pretrained_model_name_or_path"),Xzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),zzr=o("pretrained_model_name_or_path"),Wzr=o(":"),Qzr=l(),oe=a("ul"),jw=a("li"),y6e=a("strong"),Hzr=o("albert"),Uzr=o(" \u2014 "),Moe=a("a"),Jzr=o("FlaxAlbertModel"),Yzr=o(" (ALBERT model)"),Kzr=l(),Dw=a("li"),x6e=a("strong"),Zzr=o("bart"),eWr=o(" \u2014 "),Eoe=a("a"),oWr=o("FlaxBartModel"),rWr=o(" (BART model)"),tWr=l(),Gw=a("li"),$6e=a("strong"),aWr=o("beit"),nWr=o(" \u2014 "),Coe=a("a"),sWr=o("FlaxBeitModel"),lWr=o(" (BEiT model)"),iWr=l(),Ow=a("li"),k6e=a("strong"),dWr=o("bert"),cWr=o(" \u2014 "),woe=a("a"),mWr=o("FlaxBertModel"),fWr=o(" (BERT model)"),gWr=l(),Vw=a("li"),S6e=a("strong"),hWr=o("big_bird"),uWr=o(" \u2014 "),Aoe=a("a"),pWr=o("FlaxBigBirdModel"),_Wr=o(" (BigBird model)"),bWr=l(),Xw=a("li"),R6e=a("strong"),vWr=o("blenderbot"),FWr=o(" \u2014 "),Loe=a("a"),TWr=o("FlaxBlenderbotModel"),MWr=o(" (Blenderbot model)"),EWr=l(),zw=a("li"),P6e=a("strong"),CWr=o("blenderbot-small"),wWr=o(" \u2014 "),yoe=a("a"),AWr=o("FlaxBlenderbotSmallModel"),LWr=o(" (BlenderbotSmall model)"),yWr=l(),Ww=a("li"),B6e=a("strong"),xWr=o("clip"),$Wr=o(" \u2014 "),xoe=a("a"),kWr=o("FlaxCLIPModel"),SWr=o(" (CLIP model)"),RWr=l(),Qw=a("li"),I6e=a("strong"),PWr=o("distilbert"),BWr=o(" \u2014 "),$oe=a("a"),IWr=o("FlaxDistilBertModel"),NWr=o(" (DistilBERT model)"),qWr=l(),Hw=a("li"),N6e=a("strong"),jWr=o("electra"),DWr=o(" \u2014 "),koe=a("a"),GWr=o("FlaxElectraModel"),OWr=o(" (ELECTRA model)"),VWr=l(),Uw=a("li"),q6e=a("strong"),XWr=o("gpt2"),zWr=o(" \u2014 "),Soe=a("a"),WWr=o("FlaxGPT2Model"),QWr=o(" (OpenAI GPT-2 model)"),HWr=l(),Jw=a("li"),j6e=a("strong"),UWr=o("gpt_neo"),JWr=o(" \u2014 "),Roe=a("a"),YWr=o("FlaxGPTNeoModel"),KWr=o(" (GPT Neo model)"),ZWr=l(),Yw=a("li"),D6e=a("strong"),eQr=o("gptj"),oQr=o(" \u2014 "),Poe=a("a"),rQr=o("FlaxGPTJModel"),tQr=o(" (GPT-J model)"),aQr=l(),Kw=a("li"),G6e=a("strong"),nQr=o("longt5"),sQr=o(" \u2014 "),Boe=a("a"),lQr=o("FlaxLongT5Model"),iQr=o(" (LongT5 model)"),dQr=l(),Zw=a("li"),O6e=a("strong"),cQr=o("marian"),mQr=o(" \u2014 "),Ioe=a("a"),fQr=o("FlaxMarianModel"),gQr=o(" (Marian model)"),hQr=l(),e6=a("li"),V6e=a("strong"),uQr=o("mbart"),pQr=o(" \u2014 "),Noe=a("a"),_Qr=o("FlaxMBartModel"),bQr=o(" (mBART model)"),vQr=l(),o6=a("li"),X6e=a("strong"),FQr=o("mt5"),TQr=o(" \u2014 "),qoe=a("a"),MQr=o("FlaxMT5Model"),EQr=o(" (MT5 model)"),CQr=l(),r6=a("li"),z6e=a("strong"),wQr=o("opt"),AQr=o(" \u2014 "),joe=a("a"),LQr=o("FlaxOPTModel"),yQr=o(" (OPT model)"),xQr=l(),t6=a("li"),W6e=a("strong"),$Qr=o("pegasus"),kQr=o(" \u2014 "),Doe=a("a"),SQr=o("FlaxPegasusModel"),RQr=o(" (Pegasus model)"),PQr=l(),a6=a("li"),Q6e=a("strong"),BQr=o("roberta"),IQr=o(" \u2014 "),Goe=a("a"),NQr=o("FlaxRobertaModel"),qQr=o(" (RoBERTa model)"),jQr=l(),n6=a("li"),H6e=a("strong"),DQr=o("roformer"),GQr=o(" \u2014 "),Ooe=a("a"),OQr=o("FlaxRoFormerModel"),VQr=o(" (RoFormer model)"),XQr=l(),s6=a("li"),U6e=a("strong"),zQr=o("t5"),WQr=o(" \u2014 "),Voe=a("a"),QQr=o("FlaxT5Model"),HQr=o(" (T5 model)"),UQr=l(),l6=a("li"),J6e=a("strong"),JQr=o("vision-text-dual-encoder"),YQr=o(" \u2014 "),Xoe=a("a"),KQr=o("FlaxVisionTextDualEncoderModel"),ZQr=o(" (VisionTextDualEncoder model)"),eHr=l(),i6=a("li"),Y6e=a("strong"),oHr=o("vit"),rHr=o(" \u2014 "),zoe=a("a"),tHr=o("FlaxViTModel"),aHr=o(" (ViT model)"),nHr=l(),d6=a("li"),K6e=a("strong"),sHr=o("wav2vec2"),lHr=o(" \u2014 "),Woe=a("a"),iHr=o("FlaxWav2Vec2Model"),dHr=o(" (Wav2Vec2 model)"),cHr=l(),c6=a("li"),Z6e=a("strong"),mHr=o("xglm"),fHr=o(" \u2014 "),Qoe=a("a"),gHr=o("FlaxXGLMModel"),hHr=o(" (XGLM model)"),uHr=l(),m6=a("li"),eAe=a("strong"),pHr=o("xlm-roberta"),_Hr=o(" \u2014 "),Hoe=a("a"),bHr=o("FlaxXLMRobertaModel"),vHr=o(" (XLM-RoBERTa model)"),FHr=l(),F(f6.$$.fragment),FHe=l(),im=a("h2"),g6=a("a"),oAe=a("span"),F(nk.$$.fragment),THr=l(),rAe=a("span"),MHr=o("FlaxAutoModelForCausalLM"),THe=l(),vr=a("div"),F(sk.$$.fragment),EHr=l(),dm=a("p"),CHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uoe=a("a"),wHr=o("from_pretrained()"),AHr=o(" class method or the "),Joe=a("a"),LHr=o("from_config()"),yHr=o(` class
method.`),xHr=l(),lk=a("p"),$Hr=o("This class cannot be instantiated directly using "),tAe=a("code"),kHr=o("__init__()"),SHr=o(" (throws an error)."),RHr=l(),Yt=a("div"),F(ik.$$.fragment),PHr=l(),aAe=a("p"),BHr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IHr=l(),cm=a("p"),NHr=o(`Note:
Loading a model from its configuration file does `),nAe=a("strong"),qHr=o("not"),jHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=a("a"),DHr=o("from_pretrained()"),GHr=o(" to load the model weights."),OHr=l(),F(h6.$$.fragment),VHr=l(),Qr=a("div"),F(dk.$$.fragment),XHr=l(),sAe=a("p"),zHr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WHr=l(),yn=a("p"),QHr=o("The model class to instantiate is selected based on the "),lAe=a("code"),HHr=o("model_type"),UHr=o(` property of the config object (either
passed as an argument or loaded from `),iAe=a("code"),JHr=o("pretrained_model_name_or_path"),YHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dAe=a("code"),KHr=o("pretrained_model_name_or_path"),ZHr=o(":"),eUr=l(),xe=a("ul"),u6=a("li"),cAe=a("strong"),oUr=o("bart"),rUr=o(" \u2014 "),Koe=a("a"),tUr=o("FlaxBartForCausalLM"),aUr=o(" (BART model)"),nUr=l(),p6=a("li"),mAe=a("strong"),sUr=o("bert"),lUr=o(" \u2014 "),Zoe=a("a"),iUr=o("FlaxBertForCausalLM"),dUr=o(" (BERT model)"),cUr=l(),_6=a("li"),fAe=a("strong"),mUr=o("big_bird"),fUr=o(" \u2014 "),ere=a("a"),gUr=o("FlaxBigBirdForCausalLM"),hUr=o(" (BigBird model)"),uUr=l(),b6=a("li"),gAe=a("strong"),pUr=o("electra"),_Ur=o(" \u2014 "),ore=a("a"),bUr=o("FlaxElectraForCausalLM"),vUr=o(" (ELECTRA model)"),FUr=l(),v6=a("li"),hAe=a("strong"),TUr=o("gpt2"),MUr=o(" \u2014 "),rre=a("a"),EUr=o("FlaxGPT2LMHeadModel"),CUr=o(" (OpenAI GPT-2 model)"),wUr=l(),F6=a("li"),uAe=a("strong"),AUr=o("gpt_neo"),LUr=o(" \u2014 "),tre=a("a"),yUr=o("FlaxGPTNeoForCausalLM"),xUr=o(" (GPT Neo model)"),$Ur=l(),T6=a("li"),pAe=a("strong"),kUr=o("gptj"),SUr=o(" \u2014 "),are=a("a"),RUr=o("FlaxGPTJForCausalLM"),PUr=o(" (GPT-J model)"),BUr=l(),M6=a("li"),_Ae=a("strong"),IUr=o("opt"),NUr=o(" \u2014 "),nre=a("a"),qUr=o("FlaxOPTForCausalLM"),jUr=o(" (OPT model)"),DUr=l(),E6=a("li"),bAe=a("strong"),GUr=o("roberta"),OUr=o(" \u2014 "),sre=a("a"),VUr=o("FlaxRobertaForCausalLM"),XUr=o(" (RoBERTa model)"),zUr=l(),C6=a("li"),vAe=a("strong"),WUr=o("xglm"),QUr=o(" \u2014 "),lre=a("a"),HUr=o("FlaxXGLMForCausalLM"),UUr=o(" (XGLM model)"),JUr=l(),F(w6.$$.fragment),MHe=l(),mm=a("h2"),A6=a("a"),FAe=a("span"),F(ck.$$.fragment),YUr=l(),TAe=a("span"),KUr=o("FlaxAutoModelForPreTraining"),EHe=l(),Fr=a("div"),F(mk.$$.fragment),ZUr=l(),fm=a("p"),eJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ire=a("a"),oJr=o("from_pretrained()"),rJr=o(" class method or the "),dre=a("a"),tJr=o("from_config()"),aJr=o(` class
method.`),nJr=l(),fk=a("p"),sJr=o("This class cannot be instantiated directly using "),MAe=a("code"),lJr=o("__init__()"),iJr=o(" (throws an error)."),dJr=l(),Kt=a("div"),F(gk.$$.fragment),cJr=l(),EAe=a("p"),mJr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fJr=l(),gm=a("p"),gJr=o(`Note:
Loading a model from its configuration file does `),CAe=a("strong"),hJr=o("not"),uJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cre=a("a"),pJr=o("from_pretrained()"),_Jr=o(" to load the model weights."),bJr=l(),F(L6.$$.fragment),vJr=l(),Hr=a("div"),F(hk.$$.fragment),FJr=l(),wAe=a("p"),TJr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MJr=l(),xn=a("p"),EJr=o("The model class to instantiate is selected based on the "),AAe=a("code"),CJr=o("model_type"),wJr=o(` property of the config object (either
passed as an argument or loaded from `),LAe=a("code"),AJr=o("pretrained_model_name_or_path"),LJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yAe=a("code"),yJr=o("pretrained_model_name_or_path"),xJr=o(":"),$Jr=l(),Ee=a("ul"),y6=a("li"),xAe=a("strong"),kJr=o("albert"),SJr=o(" \u2014 "),mre=a("a"),RJr=o("FlaxAlbertForPreTraining"),PJr=o(" (ALBERT model)"),BJr=l(),x6=a("li"),$Ae=a("strong"),IJr=o("bart"),NJr=o(" \u2014 "),fre=a("a"),qJr=o("FlaxBartForConditionalGeneration"),jJr=o(" (BART model)"),DJr=l(),$6=a("li"),kAe=a("strong"),GJr=o("bert"),OJr=o(" \u2014 "),gre=a("a"),VJr=o("FlaxBertForPreTraining"),XJr=o(" (BERT model)"),zJr=l(),k6=a("li"),SAe=a("strong"),WJr=o("big_bird"),QJr=o(" \u2014 "),hre=a("a"),HJr=o("FlaxBigBirdForPreTraining"),UJr=o(" (BigBird model)"),JJr=l(),S6=a("li"),RAe=a("strong"),YJr=o("electra"),KJr=o(" \u2014 "),ure=a("a"),ZJr=o("FlaxElectraForPreTraining"),eYr=o(" (ELECTRA model)"),oYr=l(),R6=a("li"),PAe=a("strong"),rYr=o("longt5"),tYr=o(" \u2014 "),pre=a("a"),aYr=o("FlaxLongT5ForConditionalGeneration"),nYr=o(" (LongT5 model)"),sYr=l(),P6=a("li"),BAe=a("strong"),lYr=o("mbart"),iYr=o(" \u2014 "),_re=a("a"),dYr=o("FlaxMBartForConditionalGeneration"),cYr=o(" (mBART model)"),mYr=l(),B6=a("li"),IAe=a("strong"),fYr=o("mt5"),gYr=o(" \u2014 "),bre=a("a"),hYr=o("FlaxMT5ForConditionalGeneration"),uYr=o(" (MT5 model)"),pYr=l(),I6=a("li"),NAe=a("strong"),_Yr=o("roberta"),bYr=o(" \u2014 "),vre=a("a"),vYr=o("FlaxRobertaForMaskedLM"),FYr=o(" (RoBERTa model)"),TYr=l(),N6=a("li"),qAe=a("strong"),MYr=o("roformer"),EYr=o(" \u2014 "),Fre=a("a"),CYr=o("FlaxRoFormerForMaskedLM"),wYr=o(" (RoFormer model)"),AYr=l(),q6=a("li"),jAe=a("strong"),LYr=o("t5"),yYr=o(" \u2014 "),Tre=a("a"),xYr=o("FlaxT5ForConditionalGeneration"),$Yr=o(" (T5 model)"),kYr=l(),j6=a("li"),DAe=a("strong"),SYr=o("wav2vec2"),RYr=o(" \u2014 "),Mre=a("a"),PYr=o("FlaxWav2Vec2ForPreTraining"),BYr=o(" (Wav2Vec2 model)"),IYr=l(),D6=a("li"),GAe=a("strong"),NYr=o("xlm-roberta"),qYr=o(" \u2014 "),Ere=a("a"),jYr=o("FlaxXLMRobertaForMaskedLM"),DYr=o(" (XLM-RoBERTa model)"),GYr=l(),F(G6.$$.fragment),CHe=l(),hm=a("h2"),O6=a("a"),OAe=a("span"),F(uk.$$.fragment),OYr=l(),VAe=a("span"),VYr=o("FlaxAutoModelForMaskedLM"),wHe=l(),Tr=a("div"),F(pk.$$.fragment),XYr=l(),um=a("p"),zYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cre=a("a"),WYr=o("from_pretrained()"),QYr=o(" class method or the "),wre=a("a"),HYr=o("from_config()"),UYr=o(` class
method.`),JYr=l(),_k=a("p"),YYr=o("This class cannot be instantiated directly using "),XAe=a("code"),KYr=o("__init__()"),ZYr=o(" (throws an error)."),eKr=l(),Zt=a("div"),F(bk.$$.fragment),oKr=l(),zAe=a("p"),rKr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tKr=l(),pm=a("p"),aKr=o(`Note:
Loading a model from its configuration file does `),WAe=a("strong"),nKr=o("not"),sKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),lKr=o("from_pretrained()"),iKr=o(" to load the model weights."),dKr=l(),F(V6.$$.fragment),cKr=l(),Ur=a("div"),F(vk.$$.fragment),mKr=l(),QAe=a("p"),fKr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gKr=l(),$n=a("p"),hKr=o("The model class to instantiate is selected based on the "),HAe=a("code"),uKr=o("model_type"),pKr=o(` property of the config object (either
passed as an argument or loaded from `),UAe=a("code"),_Kr=o("pretrained_model_name_or_path"),bKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=a("code"),vKr=o("pretrained_model_name_or_path"),FKr=o(":"),TKr=l(),$e=a("ul"),X6=a("li"),YAe=a("strong"),MKr=o("albert"),EKr=o(" \u2014 "),Lre=a("a"),CKr=o("FlaxAlbertForMaskedLM"),wKr=o(" (ALBERT model)"),AKr=l(),z6=a("li"),KAe=a("strong"),LKr=o("bart"),yKr=o(" \u2014 "),yre=a("a"),xKr=o("FlaxBartForConditionalGeneration"),$Kr=o(" (BART model)"),kKr=l(),W6=a("li"),ZAe=a("strong"),SKr=o("bert"),RKr=o(" \u2014 "),xre=a("a"),PKr=o("FlaxBertForMaskedLM"),BKr=o(" (BERT model)"),IKr=l(),Q6=a("li"),e7e=a("strong"),NKr=o("big_bird"),qKr=o(" \u2014 "),$re=a("a"),jKr=o("FlaxBigBirdForMaskedLM"),DKr=o(" (BigBird model)"),GKr=l(),H6=a("li"),o7e=a("strong"),OKr=o("distilbert"),VKr=o(" \u2014 "),kre=a("a"),XKr=o("FlaxDistilBertForMaskedLM"),zKr=o(" (DistilBERT model)"),WKr=l(),U6=a("li"),r7e=a("strong"),QKr=o("electra"),HKr=o(" \u2014 "),Sre=a("a"),UKr=o("FlaxElectraForMaskedLM"),JKr=o(" (ELECTRA model)"),YKr=l(),J6=a("li"),t7e=a("strong"),KKr=o("mbart"),ZKr=o(" \u2014 "),Rre=a("a"),eZr=o("FlaxMBartForConditionalGeneration"),oZr=o(" (mBART model)"),rZr=l(),Y6=a("li"),a7e=a("strong"),tZr=o("roberta"),aZr=o(" \u2014 "),Pre=a("a"),nZr=o("FlaxRobertaForMaskedLM"),sZr=o(" (RoBERTa model)"),lZr=l(),K6=a("li"),n7e=a("strong"),iZr=o("roformer"),dZr=o(" \u2014 "),Bre=a("a"),cZr=o("FlaxRoFormerForMaskedLM"),mZr=o(" (RoFormer model)"),fZr=l(),Z6=a("li"),s7e=a("strong"),gZr=o("xlm-roberta"),hZr=o(" \u2014 "),Ire=a("a"),uZr=o("FlaxXLMRobertaForMaskedLM"),pZr=o(" (XLM-RoBERTa model)"),_Zr=l(),F(eA.$$.fragment),AHe=l(),_m=a("h2"),oA=a("a"),l7e=a("span"),F(Fk.$$.fragment),bZr=l(),i7e=a("span"),vZr=o("FlaxAutoModelForSeq2SeqLM"),LHe=l(),Mr=a("div"),F(Tk.$$.fragment),FZr=l(),bm=a("p"),TZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nre=a("a"),MZr=o("from_pretrained()"),EZr=o(" class method or the "),qre=a("a"),CZr=o("from_config()"),wZr=o(` class
method.`),AZr=l(),Mk=a("p"),LZr=o("This class cannot be instantiated directly using "),d7e=a("code"),yZr=o("__init__()"),xZr=o(" (throws an error)."),$Zr=l(),ea=a("div"),F(Ek.$$.fragment),kZr=l(),c7e=a("p"),SZr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RZr=l(),vm=a("p"),PZr=o(`Note:
Loading a model from its configuration file does `),m7e=a("strong"),BZr=o("not"),IZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=a("a"),NZr=o("from_pretrained()"),qZr=o(" to load the model weights."),jZr=l(),F(rA.$$.fragment),DZr=l(),Jr=a("div"),F(Ck.$$.fragment),GZr=l(),f7e=a("p"),OZr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VZr=l(),kn=a("p"),XZr=o("The model class to instantiate is selected based on the "),g7e=a("code"),zZr=o("model_type"),WZr=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),QZr=o("pretrained_model_name_or_path"),HZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),UZr=o("pretrained_model_name_or_path"),JZr=o(":"),YZr=l(),ke=a("ul"),tA=a("li"),p7e=a("strong"),KZr=o("bart"),ZZr=o(" \u2014 "),Dre=a("a"),eet=o("FlaxBartForConditionalGeneration"),oet=o(" (BART model)"),ret=l(),aA=a("li"),_7e=a("strong"),tet=o("blenderbot"),aet=o(" \u2014 "),Gre=a("a"),net=o("FlaxBlenderbotForConditionalGeneration"),set=o(" (Blenderbot model)"),iet=l(),nA=a("li"),b7e=a("strong"),det=o("blenderbot-small"),cet=o(" \u2014 "),Ore=a("a"),met=o("FlaxBlenderbotSmallForConditionalGeneration"),fet=o(" (BlenderbotSmall model)"),get=l(),sA=a("li"),v7e=a("strong"),het=o("encoder-decoder"),uet=o(" \u2014 "),Vre=a("a"),pet=o("FlaxEncoderDecoderModel"),_et=o(" (Encoder decoder model)"),bet=l(),lA=a("li"),F7e=a("strong"),vet=o("longt5"),Fet=o(" \u2014 "),Xre=a("a"),Tet=o("FlaxLongT5ForConditionalGeneration"),Met=o(" (LongT5 model)"),Eet=l(),iA=a("li"),T7e=a("strong"),Cet=o("marian"),wet=o(" \u2014 "),zre=a("a"),Aet=o("FlaxMarianMTModel"),Let=o(" (Marian model)"),yet=l(),dA=a("li"),M7e=a("strong"),xet=o("mbart"),$et=o(" \u2014 "),Wre=a("a"),ket=o("FlaxMBartForConditionalGeneration"),Set=o(" (mBART model)"),Ret=l(),cA=a("li"),E7e=a("strong"),Pet=o("mt5"),Bet=o(" \u2014 "),Qre=a("a"),Iet=o("FlaxMT5ForConditionalGeneration"),Net=o(" (MT5 model)"),qet=l(),mA=a("li"),C7e=a("strong"),jet=o("pegasus"),Det=o(" \u2014 "),Hre=a("a"),Get=o("FlaxPegasusForConditionalGeneration"),Oet=o(" (Pegasus model)"),Vet=l(),fA=a("li"),w7e=a("strong"),Xet=o("t5"),zet=o(" \u2014 "),Ure=a("a"),Wet=o("FlaxT5ForConditionalGeneration"),Qet=o(" (T5 model)"),Het=l(),F(gA.$$.fragment),yHe=l(),Fm=a("h2"),hA=a("a"),A7e=a("span"),F(wk.$$.fragment),Uet=l(),L7e=a("span"),Jet=o("FlaxAutoModelForSequenceClassification"),xHe=l(),Er=a("div"),F(Ak.$$.fragment),Yet=l(),Tm=a("p"),Ket=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jre=a("a"),Zet=o("from_pretrained()"),eot=o(" class method or the "),Yre=a("a"),oot=o("from_config()"),rot=o(` class
method.`),tot=l(),Lk=a("p"),aot=o("This class cannot be instantiated directly using "),y7e=a("code"),not=o("__init__()"),sot=o(" (throws an error)."),lot=l(),oa=a("div"),F(yk.$$.fragment),iot=l(),x7e=a("p"),dot=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cot=l(),Mm=a("p"),mot=o(`Note:
Loading a model from its configuration file does `),$7e=a("strong"),fot=o("not"),got=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=a("a"),hot=o("from_pretrained()"),uot=o(" to load the model weights."),pot=l(),F(uA.$$.fragment),_ot=l(),Yr=a("div"),F(xk.$$.fragment),bot=l(),k7e=a("p"),vot=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fot=l(),Sn=a("p"),Tot=o("The model class to instantiate is selected based on the "),S7e=a("code"),Mot=o("model_type"),Eot=o(` property of the config object (either
passed as an argument or loaded from `),R7e=a("code"),Cot=o("pretrained_model_name_or_path"),wot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),Aot=o("pretrained_model_name_or_path"),Lot=o(":"),yot=l(),Se=a("ul"),pA=a("li"),B7e=a("strong"),xot=o("albert"),$ot=o(" \u2014 "),Zre=a("a"),kot=o("FlaxAlbertForSequenceClassification"),Sot=o(" (ALBERT model)"),Rot=l(),_A=a("li"),I7e=a("strong"),Pot=o("bart"),Bot=o(" \u2014 "),ete=a("a"),Iot=o("FlaxBartForSequenceClassification"),Not=o(" (BART model)"),qot=l(),bA=a("li"),N7e=a("strong"),jot=o("bert"),Dot=o(" \u2014 "),ote=a("a"),Got=o("FlaxBertForSequenceClassification"),Oot=o(" (BERT model)"),Vot=l(),vA=a("li"),q7e=a("strong"),Xot=o("big_bird"),zot=o(" \u2014 "),rte=a("a"),Wot=o("FlaxBigBirdForSequenceClassification"),Qot=o(" (BigBird model)"),Hot=l(),FA=a("li"),j7e=a("strong"),Uot=o("distilbert"),Jot=o(" \u2014 "),tte=a("a"),Yot=o("FlaxDistilBertForSequenceClassification"),Kot=o(" (DistilBERT model)"),Zot=l(),TA=a("li"),D7e=a("strong"),ert=o("electra"),ort=o(" \u2014 "),ate=a("a"),rrt=o("FlaxElectraForSequenceClassification"),trt=o(" (ELECTRA model)"),art=l(),MA=a("li"),G7e=a("strong"),nrt=o("mbart"),srt=o(" \u2014 "),nte=a("a"),lrt=o("FlaxMBartForSequenceClassification"),irt=o(" (mBART model)"),drt=l(),EA=a("li"),O7e=a("strong"),crt=o("roberta"),mrt=o(" \u2014 "),ste=a("a"),frt=o("FlaxRobertaForSequenceClassification"),grt=o(" (RoBERTa model)"),hrt=l(),CA=a("li"),V7e=a("strong"),urt=o("roformer"),prt=o(" \u2014 "),lte=a("a"),_rt=o("FlaxRoFormerForSequenceClassification"),brt=o(" (RoFormer model)"),vrt=l(),wA=a("li"),X7e=a("strong"),Frt=o("xlm-roberta"),Trt=o(" \u2014 "),ite=a("a"),Mrt=o("FlaxXLMRobertaForSequenceClassification"),Ert=o(" (XLM-RoBERTa model)"),Crt=l(),F(AA.$$.fragment),$He=l(),Em=a("h2"),LA=a("a"),z7e=a("span"),F($k.$$.fragment),wrt=l(),W7e=a("span"),Art=o("FlaxAutoModelForQuestionAnswering"),kHe=l(),Cr=a("div"),F(kk.$$.fragment),Lrt=l(),Cm=a("p"),yrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dte=a("a"),xrt=o("from_pretrained()"),$rt=o(" class method or the "),cte=a("a"),krt=o("from_config()"),Srt=o(` class
method.`),Rrt=l(),Sk=a("p"),Prt=o("This class cannot be instantiated directly using "),Q7e=a("code"),Brt=o("__init__()"),Irt=o(" (throws an error)."),Nrt=l(),ra=a("div"),F(Rk.$$.fragment),qrt=l(),H7e=a("p"),jrt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Drt=l(),wm=a("p"),Grt=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),Ort=o("not"),Vrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=a("a"),Xrt=o("from_pretrained()"),zrt=o(" to load the model weights."),Wrt=l(),F(yA.$$.fragment),Qrt=l(),Kr=a("div"),F(Pk.$$.fragment),Hrt=l(),J7e=a("p"),Urt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jrt=l(),Rn=a("p"),Yrt=o("The model class to instantiate is selected based on the "),Y7e=a("code"),Krt=o("model_type"),Zrt=o(` property of the config object (either
passed as an argument or loaded from `),K7e=a("code"),ett=o("pretrained_model_name_or_path"),ott=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=a("code"),rtt=o("pretrained_model_name_or_path"),ttt=o(":"),att=l(),Re=a("ul"),xA=a("li"),eLe=a("strong"),ntt=o("albert"),stt=o(" \u2014 "),fte=a("a"),ltt=o("FlaxAlbertForQuestionAnswering"),itt=o(" (ALBERT model)"),dtt=l(),$A=a("li"),oLe=a("strong"),ctt=o("bart"),mtt=o(" \u2014 "),gte=a("a"),ftt=o("FlaxBartForQuestionAnswering"),gtt=o(" (BART model)"),htt=l(),kA=a("li"),rLe=a("strong"),utt=o("bert"),ptt=o(" \u2014 "),hte=a("a"),_tt=o("FlaxBertForQuestionAnswering"),btt=o(" (BERT model)"),vtt=l(),SA=a("li"),tLe=a("strong"),Ftt=o("big_bird"),Ttt=o(" \u2014 "),ute=a("a"),Mtt=o("FlaxBigBirdForQuestionAnswering"),Ett=o(" (BigBird model)"),Ctt=l(),RA=a("li"),aLe=a("strong"),wtt=o("distilbert"),Att=o(" \u2014 "),pte=a("a"),Ltt=o("FlaxDistilBertForQuestionAnswering"),ytt=o(" (DistilBERT model)"),xtt=l(),PA=a("li"),nLe=a("strong"),$tt=o("electra"),ktt=o(" \u2014 "),_te=a("a"),Stt=o("FlaxElectraForQuestionAnswering"),Rtt=o(" (ELECTRA model)"),Ptt=l(),BA=a("li"),sLe=a("strong"),Btt=o("mbart"),Itt=o(" \u2014 "),bte=a("a"),Ntt=o("FlaxMBartForQuestionAnswering"),qtt=o(" (mBART model)"),jtt=l(),IA=a("li"),lLe=a("strong"),Dtt=o("roberta"),Gtt=o(" \u2014 "),vte=a("a"),Ott=o("FlaxRobertaForQuestionAnswering"),Vtt=o(" (RoBERTa model)"),Xtt=l(),NA=a("li"),iLe=a("strong"),ztt=o("roformer"),Wtt=o(" \u2014 "),Fte=a("a"),Qtt=o("FlaxRoFormerForQuestionAnswering"),Htt=o(" (RoFormer model)"),Utt=l(),qA=a("li"),dLe=a("strong"),Jtt=o("xlm-roberta"),Ytt=o(" \u2014 "),Tte=a("a"),Ktt=o("FlaxXLMRobertaForQuestionAnswering"),Ztt=o(" (XLM-RoBERTa model)"),eat=l(),F(jA.$$.fragment),SHe=l(),Am=a("h2"),DA=a("a"),cLe=a("span"),F(Bk.$$.fragment),oat=l(),mLe=a("span"),rat=o("FlaxAutoModelForTokenClassification"),RHe=l(),wr=a("div"),F(Ik.$$.fragment),tat=l(),Lm=a("p"),aat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mte=a("a"),nat=o("from_pretrained()"),sat=o(" class method or the "),Ete=a("a"),lat=o("from_config()"),iat=o(` class
method.`),dat=l(),Nk=a("p"),cat=o("This class cannot be instantiated directly using "),fLe=a("code"),mat=o("__init__()"),fat=o(" (throws an error)."),gat=l(),ta=a("div"),F(qk.$$.fragment),hat=l(),gLe=a("p"),uat=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pat=l(),ym=a("p"),_at=o(`Note:
Loading a model from its configuration file does `),hLe=a("strong"),bat=o("not"),vat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=a("a"),Fat=o("from_pretrained()"),Tat=o(" to load the model weights."),Mat=l(),F(GA.$$.fragment),Eat=l(),Zr=a("div"),F(jk.$$.fragment),Cat=l(),uLe=a("p"),wat=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Aat=l(),Pn=a("p"),Lat=o("The model class to instantiate is selected based on the "),pLe=a("code"),yat=o("model_type"),xat=o(` property of the config object (either
passed as an argument or loaded from `),_Le=a("code"),$at=o("pretrained_model_name_or_path"),kat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bLe=a("code"),Sat=o("pretrained_model_name_or_path"),Rat=o(":"),Pat=l(),Xe=a("ul"),OA=a("li"),vLe=a("strong"),Bat=o("albert"),Iat=o(" \u2014 "),wte=a("a"),Nat=o("FlaxAlbertForTokenClassification"),qat=o(" (ALBERT model)"),jat=l(),VA=a("li"),FLe=a("strong"),Dat=o("bert"),Gat=o(" \u2014 "),Ate=a("a"),Oat=o("FlaxBertForTokenClassification"),Vat=o(" (BERT model)"),Xat=l(),XA=a("li"),TLe=a("strong"),zat=o("big_bird"),Wat=o(" \u2014 "),Lte=a("a"),Qat=o("FlaxBigBirdForTokenClassification"),Hat=o(" (BigBird model)"),Uat=l(),zA=a("li"),MLe=a("strong"),Jat=o("distilbert"),Yat=o(" \u2014 "),yte=a("a"),Kat=o("FlaxDistilBertForTokenClassification"),Zat=o(" (DistilBERT model)"),ent=l(),WA=a("li"),ELe=a("strong"),ont=o("electra"),rnt=o(" \u2014 "),xte=a("a"),tnt=o("FlaxElectraForTokenClassification"),ant=o(" (ELECTRA model)"),nnt=l(),QA=a("li"),CLe=a("strong"),snt=o("roberta"),lnt=o(" \u2014 "),$te=a("a"),int=o("FlaxRobertaForTokenClassification"),dnt=o(" (RoBERTa model)"),cnt=l(),HA=a("li"),wLe=a("strong"),mnt=o("roformer"),fnt=o(" \u2014 "),kte=a("a"),gnt=o("FlaxRoFormerForTokenClassification"),hnt=o(" (RoFormer model)"),unt=l(),UA=a("li"),ALe=a("strong"),pnt=o("xlm-roberta"),_nt=o(" \u2014 "),Ste=a("a"),bnt=o("FlaxXLMRobertaForTokenClassification"),vnt=o(" (XLM-RoBERTa model)"),Fnt=l(),F(JA.$$.fragment),PHe=l(),xm=a("h2"),YA=a("a"),LLe=a("span"),F(Dk.$$.fragment),Tnt=l(),yLe=a("span"),Mnt=o("FlaxAutoModelForMultipleChoice"),BHe=l(),Ar=a("div"),F(Gk.$$.fragment),Ent=l(),$m=a("p"),Cnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rte=a("a"),wnt=o("from_pretrained()"),Ant=o(" class method or the "),Pte=a("a"),Lnt=o("from_config()"),ynt=o(` class
method.`),xnt=l(),Ok=a("p"),$nt=o("This class cannot be instantiated directly using "),xLe=a("code"),knt=o("__init__()"),Snt=o(" (throws an error)."),Rnt=l(),aa=a("div"),F(Vk.$$.fragment),Pnt=l(),$Le=a("p"),Bnt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Int=l(),km=a("p"),Nnt=o(`Note:
Loading a model from its configuration file does `),kLe=a("strong"),qnt=o("not"),jnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=a("a"),Dnt=o("from_pretrained()"),Gnt=o(" to load the model weights."),Ont=l(),F(KA.$$.fragment),Vnt=l(),et=a("div"),F(Xk.$$.fragment),Xnt=l(),SLe=a("p"),znt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wnt=l(),Bn=a("p"),Qnt=o("The model class to instantiate is selected based on the "),RLe=a("code"),Hnt=o("model_type"),Unt=o(` property of the config object (either
passed as an argument or loaded from `),PLe=a("code"),Jnt=o("pretrained_model_name_or_path"),Ynt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BLe=a("code"),Knt=o("pretrained_model_name_or_path"),Znt=o(":"),est=l(),ze=a("ul"),ZA=a("li"),ILe=a("strong"),ost=o("albert"),rst=o(" \u2014 "),Ite=a("a"),tst=o("FlaxAlbertForMultipleChoice"),ast=o(" (ALBERT model)"),nst=l(),e7=a("li"),NLe=a("strong"),sst=o("bert"),lst=o(" \u2014 "),Nte=a("a"),ist=o("FlaxBertForMultipleChoice"),dst=o(" (BERT model)"),cst=l(),o7=a("li"),qLe=a("strong"),mst=o("big_bird"),fst=o(" \u2014 "),qte=a("a"),gst=o("FlaxBigBirdForMultipleChoice"),hst=o(" (BigBird model)"),ust=l(),r7=a("li"),jLe=a("strong"),pst=o("distilbert"),_st=o(" \u2014 "),jte=a("a"),bst=o("FlaxDistilBertForMultipleChoice"),vst=o(" (DistilBERT model)"),Fst=l(),t7=a("li"),DLe=a("strong"),Tst=o("electra"),Mst=o(" \u2014 "),Dte=a("a"),Est=o("FlaxElectraForMultipleChoice"),Cst=o(" (ELECTRA model)"),wst=l(),a7=a("li"),GLe=a("strong"),Ast=o("roberta"),Lst=o(" \u2014 "),Gte=a("a"),yst=o("FlaxRobertaForMultipleChoice"),xst=o(" (RoBERTa model)"),$st=l(),n7=a("li"),OLe=a("strong"),kst=o("roformer"),Sst=o(" \u2014 "),Ote=a("a"),Rst=o("FlaxRoFormerForMultipleChoice"),Pst=o(" (RoFormer model)"),Bst=l(),s7=a("li"),VLe=a("strong"),Ist=o("xlm-roberta"),Nst=o(" \u2014 "),Vte=a("a"),qst=o("FlaxXLMRobertaForMultipleChoice"),jst=o(" (XLM-RoBERTa model)"),Dst=l(),F(l7.$$.fragment),IHe=l(),Sm=a("h2"),i7=a("a"),XLe=a("span"),F(zk.$$.fragment),Gst=l(),zLe=a("span"),Ost=o("FlaxAutoModelForNextSentencePrediction"),NHe=l(),Lr=a("div"),F(Wk.$$.fragment),Vst=l(),Rm=a("p"),Xst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xte=a("a"),zst=o("from_pretrained()"),Wst=o(" class method or the "),zte=a("a"),Qst=o("from_config()"),Hst=o(` class
method.`),Ust=l(),Qk=a("p"),Jst=o("This class cannot be instantiated directly using "),WLe=a("code"),Yst=o("__init__()"),Kst=o(" (throws an error)."),Zst=l(),na=a("div"),F(Hk.$$.fragment),elt=l(),QLe=a("p"),olt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rlt=l(),Pm=a("p"),tlt=o(`Note:
Loading a model from its configuration file does `),HLe=a("strong"),alt=o("not"),nlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wte=a("a"),slt=o("from_pretrained()"),llt=o(" to load the model weights."),ilt=l(),F(d7.$$.fragment),dlt=l(),ot=a("div"),F(Uk.$$.fragment),clt=l(),ULe=a("p"),mlt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),flt=l(),In=a("p"),glt=o("The model class to instantiate is selected based on the "),JLe=a("code"),hlt=o("model_type"),ult=o(` property of the config object (either
passed as an argument or loaded from `),YLe=a("code"),plt=o("pretrained_model_name_or_path"),_lt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KLe=a("code"),blt=o("pretrained_model_name_or_path"),vlt=o(":"),Flt=l(),ZLe=a("ul"),c7=a("li"),eye=a("strong"),Tlt=o("bert"),Mlt=o(" \u2014 "),Qte=a("a"),Elt=o("FlaxBertForNextSentencePrediction"),Clt=o(" (BERT model)"),wlt=l(),F(m7.$$.fragment),qHe=l(),Bm=a("h2"),f7=a("a"),oye=a("span"),F(Jk.$$.fragment),Alt=l(),rye=a("span"),Llt=o("FlaxAutoModelForImageClassification"),jHe=l(),yr=a("div"),F(Yk.$$.fragment),ylt=l(),Im=a("p"),xlt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hte=a("a"),$lt=o("from_pretrained()"),klt=o(" class method or the "),Ute=a("a"),Slt=o("from_config()"),Rlt=o(` class
method.`),Plt=l(),Kk=a("p"),Blt=o("This class cannot be instantiated directly using "),tye=a("code"),Ilt=o("__init__()"),Nlt=o(" (throws an error)."),qlt=l(),sa=a("div"),F(Zk.$$.fragment),jlt=l(),aye=a("p"),Dlt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Glt=l(),Nm=a("p"),Olt=o(`Note:
Loading a model from its configuration file does `),nye=a("strong"),Vlt=o("not"),Xlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=a("a"),zlt=o("from_pretrained()"),Wlt=o(" to load the model weights."),Qlt=l(),F(g7.$$.fragment),Hlt=l(),rt=a("div"),F(eS.$$.fragment),Ult=l(),sye=a("p"),Jlt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ylt=l(),Nn=a("p"),Klt=o("The model class to instantiate is selected based on the "),lye=a("code"),Zlt=o("model_type"),eit=o(` property of the config object (either
passed as an argument or loaded from `),iye=a("code"),oit=o("pretrained_model_name_or_path"),rit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dye=a("code"),tit=o("pretrained_model_name_or_path"),ait=o(":"),nit=l(),oS=a("ul"),h7=a("li"),cye=a("strong"),sit=o("beit"),lit=o(" \u2014 "),Yte=a("a"),iit=o("FlaxBeitForImageClassification"),dit=o(" (BEiT model)"),cit=l(),u7=a("li"),mye=a("strong"),mit=o("vit"),fit=o(" \u2014 "),Kte=a("a"),git=o("FlaxViTForImageClassification"),hit=o(" (ViT model)"),uit=l(),F(p7.$$.fragment),DHe=l(),qm=a("h2"),_7=a("a"),fye=a("span"),F(rS.$$.fragment),pit=l(),gye=a("span"),_it=o("FlaxAutoModelForVision2Seq"),GHe=l(),xr=a("div"),F(tS.$$.fragment),bit=l(),jm=a("p"),vit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zte=a("a"),Fit=o("from_pretrained()"),Tit=o(" class method or the "),eae=a("a"),Mit=o("from_config()"),Eit=o(` class
method.`),Cit=l(),aS=a("p"),wit=o("This class cannot be instantiated directly using "),hye=a("code"),Ait=o("__init__()"),Lit=o(" (throws an error)."),yit=l(),la=a("div"),F(nS.$$.fragment),xit=l(),uye=a("p"),$it=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kit=l(),Dm=a("p"),Sit=o(`Note:
Loading a model from its configuration file does `),pye=a("strong"),Rit=o("not"),Pit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=a("a"),Bit=o("from_pretrained()"),Iit=o(" to load the model weights."),Nit=l(),F(b7.$$.fragment),qit=l(),tt=a("div"),F(sS.$$.fragment),jit=l(),_ye=a("p"),Dit=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Git=l(),qn=a("p"),Oit=o("The model class to instantiate is selected based on the "),bye=a("code"),Vit=o("model_type"),Xit=o(` property of the config object (either
passed as an argument or loaded from `),vye=a("code"),zit=o("pretrained_model_name_or_path"),Wit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fye=a("code"),Qit=o("pretrained_model_name_or_path"),Hit=o(":"),Uit=l(),Tye=a("ul"),v7=a("li"),Mye=a("strong"),Jit=o("vision-encoder-decoder"),Yit=o(" \u2014 "),rae=a("a"),Kit=o("FlaxVisionEncoderDecoderModel"),Zit=o(" (Vision Encoder decoder model)"),edt=l(),F(F7.$$.fragment),this.h()},l(m){const _=WZt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var lS=s(u);f=n(lS,"A",{id:!0,class:!0,href:!0});var Eye=s(f);p=n(Eye,"SPAN",{});var Cye=s(p);T(d.$$.fragment,Cye),Cye.forEach(t),Eye.forEach(t),h=i(lS),Ao=n(lS,"SPAN",{});var wye=s(Ao);Ii=r(wye,"Auto Classes"),wye.forEach(t),lS.forEach(t),Xm=i(m),dt=n(m,"P",{});var iS=s(dt);Ni=r(iS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),qi=n(iS,"CODE",{});var Aye=s(qi);Oy=r(Aye,"from_pretrained()"),Aye.forEach(t),zm=r(iS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),iS.forEach(t),Oe=i(m),Qe=n(m,"P",{});var jn=s(Qe);ji=r(jn,"Instantiating one of "),Dn=n(jn,"A",{href:!0});var Lye=s(Dn);Vy=r(Lye,"AutoConfig"),Lye.forEach(t),Gn=r(jn,", "),On=n(jn,"A",{href:!0});var yye=s(On);Xy=r(yye,"AutoModel"),yye.forEach(t),Di=r(jn,`, and
`),Vn=n(jn,"A",{href:!0});var xye=s(Vn);zy=r(xye,"AutoTokenizer"),xye.forEach(t),Gi=r(jn," will directly create a class of the relevant architecture. For instance"),jn.forEach(t),Wm=i(m),T(Ia.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var dS=s(Ae);$R=r(dS,"will create a model that is an instance of "),Oi=n(dS,"A",{href:!0});var $ye=s(Oi);kR=r($ye,"BertModel"),$ye.forEach(t),SR=r(dS,"."),dS.forEach(t),Lo=i(m),Na=n(m,"P",{});var cS=s(Na);RR=r(cS,"There is one class of "),Qm=n(cS,"CODE",{});var kye=s(Qm);PR=r(kye,"AutoModel"),kye.forEach(t),eYe=r(cS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cS.forEach(t),BWe=i(m),Vi=n(m,"H2",{class:!0});var mS=s(Vi);Hm=n(mS,"A",{id:!0,class:!0,href:!0});var Sye=s(Hm);Kne=n(Sye,"SPAN",{});var Rye=s(Kne);T(Wy.$$.fragment,Rye),Rye.forEach(t),Sye.forEach(t),oYe=i(mS),Zne=n(mS,"SPAN",{});var Pye=s(Zne);rYe=r(Pye,"Extending the Auto Classes"),Pye.forEach(t),mS.forEach(t),IWe=i(m),Xn=n(m,"P",{});var Gm=s(Xn);tYe=r(Gm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ese=n(Gm,"CODE",{});var Bye=s(ese);aYe=r(Bye,"NewModel"),Bye.forEach(t),nYe=r(Gm,", make sure you have a "),ose=n(Gm,"CODE",{});var Iye=s(ose);sYe=r(Iye,"NewModelConfig"),Iye.forEach(t),lYe=r(Gm,` then you can add those to the auto
classes like this:`),Gm.forEach(t),NWe=i(m),T(Qy.$$.fragment,m),qWe=i(m),BR=n(m,"P",{});var Nye=s(BR);iYe=r(Nye,"You will then be able to use the auto classes like you would usually do!"),Nye.forEach(t),jWe=i(m),T(Um.$$.fragment,m),DWe=i(m),Xi=n(m,"H2",{class:!0});var fS=s(Xi);Jm=n(fS,"A",{id:!0,class:!0,href:!0});var qye=s(Jm);rse=n(qye,"SPAN",{});var jye=s(rse);T(Hy.$$.fragment,jye),jye.forEach(t),qye.forEach(t),dYe=i(fS),tse=n(fS,"SPAN",{});var Dye=s(tse);cYe=r(Dye,"AutoConfig"),Dye.forEach(t),fS.forEach(t),GWe=i(m),yo=n(m,"DIV",{class:!0});var lt=s(yo);T(Uy.$$.fragment,lt),mYe=i(lt),Jy=n(lt,"P",{});var gS=s(Jy);fYe=r(gS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),IR=n(gS,"A",{href:!0});var Gye=s(IR);gYe=r(Gye,"from_pretrained()"),Gye.forEach(t),hYe=r(gS," class method."),gS.forEach(t),uYe=i(lt),Yy=n(lt,"P",{});var hS=s(Yy);pYe=r(hS,"This class cannot be instantiated directly using "),ase=n(hS,"CODE",{});var Oye=s(ase);_Ye=r(Oye,"__init__()"),Oye.forEach(t),bYe=r(hS," (throws an error)."),hS.forEach(t),vYe=i(lt),$r=n(lt,"DIV",{class:!0});var it=s($r);T(Ky.$$.fragment,it),FYe=i(it),nse=n(it,"P",{});var Vye=s(nse);TYe=r(Vye,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Vye.forEach(t),MYe=i(it),zi=n(it,"P",{});var Om=s(zi);EYe=r(Om,"The configuration class to instantiate is selected based on the "),sse=n(Om,"CODE",{});var Xye=s(sse);CYe=r(Xye,"model_type"),Xye.forEach(t),wYe=r(Om,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lse=n(Om,"CODE",{});var zye=s(lse);AYe=r(zye,"pretrained_model_name_or_path"),zye.forEach(t),LYe=r(Om,":"),Om.forEach(t),yYe=i(it),A=n(it,"UL",{});var L=s(A);Ym=n(L,"LI",{});var T7=s(Ym);ise=n(T7,"STRONG",{});var Wye=s(ise);xYe=r(Wye,"albert"),Wye.forEach(t),$Ye=r(T7," \u2014 "),NR=n(T7,"A",{href:!0});var Qye=s(NR);kYe=r(Qye,"AlbertConfig"),Qye.forEach(t),SYe=r(T7," (ALBERT model)"),T7.forEach(t),RYe=i(L),Km=n(L,"LI",{});var M7=s(Km);dse=n(M7,"STRONG",{});var Hye=s(dse);PYe=r(Hye,"bart"),Hye.forEach(t),BYe=r(M7," \u2014 "),qR=n(M7,"A",{href:!0});var Uye=s(qR);IYe=r(Uye,"BartConfig"),Uye.forEach(t),NYe=r(M7," (BART model)"),M7.forEach(t),qYe=i(L),Zm=n(L,"LI",{});var E7=s(Zm);cse=n(E7,"STRONG",{});var Jye=s(cse);jYe=r(Jye,"beit"),Jye.forEach(t),DYe=r(E7," \u2014 "),jR=n(E7,"A",{href:!0});var Yye=s(jR);GYe=r(Yye,"BeitConfig"),Yye.forEach(t),OYe=r(E7," (BEiT model)"),E7.forEach(t),VYe=i(L),ef=n(L,"LI",{});var C7=s(ef);mse=n(C7,"STRONG",{});var Kye=s(mse);XYe=r(Kye,"bert"),Kye.forEach(t),zYe=r(C7," \u2014 "),DR=n(C7,"A",{href:!0});var Zye=s(DR);WYe=r(Zye,"BertConfig"),Zye.forEach(t),QYe=r(C7," (BERT model)"),C7.forEach(t),HYe=i(L),of=n(L,"LI",{});var w7=s(of);fse=n(w7,"STRONG",{});var e8e=s(fse);UYe=r(e8e,"bert-generation"),e8e.forEach(t),JYe=r(w7," \u2014 "),GR=n(w7,"A",{href:!0});var o8e=s(GR);YYe=r(o8e,"BertGenerationConfig"),o8e.forEach(t),KYe=r(w7," (Bert Generation model)"),w7.forEach(t),ZYe=i(L),rf=n(L,"LI",{});var A7=s(rf);gse=n(A7,"STRONG",{});var r8e=s(gse);eKe=r(r8e,"big_bird"),r8e.forEach(t),oKe=r(A7," \u2014 "),OR=n(A7,"A",{href:!0});var t8e=s(OR);rKe=r(t8e,"BigBirdConfig"),t8e.forEach(t),tKe=r(A7," (BigBird model)"),A7.forEach(t),aKe=i(L),tf=n(L,"LI",{});var L7=s(tf);hse=n(L7,"STRONG",{});var a8e=s(hse);nKe=r(a8e,"bigbird_pegasus"),a8e.forEach(t),sKe=r(L7," \u2014 "),VR=n(L7,"A",{href:!0});var n8e=s(VR);lKe=r(n8e,"BigBirdPegasusConfig"),n8e.forEach(t),iKe=r(L7," (BigBird-Pegasus model)"),L7.forEach(t),dKe=i(L),af=n(L,"LI",{});var y7=s(af);use=n(y7,"STRONG",{});var s8e=s(use);cKe=r(s8e,"blenderbot"),s8e.forEach(t),mKe=r(y7," \u2014 "),XR=n(y7,"A",{href:!0});var l8e=s(XR);fKe=r(l8e,"BlenderbotConfig"),l8e.forEach(t),gKe=r(y7," (Blenderbot model)"),y7.forEach(t),hKe=i(L),nf=n(L,"LI",{});var x7=s(nf);pse=n(x7,"STRONG",{});var i8e=s(pse);uKe=r(i8e,"blenderbot-small"),i8e.forEach(t),pKe=r(x7," \u2014 "),zR=n(x7,"A",{href:!0});var d8e=s(zR);_Ke=r(d8e,"BlenderbotSmallConfig"),d8e.forEach(t),bKe=r(x7," (BlenderbotSmall model)"),x7.forEach(t),vKe=i(L),sf=n(L,"LI",{});var $7=s(sf);_se=n($7,"STRONG",{});var c8e=s(_se);FKe=r(c8e,"bloom"),c8e.forEach(t),TKe=r($7," \u2014 "),WR=n($7,"A",{href:!0});var m8e=s(WR);MKe=r(m8e,"BloomConfig"),m8e.forEach(t),EKe=r($7," (BLOOM model)"),$7.forEach(t),CKe=i(L),lf=n(L,"LI",{});var k7=s(lf);bse=n(k7,"STRONG",{});var f8e=s(bse);wKe=r(f8e,"camembert"),f8e.forEach(t),AKe=r(k7," \u2014 "),QR=n(k7,"A",{href:!0});var g8e=s(QR);LKe=r(g8e,"CamembertConfig"),g8e.forEach(t),yKe=r(k7," (CamemBERT model)"),k7.forEach(t),xKe=i(L),df=n(L,"LI",{});var S7=s(df);vse=n(S7,"STRONG",{});var h8e=s(vse);$Ke=r(h8e,"canine"),h8e.forEach(t),kKe=r(S7," \u2014 "),HR=n(S7,"A",{href:!0});var u8e=s(HR);SKe=r(u8e,"CanineConfig"),u8e.forEach(t),RKe=r(S7," (CANINE model)"),S7.forEach(t),PKe=i(L),cf=n(L,"LI",{});var R7=s(cf);Fse=n(R7,"STRONG",{});var p8e=s(Fse);BKe=r(p8e,"clip"),p8e.forEach(t),IKe=r(R7," \u2014 "),UR=n(R7,"A",{href:!0});var _8e=s(UR);NKe=r(_8e,"CLIPConfig"),_8e.forEach(t),qKe=r(R7," (CLIP model)"),R7.forEach(t),jKe=i(L),mf=n(L,"LI",{});var P7=s(mf);Tse=n(P7,"STRONG",{});var b8e=s(Tse);DKe=r(b8e,"codegen"),b8e.forEach(t),GKe=r(P7," \u2014 "),JR=n(P7,"A",{href:!0});var v8e=s(JR);OKe=r(v8e,"CodeGenConfig"),v8e.forEach(t),VKe=r(P7," (CodeGen model)"),P7.forEach(t),XKe=i(L),ff=n(L,"LI",{});var B7=s(ff);Mse=n(B7,"STRONG",{});var F8e=s(Mse);zKe=r(F8e,"convbert"),F8e.forEach(t),WKe=r(B7," \u2014 "),YR=n(B7,"A",{href:!0});var T8e=s(YR);QKe=r(T8e,"ConvBertConfig"),T8e.forEach(t),HKe=r(B7," (ConvBERT model)"),B7.forEach(t),UKe=i(L),gf=n(L,"LI",{});var I7=s(gf);Ese=n(I7,"STRONG",{});var M8e=s(Ese);JKe=r(M8e,"convnext"),M8e.forEach(t),YKe=r(I7," \u2014 "),KR=n(I7,"A",{href:!0});var E8e=s(KR);KKe=r(E8e,"ConvNextConfig"),E8e.forEach(t),ZKe=r(I7," (ConvNeXT model)"),I7.forEach(t),eZe=i(L),hf=n(L,"LI",{});var N7=s(hf);Cse=n(N7,"STRONG",{});var C8e=s(Cse);oZe=r(C8e,"ctrl"),C8e.forEach(t),rZe=r(N7," \u2014 "),ZR=n(N7,"A",{href:!0});var w8e=s(ZR);tZe=r(w8e,"CTRLConfig"),w8e.forEach(t),aZe=r(N7," (CTRL model)"),N7.forEach(t),nZe=i(L),uf=n(L,"LI",{});var q7=s(uf);wse=n(q7,"STRONG",{});var A8e=s(wse);sZe=r(A8e,"cvt"),A8e.forEach(t),lZe=r(q7," \u2014 "),eP=n(q7,"A",{href:!0});var L8e=s(eP);iZe=r(L8e,"CvtConfig"),L8e.forEach(t),dZe=r(q7," (CvT model)"),q7.forEach(t),cZe=i(L),pf=n(L,"LI",{});var j7=s(pf);Ase=n(j7,"STRONG",{});var y8e=s(Ase);mZe=r(y8e,"data2vec-audio"),y8e.forEach(t),fZe=r(j7," \u2014 "),oP=n(j7,"A",{href:!0});var x8e=s(oP);gZe=r(x8e,"Data2VecAudioConfig"),x8e.forEach(t),hZe=r(j7," (Data2VecAudio model)"),j7.forEach(t),uZe=i(L),_f=n(L,"LI",{});var D7=s(_f);Lse=n(D7,"STRONG",{});var $8e=s(Lse);pZe=r($8e,"data2vec-text"),$8e.forEach(t),_Ze=r(D7," \u2014 "),rP=n(D7,"A",{href:!0});var k8e=s(rP);bZe=r(k8e,"Data2VecTextConfig"),k8e.forEach(t),vZe=r(D7," (Data2VecText model)"),D7.forEach(t),FZe=i(L),bf=n(L,"LI",{});var G7=s(bf);yse=n(G7,"STRONG",{});var S8e=s(yse);TZe=r(S8e,"data2vec-vision"),S8e.forEach(t),MZe=r(G7," \u2014 "),tP=n(G7,"A",{href:!0});var R8e=s(tP);EZe=r(R8e,"Data2VecVisionConfig"),R8e.forEach(t),CZe=r(G7," (Data2VecVision model)"),G7.forEach(t),wZe=i(L),vf=n(L,"LI",{});var O7=s(vf);xse=n(O7,"STRONG",{});var P8e=s(xse);AZe=r(P8e,"deberta"),P8e.forEach(t),LZe=r(O7," \u2014 "),aP=n(O7,"A",{href:!0});var B8e=s(aP);yZe=r(B8e,"DebertaConfig"),B8e.forEach(t),xZe=r(O7," (DeBERTa model)"),O7.forEach(t),$Ze=i(L),Ff=n(L,"LI",{});var V7=s(Ff);$se=n(V7,"STRONG",{});var I8e=s($se);kZe=r(I8e,"deberta-v2"),I8e.forEach(t),SZe=r(V7," \u2014 "),nP=n(V7,"A",{href:!0});var N8e=s(nP);RZe=r(N8e,"DebertaV2Config"),N8e.forEach(t),PZe=r(V7," (DeBERTa-v2 model)"),V7.forEach(t),BZe=i(L),Tf=n(L,"LI",{});var X7=s(Tf);kse=n(X7,"STRONG",{});var q8e=s(kse);IZe=r(q8e,"decision_transformer"),q8e.forEach(t),NZe=r(X7," \u2014 "),sP=n(X7,"A",{href:!0});var j8e=s(sP);qZe=r(j8e,"DecisionTransformerConfig"),j8e.forEach(t),jZe=r(X7," (Decision Transformer model)"),X7.forEach(t),DZe=i(L),Mf=n(L,"LI",{});var D8e=s(Mf);Sse=n(D8e,"STRONG",{});var rdt=s(Sse);GZe=r(rdt,"deit"),rdt.forEach(t),OZe=r(D8e," \u2014 "),lP=n(D8e,"A",{href:!0});var tdt=s(lP);VZe=r(tdt,"DeiTConfig"),tdt.forEach(t),XZe=r(D8e," (DeiT model)"),D8e.forEach(t),zZe=i(L),Ef=n(L,"LI",{});var G8e=s(Ef);Rse=n(G8e,"STRONG",{});var adt=s(Rse);WZe=r(adt,"detr"),adt.forEach(t),QZe=r(G8e," \u2014 "),iP=n(G8e,"A",{href:!0});var ndt=s(iP);HZe=r(ndt,"DetrConfig"),ndt.forEach(t),UZe=r(G8e," (DETR model)"),G8e.forEach(t),JZe=i(L),Cf=n(L,"LI",{});var O8e=s(Cf);Pse=n(O8e,"STRONG",{});var sdt=s(Pse);YZe=r(sdt,"distilbert"),sdt.forEach(t),KZe=r(O8e," \u2014 "),dP=n(O8e,"A",{href:!0});var ldt=s(dP);ZZe=r(ldt,"DistilBertConfig"),ldt.forEach(t),eeo=r(O8e," (DistilBERT model)"),O8e.forEach(t),oeo=i(L),wf=n(L,"LI",{});var V8e=s(wf);Bse=n(V8e,"STRONG",{});var idt=s(Bse);reo=r(idt,"dpr"),idt.forEach(t),teo=r(V8e," \u2014 "),cP=n(V8e,"A",{href:!0});var ddt=s(cP);aeo=r(ddt,"DPRConfig"),ddt.forEach(t),neo=r(V8e," (DPR model)"),V8e.forEach(t),seo=i(L),Af=n(L,"LI",{});var X8e=s(Af);Ise=n(X8e,"STRONG",{});var cdt=s(Ise);leo=r(cdt,"dpt"),cdt.forEach(t),ieo=r(X8e," \u2014 "),mP=n(X8e,"A",{href:!0});var mdt=s(mP);deo=r(mdt,"DPTConfig"),mdt.forEach(t),ceo=r(X8e," (DPT model)"),X8e.forEach(t),meo=i(L),Lf=n(L,"LI",{});var z8e=s(Lf);Nse=n(z8e,"STRONG",{});var fdt=s(Nse);feo=r(fdt,"electra"),fdt.forEach(t),geo=r(z8e," \u2014 "),fP=n(z8e,"A",{href:!0});var gdt=s(fP);heo=r(gdt,"ElectraConfig"),gdt.forEach(t),ueo=r(z8e," (ELECTRA model)"),z8e.forEach(t),peo=i(L),yf=n(L,"LI",{});var W8e=s(yf);qse=n(W8e,"STRONG",{});var hdt=s(qse);_eo=r(hdt,"encoder-decoder"),hdt.forEach(t),beo=r(W8e," \u2014 "),gP=n(W8e,"A",{href:!0});var udt=s(gP);veo=r(udt,"EncoderDecoderConfig"),udt.forEach(t),Feo=r(W8e," (Encoder decoder model)"),W8e.forEach(t),Teo=i(L),xf=n(L,"LI",{});var Q8e=s(xf);jse=n(Q8e,"STRONG",{});var pdt=s(jse);Meo=r(pdt,"flaubert"),pdt.forEach(t),Eeo=r(Q8e," \u2014 "),hP=n(Q8e,"A",{href:!0});var _dt=s(hP);Ceo=r(_dt,"FlaubertConfig"),_dt.forEach(t),weo=r(Q8e," (FlauBERT model)"),Q8e.forEach(t),Aeo=i(L),$f=n(L,"LI",{});var H8e=s($f);Dse=n(H8e,"STRONG",{});var bdt=s(Dse);Leo=r(bdt,"flava"),bdt.forEach(t),yeo=r(H8e," \u2014 "),uP=n(H8e,"A",{href:!0});var vdt=s(uP);xeo=r(vdt,"FlavaConfig"),vdt.forEach(t),$eo=r(H8e," (FLAVA model)"),H8e.forEach(t),keo=i(L),kf=n(L,"LI",{});var U8e=s(kf);Gse=n(U8e,"STRONG",{});var Fdt=s(Gse);Seo=r(Fdt,"fnet"),Fdt.forEach(t),Reo=r(U8e," \u2014 "),pP=n(U8e,"A",{href:!0});var Tdt=s(pP);Peo=r(Tdt,"FNetConfig"),Tdt.forEach(t),Beo=r(U8e," (FNet model)"),U8e.forEach(t),Ieo=i(L),Sf=n(L,"LI",{});var J8e=s(Sf);Ose=n(J8e,"STRONG",{});var Mdt=s(Ose);Neo=r(Mdt,"fsmt"),Mdt.forEach(t),qeo=r(J8e," \u2014 "),_P=n(J8e,"A",{href:!0});var Edt=s(_P);jeo=r(Edt,"FSMTConfig"),Edt.forEach(t),Deo=r(J8e," (FairSeq Machine-Translation model)"),J8e.forEach(t),Geo=i(L),Rf=n(L,"LI",{});var Y8e=s(Rf);Vse=n(Y8e,"STRONG",{});var Cdt=s(Vse);Oeo=r(Cdt,"funnel"),Cdt.forEach(t),Veo=r(Y8e," \u2014 "),bP=n(Y8e,"A",{href:!0});var wdt=s(bP);Xeo=r(wdt,"FunnelConfig"),wdt.forEach(t),zeo=r(Y8e," (Funnel Transformer model)"),Y8e.forEach(t),Weo=i(L),Pf=n(L,"LI",{});var K8e=s(Pf);Xse=n(K8e,"STRONG",{});var Adt=s(Xse);Qeo=r(Adt,"glpn"),Adt.forEach(t),Heo=r(K8e," \u2014 "),vP=n(K8e,"A",{href:!0});var Ldt=s(vP);Ueo=r(Ldt,"GLPNConfig"),Ldt.forEach(t),Jeo=r(K8e," (GLPN model)"),K8e.forEach(t),Yeo=i(L),Bf=n(L,"LI",{});var Z8e=s(Bf);zse=n(Z8e,"STRONG",{});var ydt=s(zse);Keo=r(ydt,"gpt2"),ydt.forEach(t),Zeo=r(Z8e," \u2014 "),FP=n(Z8e,"A",{href:!0});var xdt=s(FP);eoo=r(xdt,"GPT2Config"),xdt.forEach(t),ooo=r(Z8e," (OpenAI GPT-2 model)"),Z8e.forEach(t),roo=i(L),If=n(L,"LI",{});var e9e=s(If);Wse=n(e9e,"STRONG",{});var $dt=s(Wse);too=r($dt,"gpt_neo"),$dt.forEach(t),aoo=r(e9e," \u2014 "),TP=n(e9e,"A",{href:!0});var kdt=s(TP);noo=r(kdt,"GPTNeoConfig"),kdt.forEach(t),soo=r(e9e," (GPT Neo model)"),e9e.forEach(t),loo=i(L),Nf=n(L,"LI",{});var o9e=s(Nf);Qse=n(o9e,"STRONG",{});var Sdt=s(Qse);ioo=r(Sdt,"gpt_neox"),Sdt.forEach(t),doo=r(o9e," \u2014 "),MP=n(o9e,"A",{href:!0});var Rdt=s(MP);coo=r(Rdt,"GPTNeoXConfig"),Rdt.forEach(t),moo=r(o9e," (GPT NeoX model)"),o9e.forEach(t),foo=i(L),qf=n(L,"LI",{});var r9e=s(qf);Hse=n(r9e,"STRONG",{});var Pdt=s(Hse);goo=r(Pdt,"gptj"),Pdt.forEach(t),hoo=r(r9e," \u2014 "),EP=n(r9e,"A",{href:!0});var Bdt=s(EP);uoo=r(Bdt,"GPTJConfig"),Bdt.forEach(t),poo=r(r9e," (GPT-J model)"),r9e.forEach(t),_oo=i(L),jf=n(L,"LI",{});var t9e=s(jf);Use=n(t9e,"STRONG",{});var Idt=s(Use);boo=r(Idt,"groupvit"),Idt.forEach(t),voo=r(t9e," \u2014 "),CP=n(t9e,"A",{href:!0});var Ndt=s(CP);Foo=r(Ndt,"GroupViTConfig"),Ndt.forEach(t),Too=r(t9e," (GroupViT model)"),t9e.forEach(t),Moo=i(L),Df=n(L,"LI",{});var a9e=s(Df);Jse=n(a9e,"STRONG",{});var qdt=s(Jse);Eoo=r(qdt,"hubert"),qdt.forEach(t),Coo=r(a9e," \u2014 "),wP=n(a9e,"A",{href:!0});var jdt=s(wP);woo=r(jdt,"HubertConfig"),jdt.forEach(t),Aoo=r(a9e," (Hubert model)"),a9e.forEach(t),Loo=i(L),Gf=n(L,"LI",{});var n9e=s(Gf);Yse=n(n9e,"STRONG",{});var Ddt=s(Yse);yoo=r(Ddt,"ibert"),Ddt.forEach(t),xoo=r(n9e," \u2014 "),AP=n(n9e,"A",{href:!0});var Gdt=s(AP);$oo=r(Gdt,"IBertConfig"),Gdt.forEach(t),koo=r(n9e," (I-BERT model)"),n9e.forEach(t),Soo=i(L),Of=n(L,"LI",{});var s9e=s(Of);Kse=n(s9e,"STRONG",{});var Odt=s(Kse);Roo=r(Odt,"imagegpt"),Odt.forEach(t),Poo=r(s9e," \u2014 "),LP=n(s9e,"A",{href:!0});var Vdt=s(LP);Boo=r(Vdt,"ImageGPTConfig"),Vdt.forEach(t),Ioo=r(s9e," (ImageGPT model)"),s9e.forEach(t),Noo=i(L),Vf=n(L,"LI",{});var l9e=s(Vf);Zse=n(l9e,"STRONG",{});var Xdt=s(Zse);qoo=r(Xdt,"layoutlm"),Xdt.forEach(t),joo=r(l9e," \u2014 "),yP=n(l9e,"A",{href:!0});var zdt=s(yP);Doo=r(zdt,"LayoutLMConfig"),zdt.forEach(t),Goo=r(l9e," (LayoutLM model)"),l9e.forEach(t),Ooo=i(L),Xf=n(L,"LI",{});var i9e=s(Xf);ele=n(i9e,"STRONG",{});var Wdt=s(ele);Voo=r(Wdt,"layoutlmv2"),Wdt.forEach(t),Xoo=r(i9e," \u2014 "),xP=n(i9e,"A",{href:!0});var Qdt=s(xP);zoo=r(Qdt,"LayoutLMv2Config"),Qdt.forEach(t),Woo=r(i9e," (LayoutLMv2 model)"),i9e.forEach(t),Qoo=i(L),zf=n(L,"LI",{});var d9e=s(zf);ole=n(d9e,"STRONG",{});var Hdt=s(ole);Hoo=r(Hdt,"layoutlmv3"),Hdt.forEach(t),Uoo=r(d9e," \u2014 "),$P=n(d9e,"A",{href:!0});var Udt=s($P);Joo=r(Udt,"LayoutLMv3Config"),Udt.forEach(t),Yoo=r(d9e," (LayoutLMv3 model)"),d9e.forEach(t),Koo=i(L),Wf=n(L,"LI",{});var c9e=s(Wf);rle=n(c9e,"STRONG",{});var Jdt=s(rle);Zoo=r(Jdt,"led"),Jdt.forEach(t),ero=r(c9e," \u2014 "),kP=n(c9e,"A",{href:!0});var Ydt=s(kP);oro=r(Ydt,"LEDConfig"),Ydt.forEach(t),rro=r(c9e," (LED model)"),c9e.forEach(t),tro=i(L),Qf=n(L,"LI",{});var m9e=s(Qf);tle=n(m9e,"STRONG",{});var Kdt=s(tle);aro=r(Kdt,"levit"),Kdt.forEach(t),nro=r(m9e," \u2014 "),SP=n(m9e,"A",{href:!0});var Zdt=s(SP);sro=r(Zdt,"LevitConfig"),Zdt.forEach(t),lro=r(m9e," (LeViT model)"),m9e.forEach(t),iro=i(L),Hf=n(L,"LI",{});var f9e=s(Hf);ale=n(f9e,"STRONG",{});var ect=s(ale);dro=r(ect,"longformer"),ect.forEach(t),cro=r(f9e," \u2014 "),RP=n(f9e,"A",{href:!0});var oct=s(RP);mro=r(oct,"LongformerConfig"),oct.forEach(t),fro=r(f9e," (Longformer model)"),f9e.forEach(t),gro=i(L),Uf=n(L,"LI",{});var g9e=s(Uf);nle=n(g9e,"STRONG",{});var rct=s(nle);hro=r(rct,"longt5"),rct.forEach(t),uro=r(g9e," \u2014 "),PP=n(g9e,"A",{href:!0});var tct=s(PP);pro=r(tct,"LongT5Config"),tct.forEach(t),_ro=r(g9e," (LongT5 model)"),g9e.forEach(t),bro=i(L),Jf=n(L,"LI",{});var h9e=s(Jf);sle=n(h9e,"STRONG",{});var act=s(sle);vro=r(act,"luke"),act.forEach(t),Fro=r(h9e," \u2014 "),BP=n(h9e,"A",{href:!0});var nct=s(BP);Tro=r(nct,"LukeConfig"),nct.forEach(t),Mro=r(h9e," (LUKE model)"),h9e.forEach(t),Ero=i(L),Yf=n(L,"LI",{});var u9e=s(Yf);lle=n(u9e,"STRONG",{});var sct=s(lle);Cro=r(sct,"lxmert"),sct.forEach(t),wro=r(u9e," \u2014 "),IP=n(u9e,"A",{href:!0});var lct=s(IP);Aro=r(lct,"LxmertConfig"),lct.forEach(t),Lro=r(u9e," (LXMERT model)"),u9e.forEach(t),yro=i(L),Kf=n(L,"LI",{});var p9e=s(Kf);ile=n(p9e,"STRONG",{});var ict=s(ile);xro=r(ict,"m2m_100"),ict.forEach(t),$ro=r(p9e," \u2014 "),NP=n(p9e,"A",{href:!0});var dct=s(NP);kro=r(dct,"M2M100Config"),dct.forEach(t),Sro=r(p9e," (M2M100 model)"),p9e.forEach(t),Rro=i(L),Zf=n(L,"LI",{});var _9e=s(Zf);dle=n(_9e,"STRONG",{});var cct=s(dle);Pro=r(cct,"marian"),cct.forEach(t),Bro=r(_9e," \u2014 "),qP=n(_9e,"A",{href:!0});var mct=s(qP);Iro=r(mct,"MarianConfig"),mct.forEach(t),Nro=r(_9e," (Marian model)"),_9e.forEach(t),qro=i(L),eg=n(L,"LI",{});var b9e=s(eg);cle=n(b9e,"STRONG",{});var fct=s(cle);jro=r(fct,"maskformer"),fct.forEach(t),Dro=r(b9e," \u2014 "),jP=n(b9e,"A",{href:!0});var gct=s(jP);Gro=r(gct,"MaskFormerConfig"),gct.forEach(t),Oro=r(b9e," (MaskFormer model)"),b9e.forEach(t),Vro=i(L),og=n(L,"LI",{});var v9e=s(og);mle=n(v9e,"STRONG",{});var hct=s(mle);Xro=r(hct,"mbart"),hct.forEach(t),zro=r(v9e," \u2014 "),DP=n(v9e,"A",{href:!0});var uct=s(DP);Wro=r(uct,"MBartConfig"),uct.forEach(t),Qro=r(v9e," (mBART model)"),v9e.forEach(t),Hro=i(L),rg=n(L,"LI",{});var F9e=s(rg);fle=n(F9e,"STRONG",{});var pct=s(fle);Uro=r(pct,"mctct"),pct.forEach(t),Jro=r(F9e," \u2014 "),GP=n(F9e,"A",{href:!0});var _ct=s(GP);Yro=r(_ct,"MCTCTConfig"),_ct.forEach(t),Kro=r(F9e," (M-CTC-T model)"),F9e.forEach(t),Zro=i(L),tg=n(L,"LI",{});var T9e=s(tg);gle=n(T9e,"STRONG",{});var bct=s(gle);eto=r(bct,"megatron-bert"),bct.forEach(t),oto=r(T9e," \u2014 "),OP=n(T9e,"A",{href:!0});var vct=s(OP);rto=r(vct,"MegatronBertConfig"),vct.forEach(t),tto=r(T9e," (Megatron-BERT model)"),T9e.forEach(t),ato=i(L),ag=n(L,"LI",{});var M9e=s(ag);hle=n(M9e,"STRONG",{});var Fct=s(hle);nto=r(Fct,"mobilebert"),Fct.forEach(t),sto=r(M9e," \u2014 "),VP=n(M9e,"A",{href:!0});var Tct=s(VP);lto=r(Tct,"MobileBertConfig"),Tct.forEach(t),ito=r(M9e," (MobileBERT model)"),M9e.forEach(t),dto=i(L),ng=n(L,"LI",{});var E9e=s(ng);ule=n(E9e,"STRONG",{});var Mct=s(ule);cto=r(Mct,"mobilevit"),Mct.forEach(t),mto=r(E9e," \u2014 "),XP=n(E9e,"A",{href:!0});var Ect=s(XP);fto=r(Ect,"MobileViTConfig"),Ect.forEach(t),gto=r(E9e," (MobileViT model)"),E9e.forEach(t),hto=i(L),sg=n(L,"LI",{});var C9e=s(sg);ple=n(C9e,"STRONG",{});var Cct=s(ple);uto=r(Cct,"mpnet"),Cct.forEach(t),pto=r(C9e," \u2014 "),zP=n(C9e,"A",{href:!0});var wct=s(zP);_to=r(wct,"MPNetConfig"),wct.forEach(t),bto=r(C9e," (MPNet model)"),C9e.forEach(t),vto=i(L),lg=n(L,"LI",{});var w9e=s(lg);_le=n(w9e,"STRONG",{});var Act=s(_le);Fto=r(Act,"mt5"),Act.forEach(t),Tto=r(w9e," \u2014 "),WP=n(w9e,"A",{href:!0});var Lct=s(WP);Mto=r(Lct,"MT5Config"),Lct.forEach(t),Eto=r(w9e," (MT5 model)"),w9e.forEach(t),Cto=i(L),ig=n(L,"LI",{});var A9e=s(ig);ble=n(A9e,"STRONG",{});var yct=s(ble);wto=r(yct,"mvp"),yct.forEach(t),Ato=r(A9e," \u2014 "),QP=n(A9e,"A",{href:!0});var xct=s(QP);Lto=r(xct,"MvpConfig"),xct.forEach(t),yto=r(A9e," (MVP model)"),A9e.forEach(t),xto=i(L),dg=n(L,"LI",{});var L9e=s(dg);vle=n(L9e,"STRONG",{});var $ct=s(vle);$to=r($ct,"nezha"),$ct.forEach(t),kto=r(L9e," \u2014 "),HP=n(L9e,"A",{href:!0});var kct=s(HP);Sto=r(kct,"NezhaConfig"),kct.forEach(t),Rto=r(L9e," (Nezha model)"),L9e.forEach(t),Pto=i(L),cg=n(L,"LI",{});var y9e=s(cg);Fle=n(y9e,"STRONG",{});var Sct=s(Fle);Bto=r(Sct,"nystromformer"),Sct.forEach(t),Ito=r(y9e," \u2014 "),UP=n(y9e,"A",{href:!0});var Rct=s(UP);Nto=r(Rct,"NystromformerConfig"),Rct.forEach(t),qto=r(y9e," (Nystr\xF6mformer model)"),y9e.forEach(t),jto=i(L),mg=n(L,"LI",{});var x9e=s(mg);Tle=n(x9e,"STRONG",{});var Pct=s(Tle);Dto=r(Pct,"openai-gpt"),Pct.forEach(t),Gto=r(x9e," \u2014 "),JP=n(x9e,"A",{href:!0});var Bct=s(JP);Oto=r(Bct,"OpenAIGPTConfig"),Bct.forEach(t),Vto=r(x9e," (OpenAI GPT model)"),x9e.forEach(t),Xto=i(L),fg=n(L,"LI",{});var $9e=s(fg);Mle=n($9e,"STRONG",{});var Ict=s(Mle);zto=r(Ict,"opt"),Ict.forEach(t),Wto=r($9e," \u2014 "),YP=n($9e,"A",{href:!0});var Nct=s(YP);Qto=r(Nct,"OPTConfig"),Nct.forEach(t),Hto=r($9e," (OPT model)"),$9e.forEach(t),Uto=i(L),gg=n(L,"LI",{});var k9e=s(gg);Ele=n(k9e,"STRONG",{});var qct=s(Ele);Jto=r(qct,"owlvit"),qct.forEach(t),Yto=r(k9e," \u2014 "),KP=n(k9e,"A",{href:!0});var jct=s(KP);Kto=r(jct,"OwlViTConfig"),jct.forEach(t),Zto=r(k9e," (OWL-ViT model)"),k9e.forEach(t),eao=i(L),hg=n(L,"LI",{});var S9e=s(hg);Cle=n(S9e,"STRONG",{});var Dct=s(Cle);oao=r(Dct,"pegasus"),Dct.forEach(t),rao=r(S9e," \u2014 "),ZP=n(S9e,"A",{href:!0});var Gct=s(ZP);tao=r(Gct,"PegasusConfig"),Gct.forEach(t),aao=r(S9e," (Pegasus model)"),S9e.forEach(t),nao=i(L),ug=n(L,"LI",{});var R9e=s(ug);wle=n(R9e,"STRONG",{});var Oct=s(wle);sao=r(Oct,"perceiver"),Oct.forEach(t),lao=r(R9e," \u2014 "),eB=n(R9e,"A",{href:!0});var Vct=s(eB);iao=r(Vct,"PerceiverConfig"),Vct.forEach(t),dao=r(R9e," (Perceiver model)"),R9e.forEach(t),cao=i(L),pg=n(L,"LI",{});var P9e=s(pg);Ale=n(P9e,"STRONG",{});var Xct=s(Ale);mao=r(Xct,"plbart"),Xct.forEach(t),fao=r(P9e," \u2014 "),oB=n(P9e,"A",{href:!0});var zct=s(oB);gao=r(zct,"PLBartConfig"),zct.forEach(t),hao=r(P9e," (PLBart model)"),P9e.forEach(t),uao=i(L),_g=n(L,"LI",{});var B9e=s(_g);Lle=n(B9e,"STRONG",{});var Wct=s(Lle);pao=r(Wct,"poolformer"),Wct.forEach(t),_ao=r(B9e," \u2014 "),rB=n(B9e,"A",{href:!0});var Qct=s(rB);bao=r(Qct,"PoolFormerConfig"),Qct.forEach(t),vao=r(B9e," (PoolFormer model)"),B9e.forEach(t),Fao=i(L),bg=n(L,"LI",{});var I9e=s(bg);yle=n(I9e,"STRONG",{});var Hct=s(yle);Tao=r(Hct,"prophetnet"),Hct.forEach(t),Mao=r(I9e," \u2014 "),tB=n(I9e,"A",{href:!0});var Uct=s(tB);Eao=r(Uct,"ProphetNetConfig"),Uct.forEach(t),Cao=r(I9e," (ProphetNet model)"),I9e.forEach(t),wao=i(L),vg=n(L,"LI",{});var N9e=s(vg);xle=n(N9e,"STRONG",{});var Jct=s(xle);Aao=r(Jct,"qdqbert"),Jct.forEach(t),Lao=r(N9e," \u2014 "),aB=n(N9e,"A",{href:!0});var Yct=s(aB);yao=r(Yct,"QDQBertConfig"),Yct.forEach(t),xao=r(N9e," (QDQBert model)"),N9e.forEach(t),$ao=i(L),Fg=n(L,"LI",{});var q9e=s(Fg);$le=n(q9e,"STRONG",{});var Kct=s($le);kao=r(Kct,"rag"),Kct.forEach(t),Sao=r(q9e," \u2014 "),nB=n(q9e,"A",{href:!0});var Zct=s(nB);Rao=r(Zct,"RagConfig"),Zct.forEach(t),Pao=r(q9e," (RAG model)"),q9e.forEach(t),Bao=i(L),Tg=n(L,"LI",{});var j9e=s(Tg);kle=n(j9e,"STRONG",{});var emt=s(kle);Iao=r(emt,"realm"),emt.forEach(t),Nao=r(j9e," \u2014 "),sB=n(j9e,"A",{href:!0});var omt=s(sB);qao=r(omt,"RealmConfig"),omt.forEach(t),jao=r(j9e," (REALM model)"),j9e.forEach(t),Dao=i(L),Mg=n(L,"LI",{});var D9e=s(Mg);Sle=n(D9e,"STRONG",{});var rmt=s(Sle);Gao=r(rmt,"reformer"),rmt.forEach(t),Oao=r(D9e," \u2014 "),lB=n(D9e,"A",{href:!0});var tmt=s(lB);Vao=r(tmt,"ReformerConfig"),tmt.forEach(t),Xao=r(D9e," (Reformer model)"),D9e.forEach(t),zao=i(L),Eg=n(L,"LI",{});var G9e=s(Eg);Rle=n(G9e,"STRONG",{});var amt=s(Rle);Wao=r(amt,"regnet"),amt.forEach(t),Qao=r(G9e," \u2014 "),iB=n(G9e,"A",{href:!0});var nmt=s(iB);Hao=r(nmt,"RegNetConfig"),nmt.forEach(t),Uao=r(G9e," (RegNet model)"),G9e.forEach(t),Jao=i(L),Cg=n(L,"LI",{});var O9e=s(Cg);Ple=n(O9e,"STRONG",{});var smt=s(Ple);Yao=r(smt,"rembert"),smt.forEach(t),Kao=r(O9e," \u2014 "),dB=n(O9e,"A",{href:!0});var lmt=s(dB);Zao=r(lmt,"RemBertConfig"),lmt.forEach(t),eno=r(O9e," (RemBERT model)"),O9e.forEach(t),ono=i(L),wg=n(L,"LI",{});var V9e=s(wg);Ble=n(V9e,"STRONG",{});var imt=s(Ble);rno=r(imt,"resnet"),imt.forEach(t),tno=r(V9e," \u2014 "),cB=n(V9e,"A",{href:!0});var dmt=s(cB);ano=r(dmt,"ResNetConfig"),dmt.forEach(t),nno=r(V9e," (ResNet model)"),V9e.forEach(t),sno=i(L),Ag=n(L,"LI",{});var X9e=s(Ag);Ile=n(X9e,"STRONG",{});var cmt=s(Ile);lno=r(cmt,"retribert"),cmt.forEach(t),ino=r(X9e," \u2014 "),mB=n(X9e,"A",{href:!0});var mmt=s(mB);dno=r(mmt,"RetriBertConfig"),mmt.forEach(t),cno=r(X9e," (RetriBERT model)"),X9e.forEach(t),mno=i(L),Lg=n(L,"LI",{});var z9e=s(Lg);Nle=n(z9e,"STRONG",{});var fmt=s(Nle);fno=r(fmt,"roberta"),fmt.forEach(t),gno=r(z9e," \u2014 "),fB=n(z9e,"A",{href:!0});var gmt=s(fB);hno=r(gmt,"RobertaConfig"),gmt.forEach(t),uno=r(z9e," (RoBERTa model)"),z9e.forEach(t),pno=i(L),yg=n(L,"LI",{});var W9e=s(yg);qle=n(W9e,"STRONG",{});var hmt=s(qle);_no=r(hmt,"roformer"),hmt.forEach(t),bno=r(W9e," \u2014 "),gB=n(W9e,"A",{href:!0});var umt=s(gB);vno=r(umt,"RoFormerConfig"),umt.forEach(t),Fno=r(W9e," (RoFormer model)"),W9e.forEach(t),Tno=i(L),xg=n(L,"LI",{});var Q9e=s(xg);jle=n(Q9e,"STRONG",{});var pmt=s(jle);Mno=r(pmt,"segformer"),pmt.forEach(t),Eno=r(Q9e," \u2014 "),hB=n(Q9e,"A",{href:!0});var _mt=s(hB);Cno=r(_mt,"SegformerConfig"),_mt.forEach(t),wno=r(Q9e," (SegFormer model)"),Q9e.forEach(t),Ano=i(L),$g=n(L,"LI",{});var H9e=s($g);Dle=n(H9e,"STRONG",{});var bmt=s(Dle);Lno=r(bmt,"sew"),bmt.forEach(t),yno=r(H9e," \u2014 "),uB=n(H9e,"A",{href:!0});var vmt=s(uB);xno=r(vmt,"SEWConfig"),vmt.forEach(t),$no=r(H9e," (SEW model)"),H9e.forEach(t),kno=i(L),kg=n(L,"LI",{});var U9e=s(kg);Gle=n(U9e,"STRONG",{});var Fmt=s(Gle);Sno=r(Fmt,"sew-d"),Fmt.forEach(t),Rno=r(U9e," \u2014 "),pB=n(U9e,"A",{href:!0});var Tmt=s(pB);Pno=r(Tmt,"SEWDConfig"),Tmt.forEach(t),Bno=r(U9e," (SEW-D model)"),U9e.forEach(t),Ino=i(L),Sg=n(L,"LI",{});var J9e=s(Sg);Ole=n(J9e,"STRONG",{});var Mmt=s(Ole);Nno=r(Mmt,"speech-encoder-decoder"),Mmt.forEach(t),qno=r(J9e," \u2014 "),_B=n(J9e,"A",{href:!0});var Emt=s(_B);jno=r(Emt,"SpeechEncoderDecoderConfig"),Emt.forEach(t),Dno=r(J9e," (Speech Encoder decoder model)"),J9e.forEach(t),Gno=i(L),Rg=n(L,"LI",{});var Y9e=s(Rg);Vle=n(Y9e,"STRONG",{});var Cmt=s(Vle);Ono=r(Cmt,"speech_to_text"),Cmt.forEach(t),Vno=r(Y9e," \u2014 "),bB=n(Y9e,"A",{href:!0});var wmt=s(bB);Xno=r(wmt,"Speech2TextConfig"),wmt.forEach(t),zno=r(Y9e," (Speech2Text model)"),Y9e.forEach(t),Wno=i(L),Pg=n(L,"LI",{});var K9e=s(Pg);Xle=n(K9e,"STRONG",{});var Amt=s(Xle);Qno=r(Amt,"speech_to_text_2"),Amt.forEach(t),Hno=r(K9e," \u2014 "),vB=n(K9e,"A",{href:!0});var Lmt=s(vB);Uno=r(Lmt,"Speech2Text2Config"),Lmt.forEach(t),Jno=r(K9e," (Speech2Text2 model)"),K9e.forEach(t),Yno=i(L),Bg=n(L,"LI",{});var Z9e=s(Bg);zle=n(Z9e,"STRONG",{});var ymt=s(zle);Kno=r(ymt,"splinter"),ymt.forEach(t),Zno=r(Z9e," \u2014 "),FB=n(Z9e,"A",{href:!0});var xmt=s(FB);eso=r(xmt,"SplinterConfig"),xmt.forEach(t),oso=r(Z9e," (Splinter model)"),Z9e.forEach(t),rso=i(L),Ig=n(L,"LI",{});var exe=s(Ig);Wle=n(exe,"STRONG",{});var $mt=s(Wle);tso=r($mt,"squeezebert"),$mt.forEach(t),aso=r(exe," \u2014 "),TB=n(exe,"A",{href:!0});var kmt=s(TB);nso=r(kmt,"SqueezeBertConfig"),kmt.forEach(t),sso=r(exe," (SqueezeBERT model)"),exe.forEach(t),lso=i(L),Ng=n(L,"LI",{});var oxe=s(Ng);Qle=n(oxe,"STRONG",{});var Smt=s(Qle);iso=r(Smt,"swin"),Smt.forEach(t),dso=r(oxe," \u2014 "),MB=n(oxe,"A",{href:!0});var Rmt=s(MB);cso=r(Rmt,"SwinConfig"),Rmt.forEach(t),mso=r(oxe," (Swin Transformer model)"),oxe.forEach(t),fso=i(L),qg=n(L,"LI",{});var rxe=s(qg);Hle=n(rxe,"STRONG",{});var Pmt=s(Hle);gso=r(Pmt,"swinv2"),Pmt.forEach(t),hso=r(rxe," \u2014 "),EB=n(rxe,"A",{href:!0});var Bmt=s(EB);uso=r(Bmt,"Swinv2Config"),Bmt.forEach(t),pso=r(rxe," (Swin Transformer V2 model)"),rxe.forEach(t),_so=i(L),jg=n(L,"LI",{});var txe=s(jg);Ule=n(txe,"STRONG",{});var Imt=s(Ule);bso=r(Imt,"t5"),Imt.forEach(t),vso=r(txe," \u2014 "),CB=n(txe,"A",{href:!0});var Nmt=s(CB);Fso=r(Nmt,"T5Config"),Nmt.forEach(t),Tso=r(txe," (T5 model)"),txe.forEach(t),Mso=i(L),Dg=n(L,"LI",{});var axe=s(Dg);Jle=n(axe,"STRONG",{});var qmt=s(Jle);Eso=r(qmt,"tapas"),qmt.forEach(t),Cso=r(axe," \u2014 "),wB=n(axe,"A",{href:!0});var jmt=s(wB);wso=r(jmt,"TapasConfig"),jmt.forEach(t),Aso=r(axe," (TAPAS model)"),axe.forEach(t),Lso=i(L),Gg=n(L,"LI",{});var nxe=s(Gg);Yle=n(nxe,"STRONG",{});var Dmt=s(Yle);yso=r(Dmt,"trajectory_transformer"),Dmt.forEach(t),xso=r(nxe," \u2014 "),AB=n(nxe,"A",{href:!0});var Gmt=s(AB);$so=r(Gmt,"TrajectoryTransformerConfig"),Gmt.forEach(t),kso=r(nxe," (Trajectory Transformer model)"),nxe.forEach(t),Sso=i(L),Og=n(L,"LI",{});var sxe=s(Og);Kle=n(sxe,"STRONG",{});var Omt=s(Kle);Rso=r(Omt,"transfo-xl"),Omt.forEach(t),Pso=r(sxe," \u2014 "),LB=n(sxe,"A",{href:!0});var Vmt=s(LB);Bso=r(Vmt,"TransfoXLConfig"),Vmt.forEach(t),Iso=r(sxe," (Transformer-XL model)"),sxe.forEach(t),Nso=i(L),Vg=n(L,"LI",{});var lxe=s(Vg);Zle=n(lxe,"STRONG",{});var Xmt=s(Zle);qso=r(Xmt,"trocr"),Xmt.forEach(t),jso=r(lxe," \u2014 "),yB=n(lxe,"A",{href:!0});var zmt=s(yB);Dso=r(zmt,"TrOCRConfig"),zmt.forEach(t),Gso=r(lxe," (TrOCR model)"),lxe.forEach(t),Oso=i(L),Xg=n(L,"LI",{});var ixe=s(Xg);eie=n(ixe,"STRONG",{});var Wmt=s(eie);Vso=r(Wmt,"unispeech"),Wmt.forEach(t),Xso=r(ixe," \u2014 "),xB=n(ixe,"A",{href:!0});var Qmt=s(xB);zso=r(Qmt,"UniSpeechConfig"),Qmt.forEach(t),Wso=r(ixe," (UniSpeech model)"),ixe.forEach(t),Qso=i(L),zg=n(L,"LI",{});var dxe=s(zg);oie=n(dxe,"STRONG",{});var Hmt=s(oie);Hso=r(Hmt,"unispeech-sat"),Hmt.forEach(t),Uso=r(dxe," \u2014 "),$B=n(dxe,"A",{href:!0});var Umt=s($B);Jso=r(Umt,"UniSpeechSatConfig"),Umt.forEach(t),Yso=r(dxe," (UniSpeechSat model)"),dxe.forEach(t),Kso=i(L),Wg=n(L,"LI",{});var cxe=s(Wg);rie=n(cxe,"STRONG",{});var Jmt=s(rie);Zso=r(Jmt,"van"),Jmt.forEach(t),elo=r(cxe," \u2014 "),kB=n(cxe,"A",{href:!0});var Ymt=s(kB);olo=r(Ymt,"VanConfig"),Ymt.forEach(t),rlo=r(cxe," (VAN model)"),cxe.forEach(t),tlo=i(L),Qg=n(L,"LI",{});var mxe=s(Qg);tie=n(mxe,"STRONG",{});var Kmt=s(tie);alo=r(Kmt,"videomae"),Kmt.forEach(t),nlo=r(mxe," \u2014 "),SB=n(mxe,"A",{href:!0});var Zmt=s(SB);slo=r(Zmt,"VideoMAEConfig"),Zmt.forEach(t),llo=r(mxe," (VideoMAE model)"),mxe.forEach(t),ilo=i(L),Hg=n(L,"LI",{});var fxe=s(Hg);aie=n(fxe,"STRONG",{});var eft=s(aie);dlo=r(eft,"vilt"),eft.forEach(t),clo=r(fxe," \u2014 "),RB=n(fxe,"A",{href:!0});var oft=s(RB);mlo=r(oft,"ViltConfig"),oft.forEach(t),flo=r(fxe," (ViLT model)"),fxe.forEach(t),glo=i(L),Ug=n(L,"LI",{});var gxe=s(Ug);nie=n(gxe,"STRONG",{});var rft=s(nie);hlo=r(rft,"vision-encoder-decoder"),rft.forEach(t),ulo=r(gxe," \u2014 "),PB=n(gxe,"A",{href:!0});var tft=s(PB);plo=r(tft,"VisionEncoderDecoderConfig"),tft.forEach(t),_lo=r(gxe," (Vision Encoder decoder model)"),gxe.forEach(t),blo=i(L),Jg=n(L,"LI",{});var hxe=s(Jg);sie=n(hxe,"STRONG",{});var aft=s(sie);vlo=r(aft,"vision-text-dual-encoder"),aft.forEach(t),Flo=r(hxe," \u2014 "),BB=n(hxe,"A",{href:!0});var nft=s(BB);Tlo=r(nft,"VisionTextDualEncoderConfig"),nft.forEach(t),Mlo=r(hxe," (VisionTextDualEncoder model)"),hxe.forEach(t),Elo=i(L),Yg=n(L,"LI",{});var uxe=s(Yg);lie=n(uxe,"STRONG",{});var sft=s(lie);Clo=r(sft,"visual_bert"),sft.forEach(t),wlo=r(uxe," \u2014 "),IB=n(uxe,"A",{href:!0});var lft=s(IB);Alo=r(lft,"VisualBertConfig"),lft.forEach(t),Llo=r(uxe," (VisualBERT model)"),uxe.forEach(t),ylo=i(L),Kg=n(L,"LI",{});var pxe=s(Kg);iie=n(pxe,"STRONG",{});var ift=s(iie);xlo=r(ift,"vit"),ift.forEach(t),$lo=r(pxe," \u2014 "),NB=n(pxe,"A",{href:!0});var dft=s(NB);klo=r(dft,"ViTConfig"),dft.forEach(t),Slo=r(pxe," (ViT model)"),pxe.forEach(t),Rlo=i(L),Zg=n(L,"LI",{});var _xe=s(Zg);die=n(_xe,"STRONG",{});var cft=s(die);Plo=r(cft,"vit_mae"),cft.forEach(t),Blo=r(_xe," \u2014 "),qB=n(_xe,"A",{href:!0});var mft=s(qB);Ilo=r(mft,"ViTMAEConfig"),mft.forEach(t),Nlo=r(_xe," (ViTMAE model)"),_xe.forEach(t),qlo=i(L),eh=n(L,"LI",{});var bxe=s(eh);cie=n(bxe,"STRONG",{});var fft=s(cie);jlo=r(fft,"wav2vec2"),fft.forEach(t),Dlo=r(bxe," \u2014 "),jB=n(bxe,"A",{href:!0});var gft=s(jB);Glo=r(gft,"Wav2Vec2Config"),gft.forEach(t),Olo=r(bxe," (Wav2Vec2 model)"),bxe.forEach(t),Vlo=i(L),oh=n(L,"LI",{});var vxe=s(oh);mie=n(vxe,"STRONG",{});var hft=s(mie);Xlo=r(hft,"wav2vec2-conformer"),hft.forEach(t),zlo=r(vxe," \u2014 "),DB=n(vxe,"A",{href:!0});var uft=s(DB);Wlo=r(uft,"Wav2Vec2ConformerConfig"),uft.forEach(t),Qlo=r(vxe," (Wav2Vec2-Conformer model)"),vxe.forEach(t),Hlo=i(L),rh=n(L,"LI",{});var Fxe=s(rh);fie=n(Fxe,"STRONG",{});var pft=s(fie);Ulo=r(pft,"wavlm"),pft.forEach(t),Jlo=r(Fxe," \u2014 "),GB=n(Fxe,"A",{href:!0});var _ft=s(GB);Ylo=r(_ft,"WavLMConfig"),_ft.forEach(t),Klo=r(Fxe," (WavLM model)"),Fxe.forEach(t),Zlo=i(L),th=n(L,"LI",{});var Txe=s(th);gie=n(Txe,"STRONG",{});var bft=s(gie);eio=r(bft,"xglm"),bft.forEach(t),oio=r(Txe," \u2014 "),OB=n(Txe,"A",{href:!0});var vft=s(OB);rio=r(vft,"XGLMConfig"),vft.forEach(t),tio=r(Txe," (XGLM model)"),Txe.forEach(t),aio=i(L),ah=n(L,"LI",{});var Mxe=s(ah);hie=n(Mxe,"STRONG",{});var Fft=s(hie);nio=r(Fft,"xlm"),Fft.forEach(t),sio=r(Mxe," \u2014 "),VB=n(Mxe,"A",{href:!0});var Tft=s(VB);lio=r(Tft,"XLMConfig"),Tft.forEach(t),iio=r(Mxe," (XLM model)"),Mxe.forEach(t),dio=i(L),nh=n(L,"LI",{});var Exe=s(nh);uie=n(Exe,"STRONG",{});var Mft=s(uie);cio=r(Mft,"xlm-prophetnet"),Mft.forEach(t),mio=r(Exe," \u2014 "),XB=n(Exe,"A",{href:!0});var Eft=s(XB);fio=r(Eft,"XLMProphetNetConfig"),Eft.forEach(t),gio=r(Exe," (XLM-ProphetNet model)"),Exe.forEach(t),hio=i(L),sh=n(L,"LI",{});var Cxe=s(sh);pie=n(Cxe,"STRONG",{});var Cft=s(pie);uio=r(Cft,"xlm-roberta"),Cft.forEach(t),pio=r(Cxe," \u2014 "),zB=n(Cxe,"A",{href:!0});var wft=s(zB);_io=r(wft,"XLMRobertaConfig"),wft.forEach(t),bio=r(Cxe," (XLM-RoBERTa model)"),Cxe.forEach(t),vio=i(L),lh=n(L,"LI",{});var wxe=s(lh);_ie=n(wxe,"STRONG",{});var Aft=s(_ie);Fio=r(Aft,"xlm-roberta-xl"),Aft.forEach(t),Tio=r(wxe," \u2014 "),WB=n(wxe,"A",{href:!0});var Lft=s(WB);Mio=r(Lft,"XLMRobertaXLConfig"),Lft.forEach(t),Eio=r(wxe," (XLM-RoBERTa-XL model)"),wxe.forEach(t),Cio=i(L),ih=n(L,"LI",{});var Axe=s(ih);bie=n(Axe,"STRONG",{});var yft=s(bie);wio=r(yft,"xlnet"),yft.forEach(t),Aio=r(Axe," \u2014 "),QB=n(Axe,"A",{href:!0});var xft=s(QB);Lio=r(xft,"XLNetConfig"),xft.forEach(t),yio=r(Axe," (XLNet model)"),Axe.forEach(t),xio=i(L),dh=n(L,"LI",{});var Lxe=s(dh);vie=n(Lxe,"STRONG",{});var $ft=s(vie);$io=r($ft,"yolos"),$ft.forEach(t),kio=r(Lxe," \u2014 "),HB=n(Lxe,"A",{href:!0});var kft=s(HB);Sio=r(kft,"YolosConfig"),kft.forEach(t),Rio=r(Lxe," (YOLOS model)"),Lxe.forEach(t),Pio=i(L),ch=n(L,"LI",{});var yxe=s(ch);Fie=n(yxe,"STRONG",{});var Sft=s(Fie);Bio=r(Sft,"yoso"),Sft.forEach(t),Iio=r(yxe," \u2014 "),UB=n(yxe,"A",{href:!0});var Rft=s(UB);Nio=r(Rft,"YosoConfig"),Rft.forEach(t),qio=r(yxe," (YOSO model)"),yxe.forEach(t),L.forEach(t),jio=i(it),T(mh.$$.fragment,it),it.forEach(t),Dio=i(lt),fh=n(lt,"DIV",{class:!0});var VHe=s(fh);T(Zy.$$.fragment,VHe),Gio=i(VHe),Tie=n(VHe,"P",{});var Pft=s(Tie);Oio=r(Pft,"Register a new configuration for this class."),Pft.forEach(t),VHe.forEach(t),lt.forEach(t),OWe=i(m),Wi=n(m,"H2",{class:!0});var XHe=s(Wi);gh=n(XHe,"A",{id:!0,class:!0,href:!0});var Bft=s(gh);Mie=n(Bft,"SPAN",{});var Ift=s(Mie);T(e8.$$.fragment,Ift),Ift.forEach(t),Bft.forEach(t),Vio=i(XHe),Eie=n(XHe,"SPAN",{});var Nft=s(Eie);Xio=r(Nft,"AutoTokenizer"),Nft.forEach(t),XHe.forEach(t),VWe=i(m),xo=n(m,"DIV",{class:!0});var sl=s(xo);T(o8.$$.fragment,sl),zio=i(sl),r8=n(sl,"P",{});var zHe=s(r8);Wio=r(zHe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JB=n(zHe,"A",{href:!0});var qft=s(JB);Qio=r(qft,"AutoTokenizer.from_pretrained()"),qft.forEach(t),Hio=r(zHe," class method."),zHe.forEach(t),Uio=i(sl),t8=n(sl,"P",{});var WHe=s(t8);Jio=r(WHe,"This class cannot be instantiated directly using "),Cie=n(WHe,"CODE",{});var jft=s(Cie);Yio=r(jft,"__init__()"),jft.forEach(t),Kio=r(WHe," (throws an error)."),WHe.forEach(t),Zio=i(sl),kr=n(sl,"DIV",{class:!0});var ll=s(kr);T(a8.$$.fragment,ll),edo=i(ll),wie=n(ll,"P",{});var Dft=s(wie);odo=r(Dft,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Dft.forEach(t),rdo=i(ll),qa=n(ll,"P",{});var z7=s(qa);tdo=r(z7,"The tokenizer class to instantiate is selected based on the "),Aie=n(z7,"CODE",{});var Gft=s(Aie);ado=r(Gft,"model_type"),Gft.forEach(t),ndo=r(z7,` property of the config object (either
passed as an argument or loaded from `),Lie=n(z7,"CODE",{});var Oft=s(Lie);sdo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),ldo=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(z7,"CODE",{});var Vft=s(yie);ido=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),ddo=r(z7,":"),z7.forEach(t),cdo=i(ll),k=n(ll,"UL",{});var S=s(k);zn=n(S,"LI",{});var uS=s(zn);xie=n(uS,"STRONG",{});var Xft=s(xie);mdo=r(Xft,"albert"),Xft.forEach(t),fdo=r(uS," \u2014 "),YB=n(uS,"A",{href:!0});var zft=s(YB);gdo=r(zft,"AlbertTokenizer"),zft.forEach(t),hdo=r(uS," or "),KB=n(uS,"A",{href:!0});var Wft=s(KB);udo=r(Wft,"AlbertTokenizerFast"),Wft.forEach(t),pdo=r(uS," (ALBERT model)"),uS.forEach(t),_do=i(S),Wn=n(S,"LI",{});var pS=s(Wn);$ie=n(pS,"STRONG",{});var Qft=s($ie);bdo=r(Qft,"bart"),Qft.forEach(t),vdo=r(pS," \u2014 "),ZB=n(pS,"A",{href:!0});var Hft=s(ZB);Fdo=r(Hft,"BartTokenizer"),Hft.forEach(t),Tdo=r(pS," or "),eI=n(pS,"A",{href:!0});var Uft=s(eI);Mdo=r(Uft,"BartTokenizerFast"),Uft.forEach(t),Edo=r(pS," (BART model)"),pS.forEach(t),Cdo=i(S),Qn=n(S,"LI",{});var _S=s(Qn);kie=n(_S,"STRONG",{});var Jft=s(kie);wdo=r(Jft,"barthez"),Jft.forEach(t),Ado=r(_S," \u2014 "),oI=n(_S,"A",{href:!0});var Yft=s(oI);Ldo=r(Yft,"BarthezTokenizer"),Yft.forEach(t),ydo=r(_S," or "),rI=n(_S,"A",{href:!0});var Kft=s(rI);xdo=r(Kft,"BarthezTokenizerFast"),Kft.forEach(t),$do=r(_S," (BARThez model)"),_S.forEach(t),kdo=i(S),hh=n(S,"LI",{});var xxe=s(hh);Sie=n(xxe,"STRONG",{});var Zft=s(Sie);Sdo=r(Zft,"bartpho"),Zft.forEach(t),Rdo=r(xxe," \u2014 "),tI=n(xxe,"A",{href:!0});var egt=s(tI);Pdo=r(egt,"BartphoTokenizer"),egt.forEach(t),Bdo=r(xxe," (BARTpho model)"),xxe.forEach(t),Ido=i(S),Hn=n(S,"LI",{});var bS=s(Hn);Rie=n(bS,"STRONG",{});var ogt=s(Rie);Ndo=r(ogt,"bert"),ogt.forEach(t),qdo=r(bS," \u2014 "),aI=n(bS,"A",{href:!0});var rgt=s(aI);jdo=r(rgt,"BertTokenizer"),rgt.forEach(t),Ddo=r(bS," or "),nI=n(bS,"A",{href:!0});var tgt=s(nI);Gdo=r(tgt,"BertTokenizerFast"),tgt.forEach(t),Odo=r(bS," (BERT model)"),bS.forEach(t),Vdo=i(S),uh=n(S,"LI",{});var $xe=s(uh);Pie=n($xe,"STRONG",{});var agt=s(Pie);Xdo=r(agt,"bert-generation"),agt.forEach(t),zdo=r($xe," \u2014 "),sI=n($xe,"A",{href:!0});var ngt=s(sI);Wdo=r(ngt,"BertGenerationTokenizer"),ngt.forEach(t),Qdo=r($xe," (Bert Generation model)"),$xe.forEach(t),Hdo=i(S),ph=n(S,"LI",{});var kxe=s(ph);Bie=n(kxe,"STRONG",{});var sgt=s(Bie);Udo=r(sgt,"bert-japanese"),sgt.forEach(t),Jdo=r(kxe," \u2014 "),lI=n(kxe,"A",{href:!0});var lgt=s(lI);Ydo=r(lgt,"BertJapaneseTokenizer"),lgt.forEach(t),Kdo=r(kxe," (BertJapanese model)"),kxe.forEach(t),Zdo=i(S),_h=n(S,"LI",{});var Sxe=s(_h);Iie=n(Sxe,"STRONG",{});var igt=s(Iie);eco=r(igt,"bertweet"),igt.forEach(t),oco=r(Sxe," \u2014 "),iI=n(Sxe,"A",{href:!0});var dgt=s(iI);rco=r(dgt,"BertweetTokenizer"),dgt.forEach(t),tco=r(Sxe," (BERTweet model)"),Sxe.forEach(t),aco=i(S),Un=n(S,"LI",{});var vS=s(Un);Nie=n(vS,"STRONG",{});var cgt=s(Nie);nco=r(cgt,"big_bird"),cgt.forEach(t),sco=r(vS," \u2014 "),dI=n(vS,"A",{href:!0});var mgt=s(dI);lco=r(mgt,"BigBirdTokenizer"),mgt.forEach(t),ico=r(vS," or "),cI=n(vS,"A",{href:!0});var fgt=s(cI);dco=r(fgt,"BigBirdTokenizerFast"),fgt.forEach(t),cco=r(vS," (BigBird model)"),vS.forEach(t),mco=i(S),Jn=n(S,"LI",{});var FS=s(Jn);qie=n(FS,"STRONG",{});var ggt=s(qie);fco=r(ggt,"bigbird_pegasus"),ggt.forEach(t),gco=r(FS," \u2014 "),mI=n(FS,"A",{href:!0});var hgt=s(mI);hco=r(hgt,"PegasusTokenizer"),hgt.forEach(t),uco=r(FS," or "),fI=n(FS,"A",{href:!0});var ugt=s(fI);pco=r(ugt,"PegasusTokenizerFast"),ugt.forEach(t),_co=r(FS," (BigBird-Pegasus model)"),FS.forEach(t),bco=i(S),Yn=n(S,"LI",{});var TS=s(Yn);jie=n(TS,"STRONG",{});var pgt=s(jie);vco=r(pgt,"blenderbot"),pgt.forEach(t),Fco=r(TS," \u2014 "),gI=n(TS,"A",{href:!0});var _gt=s(gI);Tco=r(_gt,"BlenderbotTokenizer"),_gt.forEach(t),Mco=r(TS," or "),hI=n(TS,"A",{href:!0});var bgt=s(hI);Eco=r(bgt,"BlenderbotTokenizerFast"),bgt.forEach(t),Cco=r(TS," (Blenderbot model)"),TS.forEach(t),wco=i(S),bh=n(S,"LI",{});var Rxe=s(bh);Die=n(Rxe,"STRONG",{});var vgt=s(Die);Aco=r(vgt,"blenderbot-small"),vgt.forEach(t),Lco=r(Rxe," \u2014 "),uI=n(Rxe,"A",{href:!0});var Fgt=s(uI);yco=r(Fgt,"BlenderbotSmallTokenizer"),Fgt.forEach(t),xco=r(Rxe," (BlenderbotSmall model)"),Rxe.forEach(t),$co=i(S),vh=n(S,"LI",{});var Pxe=s(vh);Gie=n(Pxe,"STRONG",{});var Tgt=s(Gie);kco=r(Tgt,"bloom"),Tgt.forEach(t),Sco=r(Pxe," \u2014 "),pI=n(Pxe,"A",{href:!0});var Mgt=s(pI);Rco=r(Mgt,"BloomTokenizerFast"),Mgt.forEach(t),Pco=r(Pxe," (BLOOM model)"),Pxe.forEach(t),Bco=i(S),Fh=n(S,"LI",{});var Bxe=s(Fh);Oie=n(Bxe,"STRONG",{});var Egt=s(Oie);Ico=r(Egt,"byt5"),Egt.forEach(t),Nco=r(Bxe," \u2014 "),_I=n(Bxe,"A",{href:!0});var Cgt=s(_I);qco=r(Cgt,"ByT5Tokenizer"),Cgt.forEach(t),jco=r(Bxe," (ByT5 model)"),Bxe.forEach(t),Dco=i(S),Kn=n(S,"LI",{});var MS=s(Kn);Vie=n(MS,"STRONG",{});var wgt=s(Vie);Gco=r(wgt,"camembert"),wgt.forEach(t),Oco=r(MS," \u2014 "),bI=n(MS,"A",{href:!0});var Agt=s(bI);Vco=r(Agt,"CamembertTokenizer"),Agt.forEach(t),Xco=r(MS," or "),vI=n(MS,"A",{href:!0});var Lgt=s(vI);zco=r(Lgt,"CamembertTokenizerFast"),Lgt.forEach(t),Wco=r(MS," (CamemBERT model)"),MS.forEach(t),Qco=i(S),Th=n(S,"LI",{});var Ixe=s(Th);Xie=n(Ixe,"STRONG",{});var ygt=s(Xie);Hco=r(ygt,"canine"),ygt.forEach(t),Uco=r(Ixe," \u2014 "),FI=n(Ixe,"A",{href:!0});var xgt=s(FI);Jco=r(xgt,"CanineTokenizer"),xgt.forEach(t),Yco=r(Ixe," (CANINE model)"),Ixe.forEach(t),Kco=i(S),Zn=n(S,"LI",{});var ES=s(Zn);zie=n(ES,"STRONG",{});var $gt=s(zie);Zco=r($gt,"clip"),$gt.forEach(t),emo=r(ES," \u2014 "),TI=n(ES,"A",{href:!0});var kgt=s(TI);omo=r(kgt,"CLIPTokenizer"),kgt.forEach(t),rmo=r(ES," or "),MI=n(ES,"A",{href:!0});var Sgt=s(MI);tmo=r(Sgt,"CLIPTokenizerFast"),Sgt.forEach(t),amo=r(ES," (CLIP model)"),ES.forEach(t),nmo=i(S),es=n(S,"LI",{});var CS=s(es);Wie=n(CS,"STRONG",{});var Rgt=s(Wie);smo=r(Rgt,"codegen"),Rgt.forEach(t),lmo=r(CS," \u2014 "),EI=n(CS,"A",{href:!0});var Pgt=s(EI);imo=r(Pgt,"CodeGenTokenizer"),Pgt.forEach(t),dmo=r(CS," or "),CI=n(CS,"A",{href:!0});var Bgt=s(CI);cmo=r(Bgt,"CodeGenTokenizerFast"),Bgt.forEach(t),mmo=r(CS," (CodeGen model)"),CS.forEach(t),fmo=i(S),os=n(S,"LI",{});var wS=s(os);Qie=n(wS,"STRONG",{});var Igt=s(Qie);gmo=r(Igt,"convbert"),Igt.forEach(t),hmo=r(wS," \u2014 "),wI=n(wS,"A",{href:!0});var Ngt=s(wI);umo=r(Ngt,"ConvBertTokenizer"),Ngt.forEach(t),pmo=r(wS," or "),AI=n(wS,"A",{href:!0});var qgt=s(AI);_mo=r(qgt,"ConvBertTokenizerFast"),qgt.forEach(t),bmo=r(wS," (ConvBERT model)"),wS.forEach(t),vmo=i(S),rs=n(S,"LI",{});var AS=s(rs);Hie=n(AS,"STRONG",{});var jgt=s(Hie);Fmo=r(jgt,"cpm"),jgt.forEach(t),Tmo=r(AS," \u2014 "),LI=n(AS,"A",{href:!0});var Dgt=s(LI);Mmo=r(Dgt,"CpmTokenizer"),Dgt.forEach(t),Emo=r(AS," or "),yI=n(AS,"A",{href:!0});var Ggt=s(yI);Cmo=r(Ggt,"CpmTokenizerFast"),Ggt.forEach(t),wmo=r(AS," (CPM model)"),AS.forEach(t),Amo=i(S),Mh=n(S,"LI",{});var Nxe=s(Mh);Uie=n(Nxe,"STRONG",{});var Ogt=s(Uie);Lmo=r(Ogt,"ctrl"),Ogt.forEach(t),ymo=r(Nxe," \u2014 "),xI=n(Nxe,"A",{href:!0});var Vgt=s(xI);xmo=r(Vgt,"CTRLTokenizer"),Vgt.forEach(t),$mo=r(Nxe," (CTRL model)"),Nxe.forEach(t),kmo=i(S),ts=n(S,"LI",{});var LS=s(ts);Jie=n(LS,"STRONG",{});var Xgt=s(Jie);Smo=r(Xgt,"data2vec-text"),Xgt.forEach(t),Rmo=r(LS," \u2014 "),$I=n(LS,"A",{href:!0});var zgt=s($I);Pmo=r(zgt,"RobertaTokenizer"),zgt.forEach(t),Bmo=r(LS," or "),kI=n(LS,"A",{href:!0});var Wgt=s(kI);Imo=r(Wgt,"RobertaTokenizerFast"),Wgt.forEach(t),Nmo=r(LS," (Data2VecText model)"),LS.forEach(t),qmo=i(S),as=n(S,"LI",{});var yS=s(as);Yie=n(yS,"STRONG",{});var Qgt=s(Yie);jmo=r(Qgt,"deberta"),Qgt.forEach(t),Dmo=r(yS," \u2014 "),SI=n(yS,"A",{href:!0});var Hgt=s(SI);Gmo=r(Hgt,"DebertaTokenizer"),Hgt.forEach(t),Omo=r(yS," or "),RI=n(yS,"A",{href:!0});var Ugt=s(RI);Vmo=r(Ugt,"DebertaTokenizerFast"),Ugt.forEach(t),Xmo=r(yS," (DeBERTa model)"),yS.forEach(t),zmo=i(S),ns=n(S,"LI",{});var xS=s(ns);Kie=n(xS,"STRONG",{});var Jgt=s(Kie);Wmo=r(Jgt,"deberta-v2"),Jgt.forEach(t),Qmo=r(xS," \u2014 "),PI=n(xS,"A",{href:!0});var Ygt=s(PI);Hmo=r(Ygt,"DebertaV2Tokenizer"),Ygt.forEach(t),Umo=r(xS," or "),BI=n(xS,"A",{href:!0});var Kgt=s(BI);Jmo=r(Kgt,"DebertaV2TokenizerFast"),Kgt.forEach(t),Ymo=r(xS," (DeBERTa-v2 model)"),xS.forEach(t),Kmo=i(S),ss=n(S,"LI",{});var $S=s(ss);Zie=n($S,"STRONG",{});var Zgt=s(Zie);Zmo=r(Zgt,"distilbert"),Zgt.forEach(t),efo=r($S," \u2014 "),II=n($S,"A",{href:!0});var eht=s(II);ofo=r(eht,"DistilBertTokenizer"),eht.forEach(t),rfo=r($S," or "),NI=n($S,"A",{href:!0});var oht=s(NI);tfo=r(oht,"DistilBertTokenizerFast"),oht.forEach(t),afo=r($S," (DistilBERT model)"),$S.forEach(t),nfo=i(S),ls=n(S,"LI",{});var kS=s(ls);ede=n(kS,"STRONG",{});var rht=s(ede);sfo=r(rht,"dpr"),rht.forEach(t),lfo=r(kS," \u2014 "),qI=n(kS,"A",{href:!0});var tht=s(qI);ifo=r(tht,"DPRQuestionEncoderTokenizer"),tht.forEach(t),dfo=r(kS," or "),jI=n(kS,"A",{href:!0});var aht=s(jI);cfo=r(aht,"DPRQuestionEncoderTokenizerFast"),aht.forEach(t),mfo=r(kS," (DPR model)"),kS.forEach(t),ffo=i(S),is=n(S,"LI",{});var SS=s(is);ode=n(SS,"STRONG",{});var nht=s(ode);gfo=r(nht,"electra"),nht.forEach(t),hfo=r(SS," \u2014 "),DI=n(SS,"A",{href:!0});var sht=s(DI);ufo=r(sht,"ElectraTokenizer"),sht.forEach(t),pfo=r(SS," or "),GI=n(SS,"A",{href:!0});var lht=s(GI);_fo=r(lht,"ElectraTokenizerFast"),lht.forEach(t),bfo=r(SS," (ELECTRA model)"),SS.forEach(t),vfo=i(S),Eh=n(S,"LI",{});var qxe=s(Eh);rde=n(qxe,"STRONG",{});var iht=s(rde);Ffo=r(iht,"flaubert"),iht.forEach(t),Tfo=r(qxe," \u2014 "),OI=n(qxe,"A",{href:!0});var dht=s(OI);Mfo=r(dht,"FlaubertTokenizer"),dht.forEach(t),Efo=r(qxe," (FlauBERT model)"),qxe.forEach(t),Cfo=i(S),ds=n(S,"LI",{});var RS=s(ds);tde=n(RS,"STRONG",{});var cht=s(tde);wfo=r(cht,"fnet"),cht.forEach(t),Afo=r(RS," \u2014 "),VI=n(RS,"A",{href:!0});var mht=s(VI);Lfo=r(mht,"FNetTokenizer"),mht.forEach(t),yfo=r(RS," or "),XI=n(RS,"A",{href:!0});var fht=s(XI);xfo=r(fht,"FNetTokenizerFast"),fht.forEach(t),$fo=r(RS," (FNet model)"),RS.forEach(t),kfo=i(S),Ch=n(S,"LI",{});var jxe=s(Ch);ade=n(jxe,"STRONG",{});var ght=s(ade);Sfo=r(ght,"fsmt"),ght.forEach(t),Rfo=r(jxe," \u2014 "),zI=n(jxe,"A",{href:!0});var hht=s(zI);Pfo=r(hht,"FSMTTokenizer"),hht.forEach(t),Bfo=r(jxe," (FairSeq Machine-Translation model)"),jxe.forEach(t),Ifo=i(S),cs=n(S,"LI",{});var PS=s(cs);nde=n(PS,"STRONG",{});var uht=s(nde);Nfo=r(uht,"funnel"),uht.forEach(t),qfo=r(PS," \u2014 "),WI=n(PS,"A",{href:!0});var pht=s(WI);jfo=r(pht,"FunnelTokenizer"),pht.forEach(t),Dfo=r(PS," or "),QI=n(PS,"A",{href:!0});var _ht=s(QI);Gfo=r(_ht,"FunnelTokenizerFast"),_ht.forEach(t),Ofo=r(PS," (Funnel Transformer model)"),PS.forEach(t),Vfo=i(S),ms=n(S,"LI",{});var BS=s(ms);sde=n(BS,"STRONG",{});var bht=s(sde);Xfo=r(bht,"gpt2"),bht.forEach(t),zfo=r(BS," \u2014 "),HI=n(BS,"A",{href:!0});var vht=s(HI);Wfo=r(vht,"GPT2Tokenizer"),vht.forEach(t),Qfo=r(BS," or "),UI=n(BS,"A",{href:!0});var Fht=s(UI);Hfo=r(Fht,"GPT2TokenizerFast"),Fht.forEach(t),Ufo=r(BS," (OpenAI GPT-2 model)"),BS.forEach(t),Jfo=i(S),fs=n(S,"LI",{});var IS=s(fs);lde=n(IS,"STRONG",{});var Tht=s(lde);Yfo=r(Tht,"gpt_neo"),Tht.forEach(t),Kfo=r(IS," \u2014 "),JI=n(IS,"A",{href:!0});var Mht=s(JI);Zfo=r(Mht,"GPT2Tokenizer"),Mht.forEach(t),ego=r(IS," or "),YI=n(IS,"A",{href:!0});var Eht=s(YI);ogo=r(Eht,"GPT2TokenizerFast"),Eht.forEach(t),rgo=r(IS," (GPT Neo model)"),IS.forEach(t),tgo=i(S),wh=n(S,"LI",{});var Dxe=s(wh);ide=n(Dxe,"STRONG",{});var Cht=s(ide);ago=r(Cht,"gpt_neox"),Cht.forEach(t),ngo=r(Dxe," \u2014 "),KI=n(Dxe,"A",{href:!0});var wht=s(KI);sgo=r(wht,"GPTNeoXTokenizerFast"),wht.forEach(t),lgo=r(Dxe," (GPT NeoX model)"),Dxe.forEach(t),igo=i(S),gs=n(S,"LI",{});var NS=s(gs);dde=n(NS,"STRONG",{});var Aht=s(dde);dgo=r(Aht,"gptj"),Aht.forEach(t),cgo=r(NS," \u2014 "),ZI=n(NS,"A",{href:!0});var Lht=s(ZI);mgo=r(Lht,"GPT2Tokenizer"),Lht.forEach(t),fgo=r(NS," or "),eN=n(NS,"A",{href:!0});var yht=s(eN);ggo=r(yht,"GPT2TokenizerFast"),yht.forEach(t),hgo=r(NS," (GPT-J model)"),NS.forEach(t),ugo=i(S),hs=n(S,"LI",{});var qS=s(hs);cde=n(qS,"STRONG",{});var xht=s(cde);pgo=r(xht,"groupvit"),xht.forEach(t),_go=r(qS," \u2014 "),oN=n(qS,"A",{href:!0});var $ht=s(oN);bgo=r($ht,"CLIPTokenizer"),$ht.forEach(t),vgo=r(qS," or "),rN=n(qS,"A",{href:!0});var kht=s(rN);Fgo=r(kht,"CLIPTokenizerFast"),kht.forEach(t),Tgo=r(qS," (GroupViT model)"),qS.forEach(t),Mgo=i(S),us=n(S,"LI",{});var jS=s(us);mde=n(jS,"STRONG",{});var Sht=s(mde);Ego=r(Sht,"herbert"),Sht.forEach(t),Cgo=r(jS," \u2014 "),tN=n(jS,"A",{href:!0});var Rht=s(tN);wgo=r(Rht,"HerbertTokenizer"),Rht.forEach(t),Ago=r(jS," or "),aN=n(jS,"A",{href:!0});var Pht=s(aN);Lgo=r(Pht,"HerbertTokenizerFast"),Pht.forEach(t),ygo=r(jS," (HerBERT model)"),jS.forEach(t),xgo=i(S),Ah=n(S,"LI",{});var Gxe=s(Ah);fde=n(Gxe,"STRONG",{});var Bht=s(fde);$go=r(Bht,"hubert"),Bht.forEach(t),kgo=r(Gxe," \u2014 "),nN=n(Gxe,"A",{href:!0});var Iht=s(nN);Sgo=r(Iht,"Wav2Vec2CTCTokenizer"),Iht.forEach(t),Rgo=r(Gxe," (Hubert model)"),Gxe.forEach(t),Pgo=i(S),ps=n(S,"LI",{});var DS=s(ps);gde=n(DS,"STRONG",{});var Nht=s(gde);Bgo=r(Nht,"ibert"),Nht.forEach(t),Igo=r(DS," \u2014 "),sN=n(DS,"A",{href:!0});var qht=s(sN);Ngo=r(qht,"RobertaTokenizer"),qht.forEach(t),qgo=r(DS," or "),lN=n(DS,"A",{href:!0});var jht=s(lN);jgo=r(jht,"RobertaTokenizerFast"),jht.forEach(t),Dgo=r(DS," (I-BERT model)"),DS.forEach(t),Ggo=i(S),_s=n(S,"LI",{});var GS=s(_s);hde=n(GS,"STRONG",{});var Dht=s(hde);Ogo=r(Dht,"layoutlm"),Dht.forEach(t),Vgo=r(GS," \u2014 "),iN=n(GS,"A",{href:!0});var Ght=s(iN);Xgo=r(Ght,"LayoutLMTokenizer"),Ght.forEach(t),zgo=r(GS," or "),dN=n(GS,"A",{href:!0});var Oht=s(dN);Wgo=r(Oht,"LayoutLMTokenizerFast"),Oht.forEach(t),Qgo=r(GS," (LayoutLM model)"),GS.forEach(t),Hgo=i(S),bs=n(S,"LI",{});var OS=s(bs);ude=n(OS,"STRONG",{});var Vht=s(ude);Ugo=r(Vht,"layoutlmv2"),Vht.forEach(t),Jgo=r(OS," \u2014 "),cN=n(OS,"A",{href:!0});var Xht=s(cN);Ygo=r(Xht,"LayoutLMv2Tokenizer"),Xht.forEach(t),Kgo=r(OS," or "),mN=n(OS,"A",{href:!0});var zht=s(mN);Zgo=r(zht,"LayoutLMv2TokenizerFast"),zht.forEach(t),eho=r(OS," (LayoutLMv2 model)"),OS.forEach(t),oho=i(S),vs=n(S,"LI",{});var VS=s(vs);pde=n(VS,"STRONG",{});var Wht=s(pde);rho=r(Wht,"layoutlmv3"),Wht.forEach(t),tho=r(VS," \u2014 "),fN=n(VS,"A",{href:!0});var Qht=s(fN);aho=r(Qht,"LayoutLMv3Tokenizer"),Qht.forEach(t),nho=r(VS," or "),gN=n(VS,"A",{href:!0});var Hht=s(gN);sho=r(Hht,"LayoutLMv3TokenizerFast"),Hht.forEach(t),lho=r(VS," (LayoutLMv3 model)"),VS.forEach(t),iho=i(S),Fs=n(S,"LI",{});var XS=s(Fs);_de=n(XS,"STRONG",{});var Uht=s(_de);dho=r(Uht,"layoutxlm"),Uht.forEach(t),cho=r(XS," \u2014 "),hN=n(XS,"A",{href:!0});var Jht=s(hN);mho=r(Jht,"LayoutXLMTokenizer"),Jht.forEach(t),fho=r(XS," or "),uN=n(XS,"A",{href:!0});var Yht=s(uN);gho=r(Yht,"LayoutXLMTokenizerFast"),Yht.forEach(t),hho=r(XS," (LayoutXLM model)"),XS.forEach(t),uho=i(S),Ts=n(S,"LI",{});var zS=s(Ts);bde=n(zS,"STRONG",{});var Kht=s(bde);pho=r(Kht,"led"),Kht.forEach(t),_ho=r(zS," \u2014 "),pN=n(zS,"A",{href:!0});var Zht=s(pN);bho=r(Zht,"LEDTokenizer"),Zht.forEach(t),vho=r(zS," or "),_N=n(zS,"A",{href:!0});var eut=s(_N);Fho=r(eut,"LEDTokenizerFast"),eut.forEach(t),Tho=r(zS," (LED model)"),zS.forEach(t),Mho=i(S),Ms=n(S,"LI",{});var WS=s(Ms);vde=n(WS,"STRONG",{});var out=s(vde);Eho=r(out,"longformer"),out.forEach(t),Cho=r(WS," \u2014 "),bN=n(WS,"A",{href:!0});var rut=s(bN);who=r(rut,"LongformerTokenizer"),rut.forEach(t),Aho=r(WS," or "),vN=n(WS,"A",{href:!0});var tut=s(vN);Lho=r(tut,"LongformerTokenizerFast"),tut.forEach(t),yho=r(WS," (Longformer model)"),WS.forEach(t),xho=i(S),Es=n(S,"LI",{});var QS=s(Es);Fde=n(QS,"STRONG",{});var aut=s(Fde);$ho=r(aut,"longt5"),aut.forEach(t),kho=r(QS," \u2014 "),FN=n(QS,"A",{href:!0});var nut=s(FN);Sho=r(nut,"T5Tokenizer"),nut.forEach(t),Rho=r(QS," or "),TN=n(QS,"A",{href:!0});var sut=s(TN);Pho=r(sut,"T5TokenizerFast"),sut.forEach(t),Bho=r(QS," (LongT5 model)"),QS.forEach(t),Iho=i(S),Lh=n(S,"LI",{});var Oxe=s(Lh);Tde=n(Oxe,"STRONG",{});var lut=s(Tde);Nho=r(lut,"luke"),lut.forEach(t),qho=r(Oxe," \u2014 "),MN=n(Oxe,"A",{href:!0});var iut=s(MN);jho=r(iut,"LukeTokenizer"),iut.forEach(t),Dho=r(Oxe," (LUKE model)"),Oxe.forEach(t),Gho=i(S),Cs=n(S,"LI",{});var HS=s(Cs);Mde=n(HS,"STRONG",{});var dut=s(Mde);Oho=r(dut,"lxmert"),dut.forEach(t),Vho=r(HS," \u2014 "),EN=n(HS,"A",{href:!0});var cut=s(EN);Xho=r(cut,"LxmertTokenizer"),cut.forEach(t),zho=r(HS," or "),CN=n(HS,"A",{href:!0});var mut=s(CN);Who=r(mut,"LxmertTokenizerFast"),mut.forEach(t),Qho=r(HS," (LXMERT model)"),HS.forEach(t),Hho=i(S),yh=n(S,"LI",{});var Vxe=s(yh);Ede=n(Vxe,"STRONG",{});var fut=s(Ede);Uho=r(fut,"m2m_100"),fut.forEach(t),Jho=r(Vxe," \u2014 "),wN=n(Vxe,"A",{href:!0});var gut=s(wN);Yho=r(gut,"M2M100Tokenizer"),gut.forEach(t),Kho=r(Vxe," (M2M100 model)"),Vxe.forEach(t),Zho=i(S),xh=n(S,"LI",{});var Xxe=s(xh);Cde=n(Xxe,"STRONG",{});var hut=s(Cde);euo=r(hut,"marian"),hut.forEach(t),ouo=r(Xxe," \u2014 "),AN=n(Xxe,"A",{href:!0});var uut=s(AN);ruo=r(uut,"MarianTokenizer"),uut.forEach(t),tuo=r(Xxe," (Marian model)"),Xxe.forEach(t),auo=i(S),ws=n(S,"LI",{});var US=s(ws);wde=n(US,"STRONG",{});var put=s(wde);nuo=r(put,"mbart"),put.forEach(t),suo=r(US," \u2014 "),LN=n(US,"A",{href:!0});var _ut=s(LN);luo=r(_ut,"MBartTokenizer"),_ut.forEach(t),iuo=r(US," or "),yN=n(US,"A",{href:!0});var but=s(yN);duo=r(but,"MBartTokenizerFast"),but.forEach(t),cuo=r(US," (mBART model)"),US.forEach(t),muo=i(S),As=n(S,"LI",{});var JS=s(As);Ade=n(JS,"STRONG",{});var vut=s(Ade);fuo=r(vut,"mbart50"),vut.forEach(t),guo=r(JS," \u2014 "),xN=n(JS,"A",{href:!0});var Fut=s(xN);huo=r(Fut,"MBart50Tokenizer"),Fut.forEach(t),uuo=r(JS," or "),$N=n(JS,"A",{href:!0});var Tut=s($N);puo=r(Tut,"MBart50TokenizerFast"),Tut.forEach(t),_uo=r(JS," (mBART-50 model)"),JS.forEach(t),buo=i(S),Ls=n(S,"LI",{});var YS=s(Ls);Lde=n(YS,"STRONG",{});var Mut=s(Lde);vuo=r(Mut,"megatron-bert"),Mut.forEach(t),Fuo=r(YS," \u2014 "),kN=n(YS,"A",{href:!0});var Eut=s(kN);Tuo=r(Eut,"BertTokenizer"),Eut.forEach(t),Muo=r(YS," or "),SN=n(YS,"A",{href:!0});var Cut=s(SN);Euo=r(Cut,"BertTokenizerFast"),Cut.forEach(t),Cuo=r(YS," (Megatron-BERT model)"),YS.forEach(t),wuo=i(S),$h=n(S,"LI",{});var zxe=s($h);yde=n(zxe,"STRONG",{});var wut=s(yde);Auo=r(wut,"mluke"),wut.forEach(t),Luo=r(zxe," \u2014 "),RN=n(zxe,"A",{href:!0});var Aut=s(RN);yuo=r(Aut,"MLukeTokenizer"),Aut.forEach(t),xuo=r(zxe," (mLUKE model)"),zxe.forEach(t),$uo=i(S),ys=n(S,"LI",{});var KS=s(ys);xde=n(KS,"STRONG",{});var Lut=s(xde);kuo=r(Lut,"mobilebert"),Lut.forEach(t),Suo=r(KS," \u2014 "),PN=n(KS,"A",{href:!0});var yut=s(PN);Ruo=r(yut,"MobileBertTokenizer"),yut.forEach(t),Puo=r(KS," or "),BN=n(KS,"A",{href:!0});var xut=s(BN);Buo=r(xut,"MobileBertTokenizerFast"),xut.forEach(t),Iuo=r(KS," (MobileBERT model)"),KS.forEach(t),Nuo=i(S),xs=n(S,"LI",{});var ZS=s(xs);$de=n(ZS,"STRONG",{});var $ut=s($de);quo=r($ut,"mpnet"),$ut.forEach(t),juo=r(ZS," \u2014 "),IN=n(ZS,"A",{href:!0});var kut=s(IN);Duo=r(kut,"MPNetTokenizer"),kut.forEach(t),Guo=r(ZS," or "),NN=n(ZS,"A",{href:!0});var Sut=s(NN);Ouo=r(Sut,"MPNetTokenizerFast"),Sut.forEach(t),Vuo=r(ZS," (MPNet model)"),ZS.forEach(t),Xuo=i(S),$s=n(S,"LI",{});var eR=s($s);kde=n(eR,"STRONG",{});var Rut=s(kde);zuo=r(Rut,"mt5"),Rut.forEach(t),Wuo=r(eR," \u2014 "),qN=n(eR,"A",{href:!0});var Put=s(qN);Quo=r(Put,"MT5Tokenizer"),Put.forEach(t),Huo=r(eR," or "),jN=n(eR,"A",{href:!0});var But=s(jN);Uuo=r(But,"MT5TokenizerFast"),But.forEach(t),Juo=r(eR," (MT5 model)"),eR.forEach(t),Yuo=i(S),ks=n(S,"LI",{});var oR=s(ks);Sde=n(oR,"STRONG",{});var Iut=s(Sde);Kuo=r(Iut,"mvp"),Iut.forEach(t),Zuo=r(oR," \u2014 "),DN=n(oR,"A",{href:!0});var Nut=s(DN);epo=r(Nut,"MvpTokenizer"),Nut.forEach(t),opo=r(oR," or "),GN=n(oR,"A",{href:!0});var qut=s(GN);rpo=r(qut,"MvpTokenizerFast"),qut.forEach(t),tpo=r(oR," (MVP model)"),oR.forEach(t),apo=i(S),Ss=n(S,"LI",{});var rR=s(Ss);Rde=n(rR,"STRONG",{});var jut=s(Rde);npo=r(jut,"nezha"),jut.forEach(t),spo=r(rR," \u2014 "),ON=n(rR,"A",{href:!0});var Dut=s(ON);lpo=r(Dut,"BertTokenizer"),Dut.forEach(t),ipo=r(rR," or "),VN=n(rR,"A",{href:!0});var Gut=s(VN);dpo=r(Gut,"BertTokenizerFast"),Gut.forEach(t),cpo=r(rR," (Nezha model)"),rR.forEach(t),mpo=i(S),Rs=n(S,"LI",{});var tR=s(Rs);Pde=n(tR,"STRONG",{});var Out=s(Pde);fpo=r(Out,"nllb"),Out.forEach(t),gpo=r(tR," \u2014 "),XN=n(tR,"A",{href:!0});var Vut=s(XN);hpo=r(Vut,"NllbTokenizer"),Vut.forEach(t),upo=r(tR," or "),zN=n(tR,"A",{href:!0});var Xut=s(zN);ppo=r(Xut,"NllbTokenizerFast"),Xut.forEach(t),_po=r(tR," (NLLB model)"),tR.forEach(t),bpo=i(S),Ps=n(S,"LI",{});var aR=s(Ps);Bde=n(aR,"STRONG",{});var zut=s(Bde);vpo=r(zut,"nystromformer"),zut.forEach(t),Fpo=r(aR," \u2014 "),WN=n(aR,"A",{href:!0});var Wut=s(WN);Tpo=r(Wut,"AlbertTokenizer"),Wut.forEach(t),Mpo=r(aR," or "),QN=n(aR,"A",{href:!0});var Qut=s(QN);Epo=r(Qut,"AlbertTokenizerFast"),Qut.forEach(t),Cpo=r(aR," (Nystr\xF6mformer model)"),aR.forEach(t),wpo=i(S),Bs=n(S,"LI",{});var nR=s(Bs);Ide=n(nR,"STRONG",{});var Hut=s(Ide);Apo=r(Hut,"openai-gpt"),Hut.forEach(t),Lpo=r(nR," \u2014 "),HN=n(nR,"A",{href:!0});var Uut=s(HN);ypo=r(Uut,"OpenAIGPTTokenizer"),Uut.forEach(t),xpo=r(nR," or "),UN=n(nR,"A",{href:!0});var Jut=s(UN);$po=r(Jut,"OpenAIGPTTokenizerFast"),Jut.forEach(t),kpo=r(nR," (OpenAI GPT model)"),nR.forEach(t),Spo=i(S),kh=n(S,"LI",{});var Wxe=s(kh);Nde=n(Wxe,"STRONG",{});var Yut=s(Nde);Rpo=r(Yut,"opt"),Yut.forEach(t),Ppo=r(Wxe," \u2014 "),JN=n(Wxe,"A",{href:!0});var Kut=s(JN);Bpo=r(Kut,"GPT2Tokenizer"),Kut.forEach(t),Ipo=r(Wxe," (OPT model)"),Wxe.forEach(t),Npo=i(S),Is=n(S,"LI",{});var sR=s(Is);qde=n(sR,"STRONG",{});var Zut=s(qde);qpo=r(Zut,"owlvit"),Zut.forEach(t),jpo=r(sR," \u2014 "),YN=n(sR,"A",{href:!0});var ept=s(YN);Dpo=r(ept,"CLIPTokenizer"),ept.forEach(t),Gpo=r(sR," or "),KN=n(sR,"A",{href:!0});var opt=s(KN);Opo=r(opt,"CLIPTokenizerFast"),opt.forEach(t),Vpo=r(sR," (OWL-ViT model)"),sR.forEach(t),Xpo=i(S),Ns=n(S,"LI",{});var lR=s(Ns);jde=n(lR,"STRONG",{});var rpt=s(jde);zpo=r(rpt,"pegasus"),rpt.forEach(t),Wpo=r(lR," \u2014 "),ZN=n(lR,"A",{href:!0});var tpt=s(ZN);Qpo=r(tpt,"PegasusTokenizer"),tpt.forEach(t),Hpo=r(lR," or "),eq=n(lR,"A",{href:!0});var apt=s(eq);Upo=r(apt,"PegasusTokenizerFast"),apt.forEach(t),Jpo=r(lR," (Pegasus model)"),lR.forEach(t),Ypo=i(S),Sh=n(S,"LI",{});var Qxe=s(Sh);Dde=n(Qxe,"STRONG",{});var npt=s(Dde);Kpo=r(npt,"perceiver"),npt.forEach(t),Zpo=r(Qxe," \u2014 "),oq=n(Qxe,"A",{href:!0});var spt=s(oq);e_o=r(spt,"PerceiverTokenizer"),spt.forEach(t),o_o=r(Qxe," (Perceiver model)"),Qxe.forEach(t),r_o=i(S),Rh=n(S,"LI",{});var Hxe=s(Rh);Gde=n(Hxe,"STRONG",{});var lpt=s(Gde);t_o=r(lpt,"phobert"),lpt.forEach(t),a_o=r(Hxe," \u2014 "),rq=n(Hxe,"A",{href:!0});var ipt=s(rq);n_o=r(ipt,"PhobertTokenizer"),ipt.forEach(t),s_o=r(Hxe," (PhoBERT model)"),Hxe.forEach(t),l_o=i(S),Ph=n(S,"LI",{});var Uxe=s(Ph);Ode=n(Uxe,"STRONG",{});var dpt=s(Ode);i_o=r(dpt,"plbart"),dpt.forEach(t),d_o=r(Uxe," \u2014 "),tq=n(Uxe,"A",{href:!0});var cpt=s(tq);c_o=r(cpt,"PLBartTokenizer"),cpt.forEach(t),m_o=r(Uxe," (PLBart model)"),Uxe.forEach(t),f_o=i(S),Bh=n(S,"LI",{});var Jxe=s(Bh);Vde=n(Jxe,"STRONG",{});var mpt=s(Vde);g_o=r(mpt,"prophetnet"),mpt.forEach(t),h_o=r(Jxe," \u2014 "),aq=n(Jxe,"A",{href:!0});var fpt=s(aq);u_o=r(fpt,"ProphetNetTokenizer"),fpt.forEach(t),p_o=r(Jxe," (ProphetNet model)"),Jxe.forEach(t),__o=i(S),qs=n(S,"LI",{});var iR=s(qs);Xde=n(iR,"STRONG",{});var gpt=s(Xde);b_o=r(gpt,"qdqbert"),gpt.forEach(t),v_o=r(iR," \u2014 "),nq=n(iR,"A",{href:!0});var hpt=s(nq);F_o=r(hpt,"BertTokenizer"),hpt.forEach(t),T_o=r(iR," or "),sq=n(iR,"A",{href:!0});var upt=s(sq);M_o=r(upt,"BertTokenizerFast"),upt.forEach(t),E_o=r(iR," (QDQBert model)"),iR.forEach(t),C_o=i(S),Ih=n(S,"LI",{});var Yxe=s(Ih);zde=n(Yxe,"STRONG",{});var ppt=s(zde);w_o=r(ppt,"rag"),ppt.forEach(t),A_o=r(Yxe," \u2014 "),lq=n(Yxe,"A",{href:!0});var _pt=s(lq);L_o=r(_pt,"RagTokenizer"),_pt.forEach(t),y_o=r(Yxe," (RAG model)"),Yxe.forEach(t),x_o=i(S),js=n(S,"LI",{});var dR=s(js);Wde=n(dR,"STRONG",{});var bpt=s(Wde);$_o=r(bpt,"realm"),bpt.forEach(t),k_o=r(dR," \u2014 "),iq=n(dR,"A",{href:!0});var vpt=s(iq);S_o=r(vpt,"RealmTokenizer"),vpt.forEach(t),R_o=r(dR," or "),dq=n(dR,"A",{href:!0});var Fpt=s(dq);P_o=r(Fpt,"RealmTokenizerFast"),Fpt.forEach(t),B_o=r(dR," (REALM model)"),dR.forEach(t),I_o=i(S),Ds=n(S,"LI",{});var cR=s(Ds);Qde=n(cR,"STRONG",{});var Tpt=s(Qde);N_o=r(Tpt,"reformer"),Tpt.forEach(t),q_o=r(cR," \u2014 "),cq=n(cR,"A",{href:!0});var Mpt=s(cq);j_o=r(Mpt,"ReformerTokenizer"),Mpt.forEach(t),D_o=r(cR," or "),mq=n(cR,"A",{href:!0});var Ept=s(mq);G_o=r(Ept,"ReformerTokenizerFast"),Ept.forEach(t),O_o=r(cR," (Reformer model)"),cR.forEach(t),V_o=i(S),Gs=n(S,"LI",{});var mR=s(Gs);Hde=n(mR,"STRONG",{});var Cpt=s(Hde);X_o=r(Cpt,"rembert"),Cpt.forEach(t),z_o=r(mR," \u2014 "),fq=n(mR,"A",{href:!0});var wpt=s(fq);W_o=r(wpt,"RemBertTokenizer"),wpt.forEach(t),Q_o=r(mR," or "),gq=n(mR,"A",{href:!0});var Apt=s(gq);H_o=r(Apt,"RemBertTokenizerFast"),Apt.forEach(t),U_o=r(mR," (RemBERT model)"),mR.forEach(t),J_o=i(S),Os=n(S,"LI",{});var fR=s(Os);Ude=n(fR,"STRONG",{});var Lpt=s(Ude);Y_o=r(Lpt,"retribert"),Lpt.forEach(t),K_o=r(fR," \u2014 "),hq=n(fR,"A",{href:!0});var ypt=s(hq);Z_o=r(ypt,"RetriBertTokenizer"),ypt.forEach(t),e2o=r(fR," or "),uq=n(fR,"A",{href:!0});var xpt=s(uq);o2o=r(xpt,"RetriBertTokenizerFast"),xpt.forEach(t),r2o=r(fR," (RetriBERT model)"),fR.forEach(t),t2o=i(S),Vs=n(S,"LI",{});var gR=s(Vs);Jde=n(gR,"STRONG",{});var $pt=s(Jde);a2o=r($pt,"roberta"),$pt.forEach(t),n2o=r(gR," \u2014 "),pq=n(gR,"A",{href:!0});var kpt=s(pq);s2o=r(kpt,"RobertaTokenizer"),kpt.forEach(t),l2o=r(gR," or "),_q=n(gR,"A",{href:!0});var Spt=s(_q);i2o=r(Spt,"RobertaTokenizerFast"),Spt.forEach(t),d2o=r(gR," (RoBERTa model)"),gR.forEach(t),c2o=i(S),Xs=n(S,"LI",{});var hR=s(Xs);Yde=n(hR,"STRONG",{});var Rpt=s(Yde);m2o=r(Rpt,"roformer"),Rpt.forEach(t),f2o=r(hR," \u2014 "),bq=n(hR,"A",{href:!0});var Ppt=s(bq);g2o=r(Ppt,"RoFormerTokenizer"),Ppt.forEach(t),h2o=r(hR," or "),vq=n(hR,"A",{href:!0});var Bpt=s(vq);u2o=r(Bpt,"RoFormerTokenizerFast"),Bpt.forEach(t),p2o=r(hR," (RoFormer model)"),hR.forEach(t),_2o=i(S),Nh=n(S,"LI",{});var Kxe=s(Nh);Kde=n(Kxe,"STRONG",{});var Ipt=s(Kde);b2o=r(Ipt,"speech_to_text"),Ipt.forEach(t),v2o=r(Kxe," \u2014 "),Fq=n(Kxe,"A",{href:!0});var Npt=s(Fq);F2o=r(Npt,"Speech2TextTokenizer"),Npt.forEach(t),T2o=r(Kxe," (Speech2Text model)"),Kxe.forEach(t),M2o=i(S),qh=n(S,"LI",{});var Zxe=s(qh);Zde=n(Zxe,"STRONG",{});var qpt=s(Zde);E2o=r(qpt,"speech_to_text_2"),qpt.forEach(t),C2o=r(Zxe," \u2014 "),Tq=n(Zxe,"A",{href:!0});var jpt=s(Tq);w2o=r(jpt,"Speech2Text2Tokenizer"),jpt.forEach(t),A2o=r(Zxe," (Speech2Text2 model)"),Zxe.forEach(t),L2o=i(S),zs=n(S,"LI",{});var uR=s(zs);ece=n(uR,"STRONG",{});var Dpt=s(ece);y2o=r(Dpt,"splinter"),Dpt.forEach(t),x2o=r(uR," \u2014 "),Mq=n(uR,"A",{href:!0});var Gpt=s(Mq);$2o=r(Gpt,"SplinterTokenizer"),Gpt.forEach(t),k2o=r(uR," or "),Eq=n(uR,"A",{href:!0});var Opt=s(Eq);S2o=r(Opt,"SplinterTokenizerFast"),Opt.forEach(t),R2o=r(uR," (Splinter model)"),uR.forEach(t),P2o=i(S),Ws=n(S,"LI",{});var pR=s(Ws);oce=n(pR,"STRONG",{});var Vpt=s(oce);B2o=r(Vpt,"squeezebert"),Vpt.forEach(t),I2o=r(pR," \u2014 "),Cq=n(pR,"A",{href:!0});var Xpt=s(Cq);N2o=r(Xpt,"SqueezeBertTokenizer"),Xpt.forEach(t),q2o=r(pR," or "),wq=n(pR,"A",{href:!0});var zpt=s(wq);j2o=r(zpt,"SqueezeBertTokenizerFast"),zpt.forEach(t),D2o=r(pR," (SqueezeBERT model)"),pR.forEach(t),G2o=i(S),Qs=n(S,"LI",{});var _R=s(Qs);rce=n(_R,"STRONG",{});var Wpt=s(rce);O2o=r(Wpt,"t5"),Wpt.forEach(t),V2o=r(_R," \u2014 "),Aq=n(_R,"A",{href:!0});var Qpt=s(Aq);X2o=r(Qpt,"T5Tokenizer"),Qpt.forEach(t),z2o=r(_R," or "),Lq=n(_R,"A",{href:!0});var Hpt=s(Lq);W2o=r(Hpt,"T5TokenizerFast"),Hpt.forEach(t),Q2o=r(_R," (T5 model)"),_R.forEach(t),H2o=i(S),jh=n(S,"LI",{});var e$e=s(jh);tce=n(e$e,"STRONG",{});var Upt=s(tce);U2o=r(Upt,"tapas"),Upt.forEach(t),J2o=r(e$e," \u2014 "),yq=n(e$e,"A",{href:!0});var Jpt=s(yq);Y2o=r(Jpt,"TapasTokenizer"),Jpt.forEach(t),K2o=r(e$e," (TAPAS model)"),e$e.forEach(t),Z2o=i(S),Dh=n(S,"LI",{});var o$e=s(Dh);ace=n(o$e,"STRONG",{});var Ypt=s(ace);ebo=r(Ypt,"tapex"),Ypt.forEach(t),obo=r(o$e," \u2014 "),xq=n(o$e,"A",{href:!0});var Kpt=s(xq);rbo=r(Kpt,"TapexTokenizer"),Kpt.forEach(t),tbo=r(o$e," (TAPEX model)"),o$e.forEach(t),abo=i(S),Gh=n(S,"LI",{});var r$e=s(Gh);nce=n(r$e,"STRONG",{});var Zpt=s(nce);nbo=r(Zpt,"transfo-xl"),Zpt.forEach(t),sbo=r(r$e," \u2014 "),$q=n(r$e,"A",{href:!0});var e_t=s($q);lbo=r(e_t,"TransfoXLTokenizer"),e_t.forEach(t),ibo=r(r$e," (Transformer-XL model)"),r$e.forEach(t),dbo=i(S),Hs=n(S,"LI",{});var bR=s(Hs);sce=n(bR,"STRONG",{});var o_t=s(sce);cbo=r(o_t,"vilt"),o_t.forEach(t),mbo=r(bR," \u2014 "),kq=n(bR,"A",{href:!0});var r_t=s(kq);fbo=r(r_t,"BertTokenizer"),r_t.forEach(t),gbo=r(bR," or "),Sq=n(bR,"A",{href:!0});var t_t=s(Sq);hbo=r(t_t,"BertTokenizerFast"),t_t.forEach(t),ubo=r(bR," (ViLT model)"),bR.forEach(t),pbo=i(S),Us=n(S,"LI",{});var vR=s(Us);lce=n(vR,"STRONG",{});var a_t=s(lce);_bo=r(a_t,"visual_bert"),a_t.forEach(t),bbo=r(vR," \u2014 "),Rq=n(vR,"A",{href:!0});var n_t=s(Rq);vbo=r(n_t,"BertTokenizer"),n_t.forEach(t),Fbo=r(vR," or "),Pq=n(vR,"A",{href:!0});var s_t=s(Pq);Tbo=r(s_t,"BertTokenizerFast"),s_t.forEach(t),Mbo=r(vR," (VisualBERT model)"),vR.forEach(t),Ebo=i(S),Oh=n(S,"LI",{});var t$e=s(Oh);ice=n(t$e,"STRONG",{});var l_t=s(ice);Cbo=r(l_t,"wav2vec2"),l_t.forEach(t),wbo=r(t$e," \u2014 "),Bq=n(t$e,"A",{href:!0});var i_t=s(Bq);Abo=r(i_t,"Wav2Vec2CTCTokenizer"),i_t.forEach(t),Lbo=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),ybo=i(S),Vh=n(S,"LI",{});var a$e=s(Vh);dce=n(a$e,"STRONG",{});var d_t=s(dce);xbo=r(d_t,"wav2vec2-conformer"),d_t.forEach(t),$bo=r(a$e," \u2014 "),Iq=n(a$e,"A",{href:!0});var c_t=s(Iq);kbo=r(c_t,"Wav2Vec2CTCTokenizer"),c_t.forEach(t),Sbo=r(a$e," (Wav2Vec2-Conformer model)"),a$e.forEach(t),Rbo=i(S),Xh=n(S,"LI",{});var n$e=s(Xh);cce=n(n$e,"STRONG",{});var m_t=s(cce);Pbo=r(m_t,"wav2vec2_phoneme"),m_t.forEach(t),Bbo=r(n$e," \u2014 "),Nq=n(n$e,"A",{href:!0});var f_t=s(Nq);Ibo=r(f_t,"Wav2Vec2PhonemeCTCTokenizer"),f_t.forEach(t),Nbo=r(n$e," (Wav2Vec2Phoneme model)"),n$e.forEach(t),qbo=i(S),Js=n(S,"LI",{});var FR=s(Js);mce=n(FR,"STRONG",{});var g_t=s(mce);jbo=r(g_t,"xglm"),g_t.forEach(t),Dbo=r(FR," \u2014 "),qq=n(FR,"A",{href:!0});var h_t=s(qq);Gbo=r(h_t,"XGLMTokenizer"),h_t.forEach(t),Obo=r(FR," or "),jq=n(FR,"A",{href:!0});var u_t=s(jq);Vbo=r(u_t,"XGLMTokenizerFast"),u_t.forEach(t),Xbo=r(FR," (XGLM model)"),FR.forEach(t),zbo=i(S),zh=n(S,"LI",{});var s$e=s(zh);fce=n(s$e,"STRONG",{});var p_t=s(fce);Wbo=r(p_t,"xlm"),p_t.forEach(t),Qbo=r(s$e," \u2014 "),Dq=n(s$e,"A",{href:!0});var __t=s(Dq);Hbo=r(__t,"XLMTokenizer"),__t.forEach(t),Ubo=r(s$e," (XLM model)"),s$e.forEach(t),Jbo=i(S),Wh=n(S,"LI",{});var l$e=s(Wh);gce=n(l$e,"STRONG",{});var b_t=s(gce);Ybo=r(b_t,"xlm-prophetnet"),b_t.forEach(t),Kbo=r(l$e," \u2014 "),Gq=n(l$e,"A",{href:!0});var v_t=s(Gq);Zbo=r(v_t,"XLMProphetNetTokenizer"),v_t.forEach(t),evo=r(l$e," (XLM-ProphetNet model)"),l$e.forEach(t),ovo=i(S),Ys=n(S,"LI",{});var TR=s(Ys);hce=n(TR,"STRONG",{});var F_t=s(hce);rvo=r(F_t,"xlm-roberta"),F_t.forEach(t),tvo=r(TR," \u2014 "),Oq=n(TR,"A",{href:!0});var T_t=s(Oq);avo=r(T_t,"XLMRobertaTokenizer"),T_t.forEach(t),nvo=r(TR," or "),Vq=n(TR,"A",{href:!0});var M_t=s(Vq);svo=r(M_t,"XLMRobertaTokenizerFast"),M_t.forEach(t),lvo=r(TR," (XLM-RoBERTa model)"),TR.forEach(t),ivo=i(S),Ks=n(S,"LI",{});var MR=s(Ks);uce=n(MR,"STRONG",{});var E_t=s(uce);dvo=r(E_t,"xlm-roberta-xl"),E_t.forEach(t),cvo=r(MR," \u2014 "),Xq=n(MR,"A",{href:!0});var C_t=s(Xq);mvo=r(C_t,"RobertaTokenizer"),C_t.forEach(t),fvo=r(MR," or "),zq=n(MR,"A",{href:!0});var w_t=s(zq);gvo=r(w_t,"RobertaTokenizerFast"),w_t.forEach(t),hvo=r(MR," (XLM-RoBERTa-XL model)"),MR.forEach(t),uvo=i(S),Zs=n(S,"LI",{});var ER=s(Zs);pce=n(ER,"STRONG",{});var A_t=s(pce);pvo=r(A_t,"xlnet"),A_t.forEach(t),_vo=r(ER," \u2014 "),Wq=n(ER,"A",{href:!0});var L_t=s(Wq);bvo=r(L_t,"XLNetTokenizer"),L_t.forEach(t),vvo=r(ER," or "),Qq=n(ER,"A",{href:!0});var y_t=s(Qq);Fvo=r(y_t,"XLNetTokenizerFast"),y_t.forEach(t),Tvo=r(ER," (XLNet model)"),ER.forEach(t),Mvo=i(S),el=n(S,"LI",{});var CR=s(el);_ce=n(CR,"STRONG",{});var x_t=s(_ce);Evo=r(x_t,"yoso"),x_t.forEach(t),Cvo=r(CR," \u2014 "),Hq=n(CR,"A",{href:!0});var $_t=s(Hq);wvo=r($_t,"AlbertTokenizer"),$_t.forEach(t),Avo=r(CR," or "),Uq=n(CR,"A",{href:!0});var k_t=s(Uq);Lvo=r(k_t,"AlbertTokenizerFast"),k_t.forEach(t),yvo=r(CR," (YOSO model)"),CR.forEach(t),S.forEach(t),xvo=i(ll),T(Qh.$$.fragment,ll),ll.forEach(t),$vo=i(sl),Hh=n(sl,"DIV",{class:!0});var QHe=s(Hh);T(n8.$$.fragment,QHe),kvo=i(QHe),bce=n(QHe,"P",{});var S_t=s(bce);Svo=r(S_t,"Register a new tokenizer in this mapping."),S_t.forEach(t),QHe.forEach(t),sl.forEach(t),XWe=i(m),Qi=n(m,"H2",{class:!0});var HHe=s(Qi);Uh=n(HHe,"A",{id:!0,class:!0,href:!0});var R_t=s(Uh);vce=n(R_t,"SPAN",{});var P_t=s(vce);T(s8.$$.fragment,P_t),P_t.forEach(t),R_t.forEach(t),Rvo=i(HHe),Fce=n(HHe,"SPAN",{});var B_t=s(Fce);Pvo=r(B_t,"AutoFeatureExtractor"),B_t.forEach(t),HHe.forEach(t),zWe=i(m),$o=n(m,"DIV",{class:!0});var il=s($o);T(l8.$$.fragment,il),Bvo=i(il),i8=n(il,"P",{});var UHe=s(i8);Ivo=r(UHe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Jq=n(UHe,"A",{href:!0});var I_t=s(Jq);Nvo=r(I_t,"AutoFeatureExtractor.from_pretrained()"),I_t.forEach(t),qvo=r(UHe," class method."),UHe.forEach(t),jvo=i(il),d8=n(il,"P",{});var JHe=s(d8);Dvo=r(JHe,"This class cannot be instantiated directly using "),Tce=n(JHe,"CODE",{});var N_t=s(Tce);Gvo=r(N_t,"__init__()"),N_t.forEach(t),Ovo=r(JHe," (throws an error)."),JHe.forEach(t),Vvo=i(il),Ue=n(il,"DIV",{class:!0});var ia=s(Ue);T(c8.$$.fragment,ia),Xvo=i(ia),Mce=n(ia,"P",{});var q_t=s(Mce);zvo=r(q_t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),q_t.forEach(t),Wvo=i(ia),ja=n(ia,"P",{});var W7=s(ja);Qvo=r(W7,"The feature extractor class to instantiate is selected based on the "),Ece=n(W7,"CODE",{});var j_t=s(Ece);Hvo=r(j_t,"model_type"),j_t.forEach(t),Uvo=r(W7,` property of the config object
(either passed as an argument or loaded from `),Cce=n(W7,"CODE",{});var D_t=s(Cce);Jvo=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),Yvo=r(W7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wce=n(W7,"CODE",{});var G_t=s(wce);Kvo=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),Zvo=r(W7,":"),W7.forEach(t),e1o=i(ia),H=n(ia,"UL",{});var Y=s(H);Jh=n(Y,"LI",{});var i$e=s(Jh);Ace=n(i$e,"STRONG",{});var O_t=s(Ace);o1o=r(O_t,"beit"),O_t.forEach(t),r1o=r(i$e," \u2014 "),Yq=n(i$e,"A",{href:!0});var V_t=s(Yq);t1o=r(V_t,"BeitFeatureExtractor"),V_t.forEach(t),a1o=r(i$e," (BEiT model)"),i$e.forEach(t),n1o=i(Y),Yh=n(Y,"LI",{});var d$e=s(Yh);Lce=n(d$e,"STRONG",{});var X_t=s(Lce);s1o=r(X_t,"clip"),X_t.forEach(t),l1o=r(d$e," \u2014 "),Kq=n(d$e,"A",{href:!0});var z_t=s(Kq);i1o=r(z_t,"CLIPFeatureExtractor"),z_t.forEach(t),d1o=r(d$e," (CLIP model)"),d$e.forEach(t),c1o=i(Y),Kh=n(Y,"LI",{});var c$e=s(Kh);yce=n(c$e,"STRONG",{});var W_t=s(yce);m1o=r(W_t,"convnext"),W_t.forEach(t),f1o=r(c$e," \u2014 "),Zq=n(c$e,"A",{href:!0});var Q_t=s(Zq);g1o=r(Q_t,"ConvNextFeatureExtractor"),Q_t.forEach(t),h1o=r(c$e," (ConvNeXT model)"),c$e.forEach(t),u1o=i(Y),Zh=n(Y,"LI",{});var m$e=s(Zh);xce=n(m$e,"STRONG",{});var H_t=s(xce);p1o=r(H_t,"cvt"),H_t.forEach(t),_1o=r(m$e," \u2014 "),ej=n(m$e,"A",{href:!0});var U_t=s(ej);b1o=r(U_t,"ConvNextFeatureExtractor"),U_t.forEach(t),v1o=r(m$e," (CvT model)"),m$e.forEach(t),F1o=i(Y),eu=n(Y,"LI",{});var f$e=s(eu);$ce=n(f$e,"STRONG",{});var J_t=s($ce);T1o=r(J_t,"data2vec-audio"),J_t.forEach(t),M1o=r(f$e," \u2014 "),oj=n(f$e,"A",{href:!0});var Y_t=s(oj);E1o=r(Y_t,"Wav2Vec2FeatureExtractor"),Y_t.forEach(t),C1o=r(f$e," (Data2VecAudio model)"),f$e.forEach(t),w1o=i(Y),ou=n(Y,"LI",{});var g$e=s(ou);kce=n(g$e,"STRONG",{});var K_t=s(kce);A1o=r(K_t,"data2vec-vision"),K_t.forEach(t),L1o=r(g$e," \u2014 "),rj=n(g$e,"A",{href:!0});var Z_t=s(rj);y1o=r(Z_t,"BeitFeatureExtractor"),Z_t.forEach(t),x1o=r(g$e," (Data2VecVision model)"),g$e.forEach(t),$1o=i(Y),ru=n(Y,"LI",{});var h$e=s(ru);Sce=n(h$e,"STRONG",{});var e2t=s(Sce);k1o=r(e2t,"deit"),e2t.forEach(t),S1o=r(h$e," \u2014 "),tj=n(h$e,"A",{href:!0});var o2t=s(tj);R1o=r(o2t,"DeiTFeatureExtractor"),o2t.forEach(t),P1o=r(h$e," (DeiT model)"),h$e.forEach(t),B1o=i(Y),tu=n(Y,"LI",{});var u$e=s(tu);Rce=n(u$e,"STRONG",{});var r2t=s(Rce);I1o=r(r2t,"detr"),r2t.forEach(t),N1o=r(u$e," \u2014 "),aj=n(u$e,"A",{href:!0});var t2t=s(aj);q1o=r(t2t,"DetrFeatureExtractor"),t2t.forEach(t),j1o=r(u$e," (DETR model)"),u$e.forEach(t),D1o=i(Y),au=n(Y,"LI",{});var p$e=s(au);Pce=n(p$e,"STRONG",{});var a2t=s(Pce);G1o=r(a2t,"dpt"),a2t.forEach(t),O1o=r(p$e," \u2014 "),nj=n(p$e,"A",{href:!0});var n2t=s(nj);V1o=r(n2t,"DPTFeatureExtractor"),n2t.forEach(t),X1o=r(p$e," (DPT model)"),p$e.forEach(t),z1o=i(Y),nu=n(Y,"LI",{});var _$e=s(nu);Bce=n(_$e,"STRONG",{});var s2t=s(Bce);W1o=r(s2t,"flava"),s2t.forEach(t),Q1o=r(_$e," \u2014 "),sj=n(_$e,"A",{href:!0});var l2t=s(sj);H1o=r(l2t,"FlavaFeatureExtractor"),l2t.forEach(t),U1o=r(_$e," (FLAVA model)"),_$e.forEach(t),J1o=i(Y),su=n(Y,"LI",{});var b$e=s(su);Ice=n(b$e,"STRONG",{});var i2t=s(Ice);Y1o=r(i2t,"glpn"),i2t.forEach(t),K1o=r(b$e," \u2014 "),lj=n(b$e,"A",{href:!0});var d2t=s(lj);Z1o=r(d2t,"GLPNFeatureExtractor"),d2t.forEach(t),eFo=r(b$e," (GLPN model)"),b$e.forEach(t),oFo=i(Y),lu=n(Y,"LI",{});var v$e=s(lu);Nce=n(v$e,"STRONG",{});var c2t=s(Nce);rFo=r(c2t,"groupvit"),c2t.forEach(t),tFo=r(v$e," \u2014 "),ij=n(v$e,"A",{href:!0});var m2t=s(ij);aFo=r(m2t,"CLIPFeatureExtractor"),m2t.forEach(t),nFo=r(v$e," (GroupViT model)"),v$e.forEach(t),sFo=i(Y),iu=n(Y,"LI",{});var F$e=s(iu);qce=n(F$e,"STRONG",{});var f2t=s(qce);lFo=r(f2t,"hubert"),f2t.forEach(t),iFo=r(F$e," \u2014 "),dj=n(F$e,"A",{href:!0});var g2t=s(dj);dFo=r(g2t,"Wav2Vec2FeatureExtractor"),g2t.forEach(t),cFo=r(F$e," (Hubert model)"),F$e.forEach(t),mFo=i(Y),du=n(Y,"LI",{});var T$e=s(du);jce=n(T$e,"STRONG",{});var h2t=s(jce);fFo=r(h2t,"imagegpt"),h2t.forEach(t),gFo=r(T$e," \u2014 "),cj=n(T$e,"A",{href:!0});var u2t=s(cj);hFo=r(u2t,"ImageGPTFeatureExtractor"),u2t.forEach(t),uFo=r(T$e," (ImageGPT model)"),T$e.forEach(t),pFo=i(Y),cu=n(Y,"LI",{});var M$e=s(cu);Dce=n(M$e,"STRONG",{});var p2t=s(Dce);_Fo=r(p2t,"layoutlmv2"),p2t.forEach(t),bFo=r(M$e," \u2014 "),mj=n(M$e,"A",{href:!0});var _2t=s(mj);vFo=r(_2t,"LayoutLMv2FeatureExtractor"),_2t.forEach(t),FFo=r(M$e," (LayoutLMv2 model)"),M$e.forEach(t),TFo=i(Y),mu=n(Y,"LI",{});var E$e=s(mu);Gce=n(E$e,"STRONG",{});var b2t=s(Gce);MFo=r(b2t,"layoutlmv3"),b2t.forEach(t),EFo=r(E$e," \u2014 "),fj=n(E$e,"A",{href:!0});var v2t=s(fj);CFo=r(v2t,"LayoutLMv3FeatureExtractor"),v2t.forEach(t),wFo=r(E$e," (LayoutLMv3 model)"),E$e.forEach(t),AFo=i(Y),fu=n(Y,"LI",{});var C$e=s(fu);Oce=n(C$e,"STRONG",{});var F2t=s(Oce);LFo=r(F2t,"levit"),F2t.forEach(t),yFo=r(C$e," \u2014 "),gj=n(C$e,"A",{href:!0});var T2t=s(gj);xFo=r(T2t,"LevitFeatureExtractor"),T2t.forEach(t),$Fo=r(C$e," (LeViT model)"),C$e.forEach(t),kFo=i(Y),gu=n(Y,"LI",{});var w$e=s(gu);Vce=n(w$e,"STRONG",{});var M2t=s(Vce);SFo=r(M2t,"maskformer"),M2t.forEach(t),RFo=r(w$e," \u2014 "),hj=n(w$e,"A",{href:!0});var E2t=s(hj);PFo=r(E2t,"MaskFormerFeatureExtractor"),E2t.forEach(t),BFo=r(w$e," (MaskFormer model)"),w$e.forEach(t),IFo=i(Y),hu=n(Y,"LI",{});var A$e=s(hu);Xce=n(A$e,"STRONG",{});var C2t=s(Xce);NFo=r(C2t,"mctct"),C2t.forEach(t),qFo=r(A$e," \u2014 "),uj=n(A$e,"A",{href:!0});var w2t=s(uj);jFo=r(w2t,"MCTCTFeatureExtractor"),w2t.forEach(t),DFo=r(A$e," (M-CTC-T model)"),A$e.forEach(t),GFo=i(Y),uu=n(Y,"LI",{});var L$e=s(uu);zce=n(L$e,"STRONG",{});var A2t=s(zce);OFo=r(A2t,"mobilevit"),A2t.forEach(t),VFo=r(L$e," \u2014 "),pj=n(L$e,"A",{href:!0});var L2t=s(pj);XFo=r(L2t,"MobileViTFeatureExtractor"),L2t.forEach(t),zFo=r(L$e," (MobileViT model)"),L$e.forEach(t),WFo=i(Y),pu=n(Y,"LI",{});var y$e=s(pu);Wce=n(y$e,"STRONG",{});var y2t=s(Wce);QFo=r(y2t,"owlvit"),y2t.forEach(t),HFo=r(y$e," \u2014 "),_j=n(y$e,"A",{href:!0});var x2t=s(_j);UFo=r(x2t,"OwlViTFeatureExtractor"),x2t.forEach(t),JFo=r(y$e," (OWL-ViT model)"),y$e.forEach(t),YFo=i(Y),_u=n(Y,"LI",{});var x$e=s(_u);Qce=n(x$e,"STRONG",{});var $2t=s(Qce);KFo=r($2t,"perceiver"),$2t.forEach(t),ZFo=r(x$e," \u2014 "),bj=n(x$e,"A",{href:!0});var k2t=s(bj);eTo=r(k2t,"PerceiverFeatureExtractor"),k2t.forEach(t),oTo=r(x$e," (Perceiver model)"),x$e.forEach(t),rTo=i(Y),bu=n(Y,"LI",{});var $$e=s(bu);Hce=n($$e,"STRONG",{});var S2t=s(Hce);tTo=r(S2t,"poolformer"),S2t.forEach(t),aTo=r($$e," \u2014 "),vj=n($$e,"A",{href:!0});var R2t=s(vj);nTo=r(R2t,"PoolFormerFeatureExtractor"),R2t.forEach(t),sTo=r($$e," (PoolFormer model)"),$$e.forEach(t),lTo=i(Y),vu=n(Y,"LI",{});var k$e=s(vu);Uce=n(k$e,"STRONG",{});var P2t=s(Uce);iTo=r(P2t,"regnet"),P2t.forEach(t),dTo=r(k$e," \u2014 "),Fj=n(k$e,"A",{href:!0});var B2t=s(Fj);cTo=r(B2t,"ConvNextFeatureExtractor"),B2t.forEach(t),mTo=r(k$e," (RegNet model)"),k$e.forEach(t),fTo=i(Y),Fu=n(Y,"LI",{});var S$e=s(Fu);Jce=n(S$e,"STRONG",{});var I2t=s(Jce);gTo=r(I2t,"resnet"),I2t.forEach(t),hTo=r(S$e," \u2014 "),Tj=n(S$e,"A",{href:!0});var N2t=s(Tj);uTo=r(N2t,"ConvNextFeatureExtractor"),N2t.forEach(t),pTo=r(S$e," (ResNet model)"),S$e.forEach(t),_To=i(Y),Tu=n(Y,"LI",{});var R$e=s(Tu);Yce=n(R$e,"STRONG",{});var q2t=s(Yce);bTo=r(q2t,"segformer"),q2t.forEach(t),vTo=r(R$e," \u2014 "),Mj=n(R$e,"A",{href:!0});var j2t=s(Mj);FTo=r(j2t,"SegformerFeatureExtractor"),j2t.forEach(t),TTo=r(R$e," (SegFormer model)"),R$e.forEach(t),MTo=i(Y),Mu=n(Y,"LI",{});var P$e=s(Mu);Kce=n(P$e,"STRONG",{});var D2t=s(Kce);ETo=r(D2t,"speech_to_text"),D2t.forEach(t),CTo=r(P$e," \u2014 "),Ej=n(P$e,"A",{href:!0});var G2t=s(Ej);wTo=r(G2t,"Speech2TextFeatureExtractor"),G2t.forEach(t),ATo=r(P$e," (Speech2Text model)"),P$e.forEach(t),LTo=i(Y),Eu=n(Y,"LI",{});var B$e=s(Eu);Zce=n(B$e,"STRONG",{});var O2t=s(Zce);yTo=r(O2t,"swin"),O2t.forEach(t),xTo=r(B$e," \u2014 "),Cj=n(B$e,"A",{href:!0});var V2t=s(Cj);$To=r(V2t,"ViTFeatureExtractor"),V2t.forEach(t),kTo=r(B$e," (Swin Transformer model)"),B$e.forEach(t),STo=i(Y),Cu=n(Y,"LI",{});var I$e=s(Cu);eme=n(I$e,"STRONG",{});var X2t=s(eme);RTo=r(X2t,"swinv2"),X2t.forEach(t),PTo=r(I$e," \u2014 "),wj=n(I$e,"A",{href:!0});var z2t=s(wj);BTo=r(z2t,"ViTFeatureExtractor"),z2t.forEach(t),ITo=r(I$e," (Swin Transformer V2 model)"),I$e.forEach(t),NTo=i(Y),wu=n(Y,"LI",{});var N$e=s(wu);ome=n(N$e,"STRONG",{});var W2t=s(ome);qTo=r(W2t,"van"),W2t.forEach(t),jTo=r(N$e," \u2014 "),Aj=n(N$e,"A",{href:!0});var Q2t=s(Aj);DTo=r(Q2t,"ConvNextFeatureExtractor"),Q2t.forEach(t),GTo=r(N$e," (VAN model)"),N$e.forEach(t),OTo=i(Y),Au=n(Y,"LI",{});var q$e=s(Au);rme=n(q$e,"STRONG",{});var H2t=s(rme);VTo=r(H2t,"videomae"),H2t.forEach(t),XTo=r(q$e," \u2014 "),Lj=n(q$e,"A",{href:!0});var U2t=s(Lj);zTo=r(U2t,"ViTFeatureExtractor"),U2t.forEach(t),WTo=r(q$e," (VideoMAE model)"),q$e.forEach(t),QTo=i(Y),Lu=n(Y,"LI",{});var j$e=s(Lu);tme=n(j$e,"STRONG",{});var J2t=s(tme);HTo=r(J2t,"vilt"),J2t.forEach(t),UTo=r(j$e," \u2014 "),yj=n(j$e,"A",{href:!0});var Y2t=s(yj);JTo=r(Y2t,"ViltFeatureExtractor"),Y2t.forEach(t),YTo=r(j$e," (ViLT model)"),j$e.forEach(t),KTo=i(Y),yu=n(Y,"LI",{});var D$e=s(yu);ame=n(D$e,"STRONG",{});var K2t=s(ame);ZTo=r(K2t,"vit"),K2t.forEach(t),eMo=r(D$e," \u2014 "),xj=n(D$e,"A",{href:!0});var Z2t=s(xj);oMo=r(Z2t,"ViTFeatureExtractor"),Z2t.forEach(t),rMo=r(D$e," (ViT model)"),D$e.forEach(t),tMo=i(Y),xu=n(Y,"LI",{});var G$e=s(xu);nme=n(G$e,"STRONG",{});var ebt=s(nme);aMo=r(ebt,"vit_mae"),ebt.forEach(t),nMo=r(G$e," \u2014 "),$j=n(G$e,"A",{href:!0});var obt=s($j);sMo=r(obt,"ViTFeatureExtractor"),obt.forEach(t),lMo=r(G$e," (ViTMAE model)"),G$e.forEach(t),iMo=i(Y),$u=n(Y,"LI",{});var O$e=s($u);sme=n(O$e,"STRONG",{});var rbt=s(sme);dMo=r(rbt,"wav2vec2"),rbt.forEach(t),cMo=r(O$e," \u2014 "),kj=n(O$e,"A",{href:!0});var tbt=s(kj);mMo=r(tbt,"Wav2Vec2FeatureExtractor"),tbt.forEach(t),fMo=r(O$e," (Wav2Vec2 model)"),O$e.forEach(t),gMo=i(Y),ku=n(Y,"LI",{});var V$e=s(ku);lme=n(V$e,"STRONG",{});var abt=s(lme);hMo=r(abt,"wav2vec2-conformer"),abt.forEach(t),uMo=r(V$e," \u2014 "),Sj=n(V$e,"A",{href:!0});var nbt=s(Sj);pMo=r(nbt,"Wav2Vec2FeatureExtractor"),nbt.forEach(t),_Mo=r(V$e," (Wav2Vec2-Conformer model)"),V$e.forEach(t),bMo=i(Y),Su=n(Y,"LI",{});var X$e=s(Su);ime=n(X$e,"STRONG",{});var sbt=s(ime);vMo=r(sbt,"yolos"),sbt.forEach(t),FMo=r(X$e," \u2014 "),Rj=n(X$e,"A",{href:!0});var lbt=s(Rj);TMo=r(lbt,"YolosFeatureExtractor"),lbt.forEach(t),MMo=r(X$e," (YOLOS model)"),X$e.forEach(t),Y.forEach(t),EMo=i(ia),T(Ru.$$.fragment,ia),CMo=i(ia),T(Pu.$$.fragment,ia),ia.forEach(t),wMo=i(il),Bu=n(il,"DIV",{class:!0});var YHe=s(Bu);T(m8.$$.fragment,YHe),AMo=i(YHe),dme=n(YHe,"P",{});var ibt=s(dme);LMo=r(ibt,"Register a new feature extractor for this class."),ibt.forEach(t),YHe.forEach(t),il.forEach(t),WWe=i(m),Hi=n(m,"H2",{class:!0});var KHe=s(Hi);Iu=n(KHe,"A",{id:!0,class:!0,href:!0});var dbt=s(Iu);cme=n(dbt,"SPAN",{});var cbt=s(cme);T(f8.$$.fragment,cbt),cbt.forEach(t),dbt.forEach(t),yMo=i(KHe),mme=n(KHe,"SPAN",{});var mbt=s(mme);xMo=r(mbt,"AutoProcessor"),mbt.forEach(t),KHe.forEach(t),QWe=i(m),ko=n(m,"DIV",{class:!0});var dl=s(ko);T(g8.$$.fragment,dl),$Mo=i(dl),h8=n(dl,"P",{});var ZHe=s(h8);kMo=r(ZHe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Pj=n(ZHe,"A",{href:!0});var fbt=s(Pj);SMo=r(fbt,"AutoProcessor.from_pretrained()"),fbt.forEach(t),RMo=r(ZHe," class method."),ZHe.forEach(t),PMo=i(dl),u8=n(dl,"P",{});var eUe=s(u8);BMo=r(eUe,"This class cannot be instantiated directly using "),fme=n(eUe,"CODE",{});var gbt=s(fme);IMo=r(gbt,"__init__()"),gbt.forEach(t),NMo=r(eUe," (throws an error)."),eUe.forEach(t),qMo=i(dl),Je=n(dl,"DIV",{class:!0});var da=s(Je);T(p8.$$.fragment,da),jMo=i(da),gme=n(da,"P",{});var hbt=s(gme);DMo=r(hbt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hbt.forEach(t),GMo=i(da),Ui=n(da,"P",{});var tae=s(Ui);OMo=r(tae,"The processor class to instantiate is selected based on the "),hme=n(tae,"CODE",{});var ubt=s(hme);VMo=r(ubt,"model_type"),ubt.forEach(t),XMo=r(tae,` property of the config object (either
passed as an argument or loaded from `),ume=n(tae,"CODE",{});var pbt=s(ume);zMo=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),WMo=r(tae," if possible):"),tae.forEach(t),QMo=i(da),me=n(da,"UL",{});var pe=s(me);Nu=n(pe,"LI",{});var z$e=s(Nu);pme=n(z$e,"STRONG",{});var _bt=s(pme);HMo=r(_bt,"clip"),_bt.forEach(t),UMo=r(z$e," \u2014 "),Bj=n(z$e,"A",{href:!0});var bbt=s(Bj);JMo=r(bbt,"CLIPProcessor"),bbt.forEach(t),YMo=r(z$e," (CLIP model)"),z$e.forEach(t),KMo=i(pe),qu=n(pe,"LI",{});var W$e=s(qu);_me=n(W$e,"STRONG",{});var vbt=s(_me);ZMo=r(vbt,"flava"),vbt.forEach(t),eEo=r(W$e," \u2014 "),Ij=n(W$e,"A",{href:!0});var Fbt=s(Ij);oEo=r(Fbt,"FlavaProcessor"),Fbt.forEach(t),rEo=r(W$e," (FLAVA model)"),W$e.forEach(t),tEo=i(pe),ju=n(pe,"LI",{});var Q$e=s(ju);bme=n(Q$e,"STRONG",{});var Tbt=s(bme);aEo=r(Tbt,"groupvit"),Tbt.forEach(t),nEo=r(Q$e," \u2014 "),Nj=n(Q$e,"A",{href:!0});var Mbt=s(Nj);sEo=r(Mbt,"CLIPProcessor"),Mbt.forEach(t),lEo=r(Q$e," (GroupViT model)"),Q$e.forEach(t),iEo=i(pe),Du=n(pe,"LI",{});var H$e=s(Du);vme=n(H$e,"STRONG",{});var Ebt=s(vme);dEo=r(Ebt,"layoutlmv2"),Ebt.forEach(t),cEo=r(H$e," \u2014 "),qj=n(H$e,"A",{href:!0});var Cbt=s(qj);mEo=r(Cbt,"LayoutLMv2Processor"),Cbt.forEach(t),fEo=r(H$e," (LayoutLMv2 model)"),H$e.forEach(t),gEo=i(pe),Gu=n(pe,"LI",{});var U$e=s(Gu);Fme=n(U$e,"STRONG",{});var wbt=s(Fme);hEo=r(wbt,"layoutlmv3"),wbt.forEach(t),uEo=r(U$e," \u2014 "),jj=n(U$e,"A",{href:!0});var Abt=s(jj);pEo=r(Abt,"LayoutLMv3Processor"),Abt.forEach(t),_Eo=r(U$e," (LayoutLMv3 model)"),U$e.forEach(t),bEo=i(pe),Ou=n(pe,"LI",{});var J$e=s(Ou);Tme=n(J$e,"STRONG",{});var Lbt=s(Tme);vEo=r(Lbt,"layoutxlm"),Lbt.forEach(t),FEo=r(J$e," \u2014 "),Dj=n(J$e,"A",{href:!0});var ybt=s(Dj);TEo=r(ybt,"LayoutXLMProcessor"),ybt.forEach(t),MEo=r(J$e," (LayoutXLM model)"),J$e.forEach(t),EEo=i(pe),Vu=n(pe,"LI",{});var Y$e=s(Vu);Mme=n(Y$e,"STRONG",{});var xbt=s(Mme);CEo=r(xbt,"owlvit"),xbt.forEach(t),wEo=r(Y$e," \u2014 "),Gj=n(Y$e,"A",{href:!0});var $bt=s(Gj);AEo=r($bt,"OwlViTProcessor"),$bt.forEach(t),LEo=r(Y$e," (OWL-ViT model)"),Y$e.forEach(t),yEo=i(pe),Xu=n(pe,"LI",{});var K$e=s(Xu);Eme=n(K$e,"STRONG",{});var kbt=s(Eme);xEo=r(kbt,"sew"),kbt.forEach(t),$Eo=r(K$e," \u2014 "),Oj=n(K$e,"A",{href:!0});var Sbt=s(Oj);kEo=r(Sbt,"Wav2Vec2Processor"),Sbt.forEach(t),SEo=r(K$e," (SEW model)"),K$e.forEach(t),REo=i(pe),zu=n(pe,"LI",{});var Z$e=s(zu);Cme=n(Z$e,"STRONG",{});var Rbt=s(Cme);PEo=r(Rbt,"sew-d"),Rbt.forEach(t),BEo=r(Z$e," \u2014 "),Vj=n(Z$e,"A",{href:!0});var Pbt=s(Vj);IEo=r(Pbt,"Wav2Vec2Processor"),Pbt.forEach(t),NEo=r(Z$e," (SEW-D model)"),Z$e.forEach(t),qEo=i(pe),Wu=n(pe,"LI",{});var eke=s(Wu);wme=n(eke,"STRONG",{});var Bbt=s(wme);jEo=r(Bbt,"speech_to_text"),Bbt.forEach(t),DEo=r(eke," \u2014 "),Xj=n(eke,"A",{href:!0});var Ibt=s(Xj);GEo=r(Ibt,"Speech2TextProcessor"),Ibt.forEach(t),OEo=r(eke," (Speech2Text model)"),eke.forEach(t),VEo=i(pe),Qu=n(pe,"LI",{});var oke=s(Qu);Ame=n(oke,"STRONG",{});var Nbt=s(Ame);XEo=r(Nbt,"speech_to_text_2"),Nbt.forEach(t),zEo=r(oke," \u2014 "),zj=n(oke,"A",{href:!0});var qbt=s(zj);WEo=r(qbt,"Speech2Text2Processor"),qbt.forEach(t),QEo=r(oke," (Speech2Text2 model)"),oke.forEach(t),HEo=i(pe),Hu=n(pe,"LI",{});var rke=s(Hu);Lme=n(rke,"STRONG",{});var jbt=s(Lme);UEo=r(jbt,"trocr"),jbt.forEach(t),JEo=r(rke," \u2014 "),Wj=n(rke,"A",{href:!0});var Dbt=s(Wj);YEo=r(Dbt,"TrOCRProcessor"),Dbt.forEach(t),KEo=r(rke," (TrOCR model)"),rke.forEach(t),ZEo=i(pe),Uu=n(pe,"LI",{});var tke=s(Uu);yme=n(tke,"STRONG",{});var Gbt=s(yme);e4o=r(Gbt,"unispeech"),Gbt.forEach(t),o4o=r(tke," \u2014 "),Qj=n(tke,"A",{href:!0});var Obt=s(Qj);r4o=r(Obt,"Wav2Vec2Processor"),Obt.forEach(t),t4o=r(tke," (UniSpeech model)"),tke.forEach(t),a4o=i(pe),Ju=n(pe,"LI",{});var ake=s(Ju);xme=n(ake,"STRONG",{});var Vbt=s(xme);n4o=r(Vbt,"unispeech-sat"),Vbt.forEach(t),s4o=r(ake," \u2014 "),Hj=n(ake,"A",{href:!0});var Xbt=s(Hj);l4o=r(Xbt,"Wav2Vec2Processor"),Xbt.forEach(t),i4o=r(ake," (UniSpeechSat model)"),ake.forEach(t),d4o=i(pe),Yu=n(pe,"LI",{});var nke=s(Yu);$me=n(nke,"STRONG",{});var zbt=s($me);c4o=r(zbt,"vilt"),zbt.forEach(t),m4o=r(nke," \u2014 "),Uj=n(nke,"A",{href:!0});var Wbt=s(Uj);f4o=r(Wbt,"ViltProcessor"),Wbt.forEach(t),g4o=r(nke," (ViLT model)"),nke.forEach(t),h4o=i(pe),Ku=n(pe,"LI",{});var ske=s(Ku);kme=n(ske,"STRONG",{});var Qbt=s(kme);u4o=r(Qbt,"vision-text-dual-encoder"),Qbt.forEach(t),p4o=r(ske," \u2014 "),Jj=n(ske,"A",{href:!0});var Hbt=s(Jj);_4o=r(Hbt,"VisionTextDualEncoderProcessor"),Hbt.forEach(t),b4o=r(ske," (VisionTextDualEncoder model)"),ske.forEach(t),v4o=i(pe),Zu=n(pe,"LI",{});var lke=s(Zu);Sme=n(lke,"STRONG",{});var Ubt=s(Sme);F4o=r(Ubt,"wav2vec2"),Ubt.forEach(t),T4o=r(lke," \u2014 "),Yj=n(lke,"A",{href:!0});var Jbt=s(Yj);M4o=r(Jbt,"Wav2Vec2Processor"),Jbt.forEach(t),E4o=r(lke," (Wav2Vec2 model)"),lke.forEach(t),C4o=i(pe),ep=n(pe,"LI",{});var ike=s(ep);Rme=n(ike,"STRONG",{});var Ybt=s(Rme);w4o=r(Ybt,"wav2vec2-conformer"),Ybt.forEach(t),A4o=r(ike," \u2014 "),Kj=n(ike,"A",{href:!0});var Kbt=s(Kj);L4o=r(Kbt,"Wav2Vec2Processor"),Kbt.forEach(t),y4o=r(ike," (Wav2Vec2-Conformer model)"),ike.forEach(t),x4o=i(pe),op=n(pe,"LI",{});var dke=s(op);Pme=n(dke,"STRONG",{});var Zbt=s(Pme);$4o=r(Zbt,"wavlm"),Zbt.forEach(t),k4o=r(dke," \u2014 "),Zj=n(dke,"A",{href:!0});var evt=s(Zj);S4o=r(evt,"Wav2Vec2Processor"),evt.forEach(t),R4o=r(dke," (WavLM model)"),dke.forEach(t),pe.forEach(t),P4o=i(da),T(rp.$$.fragment,da),B4o=i(da),T(tp.$$.fragment,da),da.forEach(t),I4o=i(dl),ap=n(dl,"DIV",{class:!0});var oUe=s(ap);T(_8.$$.fragment,oUe),N4o=i(oUe),Bme=n(oUe,"P",{});var ovt=s(Bme);q4o=r(ovt,"Register a new processor for this class."),ovt.forEach(t),oUe.forEach(t),dl.forEach(t),HWe=i(m),Ji=n(m,"H2",{class:!0});var rUe=s(Ji);np=n(rUe,"A",{id:!0,class:!0,href:!0});var rvt=s(np);Ime=n(rvt,"SPAN",{});var tvt=s(Ime);T(b8.$$.fragment,tvt),tvt.forEach(t),rvt.forEach(t),j4o=i(rUe),Nme=n(rUe,"SPAN",{});var avt=s(Nme);D4o=r(avt,"AutoModel"),avt.forEach(t),rUe.forEach(t),UWe=i(m),So=n(m,"DIV",{class:!0});var cl=s(So);T(v8.$$.fragment,cl),G4o=i(cl),Yi=n(cl,"P",{});var aae=s(Yi);O4o=r(aae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eD=n(aae,"A",{href:!0});var nvt=s(eD);V4o=r(nvt,"from_pretrained()"),nvt.forEach(t),X4o=r(aae," class method or the "),oD=n(aae,"A",{href:!0});var svt=s(oD);z4o=r(svt,"from_config()"),svt.forEach(t),W4o=r(aae,` class
method.`),aae.forEach(t),Q4o=i(cl),F8=n(cl,"P",{});var tUe=s(F8);H4o=r(tUe,"This class cannot be instantiated directly using "),qme=n(tUe,"CODE",{});var lvt=s(qme);U4o=r(lvt,"__init__()"),lvt.forEach(t),J4o=r(tUe," (throws an error)."),tUe.forEach(t),Y4o=i(cl),ct=n(cl,"DIV",{class:!0});var Q7=s(ct);T(T8.$$.fragment,Q7),K4o=i(Q7),jme=n(Q7,"P",{});var ivt=s(jme);Z4o=r(ivt,"Instantiates one of the base model classes of the library from a configuration."),ivt.forEach(t),eCo=i(Q7),Ki=n(Q7,"P",{});var nae=s(Ki);oCo=r(nae,`Note:
Loading a model from its configuration file does `),Dme=n(nae,"STRONG",{});var dvt=s(Dme);rCo=r(dvt,"not"),dvt.forEach(t),tCo=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(nae,"A",{href:!0});var cvt=s(rD);aCo=r(cvt,"from_pretrained()"),cvt.forEach(t),nCo=r(nae," to load the model weights."),nae.forEach(t),sCo=i(Q7),T(sp.$$.fragment,Q7),Q7.forEach(t),lCo=i(cl),Ye=n(cl,"DIV",{class:!0});var ca=s(Ye);T(M8.$$.fragment,ca),iCo=i(ca),Gme=n(ca,"P",{});var mvt=s(Gme);dCo=r(mvt,"Instantiate one of the base model classes of the library from a pretrained model."),mvt.forEach(t),cCo=i(ca),Da=n(ca,"P",{});var H7=s(Da);mCo=r(H7,"The model class to instantiate is selected based on the "),Ome=n(H7,"CODE",{});var fvt=s(Ome);fCo=r(fvt,"model_type"),fvt.forEach(t),gCo=r(H7,` property of the config object (either
passed as an argument or loaded from `),Vme=n(H7,"CODE",{});var gvt=s(Vme);hCo=r(gvt,"pretrained_model_name_or_path"),gvt.forEach(t),uCo=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(H7,"CODE",{});var hvt=s(Xme);pCo=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),_Co=r(H7,":"),H7.forEach(t),bCo=i(ca),y=n(ca,"UL",{});var x=s(y);lp=n(x,"LI",{});var cke=s(lp);zme=n(cke,"STRONG",{});var uvt=s(zme);vCo=r(uvt,"albert"),uvt.forEach(t),FCo=r(cke," \u2014 "),tD=n(cke,"A",{href:!0});var pvt=s(tD);TCo=r(pvt,"AlbertModel"),pvt.forEach(t),MCo=r(cke," (ALBERT model)"),cke.forEach(t),ECo=i(x),ip=n(x,"LI",{});var mke=s(ip);Wme=n(mke,"STRONG",{});var _vt=s(Wme);CCo=r(_vt,"bart"),_vt.forEach(t),wCo=r(mke," \u2014 "),aD=n(mke,"A",{href:!0});var bvt=s(aD);ACo=r(bvt,"BartModel"),bvt.forEach(t),LCo=r(mke," (BART model)"),mke.forEach(t),yCo=i(x),dp=n(x,"LI",{});var fke=s(dp);Qme=n(fke,"STRONG",{});var vvt=s(Qme);xCo=r(vvt,"beit"),vvt.forEach(t),$Co=r(fke," \u2014 "),nD=n(fke,"A",{href:!0});var Fvt=s(nD);kCo=r(Fvt,"BeitModel"),Fvt.forEach(t),SCo=r(fke," (BEiT model)"),fke.forEach(t),RCo=i(x),cp=n(x,"LI",{});var gke=s(cp);Hme=n(gke,"STRONG",{});var Tvt=s(Hme);PCo=r(Tvt,"bert"),Tvt.forEach(t),BCo=r(gke," \u2014 "),sD=n(gke,"A",{href:!0});var Mvt=s(sD);ICo=r(Mvt,"BertModel"),Mvt.forEach(t),NCo=r(gke," (BERT model)"),gke.forEach(t),qCo=i(x),mp=n(x,"LI",{});var hke=s(mp);Ume=n(hke,"STRONG",{});var Evt=s(Ume);jCo=r(Evt,"bert-generation"),Evt.forEach(t),DCo=r(hke," \u2014 "),lD=n(hke,"A",{href:!0});var Cvt=s(lD);GCo=r(Cvt,"BertGenerationEncoder"),Cvt.forEach(t),OCo=r(hke," (Bert Generation model)"),hke.forEach(t),VCo=i(x),fp=n(x,"LI",{});var uke=s(fp);Jme=n(uke,"STRONG",{});var wvt=s(Jme);XCo=r(wvt,"big_bird"),wvt.forEach(t),zCo=r(uke," \u2014 "),iD=n(uke,"A",{href:!0});var Avt=s(iD);WCo=r(Avt,"BigBirdModel"),Avt.forEach(t),QCo=r(uke," (BigBird model)"),uke.forEach(t),HCo=i(x),gp=n(x,"LI",{});var pke=s(gp);Yme=n(pke,"STRONG",{});var Lvt=s(Yme);UCo=r(Lvt,"bigbird_pegasus"),Lvt.forEach(t),JCo=r(pke," \u2014 "),dD=n(pke,"A",{href:!0});var yvt=s(dD);YCo=r(yvt,"BigBirdPegasusModel"),yvt.forEach(t),KCo=r(pke," (BigBird-Pegasus model)"),pke.forEach(t),ZCo=i(x),hp=n(x,"LI",{});var _ke=s(hp);Kme=n(_ke,"STRONG",{});var xvt=s(Kme);e5o=r(xvt,"blenderbot"),xvt.forEach(t),o5o=r(_ke," \u2014 "),cD=n(_ke,"A",{href:!0});var $vt=s(cD);r5o=r($vt,"BlenderbotModel"),$vt.forEach(t),t5o=r(_ke," (Blenderbot model)"),_ke.forEach(t),a5o=i(x),up=n(x,"LI",{});var bke=s(up);Zme=n(bke,"STRONG",{});var kvt=s(Zme);n5o=r(kvt,"blenderbot-small"),kvt.forEach(t),s5o=r(bke," \u2014 "),mD=n(bke,"A",{href:!0});var Svt=s(mD);l5o=r(Svt,"BlenderbotSmallModel"),Svt.forEach(t),i5o=r(bke," (BlenderbotSmall model)"),bke.forEach(t),d5o=i(x),pp=n(x,"LI",{});var vke=s(pp);efe=n(vke,"STRONG",{});var Rvt=s(efe);c5o=r(Rvt,"bloom"),Rvt.forEach(t),m5o=r(vke," \u2014 "),fD=n(vke,"A",{href:!0});var Pvt=s(fD);f5o=r(Pvt,"BloomModel"),Pvt.forEach(t),g5o=r(vke," (BLOOM model)"),vke.forEach(t),h5o=i(x),_p=n(x,"LI",{});var Fke=s(_p);ofe=n(Fke,"STRONG",{});var Bvt=s(ofe);u5o=r(Bvt,"camembert"),Bvt.forEach(t),p5o=r(Fke," \u2014 "),gD=n(Fke,"A",{href:!0});var Ivt=s(gD);_5o=r(Ivt,"CamembertModel"),Ivt.forEach(t),b5o=r(Fke," (CamemBERT model)"),Fke.forEach(t),v5o=i(x),bp=n(x,"LI",{});var Tke=s(bp);rfe=n(Tke,"STRONG",{});var Nvt=s(rfe);F5o=r(Nvt,"canine"),Nvt.forEach(t),T5o=r(Tke," \u2014 "),hD=n(Tke,"A",{href:!0});var qvt=s(hD);M5o=r(qvt,"CanineModel"),qvt.forEach(t),E5o=r(Tke," (CANINE model)"),Tke.forEach(t),C5o=i(x),vp=n(x,"LI",{});var Mke=s(vp);tfe=n(Mke,"STRONG",{});var jvt=s(tfe);w5o=r(jvt,"clip"),jvt.forEach(t),A5o=r(Mke," \u2014 "),uD=n(Mke,"A",{href:!0});var Dvt=s(uD);L5o=r(Dvt,"CLIPModel"),Dvt.forEach(t),y5o=r(Mke," (CLIP model)"),Mke.forEach(t),x5o=i(x),Fp=n(x,"LI",{});var Eke=s(Fp);afe=n(Eke,"STRONG",{});var Gvt=s(afe);$5o=r(Gvt,"codegen"),Gvt.forEach(t),k5o=r(Eke," \u2014 "),pD=n(Eke,"A",{href:!0});var Ovt=s(pD);S5o=r(Ovt,"CodeGenModel"),Ovt.forEach(t),R5o=r(Eke," (CodeGen model)"),Eke.forEach(t),P5o=i(x),Tp=n(x,"LI",{});var Cke=s(Tp);nfe=n(Cke,"STRONG",{});var Vvt=s(nfe);B5o=r(Vvt,"convbert"),Vvt.forEach(t),I5o=r(Cke," \u2014 "),_D=n(Cke,"A",{href:!0});var Xvt=s(_D);N5o=r(Xvt,"ConvBertModel"),Xvt.forEach(t),q5o=r(Cke," (ConvBERT model)"),Cke.forEach(t),j5o=i(x),Mp=n(x,"LI",{});var wke=s(Mp);sfe=n(wke,"STRONG",{});var zvt=s(sfe);D5o=r(zvt,"convnext"),zvt.forEach(t),G5o=r(wke," \u2014 "),bD=n(wke,"A",{href:!0});var Wvt=s(bD);O5o=r(Wvt,"ConvNextModel"),Wvt.forEach(t),V5o=r(wke," (ConvNeXT model)"),wke.forEach(t),X5o=i(x),Ep=n(x,"LI",{});var Ake=s(Ep);lfe=n(Ake,"STRONG",{});var Qvt=s(lfe);z5o=r(Qvt,"ctrl"),Qvt.forEach(t),W5o=r(Ake," \u2014 "),vD=n(Ake,"A",{href:!0});var Hvt=s(vD);Q5o=r(Hvt,"CTRLModel"),Hvt.forEach(t),H5o=r(Ake," (CTRL model)"),Ake.forEach(t),U5o=i(x),Cp=n(x,"LI",{});var Lke=s(Cp);ife=n(Lke,"STRONG",{});var Uvt=s(ife);J5o=r(Uvt,"cvt"),Uvt.forEach(t),Y5o=r(Lke," \u2014 "),FD=n(Lke,"A",{href:!0});var Jvt=s(FD);K5o=r(Jvt,"CvtModel"),Jvt.forEach(t),Z5o=r(Lke," (CvT model)"),Lke.forEach(t),e3o=i(x),wp=n(x,"LI",{});var yke=s(wp);dfe=n(yke,"STRONG",{});var Yvt=s(dfe);o3o=r(Yvt,"data2vec-audio"),Yvt.forEach(t),r3o=r(yke," \u2014 "),TD=n(yke,"A",{href:!0});var Kvt=s(TD);t3o=r(Kvt,"Data2VecAudioModel"),Kvt.forEach(t),a3o=r(yke," (Data2VecAudio model)"),yke.forEach(t),n3o=i(x),Ap=n(x,"LI",{});var xke=s(Ap);cfe=n(xke,"STRONG",{});var Zvt=s(cfe);s3o=r(Zvt,"data2vec-text"),Zvt.forEach(t),l3o=r(xke," \u2014 "),MD=n(xke,"A",{href:!0});var e1t=s(MD);i3o=r(e1t,"Data2VecTextModel"),e1t.forEach(t),d3o=r(xke," (Data2VecText model)"),xke.forEach(t),c3o=i(x),Lp=n(x,"LI",{});var $ke=s(Lp);mfe=n($ke,"STRONG",{});var o1t=s(mfe);m3o=r(o1t,"data2vec-vision"),o1t.forEach(t),f3o=r($ke," \u2014 "),ED=n($ke,"A",{href:!0});var r1t=s(ED);g3o=r(r1t,"Data2VecVisionModel"),r1t.forEach(t),h3o=r($ke," (Data2VecVision model)"),$ke.forEach(t),u3o=i(x),yp=n(x,"LI",{});var kke=s(yp);ffe=n(kke,"STRONG",{});var t1t=s(ffe);p3o=r(t1t,"deberta"),t1t.forEach(t),_3o=r(kke," \u2014 "),CD=n(kke,"A",{href:!0});var a1t=s(CD);b3o=r(a1t,"DebertaModel"),a1t.forEach(t),v3o=r(kke," (DeBERTa model)"),kke.forEach(t),F3o=i(x),xp=n(x,"LI",{});var Ske=s(xp);gfe=n(Ske,"STRONG",{});var n1t=s(gfe);T3o=r(n1t,"deberta-v2"),n1t.forEach(t),M3o=r(Ske," \u2014 "),wD=n(Ske,"A",{href:!0});var s1t=s(wD);E3o=r(s1t,"DebertaV2Model"),s1t.forEach(t),C3o=r(Ske," (DeBERTa-v2 model)"),Ske.forEach(t),w3o=i(x),$p=n(x,"LI",{});var Rke=s($p);hfe=n(Rke,"STRONG",{});var l1t=s(hfe);A3o=r(l1t,"decision_transformer"),l1t.forEach(t),L3o=r(Rke," \u2014 "),AD=n(Rke,"A",{href:!0});var i1t=s(AD);y3o=r(i1t,"DecisionTransformerModel"),i1t.forEach(t),x3o=r(Rke," (Decision Transformer model)"),Rke.forEach(t),$3o=i(x),kp=n(x,"LI",{});var Pke=s(kp);ufe=n(Pke,"STRONG",{});var d1t=s(ufe);k3o=r(d1t,"deit"),d1t.forEach(t),S3o=r(Pke," \u2014 "),LD=n(Pke,"A",{href:!0});var c1t=s(LD);R3o=r(c1t,"DeiTModel"),c1t.forEach(t),P3o=r(Pke," (DeiT model)"),Pke.forEach(t),B3o=i(x),Sp=n(x,"LI",{});var Bke=s(Sp);pfe=n(Bke,"STRONG",{});var m1t=s(pfe);I3o=r(m1t,"detr"),m1t.forEach(t),N3o=r(Bke," \u2014 "),yD=n(Bke,"A",{href:!0});var f1t=s(yD);q3o=r(f1t,"DetrModel"),f1t.forEach(t),j3o=r(Bke," (DETR model)"),Bke.forEach(t),D3o=i(x),Rp=n(x,"LI",{});var Ike=s(Rp);_fe=n(Ike,"STRONG",{});var g1t=s(_fe);G3o=r(g1t,"distilbert"),g1t.forEach(t),O3o=r(Ike," \u2014 "),xD=n(Ike,"A",{href:!0});var h1t=s(xD);V3o=r(h1t,"DistilBertModel"),h1t.forEach(t),X3o=r(Ike," (DistilBERT model)"),Ike.forEach(t),z3o=i(x),Pp=n(x,"LI",{});var Nke=s(Pp);bfe=n(Nke,"STRONG",{});var u1t=s(bfe);W3o=r(u1t,"dpr"),u1t.forEach(t),Q3o=r(Nke," \u2014 "),$D=n(Nke,"A",{href:!0});var p1t=s($D);H3o=r(p1t,"DPRQuestionEncoder"),p1t.forEach(t),U3o=r(Nke," (DPR model)"),Nke.forEach(t),J3o=i(x),Bp=n(x,"LI",{});var qke=s(Bp);vfe=n(qke,"STRONG",{});var _1t=s(vfe);Y3o=r(_1t,"dpt"),_1t.forEach(t),K3o=r(qke," \u2014 "),kD=n(qke,"A",{href:!0});var b1t=s(kD);Z3o=r(b1t,"DPTModel"),b1t.forEach(t),e0o=r(qke," (DPT model)"),qke.forEach(t),o0o=i(x),Ip=n(x,"LI",{});var jke=s(Ip);Ffe=n(jke,"STRONG",{});var v1t=s(Ffe);r0o=r(v1t,"electra"),v1t.forEach(t),t0o=r(jke," \u2014 "),SD=n(jke,"A",{href:!0});var F1t=s(SD);a0o=r(F1t,"ElectraModel"),F1t.forEach(t),n0o=r(jke," (ELECTRA model)"),jke.forEach(t),s0o=i(x),Np=n(x,"LI",{});var Dke=s(Np);Tfe=n(Dke,"STRONG",{});var T1t=s(Tfe);l0o=r(T1t,"flaubert"),T1t.forEach(t),i0o=r(Dke," \u2014 "),RD=n(Dke,"A",{href:!0});var M1t=s(RD);d0o=r(M1t,"FlaubertModel"),M1t.forEach(t),c0o=r(Dke," (FlauBERT model)"),Dke.forEach(t),m0o=i(x),qp=n(x,"LI",{});var Gke=s(qp);Mfe=n(Gke,"STRONG",{});var E1t=s(Mfe);f0o=r(E1t,"flava"),E1t.forEach(t),g0o=r(Gke," \u2014 "),PD=n(Gke,"A",{href:!0});var C1t=s(PD);h0o=r(C1t,"FlavaModel"),C1t.forEach(t),u0o=r(Gke," (FLAVA model)"),Gke.forEach(t),p0o=i(x),jp=n(x,"LI",{});var Oke=s(jp);Efe=n(Oke,"STRONG",{});var w1t=s(Efe);_0o=r(w1t,"fnet"),w1t.forEach(t),b0o=r(Oke," \u2014 "),BD=n(Oke,"A",{href:!0});var A1t=s(BD);v0o=r(A1t,"FNetModel"),A1t.forEach(t),F0o=r(Oke," (FNet model)"),Oke.forEach(t),T0o=i(x),Dp=n(x,"LI",{});var Vke=s(Dp);Cfe=n(Vke,"STRONG",{});var L1t=s(Cfe);M0o=r(L1t,"fsmt"),L1t.forEach(t),E0o=r(Vke," \u2014 "),ID=n(Vke,"A",{href:!0});var y1t=s(ID);C0o=r(y1t,"FSMTModel"),y1t.forEach(t),w0o=r(Vke," (FairSeq Machine-Translation model)"),Vke.forEach(t),A0o=i(x),ol=n(x,"LI",{});var wR=s(ol);wfe=n(wR,"STRONG",{});var x1t=s(wfe);L0o=r(x1t,"funnel"),x1t.forEach(t),y0o=r(wR," \u2014 "),ND=n(wR,"A",{href:!0});var $1t=s(ND);x0o=r($1t,"FunnelModel"),$1t.forEach(t),$0o=r(wR," or "),qD=n(wR,"A",{href:!0});var k1t=s(qD);k0o=r(k1t,"FunnelBaseModel"),k1t.forEach(t),S0o=r(wR," (Funnel Transformer model)"),wR.forEach(t),R0o=i(x),Gp=n(x,"LI",{});var Xke=s(Gp);Afe=n(Xke,"STRONG",{});var S1t=s(Afe);P0o=r(S1t,"glpn"),S1t.forEach(t),B0o=r(Xke," \u2014 "),jD=n(Xke,"A",{href:!0});var R1t=s(jD);I0o=r(R1t,"GLPNModel"),R1t.forEach(t),N0o=r(Xke," (GLPN model)"),Xke.forEach(t),q0o=i(x),Op=n(x,"LI",{});var zke=s(Op);Lfe=n(zke,"STRONG",{});var P1t=s(Lfe);j0o=r(P1t,"gpt2"),P1t.forEach(t),D0o=r(zke," \u2014 "),DD=n(zke,"A",{href:!0});var B1t=s(DD);G0o=r(B1t,"GPT2Model"),B1t.forEach(t),O0o=r(zke," (OpenAI GPT-2 model)"),zke.forEach(t),V0o=i(x),Vp=n(x,"LI",{});var Wke=s(Vp);yfe=n(Wke,"STRONG",{});var I1t=s(yfe);X0o=r(I1t,"gpt_neo"),I1t.forEach(t),z0o=r(Wke," \u2014 "),GD=n(Wke,"A",{href:!0});var N1t=s(GD);W0o=r(N1t,"GPTNeoModel"),N1t.forEach(t),Q0o=r(Wke," (GPT Neo model)"),Wke.forEach(t),H0o=i(x),Xp=n(x,"LI",{});var Qke=s(Xp);xfe=n(Qke,"STRONG",{});var q1t=s(xfe);U0o=r(q1t,"gpt_neox"),q1t.forEach(t),J0o=r(Qke," \u2014 "),OD=n(Qke,"A",{href:!0});var j1t=s(OD);Y0o=r(j1t,"GPTNeoXModel"),j1t.forEach(t),K0o=r(Qke," (GPT NeoX model)"),Qke.forEach(t),Z0o=i(x),zp=n(x,"LI",{});var Hke=s(zp);$fe=n(Hke,"STRONG",{});var D1t=s($fe);ewo=r(D1t,"gptj"),D1t.forEach(t),owo=r(Hke," \u2014 "),VD=n(Hke,"A",{href:!0});var G1t=s(VD);rwo=r(G1t,"GPTJModel"),G1t.forEach(t),two=r(Hke," (GPT-J model)"),Hke.forEach(t),awo=i(x),Wp=n(x,"LI",{});var Uke=s(Wp);kfe=n(Uke,"STRONG",{});var O1t=s(kfe);nwo=r(O1t,"groupvit"),O1t.forEach(t),swo=r(Uke," \u2014 "),XD=n(Uke,"A",{href:!0});var V1t=s(XD);lwo=r(V1t,"GroupViTModel"),V1t.forEach(t),iwo=r(Uke," (GroupViT model)"),Uke.forEach(t),dwo=i(x),Qp=n(x,"LI",{});var Jke=s(Qp);Sfe=n(Jke,"STRONG",{});var X1t=s(Sfe);cwo=r(X1t,"hubert"),X1t.forEach(t),mwo=r(Jke," \u2014 "),zD=n(Jke,"A",{href:!0});var z1t=s(zD);fwo=r(z1t,"HubertModel"),z1t.forEach(t),gwo=r(Jke," (Hubert model)"),Jke.forEach(t),hwo=i(x),Hp=n(x,"LI",{});var Yke=s(Hp);Rfe=n(Yke,"STRONG",{});var W1t=s(Rfe);uwo=r(W1t,"ibert"),W1t.forEach(t),pwo=r(Yke," \u2014 "),WD=n(Yke,"A",{href:!0});var Q1t=s(WD);_wo=r(Q1t,"IBertModel"),Q1t.forEach(t),bwo=r(Yke," (I-BERT model)"),Yke.forEach(t),vwo=i(x),Up=n(x,"LI",{});var Kke=s(Up);Pfe=n(Kke,"STRONG",{});var H1t=s(Pfe);Fwo=r(H1t,"imagegpt"),H1t.forEach(t),Two=r(Kke," \u2014 "),QD=n(Kke,"A",{href:!0});var U1t=s(QD);Mwo=r(U1t,"ImageGPTModel"),U1t.forEach(t),Ewo=r(Kke," (ImageGPT model)"),Kke.forEach(t),Cwo=i(x),Jp=n(x,"LI",{});var Zke=s(Jp);Bfe=n(Zke,"STRONG",{});var J1t=s(Bfe);wwo=r(J1t,"layoutlm"),J1t.forEach(t),Awo=r(Zke," \u2014 "),HD=n(Zke,"A",{href:!0});var Y1t=s(HD);Lwo=r(Y1t,"LayoutLMModel"),Y1t.forEach(t),ywo=r(Zke," (LayoutLM model)"),Zke.forEach(t),xwo=i(x),Yp=n(x,"LI",{});var eSe=s(Yp);Ife=n(eSe,"STRONG",{});var K1t=s(Ife);$wo=r(K1t,"layoutlmv2"),K1t.forEach(t),kwo=r(eSe," \u2014 "),UD=n(eSe,"A",{href:!0});var Z1t=s(UD);Swo=r(Z1t,"LayoutLMv2Model"),Z1t.forEach(t),Rwo=r(eSe," (LayoutLMv2 model)"),eSe.forEach(t),Pwo=i(x),Kp=n(x,"LI",{});var oSe=s(Kp);Nfe=n(oSe,"STRONG",{});var eFt=s(Nfe);Bwo=r(eFt,"layoutlmv3"),eFt.forEach(t),Iwo=r(oSe," \u2014 "),JD=n(oSe,"A",{href:!0});var oFt=s(JD);Nwo=r(oFt,"LayoutLMv3Model"),oFt.forEach(t),qwo=r(oSe," (LayoutLMv3 model)"),oSe.forEach(t),jwo=i(x),Zp=n(x,"LI",{});var rSe=s(Zp);qfe=n(rSe,"STRONG",{});var rFt=s(qfe);Dwo=r(rFt,"led"),rFt.forEach(t),Gwo=r(rSe," \u2014 "),YD=n(rSe,"A",{href:!0});var tFt=s(YD);Owo=r(tFt,"LEDModel"),tFt.forEach(t),Vwo=r(rSe," (LED model)"),rSe.forEach(t),Xwo=i(x),e_=n(x,"LI",{});var tSe=s(e_);jfe=n(tSe,"STRONG",{});var aFt=s(jfe);zwo=r(aFt,"levit"),aFt.forEach(t),Wwo=r(tSe," \u2014 "),KD=n(tSe,"A",{href:!0});var nFt=s(KD);Qwo=r(nFt,"LevitModel"),nFt.forEach(t),Hwo=r(tSe," (LeViT model)"),tSe.forEach(t),Uwo=i(x),o_=n(x,"LI",{});var aSe=s(o_);Dfe=n(aSe,"STRONG",{});var sFt=s(Dfe);Jwo=r(sFt,"longformer"),sFt.forEach(t),Ywo=r(aSe," \u2014 "),ZD=n(aSe,"A",{href:!0});var lFt=s(ZD);Kwo=r(lFt,"LongformerModel"),lFt.forEach(t),Zwo=r(aSe," (Longformer model)"),aSe.forEach(t),e6o=i(x),r_=n(x,"LI",{});var nSe=s(r_);Gfe=n(nSe,"STRONG",{});var iFt=s(Gfe);o6o=r(iFt,"longt5"),iFt.forEach(t),r6o=r(nSe," \u2014 "),eG=n(nSe,"A",{href:!0});var dFt=s(eG);t6o=r(dFt,"LongT5Model"),dFt.forEach(t),a6o=r(nSe," (LongT5 model)"),nSe.forEach(t),n6o=i(x),t_=n(x,"LI",{});var sSe=s(t_);Ofe=n(sSe,"STRONG",{});var cFt=s(Ofe);s6o=r(cFt,"luke"),cFt.forEach(t),l6o=r(sSe," \u2014 "),oG=n(sSe,"A",{href:!0});var mFt=s(oG);i6o=r(mFt,"LukeModel"),mFt.forEach(t),d6o=r(sSe," (LUKE model)"),sSe.forEach(t),c6o=i(x),a_=n(x,"LI",{});var lSe=s(a_);Vfe=n(lSe,"STRONG",{});var fFt=s(Vfe);m6o=r(fFt,"lxmert"),fFt.forEach(t),f6o=r(lSe," \u2014 "),rG=n(lSe,"A",{href:!0});var gFt=s(rG);g6o=r(gFt,"LxmertModel"),gFt.forEach(t),h6o=r(lSe," (LXMERT model)"),lSe.forEach(t),u6o=i(x),n_=n(x,"LI",{});var iSe=s(n_);Xfe=n(iSe,"STRONG",{});var hFt=s(Xfe);p6o=r(hFt,"m2m_100"),hFt.forEach(t),_6o=r(iSe," \u2014 "),tG=n(iSe,"A",{href:!0});var uFt=s(tG);b6o=r(uFt,"M2M100Model"),uFt.forEach(t),v6o=r(iSe," (M2M100 model)"),iSe.forEach(t),F6o=i(x),s_=n(x,"LI",{});var dSe=s(s_);zfe=n(dSe,"STRONG",{});var pFt=s(zfe);T6o=r(pFt,"marian"),pFt.forEach(t),M6o=r(dSe," \u2014 "),aG=n(dSe,"A",{href:!0});var _Ft=s(aG);E6o=r(_Ft,"MarianModel"),_Ft.forEach(t),C6o=r(dSe," (Marian model)"),dSe.forEach(t),w6o=i(x),l_=n(x,"LI",{});var cSe=s(l_);Wfe=n(cSe,"STRONG",{});var bFt=s(Wfe);A6o=r(bFt,"maskformer"),bFt.forEach(t),L6o=r(cSe," \u2014 "),nG=n(cSe,"A",{href:!0});var vFt=s(nG);y6o=r(vFt,"MaskFormerModel"),vFt.forEach(t),x6o=r(cSe," (MaskFormer model)"),cSe.forEach(t),$6o=i(x),i_=n(x,"LI",{});var mSe=s(i_);Qfe=n(mSe,"STRONG",{});var FFt=s(Qfe);k6o=r(FFt,"mbart"),FFt.forEach(t),S6o=r(mSe," \u2014 "),sG=n(mSe,"A",{href:!0});var TFt=s(sG);R6o=r(TFt,"MBartModel"),TFt.forEach(t),P6o=r(mSe," (mBART model)"),mSe.forEach(t),B6o=i(x),d_=n(x,"LI",{});var fSe=s(d_);Hfe=n(fSe,"STRONG",{});var MFt=s(Hfe);I6o=r(MFt,"mctct"),MFt.forEach(t),N6o=r(fSe," \u2014 "),lG=n(fSe,"A",{href:!0});var EFt=s(lG);q6o=r(EFt,"MCTCTModel"),EFt.forEach(t),j6o=r(fSe," (M-CTC-T model)"),fSe.forEach(t),D6o=i(x),c_=n(x,"LI",{});var gSe=s(c_);Ufe=n(gSe,"STRONG",{});var CFt=s(Ufe);G6o=r(CFt,"megatron-bert"),CFt.forEach(t),O6o=r(gSe," \u2014 "),iG=n(gSe,"A",{href:!0});var wFt=s(iG);V6o=r(wFt,"MegatronBertModel"),wFt.forEach(t),X6o=r(gSe," (Megatron-BERT model)"),gSe.forEach(t),z6o=i(x),m_=n(x,"LI",{});var hSe=s(m_);Jfe=n(hSe,"STRONG",{});var AFt=s(Jfe);W6o=r(AFt,"mobilebert"),AFt.forEach(t),Q6o=r(hSe," \u2014 "),dG=n(hSe,"A",{href:!0});var LFt=s(dG);H6o=r(LFt,"MobileBertModel"),LFt.forEach(t),U6o=r(hSe," (MobileBERT model)"),hSe.forEach(t),J6o=i(x),f_=n(x,"LI",{});var uSe=s(f_);Yfe=n(uSe,"STRONG",{});var yFt=s(Yfe);Y6o=r(yFt,"mobilevit"),yFt.forEach(t),K6o=r(uSe," \u2014 "),cG=n(uSe,"A",{href:!0});var xFt=s(cG);Z6o=r(xFt,"MobileViTModel"),xFt.forEach(t),eAo=r(uSe," (MobileViT model)"),uSe.forEach(t),oAo=i(x),g_=n(x,"LI",{});var pSe=s(g_);Kfe=n(pSe,"STRONG",{});var $Ft=s(Kfe);rAo=r($Ft,"mpnet"),$Ft.forEach(t),tAo=r(pSe," \u2014 "),mG=n(pSe,"A",{href:!0});var kFt=s(mG);aAo=r(kFt,"MPNetModel"),kFt.forEach(t),nAo=r(pSe," (MPNet model)"),pSe.forEach(t),sAo=i(x),h_=n(x,"LI",{});var _Se=s(h_);Zfe=n(_Se,"STRONG",{});var SFt=s(Zfe);lAo=r(SFt,"mt5"),SFt.forEach(t),iAo=r(_Se," \u2014 "),fG=n(_Se,"A",{href:!0});var RFt=s(fG);dAo=r(RFt,"MT5Model"),RFt.forEach(t),cAo=r(_Se," (MT5 model)"),_Se.forEach(t),mAo=i(x),u_=n(x,"LI",{});var bSe=s(u_);ege=n(bSe,"STRONG",{});var PFt=s(ege);fAo=r(PFt,"mvp"),PFt.forEach(t),gAo=r(bSe," \u2014 "),gG=n(bSe,"A",{href:!0});var BFt=s(gG);hAo=r(BFt,"MvpModel"),BFt.forEach(t),uAo=r(bSe," (MVP model)"),bSe.forEach(t),pAo=i(x),p_=n(x,"LI",{});var vSe=s(p_);oge=n(vSe,"STRONG",{});var IFt=s(oge);_Ao=r(IFt,"nezha"),IFt.forEach(t),bAo=r(vSe," \u2014 "),hG=n(vSe,"A",{href:!0});var NFt=s(hG);vAo=r(NFt,"NezhaModel"),NFt.forEach(t),FAo=r(vSe," (Nezha model)"),vSe.forEach(t),TAo=i(x),__=n(x,"LI",{});var FSe=s(__);rge=n(FSe,"STRONG",{});var qFt=s(rge);MAo=r(qFt,"nllb"),qFt.forEach(t),EAo=r(FSe," \u2014 "),uG=n(FSe,"A",{href:!0});var jFt=s(uG);CAo=r(jFt,"M2M100Model"),jFt.forEach(t),wAo=r(FSe," (NLLB model)"),FSe.forEach(t),AAo=i(x),b_=n(x,"LI",{});var TSe=s(b_);tge=n(TSe,"STRONG",{});var DFt=s(tge);LAo=r(DFt,"nystromformer"),DFt.forEach(t),yAo=r(TSe," \u2014 "),pG=n(TSe,"A",{href:!0});var GFt=s(pG);xAo=r(GFt,"NystromformerModel"),GFt.forEach(t),$Ao=r(TSe," (Nystr\xF6mformer model)"),TSe.forEach(t),kAo=i(x),v_=n(x,"LI",{});var MSe=s(v_);age=n(MSe,"STRONG",{});var OFt=s(age);SAo=r(OFt,"openai-gpt"),OFt.forEach(t),RAo=r(MSe," \u2014 "),_G=n(MSe,"A",{href:!0});var VFt=s(_G);PAo=r(VFt,"OpenAIGPTModel"),VFt.forEach(t),BAo=r(MSe," (OpenAI GPT model)"),MSe.forEach(t),IAo=i(x),F_=n(x,"LI",{});var ESe=s(F_);nge=n(ESe,"STRONG",{});var XFt=s(nge);NAo=r(XFt,"opt"),XFt.forEach(t),qAo=r(ESe," \u2014 "),bG=n(ESe,"A",{href:!0});var zFt=s(bG);jAo=r(zFt,"OPTModel"),zFt.forEach(t),DAo=r(ESe," (OPT model)"),ESe.forEach(t),GAo=i(x),T_=n(x,"LI",{});var CSe=s(T_);sge=n(CSe,"STRONG",{});var WFt=s(sge);OAo=r(WFt,"owlvit"),WFt.forEach(t),VAo=r(CSe," \u2014 "),vG=n(CSe,"A",{href:!0});var QFt=s(vG);XAo=r(QFt,"OwlViTModel"),QFt.forEach(t),zAo=r(CSe," (OWL-ViT model)"),CSe.forEach(t),WAo=i(x),M_=n(x,"LI",{});var wSe=s(M_);lge=n(wSe,"STRONG",{});var HFt=s(lge);QAo=r(HFt,"pegasus"),HFt.forEach(t),HAo=r(wSe," \u2014 "),FG=n(wSe,"A",{href:!0});var UFt=s(FG);UAo=r(UFt,"PegasusModel"),UFt.forEach(t),JAo=r(wSe," (Pegasus model)"),wSe.forEach(t),YAo=i(x),E_=n(x,"LI",{});var ASe=s(E_);ige=n(ASe,"STRONG",{});var JFt=s(ige);KAo=r(JFt,"perceiver"),JFt.forEach(t),ZAo=r(ASe," \u2014 "),TG=n(ASe,"A",{href:!0});var YFt=s(TG);e7o=r(YFt,"PerceiverModel"),YFt.forEach(t),o7o=r(ASe," (Perceiver model)"),ASe.forEach(t),r7o=i(x),C_=n(x,"LI",{});var LSe=s(C_);dge=n(LSe,"STRONG",{});var KFt=s(dge);t7o=r(KFt,"plbart"),KFt.forEach(t),a7o=r(LSe," \u2014 "),MG=n(LSe,"A",{href:!0});var ZFt=s(MG);n7o=r(ZFt,"PLBartModel"),ZFt.forEach(t),s7o=r(LSe," (PLBart model)"),LSe.forEach(t),l7o=i(x),w_=n(x,"LI",{});var ySe=s(w_);cge=n(ySe,"STRONG",{});var eTt=s(cge);i7o=r(eTt,"poolformer"),eTt.forEach(t),d7o=r(ySe," \u2014 "),EG=n(ySe,"A",{href:!0});var oTt=s(EG);c7o=r(oTt,"PoolFormerModel"),oTt.forEach(t),m7o=r(ySe," (PoolFormer model)"),ySe.forEach(t),f7o=i(x),A_=n(x,"LI",{});var xSe=s(A_);mge=n(xSe,"STRONG",{});var rTt=s(mge);g7o=r(rTt,"prophetnet"),rTt.forEach(t),h7o=r(xSe," \u2014 "),CG=n(xSe,"A",{href:!0});var tTt=s(CG);u7o=r(tTt,"ProphetNetModel"),tTt.forEach(t),p7o=r(xSe," (ProphetNet model)"),xSe.forEach(t),_7o=i(x),L_=n(x,"LI",{});var $Se=s(L_);fge=n($Se,"STRONG",{});var aTt=s(fge);b7o=r(aTt,"qdqbert"),aTt.forEach(t),v7o=r($Se," \u2014 "),wG=n($Se,"A",{href:!0});var nTt=s(wG);F7o=r(nTt,"QDQBertModel"),nTt.forEach(t),T7o=r($Se," (QDQBert model)"),$Se.forEach(t),M7o=i(x),y_=n(x,"LI",{});var kSe=s(y_);gge=n(kSe,"STRONG",{});var sTt=s(gge);E7o=r(sTt,"reformer"),sTt.forEach(t),C7o=r(kSe," \u2014 "),AG=n(kSe,"A",{href:!0});var lTt=s(AG);w7o=r(lTt,"ReformerModel"),lTt.forEach(t),A7o=r(kSe," (Reformer model)"),kSe.forEach(t),L7o=i(x),x_=n(x,"LI",{});var SSe=s(x_);hge=n(SSe,"STRONG",{});var iTt=s(hge);y7o=r(iTt,"regnet"),iTt.forEach(t),x7o=r(SSe," \u2014 "),LG=n(SSe,"A",{href:!0});var dTt=s(LG);$7o=r(dTt,"RegNetModel"),dTt.forEach(t),k7o=r(SSe," (RegNet model)"),SSe.forEach(t),S7o=i(x),$_=n(x,"LI",{});var RSe=s($_);uge=n(RSe,"STRONG",{});var cTt=s(uge);R7o=r(cTt,"rembert"),cTt.forEach(t),P7o=r(RSe," \u2014 "),yG=n(RSe,"A",{href:!0});var mTt=s(yG);B7o=r(mTt,"RemBertModel"),mTt.forEach(t),I7o=r(RSe," (RemBERT model)"),RSe.forEach(t),N7o=i(x),k_=n(x,"LI",{});var PSe=s(k_);pge=n(PSe,"STRONG",{});var fTt=s(pge);q7o=r(fTt,"resnet"),fTt.forEach(t),j7o=r(PSe," \u2014 "),xG=n(PSe,"A",{href:!0});var gTt=s(xG);D7o=r(gTt,"ResNetModel"),gTt.forEach(t),G7o=r(PSe," (ResNet model)"),PSe.forEach(t),O7o=i(x),S_=n(x,"LI",{});var BSe=s(S_);_ge=n(BSe,"STRONG",{});var hTt=s(_ge);V7o=r(hTt,"retribert"),hTt.forEach(t),X7o=r(BSe," \u2014 "),$G=n(BSe,"A",{href:!0});var uTt=s($G);z7o=r(uTt,"RetriBertModel"),uTt.forEach(t),W7o=r(BSe," (RetriBERT model)"),BSe.forEach(t),Q7o=i(x),R_=n(x,"LI",{});var ISe=s(R_);bge=n(ISe,"STRONG",{});var pTt=s(bge);H7o=r(pTt,"roberta"),pTt.forEach(t),U7o=r(ISe," \u2014 "),kG=n(ISe,"A",{href:!0});var _Tt=s(kG);J7o=r(_Tt,"RobertaModel"),_Tt.forEach(t),Y7o=r(ISe," (RoBERTa model)"),ISe.forEach(t),K7o=i(x),P_=n(x,"LI",{});var NSe=s(P_);vge=n(NSe,"STRONG",{});var bTt=s(vge);Z7o=r(bTt,"roformer"),bTt.forEach(t),eLo=r(NSe," \u2014 "),SG=n(NSe,"A",{href:!0});var vTt=s(SG);oLo=r(vTt,"RoFormerModel"),vTt.forEach(t),rLo=r(NSe," (RoFormer model)"),NSe.forEach(t),tLo=i(x),B_=n(x,"LI",{});var qSe=s(B_);Fge=n(qSe,"STRONG",{});var FTt=s(Fge);aLo=r(FTt,"segformer"),FTt.forEach(t),nLo=r(qSe," \u2014 "),RG=n(qSe,"A",{href:!0});var TTt=s(RG);sLo=r(TTt,"SegformerModel"),TTt.forEach(t),lLo=r(qSe," (SegFormer model)"),qSe.forEach(t),iLo=i(x),I_=n(x,"LI",{});var jSe=s(I_);Tge=n(jSe,"STRONG",{});var MTt=s(Tge);dLo=r(MTt,"sew"),MTt.forEach(t),cLo=r(jSe," \u2014 "),PG=n(jSe,"A",{href:!0});var ETt=s(PG);mLo=r(ETt,"SEWModel"),ETt.forEach(t),fLo=r(jSe," (SEW model)"),jSe.forEach(t),gLo=i(x),N_=n(x,"LI",{});var DSe=s(N_);Mge=n(DSe,"STRONG",{});var CTt=s(Mge);hLo=r(CTt,"sew-d"),CTt.forEach(t),uLo=r(DSe," \u2014 "),BG=n(DSe,"A",{href:!0});var wTt=s(BG);pLo=r(wTt,"SEWDModel"),wTt.forEach(t),_Lo=r(DSe," (SEW-D model)"),DSe.forEach(t),bLo=i(x),q_=n(x,"LI",{});var GSe=s(q_);Ege=n(GSe,"STRONG",{});var ATt=s(Ege);vLo=r(ATt,"speech_to_text"),ATt.forEach(t),FLo=r(GSe," \u2014 "),IG=n(GSe,"A",{href:!0});var LTt=s(IG);TLo=r(LTt,"Speech2TextModel"),LTt.forEach(t),MLo=r(GSe," (Speech2Text model)"),GSe.forEach(t),ELo=i(x),j_=n(x,"LI",{});var OSe=s(j_);Cge=n(OSe,"STRONG",{});var yTt=s(Cge);CLo=r(yTt,"splinter"),yTt.forEach(t),wLo=r(OSe," \u2014 "),NG=n(OSe,"A",{href:!0});var xTt=s(NG);ALo=r(xTt,"SplinterModel"),xTt.forEach(t),LLo=r(OSe," (Splinter model)"),OSe.forEach(t),yLo=i(x),D_=n(x,"LI",{});var VSe=s(D_);wge=n(VSe,"STRONG",{});var $Tt=s(wge);xLo=r($Tt,"squeezebert"),$Tt.forEach(t),$Lo=r(VSe," \u2014 "),qG=n(VSe,"A",{href:!0});var kTt=s(qG);kLo=r(kTt,"SqueezeBertModel"),kTt.forEach(t),SLo=r(VSe," (SqueezeBERT model)"),VSe.forEach(t),RLo=i(x),G_=n(x,"LI",{});var XSe=s(G_);Age=n(XSe,"STRONG",{});var STt=s(Age);PLo=r(STt,"swin"),STt.forEach(t),BLo=r(XSe," \u2014 "),jG=n(XSe,"A",{href:!0});var RTt=s(jG);ILo=r(RTt,"SwinModel"),RTt.forEach(t),NLo=r(XSe," (Swin Transformer model)"),XSe.forEach(t),qLo=i(x),O_=n(x,"LI",{});var zSe=s(O_);Lge=n(zSe,"STRONG",{});var PTt=s(Lge);jLo=r(PTt,"swinv2"),PTt.forEach(t),DLo=r(zSe," \u2014 "),DG=n(zSe,"A",{href:!0});var BTt=s(DG);GLo=r(BTt,"Swinv2Model"),BTt.forEach(t),OLo=r(zSe," (Swin Transformer V2 model)"),zSe.forEach(t),VLo=i(x),V_=n(x,"LI",{});var WSe=s(V_);yge=n(WSe,"STRONG",{});var ITt=s(yge);XLo=r(ITt,"t5"),ITt.forEach(t),zLo=r(WSe," \u2014 "),GG=n(WSe,"A",{href:!0});var NTt=s(GG);WLo=r(NTt,"T5Model"),NTt.forEach(t),QLo=r(WSe," (T5 model)"),WSe.forEach(t),HLo=i(x),X_=n(x,"LI",{});var QSe=s(X_);xge=n(QSe,"STRONG",{});var qTt=s(xge);ULo=r(qTt,"tapas"),qTt.forEach(t),JLo=r(QSe," \u2014 "),OG=n(QSe,"A",{href:!0});var jTt=s(OG);YLo=r(jTt,"TapasModel"),jTt.forEach(t),KLo=r(QSe," (TAPAS model)"),QSe.forEach(t),ZLo=i(x),z_=n(x,"LI",{});var HSe=s(z_);$ge=n(HSe,"STRONG",{});var DTt=s($ge);eyo=r(DTt,"trajectory_transformer"),DTt.forEach(t),oyo=r(HSe," \u2014 "),VG=n(HSe,"A",{href:!0});var GTt=s(VG);ryo=r(GTt,"TrajectoryTransformerModel"),GTt.forEach(t),tyo=r(HSe," (Trajectory Transformer model)"),HSe.forEach(t),ayo=i(x),W_=n(x,"LI",{});var USe=s(W_);kge=n(USe,"STRONG",{});var OTt=s(kge);nyo=r(OTt,"transfo-xl"),OTt.forEach(t),syo=r(USe," \u2014 "),XG=n(USe,"A",{href:!0});var VTt=s(XG);lyo=r(VTt,"TransfoXLModel"),VTt.forEach(t),iyo=r(USe," (Transformer-XL model)"),USe.forEach(t),dyo=i(x),Q_=n(x,"LI",{});var JSe=s(Q_);Sge=n(JSe,"STRONG",{});var XTt=s(Sge);cyo=r(XTt,"unispeech"),XTt.forEach(t),myo=r(JSe," \u2014 "),zG=n(JSe,"A",{href:!0});var zTt=s(zG);fyo=r(zTt,"UniSpeechModel"),zTt.forEach(t),gyo=r(JSe," (UniSpeech model)"),JSe.forEach(t),hyo=i(x),H_=n(x,"LI",{});var YSe=s(H_);Rge=n(YSe,"STRONG",{});var WTt=s(Rge);uyo=r(WTt,"unispeech-sat"),WTt.forEach(t),pyo=r(YSe," \u2014 "),WG=n(YSe,"A",{href:!0});var QTt=s(WG);_yo=r(QTt,"UniSpeechSatModel"),QTt.forEach(t),byo=r(YSe," (UniSpeechSat model)"),YSe.forEach(t),vyo=i(x),U_=n(x,"LI",{});var KSe=s(U_);Pge=n(KSe,"STRONG",{});var HTt=s(Pge);Fyo=r(HTt,"van"),HTt.forEach(t),Tyo=r(KSe," \u2014 "),QG=n(KSe,"A",{href:!0});var UTt=s(QG);Myo=r(UTt,"VanModel"),UTt.forEach(t),Eyo=r(KSe," (VAN model)"),KSe.forEach(t),Cyo=i(x),J_=n(x,"LI",{});var ZSe=s(J_);Bge=n(ZSe,"STRONG",{});var JTt=s(Bge);wyo=r(JTt,"videomae"),JTt.forEach(t),Ayo=r(ZSe," \u2014 "),HG=n(ZSe,"A",{href:!0});var YTt=s(HG);Lyo=r(YTt,"VideoMAEModel"),YTt.forEach(t),yyo=r(ZSe," (VideoMAE model)"),ZSe.forEach(t),xyo=i(x),Y_=n(x,"LI",{});var eRe=s(Y_);Ige=n(eRe,"STRONG",{});var KTt=s(Ige);$yo=r(KTt,"vilt"),KTt.forEach(t),kyo=r(eRe," \u2014 "),UG=n(eRe,"A",{href:!0});var ZTt=s(UG);Syo=r(ZTt,"ViltModel"),ZTt.forEach(t),Ryo=r(eRe," (ViLT model)"),eRe.forEach(t),Pyo=i(x),K_=n(x,"LI",{});var oRe=s(K_);Nge=n(oRe,"STRONG",{});var eMt=s(Nge);Byo=r(eMt,"vision-text-dual-encoder"),eMt.forEach(t),Iyo=r(oRe," \u2014 "),JG=n(oRe,"A",{href:!0});var oMt=s(JG);Nyo=r(oMt,"VisionTextDualEncoderModel"),oMt.forEach(t),qyo=r(oRe," (VisionTextDualEncoder model)"),oRe.forEach(t),jyo=i(x),Z_=n(x,"LI",{});var rRe=s(Z_);qge=n(rRe,"STRONG",{});var rMt=s(qge);Dyo=r(rMt,"visual_bert"),rMt.forEach(t),Gyo=r(rRe," \u2014 "),YG=n(rRe,"A",{href:!0});var tMt=s(YG);Oyo=r(tMt,"VisualBertModel"),tMt.forEach(t),Vyo=r(rRe," (VisualBERT model)"),rRe.forEach(t),Xyo=i(x),e2=n(x,"LI",{});var tRe=s(e2);jge=n(tRe,"STRONG",{});var aMt=s(jge);zyo=r(aMt,"vit"),aMt.forEach(t),Wyo=r(tRe," \u2014 "),KG=n(tRe,"A",{href:!0});var nMt=s(KG);Qyo=r(nMt,"ViTModel"),nMt.forEach(t),Hyo=r(tRe," (ViT model)"),tRe.forEach(t),Uyo=i(x),o2=n(x,"LI",{});var aRe=s(o2);Dge=n(aRe,"STRONG",{});var sMt=s(Dge);Jyo=r(sMt,"vit_mae"),sMt.forEach(t),Yyo=r(aRe," \u2014 "),ZG=n(aRe,"A",{href:!0});var lMt=s(ZG);Kyo=r(lMt,"ViTMAEModel"),lMt.forEach(t),Zyo=r(aRe," (ViTMAE model)"),aRe.forEach(t),e8o=i(x),r2=n(x,"LI",{});var nRe=s(r2);Gge=n(nRe,"STRONG",{});var iMt=s(Gge);o8o=r(iMt,"wav2vec2"),iMt.forEach(t),r8o=r(nRe," \u2014 "),eO=n(nRe,"A",{href:!0});var dMt=s(eO);t8o=r(dMt,"Wav2Vec2Model"),dMt.forEach(t),a8o=r(nRe," (Wav2Vec2 model)"),nRe.forEach(t),n8o=i(x),t2=n(x,"LI",{});var sRe=s(t2);Oge=n(sRe,"STRONG",{});var cMt=s(Oge);s8o=r(cMt,"wav2vec2-conformer"),cMt.forEach(t),l8o=r(sRe," \u2014 "),oO=n(sRe,"A",{href:!0});var mMt=s(oO);i8o=r(mMt,"Wav2Vec2ConformerModel"),mMt.forEach(t),d8o=r(sRe," (Wav2Vec2-Conformer model)"),sRe.forEach(t),c8o=i(x),a2=n(x,"LI",{});var lRe=s(a2);Vge=n(lRe,"STRONG",{});var fMt=s(Vge);m8o=r(fMt,"wavlm"),fMt.forEach(t),f8o=r(lRe," \u2014 "),rO=n(lRe,"A",{href:!0});var gMt=s(rO);g8o=r(gMt,"WavLMModel"),gMt.forEach(t),h8o=r(lRe," (WavLM model)"),lRe.forEach(t),u8o=i(x),n2=n(x,"LI",{});var iRe=s(n2);Xge=n(iRe,"STRONG",{});var hMt=s(Xge);p8o=r(hMt,"xglm"),hMt.forEach(t),_8o=r(iRe," \u2014 "),tO=n(iRe,"A",{href:!0});var uMt=s(tO);b8o=r(uMt,"XGLMModel"),uMt.forEach(t),v8o=r(iRe," (XGLM model)"),iRe.forEach(t),F8o=i(x),s2=n(x,"LI",{});var dRe=s(s2);zge=n(dRe,"STRONG",{});var pMt=s(zge);T8o=r(pMt,"xlm"),pMt.forEach(t),M8o=r(dRe," \u2014 "),aO=n(dRe,"A",{href:!0});var _Mt=s(aO);E8o=r(_Mt,"XLMModel"),_Mt.forEach(t),C8o=r(dRe," (XLM model)"),dRe.forEach(t),w8o=i(x),l2=n(x,"LI",{});var cRe=s(l2);Wge=n(cRe,"STRONG",{});var bMt=s(Wge);A8o=r(bMt,"xlm-prophetnet"),bMt.forEach(t),L8o=r(cRe," \u2014 "),nO=n(cRe,"A",{href:!0});var vMt=s(nO);y8o=r(vMt,"XLMProphetNetModel"),vMt.forEach(t),x8o=r(cRe," (XLM-ProphetNet model)"),cRe.forEach(t),$8o=i(x),i2=n(x,"LI",{});var mRe=s(i2);Qge=n(mRe,"STRONG",{});var FMt=s(Qge);k8o=r(FMt,"xlm-roberta"),FMt.forEach(t),S8o=r(mRe," \u2014 "),sO=n(mRe,"A",{href:!0});var TMt=s(sO);R8o=r(TMt,"XLMRobertaModel"),TMt.forEach(t),P8o=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),B8o=i(x),d2=n(x,"LI",{});var fRe=s(d2);Hge=n(fRe,"STRONG",{});var MMt=s(Hge);I8o=r(MMt,"xlm-roberta-xl"),MMt.forEach(t),N8o=r(fRe," \u2014 "),lO=n(fRe,"A",{href:!0});var EMt=s(lO);q8o=r(EMt,"XLMRobertaXLModel"),EMt.forEach(t),j8o=r(fRe," (XLM-RoBERTa-XL model)"),fRe.forEach(t),D8o=i(x),c2=n(x,"LI",{});var gRe=s(c2);Uge=n(gRe,"STRONG",{});var CMt=s(Uge);G8o=r(CMt,"xlnet"),CMt.forEach(t),O8o=r(gRe," \u2014 "),iO=n(gRe,"A",{href:!0});var wMt=s(iO);V8o=r(wMt,"XLNetModel"),wMt.forEach(t),X8o=r(gRe," (XLNet model)"),gRe.forEach(t),z8o=i(x),m2=n(x,"LI",{});var hRe=s(m2);Jge=n(hRe,"STRONG",{});var AMt=s(Jge);W8o=r(AMt,"yolos"),AMt.forEach(t),Q8o=r(hRe," \u2014 "),dO=n(hRe,"A",{href:!0});var LMt=s(dO);H8o=r(LMt,"YolosModel"),LMt.forEach(t),U8o=r(hRe," (YOLOS model)"),hRe.forEach(t),J8o=i(x),f2=n(x,"LI",{});var uRe=s(f2);Yge=n(uRe,"STRONG",{});var yMt=s(Yge);Y8o=r(yMt,"yoso"),yMt.forEach(t),K8o=r(uRe," \u2014 "),cO=n(uRe,"A",{href:!0});var xMt=s(cO);Z8o=r(xMt,"YosoModel"),xMt.forEach(t),e9o=r(uRe," (YOSO model)"),uRe.forEach(t),x.forEach(t),o9o=i(ca),g2=n(ca,"P",{});var pRe=s(g2);r9o=r(pRe,"The model is set in evaluation mode by default using "),Kge=n(pRe,"CODE",{});var $Mt=s(Kge);t9o=r($Mt,"model.eval()"),$Mt.forEach(t),a9o=r(pRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=n(pRe,"CODE",{});var kMt=s(Zge);n9o=r(kMt,"model.train()"),kMt.forEach(t),pRe.forEach(t),s9o=i(ca),T(h2.$$.fragment,ca),ca.forEach(t),cl.forEach(t),JWe=i(m),Zi=n(m,"H2",{class:!0});var aUe=s(Zi);u2=n(aUe,"A",{id:!0,class:!0,href:!0});var SMt=s(u2);ehe=n(SMt,"SPAN",{});var RMt=s(ehe);T(E8.$$.fragment,RMt),RMt.forEach(t),SMt.forEach(t),l9o=i(aUe),ohe=n(aUe,"SPAN",{});var PMt=s(ohe);i9o=r(PMt,"AutoModelForPreTraining"),PMt.forEach(t),aUe.forEach(t),YWe=i(m),Ro=n(m,"DIV",{class:!0});var ml=s(Ro);T(C8.$$.fragment,ml),d9o=i(ml),ed=n(ml,"P",{});var sae=s(ed);c9o=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mO=n(sae,"A",{href:!0});var BMt=s(mO);m9o=r(BMt,"from_pretrained()"),BMt.forEach(t),f9o=r(sae," class method or the "),fO=n(sae,"A",{href:!0});var IMt=s(fO);g9o=r(IMt,"from_config()"),IMt.forEach(t),h9o=r(sae,` class
method.`),sae.forEach(t),u9o=i(ml),w8=n(ml,"P",{});var nUe=s(w8);p9o=r(nUe,"This class cannot be instantiated directly using "),rhe=n(nUe,"CODE",{});var NMt=s(rhe);_9o=r(NMt,"__init__()"),NMt.forEach(t),b9o=r(nUe," (throws an error)."),nUe.forEach(t),v9o=i(ml),mt=n(ml,"DIV",{class:!0});var U7=s(mt);T(A8.$$.fragment,U7),F9o=i(U7),the=n(U7,"P",{});var qMt=s(the);T9o=r(qMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qMt.forEach(t),M9o=i(U7),od=n(U7,"P",{});var lae=s(od);E9o=r(lae,`Note:
Loading a model from its configuration file does `),ahe=n(lae,"STRONG",{});var jMt=s(ahe);C9o=r(jMt,"not"),jMt.forEach(t),w9o=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(lae,"A",{href:!0});var DMt=s(gO);A9o=r(DMt,"from_pretrained()"),DMt.forEach(t),L9o=r(lae," to load the model weights."),lae.forEach(t),y9o=i(U7),T(p2.$$.fragment,U7),U7.forEach(t),x9o=i(ml),Ke=n(ml,"DIV",{class:!0});var ma=s(Ke);T(L8.$$.fragment,ma),$9o=i(ma),nhe=n(ma,"P",{});var GMt=s(nhe);k9o=r(GMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GMt.forEach(t),S9o=i(ma),Ga=n(ma,"P",{});var J7=s(Ga);R9o=r(J7,"The model class to instantiate is selected based on the "),she=n(J7,"CODE",{});var OMt=s(she);P9o=r(OMt,"model_type"),OMt.forEach(t),B9o=r(J7,` property of the config object (either
passed as an argument or loaded from `),lhe=n(J7,"CODE",{});var VMt=s(lhe);I9o=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),N9o=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=n(J7,"CODE",{});var XMt=s(ihe);q9o=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),j9o=r(J7,":"),J7.forEach(t),D9o=i(ma),G=n(ma,"UL",{});var O=s(G);_2=n(O,"LI",{});var _Re=s(_2);dhe=n(_Re,"STRONG",{});var zMt=s(dhe);G9o=r(zMt,"albert"),zMt.forEach(t),O9o=r(_Re," \u2014 "),hO=n(_Re,"A",{href:!0});var WMt=s(hO);V9o=r(WMt,"AlbertForPreTraining"),WMt.forEach(t),X9o=r(_Re," (ALBERT model)"),_Re.forEach(t),z9o=i(O),b2=n(O,"LI",{});var bRe=s(b2);che=n(bRe,"STRONG",{});var QMt=s(che);W9o=r(QMt,"bart"),QMt.forEach(t),Q9o=r(bRe," \u2014 "),uO=n(bRe,"A",{href:!0});var HMt=s(uO);H9o=r(HMt,"BartForConditionalGeneration"),HMt.forEach(t),U9o=r(bRe," (BART model)"),bRe.forEach(t),J9o=i(O),v2=n(O,"LI",{});var vRe=s(v2);mhe=n(vRe,"STRONG",{});var UMt=s(mhe);Y9o=r(UMt,"bert"),UMt.forEach(t),K9o=r(vRe," \u2014 "),pO=n(vRe,"A",{href:!0});var JMt=s(pO);Z9o=r(JMt,"BertForPreTraining"),JMt.forEach(t),exo=r(vRe," (BERT model)"),vRe.forEach(t),oxo=i(O),F2=n(O,"LI",{});var FRe=s(F2);fhe=n(FRe,"STRONG",{});var YMt=s(fhe);rxo=r(YMt,"big_bird"),YMt.forEach(t),txo=r(FRe," \u2014 "),_O=n(FRe,"A",{href:!0});var KMt=s(_O);axo=r(KMt,"BigBirdForPreTraining"),KMt.forEach(t),nxo=r(FRe," (BigBird model)"),FRe.forEach(t),sxo=i(O),T2=n(O,"LI",{});var TRe=s(T2);ghe=n(TRe,"STRONG",{});var ZMt=s(ghe);lxo=r(ZMt,"bloom"),ZMt.forEach(t),ixo=r(TRe," \u2014 "),bO=n(TRe,"A",{href:!0});var eEt=s(bO);dxo=r(eEt,"BloomForCausalLM"),eEt.forEach(t),cxo=r(TRe," (BLOOM model)"),TRe.forEach(t),mxo=i(O),M2=n(O,"LI",{});var MRe=s(M2);hhe=n(MRe,"STRONG",{});var oEt=s(hhe);fxo=r(oEt,"camembert"),oEt.forEach(t),gxo=r(MRe," \u2014 "),vO=n(MRe,"A",{href:!0});var rEt=s(vO);hxo=r(rEt,"CamembertForMaskedLM"),rEt.forEach(t),uxo=r(MRe," (CamemBERT model)"),MRe.forEach(t),pxo=i(O),E2=n(O,"LI",{});var ERe=s(E2);uhe=n(ERe,"STRONG",{});var tEt=s(uhe);_xo=r(tEt,"ctrl"),tEt.forEach(t),bxo=r(ERe," \u2014 "),FO=n(ERe,"A",{href:!0});var aEt=s(FO);vxo=r(aEt,"CTRLLMHeadModel"),aEt.forEach(t),Fxo=r(ERe," (CTRL model)"),ERe.forEach(t),Txo=i(O),C2=n(O,"LI",{});var CRe=s(C2);phe=n(CRe,"STRONG",{});var nEt=s(phe);Mxo=r(nEt,"data2vec-text"),nEt.forEach(t),Exo=r(CRe," \u2014 "),TO=n(CRe,"A",{href:!0});var sEt=s(TO);Cxo=r(sEt,"Data2VecTextForMaskedLM"),sEt.forEach(t),wxo=r(CRe," (Data2VecText model)"),CRe.forEach(t),Axo=i(O),w2=n(O,"LI",{});var wRe=s(w2);_he=n(wRe,"STRONG",{});var lEt=s(_he);Lxo=r(lEt,"deberta"),lEt.forEach(t),yxo=r(wRe," \u2014 "),MO=n(wRe,"A",{href:!0});var iEt=s(MO);xxo=r(iEt,"DebertaForMaskedLM"),iEt.forEach(t),$xo=r(wRe," (DeBERTa model)"),wRe.forEach(t),kxo=i(O),A2=n(O,"LI",{});var ARe=s(A2);bhe=n(ARe,"STRONG",{});var dEt=s(bhe);Sxo=r(dEt,"deberta-v2"),dEt.forEach(t),Rxo=r(ARe," \u2014 "),EO=n(ARe,"A",{href:!0});var cEt=s(EO);Pxo=r(cEt,"DebertaV2ForMaskedLM"),cEt.forEach(t),Bxo=r(ARe," (DeBERTa-v2 model)"),ARe.forEach(t),Ixo=i(O),L2=n(O,"LI",{});var LRe=s(L2);vhe=n(LRe,"STRONG",{});var mEt=s(vhe);Nxo=r(mEt,"distilbert"),mEt.forEach(t),qxo=r(LRe," \u2014 "),CO=n(LRe,"A",{href:!0});var fEt=s(CO);jxo=r(fEt,"DistilBertForMaskedLM"),fEt.forEach(t),Dxo=r(LRe," (DistilBERT model)"),LRe.forEach(t),Gxo=i(O),y2=n(O,"LI",{});var yRe=s(y2);Fhe=n(yRe,"STRONG",{});var gEt=s(Fhe);Oxo=r(gEt,"electra"),gEt.forEach(t),Vxo=r(yRe," \u2014 "),wO=n(yRe,"A",{href:!0});var hEt=s(wO);Xxo=r(hEt,"ElectraForPreTraining"),hEt.forEach(t),zxo=r(yRe," (ELECTRA model)"),yRe.forEach(t),Wxo=i(O),x2=n(O,"LI",{});var xRe=s(x2);The=n(xRe,"STRONG",{});var uEt=s(The);Qxo=r(uEt,"flaubert"),uEt.forEach(t),Hxo=r(xRe," \u2014 "),AO=n(xRe,"A",{href:!0});var pEt=s(AO);Uxo=r(pEt,"FlaubertWithLMHeadModel"),pEt.forEach(t),Jxo=r(xRe," (FlauBERT model)"),xRe.forEach(t),Yxo=i(O),$2=n(O,"LI",{});var $Re=s($2);Mhe=n($Re,"STRONG",{});var _Et=s(Mhe);Kxo=r(_Et,"flava"),_Et.forEach(t),Zxo=r($Re," \u2014 "),LO=n($Re,"A",{href:!0});var bEt=s(LO);e$o=r(bEt,"FlavaForPreTraining"),bEt.forEach(t),o$o=r($Re," (FLAVA model)"),$Re.forEach(t),r$o=i(O),k2=n(O,"LI",{});var kRe=s(k2);Ehe=n(kRe,"STRONG",{});var vEt=s(Ehe);t$o=r(vEt,"fnet"),vEt.forEach(t),a$o=r(kRe," \u2014 "),yO=n(kRe,"A",{href:!0});var FEt=s(yO);n$o=r(FEt,"FNetForPreTraining"),FEt.forEach(t),s$o=r(kRe," (FNet model)"),kRe.forEach(t),l$o=i(O),S2=n(O,"LI",{});var SRe=s(S2);Che=n(SRe,"STRONG",{});var TEt=s(Che);i$o=r(TEt,"fsmt"),TEt.forEach(t),d$o=r(SRe," \u2014 "),xO=n(SRe,"A",{href:!0});var MEt=s(xO);c$o=r(MEt,"FSMTForConditionalGeneration"),MEt.forEach(t),m$o=r(SRe," (FairSeq Machine-Translation model)"),SRe.forEach(t),f$o=i(O),R2=n(O,"LI",{});var RRe=s(R2);whe=n(RRe,"STRONG",{});var EEt=s(whe);g$o=r(EEt,"funnel"),EEt.forEach(t),h$o=r(RRe," \u2014 "),$O=n(RRe,"A",{href:!0});var CEt=s($O);u$o=r(CEt,"FunnelForPreTraining"),CEt.forEach(t),p$o=r(RRe," (Funnel Transformer model)"),RRe.forEach(t),_$o=i(O),P2=n(O,"LI",{});var PRe=s(P2);Ahe=n(PRe,"STRONG",{});var wEt=s(Ahe);b$o=r(wEt,"gpt2"),wEt.forEach(t),v$o=r(PRe," \u2014 "),kO=n(PRe,"A",{href:!0});var AEt=s(kO);F$o=r(AEt,"GPT2LMHeadModel"),AEt.forEach(t),T$o=r(PRe," (OpenAI GPT-2 model)"),PRe.forEach(t),M$o=i(O),B2=n(O,"LI",{});var BRe=s(B2);Lhe=n(BRe,"STRONG",{});var LEt=s(Lhe);E$o=r(LEt,"ibert"),LEt.forEach(t),C$o=r(BRe," \u2014 "),SO=n(BRe,"A",{href:!0});var yEt=s(SO);w$o=r(yEt,"IBertForMaskedLM"),yEt.forEach(t),A$o=r(BRe," (I-BERT model)"),BRe.forEach(t),L$o=i(O),I2=n(O,"LI",{});var IRe=s(I2);yhe=n(IRe,"STRONG",{});var xEt=s(yhe);y$o=r(xEt,"layoutlm"),xEt.forEach(t),x$o=r(IRe," \u2014 "),RO=n(IRe,"A",{href:!0});var $Et=s(RO);$$o=r($Et,"LayoutLMForMaskedLM"),$Et.forEach(t),k$o=r(IRe," (LayoutLM model)"),IRe.forEach(t),S$o=i(O),N2=n(O,"LI",{});var NRe=s(N2);xhe=n(NRe,"STRONG",{});var kEt=s(xhe);R$o=r(kEt,"longformer"),kEt.forEach(t),P$o=r(NRe," \u2014 "),PO=n(NRe,"A",{href:!0});var SEt=s(PO);B$o=r(SEt,"LongformerForMaskedLM"),SEt.forEach(t),I$o=r(NRe," (Longformer model)"),NRe.forEach(t),N$o=i(O),q2=n(O,"LI",{});var qRe=s(q2);$he=n(qRe,"STRONG",{});var REt=s($he);q$o=r(REt,"luke"),REt.forEach(t),j$o=r(qRe," \u2014 "),BO=n(qRe,"A",{href:!0});var PEt=s(BO);D$o=r(PEt,"LukeForMaskedLM"),PEt.forEach(t),G$o=r(qRe," (LUKE model)"),qRe.forEach(t),O$o=i(O),j2=n(O,"LI",{});var jRe=s(j2);khe=n(jRe,"STRONG",{});var BEt=s(khe);V$o=r(BEt,"lxmert"),BEt.forEach(t),X$o=r(jRe," \u2014 "),IO=n(jRe,"A",{href:!0});var IEt=s(IO);z$o=r(IEt,"LxmertForPreTraining"),IEt.forEach(t),W$o=r(jRe," (LXMERT model)"),jRe.forEach(t),Q$o=i(O),D2=n(O,"LI",{});var DRe=s(D2);She=n(DRe,"STRONG",{});var NEt=s(She);H$o=r(NEt,"megatron-bert"),NEt.forEach(t),U$o=r(DRe," \u2014 "),NO=n(DRe,"A",{href:!0});var qEt=s(NO);J$o=r(qEt,"MegatronBertForPreTraining"),qEt.forEach(t),Y$o=r(DRe," (Megatron-BERT model)"),DRe.forEach(t),K$o=i(O),G2=n(O,"LI",{});var GRe=s(G2);Rhe=n(GRe,"STRONG",{});var jEt=s(Rhe);Z$o=r(jEt,"mobilebert"),jEt.forEach(t),eko=r(GRe," \u2014 "),qO=n(GRe,"A",{href:!0});var DEt=s(qO);oko=r(DEt,"MobileBertForPreTraining"),DEt.forEach(t),rko=r(GRe," (MobileBERT model)"),GRe.forEach(t),tko=i(O),O2=n(O,"LI",{});var ORe=s(O2);Phe=n(ORe,"STRONG",{});var GEt=s(Phe);ako=r(GEt,"mpnet"),GEt.forEach(t),nko=r(ORe," \u2014 "),jO=n(ORe,"A",{href:!0});var OEt=s(jO);sko=r(OEt,"MPNetForMaskedLM"),OEt.forEach(t),lko=r(ORe," (MPNet model)"),ORe.forEach(t),iko=i(O),V2=n(O,"LI",{});var VRe=s(V2);Bhe=n(VRe,"STRONG",{});var VEt=s(Bhe);dko=r(VEt,"mvp"),VEt.forEach(t),cko=r(VRe," \u2014 "),DO=n(VRe,"A",{href:!0});var XEt=s(DO);mko=r(XEt,"MvpForConditionalGeneration"),XEt.forEach(t),fko=r(VRe," (MVP model)"),VRe.forEach(t),gko=i(O),X2=n(O,"LI",{});var XRe=s(X2);Ihe=n(XRe,"STRONG",{});var zEt=s(Ihe);hko=r(zEt,"nezha"),zEt.forEach(t),uko=r(XRe," \u2014 "),GO=n(XRe,"A",{href:!0});var WEt=s(GO);pko=r(WEt,"NezhaForPreTraining"),WEt.forEach(t),_ko=r(XRe," (Nezha model)"),XRe.forEach(t),bko=i(O),z2=n(O,"LI",{});var zRe=s(z2);Nhe=n(zRe,"STRONG",{});var QEt=s(Nhe);vko=r(QEt,"openai-gpt"),QEt.forEach(t),Fko=r(zRe," \u2014 "),OO=n(zRe,"A",{href:!0});var HEt=s(OO);Tko=r(HEt,"OpenAIGPTLMHeadModel"),HEt.forEach(t),Mko=r(zRe," (OpenAI GPT model)"),zRe.forEach(t),Eko=i(O),W2=n(O,"LI",{});var WRe=s(W2);qhe=n(WRe,"STRONG",{});var UEt=s(qhe);Cko=r(UEt,"retribert"),UEt.forEach(t),wko=r(WRe," \u2014 "),VO=n(WRe,"A",{href:!0});var JEt=s(VO);Ako=r(JEt,"RetriBertModel"),JEt.forEach(t),Lko=r(WRe," (RetriBERT model)"),WRe.forEach(t),yko=i(O),Q2=n(O,"LI",{});var QRe=s(Q2);jhe=n(QRe,"STRONG",{});var YEt=s(jhe);xko=r(YEt,"roberta"),YEt.forEach(t),$ko=r(QRe," \u2014 "),XO=n(QRe,"A",{href:!0});var KEt=s(XO);kko=r(KEt,"RobertaForMaskedLM"),KEt.forEach(t),Sko=r(QRe," (RoBERTa model)"),QRe.forEach(t),Rko=i(O),H2=n(O,"LI",{});var HRe=s(H2);Dhe=n(HRe,"STRONG",{});var ZEt=s(Dhe);Pko=r(ZEt,"splinter"),ZEt.forEach(t),Bko=r(HRe," \u2014 "),zO=n(HRe,"A",{href:!0});var e4t=s(zO);Iko=r(e4t,"SplinterForPreTraining"),e4t.forEach(t),Nko=r(HRe," (Splinter model)"),HRe.forEach(t),qko=i(O),U2=n(O,"LI",{});var URe=s(U2);Ghe=n(URe,"STRONG",{});var o4t=s(Ghe);jko=r(o4t,"squeezebert"),o4t.forEach(t),Dko=r(URe," \u2014 "),WO=n(URe,"A",{href:!0});var r4t=s(WO);Gko=r(r4t,"SqueezeBertForMaskedLM"),r4t.forEach(t),Oko=r(URe," (SqueezeBERT model)"),URe.forEach(t),Vko=i(O),J2=n(O,"LI",{});var JRe=s(J2);Ohe=n(JRe,"STRONG",{});var t4t=s(Ohe);Xko=r(t4t,"t5"),t4t.forEach(t),zko=r(JRe," \u2014 "),QO=n(JRe,"A",{href:!0});var a4t=s(QO);Wko=r(a4t,"T5ForConditionalGeneration"),a4t.forEach(t),Qko=r(JRe," (T5 model)"),JRe.forEach(t),Hko=i(O),Y2=n(O,"LI",{});var YRe=s(Y2);Vhe=n(YRe,"STRONG",{});var n4t=s(Vhe);Uko=r(n4t,"tapas"),n4t.forEach(t),Jko=r(YRe," \u2014 "),HO=n(YRe,"A",{href:!0});var s4t=s(HO);Yko=r(s4t,"TapasForMaskedLM"),s4t.forEach(t),Kko=r(YRe," (TAPAS model)"),YRe.forEach(t),Zko=i(O),K2=n(O,"LI",{});var KRe=s(K2);Xhe=n(KRe,"STRONG",{});var l4t=s(Xhe);eSo=r(l4t,"transfo-xl"),l4t.forEach(t),oSo=r(KRe," \u2014 "),UO=n(KRe,"A",{href:!0});var i4t=s(UO);rSo=r(i4t,"TransfoXLLMHeadModel"),i4t.forEach(t),tSo=r(KRe," (Transformer-XL model)"),KRe.forEach(t),aSo=i(O),Z2=n(O,"LI",{});var ZRe=s(Z2);zhe=n(ZRe,"STRONG",{});var d4t=s(zhe);nSo=r(d4t,"unispeech"),d4t.forEach(t),sSo=r(ZRe," \u2014 "),JO=n(ZRe,"A",{href:!0});var c4t=s(JO);lSo=r(c4t,"UniSpeechForPreTraining"),c4t.forEach(t),iSo=r(ZRe," (UniSpeech model)"),ZRe.forEach(t),dSo=i(O),eb=n(O,"LI",{});var ePe=s(eb);Whe=n(ePe,"STRONG",{});var m4t=s(Whe);cSo=r(m4t,"unispeech-sat"),m4t.forEach(t),mSo=r(ePe," \u2014 "),YO=n(ePe,"A",{href:!0});var f4t=s(YO);fSo=r(f4t,"UniSpeechSatForPreTraining"),f4t.forEach(t),gSo=r(ePe," (UniSpeechSat model)"),ePe.forEach(t),hSo=i(O),ob=n(O,"LI",{});var oPe=s(ob);Qhe=n(oPe,"STRONG",{});var g4t=s(Qhe);uSo=r(g4t,"videomae"),g4t.forEach(t),pSo=r(oPe," \u2014 "),KO=n(oPe,"A",{href:!0});var h4t=s(KO);_So=r(h4t,"VideoMAEForPreTraining"),h4t.forEach(t),bSo=r(oPe," (VideoMAE model)"),oPe.forEach(t),vSo=i(O),rb=n(O,"LI",{});var rPe=s(rb);Hhe=n(rPe,"STRONG",{});var u4t=s(Hhe);FSo=r(u4t,"visual_bert"),u4t.forEach(t),TSo=r(rPe," \u2014 "),ZO=n(rPe,"A",{href:!0});var p4t=s(ZO);MSo=r(p4t,"VisualBertForPreTraining"),p4t.forEach(t),ESo=r(rPe," (VisualBERT model)"),rPe.forEach(t),CSo=i(O),tb=n(O,"LI",{});var tPe=s(tb);Uhe=n(tPe,"STRONG",{});var _4t=s(Uhe);wSo=r(_4t,"vit_mae"),_4t.forEach(t),ASo=r(tPe," \u2014 "),eV=n(tPe,"A",{href:!0});var b4t=s(eV);LSo=r(b4t,"ViTMAEForPreTraining"),b4t.forEach(t),ySo=r(tPe," (ViTMAE model)"),tPe.forEach(t),xSo=i(O),ab=n(O,"LI",{});var aPe=s(ab);Jhe=n(aPe,"STRONG",{});var v4t=s(Jhe);$So=r(v4t,"wav2vec2"),v4t.forEach(t),kSo=r(aPe," \u2014 "),oV=n(aPe,"A",{href:!0});var F4t=s(oV);SSo=r(F4t,"Wav2Vec2ForPreTraining"),F4t.forEach(t),RSo=r(aPe," (Wav2Vec2 model)"),aPe.forEach(t),PSo=i(O),nb=n(O,"LI",{});var nPe=s(nb);Yhe=n(nPe,"STRONG",{});var T4t=s(Yhe);BSo=r(T4t,"wav2vec2-conformer"),T4t.forEach(t),ISo=r(nPe," \u2014 "),rV=n(nPe,"A",{href:!0});var M4t=s(rV);NSo=r(M4t,"Wav2Vec2ConformerForPreTraining"),M4t.forEach(t),qSo=r(nPe," (Wav2Vec2-Conformer model)"),nPe.forEach(t),jSo=i(O),sb=n(O,"LI",{});var sPe=s(sb);Khe=n(sPe,"STRONG",{});var E4t=s(Khe);DSo=r(E4t,"xlm"),E4t.forEach(t),GSo=r(sPe," \u2014 "),tV=n(sPe,"A",{href:!0});var C4t=s(tV);OSo=r(C4t,"XLMWithLMHeadModel"),C4t.forEach(t),VSo=r(sPe," (XLM model)"),sPe.forEach(t),XSo=i(O),lb=n(O,"LI",{});var lPe=s(lb);Zhe=n(lPe,"STRONG",{});var w4t=s(Zhe);zSo=r(w4t,"xlm-roberta"),w4t.forEach(t),WSo=r(lPe," \u2014 "),aV=n(lPe,"A",{href:!0});var A4t=s(aV);QSo=r(A4t,"XLMRobertaForMaskedLM"),A4t.forEach(t),HSo=r(lPe," (XLM-RoBERTa model)"),lPe.forEach(t),USo=i(O),ib=n(O,"LI",{});var iPe=s(ib);eue=n(iPe,"STRONG",{});var L4t=s(eue);JSo=r(L4t,"xlm-roberta-xl"),L4t.forEach(t),YSo=r(iPe," \u2014 "),nV=n(iPe,"A",{href:!0});var y4t=s(nV);KSo=r(y4t,"XLMRobertaXLForMaskedLM"),y4t.forEach(t),ZSo=r(iPe," (XLM-RoBERTa-XL model)"),iPe.forEach(t),eRo=i(O),db=n(O,"LI",{});var dPe=s(db);oue=n(dPe,"STRONG",{});var x4t=s(oue);oRo=r(x4t,"xlnet"),x4t.forEach(t),rRo=r(dPe," \u2014 "),sV=n(dPe,"A",{href:!0});var $4t=s(sV);tRo=r($4t,"XLNetLMHeadModel"),$4t.forEach(t),aRo=r(dPe," (XLNet model)"),dPe.forEach(t),O.forEach(t),nRo=i(ma),cb=n(ma,"P",{});var cPe=s(cb);sRo=r(cPe,"The model is set in evaluation mode by default using "),rue=n(cPe,"CODE",{});var k4t=s(rue);lRo=r(k4t,"model.eval()"),k4t.forEach(t),iRo=r(cPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=n(cPe,"CODE",{});var S4t=s(tue);dRo=r(S4t,"model.train()"),S4t.forEach(t),cPe.forEach(t),cRo=i(ma),T(mb.$$.fragment,ma),ma.forEach(t),ml.forEach(t),KWe=i(m),rd=n(m,"H2",{class:!0});var sUe=s(rd);fb=n(sUe,"A",{id:!0,class:!0,href:!0});var R4t=s(fb);aue=n(R4t,"SPAN",{});var P4t=s(aue);T(y8.$$.fragment,P4t),P4t.forEach(t),R4t.forEach(t),mRo=i(sUe),nue=n(sUe,"SPAN",{});var B4t=s(nue);fRo=r(B4t,"AutoModelForCausalLM"),B4t.forEach(t),sUe.forEach(t),ZWe=i(m),Po=n(m,"DIV",{class:!0});var fl=s(Po);T(x8.$$.fragment,fl),gRo=i(fl),td=n(fl,"P",{});var iae=s(td);hRo=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lV=n(iae,"A",{href:!0});var I4t=s(lV);uRo=r(I4t,"from_pretrained()"),I4t.forEach(t),pRo=r(iae," class method or the "),iV=n(iae,"A",{href:!0});var N4t=s(iV);_Ro=r(N4t,"from_config()"),N4t.forEach(t),bRo=r(iae,` class
method.`),iae.forEach(t),vRo=i(fl),$8=n(fl,"P",{});var lUe=s($8);FRo=r(lUe,"This class cannot be instantiated directly using "),sue=n(lUe,"CODE",{});var q4t=s(sue);TRo=r(q4t,"__init__()"),q4t.forEach(t),MRo=r(lUe," (throws an error)."),lUe.forEach(t),ERo=i(fl),ft=n(fl,"DIV",{class:!0});var Y7=s(ft);T(k8.$$.fragment,Y7),CRo=i(Y7),lue=n(Y7,"P",{});var j4t=s(lue);wRo=r(j4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),j4t.forEach(t),ARo=i(Y7),ad=n(Y7,"P",{});var dae=s(ad);LRo=r(dae,`Note:
Loading a model from its configuration file does `),iue=n(dae,"STRONG",{});var D4t=s(iue);yRo=r(D4t,"not"),D4t.forEach(t),xRo=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(dae,"A",{href:!0});var G4t=s(dV);$Ro=r(G4t,"from_pretrained()"),G4t.forEach(t),kRo=r(dae," to load the model weights."),dae.forEach(t),SRo=i(Y7),T(gb.$$.fragment,Y7),Y7.forEach(t),RRo=i(fl),Ze=n(fl,"DIV",{class:!0});var fa=s(Ze);T(S8.$$.fragment,fa),PRo=i(fa),due=n(fa,"P",{});var O4t=s(due);BRo=r(O4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O4t.forEach(t),IRo=i(fa),Oa=n(fa,"P",{});var K7=s(Oa);NRo=r(K7,"The model class to instantiate is selected based on the "),cue=n(K7,"CODE",{});var V4t=s(cue);qRo=r(V4t,"model_type"),V4t.forEach(t),jRo=r(K7,` property of the config object (either
passed as an argument or loaded from `),mue=n(K7,"CODE",{});var X4t=s(mue);DRo=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),GRo=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(K7,"CODE",{});var z4t=s(fue);ORo=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),VRo=r(K7,":"),K7.forEach(t),XRo=i(fa),z=n(fa,"UL",{});var W=s(z);hb=n(W,"LI",{});var mPe=s(hb);gue=n(mPe,"STRONG",{});var W4t=s(gue);zRo=r(W4t,"bart"),W4t.forEach(t),WRo=r(mPe," \u2014 "),cV=n(mPe,"A",{href:!0});var Q4t=s(cV);QRo=r(Q4t,"BartForCausalLM"),Q4t.forEach(t),HRo=r(mPe," (BART model)"),mPe.forEach(t),URo=i(W),ub=n(W,"LI",{});var fPe=s(ub);hue=n(fPe,"STRONG",{});var H4t=s(hue);JRo=r(H4t,"bert"),H4t.forEach(t),YRo=r(fPe," \u2014 "),mV=n(fPe,"A",{href:!0});var U4t=s(mV);KRo=r(U4t,"BertLMHeadModel"),U4t.forEach(t),ZRo=r(fPe," (BERT model)"),fPe.forEach(t),ePo=i(W),pb=n(W,"LI",{});var gPe=s(pb);uue=n(gPe,"STRONG",{});var J4t=s(uue);oPo=r(J4t,"bert-generation"),J4t.forEach(t),rPo=r(gPe," \u2014 "),fV=n(gPe,"A",{href:!0});var Y4t=s(fV);tPo=r(Y4t,"BertGenerationDecoder"),Y4t.forEach(t),aPo=r(gPe," (Bert Generation model)"),gPe.forEach(t),nPo=i(W),_b=n(W,"LI",{});var hPe=s(_b);pue=n(hPe,"STRONG",{});var K4t=s(pue);sPo=r(K4t,"big_bird"),K4t.forEach(t),lPo=r(hPe," \u2014 "),gV=n(hPe,"A",{href:!0});var Z4t=s(gV);iPo=r(Z4t,"BigBirdForCausalLM"),Z4t.forEach(t),dPo=r(hPe," (BigBird model)"),hPe.forEach(t),cPo=i(W),bb=n(W,"LI",{});var uPe=s(bb);_ue=n(uPe,"STRONG",{});var eCt=s(_ue);mPo=r(eCt,"bigbird_pegasus"),eCt.forEach(t),fPo=r(uPe," \u2014 "),hV=n(uPe,"A",{href:!0});var oCt=s(hV);gPo=r(oCt,"BigBirdPegasusForCausalLM"),oCt.forEach(t),hPo=r(uPe," (BigBird-Pegasus model)"),uPe.forEach(t),uPo=i(W),vb=n(W,"LI",{});var pPe=s(vb);bue=n(pPe,"STRONG",{});var rCt=s(bue);pPo=r(rCt,"blenderbot"),rCt.forEach(t),_Po=r(pPe," \u2014 "),uV=n(pPe,"A",{href:!0});var tCt=s(uV);bPo=r(tCt,"BlenderbotForCausalLM"),tCt.forEach(t),vPo=r(pPe," (Blenderbot model)"),pPe.forEach(t),FPo=i(W),Fb=n(W,"LI",{});var _Pe=s(Fb);vue=n(_Pe,"STRONG",{});var aCt=s(vue);TPo=r(aCt,"blenderbot-small"),aCt.forEach(t),MPo=r(_Pe," \u2014 "),pV=n(_Pe,"A",{href:!0});var nCt=s(pV);EPo=r(nCt,"BlenderbotSmallForCausalLM"),nCt.forEach(t),CPo=r(_Pe," (BlenderbotSmall model)"),_Pe.forEach(t),wPo=i(W),Tb=n(W,"LI",{});var bPe=s(Tb);Fue=n(bPe,"STRONG",{});var sCt=s(Fue);APo=r(sCt,"bloom"),sCt.forEach(t),LPo=r(bPe," \u2014 "),_V=n(bPe,"A",{href:!0});var lCt=s(_V);yPo=r(lCt,"BloomForCausalLM"),lCt.forEach(t),xPo=r(bPe," (BLOOM model)"),bPe.forEach(t),$Po=i(W),Mb=n(W,"LI",{});var vPe=s(Mb);Tue=n(vPe,"STRONG",{});var iCt=s(Tue);kPo=r(iCt,"camembert"),iCt.forEach(t),SPo=r(vPe," \u2014 "),bV=n(vPe,"A",{href:!0});var dCt=s(bV);RPo=r(dCt,"CamembertForCausalLM"),dCt.forEach(t),PPo=r(vPe," (CamemBERT model)"),vPe.forEach(t),BPo=i(W),Eb=n(W,"LI",{});var FPe=s(Eb);Mue=n(FPe,"STRONG",{});var cCt=s(Mue);IPo=r(cCt,"codegen"),cCt.forEach(t),NPo=r(FPe," \u2014 "),vV=n(FPe,"A",{href:!0});var mCt=s(vV);qPo=r(mCt,"CodeGenForCausalLM"),mCt.forEach(t),jPo=r(FPe," (CodeGen model)"),FPe.forEach(t),DPo=i(W),Cb=n(W,"LI",{});var TPe=s(Cb);Eue=n(TPe,"STRONG",{});var fCt=s(Eue);GPo=r(fCt,"ctrl"),fCt.forEach(t),OPo=r(TPe," \u2014 "),FV=n(TPe,"A",{href:!0});var gCt=s(FV);VPo=r(gCt,"CTRLLMHeadModel"),gCt.forEach(t),XPo=r(TPe," (CTRL model)"),TPe.forEach(t),zPo=i(W),wb=n(W,"LI",{});var MPe=s(wb);Cue=n(MPe,"STRONG",{});var hCt=s(Cue);WPo=r(hCt,"data2vec-text"),hCt.forEach(t),QPo=r(MPe," \u2014 "),TV=n(MPe,"A",{href:!0});var uCt=s(TV);HPo=r(uCt,"Data2VecTextForCausalLM"),uCt.forEach(t),UPo=r(MPe," (Data2VecText model)"),MPe.forEach(t),JPo=i(W),Ab=n(W,"LI",{});var EPe=s(Ab);wue=n(EPe,"STRONG",{});var pCt=s(wue);YPo=r(pCt,"electra"),pCt.forEach(t),KPo=r(EPe," \u2014 "),MV=n(EPe,"A",{href:!0});var _Ct=s(MV);ZPo=r(_Ct,"ElectraForCausalLM"),_Ct.forEach(t),eBo=r(EPe," (ELECTRA model)"),EPe.forEach(t),oBo=i(W),Lb=n(W,"LI",{});var CPe=s(Lb);Aue=n(CPe,"STRONG",{});var bCt=s(Aue);rBo=r(bCt,"gpt2"),bCt.forEach(t),tBo=r(CPe," \u2014 "),EV=n(CPe,"A",{href:!0});var vCt=s(EV);aBo=r(vCt,"GPT2LMHeadModel"),vCt.forEach(t),nBo=r(CPe," (OpenAI GPT-2 model)"),CPe.forEach(t),sBo=i(W),yb=n(W,"LI",{});var wPe=s(yb);Lue=n(wPe,"STRONG",{});var FCt=s(Lue);lBo=r(FCt,"gpt_neo"),FCt.forEach(t),iBo=r(wPe," \u2014 "),CV=n(wPe,"A",{href:!0});var TCt=s(CV);dBo=r(TCt,"GPTNeoForCausalLM"),TCt.forEach(t),cBo=r(wPe," (GPT Neo model)"),wPe.forEach(t),mBo=i(W),xb=n(W,"LI",{});var APe=s(xb);yue=n(APe,"STRONG",{});var MCt=s(yue);fBo=r(MCt,"gpt_neox"),MCt.forEach(t),gBo=r(APe," \u2014 "),wV=n(APe,"A",{href:!0});var ECt=s(wV);hBo=r(ECt,"GPTNeoXForCausalLM"),ECt.forEach(t),uBo=r(APe," (GPT NeoX model)"),APe.forEach(t),pBo=i(W),$b=n(W,"LI",{});var LPe=s($b);xue=n(LPe,"STRONG",{});var CCt=s(xue);_Bo=r(CCt,"gptj"),CCt.forEach(t),bBo=r(LPe," \u2014 "),AV=n(LPe,"A",{href:!0});var wCt=s(AV);vBo=r(wCt,"GPTJForCausalLM"),wCt.forEach(t),FBo=r(LPe," (GPT-J model)"),LPe.forEach(t),TBo=i(W),kb=n(W,"LI",{});var yPe=s(kb);$ue=n(yPe,"STRONG",{});var ACt=s($ue);MBo=r(ACt,"marian"),ACt.forEach(t),EBo=r(yPe," \u2014 "),LV=n(yPe,"A",{href:!0});var LCt=s(LV);CBo=r(LCt,"MarianForCausalLM"),LCt.forEach(t),wBo=r(yPe," (Marian model)"),yPe.forEach(t),ABo=i(W),Sb=n(W,"LI",{});var xPe=s(Sb);kue=n(xPe,"STRONG",{});var yCt=s(kue);LBo=r(yCt,"mbart"),yCt.forEach(t),yBo=r(xPe," \u2014 "),yV=n(xPe,"A",{href:!0});var xCt=s(yV);xBo=r(xCt,"MBartForCausalLM"),xCt.forEach(t),$Bo=r(xPe," (mBART model)"),xPe.forEach(t),kBo=i(W),Rb=n(W,"LI",{});var $Pe=s(Rb);Sue=n($Pe,"STRONG",{});var $Ct=s(Sue);SBo=r($Ct,"megatron-bert"),$Ct.forEach(t),RBo=r($Pe," \u2014 "),xV=n($Pe,"A",{href:!0});var kCt=s(xV);PBo=r(kCt,"MegatronBertForCausalLM"),kCt.forEach(t),BBo=r($Pe," (Megatron-BERT model)"),$Pe.forEach(t),IBo=i(W),Pb=n(W,"LI",{});var kPe=s(Pb);Rue=n(kPe,"STRONG",{});var SCt=s(Rue);NBo=r(SCt,"mvp"),SCt.forEach(t),qBo=r(kPe," \u2014 "),$V=n(kPe,"A",{href:!0});var RCt=s($V);jBo=r(RCt,"MvpForCausalLM"),RCt.forEach(t),DBo=r(kPe," (MVP model)"),kPe.forEach(t),GBo=i(W),Bb=n(W,"LI",{});var SPe=s(Bb);Pue=n(SPe,"STRONG",{});var PCt=s(Pue);OBo=r(PCt,"openai-gpt"),PCt.forEach(t),VBo=r(SPe," \u2014 "),kV=n(SPe,"A",{href:!0});var BCt=s(kV);XBo=r(BCt,"OpenAIGPTLMHeadModel"),BCt.forEach(t),zBo=r(SPe," (OpenAI GPT model)"),SPe.forEach(t),WBo=i(W),Ib=n(W,"LI",{});var RPe=s(Ib);Bue=n(RPe,"STRONG",{});var ICt=s(Bue);QBo=r(ICt,"opt"),ICt.forEach(t),HBo=r(RPe," \u2014 "),SV=n(RPe,"A",{href:!0});var NCt=s(SV);UBo=r(NCt,"OPTForCausalLM"),NCt.forEach(t),JBo=r(RPe," (OPT model)"),RPe.forEach(t),YBo=i(W),Nb=n(W,"LI",{});var PPe=s(Nb);Iue=n(PPe,"STRONG",{});var qCt=s(Iue);KBo=r(qCt,"pegasus"),qCt.forEach(t),ZBo=r(PPe," \u2014 "),RV=n(PPe,"A",{href:!0});var jCt=s(RV);eIo=r(jCt,"PegasusForCausalLM"),jCt.forEach(t),oIo=r(PPe," (Pegasus model)"),PPe.forEach(t),rIo=i(W),qb=n(W,"LI",{});var BPe=s(qb);Nue=n(BPe,"STRONG",{});var DCt=s(Nue);tIo=r(DCt,"plbart"),DCt.forEach(t),aIo=r(BPe," \u2014 "),PV=n(BPe,"A",{href:!0});var GCt=s(PV);nIo=r(GCt,"PLBartForCausalLM"),GCt.forEach(t),sIo=r(BPe," (PLBart model)"),BPe.forEach(t),lIo=i(W),jb=n(W,"LI",{});var IPe=s(jb);que=n(IPe,"STRONG",{});var OCt=s(que);iIo=r(OCt,"prophetnet"),OCt.forEach(t),dIo=r(IPe," \u2014 "),BV=n(IPe,"A",{href:!0});var VCt=s(BV);cIo=r(VCt,"ProphetNetForCausalLM"),VCt.forEach(t),mIo=r(IPe," (ProphetNet model)"),IPe.forEach(t),fIo=i(W),Db=n(W,"LI",{});var NPe=s(Db);jue=n(NPe,"STRONG",{});var XCt=s(jue);gIo=r(XCt,"qdqbert"),XCt.forEach(t),hIo=r(NPe," \u2014 "),IV=n(NPe,"A",{href:!0});var zCt=s(IV);uIo=r(zCt,"QDQBertLMHeadModel"),zCt.forEach(t),pIo=r(NPe," (QDQBert model)"),NPe.forEach(t),_Io=i(W),Gb=n(W,"LI",{});var qPe=s(Gb);Due=n(qPe,"STRONG",{});var WCt=s(Due);bIo=r(WCt,"reformer"),WCt.forEach(t),vIo=r(qPe," \u2014 "),NV=n(qPe,"A",{href:!0});var QCt=s(NV);FIo=r(QCt,"ReformerModelWithLMHead"),QCt.forEach(t),TIo=r(qPe," (Reformer model)"),qPe.forEach(t),MIo=i(W),Ob=n(W,"LI",{});var jPe=s(Ob);Gue=n(jPe,"STRONG",{});var HCt=s(Gue);EIo=r(HCt,"rembert"),HCt.forEach(t),CIo=r(jPe," \u2014 "),qV=n(jPe,"A",{href:!0});var UCt=s(qV);wIo=r(UCt,"RemBertForCausalLM"),UCt.forEach(t),AIo=r(jPe," (RemBERT model)"),jPe.forEach(t),LIo=i(W),Vb=n(W,"LI",{});var DPe=s(Vb);Oue=n(DPe,"STRONG",{});var JCt=s(Oue);yIo=r(JCt,"roberta"),JCt.forEach(t),xIo=r(DPe," \u2014 "),jV=n(DPe,"A",{href:!0});var YCt=s(jV);$Io=r(YCt,"RobertaForCausalLM"),YCt.forEach(t),kIo=r(DPe," (RoBERTa model)"),DPe.forEach(t),SIo=i(W),Xb=n(W,"LI",{});var GPe=s(Xb);Vue=n(GPe,"STRONG",{});var KCt=s(Vue);RIo=r(KCt,"roformer"),KCt.forEach(t),PIo=r(GPe," \u2014 "),DV=n(GPe,"A",{href:!0});var ZCt=s(DV);BIo=r(ZCt,"RoFormerForCausalLM"),ZCt.forEach(t),IIo=r(GPe," (RoFormer model)"),GPe.forEach(t),NIo=i(W),zb=n(W,"LI",{});var OPe=s(zb);Xue=n(OPe,"STRONG",{});var e5t=s(Xue);qIo=r(e5t,"speech_to_text_2"),e5t.forEach(t),jIo=r(OPe," \u2014 "),GV=n(OPe,"A",{href:!0});var o5t=s(GV);DIo=r(o5t,"Speech2Text2ForCausalLM"),o5t.forEach(t),GIo=r(OPe," (Speech2Text2 model)"),OPe.forEach(t),OIo=i(W),Wb=n(W,"LI",{});var VPe=s(Wb);zue=n(VPe,"STRONG",{});var r5t=s(zue);VIo=r(r5t,"transfo-xl"),r5t.forEach(t),XIo=r(VPe," \u2014 "),OV=n(VPe,"A",{href:!0});var t5t=s(OV);zIo=r(t5t,"TransfoXLLMHeadModel"),t5t.forEach(t),WIo=r(VPe," (Transformer-XL model)"),VPe.forEach(t),QIo=i(W),Qb=n(W,"LI",{});var XPe=s(Qb);Wue=n(XPe,"STRONG",{});var a5t=s(Wue);HIo=r(a5t,"trocr"),a5t.forEach(t),UIo=r(XPe," \u2014 "),VV=n(XPe,"A",{href:!0});var n5t=s(VV);JIo=r(n5t,"TrOCRForCausalLM"),n5t.forEach(t),YIo=r(XPe," (TrOCR model)"),XPe.forEach(t),KIo=i(W),Hb=n(W,"LI",{});var zPe=s(Hb);Que=n(zPe,"STRONG",{});var s5t=s(Que);ZIo=r(s5t,"xglm"),s5t.forEach(t),eNo=r(zPe," \u2014 "),XV=n(zPe,"A",{href:!0});var l5t=s(XV);oNo=r(l5t,"XGLMForCausalLM"),l5t.forEach(t),rNo=r(zPe," (XGLM model)"),zPe.forEach(t),tNo=i(W),Ub=n(W,"LI",{});var WPe=s(Ub);Hue=n(WPe,"STRONG",{});var i5t=s(Hue);aNo=r(i5t,"xlm"),i5t.forEach(t),nNo=r(WPe," \u2014 "),zV=n(WPe,"A",{href:!0});var d5t=s(zV);sNo=r(d5t,"XLMWithLMHeadModel"),d5t.forEach(t),lNo=r(WPe," (XLM model)"),WPe.forEach(t),iNo=i(W),Jb=n(W,"LI",{});var QPe=s(Jb);Uue=n(QPe,"STRONG",{});var c5t=s(Uue);dNo=r(c5t,"xlm-prophetnet"),c5t.forEach(t),cNo=r(QPe," \u2014 "),WV=n(QPe,"A",{href:!0});var m5t=s(WV);mNo=r(m5t,"XLMProphetNetForCausalLM"),m5t.forEach(t),fNo=r(QPe," (XLM-ProphetNet model)"),QPe.forEach(t),gNo=i(W),Yb=n(W,"LI",{});var HPe=s(Yb);Jue=n(HPe,"STRONG",{});var f5t=s(Jue);hNo=r(f5t,"xlm-roberta"),f5t.forEach(t),uNo=r(HPe," \u2014 "),QV=n(HPe,"A",{href:!0});var g5t=s(QV);pNo=r(g5t,"XLMRobertaForCausalLM"),g5t.forEach(t),_No=r(HPe," (XLM-RoBERTa model)"),HPe.forEach(t),bNo=i(W),Kb=n(W,"LI",{});var UPe=s(Kb);Yue=n(UPe,"STRONG",{});var h5t=s(Yue);vNo=r(h5t,"xlm-roberta-xl"),h5t.forEach(t),FNo=r(UPe," \u2014 "),HV=n(UPe,"A",{href:!0});var u5t=s(HV);TNo=r(u5t,"XLMRobertaXLForCausalLM"),u5t.forEach(t),MNo=r(UPe," (XLM-RoBERTa-XL model)"),UPe.forEach(t),ENo=i(W),Zb=n(W,"LI",{});var JPe=s(Zb);Kue=n(JPe,"STRONG",{});var p5t=s(Kue);CNo=r(p5t,"xlnet"),p5t.forEach(t),wNo=r(JPe," \u2014 "),UV=n(JPe,"A",{href:!0});var _5t=s(UV);ANo=r(_5t,"XLNetLMHeadModel"),_5t.forEach(t),LNo=r(JPe," (XLNet model)"),JPe.forEach(t),W.forEach(t),yNo=i(fa),ev=n(fa,"P",{});var YPe=s(ev);xNo=r(YPe,"The model is set in evaluation mode by default using "),Zue=n(YPe,"CODE",{});var b5t=s(Zue);$No=r(b5t,"model.eval()"),b5t.forEach(t),kNo=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(YPe,"CODE",{});var v5t=s(epe);SNo=r(v5t,"model.train()"),v5t.forEach(t),YPe.forEach(t),RNo=i(fa),T(ov.$$.fragment,fa),fa.forEach(t),fl.forEach(t),eQe=i(m),nd=n(m,"H2",{class:!0});var iUe=s(nd);rv=n(iUe,"A",{id:!0,class:!0,href:!0});var F5t=s(rv);ope=n(F5t,"SPAN",{});var T5t=s(ope);T(R8.$$.fragment,T5t),T5t.forEach(t),F5t.forEach(t),PNo=i(iUe),rpe=n(iUe,"SPAN",{});var M5t=s(rpe);BNo=r(M5t,"AutoModelForMaskedLM"),M5t.forEach(t),iUe.forEach(t),oQe=i(m),Bo=n(m,"DIV",{class:!0});var gl=s(Bo);T(P8.$$.fragment,gl),INo=i(gl),sd=n(gl,"P",{});var cae=s(sd);NNo=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JV=n(cae,"A",{href:!0});var E5t=s(JV);qNo=r(E5t,"from_pretrained()"),E5t.forEach(t),jNo=r(cae," class method or the "),YV=n(cae,"A",{href:!0});var C5t=s(YV);DNo=r(C5t,"from_config()"),C5t.forEach(t),GNo=r(cae,` class
method.`),cae.forEach(t),ONo=i(gl),B8=n(gl,"P",{});var dUe=s(B8);VNo=r(dUe,"This class cannot be instantiated directly using "),tpe=n(dUe,"CODE",{});var w5t=s(tpe);XNo=r(w5t,"__init__()"),w5t.forEach(t),zNo=r(dUe," (throws an error)."),dUe.forEach(t),WNo=i(gl),gt=n(gl,"DIV",{class:!0});var Z7=s(gt);T(I8.$$.fragment,Z7),QNo=i(Z7),ape=n(Z7,"P",{});var A5t=s(ape);HNo=r(A5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A5t.forEach(t),UNo=i(Z7),ld=n(Z7,"P",{});var mae=s(ld);JNo=r(mae,`Note:
Loading a model from its configuration file does `),npe=n(mae,"STRONG",{});var L5t=s(npe);YNo=r(L5t,"not"),L5t.forEach(t),KNo=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(mae,"A",{href:!0});var y5t=s(KV);ZNo=r(y5t,"from_pretrained()"),y5t.forEach(t),eqo=r(mae," to load the model weights."),mae.forEach(t),oqo=i(Z7),T(tv.$$.fragment,Z7),Z7.forEach(t),rqo=i(gl),eo=n(gl,"DIV",{class:!0});var ga=s(eo);T(N8.$$.fragment,ga),tqo=i(ga),spe=n(ga,"P",{});var x5t=s(spe);aqo=r(x5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),x5t.forEach(t),nqo=i(ga),Va=n(ga,"P",{});var eL=s(Va);sqo=r(eL,"The model class to instantiate is selected based on the "),lpe=n(eL,"CODE",{});var $5t=s(lpe);lqo=r($5t,"model_type"),$5t.forEach(t),iqo=r(eL,` property of the config object (either
passed as an argument or loaded from `),ipe=n(eL,"CODE",{});var k5t=s(ipe);dqo=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),cqo=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(eL,"CODE",{});var S5t=s(dpe);mqo=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),fqo=r(eL,":"),eL.forEach(t),gqo=i(ga),Q=n(ga,"UL",{});var J=s(Q);av=n(J,"LI",{});var KPe=s(av);cpe=n(KPe,"STRONG",{});var R5t=s(cpe);hqo=r(R5t,"albert"),R5t.forEach(t),uqo=r(KPe," \u2014 "),ZV=n(KPe,"A",{href:!0});var P5t=s(ZV);pqo=r(P5t,"AlbertForMaskedLM"),P5t.forEach(t),_qo=r(KPe," (ALBERT model)"),KPe.forEach(t),bqo=i(J),nv=n(J,"LI",{});var ZPe=s(nv);mpe=n(ZPe,"STRONG",{});var B5t=s(mpe);vqo=r(B5t,"bart"),B5t.forEach(t),Fqo=r(ZPe," \u2014 "),eX=n(ZPe,"A",{href:!0});var I5t=s(eX);Tqo=r(I5t,"BartForConditionalGeneration"),I5t.forEach(t),Mqo=r(ZPe," (BART model)"),ZPe.forEach(t),Eqo=i(J),sv=n(J,"LI",{});var eBe=s(sv);fpe=n(eBe,"STRONG",{});var N5t=s(fpe);Cqo=r(N5t,"bert"),N5t.forEach(t),wqo=r(eBe," \u2014 "),oX=n(eBe,"A",{href:!0});var q5t=s(oX);Aqo=r(q5t,"BertForMaskedLM"),q5t.forEach(t),Lqo=r(eBe," (BERT model)"),eBe.forEach(t),yqo=i(J),lv=n(J,"LI",{});var oBe=s(lv);gpe=n(oBe,"STRONG",{});var j5t=s(gpe);xqo=r(j5t,"big_bird"),j5t.forEach(t),$qo=r(oBe," \u2014 "),rX=n(oBe,"A",{href:!0});var D5t=s(rX);kqo=r(D5t,"BigBirdForMaskedLM"),D5t.forEach(t),Sqo=r(oBe," (BigBird model)"),oBe.forEach(t),Rqo=i(J),iv=n(J,"LI",{});var rBe=s(iv);hpe=n(rBe,"STRONG",{});var G5t=s(hpe);Pqo=r(G5t,"camembert"),G5t.forEach(t),Bqo=r(rBe," \u2014 "),tX=n(rBe,"A",{href:!0});var O5t=s(tX);Iqo=r(O5t,"CamembertForMaskedLM"),O5t.forEach(t),Nqo=r(rBe," (CamemBERT model)"),rBe.forEach(t),qqo=i(J),dv=n(J,"LI",{});var tBe=s(dv);upe=n(tBe,"STRONG",{});var V5t=s(upe);jqo=r(V5t,"convbert"),V5t.forEach(t),Dqo=r(tBe," \u2014 "),aX=n(tBe,"A",{href:!0});var X5t=s(aX);Gqo=r(X5t,"ConvBertForMaskedLM"),X5t.forEach(t),Oqo=r(tBe," (ConvBERT model)"),tBe.forEach(t),Vqo=i(J),cv=n(J,"LI",{});var aBe=s(cv);ppe=n(aBe,"STRONG",{});var z5t=s(ppe);Xqo=r(z5t,"data2vec-text"),z5t.forEach(t),zqo=r(aBe," \u2014 "),nX=n(aBe,"A",{href:!0});var W5t=s(nX);Wqo=r(W5t,"Data2VecTextForMaskedLM"),W5t.forEach(t),Qqo=r(aBe," (Data2VecText model)"),aBe.forEach(t),Hqo=i(J),mv=n(J,"LI",{});var nBe=s(mv);_pe=n(nBe,"STRONG",{});var Q5t=s(_pe);Uqo=r(Q5t,"deberta"),Q5t.forEach(t),Jqo=r(nBe," \u2014 "),sX=n(nBe,"A",{href:!0});var H5t=s(sX);Yqo=r(H5t,"DebertaForMaskedLM"),H5t.forEach(t),Kqo=r(nBe," (DeBERTa model)"),nBe.forEach(t),Zqo=i(J),fv=n(J,"LI",{});var sBe=s(fv);bpe=n(sBe,"STRONG",{});var U5t=s(bpe);ejo=r(U5t,"deberta-v2"),U5t.forEach(t),ojo=r(sBe," \u2014 "),lX=n(sBe,"A",{href:!0});var J5t=s(lX);rjo=r(J5t,"DebertaV2ForMaskedLM"),J5t.forEach(t),tjo=r(sBe," (DeBERTa-v2 model)"),sBe.forEach(t),ajo=i(J),gv=n(J,"LI",{});var lBe=s(gv);vpe=n(lBe,"STRONG",{});var Y5t=s(vpe);njo=r(Y5t,"distilbert"),Y5t.forEach(t),sjo=r(lBe," \u2014 "),iX=n(lBe,"A",{href:!0});var K5t=s(iX);ljo=r(K5t,"DistilBertForMaskedLM"),K5t.forEach(t),ijo=r(lBe," (DistilBERT model)"),lBe.forEach(t),djo=i(J),hv=n(J,"LI",{});var iBe=s(hv);Fpe=n(iBe,"STRONG",{});var Z5t=s(Fpe);cjo=r(Z5t,"electra"),Z5t.forEach(t),mjo=r(iBe," \u2014 "),dX=n(iBe,"A",{href:!0});var e3t=s(dX);fjo=r(e3t,"ElectraForMaskedLM"),e3t.forEach(t),gjo=r(iBe," (ELECTRA model)"),iBe.forEach(t),hjo=i(J),uv=n(J,"LI",{});var dBe=s(uv);Tpe=n(dBe,"STRONG",{});var o3t=s(Tpe);ujo=r(o3t,"flaubert"),o3t.forEach(t),pjo=r(dBe," \u2014 "),cX=n(dBe,"A",{href:!0});var r3t=s(cX);_jo=r(r3t,"FlaubertWithLMHeadModel"),r3t.forEach(t),bjo=r(dBe," (FlauBERT model)"),dBe.forEach(t),vjo=i(J),pv=n(J,"LI",{});var cBe=s(pv);Mpe=n(cBe,"STRONG",{});var t3t=s(Mpe);Fjo=r(t3t,"fnet"),t3t.forEach(t),Tjo=r(cBe," \u2014 "),mX=n(cBe,"A",{href:!0});var a3t=s(mX);Mjo=r(a3t,"FNetForMaskedLM"),a3t.forEach(t),Ejo=r(cBe," (FNet model)"),cBe.forEach(t),Cjo=i(J),_v=n(J,"LI",{});var mBe=s(_v);Epe=n(mBe,"STRONG",{});var n3t=s(Epe);wjo=r(n3t,"funnel"),n3t.forEach(t),Ajo=r(mBe," \u2014 "),fX=n(mBe,"A",{href:!0});var s3t=s(fX);Ljo=r(s3t,"FunnelForMaskedLM"),s3t.forEach(t),yjo=r(mBe," (Funnel Transformer model)"),mBe.forEach(t),xjo=i(J),bv=n(J,"LI",{});var fBe=s(bv);Cpe=n(fBe,"STRONG",{});var l3t=s(Cpe);$jo=r(l3t,"ibert"),l3t.forEach(t),kjo=r(fBe," \u2014 "),gX=n(fBe,"A",{href:!0});var i3t=s(gX);Sjo=r(i3t,"IBertForMaskedLM"),i3t.forEach(t),Rjo=r(fBe," (I-BERT model)"),fBe.forEach(t),Pjo=i(J),vv=n(J,"LI",{});var gBe=s(vv);wpe=n(gBe,"STRONG",{});var d3t=s(wpe);Bjo=r(d3t,"layoutlm"),d3t.forEach(t),Ijo=r(gBe," \u2014 "),hX=n(gBe,"A",{href:!0});var c3t=s(hX);Njo=r(c3t,"LayoutLMForMaskedLM"),c3t.forEach(t),qjo=r(gBe," (LayoutLM model)"),gBe.forEach(t),jjo=i(J),Fv=n(J,"LI",{});var hBe=s(Fv);Ape=n(hBe,"STRONG",{});var m3t=s(Ape);Djo=r(m3t,"longformer"),m3t.forEach(t),Gjo=r(hBe," \u2014 "),uX=n(hBe,"A",{href:!0});var f3t=s(uX);Ojo=r(f3t,"LongformerForMaskedLM"),f3t.forEach(t),Vjo=r(hBe," (Longformer model)"),hBe.forEach(t),Xjo=i(J),Tv=n(J,"LI",{});var uBe=s(Tv);Lpe=n(uBe,"STRONG",{});var g3t=s(Lpe);zjo=r(g3t,"luke"),g3t.forEach(t),Wjo=r(uBe," \u2014 "),pX=n(uBe,"A",{href:!0});var h3t=s(pX);Qjo=r(h3t,"LukeForMaskedLM"),h3t.forEach(t),Hjo=r(uBe," (LUKE model)"),uBe.forEach(t),Ujo=i(J),Mv=n(J,"LI",{});var pBe=s(Mv);ype=n(pBe,"STRONG",{});var u3t=s(ype);Jjo=r(u3t,"mbart"),u3t.forEach(t),Yjo=r(pBe," \u2014 "),_X=n(pBe,"A",{href:!0});var p3t=s(_X);Kjo=r(p3t,"MBartForConditionalGeneration"),p3t.forEach(t),Zjo=r(pBe," (mBART model)"),pBe.forEach(t),eDo=i(J),Ev=n(J,"LI",{});var _Be=s(Ev);xpe=n(_Be,"STRONG",{});var _3t=s(xpe);oDo=r(_3t,"megatron-bert"),_3t.forEach(t),rDo=r(_Be," \u2014 "),bX=n(_Be,"A",{href:!0});var b3t=s(bX);tDo=r(b3t,"MegatronBertForMaskedLM"),b3t.forEach(t),aDo=r(_Be," (Megatron-BERT model)"),_Be.forEach(t),nDo=i(J),Cv=n(J,"LI",{});var bBe=s(Cv);$pe=n(bBe,"STRONG",{});var v3t=s($pe);sDo=r(v3t,"mobilebert"),v3t.forEach(t),lDo=r(bBe," \u2014 "),vX=n(bBe,"A",{href:!0});var F3t=s(vX);iDo=r(F3t,"MobileBertForMaskedLM"),F3t.forEach(t),dDo=r(bBe," (MobileBERT model)"),bBe.forEach(t),cDo=i(J),wv=n(J,"LI",{});var vBe=s(wv);kpe=n(vBe,"STRONG",{});var T3t=s(kpe);mDo=r(T3t,"mpnet"),T3t.forEach(t),fDo=r(vBe," \u2014 "),FX=n(vBe,"A",{href:!0});var M3t=s(FX);gDo=r(M3t,"MPNetForMaskedLM"),M3t.forEach(t),hDo=r(vBe," (MPNet model)"),vBe.forEach(t),uDo=i(J),Av=n(J,"LI",{});var FBe=s(Av);Spe=n(FBe,"STRONG",{});var E3t=s(Spe);pDo=r(E3t,"mvp"),E3t.forEach(t),_Do=r(FBe," \u2014 "),TX=n(FBe,"A",{href:!0});var C3t=s(TX);bDo=r(C3t,"MvpForConditionalGeneration"),C3t.forEach(t),vDo=r(FBe," (MVP model)"),FBe.forEach(t),FDo=i(J),Lv=n(J,"LI",{});var TBe=s(Lv);Rpe=n(TBe,"STRONG",{});var w3t=s(Rpe);TDo=r(w3t,"nezha"),w3t.forEach(t),MDo=r(TBe," \u2014 "),MX=n(TBe,"A",{href:!0});var A3t=s(MX);EDo=r(A3t,"NezhaForMaskedLM"),A3t.forEach(t),CDo=r(TBe," (Nezha model)"),TBe.forEach(t),wDo=i(J),yv=n(J,"LI",{});var MBe=s(yv);Ppe=n(MBe,"STRONG",{});var L3t=s(Ppe);ADo=r(L3t,"nystromformer"),L3t.forEach(t),LDo=r(MBe," \u2014 "),EX=n(MBe,"A",{href:!0});var y3t=s(EX);yDo=r(y3t,"NystromformerForMaskedLM"),y3t.forEach(t),xDo=r(MBe," (Nystr\xF6mformer model)"),MBe.forEach(t),$Do=i(J),xv=n(J,"LI",{});var EBe=s(xv);Bpe=n(EBe,"STRONG",{});var x3t=s(Bpe);kDo=r(x3t,"perceiver"),x3t.forEach(t),SDo=r(EBe," \u2014 "),CX=n(EBe,"A",{href:!0});var $3t=s(CX);RDo=r($3t,"PerceiverForMaskedLM"),$3t.forEach(t),PDo=r(EBe," (Perceiver model)"),EBe.forEach(t),BDo=i(J),$v=n(J,"LI",{});var CBe=s($v);Ipe=n(CBe,"STRONG",{});var k3t=s(Ipe);IDo=r(k3t,"qdqbert"),k3t.forEach(t),NDo=r(CBe," \u2014 "),wX=n(CBe,"A",{href:!0});var S3t=s(wX);qDo=r(S3t,"QDQBertForMaskedLM"),S3t.forEach(t),jDo=r(CBe," (QDQBert model)"),CBe.forEach(t),DDo=i(J),kv=n(J,"LI",{});var wBe=s(kv);Npe=n(wBe,"STRONG",{});var R3t=s(Npe);GDo=r(R3t,"reformer"),R3t.forEach(t),ODo=r(wBe," \u2014 "),AX=n(wBe,"A",{href:!0});var P3t=s(AX);VDo=r(P3t,"ReformerForMaskedLM"),P3t.forEach(t),XDo=r(wBe," (Reformer model)"),wBe.forEach(t),zDo=i(J),Sv=n(J,"LI",{});var ABe=s(Sv);qpe=n(ABe,"STRONG",{});var B3t=s(qpe);WDo=r(B3t,"rembert"),B3t.forEach(t),QDo=r(ABe," \u2014 "),LX=n(ABe,"A",{href:!0});var I3t=s(LX);HDo=r(I3t,"RemBertForMaskedLM"),I3t.forEach(t),UDo=r(ABe," (RemBERT model)"),ABe.forEach(t),JDo=i(J),Rv=n(J,"LI",{});var LBe=s(Rv);jpe=n(LBe,"STRONG",{});var N3t=s(jpe);YDo=r(N3t,"roberta"),N3t.forEach(t),KDo=r(LBe," \u2014 "),yX=n(LBe,"A",{href:!0});var q3t=s(yX);ZDo=r(q3t,"RobertaForMaskedLM"),q3t.forEach(t),eGo=r(LBe," (RoBERTa model)"),LBe.forEach(t),oGo=i(J),Pv=n(J,"LI",{});var yBe=s(Pv);Dpe=n(yBe,"STRONG",{});var j3t=s(Dpe);rGo=r(j3t,"roformer"),j3t.forEach(t),tGo=r(yBe," \u2014 "),xX=n(yBe,"A",{href:!0});var D3t=s(xX);aGo=r(D3t,"RoFormerForMaskedLM"),D3t.forEach(t),nGo=r(yBe," (RoFormer model)"),yBe.forEach(t),sGo=i(J),Bv=n(J,"LI",{});var xBe=s(Bv);Gpe=n(xBe,"STRONG",{});var G3t=s(Gpe);lGo=r(G3t,"squeezebert"),G3t.forEach(t),iGo=r(xBe," \u2014 "),$X=n(xBe,"A",{href:!0});var O3t=s($X);dGo=r(O3t,"SqueezeBertForMaskedLM"),O3t.forEach(t),cGo=r(xBe," (SqueezeBERT model)"),xBe.forEach(t),mGo=i(J),Iv=n(J,"LI",{});var $Be=s(Iv);Ope=n($Be,"STRONG",{});var V3t=s(Ope);fGo=r(V3t,"tapas"),V3t.forEach(t),gGo=r($Be," \u2014 "),kX=n($Be,"A",{href:!0});var X3t=s(kX);hGo=r(X3t,"TapasForMaskedLM"),X3t.forEach(t),uGo=r($Be," (TAPAS model)"),$Be.forEach(t),pGo=i(J),Nv=n(J,"LI",{});var kBe=s(Nv);Vpe=n(kBe,"STRONG",{});var z3t=s(Vpe);_Go=r(z3t,"wav2vec2"),z3t.forEach(t),bGo=r(kBe," \u2014 "),Xpe=n(kBe,"CODE",{});var W3t=s(Xpe);vGo=r(W3t,"Wav2Vec2ForMaskedLM"),W3t.forEach(t),FGo=r(kBe," (Wav2Vec2 model)"),kBe.forEach(t),TGo=i(J),qv=n(J,"LI",{});var SBe=s(qv);zpe=n(SBe,"STRONG",{});var Q3t=s(zpe);MGo=r(Q3t,"xlm"),Q3t.forEach(t),EGo=r(SBe," \u2014 "),SX=n(SBe,"A",{href:!0});var H3t=s(SX);CGo=r(H3t,"XLMWithLMHeadModel"),H3t.forEach(t),wGo=r(SBe," (XLM model)"),SBe.forEach(t),AGo=i(J),jv=n(J,"LI",{});var RBe=s(jv);Wpe=n(RBe,"STRONG",{});var U3t=s(Wpe);LGo=r(U3t,"xlm-roberta"),U3t.forEach(t),yGo=r(RBe," \u2014 "),RX=n(RBe,"A",{href:!0});var J3t=s(RX);xGo=r(J3t,"XLMRobertaForMaskedLM"),J3t.forEach(t),$Go=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),kGo=i(J),Dv=n(J,"LI",{});var PBe=s(Dv);Qpe=n(PBe,"STRONG",{});var Y3t=s(Qpe);SGo=r(Y3t,"xlm-roberta-xl"),Y3t.forEach(t),RGo=r(PBe," \u2014 "),PX=n(PBe,"A",{href:!0});var K3t=s(PX);PGo=r(K3t,"XLMRobertaXLForMaskedLM"),K3t.forEach(t),BGo=r(PBe," (XLM-RoBERTa-XL model)"),PBe.forEach(t),IGo=i(J),Gv=n(J,"LI",{});var BBe=s(Gv);Hpe=n(BBe,"STRONG",{});var Z3t=s(Hpe);NGo=r(Z3t,"yoso"),Z3t.forEach(t),qGo=r(BBe," \u2014 "),BX=n(BBe,"A",{href:!0});var e0t=s(BX);jGo=r(e0t,"YosoForMaskedLM"),e0t.forEach(t),DGo=r(BBe," (YOSO model)"),BBe.forEach(t),J.forEach(t),GGo=i(ga),Ov=n(ga,"P",{});var IBe=s(Ov);OGo=r(IBe,"The model is set in evaluation mode by default using "),Upe=n(IBe,"CODE",{});var o0t=s(Upe);VGo=r(o0t,"model.eval()"),o0t.forEach(t),XGo=r(IBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(IBe,"CODE",{});var r0t=s(Jpe);zGo=r(r0t,"model.train()"),r0t.forEach(t),IBe.forEach(t),WGo=i(ga),T(Vv.$$.fragment,ga),ga.forEach(t),gl.forEach(t),rQe=i(m),id=n(m,"H2",{class:!0});var cUe=s(id);Xv=n(cUe,"A",{id:!0,class:!0,href:!0});var t0t=s(Xv);Ype=n(t0t,"SPAN",{});var a0t=s(Ype);T(q8.$$.fragment,a0t),a0t.forEach(t),t0t.forEach(t),QGo=i(cUe),Kpe=n(cUe,"SPAN",{});var n0t=s(Kpe);HGo=r(n0t,"AutoModelForSeq2SeqLM"),n0t.forEach(t),cUe.forEach(t),tQe=i(m),Io=n(m,"DIV",{class:!0});var hl=s(Io);T(j8.$$.fragment,hl),UGo=i(hl),dd=n(hl,"P",{});var fae=s(dd);JGo=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=n(fae,"A",{href:!0});var s0t=s(IX);YGo=r(s0t,"from_pretrained()"),s0t.forEach(t),KGo=r(fae," class method or the "),NX=n(fae,"A",{href:!0});var l0t=s(NX);ZGo=r(l0t,"from_config()"),l0t.forEach(t),eOo=r(fae,` class
method.`),fae.forEach(t),oOo=i(hl),D8=n(hl,"P",{});var mUe=s(D8);rOo=r(mUe,"This class cannot be instantiated directly using "),Zpe=n(mUe,"CODE",{});var i0t=s(Zpe);tOo=r(i0t,"__init__()"),i0t.forEach(t),aOo=r(mUe," (throws an error)."),mUe.forEach(t),nOo=i(hl),ht=n(hl,"DIV",{class:!0});var oL=s(ht);T(G8.$$.fragment,oL),sOo=i(oL),e_e=n(oL,"P",{});var d0t=s(e_e);lOo=r(d0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),d0t.forEach(t),iOo=i(oL),cd=n(oL,"P",{});var gae=s(cd);dOo=r(gae,`Note:
Loading a model from its configuration file does `),o_e=n(gae,"STRONG",{});var c0t=s(o_e);cOo=r(c0t,"not"),c0t.forEach(t),mOo=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(gae,"A",{href:!0});var m0t=s(qX);fOo=r(m0t,"from_pretrained()"),m0t.forEach(t),gOo=r(gae," to load the model weights."),gae.forEach(t),hOo=i(oL),T(zv.$$.fragment,oL),oL.forEach(t),uOo=i(hl),oo=n(hl,"DIV",{class:!0});var ha=s(oo);T(O8.$$.fragment,ha),pOo=i(ha),r_e=n(ha,"P",{});var f0t=s(r_e);_Oo=r(f0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f0t.forEach(t),bOo=i(ha),Xa=n(ha,"P",{});var rL=s(Xa);vOo=r(rL,"The model class to instantiate is selected based on the "),t_e=n(rL,"CODE",{});var g0t=s(t_e);FOo=r(g0t,"model_type"),g0t.forEach(t),TOo=r(rL,` property of the config object (either
passed as an argument or loaded from `),a_e=n(rL,"CODE",{});var h0t=s(a_e);MOo=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),EOo=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(rL,"CODE",{});var u0t=s(n_e);COo=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),wOo=r(rL,":"),rL.forEach(t),AOo=i(ha),fe=n(ha,"UL",{});var _e=s(fe);Wv=n(_e,"LI",{});var NBe=s(Wv);s_e=n(NBe,"STRONG",{});var p0t=s(s_e);LOo=r(p0t,"bart"),p0t.forEach(t),yOo=r(NBe," \u2014 "),jX=n(NBe,"A",{href:!0});var _0t=s(jX);xOo=r(_0t,"BartForConditionalGeneration"),_0t.forEach(t),$Oo=r(NBe," (BART model)"),NBe.forEach(t),kOo=i(_e),Qv=n(_e,"LI",{});var qBe=s(Qv);l_e=n(qBe,"STRONG",{});var b0t=s(l_e);SOo=r(b0t,"bigbird_pegasus"),b0t.forEach(t),ROo=r(qBe," \u2014 "),DX=n(qBe,"A",{href:!0});var v0t=s(DX);POo=r(v0t,"BigBirdPegasusForConditionalGeneration"),v0t.forEach(t),BOo=r(qBe," (BigBird-Pegasus model)"),qBe.forEach(t),IOo=i(_e),Hv=n(_e,"LI",{});var jBe=s(Hv);i_e=n(jBe,"STRONG",{});var F0t=s(i_e);NOo=r(F0t,"blenderbot"),F0t.forEach(t),qOo=r(jBe," \u2014 "),GX=n(jBe,"A",{href:!0});var T0t=s(GX);jOo=r(T0t,"BlenderbotForConditionalGeneration"),T0t.forEach(t),DOo=r(jBe," (Blenderbot model)"),jBe.forEach(t),GOo=i(_e),Uv=n(_e,"LI",{});var DBe=s(Uv);d_e=n(DBe,"STRONG",{});var M0t=s(d_e);OOo=r(M0t,"blenderbot-small"),M0t.forEach(t),VOo=r(DBe," \u2014 "),OX=n(DBe,"A",{href:!0});var E0t=s(OX);XOo=r(E0t,"BlenderbotSmallForConditionalGeneration"),E0t.forEach(t),zOo=r(DBe," (BlenderbotSmall model)"),DBe.forEach(t),WOo=i(_e),Jv=n(_e,"LI",{});var GBe=s(Jv);c_e=n(GBe,"STRONG",{});var C0t=s(c_e);QOo=r(C0t,"encoder-decoder"),C0t.forEach(t),HOo=r(GBe," \u2014 "),VX=n(GBe,"A",{href:!0});var w0t=s(VX);UOo=r(w0t,"EncoderDecoderModel"),w0t.forEach(t),JOo=r(GBe," (Encoder decoder model)"),GBe.forEach(t),YOo=i(_e),Yv=n(_e,"LI",{});var OBe=s(Yv);m_e=n(OBe,"STRONG",{});var A0t=s(m_e);KOo=r(A0t,"fsmt"),A0t.forEach(t),ZOo=r(OBe," \u2014 "),XX=n(OBe,"A",{href:!0});var L0t=s(XX);eVo=r(L0t,"FSMTForConditionalGeneration"),L0t.forEach(t),oVo=r(OBe," (FairSeq Machine-Translation model)"),OBe.forEach(t),rVo=i(_e),Kv=n(_e,"LI",{});var VBe=s(Kv);f_e=n(VBe,"STRONG",{});var y0t=s(f_e);tVo=r(y0t,"led"),y0t.forEach(t),aVo=r(VBe," \u2014 "),zX=n(VBe,"A",{href:!0});var x0t=s(zX);nVo=r(x0t,"LEDForConditionalGeneration"),x0t.forEach(t),sVo=r(VBe," (LED model)"),VBe.forEach(t),lVo=i(_e),Zv=n(_e,"LI",{});var XBe=s(Zv);g_e=n(XBe,"STRONG",{});var $0t=s(g_e);iVo=r($0t,"longt5"),$0t.forEach(t),dVo=r(XBe," \u2014 "),WX=n(XBe,"A",{href:!0});var k0t=s(WX);cVo=r(k0t,"LongT5ForConditionalGeneration"),k0t.forEach(t),mVo=r(XBe," (LongT5 model)"),XBe.forEach(t),fVo=i(_e),e1=n(_e,"LI",{});var zBe=s(e1);h_e=n(zBe,"STRONG",{});var S0t=s(h_e);gVo=r(S0t,"m2m_100"),S0t.forEach(t),hVo=r(zBe," \u2014 "),QX=n(zBe,"A",{href:!0});var R0t=s(QX);uVo=r(R0t,"M2M100ForConditionalGeneration"),R0t.forEach(t),pVo=r(zBe," (M2M100 model)"),zBe.forEach(t),_Vo=i(_e),o1=n(_e,"LI",{});var WBe=s(o1);u_e=n(WBe,"STRONG",{});var P0t=s(u_e);bVo=r(P0t,"marian"),P0t.forEach(t),vVo=r(WBe," \u2014 "),HX=n(WBe,"A",{href:!0});var B0t=s(HX);FVo=r(B0t,"MarianMTModel"),B0t.forEach(t),TVo=r(WBe," (Marian model)"),WBe.forEach(t),MVo=i(_e),r1=n(_e,"LI",{});var QBe=s(r1);p_e=n(QBe,"STRONG",{});var I0t=s(p_e);EVo=r(I0t,"mbart"),I0t.forEach(t),CVo=r(QBe," \u2014 "),UX=n(QBe,"A",{href:!0});var N0t=s(UX);wVo=r(N0t,"MBartForConditionalGeneration"),N0t.forEach(t),AVo=r(QBe," (mBART model)"),QBe.forEach(t),LVo=i(_e),t1=n(_e,"LI",{});var HBe=s(t1);__e=n(HBe,"STRONG",{});var q0t=s(__e);yVo=r(q0t,"mt5"),q0t.forEach(t),xVo=r(HBe," \u2014 "),JX=n(HBe,"A",{href:!0});var j0t=s(JX);$Vo=r(j0t,"MT5ForConditionalGeneration"),j0t.forEach(t),kVo=r(HBe," (MT5 model)"),HBe.forEach(t),SVo=i(_e),a1=n(_e,"LI",{});var UBe=s(a1);b_e=n(UBe,"STRONG",{});var D0t=s(b_e);RVo=r(D0t,"mvp"),D0t.forEach(t),PVo=r(UBe," \u2014 "),YX=n(UBe,"A",{href:!0});var G0t=s(YX);BVo=r(G0t,"MvpForConditionalGeneration"),G0t.forEach(t),IVo=r(UBe," (MVP model)"),UBe.forEach(t),NVo=i(_e),n1=n(_e,"LI",{});var JBe=s(n1);v_e=n(JBe,"STRONG",{});var O0t=s(v_e);qVo=r(O0t,"nllb"),O0t.forEach(t),jVo=r(JBe," \u2014 "),KX=n(JBe,"A",{href:!0});var V0t=s(KX);DVo=r(V0t,"M2M100ForConditionalGeneration"),V0t.forEach(t),GVo=r(JBe," (NLLB model)"),JBe.forEach(t),OVo=i(_e),s1=n(_e,"LI",{});var YBe=s(s1);F_e=n(YBe,"STRONG",{});var X0t=s(F_e);VVo=r(X0t,"pegasus"),X0t.forEach(t),XVo=r(YBe," \u2014 "),ZX=n(YBe,"A",{href:!0});var z0t=s(ZX);zVo=r(z0t,"PegasusForConditionalGeneration"),z0t.forEach(t),WVo=r(YBe," (Pegasus model)"),YBe.forEach(t),QVo=i(_e),l1=n(_e,"LI",{});var KBe=s(l1);T_e=n(KBe,"STRONG",{});var W0t=s(T_e);HVo=r(W0t,"plbart"),W0t.forEach(t),UVo=r(KBe," \u2014 "),ez=n(KBe,"A",{href:!0});var Q0t=s(ez);JVo=r(Q0t,"PLBartForConditionalGeneration"),Q0t.forEach(t),YVo=r(KBe," (PLBart model)"),KBe.forEach(t),KVo=i(_e),i1=n(_e,"LI",{});var ZBe=s(i1);M_e=n(ZBe,"STRONG",{});var H0t=s(M_e);ZVo=r(H0t,"prophetnet"),H0t.forEach(t),eXo=r(ZBe," \u2014 "),oz=n(ZBe,"A",{href:!0});var U0t=s(oz);oXo=r(U0t,"ProphetNetForConditionalGeneration"),U0t.forEach(t),rXo=r(ZBe," (ProphetNet model)"),ZBe.forEach(t),tXo=i(_e),d1=n(_e,"LI",{});var eIe=s(d1);E_e=n(eIe,"STRONG",{});var J0t=s(E_e);aXo=r(J0t,"t5"),J0t.forEach(t),nXo=r(eIe," \u2014 "),rz=n(eIe,"A",{href:!0});var Y0t=s(rz);sXo=r(Y0t,"T5ForConditionalGeneration"),Y0t.forEach(t),lXo=r(eIe," (T5 model)"),eIe.forEach(t),iXo=i(_e),c1=n(_e,"LI",{});var oIe=s(c1);C_e=n(oIe,"STRONG",{});var K0t=s(C_e);dXo=r(K0t,"xlm-prophetnet"),K0t.forEach(t),cXo=r(oIe," \u2014 "),tz=n(oIe,"A",{href:!0});var Z0t=s(tz);mXo=r(Z0t,"XLMProphetNetForConditionalGeneration"),Z0t.forEach(t),fXo=r(oIe," (XLM-ProphetNet model)"),oIe.forEach(t),_e.forEach(t),gXo=i(ha),m1=n(ha,"P",{});var rIe=s(m1);hXo=r(rIe,"The model is set in evaluation mode by default using "),w_e=n(rIe,"CODE",{});var ewt=s(w_e);uXo=r(ewt,"model.eval()"),ewt.forEach(t),pXo=r(rIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=n(rIe,"CODE",{});var owt=s(A_e);_Xo=r(owt,"model.train()"),owt.forEach(t),rIe.forEach(t),bXo=i(ha),T(f1.$$.fragment,ha),ha.forEach(t),hl.forEach(t),aQe=i(m),md=n(m,"H2",{class:!0});var fUe=s(md);g1=n(fUe,"A",{id:!0,class:!0,href:!0});var rwt=s(g1);L_e=n(rwt,"SPAN",{});var twt=s(L_e);T(V8.$$.fragment,twt),twt.forEach(t),rwt.forEach(t),vXo=i(fUe),y_e=n(fUe,"SPAN",{});var awt=s(y_e);FXo=r(awt,"AutoModelForSequenceClassification"),awt.forEach(t),fUe.forEach(t),nQe=i(m),No=n(m,"DIV",{class:!0});var ul=s(No);T(X8.$$.fragment,ul),TXo=i(ul),fd=n(ul,"P",{});var hae=s(fd);MXo=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),az=n(hae,"A",{href:!0});var nwt=s(az);EXo=r(nwt,"from_pretrained()"),nwt.forEach(t),CXo=r(hae," class method or the "),nz=n(hae,"A",{href:!0});var swt=s(nz);wXo=r(swt,"from_config()"),swt.forEach(t),AXo=r(hae,` class
method.`),hae.forEach(t),LXo=i(ul),z8=n(ul,"P",{});var gUe=s(z8);yXo=r(gUe,"This class cannot be instantiated directly using "),x_e=n(gUe,"CODE",{});var lwt=s(x_e);xXo=r(lwt,"__init__()"),lwt.forEach(t),$Xo=r(gUe," (throws an error)."),gUe.forEach(t),kXo=i(ul),ut=n(ul,"DIV",{class:!0});var tL=s(ut);T(W8.$$.fragment,tL),SXo=i(tL),$_e=n(tL,"P",{});var iwt=s($_e);RXo=r(iwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iwt.forEach(t),PXo=i(tL),gd=n(tL,"P",{});var uae=s(gd);BXo=r(uae,`Note:
Loading a model from its configuration file does `),k_e=n(uae,"STRONG",{});var dwt=s(k_e);IXo=r(dwt,"not"),dwt.forEach(t),NXo=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(uae,"A",{href:!0});var cwt=s(sz);qXo=r(cwt,"from_pretrained()"),cwt.forEach(t),jXo=r(uae," to load the model weights."),uae.forEach(t),DXo=i(tL),T(h1.$$.fragment,tL),tL.forEach(t),GXo=i(ul),ro=n(ul,"DIV",{class:!0});var ua=s(ro);T(Q8.$$.fragment,ua),OXo=i(ua),S_e=n(ua,"P",{});var mwt=s(S_e);VXo=r(mwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mwt.forEach(t),XXo=i(ua),za=n(ua,"P",{});var aL=s(za);zXo=r(aL,"The model class to instantiate is selected based on the "),R_e=n(aL,"CODE",{});var fwt=s(R_e);WXo=r(fwt,"model_type"),fwt.forEach(t),QXo=r(aL,` property of the config object (either
passed as an argument or loaded from `),P_e=n(aL,"CODE",{});var gwt=s(P_e);HXo=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),UXo=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(aL,"CODE",{});var hwt=s(B_e);JXo=r(hwt,"pretrained_model_name_or_path"),hwt.forEach(t),YXo=r(aL,":"),aL.forEach(t),KXo=i(ua),B=n(ua,"UL",{});var j=s(B);u1=n(j,"LI",{});var tIe=s(u1);I_e=n(tIe,"STRONG",{});var uwt=s(I_e);ZXo=r(uwt,"albert"),uwt.forEach(t),ezo=r(tIe," \u2014 "),lz=n(tIe,"A",{href:!0});var pwt=s(lz);ozo=r(pwt,"AlbertForSequenceClassification"),pwt.forEach(t),rzo=r(tIe," (ALBERT model)"),tIe.forEach(t),tzo=i(j),p1=n(j,"LI",{});var aIe=s(p1);N_e=n(aIe,"STRONG",{});var _wt=s(N_e);azo=r(_wt,"bart"),_wt.forEach(t),nzo=r(aIe," \u2014 "),iz=n(aIe,"A",{href:!0});var bwt=s(iz);szo=r(bwt,"BartForSequenceClassification"),bwt.forEach(t),lzo=r(aIe," (BART model)"),aIe.forEach(t),izo=i(j),_1=n(j,"LI",{});var nIe=s(_1);q_e=n(nIe,"STRONG",{});var vwt=s(q_e);dzo=r(vwt,"bert"),vwt.forEach(t),czo=r(nIe," \u2014 "),dz=n(nIe,"A",{href:!0});var Fwt=s(dz);mzo=r(Fwt,"BertForSequenceClassification"),Fwt.forEach(t),fzo=r(nIe," (BERT model)"),nIe.forEach(t),gzo=i(j),b1=n(j,"LI",{});var sIe=s(b1);j_e=n(sIe,"STRONG",{});var Twt=s(j_e);hzo=r(Twt,"big_bird"),Twt.forEach(t),uzo=r(sIe," \u2014 "),cz=n(sIe,"A",{href:!0});var Mwt=s(cz);pzo=r(Mwt,"BigBirdForSequenceClassification"),Mwt.forEach(t),_zo=r(sIe," (BigBird model)"),sIe.forEach(t),bzo=i(j),v1=n(j,"LI",{});var lIe=s(v1);D_e=n(lIe,"STRONG",{});var Ewt=s(D_e);vzo=r(Ewt,"bigbird_pegasus"),Ewt.forEach(t),Fzo=r(lIe," \u2014 "),mz=n(lIe,"A",{href:!0});var Cwt=s(mz);Tzo=r(Cwt,"BigBirdPegasusForSequenceClassification"),Cwt.forEach(t),Mzo=r(lIe," (BigBird-Pegasus model)"),lIe.forEach(t),Ezo=i(j),F1=n(j,"LI",{});var iIe=s(F1);G_e=n(iIe,"STRONG",{});var wwt=s(G_e);Czo=r(wwt,"bloom"),wwt.forEach(t),wzo=r(iIe," \u2014 "),fz=n(iIe,"A",{href:!0});var Awt=s(fz);Azo=r(Awt,"BloomForSequenceClassification"),Awt.forEach(t),Lzo=r(iIe," (BLOOM model)"),iIe.forEach(t),yzo=i(j),T1=n(j,"LI",{});var dIe=s(T1);O_e=n(dIe,"STRONG",{});var Lwt=s(O_e);xzo=r(Lwt,"camembert"),Lwt.forEach(t),$zo=r(dIe," \u2014 "),gz=n(dIe,"A",{href:!0});var ywt=s(gz);kzo=r(ywt,"CamembertForSequenceClassification"),ywt.forEach(t),Szo=r(dIe," (CamemBERT model)"),dIe.forEach(t),Rzo=i(j),M1=n(j,"LI",{});var cIe=s(M1);V_e=n(cIe,"STRONG",{});var xwt=s(V_e);Pzo=r(xwt,"canine"),xwt.forEach(t),Bzo=r(cIe," \u2014 "),hz=n(cIe,"A",{href:!0});var $wt=s(hz);Izo=r($wt,"CanineForSequenceClassification"),$wt.forEach(t),Nzo=r(cIe," (CANINE model)"),cIe.forEach(t),qzo=i(j),E1=n(j,"LI",{});var mIe=s(E1);X_e=n(mIe,"STRONG",{});var kwt=s(X_e);jzo=r(kwt,"convbert"),kwt.forEach(t),Dzo=r(mIe," \u2014 "),uz=n(mIe,"A",{href:!0});var Swt=s(uz);Gzo=r(Swt,"ConvBertForSequenceClassification"),Swt.forEach(t),Ozo=r(mIe," (ConvBERT model)"),mIe.forEach(t),Vzo=i(j),C1=n(j,"LI",{});var fIe=s(C1);z_e=n(fIe,"STRONG",{});var Rwt=s(z_e);Xzo=r(Rwt,"ctrl"),Rwt.forEach(t),zzo=r(fIe," \u2014 "),pz=n(fIe,"A",{href:!0});var Pwt=s(pz);Wzo=r(Pwt,"CTRLForSequenceClassification"),Pwt.forEach(t),Qzo=r(fIe," (CTRL model)"),fIe.forEach(t),Hzo=i(j),w1=n(j,"LI",{});var gIe=s(w1);W_e=n(gIe,"STRONG",{});var Bwt=s(W_e);Uzo=r(Bwt,"data2vec-text"),Bwt.forEach(t),Jzo=r(gIe," \u2014 "),_z=n(gIe,"A",{href:!0});var Iwt=s(_z);Yzo=r(Iwt,"Data2VecTextForSequenceClassification"),Iwt.forEach(t),Kzo=r(gIe," (Data2VecText model)"),gIe.forEach(t),Zzo=i(j),A1=n(j,"LI",{});var hIe=s(A1);Q_e=n(hIe,"STRONG",{});var Nwt=s(Q_e);eWo=r(Nwt,"deberta"),Nwt.forEach(t),oWo=r(hIe," \u2014 "),bz=n(hIe,"A",{href:!0});var qwt=s(bz);rWo=r(qwt,"DebertaForSequenceClassification"),qwt.forEach(t),tWo=r(hIe," (DeBERTa model)"),hIe.forEach(t),aWo=i(j),L1=n(j,"LI",{});var uIe=s(L1);H_e=n(uIe,"STRONG",{});var jwt=s(H_e);nWo=r(jwt,"deberta-v2"),jwt.forEach(t),sWo=r(uIe," \u2014 "),vz=n(uIe,"A",{href:!0});var Dwt=s(vz);lWo=r(Dwt,"DebertaV2ForSequenceClassification"),Dwt.forEach(t),iWo=r(uIe," (DeBERTa-v2 model)"),uIe.forEach(t),dWo=i(j),y1=n(j,"LI",{});var pIe=s(y1);U_e=n(pIe,"STRONG",{});var Gwt=s(U_e);cWo=r(Gwt,"distilbert"),Gwt.forEach(t),mWo=r(pIe," \u2014 "),Fz=n(pIe,"A",{href:!0});var Owt=s(Fz);fWo=r(Owt,"DistilBertForSequenceClassification"),Owt.forEach(t),gWo=r(pIe," (DistilBERT model)"),pIe.forEach(t),hWo=i(j),x1=n(j,"LI",{});var _Ie=s(x1);J_e=n(_Ie,"STRONG",{});var Vwt=s(J_e);uWo=r(Vwt,"electra"),Vwt.forEach(t),pWo=r(_Ie," \u2014 "),Tz=n(_Ie,"A",{href:!0});var Xwt=s(Tz);_Wo=r(Xwt,"ElectraForSequenceClassification"),Xwt.forEach(t),bWo=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),vWo=i(j),$1=n(j,"LI",{});var bIe=s($1);Y_e=n(bIe,"STRONG",{});var zwt=s(Y_e);FWo=r(zwt,"flaubert"),zwt.forEach(t),TWo=r(bIe," \u2014 "),Mz=n(bIe,"A",{href:!0});var Wwt=s(Mz);MWo=r(Wwt,"FlaubertForSequenceClassification"),Wwt.forEach(t),EWo=r(bIe," (FlauBERT model)"),bIe.forEach(t),CWo=i(j),k1=n(j,"LI",{});var vIe=s(k1);K_e=n(vIe,"STRONG",{});var Qwt=s(K_e);wWo=r(Qwt,"fnet"),Qwt.forEach(t),AWo=r(vIe," \u2014 "),Ez=n(vIe,"A",{href:!0});var Hwt=s(Ez);LWo=r(Hwt,"FNetForSequenceClassification"),Hwt.forEach(t),yWo=r(vIe," (FNet model)"),vIe.forEach(t),xWo=i(j),S1=n(j,"LI",{});var FIe=s(S1);Z_e=n(FIe,"STRONG",{});var Uwt=s(Z_e);$Wo=r(Uwt,"funnel"),Uwt.forEach(t),kWo=r(FIe," \u2014 "),Cz=n(FIe,"A",{href:!0});var Jwt=s(Cz);SWo=r(Jwt,"FunnelForSequenceClassification"),Jwt.forEach(t),RWo=r(FIe," (Funnel Transformer model)"),FIe.forEach(t),PWo=i(j),R1=n(j,"LI",{});var TIe=s(R1);e2e=n(TIe,"STRONG",{});var Ywt=s(e2e);BWo=r(Ywt,"gpt2"),Ywt.forEach(t),IWo=r(TIe," \u2014 "),wz=n(TIe,"A",{href:!0});var Kwt=s(wz);NWo=r(Kwt,"GPT2ForSequenceClassification"),Kwt.forEach(t),qWo=r(TIe," (OpenAI GPT-2 model)"),TIe.forEach(t),jWo=i(j),P1=n(j,"LI",{});var MIe=s(P1);o2e=n(MIe,"STRONG",{});var Zwt=s(o2e);DWo=r(Zwt,"gpt_neo"),Zwt.forEach(t),GWo=r(MIe," \u2014 "),Az=n(MIe,"A",{href:!0});var e6t=s(Az);OWo=r(e6t,"GPTNeoForSequenceClassification"),e6t.forEach(t),VWo=r(MIe," (GPT Neo model)"),MIe.forEach(t),XWo=i(j),B1=n(j,"LI",{});var EIe=s(B1);r2e=n(EIe,"STRONG",{});var o6t=s(r2e);zWo=r(o6t,"gptj"),o6t.forEach(t),WWo=r(EIe," \u2014 "),Lz=n(EIe,"A",{href:!0});var r6t=s(Lz);QWo=r(r6t,"GPTJForSequenceClassification"),r6t.forEach(t),HWo=r(EIe," (GPT-J model)"),EIe.forEach(t),UWo=i(j),I1=n(j,"LI",{});var CIe=s(I1);t2e=n(CIe,"STRONG",{});var t6t=s(t2e);JWo=r(t6t,"ibert"),t6t.forEach(t),YWo=r(CIe," \u2014 "),yz=n(CIe,"A",{href:!0});var a6t=s(yz);KWo=r(a6t,"IBertForSequenceClassification"),a6t.forEach(t),ZWo=r(CIe," (I-BERT model)"),CIe.forEach(t),eQo=i(j),N1=n(j,"LI",{});var wIe=s(N1);a2e=n(wIe,"STRONG",{});var n6t=s(a2e);oQo=r(n6t,"layoutlm"),n6t.forEach(t),rQo=r(wIe," \u2014 "),xz=n(wIe,"A",{href:!0});var s6t=s(xz);tQo=r(s6t,"LayoutLMForSequenceClassification"),s6t.forEach(t),aQo=r(wIe," (LayoutLM model)"),wIe.forEach(t),nQo=i(j),q1=n(j,"LI",{});var AIe=s(q1);n2e=n(AIe,"STRONG",{});var l6t=s(n2e);sQo=r(l6t,"layoutlmv2"),l6t.forEach(t),lQo=r(AIe," \u2014 "),$z=n(AIe,"A",{href:!0});var i6t=s($z);iQo=r(i6t,"LayoutLMv2ForSequenceClassification"),i6t.forEach(t),dQo=r(AIe," (LayoutLMv2 model)"),AIe.forEach(t),cQo=i(j),j1=n(j,"LI",{});var LIe=s(j1);s2e=n(LIe,"STRONG",{});var d6t=s(s2e);mQo=r(d6t,"layoutlmv3"),d6t.forEach(t),fQo=r(LIe," \u2014 "),kz=n(LIe,"A",{href:!0});var c6t=s(kz);gQo=r(c6t,"LayoutLMv3ForSequenceClassification"),c6t.forEach(t),hQo=r(LIe," (LayoutLMv3 model)"),LIe.forEach(t),uQo=i(j),D1=n(j,"LI",{});var yIe=s(D1);l2e=n(yIe,"STRONG",{});var m6t=s(l2e);pQo=r(m6t,"led"),m6t.forEach(t),_Qo=r(yIe," \u2014 "),Sz=n(yIe,"A",{href:!0});var f6t=s(Sz);bQo=r(f6t,"LEDForSequenceClassification"),f6t.forEach(t),vQo=r(yIe," (LED model)"),yIe.forEach(t),FQo=i(j),G1=n(j,"LI",{});var xIe=s(G1);i2e=n(xIe,"STRONG",{});var g6t=s(i2e);TQo=r(g6t,"longformer"),g6t.forEach(t),MQo=r(xIe," \u2014 "),Rz=n(xIe,"A",{href:!0});var h6t=s(Rz);EQo=r(h6t,"LongformerForSequenceClassification"),h6t.forEach(t),CQo=r(xIe," (Longformer model)"),xIe.forEach(t),wQo=i(j),O1=n(j,"LI",{});var $Ie=s(O1);d2e=n($Ie,"STRONG",{});var u6t=s(d2e);AQo=r(u6t,"luke"),u6t.forEach(t),LQo=r($Ie," \u2014 "),Pz=n($Ie,"A",{href:!0});var p6t=s(Pz);yQo=r(p6t,"LukeForSequenceClassification"),p6t.forEach(t),xQo=r($Ie," (LUKE model)"),$Ie.forEach(t),$Qo=i(j),V1=n(j,"LI",{});var kIe=s(V1);c2e=n(kIe,"STRONG",{});var _6t=s(c2e);kQo=r(_6t,"mbart"),_6t.forEach(t),SQo=r(kIe," \u2014 "),Bz=n(kIe,"A",{href:!0});var b6t=s(Bz);RQo=r(b6t,"MBartForSequenceClassification"),b6t.forEach(t),PQo=r(kIe," (mBART model)"),kIe.forEach(t),BQo=i(j),X1=n(j,"LI",{});var SIe=s(X1);m2e=n(SIe,"STRONG",{});var v6t=s(m2e);IQo=r(v6t,"megatron-bert"),v6t.forEach(t),NQo=r(SIe," \u2014 "),Iz=n(SIe,"A",{href:!0});var F6t=s(Iz);qQo=r(F6t,"MegatronBertForSequenceClassification"),F6t.forEach(t),jQo=r(SIe," (Megatron-BERT model)"),SIe.forEach(t),DQo=i(j),z1=n(j,"LI",{});var RIe=s(z1);f2e=n(RIe,"STRONG",{});var T6t=s(f2e);GQo=r(T6t,"mobilebert"),T6t.forEach(t),OQo=r(RIe," \u2014 "),Nz=n(RIe,"A",{href:!0});var M6t=s(Nz);VQo=r(M6t,"MobileBertForSequenceClassification"),M6t.forEach(t),XQo=r(RIe," (MobileBERT model)"),RIe.forEach(t),zQo=i(j),W1=n(j,"LI",{});var PIe=s(W1);g2e=n(PIe,"STRONG",{});var E6t=s(g2e);WQo=r(E6t,"mpnet"),E6t.forEach(t),QQo=r(PIe," \u2014 "),qz=n(PIe,"A",{href:!0});var C6t=s(qz);HQo=r(C6t,"MPNetForSequenceClassification"),C6t.forEach(t),UQo=r(PIe," (MPNet model)"),PIe.forEach(t),JQo=i(j),Q1=n(j,"LI",{});var BIe=s(Q1);h2e=n(BIe,"STRONG",{});var w6t=s(h2e);YQo=r(w6t,"mvp"),w6t.forEach(t),KQo=r(BIe," \u2014 "),jz=n(BIe,"A",{href:!0});var A6t=s(jz);ZQo=r(A6t,"MvpForSequenceClassification"),A6t.forEach(t),eHo=r(BIe," (MVP model)"),BIe.forEach(t),oHo=i(j),H1=n(j,"LI",{});var IIe=s(H1);u2e=n(IIe,"STRONG",{});var L6t=s(u2e);rHo=r(L6t,"nezha"),L6t.forEach(t),tHo=r(IIe," \u2014 "),Dz=n(IIe,"A",{href:!0});var y6t=s(Dz);aHo=r(y6t,"NezhaForSequenceClassification"),y6t.forEach(t),nHo=r(IIe," (Nezha model)"),IIe.forEach(t),sHo=i(j),U1=n(j,"LI",{});var NIe=s(U1);p2e=n(NIe,"STRONG",{});var x6t=s(p2e);lHo=r(x6t,"nystromformer"),x6t.forEach(t),iHo=r(NIe," \u2014 "),Gz=n(NIe,"A",{href:!0});var $6t=s(Gz);dHo=r($6t,"NystromformerForSequenceClassification"),$6t.forEach(t),cHo=r(NIe," (Nystr\xF6mformer model)"),NIe.forEach(t),mHo=i(j),J1=n(j,"LI",{});var qIe=s(J1);_2e=n(qIe,"STRONG",{});var k6t=s(_2e);fHo=r(k6t,"openai-gpt"),k6t.forEach(t),gHo=r(qIe," \u2014 "),Oz=n(qIe,"A",{href:!0});var S6t=s(Oz);hHo=r(S6t,"OpenAIGPTForSequenceClassification"),S6t.forEach(t),uHo=r(qIe," (OpenAI GPT model)"),qIe.forEach(t),pHo=i(j),Y1=n(j,"LI",{});var jIe=s(Y1);b2e=n(jIe,"STRONG",{});var R6t=s(b2e);_Ho=r(R6t,"opt"),R6t.forEach(t),bHo=r(jIe," \u2014 "),Vz=n(jIe,"A",{href:!0});var P6t=s(Vz);vHo=r(P6t,"OPTForSequenceClassification"),P6t.forEach(t),FHo=r(jIe," (OPT model)"),jIe.forEach(t),THo=i(j),K1=n(j,"LI",{});var DIe=s(K1);v2e=n(DIe,"STRONG",{});var B6t=s(v2e);MHo=r(B6t,"perceiver"),B6t.forEach(t),EHo=r(DIe," \u2014 "),Xz=n(DIe,"A",{href:!0});var I6t=s(Xz);CHo=r(I6t,"PerceiverForSequenceClassification"),I6t.forEach(t),wHo=r(DIe," (Perceiver model)"),DIe.forEach(t),AHo=i(j),Z1=n(j,"LI",{});var GIe=s(Z1);F2e=n(GIe,"STRONG",{});var N6t=s(F2e);LHo=r(N6t,"plbart"),N6t.forEach(t),yHo=r(GIe," \u2014 "),zz=n(GIe,"A",{href:!0});var q6t=s(zz);xHo=r(q6t,"PLBartForSequenceClassification"),q6t.forEach(t),$Ho=r(GIe," (PLBart model)"),GIe.forEach(t),kHo=i(j),eF=n(j,"LI",{});var OIe=s(eF);T2e=n(OIe,"STRONG",{});var j6t=s(T2e);SHo=r(j6t,"qdqbert"),j6t.forEach(t),RHo=r(OIe," \u2014 "),Wz=n(OIe,"A",{href:!0});var D6t=s(Wz);PHo=r(D6t,"QDQBertForSequenceClassification"),D6t.forEach(t),BHo=r(OIe," (QDQBert model)"),OIe.forEach(t),IHo=i(j),oF=n(j,"LI",{});var VIe=s(oF);M2e=n(VIe,"STRONG",{});var G6t=s(M2e);NHo=r(G6t,"reformer"),G6t.forEach(t),qHo=r(VIe," \u2014 "),Qz=n(VIe,"A",{href:!0});var O6t=s(Qz);jHo=r(O6t,"ReformerForSequenceClassification"),O6t.forEach(t),DHo=r(VIe," (Reformer model)"),VIe.forEach(t),GHo=i(j),rF=n(j,"LI",{});var XIe=s(rF);E2e=n(XIe,"STRONG",{});var V6t=s(E2e);OHo=r(V6t,"rembert"),V6t.forEach(t),VHo=r(XIe," \u2014 "),Hz=n(XIe,"A",{href:!0});var X6t=s(Hz);XHo=r(X6t,"RemBertForSequenceClassification"),X6t.forEach(t),zHo=r(XIe," (RemBERT model)"),XIe.forEach(t),WHo=i(j),tF=n(j,"LI",{});var zIe=s(tF);C2e=n(zIe,"STRONG",{});var z6t=s(C2e);QHo=r(z6t,"roberta"),z6t.forEach(t),HHo=r(zIe," \u2014 "),Uz=n(zIe,"A",{href:!0});var W6t=s(Uz);UHo=r(W6t,"RobertaForSequenceClassification"),W6t.forEach(t),JHo=r(zIe," (RoBERTa model)"),zIe.forEach(t),YHo=i(j),aF=n(j,"LI",{});var WIe=s(aF);w2e=n(WIe,"STRONG",{});var Q6t=s(w2e);KHo=r(Q6t,"roformer"),Q6t.forEach(t),ZHo=r(WIe," \u2014 "),Jz=n(WIe,"A",{href:!0});var H6t=s(Jz);eUo=r(H6t,"RoFormerForSequenceClassification"),H6t.forEach(t),oUo=r(WIe," (RoFormer model)"),WIe.forEach(t),rUo=i(j),nF=n(j,"LI",{});var QIe=s(nF);A2e=n(QIe,"STRONG",{});var U6t=s(A2e);tUo=r(U6t,"squeezebert"),U6t.forEach(t),aUo=r(QIe," \u2014 "),Yz=n(QIe,"A",{href:!0});var J6t=s(Yz);nUo=r(J6t,"SqueezeBertForSequenceClassification"),J6t.forEach(t),sUo=r(QIe," (SqueezeBERT model)"),QIe.forEach(t),lUo=i(j),sF=n(j,"LI",{});var HIe=s(sF);L2e=n(HIe,"STRONG",{});var Y6t=s(L2e);iUo=r(Y6t,"tapas"),Y6t.forEach(t),dUo=r(HIe," \u2014 "),Kz=n(HIe,"A",{href:!0});var K6t=s(Kz);cUo=r(K6t,"TapasForSequenceClassification"),K6t.forEach(t),mUo=r(HIe," (TAPAS model)"),HIe.forEach(t),fUo=i(j),lF=n(j,"LI",{});var UIe=s(lF);y2e=n(UIe,"STRONG",{});var Z6t=s(y2e);gUo=r(Z6t,"transfo-xl"),Z6t.forEach(t),hUo=r(UIe," \u2014 "),Zz=n(UIe,"A",{href:!0});var eAt=s(Zz);uUo=r(eAt,"TransfoXLForSequenceClassification"),eAt.forEach(t),pUo=r(UIe," (Transformer-XL model)"),UIe.forEach(t),_Uo=i(j),iF=n(j,"LI",{});var JIe=s(iF);x2e=n(JIe,"STRONG",{});var oAt=s(x2e);bUo=r(oAt,"xlm"),oAt.forEach(t),vUo=r(JIe," \u2014 "),eW=n(JIe,"A",{href:!0});var rAt=s(eW);FUo=r(rAt,"XLMForSequenceClassification"),rAt.forEach(t),TUo=r(JIe," (XLM model)"),JIe.forEach(t),MUo=i(j),dF=n(j,"LI",{});var YIe=s(dF);$2e=n(YIe,"STRONG",{});var tAt=s($2e);EUo=r(tAt,"xlm-roberta"),tAt.forEach(t),CUo=r(YIe," \u2014 "),oW=n(YIe,"A",{href:!0});var aAt=s(oW);wUo=r(aAt,"XLMRobertaForSequenceClassification"),aAt.forEach(t),AUo=r(YIe," (XLM-RoBERTa model)"),YIe.forEach(t),LUo=i(j),cF=n(j,"LI",{});var KIe=s(cF);k2e=n(KIe,"STRONG",{});var nAt=s(k2e);yUo=r(nAt,"xlm-roberta-xl"),nAt.forEach(t),xUo=r(KIe," \u2014 "),rW=n(KIe,"A",{href:!0});var sAt=s(rW);$Uo=r(sAt,"XLMRobertaXLForSequenceClassification"),sAt.forEach(t),kUo=r(KIe," (XLM-RoBERTa-XL model)"),KIe.forEach(t),SUo=i(j),mF=n(j,"LI",{});var ZIe=s(mF);S2e=n(ZIe,"STRONG",{});var lAt=s(S2e);RUo=r(lAt,"xlnet"),lAt.forEach(t),PUo=r(ZIe," \u2014 "),tW=n(ZIe,"A",{href:!0});var iAt=s(tW);BUo=r(iAt,"XLNetForSequenceClassification"),iAt.forEach(t),IUo=r(ZIe," (XLNet model)"),ZIe.forEach(t),NUo=i(j),fF=n(j,"LI",{});var eNe=s(fF);R2e=n(eNe,"STRONG",{});var dAt=s(R2e);qUo=r(dAt,"yoso"),dAt.forEach(t),jUo=r(eNe," \u2014 "),aW=n(eNe,"A",{href:!0});var cAt=s(aW);DUo=r(cAt,"YosoForSequenceClassification"),cAt.forEach(t),GUo=r(eNe," (YOSO model)"),eNe.forEach(t),j.forEach(t),OUo=i(ua),gF=n(ua,"P",{});var oNe=s(gF);VUo=r(oNe,"The model is set in evaluation mode by default using "),P2e=n(oNe,"CODE",{});var mAt=s(P2e);XUo=r(mAt,"model.eval()"),mAt.forEach(t),zUo=r(oNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(oNe,"CODE",{});var fAt=s(B2e);WUo=r(fAt,"model.train()"),fAt.forEach(t),oNe.forEach(t),QUo=i(ua),T(hF.$$.fragment,ua),ua.forEach(t),ul.forEach(t),sQe=i(m),hd=n(m,"H2",{class:!0});var hUe=s(hd);uF=n(hUe,"A",{id:!0,class:!0,href:!0});var gAt=s(uF);I2e=n(gAt,"SPAN",{});var hAt=s(I2e);T(H8.$$.fragment,hAt),hAt.forEach(t),gAt.forEach(t),HUo=i(hUe),N2e=n(hUe,"SPAN",{});var uAt=s(N2e);UUo=r(uAt,"AutoModelForMultipleChoice"),uAt.forEach(t),hUe.forEach(t),lQe=i(m),qo=n(m,"DIV",{class:!0});var pl=s(qo);T(U8.$$.fragment,pl),JUo=i(pl),ud=n(pl,"P",{});var pae=s(ud);YUo=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nW=n(pae,"A",{href:!0});var pAt=s(nW);KUo=r(pAt,"from_pretrained()"),pAt.forEach(t),ZUo=r(pae," class method or the "),sW=n(pae,"A",{href:!0});var _At=s(sW);eJo=r(_At,"from_config()"),_At.forEach(t),oJo=r(pae,` class
method.`),pae.forEach(t),rJo=i(pl),J8=n(pl,"P",{});var uUe=s(J8);tJo=r(uUe,"This class cannot be instantiated directly using "),q2e=n(uUe,"CODE",{});var bAt=s(q2e);aJo=r(bAt,"__init__()"),bAt.forEach(t),nJo=r(uUe," (throws an error)."),uUe.forEach(t),sJo=i(pl),pt=n(pl,"DIV",{class:!0});var nL=s(pt);T(Y8.$$.fragment,nL),lJo=i(nL),j2e=n(nL,"P",{});var vAt=s(j2e);iJo=r(vAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vAt.forEach(t),dJo=i(nL),pd=n(nL,"P",{});var _ae=s(pd);cJo=r(_ae,`Note:
Loading a model from its configuration file does `),D2e=n(_ae,"STRONG",{});var FAt=s(D2e);mJo=r(FAt,"not"),FAt.forEach(t),fJo=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(_ae,"A",{href:!0});var TAt=s(lW);gJo=r(TAt,"from_pretrained()"),TAt.forEach(t),hJo=r(_ae," to load the model weights."),_ae.forEach(t),uJo=i(nL),T(pF.$$.fragment,nL),nL.forEach(t),pJo=i(pl),to=n(pl,"DIV",{class:!0});var pa=s(to);T(K8.$$.fragment,pa),_Jo=i(pa),G2e=n(pa,"P",{});var MAt=s(G2e);bJo=r(MAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MAt.forEach(t),vJo=i(pa),Wa=n(pa,"P",{});var sL=s(Wa);FJo=r(sL,"The model class to instantiate is selected based on the "),O2e=n(sL,"CODE",{});var EAt=s(O2e);TJo=r(EAt,"model_type"),EAt.forEach(t),MJo=r(sL,` property of the config object (either
passed as an argument or loaded from `),V2e=n(sL,"CODE",{});var CAt=s(V2e);EJo=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),CJo=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(sL,"CODE",{});var wAt=s(X2e);wJo=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),AJo=r(sL,":"),sL.forEach(t),LJo=i(pa),Z=n(pa,"UL",{});var ee=s(Z);_F=n(ee,"LI",{});var rNe=s(_F);z2e=n(rNe,"STRONG",{});var AAt=s(z2e);yJo=r(AAt,"albert"),AAt.forEach(t),xJo=r(rNe," \u2014 "),iW=n(rNe,"A",{href:!0});var LAt=s(iW);$Jo=r(LAt,"AlbertForMultipleChoice"),LAt.forEach(t),kJo=r(rNe," (ALBERT model)"),rNe.forEach(t),SJo=i(ee),bF=n(ee,"LI",{});var tNe=s(bF);W2e=n(tNe,"STRONG",{});var yAt=s(W2e);RJo=r(yAt,"bert"),yAt.forEach(t),PJo=r(tNe," \u2014 "),dW=n(tNe,"A",{href:!0});var xAt=s(dW);BJo=r(xAt,"BertForMultipleChoice"),xAt.forEach(t),IJo=r(tNe," (BERT model)"),tNe.forEach(t),NJo=i(ee),vF=n(ee,"LI",{});var aNe=s(vF);Q2e=n(aNe,"STRONG",{});var $At=s(Q2e);qJo=r($At,"big_bird"),$At.forEach(t),jJo=r(aNe," \u2014 "),cW=n(aNe,"A",{href:!0});var kAt=s(cW);DJo=r(kAt,"BigBirdForMultipleChoice"),kAt.forEach(t),GJo=r(aNe," (BigBird model)"),aNe.forEach(t),OJo=i(ee),FF=n(ee,"LI",{});var nNe=s(FF);H2e=n(nNe,"STRONG",{});var SAt=s(H2e);VJo=r(SAt,"camembert"),SAt.forEach(t),XJo=r(nNe," \u2014 "),mW=n(nNe,"A",{href:!0});var RAt=s(mW);zJo=r(RAt,"CamembertForMultipleChoice"),RAt.forEach(t),WJo=r(nNe," (CamemBERT model)"),nNe.forEach(t),QJo=i(ee),TF=n(ee,"LI",{});var sNe=s(TF);U2e=n(sNe,"STRONG",{});var PAt=s(U2e);HJo=r(PAt,"canine"),PAt.forEach(t),UJo=r(sNe," \u2014 "),fW=n(sNe,"A",{href:!0});var BAt=s(fW);JJo=r(BAt,"CanineForMultipleChoice"),BAt.forEach(t),YJo=r(sNe," (CANINE model)"),sNe.forEach(t),KJo=i(ee),MF=n(ee,"LI",{});var lNe=s(MF);J2e=n(lNe,"STRONG",{});var IAt=s(J2e);ZJo=r(IAt,"convbert"),IAt.forEach(t),eYo=r(lNe," \u2014 "),gW=n(lNe,"A",{href:!0});var NAt=s(gW);oYo=r(NAt,"ConvBertForMultipleChoice"),NAt.forEach(t),rYo=r(lNe," (ConvBERT model)"),lNe.forEach(t),tYo=i(ee),EF=n(ee,"LI",{});var iNe=s(EF);Y2e=n(iNe,"STRONG",{});var qAt=s(Y2e);aYo=r(qAt,"data2vec-text"),qAt.forEach(t),nYo=r(iNe," \u2014 "),hW=n(iNe,"A",{href:!0});var jAt=s(hW);sYo=r(jAt,"Data2VecTextForMultipleChoice"),jAt.forEach(t),lYo=r(iNe," (Data2VecText model)"),iNe.forEach(t),iYo=i(ee),CF=n(ee,"LI",{});var dNe=s(CF);K2e=n(dNe,"STRONG",{});var DAt=s(K2e);dYo=r(DAt,"deberta-v2"),DAt.forEach(t),cYo=r(dNe," \u2014 "),uW=n(dNe,"A",{href:!0});var GAt=s(uW);mYo=r(GAt,"DebertaV2ForMultipleChoice"),GAt.forEach(t),fYo=r(dNe," (DeBERTa-v2 model)"),dNe.forEach(t),gYo=i(ee),wF=n(ee,"LI",{});var cNe=s(wF);Z2e=n(cNe,"STRONG",{});var OAt=s(Z2e);hYo=r(OAt,"distilbert"),OAt.forEach(t),uYo=r(cNe," \u2014 "),pW=n(cNe,"A",{href:!0});var VAt=s(pW);pYo=r(VAt,"DistilBertForMultipleChoice"),VAt.forEach(t),_Yo=r(cNe," (DistilBERT model)"),cNe.forEach(t),bYo=i(ee),AF=n(ee,"LI",{});var mNe=s(AF);ebe=n(mNe,"STRONG",{});var XAt=s(ebe);vYo=r(XAt,"electra"),XAt.forEach(t),FYo=r(mNe," \u2014 "),_W=n(mNe,"A",{href:!0});var zAt=s(_W);TYo=r(zAt,"ElectraForMultipleChoice"),zAt.forEach(t),MYo=r(mNe," (ELECTRA model)"),mNe.forEach(t),EYo=i(ee),LF=n(ee,"LI",{});var fNe=s(LF);obe=n(fNe,"STRONG",{});var WAt=s(obe);CYo=r(WAt,"flaubert"),WAt.forEach(t),wYo=r(fNe," \u2014 "),bW=n(fNe,"A",{href:!0});var QAt=s(bW);AYo=r(QAt,"FlaubertForMultipleChoice"),QAt.forEach(t),LYo=r(fNe," (FlauBERT model)"),fNe.forEach(t),yYo=i(ee),yF=n(ee,"LI",{});var gNe=s(yF);rbe=n(gNe,"STRONG",{});var HAt=s(rbe);xYo=r(HAt,"fnet"),HAt.forEach(t),$Yo=r(gNe," \u2014 "),vW=n(gNe,"A",{href:!0});var UAt=s(vW);kYo=r(UAt,"FNetForMultipleChoice"),UAt.forEach(t),SYo=r(gNe," (FNet model)"),gNe.forEach(t),RYo=i(ee),xF=n(ee,"LI",{});var hNe=s(xF);tbe=n(hNe,"STRONG",{});var JAt=s(tbe);PYo=r(JAt,"funnel"),JAt.forEach(t),BYo=r(hNe," \u2014 "),FW=n(hNe,"A",{href:!0});var YAt=s(FW);IYo=r(YAt,"FunnelForMultipleChoice"),YAt.forEach(t),NYo=r(hNe," (Funnel Transformer model)"),hNe.forEach(t),qYo=i(ee),$F=n(ee,"LI",{});var uNe=s($F);abe=n(uNe,"STRONG",{});var KAt=s(abe);jYo=r(KAt,"ibert"),KAt.forEach(t),DYo=r(uNe," \u2014 "),TW=n(uNe,"A",{href:!0});var ZAt=s(TW);GYo=r(ZAt,"IBertForMultipleChoice"),ZAt.forEach(t),OYo=r(uNe," (I-BERT model)"),uNe.forEach(t),VYo=i(ee),kF=n(ee,"LI",{});var pNe=s(kF);nbe=n(pNe,"STRONG",{});var e7t=s(nbe);XYo=r(e7t,"longformer"),e7t.forEach(t),zYo=r(pNe," \u2014 "),MW=n(pNe,"A",{href:!0});var o7t=s(MW);WYo=r(o7t,"LongformerForMultipleChoice"),o7t.forEach(t),QYo=r(pNe," (Longformer model)"),pNe.forEach(t),HYo=i(ee),SF=n(ee,"LI",{});var _Ne=s(SF);sbe=n(_Ne,"STRONG",{});var r7t=s(sbe);UYo=r(r7t,"luke"),r7t.forEach(t),JYo=r(_Ne," \u2014 "),EW=n(_Ne,"A",{href:!0});var t7t=s(EW);YYo=r(t7t,"LukeForMultipleChoice"),t7t.forEach(t),KYo=r(_Ne," (LUKE model)"),_Ne.forEach(t),ZYo=i(ee),RF=n(ee,"LI",{});var bNe=s(RF);lbe=n(bNe,"STRONG",{});var a7t=s(lbe);eKo=r(a7t,"megatron-bert"),a7t.forEach(t),oKo=r(bNe," \u2014 "),CW=n(bNe,"A",{href:!0});var n7t=s(CW);rKo=r(n7t,"MegatronBertForMultipleChoice"),n7t.forEach(t),tKo=r(bNe," (Megatron-BERT model)"),bNe.forEach(t),aKo=i(ee),PF=n(ee,"LI",{});var vNe=s(PF);ibe=n(vNe,"STRONG",{});var s7t=s(ibe);nKo=r(s7t,"mobilebert"),s7t.forEach(t),sKo=r(vNe," \u2014 "),wW=n(vNe,"A",{href:!0});var l7t=s(wW);lKo=r(l7t,"MobileBertForMultipleChoice"),l7t.forEach(t),iKo=r(vNe," (MobileBERT model)"),vNe.forEach(t),dKo=i(ee),BF=n(ee,"LI",{});var FNe=s(BF);dbe=n(FNe,"STRONG",{});var i7t=s(dbe);cKo=r(i7t,"mpnet"),i7t.forEach(t),mKo=r(FNe," \u2014 "),AW=n(FNe,"A",{href:!0});var d7t=s(AW);fKo=r(d7t,"MPNetForMultipleChoice"),d7t.forEach(t),gKo=r(FNe," (MPNet model)"),FNe.forEach(t),hKo=i(ee),IF=n(ee,"LI",{});var TNe=s(IF);cbe=n(TNe,"STRONG",{});var c7t=s(cbe);uKo=r(c7t,"nezha"),c7t.forEach(t),pKo=r(TNe," \u2014 "),LW=n(TNe,"A",{href:!0});var m7t=s(LW);_Ko=r(m7t,"NezhaForMultipleChoice"),m7t.forEach(t),bKo=r(TNe," (Nezha model)"),TNe.forEach(t),vKo=i(ee),NF=n(ee,"LI",{});var MNe=s(NF);mbe=n(MNe,"STRONG",{});var f7t=s(mbe);FKo=r(f7t,"nystromformer"),f7t.forEach(t),TKo=r(MNe," \u2014 "),yW=n(MNe,"A",{href:!0});var g7t=s(yW);MKo=r(g7t,"NystromformerForMultipleChoice"),g7t.forEach(t),EKo=r(MNe," (Nystr\xF6mformer model)"),MNe.forEach(t),CKo=i(ee),qF=n(ee,"LI",{});var ENe=s(qF);fbe=n(ENe,"STRONG",{});var h7t=s(fbe);wKo=r(h7t,"qdqbert"),h7t.forEach(t),AKo=r(ENe," \u2014 "),xW=n(ENe,"A",{href:!0});var u7t=s(xW);LKo=r(u7t,"QDQBertForMultipleChoice"),u7t.forEach(t),yKo=r(ENe," (QDQBert model)"),ENe.forEach(t),xKo=i(ee),jF=n(ee,"LI",{});var CNe=s(jF);gbe=n(CNe,"STRONG",{});var p7t=s(gbe);$Ko=r(p7t,"rembert"),p7t.forEach(t),kKo=r(CNe," \u2014 "),$W=n(CNe,"A",{href:!0});var _7t=s($W);SKo=r(_7t,"RemBertForMultipleChoice"),_7t.forEach(t),RKo=r(CNe," (RemBERT model)"),CNe.forEach(t),PKo=i(ee),DF=n(ee,"LI",{});var wNe=s(DF);hbe=n(wNe,"STRONG",{});var b7t=s(hbe);BKo=r(b7t,"roberta"),b7t.forEach(t),IKo=r(wNe," \u2014 "),kW=n(wNe,"A",{href:!0});var v7t=s(kW);NKo=r(v7t,"RobertaForMultipleChoice"),v7t.forEach(t),qKo=r(wNe," (RoBERTa model)"),wNe.forEach(t),jKo=i(ee),GF=n(ee,"LI",{});var ANe=s(GF);ube=n(ANe,"STRONG",{});var F7t=s(ube);DKo=r(F7t,"roformer"),F7t.forEach(t),GKo=r(ANe," \u2014 "),SW=n(ANe,"A",{href:!0});var T7t=s(SW);OKo=r(T7t,"RoFormerForMultipleChoice"),T7t.forEach(t),VKo=r(ANe," (RoFormer model)"),ANe.forEach(t),XKo=i(ee),OF=n(ee,"LI",{});var LNe=s(OF);pbe=n(LNe,"STRONG",{});var M7t=s(pbe);zKo=r(M7t,"squeezebert"),M7t.forEach(t),WKo=r(LNe," \u2014 "),RW=n(LNe,"A",{href:!0});var E7t=s(RW);QKo=r(E7t,"SqueezeBertForMultipleChoice"),E7t.forEach(t),HKo=r(LNe," (SqueezeBERT model)"),LNe.forEach(t),UKo=i(ee),VF=n(ee,"LI",{});var yNe=s(VF);_be=n(yNe,"STRONG",{});var C7t=s(_be);JKo=r(C7t,"xlm"),C7t.forEach(t),YKo=r(yNe," \u2014 "),PW=n(yNe,"A",{href:!0});var w7t=s(PW);KKo=r(w7t,"XLMForMultipleChoice"),w7t.forEach(t),ZKo=r(yNe," (XLM model)"),yNe.forEach(t),eZo=i(ee),XF=n(ee,"LI",{});var xNe=s(XF);bbe=n(xNe,"STRONG",{});var A7t=s(bbe);oZo=r(A7t,"xlm-roberta"),A7t.forEach(t),rZo=r(xNe," \u2014 "),BW=n(xNe,"A",{href:!0});var L7t=s(BW);tZo=r(L7t,"XLMRobertaForMultipleChoice"),L7t.forEach(t),aZo=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),nZo=i(ee),zF=n(ee,"LI",{});var $Ne=s(zF);vbe=n($Ne,"STRONG",{});var y7t=s(vbe);sZo=r(y7t,"xlm-roberta-xl"),y7t.forEach(t),lZo=r($Ne," \u2014 "),IW=n($Ne,"A",{href:!0});var x7t=s(IW);iZo=r(x7t,"XLMRobertaXLForMultipleChoice"),x7t.forEach(t),dZo=r($Ne," (XLM-RoBERTa-XL model)"),$Ne.forEach(t),cZo=i(ee),WF=n(ee,"LI",{});var kNe=s(WF);Fbe=n(kNe,"STRONG",{});var $7t=s(Fbe);mZo=r($7t,"xlnet"),$7t.forEach(t),fZo=r(kNe," \u2014 "),NW=n(kNe,"A",{href:!0});var k7t=s(NW);gZo=r(k7t,"XLNetForMultipleChoice"),k7t.forEach(t),hZo=r(kNe," (XLNet model)"),kNe.forEach(t),uZo=i(ee),QF=n(ee,"LI",{});var SNe=s(QF);Tbe=n(SNe,"STRONG",{});var S7t=s(Tbe);pZo=r(S7t,"yoso"),S7t.forEach(t),_Zo=r(SNe," \u2014 "),qW=n(SNe,"A",{href:!0});var R7t=s(qW);bZo=r(R7t,"YosoForMultipleChoice"),R7t.forEach(t),vZo=r(SNe," (YOSO model)"),SNe.forEach(t),ee.forEach(t),FZo=i(pa),HF=n(pa,"P",{});var RNe=s(HF);TZo=r(RNe,"The model is set in evaluation mode by default using "),Mbe=n(RNe,"CODE",{});var P7t=s(Mbe);MZo=r(P7t,"model.eval()"),P7t.forEach(t),EZo=r(RNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=n(RNe,"CODE",{});var B7t=s(Ebe);CZo=r(B7t,"model.train()"),B7t.forEach(t),RNe.forEach(t),wZo=i(pa),T(UF.$$.fragment,pa),pa.forEach(t),pl.forEach(t),iQe=i(m),_d=n(m,"H2",{class:!0});var pUe=s(_d);JF=n(pUe,"A",{id:!0,class:!0,href:!0});var I7t=s(JF);Cbe=n(I7t,"SPAN",{});var N7t=s(Cbe);T(Z8.$$.fragment,N7t),N7t.forEach(t),I7t.forEach(t),AZo=i(pUe),wbe=n(pUe,"SPAN",{});var q7t=s(wbe);LZo=r(q7t,"AutoModelForNextSentencePrediction"),q7t.forEach(t),pUe.forEach(t),dQe=i(m),jo=n(m,"DIV",{class:!0});var _l=s(jo);T(e9.$$.fragment,_l),yZo=i(_l),bd=n(_l,"P",{});var bae=s(bd);xZo=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jW=n(bae,"A",{href:!0});var j7t=s(jW);$Zo=r(j7t,"from_pretrained()"),j7t.forEach(t),kZo=r(bae," class method or the "),DW=n(bae,"A",{href:!0});var D7t=s(DW);SZo=r(D7t,"from_config()"),D7t.forEach(t),RZo=r(bae,` class
method.`),bae.forEach(t),PZo=i(_l),o9=n(_l,"P",{});var _Ue=s(o9);BZo=r(_Ue,"This class cannot be instantiated directly using "),Abe=n(_Ue,"CODE",{});var G7t=s(Abe);IZo=r(G7t,"__init__()"),G7t.forEach(t),NZo=r(_Ue," (throws an error)."),_Ue.forEach(t),qZo=i(_l),_t=n(_l,"DIV",{class:!0});var lL=s(_t);T(r9.$$.fragment,lL),jZo=i(lL),Lbe=n(lL,"P",{});var O7t=s(Lbe);DZo=r(O7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),O7t.forEach(t),GZo=i(lL),vd=n(lL,"P",{});var vae=s(vd);OZo=r(vae,`Note:
Loading a model from its configuration file does `),ybe=n(vae,"STRONG",{});var V7t=s(ybe);VZo=r(V7t,"not"),V7t.forEach(t),XZo=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(vae,"A",{href:!0});var X7t=s(GW);zZo=r(X7t,"from_pretrained()"),X7t.forEach(t),WZo=r(vae," to load the model weights."),vae.forEach(t),QZo=i(lL),T(YF.$$.fragment,lL),lL.forEach(t),HZo=i(_l),ao=n(_l,"DIV",{class:!0});var _a=s(ao);T(t9.$$.fragment,_a),UZo=i(_a),xbe=n(_a,"P",{});var z7t=s(xbe);JZo=r(z7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z7t.forEach(t),YZo=i(_a),Qa=n(_a,"P",{});var iL=s(Qa);KZo=r(iL,"The model class to instantiate is selected based on the "),$be=n(iL,"CODE",{});var W7t=s($be);ZZo=r(W7t,"model_type"),W7t.forEach(t),eer=r(iL,` property of the config object (either
passed as an argument or loaded from `),kbe=n(iL,"CODE",{});var Q7t=s(kbe);oer=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),rer=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(iL,"CODE",{});var H7t=s(Sbe);ter=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),aer=r(iL,":"),iL.forEach(t),ner=i(_a),Do=n(_a,"UL",{});var ba=s(Do);KF=n(ba,"LI",{});var PNe=s(KF);Rbe=n(PNe,"STRONG",{});var U7t=s(Rbe);ser=r(U7t,"bert"),U7t.forEach(t),ler=r(PNe," \u2014 "),OW=n(PNe,"A",{href:!0});var J7t=s(OW);ier=r(J7t,"BertForNextSentencePrediction"),J7t.forEach(t),der=r(PNe," (BERT model)"),PNe.forEach(t),cer=i(ba),ZF=n(ba,"LI",{});var BNe=s(ZF);Pbe=n(BNe,"STRONG",{});var Y7t=s(Pbe);mer=r(Y7t,"fnet"),Y7t.forEach(t),fer=r(BNe," \u2014 "),VW=n(BNe,"A",{href:!0});var K7t=s(VW);ger=r(K7t,"FNetForNextSentencePrediction"),K7t.forEach(t),her=r(BNe," (FNet model)"),BNe.forEach(t),uer=i(ba),eT=n(ba,"LI",{});var INe=s(eT);Bbe=n(INe,"STRONG",{});var Z7t=s(Bbe);per=r(Z7t,"megatron-bert"),Z7t.forEach(t),_er=r(INe," \u2014 "),XW=n(INe,"A",{href:!0});var eLt=s(XW);ber=r(eLt,"MegatronBertForNextSentencePrediction"),eLt.forEach(t),ver=r(INe," (Megatron-BERT model)"),INe.forEach(t),Fer=i(ba),oT=n(ba,"LI",{});var NNe=s(oT);Ibe=n(NNe,"STRONG",{});var oLt=s(Ibe);Ter=r(oLt,"mobilebert"),oLt.forEach(t),Mer=r(NNe," \u2014 "),zW=n(NNe,"A",{href:!0});var rLt=s(zW);Eer=r(rLt,"MobileBertForNextSentencePrediction"),rLt.forEach(t),Cer=r(NNe," (MobileBERT model)"),NNe.forEach(t),wer=i(ba),rT=n(ba,"LI",{});var qNe=s(rT);Nbe=n(qNe,"STRONG",{});var tLt=s(Nbe);Aer=r(tLt,"nezha"),tLt.forEach(t),Ler=r(qNe," \u2014 "),WW=n(qNe,"A",{href:!0});var aLt=s(WW);yer=r(aLt,"NezhaForNextSentencePrediction"),aLt.forEach(t),xer=r(qNe," (Nezha model)"),qNe.forEach(t),$er=i(ba),tT=n(ba,"LI",{});var jNe=s(tT);qbe=n(jNe,"STRONG",{});var nLt=s(qbe);ker=r(nLt,"qdqbert"),nLt.forEach(t),Ser=r(jNe," \u2014 "),QW=n(jNe,"A",{href:!0});var sLt=s(QW);Rer=r(sLt,"QDQBertForNextSentencePrediction"),sLt.forEach(t),Per=r(jNe," (QDQBert model)"),jNe.forEach(t),ba.forEach(t),Ber=i(_a),aT=n(_a,"P",{});var DNe=s(aT);Ier=r(DNe,"The model is set in evaluation mode by default using "),jbe=n(DNe,"CODE",{});var lLt=s(jbe);Ner=r(lLt,"model.eval()"),lLt.forEach(t),qer=r(DNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=n(DNe,"CODE",{});var iLt=s(Dbe);jer=r(iLt,"model.train()"),iLt.forEach(t),DNe.forEach(t),Der=i(_a),T(nT.$$.fragment,_a),_a.forEach(t),_l.forEach(t),cQe=i(m),Fd=n(m,"H2",{class:!0});var bUe=s(Fd);sT=n(bUe,"A",{id:!0,class:!0,href:!0});var dLt=s(sT);Gbe=n(dLt,"SPAN",{});var cLt=s(Gbe);T(a9.$$.fragment,cLt),cLt.forEach(t),dLt.forEach(t),Ger=i(bUe),Obe=n(bUe,"SPAN",{});var mLt=s(Obe);Oer=r(mLt,"AutoModelForTokenClassification"),mLt.forEach(t),bUe.forEach(t),mQe=i(m),Go=n(m,"DIV",{class:!0});var bl=s(Go);T(n9.$$.fragment,bl),Ver=i(bl),Td=n(bl,"P",{});var Fae=s(Td);Xer=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HW=n(Fae,"A",{href:!0});var fLt=s(HW);zer=r(fLt,"from_pretrained()"),fLt.forEach(t),Wer=r(Fae," class method or the "),UW=n(Fae,"A",{href:!0});var gLt=s(UW);Qer=r(gLt,"from_config()"),gLt.forEach(t),Her=r(Fae,` class
method.`),Fae.forEach(t),Uer=i(bl),s9=n(bl,"P",{});var vUe=s(s9);Jer=r(vUe,"This class cannot be instantiated directly using "),Vbe=n(vUe,"CODE",{});var hLt=s(Vbe);Yer=r(hLt,"__init__()"),hLt.forEach(t),Ker=r(vUe," (throws an error)."),vUe.forEach(t),Zer=i(bl),bt=n(bl,"DIV",{class:!0});var dL=s(bt);T(l9.$$.fragment,dL),eor=i(dL),Xbe=n(dL,"P",{});var uLt=s(Xbe);oor=r(uLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uLt.forEach(t),ror=i(dL),Md=n(dL,"P",{});var Tae=s(Md);tor=r(Tae,`Note:
Loading a model from its configuration file does `),zbe=n(Tae,"STRONG",{});var pLt=s(zbe);aor=r(pLt,"not"),pLt.forEach(t),nor=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(Tae,"A",{href:!0});var _Lt=s(JW);sor=r(_Lt,"from_pretrained()"),_Lt.forEach(t),lor=r(Tae," to load the model weights."),Tae.forEach(t),ior=i(dL),T(lT.$$.fragment,dL),dL.forEach(t),dor=i(bl),no=n(bl,"DIV",{class:!0});var va=s(no);T(i9.$$.fragment,va),cor=i(va),Wbe=n(va,"P",{});var bLt=s(Wbe);mor=r(bLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bLt.forEach(t),gor=i(va),Ha=n(va,"P",{});var cL=s(Ha);hor=r(cL,"The model class to instantiate is selected based on the "),Qbe=n(cL,"CODE",{});var vLt=s(Qbe);uor=r(vLt,"model_type"),vLt.forEach(t),por=r(cL,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(cL,"CODE",{});var FLt=s(Hbe);_or=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),bor=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(cL,"CODE",{});var TLt=s(Ube);vor=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),For=r(cL,":"),cL.forEach(t),Tor=i(va),U=n(va,"UL",{});var K=s(U);iT=n(K,"LI",{});var GNe=s(iT);Jbe=n(GNe,"STRONG",{});var MLt=s(Jbe);Mor=r(MLt,"albert"),MLt.forEach(t),Eor=r(GNe," \u2014 "),YW=n(GNe,"A",{href:!0});var ELt=s(YW);Cor=r(ELt,"AlbertForTokenClassification"),ELt.forEach(t),wor=r(GNe," (ALBERT model)"),GNe.forEach(t),Aor=i(K),dT=n(K,"LI",{});var ONe=s(dT);Ybe=n(ONe,"STRONG",{});var CLt=s(Ybe);Lor=r(CLt,"bert"),CLt.forEach(t),yor=r(ONe," \u2014 "),KW=n(ONe,"A",{href:!0});var wLt=s(KW);xor=r(wLt,"BertForTokenClassification"),wLt.forEach(t),$or=r(ONe," (BERT model)"),ONe.forEach(t),kor=i(K),cT=n(K,"LI",{});var VNe=s(cT);Kbe=n(VNe,"STRONG",{});var ALt=s(Kbe);Sor=r(ALt,"big_bird"),ALt.forEach(t),Ror=r(VNe," \u2014 "),ZW=n(VNe,"A",{href:!0});var LLt=s(ZW);Por=r(LLt,"BigBirdForTokenClassification"),LLt.forEach(t),Bor=r(VNe," (BigBird model)"),VNe.forEach(t),Ior=i(K),mT=n(K,"LI",{});var XNe=s(mT);Zbe=n(XNe,"STRONG",{});var yLt=s(Zbe);Nor=r(yLt,"bloom"),yLt.forEach(t),qor=r(XNe," \u2014 "),eQ=n(XNe,"A",{href:!0});var xLt=s(eQ);jor=r(xLt,"BloomForTokenClassification"),xLt.forEach(t),Dor=r(XNe," (BLOOM model)"),XNe.forEach(t),Gor=i(K),fT=n(K,"LI",{});var zNe=s(fT);eve=n(zNe,"STRONG",{});var $Lt=s(eve);Oor=r($Lt,"camembert"),$Lt.forEach(t),Vor=r(zNe," \u2014 "),oQ=n(zNe,"A",{href:!0});var kLt=s(oQ);Xor=r(kLt,"CamembertForTokenClassification"),kLt.forEach(t),zor=r(zNe," (CamemBERT model)"),zNe.forEach(t),Wor=i(K),gT=n(K,"LI",{});var WNe=s(gT);ove=n(WNe,"STRONG",{});var SLt=s(ove);Qor=r(SLt,"canine"),SLt.forEach(t),Hor=r(WNe," \u2014 "),rQ=n(WNe,"A",{href:!0});var RLt=s(rQ);Uor=r(RLt,"CanineForTokenClassification"),RLt.forEach(t),Jor=r(WNe," (CANINE model)"),WNe.forEach(t),Yor=i(K),hT=n(K,"LI",{});var QNe=s(hT);rve=n(QNe,"STRONG",{});var PLt=s(rve);Kor=r(PLt,"convbert"),PLt.forEach(t),Zor=r(QNe," \u2014 "),tQ=n(QNe,"A",{href:!0});var BLt=s(tQ);err=r(BLt,"ConvBertForTokenClassification"),BLt.forEach(t),orr=r(QNe," (ConvBERT model)"),QNe.forEach(t),rrr=i(K),uT=n(K,"LI",{});var HNe=s(uT);tve=n(HNe,"STRONG",{});var ILt=s(tve);trr=r(ILt,"data2vec-text"),ILt.forEach(t),arr=r(HNe," \u2014 "),aQ=n(HNe,"A",{href:!0});var NLt=s(aQ);nrr=r(NLt,"Data2VecTextForTokenClassification"),NLt.forEach(t),srr=r(HNe," (Data2VecText model)"),HNe.forEach(t),lrr=i(K),pT=n(K,"LI",{});var UNe=s(pT);ave=n(UNe,"STRONG",{});var qLt=s(ave);irr=r(qLt,"deberta"),qLt.forEach(t),drr=r(UNe," \u2014 "),nQ=n(UNe,"A",{href:!0});var jLt=s(nQ);crr=r(jLt,"DebertaForTokenClassification"),jLt.forEach(t),mrr=r(UNe," (DeBERTa model)"),UNe.forEach(t),frr=i(K),_T=n(K,"LI",{});var JNe=s(_T);nve=n(JNe,"STRONG",{});var DLt=s(nve);grr=r(DLt,"deberta-v2"),DLt.forEach(t),hrr=r(JNe," \u2014 "),sQ=n(JNe,"A",{href:!0});var GLt=s(sQ);urr=r(GLt,"DebertaV2ForTokenClassification"),GLt.forEach(t),prr=r(JNe," (DeBERTa-v2 model)"),JNe.forEach(t),_rr=i(K),bT=n(K,"LI",{});var YNe=s(bT);sve=n(YNe,"STRONG",{});var OLt=s(sve);brr=r(OLt,"distilbert"),OLt.forEach(t),vrr=r(YNe," \u2014 "),lQ=n(YNe,"A",{href:!0});var VLt=s(lQ);Frr=r(VLt,"DistilBertForTokenClassification"),VLt.forEach(t),Trr=r(YNe," (DistilBERT model)"),YNe.forEach(t),Mrr=i(K),vT=n(K,"LI",{});var KNe=s(vT);lve=n(KNe,"STRONG",{});var XLt=s(lve);Err=r(XLt,"electra"),XLt.forEach(t),Crr=r(KNe," \u2014 "),iQ=n(KNe,"A",{href:!0});var zLt=s(iQ);wrr=r(zLt,"ElectraForTokenClassification"),zLt.forEach(t),Arr=r(KNe," (ELECTRA model)"),KNe.forEach(t),Lrr=i(K),FT=n(K,"LI",{});var ZNe=s(FT);ive=n(ZNe,"STRONG",{});var WLt=s(ive);yrr=r(WLt,"flaubert"),WLt.forEach(t),xrr=r(ZNe," \u2014 "),dQ=n(ZNe,"A",{href:!0});var QLt=s(dQ);$rr=r(QLt,"FlaubertForTokenClassification"),QLt.forEach(t),krr=r(ZNe," (FlauBERT model)"),ZNe.forEach(t),Srr=i(K),TT=n(K,"LI",{});var eqe=s(TT);dve=n(eqe,"STRONG",{});var HLt=s(dve);Rrr=r(HLt,"fnet"),HLt.forEach(t),Prr=r(eqe," \u2014 "),cQ=n(eqe,"A",{href:!0});var ULt=s(cQ);Brr=r(ULt,"FNetForTokenClassification"),ULt.forEach(t),Irr=r(eqe," (FNet model)"),eqe.forEach(t),Nrr=i(K),MT=n(K,"LI",{});var oqe=s(MT);cve=n(oqe,"STRONG",{});var JLt=s(cve);qrr=r(JLt,"funnel"),JLt.forEach(t),jrr=r(oqe," \u2014 "),mQ=n(oqe,"A",{href:!0});var YLt=s(mQ);Drr=r(YLt,"FunnelForTokenClassification"),YLt.forEach(t),Grr=r(oqe," (Funnel Transformer model)"),oqe.forEach(t),Orr=i(K),ET=n(K,"LI",{});var rqe=s(ET);mve=n(rqe,"STRONG",{});var KLt=s(mve);Vrr=r(KLt,"gpt2"),KLt.forEach(t),Xrr=r(rqe," \u2014 "),fQ=n(rqe,"A",{href:!0});var ZLt=s(fQ);zrr=r(ZLt,"GPT2ForTokenClassification"),ZLt.forEach(t),Wrr=r(rqe," (OpenAI GPT-2 model)"),rqe.forEach(t),Qrr=i(K),CT=n(K,"LI",{});var tqe=s(CT);fve=n(tqe,"STRONG",{});var eyt=s(fve);Hrr=r(eyt,"ibert"),eyt.forEach(t),Urr=r(tqe," \u2014 "),gQ=n(tqe,"A",{href:!0});var oyt=s(gQ);Jrr=r(oyt,"IBertForTokenClassification"),oyt.forEach(t),Yrr=r(tqe," (I-BERT model)"),tqe.forEach(t),Krr=i(K),wT=n(K,"LI",{});var aqe=s(wT);gve=n(aqe,"STRONG",{});var ryt=s(gve);Zrr=r(ryt,"layoutlm"),ryt.forEach(t),etr=r(aqe," \u2014 "),hQ=n(aqe,"A",{href:!0});var tyt=s(hQ);otr=r(tyt,"LayoutLMForTokenClassification"),tyt.forEach(t),rtr=r(aqe," (LayoutLM model)"),aqe.forEach(t),ttr=i(K),AT=n(K,"LI",{});var nqe=s(AT);hve=n(nqe,"STRONG",{});var ayt=s(hve);atr=r(ayt,"layoutlmv2"),ayt.forEach(t),ntr=r(nqe," \u2014 "),uQ=n(nqe,"A",{href:!0});var nyt=s(uQ);str=r(nyt,"LayoutLMv2ForTokenClassification"),nyt.forEach(t),ltr=r(nqe," (LayoutLMv2 model)"),nqe.forEach(t),itr=i(K),LT=n(K,"LI",{});var sqe=s(LT);uve=n(sqe,"STRONG",{});var syt=s(uve);dtr=r(syt,"layoutlmv3"),syt.forEach(t),ctr=r(sqe," \u2014 "),pQ=n(sqe,"A",{href:!0});var lyt=s(pQ);mtr=r(lyt,"LayoutLMv3ForTokenClassification"),lyt.forEach(t),ftr=r(sqe," (LayoutLMv3 model)"),sqe.forEach(t),gtr=i(K),yT=n(K,"LI",{});var lqe=s(yT);pve=n(lqe,"STRONG",{});var iyt=s(pve);htr=r(iyt,"longformer"),iyt.forEach(t),utr=r(lqe," \u2014 "),_Q=n(lqe,"A",{href:!0});var dyt=s(_Q);ptr=r(dyt,"LongformerForTokenClassification"),dyt.forEach(t),_tr=r(lqe," (Longformer model)"),lqe.forEach(t),btr=i(K),xT=n(K,"LI",{});var iqe=s(xT);_ve=n(iqe,"STRONG",{});var cyt=s(_ve);vtr=r(cyt,"luke"),cyt.forEach(t),Ftr=r(iqe," \u2014 "),bQ=n(iqe,"A",{href:!0});var myt=s(bQ);Ttr=r(myt,"LukeForTokenClassification"),myt.forEach(t),Mtr=r(iqe," (LUKE model)"),iqe.forEach(t),Etr=i(K),$T=n(K,"LI",{});var dqe=s($T);bve=n(dqe,"STRONG",{});var fyt=s(bve);Ctr=r(fyt,"megatron-bert"),fyt.forEach(t),wtr=r(dqe," \u2014 "),vQ=n(dqe,"A",{href:!0});var gyt=s(vQ);Atr=r(gyt,"MegatronBertForTokenClassification"),gyt.forEach(t),Ltr=r(dqe," (Megatron-BERT model)"),dqe.forEach(t),ytr=i(K),kT=n(K,"LI",{});var cqe=s(kT);vve=n(cqe,"STRONG",{});var hyt=s(vve);xtr=r(hyt,"mobilebert"),hyt.forEach(t),$tr=r(cqe," \u2014 "),FQ=n(cqe,"A",{href:!0});var uyt=s(FQ);ktr=r(uyt,"MobileBertForTokenClassification"),uyt.forEach(t),Str=r(cqe," (MobileBERT model)"),cqe.forEach(t),Rtr=i(K),ST=n(K,"LI",{});var mqe=s(ST);Fve=n(mqe,"STRONG",{});var pyt=s(Fve);Ptr=r(pyt,"mpnet"),pyt.forEach(t),Btr=r(mqe," \u2014 "),TQ=n(mqe,"A",{href:!0});var _yt=s(TQ);Itr=r(_yt,"MPNetForTokenClassification"),_yt.forEach(t),Ntr=r(mqe," (MPNet model)"),mqe.forEach(t),qtr=i(K),RT=n(K,"LI",{});var fqe=s(RT);Tve=n(fqe,"STRONG",{});var byt=s(Tve);jtr=r(byt,"nezha"),byt.forEach(t),Dtr=r(fqe," \u2014 "),MQ=n(fqe,"A",{href:!0});var vyt=s(MQ);Gtr=r(vyt,"NezhaForTokenClassification"),vyt.forEach(t),Otr=r(fqe," (Nezha model)"),fqe.forEach(t),Vtr=i(K),PT=n(K,"LI",{});var gqe=s(PT);Mve=n(gqe,"STRONG",{});var Fyt=s(Mve);Xtr=r(Fyt,"nystromformer"),Fyt.forEach(t),ztr=r(gqe," \u2014 "),EQ=n(gqe,"A",{href:!0});var Tyt=s(EQ);Wtr=r(Tyt,"NystromformerForTokenClassification"),Tyt.forEach(t),Qtr=r(gqe," (Nystr\xF6mformer model)"),gqe.forEach(t),Htr=i(K),BT=n(K,"LI",{});var hqe=s(BT);Eve=n(hqe,"STRONG",{});var Myt=s(Eve);Utr=r(Myt,"qdqbert"),Myt.forEach(t),Jtr=r(hqe," \u2014 "),CQ=n(hqe,"A",{href:!0});var Eyt=s(CQ);Ytr=r(Eyt,"QDQBertForTokenClassification"),Eyt.forEach(t),Ktr=r(hqe," (QDQBert model)"),hqe.forEach(t),Ztr=i(K),IT=n(K,"LI",{});var uqe=s(IT);Cve=n(uqe,"STRONG",{});var Cyt=s(Cve);ear=r(Cyt,"rembert"),Cyt.forEach(t),oar=r(uqe," \u2014 "),wQ=n(uqe,"A",{href:!0});var wyt=s(wQ);rar=r(wyt,"RemBertForTokenClassification"),wyt.forEach(t),tar=r(uqe," (RemBERT model)"),uqe.forEach(t),aar=i(K),NT=n(K,"LI",{});var pqe=s(NT);wve=n(pqe,"STRONG",{});var Ayt=s(wve);nar=r(Ayt,"roberta"),Ayt.forEach(t),sar=r(pqe," \u2014 "),AQ=n(pqe,"A",{href:!0});var Lyt=s(AQ);lar=r(Lyt,"RobertaForTokenClassification"),Lyt.forEach(t),iar=r(pqe," (RoBERTa model)"),pqe.forEach(t),dar=i(K),qT=n(K,"LI",{});var _qe=s(qT);Ave=n(_qe,"STRONG",{});var yyt=s(Ave);car=r(yyt,"roformer"),yyt.forEach(t),mar=r(_qe," \u2014 "),LQ=n(_qe,"A",{href:!0});var xyt=s(LQ);far=r(xyt,"RoFormerForTokenClassification"),xyt.forEach(t),gar=r(_qe," (RoFormer model)"),_qe.forEach(t),har=i(K),jT=n(K,"LI",{});var bqe=s(jT);Lve=n(bqe,"STRONG",{});var $yt=s(Lve);uar=r($yt,"squeezebert"),$yt.forEach(t),par=r(bqe," \u2014 "),yQ=n(bqe,"A",{href:!0});var kyt=s(yQ);_ar=r(kyt,"SqueezeBertForTokenClassification"),kyt.forEach(t),bar=r(bqe," (SqueezeBERT model)"),bqe.forEach(t),Far=i(K),DT=n(K,"LI",{});var vqe=s(DT);yve=n(vqe,"STRONG",{});var Syt=s(yve);Tar=r(Syt,"xlm"),Syt.forEach(t),Mar=r(vqe," \u2014 "),xQ=n(vqe,"A",{href:!0});var Ryt=s(xQ);Ear=r(Ryt,"XLMForTokenClassification"),Ryt.forEach(t),Car=r(vqe," (XLM model)"),vqe.forEach(t),war=i(K),GT=n(K,"LI",{});var Fqe=s(GT);xve=n(Fqe,"STRONG",{});var Pyt=s(xve);Aar=r(Pyt,"xlm-roberta"),Pyt.forEach(t),Lar=r(Fqe," \u2014 "),$Q=n(Fqe,"A",{href:!0});var Byt=s($Q);yar=r(Byt,"XLMRobertaForTokenClassification"),Byt.forEach(t),xar=r(Fqe," (XLM-RoBERTa model)"),Fqe.forEach(t),$ar=i(K),OT=n(K,"LI",{});var Tqe=s(OT);$ve=n(Tqe,"STRONG",{});var Iyt=s($ve);kar=r(Iyt,"xlm-roberta-xl"),Iyt.forEach(t),Sar=r(Tqe," \u2014 "),kQ=n(Tqe,"A",{href:!0});var Nyt=s(kQ);Rar=r(Nyt,"XLMRobertaXLForTokenClassification"),Nyt.forEach(t),Par=r(Tqe," (XLM-RoBERTa-XL model)"),Tqe.forEach(t),Bar=i(K),VT=n(K,"LI",{});var Mqe=s(VT);kve=n(Mqe,"STRONG",{});var qyt=s(kve);Iar=r(qyt,"xlnet"),qyt.forEach(t),Nar=r(Mqe," \u2014 "),SQ=n(Mqe,"A",{href:!0});var jyt=s(SQ);qar=r(jyt,"XLNetForTokenClassification"),jyt.forEach(t),jar=r(Mqe," (XLNet model)"),Mqe.forEach(t),Dar=i(K),XT=n(K,"LI",{});var Eqe=s(XT);Sve=n(Eqe,"STRONG",{});var Dyt=s(Sve);Gar=r(Dyt,"yoso"),Dyt.forEach(t),Oar=r(Eqe," \u2014 "),RQ=n(Eqe,"A",{href:!0});var Gyt=s(RQ);Var=r(Gyt,"YosoForTokenClassification"),Gyt.forEach(t),Xar=r(Eqe," (YOSO model)"),Eqe.forEach(t),K.forEach(t),zar=i(va),zT=n(va,"P",{});var Cqe=s(zT);War=r(Cqe,"The model is set in evaluation mode by default using "),Rve=n(Cqe,"CODE",{});var Oyt=s(Rve);Qar=r(Oyt,"model.eval()"),Oyt.forEach(t),Har=r(Cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=n(Cqe,"CODE",{});var Vyt=s(Pve);Uar=r(Vyt,"model.train()"),Vyt.forEach(t),Cqe.forEach(t),Jar=i(va),T(WT.$$.fragment,va),va.forEach(t),bl.forEach(t),fQe=i(m),Ed=n(m,"H2",{class:!0});var FUe=s(Ed);QT=n(FUe,"A",{id:!0,class:!0,href:!0});var Xyt=s(QT);Bve=n(Xyt,"SPAN",{});var zyt=s(Bve);T(d9.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),Yar=i(FUe),Ive=n(FUe,"SPAN",{});var Wyt=s(Ive);Kar=r(Wyt,"AutoModelForQuestionAnswering"),Wyt.forEach(t),FUe.forEach(t),gQe=i(m),Oo=n(m,"DIV",{class:!0});var vl=s(Oo);T(c9.$$.fragment,vl),Zar=i(vl),Cd=n(vl,"P",{});var Mae=s(Cd);enr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PQ=n(Mae,"A",{href:!0});var Qyt=s(PQ);onr=r(Qyt,"from_pretrained()"),Qyt.forEach(t),rnr=r(Mae," class method or the "),BQ=n(Mae,"A",{href:!0});var Hyt=s(BQ);tnr=r(Hyt,"from_config()"),Hyt.forEach(t),anr=r(Mae,` class
method.`),Mae.forEach(t),nnr=i(vl),m9=n(vl,"P",{});var TUe=s(m9);snr=r(TUe,"This class cannot be instantiated directly using "),Nve=n(TUe,"CODE",{});var Uyt=s(Nve);lnr=r(Uyt,"__init__()"),Uyt.forEach(t),inr=r(TUe," (throws an error)."),TUe.forEach(t),dnr=i(vl),vt=n(vl,"DIV",{class:!0});var mL=s(vt);T(f9.$$.fragment,mL),cnr=i(mL),qve=n(mL,"P",{});var Jyt=s(qve);mnr=r(Jyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jyt.forEach(t),fnr=i(mL),wd=n(mL,"P",{});var Eae=s(wd);gnr=r(Eae,`Note:
Loading a model from its configuration file does `),jve=n(Eae,"STRONG",{});var Yyt=s(jve);hnr=r(Yyt,"not"),Yyt.forEach(t),unr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Eae,"A",{href:!0});var Kyt=s(IQ);pnr=r(Kyt,"from_pretrained()"),Kyt.forEach(t),_nr=r(Eae," to load the model weights."),Eae.forEach(t),bnr=i(mL),T(HT.$$.fragment,mL),mL.forEach(t),vnr=i(vl),so=n(vl,"DIV",{class:!0});var Fa=s(so);T(g9.$$.fragment,Fa),Fnr=i(Fa),Dve=n(Fa,"P",{});var Zyt=s(Dve);Tnr=r(Zyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zyt.forEach(t),Mnr=i(Fa),Ua=n(Fa,"P",{});var fL=s(Ua);Enr=r(fL,"The model class to instantiate is selected based on the "),Gve=n(fL,"CODE",{});var e8t=s(Gve);Cnr=r(e8t,"model_type"),e8t.forEach(t),wnr=r(fL,` property of the config object (either
passed as an argument or loaded from `),Ove=n(fL,"CODE",{});var o8t=s(Ove);Anr=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),Lnr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(fL,"CODE",{});var r8t=s(Vve);ynr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),xnr=r(fL,":"),fL.forEach(t),$nr=i(Fa),V=n(Fa,"UL",{});var X=s(V);UT=n(X,"LI",{});var wqe=s(UT);Xve=n(wqe,"STRONG",{});var t8t=s(Xve);knr=r(t8t,"albert"),t8t.forEach(t),Snr=r(wqe," \u2014 "),NQ=n(wqe,"A",{href:!0});var a8t=s(NQ);Rnr=r(a8t,"AlbertForQuestionAnswering"),a8t.forEach(t),Pnr=r(wqe," (ALBERT model)"),wqe.forEach(t),Bnr=i(X),JT=n(X,"LI",{});var Aqe=s(JT);zve=n(Aqe,"STRONG",{});var n8t=s(zve);Inr=r(n8t,"bart"),n8t.forEach(t),Nnr=r(Aqe," \u2014 "),qQ=n(Aqe,"A",{href:!0});var s8t=s(qQ);qnr=r(s8t,"BartForQuestionAnswering"),s8t.forEach(t),jnr=r(Aqe," (BART model)"),Aqe.forEach(t),Dnr=i(X),YT=n(X,"LI",{});var Lqe=s(YT);Wve=n(Lqe,"STRONG",{});var l8t=s(Wve);Gnr=r(l8t,"bert"),l8t.forEach(t),Onr=r(Lqe," \u2014 "),jQ=n(Lqe,"A",{href:!0});var i8t=s(jQ);Vnr=r(i8t,"BertForQuestionAnswering"),i8t.forEach(t),Xnr=r(Lqe," (BERT model)"),Lqe.forEach(t),znr=i(X),KT=n(X,"LI",{});var yqe=s(KT);Qve=n(yqe,"STRONG",{});var d8t=s(Qve);Wnr=r(d8t,"big_bird"),d8t.forEach(t),Qnr=r(yqe," \u2014 "),DQ=n(yqe,"A",{href:!0});var c8t=s(DQ);Hnr=r(c8t,"BigBirdForQuestionAnswering"),c8t.forEach(t),Unr=r(yqe," (BigBird model)"),yqe.forEach(t),Jnr=i(X),ZT=n(X,"LI",{});var xqe=s(ZT);Hve=n(xqe,"STRONG",{});var m8t=s(Hve);Ynr=r(m8t,"bigbird_pegasus"),m8t.forEach(t),Knr=r(xqe," \u2014 "),GQ=n(xqe,"A",{href:!0});var f8t=s(GQ);Znr=r(f8t,"BigBirdPegasusForQuestionAnswering"),f8t.forEach(t),esr=r(xqe," (BigBird-Pegasus model)"),xqe.forEach(t),osr=i(X),eM=n(X,"LI",{});var $qe=s(eM);Uve=n($qe,"STRONG",{});var g8t=s(Uve);rsr=r(g8t,"camembert"),g8t.forEach(t),tsr=r($qe," \u2014 "),OQ=n($qe,"A",{href:!0});var h8t=s(OQ);asr=r(h8t,"CamembertForQuestionAnswering"),h8t.forEach(t),nsr=r($qe," (CamemBERT model)"),$qe.forEach(t),ssr=i(X),oM=n(X,"LI",{});var kqe=s(oM);Jve=n(kqe,"STRONG",{});var u8t=s(Jve);lsr=r(u8t,"canine"),u8t.forEach(t),isr=r(kqe," \u2014 "),VQ=n(kqe,"A",{href:!0});var p8t=s(VQ);dsr=r(p8t,"CanineForQuestionAnswering"),p8t.forEach(t),csr=r(kqe," (CANINE model)"),kqe.forEach(t),msr=i(X),rM=n(X,"LI",{});var Sqe=s(rM);Yve=n(Sqe,"STRONG",{});var _8t=s(Yve);fsr=r(_8t,"convbert"),_8t.forEach(t),gsr=r(Sqe," \u2014 "),XQ=n(Sqe,"A",{href:!0});var b8t=s(XQ);hsr=r(b8t,"ConvBertForQuestionAnswering"),b8t.forEach(t),usr=r(Sqe," (ConvBERT model)"),Sqe.forEach(t),psr=i(X),tM=n(X,"LI",{});var Rqe=s(tM);Kve=n(Rqe,"STRONG",{});var v8t=s(Kve);_sr=r(v8t,"data2vec-text"),v8t.forEach(t),bsr=r(Rqe," \u2014 "),zQ=n(Rqe,"A",{href:!0});var F8t=s(zQ);vsr=r(F8t,"Data2VecTextForQuestionAnswering"),F8t.forEach(t),Fsr=r(Rqe," (Data2VecText model)"),Rqe.forEach(t),Tsr=i(X),aM=n(X,"LI",{});var Pqe=s(aM);Zve=n(Pqe,"STRONG",{});var T8t=s(Zve);Msr=r(T8t,"deberta"),T8t.forEach(t),Esr=r(Pqe," \u2014 "),WQ=n(Pqe,"A",{href:!0});var M8t=s(WQ);Csr=r(M8t,"DebertaForQuestionAnswering"),M8t.forEach(t),wsr=r(Pqe," (DeBERTa model)"),Pqe.forEach(t),Asr=i(X),nM=n(X,"LI",{});var Bqe=s(nM);e1e=n(Bqe,"STRONG",{});var E8t=s(e1e);Lsr=r(E8t,"deberta-v2"),E8t.forEach(t),ysr=r(Bqe," \u2014 "),QQ=n(Bqe,"A",{href:!0});var C8t=s(QQ);xsr=r(C8t,"DebertaV2ForQuestionAnswering"),C8t.forEach(t),$sr=r(Bqe," (DeBERTa-v2 model)"),Bqe.forEach(t),ksr=i(X),sM=n(X,"LI",{});var Iqe=s(sM);o1e=n(Iqe,"STRONG",{});var w8t=s(o1e);Ssr=r(w8t,"distilbert"),w8t.forEach(t),Rsr=r(Iqe," \u2014 "),HQ=n(Iqe,"A",{href:!0});var A8t=s(HQ);Psr=r(A8t,"DistilBertForQuestionAnswering"),A8t.forEach(t),Bsr=r(Iqe," (DistilBERT model)"),Iqe.forEach(t),Isr=i(X),lM=n(X,"LI",{});var Nqe=s(lM);r1e=n(Nqe,"STRONG",{});var L8t=s(r1e);Nsr=r(L8t,"electra"),L8t.forEach(t),qsr=r(Nqe," \u2014 "),UQ=n(Nqe,"A",{href:!0});var y8t=s(UQ);jsr=r(y8t,"ElectraForQuestionAnswering"),y8t.forEach(t),Dsr=r(Nqe," (ELECTRA model)"),Nqe.forEach(t),Gsr=i(X),iM=n(X,"LI",{});var qqe=s(iM);t1e=n(qqe,"STRONG",{});var x8t=s(t1e);Osr=r(x8t,"flaubert"),x8t.forEach(t),Vsr=r(qqe," \u2014 "),JQ=n(qqe,"A",{href:!0});var $8t=s(JQ);Xsr=r($8t,"FlaubertForQuestionAnsweringSimple"),$8t.forEach(t),zsr=r(qqe," (FlauBERT model)"),qqe.forEach(t),Wsr=i(X),dM=n(X,"LI",{});var jqe=s(dM);a1e=n(jqe,"STRONG",{});var k8t=s(a1e);Qsr=r(k8t,"fnet"),k8t.forEach(t),Hsr=r(jqe," \u2014 "),YQ=n(jqe,"A",{href:!0});var S8t=s(YQ);Usr=r(S8t,"FNetForQuestionAnswering"),S8t.forEach(t),Jsr=r(jqe," (FNet model)"),jqe.forEach(t),Ysr=i(X),cM=n(X,"LI",{});var Dqe=s(cM);n1e=n(Dqe,"STRONG",{});var R8t=s(n1e);Ksr=r(R8t,"funnel"),R8t.forEach(t),Zsr=r(Dqe," \u2014 "),KQ=n(Dqe,"A",{href:!0});var P8t=s(KQ);elr=r(P8t,"FunnelForQuestionAnswering"),P8t.forEach(t),olr=r(Dqe," (Funnel Transformer model)"),Dqe.forEach(t),rlr=i(X),mM=n(X,"LI",{});var Gqe=s(mM);s1e=n(Gqe,"STRONG",{});var B8t=s(s1e);tlr=r(B8t,"gptj"),B8t.forEach(t),alr=r(Gqe," \u2014 "),ZQ=n(Gqe,"A",{href:!0});var I8t=s(ZQ);nlr=r(I8t,"GPTJForQuestionAnswering"),I8t.forEach(t),slr=r(Gqe," (GPT-J model)"),Gqe.forEach(t),llr=i(X),fM=n(X,"LI",{});var Oqe=s(fM);l1e=n(Oqe,"STRONG",{});var N8t=s(l1e);ilr=r(N8t,"ibert"),N8t.forEach(t),dlr=r(Oqe," \u2014 "),eH=n(Oqe,"A",{href:!0});var q8t=s(eH);clr=r(q8t,"IBertForQuestionAnswering"),q8t.forEach(t),mlr=r(Oqe," (I-BERT model)"),Oqe.forEach(t),flr=i(X),gM=n(X,"LI",{});var Vqe=s(gM);i1e=n(Vqe,"STRONG",{});var j8t=s(i1e);glr=r(j8t,"layoutlmv2"),j8t.forEach(t),hlr=r(Vqe," \u2014 "),oH=n(Vqe,"A",{href:!0});var D8t=s(oH);ulr=r(D8t,"LayoutLMv2ForQuestionAnswering"),D8t.forEach(t),plr=r(Vqe," (LayoutLMv2 model)"),Vqe.forEach(t),_lr=i(X),hM=n(X,"LI",{});var Xqe=s(hM);d1e=n(Xqe,"STRONG",{});var G8t=s(d1e);blr=r(G8t,"layoutlmv3"),G8t.forEach(t),vlr=r(Xqe," \u2014 "),rH=n(Xqe,"A",{href:!0});var O8t=s(rH);Flr=r(O8t,"LayoutLMv3ForQuestionAnswering"),O8t.forEach(t),Tlr=r(Xqe," (LayoutLMv3 model)"),Xqe.forEach(t),Mlr=i(X),uM=n(X,"LI",{});var zqe=s(uM);c1e=n(zqe,"STRONG",{});var V8t=s(c1e);Elr=r(V8t,"led"),V8t.forEach(t),Clr=r(zqe," \u2014 "),tH=n(zqe,"A",{href:!0});var X8t=s(tH);wlr=r(X8t,"LEDForQuestionAnswering"),X8t.forEach(t),Alr=r(zqe," (LED model)"),zqe.forEach(t),Llr=i(X),pM=n(X,"LI",{});var Wqe=s(pM);m1e=n(Wqe,"STRONG",{});var z8t=s(m1e);ylr=r(z8t,"longformer"),z8t.forEach(t),xlr=r(Wqe," \u2014 "),aH=n(Wqe,"A",{href:!0});var W8t=s(aH);$lr=r(W8t,"LongformerForQuestionAnswering"),W8t.forEach(t),klr=r(Wqe," (Longformer model)"),Wqe.forEach(t),Slr=i(X),_M=n(X,"LI",{});var Qqe=s(_M);f1e=n(Qqe,"STRONG",{});var Q8t=s(f1e);Rlr=r(Q8t,"luke"),Q8t.forEach(t),Plr=r(Qqe," \u2014 "),nH=n(Qqe,"A",{href:!0});var H8t=s(nH);Blr=r(H8t,"LukeForQuestionAnswering"),H8t.forEach(t),Ilr=r(Qqe," (LUKE model)"),Qqe.forEach(t),Nlr=i(X),bM=n(X,"LI",{});var Hqe=s(bM);g1e=n(Hqe,"STRONG",{});var U8t=s(g1e);qlr=r(U8t,"lxmert"),U8t.forEach(t),jlr=r(Hqe," \u2014 "),sH=n(Hqe,"A",{href:!0});var J8t=s(sH);Dlr=r(J8t,"LxmertForQuestionAnswering"),J8t.forEach(t),Glr=r(Hqe," (LXMERT model)"),Hqe.forEach(t),Olr=i(X),vM=n(X,"LI",{});var Uqe=s(vM);h1e=n(Uqe,"STRONG",{});var Y8t=s(h1e);Vlr=r(Y8t,"mbart"),Y8t.forEach(t),Xlr=r(Uqe," \u2014 "),lH=n(Uqe,"A",{href:!0});var K8t=s(lH);zlr=r(K8t,"MBartForQuestionAnswering"),K8t.forEach(t),Wlr=r(Uqe," (mBART model)"),Uqe.forEach(t),Qlr=i(X),FM=n(X,"LI",{});var Jqe=s(FM);u1e=n(Jqe,"STRONG",{});var Z8t=s(u1e);Hlr=r(Z8t,"megatron-bert"),Z8t.forEach(t),Ulr=r(Jqe," \u2014 "),iH=n(Jqe,"A",{href:!0});var e9t=s(iH);Jlr=r(e9t,"MegatronBertForQuestionAnswering"),e9t.forEach(t),Ylr=r(Jqe," (Megatron-BERT model)"),Jqe.forEach(t),Klr=i(X),TM=n(X,"LI",{});var Yqe=s(TM);p1e=n(Yqe,"STRONG",{});var o9t=s(p1e);Zlr=r(o9t,"mobilebert"),o9t.forEach(t),eir=r(Yqe," \u2014 "),dH=n(Yqe,"A",{href:!0});var r9t=s(dH);oir=r(r9t,"MobileBertForQuestionAnswering"),r9t.forEach(t),rir=r(Yqe," (MobileBERT model)"),Yqe.forEach(t),tir=i(X),MM=n(X,"LI",{});var Kqe=s(MM);_1e=n(Kqe,"STRONG",{});var t9t=s(_1e);air=r(t9t,"mpnet"),t9t.forEach(t),nir=r(Kqe," \u2014 "),cH=n(Kqe,"A",{href:!0});var a9t=s(cH);sir=r(a9t,"MPNetForQuestionAnswering"),a9t.forEach(t),lir=r(Kqe," (MPNet model)"),Kqe.forEach(t),iir=i(X),EM=n(X,"LI",{});var Zqe=s(EM);b1e=n(Zqe,"STRONG",{});var n9t=s(b1e);dir=r(n9t,"mvp"),n9t.forEach(t),cir=r(Zqe," \u2014 "),mH=n(Zqe,"A",{href:!0});var s9t=s(mH);mir=r(s9t,"MvpForQuestionAnswering"),s9t.forEach(t),fir=r(Zqe," (MVP model)"),Zqe.forEach(t),gir=i(X),CM=n(X,"LI",{});var eje=s(CM);v1e=n(eje,"STRONG",{});var l9t=s(v1e);hir=r(l9t,"nezha"),l9t.forEach(t),uir=r(eje," \u2014 "),fH=n(eje,"A",{href:!0});var i9t=s(fH);pir=r(i9t,"NezhaForQuestionAnswering"),i9t.forEach(t),_ir=r(eje," (Nezha model)"),eje.forEach(t),bir=i(X),wM=n(X,"LI",{});var oje=s(wM);F1e=n(oje,"STRONG",{});var d9t=s(F1e);vir=r(d9t,"nystromformer"),d9t.forEach(t),Fir=r(oje," \u2014 "),gH=n(oje,"A",{href:!0});var c9t=s(gH);Tir=r(c9t,"NystromformerForQuestionAnswering"),c9t.forEach(t),Mir=r(oje," (Nystr\xF6mformer model)"),oje.forEach(t),Eir=i(X),AM=n(X,"LI",{});var rje=s(AM);T1e=n(rje,"STRONG",{});var m9t=s(T1e);Cir=r(m9t,"qdqbert"),m9t.forEach(t),wir=r(rje," \u2014 "),hH=n(rje,"A",{href:!0});var f9t=s(hH);Air=r(f9t,"QDQBertForQuestionAnswering"),f9t.forEach(t),Lir=r(rje," (QDQBert model)"),rje.forEach(t),yir=i(X),LM=n(X,"LI",{});var tje=s(LM);M1e=n(tje,"STRONG",{});var g9t=s(M1e);xir=r(g9t,"reformer"),g9t.forEach(t),$ir=r(tje," \u2014 "),uH=n(tje,"A",{href:!0});var h9t=s(uH);kir=r(h9t,"ReformerForQuestionAnswering"),h9t.forEach(t),Sir=r(tje," (Reformer model)"),tje.forEach(t),Rir=i(X),yM=n(X,"LI",{});var aje=s(yM);E1e=n(aje,"STRONG",{});var u9t=s(E1e);Pir=r(u9t,"rembert"),u9t.forEach(t),Bir=r(aje," \u2014 "),pH=n(aje,"A",{href:!0});var p9t=s(pH);Iir=r(p9t,"RemBertForQuestionAnswering"),p9t.forEach(t),Nir=r(aje," (RemBERT model)"),aje.forEach(t),qir=i(X),xM=n(X,"LI",{});var nje=s(xM);C1e=n(nje,"STRONG",{});var _9t=s(C1e);jir=r(_9t,"roberta"),_9t.forEach(t),Dir=r(nje," \u2014 "),_H=n(nje,"A",{href:!0});var b9t=s(_H);Gir=r(b9t,"RobertaForQuestionAnswering"),b9t.forEach(t),Oir=r(nje," (RoBERTa model)"),nje.forEach(t),Vir=i(X),$M=n(X,"LI",{});var sje=s($M);w1e=n(sje,"STRONG",{});var v9t=s(w1e);Xir=r(v9t,"roformer"),v9t.forEach(t),zir=r(sje," \u2014 "),bH=n(sje,"A",{href:!0});var F9t=s(bH);Wir=r(F9t,"RoFormerForQuestionAnswering"),F9t.forEach(t),Qir=r(sje," (RoFormer model)"),sje.forEach(t),Hir=i(X),kM=n(X,"LI",{});var lje=s(kM);A1e=n(lje,"STRONG",{});var T9t=s(A1e);Uir=r(T9t,"splinter"),T9t.forEach(t),Jir=r(lje," \u2014 "),vH=n(lje,"A",{href:!0});var M9t=s(vH);Yir=r(M9t,"SplinterForQuestionAnswering"),M9t.forEach(t),Kir=r(lje," (Splinter model)"),lje.forEach(t),Zir=i(X),SM=n(X,"LI",{});var ije=s(SM);L1e=n(ije,"STRONG",{});var E9t=s(L1e);edr=r(E9t,"squeezebert"),E9t.forEach(t),odr=r(ije," \u2014 "),FH=n(ije,"A",{href:!0});var C9t=s(FH);rdr=r(C9t,"SqueezeBertForQuestionAnswering"),C9t.forEach(t),tdr=r(ije," (SqueezeBERT model)"),ije.forEach(t),adr=i(X),RM=n(X,"LI",{});var dje=s(RM);y1e=n(dje,"STRONG",{});var w9t=s(y1e);ndr=r(w9t,"xlm"),w9t.forEach(t),sdr=r(dje," \u2014 "),TH=n(dje,"A",{href:!0});var A9t=s(TH);ldr=r(A9t,"XLMForQuestionAnsweringSimple"),A9t.forEach(t),idr=r(dje," (XLM model)"),dje.forEach(t),ddr=i(X),PM=n(X,"LI",{});var cje=s(PM);x1e=n(cje,"STRONG",{});var L9t=s(x1e);cdr=r(L9t,"xlm-roberta"),L9t.forEach(t),mdr=r(cje," \u2014 "),MH=n(cje,"A",{href:!0});var y9t=s(MH);fdr=r(y9t,"XLMRobertaForQuestionAnswering"),y9t.forEach(t),gdr=r(cje," (XLM-RoBERTa model)"),cje.forEach(t),hdr=i(X),BM=n(X,"LI",{});var mje=s(BM);$1e=n(mje,"STRONG",{});var x9t=s($1e);udr=r(x9t,"xlm-roberta-xl"),x9t.forEach(t),pdr=r(mje," \u2014 "),EH=n(mje,"A",{href:!0});var $9t=s(EH);_dr=r($9t,"XLMRobertaXLForQuestionAnswering"),$9t.forEach(t),bdr=r(mje," (XLM-RoBERTa-XL model)"),mje.forEach(t),vdr=i(X),IM=n(X,"LI",{});var fje=s(IM);k1e=n(fje,"STRONG",{});var k9t=s(k1e);Fdr=r(k9t,"xlnet"),k9t.forEach(t),Tdr=r(fje," \u2014 "),CH=n(fje,"A",{href:!0});var S9t=s(CH);Mdr=r(S9t,"XLNetForQuestionAnsweringSimple"),S9t.forEach(t),Edr=r(fje," (XLNet model)"),fje.forEach(t),Cdr=i(X),NM=n(X,"LI",{});var gje=s(NM);S1e=n(gje,"STRONG",{});var R9t=s(S1e);wdr=r(R9t,"yoso"),R9t.forEach(t),Adr=r(gje," \u2014 "),wH=n(gje,"A",{href:!0});var P9t=s(wH);Ldr=r(P9t,"YosoForQuestionAnswering"),P9t.forEach(t),ydr=r(gje," (YOSO model)"),gje.forEach(t),X.forEach(t),xdr=i(Fa),qM=n(Fa,"P",{});var hje=s(qM);$dr=r(hje,"The model is set in evaluation mode by default using "),R1e=n(hje,"CODE",{});var B9t=s(R1e);kdr=r(B9t,"model.eval()"),B9t.forEach(t),Sdr=r(hje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(hje,"CODE",{});var I9t=s(P1e);Rdr=r(I9t,"model.train()"),I9t.forEach(t),hje.forEach(t),Pdr=i(Fa),T(jM.$$.fragment,Fa),Fa.forEach(t),vl.forEach(t),hQe=i(m),Ad=n(m,"H2",{class:!0});var MUe=s(Ad);DM=n(MUe,"A",{id:!0,class:!0,href:!0});var N9t=s(DM);B1e=n(N9t,"SPAN",{});var q9t=s(B1e);T(h9.$$.fragment,q9t),q9t.forEach(t),N9t.forEach(t),Bdr=i(MUe),I1e=n(MUe,"SPAN",{});var j9t=s(I1e);Idr=r(j9t,"AutoModelForTableQuestionAnswering"),j9t.forEach(t),MUe.forEach(t),uQe=i(m),Vo=n(m,"DIV",{class:!0});var Fl=s(Vo);T(u9.$$.fragment,Fl),Ndr=i(Fl),Ld=n(Fl,"P",{});var Cae=s(Ld);qdr=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AH=n(Cae,"A",{href:!0});var D9t=s(AH);jdr=r(D9t,"from_pretrained()"),D9t.forEach(t),Ddr=r(Cae," class method or the "),LH=n(Cae,"A",{href:!0});var G9t=s(LH);Gdr=r(G9t,"from_config()"),G9t.forEach(t),Odr=r(Cae,` class
method.`),Cae.forEach(t),Vdr=i(Fl),p9=n(Fl,"P",{});var EUe=s(p9);Xdr=r(EUe,"This class cannot be instantiated directly using "),N1e=n(EUe,"CODE",{});var O9t=s(N1e);zdr=r(O9t,"__init__()"),O9t.forEach(t),Wdr=r(EUe," (throws an error)."),EUe.forEach(t),Qdr=i(Fl),Ft=n(Fl,"DIV",{class:!0});var gL=s(Ft);T(_9.$$.fragment,gL),Hdr=i(gL),q1e=n(gL,"P",{});var V9t=s(q1e);Udr=r(V9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),V9t.forEach(t),Jdr=i(gL),yd=n(gL,"P",{});var wae=s(yd);Ydr=r(wae,`Note:
Loading a model from its configuration file does `),j1e=n(wae,"STRONG",{});var X9t=s(j1e);Kdr=r(X9t,"not"),X9t.forEach(t),Zdr=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(wae,"A",{href:!0});var z9t=s(yH);ecr=r(z9t,"from_pretrained()"),z9t.forEach(t),ocr=r(wae," to load the model weights."),wae.forEach(t),rcr=i(gL),T(GM.$$.fragment,gL),gL.forEach(t),tcr=i(Fl),lo=n(Fl,"DIV",{class:!0});var Ta=s(lo);T(b9.$$.fragment,Ta),acr=i(Ta),D1e=n(Ta,"P",{});var W9t=s(D1e);ncr=r(W9t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),W9t.forEach(t),scr=i(Ta),Ja=n(Ta,"P",{});var hL=s(Ja);lcr=r(hL,"The model class to instantiate is selected based on the "),G1e=n(hL,"CODE",{});var Q9t=s(G1e);icr=r(Q9t,"model_type"),Q9t.forEach(t),dcr=r(hL,` property of the config object (either
passed as an argument or loaded from `),O1e=n(hL,"CODE",{});var H9t=s(O1e);ccr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),mcr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(hL,"CODE",{});var U9t=s(V1e);fcr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),gcr=r(hL,":"),hL.forEach(t),hcr=i(Ta),X1e=n(Ta,"UL",{});var J9t=s(X1e);OM=n(J9t,"LI",{});var uje=s(OM);z1e=n(uje,"STRONG",{});var Y9t=s(z1e);ucr=r(Y9t,"tapas"),Y9t.forEach(t),pcr=r(uje," \u2014 "),xH=n(uje,"A",{href:!0});var K9t=s(xH);_cr=r(K9t,"TapasForQuestionAnswering"),K9t.forEach(t),bcr=r(uje," (TAPAS model)"),uje.forEach(t),J9t.forEach(t),vcr=i(Ta),VM=n(Ta,"P",{});var pje=s(VM);Fcr=r(pje,"The model is set in evaluation mode by default using "),W1e=n(pje,"CODE",{});var Z9t=s(W1e);Tcr=r(Z9t,"model.eval()"),Z9t.forEach(t),Mcr=r(pje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=n(pje,"CODE",{});var ext=s(Q1e);Ecr=r(ext,"model.train()"),ext.forEach(t),pje.forEach(t),Ccr=i(Ta),T(XM.$$.fragment,Ta),Ta.forEach(t),Fl.forEach(t),pQe=i(m),xd=n(m,"H2",{class:!0});var CUe=s(xd);zM=n(CUe,"A",{id:!0,class:!0,href:!0});var oxt=s(zM);H1e=n(oxt,"SPAN",{});var rxt=s(H1e);T(v9.$$.fragment,rxt),rxt.forEach(t),oxt.forEach(t),wcr=i(CUe),U1e=n(CUe,"SPAN",{});var txt=s(U1e);Acr=r(txt,"AutoModelForImageClassification"),txt.forEach(t),CUe.forEach(t),_Qe=i(m),Xo=n(m,"DIV",{class:!0});var Tl=s(Xo);T(F9.$$.fragment,Tl),Lcr=i(Tl),$d=n(Tl,"P",{});var Aae=s($d);ycr=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$H=n(Aae,"A",{href:!0});var axt=s($H);xcr=r(axt,"from_pretrained()"),axt.forEach(t),$cr=r(Aae," class method or the "),kH=n(Aae,"A",{href:!0});var nxt=s(kH);kcr=r(nxt,"from_config()"),nxt.forEach(t),Scr=r(Aae,` class
method.`),Aae.forEach(t),Rcr=i(Tl),T9=n(Tl,"P",{});var wUe=s(T9);Pcr=r(wUe,"This class cannot be instantiated directly using "),J1e=n(wUe,"CODE",{});var sxt=s(J1e);Bcr=r(sxt,"__init__()"),sxt.forEach(t),Icr=r(wUe," (throws an error)."),wUe.forEach(t),Ncr=i(Tl),Tt=n(Tl,"DIV",{class:!0});var uL=s(Tt);T(M9.$$.fragment,uL),qcr=i(uL),Y1e=n(uL,"P",{});var lxt=s(Y1e);jcr=r(lxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lxt.forEach(t),Dcr=i(uL),kd=n(uL,"P",{});var Lae=s(kd);Gcr=r(Lae,`Note:
Loading a model from its configuration file does `),K1e=n(Lae,"STRONG",{});var ixt=s(K1e);Ocr=r(ixt,"not"),ixt.forEach(t),Vcr=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(Lae,"A",{href:!0});var dxt=s(SH);Xcr=r(dxt,"from_pretrained()"),dxt.forEach(t),zcr=r(Lae," to load the model weights."),Lae.forEach(t),Wcr=i(uL),T(WM.$$.fragment,uL),uL.forEach(t),Qcr=i(Tl),io=n(Tl,"DIV",{class:!0});var Ma=s(io);T(E9.$$.fragment,Ma),Hcr=i(Ma),Z1e=n(Ma,"P",{});var cxt=s(Z1e);Ucr=r(cxt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cxt.forEach(t),Jcr=i(Ma),Ya=n(Ma,"P",{});var pL=s(Ya);Ycr=r(pL,"The model class to instantiate is selected based on the "),eFe=n(pL,"CODE",{});var mxt=s(eFe);Kcr=r(mxt,"model_type"),mxt.forEach(t),Zcr=r(pL,` property of the config object (either
passed as an argument or loaded from `),oFe=n(pL,"CODE",{});var fxt=s(oFe);emr=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),omr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(pL,"CODE",{});var gxt=s(rFe);rmr=r(gxt,"pretrained_model_name_or_path"),gxt.forEach(t),tmr=r(pL,":"),pL.forEach(t),amr=i(Ma),be=n(Ma,"UL",{});var Fe=s(be);QM=n(Fe,"LI",{});var _je=s(QM);tFe=n(_je,"STRONG",{});var hxt=s(tFe);nmr=r(hxt,"beit"),hxt.forEach(t),smr=r(_je," \u2014 "),RH=n(_je,"A",{href:!0});var uxt=s(RH);lmr=r(uxt,"BeitForImageClassification"),uxt.forEach(t),imr=r(_je," (BEiT model)"),_je.forEach(t),dmr=i(Fe),HM=n(Fe,"LI",{});var bje=s(HM);aFe=n(bje,"STRONG",{});var pxt=s(aFe);cmr=r(pxt,"convnext"),pxt.forEach(t),mmr=r(bje," \u2014 "),PH=n(bje,"A",{href:!0});var _xt=s(PH);fmr=r(_xt,"ConvNextForImageClassification"),_xt.forEach(t),gmr=r(bje," (ConvNeXT model)"),bje.forEach(t),hmr=i(Fe),UM=n(Fe,"LI",{});var vje=s(UM);nFe=n(vje,"STRONG",{});var bxt=s(nFe);umr=r(bxt,"cvt"),bxt.forEach(t),pmr=r(vje," \u2014 "),BH=n(vje,"A",{href:!0});var vxt=s(BH);_mr=r(vxt,"CvtForImageClassification"),vxt.forEach(t),bmr=r(vje," (CvT model)"),vje.forEach(t),vmr=i(Fe),JM=n(Fe,"LI",{});var Fje=s(JM);sFe=n(Fje,"STRONG",{});var Fxt=s(sFe);Fmr=r(Fxt,"data2vec-vision"),Fxt.forEach(t),Tmr=r(Fje," \u2014 "),IH=n(Fje,"A",{href:!0});var Txt=s(IH);Mmr=r(Txt,"Data2VecVisionForImageClassification"),Txt.forEach(t),Emr=r(Fje," (Data2VecVision model)"),Fje.forEach(t),Cmr=i(Fe),rl=n(Fe,"LI",{});var AR=s(rl);lFe=n(AR,"STRONG",{});var Mxt=s(lFe);wmr=r(Mxt,"deit"),Mxt.forEach(t),Amr=r(AR," \u2014 "),NH=n(AR,"A",{href:!0});var Ext=s(NH);Lmr=r(Ext,"DeiTForImageClassification"),Ext.forEach(t),ymr=r(AR," or "),qH=n(AR,"A",{href:!0});var Cxt=s(qH);xmr=r(Cxt,"DeiTForImageClassificationWithTeacher"),Cxt.forEach(t),$mr=r(AR," (DeiT model)"),AR.forEach(t),kmr=i(Fe),YM=n(Fe,"LI",{});var Tje=s(YM);iFe=n(Tje,"STRONG",{});var wxt=s(iFe);Smr=r(wxt,"imagegpt"),wxt.forEach(t),Rmr=r(Tje," \u2014 "),jH=n(Tje,"A",{href:!0});var Axt=s(jH);Pmr=r(Axt,"ImageGPTForImageClassification"),Axt.forEach(t),Bmr=r(Tje," (ImageGPT model)"),Tje.forEach(t),Imr=i(Fe),tl=n(Fe,"LI",{});var LR=s(tl);dFe=n(LR,"STRONG",{});var Lxt=s(dFe);Nmr=r(Lxt,"levit"),Lxt.forEach(t),qmr=r(LR," \u2014 "),DH=n(LR,"A",{href:!0});var yxt=s(DH);jmr=r(yxt,"LevitForImageClassification"),yxt.forEach(t),Dmr=r(LR," or "),GH=n(LR,"A",{href:!0});var xxt=s(GH);Gmr=r(xxt,"LevitForImageClassificationWithTeacher"),xxt.forEach(t),Omr=r(LR," (LeViT model)"),LR.forEach(t),Vmr=i(Fe),KM=n(Fe,"LI",{});var Mje=s(KM);cFe=n(Mje,"STRONG",{});var $xt=s(cFe);Xmr=r($xt,"mobilevit"),$xt.forEach(t),zmr=r(Mje," \u2014 "),OH=n(Mje,"A",{href:!0});var kxt=s(OH);Wmr=r(kxt,"MobileViTForImageClassification"),kxt.forEach(t),Qmr=r(Mje," (MobileViT model)"),Mje.forEach(t),Hmr=i(Fe),Mt=n(Fe,"LI",{});var Vm=s(Mt);mFe=n(Vm,"STRONG",{});var Sxt=s(mFe);Umr=r(Sxt,"perceiver"),Sxt.forEach(t),Jmr=r(Vm," \u2014 "),VH=n(Vm,"A",{href:!0});var Rxt=s(VH);Ymr=r(Rxt,"PerceiverForImageClassificationLearned"),Rxt.forEach(t),Kmr=r(Vm," or "),XH=n(Vm,"A",{href:!0});var Pxt=s(XH);Zmr=r(Pxt,"PerceiverForImageClassificationFourier"),Pxt.forEach(t),efr=r(Vm," or "),zH=n(Vm,"A",{href:!0});var Bxt=s(zH);ofr=r(Bxt,"PerceiverForImageClassificationConvProcessing"),Bxt.forEach(t),rfr=r(Vm," (Perceiver model)"),Vm.forEach(t),tfr=i(Fe),ZM=n(Fe,"LI",{});var Eje=s(ZM);fFe=n(Eje,"STRONG",{});var Ixt=s(fFe);afr=r(Ixt,"poolformer"),Ixt.forEach(t),nfr=r(Eje," \u2014 "),WH=n(Eje,"A",{href:!0});var Nxt=s(WH);sfr=r(Nxt,"PoolFormerForImageClassification"),Nxt.forEach(t),lfr=r(Eje," (PoolFormer model)"),Eje.forEach(t),ifr=i(Fe),eE=n(Fe,"LI",{});var Cje=s(eE);gFe=n(Cje,"STRONG",{});var qxt=s(gFe);dfr=r(qxt,"regnet"),qxt.forEach(t),cfr=r(Cje," \u2014 "),QH=n(Cje,"A",{href:!0});var jxt=s(QH);mfr=r(jxt,"RegNetForImageClassification"),jxt.forEach(t),ffr=r(Cje," (RegNet model)"),Cje.forEach(t),gfr=i(Fe),oE=n(Fe,"LI",{});var wje=s(oE);hFe=n(wje,"STRONG",{});var Dxt=s(hFe);hfr=r(Dxt,"resnet"),Dxt.forEach(t),ufr=r(wje," \u2014 "),HH=n(wje,"A",{href:!0});var Gxt=s(HH);pfr=r(Gxt,"ResNetForImageClassification"),Gxt.forEach(t),_fr=r(wje," (ResNet model)"),wje.forEach(t),bfr=i(Fe),rE=n(Fe,"LI",{});var Aje=s(rE);uFe=n(Aje,"STRONG",{});var Oxt=s(uFe);vfr=r(Oxt,"segformer"),Oxt.forEach(t),Ffr=r(Aje," \u2014 "),UH=n(Aje,"A",{href:!0});var Vxt=s(UH);Tfr=r(Vxt,"SegformerForImageClassification"),Vxt.forEach(t),Mfr=r(Aje," (SegFormer model)"),Aje.forEach(t),Efr=i(Fe),tE=n(Fe,"LI",{});var Lje=s(tE);pFe=n(Lje,"STRONG",{});var Xxt=s(pFe);Cfr=r(Xxt,"swin"),Xxt.forEach(t),wfr=r(Lje," \u2014 "),JH=n(Lje,"A",{href:!0});var zxt=s(JH);Afr=r(zxt,"SwinForImageClassification"),zxt.forEach(t),Lfr=r(Lje," (Swin Transformer model)"),Lje.forEach(t),yfr=i(Fe),aE=n(Fe,"LI",{});var yje=s(aE);_Fe=n(yje,"STRONG",{});var Wxt=s(_Fe);xfr=r(Wxt,"swinv2"),Wxt.forEach(t),$fr=r(yje," \u2014 "),YH=n(yje,"A",{href:!0});var Qxt=s(YH);kfr=r(Qxt,"Swinv2ForImageClassification"),Qxt.forEach(t),Sfr=r(yje," (Swin Transformer V2 model)"),yje.forEach(t),Rfr=i(Fe),nE=n(Fe,"LI",{});var xje=s(nE);bFe=n(xje,"STRONG",{});var Hxt=s(bFe);Pfr=r(Hxt,"van"),Hxt.forEach(t),Bfr=r(xje," \u2014 "),KH=n(xje,"A",{href:!0});var Uxt=s(KH);Ifr=r(Uxt,"VanForImageClassification"),Uxt.forEach(t),Nfr=r(xje," (VAN model)"),xje.forEach(t),qfr=i(Fe),sE=n(Fe,"LI",{});var $je=s(sE);vFe=n($je,"STRONG",{});var Jxt=s(vFe);jfr=r(Jxt,"vit"),Jxt.forEach(t),Dfr=r($je," \u2014 "),ZH=n($je,"A",{href:!0});var Yxt=s(ZH);Gfr=r(Yxt,"ViTForImageClassification"),Yxt.forEach(t),Ofr=r($je," (ViT model)"),$je.forEach(t),Fe.forEach(t),Vfr=i(Ma),lE=n(Ma,"P",{});var kje=s(lE);Xfr=r(kje,"The model is set in evaluation mode by default using "),FFe=n(kje,"CODE",{});var Kxt=s(FFe);zfr=r(Kxt,"model.eval()"),Kxt.forEach(t),Wfr=r(kje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=n(kje,"CODE",{});var Zxt=s(TFe);Qfr=r(Zxt,"model.train()"),Zxt.forEach(t),kje.forEach(t),Hfr=i(Ma),T(iE.$$.fragment,Ma),Ma.forEach(t),Tl.forEach(t),bQe=i(m),Sd=n(m,"H2",{class:!0});var AUe=s(Sd);dE=n(AUe,"A",{id:!0,class:!0,href:!0});var e$t=s(dE);MFe=n(e$t,"SPAN",{});var o$t=s(MFe);T(C9.$$.fragment,o$t),o$t.forEach(t),e$t.forEach(t),Ufr=i(AUe),EFe=n(AUe,"SPAN",{});var r$t=s(EFe);Jfr=r(r$t,"AutoModelForVideoClassification"),r$t.forEach(t),AUe.forEach(t),vQe=i(m),zo=n(m,"DIV",{class:!0});var Ml=s(zo);T(w9.$$.fragment,Ml),Yfr=i(Ml),Rd=n(Ml,"P",{});var yae=s(Rd);Kfr=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),eU=n(yae,"A",{href:!0});var t$t=s(eU);Zfr=r(t$t,"from_pretrained()"),t$t.forEach(t),egr=r(yae," class method or the "),oU=n(yae,"A",{href:!0});var a$t=s(oU);ogr=r(a$t,"from_config()"),a$t.forEach(t),rgr=r(yae,` class
method.`),yae.forEach(t),tgr=i(Ml),A9=n(Ml,"P",{});var LUe=s(A9);agr=r(LUe,"This class cannot be instantiated directly using "),CFe=n(LUe,"CODE",{});var n$t=s(CFe);ngr=r(n$t,"__init__()"),n$t.forEach(t),sgr=r(LUe," (throws an error)."),LUe.forEach(t),lgr=i(Ml),Et=n(Ml,"DIV",{class:!0});var _L=s(Et);T(L9.$$.fragment,_L),igr=i(_L),wFe=n(_L,"P",{});var s$t=s(wFe);dgr=r(s$t,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),s$t.forEach(t),cgr=i(_L),Pd=n(_L,"P",{});var xae=s(Pd);mgr=r(xae,`Note:
Loading a model from its configuration file does `),AFe=n(xae,"STRONG",{});var l$t=s(AFe);fgr=r(l$t,"not"),l$t.forEach(t),ggr=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(xae,"A",{href:!0});var i$t=s(rU);hgr=r(i$t,"from_pretrained()"),i$t.forEach(t),ugr=r(xae," to load the model weights."),xae.forEach(t),pgr=i(_L),T(cE.$$.fragment,_L),_L.forEach(t),_gr=i(Ml),co=n(Ml,"DIV",{class:!0});var Ea=s(co);T(y9.$$.fragment,Ea),bgr=i(Ea),LFe=n(Ea,"P",{});var d$t=s(LFe);vgr=r(d$t,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),d$t.forEach(t),Fgr=i(Ea),Ka=n(Ea,"P",{});var bL=s(Ka);Tgr=r(bL,"The model class to instantiate is selected based on the "),yFe=n(bL,"CODE",{});var c$t=s(yFe);Mgr=r(c$t,"model_type"),c$t.forEach(t),Egr=r(bL,` property of the config object (either
passed as an argument or loaded from `),xFe=n(bL,"CODE",{});var m$t=s(xFe);Cgr=r(m$t,"pretrained_model_name_or_path"),m$t.forEach(t),wgr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(bL,"CODE",{});var f$t=s($Fe);Agr=r(f$t,"pretrained_model_name_or_path"),f$t.forEach(t),Lgr=r(bL,":"),bL.forEach(t),ygr=i(Ea),kFe=n(Ea,"UL",{});var g$t=s(kFe);mE=n(g$t,"LI",{});var Sje=s(mE);SFe=n(Sje,"STRONG",{});var h$t=s(SFe);xgr=r(h$t,"videomae"),h$t.forEach(t),$gr=r(Sje," \u2014 "),tU=n(Sje,"A",{href:!0});var u$t=s(tU);kgr=r(u$t,"VideoMAEForVideoClassification"),u$t.forEach(t),Sgr=r(Sje," (VideoMAE model)"),Sje.forEach(t),g$t.forEach(t),Rgr=i(Ea),fE=n(Ea,"P",{});var Rje=s(fE);Pgr=r(Rje,"The model is set in evaluation mode by default using "),RFe=n(Rje,"CODE",{});var p$t=s(RFe);Bgr=r(p$t,"model.eval()"),p$t.forEach(t),Igr=r(Rje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=n(Rje,"CODE",{});var _$t=s(PFe);Ngr=r(_$t,"model.train()"),_$t.forEach(t),Rje.forEach(t),qgr=i(Ea),T(gE.$$.fragment,Ea),Ea.forEach(t),Ml.forEach(t),FQe=i(m),Bd=n(m,"H2",{class:!0});var yUe=s(Bd);hE=n(yUe,"A",{id:!0,class:!0,href:!0});var b$t=s(hE);BFe=n(b$t,"SPAN",{});var v$t=s(BFe);T(x9.$$.fragment,v$t),v$t.forEach(t),b$t.forEach(t),jgr=i(yUe),IFe=n(yUe,"SPAN",{});var F$t=s(IFe);Dgr=r(F$t,"AutoModelForVision2Seq"),F$t.forEach(t),yUe.forEach(t),TQe=i(m),Wo=n(m,"DIV",{class:!0});var El=s(Wo);T($9.$$.fragment,El),Ggr=i(El),Id=n(El,"P",{});var $ae=s(Id);Ogr=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=n($ae,"A",{href:!0});var T$t=s(aU);Vgr=r(T$t,"from_pretrained()"),T$t.forEach(t),Xgr=r($ae," class method or the "),nU=n($ae,"A",{href:!0});var M$t=s(nU);zgr=r(M$t,"from_config()"),M$t.forEach(t),Wgr=r($ae,` class
method.`),$ae.forEach(t),Qgr=i(El),k9=n(El,"P",{});var xUe=s(k9);Hgr=r(xUe,"This class cannot be instantiated directly using "),NFe=n(xUe,"CODE",{});var E$t=s(NFe);Ugr=r(E$t,"__init__()"),E$t.forEach(t),Jgr=r(xUe," (throws an error)."),xUe.forEach(t),Ygr=i(El),Ct=n(El,"DIV",{class:!0});var vL=s(Ct);T(S9.$$.fragment,vL),Kgr=i(vL),qFe=n(vL,"P",{});var C$t=s(qFe);Zgr=r(C$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),C$t.forEach(t),ehr=i(vL),Nd=n(vL,"P",{});var kae=s(Nd);ohr=r(kae,`Note:
Loading a model from its configuration file does `),jFe=n(kae,"STRONG",{});var w$t=s(jFe);rhr=r(w$t,"not"),w$t.forEach(t),thr=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(kae,"A",{href:!0});var A$t=s(sU);ahr=r(A$t,"from_pretrained()"),A$t.forEach(t),nhr=r(kae," to load the model weights."),kae.forEach(t),shr=i(vL),T(uE.$$.fragment,vL),vL.forEach(t),lhr=i(El),mo=n(El,"DIV",{class:!0});var Ca=s(mo);T(R9.$$.fragment,Ca),ihr=i(Ca),DFe=n(Ca,"P",{});var L$t=s(DFe);dhr=r(L$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L$t.forEach(t),chr=i(Ca),Za=n(Ca,"P",{});var FL=s(Za);mhr=r(FL,"The model class to instantiate is selected based on the "),GFe=n(FL,"CODE",{});var y$t=s(GFe);fhr=r(y$t,"model_type"),y$t.forEach(t),ghr=r(FL,` property of the config object (either
passed as an argument or loaded from `),OFe=n(FL,"CODE",{});var x$t=s(OFe);hhr=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),uhr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(FL,"CODE",{});var $$t=s(VFe);phr=r($$t,"pretrained_model_name_or_path"),$$t.forEach(t),_hr=r(FL,":"),FL.forEach(t),bhr=i(Ca),XFe=n(Ca,"UL",{});var k$t=s(XFe);pE=n(k$t,"LI",{});var Pje=s(pE);zFe=n(Pje,"STRONG",{});var S$t=s(zFe);vhr=r(S$t,"vision-encoder-decoder"),S$t.forEach(t),Fhr=r(Pje," \u2014 "),lU=n(Pje,"A",{href:!0});var R$t=s(lU);Thr=r(R$t,"VisionEncoderDecoderModel"),R$t.forEach(t),Mhr=r(Pje," (Vision Encoder decoder model)"),Pje.forEach(t),k$t.forEach(t),Ehr=i(Ca),_E=n(Ca,"P",{});var Bje=s(_E);Chr=r(Bje,"The model is set in evaluation mode by default using "),WFe=n(Bje,"CODE",{});var P$t=s(WFe);whr=r(P$t,"model.eval()"),P$t.forEach(t),Ahr=r(Bje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=n(Bje,"CODE",{});var B$t=s(QFe);Lhr=r(B$t,"model.train()"),B$t.forEach(t),Bje.forEach(t),yhr=i(Ca),T(bE.$$.fragment,Ca),Ca.forEach(t),El.forEach(t),MQe=i(m),qd=n(m,"H2",{class:!0});var $Ue=s(qd);vE=n($Ue,"A",{id:!0,class:!0,href:!0});var I$t=s(vE);HFe=n(I$t,"SPAN",{});var N$t=s(HFe);T(P9.$$.fragment,N$t),N$t.forEach(t),I$t.forEach(t),xhr=i($Ue),UFe=n($Ue,"SPAN",{});var q$t=s(UFe);$hr=r(q$t,"AutoModelForVisualQuestionAnswering"),q$t.forEach(t),$Ue.forEach(t),EQe=i(m),Qo=n(m,"DIV",{class:!0});var Cl=s(Qo);T(B9.$$.fragment,Cl),khr=i(Cl),jd=n(Cl,"P",{});var Sae=s(jd);Shr=r(Sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),iU=n(Sae,"A",{href:!0});var j$t=s(iU);Rhr=r(j$t,"from_pretrained()"),j$t.forEach(t),Phr=r(Sae," class method or the "),dU=n(Sae,"A",{href:!0});var D$t=s(dU);Bhr=r(D$t,"from_config()"),D$t.forEach(t),Ihr=r(Sae,` class
method.`),Sae.forEach(t),Nhr=i(Cl),I9=n(Cl,"P",{});var kUe=s(I9);qhr=r(kUe,"This class cannot be instantiated directly using "),JFe=n(kUe,"CODE",{});var G$t=s(JFe);jhr=r(G$t,"__init__()"),G$t.forEach(t),Dhr=r(kUe," (throws an error)."),kUe.forEach(t),Ghr=i(Cl),wt=n(Cl,"DIV",{class:!0});var TL=s(wt);T(N9.$$.fragment,TL),Ohr=i(TL),YFe=n(TL,"P",{});var O$t=s(YFe);Vhr=r(O$t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),O$t.forEach(t),Xhr=i(TL),Dd=n(TL,"P",{});var Rae=s(Dd);zhr=r(Rae,`Note:
Loading a model from its configuration file does `),KFe=n(Rae,"STRONG",{});var V$t=s(KFe);Whr=r(V$t,"not"),V$t.forEach(t),Qhr=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(Rae,"A",{href:!0});var X$t=s(cU);Hhr=r(X$t,"from_pretrained()"),X$t.forEach(t),Uhr=r(Rae," to load the model weights."),Rae.forEach(t),Jhr=i(TL),T(FE.$$.fragment,TL),TL.forEach(t),Yhr=i(Cl),fo=n(Cl,"DIV",{class:!0});var wa=s(fo);T(q9.$$.fragment,wa),Khr=i(wa),ZFe=n(wa,"P",{});var z$t=s(ZFe);Zhr=r(z$t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),z$t.forEach(t),eur=i(wa),en=n(wa,"P",{});var ML=s(en);our=r(ML,"The model class to instantiate is selected based on the "),eTe=n(ML,"CODE",{});var W$t=s(eTe);rur=r(W$t,"model_type"),W$t.forEach(t),tur=r(ML,` property of the config object (either
passed as an argument or loaded from `),oTe=n(ML,"CODE",{});var Q$t=s(oTe);aur=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),nur=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(ML,"CODE",{});var H$t=s(rTe);sur=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),lur=r(ML,":"),ML.forEach(t),iur=i(wa),tTe=n(wa,"UL",{});var U$t=s(tTe);TE=n(U$t,"LI",{});var Ije=s(TE);aTe=n(Ije,"STRONG",{});var J$t=s(aTe);dur=r(J$t,"vilt"),J$t.forEach(t),cur=r(Ije," \u2014 "),mU=n(Ije,"A",{href:!0});var Y$t=s(mU);mur=r(Y$t,"ViltForQuestionAnswering"),Y$t.forEach(t),fur=r(Ije," (ViLT model)"),Ije.forEach(t),U$t.forEach(t),gur=i(wa),ME=n(wa,"P",{});var Nje=s(ME);hur=r(Nje,"The model is set in evaluation mode by default using "),nTe=n(Nje,"CODE",{});var K$t=s(nTe);uur=r(K$t,"model.eval()"),K$t.forEach(t),pur=r(Nje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=n(Nje,"CODE",{});var Z$t=s(sTe);_ur=r(Z$t,"model.train()"),Z$t.forEach(t),Nje.forEach(t),bur=i(wa),T(EE.$$.fragment,wa),wa.forEach(t),Cl.forEach(t),CQe=i(m),Gd=n(m,"H2",{class:!0});var SUe=s(Gd);CE=n(SUe,"A",{id:!0,class:!0,href:!0});var ekt=s(CE);lTe=n(ekt,"SPAN",{});var okt=s(lTe);T(j9.$$.fragment,okt),okt.forEach(t),ekt.forEach(t),vur=i(SUe),iTe=n(SUe,"SPAN",{});var rkt=s(iTe);Fur=r(rkt,"AutoModelForAudioClassification"),rkt.forEach(t),SUe.forEach(t),wQe=i(m),Ho=n(m,"DIV",{class:!0});var wl=s(Ho);T(D9.$$.fragment,wl),Tur=i(wl),Od=n(wl,"P",{});var Pae=s(Od);Mur=r(Pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fU=n(Pae,"A",{href:!0});var tkt=s(fU);Eur=r(tkt,"from_pretrained()"),tkt.forEach(t),Cur=r(Pae," class method or the "),gU=n(Pae,"A",{href:!0});var akt=s(gU);wur=r(akt,"from_config()"),akt.forEach(t),Aur=r(Pae,` class
method.`),Pae.forEach(t),Lur=i(wl),G9=n(wl,"P",{});var RUe=s(G9);yur=r(RUe,"This class cannot be instantiated directly using "),dTe=n(RUe,"CODE",{});var nkt=s(dTe);xur=r(nkt,"__init__()"),nkt.forEach(t),$ur=r(RUe," (throws an error)."),RUe.forEach(t),kur=i(wl),At=n(wl,"DIV",{class:!0});var EL=s(At);T(O9.$$.fragment,EL),Sur=i(EL),cTe=n(EL,"P",{});var skt=s(cTe);Rur=r(skt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),skt.forEach(t),Pur=i(EL),Vd=n(EL,"P",{});var Bae=s(Vd);Bur=r(Bae,`Note:
Loading a model from its configuration file does `),mTe=n(Bae,"STRONG",{});var lkt=s(mTe);Iur=r(lkt,"not"),lkt.forEach(t),Nur=r(Bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(Bae,"A",{href:!0});var ikt=s(hU);qur=r(ikt,"from_pretrained()"),ikt.forEach(t),jur=r(Bae," to load the model weights."),Bae.forEach(t),Dur=i(EL),T(wE.$$.fragment,EL),EL.forEach(t),Gur=i(wl),go=n(wl,"DIV",{class:!0});var Aa=s(go);T(V9.$$.fragment,Aa),Our=i(Aa),fTe=n(Aa,"P",{});var dkt=s(fTe);Vur=r(dkt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dkt.forEach(t),Xur=i(Aa),on=n(Aa,"P",{});var CL=s(on);zur=r(CL,"The model class to instantiate is selected based on the "),gTe=n(CL,"CODE",{});var ckt=s(gTe);Wur=r(ckt,"model_type"),ckt.forEach(t),Qur=r(CL,` property of the config object (either
passed as an argument or loaded from `),hTe=n(CL,"CODE",{});var mkt=s(hTe);Hur=r(mkt,"pretrained_model_name_or_path"),mkt.forEach(t),Uur=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(CL,"CODE",{});var fkt=s(uTe);Jur=r(fkt,"pretrained_model_name_or_path"),fkt.forEach(t),Yur=r(CL,":"),CL.forEach(t),Kur=i(Aa),Pe=n(Aa,"UL",{});var We=s(Pe);AE=n(We,"LI",{});var qje=s(AE);pTe=n(qje,"STRONG",{});var gkt=s(pTe);Zur=r(gkt,"data2vec-audio"),gkt.forEach(t),epr=r(qje," \u2014 "),uU=n(qje,"A",{href:!0});var hkt=s(uU);opr=r(hkt,"Data2VecAudioForSequenceClassification"),hkt.forEach(t),rpr=r(qje," (Data2VecAudio model)"),qje.forEach(t),tpr=i(We),LE=n(We,"LI",{});var jje=s(LE);_Te=n(jje,"STRONG",{});var ukt=s(_Te);apr=r(ukt,"hubert"),ukt.forEach(t),npr=r(jje," \u2014 "),pU=n(jje,"A",{href:!0});var pkt=s(pU);spr=r(pkt,"HubertForSequenceClassification"),pkt.forEach(t),lpr=r(jje," (Hubert model)"),jje.forEach(t),ipr=i(We),yE=n(We,"LI",{});var Dje=s(yE);bTe=n(Dje,"STRONG",{});var _kt=s(bTe);dpr=r(_kt,"sew"),_kt.forEach(t),cpr=r(Dje," \u2014 "),_U=n(Dje,"A",{href:!0});var bkt=s(_U);mpr=r(bkt,"SEWForSequenceClassification"),bkt.forEach(t),fpr=r(Dje," (SEW model)"),Dje.forEach(t),gpr=i(We),xE=n(We,"LI",{});var Gje=s(xE);vTe=n(Gje,"STRONG",{});var vkt=s(vTe);hpr=r(vkt,"sew-d"),vkt.forEach(t),upr=r(Gje," \u2014 "),bU=n(Gje,"A",{href:!0});var Fkt=s(bU);ppr=r(Fkt,"SEWDForSequenceClassification"),Fkt.forEach(t),_pr=r(Gje," (SEW-D model)"),Gje.forEach(t),bpr=i(We),$E=n(We,"LI",{});var Oje=s($E);FTe=n(Oje,"STRONG",{});var Tkt=s(FTe);vpr=r(Tkt,"unispeech"),Tkt.forEach(t),Fpr=r(Oje," \u2014 "),vU=n(Oje,"A",{href:!0});var Mkt=s(vU);Tpr=r(Mkt,"UniSpeechForSequenceClassification"),Mkt.forEach(t),Mpr=r(Oje," (UniSpeech model)"),Oje.forEach(t),Epr=i(We),kE=n(We,"LI",{});var Vje=s(kE);TTe=n(Vje,"STRONG",{});var Ekt=s(TTe);Cpr=r(Ekt,"unispeech-sat"),Ekt.forEach(t),wpr=r(Vje," \u2014 "),FU=n(Vje,"A",{href:!0});var Ckt=s(FU);Apr=r(Ckt,"UniSpeechSatForSequenceClassification"),Ckt.forEach(t),Lpr=r(Vje," (UniSpeechSat model)"),Vje.forEach(t),ypr=i(We),SE=n(We,"LI",{});var Xje=s(SE);MTe=n(Xje,"STRONG",{});var wkt=s(MTe);xpr=r(wkt,"wav2vec2"),wkt.forEach(t),$pr=r(Xje," \u2014 "),TU=n(Xje,"A",{href:!0});var Akt=s(TU);kpr=r(Akt,"Wav2Vec2ForSequenceClassification"),Akt.forEach(t),Spr=r(Xje," (Wav2Vec2 model)"),Xje.forEach(t),Rpr=i(We),RE=n(We,"LI",{});var zje=s(RE);ETe=n(zje,"STRONG",{});var Lkt=s(ETe);Ppr=r(Lkt,"wav2vec2-conformer"),Lkt.forEach(t),Bpr=r(zje," \u2014 "),MU=n(zje,"A",{href:!0});var ykt=s(MU);Ipr=r(ykt,"Wav2Vec2ConformerForSequenceClassification"),ykt.forEach(t),Npr=r(zje," (Wav2Vec2-Conformer model)"),zje.forEach(t),qpr=i(We),PE=n(We,"LI",{});var Wje=s(PE);CTe=n(Wje,"STRONG",{});var xkt=s(CTe);jpr=r(xkt,"wavlm"),xkt.forEach(t),Dpr=r(Wje," \u2014 "),EU=n(Wje,"A",{href:!0});var $kt=s(EU);Gpr=r($kt,"WavLMForSequenceClassification"),$kt.forEach(t),Opr=r(Wje," (WavLM model)"),Wje.forEach(t),We.forEach(t),Vpr=i(Aa),BE=n(Aa,"P",{});var Qje=s(BE);Xpr=r(Qje,"The model is set in evaluation mode by default using "),wTe=n(Qje,"CODE",{});var kkt=s(wTe);zpr=r(kkt,"model.eval()"),kkt.forEach(t),Wpr=r(Qje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ATe=n(Qje,"CODE",{});var Skt=s(ATe);Qpr=r(Skt,"model.train()"),Skt.forEach(t),Qje.forEach(t),Hpr=i(Aa),T(IE.$$.fragment,Aa),Aa.forEach(t),wl.forEach(t),AQe=i(m),Xd=n(m,"H2",{class:!0});var PUe=s(Xd);NE=n(PUe,"A",{id:!0,class:!0,href:!0});var Rkt=s(NE);LTe=n(Rkt,"SPAN",{});var Pkt=s(LTe);T(X9.$$.fragment,Pkt),Pkt.forEach(t),Rkt.forEach(t),Upr=i(PUe),yTe=n(PUe,"SPAN",{});var Bkt=s(yTe);Jpr=r(Bkt,"AutoModelForAudioFrameClassification"),Bkt.forEach(t),PUe.forEach(t),LQe=i(m),Uo=n(m,"DIV",{class:!0});var Al=s(Uo);T(z9.$$.fragment,Al),Ypr=i(Al),zd=n(Al,"P",{});var Iae=s(zd);Kpr=r(Iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CU=n(Iae,"A",{href:!0});var Ikt=s(CU);Zpr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),e_r=r(Iae," class method or the "),wU=n(Iae,"A",{href:!0});var Nkt=s(wU);o_r=r(Nkt,"from_config()"),Nkt.forEach(t),r_r=r(Iae,` class
method.`),Iae.forEach(t),t_r=i(Al),W9=n(Al,"P",{});var BUe=s(W9);a_r=r(BUe,"This class cannot be instantiated directly using "),xTe=n(BUe,"CODE",{});var qkt=s(xTe);n_r=r(qkt,"__init__()"),qkt.forEach(t),s_r=r(BUe," (throws an error)."),BUe.forEach(t),l_r=i(Al),Lt=n(Al,"DIV",{class:!0});var wL=s(Lt);T(Q9.$$.fragment,wL),i_r=i(wL),$Te=n(wL,"P",{});var jkt=s($Te);d_r=r(jkt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jkt.forEach(t),c_r=i(wL),Wd=n(wL,"P",{});var Nae=s(Wd);m_r=r(Nae,`Note:
Loading a model from its configuration file does `),kTe=n(Nae,"STRONG",{});var Dkt=s(kTe);f_r=r(Dkt,"not"),Dkt.forEach(t),g_r=r(Nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(Nae,"A",{href:!0});var Gkt=s(AU);h_r=r(Gkt,"from_pretrained()"),Gkt.forEach(t),u_r=r(Nae," to load the model weights."),Nae.forEach(t),p_r=i(wL),T(qE.$$.fragment,wL),wL.forEach(t),__r=i(Al),ho=n(Al,"DIV",{class:!0});var La=s(ho);T(H9.$$.fragment,La),b_r=i(La),STe=n(La,"P",{});var Okt=s(STe);v_r=r(Okt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Okt.forEach(t),F_r=i(La),rn=n(La,"P",{});var AL=s(rn);T_r=r(AL,"The model class to instantiate is selected based on the "),RTe=n(AL,"CODE",{});var Vkt=s(RTe);M_r=r(Vkt,"model_type"),Vkt.forEach(t),E_r=r(AL,` property of the config object (either
passed as an argument or loaded from `),PTe=n(AL,"CODE",{});var Xkt=s(PTe);C_r=r(Xkt,"pretrained_model_name_or_path"),Xkt.forEach(t),w_r=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(AL,"CODE",{});var zkt=s(BTe);A_r=r(zkt,"pretrained_model_name_or_path"),zkt.forEach(t),L_r=r(AL,":"),AL.forEach(t),y_r=i(La),at=n(La,"UL",{});var Ll=s(at);jE=n(Ll,"LI",{});var Hje=s(jE);ITe=n(Hje,"STRONG",{});var Wkt=s(ITe);x_r=r(Wkt,"data2vec-audio"),Wkt.forEach(t),$_r=r(Hje," \u2014 "),LU=n(Hje,"A",{href:!0});var Qkt=s(LU);k_r=r(Qkt,"Data2VecAudioForAudioFrameClassification"),Qkt.forEach(t),S_r=r(Hje," (Data2VecAudio model)"),Hje.forEach(t),R_r=i(Ll),DE=n(Ll,"LI",{});var Uje=s(DE);NTe=n(Uje,"STRONG",{});var Hkt=s(NTe);P_r=r(Hkt,"unispeech-sat"),Hkt.forEach(t),B_r=r(Uje," \u2014 "),yU=n(Uje,"A",{href:!0});var Ukt=s(yU);I_r=r(Ukt,"UniSpeechSatForAudioFrameClassification"),Ukt.forEach(t),N_r=r(Uje," (UniSpeechSat model)"),Uje.forEach(t),q_r=i(Ll),GE=n(Ll,"LI",{});var Jje=s(GE);qTe=n(Jje,"STRONG",{});var Jkt=s(qTe);j_r=r(Jkt,"wav2vec2"),Jkt.forEach(t),D_r=r(Jje," \u2014 "),xU=n(Jje,"A",{href:!0});var Ykt=s(xU);G_r=r(Ykt,"Wav2Vec2ForAudioFrameClassification"),Ykt.forEach(t),O_r=r(Jje," (Wav2Vec2 model)"),Jje.forEach(t),V_r=i(Ll),OE=n(Ll,"LI",{});var Yje=s(OE);jTe=n(Yje,"STRONG",{});var Kkt=s(jTe);X_r=r(Kkt,"wav2vec2-conformer"),Kkt.forEach(t),z_r=r(Yje," \u2014 "),$U=n(Yje,"A",{href:!0});var Zkt=s($U);W_r=r(Zkt,"Wav2Vec2ConformerForAudioFrameClassification"),Zkt.forEach(t),Q_r=r(Yje," (Wav2Vec2-Conformer model)"),Yje.forEach(t),H_r=i(Ll),VE=n(Ll,"LI",{});var Kje=s(VE);DTe=n(Kje,"STRONG",{});var eSt=s(DTe);U_r=r(eSt,"wavlm"),eSt.forEach(t),J_r=r(Kje," \u2014 "),kU=n(Kje,"A",{href:!0});var oSt=s(kU);Y_r=r(oSt,"WavLMForAudioFrameClassification"),oSt.forEach(t),K_r=r(Kje," (WavLM model)"),Kje.forEach(t),Ll.forEach(t),Z_r=i(La),XE=n(La,"P",{});var Zje=s(XE);e2r=r(Zje,"The model is set in evaluation mode by default using "),GTe=n(Zje,"CODE",{});var rSt=s(GTe);o2r=r(rSt,"model.eval()"),rSt.forEach(t),r2r=r(Zje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OTe=n(Zje,"CODE",{});var tSt=s(OTe);t2r=r(tSt,"model.train()"),tSt.forEach(t),Zje.forEach(t),a2r=i(La),T(zE.$$.fragment,La),La.forEach(t),Al.forEach(t),yQe=i(m),Qd=n(m,"H2",{class:!0});var IUe=s(Qd);WE=n(IUe,"A",{id:!0,class:!0,href:!0});var aSt=s(WE);VTe=n(aSt,"SPAN",{});var nSt=s(VTe);T(U9.$$.fragment,nSt),nSt.forEach(t),aSt.forEach(t),n2r=i(IUe),XTe=n(IUe,"SPAN",{});var sSt=s(XTe);s2r=r(sSt,"AutoModelForCTC"),sSt.forEach(t),IUe.forEach(t),xQe=i(m),Jo=n(m,"DIV",{class:!0});var yl=s(Jo);T(J9.$$.fragment,yl),l2r=i(yl),Hd=n(yl,"P",{});var qae=s(Hd);i2r=r(qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SU=n(qae,"A",{href:!0});var lSt=s(SU);d2r=r(lSt,"from_pretrained()"),lSt.forEach(t),c2r=r(qae," class method or the "),RU=n(qae,"A",{href:!0});var iSt=s(RU);m2r=r(iSt,"from_config()"),iSt.forEach(t),f2r=r(qae,` class
method.`),qae.forEach(t),g2r=i(yl),Y9=n(yl,"P",{});var NUe=s(Y9);h2r=r(NUe,"This class cannot be instantiated directly using "),zTe=n(NUe,"CODE",{});var dSt=s(zTe);u2r=r(dSt,"__init__()"),dSt.forEach(t),p2r=r(NUe," (throws an error)."),NUe.forEach(t),_2r=i(yl),yt=n(yl,"DIV",{class:!0});var LL=s(yt);T(K9.$$.fragment,LL),b2r=i(LL),WTe=n(LL,"P",{});var cSt=s(WTe);v2r=r(cSt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cSt.forEach(t),F2r=i(LL),Ud=n(LL,"P",{});var jae=s(Ud);T2r=r(jae,`Note:
Loading a model from its configuration file does `),QTe=n(jae,"STRONG",{});var mSt=s(QTe);M2r=r(mSt,"not"),mSt.forEach(t),E2r=r(jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(jae,"A",{href:!0});var fSt=s(PU);C2r=r(fSt,"from_pretrained()"),fSt.forEach(t),w2r=r(jae," to load the model weights."),jae.forEach(t),A2r=i(LL),T(QE.$$.fragment,LL),LL.forEach(t),L2r=i(yl),uo=n(yl,"DIV",{class:!0});var ya=s(uo);T(Z9.$$.fragment,ya),y2r=i(ya),HTe=n(ya,"P",{});var gSt=s(HTe);x2r=r(gSt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gSt.forEach(t),$2r=i(ya),tn=n(ya,"P",{});var yL=s(tn);k2r=r(yL,"The model class to instantiate is selected based on the "),UTe=n(yL,"CODE",{});var hSt=s(UTe);S2r=r(hSt,"model_type"),hSt.forEach(t),R2r=r(yL,` property of the config object (either
passed as an argument or loaded from `),JTe=n(yL,"CODE",{});var uSt=s(JTe);P2r=r(uSt,"pretrained_model_name_or_path"),uSt.forEach(t),B2r=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=n(yL,"CODE",{});var pSt=s(YTe);I2r=r(pSt,"pretrained_model_name_or_path"),pSt.forEach(t),N2r=r(yL,":"),yL.forEach(t),q2r=i(ya),Le=n(ya,"UL",{});var Be=s(Le);HE=n(Be,"LI",{});var eDe=s(HE);KTe=n(eDe,"STRONG",{});var _St=s(KTe);j2r=r(_St,"data2vec-audio"),_St.forEach(t),D2r=r(eDe," \u2014 "),BU=n(eDe,"A",{href:!0});var bSt=s(BU);G2r=r(bSt,"Data2VecAudioForCTC"),bSt.forEach(t),O2r=r(eDe," (Data2VecAudio model)"),eDe.forEach(t),V2r=i(Be),UE=n(Be,"LI",{});var oDe=s(UE);ZTe=n(oDe,"STRONG",{});var vSt=s(ZTe);X2r=r(vSt,"hubert"),vSt.forEach(t),z2r=r(oDe," \u2014 "),IU=n(oDe,"A",{href:!0});var FSt=s(IU);W2r=r(FSt,"HubertForCTC"),FSt.forEach(t),Q2r=r(oDe," (Hubert model)"),oDe.forEach(t),H2r=i(Be),JE=n(Be,"LI",{});var rDe=s(JE);eMe=n(rDe,"STRONG",{});var TSt=s(eMe);U2r=r(TSt,"mctct"),TSt.forEach(t),J2r=r(rDe," \u2014 "),NU=n(rDe,"A",{href:!0});var MSt=s(NU);Y2r=r(MSt,"MCTCTForCTC"),MSt.forEach(t),K2r=r(rDe," (M-CTC-T model)"),rDe.forEach(t),Z2r=i(Be),YE=n(Be,"LI",{});var tDe=s(YE);oMe=n(tDe,"STRONG",{});var ESt=s(oMe);ebr=r(ESt,"sew"),ESt.forEach(t),obr=r(tDe," \u2014 "),qU=n(tDe,"A",{href:!0});var CSt=s(qU);rbr=r(CSt,"SEWForCTC"),CSt.forEach(t),tbr=r(tDe," (SEW model)"),tDe.forEach(t),abr=i(Be),KE=n(Be,"LI",{});var aDe=s(KE);rMe=n(aDe,"STRONG",{});var wSt=s(rMe);nbr=r(wSt,"sew-d"),wSt.forEach(t),sbr=r(aDe," \u2014 "),jU=n(aDe,"A",{href:!0});var ASt=s(jU);lbr=r(ASt,"SEWDForCTC"),ASt.forEach(t),ibr=r(aDe," (SEW-D model)"),aDe.forEach(t),dbr=i(Be),ZE=n(Be,"LI",{});var nDe=s(ZE);tMe=n(nDe,"STRONG",{});var LSt=s(tMe);cbr=r(LSt,"unispeech"),LSt.forEach(t),mbr=r(nDe," \u2014 "),DU=n(nDe,"A",{href:!0});var ySt=s(DU);fbr=r(ySt,"UniSpeechForCTC"),ySt.forEach(t),gbr=r(nDe," (UniSpeech model)"),nDe.forEach(t),hbr=i(Be),e4=n(Be,"LI",{});var sDe=s(e4);aMe=n(sDe,"STRONG",{});var xSt=s(aMe);ubr=r(xSt,"unispeech-sat"),xSt.forEach(t),pbr=r(sDe," \u2014 "),GU=n(sDe,"A",{href:!0});var $St=s(GU);_br=r($St,"UniSpeechSatForCTC"),$St.forEach(t),bbr=r(sDe," (UniSpeechSat model)"),sDe.forEach(t),vbr=i(Be),o4=n(Be,"LI",{});var lDe=s(o4);nMe=n(lDe,"STRONG",{});var kSt=s(nMe);Fbr=r(kSt,"wav2vec2"),kSt.forEach(t),Tbr=r(lDe," \u2014 "),OU=n(lDe,"A",{href:!0});var SSt=s(OU);Mbr=r(SSt,"Wav2Vec2ForCTC"),SSt.forEach(t),Ebr=r(lDe," (Wav2Vec2 model)"),lDe.forEach(t),Cbr=i(Be),r4=n(Be,"LI",{});var iDe=s(r4);sMe=n(iDe,"STRONG",{});var RSt=s(sMe);wbr=r(RSt,"wav2vec2-conformer"),RSt.forEach(t),Abr=r(iDe," \u2014 "),VU=n(iDe,"A",{href:!0});var PSt=s(VU);Lbr=r(PSt,"Wav2Vec2ConformerForCTC"),PSt.forEach(t),ybr=r(iDe," (Wav2Vec2-Conformer model)"),iDe.forEach(t),xbr=i(Be),t4=n(Be,"LI",{});var dDe=s(t4);lMe=n(dDe,"STRONG",{});var BSt=s(lMe);$br=r(BSt,"wavlm"),BSt.forEach(t),kbr=r(dDe," \u2014 "),XU=n(dDe,"A",{href:!0});var ISt=s(XU);Sbr=r(ISt,"WavLMForCTC"),ISt.forEach(t),Rbr=r(dDe," (WavLM model)"),dDe.forEach(t),Be.forEach(t),Pbr=i(ya),a4=n(ya,"P",{});var cDe=s(a4);Bbr=r(cDe,"The model is set in evaluation mode by default using "),iMe=n(cDe,"CODE",{});var NSt=s(iMe);Ibr=r(NSt,"model.eval()"),NSt.forEach(t),Nbr=r(cDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dMe=n(cDe,"CODE",{});var qSt=s(dMe);qbr=r(qSt,"model.train()"),qSt.forEach(t),cDe.forEach(t),jbr=i(ya),T(n4.$$.fragment,ya),ya.forEach(t),yl.forEach(t),$Qe=i(m),Jd=n(m,"H2",{class:!0});var qUe=s(Jd);s4=n(qUe,"A",{id:!0,class:!0,href:!0});var jSt=s(s4);cMe=n(jSt,"SPAN",{});var DSt=s(cMe);T(ex.$$.fragment,DSt),DSt.forEach(t),jSt.forEach(t),Dbr=i(qUe),mMe=n(qUe,"SPAN",{});var GSt=s(mMe);Gbr=r(GSt,"AutoModelForSpeechSeq2Seq"),GSt.forEach(t),qUe.forEach(t),kQe=i(m),Yo=n(m,"DIV",{class:!0});var xl=s(Yo);T(ox.$$.fragment,xl),Obr=i(xl),Yd=n(xl,"P",{});var Dae=s(Yd);Vbr=r(Dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=n(Dae,"A",{href:!0});var OSt=s(zU);Xbr=r(OSt,"from_pretrained()"),OSt.forEach(t),zbr=r(Dae," class method or the "),WU=n(Dae,"A",{href:!0});var VSt=s(WU);Wbr=r(VSt,"from_config()"),VSt.forEach(t),Qbr=r(Dae,` class
method.`),Dae.forEach(t),Hbr=i(xl),rx=n(xl,"P",{});var jUe=s(rx);Ubr=r(jUe,"This class cannot be instantiated directly using "),fMe=n(jUe,"CODE",{});var XSt=s(fMe);Jbr=r(XSt,"__init__()"),XSt.forEach(t),Ybr=r(jUe," (throws an error)."),jUe.forEach(t),Kbr=i(xl),xt=n(xl,"DIV",{class:!0});var xL=s(xt);T(tx.$$.fragment,xL),Zbr=i(xL),gMe=n(xL,"P",{});var zSt=s(gMe);evr=r(zSt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zSt.forEach(t),ovr=i(xL),Kd=n(xL,"P",{});var Gae=s(Kd);rvr=r(Gae,`Note:
Loading a model from its configuration file does `),hMe=n(Gae,"STRONG",{});var WSt=s(hMe);tvr=r(WSt,"not"),WSt.forEach(t),avr=r(Gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(Gae,"A",{href:!0});var QSt=s(QU);nvr=r(QSt,"from_pretrained()"),QSt.forEach(t),svr=r(Gae," to load the model weights."),Gae.forEach(t),lvr=i(xL),T(l4.$$.fragment,xL),xL.forEach(t),ivr=i(xl),po=n(xl,"DIV",{class:!0});var xa=s(po);T(ax.$$.fragment,xa),dvr=i(xa),uMe=n(xa,"P",{});var HSt=s(uMe);cvr=r(HSt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HSt.forEach(t),mvr=i(xa),an=n(xa,"P",{});var $L=s(an);fvr=r($L,"The model class to instantiate is selected based on the "),pMe=n($L,"CODE",{});var USt=s(pMe);gvr=r(USt,"model_type"),USt.forEach(t),hvr=r($L,` property of the config object (either
passed as an argument or loaded from `),_Me=n($L,"CODE",{});var JSt=s(_Me);uvr=r(JSt,"pretrained_model_name_or_path"),JSt.forEach(t),pvr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n($L,"CODE",{});var YSt=s(bMe);_vr=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),bvr=r($L,":"),$L.forEach(t),vvr=i(xa),nx=n(xa,"UL",{});var DUe=s(nx);i4=n(DUe,"LI",{});var mDe=s(i4);vMe=n(mDe,"STRONG",{});var KSt=s(vMe);Fvr=r(KSt,"speech-encoder-decoder"),KSt.forEach(t),Tvr=r(mDe," \u2014 "),HU=n(mDe,"A",{href:!0});var ZSt=s(HU);Mvr=r(ZSt,"SpeechEncoderDecoderModel"),ZSt.forEach(t),Evr=r(mDe," (Speech Encoder decoder model)"),mDe.forEach(t),Cvr=i(DUe),d4=n(DUe,"LI",{});var fDe=s(d4);FMe=n(fDe,"STRONG",{});var eRt=s(FMe);wvr=r(eRt,"speech_to_text"),eRt.forEach(t),Avr=r(fDe," \u2014 "),UU=n(fDe,"A",{href:!0});var oRt=s(UU);Lvr=r(oRt,"Speech2TextForConditionalGeneration"),oRt.forEach(t),yvr=r(fDe," (Speech2Text model)"),fDe.forEach(t),DUe.forEach(t),xvr=i(xa),c4=n(xa,"P",{});var gDe=s(c4);$vr=r(gDe,"The model is set in evaluation mode by default using "),TMe=n(gDe,"CODE",{});var rRt=s(TMe);kvr=r(rRt,"model.eval()"),rRt.forEach(t),Svr=r(gDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MMe=n(gDe,"CODE",{});var tRt=s(MMe);Rvr=r(tRt,"model.train()"),tRt.forEach(t),gDe.forEach(t),Pvr=i(xa),T(m4.$$.fragment,xa),xa.forEach(t),xl.forEach(t),SQe=i(m),Zd=n(m,"H2",{class:!0});var GUe=s(Zd);f4=n(GUe,"A",{id:!0,class:!0,href:!0});var aRt=s(f4);EMe=n(aRt,"SPAN",{});var nRt=s(EMe);T(sx.$$.fragment,nRt),nRt.forEach(t),aRt.forEach(t),Bvr=i(GUe),CMe=n(GUe,"SPAN",{});var sRt=s(CMe);Ivr=r(sRt,"AutoModelForAudioXVector"),sRt.forEach(t),GUe.forEach(t),RQe=i(m),Ko=n(m,"DIV",{class:!0});var $l=s(Ko);T(lx.$$.fragment,$l),Nvr=i($l),ec=n($l,"P",{});var Oae=s(ec);qvr=r(Oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JU=n(Oae,"A",{href:!0});var lRt=s(JU);jvr=r(lRt,"from_pretrained()"),lRt.forEach(t),Dvr=r(Oae," class method or the "),YU=n(Oae,"A",{href:!0});var iRt=s(YU);Gvr=r(iRt,"from_config()"),iRt.forEach(t),Ovr=r(Oae,` class
method.`),Oae.forEach(t),Vvr=i($l),ix=n($l,"P",{});var OUe=s(ix);Xvr=r(OUe,"This class cannot be instantiated directly using "),wMe=n(OUe,"CODE",{});var dRt=s(wMe);zvr=r(dRt,"__init__()"),dRt.forEach(t),Wvr=r(OUe," (throws an error)."),OUe.forEach(t),Qvr=i($l),$t=n($l,"DIV",{class:!0});var kL=s($t);T(dx.$$.fragment,kL),Hvr=i(kL),AMe=n(kL,"P",{});var cRt=s(AMe);Uvr=r(cRt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cRt.forEach(t),Jvr=i(kL),oc=n(kL,"P",{});var Vae=s(oc);Yvr=r(Vae,`Note:
Loading a model from its configuration file does `),LMe=n(Vae,"STRONG",{});var mRt=s(LMe);Kvr=r(mRt,"not"),mRt.forEach(t),Zvr=r(Vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(Vae,"A",{href:!0});var fRt=s(KU);e1r=r(fRt,"from_pretrained()"),fRt.forEach(t),o1r=r(Vae," to load the model weights."),Vae.forEach(t),r1r=i(kL),T(g4.$$.fragment,kL),kL.forEach(t),t1r=i($l),_o=n($l,"DIV",{class:!0});var $a=s(_o);T(cx.$$.fragment,$a),a1r=i($a),yMe=n($a,"P",{});var gRt=s(yMe);n1r=r(gRt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gRt.forEach(t),s1r=i($a),nn=n($a,"P",{});var SL=s(nn);l1r=r(SL,"The model class to instantiate is selected based on the "),xMe=n(SL,"CODE",{});var hRt=s(xMe);i1r=r(hRt,"model_type"),hRt.forEach(t),d1r=r(SL,` property of the config object (either
passed as an argument or loaded from `),$Me=n(SL,"CODE",{});var uRt=s($Me);c1r=r(uRt,"pretrained_model_name_or_path"),uRt.forEach(t),m1r=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(SL,"CODE",{});var pRt=s(kMe);f1r=r(pRt,"pretrained_model_name_or_path"),pRt.forEach(t),g1r=r(SL,":"),SL.forEach(t),h1r=i($a),nt=n($a,"UL",{});var kl=s(nt);h4=n(kl,"LI",{});var hDe=s(h4);SMe=n(hDe,"STRONG",{});var _Rt=s(SMe);u1r=r(_Rt,"data2vec-audio"),_Rt.forEach(t),p1r=r(hDe," \u2014 "),ZU=n(hDe,"A",{href:!0});var bRt=s(ZU);_1r=r(bRt,"Data2VecAudioForXVector"),bRt.forEach(t),b1r=r(hDe," (Data2VecAudio model)"),hDe.forEach(t),v1r=i(kl),u4=n(kl,"LI",{});var uDe=s(u4);RMe=n(uDe,"STRONG",{});var vRt=s(RMe);F1r=r(vRt,"unispeech-sat"),vRt.forEach(t),T1r=r(uDe," \u2014 "),eJ=n(uDe,"A",{href:!0});var FRt=s(eJ);M1r=r(FRt,"UniSpeechSatForXVector"),FRt.forEach(t),E1r=r(uDe," (UniSpeechSat model)"),uDe.forEach(t),C1r=i(kl),p4=n(kl,"LI",{});var pDe=s(p4);PMe=n(pDe,"STRONG",{});var TRt=s(PMe);w1r=r(TRt,"wav2vec2"),TRt.forEach(t),A1r=r(pDe," \u2014 "),oJ=n(pDe,"A",{href:!0});var MRt=s(oJ);L1r=r(MRt,"Wav2Vec2ForXVector"),MRt.forEach(t),y1r=r(pDe," (Wav2Vec2 model)"),pDe.forEach(t),x1r=i(kl),_4=n(kl,"LI",{});var _De=s(_4);BMe=n(_De,"STRONG",{});var ERt=s(BMe);$1r=r(ERt,"wav2vec2-conformer"),ERt.forEach(t),k1r=r(_De," \u2014 "),rJ=n(_De,"A",{href:!0});var CRt=s(rJ);S1r=r(CRt,"Wav2Vec2ConformerForXVector"),CRt.forEach(t),R1r=r(_De," (Wav2Vec2-Conformer model)"),_De.forEach(t),P1r=i(kl),b4=n(kl,"LI",{});var bDe=s(b4);IMe=n(bDe,"STRONG",{});var wRt=s(IMe);B1r=r(wRt,"wavlm"),wRt.forEach(t),I1r=r(bDe," \u2014 "),tJ=n(bDe,"A",{href:!0});var ARt=s(tJ);N1r=r(ARt,"WavLMForXVector"),ARt.forEach(t),q1r=r(bDe," (WavLM model)"),bDe.forEach(t),kl.forEach(t),j1r=i($a),v4=n($a,"P",{});var vDe=s(v4);D1r=r(vDe,"The model is set in evaluation mode by default using "),NMe=n(vDe,"CODE",{});var LRt=s(NMe);G1r=r(LRt,"model.eval()"),LRt.forEach(t),O1r=r(vDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qMe=n(vDe,"CODE",{});var yRt=s(qMe);V1r=r(yRt,"model.train()"),yRt.forEach(t),vDe.forEach(t),X1r=i($a),T(F4.$$.fragment,$a),$a.forEach(t),$l.forEach(t),PQe=i(m),rc=n(m,"H2",{class:!0});var VUe=s(rc);T4=n(VUe,"A",{id:!0,class:!0,href:!0});var xRt=s(T4);jMe=n(xRt,"SPAN",{});var $Rt=s(jMe);T(mx.$$.fragment,$Rt),$Rt.forEach(t),xRt.forEach(t),z1r=i(VUe),DMe=n(VUe,"SPAN",{});var kRt=s(DMe);W1r=r(kRt,"AutoModelForMaskedImageModeling"),kRt.forEach(t),VUe.forEach(t),BQe=i(m),Zo=n(m,"DIV",{class:!0});var Sl=s(Zo);T(fx.$$.fragment,Sl),Q1r=i(Sl),tc=n(Sl,"P",{});var Xae=s(tc);H1r=r(Xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aJ=n(Xae,"A",{href:!0});var SRt=s(aJ);U1r=r(SRt,"from_pretrained()"),SRt.forEach(t),J1r=r(Xae," class method or the "),nJ=n(Xae,"A",{href:!0});var RRt=s(nJ);Y1r=r(RRt,"from_config()"),RRt.forEach(t),K1r=r(Xae,` class
method.`),Xae.forEach(t),Z1r=i(Sl),gx=n(Sl,"P",{});var XUe=s(gx);eFr=r(XUe,"This class cannot be instantiated directly using "),GMe=n(XUe,"CODE",{});var PRt=s(GMe);oFr=r(PRt,"__init__()"),PRt.forEach(t),rFr=r(XUe," (throws an error)."),XUe.forEach(t),tFr=i(Sl),kt=n(Sl,"DIV",{class:!0});var RL=s(kt);T(hx.$$.fragment,RL),aFr=i(RL),OMe=n(RL,"P",{});var BRt=s(OMe);nFr=r(BRt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),BRt.forEach(t),sFr=i(RL),ac=n(RL,"P",{});var zae=s(ac);lFr=r(zae,`Note:
Loading a model from its configuration file does `),VMe=n(zae,"STRONG",{});var IRt=s(VMe);iFr=r(IRt,"not"),IRt.forEach(t),dFr=r(zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(zae,"A",{href:!0});var NRt=s(sJ);cFr=r(NRt,"from_pretrained()"),NRt.forEach(t),mFr=r(zae," to load the model weights."),zae.forEach(t),fFr=i(RL),T(M4.$$.fragment,RL),RL.forEach(t),gFr=i(Sl),bo=n(Sl,"DIV",{class:!0});var ka=s(bo);T(ux.$$.fragment,ka),hFr=i(ka),XMe=n(ka,"P",{});var qRt=s(XMe);uFr=r(qRt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qRt.forEach(t),pFr=i(ka),sn=n(ka,"P",{});var PL=s(sn);_Fr=r(PL,"The model class to instantiate is selected based on the "),zMe=n(PL,"CODE",{});var jRt=s(zMe);bFr=r(jRt,"model_type"),jRt.forEach(t),vFr=r(PL,` property of the config object (either
passed as an argument or loaded from `),WMe=n(PL,"CODE",{});var DRt=s(WMe);FFr=r(DRt,"pretrained_model_name_or_path"),DRt.forEach(t),TFr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(PL,"CODE",{});var GRt=s(QMe);MFr=r(GRt,"pretrained_model_name_or_path"),GRt.forEach(t),EFr=r(PL,":"),PL.forEach(t),CFr=i(ka),ln=n(ka,"UL",{});var BL=s(ln);E4=n(BL,"LI",{});var FDe=s(E4);HMe=n(FDe,"STRONG",{});var ORt=s(HMe);wFr=r(ORt,"deit"),ORt.forEach(t),AFr=r(FDe," \u2014 "),lJ=n(FDe,"A",{href:!0});var VRt=s(lJ);LFr=r(VRt,"DeiTForMaskedImageModeling"),VRt.forEach(t),yFr=r(FDe," (DeiT model)"),FDe.forEach(t),xFr=i(BL),C4=n(BL,"LI",{});var TDe=s(C4);UMe=n(TDe,"STRONG",{});var XRt=s(UMe);$Fr=r(XRt,"swin"),XRt.forEach(t),kFr=r(TDe," \u2014 "),iJ=n(TDe,"A",{href:!0});var zRt=s(iJ);SFr=r(zRt,"SwinForMaskedImageModeling"),zRt.forEach(t),RFr=r(TDe," (Swin Transformer model)"),TDe.forEach(t),PFr=i(BL),w4=n(BL,"LI",{});var MDe=s(w4);JMe=n(MDe,"STRONG",{});var WRt=s(JMe);BFr=r(WRt,"swinv2"),WRt.forEach(t),IFr=r(MDe," \u2014 "),dJ=n(MDe,"A",{href:!0});var QRt=s(dJ);NFr=r(QRt,"Swinv2ForMaskedImageModeling"),QRt.forEach(t),qFr=r(MDe," (Swin Transformer V2 model)"),MDe.forEach(t),jFr=i(BL),A4=n(BL,"LI",{});var EDe=s(A4);YMe=n(EDe,"STRONG",{});var HRt=s(YMe);DFr=r(HRt,"vit"),HRt.forEach(t),GFr=r(EDe," \u2014 "),cJ=n(EDe,"A",{href:!0});var URt=s(cJ);OFr=r(URt,"ViTForMaskedImageModeling"),URt.forEach(t),VFr=r(EDe," (ViT model)"),EDe.forEach(t),BL.forEach(t),XFr=i(ka),L4=n(ka,"P",{});var CDe=s(L4);zFr=r(CDe,"The model is set in evaluation mode by default using "),KMe=n(CDe,"CODE",{});var JRt=s(KMe);WFr=r(JRt,"model.eval()"),JRt.forEach(t),QFr=r(CDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZMe=n(CDe,"CODE",{});var YRt=s(ZMe);HFr=r(YRt,"model.train()"),YRt.forEach(t),CDe.forEach(t),UFr=i(ka),T(y4.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),IQe=i(m),nc=n(m,"H2",{class:!0});var zUe=s(nc);x4=n(zUe,"A",{id:!0,class:!0,href:!0});var KRt=s(x4);eEe=n(KRt,"SPAN",{});var ZRt=s(eEe);T(px.$$.fragment,ZRt),ZRt.forEach(t),KRt.forEach(t),JFr=i(zUe),oEe=n(zUe,"SPAN",{});var ePt=s(oEe);YFr=r(ePt,"AutoModelForObjectDetection"),ePt.forEach(t),zUe.forEach(t),NQe=i(m),er=n(m,"DIV",{class:!0});var Rl=s(er);T(_x.$$.fragment,Rl),KFr=i(Rl),sc=n(Rl,"P",{});var Wae=s(sc);ZFr=r(Wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mJ=n(Wae,"A",{href:!0});var oPt=s(mJ);eTr=r(oPt,"from_pretrained()"),oPt.forEach(t),oTr=r(Wae," class method or the "),fJ=n(Wae,"A",{href:!0});var rPt=s(fJ);rTr=r(rPt,"from_config()"),rPt.forEach(t),tTr=r(Wae,` class
method.`),Wae.forEach(t),aTr=i(Rl),bx=n(Rl,"P",{});var WUe=s(bx);nTr=r(WUe,"This class cannot be instantiated directly using "),rEe=n(WUe,"CODE",{});var tPt=s(rEe);sTr=r(tPt,"__init__()"),tPt.forEach(t),lTr=r(WUe," (throws an error)."),WUe.forEach(t),iTr=i(Rl),St=n(Rl,"DIV",{class:!0});var IL=s(St);T(vx.$$.fragment,IL),dTr=i(IL),tEe=n(IL,"P",{});var aPt=s(tEe);cTr=r(aPt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aPt.forEach(t),mTr=i(IL),lc=n(IL,"P",{});var Qae=s(lc);fTr=r(Qae,`Note:
Loading a model from its configuration file does `),aEe=n(Qae,"STRONG",{});var nPt=s(aEe);gTr=r(nPt,"not"),nPt.forEach(t),hTr=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(Qae,"A",{href:!0});var sPt=s(gJ);uTr=r(sPt,"from_pretrained()"),sPt.forEach(t),pTr=r(Qae," to load the model weights."),Qae.forEach(t),_Tr=i(IL),T($4.$$.fragment,IL),IL.forEach(t),bTr=i(Rl),vo=n(Rl,"DIV",{class:!0});var Sa=s(vo);T(Fx.$$.fragment,Sa),vTr=i(Sa),nEe=n(Sa,"P",{});var lPt=s(nEe);FTr=r(lPt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lPt.forEach(t),TTr=i(Sa),dn=n(Sa,"P",{});var NL=s(dn);MTr=r(NL,"The model class to instantiate is selected based on the "),sEe=n(NL,"CODE",{});var iPt=s(sEe);ETr=r(iPt,"model_type"),iPt.forEach(t),CTr=r(NL,` property of the config object (either
passed as an argument or loaded from `),lEe=n(NL,"CODE",{});var dPt=s(lEe);wTr=r(dPt,"pretrained_model_name_or_path"),dPt.forEach(t),ATr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(NL,"CODE",{});var cPt=s(iEe);LTr=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),yTr=r(NL,":"),NL.forEach(t),xTr=i(Sa),Tx=n(Sa,"UL",{});var QUe=s(Tx);k4=n(QUe,"LI",{});var wDe=s(k4);dEe=n(wDe,"STRONG",{});var mPt=s(dEe);$Tr=r(mPt,"detr"),mPt.forEach(t),kTr=r(wDe," \u2014 "),hJ=n(wDe,"A",{href:!0});var fPt=s(hJ);STr=r(fPt,"DetrForObjectDetection"),fPt.forEach(t),RTr=r(wDe," (DETR model)"),wDe.forEach(t),PTr=i(QUe),S4=n(QUe,"LI",{});var ADe=s(S4);cEe=n(ADe,"STRONG",{});var gPt=s(cEe);BTr=r(gPt,"yolos"),gPt.forEach(t),ITr=r(ADe," \u2014 "),uJ=n(ADe,"A",{href:!0});var hPt=s(uJ);NTr=r(hPt,"YolosForObjectDetection"),hPt.forEach(t),qTr=r(ADe," (YOLOS model)"),ADe.forEach(t),QUe.forEach(t),jTr=i(Sa),R4=n(Sa,"P",{});var LDe=s(R4);DTr=r(LDe,"The model is set in evaluation mode by default using "),mEe=n(LDe,"CODE",{});var uPt=s(mEe);GTr=r(uPt,"model.eval()"),uPt.forEach(t),OTr=r(LDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fEe=n(LDe,"CODE",{});var pPt=s(fEe);VTr=r(pPt,"model.train()"),pPt.forEach(t),LDe.forEach(t),XTr=i(Sa),T(P4.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),qQe=i(m),ic=n(m,"H2",{class:!0});var HUe=s(ic);B4=n(HUe,"A",{id:!0,class:!0,href:!0});var _Pt=s(B4);gEe=n(_Pt,"SPAN",{});var bPt=s(gEe);T(Mx.$$.fragment,bPt),bPt.forEach(t),_Pt.forEach(t),zTr=i(HUe),hEe=n(HUe,"SPAN",{});var vPt=s(hEe);WTr=r(vPt,"AutoModelForImageSegmentation"),vPt.forEach(t),HUe.forEach(t),jQe=i(m),or=n(m,"DIV",{class:!0});var Pl=s(or);T(Ex.$$.fragment,Pl),QTr=i(Pl),dc=n(Pl,"P",{});var Hae=s(dc);HTr=r(Hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pJ=n(Hae,"A",{href:!0});var FPt=s(pJ);UTr=r(FPt,"from_pretrained()"),FPt.forEach(t),JTr=r(Hae," class method or the "),_J=n(Hae,"A",{href:!0});var TPt=s(_J);YTr=r(TPt,"from_config()"),TPt.forEach(t),KTr=r(Hae,` class
method.`),Hae.forEach(t),ZTr=i(Pl),Cx=n(Pl,"P",{});var UUe=s(Cx);eMr=r(UUe,"This class cannot be instantiated directly using "),uEe=n(UUe,"CODE",{});var MPt=s(uEe);oMr=r(MPt,"__init__()"),MPt.forEach(t),rMr=r(UUe," (throws an error)."),UUe.forEach(t),tMr=i(Pl),Rt=n(Pl,"DIV",{class:!0});var qL=s(Rt);T(wx.$$.fragment,qL),aMr=i(qL),pEe=n(qL,"P",{});var EPt=s(pEe);nMr=r(EPt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),EPt.forEach(t),sMr=i(qL),cc=n(qL,"P",{});var Uae=s(cc);lMr=r(Uae,`Note:
Loading a model from its configuration file does `),_Ee=n(Uae,"STRONG",{});var CPt=s(_Ee);iMr=r(CPt,"not"),CPt.forEach(t),dMr=r(Uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(Uae,"A",{href:!0});var wPt=s(bJ);cMr=r(wPt,"from_pretrained()"),wPt.forEach(t),mMr=r(Uae," to load the model weights."),Uae.forEach(t),fMr=i(qL),T(I4.$$.fragment,qL),qL.forEach(t),gMr=i(Pl),Fo=n(Pl,"DIV",{class:!0});var Ra=s(Fo);T(Ax.$$.fragment,Ra),hMr=i(Ra),bEe=n(Ra,"P",{});var APt=s(bEe);uMr=r(APt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),APt.forEach(t),pMr=i(Ra),cn=n(Ra,"P",{});var jL=s(cn);_Mr=r(jL,"The model class to instantiate is selected based on the "),vEe=n(jL,"CODE",{});var LPt=s(vEe);bMr=r(LPt,"model_type"),LPt.forEach(t),vMr=r(jL,` property of the config object (either
passed as an argument or loaded from `),FEe=n(jL,"CODE",{});var yPt=s(FEe);FMr=r(yPt,"pretrained_model_name_or_path"),yPt.forEach(t),TMr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=n(jL,"CODE",{});var xPt=s(TEe);MMr=r(xPt,"pretrained_model_name_or_path"),xPt.forEach(t),EMr=r(jL,":"),jL.forEach(t),CMr=i(Ra),MEe=n(Ra,"UL",{});var $Pt=s(MEe);N4=n($Pt,"LI",{});var yDe=s(N4);EEe=n(yDe,"STRONG",{});var kPt=s(EEe);wMr=r(kPt,"detr"),kPt.forEach(t),AMr=r(yDe," \u2014 "),vJ=n(yDe,"A",{href:!0});var SPt=s(vJ);LMr=r(SPt,"DetrForSegmentation"),SPt.forEach(t),yMr=r(yDe," (DETR model)"),yDe.forEach(t),$Pt.forEach(t),xMr=i(Ra),q4=n(Ra,"P",{});var xDe=s(q4);$Mr=r(xDe,"The model is set in evaluation mode by default using "),CEe=n(xDe,"CODE",{});var RPt=s(CEe);kMr=r(RPt,"model.eval()"),RPt.forEach(t),SMr=r(xDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wEe=n(xDe,"CODE",{});var PPt=s(wEe);RMr=r(PPt,"model.train()"),PPt.forEach(t),xDe.forEach(t),PMr=i(Ra),T(j4.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),DQe=i(m),mc=n(m,"H2",{class:!0});var JUe=s(mc);D4=n(JUe,"A",{id:!0,class:!0,href:!0});var BPt=s(D4);AEe=n(BPt,"SPAN",{});var IPt=s(AEe);T(Lx.$$.fragment,IPt),IPt.forEach(t),BPt.forEach(t),BMr=i(JUe),LEe=n(JUe,"SPAN",{});var NPt=s(LEe);IMr=r(NPt,"AutoModelForSemanticSegmentation"),NPt.forEach(t),JUe.forEach(t),GQe=i(m),rr=n(m,"DIV",{class:!0});var Bl=s(rr);T(yx.$$.fragment,Bl),NMr=i(Bl),fc=n(Bl,"P",{});var Jae=s(fc);qMr=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FJ=n(Jae,"A",{href:!0});var qPt=s(FJ);jMr=r(qPt,"from_pretrained()"),qPt.forEach(t),DMr=r(Jae," class method or the "),TJ=n(Jae,"A",{href:!0});var jPt=s(TJ);GMr=r(jPt,"from_config()"),jPt.forEach(t),OMr=r(Jae,` class
method.`),Jae.forEach(t),VMr=i(Bl),xx=n(Bl,"P",{});var YUe=s(xx);XMr=r(YUe,"This class cannot be instantiated directly using "),yEe=n(YUe,"CODE",{});var DPt=s(yEe);zMr=r(DPt,"__init__()"),DPt.forEach(t),WMr=r(YUe," (throws an error)."),YUe.forEach(t),QMr=i(Bl),Pt=n(Bl,"DIV",{class:!0});var DL=s(Pt);T($x.$$.fragment,DL),HMr=i(DL),xEe=n(DL,"P",{});var GPt=s(xEe);UMr=r(GPt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GPt.forEach(t),JMr=i(DL),gc=n(DL,"P",{});var Yae=s(gc);YMr=r(Yae,`Note:
Loading a model from its configuration file does `),$Ee=n(Yae,"STRONG",{});var OPt=s($Ee);KMr=r(OPt,"not"),OPt.forEach(t),ZMr=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Yae,"A",{href:!0});var VPt=s(MJ);eEr=r(VPt,"from_pretrained()"),VPt.forEach(t),oEr=r(Yae," to load the model weights."),Yae.forEach(t),rEr=i(DL),T(G4.$$.fragment,DL),DL.forEach(t),tEr=i(Bl),To=n(Bl,"DIV",{class:!0});var Pa=s(To);T(kx.$$.fragment,Pa),aEr=i(Pa),kEe=n(Pa,"P",{});var XPt=s(kEe);nEr=r(XPt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XPt.forEach(t),sEr=i(Pa),mn=n(Pa,"P",{});var GL=s(mn);lEr=r(GL,"The model class to instantiate is selected based on the "),SEe=n(GL,"CODE",{});var zPt=s(SEe);iEr=r(zPt,"model_type"),zPt.forEach(t),dEr=r(GL,` property of the config object (either
passed as an argument or loaded from `),REe=n(GL,"CODE",{});var WPt=s(REe);cEr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),mEr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(GL,"CODE",{});var QPt=s(PEe);fEr=r(QPt,"pretrained_model_name_or_path"),QPt.forEach(t),gEr=r(GL,":"),GL.forEach(t),hEr=i(Pa),st=n(Pa,"UL",{});var Il=s(st);O4=n(Il,"LI",{});var $De=s(O4);BEe=n($De,"STRONG",{});var HPt=s(BEe);uEr=r(HPt,"beit"),HPt.forEach(t),pEr=r($De," \u2014 "),EJ=n($De,"A",{href:!0});var UPt=s(EJ);_Er=r(UPt,"BeitForSemanticSegmentation"),UPt.forEach(t),bEr=r($De," (BEiT model)"),$De.forEach(t),vEr=i(Il),V4=n(Il,"LI",{});var kDe=s(V4);IEe=n(kDe,"STRONG",{});var JPt=s(IEe);FEr=r(JPt,"data2vec-vision"),JPt.forEach(t),TEr=r(kDe," \u2014 "),CJ=n(kDe,"A",{href:!0});var YPt=s(CJ);MEr=r(YPt,"Data2VecVisionForSemanticSegmentation"),YPt.forEach(t),EEr=r(kDe," (Data2VecVision model)"),kDe.forEach(t),CEr=i(Il),X4=n(Il,"LI",{});var SDe=s(X4);NEe=n(SDe,"STRONG",{});var KPt=s(NEe);wEr=r(KPt,"dpt"),KPt.forEach(t),AEr=r(SDe," \u2014 "),wJ=n(SDe,"A",{href:!0});var ZPt=s(wJ);LEr=r(ZPt,"DPTForSemanticSegmentation"),ZPt.forEach(t),yEr=r(SDe," (DPT model)"),SDe.forEach(t),xEr=i(Il),z4=n(Il,"LI",{});var RDe=s(z4);qEe=n(RDe,"STRONG",{});var eBt=s(qEe);$Er=r(eBt,"mobilevit"),eBt.forEach(t),kEr=r(RDe," \u2014 "),AJ=n(RDe,"A",{href:!0});var oBt=s(AJ);SEr=r(oBt,"MobileViTForSemanticSegmentation"),oBt.forEach(t),REr=r(RDe," (MobileViT model)"),RDe.forEach(t),PEr=i(Il),W4=n(Il,"LI",{});var PDe=s(W4);jEe=n(PDe,"STRONG",{});var rBt=s(jEe);BEr=r(rBt,"segformer"),rBt.forEach(t),IEr=r(PDe," \u2014 "),LJ=n(PDe,"A",{href:!0});var tBt=s(LJ);NEr=r(tBt,"SegformerForSemanticSegmentation"),tBt.forEach(t),qEr=r(PDe," (SegFormer model)"),PDe.forEach(t),Il.forEach(t),jEr=i(Pa),Q4=n(Pa,"P",{});var BDe=s(Q4);DEr=r(BDe,"The model is set in evaluation mode by default using "),DEe=n(BDe,"CODE",{});var aBt=s(DEe);GEr=r(aBt,"model.eval()"),aBt.forEach(t),OEr=r(BDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GEe=n(BDe,"CODE",{});var nBt=s(GEe);VEr=r(nBt,"model.train()"),nBt.forEach(t),BDe.forEach(t),XEr=i(Pa),T(H4.$$.fragment,Pa),Pa.forEach(t),Bl.forEach(t),OQe=i(m),hc=n(m,"H2",{class:!0});var KUe=s(hc);U4=n(KUe,"A",{id:!0,class:!0,href:!0});var sBt=s(U4);OEe=n(sBt,"SPAN",{});var lBt=s(OEe);T(Sx.$$.fragment,lBt),lBt.forEach(t),sBt.forEach(t),zEr=i(KUe),VEe=n(KUe,"SPAN",{});var iBt=s(VEe);WEr=r(iBt,"AutoModelForInstanceSegmentation"),iBt.forEach(t),KUe.forEach(t),VQe=i(m),tr=n(m,"DIV",{class:!0});var Nl=s(tr);T(Rx.$$.fragment,Nl),QEr=i(Nl),uc=n(Nl,"P",{});var Kae=s(uc);HEr=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yJ=n(Kae,"A",{href:!0});var dBt=s(yJ);UEr=r(dBt,"from_pretrained()"),dBt.forEach(t),JEr=r(Kae," class method or the "),xJ=n(Kae,"A",{href:!0});var cBt=s(xJ);YEr=r(cBt,"from_config()"),cBt.forEach(t),KEr=r(Kae,` class
method.`),Kae.forEach(t),ZEr=i(Nl),Px=n(Nl,"P",{});var ZUe=s(Px);e4r=r(ZUe,"This class cannot be instantiated directly using "),XEe=n(ZUe,"CODE",{});var mBt=s(XEe);o4r=r(mBt,"__init__()"),mBt.forEach(t),r4r=r(ZUe," (throws an error)."),ZUe.forEach(t),t4r=i(Nl),Bt=n(Nl,"DIV",{class:!0});var OL=s(Bt);T(Bx.$$.fragment,OL),a4r=i(OL),zEe=n(OL,"P",{});var fBt=s(zEe);n4r=r(fBt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fBt.forEach(t),s4r=i(OL),pc=n(OL,"P",{});var Zae=s(pc);l4r=r(Zae,`Note:
Loading a model from its configuration file does `),WEe=n(Zae,"STRONG",{});var gBt=s(WEe);i4r=r(gBt,"not"),gBt.forEach(t),d4r=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(Zae,"A",{href:!0});var hBt=s($J);c4r=r(hBt,"from_pretrained()"),hBt.forEach(t),m4r=r(Zae," to load the model weights."),Zae.forEach(t),f4r=i(OL),T(J4.$$.fragment,OL),OL.forEach(t),g4r=i(Nl),Mo=n(Nl,"DIV",{class:!0});var Ba=s(Mo);T(Ix.$$.fragment,Ba),h4r=i(Ba),QEe=n(Ba,"P",{});var uBt=s(QEe);u4r=r(uBt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),uBt.forEach(t),p4r=i(Ba),fn=n(Ba,"P",{});var VL=s(fn);_4r=r(VL,"The model class to instantiate is selected based on the "),HEe=n(VL,"CODE",{});var pBt=s(HEe);b4r=r(pBt,"model_type"),pBt.forEach(t),v4r=r(VL,` property of the config object (either
passed as an argument or loaded from `),UEe=n(VL,"CODE",{});var _Bt=s(UEe);F4r=r(_Bt,"pretrained_model_name_or_path"),_Bt.forEach(t),T4r=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(VL,"CODE",{});var bBt=s(JEe);M4r=r(bBt,"pretrained_model_name_or_path"),bBt.forEach(t),E4r=r(VL,":"),VL.forEach(t),C4r=i(Ba),YEe=n(Ba,"UL",{});var vBt=s(YEe);Y4=n(vBt,"LI",{});var IDe=s(Y4);KEe=n(IDe,"STRONG",{});var FBt=s(KEe);w4r=r(FBt,"maskformer"),FBt.forEach(t),A4r=r(IDe," \u2014 "),kJ=n(IDe,"A",{href:!0});var TBt=s(kJ);L4r=r(TBt,"MaskFormerForInstanceSegmentation"),TBt.forEach(t),y4r=r(IDe," (MaskFormer model)"),IDe.forEach(t),vBt.forEach(t),x4r=i(Ba),K4=n(Ba,"P",{});var NDe=s(K4);$4r=r(NDe,"The model is set in evaluation mode by default using "),ZEe=n(NDe,"CODE",{});var MBt=s(ZEe);k4r=r(MBt,"model.eval()"),MBt.forEach(t),S4r=r(NDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e4e=n(NDe,"CODE",{});var EBt=s(e4e);R4r=r(EBt,"model.train()"),EBt.forEach(t),NDe.forEach(t),P4r=i(Ba),T(Z4.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),XQe=i(m),_c=n(m,"H2",{class:!0});var eJe=s(_c);eC=n(eJe,"A",{id:!0,class:!0,href:!0});var CBt=s(eC);o4e=n(CBt,"SPAN",{});var wBt=s(o4e);T(Nx.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),B4r=i(eJe),r4e=n(eJe,"SPAN",{});var ABt=s(r4e);I4r=r(ABt,"TFAutoModel"),ABt.forEach(t),eJe.forEach(t),zQe=i(m),ar=n(m,"DIV",{class:!0});var ql=s(ar);T(qx.$$.fragment,ql),N4r=i(ql),bc=n(ql,"P",{});var ene=s(bc);q4r=r(ene,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SJ=n(ene,"A",{href:!0});var LBt=s(SJ);j4r=r(LBt,"from_pretrained()"),LBt.forEach(t),D4r=r(ene," class method or the "),RJ=n(ene,"A",{href:!0});var yBt=s(RJ);G4r=r(yBt,"from_config()"),yBt.forEach(t),O4r=r(ene,` class
method.`),ene.forEach(t),V4r=i(ql),jx=n(ql,"P",{});var oJe=s(jx);X4r=r(oJe,"This class cannot be instantiated directly using "),t4e=n(oJe,"CODE",{});var xBt=s(t4e);z4r=r(xBt,"__init__()"),xBt.forEach(t),W4r=r(oJe," (throws an error)."),oJe.forEach(t),Q4r=i(ql),It=n(ql,"DIV",{class:!0});var XL=s(It);T(Dx.$$.fragment,XL),H4r=i(XL),a4e=n(XL,"P",{});var $Bt=s(a4e);U4r=r($Bt,"Instantiates one of the base model classes of the library from a configuration."),$Bt.forEach(t),J4r=i(XL),vc=n(XL,"P",{});var one=s(vc);Y4r=r(one,`Note:
Loading a model from its configuration file does `),n4e=n(one,"STRONG",{});var kBt=s(n4e);K4r=r(kBt,"not"),kBt.forEach(t),Z4r=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(one,"A",{href:!0});var SBt=s(PJ);eCr=r(SBt,"from_pretrained()"),SBt.forEach(t),oCr=r(one," to load the model weights."),one.forEach(t),rCr=i(XL),T(oC.$$.fragment,XL),XL.forEach(t),tCr=i(ql),Sr=n(ql,"DIV",{class:!0});var jl=s(Sr);T(Gx.$$.fragment,jl),aCr=i(jl),s4e=n(jl,"P",{});var RBt=s(s4e);nCr=r(RBt,"Instantiate one of the base model classes of the library from a pretrained model."),RBt.forEach(t),sCr=i(jl),gn=n(jl,"P",{});var zL=s(gn);lCr=r(zL,"The model class to instantiate is selected based on the "),l4e=n(zL,"CODE",{});var PBt=s(l4e);iCr=r(PBt,"model_type"),PBt.forEach(t),dCr=r(zL,` property of the config object (either
passed as an argument or loaded from `),i4e=n(zL,"CODE",{});var BBt=s(i4e);cCr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),mCr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=n(zL,"CODE",{});var IBt=s(d4e);fCr=r(IBt,"pretrained_model_name_or_path"),IBt.forEach(t),gCr=r(zL,":"),zL.forEach(t),hCr=i(jl),q=n(jl,"UL",{});var D=s(q);rC=n(D,"LI",{});var qDe=s(rC);c4e=n(qDe,"STRONG",{});var NBt=s(c4e);uCr=r(NBt,"albert"),NBt.forEach(t),pCr=r(qDe," \u2014 "),BJ=n(qDe,"A",{href:!0});var qBt=s(BJ);_Cr=r(qBt,"TFAlbertModel"),qBt.forEach(t),bCr=r(qDe," (ALBERT model)"),qDe.forEach(t),vCr=i(D),tC=n(D,"LI",{});var jDe=s(tC);m4e=n(jDe,"STRONG",{});var jBt=s(m4e);FCr=r(jBt,"bart"),jBt.forEach(t),TCr=r(jDe," \u2014 "),IJ=n(jDe,"A",{href:!0});var DBt=s(IJ);MCr=r(DBt,"TFBartModel"),DBt.forEach(t),ECr=r(jDe," (BART model)"),jDe.forEach(t),CCr=i(D),aC=n(D,"LI",{});var DDe=s(aC);f4e=n(DDe,"STRONG",{});var GBt=s(f4e);wCr=r(GBt,"bert"),GBt.forEach(t),ACr=r(DDe," \u2014 "),NJ=n(DDe,"A",{href:!0});var OBt=s(NJ);LCr=r(OBt,"TFBertModel"),OBt.forEach(t),yCr=r(DDe," (BERT model)"),DDe.forEach(t),xCr=i(D),nC=n(D,"LI",{});var GDe=s(nC);g4e=n(GDe,"STRONG",{});var VBt=s(g4e);$Cr=r(VBt,"blenderbot"),VBt.forEach(t),kCr=r(GDe," \u2014 "),qJ=n(GDe,"A",{href:!0});var XBt=s(qJ);SCr=r(XBt,"TFBlenderbotModel"),XBt.forEach(t),RCr=r(GDe," (Blenderbot model)"),GDe.forEach(t),PCr=i(D),sC=n(D,"LI",{});var ODe=s(sC);h4e=n(ODe,"STRONG",{});var zBt=s(h4e);BCr=r(zBt,"blenderbot-small"),zBt.forEach(t),ICr=r(ODe," \u2014 "),jJ=n(ODe,"A",{href:!0});var WBt=s(jJ);NCr=r(WBt,"TFBlenderbotSmallModel"),WBt.forEach(t),qCr=r(ODe," (BlenderbotSmall model)"),ODe.forEach(t),jCr=i(D),lC=n(D,"LI",{});var VDe=s(lC);u4e=n(VDe,"STRONG",{});var QBt=s(u4e);DCr=r(QBt,"camembert"),QBt.forEach(t),GCr=r(VDe," \u2014 "),DJ=n(VDe,"A",{href:!0});var HBt=s(DJ);OCr=r(HBt,"TFCamembertModel"),HBt.forEach(t),VCr=r(VDe," (CamemBERT model)"),VDe.forEach(t),XCr=i(D),iC=n(D,"LI",{});var XDe=s(iC);p4e=n(XDe,"STRONG",{});var UBt=s(p4e);zCr=r(UBt,"clip"),UBt.forEach(t),WCr=r(XDe," \u2014 "),GJ=n(XDe,"A",{href:!0});var JBt=s(GJ);QCr=r(JBt,"TFCLIPModel"),JBt.forEach(t),HCr=r(XDe," (CLIP model)"),XDe.forEach(t),UCr=i(D),dC=n(D,"LI",{});var zDe=s(dC);_4e=n(zDe,"STRONG",{});var YBt=s(_4e);JCr=r(YBt,"convbert"),YBt.forEach(t),YCr=r(zDe," \u2014 "),OJ=n(zDe,"A",{href:!0});var KBt=s(OJ);KCr=r(KBt,"TFConvBertModel"),KBt.forEach(t),ZCr=r(zDe," (ConvBERT model)"),zDe.forEach(t),e5r=i(D),cC=n(D,"LI",{});var WDe=s(cC);b4e=n(WDe,"STRONG",{});var ZBt=s(b4e);o5r=r(ZBt,"convnext"),ZBt.forEach(t),r5r=r(WDe," \u2014 "),VJ=n(WDe,"A",{href:!0});var eIt=s(VJ);t5r=r(eIt,"TFConvNextModel"),eIt.forEach(t),a5r=r(WDe," (ConvNeXT model)"),WDe.forEach(t),n5r=i(D),mC=n(D,"LI",{});var QDe=s(mC);v4e=n(QDe,"STRONG",{});var oIt=s(v4e);s5r=r(oIt,"ctrl"),oIt.forEach(t),l5r=r(QDe," \u2014 "),XJ=n(QDe,"A",{href:!0});var rIt=s(XJ);i5r=r(rIt,"TFCTRLModel"),rIt.forEach(t),d5r=r(QDe," (CTRL model)"),QDe.forEach(t),c5r=i(D),fC=n(D,"LI",{});var HDe=s(fC);F4e=n(HDe,"STRONG",{});var tIt=s(F4e);m5r=r(tIt,"data2vec-vision"),tIt.forEach(t),f5r=r(HDe," \u2014 "),zJ=n(HDe,"A",{href:!0});var aIt=s(zJ);g5r=r(aIt,"TFData2VecVisionModel"),aIt.forEach(t),h5r=r(HDe," (Data2VecVision model)"),HDe.forEach(t),u5r=i(D),gC=n(D,"LI",{});var UDe=s(gC);T4e=n(UDe,"STRONG",{});var nIt=s(T4e);p5r=r(nIt,"deberta"),nIt.forEach(t),_5r=r(UDe," \u2014 "),WJ=n(UDe,"A",{href:!0});var sIt=s(WJ);b5r=r(sIt,"TFDebertaModel"),sIt.forEach(t),v5r=r(UDe," (DeBERTa model)"),UDe.forEach(t),F5r=i(D),hC=n(D,"LI",{});var JDe=s(hC);M4e=n(JDe,"STRONG",{});var lIt=s(M4e);T5r=r(lIt,"deberta-v2"),lIt.forEach(t),M5r=r(JDe," \u2014 "),QJ=n(JDe,"A",{href:!0});var iIt=s(QJ);E5r=r(iIt,"TFDebertaV2Model"),iIt.forEach(t),C5r=r(JDe," (DeBERTa-v2 model)"),JDe.forEach(t),w5r=i(D),uC=n(D,"LI",{});var YDe=s(uC);E4e=n(YDe,"STRONG",{});var dIt=s(E4e);A5r=r(dIt,"deit"),dIt.forEach(t),L5r=r(YDe," \u2014 "),HJ=n(YDe,"A",{href:!0});var cIt=s(HJ);y5r=r(cIt,"TFDeiTModel"),cIt.forEach(t),x5r=r(YDe," (DeiT model)"),YDe.forEach(t),$5r=i(D),pC=n(D,"LI",{});var KDe=s(pC);C4e=n(KDe,"STRONG",{});var mIt=s(C4e);k5r=r(mIt,"distilbert"),mIt.forEach(t),S5r=r(KDe," \u2014 "),UJ=n(KDe,"A",{href:!0});var fIt=s(UJ);R5r=r(fIt,"TFDistilBertModel"),fIt.forEach(t),P5r=r(KDe," (DistilBERT model)"),KDe.forEach(t),B5r=i(D),_C=n(D,"LI",{});var ZDe=s(_C);w4e=n(ZDe,"STRONG",{});var gIt=s(w4e);I5r=r(gIt,"dpr"),gIt.forEach(t),N5r=r(ZDe," \u2014 "),JJ=n(ZDe,"A",{href:!0});var hIt=s(JJ);q5r=r(hIt,"TFDPRQuestionEncoder"),hIt.forEach(t),j5r=r(ZDe," (DPR model)"),ZDe.forEach(t),D5r=i(D),bC=n(D,"LI",{});var eGe=s(bC);A4e=n(eGe,"STRONG",{});var uIt=s(A4e);G5r=r(uIt,"electra"),uIt.forEach(t),O5r=r(eGe," \u2014 "),YJ=n(eGe,"A",{href:!0});var pIt=s(YJ);V5r=r(pIt,"TFElectraModel"),pIt.forEach(t),X5r=r(eGe," (ELECTRA model)"),eGe.forEach(t),z5r=i(D),vC=n(D,"LI",{});var oGe=s(vC);L4e=n(oGe,"STRONG",{});var _It=s(L4e);W5r=r(_It,"flaubert"),_It.forEach(t),Q5r=r(oGe," \u2014 "),KJ=n(oGe,"A",{href:!0});var bIt=s(KJ);H5r=r(bIt,"TFFlaubertModel"),bIt.forEach(t),U5r=r(oGe," (FlauBERT model)"),oGe.forEach(t),J5r=i(D),al=n(D,"LI",{});var yR=s(al);y4e=n(yR,"STRONG",{});var vIt=s(y4e);Y5r=r(vIt,"funnel"),vIt.forEach(t),K5r=r(yR," \u2014 "),ZJ=n(yR,"A",{href:!0});var FIt=s(ZJ);Z5r=r(FIt,"TFFunnelModel"),FIt.forEach(t),e3r=r(yR," or "),eY=n(yR,"A",{href:!0});var TIt=s(eY);o3r=r(TIt,"TFFunnelBaseModel"),TIt.forEach(t),r3r=r(yR," (Funnel Transformer model)"),yR.forEach(t),t3r=i(D),FC=n(D,"LI",{});var rGe=s(FC);x4e=n(rGe,"STRONG",{});var MIt=s(x4e);a3r=r(MIt,"gpt2"),MIt.forEach(t),n3r=r(rGe," \u2014 "),oY=n(rGe,"A",{href:!0});var EIt=s(oY);s3r=r(EIt,"TFGPT2Model"),EIt.forEach(t),l3r=r(rGe," (OpenAI GPT-2 model)"),rGe.forEach(t),i3r=i(D),TC=n(D,"LI",{});var tGe=s(TC);$4e=n(tGe,"STRONG",{});var CIt=s($4e);d3r=r(CIt,"gptj"),CIt.forEach(t),c3r=r(tGe," \u2014 "),rY=n(tGe,"A",{href:!0});var wIt=s(rY);m3r=r(wIt,"TFGPTJModel"),wIt.forEach(t),f3r=r(tGe," (GPT-J model)"),tGe.forEach(t),g3r=i(D),MC=n(D,"LI",{});var aGe=s(MC);k4e=n(aGe,"STRONG",{});var AIt=s(k4e);h3r=r(AIt,"hubert"),AIt.forEach(t),u3r=r(aGe," \u2014 "),tY=n(aGe,"A",{href:!0});var LIt=s(tY);p3r=r(LIt,"TFHubertModel"),LIt.forEach(t),_3r=r(aGe," (Hubert model)"),aGe.forEach(t),b3r=i(D),EC=n(D,"LI",{});var nGe=s(EC);S4e=n(nGe,"STRONG",{});var yIt=s(S4e);v3r=r(yIt,"layoutlm"),yIt.forEach(t),F3r=r(nGe," \u2014 "),aY=n(nGe,"A",{href:!0});var xIt=s(aY);T3r=r(xIt,"TFLayoutLMModel"),xIt.forEach(t),M3r=r(nGe," (LayoutLM model)"),nGe.forEach(t),E3r=i(D),CC=n(D,"LI",{});var sGe=s(CC);R4e=n(sGe,"STRONG",{});var $It=s(R4e);C3r=r($It,"led"),$It.forEach(t),w3r=r(sGe," \u2014 "),nY=n(sGe,"A",{href:!0});var kIt=s(nY);A3r=r(kIt,"TFLEDModel"),kIt.forEach(t),L3r=r(sGe," (LED model)"),sGe.forEach(t),y3r=i(D),wC=n(D,"LI",{});var lGe=s(wC);P4e=n(lGe,"STRONG",{});var SIt=s(P4e);x3r=r(SIt,"longformer"),SIt.forEach(t),$3r=r(lGe," \u2014 "),sY=n(lGe,"A",{href:!0});var RIt=s(sY);k3r=r(RIt,"TFLongformerModel"),RIt.forEach(t),S3r=r(lGe," (Longformer model)"),lGe.forEach(t),R3r=i(D),AC=n(D,"LI",{});var iGe=s(AC);B4e=n(iGe,"STRONG",{});var PIt=s(B4e);P3r=r(PIt,"lxmert"),PIt.forEach(t),B3r=r(iGe," \u2014 "),lY=n(iGe,"A",{href:!0});var BIt=s(lY);I3r=r(BIt,"TFLxmertModel"),BIt.forEach(t),N3r=r(iGe," (LXMERT model)"),iGe.forEach(t),q3r=i(D),LC=n(D,"LI",{});var dGe=s(LC);I4e=n(dGe,"STRONG",{});var IIt=s(I4e);j3r=r(IIt,"marian"),IIt.forEach(t),D3r=r(dGe," \u2014 "),iY=n(dGe,"A",{href:!0});var NIt=s(iY);G3r=r(NIt,"TFMarianModel"),NIt.forEach(t),O3r=r(dGe," (Marian model)"),dGe.forEach(t),V3r=i(D),yC=n(D,"LI",{});var cGe=s(yC);N4e=n(cGe,"STRONG",{});var qIt=s(N4e);X3r=r(qIt,"mbart"),qIt.forEach(t),z3r=r(cGe," \u2014 "),dY=n(cGe,"A",{href:!0});var jIt=s(dY);W3r=r(jIt,"TFMBartModel"),jIt.forEach(t),Q3r=r(cGe," (mBART model)"),cGe.forEach(t),H3r=i(D),xC=n(D,"LI",{});var mGe=s(xC);q4e=n(mGe,"STRONG",{});var DIt=s(q4e);U3r=r(DIt,"mobilebert"),DIt.forEach(t),J3r=r(mGe," \u2014 "),cY=n(mGe,"A",{href:!0});var GIt=s(cY);Y3r=r(GIt,"TFMobileBertModel"),GIt.forEach(t),K3r=r(mGe," (MobileBERT model)"),mGe.forEach(t),Z3r=i(D),$C=n(D,"LI",{});var fGe=s($C);j4e=n(fGe,"STRONG",{});var OIt=s(j4e);e0r=r(OIt,"mpnet"),OIt.forEach(t),o0r=r(fGe," \u2014 "),mY=n(fGe,"A",{href:!0});var VIt=s(mY);r0r=r(VIt,"TFMPNetModel"),VIt.forEach(t),t0r=r(fGe," (MPNet model)"),fGe.forEach(t),a0r=i(D),kC=n(D,"LI",{});var gGe=s(kC);D4e=n(gGe,"STRONG",{});var XIt=s(D4e);n0r=r(XIt,"mt5"),XIt.forEach(t),s0r=r(gGe," \u2014 "),fY=n(gGe,"A",{href:!0});var zIt=s(fY);l0r=r(zIt,"TFMT5Model"),zIt.forEach(t),i0r=r(gGe," (MT5 model)"),gGe.forEach(t),d0r=i(D),SC=n(D,"LI",{});var hGe=s(SC);G4e=n(hGe,"STRONG",{});var WIt=s(G4e);c0r=r(WIt,"openai-gpt"),WIt.forEach(t),m0r=r(hGe," \u2014 "),gY=n(hGe,"A",{href:!0});var QIt=s(gY);f0r=r(QIt,"TFOpenAIGPTModel"),QIt.forEach(t),g0r=r(hGe," (OpenAI GPT model)"),hGe.forEach(t),h0r=i(D),RC=n(D,"LI",{});var uGe=s(RC);O4e=n(uGe,"STRONG",{});var HIt=s(O4e);u0r=r(HIt,"opt"),HIt.forEach(t),p0r=r(uGe," \u2014 "),hY=n(uGe,"A",{href:!0});var UIt=s(hY);_0r=r(UIt,"TFOPTModel"),UIt.forEach(t),b0r=r(uGe," (OPT model)"),uGe.forEach(t),v0r=i(D),PC=n(D,"LI",{});var pGe=s(PC);V4e=n(pGe,"STRONG",{});var JIt=s(V4e);F0r=r(JIt,"pegasus"),JIt.forEach(t),T0r=r(pGe," \u2014 "),uY=n(pGe,"A",{href:!0});var YIt=s(uY);M0r=r(YIt,"TFPegasusModel"),YIt.forEach(t),E0r=r(pGe," (Pegasus model)"),pGe.forEach(t),C0r=i(D),BC=n(D,"LI",{});var _Ge=s(BC);X4e=n(_Ge,"STRONG",{});var KIt=s(X4e);w0r=r(KIt,"regnet"),KIt.forEach(t),A0r=r(_Ge," \u2014 "),pY=n(_Ge,"A",{href:!0});var ZIt=s(pY);L0r=r(ZIt,"TFRegNetModel"),ZIt.forEach(t),y0r=r(_Ge," (RegNet model)"),_Ge.forEach(t),x0r=i(D),IC=n(D,"LI",{});var bGe=s(IC);z4e=n(bGe,"STRONG",{});var eNt=s(z4e);$0r=r(eNt,"rembert"),eNt.forEach(t),k0r=r(bGe," \u2014 "),_Y=n(bGe,"A",{href:!0});var oNt=s(_Y);S0r=r(oNt,"TFRemBertModel"),oNt.forEach(t),R0r=r(bGe," (RemBERT model)"),bGe.forEach(t),P0r=i(D),NC=n(D,"LI",{});var vGe=s(NC);W4e=n(vGe,"STRONG",{});var rNt=s(W4e);B0r=r(rNt,"resnet"),rNt.forEach(t),I0r=r(vGe," \u2014 "),bY=n(vGe,"A",{href:!0});var tNt=s(bY);N0r=r(tNt,"TFResNetModel"),tNt.forEach(t),q0r=r(vGe," (ResNet model)"),vGe.forEach(t),j0r=i(D),qC=n(D,"LI",{});var FGe=s(qC);Q4e=n(FGe,"STRONG",{});var aNt=s(Q4e);D0r=r(aNt,"roberta"),aNt.forEach(t),G0r=r(FGe," \u2014 "),vY=n(FGe,"A",{href:!0});var nNt=s(vY);O0r=r(nNt,"TFRobertaModel"),nNt.forEach(t),V0r=r(FGe," (RoBERTa model)"),FGe.forEach(t),X0r=i(D),jC=n(D,"LI",{});var TGe=s(jC);H4e=n(TGe,"STRONG",{});var sNt=s(H4e);z0r=r(sNt,"roformer"),sNt.forEach(t),W0r=r(TGe," \u2014 "),FY=n(TGe,"A",{href:!0});var lNt=s(FY);Q0r=r(lNt,"TFRoFormerModel"),lNt.forEach(t),H0r=r(TGe," (RoFormer model)"),TGe.forEach(t),U0r=i(D),DC=n(D,"LI",{});var MGe=s(DC);U4e=n(MGe,"STRONG",{});var iNt=s(U4e);J0r=r(iNt,"segformer"),iNt.forEach(t),Y0r=r(MGe," \u2014 "),TY=n(MGe,"A",{href:!0});var dNt=s(TY);K0r=r(dNt,"TFSegformerModel"),dNt.forEach(t),Z0r=r(MGe," (SegFormer model)"),MGe.forEach(t),ewr=i(D),GC=n(D,"LI",{});var EGe=s(GC);J4e=n(EGe,"STRONG",{});var cNt=s(J4e);owr=r(cNt,"speech_to_text"),cNt.forEach(t),rwr=r(EGe," \u2014 "),MY=n(EGe,"A",{href:!0});var mNt=s(MY);twr=r(mNt,"TFSpeech2TextModel"),mNt.forEach(t),awr=r(EGe," (Speech2Text model)"),EGe.forEach(t),nwr=i(D),OC=n(D,"LI",{});var CGe=s(OC);Y4e=n(CGe,"STRONG",{});var fNt=s(Y4e);swr=r(fNt,"swin"),fNt.forEach(t),lwr=r(CGe," \u2014 "),EY=n(CGe,"A",{href:!0});var gNt=s(EY);iwr=r(gNt,"TFSwinModel"),gNt.forEach(t),dwr=r(CGe," (Swin Transformer model)"),CGe.forEach(t),cwr=i(D),VC=n(D,"LI",{});var wGe=s(VC);K4e=n(wGe,"STRONG",{});var hNt=s(K4e);mwr=r(hNt,"t5"),hNt.forEach(t),fwr=r(wGe," \u2014 "),CY=n(wGe,"A",{href:!0});var uNt=s(CY);gwr=r(uNt,"TFT5Model"),uNt.forEach(t),hwr=r(wGe," (T5 model)"),wGe.forEach(t),uwr=i(D),XC=n(D,"LI",{});var AGe=s(XC);Z4e=n(AGe,"STRONG",{});var pNt=s(Z4e);pwr=r(pNt,"tapas"),pNt.forEach(t),_wr=r(AGe," \u2014 "),wY=n(AGe,"A",{href:!0});var _Nt=s(wY);bwr=r(_Nt,"TFTapasModel"),_Nt.forEach(t),vwr=r(AGe," (TAPAS model)"),AGe.forEach(t),Fwr=i(D),zC=n(D,"LI",{});var LGe=s(zC);eCe=n(LGe,"STRONG",{});var bNt=s(eCe);Twr=r(bNt,"transfo-xl"),bNt.forEach(t),Mwr=r(LGe," \u2014 "),AY=n(LGe,"A",{href:!0});var vNt=s(AY);Ewr=r(vNt,"TFTransfoXLModel"),vNt.forEach(t),Cwr=r(LGe," (Transformer-XL model)"),LGe.forEach(t),wwr=i(D),WC=n(D,"LI",{});var yGe=s(WC);oCe=n(yGe,"STRONG",{});var FNt=s(oCe);Awr=r(FNt,"vit"),FNt.forEach(t),Lwr=r(yGe," \u2014 "),LY=n(yGe,"A",{href:!0});var TNt=s(LY);ywr=r(TNt,"TFViTModel"),TNt.forEach(t),xwr=r(yGe," (ViT model)"),yGe.forEach(t),$wr=i(D),QC=n(D,"LI",{});var xGe=s(QC);rCe=n(xGe,"STRONG",{});var MNt=s(rCe);kwr=r(MNt,"vit_mae"),MNt.forEach(t),Swr=r(xGe," \u2014 "),yY=n(xGe,"A",{href:!0});var ENt=s(yY);Rwr=r(ENt,"TFViTMAEModel"),ENt.forEach(t),Pwr=r(xGe," (ViTMAE model)"),xGe.forEach(t),Bwr=i(D),HC=n(D,"LI",{});var $Ge=s(HC);tCe=n($Ge,"STRONG",{});var CNt=s(tCe);Iwr=r(CNt,"wav2vec2"),CNt.forEach(t),Nwr=r($Ge," \u2014 "),xY=n($Ge,"A",{href:!0});var wNt=s(xY);qwr=r(wNt,"TFWav2Vec2Model"),wNt.forEach(t),jwr=r($Ge," (Wav2Vec2 model)"),$Ge.forEach(t),Dwr=i(D),UC=n(D,"LI",{});var kGe=s(UC);aCe=n(kGe,"STRONG",{});var ANt=s(aCe);Gwr=r(ANt,"xlm"),ANt.forEach(t),Owr=r(kGe," \u2014 "),$Y=n(kGe,"A",{href:!0});var LNt=s($Y);Vwr=r(LNt,"TFXLMModel"),LNt.forEach(t),Xwr=r(kGe," (XLM model)"),kGe.forEach(t),zwr=i(D),JC=n(D,"LI",{});var SGe=s(JC);nCe=n(SGe,"STRONG",{});var yNt=s(nCe);Wwr=r(yNt,"xlm-roberta"),yNt.forEach(t),Qwr=r(SGe," \u2014 "),kY=n(SGe,"A",{href:!0});var xNt=s(kY);Hwr=r(xNt,"TFXLMRobertaModel"),xNt.forEach(t),Uwr=r(SGe," (XLM-RoBERTa model)"),SGe.forEach(t),Jwr=i(D),YC=n(D,"LI",{});var RGe=s(YC);sCe=n(RGe,"STRONG",{});var $Nt=s(sCe);Ywr=r($Nt,"xlnet"),$Nt.forEach(t),Kwr=r(RGe," \u2014 "),SY=n(RGe,"A",{href:!0});var kNt=s(SY);Zwr=r(kNt,"TFXLNetModel"),kNt.forEach(t),e6r=r(RGe," (XLNet model)"),RGe.forEach(t),D.forEach(t),o6r=i(jl),T(KC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),WQe=i(m),Fc=n(m,"H2",{class:!0});var rJe=s(Fc);ZC=n(rJe,"A",{id:!0,class:!0,href:!0});var SNt=s(ZC);lCe=n(SNt,"SPAN",{});var RNt=s(lCe);T(Ox.$$.fragment,RNt),RNt.forEach(t),SNt.forEach(t),r6r=i(rJe),iCe=n(rJe,"SPAN",{});var PNt=s(iCe);t6r=r(PNt,"TFAutoModelForPreTraining"),PNt.forEach(t),rJe.forEach(t),QQe=i(m),nr=n(m,"DIV",{class:!0});var Dl=s(nr);T(Vx.$$.fragment,Dl),a6r=i(Dl),Tc=n(Dl,"P",{});var rne=s(Tc);n6r=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RY=n(rne,"A",{href:!0});var BNt=s(RY);s6r=r(BNt,"from_pretrained()"),BNt.forEach(t),l6r=r(rne," class method or the "),PY=n(rne,"A",{href:!0});var INt=s(PY);i6r=r(INt,"from_config()"),INt.forEach(t),d6r=r(rne,` class
method.`),rne.forEach(t),c6r=i(Dl),Xx=n(Dl,"P",{});var tJe=s(Xx);m6r=r(tJe,"This class cannot be instantiated directly using "),dCe=n(tJe,"CODE",{});var NNt=s(dCe);f6r=r(NNt,"__init__()"),NNt.forEach(t),g6r=r(tJe," (throws an error)."),tJe.forEach(t),h6r=i(Dl),Nt=n(Dl,"DIV",{class:!0});var WL=s(Nt);T(zx.$$.fragment,WL),u6r=i(WL),cCe=n(WL,"P",{});var qNt=s(cCe);p6r=r(qNt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qNt.forEach(t),_6r=i(WL),Mc=n(WL,"P",{});var tne=s(Mc);b6r=r(tne,`Note:
Loading a model from its configuration file does `),mCe=n(tne,"STRONG",{});var jNt=s(mCe);v6r=r(jNt,"not"),jNt.forEach(t),F6r=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(tne,"A",{href:!0});var DNt=s(BY);T6r=r(DNt,"from_pretrained()"),DNt.forEach(t),M6r=r(tne," to load the model weights."),tne.forEach(t),E6r=i(WL),T(e5.$$.fragment,WL),WL.forEach(t),C6r=i(Dl),Rr=n(Dl,"DIV",{class:!0});var Gl=s(Rr);T(Wx.$$.fragment,Gl),w6r=i(Gl),fCe=n(Gl,"P",{});var GNt=s(fCe);A6r=r(GNt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GNt.forEach(t),L6r=i(Gl),hn=n(Gl,"P",{});var QL=s(hn);y6r=r(QL,"The model class to instantiate is selected based on the "),gCe=n(QL,"CODE",{});var ONt=s(gCe);x6r=r(ONt,"model_type"),ONt.forEach(t),$6r=r(QL,` property of the config object (either
passed as an argument or loaded from `),hCe=n(QL,"CODE",{});var VNt=s(hCe);k6r=r(VNt,"pretrained_model_name_or_path"),VNt.forEach(t),S6r=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=n(QL,"CODE",{});var XNt=s(uCe);R6r=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),P6r=r(QL,":"),QL.forEach(t),B6r=i(Gl),se=n(Gl,"UL",{});var le=s(se);o5=n(le,"LI",{});var PGe=s(o5);pCe=n(PGe,"STRONG",{});var zNt=s(pCe);I6r=r(zNt,"albert"),zNt.forEach(t),N6r=r(PGe," \u2014 "),IY=n(PGe,"A",{href:!0});var WNt=s(IY);q6r=r(WNt,"TFAlbertForPreTraining"),WNt.forEach(t),j6r=r(PGe," (ALBERT model)"),PGe.forEach(t),D6r=i(le),r5=n(le,"LI",{});var BGe=s(r5);_Ce=n(BGe,"STRONG",{});var QNt=s(_Ce);G6r=r(QNt,"bart"),QNt.forEach(t),O6r=r(BGe," \u2014 "),NY=n(BGe,"A",{href:!0});var HNt=s(NY);V6r=r(HNt,"TFBartForConditionalGeneration"),HNt.forEach(t),X6r=r(BGe," (BART model)"),BGe.forEach(t),z6r=i(le),t5=n(le,"LI",{});var IGe=s(t5);bCe=n(IGe,"STRONG",{});var UNt=s(bCe);W6r=r(UNt,"bert"),UNt.forEach(t),Q6r=r(IGe," \u2014 "),qY=n(IGe,"A",{href:!0});var JNt=s(qY);H6r=r(JNt,"TFBertForPreTraining"),JNt.forEach(t),U6r=r(IGe," (BERT model)"),IGe.forEach(t),J6r=i(le),a5=n(le,"LI",{});var NGe=s(a5);vCe=n(NGe,"STRONG",{});var YNt=s(vCe);Y6r=r(YNt,"camembert"),YNt.forEach(t),K6r=r(NGe," \u2014 "),jY=n(NGe,"A",{href:!0});var KNt=s(jY);Z6r=r(KNt,"TFCamembertForMaskedLM"),KNt.forEach(t),eAr=r(NGe," (CamemBERT model)"),NGe.forEach(t),oAr=i(le),n5=n(le,"LI",{});var qGe=s(n5);FCe=n(qGe,"STRONG",{});var ZNt=s(FCe);rAr=r(ZNt,"ctrl"),ZNt.forEach(t),tAr=r(qGe," \u2014 "),DY=n(qGe,"A",{href:!0});var eqt=s(DY);aAr=r(eqt,"TFCTRLLMHeadModel"),eqt.forEach(t),nAr=r(qGe," (CTRL model)"),qGe.forEach(t),sAr=i(le),s5=n(le,"LI",{});var jGe=s(s5);TCe=n(jGe,"STRONG",{});var oqt=s(TCe);lAr=r(oqt,"distilbert"),oqt.forEach(t),iAr=r(jGe," \u2014 "),GY=n(jGe,"A",{href:!0});var rqt=s(GY);dAr=r(rqt,"TFDistilBertForMaskedLM"),rqt.forEach(t),cAr=r(jGe," (DistilBERT model)"),jGe.forEach(t),mAr=i(le),l5=n(le,"LI",{});var DGe=s(l5);MCe=n(DGe,"STRONG",{});var tqt=s(MCe);fAr=r(tqt,"electra"),tqt.forEach(t),gAr=r(DGe," \u2014 "),OY=n(DGe,"A",{href:!0});var aqt=s(OY);hAr=r(aqt,"TFElectraForPreTraining"),aqt.forEach(t),uAr=r(DGe," (ELECTRA model)"),DGe.forEach(t),pAr=i(le),i5=n(le,"LI",{});var GGe=s(i5);ECe=n(GGe,"STRONG",{});var nqt=s(ECe);_Ar=r(nqt,"flaubert"),nqt.forEach(t),bAr=r(GGe," \u2014 "),VY=n(GGe,"A",{href:!0});var sqt=s(VY);vAr=r(sqt,"TFFlaubertWithLMHeadModel"),sqt.forEach(t),FAr=r(GGe," (FlauBERT model)"),GGe.forEach(t),TAr=i(le),d5=n(le,"LI",{});var OGe=s(d5);CCe=n(OGe,"STRONG",{});var lqt=s(CCe);MAr=r(lqt,"funnel"),lqt.forEach(t),EAr=r(OGe," \u2014 "),XY=n(OGe,"A",{href:!0});var iqt=s(XY);CAr=r(iqt,"TFFunnelForPreTraining"),iqt.forEach(t),wAr=r(OGe," (Funnel Transformer model)"),OGe.forEach(t),AAr=i(le),c5=n(le,"LI",{});var VGe=s(c5);wCe=n(VGe,"STRONG",{});var dqt=s(wCe);LAr=r(dqt,"gpt2"),dqt.forEach(t),yAr=r(VGe," \u2014 "),zY=n(VGe,"A",{href:!0});var cqt=s(zY);xAr=r(cqt,"TFGPT2LMHeadModel"),cqt.forEach(t),$Ar=r(VGe," (OpenAI GPT-2 model)"),VGe.forEach(t),kAr=i(le),m5=n(le,"LI",{});var XGe=s(m5);ACe=n(XGe,"STRONG",{});var mqt=s(ACe);SAr=r(mqt,"layoutlm"),mqt.forEach(t),RAr=r(XGe," \u2014 "),WY=n(XGe,"A",{href:!0});var fqt=s(WY);PAr=r(fqt,"TFLayoutLMForMaskedLM"),fqt.forEach(t),BAr=r(XGe," (LayoutLM model)"),XGe.forEach(t),IAr=i(le),f5=n(le,"LI",{});var zGe=s(f5);LCe=n(zGe,"STRONG",{});var gqt=s(LCe);NAr=r(gqt,"lxmert"),gqt.forEach(t),qAr=r(zGe," \u2014 "),QY=n(zGe,"A",{href:!0});var hqt=s(QY);jAr=r(hqt,"TFLxmertForPreTraining"),hqt.forEach(t),DAr=r(zGe," (LXMERT model)"),zGe.forEach(t),GAr=i(le),g5=n(le,"LI",{});var WGe=s(g5);yCe=n(WGe,"STRONG",{});var uqt=s(yCe);OAr=r(uqt,"mobilebert"),uqt.forEach(t),VAr=r(WGe," \u2014 "),HY=n(WGe,"A",{href:!0});var pqt=s(HY);XAr=r(pqt,"TFMobileBertForPreTraining"),pqt.forEach(t),zAr=r(WGe," (MobileBERT model)"),WGe.forEach(t),WAr=i(le),h5=n(le,"LI",{});var QGe=s(h5);xCe=n(QGe,"STRONG",{});var _qt=s(xCe);QAr=r(_qt,"mpnet"),_qt.forEach(t),HAr=r(QGe," \u2014 "),UY=n(QGe,"A",{href:!0});var bqt=s(UY);UAr=r(bqt,"TFMPNetForMaskedLM"),bqt.forEach(t),JAr=r(QGe," (MPNet model)"),QGe.forEach(t),YAr=i(le),u5=n(le,"LI",{});var HGe=s(u5);$Ce=n(HGe,"STRONG",{});var vqt=s($Ce);KAr=r(vqt,"openai-gpt"),vqt.forEach(t),ZAr=r(HGe," \u2014 "),JY=n(HGe,"A",{href:!0});var Fqt=s(JY);e7r=r(Fqt,"TFOpenAIGPTLMHeadModel"),Fqt.forEach(t),o7r=r(HGe," (OpenAI GPT model)"),HGe.forEach(t),r7r=i(le),p5=n(le,"LI",{});var UGe=s(p5);kCe=n(UGe,"STRONG",{});var Tqt=s(kCe);t7r=r(Tqt,"roberta"),Tqt.forEach(t),a7r=r(UGe," \u2014 "),YY=n(UGe,"A",{href:!0});var Mqt=s(YY);n7r=r(Mqt,"TFRobertaForMaskedLM"),Mqt.forEach(t),s7r=r(UGe," (RoBERTa model)"),UGe.forEach(t),l7r=i(le),_5=n(le,"LI",{});var JGe=s(_5);SCe=n(JGe,"STRONG",{});var Eqt=s(SCe);i7r=r(Eqt,"t5"),Eqt.forEach(t),d7r=r(JGe," \u2014 "),KY=n(JGe,"A",{href:!0});var Cqt=s(KY);c7r=r(Cqt,"TFT5ForConditionalGeneration"),Cqt.forEach(t),m7r=r(JGe," (T5 model)"),JGe.forEach(t),f7r=i(le),b5=n(le,"LI",{});var YGe=s(b5);RCe=n(YGe,"STRONG",{});var wqt=s(RCe);g7r=r(wqt,"tapas"),wqt.forEach(t),h7r=r(YGe," \u2014 "),ZY=n(YGe,"A",{href:!0});var Aqt=s(ZY);u7r=r(Aqt,"TFTapasForMaskedLM"),Aqt.forEach(t),p7r=r(YGe," (TAPAS model)"),YGe.forEach(t),_7r=i(le),v5=n(le,"LI",{});var KGe=s(v5);PCe=n(KGe,"STRONG",{});var Lqt=s(PCe);b7r=r(Lqt,"transfo-xl"),Lqt.forEach(t),v7r=r(KGe," \u2014 "),eK=n(KGe,"A",{href:!0});var yqt=s(eK);F7r=r(yqt,"TFTransfoXLLMHeadModel"),yqt.forEach(t),T7r=r(KGe," (Transformer-XL model)"),KGe.forEach(t),M7r=i(le),F5=n(le,"LI",{});var ZGe=s(F5);BCe=n(ZGe,"STRONG",{});var xqt=s(BCe);E7r=r(xqt,"vit_mae"),xqt.forEach(t),C7r=r(ZGe," \u2014 "),oK=n(ZGe,"A",{href:!0});var $qt=s(oK);w7r=r($qt,"TFViTMAEForPreTraining"),$qt.forEach(t),A7r=r(ZGe," (ViTMAE model)"),ZGe.forEach(t),L7r=i(le),T5=n(le,"LI",{});var eOe=s(T5);ICe=n(eOe,"STRONG",{});var kqt=s(ICe);y7r=r(kqt,"xlm"),kqt.forEach(t),x7r=r(eOe," \u2014 "),rK=n(eOe,"A",{href:!0});var Sqt=s(rK);$7r=r(Sqt,"TFXLMWithLMHeadModel"),Sqt.forEach(t),k7r=r(eOe," (XLM model)"),eOe.forEach(t),S7r=i(le),M5=n(le,"LI",{});var oOe=s(M5);NCe=n(oOe,"STRONG",{});var Rqt=s(NCe);R7r=r(Rqt,"xlm-roberta"),Rqt.forEach(t),P7r=r(oOe," \u2014 "),tK=n(oOe,"A",{href:!0});var Pqt=s(tK);B7r=r(Pqt,"TFXLMRobertaForMaskedLM"),Pqt.forEach(t),I7r=r(oOe," (XLM-RoBERTa model)"),oOe.forEach(t),N7r=i(le),E5=n(le,"LI",{});var rOe=s(E5);qCe=n(rOe,"STRONG",{});var Bqt=s(qCe);q7r=r(Bqt,"xlnet"),Bqt.forEach(t),j7r=r(rOe," \u2014 "),aK=n(rOe,"A",{href:!0});var Iqt=s(aK);D7r=r(Iqt,"TFXLNetLMHeadModel"),Iqt.forEach(t),G7r=r(rOe," (XLNet model)"),rOe.forEach(t),le.forEach(t),O7r=i(Gl),T(C5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),HQe=i(m),Ec=n(m,"H2",{class:!0});var aJe=s(Ec);w5=n(aJe,"A",{id:!0,class:!0,href:!0});var Nqt=s(w5);jCe=n(Nqt,"SPAN",{});var qqt=s(jCe);T(Qx.$$.fragment,qqt),qqt.forEach(t),Nqt.forEach(t),V7r=i(aJe),DCe=n(aJe,"SPAN",{});var jqt=s(DCe);X7r=r(jqt,"TFAutoModelForCausalLM"),jqt.forEach(t),aJe.forEach(t),UQe=i(m),sr=n(m,"DIV",{class:!0});var Ol=s(sr);T(Hx.$$.fragment,Ol),z7r=i(Ol),Cc=n(Ol,"P",{});var ane=s(Cc);W7r=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nK=n(ane,"A",{href:!0});var Dqt=s(nK);Q7r=r(Dqt,"from_pretrained()"),Dqt.forEach(t),H7r=r(ane," class method or the "),sK=n(ane,"A",{href:!0});var Gqt=s(sK);U7r=r(Gqt,"from_config()"),Gqt.forEach(t),J7r=r(ane,` class
method.`),ane.forEach(t),Y7r=i(Ol),Ux=n(Ol,"P",{});var nJe=s(Ux);K7r=r(nJe,"This class cannot be instantiated directly using "),GCe=n(nJe,"CODE",{});var Oqt=s(GCe);Z7r=r(Oqt,"__init__()"),Oqt.forEach(t),eLr=r(nJe," (throws an error)."),nJe.forEach(t),oLr=i(Ol),qt=n(Ol,"DIV",{class:!0});var HL=s(qt);T(Jx.$$.fragment,HL),rLr=i(HL),OCe=n(HL,"P",{});var Vqt=s(OCe);tLr=r(Vqt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vqt.forEach(t),aLr=i(HL),wc=n(HL,"P",{});var nne=s(wc);nLr=r(nne,`Note:
Loading a model from its configuration file does `),VCe=n(nne,"STRONG",{});var Xqt=s(VCe);sLr=r(Xqt,"not"),Xqt.forEach(t),lLr=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(nne,"A",{href:!0});var zqt=s(lK);iLr=r(zqt,"from_pretrained()"),zqt.forEach(t),dLr=r(nne," to load the model weights."),nne.forEach(t),cLr=i(HL),T(A5.$$.fragment,HL),HL.forEach(t),mLr=i(Ol),Pr=n(Ol,"DIV",{class:!0});var Vl=s(Pr);T(Yx.$$.fragment,Vl),fLr=i(Vl),XCe=n(Vl,"P",{});var Wqt=s(XCe);gLr=r(Wqt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wqt.forEach(t),hLr=i(Vl),un=n(Vl,"P",{});var UL=s(un);uLr=r(UL,"The model class to instantiate is selected based on the "),zCe=n(UL,"CODE",{});var Qqt=s(zCe);pLr=r(Qqt,"model_type"),Qqt.forEach(t),_Lr=r(UL,` property of the config object (either
passed as an argument or loaded from `),WCe=n(UL,"CODE",{});var Hqt=s(WCe);bLr=r(Hqt,"pretrained_model_name_or_path"),Hqt.forEach(t),vLr=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=n(UL,"CODE",{});var Uqt=s(QCe);FLr=r(Uqt,"pretrained_model_name_or_path"),Uqt.forEach(t),TLr=r(UL,":"),UL.forEach(t),MLr=i(Vl),Me=n(Vl,"UL",{});var Ce=s(Me);L5=n(Ce,"LI",{});var tOe=s(L5);HCe=n(tOe,"STRONG",{});var Jqt=s(HCe);ELr=r(Jqt,"bert"),Jqt.forEach(t),CLr=r(tOe," \u2014 "),iK=n(tOe,"A",{href:!0});var Yqt=s(iK);wLr=r(Yqt,"TFBertLMHeadModel"),Yqt.forEach(t),ALr=r(tOe," (BERT model)"),tOe.forEach(t),LLr=i(Ce),y5=n(Ce,"LI",{});var aOe=s(y5);UCe=n(aOe,"STRONG",{});var Kqt=s(UCe);yLr=r(Kqt,"camembert"),Kqt.forEach(t),xLr=r(aOe," \u2014 "),dK=n(aOe,"A",{href:!0});var Zqt=s(dK);$Lr=r(Zqt,"TFCamembertForCausalLM"),Zqt.forEach(t),kLr=r(aOe," (CamemBERT model)"),aOe.forEach(t),SLr=i(Ce),x5=n(Ce,"LI",{});var nOe=s(x5);JCe=n(nOe,"STRONG",{});var ejt=s(JCe);RLr=r(ejt,"ctrl"),ejt.forEach(t),PLr=r(nOe," \u2014 "),cK=n(nOe,"A",{href:!0});var ojt=s(cK);BLr=r(ojt,"TFCTRLLMHeadModel"),ojt.forEach(t),ILr=r(nOe," (CTRL model)"),nOe.forEach(t),NLr=i(Ce),$5=n(Ce,"LI",{});var sOe=s($5);YCe=n(sOe,"STRONG",{});var rjt=s(YCe);qLr=r(rjt,"gpt2"),rjt.forEach(t),jLr=r(sOe," \u2014 "),mK=n(sOe,"A",{href:!0});var tjt=s(mK);DLr=r(tjt,"TFGPT2LMHeadModel"),tjt.forEach(t),GLr=r(sOe," (OpenAI GPT-2 model)"),sOe.forEach(t),OLr=i(Ce),k5=n(Ce,"LI",{});var lOe=s(k5);KCe=n(lOe,"STRONG",{});var ajt=s(KCe);VLr=r(ajt,"gptj"),ajt.forEach(t),XLr=r(lOe," \u2014 "),fK=n(lOe,"A",{href:!0});var njt=s(fK);zLr=r(njt,"TFGPTJForCausalLM"),njt.forEach(t),WLr=r(lOe," (GPT-J model)"),lOe.forEach(t),QLr=i(Ce),S5=n(Ce,"LI",{});var iOe=s(S5);ZCe=n(iOe,"STRONG",{});var sjt=s(ZCe);HLr=r(sjt,"openai-gpt"),sjt.forEach(t),ULr=r(iOe," \u2014 "),gK=n(iOe,"A",{href:!0});var ljt=s(gK);JLr=r(ljt,"TFOpenAIGPTLMHeadModel"),ljt.forEach(t),YLr=r(iOe," (OpenAI GPT model)"),iOe.forEach(t),KLr=i(Ce),R5=n(Ce,"LI",{});var dOe=s(R5);e5e=n(dOe,"STRONG",{});var ijt=s(e5e);ZLr=r(ijt,"opt"),ijt.forEach(t),eyr=r(dOe," \u2014 "),hK=n(dOe,"A",{href:!0});var djt=s(hK);oyr=r(djt,"TFOPTForCausalLM"),djt.forEach(t),ryr=r(dOe," (OPT model)"),dOe.forEach(t),tyr=i(Ce),P5=n(Ce,"LI",{});var cOe=s(P5);o5e=n(cOe,"STRONG",{});var cjt=s(o5e);ayr=r(cjt,"rembert"),cjt.forEach(t),nyr=r(cOe," \u2014 "),uK=n(cOe,"A",{href:!0});var mjt=s(uK);syr=r(mjt,"TFRemBertForCausalLM"),mjt.forEach(t),lyr=r(cOe," (RemBERT model)"),cOe.forEach(t),iyr=i(Ce),B5=n(Ce,"LI",{});var mOe=s(B5);r5e=n(mOe,"STRONG",{});var fjt=s(r5e);dyr=r(fjt,"roberta"),fjt.forEach(t),cyr=r(mOe," \u2014 "),pK=n(mOe,"A",{href:!0});var gjt=s(pK);myr=r(gjt,"TFRobertaForCausalLM"),gjt.forEach(t),fyr=r(mOe," (RoBERTa model)"),mOe.forEach(t),gyr=i(Ce),I5=n(Ce,"LI",{});var fOe=s(I5);t5e=n(fOe,"STRONG",{});var hjt=s(t5e);hyr=r(hjt,"roformer"),hjt.forEach(t),uyr=r(fOe," \u2014 "),_K=n(fOe,"A",{href:!0});var ujt=s(_K);pyr=r(ujt,"TFRoFormerForCausalLM"),ujt.forEach(t),_yr=r(fOe," (RoFormer model)"),fOe.forEach(t),byr=i(Ce),N5=n(Ce,"LI",{});var gOe=s(N5);a5e=n(gOe,"STRONG",{});var pjt=s(a5e);vyr=r(pjt,"transfo-xl"),pjt.forEach(t),Fyr=r(gOe," \u2014 "),bK=n(gOe,"A",{href:!0});var _jt=s(bK);Tyr=r(_jt,"TFTransfoXLLMHeadModel"),_jt.forEach(t),Myr=r(gOe," (Transformer-XL model)"),gOe.forEach(t),Eyr=i(Ce),q5=n(Ce,"LI",{});var hOe=s(q5);n5e=n(hOe,"STRONG",{});var bjt=s(n5e);Cyr=r(bjt,"xlm"),bjt.forEach(t),wyr=r(hOe," \u2014 "),vK=n(hOe,"A",{href:!0});var vjt=s(vK);Ayr=r(vjt,"TFXLMWithLMHeadModel"),vjt.forEach(t),Lyr=r(hOe," (XLM model)"),hOe.forEach(t),yyr=i(Ce),j5=n(Ce,"LI",{});var uOe=s(j5);s5e=n(uOe,"STRONG",{});var Fjt=s(s5e);xyr=r(Fjt,"xlnet"),Fjt.forEach(t),$yr=r(uOe," \u2014 "),FK=n(uOe,"A",{href:!0});var Tjt=s(FK);kyr=r(Tjt,"TFXLNetLMHeadModel"),Tjt.forEach(t),Syr=r(uOe," (XLNet model)"),uOe.forEach(t),Ce.forEach(t),Ryr=i(Vl),T(D5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),JQe=i(m),Ac=n(m,"H2",{class:!0});var sJe=s(Ac);G5=n(sJe,"A",{id:!0,class:!0,href:!0});var Mjt=s(G5);l5e=n(Mjt,"SPAN",{});var Ejt=s(l5e);T(Kx.$$.fragment,Ejt),Ejt.forEach(t),Mjt.forEach(t),Pyr=i(sJe),i5e=n(sJe,"SPAN",{});var Cjt=s(i5e);Byr=r(Cjt,"TFAutoModelForImageClassification"),Cjt.forEach(t),sJe.forEach(t),YQe=i(m),lr=n(m,"DIV",{class:!0});var Xl=s(lr);T(Zx.$$.fragment,Xl),Iyr=i(Xl),Lc=n(Xl,"P",{});var sne=s(Lc);Nyr=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TK=n(sne,"A",{href:!0});var wjt=s(TK);qyr=r(wjt,"from_pretrained()"),wjt.forEach(t),jyr=r(sne," class method or the "),MK=n(sne,"A",{href:!0});var Ajt=s(MK);Dyr=r(Ajt,"from_config()"),Ajt.forEach(t),Gyr=r(sne,` class
method.`),sne.forEach(t),Oyr=i(Xl),e$=n(Xl,"P",{});var lJe=s(e$);Vyr=r(lJe,"This class cannot be instantiated directly using "),d5e=n(lJe,"CODE",{});var Ljt=s(d5e);Xyr=r(Ljt,"__init__()"),Ljt.forEach(t),zyr=r(lJe," (throws an error)."),lJe.forEach(t),Wyr=i(Xl),jt=n(Xl,"DIV",{class:!0});var JL=s(jt);T(o$.$$.fragment,JL),Qyr=i(JL),c5e=n(JL,"P",{});var yjt=s(c5e);Hyr=r(yjt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yjt.forEach(t),Uyr=i(JL),yc=n(JL,"P",{});var lne=s(yc);Jyr=r(lne,`Note:
Loading a model from its configuration file does `),m5e=n(lne,"STRONG",{});var xjt=s(m5e);Yyr=r(xjt,"not"),xjt.forEach(t),Kyr=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(lne,"A",{href:!0});var $jt=s(EK);Zyr=r($jt,"from_pretrained()"),$jt.forEach(t),e8r=r(lne," to load the model weights."),lne.forEach(t),o8r=i(JL),T(O5.$$.fragment,JL),JL.forEach(t),r8r=i(Xl),Br=n(Xl,"DIV",{class:!0});var zl=s(Br);T(r$.$$.fragment,zl),t8r=i(zl),f5e=n(zl,"P",{});var kjt=s(f5e);a8r=r(kjt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kjt.forEach(t),n8r=i(zl),pn=n(zl,"P",{});var YL=s(pn);s8r=r(YL,"The model class to instantiate is selected based on the "),g5e=n(YL,"CODE",{});var Sjt=s(g5e);l8r=r(Sjt,"model_type"),Sjt.forEach(t),i8r=r(YL,` property of the config object (either
passed as an argument or loaded from `),h5e=n(YL,"CODE",{});var Rjt=s(h5e);d8r=r(Rjt,"pretrained_model_name_or_path"),Rjt.forEach(t),c8r=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(YL,"CODE",{});var Pjt=s(u5e);m8r=r(Pjt,"pretrained_model_name_or_path"),Pjt.forEach(t),f8r=r(YL,":"),YL.forEach(t),g8r=i(zl),Ve=n(zl,"UL",{});var Eo=s(Ve);V5=n(Eo,"LI",{});var pOe=s(V5);p5e=n(pOe,"STRONG",{});var Bjt=s(p5e);h8r=r(Bjt,"convnext"),Bjt.forEach(t),u8r=r(pOe," \u2014 "),CK=n(pOe,"A",{href:!0});var Ijt=s(CK);p8r=r(Ijt,"TFConvNextForImageClassification"),Ijt.forEach(t),_8r=r(pOe," (ConvNeXT model)"),pOe.forEach(t),b8r=i(Eo),X5=n(Eo,"LI",{});var _Oe=s(X5);_5e=n(_Oe,"STRONG",{});var Njt=s(_5e);v8r=r(Njt,"data2vec-vision"),Njt.forEach(t),F8r=r(_Oe," \u2014 "),wK=n(_Oe,"A",{href:!0});var qjt=s(wK);T8r=r(qjt,"TFData2VecVisionForImageClassification"),qjt.forEach(t),M8r=r(_Oe," (Data2VecVision model)"),_Oe.forEach(t),E8r=i(Eo),nl=n(Eo,"LI",{});var xR=s(nl);b5e=n(xR,"STRONG",{});var jjt=s(b5e);C8r=r(jjt,"deit"),jjt.forEach(t),w8r=r(xR," \u2014 "),AK=n(xR,"A",{href:!0});var Djt=s(AK);A8r=r(Djt,"TFDeiTForImageClassification"),Djt.forEach(t),L8r=r(xR," or "),LK=n(xR,"A",{href:!0});var Gjt=s(LK);y8r=r(Gjt,"TFDeiTForImageClassificationWithTeacher"),Gjt.forEach(t),x8r=r(xR," (DeiT model)"),xR.forEach(t),$8r=i(Eo),z5=n(Eo,"LI",{});var bOe=s(z5);v5e=n(bOe,"STRONG",{});var Ojt=s(v5e);k8r=r(Ojt,"regnet"),Ojt.forEach(t),S8r=r(bOe," \u2014 "),yK=n(bOe,"A",{href:!0});var Vjt=s(yK);R8r=r(Vjt,"TFRegNetForImageClassification"),Vjt.forEach(t),P8r=r(bOe," (RegNet model)"),bOe.forEach(t),B8r=i(Eo),W5=n(Eo,"LI",{});var vOe=s(W5);F5e=n(vOe,"STRONG",{});var Xjt=s(F5e);I8r=r(Xjt,"resnet"),Xjt.forEach(t),N8r=r(vOe," \u2014 "),xK=n(vOe,"A",{href:!0});var zjt=s(xK);q8r=r(zjt,"TFResNetForImageClassification"),zjt.forEach(t),j8r=r(vOe," (ResNet model)"),vOe.forEach(t),D8r=i(Eo),Q5=n(Eo,"LI",{});var FOe=s(Q5);T5e=n(FOe,"STRONG",{});var Wjt=s(T5e);G8r=r(Wjt,"segformer"),Wjt.forEach(t),O8r=r(FOe," \u2014 "),$K=n(FOe,"A",{href:!0});var Qjt=s($K);V8r=r(Qjt,"TFSegformerForImageClassification"),Qjt.forEach(t),X8r=r(FOe," (SegFormer model)"),FOe.forEach(t),z8r=i(Eo),H5=n(Eo,"LI",{});var TOe=s(H5);M5e=n(TOe,"STRONG",{});var Hjt=s(M5e);W8r=r(Hjt,"swin"),Hjt.forEach(t),Q8r=r(TOe," \u2014 "),kK=n(TOe,"A",{href:!0});var Ujt=s(kK);H8r=r(Ujt,"TFSwinForImageClassification"),Ujt.forEach(t),U8r=r(TOe," (Swin Transformer model)"),TOe.forEach(t),J8r=i(Eo),U5=n(Eo,"LI",{});var MOe=s(U5);E5e=n(MOe,"STRONG",{});var Jjt=s(E5e);Y8r=r(Jjt,"vit"),Jjt.forEach(t),K8r=r(MOe," \u2014 "),SK=n(MOe,"A",{href:!0});var Yjt=s(SK);Z8r=r(Yjt,"TFViTForImageClassification"),Yjt.forEach(t),e9r=r(MOe," (ViT model)"),MOe.forEach(t),Eo.forEach(t),o9r=i(zl),T(J5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),KQe=i(m),xc=n(m,"H2",{class:!0});var iJe=s(xc);Y5=n(iJe,"A",{id:!0,class:!0,href:!0});var Kjt=s(Y5);C5e=n(Kjt,"SPAN",{});var Zjt=s(C5e);T(t$.$$.fragment,Zjt),Zjt.forEach(t),Kjt.forEach(t),r9r=i(iJe),w5e=n(iJe,"SPAN",{});var eDt=s(w5e);t9r=r(eDt,"TFAutoModelForMaskedLM"),eDt.forEach(t),iJe.forEach(t),ZQe=i(m),ir=n(m,"DIV",{class:!0});var Wl=s(ir);T(a$.$$.fragment,Wl),a9r=i(Wl),$c=n(Wl,"P",{});var ine=s($c);n9r=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RK=n(ine,"A",{href:!0});var oDt=s(RK);s9r=r(oDt,"from_pretrained()"),oDt.forEach(t),l9r=r(ine," class method or the "),PK=n(ine,"A",{href:!0});var rDt=s(PK);i9r=r(rDt,"from_config()"),rDt.forEach(t),d9r=r(ine,` class
method.`),ine.forEach(t),c9r=i(Wl),n$=n(Wl,"P",{});var dJe=s(n$);m9r=r(dJe,"This class cannot be instantiated directly using "),A5e=n(dJe,"CODE",{});var tDt=s(A5e);f9r=r(tDt,"__init__()"),tDt.forEach(t),g9r=r(dJe," (throws an error)."),dJe.forEach(t),h9r=i(Wl),Dt=n(Wl,"DIV",{class:!0});var KL=s(Dt);T(s$.$$.fragment,KL),u9r=i(KL),L5e=n(KL,"P",{});var aDt=s(L5e);p9r=r(aDt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aDt.forEach(t),_9r=i(KL),kc=n(KL,"P",{});var dne=s(kc);b9r=r(dne,`Note:
Loading a model from its configuration file does `),y5e=n(dne,"STRONG",{});var nDt=s(y5e);v9r=r(nDt,"not"),nDt.forEach(t),F9r=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(dne,"A",{href:!0});var sDt=s(BK);T9r=r(sDt,"from_pretrained()"),sDt.forEach(t),M9r=r(dne," to load the model weights."),dne.forEach(t),E9r=i(KL),T(K5.$$.fragment,KL),KL.forEach(t),C9r=i(Wl),Ir=n(Wl,"DIV",{class:!0});var Ql=s(Ir);T(l$.$$.fragment,Ql),w9r=i(Ql),x5e=n(Ql,"P",{});var lDt=s(x5e);A9r=r(lDt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lDt.forEach(t),L9r=i(Ql),_n=n(Ql,"P",{});var ZL=s(_n);y9r=r(ZL,"The model class to instantiate is selected based on the "),$5e=n(ZL,"CODE",{});var iDt=s($5e);x9r=r(iDt,"model_type"),iDt.forEach(t),$9r=r(ZL,` property of the config object (either
passed as an argument or loaded from `),k5e=n(ZL,"CODE",{});var dDt=s(k5e);k9r=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),S9r=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(ZL,"CODE",{});var cDt=s(S5e);R9r=r(cDt,"pretrained_model_name_or_path"),cDt.forEach(t),P9r=r(ZL,":"),ZL.forEach(t),B9r=i(Ql),ie=n(Ql,"UL",{});var ge=s(ie);Z5=n(ge,"LI",{});var EOe=s(Z5);R5e=n(EOe,"STRONG",{});var mDt=s(R5e);I9r=r(mDt,"albert"),mDt.forEach(t),N9r=r(EOe," \u2014 "),IK=n(EOe,"A",{href:!0});var fDt=s(IK);q9r=r(fDt,"TFAlbertForMaskedLM"),fDt.forEach(t),j9r=r(EOe," (ALBERT model)"),EOe.forEach(t),D9r=i(ge),e3=n(ge,"LI",{});var COe=s(e3);P5e=n(COe,"STRONG",{});var gDt=s(P5e);G9r=r(gDt,"bert"),gDt.forEach(t),O9r=r(COe," \u2014 "),NK=n(COe,"A",{href:!0});var hDt=s(NK);V9r=r(hDt,"TFBertForMaskedLM"),hDt.forEach(t),X9r=r(COe," (BERT model)"),COe.forEach(t),z9r=i(ge),o3=n(ge,"LI",{});var wOe=s(o3);B5e=n(wOe,"STRONG",{});var uDt=s(B5e);W9r=r(uDt,"camembert"),uDt.forEach(t),Q9r=r(wOe," \u2014 "),qK=n(wOe,"A",{href:!0});var pDt=s(qK);H9r=r(pDt,"TFCamembertForMaskedLM"),pDt.forEach(t),U9r=r(wOe," (CamemBERT model)"),wOe.forEach(t),J9r=i(ge),r3=n(ge,"LI",{});var AOe=s(r3);I5e=n(AOe,"STRONG",{});var _Dt=s(I5e);Y9r=r(_Dt,"convbert"),_Dt.forEach(t),K9r=r(AOe," \u2014 "),jK=n(AOe,"A",{href:!0});var bDt=s(jK);Z9r=r(bDt,"TFConvBertForMaskedLM"),bDt.forEach(t),exr=r(AOe," (ConvBERT model)"),AOe.forEach(t),oxr=i(ge),t3=n(ge,"LI",{});var LOe=s(t3);N5e=n(LOe,"STRONG",{});var vDt=s(N5e);rxr=r(vDt,"deberta"),vDt.forEach(t),txr=r(LOe," \u2014 "),DK=n(LOe,"A",{href:!0});var FDt=s(DK);axr=r(FDt,"TFDebertaForMaskedLM"),FDt.forEach(t),nxr=r(LOe," (DeBERTa model)"),LOe.forEach(t),sxr=i(ge),a3=n(ge,"LI",{});var yOe=s(a3);q5e=n(yOe,"STRONG",{});var TDt=s(q5e);lxr=r(TDt,"deberta-v2"),TDt.forEach(t),ixr=r(yOe," \u2014 "),GK=n(yOe,"A",{href:!0});var MDt=s(GK);dxr=r(MDt,"TFDebertaV2ForMaskedLM"),MDt.forEach(t),cxr=r(yOe," (DeBERTa-v2 model)"),yOe.forEach(t),mxr=i(ge),n3=n(ge,"LI",{});var xOe=s(n3);j5e=n(xOe,"STRONG",{});var EDt=s(j5e);fxr=r(EDt,"distilbert"),EDt.forEach(t),gxr=r(xOe," \u2014 "),OK=n(xOe,"A",{href:!0});var CDt=s(OK);hxr=r(CDt,"TFDistilBertForMaskedLM"),CDt.forEach(t),uxr=r(xOe," (DistilBERT model)"),xOe.forEach(t),pxr=i(ge),s3=n(ge,"LI",{});var $Oe=s(s3);D5e=n($Oe,"STRONG",{});var wDt=s(D5e);_xr=r(wDt,"electra"),wDt.forEach(t),bxr=r($Oe," \u2014 "),VK=n($Oe,"A",{href:!0});var ADt=s(VK);vxr=r(ADt,"TFElectraForMaskedLM"),ADt.forEach(t),Fxr=r($Oe," (ELECTRA model)"),$Oe.forEach(t),Txr=i(ge),l3=n(ge,"LI",{});var kOe=s(l3);G5e=n(kOe,"STRONG",{});var LDt=s(G5e);Mxr=r(LDt,"flaubert"),LDt.forEach(t),Exr=r(kOe," \u2014 "),XK=n(kOe,"A",{href:!0});var yDt=s(XK);Cxr=r(yDt,"TFFlaubertWithLMHeadModel"),yDt.forEach(t),wxr=r(kOe," (FlauBERT model)"),kOe.forEach(t),Axr=i(ge),i3=n(ge,"LI",{});var SOe=s(i3);O5e=n(SOe,"STRONG",{});var xDt=s(O5e);Lxr=r(xDt,"funnel"),xDt.forEach(t),yxr=r(SOe," \u2014 "),zK=n(SOe,"A",{href:!0});var $Dt=s(zK);xxr=r($Dt,"TFFunnelForMaskedLM"),$Dt.forEach(t),$xr=r(SOe," (Funnel Transformer model)"),SOe.forEach(t),kxr=i(ge),d3=n(ge,"LI",{});var ROe=s(d3);V5e=n(ROe,"STRONG",{});var kDt=s(V5e);Sxr=r(kDt,"layoutlm"),kDt.forEach(t),Rxr=r(ROe," \u2014 "),WK=n(ROe,"A",{href:!0});var SDt=s(WK);Pxr=r(SDt,"TFLayoutLMForMaskedLM"),SDt.forEach(t),Bxr=r(ROe," (LayoutLM model)"),ROe.forEach(t),Ixr=i(ge),c3=n(ge,"LI",{});var POe=s(c3);X5e=n(POe,"STRONG",{});var RDt=s(X5e);Nxr=r(RDt,"longformer"),RDt.forEach(t),qxr=r(POe," \u2014 "),QK=n(POe,"A",{href:!0});var PDt=s(QK);jxr=r(PDt,"TFLongformerForMaskedLM"),PDt.forEach(t),Dxr=r(POe," (Longformer model)"),POe.forEach(t),Gxr=i(ge),m3=n(ge,"LI",{});var BOe=s(m3);z5e=n(BOe,"STRONG",{});var BDt=s(z5e);Oxr=r(BDt,"mobilebert"),BDt.forEach(t),Vxr=r(BOe," \u2014 "),HK=n(BOe,"A",{href:!0});var IDt=s(HK);Xxr=r(IDt,"TFMobileBertForMaskedLM"),IDt.forEach(t),zxr=r(BOe," (MobileBERT model)"),BOe.forEach(t),Wxr=i(ge),f3=n(ge,"LI",{});var IOe=s(f3);W5e=n(IOe,"STRONG",{});var NDt=s(W5e);Qxr=r(NDt,"mpnet"),NDt.forEach(t),Hxr=r(IOe," \u2014 "),UK=n(IOe,"A",{href:!0});var qDt=s(UK);Uxr=r(qDt,"TFMPNetForMaskedLM"),qDt.forEach(t),Jxr=r(IOe," (MPNet model)"),IOe.forEach(t),Yxr=i(ge),g3=n(ge,"LI",{});var NOe=s(g3);Q5e=n(NOe,"STRONG",{});var jDt=s(Q5e);Kxr=r(jDt,"rembert"),jDt.forEach(t),Zxr=r(NOe," \u2014 "),JK=n(NOe,"A",{href:!0});var DDt=s(JK);e$r=r(DDt,"TFRemBertForMaskedLM"),DDt.forEach(t),o$r=r(NOe," (RemBERT model)"),NOe.forEach(t),r$r=i(ge),h3=n(ge,"LI",{});var qOe=s(h3);H5e=n(qOe,"STRONG",{});var GDt=s(H5e);t$r=r(GDt,"roberta"),GDt.forEach(t),a$r=r(qOe," \u2014 "),YK=n(qOe,"A",{href:!0});var ODt=s(YK);n$r=r(ODt,"TFRobertaForMaskedLM"),ODt.forEach(t),s$r=r(qOe," (RoBERTa model)"),qOe.forEach(t),l$r=i(ge),u3=n(ge,"LI",{});var jOe=s(u3);U5e=n(jOe,"STRONG",{});var VDt=s(U5e);i$r=r(VDt,"roformer"),VDt.forEach(t),d$r=r(jOe," \u2014 "),KK=n(jOe,"A",{href:!0});var XDt=s(KK);c$r=r(XDt,"TFRoFormerForMaskedLM"),XDt.forEach(t),m$r=r(jOe," (RoFormer model)"),jOe.forEach(t),f$r=i(ge),p3=n(ge,"LI",{});var DOe=s(p3);J5e=n(DOe,"STRONG",{});var zDt=s(J5e);g$r=r(zDt,"tapas"),zDt.forEach(t),h$r=r(DOe," \u2014 "),ZK=n(DOe,"A",{href:!0});var WDt=s(ZK);u$r=r(WDt,"TFTapasForMaskedLM"),WDt.forEach(t),p$r=r(DOe," (TAPAS model)"),DOe.forEach(t),_$r=i(ge),_3=n(ge,"LI",{});var GOe=s(_3);Y5e=n(GOe,"STRONG",{});var QDt=s(Y5e);b$r=r(QDt,"xlm"),QDt.forEach(t),v$r=r(GOe," \u2014 "),eZ=n(GOe,"A",{href:!0});var HDt=s(eZ);F$r=r(HDt,"TFXLMWithLMHeadModel"),HDt.forEach(t),T$r=r(GOe," (XLM model)"),GOe.forEach(t),M$r=i(ge),b3=n(ge,"LI",{});var OOe=s(b3);K5e=n(OOe,"STRONG",{});var UDt=s(K5e);E$r=r(UDt,"xlm-roberta"),UDt.forEach(t),C$r=r(OOe," \u2014 "),oZ=n(OOe,"A",{href:!0});var JDt=s(oZ);w$r=r(JDt,"TFXLMRobertaForMaskedLM"),JDt.forEach(t),A$r=r(OOe," (XLM-RoBERTa model)"),OOe.forEach(t),ge.forEach(t),L$r=i(Ql),T(v3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),eHe=i(m),Sc=n(m,"H2",{class:!0});var cJe=s(Sc);F3=n(cJe,"A",{id:!0,class:!0,href:!0});var YDt=s(F3);Z5e=n(YDt,"SPAN",{});var KDt=s(Z5e);T(i$.$$.fragment,KDt),KDt.forEach(t),YDt.forEach(t),y$r=i(cJe),e3e=n(cJe,"SPAN",{});var ZDt=s(e3e);x$r=r(ZDt,"TFAutoModelForSeq2SeqLM"),ZDt.forEach(t),cJe.forEach(t),oHe=i(m),dr=n(m,"DIV",{class:!0});var Hl=s(dr);T(d$.$$.fragment,Hl),$$r=i(Hl),Rc=n(Hl,"P",{});var cne=s(Rc);k$r=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rZ=n(cne,"A",{href:!0});var eGt=s(rZ);S$r=r(eGt,"from_pretrained()"),eGt.forEach(t),R$r=r(cne," class method or the "),tZ=n(cne,"A",{href:!0});var oGt=s(tZ);P$r=r(oGt,"from_config()"),oGt.forEach(t),B$r=r(cne,` class
method.`),cne.forEach(t),I$r=i(Hl),c$=n(Hl,"P",{});var mJe=s(c$);N$r=r(mJe,"This class cannot be instantiated directly using "),o3e=n(mJe,"CODE",{});var rGt=s(o3e);q$r=r(rGt,"__init__()"),rGt.forEach(t),j$r=r(mJe," (throws an error)."),mJe.forEach(t),D$r=i(Hl),Gt=n(Hl,"DIV",{class:!0});var ey=s(Gt);T(m$.$$.fragment,ey),G$r=i(ey),r3e=n(ey,"P",{});var tGt=s(r3e);O$r=r(tGt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tGt.forEach(t),V$r=i(ey),Pc=n(ey,"P",{});var mne=s(Pc);X$r=r(mne,`Note:
Loading a model from its configuration file does `),t3e=n(mne,"STRONG",{});var aGt=s(t3e);z$r=r(aGt,"not"),aGt.forEach(t),W$r=r(mne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(mne,"A",{href:!0});var nGt=s(aZ);Q$r=r(nGt,"from_pretrained()"),nGt.forEach(t),H$r=r(mne," to load the model weights."),mne.forEach(t),U$r=i(ey),T(T3.$$.fragment,ey),ey.forEach(t),J$r=i(Hl),Nr=n(Hl,"DIV",{class:!0});var Ul=s(Nr);T(f$.$$.fragment,Ul),Y$r=i(Ul),a3e=n(Ul,"P",{});var sGt=s(a3e);K$r=r(sGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sGt.forEach(t),Z$r=i(Ul),bn=n(Ul,"P",{});var oy=s(bn);ekr=r(oy,"The model class to instantiate is selected based on the "),n3e=n(oy,"CODE",{});var lGt=s(n3e);okr=r(lGt,"model_type"),lGt.forEach(t),rkr=r(oy,` property of the config object (either
passed as an argument or loaded from `),s3e=n(oy,"CODE",{});var iGt=s(s3e);tkr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),akr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=n(oy,"CODE",{});var dGt=s(l3e);nkr=r(dGt,"pretrained_model_name_or_path"),dGt.forEach(t),skr=r(oy,":"),oy.forEach(t),lkr=i(Ul),ye=n(Ul,"UL",{});var Ie=s(ye);M3=n(Ie,"LI",{});var VOe=s(M3);i3e=n(VOe,"STRONG",{});var cGt=s(i3e);ikr=r(cGt,"bart"),cGt.forEach(t),dkr=r(VOe," \u2014 "),nZ=n(VOe,"A",{href:!0});var mGt=s(nZ);ckr=r(mGt,"TFBartForConditionalGeneration"),mGt.forEach(t),mkr=r(VOe," (BART model)"),VOe.forEach(t),fkr=i(Ie),E3=n(Ie,"LI",{});var XOe=s(E3);d3e=n(XOe,"STRONG",{});var fGt=s(d3e);gkr=r(fGt,"blenderbot"),fGt.forEach(t),hkr=r(XOe," \u2014 "),sZ=n(XOe,"A",{href:!0});var gGt=s(sZ);ukr=r(gGt,"TFBlenderbotForConditionalGeneration"),gGt.forEach(t),pkr=r(XOe," (Blenderbot model)"),XOe.forEach(t),_kr=i(Ie),C3=n(Ie,"LI",{});var zOe=s(C3);c3e=n(zOe,"STRONG",{});var hGt=s(c3e);bkr=r(hGt,"blenderbot-small"),hGt.forEach(t),vkr=r(zOe," \u2014 "),lZ=n(zOe,"A",{href:!0});var uGt=s(lZ);Fkr=r(uGt,"TFBlenderbotSmallForConditionalGeneration"),uGt.forEach(t),Tkr=r(zOe," (BlenderbotSmall model)"),zOe.forEach(t),Mkr=i(Ie),w3=n(Ie,"LI",{});var WOe=s(w3);m3e=n(WOe,"STRONG",{});var pGt=s(m3e);Ekr=r(pGt,"encoder-decoder"),pGt.forEach(t),Ckr=r(WOe," \u2014 "),iZ=n(WOe,"A",{href:!0});var _Gt=s(iZ);wkr=r(_Gt,"TFEncoderDecoderModel"),_Gt.forEach(t),Akr=r(WOe," (Encoder decoder model)"),WOe.forEach(t),Lkr=i(Ie),A3=n(Ie,"LI",{});var QOe=s(A3);f3e=n(QOe,"STRONG",{});var bGt=s(f3e);ykr=r(bGt,"led"),bGt.forEach(t),xkr=r(QOe," \u2014 "),dZ=n(QOe,"A",{href:!0});var vGt=s(dZ);$kr=r(vGt,"TFLEDForConditionalGeneration"),vGt.forEach(t),kkr=r(QOe," (LED model)"),QOe.forEach(t),Skr=i(Ie),L3=n(Ie,"LI",{});var HOe=s(L3);g3e=n(HOe,"STRONG",{});var FGt=s(g3e);Rkr=r(FGt,"marian"),FGt.forEach(t),Pkr=r(HOe," \u2014 "),cZ=n(HOe,"A",{href:!0});var TGt=s(cZ);Bkr=r(TGt,"TFMarianMTModel"),TGt.forEach(t),Ikr=r(HOe," (Marian model)"),HOe.forEach(t),Nkr=i(Ie),y3=n(Ie,"LI",{});var UOe=s(y3);h3e=n(UOe,"STRONG",{});var MGt=s(h3e);qkr=r(MGt,"mbart"),MGt.forEach(t),jkr=r(UOe," \u2014 "),mZ=n(UOe,"A",{href:!0});var EGt=s(mZ);Dkr=r(EGt,"TFMBartForConditionalGeneration"),EGt.forEach(t),Gkr=r(UOe," (mBART model)"),UOe.forEach(t),Okr=i(Ie),x3=n(Ie,"LI",{});var JOe=s(x3);u3e=n(JOe,"STRONG",{});var CGt=s(u3e);Vkr=r(CGt,"mt5"),CGt.forEach(t),Xkr=r(JOe," \u2014 "),fZ=n(JOe,"A",{href:!0});var wGt=s(fZ);zkr=r(wGt,"TFMT5ForConditionalGeneration"),wGt.forEach(t),Wkr=r(JOe," (MT5 model)"),JOe.forEach(t),Qkr=i(Ie),$3=n(Ie,"LI",{});var YOe=s($3);p3e=n(YOe,"STRONG",{});var AGt=s(p3e);Hkr=r(AGt,"pegasus"),AGt.forEach(t),Ukr=r(YOe," \u2014 "),gZ=n(YOe,"A",{href:!0});var LGt=s(gZ);Jkr=r(LGt,"TFPegasusForConditionalGeneration"),LGt.forEach(t),Ykr=r(YOe," (Pegasus model)"),YOe.forEach(t),Kkr=i(Ie),k3=n(Ie,"LI",{});var KOe=s(k3);_3e=n(KOe,"STRONG",{});var yGt=s(_3e);Zkr=r(yGt,"t5"),yGt.forEach(t),eSr=r(KOe," \u2014 "),hZ=n(KOe,"A",{href:!0});var xGt=s(hZ);oSr=r(xGt,"TFT5ForConditionalGeneration"),xGt.forEach(t),rSr=r(KOe," (T5 model)"),KOe.forEach(t),Ie.forEach(t),tSr=i(Ul),T(S3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),rHe=i(m),Bc=n(m,"H2",{class:!0});var fJe=s(Bc);R3=n(fJe,"A",{id:!0,class:!0,href:!0});var $Gt=s(R3);b3e=n($Gt,"SPAN",{});var kGt=s(b3e);T(g$.$$.fragment,kGt),kGt.forEach(t),$Gt.forEach(t),aSr=i(fJe),v3e=n(fJe,"SPAN",{});var SGt=s(v3e);nSr=r(SGt,"TFAutoModelForSequenceClassification"),SGt.forEach(t),fJe.forEach(t),tHe=i(m),cr=n(m,"DIV",{class:!0});var Jl=s(cr);T(h$.$$.fragment,Jl),sSr=i(Jl),Ic=n(Jl,"P",{});var fne=s(Ic);lSr=r(fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uZ=n(fne,"A",{href:!0});var RGt=s(uZ);iSr=r(RGt,"from_pretrained()"),RGt.forEach(t),dSr=r(fne," class method or the "),pZ=n(fne,"A",{href:!0});var PGt=s(pZ);cSr=r(PGt,"from_config()"),PGt.forEach(t),mSr=r(fne,` class
method.`),fne.forEach(t),fSr=i(Jl),u$=n(Jl,"P",{});var gJe=s(u$);gSr=r(gJe,"This class cannot be instantiated directly using "),F3e=n(gJe,"CODE",{});var BGt=s(F3e);hSr=r(BGt,"__init__()"),BGt.forEach(t),uSr=r(gJe," (throws an error)."),gJe.forEach(t),pSr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var ry=s(Ot);T(p$.$$.fragment,ry),_Sr=i(ry),T3e=n(ry,"P",{});var IGt=s(T3e);bSr=r(IGt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IGt.forEach(t),vSr=i(ry),Nc=n(ry,"P",{});var gne=s(Nc);FSr=r(gne,`Note:
Loading a model from its configuration file does `),M3e=n(gne,"STRONG",{});var NGt=s(M3e);TSr=r(NGt,"not"),NGt.forEach(t),MSr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(gne,"A",{href:!0});var qGt=s(_Z);ESr=r(qGt,"from_pretrained()"),qGt.forEach(t),CSr=r(gne," to load the model weights."),gne.forEach(t),wSr=i(ry),T(P3.$$.fragment,ry),ry.forEach(t),ASr=i(Jl),qr=n(Jl,"DIV",{class:!0});var Yl=s(qr);T(_$.$$.fragment,Yl),LSr=i(Yl),E3e=n(Yl,"P",{});var jGt=s(E3e);ySr=r(jGt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jGt.forEach(t),xSr=i(Yl),vn=n(Yl,"P",{});var ty=s(vn);$Sr=r(ty,"The model class to instantiate is selected based on the "),C3e=n(ty,"CODE",{});var DGt=s(C3e);kSr=r(DGt,"model_type"),DGt.forEach(t),SSr=r(ty,` property of the config object (either
passed as an argument or loaded from `),w3e=n(ty,"CODE",{});var GGt=s(w3e);RSr=r(GGt,"pretrained_model_name_or_path"),GGt.forEach(t),PSr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=n(ty,"CODE",{});var OGt=s(A3e);BSr=r(OGt,"pretrained_model_name_or_path"),OGt.forEach(t),ISr=r(ty,":"),ty.forEach(t),NSr=i(Yl),te=n(Yl,"UL",{});var ne=s(te);B3=n(ne,"LI",{});var ZOe=s(B3);L3e=n(ZOe,"STRONG",{});var VGt=s(L3e);qSr=r(VGt,"albert"),VGt.forEach(t),jSr=r(ZOe," \u2014 "),bZ=n(ZOe,"A",{href:!0});var XGt=s(bZ);DSr=r(XGt,"TFAlbertForSequenceClassification"),XGt.forEach(t),GSr=r(ZOe," (ALBERT model)"),ZOe.forEach(t),OSr=i(ne),I3=n(ne,"LI",{});var eVe=s(I3);y3e=n(eVe,"STRONG",{});var zGt=s(y3e);VSr=r(zGt,"bert"),zGt.forEach(t),XSr=r(eVe," \u2014 "),vZ=n(eVe,"A",{href:!0});var WGt=s(vZ);zSr=r(WGt,"TFBertForSequenceClassification"),WGt.forEach(t),WSr=r(eVe," (BERT model)"),eVe.forEach(t),QSr=i(ne),N3=n(ne,"LI",{});var oVe=s(N3);x3e=n(oVe,"STRONG",{});var QGt=s(x3e);HSr=r(QGt,"camembert"),QGt.forEach(t),USr=r(oVe," \u2014 "),FZ=n(oVe,"A",{href:!0});var HGt=s(FZ);JSr=r(HGt,"TFCamembertForSequenceClassification"),HGt.forEach(t),YSr=r(oVe," (CamemBERT model)"),oVe.forEach(t),KSr=i(ne),q3=n(ne,"LI",{});var rVe=s(q3);$3e=n(rVe,"STRONG",{});var UGt=s($3e);ZSr=r(UGt,"convbert"),UGt.forEach(t),eRr=r(rVe," \u2014 "),TZ=n(rVe,"A",{href:!0});var JGt=s(TZ);oRr=r(JGt,"TFConvBertForSequenceClassification"),JGt.forEach(t),rRr=r(rVe," (ConvBERT model)"),rVe.forEach(t),tRr=i(ne),j3=n(ne,"LI",{});var tVe=s(j3);k3e=n(tVe,"STRONG",{});var YGt=s(k3e);aRr=r(YGt,"ctrl"),YGt.forEach(t),nRr=r(tVe," \u2014 "),MZ=n(tVe,"A",{href:!0});var KGt=s(MZ);sRr=r(KGt,"TFCTRLForSequenceClassification"),KGt.forEach(t),lRr=r(tVe," (CTRL model)"),tVe.forEach(t),iRr=i(ne),D3=n(ne,"LI",{});var aVe=s(D3);S3e=n(aVe,"STRONG",{});var ZGt=s(S3e);dRr=r(ZGt,"deberta"),ZGt.forEach(t),cRr=r(aVe," \u2014 "),EZ=n(aVe,"A",{href:!0});var eOt=s(EZ);mRr=r(eOt,"TFDebertaForSequenceClassification"),eOt.forEach(t),fRr=r(aVe," (DeBERTa model)"),aVe.forEach(t),gRr=i(ne),G3=n(ne,"LI",{});var nVe=s(G3);R3e=n(nVe,"STRONG",{});var oOt=s(R3e);hRr=r(oOt,"deberta-v2"),oOt.forEach(t),uRr=r(nVe," \u2014 "),CZ=n(nVe,"A",{href:!0});var rOt=s(CZ);pRr=r(rOt,"TFDebertaV2ForSequenceClassification"),rOt.forEach(t),_Rr=r(nVe," (DeBERTa-v2 model)"),nVe.forEach(t),bRr=i(ne),O3=n(ne,"LI",{});var sVe=s(O3);P3e=n(sVe,"STRONG",{});var tOt=s(P3e);vRr=r(tOt,"distilbert"),tOt.forEach(t),FRr=r(sVe," \u2014 "),wZ=n(sVe,"A",{href:!0});var aOt=s(wZ);TRr=r(aOt,"TFDistilBertForSequenceClassification"),aOt.forEach(t),MRr=r(sVe," (DistilBERT model)"),sVe.forEach(t),ERr=i(ne),V3=n(ne,"LI",{});var lVe=s(V3);B3e=n(lVe,"STRONG",{});var nOt=s(B3e);CRr=r(nOt,"electra"),nOt.forEach(t),wRr=r(lVe," \u2014 "),AZ=n(lVe,"A",{href:!0});var sOt=s(AZ);ARr=r(sOt,"TFElectraForSequenceClassification"),sOt.forEach(t),LRr=r(lVe," (ELECTRA model)"),lVe.forEach(t),yRr=i(ne),X3=n(ne,"LI",{});var iVe=s(X3);I3e=n(iVe,"STRONG",{});var lOt=s(I3e);xRr=r(lOt,"flaubert"),lOt.forEach(t),$Rr=r(iVe," \u2014 "),LZ=n(iVe,"A",{href:!0});var iOt=s(LZ);kRr=r(iOt,"TFFlaubertForSequenceClassification"),iOt.forEach(t),SRr=r(iVe," (FlauBERT model)"),iVe.forEach(t),RRr=i(ne),z3=n(ne,"LI",{});var dVe=s(z3);N3e=n(dVe,"STRONG",{});var dOt=s(N3e);PRr=r(dOt,"funnel"),dOt.forEach(t),BRr=r(dVe," \u2014 "),yZ=n(dVe,"A",{href:!0});var cOt=s(yZ);IRr=r(cOt,"TFFunnelForSequenceClassification"),cOt.forEach(t),NRr=r(dVe," (Funnel Transformer model)"),dVe.forEach(t),qRr=i(ne),W3=n(ne,"LI",{});var cVe=s(W3);q3e=n(cVe,"STRONG",{});var mOt=s(q3e);jRr=r(mOt,"gpt2"),mOt.forEach(t),DRr=r(cVe," \u2014 "),xZ=n(cVe,"A",{href:!0});var fOt=s(xZ);GRr=r(fOt,"TFGPT2ForSequenceClassification"),fOt.forEach(t),ORr=r(cVe," (OpenAI GPT-2 model)"),cVe.forEach(t),VRr=i(ne),Q3=n(ne,"LI",{});var mVe=s(Q3);j3e=n(mVe,"STRONG",{});var gOt=s(j3e);XRr=r(gOt,"gptj"),gOt.forEach(t),zRr=r(mVe," \u2014 "),$Z=n(mVe,"A",{href:!0});var hOt=s($Z);WRr=r(hOt,"TFGPTJForSequenceClassification"),hOt.forEach(t),QRr=r(mVe," (GPT-J model)"),mVe.forEach(t),HRr=i(ne),H3=n(ne,"LI",{});var fVe=s(H3);D3e=n(fVe,"STRONG",{});var uOt=s(D3e);URr=r(uOt,"layoutlm"),uOt.forEach(t),JRr=r(fVe," \u2014 "),kZ=n(fVe,"A",{href:!0});var pOt=s(kZ);YRr=r(pOt,"TFLayoutLMForSequenceClassification"),pOt.forEach(t),KRr=r(fVe," (LayoutLM model)"),fVe.forEach(t),ZRr=i(ne),U3=n(ne,"LI",{});var gVe=s(U3);G3e=n(gVe,"STRONG",{});var _Ot=s(G3e);ePr=r(_Ot,"longformer"),_Ot.forEach(t),oPr=r(gVe," \u2014 "),SZ=n(gVe,"A",{href:!0});var bOt=s(SZ);rPr=r(bOt,"TFLongformerForSequenceClassification"),bOt.forEach(t),tPr=r(gVe," (Longformer model)"),gVe.forEach(t),aPr=i(ne),J3=n(ne,"LI",{});var hVe=s(J3);O3e=n(hVe,"STRONG",{});var vOt=s(O3e);nPr=r(vOt,"mobilebert"),vOt.forEach(t),sPr=r(hVe," \u2014 "),RZ=n(hVe,"A",{href:!0});var FOt=s(RZ);lPr=r(FOt,"TFMobileBertForSequenceClassification"),FOt.forEach(t),iPr=r(hVe," (MobileBERT model)"),hVe.forEach(t),dPr=i(ne),Y3=n(ne,"LI",{});var uVe=s(Y3);V3e=n(uVe,"STRONG",{});var TOt=s(V3e);cPr=r(TOt,"mpnet"),TOt.forEach(t),mPr=r(uVe," \u2014 "),PZ=n(uVe,"A",{href:!0});var MOt=s(PZ);fPr=r(MOt,"TFMPNetForSequenceClassification"),MOt.forEach(t),gPr=r(uVe," (MPNet model)"),uVe.forEach(t),hPr=i(ne),K3=n(ne,"LI",{});var pVe=s(K3);X3e=n(pVe,"STRONG",{});var EOt=s(X3e);uPr=r(EOt,"openai-gpt"),EOt.forEach(t),pPr=r(pVe," \u2014 "),BZ=n(pVe,"A",{href:!0});var COt=s(BZ);_Pr=r(COt,"TFOpenAIGPTForSequenceClassification"),COt.forEach(t),bPr=r(pVe," (OpenAI GPT model)"),pVe.forEach(t),vPr=i(ne),Z3=n(ne,"LI",{});var _Ve=s(Z3);z3e=n(_Ve,"STRONG",{});var wOt=s(z3e);FPr=r(wOt,"rembert"),wOt.forEach(t),TPr=r(_Ve," \u2014 "),IZ=n(_Ve,"A",{href:!0});var AOt=s(IZ);MPr=r(AOt,"TFRemBertForSequenceClassification"),AOt.forEach(t),EPr=r(_Ve," (RemBERT model)"),_Ve.forEach(t),CPr=i(ne),e0=n(ne,"LI",{});var bVe=s(e0);W3e=n(bVe,"STRONG",{});var LOt=s(W3e);wPr=r(LOt,"roberta"),LOt.forEach(t),APr=r(bVe," \u2014 "),NZ=n(bVe,"A",{href:!0});var yOt=s(NZ);LPr=r(yOt,"TFRobertaForSequenceClassification"),yOt.forEach(t),yPr=r(bVe," (RoBERTa model)"),bVe.forEach(t),xPr=i(ne),o0=n(ne,"LI",{});var vVe=s(o0);Q3e=n(vVe,"STRONG",{});var xOt=s(Q3e);$Pr=r(xOt,"roformer"),xOt.forEach(t),kPr=r(vVe," \u2014 "),qZ=n(vVe,"A",{href:!0});var $Ot=s(qZ);SPr=r($Ot,"TFRoFormerForSequenceClassification"),$Ot.forEach(t),RPr=r(vVe," (RoFormer model)"),vVe.forEach(t),PPr=i(ne),r0=n(ne,"LI",{});var FVe=s(r0);H3e=n(FVe,"STRONG",{});var kOt=s(H3e);BPr=r(kOt,"tapas"),kOt.forEach(t),IPr=r(FVe," \u2014 "),jZ=n(FVe,"A",{href:!0});var SOt=s(jZ);NPr=r(SOt,"TFTapasForSequenceClassification"),SOt.forEach(t),qPr=r(FVe," (TAPAS model)"),FVe.forEach(t),jPr=i(ne),t0=n(ne,"LI",{});var TVe=s(t0);U3e=n(TVe,"STRONG",{});var ROt=s(U3e);DPr=r(ROt,"transfo-xl"),ROt.forEach(t),GPr=r(TVe," \u2014 "),DZ=n(TVe,"A",{href:!0});var POt=s(DZ);OPr=r(POt,"TFTransfoXLForSequenceClassification"),POt.forEach(t),VPr=r(TVe," (Transformer-XL model)"),TVe.forEach(t),XPr=i(ne),a0=n(ne,"LI",{});var MVe=s(a0);J3e=n(MVe,"STRONG",{});var BOt=s(J3e);zPr=r(BOt,"xlm"),BOt.forEach(t),WPr=r(MVe," \u2014 "),GZ=n(MVe,"A",{href:!0});var IOt=s(GZ);QPr=r(IOt,"TFXLMForSequenceClassification"),IOt.forEach(t),HPr=r(MVe," (XLM model)"),MVe.forEach(t),UPr=i(ne),n0=n(ne,"LI",{});var EVe=s(n0);Y3e=n(EVe,"STRONG",{});var NOt=s(Y3e);JPr=r(NOt,"xlm-roberta"),NOt.forEach(t),YPr=r(EVe," \u2014 "),OZ=n(EVe,"A",{href:!0});var qOt=s(OZ);KPr=r(qOt,"TFXLMRobertaForSequenceClassification"),qOt.forEach(t),ZPr=r(EVe," (XLM-RoBERTa model)"),EVe.forEach(t),eBr=i(ne),s0=n(ne,"LI",{});var CVe=s(s0);K3e=n(CVe,"STRONG",{});var jOt=s(K3e);oBr=r(jOt,"xlnet"),jOt.forEach(t),rBr=r(CVe," \u2014 "),VZ=n(CVe,"A",{href:!0});var DOt=s(VZ);tBr=r(DOt,"TFXLNetForSequenceClassification"),DOt.forEach(t),aBr=r(CVe," (XLNet model)"),CVe.forEach(t),ne.forEach(t),nBr=i(Yl),T(l0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),aHe=i(m),qc=n(m,"H2",{class:!0});var hJe=s(qc);i0=n(hJe,"A",{id:!0,class:!0,href:!0});var GOt=s(i0);Z3e=n(GOt,"SPAN",{});var OOt=s(Z3e);T(b$.$$.fragment,OOt),OOt.forEach(t),GOt.forEach(t),sBr=i(hJe),e0e=n(hJe,"SPAN",{});var VOt=s(e0e);lBr=r(VOt,"TFAutoModelForMultipleChoice"),VOt.forEach(t),hJe.forEach(t),nHe=i(m),mr=n(m,"DIV",{class:!0});var Kl=s(mr);T(v$.$$.fragment,Kl),iBr=i(Kl),jc=n(Kl,"P",{});var hne=s(jc);dBr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XZ=n(hne,"A",{href:!0});var XOt=s(XZ);cBr=r(XOt,"from_pretrained()"),XOt.forEach(t),mBr=r(hne," class method or the "),zZ=n(hne,"A",{href:!0});var zOt=s(zZ);fBr=r(zOt,"from_config()"),zOt.forEach(t),gBr=r(hne,` class
method.`),hne.forEach(t),hBr=i(Kl),F$=n(Kl,"P",{});var uJe=s(F$);uBr=r(uJe,"This class cannot be instantiated directly using "),o0e=n(uJe,"CODE",{});var WOt=s(o0e);pBr=r(WOt,"__init__()"),WOt.forEach(t),_Br=r(uJe," (throws an error)."),uJe.forEach(t),bBr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var ay=s(Vt);T(T$.$$.fragment,ay),vBr=i(ay),r0e=n(ay,"P",{});var QOt=s(r0e);FBr=r(QOt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QOt.forEach(t),TBr=i(ay),Dc=n(ay,"P",{});var une=s(Dc);MBr=r(une,`Note:
Loading a model from its configuration file does `),t0e=n(une,"STRONG",{});var HOt=s(t0e);EBr=r(HOt,"not"),HOt.forEach(t),CBr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(une,"A",{href:!0});var UOt=s(WZ);wBr=r(UOt,"from_pretrained()"),UOt.forEach(t),ABr=r(une," to load the model weights."),une.forEach(t),LBr=i(ay),T(d0.$$.fragment,ay),ay.forEach(t),yBr=i(Kl),jr=n(Kl,"DIV",{class:!0});var Zl=s(jr);T(M$.$$.fragment,Zl),xBr=i(Zl),a0e=n(Zl,"P",{});var JOt=s(a0e);$Br=r(JOt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JOt.forEach(t),kBr=i(Zl),Fn=n(Zl,"P",{});var ny=s(Fn);SBr=r(ny,"The model class to instantiate is selected based on the "),n0e=n(ny,"CODE",{});var YOt=s(n0e);RBr=r(YOt,"model_type"),YOt.forEach(t),PBr=r(ny,` property of the config object (either
passed as an argument or loaded from `),s0e=n(ny,"CODE",{});var KOt=s(s0e);BBr=r(KOt,"pretrained_model_name_or_path"),KOt.forEach(t),IBr=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=n(ny,"CODE",{});var ZOt=s(l0e);NBr=r(ZOt,"pretrained_model_name_or_path"),ZOt.forEach(t),qBr=r(ny,":"),ny.forEach(t),jBr=i(Zl),ve=n(Zl,"UL",{});var Te=s(ve);c0=n(Te,"LI",{});var wVe=s(c0);i0e=n(wVe,"STRONG",{});var eVt=s(i0e);DBr=r(eVt,"albert"),eVt.forEach(t),GBr=r(wVe," \u2014 "),QZ=n(wVe,"A",{href:!0});var oVt=s(QZ);OBr=r(oVt,"TFAlbertForMultipleChoice"),oVt.forEach(t),VBr=r(wVe," (ALBERT model)"),wVe.forEach(t),XBr=i(Te),m0=n(Te,"LI",{});var AVe=s(m0);d0e=n(AVe,"STRONG",{});var rVt=s(d0e);zBr=r(rVt,"bert"),rVt.forEach(t),WBr=r(AVe," \u2014 "),HZ=n(AVe,"A",{href:!0});var tVt=s(HZ);QBr=r(tVt,"TFBertForMultipleChoice"),tVt.forEach(t),HBr=r(AVe," (BERT model)"),AVe.forEach(t),UBr=i(Te),f0=n(Te,"LI",{});var LVe=s(f0);c0e=n(LVe,"STRONG",{});var aVt=s(c0e);JBr=r(aVt,"camembert"),aVt.forEach(t),YBr=r(LVe," \u2014 "),UZ=n(LVe,"A",{href:!0});var nVt=s(UZ);KBr=r(nVt,"TFCamembertForMultipleChoice"),nVt.forEach(t),ZBr=r(LVe," (CamemBERT model)"),LVe.forEach(t),eIr=i(Te),g0=n(Te,"LI",{});var yVe=s(g0);m0e=n(yVe,"STRONG",{});var sVt=s(m0e);oIr=r(sVt,"convbert"),sVt.forEach(t),rIr=r(yVe," \u2014 "),JZ=n(yVe,"A",{href:!0});var lVt=s(JZ);tIr=r(lVt,"TFConvBertForMultipleChoice"),lVt.forEach(t),aIr=r(yVe," (ConvBERT model)"),yVe.forEach(t),nIr=i(Te),h0=n(Te,"LI",{});var xVe=s(h0);f0e=n(xVe,"STRONG",{});var iVt=s(f0e);sIr=r(iVt,"distilbert"),iVt.forEach(t),lIr=r(xVe," \u2014 "),YZ=n(xVe,"A",{href:!0});var dVt=s(YZ);iIr=r(dVt,"TFDistilBertForMultipleChoice"),dVt.forEach(t),dIr=r(xVe," (DistilBERT model)"),xVe.forEach(t),cIr=i(Te),u0=n(Te,"LI",{});var $Ve=s(u0);g0e=n($Ve,"STRONG",{});var cVt=s(g0e);mIr=r(cVt,"electra"),cVt.forEach(t),fIr=r($Ve," \u2014 "),KZ=n($Ve,"A",{href:!0});var mVt=s(KZ);gIr=r(mVt,"TFElectraForMultipleChoice"),mVt.forEach(t),hIr=r($Ve," (ELECTRA model)"),$Ve.forEach(t),uIr=i(Te),p0=n(Te,"LI",{});var kVe=s(p0);h0e=n(kVe,"STRONG",{});var fVt=s(h0e);pIr=r(fVt,"flaubert"),fVt.forEach(t),_Ir=r(kVe," \u2014 "),ZZ=n(kVe,"A",{href:!0});var gVt=s(ZZ);bIr=r(gVt,"TFFlaubertForMultipleChoice"),gVt.forEach(t),vIr=r(kVe," (FlauBERT model)"),kVe.forEach(t),FIr=i(Te),_0=n(Te,"LI",{});var SVe=s(_0);u0e=n(SVe,"STRONG",{});var hVt=s(u0e);TIr=r(hVt,"funnel"),hVt.forEach(t),MIr=r(SVe," \u2014 "),eee=n(SVe,"A",{href:!0});var uVt=s(eee);EIr=r(uVt,"TFFunnelForMultipleChoice"),uVt.forEach(t),CIr=r(SVe," (Funnel Transformer model)"),SVe.forEach(t),wIr=i(Te),b0=n(Te,"LI",{});var RVe=s(b0);p0e=n(RVe,"STRONG",{});var pVt=s(p0e);AIr=r(pVt,"longformer"),pVt.forEach(t),LIr=r(RVe," \u2014 "),oee=n(RVe,"A",{href:!0});var _Vt=s(oee);yIr=r(_Vt,"TFLongformerForMultipleChoice"),_Vt.forEach(t),xIr=r(RVe," (Longformer model)"),RVe.forEach(t),$Ir=i(Te),v0=n(Te,"LI",{});var PVe=s(v0);_0e=n(PVe,"STRONG",{});var bVt=s(_0e);kIr=r(bVt,"mobilebert"),bVt.forEach(t),SIr=r(PVe," \u2014 "),ree=n(PVe,"A",{href:!0});var vVt=s(ree);RIr=r(vVt,"TFMobileBertForMultipleChoice"),vVt.forEach(t),PIr=r(PVe," (MobileBERT model)"),PVe.forEach(t),BIr=i(Te),F0=n(Te,"LI",{});var BVe=s(F0);b0e=n(BVe,"STRONG",{});var FVt=s(b0e);IIr=r(FVt,"mpnet"),FVt.forEach(t),NIr=r(BVe," \u2014 "),tee=n(BVe,"A",{href:!0});var TVt=s(tee);qIr=r(TVt,"TFMPNetForMultipleChoice"),TVt.forEach(t),jIr=r(BVe," (MPNet model)"),BVe.forEach(t),DIr=i(Te),T0=n(Te,"LI",{});var IVe=s(T0);v0e=n(IVe,"STRONG",{});var MVt=s(v0e);GIr=r(MVt,"rembert"),MVt.forEach(t),OIr=r(IVe," \u2014 "),aee=n(IVe,"A",{href:!0});var EVt=s(aee);VIr=r(EVt,"TFRemBertForMultipleChoice"),EVt.forEach(t),XIr=r(IVe," (RemBERT model)"),IVe.forEach(t),zIr=i(Te),M0=n(Te,"LI",{});var NVe=s(M0);F0e=n(NVe,"STRONG",{});var CVt=s(F0e);WIr=r(CVt,"roberta"),CVt.forEach(t),QIr=r(NVe," \u2014 "),nee=n(NVe,"A",{href:!0});var wVt=s(nee);HIr=r(wVt,"TFRobertaForMultipleChoice"),wVt.forEach(t),UIr=r(NVe," (RoBERTa model)"),NVe.forEach(t),JIr=i(Te),E0=n(Te,"LI",{});var qVe=s(E0);T0e=n(qVe,"STRONG",{});var AVt=s(T0e);YIr=r(AVt,"roformer"),AVt.forEach(t),KIr=r(qVe," \u2014 "),see=n(qVe,"A",{href:!0});var LVt=s(see);ZIr=r(LVt,"TFRoFormerForMultipleChoice"),LVt.forEach(t),eNr=r(qVe," (RoFormer model)"),qVe.forEach(t),oNr=i(Te),C0=n(Te,"LI",{});var jVe=s(C0);M0e=n(jVe,"STRONG",{});var yVt=s(M0e);rNr=r(yVt,"xlm"),yVt.forEach(t),tNr=r(jVe," \u2014 "),lee=n(jVe,"A",{href:!0});var xVt=s(lee);aNr=r(xVt,"TFXLMForMultipleChoice"),xVt.forEach(t),nNr=r(jVe," (XLM model)"),jVe.forEach(t),sNr=i(Te),w0=n(Te,"LI",{});var DVe=s(w0);E0e=n(DVe,"STRONG",{});var $Vt=s(E0e);lNr=r($Vt,"xlm-roberta"),$Vt.forEach(t),iNr=r(DVe," \u2014 "),iee=n(DVe,"A",{href:!0});var kVt=s(iee);dNr=r(kVt,"TFXLMRobertaForMultipleChoice"),kVt.forEach(t),cNr=r(DVe," (XLM-RoBERTa model)"),DVe.forEach(t),mNr=i(Te),A0=n(Te,"LI",{});var GVe=s(A0);C0e=n(GVe,"STRONG",{});var SVt=s(C0e);fNr=r(SVt,"xlnet"),SVt.forEach(t),gNr=r(GVe," \u2014 "),dee=n(GVe,"A",{href:!0});var RVt=s(dee);hNr=r(RVt,"TFXLNetForMultipleChoice"),RVt.forEach(t),uNr=r(GVe," (XLNet model)"),GVe.forEach(t),Te.forEach(t),pNr=i(Zl),T(L0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),sHe=i(m),Gc=n(m,"H2",{class:!0});var pJe=s(Gc);y0=n(pJe,"A",{id:!0,class:!0,href:!0});var PVt=s(y0);w0e=n(PVt,"SPAN",{});var BVt=s(w0e);T(E$.$$.fragment,BVt),BVt.forEach(t),PVt.forEach(t),_Nr=i(pJe),A0e=n(pJe,"SPAN",{});var IVt=s(A0e);bNr=r(IVt,"TFAutoModelForNextSentencePrediction"),IVt.forEach(t),pJe.forEach(t),lHe=i(m),fr=n(m,"DIV",{class:!0});var ei=s(fr);T(C$.$$.fragment,ei),vNr=i(ei),Oc=n(ei,"P",{});var pne=s(Oc);FNr=r(pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cee=n(pne,"A",{href:!0});var NVt=s(cee);TNr=r(NVt,"from_pretrained()"),NVt.forEach(t),MNr=r(pne," class method or the "),mee=n(pne,"A",{href:!0});var qVt=s(mee);ENr=r(qVt,"from_config()"),qVt.forEach(t),CNr=r(pne,` class
method.`),pne.forEach(t),wNr=i(ei),w$=n(ei,"P",{});var _Je=s(w$);ANr=r(_Je,"This class cannot be instantiated directly using "),L0e=n(_Je,"CODE",{});var jVt=s(L0e);LNr=r(jVt,"__init__()"),jVt.forEach(t),yNr=r(_Je," (throws an error)."),_Je.forEach(t),xNr=i(ei),Xt=n(ei,"DIV",{class:!0});var sy=s(Xt);T(A$.$$.fragment,sy),$Nr=i(sy),y0e=n(sy,"P",{});var DVt=s(y0e);kNr=r(DVt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DVt.forEach(t),SNr=i(sy),Vc=n(sy,"P",{});var _ne=s(Vc);RNr=r(_ne,`Note:
Loading a model from its configuration file does `),x0e=n(_ne,"STRONG",{});var GVt=s(x0e);PNr=r(GVt,"not"),GVt.forEach(t),BNr=r(_ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=n(_ne,"A",{href:!0});var OVt=s(fee);INr=r(OVt,"from_pretrained()"),OVt.forEach(t),NNr=r(_ne," to load the model weights."),_ne.forEach(t),qNr=i(sy),T(x0.$$.fragment,sy),sy.forEach(t),jNr=i(ei),Dr=n(ei,"DIV",{class:!0});var oi=s(Dr);T(L$.$$.fragment,oi),DNr=i(oi),$0e=n(oi,"P",{});var VVt=s($0e);GNr=r(VVt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VVt.forEach(t),ONr=i(oi),Tn=n(oi,"P",{});var ly=s(Tn);VNr=r(ly,"The model class to instantiate is selected based on the "),k0e=n(ly,"CODE",{});var XVt=s(k0e);XNr=r(XVt,"model_type"),XVt.forEach(t),zNr=r(ly,` property of the config object (either
passed as an argument or loaded from `),S0e=n(ly,"CODE",{});var zVt=s(S0e);WNr=r(zVt,"pretrained_model_name_or_path"),zVt.forEach(t),QNr=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=n(ly,"CODE",{});var WVt=s(R0e);HNr=r(WVt,"pretrained_model_name_or_path"),WVt.forEach(t),UNr=r(ly,":"),ly.forEach(t),JNr=i(oi),y$=n(oi,"UL",{});var bJe=s(y$);$0=n(bJe,"LI",{});var OVe=s($0);P0e=n(OVe,"STRONG",{});var QVt=s(P0e);YNr=r(QVt,"bert"),QVt.forEach(t),KNr=r(OVe," \u2014 "),gee=n(OVe,"A",{href:!0});var HVt=s(gee);ZNr=r(HVt,"TFBertForNextSentencePrediction"),HVt.forEach(t),eqr=r(OVe," (BERT model)"),OVe.forEach(t),oqr=i(bJe),k0=n(bJe,"LI",{});var VVe=s(k0);B0e=n(VVe,"STRONG",{});var UVt=s(B0e);rqr=r(UVt,"mobilebert"),UVt.forEach(t),tqr=r(VVe," \u2014 "),hee=n(VVe,"A",{href:!0});var JVt=s(hee);aqr=r(JVt,"TFMobileBertForNextSentencePrediction"),JVt.forEach(t),nqr=r(VVe," (MobileBERT model)"),VVe.forEach(t),bJe.forEach(t),sqr=i(oi),T(S0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),iHe=i(m),Xc=n(m,"H2",{class:!0});var vJe=s(Xc);R0=n(vJe,"A",{id:!0,class:!0,href:!0});var YVt=s(R0);I0e=n(YVt,"SPAN",{});var KVt=s(I0e);T(x$.$$.fragment,KVt),KVt.forEach(t),YVt.forEach(t),lqr=i(vJe),N0e=n(vJe,"SPAN",{});var ZVt=s(N0e);iqr=r(ZVt,"TFAutoModelForTableQuestionAnswering"),ZVt.forEach(t),vJe.forEach(t),dHe=i(m),gr=n(m,"DIV",{class:!0});var ri=s(gr);T($$.$$.fragment,ri),dqr=i(ri),zc=n(ri,"P",{});var bne=s(zc);cqr=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uee=n(bne,"A",{href:!0});var eXt=s(uee);mqr=r(eXt,"from_pretrained()"),eXt.forEach(t),fqr=r(bne," class method or the "),pee=n(bne,"A",{href:!0});var oXt=s(pee);gqr=r(oXt,"from_config()"),oXt.forEach(t),hqr=r(bne,` class
method.`),bne.forEach(t),uqr=i(ri),k$=n(ri,"P",{});var FJe=s(k$);pqr=r(FJe,"This class cannot be instantiated directly using "),q0e=n(FJe,"CODE",{});var rXt=s(q0e);_qr=r(rXt,"__init__()"),rXt.forEach(t),bqr=r(FJe," (throws an error)."),FJe.forEach(t),vqr=i(ri),zt=n(ri,"DIV",{class:!0});var iy=s(zt);T(S$.$$.fragment,iy),Fqr=i(iy),j0e=n(iy,"P",{});var tXt=s(j0e);Tqr=r(tXt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tXt.forEach(t),Mqr=i(iy),Wc=n(iy,"P",{});var vne=s(Wc);Eqr=r(vne,`Note:
Loading a model from its configuration file does `),D0e=n(vne,"STRONG",{});var aXt=s(D0e);Cqr=r(aXt,"not"),aXt.forEach(t),wqr=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(vne,"A",{href:!0});var nXt=s(_ee);Aqr=r(nXt,"from_pretrained()"),nXt.forEach(t),Lqr=r(vne," to load the model weights."),vne.forEach(t),yqr=i(iy),T(P0.$$.fragment,iy),iy.forEach(t),xqr=i(ri),Gr=n(ri,"DIV",{class:!0});var ti=s(Gr);T(R$.$$.fragment,ti),$qr=i(ti),G0e=n(ti,"P",{});var sXt=s(G0e);kqr=r(sXt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sXt.forEach(t),Sqr=i(ti),Mn=n(ti,"P",{});var dy=s(Mn);Rqr=r(dy,"The model class to instantiate is selected based on the "),O0e=n(dy,"CODE",{});var lXt=s(O0e);Pqr=r(lXt,"model_type"),lXt.forEach(t),Bqr=r(dy,` property of the config object (either
passed as an argument or loaded from `),V0e=n(dy,"CODE",{});var iXt=s(V0e);Iqr=r(iXt,"pretrained_model_name_or_path"),iXt.forEach(t),Nqr=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=n(dy,"CODE",{});var dXt=s(X0e);qqr=r(dXt,"pretrained_model_name_or_path"),dXt.forEach(t),jqr=r(dy,":"),dy.forEach(t),Dqr=i(ti),z0e=n(ti,"UL",{});var cXt=s(z0e);B0=n(cXt,"LI",{});var XVe=s(B0);W0e=n(XVe,"STRONG",{});var mXt=s(W0e);Gqr=r(mXt,"tapas"),mXt.forEach(t),Oqr=r(XVe," \u2014 "),bee=n(XVe,"A",{href:!0});var fXt=s(bee);Vqr=r(fXt,"TFTapasForQuestionAnswering"),fXt.forEach(t),Xqr=r(XVe," (TAPAS model)"),XVe.forEach(t),cXt.forEach(t),zqr=i(ti),T(I0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),cHe=i(m),Qc=n(m,"H2",{class:!0});var TJe=s(Qc);N0=n(TJe,"A",{id:!0,class:!0,href:!0});var gXt=s(N0);Q0e=n(gXt,"SPAN",{});var hXt=s(Q0e);T(P$.$$.fragment,hXt),hXt.forEach(t),gXt.forEach(t),Wqr=i(TJe),H0e=n(TJe,"SPAN",{});var uXt=s(H0e);Qqr=r(uXt,"TFAutoModelForTokenClassification"),uXt.forEach(t),TJe.forEach(t),mHe=i(m),hr=n(m,"DIV",{class:!0});var ai=s(hr);T(B$.$$.fragment,ai),Hqr=i(ai),Hc=n(ai,"P",{});var Fne=s(Hc);Uqr=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=n(Fne,"A",{href:!0});var pXt=s(vee);Jqr=r(pXt,"from_pretrained()"),pXt.forEach(t),Yqr=r(Fne," class method or the "),Fee=n(Fne,"A",{href:!0});var _Xt=s(Fee);Kqr=r(_Xt,"from_config()"),_Xt.forEach(t),Zqr=r(Fne,` class
method.`),Fne.forEach(t),ejr=i(ai),I$=n(ai,"P",{});var MJe=s(I$);ojr=r(MJe,"This class cannot be instantiated directly using "),U0e=n(MJe,"CODE",{});var bXt=s(U0e);rjr=r(bXt,"__init__()"),bXt.forEach(t),tjr=r(MJe," (throws an error)."),MJe.forEach(t),ajr=i(ai),Wt=n(ai,"DIV",{class:!0});var cy=s(Wt);T(N$.$$.fragment,cy),njr=i(cy),J0e=n(cy,"P",{});var vXt=s(J0e);sjr=r(vXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vXt.forEach(t),ljr=i(cy),Uc=n(cy,"P",{});var Tne=s(Uc);ijr=r(Tne,`Note:
Loading a model from its configuration file does `),Y0e=n(Tne,"STRONG",{});var FXt=s(Y0e);djr=r(FXt,"not"),FXt.forEach(t),cjr=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=n(Tne,"A",{href:!0});var TXt=s(Tee);mjr=r(TXt,"from_pretrained()"),TXt.forEach(t),fjr=r(Tne," to load the model weights."),Tne.forEach(t),gjr=i(cy),T(q0.$$.fragment,cy),cy.forEach(t),hjr=i(ai),Or=n(ai,"DIV",{class:!0});var ni=s(Or);T(q$.$$.fragment,ni),ujr=i(ni),K0e=n(ni,"P",{});var MXt=s(K0e);pjr=r(MXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MXt.forEach(t),_jr=i(ni),En=n(ni,"P",{});var my=s(En);bjr=r(my,"The model class to instantiate is selected based on the "),Z0e=n(my,"CODE",{});var EXt=s(Z0e);vjr=r(EXt,"model_type"),EXt.forEach(t),Fjr=r(my,` property of the config object (either
passed as an argument or loaded from `),ewe=n(my,"CODE",{});var CXt=s(ewe);Tjr=r(CXt,"pretrained_model_name_or_path"),CXt.forEach(t),Mjr=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),owe=n(my,"CODE",{});var wXt=s(owe);Ejr=r(wXt,"pretrained_model_name_or_path"),wXt.forEach(t),Cjr=r(my,":"),my.forEach(t),wjr=i(ni),de=n(ni,"UL",{});var he=s(de);j0=n(he,"LI",{});var zVe=s(j0);rwe=n(zVe,"STRONG",{});var AXt=s(rwe);Ajr=r(AXt,"albert"),AXt.forEach(t),Ljr=r(zVe," \u2014 "),Mee=n(zVe,"A",{href:!0});var LXt=s(Mee);yjr=r(LXt,"TFAlbertForTokenClassification"),LXt.forEach(t),xjr=r(zVe," (ALBERT model)"),zVe.forEach(t),$jr=i(he),D0=n(he,"LI",{});var WVe=s(D0);twe=n(WVe,"STRONG",{});var yXt=s(twe);kjr=r(yXt,"bert"),yXt.forEach(t),Sjr=r(WVe," \u2014 "),Eee=n(WVe,"A",{href:!0});var xXt=s(Eee);Rjr=r(xXt,"TFBertForTokenClassification"),xXt.forEach(t),Pjr=r(WVe," (BERT model)"),WVe.forEach(t),Bjr=i(he),G0=n(he,"LI",{});var QVe=s(G0);awe=n(QVe,"STRONG",{});var $Xt=s(awe);Ijr=r($Xt,"camembert"),$Xt.forEach(t),Njr=r(QVe," \u2014 "),Cee=n(QVe,"A",{href:!0});var kXt=s(Cee);qjr=r(kXt,"TFCamembertForTokenClassification"),kXt.forEach(t),jjr=r(QVe," (CamemBERT model)"),QVe.forEach(t),Djr=i(he),O0=n(he,"LI",{});var HVe=s(O0);nwe=n(HVe,"STRONG",{});var SXt=s(nwe);Gjr=r(SXt,"convbert"),SXt.forEach(t),Ojr=r(HVe," \u2014 "),wee=n(HVe,"A",{href:!0});var RXt=s(wee);Vjr=r(RXt,"TFConvBertForTokenClassification"),RXt.forEach(t),Xjr=r(HVe," (ConvBERT model)"),HVe.forEach(t),zjr=i(he),V0=n(he,"LI",{});var UVe=s(V0);swe=n(UVe,"STRONG",{});var PXt=s(swe);Wjr=r(PXt,"deberta"),PXt.forEach(t),Qjr=r(UVe," \u2014 "),Aee=n(UVe,"A",{href:!0});var BXt=s(Aee);Hjr=r(BXt,"TFDebertaForTokenClassification"),BXt.forEach(t),Ujr=r(UVe," (DeBERTa model)"),UVe.forEach(t),Jjr=i(he),X0=n(he,"LI",{});var JVe=s(X0);lwe=n(JVe,"STRONG",{});var IXt=s(lwe);Yjr=r(IXt,"deberta-v2"),IXt.forEach(t),Kjr=r(JVe," \u2014 "),Lee=n(JVe,"A",{href:!0});var NXt=s(Lee);Zjr=r(NXt,"TFDebertaV2ForTokenClassification"),NXt.forEach(t),eDr=r(JVe," (DeBERTa-v2 model)"),JVe.forEach(t),oDr=i(he),z0=n(he,"LI",{});var YVe=s(z0);iwe=n(YVe,"STRONG",{});var qXt=s(iwe);rDr=r(qXt,"distilbert"),qXt.forEach(t),tDr=r(YVe," \u2014 "),yee=n(YVe,"A",{href:!0});var jXt=s(yee);aDr=r(jXt,"TFDistilBertForTokenClassification"),jXt.forEach(t),nDr=r(YVe," (DistilBERT model)"),YVe.forEach(t),sDr=i(he),W0=n(he,"LI",{});var KVe=s(W0);dwe=n(KVe,"STRONG",{});var DXt=s(dwe);lDr=r(DXt,"electra"),DXt.forEach(t),iDr=r(KVe," \u2014 "),xee=n(KVe,"A",{href:!0});var GXt=s(xee);dDr=r(GXt,"TFElectraForTokenClassification"),GXt.forEach(t),cDr=r(KVe," (ELECTRA model)"),KVe.forEach(t),mDr=i(he),Q0=n(he,"LI",{});var ZVe=s(Q0);cwe=n(ZVe,"STRONG",{});var OXt=s(cwe);fDr=r(OXt,"flaubert"),OXt.forEach(t),gDr=r(ZVe," \u2014 "),$ee=n(ZVe,"A",{href:!0});var VXt=s($ee);hDr=r(VXt,"TFFlaubertForTokenClassification"),VXt.forEach(t),uDr=r(ZVe," (FlauBERT model)"),ZVe.forEach(t),pDr=i(he),H0=n(he,"LI",{});var eXe=s(H0);mwe=n(eXe,"STRONG",{});var XXt=s(mwe);_Dr=r(XXt,"funnel"),XXt.forEach(t),bDr=r(eXe," \u2014 "),kee=n(eXe,"A",{href:!0});var zXt=s(kee);vDr=r(zXt,"TFFunnelForTokenClassification"),zXt.forEach(t),FDr=r(eXe," (Funnel Transformer model)"),eXe.forEach(t),TDr=i(he),U0=n(he,"LI",{});var oXe=s(U0);fwe=n(oXe,"STRONG",{});var WXt=s(fwe);MDr=r(WXt,"layoutlm"),WXt.forEach(t),EDr=r(oXe," \u2014 "),See=n(oXe,"A",{href:!0});var QXt=s(See);CDr=r(QXt,"TFLayoutLMForTokenClassification"),QXt.forEach(t),wDr=r(oXe," (LayoutLM model)"),oXe.forEach(t),ADr=i(he),J0=n(he,"LI",{});var rXe=s(J0);gwe=n(rXe,"STRONG",{});var HXt=s(gwe);LDr=r(HXt,"longformer"),HXt.forEach(t),yDr=r(rXe," \u2014 "),Ree=n(rXe,"A",{href:!0});var UXt=s(Ree);xDr=r(UXt,"TFLongformerForTokenClassification"),UXt.forEach(t),$Dr=r(rXe," (Longformer model)"),rXe.forEach(t),kDr=i(he),Y0=n(he,"LI",{});var tXe=s(Y0);hwe=n(tXe,"STRONG",{});var JXt=s(hwe);SDr=r(JXt,"mobilebert"),JXt.forEach(t),RDr=r(tXe," \u2014 "),Pee=n(tXe,"A",{href:!0});var YXt=s(Pee);PDr=r(YXt,"TFMobileBertForTokenClassification"),YXt.forEach(t),BDr=r(tXe," (MobileBERT model)"),tXe.forEach(t),IDr=i(he),K0=n(he,"LI",{});var aXe=s(K0);uwe=n(aXe,"STRONG",{});var KXt=s(uwe);NDr=r(KXt,"mpnet"),KXt.forEach(t),qDr=r(aXe," \u2014 "),Bee=n(aXe,"A",{href:!0});var ZXt=s(Bee);jDr=r(ZXt,"TFMPNetForTokenClassification"),ZXt.forEach(t),DDr=r(aXe," (MPNet model)"),aXe.forEach(t),GDr=i(he),Z0=n(he,"LI",{});var nXe=s(Z0);pwe=n(nXe,"STRONG",{});var ezt=s(pwe);ODr=r(ezt,"rembert"),ezt.forEach(t),VDr=r(nXe," \u2014 "),Iee=n(nXe,"A",{href:!0});var ozt=s(Iee);XDr=r(ozt,"TFRemBertForTokenClassification"),ozt.forEach(t),zDr=r(nXe," (RemBERT model)"),nXe.forEach(t),WDr=i(he),ew=n(he,"LI",{});var sXe=s(ew);_we=n(sXe,"STRONG",{});var rzt=s(_we);QDr=r(rzt,"roberta"),rzt.forEach(t),HDr=r(sXe," \u2014 "),Nee=n(sXe,"A",{href:!0});var tzt=s(Nee);UDr=r(tzt,"TFRobertaForTokenClassification"),tzt.forEach(t),JDr=r(sXe," (RoBERTa model)"),sXe.forEach(t),YDr=i(he),ow=n(he,"LI",{});var lXe=s(ow);bwe=n(lXe,"STRONG",{});var azt=s(bwe);KDr=r(azt,"roformer"),azt.forEach(t),ZDr=r(lXe," \u2014 "),qee=n(lXe,"A",{href:!0});var nzt=s(qee);eGr=r(nzt,"TFRoFormerForTokenClassification"),nzt.forEach(t),oGr=r(lXe," (RoFormer model)"),lXe.forEach(t),rGr=i(he),rw=n(he,"LI",{});var iXe=s(rw);vwe=n(iXe,"STRONG",{});var szt=s(vwe);tGr=r(szt,"xlm"),szt.forEach(t),aGr=r(iXe," \u2014 "),jee=n(iXe,"A",{href:!0});var lzt=s(jee);nGr=r(lzt,"TFXLMForTokenClassification"),lzt.forEach(t),sGr=r(iXe," (XLM model)"),iXe.forEach(t),lGr=i(he),tw=n(he,"LI",{});var dXe=s(tw);Fwe=n(dXe,"STRONG",{});var izt=s(Fwe);iGr=r(izt,"xlm-roberta"),izt.forEach(t),dGr=r(dXe," \u2014 "),Dee=n(dXe,"A",{href:!0});var dzt=s(Dee);cGr=r(dzt,"TFXLMRobertaForTokenClassification"),dzt.forEach(t),mGr=r(dXe," (XLM-RoBERTa model)"),dXe.forEach(t),fGr=i(he),aw=n(he,"LI",{});var cXe=s(aw);Twe=n(cXe,"STRONG",{});var czt=s(Twe);gGr=r(czt,"xlnet"),czt.forEach(t),hGr=r(cXe," \u2014 "),Gee=n(cXe,"A",{href:!0});var mzt=s(Gee);uGr=r(mzt,"TFXLNetForTokenClassification"),mzt.forEach(t),pGr=r(cXe," (XLNet model)"),cXe.forEach(t),he.forEach(t),_Gr=i(ni),T(nw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),fHe=i(m),Jc=n(m,"H2",{class:!0});var EJe=s(Jc);sw=n(EJe,"A",{id:!0,class:!0,href:!0});var fzt=s(sw);Mwe=n(fzt,"SPAN",{});var gzt=s(Mwe);T(j$.$$.fragment,gzt),gzt.forEach(t),fzt.forEach(t),bGr=i(EJe),Ewe=n(EJe,"SPAN",{});var hzt=s(Ewe);vGr=r(hzt,"TFAutoModelForQuestionAnswering"),hzt.forEach(t),EJe.forEach(t),gHe=i(m),ur=n(m,"DIV",{class:!0});var si=s(ur);T(D$.$$.fragment,si),FGr=i(si),Yc=n(si,"P",{});var Mne=s(Yc);TGr=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oee=n(Mne,"A",{href:!0});var uzt=s(Oee);MGr=r(uzt,"from_pretrained()"),uzt.forEach(t),EGr=r(Mne," class method or the "),Vee=n(Mne,"A",{href:!0});var pzt=s(Vee);CGr=r(pzt,"from_config()"),pzt.forEach(t),wGr=r(Mne,` class
method.`),Mne.forEach(t),AGr=i(si),G$=n(si,"P",{});var CJe=s(G$);LGr=r(CJe,"This class cannot be instantiated directly using "),Cwe=n(CJe,"CODE",{});var _zt=s(Cwe);yGr=r(_zt,"__init__()"),_zt.forEach(t),xGr=r(CJe," (throws an error)."),CJe.forEach(t),$Gr=i(si),Qt=n(si,"DIV",{class:!0});var fy=s(Qt);T(O$.$$.fragment,fy),kGr=i(fy),wwe=n(fy,"P",{});var bzt=s(wwe);SGr=r(bzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bzt.forEach(t),RGr=i(fy),Kc=n(fy,"P",{});var Ene=s(Kc);PGr=r(Ene,`Note:
Loading a model from its configuration file does `),Awe=n(Ene,"STRONG",{});var vzt=s(Awe);BGr=r(vzt,"not"),vzt.forEach(t),IGr=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n(Ene,"A",{href:!0});var Fzt=s(Xee);NGr=r(Fzt,"from_pretrained()"),Fzt.forEach(t),qGr=r(Ene," to load the model weights."),Ene.forEach(t),jGr=i(fy),T(lw.$$.fragment,fy),fy.forEach(t),DGr=i(si),Vr=n(si,"DIV",{class:!0});var li=s(Vr);T(V$.$$.fragment,li),GGr=i(li),Lwe=n(li,"P",{});var Tzt=s(Lwe);OGr=r(Tzt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tzt.forEach(t),VGr=i(li),Cn=n(li,"P",{});var gy=s(Cn);XGr=r(gy,"The model class to instantiate is selected based on the "),ywe=n(gy,"CODE",{});var Mzt=s(ywe);zGr=r(Mzt,"model_type"),Mzt.forEach(t),WGr=r(gy,` property of the config object (either
passed as an argument or loaded from `),xwe=n(gy,"CODE",{});var Ezt=s(xwe);QGr=r(Ezt,"pretrained_model_name_or_path"),Ezt.forEach(t),HGr=r(gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=n(gy,"CODE",{});var Czt=s($we);UGr=r(Czt,"pretrained_model_name_or_path"),Czt.forEach(t),JGr=r(gy,":"),gy.forEach(t),YGr=i(li),ce=n(li,"UL",{});var ue=s(ce);iw=n(ue,"LI",{});var mXe=s(iw);kwe=n(mXe,"STRONG",{});var wzt=s(kwe);KGr=r(wzt,"albert"),wzt.forEach(t),ZGr=r(mXe," \u2014 "),zee=n(mXe,"A",{href:!0});var Azt=s(zee);eOr=r(Azt,"TFAlbertForQuestionAnswering"),Azt.forEach(t),oOr=r(mXe," (ALBERT model)"),mXe.forEach(t),rOr=i(ue),dw=n(ue,"LI",{});var fXe=s(dw);Swe=n(fXe,"STRONG",{});var Lzt=s(Swe);tOr=r(Lzt,"bert"),Lzt.forEach(t),aOr=r(fXe," \u2014 "),Wee=n(fXe,"A",{href:!0});var yzt=s(Wee);nOr=r(yzt,"TFBertForQuestionAnswering"),yzt.forEach(t),sOr=r(fXe," (BERT model)"),fXe.forEach(t),lOr=i(ue),cw=n(ue,"LI",{});var gXe=s(cw);Rwe=n(gXe,"STRONG",{});var xzt=s(Rwe);iOr=r(xzt,"camembert"),xzt.forEach(t),dOr=r(gXe," \u2014 "),Qee=n(gXe,"A",{href:!0});var $zt=s(Qee);cOr=r($zt,"TFCamembertForQuestionAnswering"),$zt.forEach(t),mOr=r(gXe," (CamemBERT model)"),gXe.forEach(t),fOr=i(ue),mw=n(ue,"LI",{});var hXe=s(mw);Pwe=n(hXe,"STRONG",{});var kzt=s(Pwe);gOr=r(kzt,"convbert"),kzt.forEach(t),hOr=r(hXe," \u2014 "),Hee=n(hXe,"A",{href:!0});var Szt=s(Hee);uOr=r(Szt,"TFConvBertForQuestionAnswering"),Szt.forEach(t),pOr=r(hXe," (ConvBERT model)"),hXe.forEach(t),_Or=i(ue),fw=n(ue,"LI",{});var uXe=s(fw);Bwe=n(uXe,"STRONG",{});var Rzt=s(Bwe);bOr=r(Rzt,"deberta"),Rzt.forEach(t),vOr=r(uXe," \u2014 "),Uee=n(uXe,"A",{href:!0});var Pzt=s(Uee);FOr=r(Pzt,"TFDebertaForQuestionAnswering"),Pzt.forEach(t),TOr=r(uXe," (DeBERTa model)"),uXe.forEach(t),MOr=i(ue),gw=n(ue,"LI",{});var pXe=s(gw);Iwe=n(pXe,"STRONG",{});var Bzt=s(Iwe);EOr=r(Bzt,"deberta-v2"),Bzt.forEach(t),COr=r(pXe," \u2014 "),Jee=n(pXe,"A",{href:!0});var Izt=s(Jee);wOr=r(Izt,"TFDebertaV2ForQuestionAnswering"),Izt.forEach(t),AOr=r(pXe," (DeBERTa-v2 model)"),pXe.forEach(t),LOr=i(ue),hw=n(ue,"LI",{});var _Xe=s(hw);Nwe=n(_Xe,"STRONG",{});var Nzt=s(Nwe);yOr=r(Nzt,"distilbert"),Nzt.forEach(t),xOr=r(_Xe," \u2014 "),Yee=n(_Xe,"A",{href:!0});var qzt=s(Yee);$Or=r(qzt,"TFDistilBertForQuestionAnswering"),qzt.forEach(t),kOr=r(_Xe," (DistilBERT model)"),_Xe.forEach(t),SOr=i(ue),uw=n(ue,"LI",{});var bXe=s(uw);qwe=n(bXe,"STRONG",{});var jzt=s(qwe);ROr=r(jzt,"electra"),jzt.forEach(t),POr=r(bXe," \u2014 "),Kee=n(bXe,"A",{href:!0});var Dzt=s(Kee);BOr=r(Dzt,"TFElectraForQuestionAnswering"),Dzt.forEach(t),IOr=r(bXe," (ELECTRA model)"),bXe.forEach(t),NOr=i(ue),pw=n(ue,"LI",{});var vXe=s(pw);jwe=n(vXe,"STRONG",{});var Gzt=s(jwe);qOr=r(Gzt,"flaubert"),Gzt.forEach(t),jOr=r(vXe," \u2014 "),Zee=n(vXe,"A",{href:!0});var Ozt=s(Zee);DOr=r(Ozt,"TFFlaubertForQuestionAnsweringSimple"),Ozt.forEach(t),GOr=r(vXe," (FlauBERT model)"),vXe.forEach(t),OOr=i(ue),_w=n(ue,"LI",{});var FXe=s(_w);Dwe=n(FXe,"STRONG",{});var Vzt=s(Dwe);VOr=r(Vzt,"funnel"),Vzt.forEach(t),XOr=r(FXe," \u2014 "),eoe=n(FXe,"A",{href:!0});var Xzt=s(eoe);zOr=r(Xzt,"TFFunnelForQuestionAnswering"),Xzt.forEach(t),WOr=r(FXe," (Funnel Transformer model)"),FXe.forEach(t),QOr=i(ue),bw=n(ue,"LI",{});var TXe=s(bw);Gwe=n(TXe,"STRONG",{});var zzt=s(Gwe);HOr=r(zzt,"gptj"),zzt.forEach(t),UOr=r(TXe," \u2014 "),ooe=n(TXe,"A",{href:!0});var Wzt=s(ooe);JOr=r(Wzt,"TFGPTJForQuestionAnswering"),Wzt.forEach(t),YOr=r(TXe," (GPT-J model)"),TXe.forEach(t),KOr=i(ue),vw=n(ue,"LI",{});var MXe=s(vw);Owe=n(MXe,"STRONG",{});var Qzt=s(Owe);ZOr=r(Qzt,"longformer"),Qzt.forEach(t),eVr=r(MXe," \u2014 "),roe=n(MXe,"A",{href:!0});var Hzt=s(roe);oVr=r(Hzt,"TFLongformerForQuestionAnswering"),Hzt.forEach(t),rVr=r(MXe," (Longformer model)"),MXe.forEach(t),tVr=i(ue),Fw=n(ue,"LI",{});var EXe=s(Fw);Vwe=n(EXe,"STRONG",{});var Uzt=s(Vwe);aVr=r(Uzt,"mobilebert"),Uzt.forEach(t),nVr=r(EXe," \u2014 "),toe=n(EXe,"A",{href:!0});var Jzt=s(toe);sVr=r(Jzt,"TFMobileBertForQuestionAnswering"),Jzt.forEach(t),lVr=r(EXe," (MobileBERT model)"),EXe.forEach(t),iVr=i(ue),Tw=n(ue,"LI",{});var CXe=s(Tw);Xwe=n(CXe,"STRONG",{});var Yzt=s(Xwe);dVr=r(Yzt,"mpnet"),Yzt.forEach(t),cVr=r(CXe," \u2014 "),aoe=n(CXe,"A",{href:!0});var Kzt=s(aoe);mVr=r(Kzt,"TFMPNetForQuestionAnswering"),Kzt.forEach(t),fVr=r(CXe," (MPNet model)"),CXe.forEach(t),gVr=i(ue),Mw=n(ue,"LI",{});var wXe=s(Mw);zwe=n(wXe,"STRONG",{});var Zzt=s(zwe);hVr=r(Zzt,"rembert"),Zzt.forEach(t),uVr=r(wXe," \u2014 "),noe=n(wXe,"A",{href:!0});var eWt=s(noe);pVr=r(eWt,"TFRemBertForQuestionAnswering"),eWt.forEach(t),_Vr=r(wXe," (RemBERT model)"),wXe.forEach(t),bVr=i(ue),Ew=n(ue,"LI",{});var AXe=s(Ew);Wwe=n(AXe,"STRONG",{});var oWt=s(Wwe);vVr=r(oWt,"roberta"),oWt.forEach(t),FVr=r(AXe," \u2014 "),soe=n(AXe,"A",{href:!0});var rWt=s(soe);TVr=r(rWt,"TFRobertaForQuestionAnswering"),rWt.forEach(t),MVr=r(AXe," (RoBERTa model)"),AXe.forEach(t),EVr=i(ue),Cw=n(ue,"LI",{});var LXe=s(Cw);Qwe=n(LXe,"STRONG",{});var tWt=s(Qwe);CVr=r(tWt,"roformer"),tWt.forEach(t),wVr=r(LXe," \u2014 "),loe=n(LXe,"A",{href:!0});var aWt=s(loe);AVr=r(aWt,"TFRoFormerForQuestionAnswering"),aWt.forEach(t),LVr=r(LXe," (RoFormer model)"),LXe.forEach(t),yVr=i(ue),ww=n(ue,"LI",{});var yXe=s(ww);Hwe=n(yXe,"STRONG",{});var nWt=s(Hwe);xVr=r(nWt,"xlm"),nWt.forEach(t),$Vr=r(yXe," \u2014 "),ioe=n(yXe,"A",{href:!0});var sWt=s(ioe);kVr=r(sWt,"TFXLMForQuestionAnsweringSimple"),sWt.forEach(t),SVr=r(yXe," (XLM model)"),yXe.forEach(t),RVr=i(ue),Aw=n(ue,"LI",{});var xXe=s(Aw);Uwe=n(xXe,"STRONG",{});var lWt=s(Uwe);PVr=r(lWt,"xlm-roberta"),lWt.forEach(t),BVr=r(xXe," \u2014 "),doe=n(xXe,"A",{href:!0});var iWt=s(doe);IVr=r(iWt,"TFXLMRobertaForQuestionAnswering"),iWt.forEach(t),NVr=r(xXe," (XLM-RoBERTa model)"),xXe.forEach(t),qVr=i(ue),Lw=n(ue,"LI",{});var $Xe=s(Lw);Jwe=n($Xe,"STRONG",{});var dWt=s(Jwe);jVr=r(dWt,"xlnet"),dWt.forEach(t),DVr=r($Xe," \u2014 "),coe=n($Xe,"A",{href:!0});var cWt=s(coe);GVr=r(cWt,"TFXLNetForQuestionAnsweringSimple"),cWt.forEach(t),OVr=r($Xe," (XLNet model)"),$Xe.forEach(t),ue.forEach(t),VVr=i(li),T(yw.$$.fragment,li),li.forEach(t),si.forEach(t),hHe=i(m),Zc=n(m,"H2",{class:!0});var wJe=s(Zc);xw=n(wJe,"A",{id:!0,class:!0,href:!0});var mWt=s(xw);Ywe=n(mWt,"SPAN",{});var fWt=s(Ywe);T(X$.$$.fragment,fWt),fWt.forEach(t),mWt.forEach(t),XVr=i(wJe),Kwe=n(wJe,"SPAN",{});var gWt=s(Kwe);zVr=r(gWt,"TFAutoModelForVision2Seq"),gWt.forEach(t),wJe.forEach(t),uHe=i(m),pr=n(m,"DIV",{class:!0});var ii=s(pr);T(z$.$$.fragment,ii),WVr=i(ii),em=n(ii,"P",{});var Cne=s(em);QVr=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),moe=n(Cne,"A",{href:!0});var hWt=s(moe);HVr=r(hWt,"from_pretrained()"),hWt.forEach(t),UVr=r(Cne," class method or the "),foe=n(Cne,"A",{href:!0});var uWt=s(foe);JVr=r(uWt,"from_config()"),uWt.forEach(t),YVr=r(Cne,` class
method.`),Cne.forEach(t),KVr=i(ii),W$=n(ii,"P",{});var AJe=s(W$);ZVr=r(AJe,"This class cannot be instantiated directly using "),Zwe=n(AJe,"CODE",{});var pWt=s(Zwe);eXr=r(pWt,"__init__()"),pWt.forEach(t),oXr=r(AJe," (throws an error)."),AJe.forEach(t),rXr=i(ii),Ht=n(ii,"DIV",{class:!0});var hy=s(Ht);T(Q$.$$.fragment,hy),tXr=i(hy),e6e=n(hy,"P",{});var _Wt=s(e6e);aXr=r(_Wt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Wt.forEach(t),nXr=i(hy),om=n(hy,"P",{});var wne=s(om);sXr=r(wne,`Note:
Loading a model from its configuration file does `),o6e=n(wne,"STRONG",{});var bWt=s(o6e);lXr=r(bWt,"not"),bWt.forEach(t),iXr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=n(wne,"A",{href:!0});var vWt=s(goe);dXr=r(vWt,"from_pretrained()"),vWt.forEach(t),cXr=r(wne," to load the model weights."),wne.forEach(t),mXr=i(hy),T($w.$$.fragment,hy),hy.forEach(t),fXr=i(ii),Xr=n(ii,"DIV",{class:!0});var di=s(Xr);T(H$.$$.fragment,di),gXr=i(di),r6e=n(di,"P",{});var FWt=s(r6e);hXr=r(FWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FWt.forEach(t),uXr=i(di),wn=n(di,"P",{});var uy=s(wn);pXr=r(uy,"The model class to instantiate is selected based on the "),t6e=n(uy,"CODE",{});var TWt=s(t6e);_Xr=r(TWt,"model_type"),TWt.forEach(t),bXr=r(uy,` property of the config object (either
passed as an argument or loaded from `),a6e=n(uy,"CODE",{});var MWt=s(a6e);vXr=r(MWt,"pretrained_model_name_or_path"),MWt.forEach(t),FXr=r(uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=n(uy,"CODE",{});var EWt=s(n6e);TXr=r(EWt,"pretrained_model_name_or_path"),EWt.forEach(t),MXr=r(uy,":"),uy.forEach(t),EXr=i(di),s6e=n(di,"UL",{});var CWt=s(s6e);kw=n(CWt,"LI",{});var kXe=s(kw);l6e=n(kXe,"STRONG",{});var wWt=s(l6e);CXr=r(wWt,"vision-encoder-decoder"),wWt.forEach(t),wXr=r(kXe," \u2014 "),hoe=n(kXe,"A",{href:!0});var AWt=s(hoe);AXr=r(AWt,"TFVisionEncoderDecoderModel"),AWt.forEach(t),LXr=r(kXe," (Vision Encoder decoder model)"),kXe.forEach(t),CWt.forEach(t),yXr=i(di),T(Sw.$$.fragment,di),di.forEach(t),ii.forEach(t),pHe=i(m),rm=n(m,"H2",{class:!0});var LJe=s(rm);Rw=n(LJe,"A",{id:!0,class:!0,href:!0});var LWt=s(Rw);i6e=n(LWt,"SPAN",{});var yWt=s(i6e);T(U$.$$.fragment,yWt),yWt.forEach(t),LWt.forEach(t),xXr=i(LJe),d6e=n(LJe,"SPAN",{});var xWt=s(d6e);$Xr=r(xWt,"TFAutoModelForSpeechSeq2Seq"),xWt.forEach(t),LJe.forEach(t),_He=i(m),_r=n(m,"DIV",{class:!0});var ci=s(_r);T(J$.$$.fragment,ci),kXr=i(ci),tm=n(ci,"P",{});var Ane=s(tm);SXr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uoe=n(Ane,"A",{href:!0});var $Wt=s(uoe);RXr=r($Wt,"from_pretrained()"),$Wt.forEach(t),PXr=r(Ane," class method or the "),poe=n(Ane,"A",{href:!0});var kWt=s(poe);BXr=r(kWt,"from_config()"),kWt.forEach(t),IXr=r(Ane,` class
method.`),Ane.forEach(t),NXr=i(ci),Y$=n(ci,"P",{});var yJe=s(Y$);qXr=r(yJe,"This class cannot be instantiated directly using "),c6e=n(yJe,"CODE",{});var SWt=s(c6e);jXr=r(SWt,"__init__()"),SWt.forEach(t),DXr=r(yJe," (throws an error)."),yJe.forEach(t),GXr=i(ci),Ut=n(ci,"DIV",{class:!0});var py=s(Ut);T(K$.$$.fragment,py),OXr=i(py),m6e=n(py,"P",{});var RWt=s(m6e);VXr=r(RWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RWt.forEach(t),XXr=i(py),am=n(py,"P",{});var Lne=s(am);zXr=r(Lne,`Note:
Loading a model from its configuration file does `),f6e=n(Lne,"STRONG",{});var PWt=s(f6e);WXr=r(PWt,"not"),PWt.forEach(t),QXr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=n(Lne,"A",{href:!0});var BWt=s(_oe);HXr=r(BWt,"from_pretrained()"),BWt.forEach(t),UXr=r(Lne," to load the model weights."),Lne.forEach(t),JXr=i(py),T(Pw.$$.fragment,py),py.forEach(t),YXr=i(ci),zr=n(ci,"DIV",{class:!0});var mi=s(zr);T(Z$.$$.fragment,mi),KXr=i(mi),g6e=n(mi,"P",{});var IWt=s(g6e);ZXr=r(IWt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),IWt.forEach(t),ezr=i(mi),An=n(mi,"P",{});var _y=s(An);ozr=r(_y,"The model class to instantiate is selected based on the "),h6e=n(_y,"CODE",{});var NWt=s(h6e);rzr=r(NWt,"model_type"),NWt.forEach(t),tzr=r(_y,` property of the config object (either
passed as an argument or loaded from `),u6e=n(_y,"CODE",{});var qWt=s(u6e);azr=r(qWt,"pretrained_model_name_or_path"),qWt.forEach(t),nzr=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(_y,"CODE",{});var jWt=s(p6e);szr=r(jWt,"pretrained_model_name_or_path"),jWt.forEach(t),lzr=r(_y,":"),_y.forEach(t),izr=i(mi),_6e=n(mi,"UL",{});var DWt=s(_6e);Bw=n(DWt,"LI",{});var SXe=s(Bw);b6e=n(SXe,"STRONG",{});var GWt=s(b6e);dzr=r(GWt,"speech_to_text"),GWt.forEach(t),czr=r(SXe," \u2014 "),boe=n(SXe,"A",{href:!0});var OWt=s(boe);mzr=r(OWt,"TFSpeech2TextForConditionalGeneration"),OWt.forEach(t),fzr=r(SXe," (Speech2Text model)"),SXe.forEach(t),DWt.forEach(t),gzr=i(mi),T(Iw.$$.fragment,mi),mi.forEach(t),ci.forEach(t),bHe=i(m),nm=n(m,"H2",{class:!0});var xJe=s(nm);Nw=n(xJe,"A",{id:!0,class:!0,href:!0});var VWt=s(Nw);v6e=n(VWt,"SPAN",{});var XWt=s(v6e);T(ek.$$.fragment,XWt),XWt.forEach(t),VWt.forEach(t),hzr=i(xJe),F6e=n(xJe,"SPAN",{});var zWt=s(F6e);uzr=r(zWt,"FlaxAutoModel"),zWt.forEach(t),xJe.forEach(t),vHe=i(m),br=n(m,"DIV",{class:!0});var fi=s(br);T(ok.$$.fragment,fi),pzr=i(fi),sm=n(fi,"P",{});var yne=s(sm);_zr=r(yne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),voe=n(yne,"A",{href:!0});var WWt=s(voe);bzr=r(WWt,"from_pretrained()"),WWt.forEach(t),vzr=r(yne," class method or the "),Foe=n(yne,"A",{href:!0});var QWt=s(Foe);Fzr=r(QWt,"from_config()"),QWt.forEach(t),Tzr=r(yne,` class
method.`),yne.forEach(t),Mzr=i(fi),rk=n(fi,"P",{});var $Je=s(rk);Ezr=r($Je,"This class cannot be instantiated directly using "),T6e=n($Je,"CODE",{});var HWt=s(T6e);Czr=r(HWt,"__init__()"),HWt.forEach(t),wzr=r($Je," (throws an error)."),$Je.forEach(t),Azr=i(fi),Jt=n(fi,"DIV",{class:!0});var by=s(Jt);T(tk.$$.fragment,by),Lzr=i(by),M6e=n(by,"P",{});var UWt=s(M6e);yzr=r(UWt,"Instantiates one of the base model classes of the library from a configuration."),UWt.forEach(t),xzr=i(by),lm=n(by,"P",{});var xne=s(lm);$zr=r(xne,`Note:
Loading a model from its configuration file does `),E6e=n(xne,"STRONG",{});var JWt=s(E6e);kzr=r(JWt,"not"),JWt.forEach(t),Szr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(xne,"A",{href:!0});var YWt=s(Toe);Rzr=r(YWt,"from_pretrained()"),YWt.forEach(t),Pzr=r(xne," to load the model weights."),xne.forEach(t),Bzr=i(by),T(qw.$$.fragment,by),by.forEach(t),Izr=i(fi),Wr=n(fi,"DIV",{class:!0});var gi=s(Wr);T(ak.$$.fragment,gi),Nzr=i(gi),C6e=n(gi,"P",{});var KWt=s(C6e);qzr=r(KWt,"Instantiate one of the base model classes of the library from a pretrained model."),KWt.forEach(t),jzr=i(gi),Ln=n(gi,"P",{});var vy=s(Ln);Dzr=r(vy,"The model class to instantiate is selected based on the "),w6e=n(vy,"CODE",{});var ZWt=s(w6e);Gzr=r(ZWt,"model_type"),ZWt.forEach(t),Ozr=r(vy,` property of the config object (either
passed as an argument or loaded from `),A6e=n(vy,"CODE",{});var eQt=s(A6e);Vzr=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),Xzr=r(vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(vy,"CODE",{});var oQt=s(L6e);zzr=r(oQt,"pretrained_model_name_or_path"),oQt.forEach(t),Wzr=r(vy,":"),vy.forEach(t),Qzr=i(gi),oe=n(gi,"UL",{});var ae=s(oe);jw=n(ae,"LI",{});var RXe=s(jw);y6e=n(RXe,"STRONG",{});var rQt=s(y6e);Hzr=r(rQt,"albert"),rQt.forEach(t),Uzr=r(RXe," \u2014 "),Moe=n(RXe,"A",{href:!0});var tQt=s(Moe);Jzr=r(tQt,"FlaxAlbertModel"),tQt.forEach(t),Yzr=r(RXe," (ALBERT model)"),RXe.forEach(t),Kzr=i(ae),Dw=n(ae,"LI",{});var PXe=s(Dw);x6e=n(PXe,"STRONG",{});var aQt=s(x6e);Zzr=r(aQt,"bart"),aQt.forEach(t),eWr=r(PXe," \u2014 "),Eoe=n(PXe,"A",{href:!0});var nQt=s(Eoe);oWr=r(nQt,"FlaxBartModel"),nQt.forEach(t),rWr=r(PXe," (BART model)"),PXe.forEach(t),tWr=i(ae),Gw=n(ae,"LI",{});var BXe=s(Gw);$6e=n(BXe,"STRONG",{});var sQt=s($6e);aWr=r(sQt,"beit"),sQt.forEach(t),nWr=r(BXe," \u2014 "),Coe=n(BXe,"A",{href:!0});var lQt=s(Coe);sWr=r(lQt,"FlaxBeitModel"),lQt.forEach(t),lWr=r(BXe," (BEiT model)"),BXe.forEach(t),iWr=i(ae),Ow=n(ae,"LI",{});var IXe=s(Ow);k6e=n(IXe,"STRONG",{});var iQt=s(k6e);dWr=r(iQt,"bert"),iQt.forEach(t),cWr=r(IXe," \u2014 "),woe=n(IXe,"A",{href:!0});var dQt=s(woe);mWr=r(dQt,"FlaxBertModel"),dQt.forEach(t),fWr=r(IXe," (BERT model)"),IXe.forEach(t),gWr=i(ae),Vw=n(ae,"LI",{});var NXe=s(Vw);S6e=n(NXe,"STRONG",{});var cQt=s(S6e);hWr=r(cQt,"big_bird"),cQt.forEach(t),uWr=r(NXe," \u2014 "),Aoe=n(NXe,"A",{href:!0});var mQt=s(Aoe);pWr=r(mQt,"FlaxBigBirdModel"),mQt.forEach(t),_Wr=r(NXe," (BigBird model)"),NXe.forEach(t),bWr=i(ae),Xw=n(ae,"LI",{});var qXe=s(Xw);R6e=n(qXe,"STRONG",{});var fQt=s(R6e);vWr=r(fQt,"blenderbot"),fQt.forEach(t),FWr=r(qXe," \u2014 "),Loe=n(qXe,"A",{href:!0});var gQt=s(Loe);TWr=r(gQt,"FlaxBlenderbotModel"),gQt.forEach(t),MWr=r(qXe," (Blenderbot model)"),qXe.forEach(t),EWr=i(ae),zw=n(ae,"LI",{});var jXe=s(zw);P6e=n(jXe,"STRONG",{});var hQt=s(P6e);CWr=r(hQt,"blenderbot-small"),hQt.forEach(t),wWr=r(jXe," \u2014 "),yoe=n(jXe,"A",{href:!0});var uQt=s(yoe);AWr=r(uQt,"FlaxBlenderbotSmallModel"),uQt.forEach(t),LWr=r(jXe," (BlenderbotSmall model)"),jXe.forEach(t),yWr=i(ae),Ww=n(ae,"LI",{});var DXe=s(Ww);B6e=n(DXe,"STRONG",{});var pQt=s(B6e);xWr=r(pQt,"clip"),pQt.forEach(t),$Wr=r(DXe," \u2014 "),xoe=n(DXe,"A",{href:!0});var _Qt=s(xoe);kWr=r(_Qt,"FlaxCLIPModel"),_Qt.forEach(t),SWr=r(DXe," (CLIP model)"),DXe.forEach(t),RWr=i(ae),Qw=n(ae,"LI",{});var GXe=s(Qw);I6e=n(GXe,"STRONG",{});var bQt=s(I6e);PWr=r(bQt,"distilbert"),bQt.forEach(t),BWr=r(GXe," \u2014 "),$oe=n(GXe,"A",{href:!0});var vQt=s($oe);IWr=r(vQt,"FlaxDistilBertModel"),vQt.forEach(t),NWr=r(GXe," (DistilBERT model)"),GXe.forEach(t),qWr=i(ae),Hw=n(ae,"LI",{});var OXe=s(Hw);N6e=n(OXe,"STRONG",{});var FQt=s(N6e);jWr=r(FQt,"electra"),FQt.forEach(t),DWr=r(OXe," \u2014 "),koe=n(OXe,"A",{href:!0});var TQt=s(koe);GWr=r(TQt,"FlaxElectraModel"),TQt.forEach(t),OWr=r(OXe," (ELECTRA model)"),OXe.forEach(t),VWr=i(ae),Uw=n(ae,"LI",{});var VXe=s(Uw);q6e=n(VXe,"STRONG",{});var MQt=s(q6e);XWr=r(MQt,"gpt2"),MQt.forEach(t),zWr=r(VXe," \u2014 "),Soe=n(VXe,"A",{href:!0});var EQt=s(Soe);WWr=r(EQt,"FlaxGPT2Model"),EQt.forEach(t),QWr=r(VXe," (OpenAI GPT-2 model)"),VXe.forEach(t),HWr=i(ae),Jw=n(ae,"LI",{});var XXe=s(Jw);j6e=n(XXe,"STRONG",{});var CQt=s(j6e);UWr=r(CQt,"gpt_neo"),CQt.forEach(t),JWr=r(XXe," \u2014 "),Roe=n(XXe,"A",{href:!0});var wQt=s(Roe);YWr=r(wQt,"FlaxGPTNeoModel"),wQt.forEach(t),KWr=r(XXe," (GPT Neo model)"),XXe.forEach(t),ZWr=i(ae),Yw=n(ae,"LI",{});var zXe=s(Yw);D6e=n(zXe,"STRONG",{});var AQt=s(D6e);eQr=r(AQt,"gptj"),AQt.forEach(t),oQr=r(zXe," \u2014 "),Poe=n(zXe,"A",{href:!0});var LQt=s(Poe);rQr=r(LQt,"FlaxGPTJModel"),LQt.forEach(t),tQr=r(zXe," (GPT-J model)"),zXe.forEach(t),aQr=i(ae),Kw=n(ae,"LI",{});var WXe=s(Kw);G6e=n(WXe,"STRONG",{});var yQt=s(G6e);nQr=r(yQt,"longt5"),yQt.forEach(t),sQr=r(WXe," \u2014 "),Boe=n(WXe,"A",{href:!0});var xQt=s(Boe);lQr=r(xQt,"FlaxLongT5Model"),xQt.forEach(t),iQr=r(WXe," (LongT5 model)"),WXe.forEach(t),dQr=i(ae),Zw=n(ae,"LI",{});var QXe=s(Zw);O6e=n(QXe,"STRONG",{});var $Qt=s(O6e);cQr=r($Qt,"marian"),$Qt.forEach(t),mQr=r(QXe," \u2014 "),Ioe=n(QXe,"A",{href:!0});var kQt=s(Ioe);fQr=r(kQt,"FlaxMarianModel"),kQt.forEach(t),gQr=r(QXe," (Marian model)"),QXe.forEach(t),hQr=i(ae),e6=n(ae,"LI",{});var HXe=s(e6);V6e=n(HXe,"STRONG",{});var SQt=s(V6e);uQr=r(SQt,"mbart"),SQt.forEach(t),pQr=r(HXe," \u2014 "),Noe=n(HXe,"A",{href:!0});var RQt=s(Noe);_Qr=r(RQt,"FlaxMBartModel"),RQt.forEach(t),bQr=r(HXe," (mBART model)"),HXe.forEach(t),vQr=i(ae),o6=n(ae,"LI",{});var UXe=s(o6);X6e=n(UXe,"STRONG",{});var PQt=s(X6e);FQr=r(PQt,"mt5"),PQt.forEach(t),TQr=r(UXe," \u2014 "),qoe=n(UXe,"A",{href:!0});var BQt=s(qoe);MQr=r(BQt,"FlaxMT5Model"),BQt.forEach(t),EQr=r(UXe," (MT5 model)"),UXe.forEach(t),CQr=i(ae),r6=n(ae,"LI",{});var JXe=s(r6);z6e=n(JXe,"STRONG",{});var IQt=s(z6e);wQr=r(IQt,"opt"),IQt.forEach(t),AQr=r(JXe," \u2014 "),joe=n(JXe,"A",{href:!0});var NQt=s(joe);LQr=r(NQt,"FlaxOPTModel"),NQt.forEach(t),yQr=r(JXe," (OPT model)"),JXe.forEach(t),xQr=i(ae),t6=n(ae,"LI",{});var YXe=s(t6);W6e=n(YXe,"STRONG",{});var qQt=s(W6e);$Qr=r(qQt,"pegasus"),qQt.forEach(t),kQr=r(YXe," \u2014 "),Doe=n(YXe,"A",{href:!0});var jQt=s(Doe);SQr=r(jQt,"FlaxPegasusModel"),jQt.forEach(t),RQr=r(YXe," (Pegasus model)"),YXe.forEach(t),PQr=i(ae),a6=n(ae,"LI",{});var KXe=s(a6);Q6e=n(KXe,"STRONG",{});var DQt=s(Q6e);BQr=r(DQt,"roberta"),DQt.forEach(t),IQr=r(KXe," \u2014 "),Goe=n(KXe,"A",{href:!0});var GQt=s(Goe);NQr=r(GQt,"FlaxRobertaModel"),GQt.forEach(t),qQr=r(KXe," (RoBERTa model)"),KXe.forEach(t),jQr=i(ae),n6=n(ae,"LI",{});var ZXe=s(n6);H6e=n(ZXe,"STRONG",{});var OQt=s(H6e);DQr=r(OQt,"roformer"),OQt.forEach(t),GQr=r(ZXe," \u2014 "),Ooe=n(ZXe,"A",{href:!0});var VQt=s(Ooe);OQr=r(VQt,"FlaxRoFormerModel"),VQt.forEach(t),VQr=r(ZXe," (RoFormer model)"),ZXe.forEach(t),XQr=i(ae),s6=n(ae,"LI",{});var eze=s(s6);U6e=n(eze,"STRONG",{});var XQt=s(U6e);zQr=r(XQt,"t5"),XQt.forEach(t),WQr=r(eze," \u2014 "),Voe=n(eze,"A",{href:!0});var zQt=s(Voe);QQr=r(zQt,"FlaxT5Model"),zQt.forEach(t),HQr=r(eze," (T5 model)"),eze.forEach(t),UQr=i(ae),l6=n(ae,"LI",{});var oze=s(l6);J6e=n(oze,"STRONG",{});var WQt=s(J6e);JQr=r(WQt,"vision-text-dual-encoder"),WQt.forEach(t),YQr=r(oze," \u2014 "),Xoe=n(oze,"A",{href:!0});var QQt=s(Xoe);KQr=r(QQt,"FlaxVisionTextDualEncoderModel"),QQt.forEach(t),ZQr=r(oze," (VisionTextDualEncoder model)"),oze.forEach(t),eHr=i(ae),i6=n(ae,"LI",{});var rze=s(i6);Y6e=n(rze,"STRONG",{});var HQt=s(Y6e);oHr=r(HQt,"vit"),HQt.forEach(t),rHr=r(rze," \u2014 "),zoe=n(rze,"A",{href:!0});var UQt=s(zoe);tHr=r(UQt,"FlaxViTModel"),UQt.forEach(t),aHr=r(rze," (ViT model)"),rze.forEach(t),nHr=i(ae),d6=n(ae,"LI",{});var tze=s(d6);K6e=n(tze,"STRONG",{});var JQt=s(K6e);sHr=r(JQt,"wav2vec2"),JQt.forEach(t),lHr=r(tze," \u2014 "),Woe=n(tze,"A",{href:!0});var YQt=s(Woe);iHr=r(YQt,"FlaxWav2Vec2Model"),YQt.forEach(t),dHr=r(tze," (Wav2Vec2 model)"),tze.forEach(t),cHr=i(ae),c6=n(ae,"LI",{});var aze=s(c6);Z6e=n(aze,"STRONG",{});var KQt=s(Z6e);mHr=r(KQt,"xglm"),KQt.forEach(t),fHr=r(aze," \u2014 "),Qoe=n(aze,"A",{href:!0});var ZQt=s(Qoe);gHr=r(ZQt,"FlaxXGLMModel"),ZQt.forEach(t),hHr=r(aze," (XGLM model)"),aze.forEach(t),uHr=i(ae),m6=n(ae,"LI",{});var nze=s(m6);eAe=n(nze,"STRONG",{});var eHt=s(eAe);pHr=r(eHt,"xlm-roberta"),eHt.forEach(t),_Hr=r(nze," \u2014 "),Hoe=n(nze,"A",{href:!0});var oHt=s(Hoe);bHr=r(oHt,"FlaxXLMRobertaModel"),oHt.forEach(t),vHr=r(nze," (XLM-RoBERTa model)"),nze.forEach(t),ae.forEach(t),FHr=i(gi),T(f6.$$.fragment,gi),gi.forEach(t),fi.forEach(t),FHe=i(m),im=n(m,"H2",{class:!0});var kJe=s(im);g6=n(kJe,"A",{id:!0,class:!0,href:!0});var rHt=s(g6);oAe=n(rHt,"SPAN",{});var tHt=s(oAe);T(nk.$$.fragment,tHt),tHt.forEach(t),rHt.forEach(t),THr=i(kJe),rAe=n(kJe,"SPAN",{});var aHt=s(rAe);MHr=r(aHt,"FlaxAutoModelForCausalLM"),aHt.forEach(t),kJe.forEach(t),THe=i(m),vr=n(m,"DIV",{class:!0});var hi=s(vr);T(sk.$$.fragment,hi),EHr=i(hi),dm=n(hi,"P",{});var $ne=s(dm);CHr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uoe=n($ne,"A",{href:!0});var nHt=s(Uoe);wHr=r(nHt,"from_pretrained()"),nHt.forEach(t),AHr=r($ne," class method or the "),Joe=n($ne,"A",{href:!0});var sHt=s(Joe);LHr=r(sHt,"from_config()"),sHt.forEach(t),yHr=r($ne,` class
method.`),$ne.forEach(t),xHr=i(hi),lk=n(hi,"P",{});var SJe=s(lk);$Hr=r(SJe,"This class cannot be instantiated directly using "),tAe=n(SJe,"CODE",{});var lHt=s(tAe);kHr=r(lHt,"__init__()"),lHt.forEach(t),SHr=r(SJe," (throws an error)."),SJe.forEach(t),RHr=i(hi),Yt=n(hi,"DIV",{class:!0});var Fy=s(Yt);T(ik.$$.fragment,Fy),PHr=i(Fy),aAe=n(Fy,"P",{});var iHt=s(aAe);BHr=r(iHt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iHt.forEach(t),IHr=i(Fy),cm=n(Fy,"P",{});var kne=s(cm);NHr=r(kne,`Note:
Loading a model from its configuration file does `),nAe=n(kne,"STRONG",{});var dHt=s(nAe);qHr=r(dHt,"not"),dHt.forEach(t),jHr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=n(kne,"A",{href:!0});var cHt=s(Yoe);DHr=r(cHt,"from_pretrained()"),cHt.forEach(t),GHr=r(kne," to load the model weights."),kne.forEach(t),OHr=i(Fy),T(h6.$$.fragment,Fy),Fy.forEach(t),VHr=i(hi),Qr=n(hi,"DIV",{class:!0});var ui=s(Qr);T(dk.$$.fragment,ui),XHr=i(ui),sAe=n(ui,"P",{});var mHt=s(sAe);zHr=r(mHt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mHt.forEach(t),WHr=i(ui),yn=n(ui,"P",{});var Ty=s(yn);QHr=r(Ty,"The model class to instantiate is selected based on the "),lAe=n(Ty,"CODE",{});var fHt=s(lAe);HHr=r(fHt,"model_type"),fHt.forEach(t),UHr=r(Ty,` property of the config object (either
passed as an argument or loaded from `),iAe=n(Ty,"CODE",{});var gHt=s(iAe);JHr=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),YHr=r(Ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dAe=n(Ty,"CODE",{});var hHt=s(dAe);KHr=r(hHt,"pretrained_model_name_or_path"),hHt.forEach(t),ZHr=r(Ty,":"),Ty.forEach(t),eUr=i(ui),xe=n(ui,"UL",{});var Ne=s(xe);u6=n(Ne,"LI",{});var sze=s(u6);cAe=n(sze,"STRONG",{});var uHt=s(cAe);oUr=r(uHt,"bart"),uHt.forEach(t),rUr=r(sze," \u2014 "),Koe=n(sze,"A",{href:!0});var pHt=s(Koe);tUr=r(pHt,"FlaxBartForCausalLM"),pHt.forEach(t),aUr=r(sze," (BART model)"),sze.forEach(t),nUr=i(Ne),p6=n(Ne,"LI",{});var lze=s(p6);mAe=n(lze,"STRONG",{});var _Ht=s(mAe);sUr=r(_Ht,"bert"),_Ht.forEach(t),lUr=r(lze," \u2014 "),Zoe=n(lze,"A",{href:!0});var bHt=s(Zoe);iUr=r(bHt,"FlaxBertForCausalLM"),bHt.forEach(t),dUr=r(lze," (BERT model)"),lze.forEach(t),cUr=i(Ne),_6=n(Ne,"LI",{});var ize=s(_6);fAe=n(ize,"STRONG",{});var vHt=s(fAe);mUr=r(vHt,"big_bird"),vHt.forEach(t),fUr=r(ize," \u2014 "),ere=n(ize,"A",{href:!0});var FHt=s(ere);gUr=r(FHt,"FlaxBigBirdForCausalLM"),FHt.forEach(t),hUr=r(ize," (BigBird model)"),ize.forEach(t),uUr=i(Ne),b6=n(Ne,"LI",{});var dze=s(b6);gAe=n(dze,"STRONG",{});var THt=s(gAe);pUr=r(THt,"electra"),THt.forEach(t),_Ur=r(dze," \u2014 "),ore=n(dze,"A",{href:!0});var MHt=s(ore);bUr=r(MHt,"FlaxElectraForCausalLM"),MHt.forEach(t),vUr=r(dze," (ELECTRA model)"),dze.forEach(t),FUr=i(Ne),v6=n(Ne,"LI",{});var cze=s(v6);hAe=n(cze,"STRONG",{});var EHt=s(hAe);TUr=r(EHt,"gpt2"),EHt.forEach(t),MUr=r(cze," \u2014 "),rre=n(cze,"A",{href:!0});var CHt=s(rre);EUr=r(CHt,"FlaxGPT2LMHeadModel"),CHt.forEach(t),CUr=r(cze," (OpenAI GPT-2 model)"),cze.forEach(t),wUr=i(Ne),F6=n(Ne,"LI",{});var mze=s(F6);uAe=n(mze,"STRONG",{});var wHt=s(uAe);AUr=r(wHt,"gpt_neo"),wHt.forEach(t),LUr=r(mze," \u2014 "),tre=n(mze,"A",{href:!0});var AHt=s(tre);yUr=r(AHt,"FlaxGPTNeoForCausalLM"),AHt.forEach(t),xUr=r(mze," (GPT Neo model)"),mze.forEach(t),$Ur=i(Ne),T6=n(Ne,"LI",{});var fze=s(T6);pAe=n(fze,"STRONG",{});var LHt=s(pAe);kUr=r(LHt,"gptj"),LHt.forEach(t),SUr=r(fze," \u2014 "),are=n(fze,"A",{href:!0});var yHt=s(are);RUr=r(yHt,"FlaxGPTJForCausalLM"),yHt.forEach(t),PUr=r(fze," (GPT-J model)"),fze.forEach(t),BUr=i(Ne),M6=n(Ne,"LI",{});var gze=s(M6);_Ae=n(gze,"STRONG",{});var xHt=s(_Ae);IUr=r(xHt,"opt"),xHt.forEach(t),NUr=r(gze," \u2014 "),nre=n(gze,"A",{href:!0});var $Ht=s(nre);qUr=r($Ht,"FlaxOPTForCausalLM"),$Ht.forEach(t),jUr=r(gze," (OPT model)"),gze.forEach(t),DUr=i(Ne),E6=n(Ne,"LI",{});var hze=s(E6);bAe=n(hze,"STRONG",{});var kHt=s(bAe);GUr=r(kHt,"roberta"),kHt.forEach(t),OUr=r(hze," \u2014 "),sre=n(hze,"A",{href:!0});var SHt=s(sre);VUr=r(SHt,"FlaxRobertaForCausalLM"),SHt.forEach(t),XUr=r(hze," (RoBERTa model)"),hze.forEach(t),zUr=i(Ne),C6=n(Ne,"LI",{});var uze=s(C6);vAe=n(uze,"STRONG",{});var RHt=s(vAe);WUr=r(RHt,"xglm"),RHt.forEach(t),QUr=r(uze," \u2014 "),lre=n(uze,"A",{href:!0});var PHt=s(lre);HUr=r(PHt,"FlaxXGLMForCausalLM"),PHt.forEach(t),UUr=r(uze," (XGLM model)"),uze.forEach(t),Ne.forEach(t),JUr=i(ui),T(w6.$$.fragment,ui),ui.forEach(t),hi.forEach(t),MHe=i(m),mm=n(m,"H2",{class:!0});var RJe=s(mm);A6=n(RJe,"A",{id:!0,class:!0,href:!0});var BHt=s(A6);FAe=n(BHt,"SPAN",{});var IHt=s(FAe);T(ck.$$.fragment,IHt),IHt.forEach(t),BHt.forEach(t),YUr=i(RJe),TAe=n(RJe,"SPAN",{});var NHt=s(TAe);KUr=r(NHt,"FlaxAutoModelForPreTraining"),NHt.forEach(t),RJe.forEach(t),EHe=i(m),Fr=n(m,"DIV",{class:!0});var pi=s(Fr);T(mk.$$.fragment,pi),ZUr=i(pi),fm=n(pi,"P",{});var Sne=s(fm);eJr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ire=n(Sne,"A",{href:!0});var qHt=s(ire);oJr=r(qHt,"from_pretrained()"),qHt.forEach(t),rJr=r(Sne," class method or the "),dre=n(Sne,"A",{href:!0});var jHt=s(dre);tJr=r(jHt,"from_config()"),jHt.forEach(t),aJr=r(Sne,` class
method.`),Sne.forEach(t),nJr=i(pi),fk=n(pi,"P",{});var PJe=s(fk);sJr=r(PJe,"This class cannot be instantiated directly using "),MAe=n(PJe,"CODE",{});var DHt=s(MAe);lJr=r(DHt,"__init__()"),DHt.forEach(t),iJr=r(PJe," (throws an error)."),PJe.forEach(t),dJr=i(pi),Kt=n(pi,"DIV",{class:!0});var My=s(Kt);T(gk.$$.fragment,My),cJr=i(My),EAe=n(My,"P",{});var GHt=s(EAe);mJr=r(GHt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GHt.forEach(t),fJr=i(My),gm=n(My,"P",{});var Rne=s(gm);gJr=r(Rne,`Note:
Loading a model from its configuration file does `),CAe=n(Rne,"STRONG",{});var OHt=s(CAe);hJr=r(OHt,"not"),OHt.forEach(t),uJr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),cre=n(Rne,"A",{href:!0});var VHt=s(cre);pJr=r(VHt,"from_pretrained()"),VHt.forEach(t),_Jr=r(Rne," to load the model weights."),Rne.forEach(t),bJr=i(My),T(L6.$$.fragment,My),My.forEach(t),vJr=i(pi),Hr=n(pi,"DIV",{class:!0});var _i=s(Hr);T(hk.$$.fragment,_i),FJr=i(_i),wAe=n(_i,"P",{});var XHt=s(wAe);TJr=r(XHt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XHt.forEach(t),MJr=i(_i),xn=n(_i,"P",{});var Ey=s(xn);EJr=r(Ey,"The model class to instantiate is selected based on the "),AAe=n(Ey,"CODE",{});var zHt=s(AAe);CJr=r(zHt,"model_type"),zHt.forEach(t),wJr=r(Ey,` property of the config object (either
passed as an argument or loaded from `),LAe=n(Ey,"CODE",{});var WHt=s(LAe);AJr=r(WHt,"pretrained_model_name_or_path"),WHt.forEach(t),LJr=r(Ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yAe=n(Ey,"CODE",{});var QHt=s(yAe);yJr=r(QHt,"pretrained_model_name_or_path"),QHt.forEach(t),xJr=r(Ey,":"),Ey.forEach(t),$Jr=i(_i),Ee=n(_i,"UL",{});var we=s(Ee);y6=n(we,"LI",{});var pze=s(y6);xAe=n(pze,"STRONG",{});var HHt=s(xAe);kJr=r(HHt,"albert"),HHt.forEach(t),SJr=r(pze," \u2014 "),mre=n(pze,"A",{href:!0});var UHt=s(mre);RJr=r(UHt,"FlaxAlbertForPreTraining"),UHt.forEach(t),PJr=r(pze," (ALBERT model)"),pze.forEach(t),BJr=i(we),x6=n(we,"LI",{});var _ze=s(x6);$Ae=n(_ze,"STRONG",{});var JHt=s($Ae);IJr=r(JHt,"bart"),JHt.forEach(t),NJr=r(_ze," \u2014 "),fre=n(_ze,"A",{href:!0});var YHt=s(fre);qJr=r(YHt,"FlaxBartForConditionalGeneration"),YHt.forEach(t),jJr=r(_ze," (BART model)"),_ze.forEach(t),DJr=i(we),$6=n(we,"LI",{});var bze=s($6);kAe=n(bze,"STRONG",{});var KHt=s(kAe);GJr=r(KHt,"bert"),KHt.forEach(t),OJr=r(bze," \u2014 "),gre=n(bze,"A",{href:!0});var ZHt=s(gre);VJr=r(ZHt,"FlaxBertForPreTraining"),ZHt.forEach(t),XJr=r(bze," (BERT model)"),bze.forEach(t),zJr=i(we),k6=n(we,"LI",{});var vze=s(k6);SAe=n(vze,"STRONG",{});var eUt=s(SAe);WJr=r(eUt,"big_bird"),eUt.forEach(t),QJr=r(vze," \u2014 "),hre=n(vze,"A",{href:!0});var oUt=s(hre);HJr=r(oUt,"FlaxBigBirdForPreTraining"),oUt.forEach(t),UJr=r(vze," (BigBird model)"),vze.forEach(t),JJr=i(we),S6=n(we,"LI",{});var Fze=s(S6);RAe=n(Fze,"STRONG",{});var rUt=s(RAe);YJr=r(rUt,"electra"),rUt.forEach(t),KJr=r(Fze," \u2014 "),ure=n(Fze,"A",{href:!0});var tUt=s(ure);ZJr=r(tUt,"FlaxElectraForPreTraining"),tUt.forEach(t),eYr=r(Fze," (ELECTRA model)"),Fze.forEach(t),oYr=i(we),R6=n(we,"LI",{});var Tze=s(R6);PAe=n(Tze,"STRONG",{});var aUt=s(PAe);rYr=r(aUt,"longt5"),aUt.forEach(t),tYr=r(Tze," \u2014 "),pre=n(Tze,"A",{href:!0});var nUt=s(pre);aYr=r(nUt,"FlaxLongT5ForConditionalGeneration"),nUt.forEach(t),nYr=r(Tze," (LongT5 model)"),Tze.forEach(t),sYr=i(we),P6=n(we,"LI",{});var Mze=s(P6);BAe=n(Mze,"STRONG",{});var sUt=s(BAe);lYr=r(sUt,"mbart"),sUt.forEach(t),iYr=r(Mze," \u2014 "),_re=n(Mze,"A",{href:!0});var lUt=s(_re);dYr=r(lUt,"FlaxMBartForConditionalGeneration"),lUt.forEach(t),cYr=r(Mze," (mBART model)"),Mze.forEach(t),mYr=i(we),B6=n(we,"LI",{});var Eze=s(B6);IAe=n(Eze,"STRONG",{});var iUt=s(IAe);fYr=r(iUt,"mt5"),iUt.forEach(t),gYr=r(Eze," \u2014 "),bre=n(Eze,"A",{href:!0});var dUt=s(bre);hYr=r(dUt,"FlaxMT5ForConditionalGeneration"),dUt.forEach(t),uYr=r(Eze," (MT5 model)"),Eze.forEach(t),pYr=i(we),I6=n(we,"LI",{});var Cze=s(I6);NAe=n(Cze,"STRONG",{});var cUt=s(NAe);_Yr=r(cUt,"roberta"),cUt.forEach(t),bYr=r(Cze," \u2014 "),vre=n(Cze,"A",{href:!0});var mUt=s(vre);vYr=r(mUt,"FlaxRobertaForMaskedLM"),mUt.forEach(t),FYr=r(Cze," (RoBERTa model)"),Cze.forEach(t),TYr=i(we),N6=n(we,"LI",{});var wze=s(N6);qAe=n(wze,"STRONG",{});var fUt=s(qAe);MYr=r(fUt,"roformer"),fUt.forEach(t),EYr=r(wze," \u2014 "),Fre=n(wze,"A",{href:!0});var gUt=s(Fre);CYr=r(gUt,"FlaxRoFormerForMaskedLM"),gUt.forEach(t),wYr=r(wze," (RoFormer model)"),wze.forEach(t),AYr=i(we),q6=n(we,"LI",{});var Aze=s(q6);jAe=n(Aze,"STRONG",{});var hUt=s(jAe);LYr=r(hUt,"t5"),hUt.forEach(t),yYr=r(Aze," \u2014 "),Tre=n(Aze,"A",{href:!0});var uUt=s(Tre);xYr=r(uUt,"FlaxT5ForConditionalGeneration"),uUt.forEach(t),$Yr=r(Aze," (T5 model)"),Aze.forEach(t),kYr=i(we),j6=n(we,"LI",{});var Lze=s(j6);DAe=n(Lze,"STRONG",{});var pUt=s(DAe);SYr=r(pUt,"wav2vec2"),pUt.forEach(t),RYr=r(Lze," \u2014 "),Mre=n(Lze,"A",{href:!0});var _Ut=s(Mre);PYr=r(_Ut,"FlaxWav2Vec2ForPreTraining"),_Ut.forEach(t),BYr=r(Lze," (Wav2Vec2 model)"),Lze.forEach(t),IYr=i(we),D6=n(we,"LI",{});var yze=s(D6);GAe=n(yze,"STRONG",{});var bUt=s(GAe);NYr=r(bUt,"xlm-roberta"),bUt.forEach(t),qYr=r(yze," \u2014 "),Ere=n(yze,"A",{href:!0});var vUt=s(Ere);jYr=r(vUt,"FlaxXLMRobertaForMaskedLM"),vUt.forEach(t),DYr=r(yze," (XLM-RoBERTa model)"),yze.forEach(t),we.forEach(t),GYr=i(_i),T(G6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),CHe=i(m),hm=n(m,"H2",{class:!0});var BJe=s(hm);O6=n(BJe,"A",{id:!0,class:!0,href:!0});var FUt=s(O6);OAe=n(FUt,"SPAN",{});var TUt=s(OAe);T(uk.$$.fragment,TUt),TUt.forEach(t),FUt.forEach(t),OYr=i(BJe),VAe=n(BJe,"SPAN",{});var MUt=s(VAe);VYr=r(MUt,"FlaxAutoModelForMaskedLM"),MUt.forEach(t),BJe.forEach(t),wHe=i(m),Tr=n(m,"DIV",{class:!0});var bi=s(Tr);T(pk.$$.fragment,bi),XYr=i(bi),um=n(bi,"P",{});var Pne=s(um);zYr=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cre=n(Pne,"A",{href:!0});var EUt=s(Cre);WYr=r(EUt,"from_pretrained()"),EUt.forEach(t),QYr=r(Pne," class method or the "),wre=n(Pne,"A",{href:!0});var CUt=s(wre);HYr=r(CUt,"from_config()"),CUt.forEach(t),UYr=r(Pne,` class
method.`),Pne.forEach(t),JYr=i(bi),_k=n(bi,"P",{});var IJe=s(_k);YYr=r(IJe,"This class cannot be instantiated directly using "),XAe=n(IJe,"CODE",{});var wUt=s(XAe);KYr=r(wUt,"__init__()"),wUt.forEach(t),ZYr=r(IJe," (throws an error)."),IJe.forEach(t),eKr=i(bi),Zt=n(bi,"DIV",{class:!0});var Cy=s(Zt);T(bk.$$.fragment,Cy),oKr=i(Cy),zAe=n(Cy,"P",{});var AUt=s(zAe);rKr=r(AUt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AUt.forEach(t),tKr=i(Cy),pm=n(Cy,"P",{});var Bne=s(pm);aKr=r(Bne,`Note:
Loading a model from its configuration file does `),WAe=n(Bne,"STRONG",{});var LUt=s(WAe);nKr=r(LUt,"not"),LUt.forEach(t),sKr=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Bne,"A",{href:!0});var yUt=s(Are);lKr=r(yUt,"from_pretrained()"),yUt.forEach(t),iKr=r(Bne," to load the model weights."),Bne.forEach(t),dKr=i(Cy),T(V6.$$.fragment,Cy),Cy.forEach(t),cKr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(vk.$$.fragment,vi),mKr=i(vi),QAe=n(vi,"P",{});var xUt=s(QAe);fKr=r(xUt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xUt.forEach(t),gKr=i(vi),$n=n(vi,"P",{});var wy=s($n);hKr=r(wy,"The model class to instantiate is selected based on the "),HAe=n(wy,"CODE",{});var $Ut=s(HAe);uKr=r($Ut,"model_type"),$Ut.forEach(t),pKr=r(wy,` property of the config object (either
passed as an argument or loaded from `),UAe=n(wy,"CODE",{});var kUt=s(UAe);_Kr=r(kUt,"pretrained_model_name_or_path"),kUt.forEach(t),bKr=r(wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=n(wy,"CODE",{});var SUt=s(JAe);vKr=r(SUt,"pretrained_model_name_or_path"),SUt.forEach(t),FKr=r(wy,":"),wy.forEach(t),TKr=i(vi),$e=n(vi,"UL",{});var qe=s($e);X6=n(qe,"LI",{});var xze=s(X6);YAe=n(xze,"STRONG",{});var RUt=s(YAe);MKr=r(RUt,"albert"),RUt.forEach(t),EKr=r(xze," \u2014 "),Lre=n(xze,"A",{href:!0});var PUt=s(Lre);CKr=r(PUt,"FlaxAlbertForMaskedLM"),PUt.forEach(t),wKr=r(xze," (ALBERT model)"),xze.forEach(t),AKr=i(qe),z6=n(qe,"LI",{});var $ze=s(z6);KAe=n($ze,"STRONG",{});var BUt=s(KAe);LKr=r(BUt,"bart"),BUt.forEach(t),yKr=r($ze," \u2014 "),yre=n($ze,"A",{href:!0});var IUt=s(yre);xKr=r(IUt,"FlaxBartForConditionalGeneration"),IUt.forEach(t),$Kr=r($ze," (BART model)"),$ze.forEach(t),kKr=i(qe),W6=n(qe,"LI",{});var kze=s(W6);ZAe=n(kze,"STRONG",{});var NUt=s(ZAe);SKr=r(NUt,"bert"),NUt.forEach(t),RKr=r(kze," \u2014 "),xre=n(kze,"A",{href:!0});var qUt=s(xre);PKr=r(qUt,"FlaxBertForMaskedLM"),qUt.forEach(t),BKr=r(kze," (BERT model)"),kze.forEach(t),IKr=i(qe),Q6=n(qe,"LI",{});var Sze=s(Q6);e7e=n(Sze,"STRONG",{});var jUt=s(e7e);NKr=r(jUt,"big_bird"),jUt.forEach(t),qKr=r(Sze," \u2014 "),$re=n(Sze,"A",{href:!0});var DUt=s($re);jKr=r(DUt,"FlaxBigBirdForMaskedLM"),DUt.forEach(t),DKr=r(Sze," (BigBird model)"),Sze.forEach(t),GKr=i(qe),H6=n(qe,"LI",{});var Rze=s(H6);o7e=n(Rze,"STRONG",{});var GUt=s(o7e);OKr=r(GUt,"distilbert"),GUt.forEach(t),VKr=r(Rze," \u2014 "),kre=n(Rze,"A",{href:!0});var OUt=s(kre);XKr=r(OUt,"FlaxDistilBertForMaskedLM"),OUt.forEach(t),zKr=r(Rze," (DistilBERT model)"),Rze.forEach(t),WKr=i(qe),U6=n(qe,"LI",{});var Pze=s(U6);r7e=n(Pze,"STRONG",{});var VUt=s(r7e);QKr=r(VUt,"electra"),VUt.forEach(t),HKr=r(Pze," \u2014 "),Sre=n(Pze,"A",{href:!0});var XUt=s(Sre);UKr=r(XUt,"FlaxElectraForMaskedLM"),XUt.forEach(t),JKr=r(Pze," (ELECTRA model)"),Pze.forEach(t),YKr=i(qe),J6=n(qe,"LI",{});var Bze=s(J6);t7e=n(Bze,"STRONG",{});var zUt=s(t7e);KKr=r(zUt,"mbart"),zUt.forEach(t),ZKr=r(Bze," \u2014 "),Rre=n(Bze,"A",{href:!0});var WUt=s(Rre);eZr=r(WUt,"FlaxMBartForConditionalGeneration"),WUt.forEach(t),oZr=r(Bze," (mBART model)"),Bze.forEach(t),rZr=i(qe),Y6=n(qe,"LI",{});var Ize=s(Y6);a7e=n(Ize,"STRONG",{});var QUt=s(a7e);tZr=r(QUt,"roberta"),QUt.forEach(t),aZr=r(Ize," \u2014 "),Pre=n(Ize,"A",{href:!0});var HUt=s(Pre);nZr=r(HUt,"FlaxRobertaForMaskedLM"),HUt.forEach(t),sZr=r(Ize," (RoBERTa model)"),Ize.forEach(t),lZr=i(qe),K6=n(qe,"LI",{});var Nze=s(K6);n7e=n(Nze,"STRONG",{});var UUt=s(n7e);iZr=r(UUt,"roformer"),UUt.forEach(t),dZr=r(Nze," \u2014 "),Bre=n(Nze,"A",{href:!0});var JUt=s(Bre);cZr=r(JUt,"FlaxRoFormerForMaskedLM"),JUt.forEach(t),mZr=r(Nze," (RoFormer model)"),Nze.forEach(t),fZr=i(qe),Z6=n(qe,"LI",{});var qze=s(Z6);s7e=n(qze,"STRONG",{});var YUt=s(s7e);gZr=r(YUt,"xlm-roberta"),YUt.forEach(t),hZr=r(qze," \u2014 "),Ire=n(qze,"A",{href:!0});var KUt=s(Ire);uZr=r(KUt,"FlaxXLMRobertaForMaskedLM"),KUt.forEach(t),pZr=r(qze," (XLM-RoBERTa model)"),qze.forEach(t),qe.forEach(t),_Zr=i(vi),T(eA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),AHe=i(m),_m=n(m,"H2",{class:!0});var NJe=s(_m);oA=n(NJe,"A",{id:!0,class:!0,href:!0});var ZUt=s(oA);l7e=n(ZUt,"SPAN",{});var eJt=s(l7e);T(Fk.$$.fragment,eJt),eJt.forEach(t),ZUt.forEach(t),bZr=i(NJe),i7e=n(NJe,"SPAN",{});var oJt=s(i7e);vZr=r(oJt,"FlaxAutoModelForSeq2SeqLM"),oJt.forEach(t),NJe.forEach(t),LHe=i(m),Mr=n(m,"DIV",{class:!0});var Fi=s(Mr);T(Tk.$$.fragment,Fi),FZr=i(Fi),bm=n(Fi,"P",{});var Ine=s(bm);TZr=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nre=n(Ine,"A",{href:!0});var rJt=s(Nre);MZr=r(rJt,"from_pretrained()"),rJt.forEach(t),EZr=r(Ine," class method or the "),qre=n(Ine,"A",{href:!0});var tJt=s(qre);CZr=r(tJt,"from_config()"),tJt.forEach(t),wZr=r(Ine,` class
method.`),Ine.forEach(t),AZr=i(Fi),Mk=n(Fi,"P",{});var qJe=s(Mk);LZr=r(qJe,"This class cannot be instantiated directly using "),d7e=n(qJe,"CODE",{});var aJt=s(d7e);yZr=r(aJt,"__init__()"),aJt.forEach(t),xZr=r(qJe," (throws an error)."),qJe.forEach(t),$Zr=i(Fi),ea=n(Fi,"DIV",{class:!0});var Ay=s(ea);T(Ek.$$.fragment,Ay),kZr=i(Ay),c7e=n(Ay,"P",{});var nJt=s(c7e);SZr=r(nJt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nJt.forEach(t),RZr=i(Ay),vm=n(Ay,"P",{});var Nne=s(vm);PZr=r(Nne,`Note:
Loading a model from its configuration file does `),m7e=n(Nne,"STRONG",{});var sJt=s(m7e);BZr=r(sJt,"not"),sJt.forEach(t),IZr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=n(Nne,"A",{href:!0});var lJt=s(jre);NZr=r(lJt,"from_pretrained()"),lJt.forEach(t),qZr=r(Nne," to load the model weights."),Nne.forEach(t),jZr=i(Ay),T(rA.$$.fragment,Ay),Ay.forEach(t),DZr=i(Fi),Jr=n(Fi,"DIV",{class:!0});var Ti=s(Jr);T(Ck.$$.fragment,Ti),GZr=i(Ti),f7e=n(Ti,"P",{});var iJt=s(f7e);OZr=r(iJt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iJt.forEach(t),VZr=i(Ti),kn=n(Ti,"P",{});var Ly=s(kn);XZr=r(Ly,"The model class to instantiate is selected based on the "),g7e=n(Ly,"CODE",{});var dJt=s(g7e);zZr=r(dJt,"model_type"),dJt.forEach(t),WZr=r(Ly,` property of the config object (either
passed as an argument or loaded from `),h7e=n(Ly,"CODE",{});var cJt=s(h7e);QZr=r(cJt,"pretrained_model_name_or_path"),cJt.forEach(t),HZr=r(Ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(Ly,"CODE",{});var mJt=s(u7e);UZr=r(mJt,"pretrained_model_name_or_path"),mJt.forEach(t),JZr=r(Ly,":"),Ly.forEach(t),YZr=i(Ti),ke=n(Ti,"UL",{});var je=s(ke);tA=n(je,"LI",{});var jze=s(tA);p7e=n(jze,"STRONG",{});var fJt=s(p7e);KZr=r(fJt,"bart"),fJt.forEach(t),ZZr=r(jze," \u2014 "),Dre=n(jze,"A",{href:!0});var gJt=s(Dre);eet=r(gJt,"FlaxBartForConditionalGeneration"),gJt.forEach(t),oet=r(jze," (BART model)"),jze.forEach(t),ret=i(je),aA=n(je,"LI",{});var Dze=s(aA);_7e=n(Dze,"STRONG",{});var hJt=s(_7e);tet=r(hJt,"blenderbot"),hJt.forEach(t),aet=r(Dze," \u2014 "),Gre=n(Dze,"A",{href:!0});var uJt=s(Gre);net=r(uJt,"FlaxBlenderbotForConditionalGeneration"),uJt.forEach(t),set=r(Dze," (Blenderbot model)"),Dze.forEach(t),iet=i(je),nA=n(je,"LI",{});var Gze=s(nA);b7e=n(Gze,"STRONG",{});var pJt=s(b7e);det=r(pJt,"blenderbot-small"),pJt.forEach(t),cet=r(Gze," \u2014 "),Ore=n(Gze,"A",{href:!0});var _Jt=s(Ore);met=r(_Jt,"FlaxBlenderbotSmallForConditionalGeneration"),_Jt.forEach(t),fet=r(Gze," (BlenderbotSmall model)"),Gze.forEach(t),get=i(je),sA=n(je,"LI",{});var Oze=s(sA);v7e=n(Oze,"STRONG",{});var bJt=s(v7e);het=r(bJt,"encoder-decoder"),bJt.forEach(t),uet=r(Oze," \u2014 "),Vre=n(Oze,"A",{href:!0});var vJt=s(Vre);pet=r(vJt,"FlaxEncoderDecoderModel"),vJt.forEach(t),_et=r(Oze," (Encoder decoder model)"),Oze.forEach(t),bet=i(je),lA=n(je,"LI",{});var Vze=s(lA);F7e=n(Vze,"STRONG",{});var FJt=s(F7e);vet=r(FJt,"longt5"),FJt.forEach(t),Fet=r(Vze," \u2014 "),Xre=n(Vze,"A",{href:!0});var TJt=s(Xre);Tet=r(TJt,"FlaxLongT5ForConditionalGeneration"),TJt.forEach(t),Met=r(Vze," (LongT5 model)"),Vze.forEach(t),Eet=i(je),iA=n(je,"LI",{});var Xze=s(iA);T7e=n(Xze,"STRONG",{});var MJt=s(T7e);Cet=r(MJt,"marian"),MJt.forEach(t),wet=r(Xze," \u2014 "),zre=n(Xze,"A",{href:!0});var EJt=s(zre);Aet=r(EJt,"FlaxMarianMTModel"),EJt.forEach(t),Let=r(Xze," (Marian model)"),Xze.forEach(t),yet=i(je),dA=n(je,"LI",{});var zze=s(dA);M7e=n(zze,"STRONG",{});var CJt=s(M7e);xet=r(CJt,"mbart"),CJt.forEach(t),$et=r(zze," \u2014 "),Wre=n(zze,"A",{href:!0});var wJt=s(Wre);ket=r(wJt,"FlaxMBartForConditionalGeneration"),wJt.forEach(t),Set=r(zze," (mBART model)"),zze.forEach(t),Ret=i(je),cA=n(je,"LI",{});var Wze=s(cA);E7e=n(Wze,"STRONG",{});var AJt=s(E7e);Pet=r(AJt,"mt5"),AJt.forEach(t),Bet=r(Wze," \u2014 "),Qre=n(Wze,"A",{href:!0});var LJt=s(Qre);Iet=r(LJt,"FlaxMT5ForConditionalGeneration"),LJt.forEach(t),Net=r(Wze," (MT5 model)"),Wze.forEach(t),qet=i(je),mA=n(je,"LI",{});var Qze=s(mA);C7e=n(Qze,"STRONG",{});var yJt=s(C7e);jet=r(yJt,"pegasus"),yJt.forEach(t),Det=r(Qze," \u2014 "),Hre=n(Qze,"A",{href:!0});var xJt=s(Hre);Get=r(xJt,"FlaxPegasusForConditionalGeneration"),xJt.forEach(t),Oet=r(Qze," (Pegasus model)"),Qze.forEach(t),Vet=i(je),fA=n(je,"LI",{});var Hze=s(fA);w7e=n(Hze,"STRONG",{});var $Jt=s(w7e);Xet=r($Jt,"t5"),$Jt.forEach(t),zet=r(Hze," \u2014 "),Ure=n(Hze,"A",{href:!0});var kJt=s(Ure);Wet=r(kJt,"FlaxT5ForConditionalGeneration"),kJt.forEach(t),Qet=r(Hze," (T5 model)"),Hze.forEach(t),je.forEach(t),Het=i(Ti),T(gA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),yHe=i(m),Fm=n(m,"H2",{class:!0});var jJe=s(Fm);hA=n(jJe,"A",{id:!0,class:!0,href:!0});var SJt=s(hA);A7e=n(SJt,"SPAN",{});var RJt=s(A7e);T(wk.$$.fragment,RJt),RJt.forEach(t),SJt.forEach(t),Uet=i(jJe),L7e=n(jJe,"SPAN",{});var PJt=s(L7e);Jet=r(PJt,"FlaxAutoModelForSequenceClassification"),PJt.forEach(t),jJe.forEach(t),xHe=i(m),Er=n(m,"DIV",{class:!0});var Mi=s(Er);T(Ak.$$.fragment,Mi),Yet=i(Mi),Tm=n(Mi,"P",{});var qne=s(Tm);Ket=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jre=n(qne,"A",{href:!0});var BJt=s(Jre);Zet=r(BJt,"from_pretrained()"),BJt.forEach(t),eot=r(qne," class method or the "),Yre=n(qne,"A",{href:!0});var IJt=s(Yre);oot=r(IJt,"from_config()"),IJt.forEach(t),rot=r(qne,` class
method.`),qne.forEach(t),tot=i(Mi),Lk=n(Mi,"P",{});var DJe=s(Lk);aot=r(DJe,"This class cannot be instantiated directly using "),y7e=n(DJe,"CODE",{});var NJt=s(y7e);not=r(NJt,"__init__()"),NJt.forEach(t),sot=r(DJe," (throws an error)."),DJe.forEach(t),lot=i(Mi),oa=n(Mi,"DIV",{class:!0});var yy=s(oa);T(yk.$$.fragment,yy),iot=i(yy),x7e=n(yy,"P",{});var qJt=s(x7e);dot=r(qJt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qJt.forEach(t),cot=i(yy),Mm=n(yy,"P",{});var jne=s(Mm);mot=r(jne,`Note:
Loading a model from its configuration file does `),$7e=n(jne,"STRONG",{});var jJt=s($7e);fot=r(jJt,"not"),jJt.forEach(t),got=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=n(jne,"A",{href:!0});var DJt=s(Kre);hot=r(DJt,"from_pretrained()"),DJt.forEach(t),uot=r(jne," to load the model weights."),jne.forEach(t),pot=i(yy),T(uA.$$.fragment,yy),yy.forEach(t),_ot=i(Mi),Yr=n(Mi,"DIV",{class:!0});var Ei=s(Yr);T(xk.$$.fragment,Ei),bot=i(Ei),k7e=n(Ei,"P",{});var GJt=s(k7e);vot=r(GJt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GJt.forEach(t),Fot=i(Ei),Sn=n(Ei,"P",{});var xy=s(Sn);Tot=r(xy,"The model class to instantiate is selected based on the "),S7e=n(xy,"CODE",{});var OJt=s(S7e);Mot=r(OJt,"model_type"),OJt.forEach(t),Eot=r(xy,` property of the config object (either
passed as an argument or loaded from `),R7e=n(xy,"CODE",{});var VJt=s(R7e);Cot=r(VJt,"pretrained_model_name_or_path"),VJt.forEach(t),wot=r(xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(xy,"CODE",{});var XJt=s(P7e);Aot=r(XJt,"pretrained_model_name_or_path"),XJt.forEach(t),Lot=r(xy,":"),xy.forEach(t),yot=i(Ei),Se=n(Ei,"UL",{});var De=s(Se);pA=n(De,"LI",{});var Uze=s(pA);B7e=n(Uze,"STRONG",{});var zJt=s(B7e);xot=r(zJt,"albert"),zJt.forEach(t),$ot=r(Uze," \u2014 "),Zre=n(Uze,"A",{href:!0});var WJt=s(Zre);kot=r(WJt,"FlaxAlbertForSequenceClassification"),WJt.forEach(t),Sot=r(Uze," (ALBERT model)"),Uze.forEach(t),Rot=i(De),_A=n(De,"LI",{});var Jze=s(_A);I7e=n(Jze,"STRONG",{});var QJt=s(I7e);Pot=r(QJt,"bart"),QJt.forEach(t),Bot=r(Jze," \u2014 "),ete=n(Jze,"A",{href:!0});var HJt=s(ete);Iot=r(HJt,"FlaxBartForSequenceClassification"),HJt.forEach(t),Not=r(Jze," (BART model)"),Jze.forEach(t),qot=i(De),bA=n(De,"LI",{});var Yze=s(bA);N7e=n(Yze,"STRONG",{});var UJt=s(N7e);jot=r(UJt,"bert"),UJt.forEach(t),Dot=r(Yze," \u2014 "),ote=n(Yze,"A",{href:!0});var JJt=s(ote);Got=r(JJt,"FlaxBertForSequenceClassification"),JJt.forEach(t),Oot=r(Yze," (BERT model)"),Yze.forEach(t),Vot=i(De),vA=n(De,"LI",{});var Kze=s(vA);q7e=n(Kze,"STRONG",{});var YJt=s(q7e);Xot=r(YJt,"big_bird"),YJt.forEach(t),zot=r(Kze," \u2014 "),rte=n(Kze,"A",{href:!0});var KJt=s(rte);Wot=r(KJt,"FlaxBigBirdForSequenceClassification"),KJt.forEach(t),Qot=r(Kze," (BigBird model)"),Kze.forEach(t),Hot=i(De),FA=n(De,"LI",{});var Zze=s(FA);j7e=n(Zze,"STRONG",{});var ZJt=s(j7e);Uot=r(ZJt,"distilbert"),ZJt.forEach(t),Jot=r(Zze," \u2014 "),tte=n(Zze,"A",{href:!0});var eYt=s(tte);Yot=r(eYt,"FlaxDistilBertForSequenceClassification"),eYt.forEach(t),Kot=r(Zze," (DistilBERT model)"),Zze.forEach(t),Zot=i(De),TA=n(De,"LI",{});var eWe=s(TA);D7e=n(eWe,"STRONG",{});var oYt=s(D7e);ert=r(oYt,"electra"),oYt.forEach(t),ort=r(eWe," \u2014 "),ate=n(eWe,"A",{href:!0});var rYt=s(ate);rrt=r(rYt,"FlaxElectraForSequenceClassification"),rYt.forEach(t),trt=r(eWe," (ELECTRA model)"),eWe.forEach(t),art=i(De),MA=n(De,"LI",{});var oWe=s(MA);G7e=n(oWe,"STRONG",{});var tYt=s(G7e);nrt=r(tYt,"mbart"),tYt.forEach(t),srt=r(oWe," \u2014 "),nte=n(oWe,"A",{href:!0});var aYt=s(nte);lrt=r(aYt,"FlaxMBartForSequenceClassification"),aYt.forEach(t),irt=r(oWe," (mBART model)"),oWe.forEach(t),drt=i(De),EA=n(De,"LI",{});var rWe=s(EA);O7e=n(rWe,"STRONG",{});var nYt=s(O7e);crt=r(nYt,"roberta"),nYt.forEach(t),mrt=r(rWe," \u2014 "),ste=n(rWe,"A",{href:!0});var sYt=s(ste);frt=r(sYt,"FlaxRobertaForSequenceClassification"),sYt.forEach(t),grt=r(rWe," (RoBERTa model)"),rWe.forEach(t),hrt=i(De),CA=n(De,"LI",{});var tWe=s(CA);V7e=n(tWe,"STRONG",{});var lYt=s(V7e);urt=r(lYt,"roformer"),lYt.forEach(t),prt=r(tWe," \u2014 "),lte=n(tWe,"A",{href:!0});var iYt=s(lte);_rt=r(iYt,"FlaxRoFormerForSequenceClassification"),iYt.forEach(t),brt=r(tWe," (RoFormer model)"),tWe.forEach(t),vrt=i(De),wA=n(De,"LI",{});var aWe=s(wA);X7e=n(aWe,"STRONG",{});var dYt=s(X7e);Frt=r(dYt,"xlm-roberta"),dYt.forEach(t),Trt=r(aWe," \u2014 "),ite=n(aWe,"A",{href:!0});var cYt=s(ite);Mrt=r(cYt,"FlaxXLMRobertaForSequenceClassification"),cYt.forEach(t),Ert=r(aWe," (XLM-RoBERTa model)"),aWe.forEach(t),De.forEach(t),Crt=i(Ei),T(AA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),$He=i(m),Em=n(m,"H2",{class:!0});var GJe=s(Em);LA=n(GJe,"A",{id:!0,class:!0,href:!0});var mYt=s(LA);z7e=n(mYt,"SPAN",{});var fYt=s(z7e);T($k.$$.fragment,fYt),fYt.forEach(t),mYt.forEach(t),wrt=i(GJe),W7e=n(GJe,"SPAN",{});var gYt=s(W7e);Art=r(gYt,"FlaxAutoModelForQuestionAnswering"),gYt.forEach(t),GJe.forEach(t),kHe=i(m),Cr=n(m,"DIV",{class:!0});var Ci=s(Cr);T(kk.$$.fragment,Ci),Lrt=i(Ci),Cm=n(Ci,"P",{});var Dne=s(Cm);yrt=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dte=n(Dne,"A",{href:!0});var hYt=s(dte);xrt=r(hYt,"from_pretrained()"),hYt.forEach(t),$rt=r(Dne," class method or the "),cte=n(Dne,"A",{href:!0});var uYt=s(cte);krt=r(uYt,"from_config()"),uYt.forEach(t),Srt=r(Dne,` class
method.`),Dne.forEach(t),Rrt=i(Ci),Sk=n(Ci,"P",{});var OJe=s(Sk);Prt=r(OJe,"This class cannot be instantiated directly using "),Q7e=n(OJe,"CODE",{});var pYt=s(Q7e);Brt=r(pYt,"__init__()"),pYt.forEach(t),Irt=r(OJe," (throws an error)."),OJe.forEach(t),Nrt=i(Ci),ra=n(Ci,"DIV",{class:!0});var $y=s(ra);T(Rk.$$.fragment,$y),qrt=i($y),H7e=n($y,"P",{});var _Yt=s(H7e);jrt=r(_Yt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Yt.forEach(t),Drt=i($y),wm=n($y,"P",{});var Gne=s(wm);Grt=r(Gne,`Note:
Loading a model from its configuration file does `),U7e=n(Gne,"STRONG",{});var bYt=s(U7e);Ort=r(bYt,"not"),bYt.forEach(t),Vrt=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=n(Gne,"A",{href:!0});var vYt=s(mte);Xrt=r(vYt,"from_pretrained()"),vYt.forEach(t),zrt=r(Gne," to load the model weights."),Gne.forEach(t),Wrt=i($y),T(yA.$$.fragment,$y),$y.forEach(t),Qrt=i(Ci),Kr=n(Ci,"DIV",{class:!0});var wi=s(Kr);T(Pk.$$.fragment,wi),Hrt=i(wi),J7e=n(wi,"P",{});var FYt=s(J7e);Urt=r(FYt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FYt.forEach(t),Jrt=i(wi),Rn=n(wi,"P",{});var ky=s(Rn);Yrt=r(ky,"The model class to instantiate is selected based on the "),Y7e=n(ky,"CODE",{});var TYt=s(Y7e);Krt=r(TYt,"model_type"),TYt.forEach(t),Zrt=r(ky,` property of the config object (either
passed as an argument or loaded from `),K7e=n(ky,"CODE",{});var MYt=s(K7e);ett=r(MYt,"pretrained_model_name_or_path"),MYt.forEach(t),ott=r(ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=n(ky,"CODE",{});var EYt=s(Z7e);rtt=r(EYt,"pretrained_model_name_or_path"),EYt.forEach(t),ttt=r(ky,":"),ky.forEach(t),att=i(wi),Re=n(wi,"UL",{});var Ge=s(Re);xA=n(Ge,"LI",{});var nWe=s(xA);eLe=n(nWe,"STRONG",{});var CYt=s(eLe);ntt=r(CYt,"albert"),CYt.forEach(t),stt=r(nWe," \u2014 "),fte=n(nWe,"A",{href:!0});var wYt=s(fte);ltt=r(wYt,"FlaxAlbertForQuestionAnswering"),wYt.forEach(t),itt=r(nWe," (ALBERT model)"),nWe.forEach(t),dtt=i(Ge),$A=n(Ge,"LI",{});var sWe=s($A);oLe=n(sWe,"STRONG",{});var AYt=s(oLe);ctt=r(AYt,"bart"),AYt.forEach(t),mtt=r(sWe," \u2014 "),gte=n(sWe,"A",{href:!0});var LYt=s(gte);ftt=r(LYt,"FlaxBartForQuestionAnswering"),LYt.forEach(t),gtt=r(sWe," (BART model)"),sWe.forEach(t),htt=i(Ge),kA=n(Ge,"LI",{});var lWe=s(kA);rLe=n(lWe,"STRONG",{});var yYt=s(rLe);utt=r(yYt,"bert"),yYt.forEach(t),ptt=r(lWe," \u2014 "),hte=n(lWe,"A",{href:!0});var xYt=s(hte);_tt=r(xYt,"FlaxBertForQuestionAnswering"),xYt.forEach(t),btt=r(lWe," (BERT model)"),lWe.forEach(t),vtt=i(Ge),SA=n(Ge,"LI",{});var iWe=s(SA);tLe=n(iWe,"STRONG",{});var $Yt=s(tLe);Ftt=r($Yt,"big_bird"),$Yt.forEach(t),Ttt=r(iWe," \u2014 "),ute=n(iWe,"A",{href:!0});var kYt=s(ute);Mtt=r(kYt,"FlaxBigBirdForQuestionAnswering"),kYt.forEach(t),Ett=r(iWe," (BigBird model)"),iWe.forEach(t),Ctt=i(Ge),RA=n(Ge,"LI",{});var dWe=s(RA);aLe=n(dWe,"STRONG",{});var SYt=s(aLe);wtt=r(SYt,"distilbert"),SYt.forEach(t),Att=r(dWe," \u2014 "),pte=n(dWe,"A",{href:!0});var RYt=s(pte);Ltt=r(RYt,"FlaxDistilBertForQuestionAnswering"),RYt.forEach(t),ytt=r(dWe," (DistilBERT model)"),dWe.forEach(t),xtt=i(Ge),PA=n(Ge,"LI",{});var cWe=s(PA);nLe=n(cWe,"STRONG",{});var PYt=s(nLe);$tt=r(PYt,"electra"),PYt.forEach(t),ktt=r(cWe," \u2014 "),_te=n(cWe,"A",{href:!0});var BYt=s(_te);Stt=r(BYt,"FlaxElectraForQuestionAnswering"),BYt.forEach(t),Rtt=r(cWe," (ELECTRA model)"),cWe.forEach(t),Ptt=i(Ge),BA=n(Ge,"LI",{});var mWe=s(BA);sLe=n(mWe,"STRONG",{});var IYt=s(sLe);Btt=r(IYt,"mbart"),IYt.forEach(t),Itt=r(mWe," \u2014 "),bte=n(mWe,"A",{href:!0});var NYt=s(bte);Ntt=r(NYt,"FlaxMBartForQuestionAnswering"),NYt.forEach(t),qtt=r(mWe," (mBART model)"),mWe.forEach(t),jtt=i(Ge),IA=n(Ge,"LI",{});var fWe=s(IA);lLe=n(fWe,"STRONG",{});var qYt=s(lLe);Dtt=r(qYt,"roberta"),qYt.forEach(t),Gtt=r(fWe," \u2014 "),vte=n(fWe,"A",{href:!0});var jYt=s(vte);Ott=r(jYt,"FlaxRobertaForQuestionAnswering"),jYt.forEach(t),Vtt=r(fWe," (RoBERTa model)"),fWe.forEach(t),Xtt=i(Ge),NA=n(Ge,"LI",{});var gWe=s(NA);iLe=n(gWe,"STRONG",{});var DYt=s(iLe);ztt=r(DYt,"roformer"),DYt.forEach(t),Wtt=r(gWe," \u2014 "),Fte=n(gWe,"A",{href:!0});var GYt=s(Fte);Qtt=r(GYt,"FlaxRoFormerForQuestionAnswering"),GYt.forEach(t),Htt=r(gWe," (RoFormer model)"),gWe.forEach(t),Utt=i(Ge),qA=n(Ge,"LI",{});var hWe=s(qA);dLe=n(hWe,"STRONG",{});var OYt=s(dLe);Jtt=r(OYt,"xlm-roberta"),OYt.forEach(t),Ytt=r(hWe," \u2014 "),Tte=n(hWe,"A",{href:!0});var VYt=s(Tte);Ktt=r(VYt,"FlaxXLMRobertaForQuestionAnswering"),VYt.forEach(t),Ztt=r(hWe," (XLM-RoBERTa model)"),hWe.forEach(t),Ge.forEach(t),eat=i(wi),T(jA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),SHe=i(m),Am=n(m,"H2",{class:!0});var VJe=s(Am);DA=n(VJe,"A",{id:!0,class:!0,href:!0});var XYt=s(DA);cLe=n(XYt,"SPAN",{});var zYt=s(cLe);T(Bk.$$.fragment,zYt),zYt.forEach(t),XYt.forEach(t),oat=i(VJe),mLe=n(VJe,"SPAN",{});var WYt=s(mLe);rat=r(WYt,"FlaxAutoModelForTokenClassification"),WYt.forEach(t),VJe.forEach(t),RHe=i(m),wr=n(m,"DIV",{class:!0});var Ai=s(wr);T(Ik.$$.fragment,Ai),tat=i(Ai),Lm=n(Ai,"P",{});var One=s(Lm);aat=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mte=n(One,"A",{href:!0});var QYt=s(Mte);nat=r(QYt,"from_pretrained()"),QYt.forEach(t),sat=r(One," class method or the "),Ete=n(One,"A",{href:!0});var HYt=s(Ete);lat=r(HYt,"from_config()"),HYt.forEach(t),iat=r(One,` class
method.`),One.forEach(t),dat=i(Ai),Nk=n(Ai,"P",{});var XJe=s(Nk);cat=r(XJe,"This class cannot be instantiated directly using "),fLe=n(XJe,"CODE",{});var UYt=s(fLe);mat=r(UYt,"__init__()"),UYt.forEach(t),fat=r(XJe," (throws an error)."),XJe.forEach(t),gat=i(Ai),ta=n(Ai,"DIV",{class:!0});var Sy=s(ta);T(qk.$$.fragment,Sy),hat=i(Sy),gLe=n(Sy,"P",{});var JYt=s(gLe);uat=r(JYt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JYt.forEach(t),pat=i(Sy),ym=n(Sy,"P",{});var Vne=s(ym);_at=r(Vne,`Note:
Loading a model from its configuration file does `),hLe=n(Vne,"STRONG",{});var YYt=s(hLe);bat=r(YYt,"not"),YYt.forEach(t),vat=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=n(Vne,"A",{href:!0});var KYt=s(Cte);Fat=r(KYt,"from_pretrained()"),KYt.forEach(t),Tat=r(Vne," to load the model weights."),Vne.forEach(t),Mat=i(Sy),T(GA.$$.fragment,Sy),Sy.forEach(t),Eat=i(Ai),Zr=n(Ai,"DIV",{class:!0});var Li=s(Zr);T(jk.$$.fragment,Li),Cat=i(Li),uLe=n(Li,"P",{});var ZYt=s(uLe);wat=r(ZYt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZYt.forEach(t),Aat=i(Li),Pn=n(Li,"P",{});var Ry=s(Pn);Lat=r(Ry,"The model class to instantiate is selected based on the "),pLe=n(Ry,"CODE",{});var eKt=s(pLe);yat=r(eKt,"model_type"),eKt.forEach(t),xat=r(Ry,` property of the config object (either
passed as an argument or loaded from `),_Le=n(Ry,"CODE",{});var oKt=s(_Le);$at=r(oKt,"pretrained_model_name_or_path"),oKt.forEach(t),kat=r(Ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bLe=n(Ry,"CODE",{});var rKt=s(bLe);Sat=r(rKt,"pretrained_model_name_or_path"),rKt.forEach(t),Rat=r(Ry,":"),Ry.forEach(t),Pat=i(Li),Xe=n(Li,"UL",{});var Co=s(Xe);OA=n(Co,"LI",{});var uWe=s(OA);vLe=n(uWe,"STRONG",{});var tKt=s(vLe);Bat=r(tKt,"albert"),tKt.forEach(t),Iat=r(uWe," \u2014 "),wte=n(uWe,"A",{href:!0});var aKt=s(wte);Nat=r(aKt,"FlaxAlbertForTokenClassification"),aKt.forEach(t),qat=r(uWe," (ALBERT model)"),uWe.forEach(t),jat=i(Co),VA=n(Co,"LI",{});var pWe=s(VA);FLe=n(pWe,"STRONG",{});var nKt=s(FLe);Dat=r(nKt,"bert"),nKt.forEach(t),Gat=r(pWe," \u2014 "),Ate=n(pWe,"A",{href:!0});var sKt=s(Ate);Oat=r(sKt,"FlaxBertForTokenClassification"),sKt.forEach(t),Vat=r(pWe," (BERT model)"),pWe.forEach(t),Xat=i(Co),XA=n(Co,"LI",{});var _We=s(XA);TLe=n(_We,"STRONG",{});var lKt=s(TLe);zat=r(lKt,"big_bird"),lKt.forEach(t),Wat=r(_We," \u2014 "),Lte=n(_We,"A",{href:!0});var iKt=s(Lte);Qat=r(iKt,"FlaxBigBirdForTokenClassification"),iKt.forEach(t),Hat=r(_We," (BigBird model)"),_We.forEach(t),Uat=i(Co),zA=n(Co,"LI",{});var bWe=s(zA);MLe=n(bWe,"STRONG",{});var dKt=s(MLe);Jat=r(dKt,"distilbert"),dKt.forEach(t),Yat=r(bWe," \u2014 "),yte=n(bWe,"A",{href:!0});var cKt=s(yte);Kat=r(cKt,"FlaxDistilBertForTokenClassification"),cKt.forEach(t),Zat=r(bWe," (DistilBERT model)"),bWe.forEach(t),ent=i(Co),WA=n(Co,"LI",{});var vWe=s(WA);ELe=n(vWe,"STRONG",{});var mKt=s(ELe);ont=r(mKt,"electra"),mKt.forEach(t),rnt=r(vWe," \u2014 "),xte=n(vWe,"A",{href:!0});var fKt=s(xte);tnt=r(fKt,"FlaxElectraForTokenClassification"),fKt.forEach(t),ant=r(vWe," (ELECTRA model)"),vWe.forEach(t),nnt=i(Co),QA=n(Co,"LI",{});var FWe=s(QA);CLe=n(FWe,"STRONG",{});var gKt=s(CLe);snt=r(gKt,"roberta"),gKt.forEach(t),lnt=r(FWe," \u2014 "),$te=n(FWe,"A",{href:!0});var hKt=s($te);int=r(hKt,"FlaxRobertaForTokenClassification"),hKt.forEach(t),dnt=r(FWe," (RoBERTa model)"),FWe.forEach(t),cnt=i(Co),HA=n(Co,"LI",{});var TWe=s(HA);wLe=n(TWe,"STRONG",{});var uKt=s(wLe);mnt=r(uKt,"roformer"),uKt.forEach(t),fnt=r(TWe," \u2014 "),kte=n(TWe,"A",{href:!0});var pKt=s(kte);gnt=r(pKt,"FlaxRoFormerForTokenClassification"),pKt.forEach(t),hnt=r(TWe," (RoFormer model)"),TWe.forEach(t),unt=i(Co),UA=n(Co,"LI",{});var MWe=s(UA);ALe=n(MWe,"STRONG",{});var _Kt=s(ALe);pnt=r(_Kt,"xlm-roberta"),_Kt.forEach(t),_nt=r(MWe," \u2014 "),Ste=n(MWe,"A",{href:!0});var bKt=s(Ste);bnt=r(bKt,"FlaxXLMRobertaForTokenClassification"),bKt.forEach(t),vnt=r(MWe," (XLM-RoBERTa model)"),MWe.forEach(t),Co.forEach(t),Fnt=i(Li),T(JA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),PHe=i(m),xm=n(m,"H2",{class:!0});var zJe=s(xm);YA=n(zJe,"A",{id:!0,class:!0,href:!0});var vKt=s(YA);LLe=n(vKt,"SPAN",{});var FKt=s(LLe);T(Dk.$$.fragment,FKt),FKt.forEach(t),vKt.forEach(t),Tnt=i(zJe),yLe=n(zJe,"SPAN",{});var TKt=s(yLe);Mnt=r(TKt,"FlaxAutoModelForMultipleChoice"),TKt.forEach(t),zJe.forEach(t),BHe=i(m),Ar=n(m,"DIV",{class:!0});var yi=s(Ar);T(Gk.$$.fragment,yi),Ent=i(yi),$m=n(yi,"P",{});var Xne=s($m);Cnt=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rte=n(Xne,"A",{href:!0});var MKt=s(Rte);wnt=r(MKt,"from_pretrained()"),MKt.forEach(t),Ant=r(Xne," class method or the "),Pte=n(Xne,"A",{href:!0});var EKt=s(Pte);Lnt=r(EKt,"from_config()"),EKt.forEach(t),ynt=r(Xne,` class
method.`),Xne.forEach(t),xnt=i(yi),Ok=n(yi,"P",{});var WJe=s(Ok);$nt=r(WJe,"This class cannot be instantiated directly using "),xLe=n(WJe,"CODE",{});var CKt=s(xLe);knt=r(CKt,"__init__()"),CKt.forEach(t),Snt=r(WJe," (throws an error)."),WJe.forEach(t),Rnt=i(yi),aa=n(yi,"DIV",{class:!0});var Py=s(aa);T(Vk.$$.fragment,Py),Pnt=i(Py),$Le=n(Py,"P",{});var wKt=s($Le);Bnt=r(wKt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wKt.forEach(t),Int=i(Py),km=n(Py,"P",{});var zne=s(km);Nnt=r(zne,`Note:
Loading a model from its configuration file does `),kLe=n(zne,"STRONG",{});var AKt=s(kLe);qnt=r(AKt,"not"),AKt.forEach(t),jnt=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=n(zne,"A",{href:!0});var LKt=s(Bte);Dnt=r(LKt,"from_pretrained()"),LKt.forEach(t),Gnt=r(zne," to load the model weights."),zne.forEach(t),Ont=i(Py),T(KA.$$.fragment,Py),Py.forEach(t),Vnt=i(yi),et=n(yi,"DIV",{class:!0});var xi=s(et);T(Xk.$$.fragment,xi),Xnt=i(xi),SLe=n(xi,"P",{});var yKt=s(SLe);znt=r(yKt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yKt.forEach(t),Wnt=i(xi),Bn=n(xi,"P",{});var By=s(Bn);Qnt=r(By,"The model class to instantiate is selected based on the "),RLe=n(By,"CODE",{});var xKt=s(RLe);Hnt=r(xKt,"model_type"),xKt.forEach(t),Unt=r(By,` property of the config object (either
passed as an argument or loaded from `),PLe=n(By,"CODE",{});var $Kt=s(PLe);Jnt=r($Kt,"pretrained_model_name_or_path"),$Kt.forEach(t),Ynt=r(By,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BLe=n(By,"CODE",{});var kKt=s(BLe);Knt=r(kKt,"pretrained_model_name_or_path"),kKt.forEach(t),Znt=r(By,":"),By.forEach(t),est=i(xi),ze=n(xi,"UL",{});var wo=s(ze);ZA=n(wo,"LI",{});var EWe=s(ZA);ILe=n(EWe,"STRONG",{});var SKt=s(ILe);ost=r(SKt,"albert"),SKt.forEach(t),rst=r(EWe," \u2014 "),Ite=n(EWe,"A",{href:!0});var RKt=s(Ite);tst=r(RKt,"FlaxAlbertForMultipleChoice"),RKt.forEach(t),ast=r(EWe," (ALBERT model)"),EWe.forEach(t),nst=i(wo),e7=n(wo,"LI",{});var CWe=s(e7);NLe=n(CWe,"STRONG",{});var PKt=s(NLe);sst=r(PKt,"bert"),PKt.forEach(t),lst=r(CWe," \u2014 "),Nte=n(CWe,"A",{href:!0});var BKt=s(Nte);ist=r(BKt,"FlaxBertForMultipleChoice"),BKt.forEach(t),dst=r(CWe," (BERT model)"),CWe.forEach(t),cst=i(wo),o7=n(wo,"LI",{});var wWe=s(o7);qLe=n(wWe,"STRONG",{});var IKt=s(qLe);mst=r(IKt,"big_bird"),IKt.forEach(t),fst=r(wWe," \u2014 "),qte=n(wWe,"A",{href:!0});var NKt=s(qte);gst=r(NKt,"FlaxBigBirdForMultipleChoice"),NKt.forEach(t),hst=r(wWe," (BigBird model)"),wWe.forEach(t),ust=i(wo),r7=n(wo,"LI",{});var AWe=s(r7);jLe=n(AWe,"STRONG",{});var qKt=s(jLe);pst=r(qKt,"distilbert"),qKt.forEach(t),_st=r(AWe," \u2014 "),jte=n(AWe,"A",{href:!0});var jKt=s(jte);bst=r(jKt,"FlaxDistilBertForMultipleChoice"),jKt.forEach(t),vst=r(AWe," (DistilBERT model)"),AWe.forEach(t),Fst=i(wo),t7=n(wo,"LI",{});var LWe=s(t7);DLe=n(LWe,"STRONG",{});var DKt=s(DLe);Tst=r(DKt,"electra"),DKt.forEach(t),Mst=r(LWe," \u2014 "),Dte=n(LWe,"A",{href:!0});var GKt=s(Dte);Est=r(GKt,"FlaxElectraForMultipleChoice"),GKt.forEach(t),Cst=r(LWe," (ELECTRA model)"),LWe.forEach(t),wst=i(wo),a7=n(wo,"LI",{});var yWe=s(a7);GLe=n(yWe,"STRONG",{});var OKt=s(GLe);Ast=r(OKt,"roberta"),OKt.forEach(t),Lst=r(yWe," \u2014 "),Gte=n(yWe,"A",{href:!0});var VKt=s(Gte);yst=r(VKt,"FlaxRobertaForMultipleChoice"),VKt.forEach(t),xst=r(yWe," (RoBERTa model)"),yWe.forEach(t),$st=i(wo),n7=n(wo,"LI",{});var xWe=s(n7);OLe=n(xWe,"STRONG",{});var XKt=s(OLe);kst=r(XKt,"roformer"),XKt.forEach(t),Sst=r(xWe," \u2014 "),Ote=n(xWe,"A",{href:!0});var zKt=s(Ote);Rst=r(zKt,"FlaxRoFormerForMultipleChoice"),zKt.forEach(t),Pst=r(xWe," (RoFormer model)"),xWe.forEach(t),Bst=i(wo),s7=n(wo,"LI",{});var $We=s(s7);VLe=n($We,"STRONG",{});var WKt=s(VLe);Ist=r(WKt,"xlm-roberta"),WKt.forEach(t),Nst=r($We," \u2014 "),Vte=n($We,"A",{href:!0});var QKt=s(Vte);qst=r(QKt,"FlaxXLMRobertaForMultipleChoice"),QKt.forEach(t),jst=r($We," (XLM-RoBERTa model)"),$We.forEach(t),wo.forEach(t),Dst=i(xi),T(l7.$$.fragment,xi),xi.forEach(t),yi.forEach(t),IHe=i(m),Sm=n(m,"H2",{class:!0});var QJe=s(Sm);i7=n(QJe,"A",{id:!0,class:!0,href:!0});var HKt=s(i7);XLe=n(HKt,"SPAN",{});var UKt=s(XLe);T(zk.$$.fragment,UKt),UKt.forEach(t),HKt.forEach(t),Gst=i(QJe),zLe=n(QJe,"SPAN",{});var JKt=s(zLe);Ost=r(JKt,"FlaxAutoModelForNextSentencePrediction"),JKt.forEach(t),QJe.forEach(t),NHe=i(m),Lr=n(m,"DIV",{class:!0});var $i=s(Lr);T(Wk.$$.fragment,$i),Vst=i($i),Rm=n($i,"P",{});var Wne=s(Rm);Xst=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xte=n(Wne,"A",{href:!0});var YKt=s(Xte);zst=r(YKt,"from_pretrained()"),YKt.forEach(t),Wst=r(Wne," class method or the "),zte=n(Wne,"A",{href:!0});var KKt=s(zte);Qst=r(KKt,"from_config()"),KKt.forEach(t),Hst=r(Wne,` class
method.`),Wne.forEach(t),Ust=i($i),Qk=n($i,"P",{});var HJe=s(Qk);Jst=r(HJe,"This class cannot be instantiated directly using "),WLe=n(HJe,"CODE",{});var ZKt=s(WLe);Yst=r(ZKt,"__init__()"),ZKt.forEach(t),Kst=r(HJe," (throws an error)."),HJe.forEach(t),Zst=i($i),na=n($i,"DIV",{class:!0});var Iy=s(na);T(Hk.$$.fragment,Iy),elt=i(Iy),QLe=n(Iy,"P",{});var eZt=s(QLe);olt=r(eZt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eZt.forEach(t),rlt=i(Iy),Pm=n(Iy,"P",{});var Qne=s(Pm);tlt=r(Qne,`Note:
Loading a model from its configuration file does `),HLe=n(Qne,"STRONG",{});var oZt=s(HLe);alt=r(oZt,"not"),oZt.forEach(t),nlt=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wte=n(Qne,"A",{href:!0});var rZt=s(Wte);slt=r(rZt,"from_pretrained()"),rZt.forEach(t),llt=r(Qne," to load the model weights."),Qne.forEach(t),ilt=i(Iy),T(d7.$$.fragment,Iy),Iy.forEach(t),dlt=i($i),ot=n($i,"DIV",{class:!0});var ki=s(ot);T(Uk.$$.fragment,ki),clt=i(ki),ULe=n(ki,"P",{});var tZt=s(ULe);mlt=r(tZt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tZt.forEach(t),flt=i(ki),In=n(ki,"P",{});var Ny=s(In);glt=r(Ny,"The model class to instantiate is selected based on the "),JLe=n(Ny,"CODE",{});var aZt=s(JLe);hlt=r(aZt,"model_type"),aZt.forEach(t),ult=r(Ny,` property of the config object (either
passed as an argument or loaded from `),YLe=n(Ny,"CODE",{});var nZt=s(YLe);plt=r(nZt,"pretrained_model_name_or_path"),nZt.forEach(t),_lt=r(Ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KLe=n(Ny,"CODE",{});var sZt=s(KLe);blt=r(sZt,"pretrained_model_name_or_path"),sZt.forEach(t),vlt=r(Ny,":"),Ny.forEach(t),Flt=i(ki),ZLe=n(ki,"UL",{});var lZt=s(ZLe);c7=n(lZt,"LI",{});var kWe=s(c7);eye=n(kWe,"STRONG",{});var iZt=s(eye);Tlt=r(iZt,"bert"),iZt.forEach(t),Mlt=r(kWe," \u2014 "),Qte=n(kWe,"A",{href:!0});var dZt=s(Qte);Elt=r(dZt,"FlaxBertForNextSentencePrediction"),dZt.forEach(t),Clt=r(kWe," (BERT model)"),kWe.forEach(t),lZt.forEach(t),wlt=i(ki),T(m7.$$.fragment,ki),ki.forEach(t),$i.forEach(t),qHe=i(m),Bm=n(m,"H2",{class:!0});var UJe=s(Bm);f7=n(UJe,"A",{id:!0,class:!0,href:!0});var cZt=s(f7);oye=n(cZt,"SPAN",{});var mZt=s(oye);T(Jk.$$.fragment,mZt),mZt.forEach(t),cZt.forEach(t),Alt=i(UJe),rye=n(UJe,"SPAN",{});var fZt=s(rye);Llt=r(fZt,"FlaxAutoModelForImageClassification"),fZt.forEach(t),UJe.forEach(t),jHe=i(m),yr=n(m,"DIV",{class:!0});var Si=s(yr);T(Yk.$$.fragment,Si),ylt=i(Si),Im=n(Si,"P",{});var Hne=s(Im);xlt=r(Hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hte=n(Hne,"A",{href:!0});var gZt=s(Hte);$lt=r(gZt,"from_pretrained()"),gZt.forEach(t),klt=r(Hne," class method or the "),Ute=n(Hne,"A",{href:!0});var hZt=s(Ute);Slt=r(hZt,"from_config()"),hZt.forEach(t),Rlt=r(Hne,` class
method.`),Hne.forEach(t),Plt=i(Si),Kk=n(Si,"P",{});var JJe=s(Kk);Blt=r(JJe,"This class cannot be instantiated directly using "),tye=n(JJe,"CODE",{});var uZt=s(tye);Ilt=r(uZt,"__init__()"),uZt.forEach(t),Nlt=r(JJe," (throws an error)."),JJe.forEach(t),qlt=i(Si),sa=n(Si,"DIV",{class:!0});var qy=s(sa);T(Zk.$$.fragment,qy),jlt=i(qy),aye=n(qy,"P",{});var pZt=s(aye);Dlt=r(pZt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pZt.forEach(t),Glt=i(qy),Nm=n(qy,"P",{});var Une=s(Nm);Olt=r(Une,`Note:
Loading a model from its configuration file does `),nye=n(Une,"STRONG",{});var _Zt=s(nye);Vlt=r(_Zt,"not"),_Zt.forEach(t),Xlt=r(Une,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=n(Une,"A",{href:!0});var bZt=s(Jte);zlt=r(bZt,"from_pretrained()"),bZt.forEach(t),Wlt=r(Une," to load the model weights."),Une.forEach(t),Qlt=i(qy),T(g7.$$.fragment,qy),qy.forEach(t),Hlt=i(Si),rt=n(Si,"DIV",{class:!0});var Ri=s(rt);T(eS.$$.fragment,Ri),Ult=i(Ri),sye=n(Ri,"P",{});var vZt=s(sye);Jlt=r(vZt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vZt.forEach(t),Ylt=i(Ri),Nn=n(Ri,"P",{});var jy=s(Nn);Klt=r(jy,"The model class to instantiate is selected based on the "),lye=n(jy,"CODE",{});var FZt=s(lye);Zlt=r(FZt,"model_type"),FZt.forEach(t),eit=r(jy,` property of the config object (either
passed as an argument or loaded from `),iye=n(jy,"CODE",{});var TZt=s(iye);oit=r(TZt,"pretrained_model_name_or_path"),TZt.forEach(t),rit=r(jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dye=n(jy,"CODE",{});var MZt=s(dye);tit=r(MZt,"pretrained_model_name_or_path"),MZt.forEach(t),ait=r(jy,":"),jy.forEach(t),nit=i(Ri),oS=n(Ri,"UL",{});var YJe=s(oS);h7=n(YJe,"LI",{});var SWe=s(h7);cye=n(SWe,"STRONG",{});var EZt=s(cye);sit=r(EZt,"beit"),EZt.forEach(t),lit=r(SWe," \u2014 "),Yte=n(SWe,"A",{href:!0});var CZt=s(Yte);iit=r(CZt,"FlaxBeitForImageClassification"),CZt.forEach(t),dit=r(SWe," (BEiT model)"),SWe.forEach(t),cit=i(YJe),u7=n(YJe,"LI",{});var RWe=s(u7);mye=n(RWe,"STRONG",{});var wZt=s(mye);mit=r(wZt,"vit"),wZt.forEach(t),fit=r(RWe," \u2014 "),Kte=n(RWe,"A",{href:!0});var AZt=s(Kte);git=r(AZt,"FlaxViTForImageClassification"),AZt.forEach(t),hit=r(RWe," (ViT model)"),RWe.forEach(t),YJe.forEach(t),uit=i(Ri),T(p7.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),DHe=i(m),qm=n(m,"H2",{class:!0});var KJe=s(qm);_7=n(KJe,"A",{id:!0,class:!0,href:!0});var LZt=s(_7);fye=n(LZt,"SPAN",{});var yZt=s(fye);T(rS.$$.fragment,yZt),yZt.forEach(t),LZt.forEach(t),pit=i(KJe),gye=n(KJe,"SPAN",{});var xZt=s(gye);_it=r(xZt,"FlaxAutoModelForVision2Seq"),xZt.forEach(t),KJe.forEach(t),GHe=i(m),xr=n(m,"DIV",{class:!0});var Pi=s(xr);T(tS.$$.fragment,Pi),bit=i(Pi),jm=n(Pi,"P",{});var Jne=s(jm);vit=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zte=n(Jne,"A",{href:!0});var $Zt=s(Zte);Fit=r($Zt,"from_pretrained()"),$Zt.forEach(t),Tit=r(Jne," class method or the "),eae=n(Jne,"A",{href:!0});var kZt=s(eae);Mit=r(kZt,"from_config()"),kZt.forEach(t),Eit=r(Jne,` class
method.`),Jne.forEach(t),Cit=i(Pi),aS=n(Pi,"P",{});var ZJe=s(aS);wit=r(ZJe,"This class cannot be instantiated directly using "),hye=n(ZJe,"CODE",{});var SZt=s(hye);Ait=r(SZt,"__init__()"),SZt.forEach(t),Lit=r(ZJe," (throws an error)."),ZJe.forEach(t),yit=i(Pi),la=n(Pi,"DIV",{class:!0});var Dy=s(la);T(nS.$$.fragment,Dy),xit=i(Dy),uye=n(Dy,"P",{});var RZt=s(uye);$it=r(RZt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RZt.forEach(t),kit=i(Dy),Dm=n(Dy,"P",{});var Yne=s(Dm);Sit=r(Yne,`Note:
Loading a model from its configuration file does `),pye=n(Yne,"STRONG",{});var PZt=s(pye);Rit=r(PZt,"not"),PZt.forEach(t),Pit=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=n(Yne,"A",{href:!0});var BZt=s(oae);Bit=r(BZt,"from_pretrained()"),BZt.forEach(t),Iit=r(Yne," to load the model weights."),Yne.forEach(t),Nit=i(Dy),T(b7.$$.fragment,Dy),Dy.forEach(t),qit=i(Pi),tt=n(Pi,"DIV",{class:!0});var Bi=s(tt);T(sS.$$.fragment,Bi),jit=i(Bi),_ye=n(Bi,"P",{});var IZt=s(_ye);Dit=r(IZt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),IZt.forEach(t),Git=i(Bi),qn=n(Bi,"P",{});var Gy=s(qn);Oit=r(Gy,"The model class to instantiate is selected based on the "),bye=n(Gy,"CODE",{});var NZt=s(bye);Vit=r(NZt,"model_type"),NZt.forEach(t),Xit=r(Gy,` property of the config object (either
passed as an argument or loaded from `),vye=n(Gy,"CODE",{});var qZt=s(vye);zit=r(qZt,"pretrained_model_name_or_path"),qZt.forEach(t),Wit=r(Gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fye=n(Gy,"CODE",{});var jZt=s(Fye);Qit=r(jZt,"pretrained_model_name_or_path"),jZt.forEach(t),Hit=r(Gy,":"),Gy.forEach(t),Uit=i(Bi),Tye=n(Bi,"UL",{});var DZt=s(Tye);v7=n(DZt,"LI",{});var PWe=s(v7);Mye=n(PWe,"STRONG",{});var GZt=s(Mye);Jit=r(GZt,"vision-encoder-decoder"),GZt.forEach(t),Yit=r(PWe," \u2014 "),rae=n(PWe,"A",{href:!0});var OZt=s(rae);Kit=r(OZt,"FlaxVisionEncoderDecoderModel"),OZt.forEach(t),Zit=r(PWe," (Vision Encoder decoder model)"),PWe.forEach(t),DZt.forEach(t),edt=i(Bi),T(F7.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Joa)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Dn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(On,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Vn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Oi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Hm,"id","extending-the-auto-classes"),c(Hm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hm,"href","#extending-the-auto-classes"),c(Vi,"class","relative group"),c(Jm,"id","transformers.AutoConfig"),c(Jm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jm,"href","#transformers.AutoConfig"),c(Xi,"class","relative group"),c(IR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(NR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(DR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(VR,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(zR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(WR,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(HR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(UR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(JR,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(YR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(KR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(eP,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(oP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(rP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(tP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(aP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(nP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(sP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(mP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(TP,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(yP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(xP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c($P,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(kP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(SP,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(RP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(BP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(qP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(jP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(OP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(XP,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(zP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(WP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(QP,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(UP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(JP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(YP,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(KP,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(ZP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(eB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(oB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(rB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(tB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(aB,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(nB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(sB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(lB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(iB,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(dB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(cB,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(mB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(fB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(gB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(hB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(uB,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(pB,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(_B,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(bB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(vB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(FB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(TB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(MB,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(EB,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(CB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(wB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(AB,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(LB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(xB,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c($B,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(kB,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(SB,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(RB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(PB,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(BB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(IB,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(NB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(qB,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(jB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(DB,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(GB,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(OB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(VB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(XB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(zB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(WB,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(QB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(UB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gh,"id","transformers.AutoTokenizer"),c(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gh,"href","#transformers.AutoTokenizer"),c(Wi,"class","relative group"),c(JB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(YB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(KB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ZB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(eI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(oI,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(rI,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(tI,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(nI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(sI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(lI,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(iI,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(dI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(cI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(mI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(fI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(gI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(hI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(uI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(pI,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(_I,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(bI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(vI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(FI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(TI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(MI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(EI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(CI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(wI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(AI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(LI,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(yI,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(xI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c($I,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(RI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(PI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(BI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(II,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(NI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(qI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(OI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(VI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(XI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(zI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(HI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(ZI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(rN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(nN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(dN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(cN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(mN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(fN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(hN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(uN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(pN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(_N,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(bN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(vN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(FN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(TN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(MN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(EN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(CN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(wN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(AN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(LN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(yN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(xN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c($N,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(kN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(SN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(RN,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(BN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(IN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(NN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(qN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(jN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(DN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(ON,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(VN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(XN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(zN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(WN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(QN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(KN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ZN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rq,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(sq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(lq,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(iq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(dq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(mq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(uq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_q,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Fq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Tq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Mq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Eq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Cq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Aq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(Lq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(yq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(xq,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c($q,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Bq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Nq,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Dq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(Gq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Oq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Vq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Xq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Wq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Qq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Hq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(Uq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"id","transformers.AutoFeatureExtractor"),c(Uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uh,"href","#transformers.AutoFeatureExtractor"),c(Qi,"class","relative group"),c(Jq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Yq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Kq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Zq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ej,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(lj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(ij,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(dj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(mj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(gj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(hj,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(uj,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(pj,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(_j,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(bj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vj,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Fj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Tj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Mj,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Ej,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Cj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Aj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Lj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(xj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($j,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Sj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Rj,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoProcessor"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoProcessor"),c(Hi,"class","relative group"),c(Pj,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Bj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ij,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(Nj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(qj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(jj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Dj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Gj,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(Oj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Wj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Qj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Uj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(Jj,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Yj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoModel"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoModel"),c(Ji,"class","relative group"),c(eD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(aD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(nD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(sD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(lD,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(iD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(dD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(fD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(gD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(hD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(uD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(pD,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(_D,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(bD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(vD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(FD,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(TD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(MD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(ED,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(CD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(wD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(AD,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(LD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(yD,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(xD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c($D,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(kD,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(SD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(RD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(PD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(BD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(ID,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(ND,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(qD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(jD,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(DD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(GD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(OD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(VD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(XD,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(zD,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(WD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(QD,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(HD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(UD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(JD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(YD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(KD,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(eG,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(oG,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(rG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(tG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(aG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(nG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(sG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(lG,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(iG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(dG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(cG,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(mG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(fG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(gG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(hG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(uG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(pG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_G,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(bG,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(vG,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(FG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(TG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(MG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(EG,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(CG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(wG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(AG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(LG,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(yG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(xG,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c($G,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(kG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(SG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(RG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(PG,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(BG,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(IG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(NG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(qG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(jG,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(DG,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(GG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(OG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(VG,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(XG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(zG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(WG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(QG,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(HG,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(UG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(JG,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(YG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(KG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(ZG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(eO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oO,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(tO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(aO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(nO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(sO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(lO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(iO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(dO,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(cO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u2,"id","transformers.AutoModelForPreTraining"),c(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u2,"href","#transformers.AutoModelForPreTraining"),c(Zi,"class","relative group"),c(mO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(uO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(_O,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(bO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(vO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(FO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(TO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(MO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(EO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(CO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(AO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(LO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(yO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(xO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c($O,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(kO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(SO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(RO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(PO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(BO,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(IO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(NO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(qO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(jO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(GO,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(OO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(VO,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(XO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(WO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(QO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(HO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(JO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(YO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(KO,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(ZO,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(eV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(oV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(rV,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(tV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(nV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(sV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fb,"id","transformers.AutoModelForCausalLM"),c(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fb,"href","#transformers.AutoModelForCausalLM"),c(rd,"class","relative group"),c(lV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(mV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(fV,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(gV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(hV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(uV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(pV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(_V,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(bV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(vV,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(FV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(TV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(MV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(EV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(CV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(wV,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(AV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(LV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(yV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(xV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c($V,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(kV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(SV,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(RV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(PV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(BV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(IV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(NV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(qV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(jV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(DV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(GV,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(OV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(VV,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(XV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(zV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(QV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(HV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(UV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rv,"id","transformers.AutoModelForMaskedLM"),c(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rv,"href","#transformers.AutoModelForMaskedLM"),c(nd,"class","relative group"),c(JV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(eX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(rX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(tX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(nX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(cX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(fX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(gX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pX,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(_X,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(vX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(FX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(TX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(MX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(EX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(CX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(wX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(AX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(LX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(yX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(xX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c($X,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(kX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(RX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(PX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(BX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForSeq2SeqLM"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForSeq2SeqLM"),c(id,"class","relative group"),c(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(DX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(GX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(OX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(VX,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(XX,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(WX,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(QX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(HX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(UX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(JX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(YX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(KX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(ZX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(ez,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(oz,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(rz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(tz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g1,"id","transformers.AutoModelForSequenceClassification"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForSequenceClassification"),c(md,"class","relative group"),c(az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(iz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(dz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(cz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(mz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(fz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(gz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(hz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(pz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(_z,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(bz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(vz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Fz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Tz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Mz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Ez,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Cz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(wz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Az,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Lz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(yz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(xz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c($z,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(kz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(Sz,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Rz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Pz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(Bz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Iz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Nz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(jz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(Dz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(Gz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Oz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Vz,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(Xz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(zz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Wz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Qz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Hz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Jz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Yz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForMultipleChoice"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForMultipleChoice"),c(hd,"class","relative group"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(dW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(cW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(mW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(gW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(hW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(uW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(pW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(_W,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(bW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(vW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(FW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(TW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(MW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(EW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(CW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(wW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(AW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(LW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(yW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(xW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c($W,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(kW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(SW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(RW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(PW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(BW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(IW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(NW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(qW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForNextSentencePrediction"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForNextSentencePrediction"),c(_d,"class","relative group"),c(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(VW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(XW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(zW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(WW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(QW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForTokenClassification"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForTokenClassification"),c(Fd,"class","relative group"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(KW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(ZW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(eQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(oQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(rQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(tQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(aQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(nQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(sQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(lQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(iQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(dQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(cQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(mQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(fQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(gQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(hQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(uQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(pQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(_Q,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(bQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(vQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(FQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(TQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(MQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(EQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(CQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(wQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(AQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(LQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(yQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(xQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c($Q,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(kQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(SQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(RQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForQuestionAnswering"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForQuestionAnswering"),c(Ed,"class","relative group"),c(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(qQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(jQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(DQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(GQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(OQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(VQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(XQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(WQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(QQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(HQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(JQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(YQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(KQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(ZQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(eH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(oH,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(rH,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(tH,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(aH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(nH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(sH,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(mH,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(fH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(gH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(hH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uH,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(pH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(_H,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(bH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vH,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(FH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(TH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(MH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(EH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(wH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.AutoModelForTableQuestionAnswering"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ad,"class","relative group"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.AutoModelForImageClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.AutoModelForImageClassification"),c(xd,"class","relative group"),c($H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jH,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(OH,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(XH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(zH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(WH,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.AutoModelForVideoClassification"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.AutoModelForVideoClassification"),c(Sd,"class","relative group"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.AutoModelForVision2Seq"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.AutoModelForVision2Seq"),c(Bd,"class","relative group"),c(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.AutoModelForVisualQuestionAnswering"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(qd,"class","relative group"),c(iU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.AutoModelForAudioClassification"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.AutoModelForAudioClassification"),c(Gd,"class","relative group"),c(fU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(MU,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(EU,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.AutoModelForAudioFrameClassification"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.AutoModelForAudioFrameClassification"),c(Xd,"class","relative group"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(yU,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(xU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c($U,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(kU,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.AutoModelForCTC"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.AutoModelForCTC"),c(Qd,"class","relative group"),c(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(IU,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(NU,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(qU,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(jU,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(DU,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(GU,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(OU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(VU,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(XU,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Jd,"class","relative group"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(UU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.AutoModelForAudioXVector"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.AutoModelForAudioXVector"),c(Zd,"class","relative group"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(eJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(oJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(rJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(tJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.AutoModelForMaskedImageModeling"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.AutoModelForMaskedImageModeling"),c(rc,"class","relative group"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(iJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(dJ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(cJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.AutoModelForObjectDetection"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.AutoModelForObjectDetection"),c(nc,"class","relative group"),c(mJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(uJ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.AutoModelForImageSegmentation"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.AutoModelForImageSegmentation"),c(ic,"class","relative group"),c(pJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.AutoModelForSemanticSegmentation"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.AutoModelForSemanticSegmentation"),c(mc,"class","relative group"),c(FJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(CJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(wJ,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(AJ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(LJ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.AutoModelForInstanceSegmentation"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.AutoModelForInstanceSegmentation"),c(hc,"class","relative group"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.TFAutoModel"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.TFAutoModel"),c(_c,"class","relative group"),c(SJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(IJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(NJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(qJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(jJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(DJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(GJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(OJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(VJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(XJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(zJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(WJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(QJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(HJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(UJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(JJ,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(YJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(KJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(ZJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(eY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(oY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(rY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(tY,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(aY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(nY,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(sY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(lY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(iY,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(dY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(cY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(mY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(fY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(gY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(hY,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(uY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(pY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(_Y,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(bY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(vY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(FY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(TY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(MY,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(EY,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(CY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(wY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(AY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(LY,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(yY,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(xY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c($Y,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(kY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(SY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForPreTraining"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForPreTraining"),c(Fc,"class","relative group"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(NY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(jY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(DY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(GY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(OY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(VY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(XY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(zY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(QY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(HY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(UY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(JY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(KY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(ZY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(eK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oK,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(rK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(aK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.TFAutoModelForCausalLM"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.TFAutoModelForCausalLM"),c(Ec,"class","relative group"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(dK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(cK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(fK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(gK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(hK,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(uK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(pK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(_K,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(bK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(vK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.TFAutoModelForImageClassification"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.TFAutoModelForImageClassification"),c(Ac,"class","relative group"),c(TK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(AK,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(LK,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(yK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(xK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c($K,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(kK,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(SK,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.TFAutoModelForMaskedLM"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.TFAutoModelForMaskedLM"),c(xc,"class","relative group"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(NK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(qK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(DK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(GK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(OK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(VK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(XK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(zK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(WK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(QK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(HK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(UK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(JK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(YK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(KK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(ZK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(eZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.TFAutoModelForSeq2SeqLM"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Sc,"class","relative group"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(lZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(iZ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(dZ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(cZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(mZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(fZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(gZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(hZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.TFAutoModelForSequenceClassification"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.TFAutoModelForSequenceClassification"),c(Bc,"class","relative group"),c(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(vZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(FZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(TZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(MZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(EZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(CZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(wZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(AZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(LZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(yZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(xZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c($Z,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(kZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(SZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(RZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(PZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(BZ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(IZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(NZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(qZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(jZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(DZ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(GZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(OZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(VZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.TFAutoModelForMultipleChoice"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.TFAutoModelForMultipleChoice"),c(qc,"class","relative group"),c(XZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(HZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(UZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(JZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(YZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(KZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(ZZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(eee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(oee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(ree,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(tee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(aee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(nee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(see,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(lee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(iee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(dee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y0,"id","transformers.TFAutoModelForNextSentencePrediction"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Gc,"class","relative group"),c(cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(hee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Xc,"class","relative group"),c(uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.TFAutoModelForTokenClassification"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.TFAutoModelForTokenClassification"),c(Qc,"class","relative group"),c(vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Eee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Cee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(wee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(Aee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Lee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(yee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(xee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c($ee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(See,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Ree,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Pee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Bee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Iee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Nee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(qee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(jee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Dee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Gee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.TFAutoModelForQuestionAnswering"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Jc,"class","relative group"),c(Oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Wee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Qee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Hee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Uee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Jee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Yee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Kee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Zee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(eoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ooe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(roe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(toe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(aoe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(noe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(soe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(loe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(ioe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(doe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(coe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xw,"id","transformers.TFAutoModelForVision2Seq"),c(xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xw,"href","#transformers.TFAutoModelForVision2Seq"),c(Zc,"class","relative group"),c(moe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hoe,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(rm,"class","relative group"),c(uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(boe,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModel"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModel"),c(nm,"class","relative group"),c(voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Eoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(Coe,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(woe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(Aoe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Loe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(yoe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(xoe,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c($oe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(koe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(Soe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Roe,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Poe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Boe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Ioe,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Noe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(qoe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(joe,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(Doe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Goe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Ooe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Voe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(Xoe,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(zoe,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Woe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Qoe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Hoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g6,"id","transformers.FlaxAutoModelForCausalLM"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.FlaxAutoModelForCausalLM"),c(im,"class","relative group"),c(Uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Joe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Koe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Zoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(ere,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(ore,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(rre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(tre,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(are,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(nre,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(sre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(lre,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A6,"id","transformers.FlaxAutoModelForPreTraining"),c(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A6,"href","#transformers.FlaxAutoModelForPreTraining"),c(mm,"class","relative group"),c(ire,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(hre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ure,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pre,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(_re,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Fre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Tre,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Mre,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Ere,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O6,"id","transformers.FlaxAutoModelForMaskedLM"),c(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O6,"href","#transformers.FlaxAutoModelForMaskedLM"),c(hm,"class","relative group"),c(Cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(yre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c($re,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(kre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Sre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Rre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Pre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Bre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ire,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(oA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(_m,"class","relative group"),c(Nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Gre,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Ore,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Vre,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Xre,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(zre,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Wre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Qre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Hre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Ure,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(hA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Fm,"class","relative group"),c(Jre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(ete,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(ote,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(rte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(tte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(ate,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(nte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ste,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(lte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ite,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(LA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Em,"class","relative group"),c(dte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(gte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(hte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(ute,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(pte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(_te,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(bte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(vte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Fte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Tte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DA,"id","transformers.FlaxAutoModelForTokenClassification"),c(DA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Am,"class","relative group"),c(Mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Ate,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Lte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(yte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(xte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c($te,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(kte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Ste,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(YA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(xm,"class","relative group"),c(Rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ite,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Nte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(qte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(jte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Dte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Gte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Ote,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Vte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Sm,"class","relative group"),c(Xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f7,"id","transformers.FlaxAutoModelForImageClassification"),c(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f7,"href","#transformers.FlaxAutoModelForImageClassification"),c(Bm,"class","relative group"),c(Hte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ute,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yte,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Kte,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_7,"id","transformers.FlaxAutoModelForVision2Seq"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.FlaxAutoModelForVision2Seq"),c(qm,"class","relative group"),c(Zte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rae,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Ao),e(Ao,Ii),b(m,Xm,_),b(m,dt,_),e(dt,Ni),e(dt,qi),e(qi,Oy),e(dt,zm),b(m,Oe,_),b(m,Qe,_),e(Qe,ji),e(Qe,Dn),e(Dn,Vy),e(Qe,Gn),e(Qe,On),e(On,Xy),e(Qe,Di),e(Qe,Vn),e(Vn,zy),e(Qe,Gi),b(m,Wm,_),M(Ia,m,_),b(m,He,_),b(m,Ae,_),e(Ae,$R),e(Ae,Oi),e(Oi,kR),e(Ae,SR),b(m,Lo,_),b(m,Na,_),e(Na,RR),e(Na,Qm),e(Qm,PR),e(Na,eYe),b(m,BWe,_),b(m,Vi,_),e(Vi,Hm),e(Hm,Kne),M(Wy,Kne,null),e(Vi,oYe),e(Vi,Zne),e(Zne,rYe),b(m,IWe,_),b(m,Xn,_),e(Xn,tYe),e(Xn,ese),e(ese,aYe),e(Xn,nYe),e(Xn,ose),e(ose,sYe),e(Xn,lYe),b(m,NWe,_),M(Qy,m,_),b(m,qWe,_),b(m,BR,_),e(BR,iYe),b(m,jWe,_),M(Um,m,_),b(m,DWe,_),b(m,Xi,_),e(Xi,Jm),e(Jm,rse),M(Hy,rse,null),e(Xi,dYe),e(Xi,tse),e(tse,cYe),b(m,GWe,_),b(m,yo,_),M(Uy,yo,null),e(yo,mYe),e(yo,Jy),e(Jy,fYe),e(Jy,IR),e(IR,gYe),e(Jy,hYe),e(yo,uYe),e(yo,Yy),e(Yy,pYe),e(Yy,ase),e(ase,_Ye),e(Yy,bYe),e(yo,vYe),e(yo,$r),M(Ky,$r,null),e($r,FYe),e($r,nse),e(nse,TYe),e($r,MYe),e($r,zi),e(zi,EYe),e(zi,sse),e(sse,CYe),e(zi,wYe),e(zi,lse),e(lse,AYe),e(zi,LYe),e($r,yYe),e($r,A),e(A,Ym),e(Ym,ise),e(ise,xYe),e(Ym,$Ye),e(Ym,NR),e(NR,kYe),e(Ym,SYe),e(A,RYe),e(A,Km),e(Km,dse),e(dse,PYe),e(Km,BYe),e(Km,qR),e(qR,IYe),e(Km,NYe),e(A,qYe),e(A,Zm),e(Zm,cse),e(cse,jYe),e(Zm,DYe),e(Zm,jR),e(jR,GYe),e(Zm,OYe),e(A,VYe),e(A,ef),e(ef,mse),e(mse,XYe),e(ef,zYe),e(ef,DR),e(DR,WYe),e(ef,QYe),e(A,HYe),e(A,of),e(of,fse),e(fse,UYe),e(of,JYe),e(of,GR),e(GR,YYe),e(of,KYe),e(A,ZYe),e(A,rf),e(rf,gse),e(gse,eKe),e(rf,oKe),e(rf,OR),e(OR,rKe),e(rf,tKe),e(A,aKe),e(A,tf),e(tf,hse),e(hse,nKe),e(tf,sKe),e(tf,VR),e(VR,lKe),e(tf,iKe),e(A,dKe),e(A,af),e(af,use),e(use,cKe),e(af,mKe),e(af,XR),e(XR,fKe),e(af,gKe),e(A,hKe),e(A,nf),e(nf,pse),e(pse,uKe),e(nf,pKe),e(nf,zR),e(zR,_Ke),e(nf,bKe),e(A,vKe),e(A,sf),e(sf,_se),e(_se,FKe),e(sf,TKe),e(sf,WR),e(WR,MKe),e(sf,EKe),e(A,CKe),e(A,lf),e(lf,bse),e(bse,wKe),e(lf,AKe),e(lf,QR),e(QR,LKe),e(lf,yKe),e(A,xKe),e(A,df),e(df,vse),e(vse,$Ke),e(df,kKe),e(df,HR),e(HR,SKe),e(df,RKe),e(A,PKe),e(A,cf),e(cf,Fse),e(Fse,BKe),e(cf,IKe),e(cf,UR),e(UR,NKe),e(cf,qKe),e(A,jKe),e(A,mf),e(mf,Tse),e(Tse,DKe),e(mf,GKe),e(mf,JR),e(JR,OKe),e(mf,VKe),e(A,XKe),e(A,ff),e(ff,Mse),e(Mse,zKe),e(ff,WKe),e(ff,YR),e(YR,QKe),e(ff,HKe),e(A,UKe),e(A,gf),e(gf,Ese),e(Ese,JKe),e(gf,YKe),e(gf,KR),e(KR,KKe),e(gf,ZKe),e(A,eZe),e(A,hf),e(hf,Cse),e(Cse,oZe),e(hf,rZe),e(hf,ZR),e(ZR,tZe),e(hf,aZe),e(A,nZe),e(A,uf),e(uf,wse),e(wse,sZe),e(uf,lZe),e(uf,eP),e(eP,iZe),e(uf,dZe),e(A,cZe),e(A,pf),e(pf,Ase),e(Ase,mZe),e(pf,fZe),e(pf,oP),e(oP,gZe),e(pf,hZe),e(A,uZe),e(A,_f),e(_f,Lse),e(Lse,pZe),e(_f,_Ze),e(_f,rP),e(rP,bZe),e(_f,vZe),e(A,FZe),e(A,bf),e(bf,yse),e(yse,TZe),e(bf,MZe),e(bf,tP),e(tP,EZe),e(bf,CZe),e(A,wZe),e(A,vf),e(vf,xse),e(xse,AZe),e(vf,LZe),e(vf,aP),e(aP,yZe),e(vf,xZe),e(A,$Ze),e(A,Ff),e(Ff,$se),e($se,kZe),e(Ff,SZe),e(Ff,nP),e(nP,RZe),e(Ff,PZe),e(A,BZe),e(A,Tf),e(Tf,kse),e(kse,IZe),e(Tf,NZe),e(Tf,sP),e(sP,qZe),e(Tf,jZe),e(A,DZe),e(A,Mf),e(Mf,Sse),e(Sse,GZe),e(Mf,OZe),e(Mf,lP),e(lP,VZe),e(Mf,XZe),e(A,zZe),e(A,Ef),e(Ef,Rse),e(Rse,WZe),e(Ef,QZe),e(Ef,iP),e(iP,HZe),e(Ef,UZe),e(A,JZe),e(A,Cf),e(Cf,Pse),e(Pse,YZe),e(Cf,KZe),e(Cf,dP),e(dP,ZZe),e(Cf,eeo),e(A,oeo),e(A,wf),e(wf,Bse),e(Bse,reo),e(wf,teo),e(wf,cP),e(cP,aeo),e(wf,neo),e(A,seo),e(A,Af),e(Af,Ise),e(Ise,leo),e(Af,ieo),e(Af,mP),e(mP,deo),e(Af,ceo),e(A,meo),e(A,Lf),e(Lf,Nse),e(Nse,feo),e(Lf,geo),e(Lf,fP),e(fP,heo),e(Lf,ueo),e(A,peo),e(A,yf),e(yf,qse),e(qse,_eo),e(yf,beo),e(yf,gP),e(gP,veo),e(yf,Feo),e(A,Teo),e(A,xf),e(xf,jse),e(jse,Meo),e(xf,Eeo),e(xf,hP),e(hP,Ceo),e(xf,weo),e(A,Aeo),e(A,$f),e($f,Dse),e(Dse,Leo),e($f,yeo),e($f,uP),e(uP,xeo),e($f,$eo),e(A,keo),e(A,kf),e(kf,Gse),e(Gse,Seo),e(kf,Reo),e(kf,pP),e(pP,Peo),e(kf,Beo),e(A,Ieo),e(A,Sf),e(Sf,Ose),e(Ose,Neo),e(Sf,qeo),e(Sf,_P),e(_P,jeo),e(Sf,Deo),e(A,Geo),e(A,Rf),e(Rf,Vse),e(Vse,Oeo),e(Rf,Veo),e(Rf,bP),e(bP,Xeo),e(Rf,zeo),e(A,Weo),e(A,Pf),e(Pf,Xse),e(Xse,Qeo),e(Pf,Heo),e(Pf,vP),e(vP,Ueo),e(Pf,Jeo),e(A,Yeo),e(A,Bf),e(Bf,zse),e(zse,Keo),e(Bf,Zeo),e(Bf,FP),e(FP,eoo),e(Bf,ooo),e(A,roo),e(A,If),e(If,Wse),e(Wse,too),e(If,aoo),e(If,TP),e(TP,noo),e(If,soo),e(A,loo),e(A,Nf),e(Nf,Qse),e(Qse,ioo),e(Nf,doo),e(Nf,MP),e(MP,coo),e(Nf,moo),e(A,foo),e(A,qf),e(qf,Hse),e(Hse,goo),e(qf,hoo),e(qf,EP),e(EP,uoo),e(qf,poo),e(A,_oo),e(A,jf),e(jf,Use),e(Use,boo),e(jf,voo),e(jf,CP),e(CP,Foo),e(jf,Too),e(A,Moo),e(A,Df),e(Df,Jse),e(Jse,Eoo),e(Df,Coo),e(Df,wP),e(wP,woo),e(Df,Aoo),e(A,Loo),e(A,Gf),e(Gf,Yse),e(Yse,yoo),e(Gf,xoo),e(Gf,AP),e(AP,$oo),e(Gf,koo),e(A,Soo),e(A,Of),e(Of,Kse),e(Kse,Roo),e(Of,Poo),e(Of,LP),e(LP,Boo),e(Of,Ioo),e(A,Noo),e(A,Vf),e(Vf,Zse),e(Zse,qoo),e(Vf,joo),e(Vf,yP),e(yP,Doo),e(Vf,Goo),e(A,Ooo),e(A,Xf),e(Xf,ele),e(ele,Voo),e(Xf,Xoo),e(Xf,xP),e(xP,zoo),e(Xf,Woo),e(A,Qoo),e(A,zf),e(zf,ole),e(ole,Hoo),e(zf,Uoo),e(zf,$P),e($P,Joo),e(zf,Yoo),e(A,Koo),e(A,Wf),e(Wf,rle),e(rle,Zoo),e(Wf,ero),e(Wf,kP),e(kP,oro),e(Wf,rro),e(A,tro),e(A,Qf),e(Qf,tle),e(tle,aro),e(Qf,nro),e(Qf,SP),e(SP,sro),e(Qf,lro),e(A,iro),e(A,Hf),e(Hf,ale),e(ale,dro),e(Hf,cro),e(Hf,RP),e(RP,mro),e(Hf,fro),e(A,gro),e(A,Uf),e(Uf,nle),e(nle,hro),e(Uf,uro),e(Uf,PP),e(PP,pro),e(Uf,_ro),e(A,bro),e(A,Jf),e(Jf,sle),e(sle,vro),e(Jf,Fro),e(Jf,BP),e(BP,Tro),e(Jf,Mro),e(A,Ero),e(A,Yf),e(Yf,lle),e(lle,Cro),e(Yf,wro),e(Yf,IP),e(IP,Aro),e(Yf,Lro),e(A,yro),e(A,Kf),e(Kf,ile),e(ile,xro),e(Kf,$ro),e(Kf,NP),e(NP,kro),e(Kf,Sro),e(A,Rro),e(A,Zf),e(Zf,dle),e(dle,Pro),e(Zf,Bro),e(Zf,qP),e(qP,Iro),e(Zf,Nro),e(A,qro),e(A,eg),e(eg,cle),e(cle,jro),e(eg,Dro),e(eg,jP),e(jP,Gro),e(eg,Oro),e(A,Vro),e(A,og),e(og,mle),e(mle,Xro),e(og,zro),e(og,DP),e(DP,Wro),e(og,Qro),e(A,Hro),e(A,rg),e(rg,fle),e(fle,Uro),e(rg,Jro),e(rg,GP),e(GP,Yro),e(rg,Kro),e(A,Zro),e(A,tg),e(tg,gle),e(gle,eto),e(tg,oto),e(tg,OP),e(OP,rto),e(tg,tto),e(A,ato),e(A,ag),e(ag,hle),e(hle,nto),e(ag,sto),e(ag,VP),e(VP,lto),e(ag,ito),e(A,dto),e(A,ng),e(ng,ule),e(ule,cto),e(ng,mto),e(ng,XP),e(XP,fto),e(ng,gto),e(A,hto),e(A,sg),e(sg,ple),e(ple,uto),e(sg,pto),e(sg,zP),e(zP,_to),e(sg,bto),e(A,vto),e(A,lg),e(lg,_le),e(_le,Fto),e(lg,Tto),e(lg,WP),e(WP,Mto),e(lg,Eto),e(A,Cto),e(A,ig),e(ig,ble),e(ble,wto),e(ig,Ato),e(ig,QP),e(QP,Lto),e(ig,yto),e(A,xto),e(A,dg),e(dg,vle),e(vle,$to),e(dg,kto),e(dg,HP),e(HP,Sto),e(dg,Rto),e(A,Pto),e(A,cg),e(cg,Fle),e(Fle,Bto),e(cg,Ito),e(cg,UP),e(UP,Nto),e(cg,qto),e(A,jto),e(A,mg),e(mg,Tle),e(Tle,Dto),e(mg,Gto),e(mg,JP),e(JP,Oto),e(mg,Vto),e(A,Xto),e(A,fg),e(fg,Mle),e(Mle,zto),e(fg,Wto),e(fg,YP),e(YP,Qto),e(fg,Hto),e(A,Uto),e(A,gg),e(gg,Ele),e(Ele,Jto),e(gg,Yto),e(gg,KP),e(KP,Kto),e(gg,Zto),e(A,eao),e(A,hg),e(hg,Cle),e(Cle,oao),e(hg,rao),e(hg,ZP),e(ZP,tao),e(hg,aao),e(A,nao),e(A,ug),e(ug,wle),e(wle,sao),e(ug,lao),e(ug,eB),e(eB,iao),e(ug,dao),e(A,cao),e(A,pg),e(pg,Ale),e(Ale,mao),e(pg,fao),e(pg,oB),e(oB,gao),e(pg,hao),e(A,uao),e(A,_g),e(_g,Lle),e(Lle,pao),e(_g,_ao),e(_g,rB),e(rB,bao),e(_g,vao),e(A,Fao),e(A,bg),e(bg,yle),e(yle,Tao),e(bg,Mao),e(bg,tB),e(tB,Eao),e(bg,Cao),e(A,wao),e(A,vg),e(vg,xle),e(xle,Aao),e(vg,Lao),e(vg,aB),e(aB,yao),e(vg,xao),e(A,$ao),e(A,Fg),e(Fg,$le),e($le,kao),e(Fg,Sao),e(Fg,nB),e(nB,Rao),e(Fg,Pao),e(A,Bao),e(A,Tg),e(Tg,kle),e(kle,Iao),e(Tg,Nao),e(Tg,sB),e(sB,qao),e(Tg,jao),e(A,Dao),e(A,Mg),e(Mg,Sle),e(Sle,Gao),e(Mg,Oao),e(Mg,lB),e(lB,Vao),e(Mg,Xao),e(A,zao),e(A,Eg),e(Eg,Rle),e(Rle,Wao),e(Eg,Qao),e(Eg,iB),e(iB,Hao),e(Eg,Uao),e(A,Jao),e(A,Cg),e(Cg,Ple),e(Ple,Yao),e(Cg,Kao),e(Cg,dB),e(dB,Zao),e(Cg,eno),e(A,ono),e(A,wg),e(wg,Ble),e(Ble,rno),e(wg,tno),e(wg,cB),e(cB,ano),e(wg,nno),e(A,sno),e(A,Ag),e(Ag,Ile),e(Ile,lno),e(Ag,ino),e(Ag,mB),e(mB,dno),e(Ag,cno),e(A,mno),e(A,Lg),e(Lg,Nle),e(Nle,fno),e(Lg,gno),e(Lg,fB),e(fB,hno),e(Lg,uno),e(A,pno),e(A,yg),e(yg,qle),e(qle,_no),e(yg,bno),e(yg,gB),e(gB,vno),e(yg,Fno),e(A,Tno),e(A,xg),e(xg,jle),e(jle,Mno),e(xg,Eno),e(xg,hB),e(hB,Cno),e(xg,wno),e(A,Ano),e(A,$g),e($g,Dle),e(Dle,Lno),e($g,yno),e($g,uB),e(uB,xno),e($g,$no),e(A,kno),e(A,kg),e(kg,Gle),e(Gle,Sno),e(kg,Rno),e(kg,pB),e(pB,Pno),e(kg,Bno),e(A,Ino),e(A,Sg),e(Sg,Ole),e(Ole,Nno),e(Sg,qno),e(Sg,_B),e(_B,jno),e(Sg,Dno),e(A,Gno),e(A,Rg),e(Rg,Vle),e(Vle,Ono),e(Rg,Vno),e(Rg,bB),e(bB,Xno),e(Rg,zno),e(A,Wno),e(A,Pg),e(Pg,Xle),e(Xle,Qno),e(Pg,Hno),e(Pg,vB),e(vB,Uno),e(Pg,Jno),e(A,Yno),e(A,Bg),e(Bg,zle),e(zle,Kno),e(Bg,Zno),e(Bg,FB),e(FB,eso),e(Bg,oso),e(A,rso),e(A,Ig),e(Ig,Wle),e(Wle,tso),e(Ig,aso),e(Ig,TB),e(TB,nso),e(Ig,sso),e(A,lso),e(A,Ng),e(Ng,Qle),e(Qle,iso),e(Ng,dso),e(Ng,MB),e(MB,cso),e(Ng,mso),e(A,fso),e(A,qg),e(qg,Hle),e(Hle,gso),e(qg,hso),e(qg,EB),e(EB,uso),e(qg,pso),e(A,_so),e(A,jg),e(jg,Ule),e(Ule,bso),e(jg,vso),e(jg,CB),e(CB,Fso),e(jg,Tso),e(A,Mso),e(A,Dg),e(Dg,Jle),e(Jle,Eso),e(Dg,Cso),e(Dg,wB),e(wB,wso),e(Dg,Aso),e(A,Lso),e(A,Gg),e(Gg,Yle),e(Yle,yso),e(Gg,xso),e(Gg,AB),e(AB,$so),e(Gg,kso),e(A,Sso),e(A,Og),e(Og,Kle),e(Kle,Rso),e(Og,Pso),e(Og,LB),e(LB,Bso),e(Og,Iso),e(A,Nso),e(A,Vg),e(Vg,Zle),e(Zle,qso),e(Vg,jso),e(Vg,yB),e(yB,Dso),e(Vg,Gso),e(A,Oso),e(A,Xg),e(Xg,eie),e(eie,Vso),e(Xg,Xso),e(Xg,xB),e(xB,zso),e(Xg,Wso),e(A,Qso),e(A,zg),e(zg,oie),e(oie,Hso),e(zg,Uso),e(zg,$B),e($B,Jso),e(zg,Yso),e(A,Kso),e(A,Wg),e(Wg,rie),e(rie,Zso),e(Wg,elo),e(Wg,kB),e(kB,olo),e(Wg,rlo),e(A,tlo),e(A,Qg),e(Qg,tie),e(tie,alo),e(Qg,nlo),e(Qg,SB),e(SB,slo),e(Qg,llo),e(A,ilo),e(A,Hg),e(Hg,aie),e(aie,dlo),e(Hg,clo),e(Hg,RB),e(RB,mlo),e(Hg,flo),e(A,glo),e(A,Ug),e(Ug,nie),e(nie,hlo),e(Ug,ulo),e(Ug,PB),e(PB,plo),e(Ug,_lo),e(A,blo),e(A,Jg),e(Jg,sie),e(sie,vlo),e(Jg,Flo),e(Jg,BB),e(BB,Tlo),e(Jg,Mlo),e(A,Elo),e(A,Yg),e(Yg,lie),e(lie,Clo),e(Yg,wlo),e(Yg,IB),e(IB,Alo),e(Yg,Llo),e(A,ylo),e(A,Kg),e(Kg,iie),e(iie,xlo),e(Kg,$lo),e(Kg,NB),e(NB,klo),e(Kg,Slo),e(A,Rlo),e(A,Zg),e(Zg,die),e(die,Plo),e(Zg,Blo),e(Zg,qB),e(qB,Ilo),e(Zg,Nlo),e(A,qlo),e(A,eh),e(eh,cie),e(cie,jlo),e(eh,Dlo),e(eh,jB),e(jB,Glo),e(eh,Olo),e(A,Vlo),e(A,oh),e(oh,mie),e(mie,Xlo),e(oh,zlo),e(oh,DB),e(DB,Wlo),e(oh,Qlo),e(A,Hlo),e(A,rh),e(rh,fie),e(fie,Ulo),e(rh,Jlo),e(rh,GB),e(GB,Ylo),e(rh,Klo),e(A,Zlo),e(A,th),e(th,gie),e(gie,eio),e(th,oio),e(th,OB),e(OB,rio),e(th,tio),e(A,aio),e(A,ah),e(ah,hie),e(hie,nio),e(ah,sio),e(ah,VB),e(VB,lio),e(ah,iio),e(A,dio),e(A,nh),e(nh,uie),e(uie,cio),e(nh,mio),e(nh,XB),e(XB,fio),e(nh,gio),e(A,hio),e(A,sh),e(sh,pie),e(pie,uio),e(sh,pio),e(sh,zB),e(zB,_io),e(sh,bio),e(A,vio),e(A,lh),e(lh,_ie),e(_ie,Fio),e(lh,Tio),e(lh,WB),e(WB,Mio),e(lh,Eio),e(A,Cio),e(A,ih),e(ih,bie),e(bie,wio),e(ih,Aio),e(ih,QB),e(QB,Lio),e(ih,yio),e(A,xio),e(A,dh),e(dh,vie),e(vie,$io),e(dh,kio),e(dh,HB),e(HB,Sio),e(dh,Rio),e(A,Pio),e(A,ch),e(ch,Fie),e(Fie,Bio),e(ch,Iio),e(ch,UB),e(UB,Nio),e(ch,qio),e($r,jio),M(mh,$r,null),e(yo,Dio),e(yo,fh),M(Zy,fh,null),e(fh,Gio),e(fh,Tie),e(Tie,Oio),b(m,OWe,_),b(m,Wi,_),e(Wi,gh),e(gh,Mie),M(e8,Mie,null),e(Wi,Vio),e(Wi,Eie),e(Eie,Xio),b(m,VWe,_),b(m,xo,_),M(o8,xo,null),e(xo,zio),e(xo,r8),e(r8,Wio),e(r8,JB),e(JB,Qio),e(r8,Hio),e(xo,Uio),e(xo,t8),e(t8,Jio),e(t8,Cie),e(Cie,Yio),e(t8,Kio),e(xo,Zio),e(xo,kr),M(a8,kr,null),e(kr,edo),e(kr,wie),e(wie,odo),e(kr,rdo),e(kr,qa),e(qa,tdo),e(qa,Aie),e(Aie,ado),e(qa,ndo),e(qa,Lie),e(Lie,sdo),e(qa,ldo),e(qa,yie),e(yie,ido),e(qa,ddo),e(kr,cdo),e(kr,k),e(k,zn),e(zn,xie),e(xie,mdo),e(zn,fdo),e(zn,YB),e(YB,gdo),e(zn,hdo),e(zn,KB),e(KB,udo),e(zn,pdo),e(k,_do),e(k,Wn),e(Wn,$ie),e($ie,bdo),e(Wn,vdo),e(Wn,ZB),e(ZB,Fdo),e(Wn,Tdo),e(Wn,eI),e(eI,Mdo),e(Wn,Edo),e(k,Cdo),e(k,Qn),e(Qn,kie),e(kie,wdo),e(Qn,Ado),e(Qn,oI),e(oI,Ldo),e(Qn,ydo),e(Qn,rI),e(rI,xdo),e(Qn,$do),e(k,kdo),e(k,hh),e(hh,Sie),e(Sie,Sdo),e(hh,Rdo),e(hh,tI),e(tI,Pdo),e(hh,Bdo),e(k,Ido),e(k,Hn),e(Hn,Rie),e(Rie,Ndo),e(Hn,qdo),e(Hn,aI),e(aI,jdo),e(Hn,Ddo),e(Hn,nI),e(nI,Gdo),e(Hn,Odo),e(k,Vdo),e(k,uh),e(uh,Pie),e(Pie,Xdo),e(uh,zdo),e(uh,sI),e(sI,Wdo),e(uh,Qdo),e(k,Hdo),e(k,ph),e(ph,Bie),e(Bie,Udo),e(ph,Jdo),e(ph,lI),e(lI,Ydo),e(ph,Kdo),e(k,Zdo),e(k,_h),e(_h,Iie),e(Iie,eco),e(_h,oco),e(_h,iI),e(iI,rco),e(_h,tco),e(k,aco),e(k,Un),e(Un,Nie),e(Nie,nco),e(Un,sco),e(Un,dI),e(dI,lco),e(Un,ico),e(Un,cI),e(cI,dco),e(Un,cco),e(k,mco),e(k,Jn),e(Jn,qie),e(qie,fco),e(Jn,gco),e(Jn,mI),e(mI,hco),e(Jn,uco),e(Jn,fI),e(fI,pco),e(Jn,_co),e(k,bco),e(k,Yn),e(Yn,jie),e(jie,vco),e(Yn,Fco),e(Yn,gI),e(gI,Tco),e(Yn,Mco),e(Yn,hI),e(hI,Eco),e(Yn,Cco),e(k,wco),e(k,bh),e(bh,Die),e(Die,Aco),e(bh,Lco),e(bh,uI),e(uI,yco),e(bh,xco),e(k,$co),e(k,vh),e(vh,Gie),e(Gie,kco),e(vh,Sco),e(vh,pI),e(pI,Rco),e(vh,Pco),e(k,Bco),e(k,Fh),e(Fh,Oie),e(Oie,Ico),e(Fh,Nco),e(Fh,_I),e(_I,qco),e(Fh,jco),e(k,Dco),e(k,Kn),e(Kn,Vie),e(Vie,Gco),e(Kn,Oco),e(Kn,bI),e(bI,Vco),e(Kn,Xco),e(Kn,vI),e(vI,zco),e(Kn,Wco),e(k,Qco),e(k,Th),e(Th,Xie),e(Xie,Hco),e(Th,Uco),e(Th,FI),e(FI,Jco),e(Th,Yco),e(k,Kco),e(k,Zn),e(Zn,zie),e(zie,Zco),e(Zn,emo),e(Zn,TI),e(TI,omo),e(Zn,rmo),e(Zn,MI),e(MI,tmo),e(Zn,amo),e(k,nmo),e(k,es),e(es,Wie),e(Wie,smo),e(es,lmo),e(es,EI),e(EI,imo),e(es,dmo),e(es,CI),e(CI,cmo),e(es,mmo),e(k,fmo),e(k,os),e(os,Qie),e(Qie,gmo),e(os,hmo),e(os,wI),e(wI,umo),e(os,pmo),e(os,AI),e(AI,_mo),e(os,bmo),e(k,vmo),e(k,rs),e(rs,Hie),e(Hie,Fmo),e(rs,Tmo),e(rs,LI),e(LI,Mmo),e(rs,Emo),e(rs,yI),e(yI,Cmo),e(rs,wmo),e(k,Amo),e(k,Mh),e(Mh,Uie),e(Uie,Lmo),e(Mh,ymo),e(Mh,xI),e(xI,xmo),e(Mh,$mo),e(k,kmo),e(k,ts),e(ts,Jie),e(Jie,Smo),e(ts,Rmo),e(ts,$I),e($I,Pmo),e(ts,Bmo),e(ts,kI),e(kI,Imo),e(ts,Nmo),e(k,qmo),e(k,as),e(as,Yie),e(Yie,jmo),e(as,Dmo),e(as,SI),e(SI,Gmo),e(as,Omo),e(as,RI),e(RI,Vmo),e(as,Xmo),e(k,zmo),e(k,ns),e(ns,Kie),e(Kie,Wmo),e(ns,Qmo),e(ns,PI),e(PI,Hmo),e(ns,Umo),e(ns,BI),e(BI,Jmo),e(ns,Ymo),e(k,Kmo),e(k,ss),e(ss,Zie),e(Zie,Zmo),e(ss,efo),e(ss,II),e(II,ofo),e(ss,rfo),e(ss,NI),e(NI,tfo),e(ss,afo),e(k,nfo),e(k,ls),e(ls,ede),e(ede,sfo),e(ls,lfo),e(ls,qI),e(qI,ifo),e(ls,dfo),e(ls,jI),e(jI,cfo),e(ls,mfo),e(k,ffo),e(k,is),e(is,ode),e(ode,gfo),e(is,hfo),e(is,DI),e(DI,ufo),e(is,pfo),e(is,GI),e(GI,_fo),e(is,bfo),e(k,vfo),e(k,Eh),e(Eh,rde),e(rde,Ffo),e(Eh,Tfo),e(Eh,OI),e(OI,Mfo),e(Eh,Efo),e(k,Cfo),e(k,ds),e(ds,tde),e(tde,wfo),e(ds,Afo),e(ds,VI),e(VI,Lfo),e(ds,yfo),e(ds,XI),e(XI,xfo),e(ds,$fo),e(k,kfo),e(k,Ch),e(Ch,ade),e(ade,Sfo),e(Ch,Rfo),e(Ch,zI),e(zI,Pfo),e(Ch,Bfo),e(k,Ifo),e(k,cs),e(cs,nde),e(nde,Nfo),e(cs,qfo),e(cs,WI),e(WI,jfo),e(cs,Dfo),e(cs,QI),e(QI,Gfo),e(cs,Ofo),e(k,Vfo),e(k,ms),e(ms,sde),e(sde,Xfo),e(ms,zfo),e(ms,HI),e(HI,Wfo),e(ms,Qfo),e(ms,UI),e(UI,Hfo),e(ms,Ufo),e(k,Jfo),e(k,fs),e(fs,lde),e(lde,Yfo),e(fs,Kfo),e(fs,JI),e(JI,Zfo),e(fs,ego),e(fs,YI),e(YI,ogo),e(fs,rgo),e(k,tgo),e(k,wh),e(wh,ide),e(ide,ago),e(wh,ngo),e(wh,KI),e(KI,sgo),e(wh,lgo),e(k,igo),e(k,gs),e(gs,dde),e(dde,dgo),e(gs,cgo),e(gs,ZI),e(ZI,mgo),e(gs,fgo),e(gs,eN),e(eN,ggo),e(gs,hgo),e(k,ugo),e(k,hs),e(hs,cde),e(cde,pgo),e(hs,_go),e(hs,oN),e(oN,bgo),e(hs,vgo),e(hs,rN),e(rN,Fgo),e(hs,Tgo),e(k,Mgo),e(k,us),e(us,mde),e(mde,Ego),e(us,Cgo),e(us,tN),e(tN,wgo),e(us,Ago),e(us,aN),e(aN,Lgo),e(us,ygo),e(k,xgo),e(k,Ah),e(Ah,fde),e(fde,$go),e(Ah,kgo),e(Ah,nN),e(nN,Sgo),e(Ah,Rgo),e(k,Pgo),e(k,ps),e(ps,gde),e(gde,Bgo),e(ps,Igo),e(ps,sN),e(sN,Ngo),e(ps,qgo),e(ps,lN),e(lN,jgo),e(ps,Dgo),e(k,Ggo),e(k,_s),e(_s,hde),e(hde,Ogo),e(_s,Vgo),e(_s,iN),e(iN,Xgo),e(_s,zgo),e(_s,dN),e(dN,Wgo),e(_s,Qgo),e(k,Hgo),e(k,bs),e(bs,ude),e(ude,Ugo),e(bs,Jgo),e(bs,cN),e(cN,Ygo),e(bs,Kgo),e(bs,mN),e(mN,Zgo),e(bs,eho),e(k,oho),e(k,vs),e(vs,pde),e(pde,rho),e(vs,tho),e(vs,fN),e(fN,aho),e(vs,nho),e(vs,gN),e(gN,sho),e(vs,lho),e(k,iho),e(k,Fs),e(Fs,_de),e(_de,dho),e(Fs,cho),e(Fs,hN),e(hN,mho),e(Fs,fho),e(Fs,uN),e(uN,gho),e(Fs,hho),e(k,uho),e(k,Ts),e(Ts,bde),e(bde,pho),e(Ts,_ho),e(Ts,pN),e(pN,bho),e(Ts,vho),e(Ts,_N),e(_N,Fho),e(Ts,Tho),e(k,Mho),e(k,Ms),e(Ms,vde),e(vde,Eho),e(Ms,Cho),e(Ms,bN),e(bN,who),e(Ms,Aho),e(Ms,vN),e(vN,Lho),e(Ms,yho),e(k,xho),e(k,Es),e(Es,Fde),e(Fde,$ho),e(Es,kho),e(Es,FN),e(FN,Sho),e(Es,Rho),e(Es,TN),e(TN,Pho),e(Es,Bho),e(k,Iho),e(k,Lh),e(Lh,Tde),e(Tde,Nho),e(Lh,qho),e(Lh,MN),e(MN,jho),e(Lh,Dho),e(k,Gho),e(k,Cs),e(Cs,Mde),e(Mde,Oho),e(Cs,Vho),e(Cs,EN),e(EN,Xho),e(Cs,zho),e(Cs,CN),e(CN,Who),e(Cs,Qho),e(k,Hho),e(k,yh),e(yh,Ede),e(Ede,Uho),e(yh,Jho),e(yh,wN),e(wN,Yho),e(yh,Kho),e(k,Zho),e(k,xh),e(xh,Cde),e(Cde,euo),e(xh,ouo),e(xh,AN),e(AN,ruo),e(xh,tuo),e(k,auo),e(k,ws),e(ws,wde),e(wde,nuo),e(ws,suo),e(ws,LN),e(LN,luo),e(ws,iuo),e(ws,yN),e(yN,duo),e(ws,cuo),e(k,muo),e(k,As),e(As,Ade),e(Ade,fuo),e(As,guo),e(As,xN),e(xN,huo),e(As,uuo),e(As,$N),e($N,puo),e(As,_uo),e(k,buo),e(k,Ls),e(Ls,Lde),e(Lde,vuo),e(Ls,Fuo),e(Ls,kN),e(kN,Tuo),e(Ls,Muo),e(Ls,SN),e(SN,Euo),e(Ls,Cuo),e(k,wuo),e(k,$h),e($h,yde),e(yde,Auo),e($h,Luo),e($h,RN),e(RN,yuo),e($h,xuo),e(k,$uo),e(k,ys),e(ys,xde),e(xde,kuo),e(ys,Suo),e(ys,PN),e(PN,Ruo),e(ys,Puo),e(ys,BN),e(BN,Buo),e(ys,Iuo),e(k,Nuo),e(k,xs),e(xs,$de),e($de,quo),e(xs,juo),e(xs,IN),e(IN,Duo),e(xs,Guo),e(xs,NN),e(NN,Ouo),e(xs,Vuo),e(k,Xuo),e(k,$s),e($s,kde),e(kde,zuo),e($s,Wuo),e($s,qN),e(qN,Quo),e($s,Huo),e($s,jN),e(jN,Uuo),e($s,Juo),e(k,Yuo),e(k,ks),e(ks,Sde),e(Sde,Kuo),e(ks,Zuo),e(ks,DN),e(DN,epo),e(ks,opo),e(ks,GN),e(GN,rpo),e(ks,tpo),e(k,apo),e(k,Ss),e(Ss,Rde),e(Rde,npo),e(Ss,spo),e(Ss,ON),e(ON,lpo),e(Ss,ipo),e(Ss,VN),e(VN,dpo),e(Ss,cpo),e(k,mpo),e(k,Rs),e(Rs,Pde),e(Pde,fpo),e(Rs,gpo),e(Rs,XN),e(XN,hpo),e(Rs,upo),e(Rs,zN),e(zN,ppo),e(Rs,_po),e(k,bpo),e(k,Ps),e(Ps,Bde),e(Bde,vpo),e(Ps,Fpo),e(Ps,WN),e(WN,Tpo),e(Ps,Mpo),e(Ps,QN),e(QN,Epo),e(Ps,Cpo),e(k,wpo),e(k,Bs),e(Bs,Ide),e(Ide,Apo),e(Bs,Lpo),e(Bs,HN),e(HN,ypo),e(Bs,xpo),e(Bs,UN),e(UN,$po),e(Bs,kpo),e(k,Spo),e(k,kh),e(kh,Nde),e(Nde,Rpo),e(kh,Ppo),e(kh,JN),e(JN,Bpo),e(kh,Ipo),e(k,Npo),e(k,Is),e(Is,qde),e(qde,qpo),e(Is,jpo),e(Is,YN),e(YN,Dpo),e(Is,Gpo),e(Is,KN),e(KN,Opo),e(Is,Vpo),e(k,Xpo),e(k,Ns),e(Ns,jde),e(jde,zpo),e(Ns,Wpo),e(Ns,ZN),e(ZN,Qpo),e(Ns,Hpo),e(Ns,eq),e(eq,Upo),e(Ns,Jpo),e(k,Ypo),e(k,Sh),e(Sh,Dde),e(Dde,Kpo),e(Sh,Zpo),e(Sh,oq),e(oq,e_o),e(Sh,o_o),e(k,r_o),e(k,Rh),e(Rh,Gde),e(Gde,t_o),e(Rh,a_o),e(Rh,rq),e(rq,n_o),e(Rh,s_o),e(k,l_o),e(k,Ph),e(Ph,Ode),e(Ode,i_o),e(Ph,d_o),e(Ph,tq),e(tq,c_o),e(Ph,m_o),e(k,f_o),e(k,Bh),e(Bh,Vde),e(Vde,g_o),e(Bh,h_o),e(Bh,aq),e(aq,u_o),e(Bh,p_o),e(k,__o),e(k,qs),e(qs,Xde),e(Xde,b_o),e(qs,v_o),e(qs,nq),e(nq,F_o),e(qs,T_o),e(qs,sq),e(sq,M_o),e(qs,E_o),e(k,C_o),e(k,Ih),e(Ih,zde),e(zde,w_o),e(Ih,A_o),e(Ih,lq),e(lq,L_o),e(Ih,y_o),e(k,x_o),e(k,js),e(js,Wde),e(Wde,$_o),e(js,k_o),e(js,iq),e(iq,S_o),e(js,R_o),e(js,dq),e(dq,P_o),e(js,B_o),e(k,I_o),e(k,Ds),e(Ds,Qde),e(Qde,N_o),e(Ds,q_o),e(Ds,cq),e(cq,j_o),e(Ds,D_o),e(Ds,mq),e(mq,G_o),e(Ds,O_o),e(k,V_o),e(k,Gs),e(Gs,Hde),e(Hde,X_o),e(Gs,z_o),e(Gs,fq),e(fq,W_o),e(Gs,Q_o),e(Gs,gq),e(gq,H_o),e(Gs,U_o),e(k,J_o),e(k,Os),e(Os,Ude),e(Ude,Y_o),e(Os,K_o),e(Os,hq),e(hq,Z_o),e(Os,e2o),e(Os,uq),e(uq,o2o),e(Os,r2o),e(k,t2o),e(k,Vs),e(Vs,Jde),e(Jde,a2o),e(Vs,n2o),e(Vs,pq),e(pq,s2o),e(Vs,l2o),e(Vs,_q),e(_q,i2o),e(Vs,d2o),e(k,c2o),e(k,Xs),e(Xs,Yde),e(Yde,m2o),e(Xs,f2o),e(Xs,bq),e(bq,g2o),e(Xs,h2o),e(Xs,vq),e(vq,u2o),e(Xs,p2o),e(k,_2o),e(k,Nh),e(Nh,Kde),e(Kde,b2o),e(Nh,v2o),e(Nh,Fq),e(Fq,F2o),e(Nh,T2o),e(k,M2o),e(k,qh),e(qh,Zde),e(Zde,E2o),e(qh,C2o),e(qh,Tq),e(Tq,w2o),e(qh,A2o),e(k,L2o),e(k,zs),e(zs,ece),e(ece,y2o),e(zs,x2o),e(zs,Mq),e(Mq,$2o),e(zs,k2o),e(zs,Eq),e(Eq,S2o),e(zs,R2o),e(k,P2o),e(k,Ws),e(Ws,oce),e(oce,B2o),e(Ws,I2o),e(Ws,Cq),e(Cq,N2o),e(Ws,q2o),e(Ws,wq),e(wq,j2o),e(Ws,D2o),e(k,G2o),e(k,Qs),e(Qs,rce),e(rce,O2o),e(Qs,V2o),e(Qs,Aq),e(Aq,X2o),e(Qs,z2o),e(Qs,Lq),e(Lq,W2o),e(Qs,Q2o),e(k,H2o),e(k,jh),e(jh,tce),e(tce,U2o),e(jh,J2o),e(jh,yq),e(yq,Y2o),e(jh,K2o),e(k,Z2o),e(k,Dh),e(Dh,ace),e(ace,ebo),e(Dh,obo),e(Dh,xq),e(xq,rbo),e(Dh,tbo),e(k,abo),e(k,Gh),e(Gh,nce),e(nce,nbo),e(Gh,sbo),e(Gh,$q),e($q,lbo),e(Gh,ibo),e(k,dbo),e(k,Hs),e(Hs,sce),e(sce,cbo),e(Hs,mbo),e(Hs,kq),e(kq,fbo),e(Hs,gbo),e(Hs,Sq),e(Sq,hbo),e(Hs,ubo),e(k,pbo),e(k,Us),e(Us,lce),e(lce,_bo),e(Us,bbo),e(Us,Rq),e(Rq,vbo),e(Us,Fbo),e(Us,Pq),e(Pq,Tbo),e(Us,Mbo),e(k,Ebo),e(k,Oh),e(Oh,ice),e(ice,Cbo),e(Oh,wbo),e(Oh,Bq),e(Bq,Abo),e(Oh,Lbo),e(k,ybo),e(k,Vh),e(Vh,dce),e(dce,xbo),e(Vh,$bo),e(Vh,Iq),e(Iq,kbo),e(Vh,Sbo),e(k,Rbo),e(k,Xh),e(Xh,cce),e(cce,Pbo),e(Xh,Bbo),e(Xh,Nq),e(Nq,Ibo),e(Xh,Nbo),e(k,qbo),e(k,Js),e(Js,mce),e(mce,jbo),e(Js,Dbo),e(Js,qq),e(qq,Gbo),e(Js,Obo),e(Js,jq),e(jq,Vbo),e(Js,Xbo),e(k,zbo),e(k,zh),e(zh,fce),e(fce,Wbo),e(zh,Qbo),e(zh,Dq),e(Dq,Hbo),e(zh,Ubo),e(k,Jbo),e(k,Wh),e(Wh,gce),e(gce,Ybo),e(Wh,Kbo),e(Wh,Gq),e(Gq,Zbo),e(Wh,evo),e(k,ovo),e(k,Ys),e(Ys,hce),e(hce,rvo),e(Ys,tvo),e(Ys,Oq),e(Oq,avo),e(Ys,nvo),e(Ys,Vq),e(Vq,svo),e(Ys,lvo),e(k,ivo),e(k,Ks),e(Ks,uce),e(uce,dvo),e(Ks,cvo),e(Ks,Xq),e(Xq,mvo),e(Ks,fvo),e(Ks,zq),e(zq,gvo),e(Ks,hvo),e(k,uvo),e(k,Zs),e(Zs,pce),e(pce,pvo),e(Zs,_vo),e(Zs,Wq),e(Wq,bvo),e(Zs,vvo),e(Zs,Qq),e(Qq,Fvo),e(Zs,Tvo),e(k,Mvo),e(k,el),e(el,_ce),e(_ce,Evo),e(el,Cvo),e(el,Hq),e(Hq,wvo),e(el,Avo),e(el,Uq),e(Uq,Lvo),e(el,yvo),e(kr,xvo),M(Qh,kr,null),e(xo,$vo),e(xo,Hh),M(n8,Hh,null),e(Hh,kvo),e(Hh,bce),e(bce,Svo),b(m,XWe,_),b(m,Qi,_),e(Qi,Uh),e(Uh,vce),M(s8,vce,null),e(Qi,Rvo),e(Qi,Fce),e(Fce,Pvo),b(m,zWe,_),b(m,$o,_),M(l8,$o,null),e($o,Bvo),e($o,i8),e(i8,Ivo),e(i8,Jq),e(Jq,Nvo),e(i8,qvo),e($o,jvo),e($o,d8),e(d8,Dvo),e(d8,Tce),e(Tce,Gvo),e(d8,Ovo),e($o,Vvo),e($o,Ue),M(c8,Ue,null),e(Ue,Xvo),e(Ue,Mce),e(Mce,zvo),e(Ue,Wvo),e(Ue,ja),e(ja,Qvo),e(ja,Ece),e(Ece,Hvo),e(ja,Uvo),e(ja,Cce),e(Cce,Jvo),e(ja,Yvo),e(ja,wce),e(wce,Kvo),e(ja,Zvo),e(Ue,e1o),e(Ue,H),e(H,Jh),e(Jh,Ace),e(Ace,o1o),e(Jh,r1o),e(Jh,Yq),e(Yq,t1o),e(Jh,a1o),e(H,n1o),e(H,Yh),e(Yh,Lce),e(Lce,s1o),e(Yh,l1o),e(Yh,Kq),e(Kq,i1o),e(Yh,d1o),e(H,c1o),e(H,Kh),e(Kh,yce),e(yce,m1o),e(Kh,f1o),e(Kh,Zq),e(Zq,g1o),e(Kh,h1o),e(H,u1o),e(H,Zh),e(Zh,xce),e(xce,p1o),e(Zh,_1o),e(Zh,ej),e(ej,b1o),e(Zh,v1o),e(H,F1o),e(H,eu),e(eu,$ce),e($ce,T1o),e(eu,M1o),e(eu,oj),e(oj,E1o),e(eu,C1o),e(H,w1o),e(H,ou),e(ou,kce),e(kce,A1o),e(ou,L1o),e(ou,rj),e(rj,y1o),e(ou,x1o),e(H,$1o),e(H,ru),e(ru,Sce),e(Sce,k1o),e(ru,S1o),e(ru,tj),e(tj,R1o),e(ru,P1o),e(H,B1o),e(H,tu),e(tu,Rce),e(Rce,I1o),e(tu,N1o),e(tu,aj),e(aj,q1o),e(tu,j1o),e(H,D1o),e(H,au),e(au,Pce),e(Pce,G1o),e(au,O1o),e(au,nj),e(nj,V1o),e(au,X1o),e(H,z1o),e(H,nu),e(nu,Bce),e(Bce,W1o),e(nu,Q1o),e(nu,sj),e(sj,H1o),e(nu,U1o),e(H,J1o),e(H,su),e(su,Ice),e(Ice,Y1o),e(su,K1o),e(su,lj),e(lj,Z1o),e(su,eFo),e(H,oFo),e(H,lu),e(lu,Nce),e(Nce,rFo),e(lu,tFo),e(lu,ij),e(ij,aFo),e(lu,nFo),e(H,sFo),e(H,iu),e(iu,qce),e(qce,lFo),e(iu,iFo),e(iu,dj),e(dj,dFo),e(iu,cFo),e(H,mFo),e(H,du),e(du,jce),e(jce,fFo),e(du,gFo),e(du,cj),e(cj,hFo),e(du,uFo),e(H,pFo),e(H,cu),e(cu,Dce),e(Dce,_Fo),e(cu,bFo),e(cu,mj),e(mj,vFo),e(cu,FFo),e(H,TFo),e(H,mu),e(mu,Gce),e(Gce,MFo),e(mu,EFo),e(mu,fj),e(fj,CFo),e(mu,wFo),e(H,AFo),e(H,fu),e(fu,Oce),e(Oce,LFo),e(fu,yFo),e(fu,gj),e(gj,xFo),e(fu,$Fo),e(H,kFo),e(H,gu),e(gu,Vce),e(Vce,SFo),e(gu,RFo),e(gu,hj),e(hj,PFo),e(gu,BFo),e(H,IFo),e(H,hu),e(hu,Xce),e(Xce,NFo),e(hu,qFo),e(hu,uj),e(uj,jFo),e(hu,DFo),e(H,GFo),e(H,uu),e(uu,zce),e(zce,OFo),e(uu,VFo),e(uu,pj),e(pj,XFo),e(uu,zFo),e(H,WFo),e(H,pu),e(pu,Wce),e(Wce,QFo),e(pu,HFo),e(pu,_j),e(_j,UFo),e(pu,JFo),e(H,YFo),e(H,_u),e(_u,Qce),e(Qce,KFo),e(_u,ZFo),e(_u,bj),e(bj,eTo),e(_u,oTo),e(H,rTo),e(H,bu),e(bu,Hce),e(Hce,tTo),e(bu,aTo),e(bu,vj),e(vj,nTo),e(bu,sTo),e(H,lTo),e(H,vu),e(vu,Uce),e(Uce,iTo),e(vu,dTo),e(vu,Fj),e(Fj,cTo),e(vu,mTo),e(H,fTo),e(H,Fu),e(Fu,Jce),e(Jce,gTo),e(Fu,hTo),e(Fu,Tj),e(Tj,uTo),e(Fu,pTo),e(H,_To),e(H,Tu),e(Tu,Yce),e(Yce,bTo),e(Tu,vTo),e(Tu,Mj),e(Mj,FTo),e(Tu,TTo),e(H,MTo),e(H,Mu),e(Mu,Kce),e(Kce,ETo),e(Mu,CTo),e(Mu,Ej),e(Ej,wTo),e(Mu,ATo),e(H,LTo),e(H,Eu),e(Eu,Zce),e(Zce,yTo),e(Eu,xTo),e(Eu,Cj),e(Cj,$To),e(Eu,kTo),e(H,STo),e(H,Cu),e(Cu,eme),e(eme,RTo),e(Cu,PTo),e(Cu,wj),e(wj,BTo),e(Cu,ITo),e(H,NTo),e(H,wu),e(wu,ome),e(ome,qTo),e(wu,jTo),e(wu,Aj),e(Aj,DTo),e(wu,GTo),e(H,OTo),e(H,Au),e(Au,rme),e(rme,VTo),e(Au,XTo),e(Au,Lj),e(Lj,zTo),e(Au,WTo),e(H,QTo),e(H,Lu),e(Lu,tme),e(tme,HTo),e(Lu,UTo),e(Lu,yj),e(yj,JTo),e(Lu,YTo),e(H,KTo),e(H,yu),e(yu,ame),e(ame,ZTo),e(yu,eMo),e(yu,xj),e(xj,oMo),e(yu,rMo),e(H,tMo),e(H,xu),e(xu,nme),e(nme,aMo),e(xu,nMo),e(xu,$j),e($j,sMo),e(xu,lMo),e(H,iMo),e(H,$u),e($u,sme),e(sme,dMo),e($u,cMo),e($u,kj),e(kj,mMo),e($u,fMo),e(H,gMo),e(H,ku),e(ku,lme),e(lme,hMo),e(ku,uMo),e(ku,Sj),e(Sj,pMo),e(ku,_Mo),e(H,bMo),e(H,Su),e(Su,ime),e(ime,vMo),e(Su,FMo),e(Su,Rj),e(Rj,TMo),e(Su,MMo),e(Ue,EMo),M(Ru,Ue,null),e(Ue,CMo),M(Pu,Ue,null),e($o,wMo),e($o,Bu),M(m8,Bu,null),e(Bu,AMo),e(Bu,dme),e(dme,LMo),b(m,WWe,_),b(m,Hi,_),e(Hi,Iu),e(Iu,cme),M(f8,cme,null),e(Hi,yMo),e(Hi,mme),e(mme,xMo),b(m,QWe,_),b(m,ko,_),M(g8,ko,null),e(ko,$Mo),e(ko,h8),e(h8,kMo),e(h8,Pj),e(Pj,SMo),e(h8,RMo),e(ko,PMo),e(ko,u8),e(u8,BMo),e(u8,fme),e(fme,IMo),e(u8,NMo),e(ko,qMo),e(ko,Je),M(p8,Je,null),e(Je,jMo),e(Je,gme),e(gme,DMo),e(Je,GMo),e(Je,Ui),e(Ui,OMo),e(Ui,hme),e(hme,VMo),e(Ui,XMo),e(Ui,ume),e(ume,zMo),e(Ui,WMo),e(Je,QMo),e(Je,me),e(me,Nu),e(Nu,pme),e(pme,HMo),e(Nu,UMo),e(Nu,Bj),e(Bj,JMo),e(Nu,YMo),e(me,KMo),e(me,qu),e(qu,_me),e(_me,ZMo),e(qu,eEo),e(qu,Ij),e(Ij,oEo),e(qu,rEo),e(me,tEo),e(me,ju),e(ju,bme),e(bme,aEo),e(ju,nEo),e(ju,Nj),e(Nj,sEo),e(ju,lEo),e(me,iEo),e(me,Du),e(Du,vme),e(vme,dEo),e(Du,cEo),e(Du,qj),e(qj,mEo),e(Du,fEo),e(me,gEo),e(me,Gu),e(Gu,Fme),e(Fme,hEo),e(Gu,uEo),e(Gu,jj),e(jj,pEo),e(Gu,_Eo),e(me,bEo),e(me,Ou),e(Ou,Tme),e(Tme,vEo),e(Ou,FEo),e(Ou,Dj),e(Dj,TEo),e(Ou,MEo),e(me,EEo),e(me,Vu),e(Vu,Mme),e(Mme,CEo),e(Vu,wEo),e(Vu,Gj),e(Gj,AEo),e(Vu,LEo),e(me,yEo),e(me,Xu),e(Xu,Eme),e(Eme,xEo),e(Xu,$Eo),e(Xu,Oj),e(Oj,kEo),e(Xu,SEo),e(me,REo),e(me,zu),e(zu,Cme),e(Cme,PEo),e(zu,BEo),e(zu,Vj),e(Vj,IEo),e(zu,NEo),e(me,qEo),e(me,Wu),e(Wu,wme),e(wme,jEo),e(Wu,DEo),e(Wu,Xj),e(Xj,GEo),e(Wu,OEo),e(me,VEo),e(me,Qu),e(Qu,Ame),e(Ame,XEo),e(Qu,zEo),e(Qu,zj),e(zj,WEo),e(Qu,QEo),e(me,HEo),e(me,Hu),e(Hu,Lme),e(Lme,UEo),e(Hu,JEo),e(Hu,Wj),e(Wj,YEo),e(Hu,KEo),e(me,ZEo),e(me,Uu),e(Uu,yme),e(yme,e4o),e(Uu,o4o),e(Uu,Qj),e(Qj,r4o),e(Uu,t4o),e(me,a4o),e(me,Ju),e(Ju,xme),e(xme,n4o),e(Ju,s4o),e(Ju,Hj),e(Hj,l4o),e(Ju,i4o),e(me,d4o),e(me,Yu),e(Yu,$me),e($me,c4o),e(Yu,m4o),e(Yu,Uj),e(Uj,f4o),e(Yu,g4o),e(me,h4o),e(me,Ku),e(Ku,kme),e(kme,u4o),e(Ku,p4o),e(Ku,Jj),e(Jj,_4o),e(Ku,b4o),e(me,v4o),e(me,Zu),e(Zu,Sme),e(Sme,F4o),e(Zu,T4o),e(Zu,Yj),e(Yj,M4o),e(Zu,E4o),e(me,C4o),e(me,ep),e(ep,Rme),e(Rme,w4o),e(ep,A4o),e(ep,Kj),e(Kj,L4o),e(ep,y4o),e(me,x4o),e(me,op),e(op,Pme),e(Pme,$4o),e(op,k4o),e(op,Zj),e(Zj,S4o),e(op,R4o),e(Je,P4o),M(rp,Je,null),e(Je,B4o),M(tp,Je,null),e(ko,I4o),e(ko,ap),M(_8,ap,null),e(ap,N4o),e(ap,Bme),e(Bme,q4o),b(m,HWe,_),b(m,Ji,_),e(Ji,np),e(np,Ime),M(b8,Ime,null),e(Ji,j4o),e(Ji,Nme),e(Nme,D4o),b(m,UWe,_),b(m,So,_),M(v8,So,null),e(So,G4o),e(So,Yi),e(Yi,O4o),e(Yi,eD),e(eD,V4o),e(Yi,X4o),e(Yi,oD),e(oD,z4o),e(Yi,W4o),e(So,Q4o),e(So,F8),e(F8,H4o),e(F8,qme),e(qme,U4o),e(F8,J4o),e(So,Y4o),e(So,ct),M(T8,ct,null),e(ct,K4o),e(ct,jme),e(jme,Z4o),e(ct,eCo),e(ct,Ki),e(Ki,oCo),e(Ki,Dme),e(Dme,rCo),e(Ki,tCo),e(Ki,rD),e(rD,aCo),e(Ki,nCo),e(ct,sCo),M(sp,ct,null),e(So,lCo),e(So,Ye),M(M8,Ye,null),e(Ye,iCo),e(Ye,Gme),e(Gme,dCo),e(Ye,cCo),e(Ye,Da),e(Da,mCo),e(Da,Ome),e(Ome,fCo),e(Da,gCo),e(Da,Vme),e(Vme,hCo),e(Da,uCo),e(Da,Xme),e(Xme,pCo),e(Da,_Co),e(Ye,bCo),e(Ye,y),e(y,lp),e(lp,zme),e(zme,vCo),e(lp,FCo),e(lp,tD),e(tD,TCo),e(lp,MCo),e(y,ECo),e(y,ip),e(ip,Wme),e(Wme,CCo),e(ip,wCo),e(ip,aD),e(aD,ACo),e(ip,LCo),e(y,yCo),e(y,dp),e(dp,Qme),e(Qme,xCo),e(dp,$Co),e(dp,nD),e(nD,kCo),e(dp,SCo),e(y,RCo),e(y,cp),e(cp,Hme),e(Hme,PCo),e(cp,BCo),e(cp,sD),e(sD,ICo),e(cp,NCo),e(y,qCo),e(y,mp),e(mp,Ume),e(Ume,jCo),e(mp,DCo),e(mp,lD),e(lD,GCo),e(mp,OCo),e(y,VCo),e(y,fp),e(fp,Jme),e(Jme,XCo),e(fp,zCo),e(fp,iD),e(iD,WCo),e(fp,QCo),e(y,HCo),e(y,gp),e(gp,Yme),e(Yme,UCo),e(gp,JCo),e(gp,dD),e(dD,YCo),e(gp,KCo),e(y,ZCo),e(y,hp),e(hp,Kme),e(Kme,e5o),e(hp,o5o),e(hp,cD),e(cD,r5o),e(hp,t5o),e(y,a5o),e(y,up),e(up,Zme),e(Zme,n5o),e(up,s5o),e(up,mD),e(mD,l5o),e(up,i5o),e(y,d5o),e(y,pp),e(pp,efe),e(efe,c5o),e(pp,m5o),e(pp,fD),e(fD,f5o),e(pp,g5o),e(y,h5o),e(y,_p),e(_p,ofe),e(ofe,u5o),e(_p,p5o),e(_p,gD),e(gD,_5o),e(_p,b5o),e(y,v5o),e(y,bp),e(bp,rfe),e(rfe,F5o),e(bp,T5o),e(bp,hD),e(hD,M5o),e(bp,E5o),e(y,C5o),e(y,vp),e(vp,tfe),e(tfe,w5o),e(vp,A5o),e(vp,uD),e(uD,L5o),e(vp,y5o),e(y,x5o),e(y,Fp),e(Fp,afe),e(afe,$5o),e(Fp,k5o),e(Fp,pD),e(pD,S5o),e(Fp,R5o),e(y,P5o),e(y,Tp),e(Tp,nfe),e(nfe,B5o),e(Tp,I5o),e(Tp,_D),e(_D,N5o),e(Tp,q5o),e(y,j5o),e(y,Mp),e(Mp,sfe),e(sfe,D5o),e(Mp,G5o),e(Mp,bD),e(bD,O5o),e(Mp,V5o),e(y,X5o),e(y,Ep),e(Ep,lfe),e(lfe,z5o),e(Ep,W5o),e(Ep,vD),e(vD,Q5o),e(Ep,H5o),e(y,U5o),e(y,Cp),e(Cp,ife),e(ife,J5o),e(Cp,Y5o),e(Cp,FD),e(FD,K5o),e(Cp,Z5o),e(y,e3o),e(y,wp),e(wp,dfe),e(dfe,o3o),e(wp,r3o),e(wp,TD),e(TD,t3o),e(wp,a3o),e(y,n3o),e(y,Ap),e(Ap,cfe),e(cfe,s3o),e(Ap,l3o),e(Ap,MD),e(MD,i3o),e(Ap,d3o),e(y,c3o),e(y,Lp),e(Lp,mfe),e(mfe,m3o),e(Lp,f3o),e(Lp,ED),e(ED,g3o),e(Lp,h3o),e(y,u3o),e(y,yp),e(yp,ffe),e(ffe,p3o),e(yp,_3o),e(yp,CD),e(CD,b3o),e(yp,v3o),e(y,F3o),e(y,xp),e(xp,gfe),e(gfe,T3o),e(xp,M3o),e(xp,wD),e(wD,E3o),e(xp,C3o),e(y,w3o),e(y,$p),e($p,hfe),e(hfe,A3o),e($p,L3o),e($p,AD),e(AD,y3o),e($p,x3o),e(y,$3o),e(y,kp),e(kp,ufe),e(ufe,k3o),e(kp,S3o),e(kp,LD),e(LD,R3o),e(kp,P3o),e(y,B3o),e(y,Sp),e(Sp,pfe),e(pfe,I3o),e(Sp,N3o),e(Sp,yD),e(yD,q3o),e(Sp,j3o),e(y,D3o),e(y,Rp),e(Rp,_fe),e(_fe,G3o),e(Rp,O3o),e(Rp,xD),e(xD,V3o),e(Rp,X3o),e(y,z3o),e(y,Pp),e(Pp,bfe),e(bfe,W3o),e(Pp,Q3o),e(Pp,$D),e($D,H3o),e(Pp,U3o),e(y,J3o),e(y,Bp),e(Bp,vfe),e(vfe,Y3o),e(Bp,K3o),e(Bp,kD),e(kD,Z3o),e(Bp,e0o),e(y,o0o),e(y,Ip),e(Ip,Ffe),e(Ffe,r0o),e(Ip,t0o),e(Ip,SD),e(SD,a0o),e(Ip,n0o),e(y,s0o),e(y,Np),e(Np,Tfe),e(Tfe,l0o),e(Np,i0o),e(Np,RD),e(RD,d0o),e(Np,c0o),e(y,m0o),e(y,qp),e(qp,Mfe),e(Mfe,f0o),e(qp,g0o),e(qp,PD),e(PD,h0o),e(qp,u0o),e(y,p0o),e(y,jp),e(jp,Efe),e(Efe,_0o),e(jp,b0o),e(jp,BD),e(BD,v0o),e(jp,F0o),e(y,T0o),e(y,Dp),e(Dp,Cfe),e(Cfe,M0o),e(Dp,E0o),e(Dp,ID),e(ID,C0o),e(Dp,w0o),e(y,A0o),e(y,ol),e(ol,wfe),e(wfe,L0o),e(ol,y0o),e(ol,ND),e(ND,x0o),e(ol,$0o),e(ol,qD),e(qD,k0o),e(ol,S0o),e(y,R0o),e(y,Gp),e(Gp,Afe),e(Afe,P0o),e(Gp,B0o),e(Gp,jD),e(jD,I0o),e(Gp,N0o),e(y,q0o),e(y,Op),e(Op,Lfe),e(Lfe,j0o),e(Op,D0o),e(Op,DD),e(DD,G0o),e(Op,O0o),e(y,V0o),e(y,Vp),e(Vp,yfe),e(yfe,X0o),e(Vp,z0o),e(Vp,GD),e(GD,W0o),e(Vp,Q0o),e(y,H0o),e(y,Xp),e(Xp,xfe),e(xfe,U0o),e(Xp,J0o),e(Xp,OD),e(OD,Y0o),e(Xp,K0o),e(y,Z0o),e(y,zp),e(zp,$fe),e($fe,ewo),e(zp,owo),e(zp,VD),e(VD,rwo),e(zp,two),e(y,awo),e(y,Wp),e(Wp,kfe),e(kfe,nwo),e(Wp,swo),e(Wp,XD),e(XD,lwo),e(Wp,iwo),e(y,dwo),e(y,Qp),e(Qp,Sfe),e(Sfe,cwo),e(Qp,mwo),e(Qp,zD),e(zD,fwo),e(Qp,gwo),e(y,hwo),e(y,Hp),e(Hp,Rfe),e(Rfe,uwo),e(Hp,pwo),e(Hp,WD),e(WD,_wo),e(Hp,bwo),e(y,vwo),e(y,Up),e(Up,Pfe),e(Pfe,Fwo),e(Up,Two),e(Up,QD),e(QD,Mwo),e(Up,Ewo),e(y,Cwo),e(y,Jp),e(Jp,Bfe),e(Bfe,wwo),e(Jp,Awo),e(Jp,HD),e(HD,Lwo),e(Jp,ywo),e(y,xwo),e(y,Yp),e(Yp,Ife),e(Ife,$wo),e(Yp,kwo),e(Yp,UD),e(UD,Swo),e(Yp,Rwo),e(y,Pwo),e(y,Kp),e(Kp,Nfe),e(Nfe,Bwo),e(Kp,Iwo),e(Kp,JD),e(JD,Nwo),e(Kp,qwo),e(y,jwo),e(y,Zp),e(Zp,qfe),e(qfe,Dwo),e(Zp,Gwo),e(Zp,YD),e(YD,Owo),e(Zp,Vwo),e(y,Xwo),e(y,e_),e(e_,jfe),e(jfe,zwo),e(e_,Wwo),e(e_,KD),e(KD,Qwo),e(e_,Hwo),e(y,Uwo),e(y,o_),e(o_,Dfe),e(Dfe,Jwo),e(o_,Ywo),e(o_,ZD),e(ZD,Kwo),e(o_,Zwo),e(y,e6o),e(y,r_),e(r_,Gfe),e(Gfe,o6o),e(r_,r6o),e(r_,eG),e(eG,t6o),e(r_,a6o),e(y,n6o),e(y,t_),e(t_,Ofe),e(Ofe,s6o),e(t_,l6o),e(t_,oG),e(oG,i6o),e(t_,d6o),e(y,c6o),e(y,a_),e(a_,Vfe),e(Vfe,m6o),e(a_,f6o),e(a_,rG),e(rG,g6o),e(a_,h6o),e(y,u6o),e(y,n_),e(n_,Xfe),e(Xfe,p6o),e(n_,_6o),e(n_,tG),e(tG,b6o),e(n_,v6o),e(y,F6o),e(y,s_),e(s_,zfe),e(zfe,T6o),e(s_,M6o),e(s_,aG),e(aG,E6o),e(s_,C6o),e(y,w6o),e(y,l_),e(l_,Wfe),e(Wfe,A6o),e(l_,L6o),e(l_,nG),e(nG,y6o),e(l_,x6o),e(y,$6o),e(y,i_),e(i_,Qfe),e(Qfe,k6o),e(i_,S6o),e(i_,sG),e(sG,R6o),e(i_,P6o),e(y,B6o),e(y,d_),e(d_,Hfe),e(Hfe,I6o),e(d_,N6o),e(d_,lG),e(lG,q6o),e(d_,j6o),e(y,D6o),e(y,c_),e(c_,Ufe),e(Ufe,G6o),e(c_,O6o),e(c_,iG),e(iG,V6o),e(c_,X6o),e(y,z6o),e(y,m_),e(m_,Jfe),e(Jfe,W6o),e(m_,Q6o),e(m_,dG),e(dG,H6o),e(m_,U6o),e(y,J6o),e(y,f_),e(f_,Yfe),e(Yfe,Y6o),e(f_,K6o),e(f_,cG),e(cG,Z6o),e(f_,eAo),e(y,oAo),e(y,g_),e(g_,Kfe),e(Kfe,rAo),e(g_,tAo),e(g_,mG),e(mG,aAo),e(g_,nAo),e(y,sAo),e(y,h_),e(h_,Zfe),e(Zfe,lAo),e(h_,iAo),e(h_,fG),e(fG,dAo),e(h_,cAo),e(y,mAo),e(y,u_),e(u_,ege),e(ege,fAo),e(u_,gAo),e(u_,gG),e(gG,hAo),e(u_,uAo),e(y,pAo),e(y,p_),e(p_,oge),e(oge,_Ao),e(p_,bAo),e(p_,hG),e(hG,vAo),e(p_,FAo),e(y,TAo),e(y,__),e(__,rge),e(rge,MAo),e(__,EAo),e(__,uG),e(uG,CAo),e(__,wAo),e(y,AAo),e(y,b_),e(b_,tge),e(tge,LAo),e(b_,yAo),e(b_,pG),e(pG,xAo),e(b_,$Ao),e(y,kAo),e(y,v_),e(v_,age),e(age,SAo),e(v_,RAo),e(v_,_G),e(_G,PAo),e(v_,BAo),e(y,IAo),e(y,F_),e(F_,nge),e(nge,NAo),e(F_,qAo),e(F_,bG),e(bG,jAo),e(F_,DAo),e(y,GAo),e(y,T_),e(T_,sge),e(sge,OAo),e(T_,VAo),e(T_,vG),e(vG,XAo),e(T_,zAo),e(y,WAo),e(y,M_),e(M_,lge),e(lge,QAo),e(M_,HAo),e(M_,FG),e(FG,UAo),e(M_,JAo),e(y,YAo),e(y,E_),e(E_,ige),e(ige,KAo),e(E_,ZAo),e(E_,TG),e(TG,e7o),e(E_,o7o),e(y,r7o),e(y,C_),e(C_,dge),e(dge,t7o),e(C_,a7o),e(C_,MG),e(MG,n7o),e(C_,s7o),e(y,l7o),e(y,w_),e(w_,cge),e(cge,i7o),e(w_,d7o),e(w_,EG),e(EG,c7o),e(w_,m7o),e(y,f7o),e(y,A_),e(A_,mge),e(mge,g7o),e(A_,h7o),e(A_,CG),e(CG,u7o),e(A_,p7o),e(y,_7o),e(y,L_),e(L_,fge),e(fge,b7o),e(L_,v7o),e(L_,wG),e(wG,F7o),e(L_,T7o),e(y,M7o),e(y,y_),e(y_,gge),e(gge,E7o),e(y_,C7o),e(y_,AG),e(AG,w7o),e(y_,A7o),e(y,L7o),e(y,x_),e(x_,hge),e(hge,y7o),e(x_,x7o),e(x_,LG),e(LG,$7o),e(x_,k7o),e(y,S7o),e(y,$_),e($_,uge),e(uge,R7o),e($_,P7o),e($_,yG),e(yG,B7o),e($_,I7o),e(y,N7o),e(y,k_),e(k_,pge),e(pge,q7o),e(k_,j7o),e(k_,xG),e(xG,D7o),e(k_,G7o),e(y,O7o),e(y,S_),e(S_,_ge),e(_ge,V7o),e(S_,X7o),e(S_,$G),e($G,z7o),e(S_,W7o),e(y,Q7o),e(y,R_),e(R_,bge),e(bge,H7o),e(R_,U7o),e(R_,kG),e(kG,J7o),e(R_,Y7o),e(y,K7o),e(y,P_),e(P_,vge),e(vge,Z7o),e(P_,eLo),e(P_,SG),e(SG,oLo),e(P_,rLo),e(y,tLo),e(y,B_),e(B_,Fge),e(Fge,aLo),e(B_,nLo),e(B_,RG),e(RG,sLo),e(B_,lLo),e(y,iLo),e(y,I_),e(I_,Tge),e(Tge,dLo),e(I_,cLo),e(I_,PG),e(PG,mLo),e(I_,fLo),e(y,gLo),e(y,N_),e(N_,Mge),e(Mge,hLo),e(N_,uLo),e(N_,BG),e(BG,pLo),e(N_,_Lo),e(y,bLo),e(y,q_),e(q_,Ege),e(Ege,vLo),e(q_,FLo),e(q_,IG),e(IG,TLo),e(q_,MLo),e(y,ELo),e(y,j_),e(j_,Cge),e(Cge,CLo),e(j_,wLo),e(j_,NG),e(NG,ALo),e(j_,LLo),e(y,yLo),e(y,D_),e(D_,wge),e(wge,xLo),e(D_,$Lo),e(D_,qG),e(qG,kLo),e(D_,SLo),e(y,RLo),e(y,G_),e(G_,Age),e(Age,PLo),e(G_,BLo),e(G_,jG),e(jG,ILo),e(G_,NLo),e(y,qLo),e(y,O_),e(O_,Lge),e(Lge,jLo),e(O_,DLo),e(O_,DG),e(DG,GLo),e(O_,OLo),e(y,VLo),e(y,V_),e(V_,yge),e(yge,XLo),e(V_,zLo),e(V_,GG),e(GG,WLo),e(V_,QLo),e(y,HLo),e(y,X_),e(X_,xge),e(xge,ULo),e(X_,JLo),e(X_,OG),e(OG,YLo),e(X_,KLo),e(y,ZLo),e(y,z_),e(z_,$ge),e($ge,eyo),e(z_,oyo),e(z_,VG),e(VG,ryo),e(z_,tyo),e(y,ayo),e(y,W_),e(W_,kge),e(kge,nyo),e(W_,syo),e(W_,XG),e(XG,lyo),e(W_,iyo),e(y,dyo),e(y,Q_),e(Q_,Sge),e(Sge,cyo),e(Q_,myo),e(Q_,zG),e(zG,fyo),e(Q_,gyo),e(y,hyo),e(y,H_),e(H_,Rge),e(Rge,uyo),e(H_,pyo),e(H_,WG),e(WG,_yo),e(H_,byo),e(y,vyo),e(y,U_),e(U_,Pge),e(Pge,Fyo),e(U_,Tyo),e(U_,QG),e(QG,Myo),e(U_,Eyo),e(y,Cyo),e(y,J_),e(J_,Bge),e(Bge,wyo),e(J_,Ayo),e(J_,HG),e(HG,Lyo),e(J_,yyo),e(y,xyo),e(y,Y_),e(Y_,Ige),e(Ige,$yo),e(Y_,kyo),e(Y_,UG),e(UG,Syo),e(Y_,Ryo),e(y,Pyo),e(y,K_),e(K_,Nge),e(Nge,Byo),e(K_,Iyo),e(K_,JG),e(JG,Nyo),e(K_,qyo),e(y,jyo),e(y,Z_),e(Z_,qge),e(qge,Dyo),e(Z_,Gyo),e(Z_,YG),e(YG,Oyo),e(Z_,Vyo),e(y,Xyo),e(y,e2),e(e2,jge),e(jge,zyo),e(e2,Wyo),e(e2,KG),e(KG,Qyo),e(e2,Hyo),e(y,Uyo),e(y,o2),e(o2,Dge),e(Dge,Jyo),e(o2,Yyo),e(o2,ZG),e(ZG,Kyo),e(o2,Zyo),e(y,e8o),e(y,r2),e(r2,Gge),e(Gge,o8o),e(r2,r8o),e(r2,eO),e(eO,t8o),e(r2,a8o),e(y,n8o),e(y,t2),e(t2,Oge),e(Oge,s8o),e(t2,l8o),e(t2,oO),e(oO,i8o),e(t2,d8o),e(y,c8o),e(y,a2),e(a2,Vge),e(Vge,m8o),e(a2,f8o),e(a2,rO),e(rO,g8o),e(a2,h8o),e(y,u8o),e(y,n2),e(n2,Xge),e(Xge,p8o),e(n2,_8o),e(n2,tO),e(tO,b8o),e(n2,v8o),e(y,F8o),e(y,s2),e(s2,zge),e(zge,T8o),e(s2,M8o),e(s2,aO),e(aO,E8o),e(s2,C8o),e(y,w8o),e(y,l2),e(l2,Wge),e(Wge,A8o),e(l2,L8o),e(l2,nO),e(nO,y8o),e(l2,x8o),e(y,$8o),e(y,i2),e(i2,Qge),e(Qge,k8o),e(i2,S8o),e(i2,sO),e(sO,R8o),e(i2,P8o),e(y,B8o),e(y,d2),e(d2,Hge),e(Hge,I8o),e(d2,N8o),e(d2,lO),e(lO,q8o),e(d2,j8o),e(y,D8o),e(y,c2),e(c2,Uge),e(Uge,G8o),e(c2,O8o),e(c2,iO),e(iO,V8o),e(c2,X8o),e(y,z8o),e(y,m2),e(m2,Jge),e(Jge,W8o),e(m2,Q8o),e(m2,dO),e(dO,H8o),e(m2,U8o),e(y,J8o),e(y,f2),e(f2,Yge),e(Yge,Y8o),e(f2,K8o),e(f2,cO),e(cO,Z8o),e(f2,e9o),e(Ye,o9o),e(Ye,g2),e(g2,r9o),e(g2,Kge),e(Kge,t9o),e(g2,a9o),e(g2,Zge),e(Zge,n9o),e(Ye,s9o),M(h2,Ye,null),b(m,JWe,_),b(m,Zi,_),e(Zi,u2),e(u2,ehe),M(E8,ehe,null),e(Zi,l9o),e(Zi,ohe),e(ohe,i9o),b(m,YWe,_),b(m,Ro,_),M(C8,Ro,null),e(Ro,d9o),e(Ro,ed),e(ed,c9o),e(ed,mO),e(mO,m9o),e(ed,f9o),e(ed,fO),e(fO,g9o),e(ed,h9o),e(Ro,u9o),e(Ro,w8),e(w8,p9o),e(w8,rhe),e(rhe,_9o),e(w8,b9o),e(Ro,v9o),e(Ro,mt),M(A8,mt,null),e(mt,F9o),e(mt,the),e(the,T9o),e(mt,M9o),e(mt,od),e(od,E9o),e(od,ahe),e(ahe,C9o),e(od,w9o),e(od,gO),e(gO,A9o),e(od,L9o),e(mt,y9o),M(p2,mt,null),e(Ro,x9o),e(Ro,Ke),M(L8,Ke,null),e(Ke,$9o),e(Ke,nhe),e(nhe,k9o),e(Ke,S9o),e(Ke,Ga),e(Ga,R9o),e(Ga,she),e(she,P9o),e(Ga,B9o),e(Ga,lhe),e(lhe,I9o),e(Ga,N9o),e(Ga,ihe),e(ihe,q9o),e(Ga,j9o),e(Ke,D9o),e(Ke,G),e(G,_2),e(_2,dhe),e(dhe,G9o),e(_2,O9o),e(_2,hO),e(hO,V9o),e(_2,X9o),e(G,z9o),e(G,b2),e(b2,che),e(che,W9o),e(b2,Q9o),e(b2,uO),e(uO,H9o),e(b2,U9o),e(G,J9o),e(G,v2),e(v2,mhe),e(mhe,Y9o),e(v2,K9o),e(v2,pO),e(pO,Z9o),e(v2,exo),e(G,oxo),e(G,F2),e(F2,fhe),e(fhe,rxo),e(F2,txo),e(F2,_O),e(_O,axo),e(F2,nxo),e(G,sxo),e(G,T2),e(T2,ghe),e(ghe,lxo),e(T2,ixo),e(T2,bO),e(bO,dxo),e(T2,cxo),e(G,mxo),e(G,M2),e(M2,hhe),e(hhe,fxo),e(M2,gxo),e(M2,vO),e(vO,hxo),e(M2,uxo),e(G,pxo),e(G,E2),e(E2,uhe),e(uhe,_xo),e(E2,bxo),e(E2,FO),e(FO,vxo),e(E2,Fxo),e(G,Txo),e(G,C2),e(C2,phe),e(phe,Mxo),e(C2,Exo),e(C2,TO),e(TO,Cxo),e(C2,wxo),e(G,Axo),e(G,w2),e(w2,_he),e(_he,Lxo),e(w2,yxo),e(w2,MO),e(MO,xxo),e(w2,$xo),e(G,kxo),e(G,A2),e(A2,bhe),e(bhe,Sxo),e(A2,Rxo),e(A2,EO),e(EO,Pxo),e(A2,Bxo),e(G,Ixo),e(G,L2),e(L2,vhe),e(vhe,Nxo),e(L2,qxo),e(L2,CO),e(CO,jxo),e(L2,Dxo),e(G,Gxo),e(G,y2),e(y2,Fhe),e(Fhe,Oxo),e(y2,Vxo),e(y2,wO),e(wO,Xxo),e(y2,zxo),e(G,Wxo),e(G,x2),e(x2,The),e(The,Qxo),e(x2,Hxo),e(x2,AO),e(AO,Uxo),e(x2,Jxo),e(G,Yxo),e(G,$2),e($2,Mhe),e(Mhe,Kxo),e($2,Zxo),e($2,LO),e(LO,e$o),e($2,o$o),e(G,r$o),e(G,k2),e(k2,Ehe),e(Ehe,t$o),e(k2,a$o),e(k2,yO),e(yO,n$o),e(k2,s$o),e(G,l$o),e(G,S2),e(S2,Che),e(Che,i$o),e(S2,d$o),e(S2,xO),e(xO,c$o),e(S2,m$o),e(G,f$o),e(G,R2),e(R2,whe),e(whe,g$o),e(R2,h$o),e(R2,$O),e($O,u$o),e(R2,p$o),e(G,_$o),e(G,P2),e(P2,Ahe),e(Ahe,b$o),e(P2,v$o),e(P2,kO),e(kO,F$o),e(P2,T$o),e(G,M$o),e(G,B2),e(B2,Lhe),e(Lhe,E$o),e(B2,C$o),e(B2,SO),e(SO,w$o),e(B2,A$o),e(G,L$o),e(G,I2),e(I2,yhe),e(yhe,y$o),e(I2,x$o),e(I2,RO),e(RO,$$o),e(I2,k$o),e(G,S$o),e(G,N2),e(N2,xhe),e(xhe,R$o),e(N2,P$o),e(N2,PO),e(PO,B$o),e(N2,I$o),e(G,N$o),e(G,q2),e(q2,$he),e($he,q$o),e(q2,j$o),e(q2,BO),e(BO,D$o),e(q2,G$o),e(G,O$o),e(G,j2),e(j2,khe),e(khe,V$o),e(j2,X$o),e(j2,IO),e(IO,z$o),e(j2,W$o),e(G,Q$o),e(G,D2),e(D2,She),e(She,H$o),e(D2,U$o),e(D2,NO),e(NO,J$o),e(D2,Y$o),e(G,K$o),e(G,G2),e(G2,Rhe),e(Rhe,Z$o),e(G2,eko),e(G2,qO),e(qO,oko),e(G2,rko),e(G,tko),e(G,O2),e(O2,Phe),e(Phe,ako),e(O2,nko),e(O2,jO),e(jO,sko),e(O2,lko),e(G,iko),e(G,V2),e(V2,Bhe),e(Bhe,dko),e(V2,cko),e(V2,DO),e(DO,mko),e(V2,fko),e(G,gko),e(G,X2),e(X2,Ihe),e(Ihe,hko),e(X2,uko),e(X2,GO),e(GO,pko),e(X2,_ko),e(G,bko),e(G,z2),e(z2,Nhe),e(Nhe,vko),e(z2,Fko),e(z2,OO),e(OO,Tko),e(z2,Mko),e(G,Eko),e(G,W2),e(W2,qhe),e(qhe,Cko),e(W2,wko),e(W2,VO),e(VO,Ako),e(W2,Lko),e(G,yko),e(G,Q2),e(Q2,jhe),e(jhe,xko),e(Q2,$ko),e(Q2,XO),e(XO,kko),e(Q2,Sko),e(G,Rko),e(G,H2),e(H2,Dhe),e(Dhe,Pko),e(H2,Bko),e(H2,zO),e(zO,Iko),e(H2,Nko),e(G,qko),e(G,U2),e(U2,Ghe),e(Ghe,jko),e(U2,Dko),e(U2,WO),e(WO,Gko),e(U2,Oko),e(G,Vko),e(G,J2),e(J2,Ohe),e(Ohe,Xko),e(J2,zko),e(J2,QO),e(QO,Wko),e(J2,Qko),e(G,Hko),e(G,Y2),e(Y2,Vhe),e(Vhe,Uko),e(Y2,Jko),e(Y2,HO),e(HO,Yko),e(Y2,Kko),e(G,Zko),e(G,K2),e(K2,Xhe),e(Xhe,eSo),e(K2,oSo),e(K2,UO),e(UO,rSo),e(K2,tSo),e(G,aSo),e(G,Z2),e(Z2,zhe),e(zhe,nSo),e(Z2,sSo),e(Z2,JO),e(JO,lSo),e(Z2,iSo),e(G,dSo),e(G,eb),e(eb,Whe),e(Whe,cSo),e(eb,mSo),e(eb,YO),e(YO,fSo),e(eb,gSo),e(G,hSo),e(G,ob),e(ob,Qhe),e(Qhe,uSo),e(ob,pSo),e(ob,KO),e(KO,_So),e(ob,bSo),e(G,vSo),e(G,rb),e(rb,Hhe),e(Hhe,FSo),e(rb,TSo),e(rb,ZO),e(ZO,MSo),e(rb,ESo),e(G,CSo),e(G,tb),e(tb,Uhe),e(Uhe,wSo),e(tb,ASo),e(tb,eV),e(eV,LSo),e(tb,ySo),e(G,xSo),e(G,ab),e(ab,Jhe),e(Jhe,$So),e(ab,kSo),e(ab,oV),e(oV,SSo),e(ab,RSo),e(G,PSo),e(G,nb),e(nb,Yhe),e(Yhe,BSo),e(nb,ISo),e(nb,rV),e(rV,NSo),e(nb,qSo),e(G,jSo),e(G,sb),e(sb,Khe),e(Khe,DSo),e(sb,GSo),e(sb,tV),e(tV,OSo),e(sb,VSo),e(G,XSo),e(G,lb),e(lb,Zhe),e(Zhe,zSo),e(lb,WSo),e(lb,aV),e(aV,QSo),e(lb,HSo),e(G,USo),e(G,ib),e(ib,eue),e(eue,JSo),e(ib,YSo),e(ib,nV),e(nV,KSo),e(ib,ZSo),e(G,eRo),e(G,db),e(db,oue),e(oue,oRo),e(db,rRo),e(db,sV),e(sV,tRo),e(db,aRo),e(Ke,nRo),e(Ke,cb),e(cb,sRo),e(cb,rue),e(rue,lRo),e(cb,iRo),e(cb,tue),e(tue,dRo),e(Ke,cRo),M(mb,Ke,null),b(m,KWe,_),b(m,rd,_),e(rd,fb),e(fb,aue),M(y8,aue,null),e(rd,mRo),e(rd,nue),e(nue,fRo),b(m,ZWe,_),b(m,Po,_),M(x8,Po,null),e(Po,gRo),e(Po,td),e(td,hRo),e(td,lV),e(lV,uRo),e(td,pRo),e(td,iV),e(iV,_Ro),e(td,bRo),e(Po,vRo),e(Po,$8),e($8,FRo),e($8,sue),e(sue,TRo),e($8,MRo),e(Po,ERo),e(Po,ft),M(k8,ft,null),e(ft,CRo),e(ft,lue),e(lue,wRo),e(ft,ARo),e(ft,ad),e(ad,LRo),e(ad,iue),e(iue,yRo),e(ad,xRo),e(ad,dV),e(dV,$Ro),e(ad,kRo),e(ft,SRo),M(gb,ft,null),e(Po,RRo),e(Po,Ze),M(S8,Ze,null),e(Ze,PRo),e(Ze,due),e(due,BRo),e(Ze,IRo),e(Ze,Oa),e(Oa,NRo),e(Oa,cue),e(cue,qRo),e(Oa,jRo),e(Oa,mue),e(mue,DRo),e(Oa,GRo),e(Oa,fue),e(fue,ORo),e(Oa,VRo),e(Ze,XRo),e(Ze,z),e(z,hb),e(hb,gue),e(gue,zRo),e(hb,WRo),e(hb,cV),e(cV,QRo),e(hb,HRo),e(z,URo),e(z,ub),e(ub,hue),e(hue,JRo),e(ub,YRo),e(ub,mV),e(mV,KRo),e(ub,ZRo),e(z,ePo),e(z,pb),e(pb,uue),e(uue,oPo),e(pb,rPo),e(pb,fV),e(fV,tPo),e(pb,aPo),e(z,nPo),e(z,_b),e(_b,pue),e(pue,sPo),e(_b,lPo),e(_b,gV),e(gV,iPo),e(_b,dPo),e(z,cPo),e(z,bb),e(bb,_ue),e(_ue,mPo),e(bb,fPo),e(bb,hV),e(hV,gPo),e(bb,hPo),e(z,uPo),e(z,vb),e(vb,bue),e(bue,pPo),e(vb,_Po),e(vb,uV),e(uV,bPo),e(vb,vPo),e(z,FPo),e(z,Fb),e(Fb,vue),e(vue,TPo),e(Fb,MPo),e(Fb,pV),e(pV,EPo),e(Fb,CPo),e(z,wPo),e(z,Tb),e(Tb,Fue),e(Fue,APo),e(Tb,LPo),e(Tb,_V),e(_V,yPo),e(Tb,xPo),e(z,$Po),e(z,Mb),e(Mb,Tue),e(Tue,kPo),e(Mb,SPo),e(Mb,bV),e(bV,RPo),e(Mb,PPo),e(z,BPo),e(z,Eb),e(Eb,Mue),e(Mue,IPo),e(Eb,NPo),e(Eb,vV),e(vV,qPo),e(Eb,jPo),e(z,DPo),e(z,Cb),e(Cb,Eue),e(Eue,GPo),e(Cb,OPo),e(Cb,FV),e(FV,VPo),e(Cb,XPo),e(z,zPo),e(z,wb),e(wb,Cue),e(Cue,WPo),e(wb,QPo),e(wb,TV),e(TV,HPo),e(wb,UPo),e(z,JPo),e(z,Ab),e(Ab,wue),e(wue,YPo),e(Ab,KPo),e(Ab,MV),e(MV,ZPo),e(Ab,eBo),e(z,oBo),e(z,Lb),e(Lb,Aue),e(Aue,rBo),e(Lb,tBo),e(Lb,EV),e(EV,aBo),e(Lb,nBo),e(z,sBo),e(z,yb),e(yb,Lue),e(Lue,lBo),e(yb,iBo),e(yb,CV),e(CV,dBo),e(yb,cBo),e(z,mBo),e(z,xb),e(xb,yue),e(yue,fBo),e(xb,gBo),e(xb,wV),e(wV,hBo),e(xb,uBo),e(z,pBo),e(z,$b),e($b,xue),e(xue,_Bo),e($b,bBo),e($b,AV),e(AV,vBo),e($b,FBo),e(z,TBo),e(z,kb),e(kb,$ue),e($ue,MBo),e(kb,EBo),e(kb,LV),e(LV,CBo),e(kb,wBo),e(z,ABo),e(z,Sb),e(Sb,kue),e(kue,LBo),e(Sb,yBo),e(Sb,yV),e(yV,xBo),e(Sb,$Bo),e(z,kBo),e(z,Rb),e(Rb,Sue),e(Sue,SBo),e(Rb,RBo),e(Rb,xV),e(xV,PBo),e(Rb,BBo),e(z,IBo),e(z,Pb),e(Pb,Rue),e(Rue,NBo),e(Pb,qBo),e(Pb,$V),e($V,jBo),e(Pb,DBo),e(z,GBo),e(z,Bb),e(Bb,Pue),e(Pue,OBo),e(Bb,VBo),e(Bb,kV),e(kV,XBo),e(Bb,zBo),e(z,WBo),e(z,Ib),e(Ib,Bue),e(Bue,QBo),e(Ib,HBo),e(Ib,SV),e(SV,UBo),e(Ib,JBo),e(z,YBo),e(z,Nb),e(Nb,Iue),e(Iue,KBo),e(Nb,ZBo),e(Nb,RV),e(RV,eIo),e(Nb,oIo),e(z,rIo),e(z,qb),e(qb,Nue),e(Nue,tIo),e(qb,aIo),e(qb,PV),e(PV,nIo),e(qb,sIo),e(z,lIo),e(z,jb),e(jb,que),e(que,iIo),e(jb,dIo),e(jb,BV),e(BV,cIo),e(jb,mIo),e(z,fIo),e(z,Db),e(Db,jue),e(jue,gIo),e(Db,hIo),e(Db,IV),e(IV,uIo),e(Db,pIo),e(z,_Io),e(z,Gb),e(Gb,Due),e(Due,bIo),e(Gb,vIo),e(Gb,NV),e(NV,FIo),e(Gb,TIo),e(z,MIo),e(z,Ob),e(Ob,Gue),e(Gue,EIo),e(Ob,CIo),e(Ob,qV),e(qV,wIo),e(Ob,AIo),e(z,LIo),e(z,Vb),e(Vb,Oue),e(Oue,yIo),e(Vb,xIo),e(Vb,jV),e(jV,$Io),e(Vb,kIo),e(z,SIo),e(z,Xb),e(Xb,Vue),e(Vue,RIo),e(Xb,PIo),e(Xb,DV),e(DV,BIo),e(Xb,IIo),e(z,NIo),e(z,zb),e(zb,Xue),e(Xue,qIo),e(zb,jIo),e(zb,GV),e(GV,DIo),e(zb,GIo),e(z,OIo),e(z,Wb),e(Wb,zue),e(zue,VIo),e(Wb,XIo),e(Wb,OV),e(OV,zIo),e(Wb,WIo),e(z,QIo),e(z,Qb),e(Qb,Wue),e(Wue,HIo),e(Qb,UIo),e(Qb,VV),e(VV,JIo),e(Qb,YIo),e(z,KIo),e(z,Hb),e(Hb,Que),e(Que,ZIo),e(Hb,eNo),e(Hb,XV),e(XV,oNo),e(Hb,rNo),e(z,tNo),e(z,Ub),e(Ub,Hue),e(Hue,aNo),e(Ub,nNo),e(Ub,zV),e(zV,sNo),e(Ub,lNo),e(z,iNo),e(z,Jb),e(Jb,Uue),e(Uue,dNo),e(Jb,cNo),e(Jb,WV),e(WV,mNo),e(Jb,fNo),e(z,gNo),e(z,Yb),e(Yb,Jue),e(Jue,hNo),e(Yb,uNo),e(Yb,QV),e(QV,pNo),e(Yb,_No),e(z,bNo),e(z,Kb),e(Kb,Yue),e(Yue,vNo),e(Kb,FNo),e(Kb,HV),e(HV,TNo),e(Kb,MNo),e(z,ENo),e(z,Zb),e(Zb,Kue),e(Kue,CNo),e(Zb,wNo),e(Zb,UV),e(UV,ANo),e(Zb,LNo),e(Ze,yNo),e(Ze,ev),e(ev,xNo),e(ev,Zue),e(Zue,$No),e(ev,kNo),e(ev,epe),e(epe,SNo),e(Ze,RNo),M(ov,Ze,null),b(m,eQe,_),b(m,nd,_),e(nd,rv),e(rv,ope),M(R8,ope,null),e(nd,PNo),e(nd,rpe),e(rpe,BNo),b(m,oQe,_),b(m,Bo,_),M(P8,Bo,null),e(Bo,INo),e(Bo,sd),e(sd,NNo),e(sd,JV),e(JV,qNo),e(sd,jNo),e(sd,YV),e(YV,DNo),e(sd,GNo),e(Bo,ONo),e(Bo,B8),e(B8,VNo),e(B8,tpe),e(tpe,XNo),e(B8,zNo),e(Bo,WNo),e(Bo,gt),M(I8,gt,null),e(gt,QNo),e(gt,ape),e(ape,HNo),e(gt,UNo),e(gt,ld),e(ld,JNo),e(ld,npe),e(npe,YNo),e(ld,KNo),e(ld,KV),e(KV,ZNo),e(ld,eqo),e(gt,oqo),M(tv,gt,null),e(Bo,rqo),e(Bo,eo),M(N8,eo,null),e(eo,tqo),e(eo,spe),e(spe,aqo),e(eo,nqo),e(eo,Va),e(Va,sqo),e(Va,lpe),e(lpe,lqo),e(Va,iqo),e(Va,ipe),e(ipe,dqo),e(Va,cqo),e(Va,dpe),e(dpe,mqo),e(Va,fqo),e(eo,gqo),e(eo,Q),e(Q,av),e(av,cpe),e(cpe,hqo),e(av,uqo),e(av,ZV),e(ZV,pqo),e(av,_qo),e(Q,bqo),e(Q,nv),e(nv,mpe),e(mpe,vqo),e(nv,Fqo),e(nv,eX),e(eX,Tqo),e(nv,Mqo),e(Q,Eqo),e(Q,sv),e(sv,fpe),e(fpe,Cqo),e(sv,wqo),e(sv,oX),e(oX,Aqo),e(sv,Lqo),e(Q,yqo),e(Q,lv),e(lv,gpe),e(gpe,xqo),e(lv,$qo),e(lv,rX),e(rX,kqo),e(lv,Sqo),e(Q,Rqo),e(Q,iv),e(iv,hpe),e(hpe,Pqo),e(iv,Bqo),e(iv,tX),e(tX,Iqo),e(iv,Nqo),e(Q,qqo),e(Q,dv),e(dv,upe),e(upe,jqo),e(dv,Dqo),e(dv,aX),e(aX,Gqo),e(dv,Oqo),e(Q,Vqo),e(Q,cv),e(cv,ppe),e(ppe,Xqo),e(cv,zqo),e(cv,nX),e(nX,Wqo),e(cv,Qqo),e(Q,Hqo),e(Q,mv),e(mv,_pe),e(_pe,Uqo),e(mv,Jqo),e(mv,sX),e(sX,Yqo),e(mv,Kqo),e(Q,Zqo),e(Q,fv),e(fv,bpe),e(bpe,ejo),e(fv,ojo),e(fv,lX),e(lX,rjo),e(fv,tjo),e(Q,ajo),e(Q,gv),e(gv,vpe),e(vpe,njo),e(gv,sjo),e(gv,iX),e(iX,ljo),e(gv,ijo),e(Q,djo),e(Q,hv),e(hv,Fpe),e(Fpe,cjo),e(hv,mjo),e(hv,dX),e(dX,fjo),e(hv,gjo),e(Q,hjo),e(Q,uv),e(uv,Tpe),e(Tpe,ujo),e(uv,pjo),e(uv,cX),e(cX,_jo),e(uv,bjo),e(Q,vjo),e(Q,pv),e(pv,Mpe),e(Mpe,Fjo),e(pv,Tjo),e(pv,mX),e(mX,Mjo),e(pv,Ejo),e(Q,Cjo),e(Q,_v),e(_v,Epe),e(Epe,wjo),e(_v,Ajo),e(_v,fX),e(fX,Ljo),e(_v,yjo),e(Q,xjo),e(Q,bv),e(bv,Cpe),e(Cpe,$jo),e(bv,kjo),e(bv,gX),e(gX,Sjo),e(bv,Rjo),e(Q,Pjo),e(Q,vv),e(vv,wpe),e(wpe,Bjo),e(vv,Ijo),e(vv,hX),e(hX,Njo),e(vv,qjo),e(Q,jjo),e(Q,Fv),e(Fv,Ape),e(Ape,Djo),e(Fv,Gjo),e(Fv,uX),e(uX,Ojo),e(Fv,Vjo),e(Q,Xjo),e(Q,Tv),e(Tv,Lpe),e(Lpe,zjo),e(Tv,Wjo),e(Tv,pX),e(pX,Qjo),e(Tv,Hjo),e(Q,Ujo),e(Q,Mv),e(Mv,ype),e(ype,Jjo),e(Mv,Yjo),e(Mv,_X),e(_X,Kjo),e(Mv,Zjo),e(Q,eDo),e(Q,Ev),e(Ev,xpe),e(xpe,oDo),e(Ev,rDo),e(Ev,bX),e(bX,tDo),e(Ev,aDo),e(Q,nDo),e(Q,Cv),e(Cv,$pe),e($pe,sDo),e(Cv,lDo),e(Cv,vX),e(vX,iDo),e(Cv,dDo),e(Q,cDo),e(Q,wv),e(wv,kpe),e(kpe,mDo),e(wv,fDo),e(wv,FX),e(FX,gDo),e(wv,hDo),e(Q,uDo),e(Q,Av),e(Av,Spe),e(Spe,pDo),e(Av,_Do),e(Av,TX),e(TX,bDo),e(Av,vDo),e(Q,FDo),e(Q,Lv),e(Lv,Rpe),e(Rpe,TDo),e(Lv,MDo),e(Lv,MX),e(MX,EDo),e(Lv,CDo),e(Q,wDo),e(Q,yv),e(yv,Ppe),e(Ppe,ADo),e(yv,LDo),e(yv,EX),e(EX,yDo),e(yv,xDo),e(Q,$Do),e(Q,xv),e(xv,Bpe),e(Bpe,kDo),e(xv,SDo),e(xv,CX),e(CX,RDo),e(xv,PDo),e(Q,BDo),e(Q,$v),e($v,Ipe),e(Ipe,IDo),e($v,NDo),e($v,wX),e(wX,qDo),e($v,jDo),e(Q,DDo),e(Q,kv),e(kv,Npe),e(Npe,GDo),e(kv,ODo),e(kv,AX),e(AX,VDo),e(kv,XDo),e(Q,zDo),e(Q,Sv),e(Sv,qpe),e(qpe,WDo),e(Sv,QDo),e(Sv,LX),e(LX,HDo),e(Sv,UDo),e(Q,JDo),e(Q,Rv),e(Rv,jpe),e(jpe,YDo),e(Rv,KDo),e(Rv,yX),e(yX,ZDo),e(Rv,eGo),e(Q,oGo),e(Q,Pv),e(Pv,Dpe),e(Dpe,rGo),e(Pv,tGo),e(Pv,xX),e(xX,aGo),e(Pv,nGo),e(Q,sGo),e(Q,Bv),e(Bv,Gpe),e(Gpe,lGo),e(Bv,iGo),e(Bv,$X),e($X,dGo),e(Bv,cGo),e(Q,mGo),e(Q,Iv),e(Iv,Ope),e(Ope,fGo),e(Iv,gGo),e(Iv,kX),e(kX,hGo),e(Iv,uGo),e(Q,pGo),e(Q,Nv),e(Nv,Vpe),e(Vpe,_Go),e(Nv,bGo),e(Nv,Xpe),e(Xpe,vGo),e(Nv,FGo),e(Q,TGo),e(Q,qv),e(qv,zpe),e(zpe,MGo),e(qv,EGo),e(qv,SX),e(SX,CGo),e(qv,wGo),e(Q,AGo),e(Q,jv),e(jv,Wpe),e(Wpe,LGo),e(jv,yGo),e(jv,RX),e(RX,xGo),e(jv,$Go),e(Q,kGo),e(Q,Dv),e(Dv,Qpe),e(Qpe,SGo),e(Dv,RGo),e(Dv,PX),e(PX,PGo),e(Dv,BGo),e(Q,IGo),e(Q,Gv),e(Gv,Hpe),e(Hpe,NGo),e(Gv,qGo),e(Gv,BX),e(BX,jGo),e(Gv,DGo),e(eo,GGo),e(eo,Ov),e(Ov,OGo),e(Ov,Upe),e(Upe,VGo),e(Ov,XGo),e(Ov,Jpe),e(Jpe,zGo),e(eo,WGo),M(Vv,eo,null),b(m,rQe,_),b(m,id,_),e(id,Xv),e(Xv,Ype),M(q8,Ype,null),e(id,QGo),e(id,Kpe),e(Kpe,HGo),b(m,tQe,_),b(m,Io,_),M(j8,Io,null),e(Io,UGo),e(Io,dd),e(dd,JGo),e(dd,IX),e(IX,YGo),e(dd,KGo),e(dd,NX),e(NX,ZGo),e(dd,eOo),e(Io,oOo),e(Io,D8),e(D8,rOo),e(D8,Zpe),e(Zpe,tOo),e(D8,aOo),e(Io,nOo),e(Io,ht),M(G8,ht,null),e(ht,sOo),e(ht,e_e),e(e_e,lOo),e(ht,iOo),e(ht,cd),e(cd,dOo),e(cd,o_e),e(o_e,cOo),e(cd,mOo),e(cd,qX),e(qX,fOo),e(cd,gOo),e(ht,hOo),M(zv,ht,null),e(Io,uOo),e(Io,oo),M(O8,oo,null),e(oo,pOo),e(oo,r_e),e(r_e,_Oo),e(oo,bOo),e(oo,Xa),e(Xa,vOo),e(Xa,t_e),e(t_e,FOo),e(Xa,TOo),e(Xa,a_e),e(a_e,MOo),e(Xa,EOo),e(Xa,n_e),e(n_e,COo),e(Xa,wOo),e(oo,AOo),e(oo,fe),e(fe,Wv),e(Wv,s_e),e(s_e,LOo),e(Wv,yOo),e(Wv,jX),e(jX,xOo),e(Wv,$Oo),e(fe,kOo),e(fe,Qv),e(Qv,l_e),e(l_e,SOo),e(Qv,ROo),e(Qv,DX),e(DX,POo),e(Qv,BOo),e(fe,IOo),e(fe,Hv),e(Hv,i_e),e(i_e,NOo),e(Hv,qOo),e(Hv,GX),e(GX,jOo),e(Hv,DOo),e(fe,GOo),e(fe,Uv),e(Uv,d_e),e(d_e,OOo),e(Uv,VOo),e(Uv,OX),e(OX,XOo),e(Uv,zOo),e(fe,WOo),e(fe,Jv),e(Jv,c_e),e(c_e,QOo),e(Jv,HOo),e(Jv,VX),e(VX,UOo),e(Jv,JOo),e(fe,YOo),e(fe,Yv),e(Yv,m_e),e(m_e,KOo),e(Yv,ZOo),e(Yv,XX),e(XX,eVo),e(Yv,oVo),e(fe,rVo),e(fe,Kv),e(Kv,f_e),e(f_e,tVo),e(Kv,aVo),e(Kv,zX),e(zX,nVo),e(Kv,sVo),e(fe,lVo),e(fe,Zv),e(Zv,g_e),e(g_e,iVo),e(Zv,dVo),e(Zv,WX),e(WX,cVo),e(Zv,mVo),e(fe,fVo),e(fe,e1),e(e1,h_e),e(h_e,gVo),e(e1,hVo),e(e1,QX),e(QX,uVo),e(e1,pVo),e(fe,_Vo),e(fe,o1),e(o1,u_e),e(u_e,bVo),e(o1,vVo),e(o1,HX),e(HX,FVo),e(o1,TVo),e(fe,MVo),e(fe,r1),e(r1,p_e),e(p_e,EVo),e(r1,CVo),e(r1,UX),e(UX,wVo),e(r1,AVo),e(fe,LVo),e(fe,t1),e(t1,__e),e(__e,yVo),e(t1,xVo),e(t1,JX),e(JX,$Vo),e(t1,kVo),e(fe,SVo),e(fe,a1),e(a1,b_e),e(b_e,RVo),e(a1,PVo),e(a1,YX),e(YX,BVo),e(a1,IVo),e(fe,NVo),e(fe,n1),e(n1,v_e),e(v_e,qVo),e(n1,jVo),e(n1,KX),e(KX,DVo),e(n1,GVo),e(fe,OVo),e(fe,s1),e(s1,F_e),e(F_e,VVo),e(s1,XVo),e(s1,ZX),e(ZX,zVo),e(s1,WVo),e(fe,QVo),e(fe,l1),e(l1,T_e),e(T_e,HVo),e(l1,UVo),e(l1,ez),e(ez,JVo),e(l1,YVo),e(fe,KVo),e(fe,i1),e(i1,M_e),e(M_e,ZVo),e(i1,eXo),e(i1,oz),e(oz,oXo),e(i1,rXo),e(fe,tXo),e(fe,d1),e(d1,E_e),e(E_e,aXo),e(d1,nXo),e(d1,rz),e(rz,sXo),e(d1,lXo),e(fe,iXo),e(fe,c1),e(c1,C_e),e(C_e,dXo),e(c1,cXo),e(c1,tz),e(tz,mXo),e(c1,fXo),e(oo,gXo),e(oo,m1),e(m1,hXo),e(m1,w_e),e(w_e,uXo),e(m1,pXo),e(m1,A_e),e(A_e,_Xo),e(oo,bXo),M(f1,oo,null),b(m,aQe,_),b(m,md,_),e(md,g1),e(g1,L_e),M(V8,L_e,null),e(md,vXo),e(md,y_e),e(y_e,FXo),b(m,nQe,_),b(m,No,_),M(X8,No,null),e(No,TXo),e(No,fd),e(fd,MXo),e(fd,az),e(az,EXo),e(fd,CXo),e(fd,nz),e(nz,wXo),e(fd,AXo),e(No,LXo),e(No,z8),e(z8,yXo),e(z8,x_e),e(x_e,xXo),e(z8,$Xo),e(No,kXo),e(No,ut),M(W8,ut,null),e(ut,SXo),e(ut,$_e),e($_e,RXo),e(ut,PXo),e(ut,gd),e(gd,BXo),e(gd,k_e),e(k_e,IXo),e(gd,NXo),e(gd,sz),e(sz,qXo),e(gd,jXo),e(ut,DXo),M(h1,ut,null),e(No,GXo),e(No,ro),M(Q8,ro,null),e(ro,OXo),e(ro,S_e),e(S_e,VXo),e(ro,XXo),e(ro,za),e(za,zXo),e(za,R_e),e(R_e,WXo),e(za,QXo),e(za,P_e),e(P_e,HXo),e(za,UXo),e(za,B_e),e(B_e,JXo),e(za,YXo),e(ro,KXo),e(ro,B),e(B,u1),e(u1,I_e),e(I_e,ZXo),e(u1,ezo),e(u1,lz),e(lz,ozo),e(u1,rzo),e(B,tzo),e(B,p1),e(p1,N_e),e(N_e,azo),e(p1,nzo),e(p1,iz),e(iz,szo),e(p1,lzo),e(B,izo),e(B,_1),e(_1,q_e),e(q_e,dzo),e(_1,czo),e(_1,dz),e(dz,mzo),e(_1,fzo),e(B,gzo),e(B,b1),e(b1,j_e),e(j_e,hzo),e(b1,uzo),e(b1,cz),e(cz,pzo),e(b1,_zo),e(B,bzo),e(B,v1),e(v1,D_e),e(D_e,vzo),e(v1,Fzo),e(v1,mz),e(mz,Tzo),e(v1,Mzo),e(B,Ezo),e(B,F1),e(F1,G_e),e(G_e,Czo),e(F1,wzo),e(F1,fz),e(fz,Azo),e(F1,Lzo),e(B,yzo),e(B,T1),e(T1,O_e),e(O_e,xzo),e(T1,$zo),e(T1,gz),e(gz,kzo),e(T1,Szo),e(B,Rzo),e(B,M1),e(M1,V_e),e(V_e,Pzo),e(M1,Bzo),e(M1,hz),e(hz,Izo),e(M1,Nzo),e(B,qzo),e(B,E1),e(E1,X_e),e(X_e,jzo),e(E1,Dzo),e(E1,uz),e(uz,Gzo),e(E1,Ozo),e(B,Vzo),e(B,C1),e(C1,z_e),e(z_e,Xzo),e(C1,zzo),e(C1,pz),e(pz,Wzo),e(C1,Qzo),e(B,Hzo),e(B,w1),e(w1,W_e),e(W_e,Uzo),e(w1,Jzo),e(w1,_z),e(_z,Yzo),e(w1,Kzo),e(B,Zzo),e(B,A1),e(A1,Q_e),e(Q_e,eWo),e(A1,oWo),e(A1,bz),e(bz,rWo),e(A1,tWo),e(B,aWo),e(B,L1),e(L1,H_e),e(H_e,nWo),e(L1,sWo),e(L1,vz),e(vz,lWo),e(L1,iWo),e(B,dWo),e(B,y1),e(y1,U_e),e(U_e,cWo),e(y1,mWo),e(y1,Fz),e(Fz,fWo),e(y1,gWo),e(B,hWo),e(B,x1),e(x1,J_e),e(J_e,uWo),e(x1,pWo),e(x1,Tz),e(Tz,_Wo),e(x1,bWo),e(B,vWo),e(B,$1),e($1,Y_e),e(Y_e,FWo),e($1,TWo),e($1,Mz),e(Mz,MWo),e($1,EWo),e(B,CWo),e(B,k1),e(k1,K_e),e(K_e,wWo),e(k1,AWo),e(k1,Ez),e(Ez,LWo),e(k1,yWo),e(B,xWo),e(B,S1),e(S1,Z_e),e(Z_e,$Wo),e(S1,kWo),e(S1,Cz),e(Cz,SWo),e(S1,RWo),e(B,PWo),e(B,R1),e(R1,e2e),e(e2e,BWo),e(R1,IWo),e(R1,wz),e(wz,NWo),e(R1,qWo),e(B,jWo),e(B,P1),e(P1,o2e),e(o2e,DWo),e(P1,GWo),e(P1,Az),e(Az,OWo),e(P1,VWo),e(B,XWo),e(B,B1),e(B1,r2e),e(r2e,zWo),e(B1,WWo),e(B1,Lz),e(Lz,QWo),e(B1,HWo),e(B,UWo),e(B,I1),e(I1,t2e),e(t2e,JWo),e(I1,YWo),e(I1,yz),e(yz,KWo),e(I1,ZWo),e(B,eQo),e(B,N1),e(N1,a2e),e(a2e,oQo),e(N1,rQo),e(N1,xz),e(xz,tQo),e(N1,aQo),e(B,nQo),e(B,q1),e(q1,n2e),e(n2e,sQo),e(q1,lQo),e(q1,$z),e($z,iQo),e(q1,dQo),e(B,cQo),e(B,j1),e(j1,s2e),e(s2e,mQo),e(j1,fQo),e(j1,kz),e(kz,gQo),e(j1,hQo),e(B,uQo),e(B,D1),e(D1,l2e),e(l2e,pQo),e(D1,_Qo),e(D1,Sz),e(Sz,bQo),e(D1,vQo),e(B,FQo),e(B,G1),e(G1,i2e),e(i2e,TQo),e(G1,MQo),e(G1,Rz),e(Rz,EQo),e(G1,CQo),e(B,wQo),e(B,O1),e(O1,d2e),e(d2e,AQo),e(O1,LQo),e(O1,Pz),e(Pz,yQo),e(O1,xQo),e(B,$Qo),e(B,V1),e(V1,c2e),e(c2e,kQo),e(V1,SQo),e(V1,Bz),e(Bz,RQo),e(V1,PQo),e(B,BQo),e(B,X1),e(X1,m2e),e(m2e,IQo),e(X1,NQo),e(X1,Iz),e(Iz,qQo),e(X1,jQo),e(B,DQo),e(B,z1),e(z1,f2e),e(f2e,GQo),e(z1,OQo),e(z1,Nz),e(Nz,VQo),e(z1,XQo),e(B,zQo),e(B,W1),e(W1,g2e),e(g2e,WQo),e(W1,QQo),e(W1,qz),e(qz,HQo),e(W1,UQo),e(B,JQo),e(B,Q1),e(Q1,h2e),e(h2e,YQo),e(Q1,KQo),e(Q1,jz),e(jz,ZQo),e(Q1,eHo),e(B,oHo),e(B,H1),e(H1,u2e),e(u2e,rHo),e(H1,tHo),e(H1,Dz),e(Dz,aHo),e(H1,nHo),e(B,sHo),e(B,U1),e(U1,p2e),e(p2e,lHo),e(U1,iHo),e(U1,Gz),e(Gz,dHo),e(U1,cHo),e(B,mHo),e(B,J1),e(J1,_2e),e(_2e,fHo),e(J1,gHo),e(J1,Oz),e(Oz,hHo),e(J1,uHo),e(B,pHo),e(B,Y1),e(Y1,b2e),e(b2e,_Ho),e(Y1,bHo),e(Y1,Vz),e(Vz,vHo),e(Y1,FHo),e(B,THo),e(B,K1),e(K1,v2e),e(v2e,MHo),e(K1,EHo),e(K1,Xz),e(Xz,CHo),e(K1,wHo),e(B,AHo),e(B,Z1),e(Z1,F2e),e(F2e,LHo),e(Z1,yHo),e(Z1,zz),e(zz,xHo),e(Z1,$Ho),e(B,kHo),e(B,eF),e(eF,T2e),e(T2e,SHo),e(eF,RHo),e(eF,Wz),e(Wz,PHo),e(eF,BHo),e(B,IHo),e(B,oF),e(oF,M2e),e(M2e,NHo),e(oF,qHo),e(oF,Qz),e(Qz,jHo),e(oF,DHo),e(B,GHo),e(B,rF),e(rF,E2e),e(E2e,OHo),e(rF,VHo),e(rF,Hz),e(Hz,XHo),e(rF,zHo),e(B,WHo),e(B,tF),e(tF,C2e),e(C2e,QHo),e(tF,HHo),e(tF,Uz),e(Uz,UHo),e(tF,JHo),e(B,YHo),e(B,aF),e(aF,w2e),e(w2e,KHo),e(aF,ZHo),e(aF,Jz),e(Jz,eUo),e(aF,oUo),e(B,rUo),e(B,nF),e(nF,A2e),e(A2e,tUo),e(nF,aUo),e(nF,Yz),e(Yz,nUo),e(nF,sUo),e(B,lUo),e(B,sF),e(sF,L2e),e(L2e,iUo),e(sF,dUo),e(sF,Kz),e(Kz,cUo),e(sF,mUo),e(B,fUo),e(B,lF),e(lF,y2e),e(y2e,gUo),e(lF,hUo),e(lF,Zz),e(Zz,uUo),e(lF,pUo),e(B,_Uo),e(B,iF),e(iF,x2e),e(x2e,bUo),e(iF,vUo),e(iF,eW),e(eW,FUo),e(iF,TUo),e(B,MUo),e(B,dF),e(dF,$2e),e($2e,EUo),e(dF,CUo),e(dF,oW),e(oW,wUo),e(dF,AUo),e(B,LUo),e(B,cF),e(cF,k2e),e(k2e,yUo),e(cF,xUo),e(cF,rW),e(rW,$Uo),e(cF,kUo),e(B,SUo),e(B,mF),e(mF,S2e),e(S2e,RUo),e(mF,PUo),e(mF,tW),e(tW,BUo),e(mF,IUo),e(B,NUo),e(B,fF),e(fF,R2e),e(R2e,qUo),e(fF,jUo),e(fF,aW),e(aW,DUo),e(fF,GUo),e(ro,OUo),e(ro,gF),e(gF,VUo),e(gF,P2e),e(P2e,XUo),e(gF,zUo),e(gF,B2e),e(B2e,WUo),e(ro,QUo),M(hF,ro,null),b(m,sQe,_),b(m,hd,_),e(hd,uF),e(uF,I2e),M(H8,I2e,null),e(hd,HUo),e(hd,N2e),e(N2e,UUo),b(m,lQe,_),b(m,qo,_),M(U8,qo,null),e(qo,JUo),e(qo,ud),e(ud,YUo),e(ud,nW),e(nW,KUo),e(ud,ZUo),e(ud,sW),e(sW,eJo),e(ud,oJo),e(qo,rJo),e(qo,J8),e(J8,tJo),e(J8,q2e),e(q2e,aJo),e(J8,nJo),e(qo,sJo),e(qo,pt),M(Y8,pt,null),e(pt,lJo),e(pt,j2e),e(j2e,iJo),e(pt,dJo),e(pt,pd),e(pd,cJo),e(pd,D2e),e(D2e,mJo),e(pd,fJo),e(pd,lW),e(lW,gJo),e(pd,hJo),e(pt,uJo),M(pF,pt,null),e(qo,pJo),e(qo,to),M(K8,to,null),e(to,_Jo),e(to,G2e),e(G2e,bJo),e(to,vJo),e(to,Wa),e(Wa,FJo),e(Wa,O2e),e(O2e,TJo),e(Wa,MJo),e(Wa,V2e),e(V2e,EJo),e(Wa,CJo),e(Wa,X2e),e(X2e,wJo),e(Wa,AJo),e(to,LJo),e(to,Z),e(Z,_F),e(_F,z2e),e(z2e,yJo),e(_F,xJo),e(_F,iW),e(iW,$Jo),e(_F,kJo),e(Z,SJo),e(Z,bF),e(bF,W2e),e(W2e,RJo),e(bF,PJo),e(bF,dW),e(dW,BJo),e(bF,IJo),e(Z,NJo),e(Z,vF),e(vF,Q2e),e(Q2e,qJo),e(vF,jJo),e(vF,cW),e(cW,DJo),e(vF,GJo),e(Z,OJo),e(Z,FF),e(FF,H2e),e(H2e,VJo),e(FF,XJo),e(FF,mW),e(mW,zJo),e(FF,WJo),e(Z,QJo),e(Z,TF),e(TF,U2e),e(U2e,HJo),e(TF,UJo),e(TF,fW),e(fW,JJo),e(TF,YJo),e(Z,KJo),e(Z,MF),e(MF,J2e),e(J2e,ZJo),e(MF,eYo),e(MF,gW),e(gW,oYo),e(MF,rYo),e(Z,tYo),e(Z,EF),e(EF,Y2e),e(Y2e,aYo),e(EF,nYo),e(EF,hW),e(hW,sYo),e(EF,lYo),e(Z,iYo),e(Z,CF),e(CF,K2e),e(K2e,dYo),e(CF,cYo),e(CF,uW),e(uW,mYo),e(CF,fYo),e(Z,gYo),e(Z,wF),e(wF,Z2e),e(Z2e,hYo),e(wF,uYo),e(wF,pW),e(pW,pYo),e(wF,_Yo),e(Z,bYo),e(Z,AF),e(AF,ebe),e(ebe,vYo),e(AF,FYo),e(AF,_W),e(_W,TYo),e(AF,MYo),e(Z,EYo),e(Z,LF),e(LF,obe),e(obe,CYo),e(LF,wYo),e(LF,bW),e(bW,AYo),e(LF,LYo),e(Z,yYo),e(Z,yF),e(yF,rbe),e(rbe,xYo),e(yF,$Yo),e(yF,vW),e(vW,kYo),e(yF,SYo),e(Z,RYo),e(Z,xF),e(xF,tbe),e(tbe,PYo),e(xF,BYo),e(xF,FW),e(FW,IYo),e(xF,NYo),e(Z,qYo),e(Z,$F),e($F,abe),e(abe,jYo),e($F,DYo),e($F,TW),e(TW,GYo),e($F,OYo),e(Z,VYo),e(Z,kF),e(kF,nbe),e(nbe,XYo),e(kF,zYo),e(kF,MW),e(MW,WYo),e(kF,QYo),e(Z,HYo),e(Z,SF),e(SF,sbe),e(sbe,UYo),e(SF,JYo),e(SF,EW),e(EW,YYo),e(SF,KYo),e(Z,ZYo),e(Z,RF),e(RF,lbe),e(lbe,eKo),e(RF,oKo),e(RF,CW),e(CW,rKo),e(RF,tKo),e(Z,aKo),e(Z,PF),e(PF,ibe),e(ibe,nKo),e(PF,sKo),e(PF,wW),e(wW,lKo),e(PF,iKo),e(Z,dKo),e(Z,BF),e(BF,dbe),e(dbe,cKo),e(BF,mKo),e(BF,AW),e(AW,fKo),e(BF,gKo),e(Z,hKo),e(Z,IF),e(IF,cbe),e(cbe,uKo),e(IF,pKo),e(IF,LW),e(LW,_Ko),e(IF,bKo),e(Z,vKo),e(Z,NF),e(NF,mbe),e(mbe,FKo),e(NF,TKo),e(NF,yW),e(yW,MKo),e(NF,EKo),e(Z,CKo),e(Z,qF),e(qF,fbe),e(fbe,wKo),e(qF,AKo),e(qF,xW),e(xW,LKo),e(qF,yKo),e(Z,xKo),e(Z,jF),e(jF,gbe),e(gbe,$Ko),e(jF,kKo),e(jF,$W),e($W,SKo),e(jF,RKo),e(Z,PKo),e(Z,DF),e(DF,hbe),e(hbe,BKo),e(DF,IKo),e(DF,kW),e(kW,NKo),e(DF,qKo),e(Z,jKo),e(Z,GF),e(GF,ube),e(ube,DKo),e(GF,GKo),e(GF,SW),e(SW,OKo),e(GF,VKo),e(Z,XKo),e(Z,OF),e(OF,pbe),e(pbe,zKo),e(OF,WKo),e(OF,RW),e(RW,QKo),e(OF,HKo),e(Z,UKo),e(Z,VF),e(VF,_be),e(_be,JKo),e(VF,YKo),e(VF,PW),e(PW,KKo),e(VF,ZKo),e(Z,eZo),e(Z,XF),e(XF,bbe),e(bbe,oZo),e(XF,rZo),e(XF,BW),e(BW,tZo),e(XF,aZo),e(Z,nZo),e(Z,zF),e(zF,vbe),e(vbe,sZo),e(zF,lZo),e(zF,IW),e(IW,iZo),e(zF,dZo),e(Z,cZo),e(Z,WF),e(WF,Fbe),e(Fbe,mZo),e(WF,fZo),e(WF,NW),e(NW,gZo),e(WF,hZo),e(Z,uZo),e(Z,QF),e(QF,Tbe),e(Tbe,pZo),e(QF,_Zo),e(QF,qW),e(qW,bZo),e(QF,vZo),e(to,FZo),e(to,HF),e(HF,TZo),e(HF,Mbe),e(Mbe,MZo),e(HF,EZo),e(HF,Ebe),e(Ebe,CZo),e(to,wZo),M(UF,to,null),b(m,iQe,_),b(m,_d,_),e(_d,JF),e(JF,Cbe),M(Z8,Cbe,null),e(_d,AZo),e(_d,wbe),e(wbe,LZo),b(m,dQe,_),b(m,jo,_),M(e9,jo,null),e(jo,yZo),e(jo,bd),e(bd,xZo),e(bd,jW),e(jW,$Zo),e(bd,kZo),e(bd,DW),e(DW,SZo),e(bd,RZo),e(jo,PZo),e(jo,o9),e(o9,BZo),e(o9,Abe),e(Abe,IZo),e(o9,NZo),e(jo,qZo),e(jo,_t),M(r9,_t,null),e(_t,jZo),e(_t,Lbe),e(Lbe,DZo),e(_t,GZo),e(_t,vd),e(vd,OZo),e(vd,ybe),e(ybe,VZo),e(vd,XZo),e(vd,GW),e(GW,zZo),e(vd,WZo),e(_t,QZo),M(YF,_t,null),e(jo,HZo),e(jo,ao),M(t9,ao,null),e(ao,UZo),e(ao,xbe),e(xbe,JZo),e(ao,YZo),e(ao,Qa),e(Qa,KZo),e(Qa,$be),e($be,ZZo),e(Qa,eer),e(Qa,kbe),e(kbe,oer),e(Qa,rer),e(Qa,Sbe),e(Sbe,ter),e(Qa,aer),e(ao,ner),e(ao,Do),e(Do,KF),e(KF,Rbe),e(Rbe,ser),e(KF,ler),e(KF,OW),e(OW,ier),e(KF,der),e(Do,cer),e(Do,ZF),e(ZF,Pbe),e(Pbe,mer),e(ZF,fer),e(ZF,VW),e(VW,ger),e(ZF,her),e(Do,uer),e(Do,eT),e(eT,Bbe),e(Bbe,per),e(eT,_er),e(eT,XW),e(XW,ber),e(eT,ver),e(Do,Fer),e(Do,oT),e(oT,Ibe),e(Ibe,Ter),e(oT,Mer),e(oT,zW),e(zW,Eer),e(oT,Cer),e(Do,wer),e(Do,rT),e(rT,Nbe),e(Nbe,Aer),e(rT,Ler),e(rT,WW),e(WW,yer),e(rT,xer),e(Do,$er),e(Do,tT),e(tT,qbe),e(qbe,ker),e(tT,Ser),e(tT,QW),e(QW,Rer),e(tT,Per),e(ao,Ber),e(ao,aT),e(aT,Ier),e(aT,jbe),e(jbe,Ner),e(aT,qer),e(aT,Dbe),e(Dbe,jer),e(ao,Der),M(nT,ao,null),b(m,cQe,_),b(m,Fd,_),e(Fd,sT),e(sT,Gbe),M(a9,Gbe,null),e(Fd,Ger),e(Fd,Obe),e(Obe,Oer),b(m,mQe,_),b(m,Go,_),M(n9,Go,null),e(Go,Ver),e(Go,Td),e(Td,Xer),e(Td,HW),e(HW,zer),e(Td,Wer),e(Td,UW),e(UW,Qer),e(Td,Her),e(Go,Uer),e(Go,s9),e(s9,Jer),e(s9,Vbe),e(Vbe,Yer),e(s9,Ker),e(Go,Zer),e(Go,bt),M(l9,bt,null),e(bt,eor),e(bt,Xbe),e(Xbe,oor),e(bt,ror),e(bt,Md),e(Md,tor),e(Md,zbe),e(zbe,aor),e(Md,nor),e(Md,JW),e(JW,sor),e(Md,lor),e(bt,ior),M(lT,bt,null),e(Go,dor),e(Go,no),M(i9,no,null),e(no,cor),e(no,Wbe),e(Wbe,mor),e(no,gor),e(no,Ha),e(Ha,hor),e(Ha,Qbe),e(Qbe,uor),e(Ha,por),e(Ha,Hbe),e(Hbe,_or),e(Ha,bor),e(Ha,Ube),e(Ube,vor),e(Ha,For),e(no,Tor),e(no,U),e(U,iT),e(iT,Jbe),e(Jbe,Mor),e(iT,Eor),e(iT,YW),e(YW,Cor),e(iT,wor),e(U,Aor),e(U,dT),e(dT,Ybe),e(Ybe,Lor),e(dT,yor),e(dT,KW),e(KW,xor),e(dT,$or),e(U,kor),e(U,cT),e(cT,Kbe),e(Kbe,Sor),e(cT,Ror),e(cT,ZW),e(ZW,Por),e(cT,Bor),e(U,Ior),e(U,mT),e(mT,Zbe),e(Zbe,Nor),e(mT,qor),e(mT,eQ),e(eQ,jor),e(mT,Dor),e(U,Gor),e(U,fT),e(fT,eve),e(eve,Oor),e(fT,Vor),e(fT,oQ),e(oQ,Xor),e(fT,zor),e(U,Wor),e(U,gT),e(gT,ove),e(ove,Qor),e(gT,Hor),e(gT,rQ),e(rQ,Uor),e(gT,Jor),e(U,Yor),e(U,hT),e(hT,rve),e(rve,Kor),e(hT,Zor),e(hT,tQ),e(tQ,err),e(hT,orr),e(U,rrr),e(U,uT),e(uT,tve),e(tve,trr),e(uT,arr),e(uT,aQ),e(aQ,nrr),e(uT,srr),e(U,lrr),e(U,pT),e(pT,ave),e(ave,irr),e(pT,drr),e(pT,nQ),e(nQ,crr),e(pT,mrr),e(U,frr),e(U,_T),e(_T,nve),e(nve,grr),e(_T,hrr),e(_T,sQ),e(sQ,urr),e(_T,prr),e(U,_rr),e(U,bT),e(bT,sve),e(sve,brr),e(bT,vrr),e(bT,lQ),e(lQ,Frr),e(bT,Trr),e(U,Mrr),e(U,vT),e(vT,lve),e(lve,Err),e(vT,Crr),e(vT,iQ),e(iQ,wrr),e(vT,Arr),e(U,Lrr),e(U,FT),e(FT,ive),e(ive,yrr),e(FT,xrr),e(FT,dQ),e(dQ,$rr),e(FT,krr),e(U,Srr),e(U,TT),e(TT,dve),e(dve,Rrr),e(TT,Prr),e(TT,cQ),e(cQ,Brr),e(TT,Irr),e(U,Nrr),e(U,MT),e(MT,cve),e(cve,qrr),e(MT,jrr),e(MT,mQ),e(mQ,Drr),e(MT,Grr),e(U,Orr),e(U,ET),e(ET,mve),e(mve,Vrr),e(ET,Xrr),e(ET,fQ),e(fQ,zrr),e(ET,Wrr),e(U,Qrr),e(U,CT),e(CT,fve),e(fve,Hrr),e(CT,Urr),e(CT,gQ),e(gQ,Jrr),e(CT,Yrr),e(U,Krr),e(U,wT),e(wT,gve),e(gve,Zrr),e(wT,etr),e(wT,hQ),e(hQ,otr),e(wT,rtr),e(U,ttr),e(U,AT),e(AT,hve),e(hve,atr),e(AT,ntr),e(AT,uQ),e(uQ,str),e(AT,ltr),e(U,itr),e(U,LT),e(LT,uve),e(uve,dtr),e(LT,ctr),e(LT,pQ),e(pQ,mtr),e(LT,ftr),e(U,gtr),e(U,yT),e(yT,pve),e(pve,htr),e(yT,utr),e(yT,_Q),e(_Q,ptr),e(yT,_tr),e(U,btr),e(U,xT),e(xT,_ve),e(_ve,vtr),e(xT,Ftr),e(xT,bQ),e(bQ,Ttr),e(xT,Mtr),e(U,Etr),e(U,$T),e($T,bve),e(bve,Ctr),e($T,wtr),e($T,vQ),e(vQ,Atr),e($T,Ltr),e(U,ytr),e(U,kT),e(kT,vve),e(vve,xtr),e(kT,$tr),e(kT,FQ),e(FQ,ktr),e(kT,Str),e(U,Rtr),e(U,ST),e(ST,Fve),e(Fve,Ptr),e(ST,Btr),e(ST,TQ),e(TQ,Itr),e(ST,Ntr),e(U,qtr),e(U,RT),e(RT,Tve),e(Tve,jtr),e(RT,Dtr),e(RT,MQ),e(MQ,Gtr),e(RT,Otr),e(U,Vtr),e(U,PT),e(PT,Mve),e(Mve,Xtr),e(PT,ztr),e(PT,EQ),e(EQ,Wtr),e(PT,Qtr),e(U,Htr),e(U,BT),e(BT,Eve),e(Eve,Utr),e(BT,Jtr),e(BT,CQ),e(CQ,Ytr),e(BT,Ktr),e(U,Ztr),e(U,IT),e(IT,Cve),e(Cve,ear),e(IT,oar),e(IT,wQ),e(wQ,rar),e(IT,tar),e(U,aar),e(U,NT),e(NT,wve),e(wve,nar),e(NT,sar),e(NT,AQ),e(AQ,lar),e(NT,iar),e(U,dar),e(U,qT),e(qT,Ave),e(Ave,car),e(qT,mar),e(qT,LQ),e(LQ,far),e(qT,gar),e(U,har),e(U,jT),e(jT,Lve),e(Lve,uar),e(jT,par),e(jT,yQ),e(yQ,_ar),e(jT,bar),e(U,Far),e(U,DT),e(DT,yve),e(yve,Tar),e(DT,Mar),e(DT,xQ),e(xQ,Ear),e(DT,Car),e(U,war),e(U,GT),e(GT,xve),e(xve,Aar),e(GT,Lar),e(GT,$Q),e($Q,yar),e(GT,xar),e(U,$ar),e(U,OT),e(OT,$ve),e($ve,kar),e(OT,Sar),e(OT,kQ),e(kQ,Rar),e(OT,Par),e(U,Bar),e(U,VT),e(VT,kve),e(kve,Iar),e(VT,Nar),e(VT,SQ),e(SQ,qar),e(VT,jar),e(U,Dar),e(U,XT),e(XT,Sve),e(Sve,Gar),e(XT,Oar),e(XT,RQ),e(RQ,Var),e(XT,Xar),e(no,zar),e(no,zT),e(zT,War),e(zT,Rve),e(Rve,Qar),e(zT,Har),e(zT,Pve),e(Pve,Uar),e(no,Jar),M(WT,no,null),b(m,fQe,_),b(m,Ed,_),e(Ed,QT),e(QT,Bve),M(d9,Bve,null),e(Ed,Yar),e(Ed,Ive),e(Ive,Kar),b(m,gQe,_),b(m,Oo,_),M(c9,Oo,null),e(Oo,Zar),e(Oo,Cd),e(Cd,enr),e(Cd,PQ),e(PQ,onr),e(Cd,rnr),e(Cd,BQ),e(BQ,tnr),e(Cd,anr),e(Oo,nnr),e(Oo,m9),e(m9,snr),e(m9,Nve),e(Nve,lnr),e(m9,inr),e(Oo,dnr),e(Oo,vt),M(f9,vt,null),e(vt,cnr),e(vt,qve),e(qve,mnr),e(vt,fnr),e(vt,wd),e(wd,gnr),e(wd,jve),e(jve,hnr),e(wd,unr),e(wd,IQ),e(IQ,pnr),e(wd,_nr),e(vt,bnr),M(HT,vt,null),e(Oo,vnr),e(Oo,so),M(g9,so,null),e(so,Fnr),e(so,Dve),e(Dve,Tnr),e(so,Mnr),e(so,Ua),e(Ua,Enr),e(Ua,Gve),e(Gve,Cnr),e(Ua,wnr),e(Ua,Ove),e(Ove,Anr),e(Ua,Lnr),e(Ua,Vve),e(Vve,ynr),e(Ua,xnr),e(so,$nr),e(so,V),e(V,UT),e(UT,Xve),e(Xve,knr),e(UT,Snr),e(UT,NQ),e(NQ,Rnr),e(UT,Pnr),e(V,Bnr),e(V,JT),e(JT,zve),e(zve,Inr),e(JT,Nnr),e(JT,qQ),e(qQ,qnr),e(JT,jnr),e(V,Dnr),e(V,YT),e(YT,Wve),e(Wve,Gnr),e(YT,Onr),e(YT,jQ),e(jQ,Vnr),e(YT,Xnr),e(V,znr),e(V,KT),e(KT,Qve),e(Qve,Wnr),e(KT,Qnr),e(KT,DQ),e(DQ,Hnr),e(KT,Unr),e(V,Jnr),e(V,ZT),e(ZT,Hve),e(Hve,Ynr),e(ZT,Knr),e(ZT,GQ),e(GQ,Znr),e(ZT,esr),e(V,osr),e(V,eM),e(eM,Uve),e(Uve,rsr),e(eM,tsr),e(eM,OQ),e(OQ,asr),e(eM,nsr),e(V,ssr),e(V,oM),e(oM,Jve),e(Jve,lsr),e(oM,isr),e(oM,VQ),e(VQ,dsr),e(oM,csr),e(V,msr),e(V,rM),e(rM,Yve),e(Yve,fsr),e(rM,gsr),e(rM,XQ),e(XQ,hsr),e(rM,usr),e(V,psr),e(V,tM),e(tM,Kve),e(Kve,_sr),e(tM,bsr),e(tM,zQ),e(zQ,vsr),e(tM,Fsr),e(V,Tsr),e(V,aM),e(aM,Zve),e(Zve,Msr),e(aM,Esr),e(aM,WQ),e(WQ,Csr),e(aM,wsr),e(V,Asr),e(V,nM),e(nM,e1e),e(e1e,Lsr),e(nM,ysr),e(nM,QQ),e(QQ,xsr),e(nM,$sr),e(V,ksr),e(V,sM),e(sM,o1e),e(o1e,Ssr),e(sM,Rsr),e(sM,HQ),e(HQ,Psr),e(sM,Bsr),e(V,Isr),e(V,lM),e(lM,r1e),e(r1e,Nsr),e(lM,qsr),e(lM,UQ),e(UQ,jsr),e(lM,Dsr),e(V,Gsr),e(V,iM),e(iM,t1e),e(t1e,Osr),e(iM,Vsr),e(iM,JQ),e(JQ,Xsr),e(iM,zsr),e(V,Wsr),e(V,dM),e(dM,a1e),e(a1e,Qsr),e(dM,Hsr),e(dM,YQ),e(YQ,Usr),e(dM,Jsr),e(V,Ysr),e(V,cM),e(cM,n1e),e(n1e,Ksr),e(cM,Zsr),e(cM,KQ),e(KQ,elr),e(cM,olr),e(V,rlr),e(V,mM),e(mM,s1e),e(s1e,tlr),e(mM,alr),e(mM,ZQ),e(ZQ,nlr),e(mM,slr),e(V,llr),e(V,fM),e(fM,l1e),e(l1e,ilr),e(fM,dlr),e(fM,eH),e(eH,clr),e(fM,mlr),e(V,flr),e(V,gM),e(gM,i1e),e(i1e,glr),e(gM,hlr),e(gM,oH),e(oH,ulr),e(gM,plr),e(V,_lr),e(V,hM),e(hM,d1e),e(d1e,blr),e(hM,vlr),e(hM,rH),e(rH,Flr),e(hM,Tlr),e(V,Mlr),e(V,uM),e(uM,c1e),e(c1e,Elr),e(uM,Clr),e(uM,tH),e(tH,wlr),e(uM,Alr),e(V,Llr),e(V,pM),e(pM,m1e),e(m1e,ylr),e(pM,xlr),e(pM,aH),e(aH,$lr),e(pM,klr),e(V,Slr),e(V,_M),e(_M,f1e),e(f1e,Rlr),e(_M,Plr),e(_M,nH),e(nH,Blr),e(_M,Ilr),e(V,Nlr),e(V,bM),e(bM,g1e),e(g1e,qlr),e(bM,jlr),e(bM,sH),e(sH,Dlr),e(bM,Glr),e(V,Olr),e(V,vM),e(vM,h1e),e(h1e,Vlr),e(vM,Xlr),e(vM,lH),e(lH,zlr),e(vM,Wlr),e(V,Qlr),e(V,FM),e(FM,u1e),e(u1e,Hlr),e(FM,Ulr),e(FM,iH),e(iH,Jlr),e(FM,Ylr),e(V,Klr),e(V,TM),e(TM,p1e),e(p1e,Zlr),e(TM,eir),e(TM,dH),e(dH,oir),e(TM,rir),e(V,tir),e(V,MM),e(MM,_1e),e(_1e,air),e(MM,nir),e(MM,cH),e(cH,sir),e(MM,lir),e(V,iir),e(V,EM),e(EM,b1e),e(b1e,dir),e(EM,cir),e(EM,mH),e(mH,mir),e(EM,fir),e(V,gir),e(V,CM),e(CM,v1e),e(v1e,hir),e(CM,uir),e(CM,fH),e(fH,pir),e(CM,_ir),e(V,bir),e(V,wM),e(wM,F1e),e(F1e,vir),e(wM,Fir),e(wM,gH),e(gH,Tir),e(wM,Mir),e(V,Eir),e(V,AM),e(AM,T1e),e(T1e,Cir),e(AM,wir),e(AM,hH),e(hH,Air),e(AM,Lir),e(V,yir),e(V,LM),e(LM,M1e),e(M1e,xir),e(LM,$ir),e(LM,uH),e(uH,kir),e(LM,Sir),e(V,Rir),e(V,yM),e(yM,E1e),e(E1e,Pir),e(yM,Bir),e(yM,pH),e(pH,Iir),e(yM,Nir),e(V,qir),e(V,xM),e(xM,C1e),e(C1e,jir),e(xM,Dir),e(xM,_H),e(_H,Gir),e(xM,Oir),e(V,Vir),e(V,$M),e($M,w1e),e(w1e,Xir),e($M,zir),e($M,bH),e(bH,Wir),e($M,Qir),e(V,Hir),e(V,kM),e(kM,A1e),e(A1e,Uir),e(kM,Jir),e(kM,vH),e(vH,Yir),e(kM,Kir),e(V,Zir),e(V,SM),e(SM,L1e),e(L1e,edr),e(SM,odr),e(SM,FH),e(FH,rdr),e(SM,tdr),e(V,adr),e(V,RM),e(RM,y1e),e(y1e,ndr),e(RM,sdr),e(RM,TH),e(TH,ldr),e(RM,idr),e(V,ddr),e(V,PM),e(PM,x1e),e(x1e,cdr),e(PM,mdr),e(PM,MH),e(MH,fdr),e(PM,gdr),e(V,hdr),e(V,BM),e(BM,$1e),e($1e,udr),e(BM,pdr),e(BM,EH),e(EH,_dr),e(BM,bdr),e(V,vdr),e(V,IM),e(IM,k1e),e(k1e,Fdr),e(IM,Tdr),e(IM,CH),e(CH,Mdr),e(IM,Edr),e(V,Cdr),e(V,NM),e(NM,S1e),e(S1e,wdr),e(NM,Adr),e(NM,wH),e(wH,Ldr),e(NM,ydr),e(so,xdr),e(so,qM),e(qM,$dr),e(qM,R1e),e(R1e,kdr),e(qM,Sdr),e(qM,P1e),e(P1e,Rdr),e(so,Pdr),M(jM,so,null),b(m,hQe,_),b(m,Ad,_),e(Ad,DM),e(DM,B1e),M(h9,B1e,null),e(Ad,Bdr),e(Ad,I1e),e(I1e,Idr),b(m,uQe,_),b(m,Vo,_),M(u9,Vo,null),e(Vo,Ndr),e(Vo,Ld),e(Ld,qdr),e(Ld,AH),e(AH,jdr),e(Ld,Ddr),e(Ld,LH),e(LH,Gdr),e(Ld,Odr),e(Vo,Vdr),e(Vo,p9),e(p9,Xdr),e(p9,N1e),e(N1e,zdr),e(p9,Wdr),e(Vo,Qdr),e(Vo,Ft),M(_9,Ft,null),e(Ft,Hdr),e(Ft,q1e),e(q1e,Udr),e(Ft,Jdr),e(Ft,yd),e(yd,Ydr),e(yd,j1e),e(j1e,Kdr),e(yd,Zdr),e(yd,yH),e(yH,ecr),e(yd,ocr),e(Ft,rcr),M(GM,Ft,null),e(Vo,tcr),e(Vo,lo),M(b9,lo,null),e(lo,acr),e(lo,D1e),e(D1e,ncr),e(lo,scr),e(lo,Ja),e(Ja,lcr),e(Ja,G1e),e(G1e,icr),e(Ja,dcr),e(Ja,O1e),e(O1e,ccr),e(Ja,mcr),e(Ja,V1e),e(V1e,fcr),e(Ja,gcr),e(lo,hcr),e(lo,X1e),e(X1e,OM),e(OM,z1e),e(z1e,ucr),e(OM,pcr),e(OM,xH),e(xH,_cr),e(OM,bcr),e(lo,vcr),e(lo,VM),e(VM,Fcr),e(VM,W1e),e(W1e,Tcr),e(VM,Mcr),e(VM,Q1e),e(Q1e,Ecr),e(lo,Ccr),M(XM,lo,null),b(m,pQe,_),b(m,xd,_),e(xd,zM),e(zM,H1e),M(v9,H1e,null),e(xd,wcr),e(xd,U1e),e(U1e,Acr),b(m,_Qe,_),b(m,Xo,_),M(F9,Xo,null),e(Xo,Lcr),e(Xo,$d),e($d,ycr),e($d,$H),e($H,xcr),e($d,$cr),e($d,kH),e(kH,kcr),e($d,Scr),e(Xo,Rcr),e(Xo,T9),e(T9,Pcr),e(T9,J1e),e(J1e,Bcr),e(T9,Icr),e(Xo,Ncr),e(Xo,Tt),M(M9,Tt,null),e(Tt,qcr),e(Tt,Y1e),e(Y1e,jcr),e(Tt,Dcr),e(Tt,kd),e(kd,Gcr),e(kd,K1e),e(K1e,Ocr),e(kd,Vcr),e(kd,SH),e(SH,Xcr),e(kd,zcr),e(Tt,Wcr),M(WM,Tt,null),e(Xo,Qcr),e(Xo,io),M(E9,io,null),e(io,Hcr),e(io,Z1e),e(Z1e,Ucr),e(io,Jcr),e(io,Ya),e(Ya,Ycr),e(Ya,eFe),e(eFe,Kcr),e(Ya,Zcr),e(Ya,oFe),e(oFe,emr),e(Ya,omr),e(Ya,rFe),e(rFe,rmr),e(Ya,tmr),e(io,amr),e(io,be),e(be,QM),e(QM,tFe),e(tFe,nmr),e(QM,smr),e(QM,RH),e(RH,lmr),e(QM,imr),e(be,dmr),e(be,HM),e(HM,aFe),e(aFe,cmr),e(HM,mmr),e(HM,PH),e(PH,fmr),e(HM,gmr),e(be,hmr),e(be,UM),e(UM,nFe),e(nFe,umr),e(UM,pmr),e(UM,BH),e(BH,_mr),e(UM,bmr),e(be,vmr),e(be,JM),e(JM,sFe),e(sFe,Fmr),e(JM,Tmr),e(JM,IH),e(IH,Mmr),e(JM,Emr),e(be,Cmr),e(be,rl),e(rl,lFe),e(lFe,wmr),e(rl,Amr),e(rl,NH),e(NH,Lmr),e(rl,ymr),e(rl,qH),e(qH,xmr),e(rl,$mr),e(be,kmr),e(be,YM),e(YM,iFe),e(iFe,Smr),e(YM,Rmr),e(YM,jH),e(jH,Pmr),e(YM,Bmr),e(be,Imr),e(be,tl),e(tl,dFe),e(dFe,Nmr),e(tl,qmr),e(tl,DH),e(DH,jmr),e(tl,Dmr),e(tl,GH),e(GH,Gmr),e(tl,Omr),e(be,Vmr),e(be,KM),e(KM,cFe),e(cFe,Xmr),e(KM,zmr),e(KM,OH),e(OH,Wmr),e(KM,Qmr),e(be,Hmr),e(be,Mt),e(Mt,mFe),e(mFe,Umr),e(Mt,Jmr),e(Mt,VH),e(VH,Ymr),e(Mt,Kmr),e(Mt,XH),e(XH,Zmr),e(Mt,efr),e(Mt,zH),e(zH,ofr),e(Mt,rfr),e(be,tfr),e(be,ZM),e(ZM,fFe),e(fFe,afr),e(ZM,nfr),e(ZM,WH),e(WH,sfr),e(ZM,lfr),e(be,ifr),e(be,eE),e(eE,gFe),e(gFe,dfr),e(eE,cfr),e(eE,QH),e(QH,mfr),e(eE,ffr),e(be,gfr),e(be,oE),e(oE,hFe),e(hFe,hfr),e(oE,ufr),e(oE,HH),e(HH,pfr),e(oE,_fr),e(be,bfr),e(be,rE),e(rE,uFe),e(uFe,vfr),e(rE,Ffr),e(rE,UH),e(UH,Tfr),e(rE,Mfr),e(be,Efr),e(be,tE),e(tE,pFe),e(pFe,Cfr),e(tE,wfr),e(tE,JH),e(JH,Afr),e(tE,Lfr),e(be,yfr),e(be,aE),e(aE,_Fe),e(_Fe,xfr),e(aE,$fr),e(aE,YH),e(YH,kfr),e(aE,Sfr),e(be,Rfr),e(be,nE),e(nE,bFe),e(bFe,Pfr),e(nE,Bfr),e(nE,KH),e(KH,Ifr),e(nE,Nfr),e(be,qfr),e(be,sE),e(sE,vFe),e(vFe,jfr),e(sE,Dfr),e(sE,ZH),e(ZH,Gfr),e(sE,Ofr),e(io,Vfr),e(io,lE),e(lE,Xfr),e(lE,FFe),e(FFe,zfr),e(lE,Wfr),e(lE,TFe),e(TFe,Qfr),e(io,Hfr),M(iE,io,null),b(m,bQe,_),b(m,Sd,_),e(Sd,dE),e(dE,MFe),M(C9,MFe,null),e(Sd,Ufr),e(Sd,EFe),e(EFe,Jfr),b(m,vQe,_),b(m,zo,_),M(w9,zo,null),e(zo,Yfr),e(zo,Rd),e(Rd,Kfr),e(Rd,eU),e(eU,Zfr),e(Rd,egr),e(Rd,oU),e(oU,ogr),e(Rd,rgr),e(zo,tgr),e(zo,A9),e(A9,agr),e(A9,CFe),e(CFe,ngr),e(A9,sgr),e(zo,lgr),e(zo,Et),M(L9,Et,null),e(Et,igr),e(Et,wFe),e(wFe,dgr),e(Et,cgr),e(Et,Pd),e(Pd,mgr),e(Pd,AFe),e(AFe,fgr),e(Pd,ggr),e(Pd,rU),e(rU,hgr),e(Pd,ugr),e(Et,pgr),M(cE,Et,null),e(zo,_gr),e(zo,co),M(y9,co,null),e(co,bgr),e(co,LFe),e(LFe,vgr),e(co,Fgr),e(co,Ka),e(Ka,Tgr),e(Ka,yFe),e(yFe,Mgr),e(Ka,Egr),e(Ka,xFe),e(xFe,Cgr),e(Ka,wgr),e(Ka,$Fe),e($Fe,Agr),e(Ka,Lgr),e(co,ygr),e(co,kFe),e(kFe,mE),e(mE,SFe),e(SFe,xgr),e(mE,$gr),e(mE,tU),e(tU,kgr),e(mE,Sgr),e(co,Rgr),e(co,fE),e(fE,Pgr),e(fE,RFe),e(RFe,Bgr),e(fE,Igr),e(fE,PFe),e(PFe,Ngr),e(co,qgr),M(gE,co,null),b(m,FQe,_),b(m,Bd,_),e(Bd,hE),e(hE,BFe),M(x9,BFe,null),e(Bd,jgr),e(Bd,IFe),e(IFe,Dgr),b(m,TQe,_),b(m,Wo,_),M($9,Wo,null),e(Wo,Ggr),e(Wo,Id),e(Id,Ogr),e(Id,aU),e(aU,Vgr),e(Id,Xgr),e(Id,nU),e(nU,zgr),e(Id,Wgr),e(Wo,Qgr),e(Wo,k9),e(k9,Hgr),e(k9,NFe),e(NFe,Ugr),e(k9,Jgr),e(Wo,Ygr),e(Wo,Ct),M(S9,Ct,null),e(Ct,Kgr),e(Ct,qFe),e(qFe,Zgr),e(Ct,ehr),e(Ct,Nd),e(Nd,ohr),e(Nd,jFe),e(jFe,rhr),e(Nd,thr),e(Nd,sU),e(sU,ahr),e(Nd,nhr),e(Ct,shr),M(uE,Ct,null),e(Wo,lhr),e(Wo,mo),M(R9,mo,null),e(mo,ihr),e(mo,DFe),e(DFe,dhr),e(mo,chr),e(mo,Za),e(Za,mhr),e(Za,GFe),e(GFe,fhr),e(Za,ghr),e(Za,OFe),e(OFe,hhr),e(Za,uhr),e(Za,VFe),e(VFe,phr),e(Za,_hr),e(mo,bhr),e(mo,XFe),e(XFe,pE),e(pE,zFe),e(zFe,vhr),e(pE,Fhr),e(pE,lU),e(lU,Thr),e(pE,Mhr),e(mo,Ehr),e(mo,_E),e(_E,Chr),e(_E,WFe),e(WFe,whr),e(_E,Ahr),e(_E,QFe),e(QFe,Lhr),e(mo,yhr),M(bE,mo,null),b(m,MQe,_),b(m,qd,_),e(qd,vE),e(vE,HFe),M(P9,HFe,null),e(qd,xhr),e(qd,UFe),e(UFe,$hr),b(m,EQe,_),b(m,Qo,_),M(B9,Qo,null),e(Qo,khr),e(Qo,jd),e(jd,Shr),e(jd,iU),e(iU,Rhr),e(jd,Phr),e(jd,dU),e(dU,Bhr),e(jd,Ihr),e(Qo,Nhr),e(Qo,I9),e(I9,qhr),e(I9,JFe),e(JFe,jhr),e(I9,Dhr),e(Qo,Ghr),e(Qo,wt),M(N9,wt,null),e(wt,Ohr),e(wt,YFe),e(YFe,Vhr),e(wt,Xhr),e(wt,Dd),e(Dd,zhr),e(Dd,KFe),e(KFe,Whr),e(Dd,Qhr),e(Dd,cU),e(cU,Hhr),e(Dd,Uhr),e(wt,Jhr),M(FE,wt,null),e(Qo,Yhr),e(Qo,fo),M(q9,fo,null),e(fo,Khr),e(fo,ZFe),e(ZFe,Zhr),e(fo,eur),e(fo,en),e(en,our),e(en,eTe),e(eTe,rur),e(en,tur),e(en,oTe),e(oTe,aur),e(en,nur),e(en,rTe),e(rTe,sur),e(en,lur),e(fo,iur),e(fo,tTe),e(tTe,TE),e(TE,aTe),e(aTe,dur),e(TE,cur),e(TE,mU),e(mU,mur),e(TE,fur),e(fo,gur),e(fo,ME),e(ME,hur),e(ME,nTe),e(nTe,uur),e(ME,pur),e(ME,sTe),e(sTe,_ur),e(fo,bur),M(EE,fo,null),b(m,CQe,_),b(m,Gd,_),e(Gd,CE),e(CE,lTe),M(j9,lTe,null),e(Gd,vur),e(Gd,iTe),e(iTe,Fur),b(m,wQe,_),b(m,Ho,_),M(D9,Ho,null),e(Ho,Tur),e(Ho,Od),e(Od,Mur),e(Od,fU),e(fU,Eur),e(Od,Cur),e(Od,gU),e(gU,wur),e(Od,Aur),e(Ho,Lur),e(Ho,G9),e(G9,yur),e(G9,dTe),e(dTe,xur),e(G9,$ur),e(Ho,kur),e(Ho,At),M(O9,At,null),e(At,Sur),e(At,cTe),e(cTe,Rur),e(At,Pur),e(At,Vd),e(Vd,Bur),e(Vd,mTe),e(mTe,Iur),e(Vd,Nur),e(Vd,hU),e(hU,qur),e(Vd,jur),e(At,Dur),M(wE,At,null),e(Ho,Gur),e(Ho,go),M(V9,go,null),e(go,Our),e(go,fTe),e(fTe,Vur),e(go,Xur),e(go,on),e(on,zur),e(on,gTe),e(gTe,Wur),e(on,Qur),e(on,hTe),e(hTe,Hur),e(on,Uur),e(on,uTe),e(uTe,Jur),e(on,Yur),e(go,Kur),e(go,Pe),e(Pe,AE),e(AE,pTe),e(pTe,Zur),e(AE,epr),e(AE,uU),e(uU,opr),e(AE,rpr),e(Pe,tpr),e(Pe,LE),e(LE,_Te),e(_Te,apr),e(LE,npr),e(LE,pU),e(pU,spr),e(LE,lpr),e(Pe,ipr),e(Pe,yE),e(yE,bTe),e(bTe,dpr),e(yE,cpr),e(yE,_U),e(_U,mpr),e(yE,fpr),e(Pe,gpr),e(Pe,xE),e(xE,vTe),e(vTe,hpr),e(xE,upr),e(xE,bU),e(bU,ppr),e(xE,_pr),e(Pe,bpr),e(Pe,$E),e($E,FTe),e(FTe,vpr),e($E,Fpr),e($E,vU),e(vU,Tpr),e($E,Mpr),e(Pe,Epr),e(Pe,kE),e(kE,TTe),e(TTe,Cpr),e(kE,wpr),e(kE,FU),e(FU,Apr),e(kE,Lpr),e(Pe,ypr),e(Pe,SE),e(SE,MTe),e(MTe,xpr),e(SE,$pr),e(SE,TU),e(TU,kpr),e(SE,Spr),e(Pe,Rpr),e(Pe,RE),e(RE,ETe),e(ETe,Ppr),e(RE,Bpr),e(RE,MU),e(MU,Ipr),e(RE,Npr),e(Pe,qpr),e(Pe,PE),e(PE,CTe),e(CTe,jpr),e(PE,Dpr),e(PE,EU),e(EU,Gpr),e(PE,Opr),e(go,Vpr),e(go,BE),e(BE,Xpr),e(BE,wTe),e(wTe,zpr),e(BE,Wpr),e(BE,ATe),e(ATe,Qpr),e(go,Hpr),M(IE,go,null),b(m,AQe,_),b(m,Xd,_),e(Xd,NE),e(NE,LTe),M(X9,LTe,null),e(Xd,Upr),e(Xd,yTe),e(yTe,Jpr),b(m,LQe,_),b(m,Uo,_),M(z9,Uo,null),e(Uo,Ypr),e(Uo,zd),e(zd,Kpr),e(zd,CU),e(CU,Zpr),e(zd,e_r),e(zd,wU),e(wU,o_r),e(zd,r_r),e(Uo,t_r),e(Uo,W9),e(W9,a_r),e(W9,xTe),e(xTe,n_r),e(W9,s_r),e(Uo,l_r),e(Uo,Lt),M(Q9,Lt,null),e(Lt,i_r),e(Lt,$Te),e($Te,d_r),e(Lt,c_r),e(Lt,Wd),e(Wd,m_r),e(Wd,kTe),e(kTe,f_r),e(Wd,g_r),e(Wd,AU),e(AU,h_r),e(Wd,u_r),e(Lt,p_r),M(qE,Lt,null),e(Uo,__r),e(Uo,ho),M(H9,ho,null),e(ho,b_r),e(ho,STe),e(STe,v_r),e(ho,F_r),e(ho,rn),e(rn,T_r),e(rn,RTe),e(RTe,M_r),e(rn,E_r),e(rn,PTe),e(PTe,C_r),e(rn,w_r),e(rn,BTe),e(BTe,A_r),e(rn,L_r),e(ho,y_r),e(ho,at),e(at,jE),e(jE,ITe),e(ITe,x_r),e(jE,$_r),e(jE,LU),e(LU,k_r),e(jE,S_r),e(at,R_r),e(at,DE),e(DE,NTe),e(NTe,P_r),e(DE,B_r),e(DE,yU),e(yU,I_r),e(DE,N_r),e(at,q_r),e(at,GE),e(GE,qTe),e(qTe,j_r),e(GE,D_r),e(GE,xU),e(xU,G_r),e(GE,O_r),e(at,V_r),e(at,OE),e(OE,jTe),e(jTe,X_r),e(OE,z_r),e(OE,$U),e($U,W_r),e(OE,Q_r),e(at,H_r),e(at,VE),e(VE,DTe),e(DTe,U_r),e(VE,J_r),e(VE,kU),e(kU,Y_r),e(VE,K_r),e(ho,Z_r),e(ho,XE),e(XE,e2r),e(XE,GTe),e(GTe,o2r),e(XE,r2r),e(XE,OTe),e(OTe,t2r),e(ho,a2r),M(zE,ho,null),b(m,yQe,_),b(m,Qd,_),e(Qd,WE),e(WE,VTe),M(U9,VTe,null),e(Qd,n2r),e(Qd,XTe),e(XTe,s2r),b(m,xQe,_),b(m,Jo,_),M(J9,Jo,null),e(Jo,l2r),e(Jo,Hd),e(Hd,i2r),e(Hd,SU),e(SU,d2r),e(Hd,c2r),e(Hd,RU),e(RU,m2r),e(Hd,f2r),e(Jo,g2r),e(Jo,Y9),e(Y9,h2r),e(Y9,zTe),e(zTe,u2r),e(Y9,p2r),e(Jo,_2r),e(Jo,yt),M(K9,yt,null),e(yt,b2r),e(yt,WTe),e(WTe,v2r),e(yt,F2r),e(yt,Ud),e(Ud,T2r),e(Ud,QTe),e(QTe,M2r),e(Ud,E2r),e(Ud,PU),e(PU,C2r),e(Ud,w2r),e(yt,A2r),M(QE,yt,null),e(Jo,L2r),e(Jo,uo),M(Z9,uo,null),e(uo,y2r),e(uo,HTe),e(HTe,x2r),e(uo,$2r),e(uo,tn),e(tn,k2r),e(tn,UTe),e(UTe,S2r),e(tn,R2r),e(tn,JTe),e(JTe,P2r),e(tn,B2r),e(tn,YTe),e(YTe,I2r),e(tn,N2r),e(uo,q2r),e(uo,Le),e(Le,HE),e(HE,KTe),e(KTe,j2r),e(HE,D2r),e(HE,BU),e(BU,G2r),e(HE,O2r),e(Le,V2r),e(Le,UE),e(UE,ZTe),e(ZTe,X2r),e(UE,z2r),e(UE,IU),e(IU,W2r),e(UE,Q2r),e(Le,H2r),e(Le,JE),e(JE,eMe),e(eMe,U2r),e(JE,J2r),e(JE,NU),e(NU,Y2r),e(JE,K2r),e(Le,Z2r),e(Le,YE),e(YE,oMe),e(oMe,ebr),e(YE,obr),e(YE,qU),e(qU,rbr),e(YE,tbr),e(Le,abr),e(Le,KE),e(KE,rMe),e(rMe,nbr),e(KE,sbr),e(KE,jU),e(jU,lbr),e(KE,ibr),e(Le,dbr),e(Le,ZE),e(ZE,tMe),e(tMe,cbr),e(ZE,mbr),e(ZE,DU),e(DU,fbr),e(ZE,gbr),e(Le,hbr),e(Le,e4),e(e4,aMe),e(aMe,ubr),e(e4,pbr),e(e4,GU),e(GU,_br),e(e4,bbr),e(Le,vbr),e(Le,o4),e(o4,nMe),e(nMe,Fbr),e(o4,Tbr),e(o4,OU),e(OU,Mbr),e(o4,Ebr),e(Le,Cbr),e(Le,r4),e(r4,sMe),e(sMe,wbr),e(r4,Abr),e(r4,VU),e(VU,Lbr),e(r4,ybr),e(Le,xbr),e(Le,t4),e(t4,lMe),e(lMe,$br),e(t4,kbr),e(t4,XU),e(XU,Sbr),e(t4,Rbr),e(uo,Pbr),e(uo,a4),e(a4,Bbr),e(a4,iMe),e(iMe,Ibr),e(a4,Nbr),e(a4,dMe),e(dMe,qbr),e(uo,jbr),M(n4,uo,null),b(m,$Qe,_),b(m,Jd,_),e(Jd,s4),e(s4,cMe),M(ex,cMe,null),e(Jd,Dbr),e(Jd,mMe),e(mMe,Gbr),b(m,kQe,_),b(m,Yo,_),M(ox,Yo,null),e(Yo,Obr),e(Yo,Yd),e(Yd,Vbr),e(Yd,zU),e(zU,Xbr),e(Yd,zbr),e(Yd,WU),e(WU,Wbr),e(Yd,Qbr),e(Yo,Hbr),e(Yo,rx),e(rx,Ubr),e(rx,fMe),e(fMe,Jbr),e(rx,Ybr),e(Yo,Kbr),e(Yo,xt),M(tx,xt,null),e(xt,Zbr),e(xt,gMe),e(gMe,evr),e(xt,ovr),e(xt,Kd),e(Kd,rvr),e(Kd,hMe),e(hMe,tvr),e(Kd,avr),e(Kd,QU),e(QU,nvr),e(Kd,svr),e(xt,lvr),M(l4,xt,null),e(Yo,ivr),e(Yo,po),M(ax,po,null),e(po,dvr),e(po,uMe),e(uMe,cvr),e(po,mvr),e(po,an),e(an,fvr),e(an,pMe),e(pMe,gvr),e(an,hvr),e(an,_Me),e(_Me,uvr),e(an,pvr),e(an,bMe),e(bMe,_vr),e(an,bvr),e(po,vvr),e(po,nx),e(nx,i4),e(i4,vMe),e(vMe,Fvr),e(i4,Tvr),e(i4,HU),e(HU,Mvr),e(i4,Evr),e(nx,Cvr),e(nx,d4),e(d4,FMe),e(FMe,wvr),e(d4,Avr),e(d4,UU),e(UU,Lvr),e(d4,yvr),e(po,xvr),e(po,c4),e(c4,$vr),e(c4,TMe),e(TMe,kvr),e(c4,Svr),e(c4,MMe),e(MMe,Rvr),e(po,Pvr),M(m4,po,null),b(m,SQe,_),b(m,Zd,_),e(Zd,f4),e(f4,EMe),M(sx,EMe,null),e(Zd,Bvr),e(Zd,CMe),e(CMe,Ivr),b(m,RQe,_),b(m,Ko,_),M(lx,Ko,null),e(Ko,Nvr),e(Ko,ec),e(ec,qvr),e(ec,JU),e(JU,jvr),e(ec,Dvr),e(ec,YU),e(YU,Gvr),e(ec,Ovr),e(Ko,Vvr),e(Ko,ix),e(ix,Xvr),e(ix,wMe),e(wMe,zvr),e(ix,Wvr),e(Ko,Qvr),e(Ko,$t),M(dx,$t,null),e($t,Hvr),e($t,AMe),e(AMe,Uvr),e($t,Jvr),e($t,oc),e(oc,Yvr),e(oc,LMe),e(LMe,Kvr),e(oc,Zvr),e(oc,KU),e(KU,e1r),e(oc,o1r),e($t,r1r),M(g4,$t,null),e(Ko,t1r),e(Ko,_o),M(cx,_o,null),e(_o,a1r),e(_o,yMe),e(yMe,n1r),e(_o,s1r),e(_o,nn),e(nn,l1r),e(nn,xMe),e(xMe,i1r),e(nn,d1r),e(nn,$Me),e($Me,c1r),e(nn,m1r),e(nn,kMe),e(kMe,f1r),e(nn,g1r),e(_o,h1r),e(_o,nt),e(nt,h4),e(h4,SMe),e(SMe,u1r),e(h4,p1r),e(h4,ZU),e(ZU,_1r),e(h4,b1r),e(nt,v1r),e(nt,u4),e(u4,RMe),e(RMe,F1r),e(u4,T1r),e(u4,eJ),e(eJ,M1r),e(u4,E1r),e(nt,C1r),e(nt,p4),e(p4,PMe),e(PMe,w1r),e(p4,A1r),e(p4,oJ),e(oJ,L1r),e(p4,y1r),e(nt,x1r),e(nt,_4),e(_4,BMe),e(BMe,$1r),e(_4,k1r),e(_4,rJ),e(rJ,S1r),e(_4,R1r),e(nt,P1r),e(nt,b4),e(b4,IMe),e(IMe,B1r),e(b4,I1r),e(b4,tJ),e(tJ,N1r),e(b4,q1r),e(_o,j1r),e(_o,v4),e(v4,D1r),e(v4,NMe),e(NMe,G1r),e(v4,O1r),e(v4,qMe),e(qMe,V1r),e(_o,X1r),M(F4,_o,null),b(m,PQe,_),b(m,rc,_),e(rc,T4),e(T4,jMe),M(mx,jMe,null),e(rc,z1r),e(rc,DMe),e(DMe,W1r),b(m,BQe,_),b(m,Zo,_),M(fx,Zo,null),e(Zo,Q1r),e(Zo,tc),e(tc,H1r),e(tc,aJ),e(aJ,U1r),e(tc,J1r),e(tc,nJ),e(nJ,Y1r),e(tc,K1r),e(Zo,Z1r),e(Zo,gx),e(gx,eFr),e(gx,GMe),e(GMe,oFr),e(gx,rFr),e(Zo,tFr),e(Zo,kt),M(hx,kt,null),e(kt,aFr),e(kt,OMe),e(OMe,nFr),e(kt,sFr),e(kt,ac),e(ac,lFr),e(ac,VMe),e(VMe,iFr),e(ac,dFr),e(ac,sJ),e(sJ,cFr),e(ac,mFr),e(kt,fFr),M(M4,kt,null),e(Zo,gFr),e(Zo,bo),M(ux,bo,null),e(bo,hFr),e(bo,XMe),e(XMe,uFr),e(bo,pFr),e(bo,sn),e(sn,_Fr),e(sn,zMe),e(zMe,bFr),e(sn,vFr),e(sn,WMe),e(WMe,FFr),e(sn,TFr),e(sn,QMe),e(QMe,MFr),e(sn,EFr),e(bo,CFr),e(bo,ln),e(ln,E4),e(E4,HMe),e(HMe,wFr),e(E4,AFr),e(E4,lJ),e(lJ,LFr),e(E4,yFr),e(ln,xFr),e(ln,C4),e(C4,UMe),e(UMe,$Fr),e(C4,kFr),e(C4,iJ),e(iJ,SFr),e(C4,RFr),e(ln,PFr),e(ln,w4),e(w4,JMe),e(JMe,BFr),e(w4,IFr),e(w4,dJ),e(dJ,NFr),e(w4,qFr),e(ln,jFr),e(ln,A4),e(A4,YMe),e(YMe,DFr),e(A4,GFr),e(A4,cJ),e(cJ,OFr),e(A4,VFr),e(bo,XFr),e(bo,L4),e(L4,zFr),e(L4,KMe),e(KMe,WFr),e(L4,QFr),e(L4,ZMe),e(ZMe,HFr),e(bo,UFr),M(y4,bo,null),b(m,IQe,_),b(m,nc,_),e(nc,x4),e(x4,eEe),M(px,eEe,null),e(nc,JFr),e(nc,oEe),e(oEe,YFr),b(m,NQe,_),b(m,er,_),M(_x,er,null),e(er,KFr),e(er,sc),e(sc,ZFr),e(sc,mJ),e(mJ,eTr),e(sc,oTr),e(sc,fJ),e(fJ,rTr),e(sc,tTr),e(er,aTr),e(er,bx),e(bx,nTr),e(bx,rEe),e(rEe,sTr),e(bx,lTr),e(er,iTr),e(er,St),M(vx,St,null),e(St,dTr),e(St,tEe),e(tEe,cTr),e(St,mTr),e(St,lc),e(lc,fTr),e(lc,aEe),e(aEe,gTr),e(lc,hTr),e(lc,gJ),e(gJ,uTr),e(lc,pTr),e(St,_Tr),M($4,St,null),e(er,bTr),e(er,vo),M(Fx,vo,null),e(vo,vTr),e(vo,nEe),e(nEe,FTr),e(vo,TTr),e(vo,dn),e(dn,MTr),e(dn,sEe),e(sEe,ETr),e(dn,CTr),e(dn,lEe),e(lEe,wTr),e(dn,ATr),e(dn,iEe),e(iEe,LTr),e(dn,yTr),e(vo,xTr),e(vo,Tx),e(Tx,k4),e(k4,dEe),e(dEe,$Tr),e(k4,kTr),e(k4,hJ),e(hJ,STr),e(k4,RTr),e(Tx,PTr),e(Tx,S4),e(S4,cEe),e(cEe,BTr),e(S4,ITr),e(S4,uJ),e(uJ,NTr),e(S4,qTr),e(vo,jTr),e(vo,R4),e(R4,DTr),e(R4,mEe),e(mEe,GTr),e(R4,OTr),e(R4,fEe),e(fEe,VTr),e(vo,XTr),M(P4,vo,null),b(m,qQe,_),b(m,ic,_),e(ic,B4),e(B4,gEe),M(Mx,gEe,null),e(ic,zTr),e(ic,hEe),e(hEe,WTr),b(m,jQe,_),b(m,or,_),M(Ex,or,null),e(or,QTr),e(or,dc),e(dc,HTr),e(dc,pJ),e(pJ,UTr),e(dc,JTr),e(dc,_J),e(_J,YTr),e(dc,KTr),e(or,ZTr),e(or,Cx),e(Cx,eMr),e(Cx,uEe),e(uEe,oMr),e(Cx,rMr),e(or,tMr),e(or,Rt),M(wx,Rt,null),e(Rt,aMr),e(Rt,pEe),e(pEe,nMr),e(Rt,sMr),e(Rt,cc),e(cc,lMr),e(cc,_Ee),e(_Ee,iMr),e(cc,dMr),e(cc,bJ),e(bJ,cMr),e(cc,mMr),e(Rt,fMr),M(I4,Rt,null),e(or,gMr),e(or,Fo),M(Ax,Fo,null),e(Fo,hMr),e(Fo,bEe),e(bEe,uMr),e(Fo,pMr),e(Fo,cn),e(cn,_Mr),e(cn,vEe),e(vEe,bMr),e(cn,vMr),e(cn,FEe),e(FEe,FMr),e(cn,TMr),e(cn,TEe),e(TEe,MMr),e(cn,EMr),e(Fo,CMr),e(Fo,MEe),e(MEe,N4),e(N4,EEe),e(EEe,wMr),e(N4,AMr),e(N4,vJ),e(vJ,LMr),e(N4,yMr),e(Fo,xMr),e(Fo,q4),e(q4,$Mr),e(q4,CEe),e(CEe,kMr),e(q4,SMr),e(q4,wEe),e(wEe,RMr),e(Fo,PMr),M(j4,Fo,null),b(m,DQe,_),b(m,mc,_),e(mc,D4),e(D4,AEe),M(Lx,AEe,null),e(mc,BMr),e(mc,LEe),e(LEe,IMr),b(m,GQe,_),b(m,rr,_),M(yx,rr,null),e(rr,NMr),e(rr,fc),e(fc,qMr),e(fc,FJ),e(FJ,jMr),e(fc,DMr),e(fc,TJ),e(TJ,GMr),e(fc,OMr),e(rr,VMr),e(rr,xx),e(xx,XMr),e(xx,yEe),e(yEe,zMr),e(xx,WMr),e(rr,QMr),e(rr,Pt),M($x,Pt,null),e(Pt,HMr),e(Pt,xEe),e(xEe,UMr),e(Pt,JMr),e(Pt,gc),e(gc,YMr),e(gc,$Ee),e($Ee,KMr),e(gc,ZMr),e(gc,MJ),e(MJ,eEr),e(gc,oEr),e(Pt,rEr),M(G4,Pt,null),e(rr,tEr),e(rr,To),M(kx,To,null),e(To,aEr),e(To,kEe),e(kEe,nEr),e(To,sEr),e(To,mn),e(mn,lEr),e(mn,SEe),e(SEe,iEr),e(mn,dEr),e(mn,REe),e(REe,cEr),e(mn,mEr),e(mn,PEe),e(PEe,fEr),e(mn,gEr),e(To,hEr),e(To,st),e(st,O4),e(O4,BEe),e(BEe,uEr),e(O4,pEr),e(O4,EJ),e(EJ,_Er),e(O4,bEr),e(st,vEr),e(st,V4),e(V4,IEe),e(IEe,FEr),e(V4,TEr),e(V4,CJ),e(CJ,MEr),e(V4,EEr),e(st,CEr),e(st,X4),e(X4,NEe),e(NEe,wEr),e(X4,AEr),e(X4,wJ),e(wJ,LEr),e(X4,yEr),e(st,xEr),e(st,z4),e(z4,qEe),e(qEe,$Er),e(z4,kEr),e(z4,AJ),e(AJ,SEr),e(z4,REr),e(st,PEr),e(st,W4),e(W4,jEe),e(jEe,BEr),e(W4,IEr),e(W4,LJ),e(LJ,NEr),e(W4,qEr),e(To,jEr),e(To,Q4),e(Q4,DEr),e(Q4,DEe),e(DEe,GEr),e(Q4,OEr),e(Q4,GEe),e(GEe,VEr),e(To,XEr),M(H4,To,null),b(m,OQe,_),b(m,hc,_),e(hc,U4),e(U4,OEe),M(Sx,OEe,null),e(hc,zEr),e(hc,VEe),e(VEe,WEr),b(m,VQe,_),b(m,tr,_),M(Rx,tr,null),e(tr,QEr),e(tr,uc),e(uc,HEr),e(uc,yJ),e(yJ,UEr),e(uc,JEr),e(uc,xJ),e(xJ,YEr),e(uc,KEr),e(tr,ZEr),e(tr,Px),e(Px,e4r),e(Px,XEe),e(XEe,o4r),e(Px,r4r),e(tr,t4r),e(tr,Bt),M(Bx,Bt,null),e(Bt,a4r),e(Bt,zEe),e(zEe,n4r),e(Bt,s4r),e(Bt,pc),e(pc,l4r),e(pc,WEe),e(WEe,i4r),e(pc,d4r),e(pc,$J),e($J,c4r),e(pc,m4r),e(Bt,f4r),M(J4,Bt,null),e(tr,g4r),e(tr,Mo),M(Ix,Mo,null),e(Mo,h4r),e(Mo,QEe),e(QEe,u4r),e(Mo,p4r),e(Mo,fn),e(fn,_4r),e(fn,HEe),e(HEe,b4r),e(fn,v4r),e(fn,UEe),e(UEe,F4r),e(fn,T4r),e(fn,JEe),e(JEe,M4r),e(fn,E4r),e(Mo,C4r),e(Mo,YEe),e(YEe,Y4),e(Y4,KEe),e(KEe,w4r),e(Y4,A4r),e(Y4,kJ),e(kJ,L4r),e(Y4,y4r),e(Mo,x4r),e(Mo,K4),e(K4,$4r),e(K4,ZEe),e(ZEe,k4r),e(K4,S4r),e(K4,e4e),e(e4e,R4r),e(Mo,P4r),M(Z4,Mo,null),b(m,XQe,_),b(m,_c,_),e(_c,eC),e(eC,o4e),M(Nx,o4e,null),e(_c,B4r),e(_c,r4e),e(r4e,I4r),b(m,zQe,_),b(m,ar,_),M(qx,ar,null),e(ar,N4r),e(ar,bc),e(bc,q4r),e(bc,SJ),e(SJ,j4r),e(bc,D4r),e(bc,RJ),e(RJ,G4r),e(bc,O4r),e(ar,V4r),e(ar,jx),e(jx,X4r),e(jx,t4e),e(t4e,z4r),e(jx,W4r),e(ar,Q4r),e(ar,It),M(Dx,It,null),e(It,H4r),e(It,a4e),e(a4e,U4r),e(It,J4r),e(It,vc),e(vc,Y4r),e(vc,n4e),e(n4e,K4r),e(vc,Z4r),e(vc,PJ),e(PJ,eCr),e(vc,oCr),e(It,rCr),M(oC,It,null),e(ar,tCr),e(ar,Sr),M(Gx,Sr,null),e(Sr,aCr),e(Sr,s4e),e(s4e,nCr),e(Sr,sCr),e(Sr,gn),e(gn,lCr),e(gn,l4e),e(l4e,iCr),e(gn,dCr),e(gn,i4e),e(i4e,cCr),e(gn,mCr),e(gn,d4e),e(d4e,fCr),e(gn,gCr),e(Sr,hCr),e(Sr,q),e(q,rC),e(rC,c4e),e(c4e,uCr),e(rC,pCr),e(rC,BJ),e(BJ,_Cr),e(rC,bCr),e(q,vCr),e(q,tC),e(tC,m4e),e(m4e,FCr),e(tC,TCr),e(tC,IJ),e(IJ,MCr),e(tC,ECr),e(q,CCr),e(q,aC),e(aC,f4e),e(f4e,wCr),e(aC,ACr),e(aC,NJ),e(NJ,LCr),e(aC,yCr),e(q,xCr),e(q,nC),e(nC,g4e),e(g4e,$Cr),e(nC,kCr),e(nC,qJ),e(qJ,SCr),e(nC,RCr),e(q,PCr),e(q,sC),e(sC,h4e),e(h4e,BCr),e(sC,ICr),e(sC,jJ),e(jJ,NCr),e(sC,qCr),e(q,jCr),e(q,lC),e(lC,u4e),e(u4e,DCr),e(lC,GCr),e(lC,DJ),e(DJ,OCr),e(lC,VCr),e(q,XCr),e(q,iC),e(iC,p4e),e(p4e,zCr),e(iC,WCr),e(iC,GJ),e(GJ,QCr),e(iC,HCr),e(q,UCr),e(q,dC),e(dC,_4e),e(_4e,JCr),e(dC,YCr),e(dC,OJ),e(OJ,KCr),e(dC,ZCr),e(q,e5r),e(q,cC),e(cC,b4e),e(b4e,o5r),e(cC,r5r),e(cC,VJ),e(VJ,t5r),e(cC,a5r),e(q,n5r),e(q,mC),e(mC,v4e),e(v4e,s5r),e(mC,l5r),e(mC,XJ),e(XJ,i5r),e(mC,d5r),e(q,c5r),e(q,fC),e(fC,F4e),e(F4e,m5r),e(fC,f5r),e(fC,zJ),e(zJ,g5r),e(fC,h5r),e(q,u5r),e(q,gC),e(gC,T4e),e(T4e,p5r),e(gC,_5r),e(gC,WJ),e(WJ,b5r),e(gC,v5r),e(q,F5r),e(q,hC),e(hC,M4e),e(M4e,T5r),e(hC,M5r),e(hC,QJ),e(QJ,E5r),e(hC,C5r),e(q,w5r),e(q,uC),e(uC,E4e),e(E4e,A5r),e(uC,L5r),e(uC,HJ),e(HJ,y5r),e(uC,x5r),e(q,$5r),e(q,pC),e(pC,C4e),e(C4e,k5r),e(pC,S5r),e(pC,UJ),e(UJ,R5r),e(pC,P5r),e(q,B5r),e(q,_C),e(_C,w4e),e(w4e,I5r),e(_C,N5r),e(_C,JJ),e(JJ,q5r),e(_C,j5r),e(q,D5r),e(q,bC),e(bC,A4e),e(A4e,G5r),e(bC,O5r),e(bC,YJ),e(YJ,V5r),e(bC,X5r),e(q,z5r),e(q,vC),e(vC,L4e),e(L4e,W5r),e(vC,Q5r),e(vC,KJ),e(KJ,H5r),e(vC,U5r),e(q,J5r),e(q,al),e(al,y4e),e(y4e,Y5r),e(al,K5r),e(al,ZJ),e(ZJ,Z5r),e(al,e3r),e(al,eY),e(eY,o3r),e(al,r3r),e(q,t3r),e(q,FC),e(FC,x4e),e(x4e,a3r),e(FC,n3r),e(FC,oY),e(oY,s3r),e(FC,l3r),e(q,i3r),e(q,TC),e(TC,$4e),e($4e,d3r),e(TC,c3r),e(TC,rY),e(rY,m3r),e(TC,f3r),e(q,g3r),e(q,MC),e(MC,k4e),e(k4e,h3r),e(MC,u3r),e(MC,tY),e(tY,p3r),e(MC,_3r),e(q,b3r),e(q,EC),e(EC,S4e),e(S4e,v3r),e(EC,F3r),e(EC,aY),e(aY,T3r),e(EC,M3r),e(q,E3r),e(q,CC),e(CC,R4e),e(R4e,C3r),e(CC,w3r),e(CC,nY),e(nY,A3r),e(CC,L3r),e(q,y3r),e(q,wC),e(wC,P4e),e(P4e,x3r),e(wC,$3r),e(wC,sY),e(sY,k3r),e(wC,S3r),e(q,R3r),e(q,AC),e(AC,B4e),e(B4e,P3r),e(AC,B3r),e(AC,lY),e(lY,I3r),e(AC,N3r),e(q,q3r),e(q,LC),e(LC,I4e),e(I4e,j3r),e(LC,D3r),e(LC,iY),e(iY,G3r),e(LC,O3r),e(q,V3r),e(q,yC),e(yC,N4e),e(N4e,X3r),e(yC,z3r),e(yC,dY),e(dY,W3r),e(yC,Q3r),e(q,H3r),e(q,xC),e(xC,q4e),e(q4e,U3r),e(xC,J3r),e(xC,cY),e(cY,Y3r),e(xC,K3r),e(q,Z3r),e(q,$C),e($C,j4e),e(j4e,e0r),e($C,o0r),e($C,mY),e(mY,r0r),e($C,t0r),e(q,a0r),e(q,kC),e(kC,D4e),e(D4e,n0r),e(kC,s0r),e(kC,fY),e(fY,l0r),e(kC,i0r),e(q,d0r),e(q,SC),e(SC,G4e),e(G4e,c0r),e(SC,m0r),e(SC,gY),e(gY,f0r),e(SC,g0r),e(q,h0r),e(q,RC),e(RC,O4e),e(O4e,u0r),e(RC,p0r),e(RC,hY),e(hY,_0r),e(RC,b0r),e(q,v0r),e(q,PC),e(PC,V4e),e(V4e,F0r),e(PC,T0r),e(PC,uY),e(uY,M0r),e(PC,E0r),e(q,C0r),e(q,BC),e(BC,X4e),e(X4e,w0r),e(BC,A0r),e(BC,pY),e(pY,L0r),e(BC,y0r),e(q,x0r),e(q,IC),e(IC,z4e),e(z4e,$0r),e(IC,k0r),e(IC,_Y),e(_Y,S0r),e(IC,R0r),e(q,P0r),e(q,NC),e(NC,W4e),e(W4e,B0r),e(NC,I0r),e(NC,bY),e(bY,N0r),e(NC,q0r),e(q,j0r),e(q,qC),e(qC,Q4e),e(Q4e,D0r),e(qC,G0r),e(qC,vY),e(vY,O0r),e(qC,V0r),e(q,X0r),e(q,jC),e(jC,H4e),e(H4e,z0r),e(jC,W0r),e(jC,FY),e(FY,Q0r),e(jC,H0r),e(q,U0r),e(q,DC),e(DC,U4e),e(U4e,J0r),e(DC,Y0r),e(DC,TY),e(TY,K0r),e(DC,Z0r),e(q,ewr),e(q,GC),e(GC,J4e),e(J4e,owr),e(GC,rwr),e(GC,MY),e(MY,twr),e(GC,awr),e(q,nwr),e(q,OC),e(OC,Y4e),e(Y4e,swr),e(OC,lwr),e(OC,EY),e(EY,iwr),e(OC,dwr),e(q,cwr),e(q,VC),e(VC,K4e),e(K4e,mwr),e(VC,fwr),e(VC,CY),e(CY,gwr),e(VC,hwr),e(q,uwr),e(q,XC),e(XC,Z4e),e(Z4e,pwr),e(XC,_wr),e(XC,wY),e(wY,bwr),e(XC,vwr),e(q,Fwr),e(q,zC),e(zC,eCe),e(eCe,Twr),e(zC,Mwr),e(zC,AY),e(AY,Ewr),e(zC,Cwr),e(q,wwr),e(q,WC),e(WC,oCe),e(oCe,Awr),e(WC,Lwr),e(WC,LY),e(LY,ywr),e(WC,xwr),e(q,$wr),e(q,QC),e(QC,rCe),e(rCe,kwr),e(QC,Swr),e(QC,yY),e(yY,Rwr),e(QC,Pwr),e(q,Bwr),e(q,HC),e(HC,tCe),e(tCe,Iwr),e(HC,Nwr),e(HC,xY),e(xY,qwr),e(HC,jwr),e(q,Dwr),e(q,UC),e(UC,aCe),e(aCe,Gwr),e(UC,Owr),e(UC,$Y),e($Y,Vwr),e(UC,Xwr),e(q,zwr),e(q,JC),e(JC,nCe),e(nCe,Wwr),e(JC,Qwr),e(JC,kY),e(kY,Hwr),e(JC,Uwr),e(q,Jwr),e(q,YC),e(YC,sCe),e(sCe,Ywr),e(YC,Kwr),e(YC,SY),e(SY,Zwr),e(YC,e6r),e(Sr,o6r),M(KC,Sr,null),b(m,WQe,_),b(m,Fc,_),e(Fc,ZC),e(ZC,lCe),M(Ox,lCe,null),e(Fc,r6r),e(Fc,iCe),e(iCe,t6r),b(m,QQe,_),b(m,nr,_),M(Vx,nr,null),e(nr,a6r),e(nr,Tc),e(Tc,n6r),e(Tc,RY),e(RY,s6r),e(Tc,l6r),e(Tc,PY),e(PY,i6r),e(Tc,d6r),e(nr,c6r),e(nr,Xx),e(Xx,m6r),e(Xx,dCe),e(dCe,f6r),e(Xx,g6r),e(nr,h6r),e(nr,Nt),M(zx,Nt,null),e(Nt,u6r),e(Nt,cCe),e(cCe,p6r),e(Nt,_6r),e(Nt,Mc),e(Mc,b6r),e(Mc,mCe),e(mCe,v6r),e(Mc,F6r),e(Mc,BY),e(BY,T6r),e(Mc,M6r),e(Nt,E6r),M(e5,Nt,null),e(nr,C6r),e(nr,Rr),M(Wx,Rr,null),e(Rr,w6r),e(Rr,fCe),e(fCe,A6r),e(Rr,L6r),e(Rr,hn),e(hn,y6r),e(hn,gCe),e(gCe,x6r),e(hn,$6r),e(hn,hCe),e(hCe,k6r),e(hn,S6r),e(hn,uCe),e(uCe,R6r),e(hn,P6r),e(Rr,B6r),e(Rr,se),e(se,o5),e(o5,pCe),e(pCe,I6r),e(o5,N6r),e(o5,IY),e(IY,q6r),e(o5,j6r),e(se,D6r),e(se,r5),e(r5,_Ce),e(_Ce,G6r),e(r5,O6r),e(r5,NY),e(NY,V6r),e(r5,X6r),e(se,z6r),e(se,t5),e(t5,bCe),e(bCe,W6r),e(t5,Q6r),e(t5,qY),e(qY,H6r),e(t5,U6r),e(se,J6r),e(se,a5),e(a5,vCe),e(vCe,Y6r),e(a5,K6r),e(a5,jY),e(jY,Z6r),e(a5,eAr),e(se,oAr),e(se,n5),e(n5,FCe),e(FCe,rAr),e(n5,tAr),e(n5,DY),e(DY,aAr),e(n5,nAr),e(se,sAr),e(se,s5),e(s5,TCe),e(TCe,lAr),e(s5,iAr),e(s5,GY),e(GY,dAr),e(s5,cAr),e(se,mAr),e(se,l5),e(l5,MCe),e(MCe,fAr),e(l5,gAr),e(l5,OY),e(OY,hAr),e(l5,uAr),e(se,pAr),e(se,i5),e(i5,ECe),e(ECe,_Ar),e(i5,bAr),e(i5,VY),e(VY,vAr),e(i5,FAr),e(se,TAr),e(se,d5),e(d5,CCe),e(CCe,MAr),e(d5,EAr),e(d5,XY),e(XY,CAr),e(d5,wAr),e(se,AAr),e(se,c5),e(c5,wCe),e(wCe,LAr),e(c5,yAr),e(c5,zY),e(zY,xAr),e(c5,$Ar),e(se,kAr),e(se,m5),e(m5,ACe),e(ACe,SAr),e(m5,RAr),e(m5,WY),e(WY,PAr),e(m5,BAr),e(se,IAr),e(se,f5),e(f5,LCe),e(LCe,NAr),e(f5,qAr),e(f5,QY),e(QY,jAr),e(f5,DAr),e(se,GAr),e(se,g5),e(g5,yCe),e(yCe,OAr),e(g5,VAr),e(g5,HY),e(HY,XAr),e(g5,zAr),e(se,WAr),e(se,h5),e(h5,xCe),e(xCe,QAr),e(h5,HAr),e(h5,UY),e(UY,UAr),e(h5,JAr),e(se,YAr),e(se,u5),e(u5,$Ce),e($Ce,KAr),e(u5,ZAr),e(u5,JY),e(JY,e7r),e(u5,o7r),e(se,r7r),e(se,p5),e(p5,kCe),e(kCe,t7r),e(p5,a7r),e(p5,YY),e(YY,n7r),e(p5,s7r),e(se,l7r),e(se,_5),e(_5,SCe),e(SCe,i7r),e(_5,d7r),e(_5,KY),e(KY,c7r),e(_5,m7r),e(se,f7r),e(se,b5),e(b5,RCe),e(RCe,g7r),e(b5,h7r),e(b5,ZY),e(ZY,u7r),e(b5,p7r),e(se,_7r),e(se,v5),e(v5,PCe),e(PCe,b7r),e(v5,v7r),e(v5,eK),e(eK,F7r),e(v5,T7r),e(se,M7r),e(se,F5),e(F5,BCe),e(BCe,E7r),e(F5,C7r),e(F5,oK),e(oK,w7r),e(F5,A7r),e(se,L7r),e(se,T5),e(T5,ICe),e(ICe,y7r),e(T5,x7r),e(T5,rK),e(rK,$7r),e(T5,k7r),e(se,S7r),e(se,M5),e(M5,NCe),e(NCe,R7r),e(M5,P7r),e(M5,tK),e(tK,B7r),e(M5,I7r),e(se,N7r),e(se,E5),e(E5,qCe),e(qCe,q7r),e(E5,j7r),e(E5,aK),e(aK,D7r),e(E5,G7r),e(Rr,O7r),M(C5,Rr,null),b(m,HQe,_),b(m,Ec,_),e(Ec,w5),e(w5,jCe),M(Qx,jCe,null),e(Ec,V7r),e(Ec,DCe),e(DCe,X7r),b(m,UQe,_),b(m,sr,_),M(Hx,sr,null),e(sr,z7r),e(sr,Cc),e(Cc,W7r),e(Cc,nK),e(nK,Q7r),e(Cc,H7r),e(Cc,sK),e(sK,U7r),e(Cc,J7r),e(sr,Y7r),e(sr,Ux),e(Ux,K7r),e(Ux,GCe),e(GCe,Z7r),e(Ux,eLr),e(sr,oLr),e(sr,qt),M(Jx,qt,null),e(qt,rLr),e(qt,OCe),e(OCe,tLr),e(qt,aLr),e(qt,wc),e(wc,nLr),e(wc,VCe),e(VCe,sLr),e(wc,lLr),e(wc,lK),e(lK,iLr),e(wc,dLr),e(qt,cLr),M(A5,qt,null),e(sr,mLr),e(sr,Pr),M(Yx,Pr,null),e(Pr,fLr),e(Pr,XCe),e(XCe,gLr),e(Pr,hLr),e(Pr,un),e(un,uLr),e(un,zCe),e(zCe,pLr),e(un,_Lr),e(un,WCe),e(WCe,bLr),e(un,vLr),e(un,QCe),e(QCe,FLr),e(un,TLr),e(Pr,MLr),e(Pr,Me),e(Me,L5),e(L5,HCe),e(HCe,ELr),e(L5,CLr),e(L5,iK),e(iK,wLr),e(L5,ALr),e(Me,LLr),e(Me,y5),e(y5,UCe),e(UCe,yLr),e(y5,xLr),e(y5,dK),e(dK,$Lr),e(y5,kLr),e(Me,SLr),e(Me,x5),e(x5,JCe),e(JCe,RLr),e(x5,PLr),e(x5,cK),e(cK,BLr),e(x5,ILr),e(Me,NLr),e(Me,$5),e($5,YCe),e(YCe,qLr),e($5,jLr),e($5,mK),e(mK,DLr),e($5,GLr),e(Me,OLr),e(Me,k5),e(k5,KCe),e(KCe,VLr),e(k5,XLr),e(k5,fK),e(fK,zLr),e(k5,WLr),e(Me,QLr),e(Me,S5),e(S5,ZCe),e(ZCe,HLr),e(S5,ULr),e(S5,gK),e(gK,JLr),e(S5,YLr),e(Me,KLr),e(Me,R5),e(R5,e5e),e(e5e,ZLr),e(R5,eyr),e(R5,hK),e(hK,oyr),e(R5,ryr),e(Me,tyr),e(Me,P5),e(P5,o5e),e(o5e,ayr),e(P5,nyr),e(P5,uK),e(uK,syr),e(P5,lyr),e(Me,iyr),e(Me,B5),e(B5,r5e),e(r5e,dyr),e(B5,cyr),e(B5,pK),e(pK,myr),e(B5,fyr),e(Me,gyr),e(Me,I5),e(I5,t5e),e(t5e,hyr),e(I5,uyr),e(I5,_K),e(_K,pyr),e(I5,_yr),e(Me,byr),e(Me,N5),e(N5,a5e),e(a5e,vyr),e(N5,Fyr),e(N5,bK),e(bK,Tyr),e(N5,Myr),e(Me,Eyr),e(Me,q5),e(q5,n5e),e(n5e,Cyr),e(q5,wyr),e(q5,vK),e(vK,Ayr),e(q5,Lyr),e(Me,yyr),e(Me,j5),e(j5,s5e),e(s5e,xyr),e(j5,$yr),e(j5,FK),e(FK,kyr),e(j5,Syr),e(Pr,Ryr),M(D5,Pr,null),b(m,JQe,_),b(m,Ac,_),e(Ac,G5),e(G5,l5e),M(Kx,l5e,null),e(Ac,Pyr),e(Ac,i5e),e(i5e,Byr),b(m,YQe,_),b(m,lr,_),M(Zx,lr,null),e(lr,Iyr),e(lr,Lc),e(Lc,Nyr),e(Lc,TK),e(TK,qyr),e(Lc,jyr),e(Lc,MK),e(MK,Dyr),e(Lc,Gyr),e(lr,Oyr),e(lr,e$),e(e$,Vyr),e(e$,d5e),e(d5e,Xyr),e(e$,zyr),e(lr,Wyr),e(lr,jt),M(o$,jt,null),e(jt,Qyr),e(jt,c5e),e(c5e,Hyr),e(jt,Uyr),e(jt,yc),e(yc,Jyr),e(yc,m5e),e(m5e,Yyr),e(yc,Kyr),e(yc,EK),e(EK,Zyr),e(yc,e8r),e(jt,o8r),M(O5,jt,null),e(lr,r8r),e(lr,Br),M(r$,Br,null),e(Br,t8r),e(Br,f5e),e(f5e,a8r),e(Br,n8r),e(Br,pn),e(pn,s8r),e(pn,g5e),e(g5e,l8r),e(pn,i8r),e(pn,h5e),e(h5e,d8r),e(pn,c8r),e(pn,u5e),e(u5e,m8r),e(pn,f8r),e(Br,g8r),e(Br,Ve),e(Ve,V5),e(V5,p5e),e(p5e,h8r),e(V5,u8r),e(V5,CK),e(CK,p8r),e(V5,_8r),e(Ve,b8r),e(Ve,X5),e(X5,_5e),e(_5e,v8r),e(X5,F8r),e(X5,wK),e(wK,T8r),e(X5,M8r),e(Ve,E8r),e(Ve,nl),e(nl,b5e),e(b5e,C8r),e(nl,w8r),e(nl,AK),e(AK,A8r),e(nl,L8r),e(nl,LK),e(LK,y8r),e(nl,x8r),e(Ve,$8r),e(Ve,z5),e(z5,v5e),e(v5e,k8r),e(z5,S8r),e(z5,yK),e(yK,R8r),e(z5,P8r),e(Ve,B8r),e(Ve,W5),e(W5,F5e),e(F5e,I8r),e(W5,N8r),e(W5,xK),e(xK,q8r),e(W5,j8r),e(Ve,D8r),e(Ve,Q5),e(Q5,T5e),e(T5e,G8r),e(Q5,O8r),e(Q5,$K),e($K,V8r),e(Q5,X8r),e(Ve,z8r),e(Ve,H5),e(H5,M5e),e(M5e,W8r),e(H5,Q8r),e(H5,kK),e(kK,H8r),e(H5,U8r),e(Ve,J8r),e(Ve,U5),e(U5,E5e),e(E5e,Y8r),e(U5,K8r),e(U5,SK),e(SK,Z8r),e(U5,e9r),e(Br,o9r),M(J5,Br,null),b(m,KQe,_),b(m,xc,_),e(xc,Y5),e(Y5,C5e),M(t$,C5e,null),e(xc,r9r),e(xc,w5e),e(w5e,t9r),b(m,ZQe,_),b(m,ir,_),M(a$,ir,null),e(ir,a9r),e(ir,$c),e($c,n9r),e($c,RK),e(RK,s9r),e($c,l9r),e($c,PK),e(PK,i9r),e($c,d9r),e(ir,c9r),e(ir,n$),e(n$,m9r),e(n$,A5e),e(A5e,f9r),e(n$,g9r),e(ir,h9r),e(ir,Dt),M(s$,Dt,null),e(Dt,u9r),e(Dt,L5e),e(L5e,p9r),e(Dt,_9r),e(Dt,kc),e(kc,b9r),e(kc,y5e),e(y5e,v9r),e(kc,F9r),e(kc,BK),e(BK,T9r),e(kc,M9r),e(Dt,E9r),M(K5,Dt,null),e(ir,C9r),e(ir,Ir),M(l$,Ir,null),e(Ir,w9r),e(Ir,x5e),e(x5e,A9r),e(Ir,L9r),e(Ir,_n),e(_n,y9r),e(_n,$5e),e($5e,x9r),e(_n,$9r),e(_n,k5e),e(k5e,k9r),e(_n,S9r),e(_n,S5e),e(S5e,R9r),e(_n,P9r),e(Ir,B9r),e(Ir,ie),e(ie,Z5),e(Z5,R5e),e(R5e,I9r),e(Z5,N9r),e(Z5,IK),e(IK,q9r),e(Z5,j9r),e(ie,D9r),e(ie,e3),e(e3,P5e),e(P5e,G9r),e(e3,O9r),e(e3,NK),e(NK,V9r),e(e3,X9r),e(ie,z9r),e(ie,o3),e(o3,B5e),e(B5e,W9r),e(o3,Q9r),e(o3,qK),e(qK,H9r),e(o3,U9r),e(ie,J9r),e(ie,r3),e(r3,I5e),e(I5e,Y9r),e(r3,K9r),e(r3,jK),e(jK,Z9r),e(r3,exr),e(ie,oxr),e(ie,t3),e(t3,N5e),e(N5e,rxr),e(t3,txr),e(t3,DK),e(DK,axr),e(t3,nxr),e(ie,sxr),e(ie,a3),e(a3,q5e),e(q5e,lxr),e(a3,ixr),e(a3,GK),e(GK,dxr),e(a3,cxr),e(ie,mxr),e(ie,n3),e(n3,j5e),e(j5e,fxr),e(n3,gxr),e(n3,OK),e(OK,hxr),e(n3,uxr),e(ie,pxr),e(ie,s3),e(s3,D5e),e(D5e,_xr),e(s3,bxr),e(s3,VK),e(VK,vxr),e(s3,Fxr),e(ie,Txr),e(ie,l3),e(l3,G5e),e(G5e,Mxr),e(l3,Exr),e(l3,XK),e(XK,Cxr),e(l3,wxr),e(ie,Axr),e(ie,i3),e(i3,O5e),e(O5e,Lxr),e(i3,yxr),e(i3,zK),e(zK,xxr),e(i3,$xr),e(ie,kxr),e(ie,d3),e(d3,V5e),e(V5e,Sxr),e(d3,Rxr),e(d3,WK),e(WK,Pxr),e(d3,Bxr),e(ie,Ixr),e(ie,c3),e(c3,X5e),e(X5e,Nxr),e(c3,qxr),e(c3,QK),e(QK,jxr),e(c3,Dxr),e(ie,Gxr),e(ie,m3),e(m3,z5e),e(z5e,Oxr),e(m3,Vxr),e(m3,HK),e(HK,Xxr),e(m3,zxr),e(ie,Wxr),e(ie,f3),e(f3,W5e),e(W5e,Qxr),e(f3,Hxr),e(f3,UK),e(UK,Uxr),e(f3,Jxr),e(ie,Yxr),e(ie,g3),e(g3,Q5e),e(Q5e,Kxr),e(g3,Zxr),e(g3,JK),e(JK,e$r),e(g3,o$r),e(ie,r$r),e(ie,h3),e(h3,H5e),e(H5e,t$r),e(h3,a$r),e(h3,YK),e(YK,n$r),e(h3,s$r),e(ie,l$r),e(ie,u3),e(u3,U5e),e(U5e,i$r),e(u3,d$r),e(u3,KK),e(KK,c$r),e(u3,m$r),e(ie,f$r),e(ie,p3),e(p3,J5e),e(J5e,g$r),e(p3,h$r),e(p3,ZK),e(ZK,u$r),e(p3,p$r),e(ie,_$r),e(ie,_3),e(_3,Y5e),e(Y5e,b$r),e(_3,v$r),e(_3,eZ),e(eZ,F$r),e(_3,T$r),e(ie,M$r),e(ie,b3),e(b3,K5e),e(K5e,E$r),e(b3,C$r),e(b3,oZ),e(oZ,w$r),e(b3,A$r),e(Ir,L$r),M(v3,Ir,null),b(m,eHe,_),b(m,Sc,_),e(Sc,F3),e(F3,Z5e),M(i$,Z5e,null),e(Sc,y$r),e(Sc,e3e),e(e3e,x$r),b(m,oHe,_),b(m,dr,_),M(d$,dr,null),e(dr,$$r),e(dr,Rc),e(Rc,k$r),e(Rc,rZ),e(rZ,S$r),e(Rc,R$r),e(Rc,tZ),e(tZ,P$r),e(Rc,B$r),e(dr,I$r),e(dr,c$),e(c$,N$r),e(c$,o3e),e(o3e,q$r),e(c$,j$r),e(dr,D$r),e(dr,Gt),M(m$,Gt,null),e(Gt,G$r),e(Gt,r3e),e(r3e,O$r),e(Gt,V$r),e(Gt,Pc),e(Pc,X$r),e(Pc,t3e),e(t3e,z$r),e(Pc,W$r),e(Pc,aZ),e(aZ,Q$r),e(Pc,H$r),e(Gt,U$r),M(T3,Gt,null),e(dr,J$r),e(dr,Nr),M(f$,Nr,null),e(Nr,Y$r),e(Nr,a3e),e(a3e,K$r),e(Nr,Z$r),e(Nr,bn),e(bn,ekr),e(bn,n3e),e(n3e,okr),e(bn,rkr),e(bn,s3e),e(s3e,tkr),e(bn,akr),e(bn,l3e),e(l3e,nkr),e(bn,skr),e(Nr,lkr),e(Nr,ye),e(ye,M3),e(M3,i3e),e(i3e,ikr),e(M3,dkr),e(M3,nZ),e(nZ,ckr),e(M3,mkr),e(ye,fkr),e(ye,E3),e(E3,d3e),e(d3e,gkr),e(E3,hkr),e(E3,sZ),e(sZ,ukr),e(E3,pkr),e(ye,_kr),e(ye,C3),e(C3,c3e),e(c3e,bkr),e(C3,vkr),e(C3,lZ),e(lZ,Fkr),e(C3,Tkr),e(ye,Mkr),e(ye,w3),e(w3,m3e),e(m3e,Ekr),e(w3,Ckr),e(w3,iZ),e(iZ,wkr),e(w3,Akr),e(ye,Lkr),e(ye,A3),e(A3,f3e),e(f3e,ykr),e(A3,xkr),e(A3,dZ),e(dZ,$kr),e(A3,kkr),e(ye,Skr),e(ye,L3),e(L3,g3e),e(g3e,Rkr),e(L3,Pkr),e(L3,cZ),e(cZ,Bkr),e(L3,Ikr),e(ye,Nkr),e(ye,y3),e(y3,h3e),e(h3e,qkr),e(y3,jkr),e(y3,mZ),e(mZ,Dkr),e(y3,Gkr),e(ye,Okr),e(ye,x3),e(x3,u3e),e(u3e,Vkr),e(x3,Xkr),e(x3,fZ),e(fZ,zkr),e(x3,Wkr),e(ye,Qkr),e(ye,$3),e($3,p3e),e(p3e,Hkr),e($3,Ukr),e($3,gZ),e(gZ,Jkr),e($3,Ykr),e(ye,Kkr),e(ye,k3),e(k3,_3e),e(_3e,Zkr),e(k3,eSr),e(k3,hZ),e(hZ,oSr),e(k3,rSr),e(Nr,tSr),M(S3,Nr,null),b(m,rHe,_),b(m,Bc,_),e(Bc,R3),e(R3,b3e),M(g$,b3e,null),e(Bc,aSr),e(Bc,v3e),e(v3e,nSr),b(m,tHe,_),b(m,cr,_),M(h$,cr,null),e(cr,sSr),e(cr,Ic),e(Ic,lSr),e(Ic,uZ),e(uZ,iSr),e(Ic,dSr),e(Ic,pZ),e(pZ,cSr),e(Ic,mSr),e(cr,fSr),e(cr,u$),e(u$,gSr),e(u$,F3e),e(F3e,hSr),e(u$,uSr),e(cr,pSr),e(cr,Ot),M(p$,Ot,null),e(Ot,_Sr),e(Ot,T3e),e(T3e,bSr),e(Ot,vSr),e(Ot,Nc),e(Nc,FSr),e(Nc,M3e),e(M3e,TSr),e(Nc,MSr),e(Nc,_Z),e(_Z,ESr),e(Nc,CSr),e(Ot,wSr),M(P3,Ot,null),e(cr,ASr),e(cr,qr),M(_$,qr,null),e(qr,LSr),e(qr,E3e),e(E3e,ySr),e(qr,xSr),e(qr,vn),e(vn,$Sr),e(vn,C3e),e(C3e,kSr),e(vn,SSr),e(vn,w3e),e(w3e,RSr),e(vn,PSr),e(vn,A3e),e(A3e,BSr),e(vn,ISr),e(qr,NSr),e(qr,te),e(te,B3),e(B3,L3e),e(L3e,qSr),e(B3,jSr),e(B3,bZ),e(bZ,DSr),e(B3,GSr),e(te,OSr),e(te,I3),e(I3,y3e),e(y3e,VSr),e(I3,XSr),e(I3,vZ),e(vZ,zSr),e(I3,WSr),e(te,QSr),e(te,N3),e(N3,x3e),e(x3e,HSr),e(N3,USr),e(N3,FZ),e(FZ,JSr),e(N3,YSr),e(te,KSr),e(te,q3),e(q3,$3e),e($3e,ZSr),e(q3,eRr),e(q3,TZ),e(TZ,oRr),e(q3,rRr),e(te,tRr),e(te,j3),e(j3,k3e),e(k3e,aRr),e(j3,nRr),e(j3,MZ),e(MZ,sRr),e(j3,lRr),e(te,iRr),e(te,D3),e(D3,S3e),e(S3e,dRr),e(D3,cRr),e(D3,EZ),e(EZ,mRr),e(D3,fRr),e(te,gRr),e(te,G3),e(G3,R3e),e(R3e,hRr),e(G3,uRr),e(G3,CZ),e(CZ,pRr),e(G3,_Rr),e(te,bRr),e(te,O3),e(O3,P3e),e(P3e,vRr),e(O3,FRr),e(O3,wZ),e(wZ,TRr),e(O3,MRr),e(te,ERr),e(te,V3),e(V3,B3e),e(B3e,CRr),e(V3,wRr),e(V3,AZ),e(AZ,ARr),e(V3,LRr),e(te,yRr),e(te,X3),e(X3,I3e),e(I3e,xRr),e(X3,$Rr),e(X3,LZ),e(LZ,kRr),e(X3,SRr),e(te,RRr),e(te,z3),e(z3,N3e),e(N3e,PRr),e(z3,BRr),e(z3,yZ),e(yZ,IRr),e(z3,NRr),e(te,qRr),e(te,W3),e(W3,q3e),e(q3e,jRr),e(W3,DRr),e(W3,xZ),e(xZ,GRr),e(W3,ORr),e(te,VRr),e(te,Q3),e(Q3,j3e),e(j3e,XRr),e(Q3,zRr),e(Q3,$Z),e($Z,WRr),e(Q3,QRr),e(te,HRr),e(te,H3),e(H3,D3e),e(D3e,URr),e(H3,JRr),e(H3,kZ),e(kZ,YRr),e(H3,KRr),e(te,ZRr),e(te,U3),e(U3,G3e),e(G3e,ePr),e(U3,oPr),e(U3,SZ),e(SZ,rPr),e(U3,tPr),e(te,aPr),e(te,J3),e(J3,O3e),e(O3e,nPr),e(J3,sPr),e(J3,RZ),e(RZ,lPr),e(J3,iPr),e(te,dPr),e(te,Y3),e(Y3,V3e),e(V3e,cPr),e(Y3,mPr),e(Y3,PZ),e(PZ,fPr),e(Y3,gPr),e(te,hPr),e(te,K3),e(K3,X3e),e(X3e,uPr),e(K3,pPr),e(K3,BZ),e(BZ,_Pr),e(K3,bPr),e(te,vPr),e(te,Z3),e(Z3,z3e),e(z3e,FPr),e(Z3,TPr),e(Z3,IZ),e(IZ,MPr),e(Z3,EPr),e(te,CPr),e(te,e0),e(e0,W3e),e(W3e,wPr),e(e0,APr),e(e0,NZ),e(NZ,LPr),e(e0,yPr),e(te,xPr),e(te,o0),e(o0,Q3e),e(Q3e,$Pr),e(o0,kPr),e(o0,qZ),e(qZ,SPr),e(o0,RPr),e(te,PPr),e(te,r0),e(r0,H3e),e(H3e,BPr),e(r0,IPr),e(r0,jZ),e(jZ,NPr),e(r0,qPr),e(te,jPr),e(te,t0),e(t0,U3e),e(U3e,DPr),e(t0,GPr),e(t0,DZ),e(DZ,OPr),e(t0,VPr),e(te,XPr),e(te,a0),e(a0,J3e),e(J3e,zPr),e(a0,WPr),e(a0,GZ),e(GZ,QPr),e(a0,HPr),e(te,UPr),e(te,n0),e(n0,Y3e),e(Y3e,JPr),e(n0,YPr),e(n0,OZ),e(OZ,KPr),e(n0,ZPr),e(te,eBr),e(te,s0),e(s0,K3e),e(K3e,oBr),e(s0,rBr),e(s0,VZ),e(VZ,tBr),e(s0,aBr),e(qr,nBr),M(l0,qr,null),b(m,aHe,_),b(m,qc,_),e(qc,i0),e(i0,Z3e),M(b$,Z3e,null),e(qc,sBr),e(qc,e0e),e(e0e,lBr),b(m,nHe,_),b(m,mr,_),M(v$,mr,null),e(mr,iBr),e(mr,jc),e(jc,dBr),e(jc,XZ),e(XZ,cBr),e(jc,mBr),e(jc,zZ),e(zZ,fBr),e(jc,gBr),e(mr,hBr),e(mr,F$),e(F$,uBr),e(F$,o0e),e(o0e,pBr),e(F$,_Br),e(mr,bBr),e(mr,Vt),M(T$,Vt,null),e(Vt,vBr),e(Vt,r0e),e(r0e,FBr),e(Vt,TBr),e(Vt,Dc),e(Dc,MBr),e(Dc,t0e),e(t0e,EBr),e(Dc,CBr),e(Dc,WZ),e(WZ,wBr),e(Dc,ABr),e(Vt,LBr),M(d0,Vt,null),e(mr,yBr),e(mr,jr),M(M$,jr,null),e(jr,xBr),e(jr,a0e),e(a0e,$Br),e(jr,kBr),e(jr,Fn),e(Fn,SBr),e(Fn,n0e),e(n0e,RBr),e(Fn,PBr),e(Fn,s0e),e(s0e,BBr),e(Fn,IBr),e(Fn,l0e),e(l0e,NBr),e(Fn,qBr),e(jr,jBr),e(jr,ve),e(ve,c0),e(c0,i0e),e(i0e,DBr),e(c0,GBr),e(c0,QZ),e(QZ,OBr),e(c0,VBr),e(ve,XBr),e(ve,m0),e(m0,d0e),e(d0e,zBr),e(m0,WBr),e(m0,HZ),e(HZ,QBr),e(m0,HBr),e(ve,UBr),e(ve,f0),e(f0,c0e),e(c0e,JBr),e(f0,YBr),e(f0,UZ),e(UZ,KBr),e(f0,ZBr),e(ve,eIr),e(ve,g0),e(g0,m0e),e(m0e,oIr),e(g0,rIr),e(g0,JZ),e(JZ,tIr),e(g0,aIr),e(ve,nIr),e(ve,h0),e(h0,f0e),e(f0e,sIr),e(h0,lIr),e(h0,YZ),e(YZ,iIr),e(h0,dIr),e(ve,cIr),e(ve,u0),e(u0,g0e),e(g0e,mIr),e(u0,fIr),e(u0,KZ),e(KZ,gIr),e(u0,hIr),e(ve,uIr),e(ve,p0),e(p0,h0e),e(h0e,pIr),e(p0,_Ir),e(p0,ZZ),e(ZZ,bIr),e(p0,vIr),e(ve,FIr),e(ve,_0),e(_0,u0e),e(u0e,TIr),e(_0,MIr),e(_0,eee),e(eee,EIr),e(_0,CIr),e(ve,wIr),e(ve,b0),e(b0,p0e),e(p0e,AIr),e(b0,LIr),e(b0,oee),e(oee,yIr),e(b0,xIr),e(ve,$Ir),e(ve,v0),e(v0,_0e),e(_0e,kIr),e(v0,SIr),e(v0,ree),e(ree,RIr),e(v0,PIr),e(ve,BIr),e(ve,F0),e(F0,b0e),e(b0e,IIr),e(F0,NIr),e(F0,tee),e(tee,qIr),e(F0,jIr),e(ve,DIr),e(ve,T0),e(T0,v0e),e(v0e,GIr),e(T0,OIr),e(T0,aee),e(aee,VIr),e(T0,XIr),e(ve,zIr),e(ve,M0),e(M0,F0e),e(F0e,WIr),e(M0,QIr),e(M0,nee),e(nee,HIr),e(M0,UIr),e(ve,JIr),e(ve,E0),e(E0,T0e),e(T0e,YIr),e(E0,KIr),e(E0,see),e(see,ZIr),e(E0,eNr),e(ve,oNr),e(ve,C0),e(C0,M0e),e(M0e,rNr),e(C0,tNr),e(C0,lee),e(lee,aNr),e(C0,nNr),e(ve,sNr),e(ve,w0),e(w0,E0e),e(E0e,lNr),e(w0,iNr),e(w0,iee),e(iee,dNr),e(w0,cNr),e(ve,mNr),e(ve,A0),e(A0,C0e),e(C0e,fNr),e(A0,gNr),e(A0,dee),e(dee,hNr),e(A0,uNr),e(jr,pNr),M(L0,jr,null),b(m,sHe,_),b(m,Gc,_),e(Gc,y0),e(y0,w0e),M(E$,w0e,null),e(Gc,_Nr),e(Gc,A0e),e(A0e,bNr),b(m,lHe,_),b(m,fr,_),M(C$,fr,null),e(fr,vNr),e(fr,Oc),e(Oc,FNr),e(Oc,cee),e(cee,TNr),e(Oc,MNr),e(Oc,mee),e(mee,ENr),e(Oc,CNr),e(fr,wNr),e(fr,w$),e(w$,ANr),e(w$,L0e),e(L0e,LNr),e(w$,yNr),e(fr,xNr),e(fr,Xt),M(A$,Xt,null),e(Xt,$Nr),e(Xt,y0e),e(y0e,kNr),e(Xt,SNr),e(Xt,Vc),e(Vc,RNr),e(Vc,x0e),e(x0e,PNr),e(Vc,BNr),e(Vc,fee),e(fee,INr),e(Vc,NNr),e(Xt,qNr),M(x0,Xt,null),e(fr,jNr),e(fr,Dr),M(L$,Dr,null),e(Dr,DNr),e(Dr,$0e),e($0e,GNr),e(Dr,ONr),e(Dr,Tn),e(Tn,VNr),e(Tn,k0e),e(k0e,XNr),e(Tn,zNr),e(Tn,S0e),e(S0e,WNr),e(Tn,QNr),e(Tn,R0e),e(R0e,HNr),e(Tn,UNr),e(Dr,JNr),e(Dr,y$),e(y$,$0),e($0,P0e),e(P0e,YNr),e($0,KNr),e($0,gee),e(gee,ZNr),e($0,eqr),e(y$,oqr),e(y$,k0),e(k0,B0e),e(B0e,rqr),e(k0,tqr),e(k0,hee),e(hee,aqr),e(k0,nqr),e(Dr,sqr),M(S0,Dr,null),b(m,iHe,_),b(m,Xc,_),e(Xc,R0),e(R0,I0e),M(x$,I0e,null),e(Xc,lqr),e(Xc,N0e),e(N0e,iqr),b(m,dHe,_),b(m,gr,_),M($$,gr,null),e(gr,dqr),e(gr,zc),e(zc,cqr),e(zc,uee),e(uee,mqr),e(zc,fqr),e(zc,pee),e(pee,gqr),e(zc,hqr),e(gr,uqr),e(gr,k$),e(k$,pqr),e(k$,q0e),e(q0e,_qr),e(k$,bqr),e(gr,vqr),e(gr,zt),M(S$,zt,null),e(zt,Fqr),e(zt,j0e),e(j0e,Tqr),e(zt,Mqr),e(zt,Wc),e(Wc,Eqr),e(Wc,D0e),e(D0e,Cqr),e(Wc,wqr),e(Wc,_ee),e(_ee,Aqr),e(Wc,Lqr),e(zt,yqr),M(P0,zt,null),e(gr,xqr),e(gr,Gr),M(R$,Gr,null),e(Gr,$qr),e(Gr,G0e),e(G0e,kqr),e(Gr,Sqr),e(Gr,Mn),e(Mn,Rqr),e(Mn,O0e),e(O0e,Pqr),e(Mn,Bqr),e(Mn,V0e),e(V0e,Iqr),e(Mn,Nqr),e(Mn,X0e),e(X0e,qqr),e(Mn,jqr),e(Gr,Dqr),e(Gr,z0e),e(z0e,B0),e(B0,W0e),e(W0e,Gqr),e(B0,Oqr),e(B0,bee),e(bee,Vqr),e(B0,Xqr),e(Gr,zqr),M(I0,Gr,null),b(m,cHe,_),b(m,Qc,_),e(Qc,N0),e(N0,Q0e),M(P$,Q0e,null),e(Qc,Wqr),e(Qc,H0e),e(H0e,Qqr),b(m,mHe,_),b(m,hr,_),M(B$,hr,null),e(hr,Hqr),e(hr,Hc),e(Hc,Uqr),e(Hc,vee),e(vee,Jqr),e(Hc,Yqr),e(Hc,Fee),e(Fee,Kqr),e(Hc,Zqr),e(hr,ejr),e(hr,I$),e(I$,ojr),e(I$,U0e),e(U0e,rjr),e(I$,tjr),e(hr,ajr),e(hr,Wt),M(N$,Wt,null),e(Wt,njr),e(Wt,J0e),e(J0e,sjr),e(Wt,ljr),e(Wt,Uc),e(Uc,ijr),e(Uc,Y0e),e(Y0e,djr),e(Uc,cjr),e(Uc,Tee),e(Tee,mjr),e(Uc,fjr),e(Wt,gjr),M(q0,Wt,null),e(hr,hjr),e(hr,Or),M(q$,Or,null),e(Or,ujr),e(Or,K0e),e(K0e,pjr),e(Or,_jr),e(Or,En),e(En,bjr),e(En,Z0e),e(Z0e,vjr),e(En,Fjr),e(En,ewe),e(ewe,Tjr),e(En,Mjr),e(En,owe),e(owe,Ejr),e(En,Cjr),e(Or,wjr),e(Or,de),e(de,j0),e(j0,rwe),e(rwe,Ajr),e(j0,Ljr),e(j0,Mee),e(Mee,yjr),e(j0,xjr),e(de,$jr),e(de,D0),e(D0,twe),e(twe,kjr),e(D0,Sjr),e(D0,Eee),e(Eee,Rjr),e(D0,Pjr),e(de,Bjr),e(de,G0),e(G0,awe),e(awe,Ijr),e(G0,Njr),e(G0,Cee),e(Cee,qjr),e(G0,jjr),e(de,Djr),e(de,O0),e(O0,nwe),e(nwe,Gjr),e(O0,Ojr),e(O0,wee),e(wee,Vjr),e(O0,Xjr),e(de,zjr),e(de,V0),e(V0,swe),e(swe,Wjr),e(V0,Qjr),e(V0,Aee),e(Aee,Hjr),e(V0,Ujr),e(de,Jjr),e(de,X0),e(X0,lwe),e(lwe,Yjr),e(X0,Kjr),e(X0,Lee),e(Lee,Zjr),e(X0,eDr),e(de,oDr),e(de,z0),e(z0,iwe),e(iwe,rDr),e(z0,tDr),e(z0,yee),e(yee,aDr),e(z0,nDr),e(de,sDr),e(de,W0),e(W0,dwe),e(dwe,lDr),e(W0,iDr),e(W0,xee),e(xee,dDr),e(W0,cDr),e(de,mDr),e(de,Q0),e(Q0,cwe),e(cwe,fDr),e(Q0,gDr),e(Q0,$ee),e($ee,hDr),e(Q0,uDr),e(de,pDr),e(de,H0),e(H0,mwe),e(mwe,_Dr),e(H0,bDr),e(H0,kee),e(kee,vDr),e(H0,FDr),e(de,TDr),e(de,U0),e(U0,fwe),e(fwe,MDr),e(U0,EDr),e(U0,See),e(See,CDr),e(U0,wDr),e(de,ADr),e(de,J0),e(J0,gwe),e(gwe,LDr),e(J0,yDr),e(J0,Ree),e(Ree,xDr),e(J0,$Dr),e(de,kDr),e(de,Y0),e(Y0,hwe),e(hwe,SDr),e(Y0,RDr),e(Y0,Pee),e(Pee,PDr),e(Y0,BDr),e(de,IDr),e(de,K0),e(K0,uwe),e(uwe,NDr),e(K0,qDr),e(K0,Bee),e(Bee,jDr),e(K0,DDr),e(de,GDr),e(de,Z0),e(Z0,pwe),e(pwe,ODr),e(Z0,VDr),e(Z0,Iee),e(Iee,XDr),e(Z0,zDr),e(de,WDr),e(de,ew),e(ew,_we),e(_we,QDr),e(ew,HDr),e(ew,Nee),e(Nee,UDr),e(ew,JDr),e(de,YDr),e(de,ow),e(ow,bwe),e(bwe,KDr),e(ow,ZDr),e(ow,qee),e(qee,eGr),e(ow,oGr),e(de,rGr),e(de,rw),e(rw,vwe),e(vwe,tGr),e(rw,aGr),e(rw,jee),e(jee,nGr),e(rw,sGr),e(de,lGr),e(de,tw),e(tw,Fwe),e(Fwe,iGr),e(tw,dGr),e(tw,Dee),e(Dee,cGr),e(tw,mGr),e(de,fGr),e(de,aw),e(aw,Twe),e(Twe,gGr),e(aw,hGr),e(aw,Gee),e(Gee,uGr),e(aw,pGr),e(Or,_Gr),M(nw,Or,null),b(m,fHe,_),b(m,Jc,_),e(Jc,sw),e(sw,Mwe),M(j$,Mwe,null),e(Jc,bGr),e(Jc,Ewe),e(Ewe,vGr),b(m,gHe,_),b(m,ur,_),M(D$,ur,null),e(ur,FGr),e(ur,Yc),e(Yc,TGr),e(Yc,Oee),e(Oee,MGr),e(Yc,EGr),e(Yc,Vee),e(Vee,CGr),e(Yc,wGr),e(ur,AGr),e(ur,G$),e(G$,LGr),e(G$,Cwe),e(Cwe,yGr),e(G$,xGr),e(ur,$Gr),e(ur,Qt),M(O$,Qt,null),e(Qt,kGr),e(Qt,wwe),e(wwe,SGr),e(Qt,RGr),e(Qt,Kc),e(Kc,PGr),e(Kc,Awe),e(Awe,BGr),e(Kc,IGr),e(Kc,Xee),e(Xee,NGr),e(Kc,qGr),e(Qt,jGr),M(lw,Qt,null),e(ur,DGr),e(ur,Vr),M(V$,Vr,null),e(Vr,GGr),e(Vr,Lwe),e(Lwe,OGr),e(Vr,VGr),e(Vr,Cn),e(Cn,XGr),e(Cn,ywe),e(ywe,zGr),e(Cn,WGr),e(Cn,xwe),e(xwe,QGr),e(Cn,HGr),e(Cn,$we),e($we,UGr),e(Cn,JGr),e(Vr,YGr),e(Vr,ce),e(ce,iw),e(iw,kwe),e(kwe,KGr),e(iw,ZGr),e(iw,zee),e(zee,eOr),e(iw,oOr),e(ce,rOr),e(ce,dw),e(dw,Swe),e(Swe,tOr),e(dw,aOr),e(dw,Wee),e(Wee,nOr),e(dw,sOr),e(ce,lOr),e(ce,cw),e(cw,Rwe),e(Rwe,iOr),e(cw,dOr),e(cw,Qee),e(Qee,cOr),e(cw,mOr),e(ce,fOr),e(ce,mw),e(mw,Pwe),e(Pwe,gOr),e(mw,hOr),e(mw,Hee),e(Hee,uOr),e(mw,pOr),e(ce,_Or),e(ce,fw),e(fw,Bwe),e(Bwe,bOr),e(fw,vOr),e(fw,Uee),e(Uee,FOr),e(fw,TOr),e(ce,MOr),e(ce,gw),e(gw,Iwe),e(Iwe,EOr),e(gw,COr),e(gw,Jee),e(Jee,wOr),e(gw,AOr),e(ce,LOr),e(ce,hw),e(hw,Nwe),e(Nwe,yOr),e(hw,xOr),e(hw,Yee),e(Yee,$Or),e(hw,kOr),e(ce,SOr),e(ce,uw),e(uw,qwe),e(qwe,ROr),e(uw,POr),e(uw,Kee),e(Kee,BOr),e(uw,IOr),e(ce,NOr),e(ce,pw),e(pw,jwe),e(jwe,qOr),e(pw,jOr),e(pw,Zee),e(Zee,DOr),e(pw,GOr),e(ce,OOr),e(ce,_w),e(_w,Dwe),e(Dwe,VOr),e(_w,XOr),e(_w,eoe),e(eoe,zOr),e(_w,WOr),e(ce,QOr),e(ce,bw),e(bw,Gwe),e(Gwe,HOr),e(bw,UOr),e(bw,ooe),e(ooe,JOr),e(bw,YOr),e(ce,KOr),e(ce,vw),e(vw,Owe),e(Owe,ZOr),e(vw,eVr),e(vw,roe),e(roe,oVr),e(vw,rVr),e(ce,tVr),e(ce,Fw),e(Fw,Vwe),e(Vwe,aVr),e(Fw,nVr),e(Fw,toe),e(toe,sVr),e(Fw,lVr),e(ce,iVr),e(ce,Tw),e(Tw,Xwe),e(Xwe,dVr),e(Tw,cVr),e(Tw,aoe),e(aoe,mVr),e(Tw,fVr),e(ce,gVr),e(ce,Mw),e(Mw,zwe),e(zwe,hVr),e(Mw,uVr),e(Mw,noe),e(noe,pVr),e(Mw,_Vr),e(ce,bVr),e(ce,Ew),e(Ew,Wwe),e(Wwe,vVr),e(Ew,FVr),e(Ew,soe),e(soe,TVr),e(Ew,MVr),e(ce,EVr),e(ce,Cw),e(Cw,Qwe),e(Qwe,CVr),e(Cw,wVr),e(Cw,loe),e(loe,AVr),e(Cw,LVr),e(ce,yVr),e(ce,ww),e(ww,Hwe),e(Hwe,xVr),e(ww,$Vr),e(ww,ioe),e(ioe,kVr),e(ww,SVr),e(ce,RVr),e(ce,Aw),e(Aw,Uwe),e(Uwe,PVr),e(Aw,BVr),e(Aw,doe),e(doe,IVr),e(Aw,NVr),e(ce,qVr),e(ce,Lw),e(Lw,Jwe),e(Jwe,jVr),e(Lw,DVr),e(Lw,coe),e(coe,GVr),e(Lw,OVr),e(Vr,VVr),M(yw,Vr,null),b(m,hHe,_),b(m,Zc,_),e(Zc,xw),e(xw,Ywe),M(X$,Ywe,null),e(Zc,XVr),e(Zc,Kwe),e(Kwe,zVr),b(m,uHe,_),b(m,pr,_),M(z$,pr,null),e(pr,WVr),e(pr,em),e(em,QVr),e(em,moe),e(moe,HVr),e(em,UVr),e(em,foe),e(foe,JVr),e(em,YVr),e(pr,KVr),e(pr,W$),e(W$,ZVr),e(W$,Zwe),e(Zwe,eXr),e(W$,oXr),e(pr,rXr),e(pr,Ht),M(Q$,Ht,null),e(Ht,tXr),e(Ht,e6e),e(e6e,aXr),e(Ht,nXr),e(Ht,om),e(om,sXr),e(om,o6e),e(o6e,lXr),e(om,iXr),e(om,goe),e(goe,dXr),e(om,cXr),e(Ht,mXr),M($w,Ht,null),e(pr,fXr),e(pr,Xr),M(H$,Xr,null),e(Xr,gXr),e(Xr,r6e),e(r6e,hXr),e(Xr,uXr),e(Xr,wn),e(wn,pXr),e(wn,t6e),e(t6e,_Xr),e(wn,bXr),e(wn,a6e),e(a6e,vXr),e(wn,FXr),e(wn,n6e),e(n6e,TXr),e(wn,MXr),e(Xr,EXr),e(Xr,s6e),e(s6e,kw),e(kw,l6e),e(l6e,CXr),e(kw,wXr),e(kw,hoe),e(hoe,AXr),e(kw,LXr),e(Xr,yXr),M(Sw,Xr,null),b(m,pHe,_),b(m,rm,_),e(rm,Rw),e(Rw,i6e),M(U$,i6e,null),e(rm,xXr),e(rm,d6e),e(d6e,$Xr),b(m,_He,_),b(m,_r,_),M(J$,_r,null),e(_r,kXr),e(_r,tm),e(tm,SXr),e(tm,uoe),e(uoe,RXr),e(tm,PXr),e(tm,poe),e(poe,BXr),e(tm,IXr),e(_r,NXr),e(_r,Y$),e(Y$,qXr),e(Y$,c6e),e(c6e,jXr),e(Y$,DXr),e(_r,GXr),e(_r,Ut),M(K$,Ut,null),e(Ut,OXr),e(Ut,m6e),e(m6e,VXr),e(Ut,XXr),e(Ut,am),e(am,zXr),e(am,f6e),e(f6e,WXr),e(am,QXr),e(am,_oe),e(_oe,HXr),e(am,UXr),e(Ut,JXr),M(Pw,Ut,null),e(_r,YXr),e(_r,zr),M(Z$,zr,null),e(zr,KXr),e(zr,g6e),e(g6e,ZXr),e(zr,ezr),e(zr,An),e(An,ozr),e(An,h6e),e(h6e,rzr),e(An,tzr),e(An,u6e),e(u6e,azr),e(An,nzr),e(An,p6e),e(p6e,szr),e(An,lzr),e(zr,izr),e(zr,_6e),e(_6e,Bw),e(Bw,b6e),e(b6e,dzr),e(Bw,czr),e(Bw,boe),e(boe,mzr),e(Bw,fzr),e(zr,gzr),M(Iw,zr,null),b(m,bHe,_),b(m,nm,_),e(nm,Nw),e(Nw,v6e),M(ek,v6e,null),e(nm,hzr),e(nm,F6e),e(F6e,uzr),b(m,vHe,_),b(m,br,_),M(ok,br,null),e(br,pzr),e(br,sm),e(sm,_zr),e(sm,voe),e(voe,bzr),e(sm,vzr),e(sm,Foe),e(Foe,Fzr),e(sm,Tzr),e(br,Mzr),e(br,rk),e(rk,Ezr),e(rk,T6e),e(T6e,Czr),e(rk,wzr),e(br,Azr),e(br,Jt),M(tk,Jt,null),e(Jt,Lzr),e(Jt,M6e),e(M6e,yzr),e(Jt,xzr),e(Jt,lm),e(lm,$zr),e(lm,E6e),e(E6e,kzr),e(lm,Szr),e(lm,Toe),e(Toe,Rzr),e(lm,Pzr),e(Jt,Bzr),M(qw,Jt,null),e(br,Izr),e(br,Wr),M(ak,Wr,null),e(Wr,Nzr),e(Wr,C6e),e(C6e,qzr),e(Wr,jzr),e(Wr,Ln),e(Ln,Dzr),e(Ln,w6e),e(w6e,Gzr),e(Ln,Ozr),e(Ln,A6e),e(A6e,Vzr),e(Ln,Xzr),e(Ln,L6e),e(L6e,zzr),e(Ln,Wzr),e(Wr,Qzr),e(Wr,oe),e(oe,jw),e(jw,y6e),e(y6e,Hzr),e(jw,Uzr),e(jw,Moe),e(Moe,Jzr),e(jw,Yzr),e(oe,Kzr),e(oe,Dw),e(Dw,x6e),e(x6e,Zzr),e(Dw,eWr),e(Dw,Eoe),e(Eoe,oWr),e(Dw,rWr),e(oe,tWr),e(oe,Gw),e(Gw,$6e),e($6e,aWr),e(Gw,nWr),e(Gw,Coe),e(Coe,sWr),e(Gw,lWr),e(oe,iWr),e(oe,Ow),e(Ow,k6e),e(k6e,dWr),e(Ow,cWr),e(Ow,woe),e(woe,mWr),e(Ow,fWr),e(oe,gWr),e(oe,Vw),e(Vw,S6e),e(S6e,hWr),e(Vw,uWr),e(Vw,Aoe),e(Aoe,pWr),e(Vw,_Wr),e(oe,bWr),e(oe,Xw),e(Xw,R6e),e(R6e,vWr),e(Xw,FWr),e(Xw,Loe),e(Loe,TWr),e(Xw,MWr),e(oe,EWr),e(oe,zw),e(zw,P6e),e(P6e,CWr),e(zw,wWr),e(zw,yoe),e(yoe,AWr),e(zw,LWr),e(oe,yWr),e(oe,Ww),e(Ww,B6e),e(B6e,xWr),e(Ww,$Wr),e(Ww,xoe),e(xoe,kWr),e(Ww,SWr),e(oe,RWr),e(oe,Qw),e(Qw,I6e),e(I6e,PWr),e(Qw,BWr),e(Qw,$oe),e($oe,IWr),e(Qw,NWr),e(oe,qWr),e(oe,Hw),e(Hw,N6e),e(N6e,jWr),e(Hw,DWr),e(Hw,koe),e(koe,GWr),e(Hw,OWr),e(oe,VWr),e(oe,Uw),e(Uw,q6e),e(q6e,XWr),e(Uw,zWr),e(Uw,Soe),e(Soe,WWr),e(Uw,QWr),e(oe,HWr),e(oe,Jw),e(Jw,j6e),e(j6e,UWr),e(Jw,JWr),e(Jw,Roe),e(Roe,YWr),e(Jw,KWr),e(oe,ZWr),e(oe,Yw),e(Yw,D6e),e(D6e,eQr),e(Yw,oQr),e(Yw,Poe),e(Poe,rQr),e(Yw,tQr),e(oe,aQr),e(oe,Kw),e(Kw,G6e),e(G6e,nQr),e(Kw,sQr),e(Kw,Boe),e(Boe,lQr),e(Kw,iQr),e(oe,dQr),e(oe,Zw),e(Zw,O6e),e(O6e,cQr),e(Zw,mQr),e(Zw,Ioe),e(Ioe,fQr),e(Zw,gQr),e(oe,hQr),e(oe,e6),e(e6,V6e),e(V6e,uQr),e(e6,pQr),e(e6,Noe),e(Noe,_Qr),e(e6,bQr),e(oe,vQr),e(oe,o6),e(o6,X6e),e(X6e,FQr),e(o6,TQr),e(o6,qoe),e(qoe,MQr),e(o6,EQr),e(oe,CQr),e(oe,r6),e(r6,z6e),e(z6e,wQr),e(r6,AQr),e(r6,joe),e(joe,LQr),e(r6,yQr),e(oe,xQr),e(oe,t6),e(t6,W6e),e(W6e,$Qr),e(t6,kQr),e(t6,Doe),e(Doe,SQr),e(t6,RQr),e(oe,PQr),e(oe,a6),e(a6,Q6e),e(Q6e,BQr),e(a6,IQr),e(a6,Goe),e(Goe,NQr),e(a6,qQr),e(oe,jQr),e(oe,n6),e(n6,H6e),e(H6e,DQr),e(n6,GQr),e(n6,Ooe),e(Ooe,OQr),e(n6,VQr),e(oe,XQr),e(oe,s6),e(s6,U6e),e(U6e,zQr),e(s6,WQr),e(s6,Voe),e(Voe,QQr),e(s6,HQr),e(oe,UQr),e(oe,l6),e(l6,J6e),e(J6e,JQr),e(l6,YQr),e(l6,Xoe),e(Xoe,KQr),e(l6,ZQr),e(oe,eHr),e(oe,i6),e(i6,Y6e),e(Y6e,oHr),e(i6,rHr),e(i6,zoe),e(zoe,tHr),e(i6,aHr),e(oe,nHr),e(oe,d6),e(d6,K6e),e(K6e,sHr),e(d6,lHr),e(d6,Woe),e(Woe,iHr),e(d6,dHr),e(oe,cHr),e(oe,c6),e(c6,Z6e),e(Z6e,mHr),e(c6,fHr),e(c6,Qoe),e(Qoe,gHr),e(c6,hHr),e(oe,uHr),e(oe,m6),e(m6,eAe),e(eAe,pHr),e(m6,_Hr),e(m6,Hoe),e(Hoe,bHr),e(m6,vHr),e(Wr,FHr),M(f6,Wr,null),b(m,FHe,_),b(m,im,_),e(im,g6),e(g6,oAe),M(nk,oAe,null),e(im,THr),e(im,rAe),e(rAe,MHr),b(m,THe,_),b(m,vr,_),M(sk,vr,null),e(vr,EHr),e(vr,dm),e(dm,CHr),e(dm,Uoe),e(Uoe,wHr),e(dm,AHr),e(dm,Joe),e(Joe,LHr),e(dm,yHr),e(vr,xHr),e(vr,lk),e(lk,$Hr),e(lk,tAe),e(tAe,kHr),e(lk,SHr),e(vr,RHr),e(vr,Yt),M(ik,Yt,null),e(Yt,PHr),e(Yt,aAe),e(aAe,BHr),e(Yt,IHr),e(Yt,cm),e(cm,NHr),e(cm,nAe),e(nAe,qHr),e(cm,jHr),e(cm,Yoe),e(Yoe,DHr),e(cm,GHr),e(Yt,OHr),M(h6,Yt,null),e(vr,VHr),e(vr,Qr),M(dk,Qr,null),e(Qr,XHr),e(Qr,sAe),e(sAe,zHr),e(Qr,WHr),e(Qr,yn),e(yn,QHr),e(yn,lAe),e(lAe,HHr),e(yn,UHr),e(yn,iAe),e(iAe,JHr),e(yn,YHr),e(yn,dAe),e(dAe,KHr),e(yn,ZHr),e(Qr,eUr),e(Qr,xe),e(xe,u6),e(u6,cAe),e(cAe,oUr),e(u6,rUr),e(u6,Koe),e(Koe,tUr),e(u6,aUr),e(xe,nUr),e(xe,p6),e(p6,mAe),e(mAe,sUr),e(p6,lUr),e(p6,Zoe),e(Zoe,iUr),e(p6,dUr),e(xe,cUr),e(xe,_6),e(_6,fAe),e(fAe,mUr),e(_6,fUr),e(_6,ere),e(ere,gUr),e(_6,hUr),e(xe,uUr),e(xe,b6),e(b6,gAe),e(gAe,pUr),e(b6,_Ur),e(b6,ore),e(ore,bUr),e(b6,vUr),e(xe,FUr),e(xe,v6),e(v6,hAe),e(hAe,TUr),e(v6,MUr),e(v6,rre),e(rre,EUr),e(v6,CUr),e(xe,wUr),e(xe,F6),e(F6,uAe),e(uAe,AUr),e(F6,LUr),e(F6,tre),e(tre,yUr),e(F6,xUr),e(xe,$Ur),e(xe,T6),e(T6,pAe),e(pAe,kUr),e(T6,SUr),e(T6,are),e(are,RUr),e(T6,PUr),e(xe,BUr),e(xe,M6),e(M6,_Ae),e(_Ae,IUr),e(M6,NUr),e(M6,nre),e(nre,qUr),e(M6,jUr),e(xe,DUr),e(xe,E6),e(E6,bAe),e(bAe,GUr),e(E6,OUr),e(E6,sre),e(sre,VUr),e(E6,XUr),e(xe,zUr),e(xe,C6),e(C6,vAe),e(vAe,WUr),e(C6,QUr),e(C6,lre),e(lre,HUr),e(C6,UUr),e(Qr,JUr),M(w6,Qr,null),b(m,MHe,_),b(m,mm,_),e(mm,A6),e(A6,FAe),M(ck,FAe,null),e(mm,YUr),e(mm,TAe),e(TAe,KUr),b(m,EHe,_),b(m,Fr,_),M(mk,Fr,null),e(Fr,ZUr),e(Fr,fm),e(fm,eJr),e(fm,ire),e(ire,oJr),e(fm,rJr),e(fm,dre),e(dre,tJr),e(fm,aJr),e(Fr,nJr),e(Fr,fk),e(fk,sJr),e(fk,MAe),e(MAe,lJr),e(fk,iJr),e(Fr,dJr),e(Fr,Kt),M(gk,Kt,null),e(Kt,cJr),e(Kt,EAe),e(EAe,mJr),e(Kt,fJr),e(Kt,gm),e(gm,gJr),e(gm,CAe),e(CAe,hJr),e(gm,uJr),e(gm,cre),e(cre,pJr),e(gm,_Jr),e(Kt,bJr),M(L6,Kt,null),e(Fr,vJr),e(Fr,Hr),M(hk,Hr,null),e(Hr,FJr),e(Hr,wAe),e(wAe,TJr),e(Hr,MJr),e(Hr,xn),e(xn,EJr),e(xn,AAe),e(AAe,CJr),e(xn,wJr),e(xn,LAe),e(LAe,AJr),e(xn,LJr),e(xn,yAe),e(yAe,yJr),e(xn,xJr),e(Hr,$Jr),e(Hr,Ee),e(Ee,y6),e(y6,xAe),e(xAe,kJr),e(y6,SJr),e(y6,mre),e(mre,RJr),e(y6,PJr),e(Ee,BJr),e(Ee,x6),e(x6,$Ae),e($Ae,IJr),e(x6,NJr),e(x6,fre),e(fre,qJr),e(x6,jJr),e(Ee,DJr),e(Ee,$6),e($6,kAe),e(kAe,GJr),e($6,OJr),e($6,gre),e(gre,VJr),e($6,XJr),e(Ee,zJr),e(Ee,k6),e(k6,SAe),e(SAe,WJr),e(k6,QJr),e(k6,hre),e(hre,HJr),e(k6,UJr),e(Ee,JJr),e(Ee,S6),e(S6,RAe),e(RAe,YJr),e(S6,KJr),e(S6,ure),e(ure,ZJr),e(S6,eYr),e(Ee,oYr),e(Ee,R6),e(R6,PAe),e(PAe,rYr),e(R6,tYr),e(R6,pre),e(pre,aYr),e(R6,nYr),e(Ee,sYr),e(Ee,P6),e(P6,BAe),e(BAe,lYr),e(P6,iYr),e(P6,_re),e(_re,dYr),e(P6,cYr),e(Ee,mYr),e(Ee,B6),e(B6,IAe),e(IAe,fYr),e(B6,gYr),e(B6,bre),e(bre,hYr),e(B6,uYr),e(Ee,pYr),e(Ee,I6),e(I6,NAe),e(NAe,_Yr),e(I6,bYr),e(I6,vre),e(vre,vYr),e(I6,FYr),e(Ee,TYr),e(Ee,N6),e(N6,qAe),e(qAe,MYr),e(N6,EYr),e(N6,Fre),e(Fre,CYr),e(N6,wYr),e(Ee,AYr),e(Ee,q6),e(q6,jAe),e(jAe,LYr),e(q6,yYr),e(q6,Tre),e(Tre,xYr),e(q6,$Yr),e(Ee,kYr),e(Ee,j6),e(j6,DAe),e(DAe,SYr),e(j6,RYr),e(j6,Mre),e(Mre,PYr),e(j6,BYr),e(Ee,IYr),e(Ee,D6),e(D6,GAe),e(GAe,NYr),e(D6,qYr),e(D6,Ere),e(Ere,jYr),e(D6,DYr),e(Hr,GYr),M(G6,Hr,null),b(m,CHe,_),b(m,hm,_),e(hm,O6),e(O6,OAe),M(uk,OAe,null),e(hm,OYr),e(hm,VAe),e(VAe,VYr),b(m,wHe,_),b(m,Tr,_),M(pk,Tr,null),e(Tr,XYr),e(Tr,um),e(um,zYr),e(um,Cre),e(Cre,WYr),e(um,QYr),e(um,wre),e(wre,HYr),e(um,UYr),e(Tr,JYr),e(Tr,_k),e(_k,YYr),e(_k,XAe),e(XAe,KYr),e(_k,ZYr),e(Tr,eKr),e(Tr,Zt),M(bk,Zt,null),e(Zt,oKr),e(Zt,zAe),e(zAe,rKr),e(Zt,tKr),e(Zt,pm),e(pm,aKr),e(pm,WAe),e(WAe,nKr),e(pm,sKr),e(pm,Are),e(Are,lKr),e(pm,iKr),e(Zt,dKr),M(V6,Zt,null),e(Tr,cKr),e(Tr,Ur),M(vk,Ur,null),e(Ur,mKr),e(Ur,QAe),e(QAe,fKr),e(Ur,gKr),e(Ur,$n),e($n,hKr),e($n,HAe),e(HAe,uKr),e($n,pKr),e($n,UAe),e(UAe,_Kr),e($n,bKr),e($n,JAe),e(JAe,vKr),e($n,FKr),e(Ur,TKr),e(Ur,$e),e($e,X6),e(X6,YAe),e(YAe,MKr),e(X6,EKr),e(X6,Lre),e(Lre,CKr),e(X6,wKr),e($e,AKr),e($e,z6),e(z6,KAe),e(KAe,LKr),e(z6,yKr),e(z6,yre),e(yre,xKr),e(z6,$Kr),e($e,kKr),e($e,W6),e(W6,ZAe),e(ZAe,SKr),e(W6,RKr),e(W6,xre),e(xre,PKr),e(W6,BKr),e($e,IKr),e($e,Q6),e(Q6,e7e),e(e7e,NKr),e(Q6,qKr),e(Q6,$re),e($re,jKr),e(Q6,DKr),e($e,GKr),e($e,H6),e(H6,o7e),e(o7e,OKr),e(H6,VKr),e(H6,kre),e(kre,XKr),e(H6,zKr),e($e,WKr),e($e,U6),e(U6,r7e),e(r7e,QKr),e(U6,HKr),e(U6,Sre),e(Sre,UKr),e(U6,JKr),e($e,YKr),e($e,J6),e(J6,t7e),e(t7e,KKr),e(J6,ZKr),e(J6,Rre),e(Rre,eZr),e(J6,oZr),e($e,rZr),e($e,Y6),e(Y6,a7e),e(a7e,tZr),e(Y6,aZr),e(Y6,Pre),e(Pre,nZr),e(Y6,sZr),e($e,lZr),e($e,K6),e(K6,n7e),e(n7e,iZr),e(K6,dZr),e(K6,Bre),e(Bre,cZr),e(K6,mZr),e($e,fZr),e($e,Z6),e(Z6,s7e),e(s7e,gZr),e(Z6,hZr),e(Z6,Ire),e(Ire,uZr),e(Z6,pZr),e(Ur,_Zr),M(eA,Ur,null),b(m,AHe,_),b(m,_m,_),e(_m,oA),e(oA,l7e),M(Fk,l7e,null),e(_m,bZr),e(_m,i7e),e(i7e,vZr),b(m,LHe,_),b(m,Mr,_),M(Tk,Mr,null),e(Mr,FZr),e(Mr,bm),e(bm,TZr),e(bm,Nre),e(Nre,MZr),e(bm,EZr),e(bm,qre),e(qre,CZr),e(bm,wZr),e(Mr,AZr),e(Mr,Mk),e(Mk,LZr),e(Mk,d7e),e(d7e,yZr),e(Mk,xZr),e(Mr,$Zr),e(Mr,ea),M(Ek,ea,null),e(ea,kZr),e(ea,c7e),e(c7e,SZr),e(ea,RZr),e(ea,vm),e(vm,PZr),e(vm,m7e),e(m7e,BZr),e(vm,IZr),e(vm,jre),e(jre,NZr),e(vm,qZr),e(ea,jZr),M(rA,ea,null),e(Mr,DZr),e(Mr,Jr),M(Ck,Jr,null),e(Jr,GZr),e(Jr,f7e),e(f7e,OZr),e(Jr,VZr),e(Jr,kn),e(kn,XZr),e(kn,g7e),e(g7e,zZr),e(kn,WZr),e(kn,h7e),e(h7e,QZr),e(kn,HZr),e(kn,u7e),e(u7e,UZr),e(kn,JZr),e(Jr,YZr),e(Jr,ke),e(ke,tA),e(tA,p7e),e(p7e,KZr),e(tA,ZZr),e(tA,Dre),e(Dre,eet),e(tA,oet),e(ke,ret),e(ke,aA),e(aA,_7e),e(_7e,tet),e(aA,aet),e(aA,Gre),e(Gre,net),e(aA,set),e(ke,iet),e(ke,nA),e(nA,b7e),e(b7e,det),e(nA,cet),e(nA,Ore),e(Ore,met),e(nA,fet),e(ke,get),e(ke,sA),e(sA,v7e),e(v7e,het),e(sA,uet),e(sA,Vre),e(Vre,pet),e(sA,_et),e(ke,bet),e(ke,lA),e(lA,F7e),e(F7e,vet),e(lA,Fet),e(lA,Xre),e(Xre,Tet),e(lA,Met),e(ke,Eet),e(ke,iA),e(iA,T7e),e(T7e,Cet),e(iA,wet),e(iA,zre),e(zre,Aet),e(iA,Let),e(ke,yet),e(ke,dA),e(dA,M7e),e(M7e,xet),e(dA,$et),e(dA,Wre),e(Wre,ket),e(dA,Set),e(ke,Ret),e(ke,cA),e(cA,E7e),e(E7e,Pet),e(cA,Bet),e(cA,Qre),e(Qre,Iet),e(cA,Net),e(ke,qet),e(ke,mA),e(mA,C7e),e(C7e,jet),e(mA,Det),e(mA,Hre),e(Hre,Get),e(mA,Oet),e(ke,Vet),e(ke,fA),e(fA,w7e),e(w7e,Xet),e(fA,zet),e(fA,Ure),e(Ure,Wet),e(fA,Qet),e(Jr,Het),M(gA,Jr,null),b(m,yHe,_),b(m,Fm,_),e(Fm,hA),e(hA,A7e),M(wk,A7e,null),e(Fm,Uet),e(Fm,L7e),e(L7e,Jet),b(m,xHe,_),b(m,Er,_),M(Ak,Er,null),e(Er,Yet),e(Er,Tm),e(Tm,Ket),e(Tm,Jre),e(Jre,Zet),e(Tm,eot),e(Tm,Yre),e(Yre,oot),e(Tm,rot),e(Er,tot),e(Er,Lk),e(Lk,aot),e(Lk,y7e),e(y7e,not),e(Lk,sot),e(Er,lot),e(Er,oa),M(yk,oa,null),e(oa,iot),e(oa,x7e),e(x7e,dot),e(oa,cot),e(oa,Mm),e(Mm,mot),e(Mm,$7e),e($7e,fot),e(Mm,got),e(Mm,Kre),e(Kre,hot),e(Mm,uot),e(oa,pot),M(uA,oa,null),e(Er,_ot),e(Er,Yr),M(xk,Yr,null),e(Yr,bot),e(Yr,k7e),e(k7e,vot),e(Yr,Fot),e(Yr,Sn),e(Sn,Tot),e(Sn,S7e),e(S7e,Mot),e(Sn,Eot),e(Sn,R7e),e(R7e,Cot),e(Sn,wot),e(Sn,P7e),e(P7e,Aot),e(Sn,Lot),e(Yr,yot),e(Yr,Se),e(Se,pA),e(pA,B7e),e(B7e,xot),e(pA,$ot),e(pA,Zre),e(Zre,kot),e(pA,Sot),e(Se,Rot),e(Se,_A),e(_A,I7e),e(I7e,Pot),e(_A,Bot),e(_A,ete),e(ete,Iot),e(_A,Not),e(Se,qot),e(Se,bA),e(bA,N7e),e(N7e,jot),e(bA,Dot),e(bA,ote),e(ote,Got),e(bA,Oot),e(Se,Vot),e(Se,vA),e(vA,q7e),e(q7e,Xot),e(vA,zot),e(vA,rte),e(rte,Wot),e(vA,Qot),e(Se,Hot),e(Se,FA),e(FA,j7e),e(j7e,Uot),e(FA,Jot),e(FA,tte),e(tte,Yot),e(FA,Kot),e(Se,Zot),e(Se,TA),e(TA,D7e),e(D7e,ert),e(TA,ort),e(TA,ate),e(ate,rrt),e(TA,trt),e(Se,art),e(Se,MA),e(MA,G7e),e(G7e,nrt),e(MA,srt),e(MA,nte),e(nte,lrt),e(MA,irt),e(Se,drt),e(Se,EA),e(EA,O7e),e(O7e,crt),e(EA,mrt),e(EA,ste),e(ste,frt),e(EA,grt),e(Se,hrt),e(Se,CA),e(CA,V7e),e(V7e,urt),e(CA,prt),e(CA,lte),e(lte,_rt),e(CA,brt),e(Se,vrt),e(Se,wA),e(wA,X7e),e(X7e,Frt),e(wA,Trt),e(wA,ite),e(ite,Mrt),e(wA,Ert),e(Yr,Crt),M(AA,Yr,null),b(m,$He,_),b(m,Em,_),e(Em,LA),e(LA,z7e),M($k,z7e,null),e(Em,wrt),e(Em,W7e),e(W7e,Art),b(m,kHe,_),b(m,Cr,_),M(kk,Cr,null),e(Cr,Lrt),e(Cr,Cm),e(Cm,yrt),e(Cm,dte),e(dte,xrt),e(Cm,$rt),e(Cm,cte),e(cte,krt),e(Cm,Srt),e(Cr,Rrt),e(Cr,Sk),e(Sk,Prt),e(Sk,Q7e),e(Q7e,Brt),e(Sk,Irt),e(Cr,Nrt),e(Cr,ra),M(Rk,ra,null),e(ra,qrt),e(ra,H7e),e(H7e,jrt),e(ra,Drt),e(ra,wm),e(wm,Grt),e(wm,U7e),e(U7e,Ort),e(wm,Vrt),e(wm,mte),e(mte,Xrt),e(wm,zrt),e(ra,Wrt),M(yA,ra,null),e(Cr,Qrt),e(Cr,Kr),M(Pk,Kr,null),e(Kr,Hrt),e(Kr,J7e),e(J7e,Urt),e(Kr,Jrt),e(Kr,Rn),e(Rn,Yrt),e(Rn,Y7e),e(Y7e,Krt),e(Rn,Zrt),e(Rn,K7e),e(K7e,ett),e(Rn,ott),e(Rn,Z7e),e(Z7e,rtt),e(Rn,ttt),e(Kr,att),e(Kr,Re),e(Re,xA),e(xA,eLe),e(eLe,ntt),e(xA,stt),e(xA,fte),e(fte,ltt),e(xA,itt),e(Re,dtt),e(Re,$A),e($A,oLe),e(oLe,ctt),e($A,mtt),e($A,gte),e(gte,ftt),e($A,gtt),e(Re,htt),e(Re,kA),e(kA,rLe),e(rLe,utt),e(kA,ptt),e(kA,hte),e(hte,_tt),e(kA,btt),e(Re,vtt),e(Re,SA),e(SA,tLe),e(tLe,Ftt),e(SA,Ttt),e(SA,ute),e(ute,Mtt),e(SA,Ett),e(Re,Ctt),e(Re,RA),e(RA,aLe),e(aLe,wtt),e(RA,Att),e(RA,pte),e(pte,Ltt),e(RA,ytt),e(Re,xtt),e(Re,PA),e(PA,nLe),e(nLe,$tt),e(PA,ktt),e(PA,_te),e(_te,Stt),e(PA,Rtt),e(Re,Ptt),e(Re,BA),e(BA,sLe),e(sLe,Btt),e(BA,Itt),e(BA,bte),e(bte,Ntt),e(BA,qtt),e(Re,jtt),e(Re,IA),e(IA,lLe),e(lLe,Dtt),e(IA,Gtt),e(IA,vte),e(vte,Ott),e(IA,Vtt),e(Re,Xtt),e(Re,NA),e(NA,iLe),e(iLe,ztt),e(NA,Wtt),e(NA,Fte),e(Fte,Qtt),e(NA,Htt),e(Re,Utt),e(Re,qA),e(qA,dLe),e(dLe,Jtt),e(qA,Ytt),e(qA,Tte),e(Tte,Ktt),e(qA,Ztt),e(Kr,eat),M(jA,Kr,null),b(m,SHe,_),b(m,Am,_),e(Am,DA),e(DA,cLe),M(Bk,cLe,null),e(Am,oat),e(Am,mLe),e(mLe,rat),b(m,RHe,_),b(m,wr,_),M(Ik,wr,null),e(wr,tat),e(wr,Lm),e(Lm,aat),e(Lm,Mte),e(Mte,nat),e(Lm,sat),e(Lm,Ete),e(Ete,lat),e(Lm,iat),e(wr,dat),e(wr,Nk),e(Nk,cat),e(Nk,fLe),e(fLe,mat),e(Nk,fat),e(wr,gat),e(wr,ta),M(qk,ta,null),e(ta,hat),e(ta,gLe),e(gLe,uat),e(ta,pat),e(ta,ym),e(ym,_at),e(ym,hLe),e(hLe,bat),e(ym,vat),e(ym,Cte),e(Cte,Fat),e(ym,Tat),e(ta,Mat),M(GA,ta,null),e(wr,Eat),e(wr,Zr),M(jk,Zr,null),e(Zr,Cat),e(Zr,uLe),e(uLe,wat),e(Zr,Aat),e(Zr,Pn),e(Pn,Lat),e(Pn,pLe),e(pLe,yat),e(Pn,xat),e(Pn,_Le),e(_Le,$at),e(Pn,kat),e(Pn,bLe),e(bLe,Sat),e(Pn,Rat),e(Zr,Pat),e(Zr,Xe),e(Xe,OA),e(OA,vLe),e(vLe,Bat),e(OA,Iat),e(OA,wte),e(wte,Nat),e(OA,qat),e(Xe,jat),e(Xe,VA),e(VA,FLe),e(FLe,Dat),e(VA,Gat),e(VA,Ate),e(Ate,Oat),e(VA,Vat),e(Xe,Xat),e(Xe,XA),e(XA,TLe),e(TLe,zat),e(XA,Wat),e(XA,Lte),e(Lte,Qat),e(XA,Hat),e(Xe,Uat),e(Xe,zA),e(zA,MLe),e(MLe,Jat),e(zA,Yat),e(zA,yte),e(yte,Kat),e(zA,Zat),e(Xe,ent),e(Xe,WA),e(WA,ELe),e(ELe,ont),e(WA,rnt),e(WA,xte),e(xte,tnt),e(WA,ant),e(Xe,nnt),e(Xe,QA),e(QA,CLe),e(CLe,snt),e(QA,lnt),e(QA,$te),e($te,int),e(QA,dnt),e(Xe,cnt),e(Xe,HA),e(HA,wLe),e(wLe,mnt),e(HA,fnt),e(HA,kte),e(kte,gnt),e(HA,hnt),e(Xe,unt),e(Xe,UA),e(UA,ALe),e(ALe,pnt),e(UA,_nt),e(UA,Ste),e(Ste,bnt),e(UA,vnt),e(Zr,Fnt),M(JA,Zr,null),b(m,PHe,_),b(m,xm,_),e(xm,YA),e(YA,LLe),M(Dk,LLe,null),e(xm,Tnt),e(xm,yLe),e(yLe,Mnt),b(m,BHe,_),b(m,Ar,_),M(Gk,Ar,null),e(Ar,Ent),e(Ar,$m),e($m,Cnt),e($m,Rte),e(Rte,wnt),e($m,Ant),e($m,Pte),e(Pte,Lnt),e($m,ynt),e(Ar,xnt),e(Ar,Ok),e(Ok,$nt),e(Ok,xLe),e(xLe,knt),e(Ok,Snt),e(Ar,Rnt),e(Ar,aa),M(Vk,aa,null),e(aa,Pnt),e(aa,$Le),e($Le,Bnt),e(aa,Int),e(aa,km),e(km,Nnt),e(km,kLe),e(kLe,qnt),e(km,jnt),e(km,Bte),e(Bte,Dnt),e(km,Gnt),e(aa,Ont),M(KA,aa,null),e(Ar,Vnt),e(Ar,et),M(Xk,et,null),e(et,Xnt),e(et,SLe),e(SLe,znt),e(et,Wnt),e(et,Bn),e(Bn,Qnt),e(Bn,RLe),e(RLe,Hnt),e(Bn,Unt),e(Bn,PLe),e(PLe,Jnt),e(Bn,Ynt),e(Bn,BLe),e(BLe,Knt),e(Bn,Znt),e(et,est),e(et,ze),e(ze,ZA),e(ZA,ILe),e(ILe,ost),e(ZA,rst),e(ZA,Ite),e(Ite,tst),e(ZA,ast),e(ze,nst),e(ze,e7),e(e7,NLe),e(NLe,sst),e(e7,lst),e(e7,Nte),e(Nte,ist),e(e7,dst),e(ze,cst),e(ze,o7),e(o7,qLe),e(qLe,mst),e(o7,fst),e(o7,qte),e(qte,gst),e(o7,hst),e(ze,ust),e(ze,r7),e(r7,jLe),e(jLe,pst),e(r7,_st),e(r7,jte),e(jte,bst),e(r7,vst),e(ze,Fst),e(ze,t7),e(t7,DLe),e(DLe,Tst),e(t7,Mst),e(t7,Dte),e(Dte,Est),e(t7,Cst),e(ze,wst),e(ze,a7),e(a7,GLe),e(GLe,Ast),e(a7,Lst),e(a7,Gte),e(Gte,yst),e(a7,xst),e(ze,$st),e(ze,n7),e(n7,OLe),e(OLe,kst),e(n7,Sst),e(n7,Ote),e(Ote,Rst),e(n7,Pst),e(ze,Bst),e(ze,s7),e(s7,VLe),e(VLe,Ist),e(s7,Nst),e(s7,Vte),e(Vte,qst),e(s7,jst),e(et,Dst),M(l7,et,null),b(m,IHe,_),b(m,Sm,_),e(Sm,i7),e(i7,XLe),M(zk,XLe,null),e(Sm,Gst),e(Sm,zLe),e(zLe,Ost),b(m,NHe,_),b(m,Lr,_),M(Wk,Lr,null),e(Lr,Vst),e(Lr,Rm),e(Rm,Xst),e(Rm,Xte),e(Xte,zst),e(Rm,Wst),e(Rm,zte),e(zte,Qst),e(Rm,Hst),e(Lr,Ust),e(Lr,Qk),e(Qk,Jst),e(Qk,WLe),e(WLe,Yst),e(Qk,Kst),e(Lr,Zst),e(Lr,na),M(Hk,na,null),e(na,elt),e(na,QLe),e(QLe,olt),e(na,rlt),e(na,Pm),e(Pm,tlt),e(Pm,HLe),e(HLe,alt),e(Pm,nlt),e(Pm,Wte),e(Wte,slt),e(Pm,llt),e(na,ilt),M(d7,na,null),e(Lr,dlt),e(Lr,ot),M(Uk,ot,null),e(ot,clt),e(ot,ULe),e(ULe,mlt),e(ot,flt),e(ot,In),e(In,glt),e(In,JLe),e(JLe,hlt),e(In,ult),e(In,YLe),e(YLe,plt),e(In,_lt),e(In,KLe),e(KLe,blt),e(In,vlt),e(ot,Flt),e(ot,ZLe),e(ZLe,c7),e(c7,eye),e(eye,Tlt),e(c7,Mlt),e(c7,Qte),e(Qte,Elt),e(c7,Clt),e(ot,wlt),M(m7,ot,null),b(m,qHe,_),b(m,Bm,_),e(Bm,f7),e(f7,oye),M(Jk,oye,null),e(Bm,Alt),e(Bm,rye),e(rye,Llt),b(m,jHe,_),b(m,yr,_),M(Yk,yr,null),e(yr,ylt),e(yr,Im),e(Im,xlt),e(Im,Hte),e(Hte,$lt),e(Im,klt),e(Im,Ute),e(Ute,Slt),e(Im,Rlt),e(yr,Plt),e(yr,Kk),e(Kk,Blt),e(Kk,tye),e(tye,Ilt),e(Kk,Nlt),e(yr,qlt),e(yr,sa),M(Zk,sa,null),e(sa,jlt),e(sa,aye),e(aye,Dlt),e(sa,Glt),e(sa,Nm),e(Nm,Olt),e(Nm,nye),e(nye,Vlt),e(Nm,Xlt),e(Nm,Jte),e(Jte,zlt),e(Nm,Wlt),e(sa,Qlt),M(g7,sa,null),e(yr,Hlt),e(yr,rt),M(eS,rt,null),e(rt,Ult),e(rt,sye),e(sye,Jlt),e(rt,Ylt),e(rt,Nn),e(Nn,Klt),e(Nn,lye),e(lye,Zlt),e(Nn,eit),e(Nn,iye),e(iye,oit),e(Nn,rit),e(Nn,dye),e(dye,tit),e(Nn,ait),e(rt,nit),e(rt,oS),e(oS,h7),e(h7,cye),e(cye,sit),e(h7,lit),e(h7,Yte),e(Yte,iit),e(h7,dit),e(oS,cit),e(oS,u7),e(u7,mye),e(mye,mit),e(u7,fit),e(u7,Kte),e(Kte,git),e(u7,hit),e(rt,uit),M(p7,rt,null),b(m,DHe,_),b(m,qm,_),e(qm,_7),e(_7,fye),M(rS,fye,null),e(qm,pit),e(qm,gye),e(gye,_it),b(m,GHe,_),b(m,xr,_),M(tS,xr,null),e(xr,bit),e(xr,jm),e(jm,vit),e(jm,Zte),e(Zte,Fit),e(jm,Tit),e(jm,eae),e(eae,Mit),e(jm,Eit),e(xr,Cit),e(xr,aS),e(aS,wit),e(aS,hye),e(hye,Ait),e(aS,Lit),e(xr,yit),e(xr,la),M(nS,la,null),e(la,xit),e(la,uye),e(uye,$it),e(la,kit),e(la,Dm),e(Dm,Sit),e(Dm,pye),e(pye,Rit),e(Dm,Pit),e(Dm,oae),e(oae,Bit),e(Dm,Iit),e(la,Nit),M(b7,la,null),e(xr,qit),e(xr,tt),M(sS,tt,null),e(tt,jit),e(tt,_ye),e(_ye,Dit),e(tt,Git),e(tt,qn),e(qn,Oit),e(qn,bye),e(bye,Vit),e(qn,Xit),e(qn,vye),e(vye,zit),e(qn,Wit),e(qn,Fye),e(Fye,Qit),e(qn,Hit),e(tt,Uit),e(tt,Tye),e(Tye,v7),e(v7,Mye),e(Mye,Jit),e(v7,Yit),e(v7,rae),e(rae,Kit),e(v7,Zit),e(tt,edt),M(F7,tt,null),OHe=!0},p(m,[_]){const lS={};_&2&&(lS.$$scope={dirty:_,ctx:m}),Um.$set(lS);const Eye={};_&2&&(Eye.$$scope={dirty:_,ctx:m}),mh.$set(Eye);const Cye={};_&2&&(Cye.$$scope={dirty:_,ctx:m}),Qh.$set(Cye);const wye={};_&2&&(wye.$$scope={dirty:_,ctx:m}),Ru.$set(wye);const iS={};_&2&&(iS.$$scope={dirty:_,ctx:m}),Pu.$set(iS);const Aye={};_&2&&(Aye.$$scope={dirty:_,ctx:m}),rp.$set(Aye);const jn={};_&2&&(jn.$$scope={dirty:_,ctx:m}),tp.$set(jn);const Lye={};_&2&&(Lye.$$scope={dirty:_,ctx:m}),sp.$set(Lye);const yye={};_&2&&(yye.$$scope={dirty:_,ctx:m}),h2.$set(yye);const xye={};_&2&&(xye.$$scope={dirty:_,ctx:m}),p2.$set(xye);const dS={};_&2&&(dS.$$scope={dirty:_,ctx:m}),mb.$set(dS);const $ye={};_&2&&($ye.$$scope={dirty:_,ctx:m}),gb.$set($ye);const cS={};_&2&&(cS.$$scope={dirty:_,ctx:m}),ov.$set(cS);const kye={};_&2&&(kye.$$scope={dirty:_,ctx:m}),tv.$set(kye);const mS={};_&2&&(mS.$$scope={dirty:_,ctx:m}),Vv.$set(mS);const Sye={};_&2&&(Sye.$$scope={dirty:_,ctx:m}),zv.$set(Sye);const Rye={};_&2&&(Rye.$$scope={dirty:_,ctx:m}),f1.$set(Rye);const Pye={};_&2&&(Pye.$$scope={dirty:_,ctx:m}),h1.$set(Pye);const Gm={};_&2&&(Gm.$$scope={dirty:_,ctx:m}),hF.$set(Gm);const Bye={};_&2&&(Bye.$$scope={dirty:_,ctx:m}),pF.$set(Bye);const Iye={};_&2&&(Iye.$$scope={dirty:_,ctx:m}),UF.$set(Iye);const Nye={};_&2&&(Nye.$$scope={dirty:_,ctx:m}),YF.$set(Nye);const fS={};_&2&&(fS.$$scope={dirty:_,ctx:m}),nT.$set(fS);const qye={};_&2&&(qye.$$scope={dirty:_,ctx:m}),lT.$set(qye);const jye={};_&2&&(jye.$$scope={dirty:_,ctx:m}),WT.$set(jye);const Dye={};_&2&&(Dye.$$scope={dirty:_,ctx:m}),HT.$set(Dye);const lt={};_&2&&(lt.$$scope={dirty:_,ctx:m}),jM.$set(lt);const gS={};_&2&&(gS.$$scope={dirty:_,ctx:m}),GM.$set(gS);const Gye={};_&2&&(Gye.$$scope={dirty:_,ctx:m}),XM.$set(Gye);const hS={};_&2&&(hS.$$scope={dirty:_,ctx:m}),WM.$set(hS);const Oye={};_&2&&(Oye.$$scope={dirty:_,ctx:m}),iE.$set(Oye);const it={};_&2&&(it.$$scope={dirty:_,ctx:m}),cE.$set(it);const Vye={};_&2&&(Vye.$$scope={dirty:_,ctx:m}),gE.$set(Vye);const Om={};_&2&&(Om.$$scope={dirty:_,ctx:m}),uE.$set(Om);const Xye={};_&2&&(Xye.$$scope={dirty:_,ctx:m}),bE.$set(Xye);const zye={};_&2&&(zye.$$scope={dirty:_,ctx:m}),FE.$set(zye);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),EE.$set(L);const T7={};_&2&&(T7.$$scope={dirty:_,ctx:m}),wE.$set(T7);const Wye={};_&2&&(Wye.$$scope={dirty:_,ctx:m}),IE.$set(Wye);const Qye={};_&2&&(Qye.$$scope={dirty:_,ctx:m}),qE.$set(Qye);const M7={};_&2&&(M7.$$scope={dirty:_,ctx:m}),zE.$set(M7);const Hye={};_&2&&(Hye.$$scope={dirty:_,ctx:m}),QE.$set(Hye);const Uye={};_&2&&(Uye.$$scope={dirty:_,ctx:m}),n4.$set(Uye);const E7={};_&2&&(E7.$$scope={dirty:_,ctx:m}),l4.$set(E7);const Jye={};_&2&&(Jye.$$scope={dirty:_,ctx:m}),m4.$set(Jye);const Yye={};_&2&&(Yye.$$scope={dirty:_,ctx:m}),g4.$set(Yye);const C7={};_&2&&(C7.$$scope={dirty:_,ctx:m}),F4.$set(C7);const Kye={};_&2&&(Kye.$$scope={dirty:_,ctx:m}),M4.$set(Kye);const Zye={};_&2&&(Zye.$$scope={dirty:_,ctx:m}),y4.$set(Zye);const w7={};_&2&&(w7.$$scope={dirty:_,ctx:m}),$4.$set(w7);const e8e={};_&2&&(e8e.$$scope={dirty:_,ctx:m}),P4.$set(e8e);const o8e={};_&2&&(o8e.$$scope={dirty:_,ctx:m}),I4.$set(o8e);const A7={};_&2&&(A7.$$scope={dirty:_,ctx:m}),j4.$set(A7);const r8e={};_&2&&(r8e.$$scope={dirty:_,ctx:m}),G4.$set(r8e);const t8e={};_&2&&(t8e.$$scope={dirty:_,ctx:m}),H4.$set(t8e);const L7={};_&2&&(L7.$$scope={dirty:_,ctx:m}),J4.$set(L7);const a8e={};_&2&&(a8e.$$scope={dirty:_,ctx:m}),Z4.$set(a8e);const n8e={};_&2&&(n8e.$$scope={dirty:_,ctx:m}),oC.$set(n8e);const y7={};_&2&&(y7.$$scope={dirty:_,ctx:m}),KC.$set(y7);const s8e={};_&2&&(s8e.$$scope={dirty:_,ctx:m}),e5.$set(s8e);const l8e={};_&2&&(l8e.$$scope={dirty:_,ctx:m}),C5.$set(l8e);const x7={};_&2&&(x7.$$scope={dirty:_,ctx:m}),A5.$set(x7);const i8e={};_&2&&(i8e.$$scope={dirty:_,ctx:m}),D5.$set(i8e);const d8e={};_&2&&(d8e.$$scope={dirty:_,ctx:m}),O5.$set(d8e);const $7={};_&2&&($7.$$scope={dirty:_,ctx:m}),J5.$set($7);const c8e={};_&2&&(c8e.$$scope={dirty:_,ctx:m}),K5.$set(c8e);const m8e={};_&2&&(m8e.$$scope={dirty:_,ctx:m}),v3.$set(m8e);const k7={};_&2&&(k7.$$scope={dirty:_,ctx:m}),T3.$set(k7);const f8e={};_&2&&(f8e.$$scope={dirty:_,ctx:m}),S3.$set(f8e);const g8e={};_&2&&(g8e.$$scope={dirty:_,ctx:m}),P3.$set(g8e);const S7={};_&2&&(S7.$$scope={dirty:_,ctx:m}),l0.$set(S7);const h8e={};_&2&&(h8e.$$scope={dirty:_,ctx:m}),d0.$set(h8e);const u8e={};_&2&&(u8e.$$scope={dirty:_,ctx:m}),L0.$set(u8e);const R7={};_&2&&(R7.$$scope={dirty:_,ctx:m}),x0.$set(R7);const p8e={};_&2&&(p8e.$$scope={dirty:_,ctx:m}),S0.$set(p8e);const _8e={};_&2&&(_8e.$$scope={dirty:_,ctx:m}),P0.$set(_8e);const P7={};_&2&&(P7.$$scope={dirty:_,ctx:m}),I0.$set(P7);const b8e={};_&2&&(b8e.$$scope={dirty:_,ctx:m}),q0.$set(b8e);const v8e={};_&2&&(v8e.$$scope={dirty:_,ctx:m}),nw.$set(v8e);const B7={};_&2&&(B7.$$scope={dirty:_,ctx:m}),lw.$set(B7);const F8e={};_&2&&(F8e.$$scope={dirty:_,ctx:m}),yw.$set(F8e);const T8e={};_&2&&(T8e.$$scope={dirty:_,ctx:m}),$w.$set(T8e);const I7={};_&2&&(I7.$$scope={dirty:_,ctx:m}),Sw.$set(I7);const M8e={};_&2&&(M8e.$$scope={dirty:_,ctx:m}),Pw.$set(M8e);const E8e={};_&2&&(E8e.$$scope={dirty:_,ctx:m}),Iw.$set(E8e);const N7={};_&2&&(N7.$$scope={dirty:_,ctx:m}),qw.$set(N7);const C8e={};_&2&&(C8e.$$scope={dirty:_,ctx:m}),f6.$set(C8e);const w8e={};_&2&&(w8e.$$scope={dirty:_,ctx:m}),h6.$set(w8e);const q7={};_&2&&(q7.$$scope={dirty:_,ctx:m}),w6.$set(q7);const A8e={};_&2&&(A8e.$$scope={dirty:_,ctx:m}),L6.$set(A8e);const L8e={};_&2&&(L8e.$$scope={dirty:_,ctx:m}),G6.$set(L8e);const j7={};_&2&&(j7.$$scope={dirty:_,ctx:m}),V6.$set(j7);const y8e={};_&2&&(y8e.$$scope={dirty:_,ctx:m}),eA.$set(y8e);const x8e={};_&2&&(x8e.$$scope={dirty:_,ctx:m}),rA.$set(x8e);const D7={};_&2&&(D7.$$scope={dirty:_,ctx:m}),gA.$set(D7);const $8e={};_&2&&($8e.$$scope={dirty:_,ctx:m}),uA.$set($8e);const k8e={};_&2&&(k8e.$$scope={dirty:_,ctx:m}),AA.$set(k8e);const G7={};_&2&&(G7.$$scope={dirty:_,ctx:m}),yA.$set(G7);const S8e={};_&2&&(S8e.$$scope={dirty:_,ctx:m}),jA.$set(S8e);const R8e={};_&2&&(R8e.$$scope={dirty:_,ctx:m}),GA.$set(R8e);const O7={};_&2&&(O7.$$scope={dirty:_,ctx:m}),JA.$set(O7);const P8e={};_&2&&(P8e.$$scope={dirty:_,ctx:m}),KA.$set(P8e);const B8e={};_&2&&(B8e.$$scope={dirty:_,ctx:m}),l7.$set(B8e);const V7={};_&2&&(V7.$$scope={dirty:_,ctx:m}),d7.$set(V7);const I8e={};_&2&&(I8e.$$scope={dirty:_,ctx:m}),m7.$set(I8e);const N8e={};_&2&&(N8e.$$scope={dirty:_,ctx:m}),g7.$set(N8e);const X7={};_&2&&(X7.$$scope={dirty:_,ctx:m}),p7.$set(X7);const q8e={};_&2&&(q8e.$$scope={dirty:_,ctx:m}),b7.$set(q8e);const j8e={};_&2&&(j8e.$$scope={dirty:_,ctx:m}),F7.$set(j8e)},i(m){OHe||(E(d.$$.fragment,m),E(Ia.$$.fragment,m),E(Wy.$$.fragment,m),E(Qy.$$.fragment,m),E(Um.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Ky.$$.fragment,m),E(mh.$$.fragment,m),E(Zy.$$.fragment,m),E(e8.$$.fragment,m),E(o8.$$.fragment,m),E(a8.$$.fragment,m),E(Qh.$$.fragment,m),E(n8.$$.fragment,m),E(s8.$$.fragment,m),E(l8.$$.fragment,m),E(c8.$$.fragment,m),E(Ru.$$.fragment,m),E(Pu.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(g8.$$.fragment,m),E(p8.$$.fragment,m),E(rp.$$.fragment,m),E(tp.$$.fragment,m),E(_8.$$.fragment,m),E(b8.$$.fragment,m),E(v8.$$.fragment,m),E(T8.$$.fragment,m),E(sp.$$.fragment,m),E(M8.$$.fragment,m),E(h2.$$.fragment,m),E(E8.$$.fragment,m),E(C8.$$.fragment,m),E(A8.$$.fragment,m),E(p2.$$.fragment,m),E(L8.$$.fragment,m),E(mb.$$.fragment,m),E(y8.$$.fragment,m),E(x8.$$.fragment,m),E(k8.$$.fragment,m),E(gb.$$.fragment,m),E(S8.$$.fragment,m),E(ov.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(I8.$$.fragment,m),E(tv.$$.fragment,m),E(N8.$$.fragment,m),E(Vv.$$.fragment,m),E(q8.$$.fragment,m),E(j8.$$.fragment,m),E(G8.$$.fragment,m),E(zv.$$.fragment,m),E(O8.$$.fragment,m),E(f1.$$.fragment,m),E(V8.$$.fragment,m),E(X8.$$.fragment,m),E(W8.$$.fragment,m),E(h1.$$.fragment,m),E(Q8.$$.fragment,m),E(hF.$$.fragment,m),E(H8.$$.fragment,m),E(U8.$$.fragment,m),E(Y8.$$.fragment,m),E(pF.$$.fragment,m),E(K8.$$.fragment,m),E(UF.$$.fragment,m),E(Z8.$$.fragment,m),E(e9.$$.fragment,m),E(r9.$$.fragment,m),E(YF.$$.fragment,m),E(t9.$$.fragment,m),E(nT.$$.fragment,m),E(a9.$$.fragment,m),E(n9.$$.fragment,m),E(l9.$$.fragment,m),E(lT.$$.fragment,m),E(i9.$$.fragment,m),E(WT.$$.fragment,m),E(d9.$$.fragment,m),E(c9.$$.fragment,m),E(f9.$$.fragment,m),E(HT.$$.fragment,m),E(g9.$$.fragment,m),E(jM.$$.fragment,m),E(h9.$$.fragment,m),E(u9.$$.fragment,m),E(_9.$$.fragment,m),E(GM.$$.fragment,m),E(b9.$$.fragment,m),E(XM.$$.fragment,m),E(v9.$$.fragment,m),E(F9.$$.fragment,m),E(M9.$$.fragment,m),E(WM.$$.fragment,m),E(E9.$$.fragment,m),E(iE.$$.fragment,m),E(C9.$$.fragment,m),E(w9.$$.fragment,m),E(L9.$$.fragment,m),E(cE.$$.fragment,m),E(y9.$$.fragment,m),E(gE.$$.fragment,m),E(x9.$$.fragment,m),E($9.$$.fragment,m),E(S9.$$.fragment,m),E(uE.$$.fragment,m),E(R9.$$.fragment,m),E(bE.$$.fragment,m),E(P9.$$.fragment,m),E(B9.$$.fragment,m),E(N9.$$.fragment,m),E(FE.$$.fragment,m),E(q9.$$.fragment,m),E(EE.$$.fragment,m),E(j9.$$.fragment,m),E(D9.$$.fragment,m),E(O9.$$.fragment,m),E(wE.$$.fragment,m),E(V9.$$.fragment,m),E(IE.$$.fragment,m),E(X9.$$.fragment,m),E(z9.$$.fragment,m),E(Q9.$$.fragment,m),E(qE.$$.fragment,m),E(H9.$$.fragment,m),E(zE.$$.fragment,m),E(U9.$$.fragment,m),E(J9.$$.fragment,m),E(K9.$$.fragment,m),E(QE.$$.fragment,m),E(Z9.$$.fragment,m),E(n4.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(tx.$$.fragment,m),E(l4.$$.fragment,m),E(ax.$$.fragment,m),E(m4.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(dx.$$.fragment,m),E(g4.$$.fragment,m),E(cx.$$.fragment,m),E(F4.$$.fragment,m),E(mx.$$.fragment,m),E(fx.$$.fragment,m),E(hx.$$.fragment,m),E(M4.$$.fragment,m),E(ux.$$.fragment,m),E(y4.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(vx.$$.fragment,m),E($4.$$.fragment,m),E(Fx.$$.fragment,m),E(P4.$$.fragment,m),E(Mx.$$.fragment,m),E(Ex.$$.fragment,m),E(wx.$$.fragment,m),E(I4.$$.fragment,m),E(Ax.$$.fragment,m),E(j4.$$.fragment,m),E(Lx.$$.fragment,m),E(yx.$$.fragment,m),E($x.$$.fragment,m),E(G4.$$.fragment,m),E(kx.$$.fragment,m),E(H4.$$.fragment,m),E(Sx.$$.fragment,m),E(Rx.$$.fragment,m),E(Bx.$$.fragment,m),E(J4.$$.fragment,m),E(Ix.$$.fragment,m),E(Z4.$$.fragment,m),E(Nx.$$.fragment,m),E(qx.$$.fragment,m),E(Dx.$$.fragment,m),E(oC.$$.fragment,m),E(Gx.$$.fragment,m),E(KC.$$.fragment,m),E(Ox.$$.fragment,m),E(Vx.$$.fragment,m),E(zx.$$.fragment,m),E(e5.$$.fragment,m),E(Wx.$$.fragment,m),E(C5.$$.fragment,m),E(Qx.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(A5.$$.fragment,m),E(Yx.$$.fragment,m),E(D5.$$.fragment,m),E(Kx.$$.fragment,m),E(Zx.$$.fragment,m),E(o$.$$.fragment,m),E(O5.$$.fragment,m),E(r$.$$.fragment,m),E(J5.$$.fragment,m),E(t$.$$.fragment,m),E(a$.$$.fragment,m),E(s$.$$.fragment,m),E(K5.$$.fragment,m),E(l$.$$.fragment,m),E(v3.$$.fragment,m),E(i$.$$.fragment,m),E(d$.$$.fragment,m),E(m$.$$.fragment,m),E(T3.$$.fragment,m),E(f$.$$.fragment,m),E(S3.$$.fragment,m),E(g$.$$.fragment,m),E(h$.$$.fragment,m),E(p$.$$.fragment,m),E(P3.$$.fragment,m),E(_$.$$.fragment,m),E(l0.$$.fragment,m),E(b$.$$.fragment,m),E(v$.$$.fragment,m),E(T$.$$.fragment,m),E(d0.$$.fragment,m),E(M$.$$.fragment,m),E(L0.$$.fragment,m),E(E$.$$.fragment,m),E(C$.$$.fragment,m),E(A$.$$.fragment,m),E(x0.$$.fragment,m),E(L$.$$.fragment,m),E(S0.$$.fragment,m),E(x$.$$.fragment,m),E($$.$$.fragment,m),E(S$.$$.fragment,m),E(P0.$$.fragment,m),E(R$.$$.fragment,m),E(I0.$$.fragment,m),E(P$.$$.fragment,m),E(B$.$$.fragment,m),E(N$.$$.fragment,m),E(q0.$$.fragment,m),E(q$.$$.fragment,m),E(nw.$$.fragment,m),E(j$.$$.fragment,m),E(D$.$$.fragment,m),E(O$.$$.fragment,m),E(lw.$$.fragment,m),E(V$.$$.fragment,m),E(yw.$$.fragment,m),E(X$.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E($w.$$.fragment,m),E(H$.$$.fragment,m),E(Sw.$$.fragment,m),E(U$.$$.fragment,m),E(J$.$$.fragment,m),E(K$.$$.fragment,m),E(Pw.$$.fragment,m),E(Z$.$$.fragment,m),E(Iw.$$.fragment,m),E(ek.$$.fragment,m),E(ok.$$.fragment,m),E(tk.$$.fragment,m),E(qw.$$.fragment,m),E(ak.$$.fragment,m),E(f6.$$.fragment,m),E(nk.$$.fragment,m),E(sk.$$.fragment,m),E(ik.$$.fragment,m),E(h6.$$.fragment,m),E(dk.$$.fragment,m),E(w6.$$.fragment,m),E(ck.$$.fragment,m),E(mk.$$.fragment,m),E(gk.$$.fragment,m),E(L6.$$.fragment,m),E(hk.$$.fragment,m),E(G6.$$.fragment,m),E(uk.$$.fragment,m),E(pk.$$.fragment,m),E(bk.$$.fragment,m),E(V6.$$.fragment,m),E(vk.$$.fragment,m),E(eA.$$.fragment,m),E(Fk.$$.fragment,m),E(Tk.$$.fragment,m),E(Ek.$$.fragment,m),E(rA.$$.fragment,m),E(Ck.$$.fragment,m),E(gA.$$.fragment,m),E(wk.$$.fragment,m),E(Ak.$$.fragment,m),E(yk.$$.fragment,m),E(uA.$$.fragment,m),E(xk.$$.fragment,m),E(AA.$$.fragment,m),E($k.$$.fragment,m),E(kk.$$.fragment,m),E(Rk.$$.fragment,m),E(yA.$$.fragment,m),E(Pk.$$.fragment,m),E(jA.$$.fragment,m),E(Bk.$$.fragment,m),E(Ik.$$.fragment,m),E(qk.$$.fragment,m),E(GA.$$.fragment,m),E(jk.$$.fragment,m),E(JA.$$.fragment,m),E(Dk.$$.fragment,m),E(Gk.$$.fragment,m),E(Vk.$$.fragment,m),E(KA.$$.fragment,m),E(Xk.$$.fragment,m),E(l7.$$.fragment,m),E(zk.$$.fragment,m),E(Wk.$$.fragment,m),E(Hk.$$.fragment,m),E(d7.$$.fragment,m),E(Uk.$$.fragment,m),E(m7.$$.fragment,m),E(Jk.$$.fragment,m),E(Yk.$$.fragment,m),E(Zk.$$.fragment,m),E(g7.$$.fragment,m),E(eS.$$.fragment,m),E(p7.$$.fragment,m),E(rS.$$.fragment,m),E(tS.$$.fragment,m),E(nS.$$.fragment,m),E(b7.$$.fragment,m),E(sS.$$.fragment,m),E(F7.$$.fragment,m),OHe=!0)},o(m){C(d.$$.fragment,m),C(Ia.$$.fragment,m),C(Wy.$$.fragment,m),C(Qy.$$.fragment,m),C(Um.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Ky.$$.fragment,m),C(mh.$$.fragment,m),C(Zy.$$.fragment,m),C(e8.$$.fragment,m),C(o8.$$.fragment,m),C(a8.$$.fragment,m),C(Qh.$$.fragment,m),C(n8.$$.fragment,m),C(s8.$$.fragment,m),C(l8.$$.fragment,m),C(c8.$$.fragment,m),C(Ru.$$.fragment,m),C(Pu.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(g8.$$.fragment,m),C(p8.$$.fragment,m),C(rp.$$.fragment,m),C(tp.$$.fragment,m),C(_8.$$.fragment,m),C(b8.$$.fragment,m),C(v8.$$.fragment,m),C(T8.$$.fragment,m),C(sp.$$.fragment,m),C(M8.$$.fragment,m),C(h2.$$.fragment,m),C(E8.$$.fragment,m),C(C8.$$.fragment,m),C(A8.$$.fragment,m),C(p2.$$.fragment,m),C(L8.$$.fragment,m),C(mb.$$.fragment,m),C(y8.$$.fragment,m),C(x8.$$.fragment,m),C(k8.$$.fragment,m),C(gb.$$.fragment,m),C(S8.$$.fragment,m),C(ov.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(I8.$$.fragment,m),C(tv.$$.fragment,m),C(N8.$$.fragment,m),C(Vv.$$.fragment,m),C(q8.$$.fragment,m),C(j8.$$.fragment,m),C(G8.$$.fragment,m),C(zv.$$.fragment,m),C(O8.$$.fragment,m),C(f1.$$.fragment,m),C(V8.$$.fragment,m),C(X8.$$.fragment,m),C(W8.$$.fragment,m),C(h1.$$.fragment,m),C(Q8.$$.fragment,m),C(hF.$$.fragment,m),C(H8.$$.fragment,m),C(U8.$$.fragment,m),C(Y8.$$.fragment,m),C(pF.$$.fragment,m),C(K8.$$.fragment,m),C(UF.$$.fragment,m),C(Z8.$$.fragment,m),C(e9.$$.fragment,m),C(r9.$$.fragment,m),C(YF.$$.fragment,m),C(t9.$$.fragment,m),C(nT.$$.fragment,m),C(a9.$$.fragment,m),C(n9.$$.fragment,m),C(l9.$$.fragment,m),C(lT.$$.fragment,m),C(i9.$$.fragment,m),C(WT.$$.fragment,m),C(d9.$$.fragment,m),C(c9.$$.fragment,m),C(f9.$$.fragment,m),C(HT.$$.fragment,m),C(g9.$$.fragment,m),C(jM.$$.fragment,m),C(h9.$$.fragment,m),C(u9.$$.fragment,m),C(_9.$$.fragment,m),C(GM.$$.fragment,m),C(b9.$$.fragment,m),C(XM.$$.fragment,m),C(v9.$$.fragment,m),C(F9.$$.fragment,m),C(M9.$$.fragment,m),C(WM.$$.fragment,m),C(E9.$$.fragment,m),C(iE.$$.fragment,m),C(C9.$$.fragment,m),C(w9.$$.fragment,m),C(L9.$$.fragment,m),C(cE.$$.fragment,m),C(y9.$$.fragment,m),C(gE.$$.fragment,m),C(x9.$$.fragment,m),C($9.$$.fragment,m),C(S9.$$.fragment,m),C(uE.$$.fragment,m),C(R9.$$.fragment,m),C(bE.$$.fragment,m),C(P9.$$.fragment,m),C(B9.$$.fragment,m),C(N9.$$.fragment,m),C(FE.$$.fragment,m),C(q9.$$.fragment,m),C(EE.$$.fragment,m),C(j9.$$.fragment,m),C(D9.$$.fragment,m),C(O9.$$.fragment,m),C(wE.$$.fragment,m),C(V9.$$.fragment,m),C(IE.$$.fragment,m),C(X9.$$.fragment,m),C(z9.$$.fragment,m),C(Q9.$$.fragment,m),C(qE.$$.fragment,m),C(H9.$$.fragment,m),C(zE.$$.fragment,m),C(U9.$$.fragment,m),C(J9.$$.fragment,m),C(K9.$$.fragment,m),C(QE.$$.fragment,m),C(Z9.$$.fragment,m),C(n4.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(tx.$$.fragment,m),C(l4.$$.fragment,m),C(ax.$$.fragment,m),C(m4.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(dx.$$.fragment,m),C(g4.$$.fragment,m),C(cx.$$.fragment,m),C(F4.$$.fragment,m),C(mx.$$.fragment,m),C(fx.$$.fragment,m),C(hx.$$.fragment,m),C(M4.$$.fragment,m),C(ux.$$.fragment,m),C(y4.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(vx.$$.fragment,m),C($4.$$.fragment,m),C(Fx.$$.fragment,m),C(P4.$$.fragment,m),C(Mx.$$.fragment,m),C(Ex.$$.fragment,m),C(wx.$$.fragment,m),C(I4.$$.fragment,m),C(Ax.$$.fragment,m),C(j4.$$.fragment,m),C(Lx.$$.fragment,m),C(yx.$$.fragment,m),C($x.$$.fragment,m),C(G4.$$.fragment,m),C(kx.$$.fragment,m),C(H4.$$.fragment,m),C(Sx.$$.fragment,m),C(Rx.$$.fragment,m),C(Bx.$$.fragment,m),C(J4.$$.fragment,m),C(Ix.$$.fragment,m),C(Z4.$$.fragment,m),C(Nx.$$.fragment,m),C(qx.$$.fragment,m),C(Dx.$$.fragment,m),C(oC.$$.fragment,m),C(Gx.$$.fragment,m),C(KC.$$.fragment,m),C(Ox.$$.fragment,m),C(Vx.$$.fragment,m),C(zx.$$.fragment,m),C(e5.$$.fragment,m),C(Wx.$$.fragment,m),C(C5.$$.fragment,m),C(Qx.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(A5.$$.fragment,m),C(Yx.$$.fragment,m),C(D5.$$.fragment,m),C(Kx.$$.fragment,m),C(Zx.$$.fragment,m),C(o$.$$.fragment,m),C(O5.$$.fragment,m),C(r$.$$.fragment,m),C(J5.$$.fragment,m),C(t$.$$.fragment,m),C(a$.$$.fragment,m),C(s$.$$.fragment,m),C(K5.$$.fragment,m),C(l$.$$.fragment,m),C(v3.$$.fragment,m),C(i$.$$.fragment,m),C(d$.$$.fragment,m),C(m$.$$.fragment,m),C(T3.$$.fragment,m),C(f$.$$.fragment,m),C(S3.$$.fragment,m),C(g$.$$.fragment,m),C(h$.$$.fragment,m),C(p$.$$.fragment,m),C(P3.$$.fragment,m),C(_$.$$.fragment,m),C(l0.$$.fragment,m),C(b$.$$.fragment,m),C(v$.$$.fragment,m),C(T$.$$.fragment,m),C(d0.$$.fragment,m),C(M$.$$.fragment,m),C(L0.$$.fragment,m),C(E$.$$.fragment,m),C(C$.$$.fragment,m),C(A$.$$.fragment,m),C(x0.$$.fragment,m),C(L$.$$.fragment,m),C(S0.$$.fragment,m),C(x$.$$.fragment,m),C($$.$$.fragment,m),C(S$.$$.fragment,m),C(P0.$$.fragment,m),C(R$.$$.fragment,m),C(I0.$$.fragment,m),C(P$.$$.fragment,m),C(B$.$$.fragment,m),C(N$.$$.fragment,m),C(q0.$$.fragment,m),C(q$.$$.fragment,m),C(nw.$$.fragment,m),C(j$.$$.fragment,m),C(D$.$$.fragment,m),C(O$.$$.fragment,m),C(lw.$$.fragment,m),C(V$.$$.fragment,m),C(yw.$$.fragment,m),C(X$.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C($w.$$.fragment,m),C(H$.$$.fragment,m),C(Sw.$$.fragment,m),C(U$.$$.fragment,m),C(J$.$$.fragment,m),C(K$.$$.fragment,m),C(Pw.$$.fragment,m),C(Z$.$$.fragment,m),C(Iw.$$.fragment,m),C(ek.$$.fragment,m),C(ok.$$.fragment,m),C(tk.$$.fragment,m),C(qw.$$.fragment,m),C(ak.$$.fragment,m),C(f6.$$.fragment,m),C(nk.$$.fragment,m),C(sk.$$.fragment,m),C(ik.$$.fragment,m),C(h6.$$.fragment,m),C(dk.$$.fragment,m),C(w6.$$.fragment,m),C(ck.$$.fragment,m),C(mk.$$.fragment,m),C(gk.$$.fragment,m),C(L6.$$.fragment,m),C(hk.$$.fragment,m),C(G6.$$.fragment,m),C(uk.$$.fragment,m),C(pk.$$.fragment,m),C(bk.$$.fragment,m),C(V6.$$.fragment,m),C(vk.$$.fragment,m),C(eA.$$.fragment,m),C(Fk.$$.fragment,m),C(Tk.$$.fragment,m),C(Ek.$$.fragment,m),C(rA.$$.fragment,m),C(Ck.$$.fragment,m),C(gA.$$.fragment,m),C(wk.$$.fragment,m),C(Ak.$$.fragment,m),C(yk.$$.fragment,m),C(uA.$$.fragment,m),C(xk.$$.fragment,m),C(AA.$$.fragment,m),C($k.$$.fragment,m),C(kk.$$.fragment,m),C(Rk.$$.fragment,m),C(yA.$$.fragment,m),C(Pk.$$.fragment,m),C(jA.$$.fragment,m),C(Bk.$$.fragment,m),C(Ik.$$.fragment,m),C(qk.$$.fragment,m),C(GA.$$.fragment,m),C(jk.$$.fragment,m),C(JA.$$.fragment,m),C(Dk.$$.fragment,m),C(Gk.$$.fragment,m),C(Vk.$$.fragment,m),C(KA.$$.fragment,m),C(Xk.$$.fragment,m),C(l7.$$.fragment,m),C(zk.$$.fragment,m),C(Wk.$$.fragment,m),C(Hk.$$.fragment,m),C(d7.$$.fragment,m),C(Uk.$$.fragment,m),C(m7.$$.fragment,m),C(Jk.$$.fragment,m),C(Yk.$$.fragment,m),C(Zk.$$.fragment,m),C(g7.$$.fragment,m),C(eS.$$.fragment,m),C(p7.$$.fragment,m),C(rS.$$.fragment,m),C(tS.$$.fragment,m),C(nS.$$.fragment,m),C(b7.$$.fragment,m),C(sS.$$.fragment,m),C(F7.$$.fragment,m),OHe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Xm),m&&t(dt),m&&t(Oe),m&&t(Qe),m&&t(Wm),w(Ia,m),m&&t(He),m&&t(Ae),m&&t(Lo),m&&t(Na),m&&t(BWe),m&&t(Vi),w(Wy),m&&t(IWe),m&&t(Xn),m&&t(NWe),w(Qy,m),m&&t(qWe),m&&t(BR),m&&t(jWe),w(Um,m),m&&t(DWe),m&&t(Xi),w(Hy),m&&t(GWe),m&&t(yo),w(Uy),w(Ky),w(mh),w(Zy),m&&t(OWe),m&&t(Wi),w(e8),m&&t(VWe),m&&t(xo),w(o8),w(a8),w(Qh),w(n8),m&&t(XWe),m&&t(Qi),w(s8),m&&t(zWe),m&&t($o),w(l8),w(c8),w(Ru),w(Pu),w(m8),m&&t(WWe),m&&t(Hi),w(f8),m&&t(QWe),m&&t(ko),w(g8),w(p8),w(rp),w(tp),w(_8),m&&t(HWe),m&&t(Ji),w(b8),m&&t(UWe),m&&t(So),w(v8),w(T8),w(sp),w(M8),w(h2),m&&t(JWe),m&&t(Zi),w(E8),m&&t(YWe),m&&t(Ro),w(C8),w(A8),w(p2),w(L8),w(mb),m&&t(KWe),m&&t(rd),w(y8),m&&t(ZWe),m&&t(Po),w(x8),w(k8),w(gb),w(S8),w(ov),m&&t(eQe),m&&t(nd),w(R8),m&&t(oQe),m&&t(Bo),w(P8),w(I8),w(tv),w(N8),w(Vv),m&&t(rQe),m&&t(id),w(q8),m&&t(tQe),m&&t(Io),w(j8),w(G8),w(zv),w(O8),w(f1),m&&t(aQe),m&&t(md),w(V8),m&&t(nQe),m&&t(No),w(X8),w(W8),w(h1),w(Q8),w(hF),m&&t(sQe),m&&t(hd),w(H8),m&&t(lQe),m&&t(qo),w(U8),w(Y8),w(pF),w(K8),w(UF),m&&t(iQe),m&&t(_d),w(Z8),m&&t(dQe),m&&t(jo),w(e9),w(r9),w(YF),w(t9),w(nT),m&&t(cQe),m&&t(Fd),w(a9),m&&t(mQe),m&&t(Go),w(n9),w(l9),w(lT),w(i9),w(WT),m&&t(fQe),m&&t(Ed),w(d9),m&&t(gQe),m&&t(Oo),w(c9),w(f9),w(HT),w(g9),w(jM),m&&t(hQe),m&&t(Ad),w(h9),m&&t(uQe),m&&t(Vo),w(u9),w(_9),w(GM),w(b9),w(XM),m&&t(pQe),m&&t(xd),w(v9),m&&t(_Qe),m&&t(Xo),w(F9),w(M9),w(WM),w(E9),w(iE),m&&t(bQe),m&&t(Sd),w(C9),m&&t(vQe),m&&t(zo),w(w9),w(L9),w(cE),w(y9),w(gE),m&&t(FQe),m&&t(Bd),w(x9),m&&t(TQe),m&&t(Wo),w($9),w(S9),w(uE),w(R9),w(bE),m&&t(MQe),m&&t(qd),w(P9),m&&t(EQe),m&&t(Qo),w(B9),w(N9),w(FE),w(q9),w(EE),m&&t(CQe),m&&t(Gd),w(j9),m&&t(wQe),m&&t(Ho),w(D9),w(O9),w(wE),w(V9),w(IE),m&&t(AQe),m&&t(Xd),w(X9),m&&t(LQe),m&&t(Uo),w(z9),w(Q9),w(qE),w(H9),w(zE),m&&t(yQe),m&&t(Qd),w(U9),m&&t(xQe),m&&t(Jo),w(J9),w(K9),w(QE),w(Z9),w(n4),m&&t($Qe),m&&t(Jd),w(ex),m&&t(kQe),m&&t(Yo),w(ox),w(tx),w(l4),w(ax),w(m4),m&&t(SQe),m&&t(Zd),w(sx),m&&t(RQe),m&&t(Ko),w(lx),w(dx),w(g4),w(cx),w(F4),m&&t(PQe),m&&t(rc),w(mx),m&&t(BQe),m&&t(Zo),w(fx),w(hx),w(M4),w(ux),w(y4),m&&t(IQe),m&&t(nc),w(px),m&&t(NQe),m&&t(er),w(_x),w(vx),w($4),w(Fx),w(P4),m&&t(qQe),m&&t(ic),w(Mx),m&&t(jQe),m&&t(or),w(Ex),w(wx),w(I4),w(Ax),w(j4),m&&t(DQe),m&&t(mc),w(Lx),m&&t(GQe),m&&t(rr),w(yx),w($x),w(G4),w(kx),w(H4),m&&t(OQe),m&&t(hc),w(Sx),m&&t(VQe),m&&t(tr),w(Rx),w(Bx),w(J4),w(Ix),w(Z4),m&&t(XQe),m&&t(_c),w(Nx),m&&t(zQe),m&&t(ar),w(qx),w(Dx),w(oC),w(Gx),w(KC),m&&t(WQe),m&&t(Fc),w(Ox),m&&t(QQe),m&&t(nr),w(Vx),w(zx),w(e5),w(Wx),w(C5),m&&t(HQe),m&&t(Ec),w(Qx),m&&t(UQe),m&&t(sr),w(Hx),w(Jx),w(A5),w(Yx),w(D5),m&&t(JQe),m&&t(Ac),w(Kx),m&&t(YQe),m&&t(lr),w(Zx),w(o$),w(O5),w(r$),w(J5),m&&t(KQe),m&&t(xc),w(t$),m&&t(ZQe),m&&t(ir),w(a$),w(s$),w(K5),w(l$),w(v3),m&&t(eHe),m&&t(Sc),w(i$),m&&t(oHe),m&&t(dr),w(d$),w(m$),w(T3),w(f$),w(S3),m&&t(rHe),m&&t(Bc),w(g$),m&&t(tHe),m&&t(cr),w(h$),w(p$),w(P3),w(_$),w(l0),m&&t(aHe),m&&t(qc),w(b$),m&&t(nHe),m&&t(mr),w(v$),w(T$),w(d0),w(M$),w(L0),m&&t(sHe),m&&t(Gc),w(E$),m&&t(lHe),m&&t(fr),w(C$),w(A$),w(x0),w(L$),w(S0),m&&t(iHe),m&&t(Xc),w(x$),m&&t(dHe),m&&t(gr),w($$),w(S$),w(P0),w(R$),w(I0),m&&t(cHe),m&&t(Qc),w(P$),m&&t(mHe),m&&t(hr),w(B$),w(N$),w(q0),w(q$),w(nw),m&&t(fHe),m&&t(Jc),w(j$),m&&t(gHe),m&&t(ur),w(D$),w(O$),w(lw),w(V$),w(yw),m&&t(hHe),m&&t(Zc),w(X$),m&&t(uHe),m&&t(pr),w(z$),w(Q$),w($w),w(H$),w(Sw),m&&t(pHe),m&&t(rm),w(U$),m&&t(_He),m&&t(_r),w(J$),w(K$),w(Pw),w(Z$),w(Iw),m&&t(bHe),m&&t(nm),w(ek),m&&t(vHe),m&&t(br),w(ok),w(tk),w(qw),w(ak),w(f6),m&&t(FHe),m&&t(im),w(nk),m&&t(THe),m&&t(vr),w(sk),w(ik),w(h6),w(dk),w(w6),m&&t(MHe),m&&t(mm),w(ck),m&&t(EHe),m&&t(Fr),w(mk),w(gk),w(L6),w(hk),w(G6),m&&t(CHe),m&&t(hm),w(uk),m&&t(wHe),m&&t(Tr),w(pk),w(bk),w(V6),w(vk),w(eA),m&&t(AHe),m&&t(_m),w(Fk),m&&t(LHe),m&&t(Mr),w(Tk),w(Ek),w(rA),w(Ck),w(gA),m&&t(yHe),m&&t(Fm),w(wk),m&&t(xHe),m&&t(Er),w(Ak),w(yk),w(uA),w(xk),w(AA),m&&t($He),m&&t(Em),w($k),m&&t(kHe),m&&t(Cr),w(kk),w(Rk),w(yA),w(Pk),w(jA),m&&t(SHe),m&&t(Am),w(Bk),m&&t(RHe),m&&t(wr),w(Ik),w(qk),w(GA),w(jk),w(JA),m&&t(PHe),m&&t(xm),w(Dk),m&&t(BHe),m&&t(Ar),w(Gk),w(Vk),w(KA),w(Xk),w(l7),m&&t(IHe),m&&t(Sm),w(zk),m&&t(NHe),m&&t(Lr),w(Wk),w(Hk),w(d7),w(Uk),w(m7),m&&t(qHe),m&&t(Bm),w(Jk),m&&t(jHe),m&&t(yr),w(Yk),w(Zk),w(g7),w(eS),w(p7),m&&t(DHe),m&&t(qm),w(rS),m&&t(GHe),m&&t(xr),w(tS),w(nS),w(b7),w(sS),w(F7)}}}const Joa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Yoa($){return QZt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ara extends VZt{constructor(g){super();XZt(this,g,Yoa,Uoa,zZt,{})}}export{ara as default,Joa as metadata};
