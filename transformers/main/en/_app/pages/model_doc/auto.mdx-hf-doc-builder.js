import{S as pxt,i as _xt,s as bxt,e as a,k as l,w as F,t as o,M as vxt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Fxt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as HOr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Txt(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,vy,um,je,We,hi,yn,Fy,Ln,xn,Ty,ui,$n,My,pi,pm,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),hm=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),gi=o('"new-model"'),vy=o(")."),um=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),Fy=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),Ty=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),My=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),pm=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var G$=s(u);f=r(G$,"NewModelConfig"),G$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var O$=s(mi);hm=r(O$,"model_type"),O$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var V$=s(fi);gi=r(V$,'"new-model"'),V$.forEach(t),vy=r(Ae,")."),Ae.forEach(t),um=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),Fy=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var X$=s(Ln);xn=r(X$,"PreTrainedModel"),X$.forEach(t),Ty=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var _m=s(ui);$n=r(_m,"config_class"),_m.forEach(t),My=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var z$=s(pi);pm=r(z$,"NewModelConfig"),z$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,hm),e(g,rt),e(g,fi),e(fi,gi),e(g,vy),b(Qe,um,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,Fy),e(je,Ln),e(Ln,xn),e(je,Ty),e(je,ui),e(ui,$n),e(je,My),e(je,pi),e(pi,pm),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(um),Qe&&t(je)}}}function Mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ext(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cxt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function wxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Axt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function yxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ixt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ekt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function okt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function akt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function skt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ikt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ckt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ukt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _kt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bkt(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,vy,um,je,We,hi,yn,Fy,Ln,xn,Ty,ui,$n,My,pi,pm,Ca,Qe,Ae,G$,_i,O$,V$,Eo,wa,X$,_m,z$,QGe,Iqe,bi,bm,Kee,Ey,HGe,Zee,UGe,qqe,kn,JGe,eoe,YGe,KGe,ooe,ZGe,eOe,Nqe,Cy,jqe,W$,oOe,Dqe,vm,Gqe,vi,Fm,roe,wy,rOe,toe,tOe,Oqe,Co,Ay,aOe,yy,nOe,Q$,sOe,lOe,iOe,Ly,dOe,aoe,cOe,mOe,fOe,Er,xy,gOe,noe,hOe,uOe,Fi,pOe,soe,_Oe,bOe,loe,vOe,FOe,TOe,A,Tm,ioe,MOe,EOe,H$,COe,wOe,AOe,Mm,doe,yOe,LOe,U$,xOe,$Oe,kOe,Em,coe,SOe,ROe,J$,POe,BOe,IOe,Cm,moe,qOe,NOe,Y$,jOe,DOe,GOe,wm,foe,OOe,VOe,K$,XOe,zOe,WOe,Am,goe,QOe,HOe,Z$,UOe,JOe,YOe,ym,hoe,KOe,ZOe,ek,eVe,oVe,rVe,Lm,uoe,tVe,aVe,ok,nVe,sVe,lVe,xm,poe,iVe,dVe,rk,cVe,mVe,fVe,$m,_oe,gVe,hVe,tk,uVe,pVe,_Ve,km,boe,bVe,vVe,ak,FVe,TVe,MVe,Sm,voe,EVe,CVe,nk,wVe,AVe,yVe,Rm,Foe,LVe,xVe,sk,$Ve,kVe,SVe,Pm,Toe,RVe,PVe,lk,BVe,IVe,qVe,Bm,Moe,NVe,jVe,ik,DVe,GVe,OVe,Im,Eoe,VVe,XVe,dk,zVe,WVe,QVe,qm,Coe,HVe,UVe,ck,JVe,YVe,KVe,Nm,woe,ZVe,eXe,mk,oXe,rXe,tXe,jm,Aoe,aXe,nXe,fk,sXe,lXe,iXe,Dm,yoe,dXe,cXe,gk,mXe,fXe,gXe,Gm,Loe,hXe,uXe,hk,pXe,_Xe,bXe,Om,xoe,vXe,FXe,uk,TXe,MXe,EXe,Vm,$oe,CXe,wXe,pk,AXe,yXe,LXe,Xm,koe,xXe,$Xe,_k,kXe,SXe,RXe,zm,Soe,PXe,BXe,bk,IXe,qXe,NXe,Wm,Roe,jXe,DXe,vk,GXe,OXe,VXe,Qm,Poe,XXe,zXe,Fk,WXe,QXe,HXe,Hm,Boe,UXe,JXe,Tk,YXe,KXe,ZXe,Um,Ioe,eze,oze,Mk,rze,tze,aze,Jm,qoe,nze,sze,Ek,lze,ize,dze,Ym,Noe,cze,mze,Ck,fze,gze,hze,Km,joe,uze,pze,wk,_ze,bze,vze,Zm,Doe,Fze,Tze,Ak,Mze,Eze,Cze,ef,Goe,wze,Aze,yk,yze,Lze,xze,of,Ooe,$ze,kze,Lk,Sze,Rze,Pze,rf,Voe,Bze,Ize,xk,qze,Nze,jze,tf,Xoe,Dze,Gze,$k,Oze,Vze,Xze,af,zoe,zze,Wze,kk,Qze,Hze,Uze,nf,Woe,Jze,Yze,Sk,Kze,Zze,eWe,sf,Qoe,oWe,rWe,Rk,tWe,aWe,nWe,lf,Hoe,sWe,lWe,Pk,iWe,dWe,cWe,df,Uoe,mWe,fWe,Bk,gWe,hWe,uWe,cf,Joe,pWe,_We,Ik,bWe,vWe,FWe,mf,Yoe,TWe,MWe,qk,EWe,CWe,wWe,ff,Koe,AWe,yWe,Nk,LWe,xWe,$We,gf,Zoe,kWe,SWe,jk,RWe,PWe,BWe,hf,ere,IWe,qWe,Dk,NWe,jWe,DWe,uf,ore,GWe,OWe,Gk,VWe,XWe,zWe,pf,rre,WWe,QWe,Ok,HWe,UWe,JWe,_f,tre,YWe,KWe,Vk,ZWe,eQe,oQe,bf,are,rQe,tQe,Xk,aQe,nQe,sQe,vf,nre,lQe,iQe,zk,dQe,cQe,mQe,Ff,sre,fQe,gQe,Wk,hQe,uQe,pQe,Tf,lre,_Qe,bQe,Qk,vQe,FQe,TQe,Mf,ire,MQe,EQe,Hk,CQe,wQe,AQe,Ef,dre,yQe,LQe,Uk,xQe,$Qe,kQe,Cf,cre,SQe,RQe,Jk,PQe,BQe,IQe,wf,mre,qQe,NQe,Yk,jQe,DQe,GQe,Af,fre,OQe,VQe,Kk,XQe,zQe,WQe,yf,gre,QQe,HQe,Zk,UQe,JQe,YQe,Lf,hre,KQe,ZQe,eS,eHe,oHe,rHe,xf,ure,tHe,aHe,oS,nHe,sHe,lHe,$f,pre,iHe,dHe,rS,cHe,mHe,fHe,kf,_re,gHe,hHe,tS,uHe,pHe,_He,Sf,bre,bHe,vHe,aS,FHe,THe,MHe,Rf,vre,EHe,CHe,nS,wHe,AHe,yHe,Pf,Fre,LHe,xHe,sS,$He,kHe,SHe,Bf,Tre,RHe,PHe,lS,BHe,IHe,qHe,If,Mre,NHe,jHe,iS,DHe,GHe,OHe,qf,Ere,VHe,XHe,dS,zHe,WHe,QHe,Nf,Cre,HHe,UHe,cS,JHe,YHe,KHe,jf,wre,ZHe,eUe,mS,oUe,rUe,tUe,Df,Are,aUe,nUe,fS,sUe,lUe,iUe,Gf,yre,dUe,cUe,gS,mUe,fUe,gUe,Of,Lre,hUe,uUe,hS,pUe,_Ue,bUe,Vf,xre,vUe,FUe,uS,TUe,MUe,EUe,Xf,$re,CUe,wUe,pS,AUe,yUe,LUe,zf,kre,xUe,$Ue,_S,kUe,SUe,RUe,Wf,Sre,PUe,BUe,bS,IUe,qUe,NUe,Qf,Rre,jUe,DUe,vS,GUe,OUe,VUe,Hf,Pre,XUe,zUe,FS,WUe,QUe,HUe,Uf,Bre,UUe,JUe,TS,YUe,KUe,ZUe,Jf,Ire,eJe,oJe,MS,rJe,tJe,aJe,Yf,qre,nJe,sJe,ES,lJe,iJe,dJe,Kf,Nre,cJe,mJe,CS,fJe,gJe,hJe,Zf,jre,uJe,pJe,wS,_Je,bJe,vJe,eg,Dre,FJe,TJe,AS,MJe,EJe,CJe,og,Gre,wJe,AJe,yS,yJe,LJe,xJe,rg,Ore,$Je,kJe,LS,SJe,RJe,PJe,tg,Vre,BJe,IJe,xS,qJe,NJe,jJe,ag,Xre,DJe,GJe,$S,OJe,VJe,XJe,ng,zre,zJe,WJe,kS,QJe,HJe,UJe,sg,Wre,JJe,YJe,SS,KJe,ZJe,eYe,lg,Qre,oYe,rYe,RS,tYe,aYe,nYe,ig,Hre,sYe,lYe,PS,iYe,dYe,cYe,dg,Ure,mYe,fYe,BS,gYe,hYe,uYe,cg,Jre,pYe,_Ye,IS,bYe,vYe,FYe,mg,Yre,TYe,MYe,qS,EYe,CYe,wYe,fg,Kre,AYe,yYe,NS,LYe,xYe,$Ye,gg,Zre,kYe,SYe,jS,RYe,PYe,BYe,hg,ete,IYe,qYe,DS,NYe,jYe,DYe,ug,ote,GYe,OYe,GS,VYe,XYe,zYe,pg,rte,WYe,QYe,OS,HYe,UYe,JYe,_g,tte,YYe,KYe,VS,ZYe,eKe,oKe,bg,ate,rKe,tKe,XS,aKe,nKe,sKe,vg,nte,lKe,iKe,zS,dKe,cKe,mKe,Fg,ste,fKe,gKe,WS,hKe,uKe,pKe,Tg,lte,_Ke,bKe,QS,vKe,FKe,TKe,Mg,MKe,Eg,$y,EKe,ite,CKe,Vqe,Ti,Cg,dte,ky,wKe,cte,AKe,Xqe,wo,Sy,yKe,Ry,LKe,HS,xKe,$Ke,kKe,Py,SKe,mte,RKe,PKe,BKe,Cr,By,IKe,fte,qKe,NKe,Aa,jKe,gte,DKe,GKe,hte,OKe,VKe,ute,XKe,zKe,WKe,k,Sn,pte,QKe,HKe,US,UKe,JKe,JS,YKe,KKe,ZKe,Rn,_te,eZe,oZe,YS,rZe,tZe,KS,aZe,nZe,sZe,Pn,bte,lZe,iZe,ZS,dZe,cZe,eR,mZe,fZe,gZe,wg,vte,hZe,uZe,oR,pZe,_Ze,bZe,Bn,Fte,vZe,FZe,rR,TZe,MZe,tR,EZe,CZe,wZe,Ag,Tte,AZe,yZe,aR,LZe,xZe,$Ze,yg,Mte,kZe,SZe,nR,RZe,PZe,BZe,Lg,Ete,IZe,qZe,sR,NZe,jZe,DZe,In,Cte,GZe,OZe,lR,VZe,XZe,iR,zZe,WZe,QZe,qn,wte,HZe,UZe,dR,JZe,YZe,cR,KZe,ZZe,eeo,Nn,Ate,oeo,reo,mR,teo,aeo,fR,neo,seo,leo,xg,yte,ieo,deo,gR,ceo,meo,feo,$g,Lte,geo,heo,hR,ueo,peo,_eo,jn,xte,beo,veo,uR,Feo,Teo,pR,Meo,Eeo,Ceo,kg,$te,weo,Aeo,_R,yeo,Leo,xeo,Dn,kte,$eo,keo,bR,Seo,Reo,vR,Peo,Beo,Ieo,Gn,Ste,qeo,Neo,FR,jeo,Deo,TR,Geo,Oeo,Veo,On,Rte,Xeo,zeo,MR,Weo,Qeo,ER,Heo,Ueo,Jeo,Sg,Pte,Yeo,Keo,CR,Zeo,eoo,ooo,Vn,Bte,roo,too,wR,aoo,noo,AR,soo,loo,ioo,Xn,Ite,doo,coo,yR,moo,foo,LR,goo,hoo,uoo,zn,qte,poo,_oo,xR,boo,voo,$R,Foo,Too,Moo,Wn,Nte,Eoo,Coo,kR,woo,Aoo,SR,yoo,Loo,xoo,Qn,jte,$oo,koo,RR,Soo,Roo,PR,Poo,Boo,Ioo,Hn,Dte,qoo,Noo,BR,joo,Doo,IR,Goo,Ooo,Voo,Rg,Gte,Xoo,zoo,qR,Woo,Qoo,Hoo,Un,Ote,Uoo,Joo,NR,Yoo,Koo,jR,Zoo,ero,oro,Pg,Vte,rro,tro,DR,aro,nro,sro,Jn,Xte,lro,iro,GR,dro,cro,OR,mro,fro,gro,Yn,zte,hro,uro,VR,pro,_ro,XR,bro,vro,Fro,Kn,Wte,Tro,Mro,zR,Ero,Cro,WR,wro,Aro,yro,Zn,Qte,Lro,xro,QR,$ro,kro,HR,Sro,Rro,Pro,es,Hte,Bro,Iro,UR,qro,Nro,JR,jro,Dro,Gro,Bg,Ute,Oro,Vro,YR,Xro,zro,Wro,os,Jte,Qro,Hro,KR,Uro,Jro,ZR,Yro,Kro,Zro,rs,Yte,eto,oto,eP,rto,tto,oP,ato,nto,sto,ts,Kte,lto,ito,rP,dto,cto,tP,mto,fto,gto,as,Zte,hto,uto,aP,pto,_to,nP,bto,vto,Fto,ns,eae,Tto,Mto,sP,Eto,Cto,lP,wto,Ato,yto,ss,oae,Lto,xto,iP,$to,kto,dP,Sto,Rto,Pto,ls,rae,Bto,Ito,cP,qto,Nto,mP,jto,Dto,Gto,Ig,tae,Oto,Vto,fP,Xto,zto,Wto,is,aae,Qto,Hto,gP,Uto,Jto,hP,Yto,Kto,Zto,qg,nae,eao,oao,uP,rao,tao,aao,Ng,sae,nao,sao,pP,lao,iao,dao,ds,lae,cao,mao,_P,fao,gao,bP,hao,uao,pao,cs,iae,_ao,bao,vP,vao,Fao,FP,Tao,Mao,Eao,ms,dae,Cao,wao,TP,Aao,yao,MP,Lao,xao,$ao,jg,cae,kao,Sao,EP,Rao,Pao,Bao,fs,mae,Iao,qao,CP,Nao,jao,wP,Dao,Gao,Oao,gs,fae,Vao,Xao,AP,zao,Wao,yP,Qao,Hao,Uao,hs,gae,Jao,Yao,LP,Kao,Zao,xP,eno,ono,rno,us,hae,tno,ano,$P,nno,sno,kP,lno,ino,dno,ps,uae,cno,mno,SP,fno,gno,RP,hno,uno,pno,Dg,pae,_no,bno,PP,vno,Fno,Tno,_s,_ae,Mno,Eno,BP,Cno,wno,IP,Ano,yno,Lno,Gg,bae,xno,$no,qP,kno,Sno,Rno,Og,vae,Pno,Bno,NP,Ino,qno,Nno,Vg,Fae,jno,Dno,jP,Gno,Ono,Vno,Xg,Tae,Xno,zno,DP,Wno,Qno,Hno,bs,Mae,Uno,Jno,GP,Yno,Kno,OP,Zno,eso,oso,zg,Eae,rso,tso,VP,aso,nso,sso,vs,Cae,lso,iso,XP,dso,cso,zP,mso,fso,gso,Fs,wae,hso,uso,WP,pso,_so,QP,bso,vso,Fso,Ts,Aae,Tso,Mso,HP,Eso,Cso,UP,wso,Aso,yso,Ms,yae,Lso,xso,JP,$so,kso,YP,Sso,Rso,Pso,Es,Lae,Bso,Iso,KP,qso,Nso,ZP,jso,Dso,Gso,Cs,xae,Oso,Vso,eB,Xso,zso,oB,Wso,Qso,Hso,Wg,$ae,Uso,Jso,rB,Yso,Kso,Zso,Qg,kae,elo,olo,tB,rlo,tlo,alo,ws,Sae,nlo,slo,aB,llo,ilo,nB,dlo,clo,mlo,As,Rae,flo,glo,sB,hlo,ulo,lB,plo,_lo,blo,ys,Pae,vlo,Flo,iB,Tlo,Mlo,dB,Elo,Clo,wlo,Hg,Bae,Alo,ylo,cB,Llo,xlo,$lo,Ug,Iae,klo,Slo,mB,Rlo,Plo,Blo,Jg,qae,Ilo,qlo,fB,Nlo,jlo,Dlo,Ls,Nae,Glo,Olo,gB,Vlo,Xlo,hB,zlo,Wlo,Qlo,Yg,jae,Hlo,Ulo,uB,Jlo,Ylo,Klo,Kg,Dae,Zlo,eio,pB,oio,rio,tio,Zg,Gae,aio,nio,_B,sio,lio,iio,xs,Oae,dio,cio,bB,mio,fio,vB,gio,hio,uio,eh,Vae,pio,_io,FB,bio,vio,Fio,oh,Xae,Tio,Mio,TB,Eio,Cio,wio,$s,zae,Aio,yio,MB,Lio,xio,EB,$io,kio,Sio,ks,Wae,Rio,Pio,CB,Bio,Iio,wB,qio,Nio,jio,Ss,Qae,Dio,Gio,AB,Oio,Vio,yB,Xio,zio,Wio,Rs,Hae,Qio,Hio,LB,Uio,Jio,xB,Yio,Kio,Zio,rh,edo,th,Iy,odo,Uae,rdo,zqe,Mi,ah,Jae,qy,tdo,Yae,ado,Wqe,Ao,Ny,ndo,jy,sdo,$B,ldo,ido,ddo,Dy,cdo,Kae,mdo,fdo,gdo,He,Gy,hdo,Zae,udo,pdo,ya,_do,ene,bdo,vdo,one,Fdo,Tdo,rne,Mdo,Edo,Cdo,Y,nh,tne,wdo,Ado,kB,ydo,Ldo,xdo,sh,ane,$do,kdo,SB,Sdo,Rdo,Pdo,lh,nne,Bdo,Ido,RB,qdo,Ndo,jdo,ih,sne,Ddo,Gdo,PB,Odo,Vdo,Xdo,dh,lne,zdo,Wdo,BB,Qdo,Hdo,Udo,ch,ine,Jdo,Ydo,IB,Kdo,Zdo,eco,mh,dne,oco,rco,qB,tco,aco,nco,fh,cne,sco,lco,NB,ico,dco,cco,gh,mne,mco,fco,jB,gco,hco,uco,hh,fne,pco,_co,DB,bco,vco,Fco,uh,gne,Tco,Mco,GB,Eco,Cco,wco,ph,hne,Aco,yco,OB,Lco,xco,$co,_h,une,kco,Sco,VB,Rco,Pco,Bco,bh,pne,Ico,qco,XB,Nco,jco,Dco,vh,_ne,Gco,Oco,zB,Vco,Xco,zco,Fh,bne,Wco,Qco,WB,Hco,Uco,Jco,Th,vne,Yco,Kco,QB,Zco,emo,omo,Mh,Fne,rmo,tmo,HB,amo,nmo,smo,Eh,Tne,lmo,imo,UB,dmo,cmo,mmo,Ch,Mne,fmo,gmo,JB,hmo,umo,pmo,wh,Ene,_mo,bmo,YB,vmo,Fmo,Tmo,Ah,Cne,Mmo,Emo,KB,Cmo,wmo,Amo,yh,wne,ymo,Lmo,ZB,xmo,$mo,kmo,Lh,Ane,Smo,Rmo,eI,Pmo,Bmo,Imo,xh,yne,qmo,Nmo,oI,jmo,Dmo,Gmo,$h,Lne,Omo,Vmo,rI,Xmo,zmo,Wmo,kh,xne,Qmo,Hmo,tI,Umo,Jmo,Ymo,Sh,$ne,Kmo,Zmo,aI,efo,ofo,rfo,Rh,kne,tfo,afo,nI,nfo,sfo,lfo,Ph,ifo,Bh,dfo,Ih,Oy,cfo,Sne,mfo,Qqe,Ei,qh,Rne,Vy,ffo,Pne,gfo,Hqe,yo,Xy,hfo,zy,ufo,sI,pfo,_fo,bfo,Wy,vfo,Bne,Ffo,Tfo,Mfo,Ue,Qy,Efo,Ine,Cfo,wfo,Ci,Afo,qne,yfo,Lfo,Nne,xfo,$fo,kfo,he,Nh,jne,Sfo,Rfo,lI,Pfo,Bfo,Ifo,jh,Dne,qfo,Nfo,Gne,jfo,Dfo,Gfo,Dh,One,Ofo,Vfo,iI,Xfo,zfo,Wfo,Gh,Vne,Qfo,Hfo,dI,Ufo,Jfo,Yfo,Oh,Xne,Kfo,Zfo,cI,ego,ogo,rgo,Vh,zne,tgo,ago,mI,ngo,sgo,lgo,Xh,Wne,igo,dgo,fI,cgo,mgo,fgo,zh,Qne,ggo,hgo,gI,ugo,pgo,_go,Wh,Hne,bgo,vgo,hI,Fgo,Tgo,Mgo,Qh,Une,Ego,Cgo,uI,wgo,Ago,ygo,Hh,Jne,Lgo,xgo,pI,$go,kgo,Sgo,Uh,Yne,Rgo,Pgo,_I,Bgo,Igo,qgo,Jh,Kne,Ngo,jgo,bI,Dgo,Ggo,Ogo,Yh,Zne,Vgo,Xgo,vI,zgo,Wgo,Qgo,Kh,ese,Hgo,Ugo,FI,Jgo,Ygo,Kgo,Zh,ose,Zgo,eho,TI,oho,rho,tho,eu,rse,aho,nho,MI,sho,lho,iho,ou,dho,ru,cho,tu,Hy,mho,tse,fho,Uqe,wi,au,ase,Uy,gho,nse,hho,Jqe,Lo,Jy,uho,Ai,pho,EI,_ho,bho,CI,vho,Fho,Tho,Yy,Mho,sse,Eho,Cho,who,tt,Ky,Aho,lse,yho,Lho,yi,xho,ise,$ho,kho,wI,Sho,Rho,Pho,nu,Bho,Je,Zy,Iho,dse,qho,Nho,La,jho,cse,Dho,Gho,mse,Oho,Vho,fse,Xho,zho,Who,x,su,gse,Qho,Hho,AI,Uho,Jho,Yho,lu,hse,Kho,Zho,yI,euo,ouo,ruo,iu,use,tuo,auo,LI,nuo,suo,luo,du,pse,iuo,duo,xI,cuo,muo,fuo,cu,_se,guo,huo,$I,uuo,puo,_uo,mu,bse,buo,vuo,kI,Fuo,Tuo,Muo,fu,vse,Euo,Cuo,SI,wuo,Auo,yuo,gu,Fse,Luo,xuo,RI,$uo,kuo,Suo,hu,Tse,Ruo,Puo,PI,Buo,Iuo,quo,uu,Mse,Nuo,juo,BI,Duo,Guo,Ouo,pu,Ese,Vuo,Xuo,II,zuo,Wuo,Quo,_u,Cse,Huo,Uuo,qI,Juo,Yuo,Kuo,bu,wse,Zuo,epo,NI,opo,rpo,tpo,vu,Ase,apo,npo,jI,spo,lpo,ipo,Fu,yse,dpo,cpo,DI,mpo,fpo,gpo,Tu,Lse,hpo,upo,GI,ppo,_po,bpo,Mu,xse,vpo,Fpo,OI,Tpo,Mpo,Epo,Eu,$se,Cpo,wpo,VI,Apo,ypo,Lpo,Cu,kse,xpo,$po,XI,kpo,Spo,Rpo,wu,Sse,Ppo,Bpo,zI,Ipo,qpo,Npo,Au,Rse,jpo,Dpo,WI,Gpo,Opo,Vpo,yu,Pse,Xpo,zpo,QI,Wpo,Qpo,Hpo,Lu,Bse,Upo,Jpo,HI,Ypo,Kpo,Zpo,xu,Ise,e_o,o_o,UI,r_o,t_o,a_o,$u,qse,n_o,s_o,JI,l_o,i_o,d_o,ku,Nse,c_o,m_o,YI,f_o,g_o,h_o,Su,jse,u_o,p_o,KI,__o,b_o,v_o,Ru,Dse,F_o,T_o,ZI,M_o,E_o,C_o,Pu,Gse,w_o,A_o,eq,y_o,L_o,x_o,Bu,Ose,$_o,k_o,oq,S_o,R_o,P_o,Iu,Vse,B_o,I_o,rq,q_o,N_o,j_o,qu,Xse,D_o,G_o,tq,O_o,V_o,X_o,Ps,zse,z_o,W_o,aq,Q_o,H_o,nq,U_o,J_o,Y_o,Nu,Wse,K_o,Z_o,sq,ebo,obo,rbo,ju,Qse,tbo,abo,lq,nbo,sbo,lbo,Du,Hse,ibo,dbo,iq,cbo,mbo,fbo,Gu,Use,gbo,hbo,dq,ubo,pbo,_bo,Ou,Jse,bbo,vbo,cq,Fbo,Tbo,Mbo,Vu,Yse,Ebo,Cbo,mq,wbo,Abo,ybo,Xu,Kse,Lbo,xbo,fq,$bo,kbo,Sbo,zu,Zse,Rbo,Pbo,gq,Bbo,Ibo,qbo,Wu,ele,Nbo,jbo,hq,Dbo,Gbo,Obo,Qu,ole,Vbo,Xbo,uq,zbo,Wbo,Qbo,Hu,rle,Hbo,Ubo,pq,Jbo,Ybo,Kbo,Uu,tle,Zbo,e2o,_q,o2o,r2o,t2o,Ju,ale,a2o,n2o,bq,s2o,l2o,i2o,Yu,nle,d2o,c2o,vq,m2o,f2o,g2o,Ku,sle,h2o,u2o,Fq,p2o,_2o,b2o,Zu,lle,v2o,F2o,Tq,T2o,M2o,E2o,ep,ile,C2o,w2o,Mq,A2o,y2o,L2o,op,dle,x2o,$2o,Eq,k2o,S2o,R2o,rp,cle,P2o,B2o,Cq,I2o,q2o,N2o,tp,mle,j2o,D2o,wq,G2o,O2o,V2o,ap,fle,X2o,z2o,Aq,W2o,Q2o,H2o,np,gle,U2o,J2o,yq,Y2o,K2o,Z2o,sp,hle,evo,ovo,Lq,rvo,tvo,avo,lp,ule,nvo,svo,xq,lvo,ivo,dvo,ip,ple,cvo,mvo,$q,fvo,gvo,hvo,dp,_le,uvo,pvo,kq,_vo,bvo,vvo,cp,ble,Fvo,Tvo,Sq,Mvo,Evo,Cvo,mp,vle,wvo,Avo,Rq,yvo,Lvo,xvo,fp,Fle,$vo,kvo,Pq,Svo,Rvo,Pvo,gp,Tle,Bvo,Ivo,Bq,qvo,Nvo,jvo,hp,Mle,Dvo,Gvo,Iq,Ovo,Vvo,Xvo,up,Ele,zvo,Wvo,qq,Qvo,Hvo,Uvo,pp,Cle,Jvo,Yvo,Nq,Kvo,Zvo,eFo,_p,wle,oFo,rFo,jq,tFo,aFo,nFo,bp,Ale,sFo,lFo,Dq,iFo,dFo,cFo,vp,yle,mFo,fFo,Gq,gFo,hFo,uFo,Fp,Lle,pFo,_Fo,Oq,bFo,vFo,FFo,Tp,xle,TFo,MFo,Vq,EFo,CFo,wFo,Mp,$le,AFo,yFo,Xq,LFo,xFo,$Fo,Ep,kle,kFo,SFo,zq,RFo,PFo,BFo,Cp,Sle,IFo,qFo,Wq,NFo,jFo,DFo,wp,Rle,GFo,OFo,Qq,VFo,XFo,zFo,Ap,Ple,WFo,QFo,Hq,HFo,UFo,JFo,yp,Ble,YFo,KFo,Uq,ZFo,e1o,o1o,Lp,Ile,r1o,t1o,Jq,a1o,n1o,s1o,xp,qle,l1o,i1o,Yq,d1o,c1o,m1o,$p,Nle,f1o,g1o,Kq,h1o,u1o,p1o,kp,jle,_1o,b1o,Zq,v1o,F1o,T1o,Sp,Dle,M1o,E1o,eN,C1o,w1o,A1o,Rp,Gle,y1o,L1o,oN,x1o,$1o,k1o,Pp,Ole,S1o,R1o,rN,P1o,B1o,I1o,Bp,Vle,q1o,N1o,tN,j1o,D1o,G1o,Ip,Xle,O1o,V1o,aN,X1o,z1o,W1o,qp,zle,Q1o,H1o,nN,U1o,J1o,Y1o,Np,Wle,K1o,Z1o,sN,eTo,oTo,rTo,jp,Qle,tTo,aTo,lN,nTo,sTo,lTo,Dp,Hle,iTo,dTo,iN,cTo,mTo,fTo,Gp,Ule,gTo,hTo,dN,uTo,pTo,_To,Op,Jle,bTo,vTo,cN,FTo,TTo,MTo,Vp,Yle,ETo,CTo,mN,wTo,ATo,yTo,Xp,Kle,LTo,xTo,fN,$To,kTo,STo,zp,Zle,RTo,PTo,gN,BTo,ITo,qTo,Wp,eie,NTo,jTo,hN,DTo,GTo,OTo,Qp,oie,VTo,XTo,uN,zTo,WTo,QTo,Hp,rie,HTo,UTo,pN,JTo,YTo,KTo,Up,tie,ZTo,eMo,_N,oMo,rMo,tMo,Jp,aie,aMo,nMo,bN,sMo,lMo,iMo,Yp,nie,dMo,cMo,vN,mMo,fMo,gMo,Kp,hMo,sie,uMo,pMo,lie,_Mo,bMo,Zp,Yqe,Li,e_,iie,eL,vMo,die,FMo,Kqe,xo,oL,TMo,xi,MMo,FN,EMo,CMo,TN,wMo,AMo,yMo,rL,LMo,cie,xMo,$Mo,kMo,at,tL,SMo,mie,RMo,PMo,$i,BMo,fie,IMo,qMo,MN,NMo,jMo,DMo,o_,GMo,Ye,aL,OMo,gie,VMo,XMo,xa,zMo,hie,WMo,QMo,uie,HMo,UMo,pie,JMo,YMo,KMo,G,r_,_ie,ZMo,e4o,EN,o4o,r4o,t4o,t_,bie,a4o,n4o,CN,s4o,l4o,i4o,a_,vie,d4o,c4o,wN,m4o,f4o,g4o,n_,Fie,h4o,u4o,AN,p4o,_4o,b4o,s_,Tie,v4o,F4o,yN,T4o,M4o,E4o,l_,Mie,C4o,w4o,LN,A4o,y4o,L4o,i_,Eie,x4o,$4o,xN,k4o,S4o,R4o,d_,Cie,P4o,B4o,$N,I4o,q4o,N4o,c_,wie,j4o,D4o,kN,G4o,O4o,V4o,m_,Aie,X4o,z4o,SN,W4o,Q4o,H4o,f_,yie,U4o,J4o,RN,Y4o,K4o,Z4o,g_,Lie,eEo,oEo,PN,rEo,tEo,aEo,h_,xie,nEo,sEo,BN,lEo,iEo,dEo,u_,$ie,cEo,mEo,IN,fEo,gEo,hEo,p_,kie,uEo,pEo,qN,_Eo,bEo,vEo,__,Sie,FEo,TEo,NN,MEo,EEo,CEo,b_,Rie,wEo,AEo,jN,yEo,LEo,xEo,v_,Pie,$Eo,kEo,DN,SEo,REo,PEo,F_,Bie,BEo,IEo,GN,qEo,NEo,jEo,T_,Iie,DEo,GEo,ON,OEo,VEo,XEo,M_,qie,zEo,WEo,VN,QEo,HEo,UEo,E_,Nie,JEo,YEo,XN,KEo,ZEo,eCo,C_,jie,oCo,rCo,zN,tCo,aCo,nCo,w_,Die,sCo,lCo,WN,iCo,dCo,cCo,A_,Gie,mCo,fCo,QN,gCo,hCo,uCo,y_,Oie,pCo,_Co,HN,bCo,vCo,FCo,L_,Vie,TCo,MCo,UN,ECo,CCo,wCo,x_,Xie,ACo,yCo,JN,LCo,xCo,$Co,$_,zie,kCo,SCo,YN,RCo,PCo,BCo,k_,Wie,ICo,qCo,KN,NCo,jCo,DCo,S_,Qie,GCo,OCo,ZN,VCo,XCo,zCo,R_,Hie,WCo,QCo,ej,HCo,UCo,JCo,P_,Uie,YCo,KCo,oj,ZCo,e5o,o5o,B_,Jie,r5o,t5o,rj,a5o,n5o,s5o,I_,Yie,l5o,i5o,tj,d5o,c5o,m5o,q_,Kie,f5o,g5o,aj,h5o,u5o,p5o,N_,Zie,_5o,b5o,nj,v5o,F5o,T5o,j_,ede,M5o,E5o,sj,C5o,w5o,A5o,D_,ode,y5o,L5o,lj,x5o,$5o,k5o,G_,rde,S5o,R5o,ij,P5o,B5o,I5o,O_,tde,q5o,N5o,dj,j5o,D5o,G5o,V_,ade,O5o,V5o,cj,X5o,z5o,W5o,X_,Q5o,nde,H5o,U5o,sde,J5o,Y5o,z_,Zqe,ki,W_,lde,nL,K5o,ide,Z5o,eNe,$o,sL,e3o,Si,o3o,mj,r3o,t3o,fj,a3o,n3o,s3o,lL,l3o,dde,i3o,d3o,c3o,nt,iL,m3o,cde,f3o,g3o,Ri,h3o,mde,u3o,p3o,gj,_3o,b3o,v3o,Q_,F3o,Ke,dL,T3o,fde,M3o,E3o,$a,C3o,gde,w3o,A3o,hde,y3o,L3o,ude,x3o,$3o,k3o,z,H_,pde,S3o,R3o,hj,P3o,B3o,I3o,U_,_de,q3o,N3o,uj,j3o,D3o,G3o,J_,bde,O3o,V3o,pj,X3o,z3o,W3o,Y_,vde,Q3o,H3o,_j,U3o,J3o,Y3o,K_,Fde,K3o,Z3o,bj,ewo,owo,rwo,Z_,Tde,two,awo,vj,nwo,swo,lwo,eb,Mde,iwo,dwo,Fj,cwo,mwo,fwo,ob,Ede,gwo,hwo,Tj,uwo,pwo,_wo,rb,Cde,bwo,vwo,Mj,Fwo,Two,Mwo,tb,wde,Ewo,Cwo,Ej,wwo,Awo,ywo,ab,Ade,Lwo,xwo,Cj,$wo,kwo,Swo,nb,yde,Rwo,Pwo,wj,Bwo,Iwo,qwo,sb,Lde,Nwo,jwo,Aj,Dwo,Gwo,Owo,lb,xde,Vwo,Xwo,yj,zwo,Wwo,Qwo,ib,$de,Hwo,Uwo,Lj,Jwo,Ywo,Kwo,db,kde,Zwo,e0o,xj,o0o,r0o,t0o,cb,Sde,a0o,n0o,$j,s0o,l0o,i0o,mb,Rde,d0o,c0o,kj,m0o,f0o,g0o,fb,Pde,h0o,u0o,Sj,p0o,_0o,b0o,gb,Bde,v0o,F0o,Rj,T0o,M0o,E0o,hb,Ide,C0o,w0o,Pj,A0o,y0o,L0o,ub,qde,x0o,$0o,Bj,k0o,S0o,R0o,pb,Nde,P0o,B0o,Ij,I0o,q0o,N0o,_b,jde,j0o,D0o,qj,G0o,O0o,V0o,bb,Dde,X0o,z0o,Nj,W0o,Q0o,H0o,vb,Gde,U0o,J0o,jj,Y0o,K0o,Z0o,Fb,Ode,eAo,oAo,Dj,rAo,tAo,aAo,Tb,Vde,nAo,sAo,Gj,lAo,iAo,dAo,Mb,Xde,cAo,mAo,Oj,fAo,gAo,hAo,Eb,zde,uAo,pAo,Vj,_Ao,bAo,vAo,Cb,Wde,FAo,TAo,Xj,MAo,EAo,CAo,wb,Qde,wAo,AAo,zj,yAo,LAo,xAo,Ab,Hde,$Ao,kAo,Wj,SAo,RAo,PAo,yb,Ude,BAo,IAo,Qj,qAo,NAo,jAo,Lb,Jde,DAo,GAo,Hj,OAo,VAo,XAo,xb,Yde,zAo,WAo,Uj,QAo,HAo,UAo,$b,JAo,Kde,YAo,KAo,Zde,ZAo,e6o,kb,oNe,Pi,Sb,ece,cL,o6o,oce,r6o,rNe,ko,mL,t6o,Bi,a6o,Jj,n6o,s6o,Yj,l6o,i6o,d6o,fL,c6o,rce,m6o,f6o,g6o,st,gL,h6o,tce,u6o,p6o,Ii,_6o,ace,b6o,v6o,Kj,F6o,T6o,M6o,Rb,E6o,Ze,hL,C6o,nce,w6o,A6o,ka,y6o,sce,L6o,x6o,lce,$6o,k6o,ice,S6o,R6o,P6o,W,Pb,dce,B6o,I6o,Zj,q6o,N6o,j6o,Bb,cce,D6o,G6o,eD,O6o,V6o,X6o,Ib,mce,z6o,W6o,oD,Q6o,H6o,U6o,qb,fce,J6o,Y6o,rD,K6o,Z6o,eyo,Nb,gce,oyo,ryo,tD,tyo,ayo,nyo,jb,hce,syo,lyo,aD,iyo,dyo,cyo,Db,uce,myo,fyo,nD,gyo,hyo,uyo,Gb,pce,pyo,_yo,sD,byo,vyo,Fyo,Ob,_ce,Tyo,Myo,lD,Eyo,Cyo,wyo,Vb,bce,Ayo,yyo,iD,Lyo,xyo,$yo,Xb,vce,kyo,Syo,dD,Ryo,Pyo,Byo,zb,Fce,Iyo,qyo,cD,Nyo,jyo,Dyo,Wb,Tce,Gyo,Oyo,mD,Vyo,Xyo,zyo,Qb,Mce,Wyo,Qyo,fD,Hyo,Uyo,Jyo,Hb,Ece,Yyo,Kyo,gD,Zyo,eLo,oLo,Ub,Cce,rLo,tLo,hD,aLo,nLo,sLo,Jb,wce,lLo,iLo,uD,dLo,cLo,mLo,Yb,Ace,fLo,gLo,pD,hLo,uLo,pLo,Kb,yce,_Lo,bLo,_D,vLo,FLo,TLo,Zb,Lce,MLo,ELo,bD,CLo,wLo,ALo,e2,xce,yLo,LLo,vD,xLo,$Lo,kLo,o2,$ce,SLo,RLo,FD,PLo,BLo,ILo,r2,kce,qLo,NLo,TD,jLo,DLo,GLo,t2,Sce,OLo,VLo,MD,XLo,zLo,WLo,a2,Rce,QLo,HLo,ED,ULo,JLo,YLo,n2,Pce,KLo,ZLo,CD,e8o,o8o,r8o,s2,Bce,t8o,a8o,wD,n8o,s8o,l8o,l2,Ice,i8o,d8o,AD,c8o,m8o,f8o,i2,qce,g8o,h8o,yD,u8o,p8o,_8o,d2,Nce,b8o,v8o,LD,F8o,T8o,M8o,c2,jce,E8o,C8o,Dce,w8o,A8o,y8o,m2,Gce,L8o,x8o,xD,$8o,k8o,S8o,f2,Oce,R8o,P8o,$D,B8o,I8o,q8o,g2,Vce,N8o,j8o,kD,D8o,G8o,O8o,h2,Xce,V8o,X8o,SD,z8o,W8o,Q8o,u2,H8o,zce,U8o,J8o,Wce,Y8o,K8o,p2,tNe,qi,_2,Qce,uL,Z8o,Hce,e7o,aNe,So,pL,o7o,Ni,r7o,RD,t7o,a7o,PD,n7o,s7o,l7o,_L,i7o,Uce,d7o,c7o,m7o,lt,bL,f7o,Jce,g7o,h7o,ji,u7o,Yce,p7o,_7o,BD,b7o,v7o,F7o,b2,T7o,eo,vL,M7o,Kce,E7o,C7o,Sa,w7o,Zce,A7o,y7o,eme,L7o,x7o,ome,$7o,k7o,S7o,pe,v2,rme,R7o,P7o,ID,B7o,I7o,q7o,F2,tme,N7o,j7o,qD,D7o,G7o,O7o,T2,ame,V7o,X7o,ND,z7o,W7o,Q7o,M2,nme,H7o,U7o,jD,J7o,Y7o,K7o,E2,sme,Z7o,e9o,DD,o9o,r9o,t9o,C2,lme,a9o,n9o,GD,s9o,l9o,i9o,w2,ime,d9o,c9o,OD,m9o,f9o,g9o,A2,dme,h9o,u9o,VD,p9o,_9o,b9o,y2,cme,v9o,F9o,XD,T9o,M9o,E9o,L2,mme,C9o,w9o,zD,A9o,y9o,L9o,x2,fme,x9o,$9o,WD,k9o,S9o,R9o,$2,gme,P9o,B9o,QD,I9o,q9o,N9o,k2,hme,j9o,D9o,HD,G9o,O9o,V9o,S2,ume,X9o,z9o,UD,W9o,Q9o,H9o,R2,pme,U9o,J9o,JD,Y9o,K9o,Z9o,P2,_me,exo,oxo,YD,rxo,txo,axo,B2,nxo,bme,sxo,lxo,vme,ixo,dxo,I2,nNe,Di,q2,Fme,FL,cxo,Tme,mxo,sNe,Ro,TL,fxo,Gi,gxo,KD,hxo,uxo,ZD,pxo,_xo,bxo,ML,vxo,Mme,Fxo,Txo,Mxo,it,EL,Exo,Eme,Cxo,wxo,Oi,Axo,Cme,yxo,Lxo,eG,xxo,$xo,kxo,N2,Sxo,oo,CL,Rxo,wme,Pxo,Bxo,Ra,Ixo,Ame,qxo,Nxo,yme,jxo,Dxo,Lme,Gxo,Oxo,Vxo,q,j2,xme,Xxo,zxo,oG,Wxo,Qxo,Hxo,D2,$me,Uxo,Jxo,rG,Yxo,Kxo,Zxo,G2,kme,e$o,o$o,tG,r$o,t$o,a$o,O2,Sme,n$o,s$o,aG,l$o,i$o,d$o,V2,Rme,c$o,m$o,nG,f$o,g$o,h$o,X2,Pme,u$o,p$o,sG,_$o,b$o,v$o,z2,Bme,F$o,T$o,lG,M$o,E$o,C$o,W2,Ime,w$o,A$o,iG,y$o,L$o,x$o,Q2,qme,$$o,k$o,dG,S$o,R$o,P$o,H2,Nme,B$o,I$o,cG,q$o,N$o,j$o,U2,jme,D$o,G$o,mG,O$o,V$o,X$o,J2,Dme,z$o,W$o,fG,Q$o,H$o,U$o,Y2,Gme,J$o,Y$o,gG,K$o,Z$o,eko,K2,Ome,oko,rko,hG,tko,ako,nko,Z2,Vme,sko,lko,uG,iko,dko,cko,ev,Xme,mko,fko,pG,gko,hko,uko,ov,zme,pko,_ko,_G,bko,vko,Fko,rv,Wme,Tko,Mko,bG,Eko,Cko,wko,tv,Qme,Ako,yko,vG,Lko,xko,$ko,av,Hme,kko,Sko,FG,Rko,Pko,Bko,nv,Ume,Iko,qko,TG,Nko,jko,Dko,sv,Jme,Gko,Oko,MG,Vko,Xko,zko,lv,Yme,Wko,Qko,EG,Hko,Uko,Jko,iv,Kme,Yko,Kko,CG,Zko,eSo,oSo,dv,Zme,rSo,tSo,wG,aSo,nSo,sSo,cv,efe,lSo,iSo,AG,dSo,cSo,mSo,mv,ofe,fSo,gSo,yG,hSo,uSo,pSo,fv,rfe,_So,bSo,LG,vSo,FSo,TSo,gv,tfe,MSo,ESo,xG,CSo,wSo,ASo,hv,afe,ySo,LSo,$G,xSo,$So,kSo,uv,nfe,SSo,RSo,kG,PSo,BSo,ISo,pv,sfe,qSo,NSo,SG,jSo,DSo,GSo,_v,lfe,OSo,VSo,RG,XSo,zSo,WSo,bv,ife,QSo,HSo,PG,USo,JSo,YSo,vv,dfe,KSo,ZSo,BG,eRo,oRo,rRo,Fv,cfe,tRo,aRo,IG,nRo,sRo,lRo,Tv,mfe,iRo,dRo,qG,cRo,mRo,fRo,Mv,ffe,gRo,hRo,NG,uRo,pRo,_Ro,Ev,gfe,bRo,vRo,jG,FRo,TRo,MRo,Cv,hfe,ERo,CRo,DG,wRo,ARo,yRo,wv,ufe,LRo,xRo,GG,$Ro,kRo,SRo,Av,pfe,RRo,PRo,OG,BRo,IRo,qRo,yv,_fe,NRo,jRo,VG,DRo,GRo,ORo,Lv,bfe,VRo,XRo,XG,zRo,WRo,QRo,xv,vfe,HRo,URo,zG,JRo,YRo,KRo,$v,Ffe,ZRo,ePo,WG,oPo,rPo,tPo,kv,Tfe,aPo,nPo,QG,sPo,lPo,iPo,Sv,dPo,Mfe,cPo,mPo,Efe,fPo,gPo,Rv,lNe,Vi,Pv,Cfe,wL,hPo,wfe,uPo,iNe,Po,AL,pPo,Xi,_Po,HG,bPo,vPo,UG,FPo,TPo,MPo,yL,EPo,Afe,CPo,wPo,APo,dt,LL,yPo,yfe,LPo,xPo,zi,$Po,Lfe,kPo,SPo,JG,RPo,PPo,BPo,Bv,IPo,ro,xL,qPo,xfe,NPo,jPo,Pa,DPo,$fe,GPo,OPo,kfe,VPo,XPo,Sfe,zPo,WPo,QPo,K,Iv,Rfe,HPo,UPo,YG,JPo,YPo,KPo,qv,Pfe,ZPo,eBo,KG,oBo,rBo,tBo,Nv,Bfe,aBo,nBo,ZG,sBo,lBo,iBo,jv,Ife,dBo,cBo,eO,mBo,fBo,gBo,Dv,qfe,hBo,uBo,oO,pBo,_Bo,bBo,Gv,Nfe,vBo,FBo,rO,TBo,MBo,EBo,Ov,jfe,CBo,wBo,tO,ABo,yBo,LBo,Vv,Dfe,xBo,$Bo,aO,kBo,SBo,RBo,Xv,Gfe,PBo,BBo,nO,IBo,qBo,NBo,zv,Ofe,jBo,DBo,sO,GBo,OBo,VBo,Wv,Vfe,XBo,zBo,lO,WBo,QBo,HBo,Qv,Xfe,UBo,JBo,iO,YBo,KBo,ZBo,Hv,zfe,eIo,oIo,dO,rIo,tIo,aIo,Uv,Wfe,nIo,sIo,cO,lIo,iIo,dIo,Jv,Qfe,cIo,mIo,mO,fIo,gIo,hIo,Yv,Hfe,uIo,pIo,fO,_Io,bIo,vIo,Kv,Ufe,FIo,TIo,gO,MIo,EIo,CIo,Zv,Jfe,wIo,AIo,hO,yIo,LIo,xIo,eF,Yfe,$Io,kIo,uO,SIo,RIo,PIo,oF,Kfe,BIo,IIo,pO,qIo,NIo,jIo,rF,Zfe,DIo,GIo,_O,OIo,VIo,XIo,tF,ege,zIo,WIo,bO,QIo,HIo,UIo,aF,oge,JIo,YIo,vO,KIo,ZIo,eqo,nF,rge,oqo,rqo,FO,tqo,aqo,nqo,sF,tge,sqo,lqo,TO,iqo,dqo,cqo,lF,age,mqo,fqo,MO,gqo,hqo,uqo,iF,nge,pqo,_qo,EO,bqo,vqo,Fqo,dF,sge,Tqo,Mqo,CO,Eqo,Cqo,wqo,cF,lge,Aqo,yqo,wO,Lqo,xqo,$qo,mF,kqo,ige,Sqo,Rqo,dge,Pqo,Bqo,fF,dNe,Wi,gF,cge,$L,Iqo,mge,qqo,cNe,Bo,kL,Nqo,Qi,jqo,AO,Dqo,Gqo,yO,Oqo,Vqo,Xqo,SL,zqo,fge,Wqo,Qqo,Hqo,ct,RL,Uqo,gge,Jqo,Yqo,Hi,Kqo,hge,Zqo,eNo,LO,oNo,rNo,tNo,hF,aNo,to,PL,nNo,uge,sNo,lNo,Ba,iNo,pge,dNo,cNo,_ge,mNo,fNo,bge,gNo,hNo,uNo,Yr,uF,vge,pNo,_No,xO,bNo,vNo,FNo,pF,Fge,TNo,MNo,$O,ENo,CNo,wNo,_F,Tge,ANo,yNo,kO,LNo,xNo,$No,bF,Mge,kNo,SNo,SO,RNo,PNo,BNo,vF,Ege,INo,qNo,RO,NNo,jNo,DNo,FF,GNo,Cge,ONo,VNo,wge,XNo,zNo,TF,mNe,Ui,MF,Age,BL,WNo,yge,QNo,fNe,Io,IL,HNo,Ji,UNo,PO,JNo,YNo,BO,KNo,ZNo,ejo,qL,ojo,Lge,rjo,tjo,ajo,mt,NL,njo,xge,sjo,ljo,Yi,ijo,$ge,djo,cjo,IO,mjo,fjo,gjo,EF,hjo,ao,jL,ujo,kge,pjo,_jo,Ia,bjo,Sge,vjo,Fjo,Rge,Tjo,Mjo,Pge,Ejo,Cjo,wjo,H,CF,Bge,Ajo,yjo,qO,Ljo,xjo,$jo,wF,Ige,kjo,Sjo,NO,Rjo,Pjo,Bjo,AF,qge,Ijo,qjo,jO,Njo,jjo,Djo,yF,Nge,Gjo,Ojo,DO,Vjo,Xjo,zjo,LF,jge,Wjo,Qjo,GO,Hjo,Ujo,Jjo,xF,Dge,Yjo,Kjo,OO,Zjo,eDo,oDo,$F,Gge,rDo,tDo,VO,aDo,nDo,sDo,kF,Oge,lDo,iDo,XO,dDo,cDo,mDo,SF,Vge,fDo,gDo,zO,hDo,uDo,pDo,RF,Xge,_Do,bDo,WO,vDo,FDo,TDo,PF,zge,MDo,EDo,QO,CDo,wDo,ADo,BF,Wge,yDo,LDo,HO,xDo,$Do,kDo,IF,Qge,SDo,RDo,UO,PDo,BDo,IDo,qF,Hge,qDo,NDo,JO,jDo,DDo,GDo,NF,Uge,ODo,VDo,YO,XDo,zDo,WDo,jF,Jge,QDo,HDo,KO,UDo,JDo,YDo,DF,Yge,KDo,ZDo,ZO,eGo,oGo,rGo,GF,Kge,tGo,aGo,eV,nGo,sGo,lGo,OF,Zge,iGo,dGo,oV,cGo,mGo,fGo,VF,ehe,gGo,hGo,rV,uGo,pGo,_Go,XF,ohe,bGo,vGo,tV,FGo,TGo,MGo,zF,rhe,EGo,CGo,aV,wGo,AGo,yGo,WF,the,LGo,xGo,nV,$Go,kGo,SGo,QF,ahe,RGo,PGo,sV,BGo,IGo,qGo,HF,nhe,NGo,jGo,lV,DGo,GGo,OGo,UF,she,VGo,XGo,iV,zGo,WGo,QGo,JF,lhe,HGo,UGo,dV,JGo,YGo,KGo,YF,ihe,ZGo,eOo,cV,oOo,rOo,tOo,KF,dhe,aOo,nOo,mV,sOo,lOo,iOo,ZF,che,dOo,cOo,fV,mOo,fOo,gOo,e1,mhe,hOo,uOo,gV,pOo,_Oo,bOo,o1,fhe,vOo,FOo,hV,TOo,MOo,EOo,r1,ghe,COo,wOo,uV,AOo,yOo,LOo,t1,hhe,xOo,$Oo,pV,kOo,SOo,ROo,a1,POo,uhe,BOo,IOo,phe,qOo,NOo,n1,gNe,Ki,s1,_he,DL,jOo,bhe,DOo,hNe,qo,GL,GOo,Zi,OOo,_V,VOo,XOo,bV,zOo,WOo,QOo,OL,HOo,vhe,UOo,JOo,YOo,ft,VL,KOo,Fhe,ZOo,eVo,ed,oVo,The,rVo,tVo,vV,aVo,nVo,sVo,l1,lVo,no,XL,iVo,Mhe,dVo,cVo,qa,mVo,Ehe,fVo,gVo,Che,hVo,uVo,whe,pVo,_Vo,bVo,V,i1,Ahe,vVo,FVo,FV,TVo,MVo,EVo,d1,yhe,CVo,wVo,TV,AVo,yVo,LVo,c1,Lhe,xVo,$Vo,MV,kVo,SVo,RVo,m1,xhe,PVo,BVo,EV,IVo,qVo,NVo,f1,$he,jVo,DVo,CV,GVo,OVo,VVo,g1,khe,XVo,zVo,wV,WVo,QVo,HVo,h1,She,UVo,JVo,AV,YVo,KVo,ZVo,u1,Rhe,eXo,oXo,yV,rXo,tXo,aXo,p1,Phe,nXo,sXo,LV,lXo,iXo,dXo,_1,Bhe,cXo,mXo,xV,fXo,gXo,hXo,b1,Ihe,uXo,pXo,$V,_Xo,bXo,vXo,v1,qhe,FXo,TXo,kV,MXo,EXo,CXo,F1,Nhe,wXo,AXo,SV,yXo,LXo,xXo,T1,jhe,$Xo,kXo,RV,SXo,RXo,PXo,M1,Dhe,BXo,IXo,PV,qXo,NXo,jXo,E1,Ghe,DXo,GXo,BV,OXo,VXo,XXo,C1,Ohe,zXo,WXo,IV,QXo,HXo,UXo,w1,Vhe,JXo,YXo,qV,KXo,ZXo,ezo,A1,Xhe,ozo,rzo,NV,tzo,azo,nzo,y1,zhe,szo,lzo,jV,izo,dzo,czo,L1,Whe,mzo,fzo,DV,gzo,hzo,uzo,x1,Qhe,pzo,_zo,GV,bzo,vzo,Fzo,$1,Hhe,Tzo,Mzo,OV,Ezo,Czo,wzo,k1,Uhe,Azo,yzo,VV,Lzo,xzo,$zo,S1,Jhe,kzo,Szo,XV,Rzo,Pzo,Bzo,R1,Yhe,Izo,qzo,zV,Nzo,jzo,Dzo,P1,Khe,Gzo,Ozo,WV,Vzo,Xzo,zzo,B1,Zhe,Wzo,Qzo,QV,Hzo,Uzo,Jzo,I1,eue,Yzo,Kzo,HV,Zzo,eWo,oWo,q1,oue,rWo,tWo,UV,aWo,nWo,sWo,N1,rue,lWo,iWo,JV,dWo,cWo,mWo,j1,tue,fWo,gWo,YV,hWo,uWo,pWo,D1,aue,_Wo,bWo,KV,vWo,FWo,TWo,G1,nue,MWo,EWo,ZV,CWo,wWo,AWo,O1,sue,yWo,LWo,eX,xWo,$Wo,kWo,V1,lue,SWo,RWo,oX,PWo,BWo,IWo,X1,iue,qWo,NWo,rX,jWo,DWo,GWo,z1,due,OWo,VWo,tX,XWo,zWo,WWo,W1,cue,QWo,HWo,aX,UWo,JWo,YWo,Q1,mue,KWo,ZWo,nX,eQo,oQo,rQo,H1,tQo,fue,aQo,nQo,gue,sQo,lQo,U1,uNe,od,J1,hue,zL,iQo,uue,dQo,pNe,No,WL,cQo,rd,mQo,sX,fQo,gQo,lX,hQo,uQo,pQo,QL,_Qo,pue,bQo,vQo,FQo,gt,HL,TQo,_ue,MQo,EQo,td,CQo,bue,wQo,AQo,iX,yQo,LQo,xQo,Y1,$Qo,so,UL,kQo,vue,SQo,RQo,Na,PQo,Fue,BQo,IQo,Tue,qQo,NQo,Mue,jQo,DQo,GQo,Eue,K1,Cue,OQo,VQo,dX,XQo,zQo,WQo,Z1,QQo,wue,HQo,UQo,Aue,JQo,YQo,eT,_Ne,ad,oT,yue,JL,KQo,Lue,ZQo,bNe,jo,YL,eHo,nd,oHo,cX,rHo,tHo,mX,aHo,nHo,sHo,KL,lHo,xue,iHo,dHo,cHo,ht,ZL,mHo,$ue,fHo,gHo,sd,hHo,kue,uHo,pHo,fX,_Ho,bHo,vHo,rT,FHo,lo,e8,THo,Sue,MHo,EHo,ja,CHo,Rue,wHo,AHo,Pue,yHo,LHo,Bue,xHo,$Ho,kHo,Fe,tT,Iue,SHo,RHo,gX,PHo,BHo,IHo,aT,que,qHo,NHo,hX,jHo,DHo,GHo,nT,Nue,OHo,VHo,uX,XHo,zHo,WHo,sT,jue,QHo,HHo,pX,UHo,JHo,YHo,Bs,Due,KHo,ZHo,_X,eUo,oUo,bX,rUo,tUo,aUo,lT,Gue,nUo,sUo,vX,lUo,iUo,dUo,ut,Oue,cUo,mUo,FX,fUo,gUo,TX,hUo,uUo,MX,pUo,_Uo,bUo,iT,Vue,vUo,FUo,EX,TUo,MUo,EUo,dT,Xue,CUo,wUo,CX,AUo,yUo,LUo,cT,zue,xUo,$Uo,wX,kUo,SUo,RUo,mT,Wue,PUo,BUo,AX,IUo,qUo,NUo,fT,Que,jUo,DUo,yX,GUo,OUo,VUo,gT,Hue,XUo,zUo,LX,WUo,QUo,HUo,hT,Uue,UUo,JUo,xX,YUo,KUo,ZUo,uT,eJo,Jue,oJo,rJo,Yue,tJo,aJo,pT,vNe,ld,_T,Kue,o8,nJo,Zue,sJo,FNe,Do,r8,lJo,id,iJo,$X,dJo,cJo,kX,mJo,fJo,gJo,t8,hJo,epe,uJo,pJo,_Jo,pt,a8,bJo,ope,vJo,FJo,dd,TJo,rpe,MJo,EJo,SX,CJo,wJo,AJo,bT,yJo,io,n8,LJo,tpe,xJo,$Jo,Da,kJo,ape,SJo,RJo,npe,PJo,BJo,spe,IJo,qJo,NJo,lpe,vT,ipe,jJo,DJo,RX,GJo,OJo,VJo,FT,XJo,dpe,zJo,WJo,cpe,QJo,HJo,TT,TNe,cd,MT,mpe,s8,UJo,fpe,JJo,MNe,Go,l8,YJo,md,KJo,PX,ZJo,eYo,BX,oYo,rYo,tYo,i8,aYo,gpe,nYo,sYo,lYo,_t,d8,iYo,hpe,dYo,cYo,fd,mYo,upe,fYo,gYo,IX,hYo,uYo,pYo,ET,_Yo,co,c8,bYo,ppe,vYo,FYo,Ga,TYo,_pe,MYo,EYo,bpe,CYo,wYo,vpe,AYo,yYo,LYo,ke,CT,Fpe,xYo,$Yo,qX,kYo,SYo,RYo,wT,Tpe,PYo,BYo,NX,IYo,qYo,NYo,AT,Mpe,jYo,DYo,jX,GYo,OYo,VYo,yT,Epe,XYo,zYo,DX,WYo,QYo,HYo,LT,Cpe,UYo,JYo,GX,YYo,KYo,ZYo,xT,wpe,eKo,oKo,OX,rKo,tKo,aKo,$T,Ape,nKo,sKo,VX,lKo,iKo,dKo,kT,ype,cKo,mKo,XX,fKo,gKo,hKo,ST,Lpe,uKo,pKo,zX,_Ko,bKo,vKo,RT,FKo,xpe,TKo,MKo,$pe,EKo,CKo,PT,ENe,gd,BT,kpe,m8,wKo,Spe,AKo,CNe,Oo,f8,yKo,hd,LKo,WX,xKo,$Ko,QX,kKo,SKo,RKo,g8,PKo,Rpe,BKo,IKo,qKo,bt,h8,NKo,Ppe,jKo,DKo,ud,GKo,Bpe,OKo,VKo,HX,XKo,zKo,WKo,IT,QKo,mo,u8,HKo,Ipe,UKo,JKo,Oa,YKo,qpe,KKo,ZKo,Npe,eZo,oZo,jpe,rZo,tZo,aZo,Kr,qT,Dpe,nZo,sZo,UX,lZo,iZo,dZo,NT,Gpe,cZo,mZo,JX,fZo,gZo,hZo,jT,Ope,uZo,pZo,YX,_Zo,bZo,vZo,DT,Vpe,FZo,TZo,KX,MZo,EZo,CZo,GT,Xpe,wZo,AZo,ZX,yZo,LZo,xZo,OT,$Zo,zpe,kZo,SZo,Wpe,RZo,PZo,VT,wNe,pd,XT,Qpe,p8,BZo,Hpe,IZo,ANe,Vo,_8,qZo,_d,NZo,ez,jZo,DZo,oz,GZo,OZo,VZo,b8,XZo,Upe,zZo,WZo,QZo,vt,v8,HZo,Jpe,UZo,JZo,bd,YZo,Ype,KZo,ZZo,rz,eer,oer,rer,zT,ter,fo,F8,aer,Kpe,ner,ser,Va,ler,Zpe,ier,der,e_e,cer,mer,o_e,fer,ger,her,Se,WT,r_e,uer,per,tz,_er,ber,ver,QT,t_e,Fer,Ter,az,Mer,Eer,Cer,HT,a_e,wer,Aer,nz,yer,Ler,xer,UT,n_e,$er,ker,sz,Ser,Rer,Per,JT,s_e,Ber,Ier,lz,qer,Ner,jer,YT,l_e,Der,Ger,iz,Oer,Ver,Xer,KT,i_e,zer,Wer,dz,Qer,Her,Uer,ZT,d_e,Jer,Yer,cz,Ker,Zer,eor,eM,c_e,oor,ror,mz,tor,aor,nor,oM,sor,m_e,lor,ior,f_e,dor,cor,rM,yNe,vd,tM,g_e,T8,mor,h_e,gor,LNe,Xo,M8,hor,Fd,uor,fz,por,_or,gz,bor,vor,For,E8,Tor,u_e,Mor,Eor,Cor,Ft,C8,wor,p_e,Aor,yor,Td,Lor,__e,xor,$or,hz,kor,Sor,Ror,aM,Por,go,w8,Bor,b_e,Ior,qor,Xa,Nor,v_e,jor,Dor,F_e,Gor,Oor,T_e,Vor,Xor,zor,A8,nM,M_e,Wor,Qor,uz,Hor,Uor,Jor,sM,E_e,Yor,Kor,pz,Zor,err,orr,lM,rrr,C_e,trr,arr,w_e,nrr,srr,iM,xNe,Md,dM,A_e,y8,lrr,y_e,irr,$Ne,zo,L8,drr,Ed,crr,_z,mrr,frr,bz,grr,hrr,urr,x8,prr,L_e,_rr,brr,vrr,Tt,$8,Frr,x_e,Trr,Mrr,Cd,Err,$_e,Crr,wrr,vz,Arr,yrr,Lrr,cM,xrr,ho,k8,$rr,k_e,krr,Srr,za,Rrr,S_e,Prr,Brr,R_e,Irr,qrr,P_e,Nrr,jrr,Drr,Zr,mM,B_e,Grr,Orr,Fz,Vrr,Xrr,zrr,fM,I_e,Wrr,Qrr,Tz,Hrr,Urr,Jrr,gM,q_e,Yrr,Krr,Mz,Zrr,etr,otr,hM,N_e,rtr,ttr,Ez,atr,ntr,str,uM,j_e,ltr,itr,Cz,dtr,ctr,mtr,pM,ftr,D_e,gtr,htr,G_e,utr,ptr,_M,kNe,wd,bM,O_e,S8,_tr,V_e,btr,SNe,Wo,R8,vtr,Ad,Ftr,wz,Ttr,Mtr,Az,Etr,Ctr,wtr,P8,Atr,X_e,ytr,Ltr,xtr,Mt,B8,$tr,z_e,ktr,Str,yd,Rtr,W_e,Ptr,Btr,yz,Itr,qtr,Ntr,vM,jtr,uo,I8,Dtr,Q_e,Gtr,Otr,Wa,Vtr,H_e,Xtr,ztr,U_e,Wtr,Qtr,J_e,Htr,Utr,Jtr,Ld,FM,Y_e,Ytr,Ktr,Lz,Ztr,ear,oar,TM,K_e,rar,tar,xz,aar,nar,sar,MM,Z_e,lar,iar,$z,dar,car,mar,EM,far,ebe,gar,har,obe,uar,par,CM,RNe,xd,wM,rbe,q8,_ar,tbe,bar,PNe,Qo,N8,Far,$d,Tar,kz,Mar,Ear,Sz,Car,war,Aar,j8,yar,abe,Lar,xar,$ar,Et,D8,kar,nbe,Sar,Rar,kd,Par,sbe,Bar,Iar,Rz,qar,Nar,jar,AM,Dar,po,G8,Gar,lbe,Oar,Var,Qa,Xar,ibe,zar,War,dbe,Qar,Har,cbe,Uar,Jar,Yar,O8,yM,mbe,Kar,Zar,Pz,enr,onr,rnr,LM,fbe,tnr,anr,Bz,nnr,snr,lnr,xM,inr,gbe,dnr,cnr,hbe,mnr,fnr,$M,BNe,Sd,kM,ube,V8,gnr,pbe,hnr,INe,Ho,X8,unr,Rd,pnr,Iz,_nr,bnr,qz,vnr,Fnr,Tnr,z8,Mnr,_be,Enr,Cnr,wnr,Ct,W8,Anr,bbe,ynr,Lnr,Pd,xnr,vbe,$nr,knr,Nz,Snr,Rnr,Pnr,SM,Bnr,_o,Q8,Inr,Fbe,qnr,Nnr,Ha,jnr,Tbe,Dnr,Gnr,Mbe,Onr,Vnr,Ebe,Xnr,znr,Wnr,Cbe,RM,wbe,Qnr,Hnr,jz,Unr,Jnr,Ynr,PM,Knr,Abe,Znr,esr,ybe,osr,rsr,BM,qNe,Bd,IM,Lbe,H8,tsr,xbe,asr,NNe,Uo,U8,nsr,Id,ssr,Dz,lsr,isr,Gz,dsr,csr,msr,J8,fsr,$be,gsr,hsr,usr,wt,Y8,psr,kbe,_sr,bsr,qd,vsr,Sbe,Fsr,Tsr,Oz,Msr,Esr,Csr,qM,wsr,bo,K8,Asr,Rbe,ysr,Lsr,Ua,xsr,Pbe,$sr,ksr,Bbe,Ssr,Rsr,Ibe,Psr,Bsr,Isr,Ja,NM,qbe,qsr,Nsr,Vz,jsr,Dsr,Gsr,jM,Nbe,Osr,Vsr,Xz,Xsr,zsr,Wsr,DM,jbe,Qsr,Hsr,zz,Usr,Jsr,Ysr,GM,Dbe,Ksr,Zsr,Wz,elr,olr,rlr,OM,tlr,Gbe,alr,nlr,Obe,slr,llr,VM,jNe,Nd,XM,Vbe,Z8,ilr,Xbe,dlr,DNe,Jo,e7,clr,jd,mlr,Qz,flr,glr,Hz,hlr,ulr,plr,o7,_lr,zbe,blr,vlr,Flr,At,r7,Tlr,Wbe,Mlr,Elr,Dd,Clr,Qbe,wlr,Alr,Uz,ylr,Llr,xlr,zM,$lr,vo,t7,klr,Hbe,Slr,Rlr,Ya,Plr,Ube,Blr,Ilr,Jbe,qlr,Nlr,Ybe,jlr,Dlr,Glr,Kbe,WM,Zbe,Olr,Vlr,Jz,Xlr,zlr,Wlr,QM,Qlr,e2e,Hlr,Ulr,o2e,Jlr,Ylr,HM,GNe,Gd,UM,r2e,a7,Klr,t2e,Zlr,ONe,Yo,n7,eir,Od,oir,Yz,rir,tir,Kz,air,nir,sir,s7,lir,a2e,iir,dir,cir,yt,l7,mir,n2e,fir,gir,Vd,hir,s2e,uir,pir,Zz,_ir,bir,vir,JM,Fir,wr,i7,Tir,l2e,Mir,Eir,Ka,Cir,i2e,wir,Air,d2e,yir,Lir,c2e,xir,$ir,kir,N,YM,m2e,Sir,Rir,eW,Pir,Bir,Iir,KM,f2e,qir,Nir,oW,jir,Dir,Gir,ZM,g2e,Oir,Vir,rW,Xir,zir,Wir,e4,h2e,Qir,Hir,tW,Uir,Jir,Yir,o4,u2e,Kir,Zir,aW,edr,odr,rdr,r4,p2e,tdr,adr,nW,ndr,sdr,ldr,t4,_2e,idr,ddr,sW,cdr,mdr,fdr,a4,b2e,gdr,hdr,lW,udr,pdr,_dr,n4,v2e,bdr,vdr,iW,Fdr,Tdr,Mdr,s4,F2e,Edr,Cdr,dW,wdr,Adr,ydr,l4,T2e,Ldr,xdr,cW,$dr,kdr,Sdr,i4,M2e,Rdr,Pdr,mW,Bdr,Idr,qdr,d4,E2e,Ndr,jdr,fW,Ddr,Gdr,Odr,c4,C2e,Vdr,Xdr,gW,zdr,Wdr,Qdr,m4,w2e,Hdr,Udr,hW,Jdr,Ydr,Kdr,f4,A2e,Zdr,ecr,uW,ocr,rcr,tcr,g4,y2e,acr,ncr,pW,scr,lcr,icr,Is,L2e,dcr,ccr,_W,mcr,fcr,bW,gcr,hcr,ucr,h4,x2e,pcr,_cr,vW,bcr,vcr,Fcr,u4,$2e,Tcr,Mcr,FW,Ecr,Ccr,wcr,p4,k2e,Acr,ycr,TW,Lcr,xcr,$cr,_4,S2e,kcr,Scr,MW,Rcr,Pcr,Bcr,b4,R2e,Icr,qcr,EW,Ncr,jcr,Dcr,v4,P2e,Gcr,Ocr,CW,Vcr,Xcr,zcr,F4,B2e,Wcr,Qcr,wW,Hcr,Ucr,Jcr,T4,I2e,Ycr,Kcr,AW,Zcr,emr,omr,M4,q2e,rmr,tmr,yW,amr,nmr,smr,E4,N2e,lmr,imr,LW,dmr,cmr,mmr,C4,j2e,fmr,gmr,xW,hmr,umr,pmr,w4,D2e,_mr,bmr,$W,vmr,Fmr,Tmr,A4,G2e,Mmr,Emr,kW,Cmr,wmr,Amr,y4,O2e,ymr,Lmr,SW,xmr,$mr,kmr,L4,V2e,Smr,Rmr,RW,Pmr,Bmr,Imr,x4,X2e,qmr,Nmr,PW,jmr,Dmr,Gmr,$4,z2e,Omr,Vmr,BW,Xmr,zmr,Wmr,k4,W2e,Qmr,Hmr,IW,Umr,Jmr,Ymr,S4,Q2e,Kmr,Zmr,qW,efr,ofr,rfr,R4,H2e,tfr,afr,NW,nfr,sfr,lfr,P4,U2e,ifr,dfr,jW,cfr,mfr,ffr,B4,J2e,gfr,hfr,DW,ufr,pfr,_fr,I4,Y2e,bfr,vfr,GW,Ffr,Tfr,Mfr,q4,K2e,Efr,Cfr,OW,wfr,Afr,yfr,N4,Z2e,Lfr,xfr,VW,$fr,kfr,Sfr,j4,eve,Rfr,Pfr,XW,Bfr,Ifr,qfr,D4,ove,Nfr,jfr,zW,Dfr,Gfr,Ofr,G4,rve,Vfr,Xfr,WW,zfr,Wfr,Qfr,O4,VNe,Xd,V4,tve,d7,Hfr,ave,Ufr,XNe,Ko,c7,Jfr,zd,Yfr,QW,Kfr,Zfr,HW,egr,ogr,rgr,m7,tgr,nve,agr,ngr,sgr,Lt,f7,lgr,sve,igr,dgr,Wd,cgr,lve,mgr,fgr,UW,ggr,hgr,ugr,X4,pgr,Ar,g7,_gr,ive,bgr,vgr,Za,Fgr,dve,Tgr,Mgr,cve,Egr,Cgr,mve,wgr,Agr,ygr,se,z4,fve,Lgr,xgr,JW,$gr,kgr,Sgr,W4,gve,Rgr,Pgr,YW,Bgr,Igr,qgr,Q4,hve,Ngr,jgr,KW,Dgr,Ggr,Ogr,H4,uve,Vgr,Xgr,ZW,zgr,Wgr,Qgr,U4,pve,Hgr,Ugr,eQ,Jgr,Ygr,Kgr,J4,_ve,Zgr,ehr,oQ,ohr,rhr,thr,Y4,bve,ahr,nhr,rQ,shr,lhr,ihr,K4,vve,dhr,chr,tQ,mhr,fhr,ghr,Z4,Fve,hhr,uhr,aQ,phr,_hr,bhr,eE,Tve,vhr,Fhr,nQ,Thr,Mhr,Ehr,oE,Mve,Chr,whr,sQ,Ahr,yhr,Lhr,rE,Eve,xhr,$hr,lQ,khr,Shr,Rhr,tE,Cve,Phr,Bhr,iQ,Ihr,qhr,Nhr,aE,wve,jhr,Dhr,dQ,Ghr,Ohr,Vhr,nE,Ave,Xhr,zhr,cQ,Whr,Qhr,Hhr,sE,yve,Uhr,Jhr,mQ,Yhr,Khr,Zhr,lE,Lve,eur,our,fQ,rur,tur,aur,iE,xve,nur,sur,gQ,lur,iur,dur,dE,$ve,cur,mur,hQ,fur,gur,hur,cE,kve,uur,pur,uQ,_ur,bur,vur,mE,Sve,Fur,Tur,pQ,Mur,Eur,Cur,fE,Rve,wur,Aur,_Q,yur,Lur,xur,gE,Pve,$ur,kur,bQ,Sur,Rur,Pur,hE,zNe,Qd,uE,Bve,h7,Bur,Ive,Iur,WNe,Zo,u7,qur,Hd,Nur,vQ,jur,Dur,FQ,Gur,Our,Vur,p7,Xur,qve,zur,Wur,Qur,xt,_7,Hur,Nve,Uur,Jur,Ud,Yur,jve,Kur,Zur,TQ,epr,opr,rpr,pE,tpr,yr,b7,apr,Dve,npr,spr,en,lpr,Gve,ipr,dpr,Ove,cpr,mpr,Vve,fpr,gpr,hpr,Me,_E,Xve,upr,ppr,MQ,_pr,bpr,vpr,bE,zve,Fpr,Tpr,EQ,Mpr,Epr,Cpr,vE,Wve,wpr,Apr,CQ,ypr,Lpr,xpr,FE,Qve,$pr,kpr,wQ,Spr,Rpr,Ppr,TE,Hve,Bpr,Ipr,AQ,qpr,Npr,jpr,ME,Uve,Dpr,Gpr,yQ,Opr,Vpr,Xpr,EE,Jve,zpr,Wpr,LQ,Qpr,Hpr,Upr,CE,Yve,Jpr,Ypr,xQ,Kpr,Zpr,e_r,wE,Kve,o_r,r_r,$Q,t_r,a_r,n_r,AE,Zve,s_r,l_r,kQ,i_r,d_r,c_r,yE,eFe,m_r,f_r,SQ,g_r,h_r,u_r,LE,oFe,p_r,__r,RQ,b_r,v_r,F_r,xE,QNe,Jd,$E,rFe,v7,T_r,tFe,M_r,HNe,er,F7,E_r,Yd,C_r,PQ,w_r,A_r,BQ,y_r,L_r,x_r,T7,$_r,aFe,k_r,S_r,R_r,$t,M7,P_r,nFe,B_r,I_r,Kd,q_r,sFe,N_r,j_r,IQ,D_r,G_r,O_r,kE,V_r,Lr,E7,X_r,lFe,z_r,W_r,on,Q_r,iFe,H_r,U_r,dFe,J_r,Y_r,cFe,K_r,Z_r,ebr,rn,SE,mFe,obr,rbr,qQ,tbr,abr,nbr,RE,fFe,sbr,lbr,NQ,ibr,dbr,cbr,PE,gFe,mbr,fbr,jQ,gbr,hbr,ubr,BE,hFe,pbr,_br,DQ,bbr,vbr,Fbr,IE,UNe,Zd,qE,uFe,C7,Tbr,pFe,Mbr,JNe,or,w7,Ebr,ec,Cbr,GQ,wbr,Abr,OQ,ybr,Lbr,xbr,A7,$br,_Fe,kbr,Sbr,Rbr,kt,y7,Pbr,bFe,Bbr,Ibr,oc,qbr,vFe,Nbr,jbr,VQ,Dbr,Gbr,Obr,NE,Vbr,xr,L7,Xbr,FFe,zbr,Wbr,tn,Qbr,TFe,Hbr,Ubr,MFe,Jbr,Ybr,EFe,Kbr,Zbr,e2r,ie,jE,CFe,o2r,r2r,XQ,t2r,a2r,n2r,DE,wFe,s2r,l2r,zQ,i2r,d2r,c2r,GE,AFe,m2r,f2r,WQ,g2r,h2r,u2r,OE,yFe,p2r,_2r,QQ,b2r,v2r,F2r,VE,LFe,T2r,M2r,HQ,E2r,C2r,w2r,XE,xFe,A2r,y2r,UQ,L2r,x2r,$2r,zE,$Fe,k2r,S2r,JQ,R2r,P2r,B2r,WE,kFe,I2r,q2r,YQ,N2r,j2r,D2r,QE,SFe,G2r,O2r,KQ,V2r,X2r,z2r,HE,RFe,W2r,Q2r,ZQ,H2r,U2r,J2r,UE,PFe,Y2r,K2r,eH,Z2r,evr,ovr,JE,BFe,rvr,tvr,oH,avr,nvr,svr,YE,IFe,lvr,ivr,rH,dvr,cvr,mvr,KE,qFe,fvr,gvr,tH,hvr,uvr,pvr,ZE,NFe,_vr,bvr,aH,vvr,Fvr,Tvr,eC,jFe,Mvr,Evr,nH,Cvr,wvr,Avr,oC,DFe,yvr,Lvr,sH,xvr,$vr,kvr,rC,GFe,Svr,Rvr,lH,Pvr,Bvr,Ivr,tC,OFe,qvr,Nvr,iH,jvr,Dvr,Gvr,aC,VFe,Ovr,Vvr,dH,Xvr,zvr,Wvr,nC,YNe,rc,sC,XFe,x7,Qvr,zFe,Hvr,KNe,rr,$7,Uvr,tc,Jvr,cH,Yvr,Kvr,mH,Zvr,eFr,oFr,k7,rFr,WFe,tFr,aFr,nFr,St,S7,sFr,QFe,lFr,iFr,ac,dFr,HFe,cFr,mFr,fH,fFr,gFr,hFr,lC,uFr,$r,R7,pFr,UFe,_Fr,bFr,an,vFr,JFe,FFr,TFr,YFe,MFr,EFr,KFe,CFr,wFr,AFr,ye,iC,ZFe,yFr,LFr,gH,xFr,$Fr,kFr,dC,e1e,SFr,RFr,hH,PFr,BFr,IFr,cC,o1e,qFr,NFr,uH,jFr,DFr,GFr,mC,r1e,OFr,VFr,pH,XFr,zFr,WFr,fC,t1e,QFr,HFr,_H,UFr,JFr,YFr,gC,a1e,KFr,ZFr,bH,e1r,o1r,r1r,hC,n1e,t1r,a1r,vH,n1r,s1r,l1r,uC,s1e,i1r,d1r,FH,c1r,m1r,f1r,pC,l1e,g1r,h1r,TH,u1r,p1r,_1r,_C,i1e,b1r,v1r,MH,F1r,T1r,M1r,bC,ZNe,nc,vC,d1e,P7,E1r,c1e,C1r,eje,tr,B7,w1r,sc,A1r,EH,y1r,L1r,CH,x1r,$1r,k1r,I7,S1r,m1e,R1r,P1r,B1r,Rt,q7,I1r,f1e,q1r,N1r,lc,j1r,g1e,D1r,G1r,wH,O1r,V1r,X1r,FC,z1r,kr,N7,W1r,h1e,Q1r,H1r,nn,U1r,u1e,J1r,Y1r,p1e,K1r,Z1r,_1e,eTr,oTr,rTr,oe,TC,b1e,tTr,aTr,AH,nTr,sTr,lTr,MC,v1e,iTr,dTr,yH,cTr,mTr,fTr,EC,F1e,gTr,hTr,LH,uTr,pTr,_Tr,CC,T1e,bTr,vTr,xH,FTr,TTr,MTr,wC,M1e,ETr,CTr,$H,wTr,ATr,yTr,AC,E1e,LTr,xTr,kH,$Tr,kTr,STr,yC,C1e,RTr,PTr,SH,BTr,ITr,qTr,LC,w1e,NTr,jTr,RH,DTr,GTr,OTr,xC,A1e,VTr,XTr,PH,zTr,WTr,QTr,$C,y1e,HTr,UTr,BH,JTr,YTr,KTr,kC,L1e,ZTr,eMr,IH,oMr,rMr,tMr,SC,x1e,aMr,nMr,qH,sMr,lMr,iMr,RC,$1e,dMr,cMr,NH,mMr,fMr,gMr,PC,k1e,hMr,uMr,jH,pMr,_Mr,bMr,BC,S1e,vMr,FMr,DH,TMr,MMr,EMr,IC,R1e,CMr,wMr,GH,AMr,yMr,LMr,qC,P1e,xMr,$Mr,OH,kMr,SMr,RMr,NC,B1e,PMr,BMr,VH,IMr,qMr,NMr,jC,I1e,jMr,DMr,XH,GMr,OMr,VMr,DC,q1e,XMr,zMr,zH,WMr,QMr,HMr,GC,N1e,UMr,JMr,WH,YMr,KMr,ZMr,OC,j1e,e4r,o4r,QH,r4r,t4r,a4r,VC,D1e,n4r,s4r,HH,l4r,i4r,d4r,XC,G1e,c4r,m4r,UH,f4r,g4r,h4r,zC,O1e,u4r,p4r,JH,_4r,b4r,v4r,WC,V1e,F4r,T4r,YH,M4r,E4r,C4r,QC,oje,ic,HC,X1e,j7,w4r,z1e,A4r,rje,ar,D7,y4r,dc,L4r,KH,x4r,$4r,ZH,k4r,S4r,R4r,G7,P4r,W1e,B4r,I4r,q4r,Pt,O7,N4r,Q1e,j4r,D4r,cc,G4r,H1e,O4r,V4r,eU,X4r,z4r,W4r,UC,Q4r,Sr,V7,H4r,U1e,U4r,J4r,sn,Y4r,J1e,K4r,Z4r,Y1e,eEr,oEr,K1e,rEr,tEr,aEr,ue,JC,Z1e,nEr,sEr,oU,lEr,iEr,dEr,YC,eTe,cEr,mEr,rU,fEr,gEr,hEr,KC,oTe,uEr,pEr,tU,_Er,bEr,vEr,ZC,rTe,FEr,TEr,aU,MEr,EEr,CEr,e5,tTe,wEr,AEr,nU,yEr,LEr,xEr,o5,aTe,$Er,kEr,sU,SEr,REr,PEr,r5,nTe,BEr,IEr,lU,qEr,NEr,jEr,t5,sTe,DEr,GEr,iU,OEr,VEr,XEr,a5,lTe,zEr,WEr,dU,QEr,HEr,UEr,n5,iTe,JEr,YEr,cU,KEr,ZEr,eCr,s5,dTe,oCr,rCr,mU,tCr,aCr,nCr,l5,cTe,sCr,lCr,fU,iCr,dCr,cCr,i5,mTe,mCr,fCr,gU,gCr,hCr,uCr,d5,fTe,pCr,_Cr,hU,bCr,vCr,FCr,c5,gTe,TCr,MCr,uU,ECr,CCr,wCr,m5,hTe,ACr,yCr,pU,LCr,xCr,$Cr,f5,uTe,kCr,SCr,_U,RCr,PCr,BCr,g5,tje,mc,h5,pTe,X7,ICr,_Te,qCr,aje,nr,z7,NCr,fc,jCr,bU,DCr,GCr,vU,OCr,VCr,XCr,W7,zCr,bTe,WCr,QCr,HCr,Bt,Q7,UCr,vTe,JCr,YCr,gc,KCr,FTe,ZCr,e5r,FU,o5r,r5r,t5r,u5,a5r,Rr,H7,n5r,TTe,s5r,l5r,ln,i5r,MTe,d5r,c5r,ETe,m5r,f5r,CTe,g5r,h5r,u5r,U7,p5,wTe,p5r,_5r,TU,b5r,v5r,F5r,_5,ATe,T5r,M5r,MU,E5r,C5r,w5r,b5,nje,hc,v5,yTe,J7,A5r,LTe,y5r,sje,sr,Y7,L5r,uc,x5r,EU,$5r,k5r,CU,S5r,R5r,P5r,K7,B5r,xTe,I5r,q5r,N5r,It,Z7,j5r,$Te,D5r,G5r,pc,O5r,kTe,V5r,X5r,wU,z5r,W5r,Q5r,F5,H5r,Pr,e9,U5r,STe,J5r,Y5r,dn,K5r,RTe,Z5r,e3r,PTe,o3r,r3r,BTe,t3r,a3r,n3r,ITe,T5,qTe,s3r,l3r,AU,i3r,d3r,c3r,M5,lje,_c,E5,NTe,o9,m3r,jTe,f3r,ije,lr,r9,g3r,bc,h3r,yU,u3r,p3r,LU,_3r,b3r,v3r,t9,F3r,DTe,T3r,M3r,E3r,qt,a9,C3r,GTe,w3r,A3r,vc,y3r,OTe,L3r,x3r,xU,$3r,k3r,S3r,C5,R3r,Br,n9,P3r,VTe,B3r,I3r,cn,q3r,XTe,N3r,j3r,zTe,D3r,G3r,WTe,O3r,V3r,X3r,de,w5,QTe,z3r,W3r,$U,Q3r,H3r,U3r,A5,HTe,J3r,Y3r,kU,K3r,Z3r,ewr,y5,UTe,owr,rwr,SU,twr,awr,nwr,L5,JTe,swr,lwr,RU,iwr,dwr,cwr,x5,YTe,mwr,fwr,PU,gwr,hwr,uwr,$5,KTe,pwr,_wr,BU,bwr,vwr,Fwr,k5,ZTe,Twr,Mwr,IU,Ewr,Cwr,wwr,S5,eMe,Awr,ywr,qU,Lwr,xwr,$wr,R5,oMe,kwr,Swr,NU,Rwr,Pwr,Bwr,P5,rMe,Iwr,qwr,jU,Nwr,jwr,Dwr,B5,tMe,Gwr,Owr,DU,Vwr,Xwr,zwr,I5,aMe,Wwr,Qwr,GU,Hwr,Uwr,Jwr,q5,nMe,Ywr,Kwr,OU,Zwr,e0r,o0r,N5,sMe,r0r,t0r,VU,a0r,n0r,s0r,j5,lMe,l0r,i0r,XU,d0r,c0r,m0r,D5,iMe,f0r,g0r,zU,h0r,u0r,p0r,G5,dMe,_0r,b0r,WU,v0r,F0r,T0r,O5,cMe,M0r,E0r,QU,C0r,w0r,A0r,V5,mMe,y0r,L0r,HU,x0r,$0r,k0r,X5,fMe,S0r,R0r,UU,P0r,B0r,I0r,z5,dje,Fc,W5,gMe,s9,q0r,hMe,N0r,cje,ir,l9,j0r,Tc,D0r,JU,G0r,O0r,YU,V0r,X0r,z0r,i9,W0r,uMe,Q0r,H0r,U0r,Nt,d9,J0r,pMe,Y0r,K0r,Mc,Z0r,_Me,eAr,oAr,KU,rAr,tAr,aAr,Q5,nAr,Ir,c9,sAr,bMe,lAr,iAr,mn,dAr,vMe,cAr,mAr,FMe,fAr,gAr,TMe,hAr,uAr,pAr,ce,H5,MMe,_Ar,bAr,ZU,vAr,FAr,TAr,U5,EMe,MAr,EAr,eJ,CAr,wAr,AAr,J5,CMe,yAr,LAr,oJ,xAr,$Ar,kAr,Y5,wMe,SAr,RAr,rJ,PAr,BAr,IAr,K5,AMe,qAr,NAr,tJ,jAr,DAr,GAr,Z5,yMe,OAr,VAr,aJ,XAr,zAr,WAr,e3,LMe,QAr,HAr,nJ,UAr,JAr,YAr,o3,xMe,KAr,ZAr,sJ,e6r,o6r,r6r,r3,$Me,t6r,a6r,lJ,n6r,s6r,l6r,t3,kMe,i6r,d6r,iJ,c6r,m6r,f6r,a3,SMe,g6r,h6r,dJ,u6r,p6r,_6r,n3,RMe,b6r,v6r,cJ,F6r,T6r,M6r,s3,PMe,E6r,C6r,mJ,w6r,A6r,y6r,l3,BMe,L6r,x6r,fJ,$6r,k6r,S6r,i3,IMe,R6r,P6r,gJ,B6r,I6r,q6r,d3,qMe,N6r,j6r,hJ,D6r,G6r,O6r,c3,NMe,V6r,X6r,uJ,z6r,W6r,Q6r,m3,jMe,H6r,U6r,pJ,J6r,Y6r,K6r,f3,DMe,Z6r,eyr,_J,oyr,ryr,tyr,g3,GMe,ayr,nyr,bJ,syr,lyr,iyr,h3,mje,Ec,u3,OMe,m9,dyr,VMe,cyr,fje,dr,f9,myr,Cc,fyr,vJ,gyr,hyr,FJ,uyr,pyr,_yr,g9,byr,XMe,vyr,Fyr,Tyr,jt,h9,Myr,zMe,Eyr,Cyr,wc,wyr,WMe,Ayr,yyr,TJ,Lyr,xyr,$yr,p3,kyr,qr,u9,Syr,QMe,Ryr,Pyr,fn,Byr,HMe,Iyr,qyr,UMe,Nyr,jyr,JMe,Dyr,Gyr,Oyr,YMe,_3,KMe,Vyr,Xyr,MJ,zyr,Wyr,Qyr,b3,gje,Ac,v3,ZMe,p9,Hyr,e4e,Uyr,hje,cr,_9,Jyr,yc,Yyr,EJ,Kyr,Zyr,CJ,eLr,oLr,rLr,b9,tLr,o4e,aLr,nLr,sLr,Dt,v9,lLr,r4e,iLr,dLr,Lc,cLr,t4e,mLr,fLr,wJ,gLr,hLr,uLr,F3,pLr,Nr,F9,_Lr,a4e,bLr,vLr,gn,FLr,n4e,TLr,MLr,s4e,ELr,CLr,l4e,wLr,ALr,yLr,i4e,T3,d4e,LLr,xLr,AJ,$Lr,kLr,SLr,M3,uje,xc,E3,c4e,T9,RLr,m4e,PLr,pje,mr,M9,BLr,$c,ILr,yJ,qLr,NLr,LJ,jLr,DLr,GLr,E9,OLr,f4e,VLr,XLr,zLr,Gt,C9,WLr,g4e,QLr,HLr,kc,ULr,h4e,JLr,YLr,xJ,KLr,ZLr,e8r,C3,o8r,jr,w9,r8r,u4e,t8r,a8r,hn,n8r,p4e,s8r,l8r,_4e,i8r,d8r,b4e,c8r,m8r,f8r,te,w3,v4e,g8r,h8r,$J,u8r,p8r,_8r,A3,F4e,b8r,v8r,kJ,F8r,T8r,M8r,y3,T4e,E8r,C8r,SJ,w8r,A8r,y8r,L3,M4e,L8r,x8r,RJ,$8r,k8r,S8r,x3,E4e,R8r,P8r,PJ,B8r,I8r,q8r,$3,C4e,N8r,j8r,BJ,D8r,G8r,O8r,k3,w4e,V8r,X8r,IJ,z8r,W8r,Q8r,S3,A4e,H8r,U8r,qJ,J8r,Y8r,K8r,R3,y4e,Z8r,e7r,NJ,o7r,r7r,t7r,P3,L4e,a7r,n7r,jJ,s7r,l7r,i7r,B3,x4e,d7r,c7r,DJ,m7r,f7r,g7r,I3,$4e,h7r,u7r,GJ,p7r,_7r,b7r,q3,k4e,v7r,F7r,OJ,T7r,M7r,E7r,N3,S4e,C7r,w7r,VJ,A7r,y7r,L7r,j3,R4e,x7r,$7r,XJ,k7r,S7r,R7r,D3,P4e,P7r,B7r,zJ,I7r,q7r,N7r,G3,B4e,j7r,D7r,WJ,G7r,O7r,V7r,O3,I4e,X7r,z7r,QJ,W7r,Q7r,H7r,V3,q4e,U7r,J7r,HJ,Y7r,K7r,Z7r,X3,N4e,e9r,o9r,UJ,r9r,t9r,a9r,z3,j4e,n9r,s9r,JJ,l9r,i9r,d9r,W3,D4e,c9r,m9r,YJ,f9r,g9r,h9r,Q3,G4e,u9r,p9r,KJ,_9r,b9r,v9r,H3,O4e,F9r,T9r,ZJ,M9r,E9r,C9r,U3,V4e,w9r,A9r,eY,y9r,L9r,x9r,J3,_je,Sc,Y3,X4e,A9,$9r,z4e,k9r,bje,fr,y9,S9r,Rc,R9r,oY,P9r,B9r,rY,I9r,q9r,N9r,L9,j9r,W4e,D9r,G9r,O9r,Ot,x9,V9r,Q4e,X9r,z9r,Pc,W9r,H4e,Q9r,H9r,tY,U9r,J9r,Y9r,K3,K9r,Dr,$9,Z9r,U4e,exr,oxr,un,rxr,J4e,txr,axr,Y4e,nxr,sxr,K4e,lxr,ixr,dxr,Re,Z3,Z4e,cxr,mxr,aY,fxr,gxr,hxr,ew,eEe,uxr,pxr,nY,_xr,bxr,vxr,ow,oEe,Fxr,Txr,sY,Mxr,Exr,Cxr,rw,rEe,wxr,Axr,lY,yxr,Lxr,xxr,tw,tEe,$xr,kxr,iY,Sxr,Rxr,Pxr,aw,aEe,Bxr,Ixr,dY,qxr,Nxr,jxr,nw,nEe,Dxr,Gxr,cY,Oxr,Vxr,Xxr,sw,sEe,zxr,Wxr,mY,Qxr,Hxr,Uxr,lw,lEe,Jxr,Yxr,fY,Kxr,Zxr,e$r,iw,vje,Bc,dw,iEe,k9,o$r,dEe,r$r,Fje,gr,S9,t$r,Ic,a$r,gY,n$r,s$r,hY,l$r,i$r,d$r,R9,c$r,cEe,m$r,f$r,g$r,Vt,P9,h$r,mEe,u$r,p$r,qc,_$r,fEe,b$r,v$r,uY,F$r,T$r,M$r,cw,E$r,Gr,B9,C$r,gEe,w$r,A$r,pn,y$r,hEe,L$r,x$r,uEe,$$r,k$r,pEe,S$r,R$r,P$r,Ee,mw,_Ee,B$r,I$r,pY,q$r,N$r,j$r,fw,bEe,D$r,G$r,_Y,O$r,V$r,X$r,gw,vEe,z$r,W$r,bY,Q$r,H$r,U$r,hw,FEe,J$r,Y$r,vY,K$r,Z$r,ekr,uw,TEe,okr,rkr,FY,tkr,akr,nkr,pw,MEe,skr,lkr,TY,ikr,dkr,ckr,_w,EEe,mkr,fkr,MY,gkr,hkr,ukr,bw,CEe,pkr,_kr,EY,bkr,vkr,Fkr,vw,wEe,Tkr,Mkr,CY,Ekr,Ckr,wkr,Fw,AEe,Akr,ykr,wY,Lkr,xkr,$kr,Tw,yEe,kkr,Skr,AY,Rkr,Pkr,Bkr,Mw,LEe,Ikr,qkr,yY,Nkr,jkr,Dkr,Ew,Tje,Nc,Cw,xEe,I9,Gkr,$Ee,Okr,Mje,hr,q9,Vkr,jc,Xkr,LY,zkr,Wkr,xY,Qkr,Hkr,Ukr,N9,Jkr,kEe,Ykr,Kkr,Zkr,Xt,j9,eSr,SEe,oSr,rSr,Dc,tSr,REe,aSr,nSr,$Y,sSr,lSr,iSr,ww,dSr,Or,D9,cSr,PEe,mSr,fSr,_n,gSr,BEe,hSr,uSr,IEe,pSr,_Sr,qEe,bSr,vSr,FSr,Le,Aw,NEe,TSr,MSr,kY,ESr,CSr,wSr,yw,jEe,ASr,ySr,SY,LSr,xSr,$Sr,Lw,DEe,kSr,SSr,RY,RSr,PSr,BSr,xw,GEe,ISr,qSr,PY,NSr,jSr,DSr,$w,OEe,GSr,OSr,BY,VSr,XSr,zSr,kw,VEe,WSr,QSr,IY,HSr,USr,JSr,Sw,XEe,YSr,KSr,qY,ZSr,eRr,oRr,Rw,zEe,rRr,tRr,NY,aRr,nRr,sRr,Pw,WEe,lRr,iRr,jY,dRr,cRr,mRr,Bw,QEe,fRr,gRr,DY,hRr,uRr,pRr,Iw,Eje,Gc,qw,HEe,G9,_Rr,UEe,bRr,Cje,ur,O9,vRr,Oc,FRr,GY,TRr,MRr,OY,ERr,CRr,wRr,V9,ARr,JEe,yRr,LRr,xRr,zt,X9,$Rr,YEe,kRr,SRr,Vc,RRr,KEe,PRr,BRr,VY,IRr,qRr,NRr,Nw,jRr,Vr,z9,DRr,ZEe,GRr,ORr,bn,VRr,eCe,XRr,zRr,oCe,WRr,QRr,rCe,HRr,URr,JRr,Pe,jw,tCe,YRr,KRr,XY,ZRr,ePr,oPr,Dw,aCe,rPr,tPr,zY,aPr,nPr,sPr,Gw,nCe,lPr,iPr,WY,dPr,cPr,mPr,Ow,sCe,fPr,gPr,QY,hPr,uPr,pPr,Vw,lCe,_Pr,bPr,HY,vPr,FPr,TPr,Xw,iCe,MPr,EPr,UY,CPr,wPr,APr,zw,dCe,yPr,LPr,JY,xPr,$Pr,kPr,Ww,cCe,SPr,RPr,YY,PPr,BPr,IPr,Qw,mCe,qPr,NPr,KY,jPr,DPr,GPr,Hw,wje,Xc,Uw,fCe,W9,OPr,gCe,VPr,Aje,pr,Q9,XPr,zc,zPr,ZY,WPr,QPr,eK,HPr,UPr,JPr,H9,YPr,hCe,KPr,ZPr,eBr,Wt,U9,oBr,uCe,rBr,tBr,Wc,aBr,pCe,nBr,sBr,oK,lBr,iBr,dBr,Jw,cBr,Xr,J9,mBr,_Ce,fBr,gBr,vn,hBr,bCe,uBr,pBr,vCe,_Br,bBr,FCe,vBr,FBr,TBr,xe,Yw,TCe,MBr,EBr,rK,CBr,wBr,ABr,Kw,MCe,yBr,LBr,tK,xBr,$Br,kBr,Zw,ECe,SBr,RBr,aK,PBr,BBr,IBr,e0,CCe,qBr,NBr,nK,jBr,DBr,GBr,o0,wCe,OBr,VBr,sK,XBr,zBr,WBr,r0,ACe,QBr,HBr,lK,UBr,JBr,YBr,t0,yCe,KBr,ZBr,iK,eIr,oIr,rIr,a0,LCe,tIr,aIr,dK,nIr,sIr,lIr,n0,xCe,iIr,dIr,cK,cIr,mIr,fIr,s0,$Ce,gIr,hIr,mK,uIr,pIr,_Ir,l0,yje,Qc,i0,kCe,Y9,bIr,SCe,vIr,Lje,_r,K9,FIr,Hc,TIr,fK,MIr,EIr,gK,CIr,wIr,AIr,Z9,yIr,RCe,LIr,xIr,$Ir,Qt,ex,kIr,PCe,SIr,RIr,Uc,PIr,BCe,BIr,IIr,hK,qIr,NIr,jIr,d0,DIr,zr,ox,GIr,ICe,OIr,VIr,Fn,XIr,qCe,zIr,WIr,NCe,QIr,HIr,jCe,UIr,JIr,YIr,$e,c0,DCe,KIr,ZIr,uK,eqr,oqr,rqr,m0,GCe,tqr,aqr,pK,nqr,sqr,lqr,f0,OCe,iqr,dqr,_K,cqr,mqr,fqr,g0,VCe,gqr,hqr,bK,uqr,pqr,_qr,h0,XCe,bqr,vqr,vK,Fqr,Tqr,Mqr,u0,zCe,Eqr,Cqr,FK,wqr,Aqr,yqr,p0,WCe,Lqr,xqr,TK,$qr,kqr,Sqr,_0,QCe,Rqr,Pqr,MK,Bqr,Iqr,qqr,b0,HCe,Nqr,jqr,EK,Dqr,Gqr,Oqr,v0,UCe,Vqr,Xqr,CK,zqr,Wqr,Qqr,F0,xje,Jc,T0,JCe,rx,Hqr,YCe,Uqr,$je,br,tx,Jqr,Yc,Yqr,wK,Kqr,Zqr,AK,eNr,oNr,rNr,ax,tNr,KCe,aNr,nNr,sNr,Ht,nx,lNr,ZCe,iNr,dNr,Kc,cNr,e5e,mNr,fNr,yK,gNr,hNr,uNr,M0,pNr,Wr,sx,_Nr,o5e,bNr,vNr,Tn,FNr,r5e,TNr,MNr,t5e,ENr,CNr,a5e,wNr,ANr,yNr,De,E0,n5e,LNr,xNr,LK,$Nr,kNr,SNr,C0,s5e,RNr,PNr,xK,BNr,INr,qNr,w0,l5e,NNr,jNr,$K,DNr,GNr,ONr,A0,i5e,VNr,XNr,kK,zNr,WNr,QNr,y0,d5e,HNr,UNr,SK,JNr,YNr,KNr,L0,c5e,ZNr,ejr,RK,ojr,rjr,tjr,x0,m5e,ajr,njr,PK,sjr,ljr,ijr,$0,f5e,djr,cjr,BK,mjr,fjr,gjr,k0,kje,Zc,S0,g5e,lx,hjr,h5e,ujr,Sje,vr,ix,pjr,em,_jr,IK,bjr,vjr,qK,Fjr,Tjr,Mjr,dx,Ejr,u5e,Cjr,wjr,Ajr,Ut,cx,yjr,p5e,Ljr,xjr,om,$jr,_5e,kjr,Sjr,NK,Rjr,Pjr,Bjr,R0,Ijr,Qr,mx,qjr,b5e,Njr,jjr,Mn,Djr,v5e,Gjr,Ojr,F5e,Vjr,Xjr,T5e,zjr,Wjr,Qjr,Ge,P0,M5e,Hjr,Ujr,jK,Jjr,Yjr,Kjr,B0,E5e,Zjr,eDr,DK,oDr,rDr,tDr,I0,C5e,aDr,nDr,GK,sDr,lDr,iDr,q0,w5e,dDr,cDr,OK,mDr,fDr,gDr,N0,A5e,hDr,uDr,VK,pDr,_Dr,bDr,j0,y5e,vDr,FDr,XK,TDr,MDr,EDr,D0,L5e,CDr,wDr,zK,ADr,yDr,LDr,G0,x5e,xDr,$Dr,WK,kDr,SDr,RDr,O0,Rje,rm,V0,$5e,fx,PDr,k5e,BDr,Pje,Fr,gx,IDr,tm,qDr,QK,NDr,jDr,HK,DDr,GDr,ODr,hx,VDr,S5e,XDr,zDr,WDr,Jt,ux,QDr,R5e,HDr,UDr,am,JDr,P5e,YDr,KDr,UK,ZDr,eGr,oGr,X0,rGr,Hr,px,tGr,B5e,aGr,nGr,En,sGr,I5e,lGr,iGr,q5e,dGr,cGr,N5e,mGr,fGr,gGr,j5e,z0,D5e,hGr,uGr,JK,pGr,_Gr,bGr,W0,Bje,nm,Q0,G5e,_x,vGr,O5e,FGr,Ije,Tr,bx,TGr,sm,MGr,YK,EGr,CGr,KK,wGr,AGr,yGr,vx,LGr,V5e,xGr,$Gr,kGr,Yt,Fx,SGr,X5e,RGr,PGr,lm,BGr,z5e,IGr,qGr,ZK,NGr,jGr,DGr,H0,GGr,Ur,Tx,OGr,W5e,VGr,XGr,Cn,zGr,Q5e,WGr,QGr,H5e,HGr,UGr,U5e,JGr,YGr,KGr,Mx,U0,J5e,ZGr,eOr,eZ,oOr,rOr,tOr,J0,Y5e,aOr,nOr,oZ,sOr,lOr,iOr,Y0,qje,im,K0,K5e,Ex,dOr,Z5e,cOr,Nje,Mr,Cx,mOr,dm,fOr,rZ,gOr,hOr,tZ,uOr,pOr,_Or,wx,bOr,e3e,vOr,FOr,TOr,Kt,Ax,MOr,o3e,EOr,COr,cm,wOr,r3e,AOr,yOr,aZ,LOr,xOr,$Or,Z0,kOr,Jr,yx,SOr,t3e,ROr,POr,wn,BOr,a3e,IOr,qOr,n3e,NOr,jOr,s3e,DOr,GOr,OOr,l3e,eA,i3e,VOr,XOr,nZ,zOr,WOr,QOr,oA,jje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Ey=new re({}),Cy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vm=new HOr({props:{warning:!0,$$slots:{default:[Txt]},$$scope:{ctx:L}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L581"}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L604"}}),Mg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),$y=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L727"}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L389"}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L403"}}),rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L599"}}),qy=new re({}),Ny=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ph=new HOr({props:{$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),Bh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L88"}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L102"}}),ou=new HOr({props:{$$slots:{default:[Axt]},$$scope:{ctx:L}}}),ru=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L255"}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L733"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Zp=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L740"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L755"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),cL=new re({}),mL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L762"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Rb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),uL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L769"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L778"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L812"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L819"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),BL=new re({}),IL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L805"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),DL=new re({}),GL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L787"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),zL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L794"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L828"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L867"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L874"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),m8=new re({}),f8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L897"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),p8=new re({}),_8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L881"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L888"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),y8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L906"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),S8=new re({}),R8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L913"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),q8=new re({}),N8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L835"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),H8=new re({}),U8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L842"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),Z8=new re({}),e7=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L851"}}),r7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),t7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),a7=new re({}),n7=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),l7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),i7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),d7=new re({}),c7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),f7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),g7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),h7=new re({}),u7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),_7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),b7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),v7=new re({}),F7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),M7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),E7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),C7=new re({}),w7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),y7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),L7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),x7=new re({}),$7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),S7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),R7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),P7=new re({}),B7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),q7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),N7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),j7=new re({}),D7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),O7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),V7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),X7=new re({}),z7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),Q7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),H7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),J7=new re({}),Y7=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Z7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),o9=new re({}),r9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),a9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),s9=new re({}),l9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),d9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),m9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),h9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),p9=new re({}),_9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),v9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),T9=new re({}),M9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),C9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),A9=new re({}),y9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),x9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),k9=new re({}),S9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),P9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),I9=new re({}),q9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),j9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Iw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),G9=new re({}),O9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),X9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),W9=new re({}),Q9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),U9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),rx=new re({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),lx=new re({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),fx=new re({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),_x=new re({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),hm=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),vy=o("from_pretrained()"),um=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),Fy=o("AutoConfig"),Ln=o(", "),xn=a("a"),Ty=o("AutoModel"),ui=o(`, and
`),$n=a("a"),My=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),pm=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),G$=o("will create a model that is an instance of "),_i=a("a"),O$=o("BertModel"),V$=o("."),Eo=l(),wa=a("p"),X$=o("There is one class of "),_m=a("code"),z$=o("AutoModel"),QGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Iqe=l(),bi=a("h2"),bm=a("a"),Kee=a("span"),F(Ey.$$.fragment),HGe=l(),Zee=a("span"),UGe=o("Extending the Auto Classes"),qqe=l(),kn=a("p"),JGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eoe=a("code"),YGe=o("NewModel"),KGe=o(", make sure you have a "),ooe=a("code"),ZGe=o("NewModelConfig"),eOe=o(` then you can add those to the auto
classes like this:`),Nqe=l(),F(Cy.$$.fragment),jqe=l(),W$=a("p"),oOe=o("You will then be able to use the auto classes like you would usually do!"),Dqe=l(),F(vm.$$.fragment),Gqe=l(),vi=a("h2"),Fm=a("a"),roe=a("span"),F(wy.$$.fragment),rOe=l(),toe=a("span"),tOe=o("AutoConfig"),Oqe=l(),Co=a("div"),F(Ay.$$.fragment),aOe=l(),yy=a("p"),nOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Q$=a("a"),sOe=o("from_pretrained()"),lOe=o(" class method."),iOe=l(),Ly=a("p"),dOe=o("This class cannot be instantiated directly using "),aoe=a("code"),cOe=o("__init__()"),mOe=o(" (throws an error)."),fOe=l(),Er=a("div"),F(xy.$$.fragment),gOe=l(),noe=a("p"),hOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),uOe=l(),Fi=a("p"),pOe=o("The configuration class to instantiate is selected based on the "),soe=a("code"),_Oe=o("model_type"),bOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),loe=a("code"),vOe=o("pretrained_model_name_or_path"),FOe=o(":"),TOe=l(),A=a("ul"),Tm=a("li"),ioe=a("strong"),MOe=o("albert"),EOe=o(" \u2014 "),H$=a("a"),COe=o("AlbertConfig"),wOe=o(" (ALBERT model)"),AOe=l(),Mm=a("li"),doe=a("strong"),yOe=o("bart"),LOe=o(" \u2014 "),U$=a("a"),xOe=o("BartConfig"),$Oe=o(" (BART model)"),kOe=l(),Em=a("li"),coe=a("strong"),SOe=o("beit"),ROe=o(" \u2014 "),J$=a("a"),POe=o("BeitConfig"),BOe=o(" (BEiT model)"),IOe=l(),Cm=a("li"),moe=a("strong"),qOe=o("bert"),NOe=o(" \u2014 "),Y$=a("a"),jOe=o("BertConfig"),DOe=o(" (BERT model)"),GOe=l(),wm=a("li"),foe=a("strong"),OOe=o("bert-generation"),VOe=o(" \u2014 "),K$=a("a"),XOe=o("BertGenerationConfig"),zOe=o(" (Bert Generation model)"),WOe=l(),Am=a("li"),goe=a("strong"),QOe=o("big_bird"),HOe=o(" \u2014 "),Z$=a("a"),UOe=o("BigBirdConfig"),JOe=o(" (BigBird model)"),YOe=l(),ym=a("li"),hoe=a("strong"),KOe=o("bigbird_pegasus"),ZOe=o(" \u2014 "),ek=a("a"),eVe=o("BigBirdPegasusConfig"),oVe=o(" (BigBirdPegasus model)"),rVe=l(),Lm=a("li"),uoe=a("strong"),tVe=o("blenderbot"),aVe=o(" \u2014 "),ok=a("a"),nVe=o("BlenderbotConfig"),sVe=o(" (Blenderbot model)"),lVe=l(),xm=a("li"),poe=a("strong"),iVe=o("blenderbot-small"),dVe=o(" \u2014 "),rk=a("a"),cVe=o("BlenderbotSmallConfig"),mVe=o(" (BlenderbotSmall model)"),fVe=l(),$m=a("li"),_oe=a("strong"),gVe=o("camembert"),hVe=o(" \u2014 "),tk=a("a"),uVe=o("CamembertConfig"),pVe=o(" (CamemBERT model)"),_Ve=l(),km=a("li"),boe=a("strong"),bVe=o("canine"),vVe=o(" \u2014 "),ak=a("a"),FVe=o("CanineConfig"),TVe=o(" (Canine model)"),MVe=l(),Sm=a("li"),voe=a("strong"),EVe=o("clip"),CVe=o(" \u2014 "),nk=a("a"),wVe=o("CLIPConfig"),AVe=o(" (CLIP model)"),yVe=l(),Rm=a("li"),Foe=a("strong"),LVe=o("convbert"),xVe=o(" \u2014 "),sk=a("a"),$Ve=o("ConvBertConfig"),kVe=o(" (ConvBERT model)"),SVe=l(),Pm=a("li"),Toe=a("strong"),RVe=o("convnext"),PVe=o(" \u2014 "),lk=a("a"),BVe=o("ConvNextConfig"),IVe=o(" (ConvNext model)"),qVe=l(),Bm=a("li"),Moe=a("strong"),NVe=o("ctrl"),jVe=o(" \u2014 "),ik=a("a"),DVe=o("CTRLConfig"),GVe=o(" (CTRL model)"),OVe=l(),Im=a("li"),Eoe=a("strong"),VVe=o("cvt"),XVe=o(" \u2014 "),dk=a("a"),zVe=o("CvtConfig"),WVe=o(" (CvT model)"),QVe=l(),qm=a("li"),Coe=a("strong"),HVe=o("data2vec-audio"),UVe=o(" \u2014 "),ck=a("a"),JVe=o("Data2VecAudioConfig"),YVe=o(" (Data2VecAudio model)"),KVe=l(),Nm=a("li"),woe=a("strong"),ZVe=o("data2vec-text"),eXe=o(" \u2014 "),mk=a("a"),oXe=o("Data2VecTextConfig"),rXe=o(" (Data2VecText model)"),tXe=l(),jm=a("li"),Aoe=a("strong"),aXe=o("data2vec-vision"),nXe=o(" \u2014 "),fk=a("a"),sXe=o("Data2VecVisionConfig"),lXe=o(" (Data2VecVision model)"),iXe=l(),Dm=a("li"),yoe=a("strong"),dXe=o("deberta"),cXe=o(" \u2014 "),gk=a("a"),mXe=o("DebertaConfig"),fXe=o(" (DeBERTa model)"),gXe=l(),Gm=a("li"),Loe=a("strong"),hXe=o("deberta-v2"),uXe=o(" \u2014 "),hk=a("a"),pXe=o("DebertaV2Config"),_Xe=o(" (DeBERTa-v2 model)"),bXe=l(),Om=a("li"),xoe=a("strong"),vXe=o("decision_transformer"),FXe=o(" \u2014 "),uk=a("a"),TXe=o("DecisionTransformerConfig"),MXe=o(" (Decision Transformer model)"),EXe=l(),Vm=a("li"),$oe=a("strong"),CXe=o("deit"),wXe=o(" \u2014 "),pk=a("a"),AXe=o("DeiTConfig"),yXe=o(" (DeiT model)"),LXe=l(),Xm=a("li"),koe=a("strong"),xXe=o("detr"),$Xe=o(" \u2014 "),_k=a("a"),kXe=o("DetrConfig"),SXe=o(" (DETR model)"),RXe=l(),zm=a("li"),Soe=a("strong"),PXe=o("distilbert"),BXe=o(" \u2014 "),bk=a("a"),IXe=o("DistilBertConfig"),qXe=o(" (DistilBERT model)"),NXe=l(),Wm=a("li"),Roe=a("strong"),jXe=o("dpr"),DXe=o(" \u2014 "),vk=a("a"),GXe=o("DPRConfig"),OXe=o(" (DPR model)"),VXe=l(),Qm=a("li"),Poe=a("strong"),XXe=o("dpt"),zXe=o(" \u2014 "),Fk=a("a"),WXe=o("DPTConfig"),QXe=o(" (DPT model)"),HXe=l(),Hm=a("li"),Boe=a("strong"),UXe=o("electra"),JXe=o(" \u2014 "),Tk=a("a"),YXe=o("ElectraConfig"),KXe=o(" (ELECTRA model)"),ZXe=l(),Um=a("li"),Ioe=a("strong"),eze=o("encoder-decoder"),oze=o(" \u2014 "),Mk=a("a"),rze=o("EncoderDecoderConfig"),tze=o(" (Encoder decoder model)"),aze=l(),Jm=a("li"),qoe=a("strong"),nze=o("flaubert"),sze=o(" \u2014 "),Ek=a("a"),lze=o("FlaubertConfig"),ize=o(" (FlauBERT model)"),dze=l(),Ym=a("li"),Noe=a("strong"),cze=o("flava"),mze=o(" \u2014 "),Ck=a("a"),fze=o("FlavaConfig"),gze=o(" (Flava model)"),hze=l(),Km=a("li"),joe=a("strong"),uze=o("fnet"),pze=o(" \u2014 "),wk=a("a"),_ze=o("FNetConfig"),bze=o(" (FNet model)"),vze=l(),Zm=a("li"),Doe=a("strong"),Fze=o("fsmt"),Tze=o(" \u2014 "),Ak=a("a"),Mze=o("FSMTConfig"),Eze=o(" (FairSeq Machine-Translation model)"),Cze=l(),ef=a("li"),Goe=a("strong"),wze=o("funnel"),Aze=o(" \u2014 "),yk=a("a"),yze=o("FunnelConfig"),Lze=o(" (Funnel Transformer model)"),xze=l(),of=a("li"),Ooe=a("strong"),$ze=o("glpn"),kze=o(" \u2014 "),Lk=a("a"),Sze=o("GLPNConfig"),Rze=o(" (GLPN model)"),Pze=l(),rf=a("li"),Voe=a("strong"),Bze=o("gpt2"),Ize=o(" \u2014 "),xk=a("a"),qze=o("GPT2Config"),Nze=o(" (OpenAI GPT-2 model)"),jze=l(),tf=a("li"),Xoe=a("strong"),Dze=o("gpt_neo"),Gze=o(" \u2014 "),$k=a("a"),Oze=o("GPTNeoConfig"),Vze=o(" (GPT Neo model)"),Xze=l(),af=a("li"),zoe=a("strong"),zze=o("gptj"),Wze=o(" \u2014 "),kk=a("a"),Qze=o("GPTJConfig"),Hze=o(" (GPT-J model)"),Uze=l(),nf=a("li"),Woe=a("strong"),Jze=o("hubert"),Yze=o(" \u2014 "),Sk=a("a"),Kze=o("HubertConfig"),Zze=o(" (Hubert model)"),eWe=l(),sf=a("li"),Qoe=a("strong"),oWe=o("ibert"),rWe=o(" \u2014 "),Rk=a("a"),tWe=o("IBertConfig"),aWe=o(" (I-BERT model)"),nWe=l(),lf=a("li"),Hoe=a("strong"),sWe=o("imagegpt"),lWe=o(" \u2014 "),Pk=a("a"),iWe=o("ImageGPTConfig"),dWe=o(" (ImageGPT model)"),cWe=l(),df=a("li"),Uoe=a("strong"),mWe=o("layoutlm"),fWe=o(" \u2014 "),Bk=a("a"),gWe=o("LayoutLMConfig"),hWe=o(" (LayoutLM model)"),uWe=l(),cf=a("li"),Joe=a("strong"),pWe=o("layoutlmv2"),_We=o(" \u2014 "),Ik=a("a"),bWe=o("LayoutLMv2Config"),vWe=o(" (LayoutLMv2 model)"),FWe=l(),mf=a("li"),Yoe=a("strong"),TWe=o("layoutlmv3"),MWe=o(" \u2014 "),qk=a("a"),EWe=o("LayoutLMv3Config"),CWe=o(" (LayoutLMv3 model)"),wWe=l(),ff=a("li"),Koe=a("strong"),AWe=o("led"),yWe=o(" \u2014 "),Nk=a("a"),LWe=o("LEDConfig"),xWe=o(" (LED model)"),$We=l(),gf=a("li"),Zoe=a("strong"),kWe=o("longformer"),SWe=o(" \u2014 "),jk=a("a"),RWe=o("LongformerConfig"),PWe=o(" (Longformer model)"),BWe=l(),hf=a("li"),ere=a("strong"),IWe=o("luke"),qWe=o(" \u2014 "),Dk=a("a"),NWe=o("LukeConfig"),jWe=o(" (LUKE model)"),DWe=l(),uf=a("li"),ore=a("strong"),GWe=o("lxmert"),OWe=o(" \u2014 "),Gk=a("a"),VWe=o("LxmertConfig"),XWe=o(" (LXMERT model)"),zWe=l(),pf=a("li"),rre=a("strong"),WWe=o("m2m_100"),QWe=o(" \u2014 "),Ok=a("a"),HWe=o("M2M100Config"),UWe=o(" (M2M100 model)"),JWe=l(),_f=a("li"),tre=a("strong"),YWe=o("marian"),KWe=o(" \u2014 "),Vk=a("a"),ZWe=o("MarianConfig"),eQe=o(" (Marian model)"),oQe=l(),bf=a("li"),are=a("strong"),rQe=o("maskformer"),tQe=o(" \u2014 "),Xk=a("a"),aQe=o("MaskFormerConfig"),nQe=o(" (MaskFormer model)"),sQe=l(),vf=a("li"),nre=a("strong"),lQe=o("mbart"),iQe=o(" \u2014 "),zk=a("a"),dQe=o("MBartConfig"),cQe=o(" (mBART model)"),mQe=l(),Ff=a("li"),sre=a("strong"),fQe=o("megatron-bert"),gQe=o(" \u2014 "),Wk=a("a"),hQe=o("MegatronBertConfig"),uQe=o(" (MegatronBert model)"),pQe=l(),Tf=a("li"),lre=a("strong"),_Qe=o("mobilebert"),bQe=o(" \u2014 "),Qk=a("a"),vQe=o("MobileBertConfig"),FQe=o(" (MobileBERT model)"),TQe=l(),Mf=a("li"),ire=a("strong"),MQe=o("mpnet"),EQe=o(" \u2014 "),Hk=a("a"),CQe=o("MPNetConfig"),wQe=o(" (MPNet model)"),AQe=l(),Ef=a("li"),dre=a("strong"),yQe=o("mt5"),LQe=o(" \u2014 "),Uk=a("a"),xQe=o("MT5Config"),$Qe=o(" (mT5 model)"),kQe=l(),Cf=a("li"),cre=a("strong"),SQe=o("nystromformer"),RQe=o(" \u2014 "),Jk=a("a"),PQe=o("NystromformerConfig"),BQe=o(" (Nystromformer model)"),IQe=l(),wf=a("li"),mre=a("strong"),qQe=o("openai-gpt"),NQe=o(" \u2014 "),Yk=a("a"),jQe=o("OpenAIGPTConfig"),DQe=o(" (OpenAI GPT model)"),GQe=l(),Af=a("li"),fre=a("strong"),OQe=o("opt"),VQe=o(" \u2014 "),Kk=a("a"),XQe=o("OPTConfig"),zQe=o(" (OPT model)"),WQe=l(),yf=a("li"),gre=a("strong"),QQe=o("pegasus"),HQe=o(" \u2014 "),Zk=a("a"),UQe=o("PegasusConfig"),JQe=o(" (Pegasus model)"),YQe=l(),Lf=a("li"),hre=a("strong"),KQe=o("perceiver"),ZQe=o(" \u2014 "),eS=a("a"),eHe=o("PerceiverConfig"),oHe=o(" (Perceiver model)"),rHe=l(),xf=a("li"),ure=a("strong"),tHe=o("plbart"),aHe=o(" \u2014 "),oS=a("a"),nHe=o("PLBartConfig"),sHe=o(" (PLBart model)"),lHe=l(),$f=a("li"),pre=a("strong"),iHe=o("poolformer"),dHe=o(" \u2014 "),rS=a("a"),cHe=o("PoolFormerConfig"),mHe=o(" (PoolFormer model)"),fHe=l(),kf=a("li"),_re=a("strong"),gHe=o("prophetnet"),hHe=o(" \u2014 "),tS=a("a"),uHe=o("ProphetNetConfig"),pHe=o(" (ProphetNet model)"),_He=l(),Sf=a("li"),bre=a("strong"),bHe=o("qdqbert"),vHe=o(" \u2014 "),aS=a("a"),FHe=o("QDQBertConfig"),THe=o(" (QDQBert model)"),MHe=l(),Rf=a("li"),vre=a("strong"),EHe=o("rag"),CHe=o(" \u2014 "),nS=a("a"),wHe=o("RagConfig"),AHe=o(" (RAG model)"),yHe=l(),Pf=a("li"),Fre=a("strong"),LHe=o("realm"),xHe=o(" \u2014 "),sS=a("a"),$He=o("RealmConfig"),kHe=o(" (Realm model)"),SHe=l(),Bf=a("li"),Tre=a("strong"),RHe=o("reformer"),PHe=o(" \u2014 "),lS=a("a"),BHe=o("ReformerConfig"),IHe=o(" (Reformer model)"),qHe=l(),If=a("li"),Mre=a("strong"),NHe=o("regnet"),jHe=o(" \u2014 "),iS=a("a"),DHe=o("RegNetConfig"),GHe=o(" (RegNet model)"),OHe=l(),qf=a("li"),Ere=a("strong"),VHe=o("rembert"),XHe=o(" \u2014 "),dS=a("a"),zHe=o("RemBertConfig"),WHe=o(" (RemBERT model)"),QHe=l(),Nf=a("li"),Cre=a("strong"),HHe=o("resnet"),UHe=o(" \u2014 "),cS=a("a"),JHe=o("ResNetConfig"),YHe=o(" (ResNet model)"),KHe=l(),jf=a("li"),wre=a("strong"),ZHe=o("retribert"),eUe=o(" \u2014 "),mS=a("a"),oUe=o("RetriBertConfig"),rUe=o(" (RetriBERT model)"),tUe=l(),Df=a("li"),Are=a("strong"),aUe=o("roberta"),nUe=o(" \u2014 "),fS=a("a"),sUe=o("RobertaConfig"),lUe=o(" (RoBERTa model)"),iUe=l(),Gf=a("li"),yre=a("strong"),dUe=o("roformer"),cUe=o(" \u2014 "),gS=a("a"),mUe=o("RoFormerConfig"),fUe=o(" (RoFormer model)"),gUe=l(),Of=a("li"),Lre=a("strong"),hUe=o("segformer"),uUe=o(" \u2014 "),hS=a("a"),pUe=o("SegformerConfig"),_Ue=o(" (SegFormer model)"),bUe=l(),Vf=a("li"),xre=a("strong"),vUe=o("sew"),FUe=o(" \u2014 "),uS=a("a"),TUe=o("SEWConfig"),MUe=o(" (SEW model)"),EUe=l(),Xf=a("li"),$re=a("strong"),CUe=o("sew-d"),wUe=o(" \u2014 "),pS=a("a"),AUe=o("SEWDConfig"),yUe=o(" (SEW-D model)"),LUe=l(),zf=a("li"),kre=a("strong"),xUe=o("speech-encoder-decoder"),$Ue=o(" \u2014 "),_S=a("a"),kUe=o("SpeechEncoderDecoderConfig"),SUe=o(" (Speech Encoder decoder model)"),RUe=l(),Wf=a("li"),Sre=a("strong"),PUe=o("speech_to_text"),BUe=o(" \u2014 "),bS=a("a"),IUe=o("Speech2TextConfig"),qUe=o(" (Speech2Text model)"),NUe=l(),Qf=a("li"),Rre=a("strong"),jUe=o("speech_to_text_2"),DUe=o(" \u2014 "),vS=a("a"),GUe=o("Speech2Text2Config"),OUe=o(" (Speech2Text2 model)"),VUe=l(),Hf=a("li"),Pre=a("strong"),XUe=o("splinter"),zUe=o(" \u2014 "),FS=a("a"),WUe=o("SplinterConfig"),QUe=o(" (Splinter model)"),HUe=l(),Uf=a("li"),Bre=a("strong"),UUe=o("squeezebert"),JUe=o(" \u2014 "),TS=a("a"),YUe=o("SqueezeBertConfig"),KUe=o(" (SqueezeBERT model)"),ZUe=l(),Jf=a("li"),Ire=a("strong"),eJe=o("swin"),oJe=o(" \u2014 "),MS=a("a"),rJe=o("SwinConfig"),tJe=o(" (Swin model)"),aJe=l(),Yf=a("li"),qre=a("strong"),nJe=o("t5"),sJe=o(" \u2014 "),ES=a("a"),lJe=o("T5Config"),iJe=o(" (T5 model)"),dJe=l(),Kf=a("li"),Nre=a("strong"),cJe=o("tapas"),mJe=o(" \u2014 "),CS=a("a"),fJe=o("TapasConfig"),gJe=o(" (TAPAS model)"),hJe=l(),Zf=a("li"),jre=a("strong"),uJe=o("trajectory_transformer"),pJe=o(" \u2014 "),wS=a("a"),_Je=o("TrajectoryTransformerConfig"),bJe=o(" (Trajectory Transformer model)"),vJe=l(),eg=a("li"),Dre=a("strong"),FJe=o("transfo-xl"),TJe=o(" \u2014 "),AS=a("a"),MJe=o("TransfoXLConfig"),EJe=o(" (Transformer-XL model)"),CJe=l(),og=a("li"),Gre=a("strong"),wJe=o("trocr"),AJe=o(" \u2014 "),yS=a("a"),yJe=o("TrOCRConfig"),LJe=o(" (TrOCR model)"),xJe=l(),rg=a("li"),Ore=a("strong"),$Je=o("unispeech"),kJe=o(" \u2014 "),LS=a("a"),SJe=o("UniSpeechConfig"),RJe=o(" (UniSpeech model)"),PJe=l(),tg=a("li"),Vre=a("strong"),BJe=o("unispeech-sat"),IJe=o(" \u2014 "),xS=a("a"),qJe=o("UniSpeechSatConfig"),NJe=o(" (UniSpeechSat model)"),jJe=l(),ag=a("li"),Xre=a("strong"),DJe=o("van"),GJe=o(" \u2014 "),$S=a("a"),OJe=o("VanConfig"),VJe=o(" (VAN model)"),XJe=l(),ng=a("li"),zre=a("strong"),zJe=o("vilt"),WJe=o(" \u2014 "),kS=a("a"),QJe=o("ViltConfig"),HJe=o(" (ViLT model)"),UJe=l(),sg=a("li"),Wre=a("strong"),JJe=o("vision-encoder-decoder"),YJe=o(" \u2014 "),SS=a("a"),KJe=o("VisionEncoderDecoderConfig"),ZJe=o(" (Vision Encoder decoder model)"),eYe=l(),lg=a("li"),Qre=a("strong"),oYe=o("vision-text-dual-encoder"),rYe=o(" \u2014 "),RS=a("a"),tYe=o("VisionTextDualEncoderConfig"),aYe=o(" (VisionTextDualEncoder model)"),nYe=l(),ig=a("li"),Hre=a("strong"),sYe=o("visual_bert"),lYe=o(" \u2014 "),PS=a("a"),iYe=o("VisualBertConfig"),dYe=o(" (VisualBert model)"),cYe=l(),dg=a("li"),Ure=a("strong"),mYe=o("vit"),fYe=o(" \u2014 "),BS=a("a"),gYe=o("ViTConfig"),hYe=o(" (ViT model)"),uYe=l(),cg=a("li"),Jre=a("strong"),pYe=o("vit_mae"),_Ye=o(" \u2014 "),IS=a("a"),bYe=o("ViTMAEConfig"),vYe=o(" (ViTMAE model)"),FYe=l(),mg=a("li"),Yre=a("strong"),TYe=o("wav2vec2"),MYe=o(" \u2014 "),qS=a("a"),EYe=o("Wav2Vec2Config"),CYe=o(" (Wav2Vec2 model)"),wYe=l(),fg=a("li"),Kre=a("strong"),AYe=o("wav2vec2-conformer"),yYe=o(" \u2014 "),NS=a("a"),LYe=o("Wav2Vec2ConformerConfig"),xYe=o(" (Wav2Vec2-Conformer model)"),$Ye=l(),gg=a("li"),Zre=a("strong"),kYe=o("wavlm"),SYe=o(" \u2014 "),jS=a("a"),RYe=o("WavLMConfig"),PYe=o(" (WavLM model)"),BYe=l(),hg=a("li"),ete=a("strong"),IYe=o("xglm"),qYe=o(" \u2014 "),DS=a("a"),NYe=o("XGLMConfig"),jYe=o(" (XGLM model)"),DYe=l(),ug=a("li"),ote=a("strong"),GYe=o("xlm"),OYe=o(" \u2014 "),GS=a("a"),VYe=o("XLMConfig"),XYe=o(" (XLM model)"),zYe=l(),pg=a("li"),rte=a("strong"),WYe=o("xlm-prophetnet"),QYe=o(" \u2014 "),OS=a("a"),HYe=o("XLMProphetNetConfig"),UYe=o(" (XLMProphetNet model)"),JYe=l(),_g=a("li"),tte=a("strong"),YYe=o("xlm-roberta"),KYe=o(" \u2014 "),VS=a("a"),ZYe=o("XLMRobertaConfig"),eKe=o(" (XLM-RoBERTa model)"),oKe=l(),bg=a("li"),ate=a("strong"),rKe=o("xlm-roberta-xl"),tKe=o(" \u2014 "),XS=a("a"),aKe=o("XLMRobertaXLConfig"),nKe=o(" (XLM-RoBERTa-XL model)"),sKe=l(),vg=a("li"),nte=a("strong"),lKe=o("xlnet"),iKe=o(" \u2014 "),zS=a("a"),dKe=o("XLNetConfig"),cKe=o(" (XLNet model)"),mKe=l(),Fg=a("li"),ste=a("strong"),fKe=o("yolos"),gKe=o(" \u2014 "),WS=a("a"),hKe=o("YolosConfig"),uKe=o(" (YOLOS model)"),pKe=l(),Tg=a("li"),lte=a("strong"),_Ke=o("yoso"),bKe=o(" \u2014 "),QS=a("a"),vKe=o("YosoConfig"),FKe=o(" (YOSO model)"),TKe=l(),F(Mg.$$.fragment),MKe=l(),Eg=a("div"),F($y.$$.fragment),EKe=l(),ite=a("p"),CKe=o("Register a new configuration for this class."),Vqe=l(),Ti=a("h2"),Cg=a("a"),dte=a("span"),F(ky.$$.fragment),wKe=l(),cte=a("span"),AKe=o("AutoTokenizer"),Xqe=l(),wo=a("div"),F(Sy.$$.fragment),yKe=l(),Ry=a("p"),LKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HS=a("a"),xKe=o("AutoTokenizer.from_pretrained()"),$Ke=o(" class method."),kKe=l(),Py=a("p"),SKe=o("This class cannot be instantiated directly using "),mte=a("code"),RKe=o("__init__()"),PKe=o(" (throws an error)."),BKe=l(),Cr=a("div"),F(By.$$.fragment),IKe=l(),fte=a("p"),qKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),NKe=l(),Aa=a("p"),jKe=o("The tokenizer class to instantiate is selected based on the "),gte=a("code"),DKe=o("model_type"),GKe=o(` property of the config object (either
passed as an argument or loaded from `),hte=a("code"),OKe=o("pretrained_model_name_or_path"),VKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=a("code"),XKe=o("pretrained_model_name_or_path"),zKe=o(":"),WKe=l(),k=a("ul"),Sn=a("li"),pte=a("strong"),QKe=o("albert"),HKe=o(" \u2014 "),US=a("a"),UKe=o("AlbertTokenizer"),JKe=o(" or "),JS=a("a"),YKe=o("AlbertTokenizerFast"),KKe=o(" (ALBERT model)"),ZKe=l(),Rn=a("li"),_te=a("strong"),eZe=o("bart"),oZe=o(" \u2014 "),YS=a("a"),rZe=o("BartTokenizer"),tZe=o(" or "),KS=a("a"),aZe=o("BartTokenizerFast"),nZe=o(" (BART model)"),sZe=l(),Pn=a("li"),bte=a("strong"),lZe=o("barthez"),iZe=o(" \u2014 "),ZS=a("a"),dZe=o("BarthezTokenizer"),cZe=o(" or "),eR=a("a"),mZe=o("BarthezTokenizerFast"),fZe=o(" (BARThez model)"),gZe=l(),wg=a("li"),vte=a("strong"),hZe=o("bartpho"),uZe=o(" \u2014 "),oR=a("a"),pZe=o("BartphoTokenizer"),_Ze=o(" (BARTpho model)"),bZe=l(),Bn=a("li"),Fte=a("strong"),vZe=o("bert"),FZe=o(" \u2014 "),rR=a("a"),TZe=o("BertTokenizer"),MZe=o(" or "),tR=a("a"),EZe=o("BertTokenizerFast"),CZe=o(" (BERT model)"),wZe=l(),Ag=a("li"),Tte=a("strong"),AZe=o("bert-generation"),yZe=o(" \u2014 "),aR=a("a"),LZe=o("BertGenerationTokenizer"),xZe=o(" (Bert Generation model)"),$Ze=l(),yg=a("li"),Mte=a("strong"),kZe=o("bert-japanese"),SZe=o(" \u2014 "),nR=a("a"),RZe=o("BertJapaneseTokenizer"),PZe=o(" (BertJapanese model)"),BZe=l(),Lg=a("li"),Ete=a("strong"),IZe=o("bertweet"),qZe=o(" \u2014 "),sR=a("a"),NZe=o("BertweetTokenizer"),jZe=o(" (Bertweet model)"),DZe=l(),In=a("li"),Cte=a("strong"),GZe=o("big_bird"),OZe=o(" \u2014 "),lR=a("a"),VZe=o("BigBirdTokenizer"),XZe=o(" or "),iR=a("a"),zZe=o("BigBirdTokenizerFast"),WZe=o(" (BigBird model)"),QZe=l(),qn=a("li"),wte=a("strong"),HZe=o("bigbird_pegasus"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("PegasusTokenizer"),YZe=o(" or "),cR=a("a"),KZe=o("PegasusTokenizerFast"),ZZe=o(" (BigBirdPegasus model)"),eeo=l(),Nn=a("li"),Ate=a("strong"),oeo=o("blenderbot"),reo=o(" \u2014 "),mR=a("a"),teo=o("BlenderbotTokenizer"),aeo=o(" or "),fR=a("a"),neo=o("BlenderbotTokenizerFast"),seo=o(" (Blenderbot model)"),leo=l(),xg=a("li"),yte=a("strong"),ieo=o("blenderbot-small"),deo=o(" \u2014 "),gR=a("a"),ceo=o("BlenderbotSmallTokenizer"),meo=o(" (BlenderbotSmall model)"),feo=l(),$g=a("li"),Lte=a("strong"),geo=o("byt5"),heo=o(" \u2014 "),hR=a("a"),ueo=o("ByT5Tokenizer"),peo=o(" (ByT5 model)"),_eo=l(),jn=a("li"),xte=a("strong"),beo=o("camembert"),veo=o(" \u2014 "),uR=a("a"),Feo=o("CamembertTokenizer"),Teo=o(" or "),pR=a("a"),Meo=o("CamembertTokenizerFast"),Eeo=o(" (CamemBERT model)"),Ceo=l(),kg=a("li"),$te=a("strong"),weo=o("canine"),Aeo=o(" \u2014 "),_R=a("a"),yeo=o("CanineTokenizer"),Leo=o(" (Canine model)"),xeo=l(),Dn=a("li"),kte=a("strong"),$eo=o("clip"),keo=o(" \u2014 "),bR=a("a"),Seo=o("CLIPTokenizer"),Reo=o(" or "),vR=a("a"),Peo=o("CLIPTokenizerFast"),Beo=o(" (CLIP model)"),Ieo=l(),Gn=a("li"),Ste=a("strong"),qeo=o("convbert"),Neo=o(" \u2014 "),FR=a("a"),jeo=o("ConvBertTokenizer"),Deo=o(" or "),TR=a("a"),Geo=o("ConvBertTokenizerFast"),Oeo=o(" (ConvBERT model)"),Veo=l(),On=a("li"),Rte=a("strong"),Xeo=o("cpm"),zeo=o(" \u2014 "),MR=a("a"),Weo=o("CpmTokenizer"),Qeo=o(" or "),ER=a("a"),Heo=o("CpmTokenizerFast"),Ueo=o(" (CPM model)"),Jeo=l(),Sg=a("li"),Pte=a("strong"),Yeo=o("ctrl"),Keo=o(" \u2014 "),CR=a("a"),Zeo=o("CTRLTokenizer"),eoo=o(" (CTRL model)"),ooo=l(),Vn=a("li"),Bte=a("strong"),roo=o("data2vec-text"),too=o(" \u2014 "),wR=a("a"),aoo=o("RobertaTokenizer"),noo=o(" or "),AR=a("a"),soo=o("RobertaTokenizerFast"),loo=o(" (Data2VecText model)"),ioo=l(),Xn=a("li"),Ite=a("strong"),doo=o("deberta"),coo=o(" \u2014 "),yR=a("a"),moo=o("DebertaTokenizer"),foo=o(" or "),LR=a("a"),goo=o("DebertaTokenizerFast"),hoo=o(" (DeBERTa model)"),uoo=l(),zn=a("li"),qte=a("strong"),poo=o("deberta-v2"),_oo=o(" \u2014 "),xR=a("a"),boo=o("DebertaV2Tokenizer"),voo=o(" or "),$R=a("a"),Foo=o("DebertaV2TokenizerFast"),Too=o(" (DeBERTa-v2 model)"),Moo=l(),Wn=a("li"),Nte=a("strong"),Eoo=o("distilbert"),Coo=o(" \u2014 "),kR=a("a"),woo=o("DistilBertTokenizer"),Aoo=o(" or "),SR=a("a"),yoo=o("DistilBertTokenizerFast"),Loo=o(" (DistilBERT model)"),xoo=l(),Qn=a("li"),jte=a("strong"),$oo=o("dpr"),koo=o(" \u2014 "),RR=a("a"),Soo=o("DPRQuestionEncoderTokenizer"),Roo=o(" or "),PR=a("a"),Poo=o("DPRQuestionEncoderTokenizerFast"),Boo=o(" (DPR model)"),Ioo=l(),Hn=a("li"),Dte=a("strong"),qoo=o("electra"),Noo=o(" \u2014 "),BR=a("a"),joo=o("ElectraTokenizer"),Doo=o(" or "),IR=a("a"),Goo=o("ElectraTokenizerFast"),Ooo=o(" (ELECTRA model)"),Voo=l(),Rg=a("li"),Gte=a("strong"),Xoo=o("flaubert"),zoo=o(" \u2014 "),qR=a("a"),Woo=o("FlaubertTokenizer"),Qoo=o(" (FlauBERT model)"),Hoo=l(),Un=a("li"),Ote=a("strong"),Uoo=o("fnet"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("FNetTokenizer"),Koo=o(" or "),jR=a("a"),Zoo=o("FNetTokenizerFast"),ero=o(" (FNet model)"),oro=l(),Pg=a("li"),Vte=a("strong"),rro=o("fsmt"),tro=o(" \u2014 "),DR=a("a"),aro=o("FSMTTokenizer"),nro=o(" (FairSeq Machine-Translation model)"),sro=l(),Jn=a("li"),Xte=a("strong"),lro=o("funnel"),iro=o(" \u2014 "),GR=a("a"),dro=o("FunnelTokenizer"),cro=o(" or "),OR=a("a"),mro=o("FunnelTokenizerFast"),fro=o(" (Funnel Transformer model)"),gro=l(),Yn=a("li"),zte=a("strong"),hro=o("gpt2"),uro=o(" \u2014 "),VR=a("a"),pro=o("GPT2Tokenizer"),_ro=o(" or "),XR=a("a"),bro=o("GPT2TokenizerFast"),vro=o(" (OpenAI GPT-2 model)"),Fro=l(),Kn=a("li"),Wte=a("strong"),Tro=o("gpt_neo"),Mro=o(" \u2014 "),zR=a("a"),Ero=o("GPT2Tokenizer"),Cro=o(" or "),WR=a("a"),wro=o("GPT2TokenizerFast"),Aro=o(" (GPT Neo model)"),yro=l(),Zn=a("li"),Qte=a("strong"),Lro=o("gptj"),xro=o(" \u2014 "),QR=a("a"),$ro=o("GPT2Tokenizer"),kro=o(" or "),HR=a("a"),Sro=o("GPT2TokenizerFast"),Rro=o(" (GPT-J model)"),Pro=l(),es=a("li"),Hte=a("strong"),Bro=o("herbert"),Iro=o(" \u2014 "),UR=a("a"),qro=o("HerbertTokenizer"),Nro=o(" or "),JR=a("a"),jro=o("HerbertTokenizerFast"),Dro=o(" (HerBERT model)"),Gro=l(),Bg=a("li"),Ute=a("strong"),Oro=o("hubert"),Vro=o(" \u2014 "),YR=a("a"),Xro=o("Wav2Vec2CTCTokenizer"),zro=o(" (Hubert model)"),Wro=l(),os=a("li"),Jte=a("strong"),Qro=o("ibert"),Hro=o(" \u2014 "),KR=a("a"),Uro=o("RobertaTokenizer"),Jro=o(" or "),ZR=a("a"),Yro=o("RobertaTokenizerFast"),Kro=o(" (I-BERT model)"),Zro=l(),rs=a("li"),Yte=a("strong"),eto=o("layoutlm"),oto=o(" \u2014 "),eP=a("a"),rto=o("LayoutLMTokenizer"),tto=o(" or "),oP=a("a"),ato=o("LayoutLMTokenizerFast"),nto=o(" (LayoutLM model)"),sto=l(),ts=a("li"),Kte=a("strong"),lto=o("layoutlmv2"),ito=o(" \u2014 "),rP=a("a"),dto=o("LayoutLMv2Tokenizer"),cto=o(" or "),tP=a("a"),mto=o("LayoutLMv2TokenizerFast"),fto=o(" (LayoutLMv2 model)"),gto=l(),as=a("li"),Zte=a("strong"),hto=o("layoutlmv3"),uto=o(" \u2014 "),aP=a("a"),pto=o("LayoutLMv3Tokenizer"),_to=o(" or "),nP=a("a"),bto=o("LayoutLMv3TokenizerFast"),vto=o(" (LayoutLMv3 model)"),Fto=l(),ns=a("li"),eae=a("strong"),Tto=o("layoutxlm"),Mto=o(" \u2014 "),sP=a("a"),Eto=o("LayoutXLMTokenizer"),Cto=o(" or "),lP=a("a"),wto=o("LayoutXLMTokenizerFast"),Ato=o(" (LayoutXLM model)"),yto=l(),ss=a("li"),oae=a("strong"),Lto=o("led"),xto=o(" \u2014 "),iP=a("a"),$to=o("LEDTokenizer"),kto=o(" or "),dP=a("a"),Sto=o("LEDTokenizerFast"),Rto=o(" (LED model)"),Pto=l(),ls=a("li"),rae=a("strong"),Bto=o("longformer"),Ito=o(" \u2014 "),cP=a("a"),qto=o("LongformerTokenizer"),Nto=o(" or "),mP=a("a"),jto=o("LongformerTokenizerFast"),Dto=o(" (Longformer model)"),Gto=l(),Ig=a("li"),tae=a("strong"),Oto=o("luke"),Vto=o(" \u2014 "),fP=a("a"),Xto=o("LukeTokenizer"),zto=o(" (LUKE model)"),Wto=l(),is=a("li"),aae=a("strong"),Qto=o("lxmert"),Hto=o(" \u2014 "),gP=a("a"),Uto=o("LxmertTokenizer"),Jto=o(" or "),hP=a("a"),Yto=o("LxmertTokenizerFast"),Kto=o(" (LXMERT model)"),Zto=l(),qg=a("li"),nae=a("strong"),eao=o("m2m_100"),oao=o(" \u2014 "),uP=a("a"),rao=o("M2M100Tokenizer"),tao=o(" (M2M100 model)"),aao=l(),Ng=a("li"),sae=a("strong"),nao=o("marian"),sao=o(" \u2014 "),pP=a("a"),lao=o("MarianTokenizer"),iao=o(" (Marian model)"),dao=l(),ds=a("li"),lae=a("strong"),cao=o("mbart"),mao=o(" \u2014 "),_P=a("a"),fao=o("MBartTokenizer"),gao=o(" or "),bP=a("a"),hao=o("MBartTokenizerFast"),uao=o(" (mBART model)"),pao=l(),cs=a("li"),iae=a("strong"),_ao=o("mbart50"),bao=o(" \u2014 "),vP=a("a"),vao=o("MBart50Tokenizer"),Fao=o(" or "),FP=a("a"),Tao=o("MBart50TokenizerFast"),Mao=o(" (mBART-50 model)"),Eao=l(),ms=a("li"),dae=a("strong"),Cao=o("megatron-bert"),wao=o(" \u2014 "),TP=a("a"),Aao=o("BertTokenizer"),yao=o(" or "),MP=a("a"),Lao=o("BertTokenizerFast"),xao=o(" (MegatronBert model)"),$ao=l(),jg=a("li"),cae=a("strong"),kao=o("mluke"),Sao=o(" \u2014 "),EP=a("a"),Rao=o("MLukeTokenizer"),Pao=o(" (mLUKE model)"),Bao=l(),fs=a("li"),mae=a("strong"),Iao=o("mobilebert"),qao=o(" \u2014 "),CP=a("a"),Nao=o("MobileBertTokenizer"),jao=o(" or "),wP=a("a"),Dao=o("MobileBertTokenizerFast"),Gao=o(" (MobileBERT model)"),Oao=l(),gs=a("li"),fae=a("strong"),Vao=o("mpnet"),Xao=o(" \u2014 "),AP=a("a"),zao=o("MPNetTokenizer"),Wao=o(" or "),yP=a("a"),Qao=o("MPNetTokenizerFast"),Hao=o(" (MPNet model)"),Uao=l(),hs=a("li"),gae=a("strong"),Jao=o("mt5"),Yao=o(" \u2014 "),LP=a("a"),Kao=o("MT5Tokenizer"),Zao=o(" or "),xP=a("a"),eno=o("MT5TokenizerFast"),ono=o(" (mT5 model)"),rno=l(),us=a("li"),hae=a("strong"),tno=o("nystromformer"),ano=o(" \u2014 "),$P=a("a"),nno=o("AlbertTokenizer"),sno=o(" or "),kP=a("a"),lno=o("AlbertTokenizerFast"),ino=o(" (Nystromformer model)"),dno=l(),ps=a("li"),uae=a("strong"),cno=o("openai-gpt"),mno=o(" \u2014 "),SP=a("a"),fno=o("OpenAIGPTTokenizer"),gno=o(" or "),RP=a("a"),hno=o("OpenAIGPTTokenizerFast"),uno=o(" (OpenAI GPT model)"),pno=l(),Dg=a("li"),pae=a("strong"),_no=o("opt"),bno=o(" \u2014 "),PP=a("a"),vno=o("GPT2Tokenizer"),Fno=o(" (OPT model)"),Tno=l(),_s=a("li"),_ae=a("strong"),Mno=o("pegasus"),Eno=o(" \u2014 "),BP=a("a"),Cno=o("PegasusTokenizer"),wno=o(" or "),IP=a("a"),Ano=o("PegasusTokenizerFast"),yno=o(" (Pegasus model)"),Lno=l(),Gg=a("li"),bae=a("strong"),xno=o("perceiver"),$no=o(" \u2014 "),qP=a("a"),kno=o("PerceiverTokenizer"),Sno=o(" (Perceiver model)"),Rno=l(),Og=a("li"),vae=a("strong"),Pno=o("phobert"),Bno=o(" \u2014 "),NP=a("a"),Ino=o("PhobertTokenizer"),qno=o(" (PhoBERT model)"),Nno=l(),Vg=a("li"),Fae=a("strong"),jno=o("plbart"),Dno=o(" \u2014 "),jP=a("a"),Gno=o("PLBartTokenizer"),Ono=o(" (PLBart model)"),Vno=l(),Xg=a("li"),Tae=a("strong"),Xno=o("prophetnet"),zno=o(" \u2014 "),DP=a("a"),Wno=o("ProphetNetTokenizer"),Qno=o(" (ProphetNet model)"),Hno=l(),bs=a("li"),Mae=a("strong"),Uno=o("qdqbert"),Jno=o(" \u2014 "),GP=a("a"),Yno=o("BertTokenizer"),Kno=o(" or "),OP=a("a"),Zno=o("BertTokenizerFast"),eso=o(" (QDQBert model)"),oso=l(),zg=a("li"),Eae=a("strong"),rso=o("rag"),tso=o(" \u2014 "),VP=a("a"),aso=o("RagTokenizer"),nso=o(" (RAG model)"),sso=l(),vs=a("li"),Cae=a("strong"),lso=o("realm"),iso=o(" \u2014 "),XP=a("a"),dso=o("RealmTokenizer"),cso=o(" or "),zP=a("a"),mso=o("RealmTokenizerFast"),fso=o(" (Realm model)"),gso=l(),Fs=a("li"),wae=a("strong"),hso=o("reformer"),uso=o(" \u2014 "),WP=a("a"),pso=o("ReformerTokenizer"),_so=o(" or "),QP=a("a"),bso=o("ReformerTokenizerFast"),vso=o(" (Reformer model)"),Fso=l(),Ts=a("li"),Aae=a("strong"),Tso=o("rembert"),Mso=o(" \u2014 "),HP=a("a"),Eso=o("RemBertTokenizer"),Cso=o(" or "),UP=a("a"),wso=o("RemBertTokenizerFast"),Aso=o(" (RemBERT model)"),yso=l(),Ms=a("li"),yae=a("strong"),Lso=o("retribert"),xso=o(" \u2014 "),JP=a("a"),$so=o("RetriBertTokenizer"),kso=o(" or "),YP=a("a"),Sso=o("RetriBertTokenizerFast"),Rso=o(" (RetriBERT model)"),Pso=l(),Es=a("li"),Lae=a("strong"),Bso=o("roberta"),Iso=o(" \u2014 "),KP=a("a"),qso=o("RobertaTokenizer"),Nso=o(" or "),ZP=a("a"),jso=o("RobertaTokenizerFast"),Dso=o(" (RoBERTa model)"),Gso=l(),Cs=a("li"),xae=a("strong"),Oso=o("roformer"),Vso=o(" \u2014 "),eB=a("a"),Xso=o("RoFormerTokenizer"),zso=o(" or "),oB=a("a"),Wso=o("RoFormerTokenizerFast"),Qso=o(" (RoFormer model)"),Hso=l(),Wg=a("li"),$ae=a("strong"),Uso=o("speech_to_text"),Jso=o(" \u2014 "),rB=a("a"),Yso=o("Speech2TextTokenizer"),Kso=o(" (Speech2Text model)"),Zso=l(),Qg=a("li"),kae=a("strong"),elo=o("speech_to_text_2"),olo=o(" \u2014 "),tB=a("a"),rlo=o("Speech2Text2Tokenizer"),tlo=o(" (Speech2Text2 model)"),alo=l(),ws=a("li"),Sae=a("strong"),nlo=o("splinter"),slo=o(" \u2014 "),aB=a("a"),llo=o("SplinterTokenizer"),ilo=o(" or "),nB=a("a"),dlo=o("SplinterTokenizerFast"),clo=o(" (Splinter model)"),mlo=l(),As=a("li"),Rae=a("strong"),flo=o("squeezebert"),glo=o(" \u2014 "),sB=a("a"),hlo=o("SqueezeBertTokenizer"),ulo=o(" or "),lB=a("a"),plo=o("SqueezeBertTokenizerFast"),_lo=o(" (SqueezeBERT model)"),blo=l(),ys=a("li"),Pae=a("strong"),vlo=o("t5"),Flo=o(" \u2014 "),iB=a("a"),Tlo=o("T5Tokenizer"),Mlo=o(" or "),dB=a("a"),Elo=o("T5TokenizerFast"),Clo=o(" (T5 model)"),wlo=l(),Hg=a("li"),Bae=a("strong"),Alo=o("tapas"),ylo=o(" \u2014 "),cB=a("a"),Llo=o("TapasTokenizer"),xlo=o(" (TAPAS model)"),$lo=l(),Ug=a("li"),Iae=a("strong"),klo=o("tapex"),Slo=o(" \u2014 "),mB=a("a"),Rlo=o("TapexTokenizer"),Plo=o(" (TAPEX model)"),Blo=l(),Jg=a("li"),qae=a("strong"),Ilo=o("transfo-xl"),qlo=o(" \u2014 "),fB=a("a"),Nlo=o("TransfoXLTokenizer"),jlo=o(" (Transformer-XL model)"),Dlo=l(),Ls=a("li"),Nae=a("strong"),Glo=o("visual_bert"),Olo=o(" \u2014 "),gB=a("a"),Vlo=o("BertTokenizer"),Xlo=o(" or "),hB=a("a"),zlo=o("BertTokenizerFast"),Wlo=o(" (VisualBert model)"),Qlo=l(),Yg=a("li"),jae=a("strong"),Hlo=o("wav2vec2"),Ulo=o(" \u2014 "),uB=a("a"),Jlo=o("Wav2Vec2CTCTokenizer"),Ylo=o(" (Wav2Vec2 model)"),Klo=l(),Kg=a("li"),Dae=a("strong"),Zlo=o("wav2vec2-conformer"),eio=o(" \u2014 "),pB=a("a"),oio=o("Wav2Vec2CTCTokenizer"),rio=o(" (Wav2Vec2-Conformer model)"),tio=l(),Zg=a("li"),Gae=a("strong"),aio=o("wav2vec2_phoneme"),nio=o(" \u2014 "),_B=a("a"),sio=o("Wav2Vec2PhonemeCTCTokenizer"),lio=o(" (Wav2Vec2Phoneme model)"),iio=l(),xs=a("li"),Oae=a("strong"),dio=o("xglm"),cio=o(" \u2014 "),bB=a("a"),mio=o("XGLMTokenizer"),fio=o(" or "),vB=a("a"),gio=o("XGLMTokenizerFast"),hio=o(" (XGLM model)"),uio=l(),eh=a("li"),Vae=a("strong"),pio=o("xlm"),_io=o(" \u2014 "),FB=a("a"),bio=o("XLMTokenizer"),vio=o(" (XLM model)"),Fio=l(),oh=a("li"),Xae=a("strong"),Tio=o("xlm-prophetnet"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("XLMProphetNetTokenizer"),Cio=o(" (XLMProphetNet model)"),wio=l(),$s=a("li"),zae=a("strong"),Aio=o("xlm-roberta"),yio=o(" \u2014 "),MB=a("a"),Lio=o("XLMRobertaTokenizer"),xio=o(" or "),EB=a("a"),$io=o("XLMRobertaTokenizerFast"),kio=o(" (XLM-RoBERTa model)"),Sio=l(),ks=a("li"),Wae=a("strong"),Rio=o("xlm-roberta-xl"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("RobertaTokenizer"),Iio=o(" or "),wB=a("a"),qio=o("RobertaTokenizerFast"),Nio=o(" (XLM-RoBERTa-XL model)"),jio=l(),Ss=a("li"),Qae=a("strong"),Dio=o("xlnet"),Gio=o(" \u2014 "),AB=a("a"),Oio=o("XLNetTokenizer"),Vio=o(" or "),yB=a("a"),Xio=o("XLNetTokenizerFast"),zio=o(" (XLNet model)"),Wio=l(),Rs=a("li"),Hae=a("strong"),Qio=o("yoso"),Hio=o(" \u2014 "),LB=a("a"),Uio=o("AlbertTokenizer"),Jio=o(" or "),xB=a("a"),Yio=o("AlbertTokenizerFast"),Kio=o(" (YOSO model)"),Zio=l(),F(rh.$$.fragment),edo=l(),th=a("div"),F(Iy.$$.fragment),odo=l(),Uae=a("p"),rdo=o("Register a new tokenizer in this mapping."),zqe=l(),Mi=a("h2"),ah=a("a"),Jae=a("span"),F(qy.$$.fragment),tdo=l(),Yae=a("span"),ado=o("AutoFeatureExtractor"),Wqe=l(),Ao=a("div"),F(Ny.$$.fragment),ndo=l(),jy=a("p"),sdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$B=a("a"),ldo=o("AutoFeatureExtractor.from_pretrained()"),ido=o(" class method."),ddo=l(),Dy=a("p"),cdo=o("This class cannot be instantiated directly using "),Kae=a("code"),mdo=o("__init__()"),fdo=o(" (throws an error)."),gdo=l(),He=a("div"),F(Gy.$$.fragment),hdo=l(),Zae=a("p"),udo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),pdo=l(),ya=a("p"),_do=o("The feature extractor class to instantiate is selected based on the "),ene=a("code"),bdo=o("model_type"),vdo=o(` property of the config object
(either passed as an argument or loaded from `),one=a("code"),Fdo=o("pretrained_model_name_or_path"),Tdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rne=a("code"),Mdo=o("pretrained_model_name_or_path"),Edo=o(":"),Cdo=l(),Y=a("ul"),nh=a("li"),tne=a("strong"),wdo=o("beit"),Ado=o(" \u2014 "),kB=a("a"),ydo=o("BeitFeatureExtractor"),Ldo=o(" (BEiT model)"),xdo=l(),sh=a("li"),ane=a("strong"),$do=o("clip"),kdo=o(" \u2014 "),SB=a("a"),Sdo=o("CLIPFeatureExtractor"),Rdo=o(" (CLIP model)"),Pdo=l(),lh=a("li"),nne=a("strong"),Bdo=o("convnext"),Ido=o(" \u2014 "),RB=a("a"),qdo=o("ConvNextFeatureExtractor"),Ndo=o(" (ConvNext model)"),jdo=l(),ih=a("li"),sne=a("strong"),Ddo=o("cvt"),Gdo=o(" \u2014 "),PB=a("a"),Odo=o("ConvNextFeatureExtractor"),Vdo=o(" (CvT model)"),Xdo=l(),dh=a("li"),lne=a("strong"),zdo=o("data2vec-audio"),Wdo=o(" \u2014 "),BB=a("a"),Qdo=o("Wav2Vec2FeatureExtractor"),Hdo=o(" (Data2VecAudio model)"),Udo=l(),ch=a("li"),ine=a("strong"),Jdo=o("data2vec-vision"),Ydo=o(" \u2014 "),IB=a("a"),Kdo=o("BeitFeatureExtractor"),Zdo=o(" (Data2VecVision model)"),eco=l(),mh=a("li"),dne=a("strong"),oco=o("deit"),rco=o(" \u2014 "),qB=a("a"),tco=o("DeiTFeatureExtractor"),aco=o(" (DeiT model)"),nco=l(),fh=a("li"),cne=a("strong"),sco=o("detr"),lco=o(" \u2014 "),NB=a("a"),ico=o("DetrFeatureExtractor"),dco=o(" (DETR model)"),cco=l(),gh=a("li"),mne=a("strong"),mco=o("dpt"),fco=o(" \u2014 "),jB=a("a"),gco=o("DPTFeatureExtractor"),hco=o(" (DPT model)"),uco=l(),hh=a("li"),fne=a("strong"),pco=o("flava"),_co=o(" \u2014 "),DB=a("a"),bco=o("FlavaFeatureExtractor"),vco=o(" (Flava model)"),Fco=l(),uh=a("li"),gne=a("strong"),Tco=o("glpn"),Mco=o(" \u2014 "),GB=a("a"),Eco=o("GLPNFeatureExtractor"),Cco=o(" (GLPN model)"),wco=l(),ph=a("li"),hne=a("strong"),Aco=o("hubert"),yco=o(" \u2014 "),OB=a("a"),Lco=o("Wav2Vec2FeatureExtractor"),xco=o(" (Hubert model)"),$co=l(),_h=a("li"),une=a("strong"),kco=o("imagegpt"),Sco=o(" \u2014 "),VB=a("a"),Rco=o("ImageGPTFeatureExtractor"),Pco=o(" (ImageGPT model)"),Bco=l(),bh=a("li"),pne=a("strong"),Ico=o("layoutlmv2"),qco=o(" \u2014 "),XB=a("a"),Nco=o("LayoutLMv2FeatureExtractor"),jco=o(" (LayoutLMv2 model)"),Dco=l(),vh=a("li"),_ne=a("strong"),Gco=o("layoutlmv3"),Oco=o(" \u2014 "),zB=a("a"),Vco=o("LayoutLMv3FeatureExtractor"),Xco=o(" (LayoutLMv3 model)"),zco=l(),Fh=a("li"),bne=a("strong"),Wco=o("maskformer"),Qco=o(" \u2014 "),WB=a("a"),Hco=o("MaskFormerFeatureExtractor"),Uco=o(" (MaskFormer model)"),Jco=l(),Th=a("li"),vne=a("strong"),Yco=o("perceiver"),Kco=o(" \u2014 "),QB=a("a"),Zco=o("PerceiverFeatureExtractor"),emo=o(" (Perceiver model)"),omo=l(),Mh=a("li"),Fne=a("strong"),rmo=o("poolformer"),tmo=o(" \u2014 "),HB=a("a"),amo=o("PoolFormerFeatureExtractor"),nmo=o(" (PoolFormer model)"),smo=l(),Eh=a("li"),Tne=a("strong"),lmo=o("regnet"),imo=o(" \u2014 "),UB=a("a"),dmo=o("ConvNextFeatureExtractor"),cmo=o(" (RegNet model)"),mmo=l(),Ch=a("li"),Mne=a("strong"),fmo=o("resnet"),gmo=o(" \u2014 "),JB=a("a"),hmo=o("ConvNextFeatureExtractor"),umo=o(" (ResNet model)"),pmo=l(),wh=a("li"),Ene=a("strong"),_mo=o("segformer"),bmo=o(" \u2014 "),YB=a("a"),vmo=o("SegformerFeatureExtractor"),Fmo=o(" (SegFormer model)"),Tmo=l(),Ah=a("li"),Cne=a("strong"),Mmo=o("speech_to_text"),Emo=o(" \u2014 "),KB=a("a"),Cmo=o("Speech2TextFeatureExtractor"),wmo=o(" (Speech2Text model)"),Amo=l(),yh=a("li"),wne=a("strong"),ymo=o("swin"),Lmo=o(" \u2014 "),ZB=a("a"),xmo=o("ViTFeatureExtractor"),$mo=o(" (Swin model)"),kmo=l(),Lh=a("li"),Ane=a("strong"),Smo=o("van"),Rmo=o(" \u2014 "),eI=a("a"),Pmo=o("ConvNextFeatureExtractor"),Bmo=o(" (VAN model)"),Imo=l(),xh=a("li"),yne=a("strong"),qmo=o("vit"),Nmo=o(" \u2014 "),oI=a("a"),jmo=o("ViTFeatureExtractor"),Dmo=o(" (ViT model)"),Gmo=l(),$h=a("li"),Lne=a("strong"),Omo=o("vit_mae"),Vmo=o(" \u2014 "),rI=a("a"),Xmo=o("ViTFeatureExtractor"),zmo=o(" (ViTMAE model)"),Wmo=l(),kh=a("li"),xne=a("strong"),Qmo=o("wav2vec2"),Hmo=o(" \u2014 "),tI=a("a"),Umo=o("Wav2Vec2FeatureExtractor"),Jmo=o(" (Wav2Vec2 model)"),Ymo=l(),Sh=a("li"),$ne=a("strong"),Kmo=o("wav2vec2-conformer"),Zmo=o(" \u2014 "),aI=a("a"),efo=o("Wav2Vec2FeatureExtractor"),ofo=o(" (Wav2Vec2-Conformer model)"),rfo=l(),Rh=a("li"),kne=a("strong"),tfo=o("yolos"),afo=o(" \u2014 "),nI=a("a"),nfo=o("YolosFeatureExtractor"),sfo=o(" (YOLOS model)"),lfo=l(),F(Ph.$$.fragment),ifo=l(),F(Bh.$$.fragment),dfo=l(),Ih=a("div"),F(Oy.$$.fragment),cfo=l(),Sne=a("p"),mfo=o("Register a new feature extractor for this class."),Qqe=l(),Ei=a("h2"),qh=a("a"),Rne=a("span"),F(Vy.$$.fragment),ffo=l(),Pne=a("span"),gfo=o("AutoProcessor"),Hqe=l(),yo=a("div"),F(Xy.$$.fragment),hfo=l(),zy=a("p"),ufo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),sI=a("a"),pfo=o("AutoProcessor.from_pretrained()"),_fo=o(" class method."),bfo=l(),Wy=a("p"),vfo=o("This class cannot be instantiated directly using "),Bne=a("code"),Ffo=o("__init__()"),Tfo=o(" (throws an error)."),Mfo=l(),Ue=a("div"),F(Qy.$$.fragment),Efo=l(),Ine=a("p"),Cfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wfo=l(),Ci=a("p"),Afo=o("The processor class to instantiate is selected based on the "),qne=a("code"),yfo=o("model_type"),Lfo=o(` property of the config object (either
passed as an argument or loaded from `),Nne=a("code"),xfo=o("pretrained_model_name_or_path"),$fo=o(" if possible):"),kfo=l(),he=a("ul"),Nh=a("li"),jne=a("strong"),Sfo=o("clip"),Rfo=o(" \u2014 "),lI=a("a"),Pfo=o("CLIPProcessor"),Bfo=o(" (CLIP model)"),Ifo=l(),jh=a("li"),Dne=a("strong"),qfo=o("flava"),Nfo=o(" \u2014 "),Gne=a("code"),jfo=o("FLAVAProcessor"),Dfo=o(" (Flava model)"),Gfo=l(),Dh=a("li"),One=a("strong"),Ofo=o("layoutlmv2"),Vfo=o(" \u2014 "),iI=a("a"),Xfo=o("LayoutLMv2Processor"),zfo=o(" (LayoutLMv2 model)"),Wfo=l(),Gh=a("li"),Vne=a("strong"),Qfo=o("layoutlmv3"),Hfo=o(" \u2014 "),dI=a("a"),Ufo=o("LayoutLMv3Processor"),Jfo=o(" (LayoutLMv3 model)"),Yfo=l(),Oh=a("li"),Xne=a("strong"),Kfo=o("layoutxlm"),Zfo=o(" \u2014 "),cI=a("a"),ego=o("LayoutXLMProcessor"),ogo=o(" (LayoutXLM model)"),rgo=l(),Vh=a("li"),zne=a("strong"),tgo=o("sew"),ago=o(" \u2014 "),mI=a("a"),ngo=o("Wav2Vec2Processor"),sgo=o(" (SEW model)"),lgo=l(),Xh=a("li"),Wne=a("strong"),igo=o("sew-d"),dgo=o(" \u2014 "),fI=a("a"),cgo=o("Wav2Vec2Processor"),mgo=o(" (SEW-D model)"),fgo=l(),zh=a("li"),Qne=a("strong"),ggo=o("speech_to_text"),hgo=o(" \u2014 "),gI=a("a"),ugo=o("Speech2TextProcessor"),pgo=o(" (Speech2Text model)"),_go=l(),Wh=a("li"),Hne=a("strong"),bgo=o("speech_to_text_2"),vgo=o(" \u2014 "),hI=a("a"),Fgo=o("Speech2Text2Processor"),Tgo=o(" (Speech2Text2 model)"),Mgo=l(),Qh=a("li"),Une=a("strong"),Ego=o("trocr"),Cgo=o(" \u2014 "),uI=a("a"),wgo=o("TrOCRProcessor"),Ago=o(" (TrOCR model)"),ygo=l(),Hh=a("li"),Jne=a("strong"),Lgo=o("unispeech"),xgo=o(" \u2014 "),pI=a("a"),$go=o("Wav2Vec2Processor"),kgo=o(" (UniSpeech model)"),Sgo=l(),Uh=a("li"),Yne=a("strong"),Rgo=o("unispeech-sat"),Pgo=o(" \u2014 "),_I=a("a"),Bgo=o("Wav2Vec2Processor"),Igo=o(" (UniSpeechSat model)"),qgo=l(),Jh=a("li"),Kne=a("strong"),Ngo=o("vilt"),jgo=o(" \u2014 "),bI=a("a"),Dgo=o("ViltProcessor"),Ggo=o(" (ViLT model)"),Ogo=l(),Yh=a("li"),Zne=a("strong"),Vgo=o("vision-text-dual-encoder"),Xgo=o(" \u2014 "),vI=a("a"),zgo=o("VisionTextDualEncoderProcessor"),Wgo=o(" (VisionTextDualEncoder model)"),Qgo=l(),Kh=a("li"),ese=a("strong"),Hgo=o("wav2vec2"),Ugo=o(" \u2014 "),FI=a("a"),Jgo=o("Wav2Vec2Processor"),Ygo=o(" (Wav2Vec2 model)"),Kgo=l(),Zh=a("li"),ose=a("strong"),Zgo=o("wav2vec2-conformer"),eho=o(" \u2014 "),TI=a("a"),oho=o("Wav2Vec2Processor"),rho=o(" (Wav2Vec2-Conformer model)"),tho=l(),eu=a("li"),rse=a("strong"),aho=o("wavlm"),nho=o(" \u2014 "),MI=a("a"),sho=o("Wav2Vec2Processor"),lho=o(" (WavLM model)"),iho=l(),F(ou.$$.fragment),dho=l(),F(ru.$$.fragment),cho=l(),tu=a("div"),F(Hy.$$.fragment),mho=l(),tse=a("p"),fho=o("Register a new processor for this class."),Uqe=l(),wi=a("h2"),au=a("a"),ase=a("span"),F(Uy.$$.fragment),gho=l(),nse=a("span"),hho=o("AutoModel"),Jqe=l(),Lo=a("div"),F(Jy.$$.fragment),uho=l(),Ai=a("p"),pho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EI=a("a"),_ho=o("from_pretrained()"),bho=o(" class method or the "),CI=a("a"),vho=o("from_config()"),Fho=o(` class
method.`),Tho=l(),Yy=a("p"),Mho=o("This class cannot be instantiated directly using "),sse=a("code"),Eho=o("__init__()"),Cho=o(" (throws an error)."),who=l(),tt=a("div"),F(Ky.$$.fragment),Aho=l(),lse=a("p"),yho=o("Instantiates one of the base model classes of the library from a configuration."),Lho=l(),yi=a("p"),xho=o(`Note:
Loading a model from its configuration file does `),ise=a("strong"),$ho=o("not"),kho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=a("a"),Sho=o("from_pretrained()"),Rho=o(" to load the model weights."),Pho=l(),F(nu.$$.fragment),Bho=l(),Je=a("div"),F(Zy.$$.fragment),Iho=l(),dse=a("p"),qho=o("Instantiate one of the base model classes of the library from a pretrained model."),Nho=l(),La=a("p"),jho=o("The model class to instantiate is selected based on the "),cse=a("code"),Dho=o("model_type"),Gho=o(` property of the config object (either
passed as an argument or loaded from `),mse=a("code"),Oho=o("pretrained_model_name_or_path"),Vho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=a("code"),Xho=o("pretrained_model_name_or_path"),zho=o(":"),Who=l(),x=a("ul"),su=a("li"),gse=a("strong"),Qho=o("albert"),Hho=o(" \u2014 "),AI=a("a"),Uho=o("AlbertModel"),Jho=o(" (ALBERT model)"),Yho=l(),lu=a("li"),hse=a("strong"),Kho=o("bart"),Zho=o(" \u2014 "),yI=a("a"),euo=o("BartModel"),ouo=o(" (BART model)"),ruo=l(),iu=a("li"),use=a("strong"),tuo=o("beit"),auo=o(" \u2014 "),LI=a("a"),nuo=o("BeitModel"),suo=o(" (BEiT model)"),luo=l(),du=a("li"),pse=a("strong"),iuo=o("bert"),duo=o(" \u2014 "),xI=a("a"),cuo=o("BertModel"),muo=o(" (BERT model)"),fuo=l(),cu=a("li"),_se=a("strong"),guo=o("bert-generation"),huo=o(" \u2014 "),$I=a("a"),uuo=o("BertGenerationEncoder"),puo=o(" (Bert Generation model)"),_uo=l(),mu=a("li"),bse=a("strong"),buo=o("big_bird"),vuo=o(" \u2014 "),kI=a("a"),Fuo=o("BigBirdModel"),Tuo=o(" (BigBird model)"),Muo=l(),fu=a("li"),vse=a("strong"),Euo=o("bigbird_pegasus"),Cuo=o(" \u2014 "),SI=a("a"),wuo=o("BigBirdPegasusModel"),Auo=o(" (BigBirdPegasus model)"),yuo=l(),gu=a("li"),Fse=a("strong"),Luo=o("blenderbot"),xuo=o(" \u2014 "),RI=a("a"),$uo=o("BlenderbotModel"),kuo=o(" (Blenderbot model)"),Suo=l(),hu=a("li"),Tse=a("strong"),Ruo=o("blenderbot-small"),Puo=o(" \u2014 "),PI=a("a"),Buo=o("BlenderbotSmallModel"),Iuo=o(" (BlenderbotSmall model)"),quo=l(),uu=a("li"),Mse=a("strong"),Nuo=o("camembert"),juo=o(" \u2014 "),BI=a("a"),Duo=o("CamembertModel"),Guo=o(" (CamemBERT model)"),Ouo=l(),pu=a("li"),Ese=a("strong"),Vuo=o("canine"),Xuo=o(" \u2014 "),II=a("a"),zuo=o("CanineModel"),Wuo=o(" (Canine model)"),Quo=l(),_u=a("li"),Cse=a("strong"),Huo=o("clip"),Uuo=o(" \u2014 "),qI=a("a"),Juo=o("CLIPModel"),Yuo=o(" (CLIP model)"),Kuo=l(),bu=a("li"),wse=a("strong"),Zuo=o("convbert"),epo=o(" \u2014 "),NI=a("a"),opo=o("ConvBertModel"),rpo=o(" (ConvBERT model)"),tpo=l(),vu=a("li"),Ase=a("strong"),apo=o("convnext"),npo=o(" \u2014 "),jI=a("a"),spo=o("ConvNextModel"),lpo=o(" (ConvNext model)"),ipo=l(),Fu=a("li"),yse=a("strong"),dpo=o("ctrl"),cpo=o(" \u2014 "),DI=a("a"),mpo=o("CTRLModel"),fpo=o(" (CTRL model)"),gpo=l(),Tu=a("li"),Lse=a("strong"),hpo=o("cvt"),upo=o(" \u2014 "),GI=a("a"),ppo=o("CvtModel"),_po=o(" (CvT model)"),bpo=l(),Mu=a("li"),xse=a("strong"),vpo=o("data2vec-audio"),Fpo=o(" \u2014 "),OI=a("a"),Tpo=o("Data2VecAudioModel"),Mpo=o(" (Data2VecAudio model)"),Epo=l(),Eu=a("li"),$se=a("strong"),Cpo=o("data2vec-text"),wpo=o(" \u2014 "),VI=a("a"),Apo=o("Data2VecTextModel"),ypo=o(" (Data2VecText model)"),Lpo=l(),Cu=a("li"),kse=a("strong"),xpo=o("data2vec-vision"),$po=o(" \u2014 "),XI=a("a"),kpo=o("Data2VecVisionModel"),Spo=o(" (Data2VecVision model)"),Rpo=l(),wu=a("li"),Sse=a("strong"),Ppo=o("deberta"),Bpo=o(" \u2014 "),zI=a("a"),Ipo=o("DebertaModel"),qpo=o(" (DeBERTa model)"),Npo=l(),Au=a("li"),Rse=a("strong"),jpo=o("deberta-v2"),Dpo=o(" \u2014 "),WI=a("a"),Gpo=o("DebertaV2Model"),Opo=o(" (DeBERTa-v2 model)"),Vpo=l(),yu=a("li"),Pse=a("strong"),Xpo=o("decision_transformer"),zpo=o(" \u2014 "),QI=a("a"),Wpo=o("DecisionTransformerModel"),Qpo=o(" (Decision Transformer model)"),Hpo=l(),Lu=a("li"),Bse=a("strong"),Upo=o("deit"),Jpo=o(" \u2014 "),HI=a("a"),Ypo=o("DeiTModel"),Kpo=o(" (DeiT model)"),Zpo=l(),xu=a("li"),Ise=a("strong"),e_o=o("detr"),o_o=o(" \u2014 "),UI=a("a"),r_o=o("DetrModel"),t_o=o(" (DETR model)"),a_o=l(),$u=a("li"),qse=a("strong"),n_o=o("distilbert"),s_o=o(" \u2014 "),JI=a("a"),l_o=o("DistilBertModel"),i_o=o(" (DistilBERT model)"),d_o=l(),ku=a("li"),Nse=a("strong"),c_o=o("dpr"),m_o=o(" \u2014 "),YI=a("a"),f_o=o("DPRQuestionEncoder"),g_o=o(" (DPR model)"),h_o=l(),Su=a("li"),jse=a("strong"),u_o=o("dpt"),p_o=o(" \u2014 "),KI=a("a"),__o=o("DPTModel"),b_o=o(" (DPT model)"),v_o=l(),Ru=a("li"),Dse=a("strong"),F_o=o("electra"),T_o=o(" \u2014 "),ZI=a("a"),M_o=o("ElectraModel"),E_o=o(" (ELECTRA model)"),C_o=l(),Pu=a("li"),Gse=a("strong"),w_o=o("flaubert"),A_o=o(" \u2014 "),eq=a("a"),y_o=o("FlaubertModel"),L_o=o(" (FlauBERT model)"),x_o=l(),Bu=a("li"),Ose=a("strong"),$_o=o("flava"),k_o=o(" \u2014 "),oq=a("a"),S_o=o("FlavaModel"),R_o=o(" (Flava model)"),P_o=l(),Iu=a("li"),Vse=a("strong"),B_o=o("fnet"),I_o=o(" \u2014 "),rq=a("a"),q_o=o("FNetModel"),N_o=o(" (FNet model)"),j_o=l(),qu=a("li"),Xse=a("strong"),D_o=o("fsmt"),G_o=o(" \u2014 "),tq=a("a"),O_o=o("FSMTModel"),V_o=o(" (FairSeq Machine-Translation model)"),X_o=l(),Ps=a("li"),zse=a("strong"),z_o=o("funnel"),W_o=o(" \u2014 "),aq=a("a"),Q_o=o("FunnelModel"),H_o=o(" or "),nq=a("a"),U_o=o("FunnelBaseModel"),J_o=o(" (Funnel Transformer model)"),Y_o=l(),Nu=a("li"),Wse=a("strong"),K_o=o("glpn"),Z_o=o(" \u2014 "),sq=a("a"),ebo=o("GLPNModel"),obo=o(" (GLPN model)"),rbo=l(),ju=a("li"),Qse=a("strong"),tbo=o("gpt2"),abo=o(" \u2014 "),lq=a("a"),nbo=o("GPT2Model"),sbo=o(" (OpenAI GPT-2 model)"),lbo=l(),Du=a("li"),Hse=a("strong"),ibo=o("gpt_neo"),dbo=o(" \u2014 "),iq=a("a"),cbo=o("GPTNeoModel"),mbo=o(" (GPT Neo model)"),fbo=l(),Gu=a("li"),Use=a("strong"),gbo=o("gptj"),hbo=o(" \u2014 "),dq=a("a"),ubo=o("GPTJModel"),pbo=o(" (GPT-J model)"),_bo=l(),Ou=a("li"),Jse=a("strong"),bbo=o("hubert"),vbo=o(" \u2014 "),cq=a("a"),Fbo=o("HubertModel"),Tbo=o(" (Hubert model)"),Mbo=l(),Vu=a("li"),Yse=a("strong"),Ebo=o("ibert"),Cbo=o(" \u2014 "),mq=a("a"),wbo=o("IBertModel"),Abo=o(" (I-BERT model)"),ybo=l(),Xu=a("li"),Kse=a("strong"),Lbo=o("imagegpt"),xbo=o(" \u2014 "),fq=a("a"),$bo=o("ImageGPTModel"),kbo=o(" (ImageGPT model)"),Sbo=l(),zu=a("li"),Zse=a("strong"),Rbo=o("layoutlm"),Pbo=o(" \u2014 "),gq=a("a"),Bbo=o("LayoutLMModel"),Ibo=o(" (LayoutLM model)"),qbo=l(),Wu=a("li"),ele=a("strong"),Nbo=o("layoutlmv2"),jbo=o(" \u2014 "),hq=a("a"),Dbo=o("LayoutLMv2Model"),Gbo=o(" (LayoutLMv2 model)"),Obo=l(),Qu=a("li"),ole=a("strong"),Vbo=o("layoutlmv3"),Xbo=o(" \u2014 "),uq=a("a"),zbo=o("LayoutLMv3Model"),Wbo=o(" (LayoutLMv3 model)"),Qbo=l(),Hu=a("li"),rle=a("strong"),Hbo=o("led"),Ubo=o(" \u2014 "),pq=a("a"),Jbo=o("LEDModel"),Ybo=o(" (LED model)"),Kbo=l(),Uu=a("li"),tle=a("strong"),Zbo=o("longformer"),e2o=o(" \u2014 "),_q=a("a"),o2o=o("LongformerModel"),r2o=o(" (Longformer model)"),t2o=l(),Ju=a("li"),ale=a("strong"),a2o=o("luke"),n2o=o(" \u2014 "),bq=a("a"),s2o=o("LukeModel"),l2o=o(" (LUKE model)"),i2o=l(),Yu=a("li"),nle=a("strong"),d2o=o("lxmert"),c2o=o(" \u2014 "),vq=a("a"),m2o=o("LxmertModel"),f2o=o(" (LXMERT model)"),g2o=l(),Ku=a("li"),sle=a("strong"),h2o=o("m2m_100"),u2o=o(" \u2014 "),Fq=a("a"),p2o=o("M2M100Model"),_2o=o(" (M2M100 model)"),b2o=l(),Zu=a("li"),lle=a("strong"),v2o=o("marian"),F2o=o(" \u2014 "),Tq=a("a"),T2o=o("MarianModel"),M2o=o(" (Marian model)"),E2o=l(),ep=a("li"),ile=a("strong"),C2o=o("maskformer"),w2o=o(" \u2014 "),Mq=a("a"),A2o=o("MaskFormerModel"),y2o=o(" (MaskFormer model)"),L2o=l(),op=a("li"),dle=a("strong"),x2o=o("mbart"),$2o=o(" \u2014 "),Eq=a("a"),k2o=o("MBartModel"),S2o=o(" (mBART model)"),R2o=l(),rp=a("li"),cle=a("strong"),P2o=o("megatron-bert"),B2o=o(" \u2014 "),Cq=a("a"),I2o=o("MegatronBertModel"),q2o=o(" (MegatronBert model)"),N2o=l(),tp=a("li"),mle=a("strong"),j2o=o("mobilebert"),D2o=o(" \u2014 "),wq=a("a"),G2o=o("MobileBertModel"),O2o=o(" (MobileBERT model)"),V2o=l(),ap=a("li"),fle=a("strong"),X2o=o("mpnet"),z2o=o(" \u2014 "),Aq=a("a"),W2o=o("MPNetModel"),Q2o=o(" (MPNet model)"),H2o=l(),np=a("li"),gle=a("strong"),U2o=o("mt5"),J2o=o(" \u2014 "),yq=a("a"),Y2o=o("MT5Model"),K2o=o(" (mT5 model)"),Z2o=l(),sp=a("li"),hle=a("strong"),evo=o("nystromformer"),ovo=o(" \u2014 "),Lq=a("a"),rvo=o("NystromformerModel"),tvo=o(" (Nystromformer model)"),avo=l(),lp=a("li"),ule=a("strong"),nvo=o("openai-gpt"),svo=o(" \u2014 "),xq=a("a"),lvo=o("OpenAIGPTModel"),ivo=o(" (OpenAI GPT model)"),dvo=l(),ip=a("li"),ple=a("strong"),cvo=o("opt"),mvo=o(" \u2014 "),$q=a("a"),fvo=o("OPTModel"),gvo=o(" (OPT model)"),hvo=l(),dp=a("li"),_le=a("strong"),uvo=o("pegasus"),pvo=o(" \u2014 "),kq=a("a"),_vo=o("PegasusModel"),bvo=o(" (Pegasus model)"),vvo=l(),cp=a("li"),ble=a("strong"),Fvo=o("perceiver"),Tvo=o(" \u2014 "),Sq=a("a"),Mvo=o("PerceiverModel"),Evo=o(" (Perceiver model)"),Cvo=l(),mp=a("li"),vle=a("strong"),wvo=o("plbart"),Avo=o(" \u2014 "),Rq=a("a"),yvo=o("PLBartModel"),Lvo=o(" (PLBart model)"),xvo=l(),fp=a("li"),Fle=a("strong"),$vo=o("poolformer"),kvo=o(" \u2014 "),Pq=a("a"),Svo=o("PoolFormerModel"),Rvo=o(" (PoolFormer model)"),Pvo=l(),gp=a("li"),Tle=a("strong"),Bvo=o("prophetnet"),Ivo=o(" \u2014 "),Bq=a("a"),qvo=o("ProphetNetModel"),Nvo=o(" (ProphetNet model)"),jvo=l(),hp=a("li"),Mle=a("strong"),Dvo=o("qdqbert"),Gvo=o(" \u2014 "),Iq=a("a"),Ovo=o("QDQBertModel"),Vvo=o(" (QDQBert model)"),Xvo=l(),up=a("li"),Ele=a("strong"),zvo=o("reformer"),Wvo=o(" \u2014 "),qq=a("a"),Qvo=o("ReformerModel"),Hvo=o(" (Reformer model)"),Uvo=l(),pp=a("li"),Cle=a("strong"),Jvo=o("regnet"),Yvo=o(" \u2014 "),Nq=a("a"),Kvo=o("RegNetModel"),Zvo=o(" (RegNet model)"),eFo=l(),_p=a("li"),wle=a("strong"),oFo=o("rembert"),rFo=o(" \u2014 "),jq=a("a"),tFo=o("RemBertModel"),aFo=o(" (RemBERT model)"),nFo=l(),bp=a("li"),Ale=a("strong"),sFo=o("resnet"),lFo=o(" \u2014 "),Dq=a("a"),iFo=o("ResNetModel"),dFo=o(" (ResNet model)"),cFo=l(),vp=a("li"),yle=a("strong"),mFo=o("retribert"),fFo=o(" \u2014 "),Gq=a("a"),gFo=o("RetriBertModel"),hFo=o(" (RetriBERT model)"),uFo=l(),Fp=a("li"),Lle=a("strong"),pFo=o("roberta"),_Fo=o(" \u2014 "),Oq=a("a"),bFo=o("RobertaModel"),vFo=o(" (RoBERTa model)"),FFo=l(),Tp=a("li"),xle=a("strong"),TFo=o("roformer"),MFo=o(" \u2014 "),Vq=a("a"),EFo=o("RoFormerModel"),CFo=o(" (RoFormer model)"),wFo=l(),Mp=a("li"),$le=a("strong"),AFo=o("segformer"),yFo=o(" \u2014 "),Xq=a("a"),LFo=o("SegformerModel"),xFo=o(" (SegFormer model)"),$Fo=l(),Ep=a("li"),kle=a("strong"),kFo=o("sew"),SFo=o(" \u2014 "),zq=a("a"),RFo=o("SEWModel"),PFo=o(" (SEW model)"),BFo=l(),Cp=a("li"),Sle=a("strong"),IFo=o("sew-d"),qFo=o(" \u2014 "),Wq=a("a"),NFo=o("SEWDModel"),jFo=o(" (SEW-D model)"),DFo=l(),wp=a("li"),Rle=a("strong"),GFo=o("speech_to_text"),OFo=o(" \u2014 "),Qq=a("a"),VFo=o("Speech2TextModel"),XFo=o(" (Speech2Text model)"),zFo=l(),Ap=a("li"),Ple=a("strong"),WFo=o("splinter"),QFo=o(" \u2014 "),Hq=a("a"),HFo=o("SplinterModel"),UFo=o(" (Splinter model)"),JFo=l(),yp=a("li"),Ble=a("strong"),YFo=o("squeezebert"),KFo=o(" \u2014 "),Uq=a("a"),ZFo=o("SqueezeBertModel"),e1o=o(" (SqueezeBERT model)"),o1o=l(),Lp=a("li"),Ile=a("strong"),r1o=o("swin"),t1o=o(" \u2014 "),Jq=a("a"),a1o=o("SwinModel"),n1o=o(" (Swin model)"),s1o=l(),xp=a("li"),qle=a("strong"),l1o=o("t5"),i1o=o(" \u2014 "),Yq=a("a"),d1o=o("T5Model"),c1o=o(" (T5 model)"),m1o=l(),$p=a("li"),Nle=a("strong"),f1o=o("tapas"),g1o=o(" \u2014 "),Kq=a("a"),h1o=o("TapasModel"),u1o=o(" (TAPAS model)"),p1o=l(),kp=a("li"),jle=a("strong"),_1o=o("trajectory_transformer"),b1o=o(" \u2014 "),Zq=a("a"),v1o=o("TrajectoryTransformerModel"),F1o=o(" (Trajectory Transformer model)"),T1o=l(),Sp=a("li"),Dle=a("strong"),M1o=o("transfo-xl"),E1o=o(" \u2014 "),eN=a("a"),C1o=o("TransfoXLModel"),w1o=o(" (Transformer-XL model)"),A1o=l(),Rp=a("li"),Gle=a("strong"),y1o=o("unispeech"),L1o=o(" \u2014 "),oN=a("a"),x1o=o("UniSpeechModel"),$1o=o(" (UniSpeech model)"),k1o=l(),Pp=a("li"),Ole=a("strong"),S1o=o("unispeech-sat"),R1o=o(" \u2014 "),rN=a("a"),P1o=o("UniSpeechSatModel"),B1o=o(" (UniSpeechSat model)"),I1o=l(),Bp=a("li"),Vle=a("strong"),q1o=o("van"),N1o=o(" \u2014 "),tN=a("a"),j1o=o("VanModel"),D1o=o(" (VAN model)"),G1o=l(),Ip=a("li"),Xle=a("strong"),O1o=o("vilt"),V1o=o(" \u2014 "),aN=a("a"),X1o=o("ViltModel"),z1o=o(" (ViLT model)"),W1o=l(),qp=a("li"),zle=a("strong"),Q1o=o("vision-text-dual-encoder"),H1o=o(" \u2014 "),nN=a("a"),U1o=o("VisionTextDualEncoderModel"),J1o=o(" (VisionTextDualEncoder model)"),Y1o=l(),Np=a("li"),Wle=a("strong"),K1o=o("visual_bert"),Z1o=o(" \u2014 "),sN=a("a"),eTo=o("VisualBertModel"),oTo=o(" (VisualBert model)"),rTo=l(),jp=a("li"),Qle=a("strong"),tTo=o("vit"),aTo=o(" \u2014 "),lN=a("a"),nTo=o("ViTModel"),sTo=o(" (ViT model)"),lTo=l(),Dp=a("li"),Hle=a("strong"),iTo=o("vit_mae"),dTo=o(" \u2014 "),iN=a("a"),cTo=o("ViTMAEModel"),mTo=o(" (ViTMAE model)"),fTo=l(),Gp=a("li"),Ule=a("strong"),gTo=o("wav2vec2"),hTo=o(" \u2014 "),dN=a("a"),uTo=o("Wav2Vec2Model"),pTo=o(" (Wav2Vec2 model)"),_To=l(),Op=a("li"),Jle=a("strong"),bTo=o("wav2vec2-conformer"),vTo=o(" \u2014 "),cN=a("a"),FTo=o("Wav2Vec2ConformerModel"),TTo=o(" (Wav2Vec2-Conformer model)"),MTo=l(),Vp=a("li"),Yle=a("strong"),ETo=o("wavlm"),CTo=o(" \u2014 "),mN=a("a"),wTo=o("WavLMModel"),ATo=o(" (WavLM model)"),yTo=l(),Xp=a("li"),Kle=a("strong"),LTo=o("xglm"),xTo=o(" \u2014 "),fN=a("a"),$To=o("XGLMModel"),kTo=o(" (XGLM model)"),STo=l(),zp=a("li"),Zle=a("strong"),RTo=o("xlm"),PTo=o(" \u2014 "),gN=a("a"),BTo=o("XLMModel"),ITo=o(" (XLM model)"),qTo=l(),Wp=a("li"),eie=a("strong"),NTo=o("xlm-prophetnet"),jTo=o(" \u2014 "),hN=a("a"),DTo=o("XLMProphetNetModel"),GTo=o(" (XLMProphetNet model)"),OTo=l(),Qp=a("li"),oie=a("strong"),VTo=o("xlm-roberta"),XTo=o(" \u2014 "),uN=a("a"),zTo=o("XLMRobertaModel"),WTo=o(" (XLM-RoBERTa model)"),QTo=l(),Hp=a("li"),rie=a("strong"),HTo=o("xlm-roberta-xl"),UTo=o(" \u2014 "),pN=a("a"),JTo=o("XLMRobertaXLModel"),YTo=o(" (XLM-RoBERTa-XL model)"),KTo=l(),Up=a("li"),tie=a("strong"),ZTo=o("xlnet"),eMo=o(" \u2014 "),_N=a("a"),oMo=o("XLNetModel"),rMo=o(" (XLNet model)"),tMo=l(),Jp=a("li"),aie=a("strong"),aMo=o("yolos"),nMo=o(" \u2014 "),bN=a("a"),sMo=o("YolosModel"),lMo=o(" (YOLOS model)"),iMo=l(),Yp=a("li"),nie=a("strong"),dMo=o("yoso"),cMo=o(" \u2014 "),vN=a("a"),mMo=o("YosoModel"),fMo=o(" (YOSO model)"),gMo=l(),Kp=a("p"),hMo=o("The model is set in evaluation mode by default using "),sie=a("code"),uMo=o("model.eval()"),pMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lie=a("code"),_Mo=o("model.train()"),bMo=l(),F(Zp.$$.fragment),Yqe=l(),Li=a("h2"),e_=a("a"),iie=a("span"),F(eL.$$.fragment),vMo=l(),die=a("span"),FMo=o("AutoModelForPreTraining"),Kqe=l(),xo=a("div"),F(oL.$$.fragment),TMo=l(),xi=a("p"),MMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FN=a("a"),EMo=o("from_pretrained()"),CMo=o(" class method or the "),TN=a("a"),wMo=o("from_config()"),AMo=o(` class
method.`),yMo=l(),rL=a("p"),LMo=o("This class cannot be instantiated directly using "),cie=a("code"),xMo=o("__init__()"),$Mo=o(" (throws an error)."),kMo=l(),at=a("div"),F(tL.$$.fragment),SMo=l(),mie=a("p"),RMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PMo=l(),$i=a("p"),BMo=o(`Note:
Loading a model from its configuration file does `),fie=a("strong"),IMo=o("not"),qMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=a("a"),NMo=o("from_pretrained()"),jMo=o(" to load the model weights."),DMo=l(),F(o_.$$.fragment),GMo=l(),Ye=a("div"),F(aL.$$.fragment),OMo=l(),gie=a("p"),VMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XMo=l(),xa=a("p"),zMo=o("The model class to instantiate is selected based on the "),hie=a("code"),WMo=o("model_type"),QMo=o(` property of the config object (either
passed as an argument or loaded from `),uie=a("code"),HMo=o("pretrained_model_name_or_path"),UMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=a("code"),JMo=o("pretrained_model_name_or_path"),YMo=o(":"),KMo=l(),G=a("ul"),r_=a("li"),_ie=a("strong"),ZMo=o("albert"),e4o=o(" \u2014 "),EN=a("a"),o4o=o("AlbertForPreTraining"),r4o=o(" (ALBERT model)"),t4o=l(),t_=a("li"),bie=a("strong"),a4o=o("bart"),n4o=o(" \u2014 "),CN=a("a"),s4o=o("BartForConditionalGeneration"),l4o=o(" (BART model)"),i4o=l(),a_=a("li"),vie=a("strong"),d4o=o("bert"),c4o=o(" \u2014 "),wN=a("a"),m4o=o("BertForPreTraining"),f4o=o(" (BERT model)"),g4o=l(),n_=a("li"),Fie=a("strong"),h4o=o("big_bird"),u4o=o(" \u2014 "),AN=a("a"),p4o=o("BigBirdForPreTraining"),_4o=o(" (BigBird model)"),b4o=l(),s_=a("li"),Tie=a("strong"),v4o=o("camembert"),F4o=o(" \u2014 "),yN=a("a"),T4o=o("CamembertForMaskedLM"),M4o=o(" (CamemBERT model)"),E4o=l(),l_=a("li"),Mie=a("strong"),C4o=o("ctrl"),w4o=o(" \u2014 "),LN=a("a"),A4o=o("CTRLLMHeadModel"),y4o=o(" (CTRL model)"),L4o=l(),i_=a("li"),Eie=a("strong"),x4o=o("data2vec-text"),$4o=o(" \u2014 "),xN=a("a"),k4o=o("Data2VecTextForMaskedLM"),S4o=o(" (Data2VecText model)"),R4o=l(),d_=a("li"),Cie=a("strong"),P4o=o("deberta"),B4o=o(" \u2014 "),$N=a("a"),I4o=o("DebertaForMaskedLM"),q4o=o(" (DeBERTa model)"),N4o=l(),c_=a("li"),wie=a("strong"),j4o=o("deberta-v2"),D4o=o(" \u2014 "),kN=a("a"),G4o=o("DebertaV2ForMaskedLM"),O4o=o(" (DeBERTa-v2 model)"),V4o=l(),m_=a("li"),Aie=a("strong"),X4o=o("distilbert"),z4o=o(" \u2014 "),SN=a("a"),W4o=o("DistilBertForMaskedLM"),Q4o=o(" (DistilBERT model)"),H4o=l(),f_=a("li"),yie=a("strong"),U4o=o("electra"),J4o=o(" \u2014 "),RN=a("a"),Y4o=o("ElectraForPreTraining"),K4o=o(" (ELECTRA model)"),Z4o=l(),g_=a("li"),Lie=a("strong"),eEo=o("flaubert"),oEo=o(" \u2014 "),PN=a("a"),rEo=o("FlaubertWithLMHeadModel"),tEo=o(" (FlauBERT model)"),aEo=l(),h_=a("li"),xie=a("strong"),nEo=o("flava"),sEo=o(" \u2014 "),BN=a("a"),lEo=o("FlavaForPreTraining"),iEo=o(" (Flava model)"),dEo=l(),u_=a("li"),$ie=a("strong"),cEo=o("fnet"),mEo=o(" \u2014 "),IN=a("a"),fEo=o("FNetForPreTraining"),gEo=o(" (FNet model)"),hEo=l(),p_=a("li"),kie=a("strong"),uEo=o("fsmt"),pEo=o(" \u2014 "),qN=a("a"),_Eo=o("FSMTForConditionalGeneration"),bEo=o(" (FairSeq Machine-Translation model)"),vEo=l(),__=a("li"),Sie=a("strong"),FEo=o("funnel"),TEo=o(" \u2014 "),NN=a("a"),MEo=o("FunnelForPreTraining"),EEo=o(" (Funnel Transformer model)"),CEo=l(),b_=a("li"),Rie=a("strong"),wEo=o("gpt2"),AEo=o(" \u2014 "),jN=a("a"),yEo=o("GPT2LMHeadModel"),LEo=o(" (OpenAI GPT-2 model)"),xEo=l(),v_=a("li"),Pie=a("strong"),$Eo=o("ibert"),kEo=o(" \u2014 "),DN=a("a"),SEo=o("IBertForMaskedLM"),REo=o(" (I-BERT model)"),PEo=l(),F_=a("li"),Bie=a("strong"),BEo=o("layoutlm"),IEo=o(" \u2014 "),GN=a("a"),qEo=o("LayoutLMForMaskedLM"),NEo=o(" (LayoutLM model)"),jEo=l(),T_=a("li"),Iie=a("strong"),DEo=o("longformer"),GEo=o(" \u2014 "),ON=a("a"),OEo=o("LongformerForMaskedLM"),VEo=o(" (Longformer model)"),XEo=l(),M_=a("li"),qie=a("strong"),zEo=o("lxmert"),WEo=o(" \u2014 "),VN=a("a"),QEo=o("LxmertForPreTraining"),HEo=o(" (LXMERT model)"),UEo=l(),E_=a("li"),Nie=a("strong"),JEo=o("megatron-bert"),YEo=o(" \u2014 "),XN=a("a"),KEo=o("MegatronBertForPreTraining"),ZEo=o(" (MegatronBert model)"),eCo=l(),C_=a("li"),jie=a("strong"),oCo=o("mobilebert"),rCo=o(" \u2014 "),zN=a("a"),tCo=o("MobileBertForPreTraining"),aCo=o(" (MobileBERT model)"),nCo=l(),w_=a("li"),Die=a("strong"),sCo=o("mpnet"),lCo=o(" \u2014 "),WN=a("a"),iCo=o("MPNetForMaskedLM"),dCo=o(" (MPNet model)"),cCo=l(),A_=a("li"),Gie=a("strong"),mCo=o("openai-gpt"),fCo=o(" \u2014 "),QN=a("a"),gCo=o("OpenAIGPTLMHeadModel"),hCo=o(" (OpenAI GPT model)"),uCo=l(),y_=a("li"),Oie=a("strong"),pCo=o("retribert"),_Co=o(" \u2014 "),HN=a("a"),bCo=o("RetriBertModel"),vCo=o(" (RetriBERT model)"),FCo=l(),L_=a("li"),Vie=a("strong"),TCo=o("roberta"),MCo=o(" \u2014 "),UN=a("a"),ECo=o("RobertaForMaskedLM"),CCo=o(" (RoBERTa model)"),wCo=l(),x_=a("li"),Xie=a("strong"),ACo=o("splinter"),yCo=o(" \u2014 "),JN=a("a"),LCo=o("SplinterForPreTraining"),xCo=o(" (Splinter model)"),$Co=l(),$_=a("li"),zie=a("strong"),kCo=o("squeezebert"),SCo=o(" \u2014 "),YN=a("a"),RCo=o("SqueezeBertForMaskedLM"),PCo=o(" (SqueezeBERT model)"),BCo=l(),k_=a("li"),Wie=a("strong"),ICo=o("t5"),qCo=o(" \u2014 "),KN=a("a"),NCo=o("T5ForConditionalGeneration"),jCo=o(" (T5 model)"),DCo=l(),S_=a("li"),Qie=a("strong"),GCo=o("tapas"),OCo=o(" \u2014 "),ZN=a("a"),VCo=o("TapasForMaskedLM"),XCo=o(" (TAPAS model)"),zCo=l(),R_=a("li"),Hie=a("strong"),WCo=o("transfo-xl"),QCo=o(" \u2014 "),ej=a("a"),HCo=o("TransfoXLLMHeadModel"),UCo=o(" (Transformer-XL model)"),JCo=l(),P_=a("li"),Uie=a("strong"),YCo=o("unispeech"),KCo=o(" \u2014 "),oj=a("a"),ZCo=o("UniSpeechForPreTraining"),e5o=o(" (UniSpeech model)"),o5o=l(),B_=a("li"),Jie=a("strong"),r5o=o("unispeech-sat"),t5o=o(" \u2014 "),rj=a("a"),a5o=o("UniSpeechSatForPreTraining"),n5o=o(" (UniSpeechSat model)"),s5o=l(),I_=a("li"),Yie=a("strong"),l5o=o("visual_bert"),i5o=o(" \u2014 "),tj=a("a"),d5o=o("VisualBertForPreTraining"),c5o=o(" (VisualBert model)"),m5o=l(),q_=a("li"),Kie=a("strong"),f5o=o("vit_mae"),g5o=o(" \u2014 "),aj=a("a"),h5o=o("ViTMAEForPreTraining"),u5o=o(" (ViTMAE model)"),p5o=l(),N_=a("li"),Zie=a("strong"),_5o=o("wav2vec2"),b5o=o(" \u2014 "),nj=a("a"),v5o=o("Wav2Vec2ForPreTraining"),F5o=o(" (Wav2Vec2 model)"),T5o=l(),j_=a("li"),ede=a("strong"),M5o=o("wav2vec2-conformer"),E5o=o(" \u2014 "),sj=a("a"),C5o=o("Wav2Vec2ConformerForPreTraining"),w5o=o(" (Wav2Vec2-Conformer model)"),A5o=l(),D_=a("li"),ode=a("strong"),y5o=o("xlm"),L5o=o(" \u2014 "),lj=a("a"),x5o=o("XLMWithLMHeadModel"),$5o=o(" (XLM model)"),k5o=l(),G_=a("li"),rde=a("strong"),S5o=o("xlm-roberta"),R5o=o(" \u2014 "),ij=a("a"),P5o=o("XLMRobertaForMaskedLM"),B5o=o(" (XLM-RoBERTa model)"),I5o=l(),O_=a("li"),tde=a("strong"),q5o=o("xlm-roberta-xl"),N5o=o(" \u2014 "),dj=a("a"),j5o=o("XLMRobertaXLForMaskedLM"),D5o=o(" (XLM-RoBERTa-XL model)"),G5o=l(),V_=a("li"),ade=a("strong"),O5o=o("xlnet"),V5o=o(" \u2014 "),cj=a("a"),X5o=o("XLNetLMHeadModel"),z5o=o(" (XLNet model)"),W5o=l(),X_=a("p"),Q5o=o("The model is set in evaluation mode by default using "),nde=a("code"),H5o=o("model.eval()"),U5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=a("code"),J5o=o("model.train()"),Y5o=l(),F(z_.$$.fragment),Zqe=l(),ki=a("h2"),W_=a("a"),lde=a("span"),F(nL.$$.fragment),K5o=l(),ide=a("span"),Z5o=o("AutoModelForCausalLM"),eNe=l(),$o=a("div"),F(sL.$$.fragment),e3o=l(),Si=a("p"),o3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mj=a("a"),r3o=o("from_pretrained()"),t3o=o(" class method or the "),fj=a("a"),a3o=o("from_config()"),n3o=o(` class
method.`),s3o=l(),lL=a("p"),l3o=o("This class cannot be instantiated directly using "),dde=a("code"),i3o=o("__init__()"),d3o=o(" (throws an error)."),c3o=l(),nt=a("div"),F(iL.$$.fragment),m3o=l(),cde=a("p"),f3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g3o=l(),Ri=a("p"),h3o=o(`Note:
Loading a model from its configuration file does `),mde=a("strong"),u3o=o("not"),p3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gj=a("a"),_3o=o("from_pretrained()"),b3o=o(" to load the model weights."),v3o=l(),F(Q_.$$.fragment),F3o=l(),Ke=a("div"),F(dL.$$.fragment),T3o=l(),fde=a("p"),M3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),E3o=l(),$a=a("p"),C3o=o("The model class to instantiate is selected based on the "),gde=a("code"),w3o=o("model_type"),A3o=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),y3o=o("pretrained_model_name_or_path"),L3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=a("code"),x3o=o("pretrained_model_name_or_path"),$3o=o(":"),k3o=l(),z=a("ul"),H_=a("li"),pde=a("strong"),S3o=o("bart"),R3o=o(" \u2014 "),hj=a("a"),P3o=o("BartForCausalLM"),B3o=o(" (BART model)"),I3o=l(),U_=a("li"),_de=a("strong"),q3o=o("bert"),N3o=o(" \u2014 "),uj=a("a"),j3o=o("BertLMHeadModel"),D3o=o(" (BERT model)"),G3o=l(),J_=a("li"),bde=a("strong"),O3o=o("bert-generation"),V3o=o(" \u2014 "),pj=a("a"),X3o=o("BertGenerationDecoder"),z3o=o(" (Bert Generation model)"),W3o=l(),Y_=a("li"),vde=a("strong"),Q3o=o("big_bird"),H3o=o(" \u2014 "),_j=a("a"),U3o=o("BigBirdForCausalLM"),J3o=o(" (BigBird model)"),Y3o=l(),K_=a("li"),Fde=a("strong"),K3o=o("bigbird_pegasus"),Z3o=o(" \u2014 "),bj=a("a"),ewo=o("BigBirdPegasusForCausalLM"),owo=o(" (BigBirdPegasus model)"),rwo=l(),Z_=a("li"),Tde=a("strong"),two=o("blenderbot"),awo=o(" \u2014 "),vj=a("a"),nwo=o("BlenderbotForCausalLM"),swo=o(" (Blenderbot model)"),lwo=l(),eb=a("li"),Mde=a("strong"),iwo=o("blenderbot-small"),dwo=o(" \u2014 "),Fj=a("a"),cwo=o("BlenderbotSmallForCausalLM"),mwo=o(" (BlenderbotSmall model)"),fwo=l(),ob=a("li"),Ede=a("strong"),gwo=o("camembert"),hwo=o(" \u2014 "),Tj=a("a"),uwo=o("CamembertForCausalLM"),pwo=o(" (CamemBERT model)"),_wo=l(),rb=a("li"),Cde=a("strong"),bwo=o("ctrl"),vwo=o(" \u2014 "),Mj=a("a"),Fwo=o("CTRLLMHeadModel"),Two=o(" (CTRL model)"),Mwo=l(),tb=a("li"),wde=a("strong"),Ewo=o("data2vec-text"),Cwo=o(" \u2014 "),Ej=a("a"),wwo=o("Data2VecTextForCausalLM"),Awo=o(" (Data2VecText model)"),ywo=l(),ab=a("li"),Ade=a("strong"),Lwo=o("electra"),xwo=o(" \u2014 "),Cj=a("a"),$wo=o("ElectraForCausalLM"),kwo=o(" (ELECTRA model)"),Swo=l(),nb=a("li"),yde=a("strong"),Rwo=o("gpt2"),Pwo=o(" \u2014 "),wj=a("a"),Bwo=o("GPT2LMHeadModel"),Iwo=o(" (OpenAI GPT-2 model)"),qwo=l(),sb=a("li"),Lde=a("strong"),Nwo=o("gpt_neo"),jwo=o(" \u2014 "),Aj=a("a"),Dwo=o("GPTNeoForCausalLM"),Gwo=o(" (GPT Neo model)"),Owo=l(),lb=a("li"),xde=a("strong"),Vwo=o("gptj"),Xwo=o(" \u2014 "),yj=a("a"),zwo=o("GPTJForCausalLM"),Wwo=o(" (GPT-J model)"),Qwo=l(),ib=a("li"),$de=a("strong"),Hwo=o("marian"),Uwo=o(" \u2014 "),Lj=a("a"),Jwo=o("MarianForCausalLM"),Ywo=o(" (Marian model)"),Kwo=l(),db=a("li"),kde=a("strong"),Zwo=o("mbart"),e0o=o(" \u2014 "),xj=a("a"),o0o=o("MBartForCausalLM"),r0o=o(" (mBART model)"),t0o=l(),cb=a("li"),Sde=a("strong"),a0o=o("megatron-bert"),n0o=o(" \u2014 "),$j=a("a"),s0o=o("MegatronBertForCausalLM"),l0o=o(" (MegatronBert model)"),i0o=l(),mb=a("li"),Rde=a("strong"),d0o=o("openai-gpt"),c0o=o(" \u2014 "),kj=a("a"),m0o=o("OpenAIGPTLMHeadModel"),f0o=o(" (OpenAI GPT model)"),g0o=l(),fb=a("li"),Pde=a("strong"),h0o=o("opt"),u0o=o(" \u2014 "),Sj=a("a"),p0o=o("OPTForCausalLM"),_0o=o(" (OPT model)"),b0o=l(),gb=a("li"),Bde=a("strong"),v0o=o("pegasus"),F0o=o(" \u2014 "),Rj=a("a"),T0o=o("PegasusForCausalLM"),M0o=o(" (Pegasus model)"),E0o=l(),hb=a("li"),Ide=a("strong"),C0o=o("plbart"),w0o=o(" \u2014 "),Pj=a("a"),A0o=o("PLBartForCausalLM"),y0o=o(" (PLBart model)"),L0o=l(),ub=a("li"),qde=a("strong"),x0o=o("prophetnet"),$0o=o(" \u2014 "),Bj=a("a"),k0o=o("ProphetNetForCausalLM"),S0o=o(" (ProphetNet model)"),R0o=l(),pb=a("li"),Nde=a("strong"),P0o=o("qdqbert"),B0o=o(" \u2014 "),Ij=a("a"),I0o=o("QDQBertLMHeadModel"),q0o=o(" (QDQBert model)"),N0o=l(),_b=a("li"),jde=a("strong"),j0o=o("reformer"),D0o=o(" \u2014 "),qj=a("a"),G0o=o("ReformerModelWithLMHead"),O0o=o(" (Reformer model)"),V0o=l(),bb=a("li"),Dde=a("strong"),X0o=o("rembert"),z0o=o(" \u2014 "),Nj=a("a"),W0o=o("RemBertForCausalLM"),Q0o=o(" (RemBERT model)"),H0o=l(),vb=a("li"),Gde=a("strong"),U0o=o("roberta"),J0o=o(" \u2014 "),jj=a("a"),Y0o=o("RobertaForCausalLM"),K0o=o(" (RoBERTa model)"),Z0o=l(),Fb=a("li"),Ode=a("strong"),eAo=o("roformer"),oAo=o(" \u2014 "),Dj=a("a"),rAo=o("RoFormerForCausalLM"),tAo=o(" (RoFormer model)"),aAo=l(),Tb=a("li"),Vde=a("strong"),nAo=o("speech_to_text_2"),sAo=o(" \u2014 "),Gj=a("a"),lAo=o("Speech2Text2ForCausalLM"),iAo=o(" (Speech2Text2 model)"),dAo=l(),Mb=a("li"),Xde=a("strong"),cAo=o("transfo-xl"),mAo=o(" \u2014 "),Oj=a("a"),fAo=o("TransfoXLLMHeadModel"),gAo=o(" (Transformer-XL model)"),hAo=l(),Eb=a("li"),zde=a("strong"),uAo=o("trocr"),pAo=o(" \u2014 "),Vj=a("a"),_Ao=o("TrOCRForCausalLM"),bAo=o(" (TrOCR model)"),vAo=l(),Cb=a("li"),Wde=a("strong"),FAo=o("xglm"),TAo=o(" \u2014 "),Xj=a("a"),MAo=o("XGLMForCausalLM"),EAo=o(" (XGLM model)"),CAo=l(),wb=a("li"),Qde=a("strong"),wAo=o("xlm"),AAo=o(" \u2014 "),zj=a("a"),yAo=o("XLMWithLMHeadModel"),LAo=o(" (XLM model)"),xAo=l(),Ab=a("li"),Hde=a("strong"),$Ao=o("xlm-prophetnet"),kAo=o(" \u2014 "),Wj=a("a"),SAo=o("XLMProphetNetForCausalLM"),RAo=o(" (XLMProphetNet model)"),PAo=l(),yb=a("li"),Ude=a("strong"),BAo=o("xlm-roberta"),IAo=o(" \u2014 "),Qj=a("a"),qAo=o("XLMRobertaForCausalLM"),NAo=o(" (XLM-RoBERTa model)"),jAo=l(),Lb=a("li"),Jde=a("strong"),DAo=o("xlm-roberta-xl"),GAo=o(" \u2014 "),Hj=a("a"),OAo=o("XLMRobertaXLForCausalLM"),VAo=o(" (XLM-RoBERTa-XL model)"),XAo=l(),xb=a("li"),Yde=a("strong"),zAo=o("xlnet"),WAo=o(" \u2014 "),Uj=a("a"),QAo=o("XLNetLMHeadModel"),HAo=o(" (XLNet model)"),UAo=l(),$b=a("p"),JAo=o("The model is set in evaluation mode by default using "),Kde=a("code"),YAo=o("model.eval()"),KAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=a("code"),ZAo=o("model.train()"),e6o=l(),F(kb.$$.fragment),oNe=l(),Pi=a("h2"),Sb=a("a"),ece=a("span"),F(cL.$$.fragment),o6o=l(),oce=a("span"),r6o=o("AutoModelForMaskedLM"),rNe=l(),ko=a("div"),F(mL.$$.fragment),t6o=l(),Bi=a("p"),a6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jj=a("a"),n6o=o("from_pretrained()"),s6o=o(" class method or the "),Yj=a("a"),l6o=o("from_config()"),i6o=o(` class
method.`),d6o=l(),fL=a("p"),c6o=o("This class cannot be instantiated directly using "),rce=a("code"),m6o=o("__init__()"),f6o=o(" (throws an error)."),g6o=l(),st=a("div"),F(gL.$$.fragment),h6o=l(),tce=a("p"),u6o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p6o=l(),Ii=a("p"),_6o=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),b6o=o("not"),v6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=a("a"),F6o=o("from_pretrained()"),T6o=o(" to load the model weights."),M6o=l(),F(Rb.$$.fragment),E6o=l(),Ze=a("div"),F(hL.$$.fragment),C6o=l(),nce=a("p"),w6o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),A6o=l(),ka=a("p"),y6o=o("The model class to instantiate is selected based on the "),sce=a("code"),L6o=o("model_type"),x6o=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),$6o=o("pretrained_model_name_or_path"),k6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),S6o=o("pretrained_model_name_or_path"),R6o=o(":"),P6o=l(),W=a("ul"),Pb=a("li"),dce=a("strong"),B6o=o("albert"),I6o=o(" \u2014 "),Zj=a("a"),q6o=o("AlbertForMaskedLM"),N6o=o(" (ALBERT model)"),j6o=l(),Bb=a("li"),cce=a("strong"),D6o=o("bart"),G6o=o(" \u2014 "),eD=a("a"),O6o=o("BartForConditionalGeneration"),V6o=o(" (BART model)"),X6o=l(),Ib=a("li"),mce=a("strong"),z6o=o("bert"),W6o=o(" \u2014 "),oD=a("a"),Q6o=o("BertForMaskedLM"),H6o=o(" (BERT model)"),U6o=l(),qb=a("li"),fce=a("strong"),J6o=o("big_bird"),Y6o=o(" \u2014 "),rD=a("a"),K6o=o("BigBirdForMaskedLM"),Z6o=o(" (BigBird model)"),eyo=l(),Nb=a("li"),gce=a("strong"),oyo=o("camembert"),ryo=o(" \u2014 "),tD=a("a"),tyo=o("CamembertForMaskedLM"),ayo=o(" (CamemBERT model)"),nyo=l(),jb=a("li"),hce=a("strong"),syo=o("convbert"),lyo=o(" \u2014 "),aD=a("a"),iyo=o("ConvBertForMaskedLM"),dyo=o(" (ConvBERT model)"),cyo=l(),Db=a("li"),uce=a("strong"),myo=o("data2vec-text"),fyo=o(" \u2014 "),nD=a("a"),gyo=o("Data2VecTextForMaskedLM"),hyo=o(" (Data2VecText model)"),uyo=l(),Gb=a("li"),pce=a("strong"),pyo=o("deberta"),_yo=o(" \u2014 "),sD=a("a"),byo=o("DebertaForMaskedLM"),vyo=o(" (DeBERTa model)"),Fyo=l(),Ob=a("li"),_ce=a("strong"),Tyo=o("deberta-v2"),Myo=o(" \u2014 "),lD=a("a"),Eyo=o("DebertaV2ForMaskedLM"),Cyo=o(" (DeBERTa-v2 model)"),wyo=l(),Vb=a("li"),bce=a("strong"),Ayo=o("distilbert"),yyo=o(" \u2014 "),iD=a("a"),Lyo=o("DistilBertForMaskedLM"),xyo=o(" (DistilBERT model)"),$yo=l(),Xb=a("li"),vce=a("strong"),kyo=o("electra"),Syo=o(" \u2014 "),dD=a("a"),Ryo=o("ElectraForMaskedLM"),Pyo=o(" (ELECTRA model)"),Byo=l(),zb=a("li"),Fce=a("strong"),Iyo=o("flaubert"),qyo=o(" \u2014 "),cD=a("a"),Nyo=o("FlaubertWithLMHeadModel"),jyo=o(" (FlauBERT model)"),Dyo=l(),Wb=a("li"),Tce=a("strong"),Gyo=o("fnet"),Oyo=o(" \u2014 "),mD=a("a"),Vyo=o("FNetForMaskedLM"),Xyo=o(" (FNet model)"),zyo=l(),Qb=a("li"),Mce=a("strong"),Wyo=o("funnel"),Qyo=o(" \u2014 "),fD=a("a"),Hyo=o("FunnelForMaskedLM"),Uyo=o(" (Funnel Transformer model)"),Jyo=l(),Hb=a("li"),Ece=a("strong"),Yyo=o("ibert"),Kyo=o(" \u2014 "),gD=a("a"),Zyo=o("IBertForMaskedLM"),eLo=o(" (I-BERT model)"),oLo=l(),Ub=a("li"),Cce=a("strong"),rLo=o("layoutlm"),tLo=o(" \u2014 "),hD=a("a"),aLo=o("LayoutLMForMaskedLM"),nLo=o(" (LayoutLM model)"),sLo=l(),Jb=a("li"),wce=a("strong"),lLo=o("longformer"),iLo=o(" \u2014 "),uD=a("a"),dLo=o("LongformerForMaskedLM"),cLo=o(" (Longformer model)"),mLo=l(),Yb=a("li"),Ace=a("strong"),fLo=o("mbart"),gLo=o(" \u2014 "),pD=a("a"),hLo=o("MBartForConditionalGeneration"),uLo=o(" (mBART model)"),pLo=l(),Kb=a("li"),yce=a("strong"),_Lo=o("megatron-bert"),bLo=o(" \u2014 "),_D=a("a"),vLo=o("MegatronBertForMaskedLM"),FLo=o(" (MegatronBert model)"),TLo=l(),Zb=a("li"),Lce=a("strong"),MLo=o("mobilebert"),ELo=o(" \u2014 "),bD=a("a"),CLo=o("MobileBertForMaskedLM"),wLo=o(" (MobileBERT model)"),ALo=l(),e2=a("li"),xce=a("strong"),yLo=o("mpnet"),LLo=o(" \u2014 "),vD=a("a"),xLo=o("MPNetForMaskedLM"),$Lo=o(" (MPNet model)"),kLo=l(),o2=a("li"),$ce=a("strong"),SLo=o("nystromformer"),RLo=o(" \u2014 "),FD=a("a"),PLo=o("NystromformerForMaskedLM"),BLo=o(" (Nystromformer model)"),ILo=l(),r2=a("li"),kce=a("strong"),qLo=o("perceiver"),NLo=o(" \u2014 "),TD=a("a"),jLo=o("PerceiverForMaskedLM"),DLo=o(" (Perceiver model)"),GLo=l(),t2=a("li"),Sce=a("strong"),OLo=o("qdqbert"),VLo=o(" \u2014 "),MD=a("a"),XLo=o("QDQBertForMaskedLM"),zLo=o(" (QDQBert model)"),WLo=l(),a2=a("li"),Rce=a("strong"),QLo=o("reformer"),HLo=o(" \u2014 "),ED=a("a"),ULo=o("ReformerForMaskedLM"),JLo=o(" (Reformer model)"),YLo=l(),n2=a("li"),Pce=a("strong"),KLo=o("rembert"),ZLo=o(" \u2014 "),CD=a("a"),e8o=o("RemBertForMaskedLM"),o8o=o(" (RemBERT model)"),r8o=l(),s2=a("li"),Bce=a("strong"),t8o=o("roberta"),a8o=o(" \u2014 "),wD=a("a"),n8o=o("RobertaForMaskedLM"),s8o=o(" (RoBERTa model)"),l8o=l(),l2=a("li"),Ice=a("strong"),i8o=o("roformer"),d8o=o(" \u2014 "),AD=a("a"),c8o=o("RoFormerForMaskedLM"),m8o=o(" (RoFormer model)"),f8o=l(),i2=a("li"),qce=a("strong"),g8o=o("squeezebert"),h8o=o(" \u2014 "),yD=a("a"),u8o=o("SqueezeBertForMaskedLM"),p8o=o(" (SqueezeBERT model)"),_8o=l(),d2=a("li"),Nce=a("strong"),b8o=o("tapas"),v8o=o(" \u2014 "),LD=a("a"),F8o=o("TapasForMaskedLM"),T8o=o(" (TAPAS model)"),M8o=l(),c2=a("li"),jce=a("strong"),E8o=o("wav2vec2"),C8o=o(" \u2014 "),Dce=a("code"),w8o=o("Wav2Vec2ForMaskedLM"),A8o=o(" (Wav2Vec2 model)"),y8o=l(),m2=a("li"),Gce=a("strong"),L8o=o("xlm"),x8o=o(" \u2014 "),xD=a("a"),$8o=o("XLMWithLMHeadModel"),k8o=o(" (XLM model)"),S8o=l(),f2=a("li"),Oce=a("strong"),R8o=o("xlm-roberta"),P8o=o(" \u2014 "),$D=a("a"),B8o=o("XLMRobertaForMaskedLM"),I8o=o(" (XLM-RoBERTa model)"),q8o=l(),g2=a("li"),Vce=a("strong"),N8o=o("xlm-roberta-xl"),j8o=o(" \u2014 "),kD=a("a"),D8o=o("XLMRobertaXLForMaskedLM"),G8o=o(" (XLM-RoBERTa-XL model)"),O8o=l(),h2=a("li"),Xce=a("strong"),V8o=o("yoso"),X8o=o(" \u2014 "),SD=a("a"),z8o=o("YosoForMaskedLM"),W8o=o(" (YOSO model)"),Q8o=l(),u2=a("p"),H8o=o("The model is set in evaluation mode by default using "),zce=a("code"),U8o=o("model.eval()"),J8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=a("code"),Y8o=o("model.train()"),K8o=l(),F(p2.$$.fragment),tNe=l(),qi=a("h2"),_2=a("a"),Qce=a("span"),F(uL.$$.fragment),Z8o=l(),Hce=a("span"),e7o=o("AutoModelForSeq2SeqLM"),aNe=l(),So=a("div"),F(pL.$$.fragment),o7o=l(),Ni=a("p"),r7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RD=a("a"),t7o=o("from_pretrained()"),a7o=o(" class method or the "),PD=a("a"),n7o=o("from_config()"),s7o=o(` class
method.`),l7o=l(),_L=a("p"),i7o=o("This class cannot be instantiated directly using "),Uce=a("code"),d7o=o("__init__()"),c7o=o(" (throws an error)."),m7o=l(),lt=a("div"),F(bL.$$.fragment),f7o=l(),Jce=a("p"),g7o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h7o=l(),ji=a("p"),u7o=o(`Note:
Loading a model from its configuration file does `),Yce=a("strong"),p7o=o("not"),_7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),b7o=o("from_pretrained()"),v7o=o(" to load the model weights."),F7o=l(),F(b2.$$.fragment),T7o=l(),eo=a("div"),F(vL.$$.fragment),M7o=l(),Kce=a("p"),E7o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C7o=l(),Sa=a("p"),w7o=o("The model class to instantiate is selected based on the "),Zce=a("code"),A7o=o("model_type"),y7o=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),L7o=o("pretrained_model_name_or_path"),x7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),$7o=o("pretrained_model_name_or_path"),k7o=o(":"),S7o=l(),pe=a("ul"),v2=a("li"),rme=a("strong"),R7o=o("bart"),P7o=o(" \u2014 "),ID=a("a"),B7o=o("BartForConditionalGeneration"),I7o=o(" (BART model)"),q7o=l(),F2=a("li"),tme=a("strong"),N7o=o("bigbird_pegasus"),j7o=o(" \u2014 "),qD=a("a"),D7o=o("BigBirdPegasusForConditionalGeneration"),G7o=o(" (BigBirdPegasus model)"),O7o=l(),T2=a("li"),ame=a("strong"),V7o=o("blenderbot"),X7o=o(" \u2014 "),ND=a("a"),z7o=o("BlenderbotForConditionalGeneration"),W7o=o(" (Blenderbot model)"),Q7o=l(),M2=a("li"),nme=a("strong"),H7o=o("blenderbot-small"),U7o=o(" \u2014 "),jD=a("a"),J7o=o("BlenderbotSmallForConditionalGeneration"),Y7o=o(" (BlenderbotSmall model)"),K7o=l(),E2=a("li"),sme=a("strong"),Z7o=o("encoder-decoder"),e9o=o(" \u2014 "),DD=a("a"),o9o=o("EncoderDecoderModel"),r9o=o(" (Encoder decoder model)"),t9o=l(),C2=a("li"),lme=a("strong"),a9o=o("fsmt"),n9o=o(" \u2014 "),GD=a("a"),s9o=o("FSMTForConditionalGeneration"),l9o=o(" (FairSeq Machine-Translation model)"),i9o=l(),w2=a("li"),ime=a("strong"),d9o=o("led"),c9o=o(" \u2014 "),OD=a("a"),m9o=o("LEDForConditionalGeneration"),f9o=o(" (LED model)"),g9o=l(),A2=a("li"),dme=a("strong"),h9o=o("m2m_100"),u9o=o(" \u2014 "),VD=a("a"),p9o=o("M2M100ForConditionalGeneration"),_9o=o(" (M2M100 model)"),b9o=l(),y2=a("li"),cme=a("strong"),v9o=o("marian"),F9o=o(" \u2014 "),XD=a("a"),T9o=o("MarianMTModel"),M9o=o(" (Marian model)"),E9o=l(),L2=a("li"),mme=a("strong"),C9o=o("mbart"),w9o=o(" \u2014 "),zD=a("a"),A9o=o("MBartForConditionalGeneration"),y9o=o(" (mBART model)"),L9o=l(),x2=a("li"),fme=a("strong"),x9o=o("mt5"),$9o=o(" \u2014 "),WD=a("a"),k9o=o("MT5ForConditionalGeneration"),S9o=o(" (mT5 model)"),R9o=l(),$2=a("li"),gme=a("strong"),P9o=o("pegasus"),B9o=o(" \u2014 "),QD=a("a"),I9o=o("PegasusForConditionalGeneration"),q9o=o(" (Pegasus model)"),N9o=l(),k2=a("li"),hme=a("strong"),j9o=o("plbart"),D9o=o(" \u2014 "),HD=a("a"),G9o=o("PLBartForConditionalGeneration"),O9o=o(" (PLBart model)"),V9o=l(),S2=a("li"),ume=a("strong"),X9o=o("prophetnet"),z9o=o(" \u2014 "),UD=a("a"),W9o=o("ProphetNetForConditionalGeneration"),Q9o=o(" (ProphetNet model)"),H9o=l(),R2=a("li"),pme=a("strong"),U9o=o("t5"),J9o=o(" \u2014 "),JD=a("a"),Y9o=o("T5ForConditionalGeneration"),K9o=o(" (T5 model)"),Z9o=l(),P2=a("li"),_me=a("strong"),exo=o("xlm-prophetnet"),oxo=o(" \u2014 "),YD=a("a"),rxo=o("XLMProphetNetForConditionalGeneration"),txo=o(" (XLMProphetNet model)"),axo=l(),B2=a("p"),nxo=o("The model is set in evaluation mode by default using "),bme=a("code"),sxo=o("model.eval()"),lxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),ixo=o("model.train()"),dxo=l(),F(I2.$$.fragment),nNe=l(),Di=a("h2"),q2=a("a"),Fme=a("span"),F(FL.$$.fragment),cxo=l(),Tme=a("span"),mxo=o("AutoModelForSequenceClassification"),sNe=l(),Ro=a("div"),F(TL.$$.fragment),fxo=l(),Gi=a("p"),gxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KD=a("a"),hxo=o("from_pretrained()"),uxo=o(" class method or the "),ZD=a("a"),pxo=o("from_config()"),_xo=o(` class
method.`),bxo=l(),ML=a("p"),vxo=o("This class cannot be instantiated directly using "),Mme=a("code"),Fxo=o("__init__()"),Txo=o(" (throws an error)."),Mxo=l(),it=a("div"),F(EL.$$.fragment),Exo=l(),Eme=a("p"),Cxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wxo=l(),Oi=a("p"),Axo=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),yxo=o("not"),Lxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),xxo=o("from_pretrained()"),$xo=o(" to load the model weights."),kxo=l(),F(N2.$$.fragment),Sxo=l(),oo=a("div"),F(CL.$$.fragment),Rxo=l(),wme=a("p"),Pxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Bxo=l(),Ra=a("p"),Ixo=o("The model class to instantiate is selected based on the "),Ame=a("code"),qxo=o("model_type"),Nxo=o(` property of the config object (either
passed as an argument or loaded from `),yme=a("code"),jxo=o("pretrained_model_name_or_path"),Dxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),Gxo=o("pretrained_model_name_or_path"),Oxo=o(":"),Vxo=l(),q=a("ul"),j2=a("li"),xme=a("strong"),Xxo=o("albert"),zxo=o(" \u2014 "),oG=a("a"),Wxo=o("AlbertForSequenceClassification"),Qxo=o(" (ALBERT model)"),Hxo=l(),D2=a("li"),$me=a("strong"),Uxo=o("bart"),Jxo=o(" \u2014 "),rG=a("a"),Yxo=o("BartForSequenceClassification"),Kxo=o(" (BART model)"),Zxo=l(),G2=a("li"),kme=a("strong"),e$o=o("bert"),o$o=o(" \u2014 "),tG=a("a"),r$o=o("BertForSequenceClassification"),t$o=o(" (BERT model)"),a$o=l(),O2=a("li"),Sme=a("strong"),n$o=o("big_bird"),s$o=o(" \u2014 "),aG=a("a"),l$o=o("BigBirdForSequenceClassification"),i$o=o(" (BigBird model)"),d$o=l(),V2=a("li"),Rme=a("strong"),c$o=o("bigbird_pegasus"),m$o=o(" \u2014 "),nG=a("a"),f$o=o("BigBirdPegasusForSequenceClassification"),g$o=o(" (BigBirdPegasus model)"),h$o=l(),X2=a("li"),Pme=a("strong"),u$o=o("camembert"),p$o=o(" \u2014 "),sG=a("a"),_$o=o("CamembertForSequenceClassification"),b$o=o(" (CamemBERT model)"),v$o=l(),z2=a("li"),Bme=a("strong"),F$o=o("canine"),T$o=o(" \u2014 "),lG=a("a"),M$o=o("CanineForSequenceClassification"),E$o=o(" (Canine model)"),C$o=l(),W2=a("li"),Ime=a("strong"),w$o=o("convbert"),A$o=o(" \u2014 "),iG=a("a"),y$o=o("ConvBertForSequenceClassification"),L$o=o(" (ConvBERT model)"),x$o=l(),Q2=a("li"),qme=a("strong"),$$o=o("ctrl"),k$o=o(" \u2014 "),dG=a("a"),S$o=o("CTRLForSequenceClassification"),R$o=o(" (CTRL model)"),P$o=l(),H2=a("li"),Nme=a("strong"),B$o=o("data2vec-text"),I$o=o(" \u2014 "),cG=a("a"),q$o=o("Data2VecTextForSequenceClassification"),N$o=o(" (Data2VecText model)"),j$o=l(),U2=a("li"),jme=a("strong"),D$o=o("deberta"),G$o=o(" \u2014 "),mG=a("a"),O$o=o("DebertaForSequenceClassification"),V$o=o(" (DeBERTa model)"),X$o=l(),J2=a("li"),Dme=a("strong"),z$o=o("deberta-v2"),W$o=o(" \u2014 "),fG=a("a"),Q$o=o("DebertaV2ForSequenceClassification"),H$o=o(" (DeBERTa-v2 model)"),U$o=l(),Y2=a("li"),Gme=a("strong"),J$o=o("distilbert"),Y$o=o(" \u2014 "),gG=a("a"),K$o=o("DistilBertForSequenceClassification"),Z$o=o(" (DistilBERT model)"),eko=l(),K2=a("li"),Ome=a("strong"),oko=o("electra"),rko=o(" \u2014 "),hG=a("a"),tko=o("ElectraForSequenceClassification"),ako=o(" (ELECTRA model)"),nko=l(),Z2=a("li"),Vme=a("strong"),sko=o("flaubert"),lko=o(" \u2014 "),uG=a("a"),iko=o("FlaubertForSequenceClassification"),dko=o(" (FlauBERT model)"),cko=l(),ev=a("li"),Xme=a("strong"),mko=o("fnet"),fko=o(" \u2014 "),pG=a("a"),gko=o("FNetForSequenceClassification"),hko=o(" (FNet model)"),uko=l(),ov=a("li"),zme=a("strong"),pko=o("funnel"),_ko=o(" \u2014 "),_G=a("a"),bko=o("FunnelForSequenceClassification"),vko=o(" (Funnel Transformer model)"),Fko=l(),rv=a("li"),Wme=a("strong"),Tko=o("gpt2"),Mko=o(" \u2014 "),bG=a("a"),Eko=o("GPT2ForSequenceClassification"),Cko=o(" (OpenAI GPT-2 model)"),wko=l(),tv=a("li"),Qme=a("strong"),Ako=o("gpt_neo"),yko=o(" \u2014 "),vG=a("a"),Lko=o("GPTNeoForSequenceClassification"),xko=o(" (GPT Neo model)"),$ko=l(),av=a("li"),Hme=a("strong"),kko=o("gptj"),Sko=o(" \u2014 "),FG=a("a"),Rko=o("GPTJForSequenceClassification"),Pko=o(" (GPT-J model)"),Bko=l(),nv=a("li"),Ume=a("strong"),Iko=o("ibert"),qko=o(" \u2014 "),TG=a("a"),Nko=o("IBertForSequenceClassification"),jko=o(" (I-BERT model)"),Dko=l(),sv=a("li"),Jme=a("strong"),Gko=o("layoutlm"),Oko=o(" \u2014 "),MG=a("a"),Vko=o("LayoutLMForSequenceClassification"),Xko=o(" (LayoutLM model)"),zko=l(),lv=a("li"),Yme=a("strong"),Wko=o("layoutlmv2"),Qko=o(" \u2014 "),EG=a("a"),Hko=o("LayoutLMv2ForSequenceClassification"),Uko=o(" (LayoutLMv2 model)"),Jko=l(),iv=a("li"),Kme=a("strong"),Yko=o("layoutlmv3"),Kko=o(" \u2014 "),CG=a("a"),Zko=o("LayoutLMv3ForSequenceClassification"),eSo=o(" (LayoutLMv3 model)"),oSo=l(),dv=a("li"),Zme=a("strong"),rSo=o("led"),tSo=o(" \u2014 "),wG=a("a"),aSo=o("LEDForSequenceClassification"),nSo=o(" (LED model)"),sSo=l(),cv=a("li"),efe=a("strong"),lSo=o("longformer"),iSo=o(" \u2014 "),AG=a("a"),dSo=o("LongformerForSequenceClassification"),cSo=o(" (Longformer model)"),mSo=l(),mv=a("li"),ofe=a("strong"),fSo=o("mbart"),gSo=o(" \u2014 "),yG=a("a"),hSo=o("MBartForSequenceClassification"),uSo=o(" (mBART model)"),pSo=l(),fv=a("li"),rfe=a("strong"),_So=o("megatron-bert"),bSo=o(" \u2014 "),LG=a("a"),vSo=o("MegatronBertForSequenceClassification"),FSo=o(" (MegatronBert model)"),TSo=l(),gv=a("li"),tfe=a("strong"),MSo=o("mobilebert"),ESo=o(" \u2014 "),xG=a("a"),CSo=o("MobileBertForSequenceClassification"),wSo=o(" (MobileBERT model)"),ASo=l(),hv=a("li"),afe=a("strong"),ySo=o("mpnet"),LSo=o(" \u2014 "),$G=a("a"),xSo=o("MPNetForSequenceClassification"),$So=o(" (MPNet model)"),kSo=l(),uv=a("li"),nfe=a("strong"),SSo=o("nystromformer"),RSo=o(" \u2014 "),kG=a("a"),PSo=o("NystromformerForSequenceClassification"),BSo=o(" (Nystromformer model)"),ISo=l(),pv=a("li"),sfe=a("strong"),qSo=o("openai-gpt"),NSo=o(" \u2014 "),SG=a("a"),jSo=o("OpenAIGPTForSequenceClassification"),DSo=o(" (OpenAI GPT model)"),GSo=l(),_v=a("li"),lfe=a("strong"),OSo=o("perceiver"),VSo=o(" \u2014 "),RG=a("a"),XSo=o("PerceiverForSequenceClassification"),zSo=o(" (Perceiver model)"),WSo=l(),bv=a("li"),ife=a("strong"),QSo=o("plbart"),HSo=o(" \u2014 "),PG=a("a"),USo=o("PLBartForSequenceClassification"),JSo=o(" (PLBart model)"),YSo=l(),vv=a("li"),dfe=a("strong"),KSo=o("qdqbert"),ZSo=o(" \u2014 "),BG=a("a"),eRo=o("QDQBertForSequenceClassification"),oRo=o(" (QDQBert model)"),rRo=l(),Fv=a("li"),cfe=a("strong"),tRo=o("reformer"),aRo=o(" \u2014 "),IG=a("a"),nRo=o("ReformerForSequenceClassification"),sRo=o(" (Reformer model)"),lRo=l(),Tv=a("li"),mfe=a("strong"),iRo=o("rembert"),dRo=o(" \u2014 "),qG=a("a"),cRo=o("RemBertForSequenceClassification"),mRo=o(" (RemBERT model)"),fRo=l(),Mv=a("li"),ffe=a("strong"),gRo=o("roberta"),hRo=o(" \u2014 "),NG=a("a"),uRo=o("RobertaForSequenceClassification"),pRo=o(" (RoBERTa model)"),_Ro=l(),Ev=a("li"),gfe=a("strong"),bRo=o("roformer"),vRo=o(" \u2014 "),jG=a("a"),FRo=o("RoFormerForSequenceClassification"),TRo=o(" (RoFormer model)"),MRo=l(),Cv=a("li"),hfe=a("strong"),ERo=o("squeezebert"),CRo=o(" \u2014 "),DG=a("a"),wRo=o("SqueezeBertForSequenceClassification"),ARo=o(" (SqueezeBERT model)"),yRo=l(),wv=a("li"),ufe=a("strong"),LRo=o("tapas"),xRo=o(" \u2014 "),GG=a("a"),$Ro=o("TapasForSequenceClassification"),kRo=o(" (TAPAS model)"),SRo=l(),Av=a("li"),pfe=a("strong"),RRo=o("transfo-xl"),PRo=o(" \u2014 "),OG=a("a"),BRo=o("TransfoXLForSequenceClassification"),IRo=o(" (Transformer-XL model)"),qRo=l(),yv=a("li"),_fe=a("strong"),NRo=o("xlm"),jRo=o(" \u2014 "),VG=a("a"),DRo=o("XLMForSequenceClassification"),GRo=o(" (XLM model)"),ORo=l(),Lv=a("li"),bfe=a("strong"),VRo=o("xlm-roberta"),XRo=o(" \u2014 "),XG=a("a"),zRo=o("XLMRobertaForSequenceClassification"),WRo=o(" (XLM-RoBERTa model)"),QRo=l(),xv=a("li"),vfe=a("strong"),HRo=o("xlm-roberta-xl"),URo=o(" \u2014 "),zG=a("a"),JRo=o("XLMRobertaXLForSequenceClassification"),YRo=o(" (XLM-RoBERTa-XL model)"),KRo=l(),$v=a("li"),Ffe=a("strong"),ZRo=o("xlnet"),ePo=o(" \u2014 "),WG=a("a"),oPo=o("XLNetForSequenceClassification"),rPo=o(" (XLNet model)"),tPo=l(),kv=a("li"),Tfe=a("strong"),aPo=o("yoso"),nPo=o(" \u2014 "),QG=a("a"),sPo=o("YosoForSequenceClassification"),lPo=o(" (YOSO model)"),iPo=l(),Sv=a("p"),dPo=o("The model is set in evaluation mode by default using "),Mfe=a("code"),cPo=o("model.eval()"),mPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=a("code"),fPo=o("model.train()"),gPo=l(),F(Rv.$$.fragment),lNe=l(),Vi=a("h2"),Pv=a("a"),Cfe=a("span"),F(wL.$$.fragment),hPo=l(),wfe=a("span"),uPo=o("AutoModelForMultipleChoice"),iNe=l(),Po=a("div"),F(AL.$$.fragment),pPo=l(),Xi=a("p"),_Po=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HG=a("a"),bPo=o("from_pretrained()"),vPo=o(" class method or the "),UG=a("a"),FPo=o("from_config()"),TPo=o(` class
method.`),MPo=l(),yL=a("p"),EPo=o("This class cannot be instantiated directly using "),Afe=a("code"),CPo=o("__init__()"),wPo=o(" (throws an error)."),APo=l(),dt=a("div"),F(LL.$$.fragment),yPo=l(),yfe=a("p"),LPo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xPo=l(),zi=a("p"),$Po=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),kPo=o("not"),SPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),RPo=o("from_pretrained()"),PPo=o(" to load the model weights."),BPo=l(),F(Bv.$$.fragment),IPo=l(),ro=a("div"),F(xL.$$.fragment),qPo=l(),xfe=a("p"),NPo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jPo=l(),Pa=a("p"),DPo=o("The model class to instantiate is selected based on the "),$fe=a("code"),GPo=o("model_type"),OPo=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),VPo=o("pretrained_model_name_or_path"),XPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),zPo=o("pretrained_model_name_or_path"),WPo=o(":"),QPo=l(),K=a("ul"),Iv=a("li"),Rfe=a("strong"),HPo=o("albert"),UPo=o(" \u2014 "),YG=a("a"),JPo=o("AlbertForMultipleChoice"),YPo=o(" (ALBERT model)"),KPo=l(),qv=a("li"),Pfe=a("strong"),ZPo=o("bert"),eBo=o(" \u2014 "),KG=a("a"),oBo=o("BertForMultipleChoice"),rBo=o(" (BERT model)"),tBo=l(),Nv=a("li"),Bfe=a("strong"),aBo=o("big_bird"),nBo=o(" \u2014 "),ZG=a("a"),sBo=o("BigBirdForMultipleChoice"),lBo=o(" (BigBird model)"),iBo=l(),jv=a("li"),Ife=a("strong"),dBo=o("camembert"),cBo=o(" \u2014 "),eO=a("a"),mBo=o("CamembertForMultipleChoice"),fBo=o(" (CamemBERT model)"),gBo=l(),Dv=a("li"),qfe=a("strong"),hBo=o("canine"),uBo=o(" \u2014 "),oO=a("a"),pBo=o("CanineForMultipleChoice"),_Bo=o(" (Canine model)"),bBo=l(),Gv=a("li"),Nfe=a("strong"),vBo=o("convbert"),FBo=o(" \u2014 "),rO=a("a"),TBo=o("ConvBertForMultipleChoice"),MBo=o(" (ConvBERT model)"),EBo=l(),Ov=a("li"),jfe=a("strong"),CBo=o("data2vec-text"),wBo=o(" \u2014 "),tO=a("a"),ABo=o("Data2VecTextForMultipleChoice"),yBo=o(" (Data2VecText model)"),LBo=l(),Vv=a("li"),Dfe=a("strong"),xBo=o("deberta-v2"),$Bo=o(" \u2014 "),aO=a("a"),kBo=o("DebertaV2ForMultipleChoice"),SBo=o(" (DeBERTa-v2 model)"),RBo=l(),Xv=a("li"),Gfe=a("strong"),PBo=o("distilbert"),BBo=o(" \u2014 "),nO=a("a"),IBo=o("DistilBertForMultipleChoice"),qBo=o(" (DistilBERT model)"),NBo=l(),zv=a("li"),Ofe=a("strong"),jBo=o("electra"),DBo=o(" \u2014 "),sO=a("a"),GBo=o("ElectraForMultipleChoice"),OBo=o(" (ELECTRA model)"),VBo=l(),Wv=a("li"),Vfe=a("strong"),XBo=o("flaubert"),zBo=o(" \u2014 "),lO=a("a"),WBo=o("FlaubertForMultipleChoice"),QBo=o(" (FlauBERT model)"),HBo=l(),Qv=a("li"),Xfe=a("strong"),UBo=o("fnet"),JBo=o(" \u2014 "),iO=a("a"),YBo=o("FNetForMultipleChoice"),KBo=o(" (FNet model)"),ZBo=l(),Hv=a("li"),zfe=a("strong"),eIo=o("funnel"),oIo=o(" \u2014 "),dO=a("a"),rIo=o("FunnelForMultipleChoice"),tIo=o(" (Funnel Transformer model)"),aIo=l(),Uv=a("li"),Wfe=a("strong"),nIo=o("ibert"),sIo=o(" \u2014 "),cO=a("a"),lIo=o("IBertForMultipleChoice"),iIo=o(" (I-BERT model)"),dIo=l(),Jv=a("li"),Qfe=a("strong"),cIo=o("longformer"),mIo=o(" \u2014 "),mO=a("a"),fIo=o("LongformerForMultipleChoice"),gIo=o(" (Longformer model)"),hIo=l(),Yv=a("li"),Hfe=a("strong"),uIo=o("megatron-bert"),pIo=o(" \u2014 "),fO=a("a"),_Io=o("MegatronBertForMultipleChoice"),bIo=o(" (MegatronBert model)"),vIo=l(),Kv=a("li"),Ufe=a("strong"),FIo=o("mobilebert"),TIo=o(" \u2014 "),gO=a("a"),MIo=o("MobileBertForMultipleChoice"),EIo=o(" (MobileBERT model)"),CIo=l(),Zv=a("li"),Jfe=a("strong"),wIo=o("mpnet"),AIo=o(" \u2014 "),hO=a("a"),yIo=o("MPNetForMultipleChoice"),LIo=o(" (MPNet model)"),xIo=l(),eF=a("li"),Yfe=a("strong"),$Io=o("nystromformer"),kIo=o(" \u2014 "),uO=a("a"),SIo=o("NystromformerForMultipleChoice"),RIo=o(" (Nystromformer model)"),PIo=l(),oF=a("li"),Kfe=a("strong"),BIo=o("qdqbert"),IIo=o(" \u2014 "),pO=a("a"),qIo=o("QDQBertForMultipleChoice"),NIo=o(" (QDQBert model)"),jIo=l(),rF=a("li"),Zfe=a("strong"),DIo=o("rembert"),GIo=o(" \u2014 "),_O=a("a"),OIo=o("RemBertForMultipleChoice"),VIo=o(" (RemBERT model)"),XIo=l(),tF=a("li"),ege=a("strong"),zIo=o("roberta"),WIo=o(" \u2014 "),bO=a("a"),QIo=o("RobertaForMultipleChoice"),HIo=o(" (RoBERTa model)"),UIo=l(),aF=a("li"),oge=a("strong"),JIo=o("roformer"),YIo=o(" \u2014 "),vO=a("a"),KIo=o("RoFormerForMultipleChoice"),ZIo=o(" (RoFormer model)"),eqo=l(),nF=a("li"),rge=a("strong"),oqo=o("squeezebert"),rqo=o(" \u2014 "),FO=a("a"),tqo=o("SqueezeBertForMultipleChoice"),aqo=o(" (SqueezeBERT model)"),nqo=l(),sF=a("li"),tge=a("strong"),sqo=o("xlm"),lqo=o(" \u2014 "),TO=a("a"),iqo=o("XLMForMultipleChoice"),dqo=o(" (XLM model)"),cqo=l(),lF=a("li"),age=a("strong"),mqo=o("xlm-roberta"),fqo=o(" \u2014 "),MO=a("a"),gqo=o("XLMRobertaForMultipleChoice"),hqo=o(" (XLM-RoBERTa model)"),uqo=l(),iF=a("li"),nge=a("strong"),pqo=o("xlm-roberta-xl"),_qo=o(" \u2014 "),EO=a("a"),bqo=o("XLMRobertaXLForMultipleChoice"),vqo=o(" (XLM-RoBERTa-XL model)"),Fqo=l(),dF=a("li"),sge=a("strong"),Tqo=o("xlnet"),Mqo=o(" \u2014 "),CO=a("a"),Eqo=o("XLNetForMultipleChoice"),Cqo=o(" (XLNet model)"),wqo=l(),cF=a("li"),lge=a("strong"),Aqo=o("yoso"),yqo=o(" \u2014 "),wO=a("a"),Lqo=o("YosoForMultipleChoice"),xqo=o(" (YOSO model)"),$qo=l(),mF=a("p"),kqo=o("The model is set in evaluation mode by default using "),ige=a("code"),Sqo=o("model.eval()"),Rqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),Pqo=o("model.train()"),Bqo=l(),F(fF.$$.fragment),dNe=l(),Wi=a("h2"),gF=a("a"),cge=a("span"),F($L.$$.fragment),Iqo=l(),mge=a("span"),qqo=o("AutoModelForNextSentencePrediction"),cNe=l(),Bo=a("div"),F(kL.$$.fragment),Nqo=l(),Qi=a("p"),jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AO=a("a"),Dqo=o("from_pretrained()"),Gqo=o(" class method or the "),yO=a("a"),Oqo=o("from_config()"),Vqo=o(` class
method.`),Xqo=l(),SL=a("p"),zqo=o("This class cannot be instantiated directly using "),fge=a("code"),Wqo=o("__init__()"),Qqo=o(" (throws an error)."),Hqo=l(),ct=a("div"),F(RL.$$.fragment),Uqo=l(),gge=a("p"),Jqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yqo=l(),Hi=a("p"),Kqo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),Zqo=o("not"),eNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=a("a"),oNo=o("from_pretrained()"),rNo=o(" to load the model weights."),tNo=l(),F(hF.$$.fragment),aNo=l(),to=a("div"),F(PL.$$.fragment),nNo=l(),uge=a("p"),sNo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lNo=l(),Ba=a("p"),iNo=o("The model class to instantiate is selected based on the "),pge=a("code"),dNo=o("model_type"),cNo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),mNo=o("pretrained_model_name_or_path"),fNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),gNo=o("pretrained_model_name_or_path"),hNo=o(":"),uNo=l(),Yr=a("ul"),uF=a("li"),vge=a("strong"),pNo=o("bert"),_No=o(" \u2014 "),xO=a("a"),bNo=o("BertForNextSentencePrediction"),vNo=o(" (BERT model)"),FNo=l(),pF=a("li"),Fge=a("strong"),TNo=o("fnet"),MNo=o(" \u2014 "),$O=a("a"),ENo=o("FNetForNextSentencePrediction"),CNo=o(" (FNet model)"),wNo=l(),_F=a("li"),Tge=a("strong"),ANo=o("megatron-bert"),yNo=o(" \u2014 "),kO=a("a"),LNo=o("MegatronBertForNextSentencePrediction"),xNo=o(" (MegatronBert model)"),$No=l(),bF=a("li"),Mge=a("strong"),kNo=o("mobilebert"),SNo=o(" \u2014 "),SO=a("a"),RNo=o("MobileBertForNextSentencePrediction"),PNo=o(" (MobileBERT model)"),BNo=l(),vF=a("li"),Ege=a("strong"),INo=o("qdqbert"),qNo=o(" \u2014 "),RO=a("a"),NNo=o("QDQBertForNextSentencePrediction"),jNo=o(" (QDQBert model)"),DNo=l(),FF=a("p"),GNo=o("The model is set in evaluation mode by default using "),Cge=a("code"),ONo=o("model.eval()"),VNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),XNo=o("model.train()"),zNo=l(),F(TF.$$.fragment),mNe=l(),Ui=a("h2"),MF=a("a"),Age=a("span"),F(BL.$$.fragment),WNo=l(),yge=a("span"),QNo=o("AutoModelForTokenClassification"),fNe=l(),Io=a("div"),F(IL.$$.fragment),HNo=l(),Ji=a("p"),UNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PO=a("a"),JNo=o("from_pretrained()"),YNo=o(" class method or the "),BO=a("a"),KNo=o("from_config()"),ZNo=o(` class
method.`),ejo=l(),qL=a("p"),ojo=o("This class cannot be instantiated directly using "),Lge=a("code"),rjo=o("__init__()"),tjo=o(" (throws an error)."),ajo=l(),mt=a("div"),F(NL.$$.fragment),njo=l(),xge=a("p"),sjo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ljo=l(),Yi=a("p"),ijo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),djo=o("not"),cjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),mjo=o("from_pretrained()"),fjo=o(" to load the model weights."),gjo=l(),F(EF.$$.fragment),hjo=l(),ao=a("div"),F(jL.$$.fragment),ujo=l(),kge=a("p"),pjo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_jo=l(),Ia=a("p"),bjo=o("The model class to instantiate is selected based on the "),Sge=a("code"),vjo=o("model_type"),Fjo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),Tjo=o("pretrained_model_name_or_path"),Mjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),Ejo=o("pretrained_model_name_or_path"),Cjo=o(":"),wjo=l(),H=a("ul"),CF=a("li"),Bge=a("strong"),Ajo=o("albert"),yjo=o(" \u2014 "),qO=a("a"),Ljo=o("AlbertForTokenClassification"),xjo=o(" (ALBERT model)"),$jo=l(),wF=a("li"),Ige=a("strong"),kjo=o("bert"),Sjo=o(" \u2014 "),NO=a("a"),Rjo=o("BertForTokenClassification"),Pjo=o(" (BERT model)"),Bjo=l(),AF=a("li"),qge=a("strong"),Ijo=o("big_bird"),qjo=o(" \u2014 "),jO=a("a"),Njo=o("BigBirdForTokenClassification"),jjo=o(" (BigBird model)"),Djo=l(),yF=a("li"),Nge=a("strong"),Gjo=o("camembert"),Ojo=o(" \u2014 "),DO=a("a"),Vjo=o("CamembertForTokenClassification"),Xjo=o(" (CamemBERT model)"),zjo=l(),LF=a("li"),jge=a("strong"),Wjo=o("canine"),Qjo=o(" \u2014 "),GO=a("a"),Hjo=o("CanineForTokenClassification"),Ujo=o(" (Canine model)"),Jjo=l(),xF=a("li"),Dge=a("strong"),Yjo=o("convbert"),Kjo=o(" \u2014 "),OO=a("a"),Zjo=o("ConvBertForTokenClassification"),eDo=o(" (ConvBERT model)"),oDo=l(),$F=a("li"),Gge=a("strong"),rDo=o("data2vec-text"),tDo=o(" \u2014 "),VO=a("a"),aDo=o("Data2VecTextForTokenClassification"),nDo=o(" (Data2VecText model)"),sDo=l(),kF=a("li"),Oge=a("strong"),lDo=o("deberta"),iDo=o(" \u2014 "),XO=a("a"),dDo=o("DebertaForTokenClassification"),cDo=o(" (DeBERTa model)"),mDo=l(),SF=a("li"),Vge=a("strong"),fDo=o("deberta-v2"),gDo=o(" \u2014 "),zO=a("a"),hDo=o("DebertaV2ForTokenClassification"),uDo=o(" (DeBERTa-v2 model)"),pDo=l(),RF=a("li"),Xge=a("strong"),_Do=o("distilbert"),bDo=o(" \u2014 "),WO=a("a"),vDo=o("DistilBertForTokenClassification"),FDo=o(" (DistilBERT model)"),TDo=l(),PF=a("li"),zge=a("strong"),MDo=o("electra"),EDo=o(" \u2014 "),QO=a("a"),CDo=o("ElectraForTokenClassification"),wDo=o(" (ELECTRA model)"),ADo=l(),BF=a("li"),Wge=a("strong"),yDo=o("flaubert"),LDo=o(" \u2014 "),HO=a("a"),xDo=o("FlaubertForTokenClassification"),$Do=o(" (FlauBERT model)"),kDo=l(),IF=a("li"),Qge=a("strong"),SDo=o("fnet"),RDo=o(" \u2014 "),UO=a("a"),PDo=o("FNetForTokenClassification"),BDo=o(" (FNet model)"),IDo=l(),qF=a("li"),Hge=a("strong"),qDo=o("funnel"),NDo=o(" \u2014 "),JO=a("a"),jDo=o("FunnelForTokenClassification"),DDo=o(" (Funnel Transformer model)"),GDo=l(),NF=a("li"),Uge=a("strong"),ODo=o("gpt2"),VDo=o(" \u2014 "),YO=a("a"),XDo=o("GPT2ForTokenClassification"),zDo=o(" (OpenAI GPT-2 model)"),WDo=l(),jF=a("li"),Jge=a("strong"),QDo=o("ibert"),HDo=o(" \u2014 "),KO=a("a"),UDo=o("IBertForTokenClassification"),JDo=o(" (I-BERT model)"),YDo=l(),DF=a("li"),Yge=a("strong"),KDo=o("layoutlm"),ZDo=o(" \u2014 "),ZO=a("a"),eGo=o("LayoutLMForTokenClassification"),oGo=o(" (LayoutLM model)"),rGo=l(),GF=a("li"),Kge=a("strong"),tGo=o("layoutlmv2"),aGo=o(" \u2014 "),eV=a("a"),nGo=o("LayoutLMv2ForTokenClassification"),sGo=o(" (LayoutLMv2 model)"),lGo=l(),OF=a("li"),Zge=a("strong"),iGo=o("layoutlmv3"),dGo=o(" \u2014 "),oV=a("a"),cGo=o("LayoutLMv3ForTokenClassification"),mGo=o(" (LayoutLMv3 model)"),fGo=l(),VF=a("li"),ehe=a("strong"),gGo=o("longformer"),hGo=o(" \u2014 "),rV=a("a"),uGo=o("LongformerForTokenClassification"),pGo=o(" (Longformer model)"),_Go=l(),XF=a("li"),ohe=a("strong"),bGo=o("megatron-bert"),vGo=o(" \u2014 "),tV=a("a"),FGo=o("MegatronBertForTokenClassification"),TGo=o(" (MegatronBert model)"),MGo=l(),zF=a("li"),rhe=a("strong"),EGo=o("mobilebert"),CGo=o(" \u2014 "),aV=a("a"),wGo=o("MobileBertForTokenClassification"),AGo=o(" (MobileBERT model)"),yGo=l(),WF=a("li"),the=a("strong"),LGo=o("mpnet"),xGo=o(" \u2014 "),nV=a("a"),$Go=o("MPNetForTokenClassification"),kGo=o(" (MPNet model)"),SGo=l(),QF=a("li"),ahe=a("strong"),RGo=o("nystromformer"),PGo=o(" \u2014 "),sV=a("a"),BGo=o("NystromformerForTokenClassification"),IGo=o(" (Nystromformer model)"),qGo=l(),HF=a("li"),nhe=a("strong"),NGo=o("qdqbert"),jGo=o(" \u2014 "),lV=a("a"),DGo=o("QDQBertForTokenClassification"),GGo=o(" (QDQBert model)"),OGo=l(),UF=a("li"),she=a("strong"),VGo=o("rembert"),XGo=o(" \u2014 "),iV=a("a"),zGo=o("RemBertForTokenClassification"),WGo=o(" (RemBERT model)"),QGo=l(),JF=a("li"),lhe=a("strong"),HGo=o("roberta"),UGo=o(" \u2014 "),dV=a("a"),JGo=o("RobertaForTokenClassification"),YGo=o(" (RoBERTa model)"),KGo=l(),YF=a("li"),ihe=a("strong"),ZGo=o("roformer"),eOo=o(" \u2014 "),cV=a("a"),oOo=o("RoFormerForTokenClassification"),rOo=o(" (RoFormer model)"),tOo=l(),KF=a("li"),dhe=a("strong"),aOo=o("squeezebert"),nOo=o(" \u2014 "),mV=a("a"),sOo=o("SqueezeBertForTokenClassification"),lOo=o(" (SqueezeBERT model)"),iOo=l(),ZF=a("li"),che=a("strong"),dOo=o("xlm"),cOo=o(" \u2014 "),fV=a("a"),mOo=o("XLMForTokenClassification"),fOo=o(" (XLM model)"),gOo=l(),e1=a("li"),mhe=a("strong"),hOo=o("xlm-roberta"),uOo=o(" \u2014 "),gV=a("a"),pOo=o("XLMRobertaForTokenClassification"),_Oo=o(" (XLM-RoBERTa model)"),bOo=l(),o1=a("li"),fhe=a("strong"),vOo=o("xlm-roberta-xl"),FOo=o(" \u2014 "),hV=a("a"),TOo=o("XLMRobertaXLForTokenClassification"),MOo=o(" (XLM-RoBERTa-XL model)"),EOo=l(),r1=a("li"),ghe=a("strong"),COo=o("xlnet"),wOo=o(" \u2014 "),uV=a("a"),AOo=o("XLNetForTokenClassification"),yOo=o(" (XLNet model)"),LOo=l(),t1=a("li"),hhe=a("strong"),xOo=o("yoso"),$Oo=o(" \u2014 "),pV=a("a"),kOo=o("YosoForTokenClassification"),SOo=o(" (YOSO model)"),ROo=l(),a1=a("p"),POo=o("The model is set in evaluation mode by default using "),uhe=a("code"),BOo=o("model.eval()"),IOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),qOo=o("model.train()"),NOo=l(),F(n1.$$.fragment),gNe=l(),Ki=a("h2"),s1=a("a"),_he=a("span"),F(DL.$$.fragment),jOo=l(),bhe=a("span"),DOo=o("AutoModelForQuestionAnswering"),hNe=l(),qo=a("div"),F(GL.$$.fragment),GOo=l(),Zi=a("p"),OOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_V=a("a"),VOo=o("from_pretrained()"),XOo=o(" class method or the "),bV=a("a"),zOo=o("from_config()"),WOo=o(` class
method.`),QOo=l(),OL=a("p"),HOo=o("This class cannot be instantiated directly using "),vhe=a("code"),UOo=o("__init__()"),JOo=o(" (throws an error)."),YOo=l(),ft=a("div"),F(VL.$$.fragment),KOo=l(),Fhe=a("p"),ZOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eVo=l(),ed=a("p"),oVo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),rVo=o("not"),tVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),aVo=o("from_pretrained()"),nVo=o(" to load the model weights."),sVo=l(),F(l1.$$.fragment),lVo=l(),no=a("div"),F(XL.$$.fragment),iVo=l(),Mhe=a("p"),dVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cVo=l(),qa=a("p"),mVo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),fVo=o("model_type"),gVo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),hVo=o("pretrained_model_name_or_path"),uVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),pVo=o("pretrained_model_name_or_path"),_Vo=o(":"),bVo=l(),V=a("ul"),i1=a("li"),Ahe=a("strong"),vVo=o("albert"),FVo=o(" \u2014 "),FV=a("a"),TVo=o("AlbertForQuestionAnswering"),MVo=o(" (ALBERT model)"),EVo=l(),d1=a("li"),yhe=a("strong"),CVo=o("bart"),wVo=o(" \u2014 "),TV=a("a"),AVo=o("BartForQuestionAnswering"),yVo=o(" (BART model)"),LVo=l(),c1=a("li"),Lhe=a("strong"),xVo=o("bert"),$Vo=o(" \u2014 "),MV=a("a"),kVo=o("BertForQuestionAnswering"),SVo=o(" (BERT model)"),RVo=l(),m1=a("li"),xhe=a("strong"),PVo=o("big_bird"),BVo=o(" \u2014 "),EV=a("a"),IVo=o("BigBirdForQuestionAnswering"),qVo=o(" (BigBird model)"),NVo=l(),f1=a("li"),$he=a("strong"),jVo=o("bigbird_pegasus"),DVo=o(" \u2014 "),CV=a("a"),GVo=o("BigBirdPegasusForQuestionAnswering"),OVo=o(" (BigBirdPegasus model)"),VVo=l(),g1=a("li"),khe=a("strong"),XVo=o("camembert"),zVo=o(" \u2014 "),wV=a("a"),WVo=o("CamembertForQuestionAnswering"),QVo=o(" (CamemBERT model)"),HVo=l(),h1=a("li"),She=a("strong"),UVo=o("canine"),JVo=o(" \u2014 "),AV=a("a"),YVo=o("CanineForQuestionAnswering"),KVo=o(" (Canine model)"),ZVo=l(),u1=a("li"),Rhe=a("strong"),eXo=o("convbert"),oXo=o(" \u2014 "),yV=a("a"),rXo=o("ConvBertForQuestionAnswering"),tXo=o(" (ConvBERT model)"),aXo=l(),p1=a("li"),Phe=a("strong"),nXo=o("data2vec-text"),sXo=o(" \u2014 "),LV=a("a"),lXo=o("Data2VecTextForQuestionAnswering"),iXo=o(" (Data2VecText model)"),dXo=l(),_1=a("li"),Bhe=a("strong"),cXo=o("deberta"),mXo=o(" \u2014 "),xV=a("a"),fXo=o("DebertaForQuestionAnswering"),gXo=o(" (DeBERTa model)"),hXo=l(),b1=a("li"),Ihe=a("strong"),uXo=o("deberta-v2"),pXo=o(" \u2014 "),$V=a("a"),_Xo=o("DebertaV2ForQuestionAnswering"),bXo=o(" (DeBERTa-v2 model)"),vXo=l(),v1=a("li"),qhe=a("strong"),FXo=o("distilbert"),TXo=o(" \u2014 "),kV=a("a"),MXo=o("DistilBertForQuestionAnswering"),EXo=o(" (DistilBERT model)"),CXo=l(),F1=a("li"),Nhe=a("strong"),wXo=o("electra"),AXo=o(" \u2014 "),SV=a("a"),yXo=o("ElectraForQuestionAnswering"),LXo=o(" (ELECTRA model)"),xXo=l(),T1=a("li"),jhe=a("strong"),$Xo=o("flaubert"),kXo=o(" \u2014 "),RV=a("a"),SXo=o("FlaubertForQuestionAnsweringSimple"),RXo=o(" (FlauBERT model)"),PXo=l(),M1=a("li"),Dhe=a("strong"),BXo=o("fnet"),IXo=o(" \u2014 "),PV=a("a"),qXo=o("FNetForQuestionAnswering"),NXo=o(" (FNet model)"),jXo=l(),E1=a("li"),Ghe=a("strong"),DXo=o("funnel"),GXo=o(" \u2014 "),BV=a("a"),OXo=o("FunnelForQuestionAnswering"),VXo=o(" (Funnel Transformer model)"),XXo=l(),C1=a("li"),Ohe=a("strong"),zXo=o("gptj"),WXo=o(" \u2014 "),IV=a("a"),QXo=o("GPTJForQuestionAnswering"),HXo=o(" (GPT-J model)"),UXo=l(),w1=a("li"),Vhe=a("strong"),JXo=o("ibert"),YXo=o(" \u2014 "),qV=a("a"),KXo=o("IBertForQuestionAnswering"),ZXo=o(" (I-BERT model)"),ezo=l(),A1=a("li"),Xhe=a("strong"),ozo=o("layoutlmv2"),rzo=o(" \u2014 "),NV=a("a"),tzo=o("LayoutLMv2ForQuestionAnswering"),azo=o(" (LayoutLMv2 model)"),nzo=l(),y1=a("li"),zhe=a("strong"),szo=o("layoutlmv3"),lzo=o(" \u2014 "),jV=a("a"),izo=o("LayoutLMv3ForQuestionAnswering"),dzo=o(" (LayoutLMv3 model)"),czo=l(),L1=a("li"),Whe=a("strong"),mzo=o("led"),fzo=o(" \u2014 "),DV=a("a"),gzo=o("LEDForQuestionAnswering"),hzo=o(" (LED model)"),uzo=l(),x1=a("li"),Qhe=a("strong"),pzo=o("longformer"),_zo=o(" \u2014 "),GV=a("a"),bzo=o("LongformerForQuestionAnswering"),vzo=o(" (Longformer model)"),Fzo=l(),$1=a("li"),Hhe=a("strong"),Tzo=o("lxmert"),Mzo=o(" \u2014 "),OV=a("a"),Ezo=o("LxmertForQuestionAnswering"),Czo=o(" (LXMERT model)"),wzo=l(),k1=a("li"),Uhe=a("strong"),Azo=o("mbart"),yzo=o(" \u2014 "),VV=a("a"),Lzo=o("MBartForQuestionAnswering"),xzo=o(" (mBART model)"),$zo=l(),S1=a("li"),Jhe=a("strong"),kzo=o("megatron-bert"),Szo=o(" \u2014 "),XV=a("a"),Rzo=o("MegatronBertForQuestionAnswering"),Pzo=o(" (MegatronBert model)"),Bzo=l(),R1=a("li"),Yhe=a("strong"),Izo=o("mobilebert"),qzo=o(" \u2014 "),zV=a("a"),Nzo=o("MobileBertForQuestionAnswering"),jzo=o(" (MobileBERT model)"),Dzo=l(),P1=a("li"),Khe=a("strong"),Gzo=o("mpnet"),Ozo=o(" \u2014 "),WV=a("a"),Vzo=o("MPNetForQuestionAnswering"),Xzo=o(" (MPNet model)"),zzo=l(),B1=a("li"),Zhe=a("strong"),Wzo=o("nystromformer"),Qzo=o(" \u2014 "),QV=a("a"),Hzo=o("NystromformerForQuestionAnswering"),Uzo=o(" (Nystromformer model)"),Jzo=l(),I1=a("li"),eue=a("strong"),Yzo=o("qdqbert"),Kzo=o(" \u2014 "),HV=a("a"),Zzo=o("QDQBertForQuestionAnswering"),eWo=o(" (QDQBert model)"),oWo=l(),q1=a("li"),oue=a("strong"),rWo=o("reformer"),tWo=o(" \u2014 "),UV=a("a"),aWo=o("ReformerForQuestionAnswering"),nWo=o(" (Reformer model)"),sWo=l(),N1=a("li"),rue=a("strong"),lWo=o("rembert"),iWo=o(" \u2014 "),JV=a("a"),dWo=o("RemBertForQuestionAnswering"),cWo=o(" (RemBERT model)"),mWo=l(),j1=a("li"),tue=a("strong"),fWo=o("roberta"),gWo=o(" \u2014 "),YV=a("a"),hWo=o("RobertaForQuestionAnswering"),uWo=o(" (RoBERTa model)"),pWo=l(),D1=a("li"),aue=a("strong"),_Wo=o("roformer"),bWo=o(" \u2014 "),KV=a("a"),vWo=o("RoFormerForQuestionAnswering"),FWo=o(" (RoFormer model)"),TWo=l(),G1=a("li"),nue=a("strong"),MWo=o("splinter"),EWo=o(" \u2014 "),ZV=a("a"),CWo=o("SplinterForQuestionAnswering"),wWo=o(" (Splinter model)"),AWo=l(),O1=a("li"),sue=a("strong"),yWo=o("squeezebert"),LWo=o(" \u2014 "),eX=a("a"),xWo=o("SqueezeBertForQuestionAnswering"),$Wo=o(" (SqueezeBERT model)"),kWo=l(),V1=a("li"),lue=a("strong"),SWo=o("xlm"),RWo=o(" \u2014 "),oX=a("a"),PWo=o("XLMForQuestionAnsweringSimple"),BWo=o(" (XLM model)"),IWo=l(),X1=a("li"),iue=a("strong"),qWo=o("xlm-roberta"),NWo=o(" \u2014 "),rX=a("a"),jWo=o("XLMRobertaForQuestionAnswering"),DWo=o(" (XLM-RoBERTa model)"),GWo=l(),z1=a("li"),due=a("strong"),OWo=o("xlm-roberta-xl"),VWo=o(" \u2014 "),tX=a("a"),XWo=o("XLMRobertaXLForQuestionAnswering"),zWo=o(" (XLM-RoBERTa-XL model)"),WWo=l(),W1=a("li"),cue=a("strong"),QWo=o("xlnet"),HWo=o(" \u2014 "),aX=a("a"),UWo=o("XLNetForQuestionAnsweringSimple"),JWo=o(" (XLNet model)"),YWo=l(),Q1=a("li"),mue=a("strong"),KWo=o("yoso"),ZWo=o(" \u2014 "),nX=a("a"),eQo=o("YosoForQuestionAnswering"),oQo=o(" (YOSO model)"),rQo=l(),H1=a("p"),tQo=o("The model is set in evaluation mode by default using "),fue=a("code"),aQo=o("model.eval()"),nQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),sQo=o("model.train()"),lQo=l(),F(U1.$$.fragment),uNe=l(),od=a("h2"),J1=a("a"),hue=a("span"),F(zL.$$.fragment),iQo=l(),uue=a("span"),dQo=o("AutoModelForTableQuestionAnswering"),pNe=l(),No=a("div"),F(WL.$$.fragment),cQo=l(),rd=a("p"),mQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sX=a("a"),fQo=o("from_pretrained()"),gQo=o(" class method or the "),lX=a("a"),hQo=o("from_config()"),uQo=o(` class
method.`),pQo=l(),QL=a("p"),_Qo=o("This class cannot be instantiated directly using "),pue=a("code"),bQo=o("__init__()"),vQo=o(" (throws an error)."),FQo=l(),gt=a("div"),F(HL.$$.fragment),TQo=l(),_ue=a("p"),MQo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),EQo=l(),td=a("p"),CQo=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),wQo=o("not"),AQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),yQo=o("from_pretrained()"),LQo=o(" to load the model weights."),xQo=l(),F(Y1.$$.fragment),$Qo=l(),so=a("div"),F(UL.$$.fragment),kQo=l(),vue=a("p"),SQo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RQo=l(),Na=a("p"),PQo=o("The model class to instantiate is selected based on the "),Fue=a("code"),BQo=o("model_type"),IQo=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),qQo=o("pretrained_model_name_or_path"),NQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),jQo=o("pretrained_model_name_or_path"),DQo=o(":"),GQo=l(),Eue=a("ul"),K1=a("li"),Cue=a("strong"),OQo=o("tapas"),VQo=o(" \u2014 "),dX=a("a"),XQo=o("TapasForQuestionAnswering"),zQo=o(" (TAPAS model)"),WQo=l(),Z1=a("p"),QQo=o("The model is set in evaluation mode by default using "),wue=a("code"),HQo=o("model.eval()"),UQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),JQo=o("model.train()"),YQo=l(),F(eT.$$.fragment),_Ne=l(),ad=a("h2"),oT=a("a"),yue=a("span"),F(JL.$$.fragment),KQo=l(),Lue=a("span"),ZQo=o("AutoModelForImageClassification"),bNe=l(),jo=a("div"),F(YL.$$.fragment),eHo=l(),nd=a("p"),oHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cX=a("a"),rHo=o("from_pretrained()"),tHo=o(" class method or the "),mX=a("a"),aHo=o("from_config()"),nHo=o(` class
method.`),sHo=l(),KL=a("p"),lHo=o("This class cannot be instantiated directly using "),xue=a("code"),iHo=o("__init__()"),dHo=o(" (throws an error)."),cHo=l(),ht=a("div"),F(ZL.$$.fragment),mHo=l(),$ue=a("p"),fHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gHo=l(),sd=a("p"),hHo=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),uHo=o("not"),pHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),_Ho=o("from_pretrained()"),bHo=o(" to load the model weights."),vHo=l(),F(rT.$$.fragment),FHo=l(),lo=a("div"),F(e8.$$.fragment),THo=l(),Sue=a("p"),MHo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EHo=l(),ja=a("p"),CHo=o("The model class to instantiate is selected based on the "),Rue=a("code"),wHo=o("model_type"),AHo=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),yHo=o("pretrained_model_name_or_path"),LHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),xHo=o("pretrained_model_name_or_path"),$Ho=o(":"),kHo=l(),Fe=a("ul"),tT=a("li"),Iue=a("strong"),SHo=o("beit"),RHo=o(" \u2014 "),gX=a("a"),PHo=o("BeitForImageClassification"),BHo=o(" (BEiT model)"),IHo=l(),aT=a("li"),que=a("strong"),qHo=o("convnext"),NHo=o(" \u2014 "),hX=a("a"),jHo=o("ConvNextForImageClassification"),DHo=o(" (ConvNext model)"),GHo=l(),nT=a("li"),Nue=a("strong"),OHo=o("cvt"),VHo=o(" \u2014 "),uX=a("a"),XHo=o("CvtForImageClassification"),zHo=o(" (CvT model)"),WHo=l(),sT=a("li"),jue=a("strong"),QHo=o("data2vec-vision"),HHo=o(" \u2014 "),pX=a("a"),UHo=o("Data2VecVisionForImageClassification"),JHo=o(" (Data2VecVision model)"),YHo=l(),Bs=a("li"),Due=a("strong"),KHo=o("deit"),ZHo=o(" \u2014 "),_X=a("a"),eUo=o("DeiTForImageClassification"),oUo=o(" or "),bX=a("a"),rUo=o("DeiTForImageClassificationWithTeacher"),tUo=o(" (DeiT model)"),aUo=l(),lT=a("li"),Gue=a("strong"),nUo=o("imagegpt"),sUo=o(" \u2014 "),vX=a("a"),lUo=o("ImageGPTForImageClassification"),iUo=o(" (ImageGPT model)"),dUo=l(),ut=a("li"),Oue=a("strong"),cUo=o("perceiver"),mUo=o(" \u2014 "),FX=a("a"),fUo=o("PerceiverForImageClassificationLearned"),gUo=o(" or "),TX=a("a"),hUo=o("PerceiverForImageClassificationFourier"),uUo=o(" or "),MX=a("a"),pUo=o("PerceiverForImageClassificationConvProcessing"),_Uo=o(" (Perceiver model)"),bUo=l(),iT=a("li"),Vue=a("strong"),vUo=o("poolformer"),FUo=o(" \u2014 "),EX=a("a"),TUo=o("PoolFormerForImageClassification"),MUo=o(" (PoolFormer model)"),EUo=l(),dT=a("li"),Xue=a("strong"),CUo=o("regnet"),wUo=o(" \u2014 "),CX=a("a"),AUo=o("RegNetForImageClassification"),yUo=o(" (RegNet model)"),LUo=l(),cT=a("li"),zue=a("strong"),xUo=o("resnet"),$Uo=o(" \u2014 "),wX=a("a"),kUo=o("ResNetForImageClassification"),SUo=o(" (ResNet model)"),RUo=l(),mT=a("li"),Wue=a("strong"),PUo=o("segformer"),BUo=o(" \u2014 "),AX=a("a"),IUo=o("SegformerForImageClassification"),qUo=o(" (SegFormer model)"),NUo=l(),fT=a("li"),Que=a("strong"),jUo=o("swin"),DUo=o(" \u2014 "),yX=a("a"),GUo=o("SwinForImageClassification"),OUo=o(" (Swin model)"),VUo=l(),gT=a("li"),Hue=a("strong"),XUo=o("van"),zUo=o(" \u2014 "),LX=a("a"),WUo=o("VanForImageClassification"),QUo=o(" (VAN model)"),HUo=l(),hT=a("li"),Uue=a("strong"),UUo=o("vit"),JUo=o(" \u2014 "),xX=a("a"),YUo=o("ViTForImageClassification"),KUo=o(" (ViT model)"),ZUo=l(),uT=a("p"),eJo=o("The model is set in evaluation mode by default using "),Jue=a("code"),oJo=o("model.eval()"),rJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),tJo=o("model.train()"),aJo=l(),F(pT.$$.fragment),vNe=l(),ld=a("h2"),_T=a("a"),Kue=a("span"),F(o8.$$.fragment),nJo=l(),Zue=a("span"),sJo=o("AutoModelForVision2Seq"),FNe=l(),Do=a("div"),F(r8.$$.fragment),lJo=l(),id=a("p"),iJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$X=a("a"),dJo=o("from_pretrained()"),cJo=o(" class method or the "),kX=a("a"),mJo=o("from_config()"),fJo=o(` class
method.`),gJo=l(),t8=a("p"),hJo=o("This class cannot be instantiated directly using "),epe=a("code"),uJo=o("__init__()"),pJo=o(" (throws an error)."),_Jo=l(),pt=a("div"),F(a8.$$.fragment),bJo=l(),ope=a("p"),vJo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FJo=l(),dd=a("p"),TJo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),CJo=o("from_pretrained()"),wJo=o(" to load the model weights."),AJo=l(),F(bT.$$.fragment),yJo=l(),io=a("div"),F(n8.$$.fragment),LJo=l(),tpe=a("p"),xJo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Jo=l(),Da=a("p"),kJo=o("The model class to instantiate is selected based on the "),ape=a("code"),SJo=o("model_type"),RJo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),PJo=o("pretrained_model_name_or_path"),BJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(":"),NJo=l(),lpe=a("ul"),vT=a("li"),ipe=a("strong"),jJo=o("vision-encoder-decoder"),DJo=o(" \u2014 "),RX=a("a"),GJo=o("VisionEncoderDecoderModel"),OJo=o(" (Vision Encoder decoder model)"),VJo=l(),FT=a("p"),XJo=o("The model is set in evaluation mode by default using "),dpe=a("code"),zJo=o("model.eval()"),WJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),QJo=o("model.train()"),HJo=l(),F(TT.$$.fragment),TNe=l(),cd=a("h2"),MT=a("a"),mpe=a("span"),F(s8.$$.fragment),UJo=l(),fpe=a("span"),JJo=o("AutoModelForAudioClassification"),MNe=l(),Go=a("div"),F(l8.$$.fragment),YJo=l(),md=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),BX=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),i8=a("p"),aYo=o("This class cannot be instantiated directly using "),gpe=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),_t=a("div"),F(d8.$$.fragment),iYo=l(),hpe=a("p"),dYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cYo=l(),fd=a("p"),mYo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),fYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),hYo=o("from_pretrained()"),uYo=o(" to load the model weights."),pYo=l(),F(ET.$$.fragment),_Yo=l(),co=a("div"),F(c8.$$.fragment),bYo=l(),ppe=a("p"),vYo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FYo=l(),Ga=a("p"),TYo=o("The model class to instantiate is selected based on the "),_pe=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(":"),LYo=l(),ke=a("ul"),CT=a("li"),Fpe=a("strong"),xYo=o("data2vec-audio"),$Yo=o(" \u2014 "),qX=a("a"),kYo=o("Data2VecAudioForSequenceClassification"),SYo=o(" (Data2VecAudio model)"),RYo=l(),wT=a("li"),Tpe=a("strong"),PYo=o("hubert"),BYo=o(" \u2014 "),NX=a("a"),IYo=o("HubertForSequenceClassification"),qYo=o(" (Hubert model)"),NYo=l(),AT=a("li"),Mpe=a("strong"),jYo=o("sew"),DYo=o(" \u2014 "),jX=a("a"),GYo=o("SEWForSequenceClassification"),OYo=o(" (SEW model)"),VYo=l(),yT=a("li"),Epe=a("strong"),XYo=o("sew-d"),zYo=o(" \u2014 "),DX=a("a"),WYo=o("SEWDForSequenceClassification"),QYo=o(" (SEW-D model)"),HYo=l(),LT=a("li"),Cpe=a("strong"),UYo=o("unispeech"),JYo=o(" \u2014 "),GX=a("a"),YYo=o("UniSpeechForSequenceClassification"),KYo=o(" (UniSpeech model)"),ZYo=l(),xT=a("li"),wpe=a("strong"),eKo=o("unispeech-sat"),oKo=o(" \u2014 "),OX=a("a"),rKo=o("UniSpeechSatForSequenceClassification"),tKo=o(" (UniSpeechSat model)"),aKo=l(),$T=a("li"),Ape=a("strong"),nKo=o("wav2vec2"),sKo=o(" \u2014 "),VX=a("a"),lKo=o("Wav2Vec2ForSequenceClassification"),iKo=o(" (Wav2Vec2 model)"),dKo=l(),kT=a("li"),ype=a("strong"),cKo=o("wav2vec2-conformer"),mKo=o(" \u2014 "),XX=a("a"),fKo=o("Wav2Vec2ConformerForSequenceClassification"),gKo=o(" (Wav2Vec2-Conformer model)"),hKo=l(),ST=a("li"),Lpe=a("strong"),uKo=o("wavlm"),pKo=o(" \u2014 "),zX=a("a"),_Ko=o("WavLMForSequenceClassification"),bKo=o(" (WavLM model)"),vKo=l(),RT=a("p"),FKo=o("The model is set in evaluation mode by default using "),xpe=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),EKo=o("model.train()"),CKo=l(),F(PT.$$.fragment),ENe=l(),gd=a("h2"),BT=a("a"),kpe=a("span"),F(m8.$$.fragment),wKo=l(),Spe=a("span"),AKo=o("AutoModelForAudioFrameClassification"),CNe=l(),Oo=a("div"),F(f8.$$.fragment),yKo=l(),hd=a("p"),LKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),WX=a("a"),xKo=o("from_pretrained()"),$Ko=o(" class method or the "),QX=a("a"),kKo=o("from_config()"),SKo=o(` class
method.`),RKo=l(),g8=a("p"),PKo=o("This class cannot be instantiated directly using "),Rpe=a("code"),BKo=o("__init__()"),IKo=o(" (throws an error)."),qKo=l(),bt=a("div"),F(h8.$$.fragment),NKo=l(),Ppe=a("p"),jKo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),DKo=l(),ud=a("p"),GKo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),OKo=o("not"),VKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),XKo=o("from_pretrained()"),zKo=o(" to load the model weights."),WKo=l(),F(IT.$$.fragment),QKo=l(),mo=a("div"),F(u8.$$.fragment),HKo=l(),Ipe=a("p"),UKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),JKo=l(),Oa=a("p"),YKo=o("The model class to instantiate is selected based on the "),qpe=a("code"),KKo=o("model_type"),ZKo=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),eZo=o("pretrained_model_name_or_path"),oZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),rZo=o("pretrained_model_name_or_path"),tZo=o(":"),aZo=l(),Kr=a("ul"),qT=a("li"),Dpe=a("strong"),nZo=o("data2vec-audio"),sZo=o(" \u2014 "),UX=a("a"),lZo=o("Data2VecAudioForAudioFrameClassification"),iZo=o(" (Data2VecAudio model)"),dZo=l(),NT=a("li"),Gpe=a("strong"),cZo=o("unispeech-sat"),mZo=o(" \u2014 "),JX=a("a"),fZo=o("UniSpeechSatForAudioFrameClassification"),gZo=o(" (UniSpeechSat model)"),hZo=l(),jT=a("li"),Ope=a("strong"),uZo=o("wav2vec2"),pZo=o(" \u2014 "),YX=a("a"),_Zo=o("Wav2Vec2ForAudioFrameClassification"),bZo=o(" (Wav2Vec2 model)"),vZo=l(),DT=a("li"),Vpe=a("strong"),FZo=o("wav2vec2-conformer"),TZo=o(" \u2014 "),KX=a("a"),MZo=o("Wav2Vec2ConformerForAudioFrameClassification"),EZo=o(" (Wav2Vec2-Conformer model)"),CZo=l(),GT=a("li"),Xpe=a("strong"),wZo=o("wavlm"),AZo=o(" \u2014 "),ZX=a("a"),yZo=o("WavLMForAudioFrameClassification"),LZo=o(" (WavLM model)"),xZo=l(),OT=a("p"),$Zo=o("The model is set in evaluation mode by default using "),zpe=a("code"),kZo=o("model.eval()"),SZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),RZo=o("model.train()"),PZo=l(),F(VT.$$.fragment),wNe=l(),pd=a("h2"),XT=a("a"),Qpe=a("span"),F(p8.$$.fragment),BZo=l(),Hpe=a("span"),IZo=o("AutoModelForCTC"),ANe=l(),Vo=a("div"),F(_8.$$.fragment),qZo=l(),_d=a("p"),NZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ez=a("a"),jZo=o("from_pretrained()"),DZo=o(" class method or the "),oz=a("a"),GZo=o("from_config()"),OZo=o(` class
method.`),VZo=l(),b8=a("p"),XZo=o("This class cannot be instantiated directly using "),Upe=a("code"),zZo=o("__init__()"),WZo=o(" (throws an error)."),QZo=l(),vt=a("div"),F(v8.$$.fragment),HZo=l(),Jpe=a("p"),UZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),JZo=l(),bd=a("p"),YZo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),KZo=o("not"),ZZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),eer=o("from_pretrained()"),oer=o(" to load the model weights."),rer=l(),F(zT.$$.fragment),ter=l(),fo=a("div"),F(F8.$$.fragment),aer=l(),Kpe=a("p"),ner=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ser=l(),Va=a("p"),ler=o("The model class to instantiate is selected based on the "),Zpe=a("code"),ier=o("model_type"),der=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),cer=o("pretrained_model_name_or_path"),mer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),fer=o("pretrained_model_name_or_path"),ger=o(":"),her=l(),Se=a("ul"),WT=a("li"),r_e=a("strong"),uer=o("data2vec-audio"),per=o(" \u2014 "),tz=a("a"),_er=o("Data2VecAudioForCTC"),ber=o(" (Data2VecAudio model)"),ver=l(),QT=a("li"),t_e=a("strong"),Fer=o("hubert"),Ter=o(" \u2014 "),az=a("a"),Mer=o("HubertForCTC"),Eer=o(" (Hubert model)"),Cer=l(),HT=a("li"),a_e=a("strong"),wer=o("sew"),Aer=o(" \u2014 "),nz=a("a"),yer=o("SEWForCTC"),Ler=o(" (SEW model)"),xer=l(),UT=a("li"),n_e=a("strong"),$er=o("sew-d"),ker=o(" \u2014 "),sz=a("a"),Ser=o("SEWDForCTC"),Rer=o(" (SEW-D model)"),Per=l(),JT=a("li"),s_e=a("strong"),Ber=o("unispeech"),Ier=o(" \u2014 "),lz=a("a"),qer=o("UniSpeechForCTC"),Ner=o(" (UniSpeech model)"),jer=l(),YT=a("li"),l_e=a("strong"),Der=o("unispeech-sat"),Ger=o(" \u2014 "),iz=a("a"),Oer=o("UniSpeechSatForCTC"),Ver=o(" (UniSpeechSat model)"),Xer=l(),KT=a("li"),i_e=a("strong"),zer=o("wav2vec2"),Wer=o(" \u2014 "),dz=a("a"),Qer=o("Wav2Vec2ForCTC"),Her=o(" (Wav2Vec2 model)"),Uer=l(),ZT=a("li"),d_e=a("strong"),Jer=o("wav2vec2-conformer"),Yer=o(" \u2014 "),cz=a("a"),Ker=o("Wav2Vec2ConformerForCTC"),Zer=o(" (Wav2Vec2-Conformer model)"),eor=l(),eM=a("li"),c_e=a("strong"),oor=o("wavlm"),ror=o(" \u2014 "),mz=a("a"),tor=o("WavLMForCTC"),aor=o(" (WavLM model)"),nor=l(),oM=a("p"),sor=o("The model is set in evaluation mode by default using "),m_e=a("code"),lor=o("model.eval()"),ior=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),dor=o("model.train()"),cor=l(),F(rM.$$.fragment),yNe=l(),vd=a("h2"),tM=a("a"),g_e=a("span"),F(T8.$$.fragment),mor=l(),h_e=a("span"),gor=o("AutoModelForSpeechSeq2Seq"),LNe=l(),Xo=a("div"),F(M8.$$.fragment),hor=l(),Fd=a("p"),uor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fz=a("a"),por=o("from_pretrained()"),_or=o(" class method or the "),gz=a("a"),bor=o("from_config()"),vor=o(` class
method.`),For=l(),E8=a("p"),Tor=o("This class cannot be instantiated directly using "),u_e=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),Cor=l(),Ft=a("div"),F(C8.$$.fragment),wor=l(),p_e=a("p"),Aor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yor=l(),Td=a("p"),Lor=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),xor=o("not"),$or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),kor=o("from_pretrained()"),Sor=o(" to load the model weights."),Ror=l(),F(aM.$$.fragment),Por=l(),go=a("div"),F(w8.$$.fragment),Bor=l(),b_e=a("p"),Ior=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qor=l(),Xa=a("p"),Nor=o("The model class to instantiate is selected based on the "),v_e=a("code"),jor=o("model_type"),Dor=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(":"),zor=l(),A8=a("ul"),nM=a("li"),M_e=a("strong"),Wor=o("speech-encoder-decoder"),Qor=o(" \u2014 "),uz=a("a"),Hor=o("SpeechEncoderDecoderModel"),Uor=o(" (Speech Encoder decoder model)"),Jor=l(),sM=a("li"),E_e=a("strong"),Yor=o("speech_to_text"),Kor=o(" \u2014 "),pz=a("a"),Zor=o("Speech2TextForConditionalGeneration"),err=o(" (Speech2Text model)"),orr=l(),lM=a("p"),rrr=o("The model is set in evaluation mode by default using "),C_e=a("code"),trr=o("model.eval()"),arr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),nrr=o("model.train()"),srr=l(),F(iM.$$.fragment),xNe=l(),Md=a("h2"),dM=a("a"),A_e=a("span"),F(y8.$$.fragment),lrr=l(),y_e=a("span"),irr=o("AutoModelForAudioXVector"),$Ne=l(),zo=a("div"),F(L8.$$.fragment),drr=l(),Ed=a("p"),crr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_z=a("a"),mrr=o("from_pretrained()"),frr=o(" class method or the "),bz=a("a"),grr=o("from_config()"),hrr=o(` class
method.`),urr=l(),x8=a("p"),prr=o("This class cannot be instantiated directly using "),L_e=a("code"),_rr=o("__init__()"),brr=o(" (throws an error)."),vrr=l(),Tt=a("div"),F($8.$$.fragment),Frr=l(),x_e=a("p"),Trr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Mrr=l(),Cd=a("p"),Err=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),Crr=o("not"),wrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),Arr=o("from_pretrained()"),yrr=o(" to load the model weights."),Lrr=l(),F(cM.$$.fragment),xrr=l(),ho=a("div"),F(k8.$$.fragment),$rr=l(),k_e=a("p"),krr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Srr=l(),za=a("p"),Rrr=o("The model class to instantiate is selected based on the "),S_e=a("code"),Prr=o("model_type"),Brr=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),Irr=o("pretrained_model_name_or_path"),qrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),Nrr=o("pretrained_model_name_or_path"),jrr=o(":"),Drr=l(),Zr=a("ul"),mM=a("li"),B_e=a("strong"),Grr=o("data2vec-audio"),Orr=o(" \u2014 "),Fz=a("a"),Vrr=o("Data2VecAudioForXVector"),Xrr=o(" (Data2VecAudio model)"),zrr=l(),fM=a("li"),I_e=a("strong"),Wrr=o("unispeech-sat"),Qrr=o(" \u2014 "),Tz=a("a"),Hrr=o("UniSpeechSatForXVector"),Urr=o(" (UniSpeechSat model)"),Jrr=l(),gM=a("li"),q_e=a("strong"),Yrr=o("wav2vec2"),Krr=o(" \u2014 "),Mz=a("a"),Zrr=o("Wav2Vec2ForXVector"),etr=o(" (Wav2Vec2 model)"),otr=l(),hM=a("li"),N_e=a("strong"),rtr=o("wav2vec2-conformer"),ttr=o(" \u2014 "),Ez=a("a"),atr=o("Wav2Vec2ConformerForXVector"),ntr=o(" (Wav2Vec2-Conformer model)"),str=l(),uM=a("li"),j_e=a("strong"),ltr=o("wavlm"),itr=o(" \u2014 "),Cz=a("a"),dtr=o("WavLMForXVector"),ctr=o(" (WavLM model)"),mtr=l(),pM=a("p"),ftr=o("The model is set in evaluation mode by default using "),D_e=a("code"),gtr=o("model.eval()"),htr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),utr=o("model.train()"),ptr=l(),F(_M.$$.fragment),kNe=l(),wd=a("h2"),bM=a("a"),O_e=a("span"),F(S8.$$.fragment),_tr=l(),V_e=a("span"),btr=o("AutoModelForMaskedImageModeling"),SNe=l(),Wo=a("div"),F(R8.$$.fragment),vtr=l(),Ad=a("p"),Ftr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wz=a("a"),Ttr=o("from_pretrained()"),Mtr=o(" class method or the "),Az=a("a"),Etr=o("from_config()"),Ctr=o(` class
method.`),wtr=l(),P8=a("p"),Atr=o("This class cannot be instantiated directly using "),X_e=a("code"),ytr=o("__init__()"),Ltr=o(" (throws an error)."),xtr=l(),Mt=a("div"),F(B8.$$.fragment),$tr=l(),z_e=a("p"),ktr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Str=l(),yd=a("p"),Rtr=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),Ptr=o("not"),Btr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),Itr=o("from_pretrained()"),qtr=o(" to load the model weights."),Ntr=l(),F(vM.$$.fragment),jtr=l(),uo=a("div"),F(I8.$$.fragment),Dtr=l(),Q_e=a("p"),Gtr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Otr=l(),Wa=a("p"),Vtr=o("The model class to instantiate is selected based on the "),H_e=a("code"),Xtr=o("model_type"),ztr=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),Wtr=o("pretrained_model_name_or_path"),Qtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),Htr=o("pretrained_model_name_or_path"),Utr=o(":"),Jtr=l(),Ld=a("ul"),FM=a("li"),Y_e=a("strong"),Ytr=o("deit"),Ktr=o(" \u2014 "),Lz=a("a"),Ztr=o("DeiTForMaskedImageModeling"),ear=o(" (DeiT model)"),oar=l(),TM=a("li"),K_e=a("strong"),rar=o("swin"),tar=o(" \u2014 "),xz=a("a"),aar=o("SwinForMaskedImageModeling"),nar=o(" (Swin model)"),sar=l(),MM=a("li"),Z_e=a("strong"),lar=o("vit"),iar=o(" \u2014 "),$z=a("a"),dar=o("ViTForMaskedImageModeling"),car=o(" (ViT model)"),mar=l(),EM=a("p"),far=o("The model is set in evaluation mode by default using "),ebe=a("code"),gar=o("model.eval()"),har=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),uar=o("model.train()"),par=l(),F(CM.$$.fragment),RNe=l(),xd=a("h2"),wM=a("a"),rbe=a("span"),F(q8.$$.fragment),_ar=l(),tbe=a("span"),bar=o("AutoModelForObjectDetection"),PNe=l(),Qo=a("div"),F(N8.$$.fragment),Far=l(),$d=a("p"),Tar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kz=a("a"),Mar=o("from_pretrained()"),Ear=o(" class method or the "),Sz=a("a"),Car=o("from_config()"),war=o(` class
method.`),Aar=l(),j8=a("p"),yar=o("This class cannot be instantiated directly using "),abe=a("code"),Lar=o("__init__()"),xar=o(" (throws an error)."),$ar=l(),Et=a("div"),F(D8.$$.fragment),kar=l(),nbe=a("p"),Sar=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Rar=l(),kd=a("p"),Par=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),Bar=o("not"),Iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),qar=o("from_pretrained()"),Nar=o(" to load the model weights."),jar=l(),F(AM.$$.fragment),Dar=l(),po=a("div"),F(G8.$$.fragment),Gar=l(),lbe=a("p"),Oar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Var=l(),Qa=a("p"),Xar=o("The model class to instantiate is selected based on the "),ibe=a("code"),zar=o("model_type"),War=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),Qar=o("pretrained_model_name_or_path"),Har=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),Uar=o("pretrained_model_name_or_path"),Jar=o(":"),Yar=l(),O8=a("ul"),yM=a("li"),mbe=a("strong"),Kar=o("detr"),Zar=o(" \u2014 "),Pz=a("a"),enr=o("DetrForObjectDetection"),onr=o(" (DETR model)"),rnr=l(),LM=a("li"),fbe=a("strong"),tnr=o("yolos"),anr=o(" \u2014 "),Bz=a("a"),nnr=o("YolosForObjectDetection"),snr=o(" (YOLOS model)"),lnr=l(),xM=a("p"),inr=o("The model is set in evaluation mode by default using "),gbe=a("code"),dnr=o("model.eval()"),cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=a("code"),mnr=o("model.train()"),fnr=l(),F($M.$$.fragment),BNe=l(),Sd=a("h2"),kM=a("a"),ube=a("span"),F(V8.$$.fragment),gnr=l(),pbe=a("span"),hnr=o("AutoModelForImageSegmentation"),INe=l(),Ho=a("div"),F(X8.$$.fragment),unr=l(),Rd=a("p"),pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Iz=a("a"),_nr=o("from_pretrained()"),bnr=o(" class method or the "),qz=a("a"),vnr=o("from_config()"),Fnr=o(` class
method.`),Tnr=l(),z8=a("p"),Mnr=o("This class cannot be instantiated directly using "),_be=a("code"),Enr=o("__init__()"),Cnr=o(" (throws an error)."),wnr=l(),Ct=a("div"),F(W8.$$.fragment),Anr=l(),bbe=a("p"),ynr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Lnr=l(),Pd=a("p"),xnr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),$nr=o("not"),knr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),Snr=o("from_pretrained()"),Rnr=o(" to load the model weights."),Pnr=l(),F(SM.$$.fragment),Bnr=l(),_o=a("div"),F(Q8.$$.fragment),Inr=l(),Fbe=a("p"),qnr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Nnr=l(),Ha=a("p"),jnr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),Dnr=o("model_type"),Gnr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),Onr=o("pretrained_model_name_or_path"),Vnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(":"),Wnr=l(),Cbe=a("ul"),RM=a("li"),wbe=a("strong"),Qnr=o("detr"),Hnr=o(" \u2014 "),jz=a("a"),Unr=o("DetrForSegmentation"),Jnr=o(" (DETR model)"),Ynr=l(),PM=a("p"),Knr=o("The model is set in evaluation mode by default using "),Abe=a("code"),Znr=o("model.eval()"),esr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=a("code"),osr=o("model.train()"),rsr=l(),F(BM.$$.fragment),qNe=l(),Bd=a("h2"),IM=a("a"),Lbe=a("span"),F(H8.$$.fragment),tsr=l(),xbe=a("span"),asr=o("AutoModelForSemanticSegmentation"),NNe=l(),Uo=a("div"),F(U8.$$.fragment),nsr=l(),Id=a("p"),ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Dz=a("a"),lsr=o("from_pretrained()"),isr=o(" class method or the "),Gz=a("a"),dsr=o("from_config()"),csr=o(` class
method.`),msr=l(),J8=a("p"),fsr=o("This class cannot be instantiated directly using "),$be=a("code"),gsr=o("__init__()"),hsr=o(" (throws an error)."),usr=l(),wt=a("div"),F(Y8.$$.fragment),psr=l(),kbe=a("p"),_sr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),bsr=l(),qd=a("p"),vsr=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),Fsr=o("not"),Tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),Msr=o("from_pretrained()"),Esr=o(" to load the model weights."),Csr=l(),F(qM.$$.fragment),wsr=l(),bo=a("div"),F(K8.$$.fragment),Asr=l(),Rbe=a("p"),ysr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Lsr=l(),Ua=a("p"),xsr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),$sr=o("model_type"),ksr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),Ssr=o("pretrained_model_name_or_path"),Rsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),Psr=o("pretrained_model_name_or_path"),Bsr=o(":"),Isr=l(),Ja=a("ul"),NM=a("li"),qbe=a("strong"),qsr=o("beit"),Nsr=o(" \u2014 "),Vz=a("a"),jsr=o("BeitForSemanticSegmentation"),Dsr=o(" (BEiT model)"),Gsr=l(),jM=a("li"),Nbe=a("strong"),Osr=o("data2vec-vision"),Vsr=o(" \u2014 "),Xz=a("a"),Xsr=o("Data2VecVisionForSemanticSegmentation"),zsr=o(" (Data2VecVision model)"),Wsr=l(),DM=a("li"),jbe=a("strong"),Qsr=o("dpt"),Hsr=o(" \u2014 "),zz=a("a"),Usr=o("DPTForSemanticSegmentation"),Jsr=o(" (DPT model)"),Ysr=l(),GM=a("li"),Dbe=a("strong"),Ksr=o("segformer"),Zsr=o(" \u2014 "),Wz=a("a"),elr=o("SegformerForSemanticSegmentation"),olr=o(" (SegFormer model)"),rlr=l(),OM=a("p"),tlr=o("The model is set in evaluation mode by default using "),Gbe=a("code"),alr=o("model.eval()"),nlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=a("code"),slr=o("model.train()"),llr=l(),F(VM.$$.fragment),jNe=l(),Nd=a("h2"),XM=a("a"),Vbe=a("span"),F(Z8.$$.fragment),ilr=l(),Xbe=a("span"),dlr=o("AutoModelForInstanceSegmentation"),DNe=l(),Jo=a("div"),F(e7.$$.fragment),clr=l(),jd=a("p"),mlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Qz=a("a"),flr=o("from_pretrained()"),glr=o(" class method or the "),Hz=a("a"),hlr=o("from_config()"),ulr=o(` class
method.`),plr=l(),o7=a("p"),_lr=o("This class cannot be instantiated directly using "),zbe=a("code"),blr=o("__init__()"),vlr=o(" (throws an error)."),Flr=l(),At=a("div"),F(r7.$$.fragment),Tlr=l(),Wbe=a("p"),Mlr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Elr=l(),Dd=a("p"),Clr=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),wlr=o("not"),Alr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),ylr=o("from_pretrained()"),Llr=o(" to load the model weights."),xlr=l(),F(zM.$$.fragment),$lr=l(),vo=a("div"),F(t7.$$.fragment),klr=l(),Hbe=a("p"),Slr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rlr=l(),Ya=a("p"),Plr=o("The model class to instantiate is selected based on the "),Ube=a("code"),Blr=o("model_type"),Ilr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),qlr=o("pretrained_model_name_or_path"),Nlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),jlr=o("pretrained_model_name_or_path"),Dlr=o(":"),Glr=l(),Kbe=a("ul"),WM=a("li"),Zbe=a("strong"),Olr=o("maskformer"),Vlr=o(" \u2014 "),Jz=a("a"),Xlr=o("MaskFormerForInstanceSegmentation"),zlr=o(" (MaskFormer model)"),Wlr=l(),QM=a("p"),Qlr=o("The model is set in evaluation mode by default using "),e2e=a("code"),Hlr=o("model.eval()"),Ulr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=a("code"),Jlr=o("model.train()"),Ylr=l(),F(HM.$$.fragment),GNe=l(),Gd=a("h2"),UM=a("a"),r2e=a("span"),F(a7.$$.fragment),Klr=l(),t2e=a("span"),Zlr=o("TFAutoModel"),ONe=l(),Yo=a("div"),F(n7.$$.fragment),eir=l(),Od=a("p"),oir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yz=a("a"),rir=o("from_pretrained()"),tir=o(" class method or the "),Kz=a("a"),air=o("from_config()"),nir=o(` class
method.`),sir=l(),s7=a("p"),lir=o("This class cannot be instantiated directly using "),a2e=a("code"),iir=o("__init__()"),dir=o(" (throws an error)."),cir=l(),yt=a("div"),F(l7.$$.fragment),mir=l(),n2e=a("p"),fir=o("Instantiates one of the base model classes of the library from a configuration."),gir=l(),Vd=a("p"),hir=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),uir=o("not"),pir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),_ir=o("from_pretrained()"),bir=o(" to load the model weights."),vir=l(),F(JM.$$.fragment),Fir=l(),wr=a("div"),F(i7.$$.fragment),Tir=l(),l2e=a("p"),Mir=o("Instantiate one of the base model classes of the library from a pretrained model."),Eir=l(),Ka=a("p"),Cir=o("The model class to instantiate is selected based on the "),i2e=a("code"),wir=o("model_type"),Air=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),yir=o("pretrained_model_name_or_path"),Lir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),xir=o("pretrained_model_name_or_path"),$ir=o(":"),kir=l(),N=a("ul"),YM=a("li"),m2e=a("strong"),Sir=o("albert"),Rir=o(" \u2014 "),eW=a("a"),Pir=o("TFAlbertModel"),Bir=o(" (ALBERT model)"),Iir=l(),KM=a("li"),f2e=a("strong"),qir=o("bart"),Nir=o(" \u2014 "),oW=a("a"),jir=o("TFBartModel"),Dir=o(" (BART model)"),Gir=l(),ZM=a("li"),g2e=a("strong"),Oir=o("bert"),Vir=o(" \u2014 "),rW=a("a"),Xir=o("TFBertModel"),zir=o(" (BERT model)"),Wir=l(),e4=a("li"),h2e=a("strong"),Qir=o("blenderbot"),Hir=o(" \u2014 "),tW=a("a"),Uir=o("TFBlenderbotModel"),Jir=o(" (Blenderbot model)"),Yir=l(),o4=a("li"),u2e=a("strong"),Kir=o("blenderbot-small"),Zir=o(" \u2014 "),aW=a("a"),edr=o("TFBlenderbotSmallModel"),odr=o(" (BlenderbotSmall model)"),rdr=l(),r4=a("li"),p2e=a("strong"),tdr=o("camembert"),adr=o(" \u2014 "),nW=a("a"),ndr=o("TFCamembertModel"),sdr=o(" (CamemBERT model)"),ldr=l(),t4=a("li"),_2e=a("strong"),idr=o("clip"),ddr=o(" \u2014 "),sW=a("a"),cdr=o("TFCLIPModel"),mdr=o(" (CLIP model)"),fdr=l(),a4=a("li"),b2e=a("strong"),gdr=o("convbert"),hdr=o(" \u2014 "),lW=a("a"),udr=o("TFConvBertModel"),pdr=o(" (ConvBERT model)"),_dr=l(),n4=a("li"),v2e=a("strong"),bdr=o("convnext"),vdr=o(" \u2014 "),iW=a("a"),Fdr=o("TFConvNextModel"),Tdr=o(" (ConvNext model)"),Mdr=l(),s4=a("li"),F2e=a("strong"),Edr=o("ctrl"),Cdr=o(" \u2014 "),dW=a("a"),wdr=o("TFCTRLModel"),Adr=o(" (CTRL model)"),ydr=l(),l4=a("li"),T2e=a("strong"),Ldr=o("data2vec-vision"),xdr=o(" \u2014 "),cW=a("a"),$dr=o("TFData2VecVisionModel"),kdr=o(" (Data2VecVision model)"),Sdr=l(),i4=a("li"),M2e=a("strong"),Rdr=o("deberta"),Pdr=o(" \u2014 "),mW=a("a"),Bdr=o("TFDebertaModel"),Idr=o(" (DeBERTa model)"),qdr=l(),d4=a("li"),E2e=a("strong"),Ndr=o("deberta-v2"),jdr=o(" \u2014 "),fW=a("a"),Ddr=o("TFDebertaV2Model"),Gdr=o(" (DeBERTa-v2 model)"),Odr=l(),c4=a("li"),C2e=a("strong"),Vdr=o("distilbert"),Xdr=o(" \u2014 "),gW=a("a"),zdr=o("TFDistilBertModel"),Wdr=o(" (DistilBERT model)"),Qdr=l(),m4=a("li"),w2e=a("strong"),Hdr=o("dpr"),Udr=o(" \u2014 "),hW=a("a"),Jdr=o("TFDPRQuestionEncoder"),Ydr=o(" (DPR model)"),Kdr=l(),f4=a("li"),A2e=a("strong"),Zdr=o("electra"),ecr=o(" \u2014 "),uW=a("a"),ocr=o("TFElectraModel"),rcr=o(" (ELECTRA model)"),tcr=l(),g4=a("li"),y2e=a("strong"),acr=o("flaubert"),ncr=o(" \u2014 "),pW=a("a"),scr=o("TFFlaubertModel"),lcr=o(" (FlauBERT model)"),icr=l(),Is=a("li"),L2e=a("strong"),dcr=o("funnel"),ccr=o(" \u2014 "),_W=a("a"),mcr=o("TFFunnelModel"),fcr=o(" or "),bW=a("a"),gcr=o("TFFunnelBaseModel"),hcr=o(" (Funnel Transformer model)"),ucr=l(),h4=a("li"),x2e=a("strong"),pcr=o("gpt2"),_cr=o(" \u2014 "),vW=a("a"),bcr=o("TFGPT2Model"),vcr=o(" (OpenAI GPT-2 model)"),Fcr=l(),u4=a("li"),$2e=a("strong"),Tcr=o("gptj"),Mcr=o(" \u2014 "),FW=a("a"),Ecr=o("TFGPTJModel"),Ccr=o(" (GPT-J model)"),wcr=l(),p4=a("li"),k2e=a("strong"),Acr=o("hubert"),ycr=o(" \u2014 "),TW=a("a"),Lcr=o("TFHubertModel"),xcr=o(" (Hubert model)"),$cr=l(),_4=a("li"),S2e=a("strong"),kcr=o("layoutlm"),Scr=o(" \u2014 "),MW=a("a"),Rcr=o("TFLayoutLMModel"),Pcr=o(" (LayoutLM model)"),Bcr=l(),b4=a("li"),R2e=a("strong"),Icr=o("led"),qcr=o(" \u2014 "),EW=a("a"),Ncr=o("TFLEDModel"),jcr=o(" (LED model)"),Dcr=l(),v4=a("li"),P2e=a("strong"),Gcr=o("longformer"),Ocr=o(" \u2014 "),CW=a("a"),Vcr=o("TFLongformerModel"),Xcr=o(" (Longformer model)"),zcr=l(),F4=a("li"),B2e=a("strong"),Wcr=o("lxmert"),Qcr=o(" \u2014 "),wW=a("a"),Hcr=o("TFLxmertModel"),Ucr=o(" (LXMERT model)"),Jcr=l(),T4=a("li"),I2e=a("strong"),Ycr=o("marian"),Kcr=o(" \u2014 "),AW=a("a"),Zcr=o("TFMarianModel"),emr=o(" (Marian model)"),omr=l(),M4=a("li"),q2e=a("strong"),rmr=o("mbart"),tmr=o(" \u2014 "),yW=a("a"),amr=o("TFMBartModel"),nmr=o(" (mBART model)"),smr=l(),E4=a("li"),N2e=a("strong"),lmr=o("mobilebert"),imr=o(" \u2014 "),LW=a("a"),dmr=o("TFMobileBertModel"),cmr=o(" (MobileBERT model)"),mmr=l(),C4=a("li"),j2e=a("strong"),fmr=o("mpnet"),gmr=o(" \u2014 "),xW=a("a"),hmr=o("TFMPNetModel"),umr=o(" (MPNet model)"),pmr=l(),w4=a("li"),D2e=a("strong"),_mr=o("mt5"),bmr=o(" \u2014 "),$W=a("a"),vmr=o("TFMT5Model"),Fmr=o(" (mT5 model)"),Tmr=l(),A4=a("li"),G2e=a("strong"),Mmr=o("openai-gpt"),Emr=o(" \u2014 "),kW=a("a"),Cmr=o("TFOpenAIGPTModel"),wmr=o(" (OpenAI GPT model)"),Amr=l(),y4=a("li"),O2e=a("strong"),ymr=o("pegasus"),Lmr=o(" \u2014 "),SW=a("a"),xmr=o("TFPegasusModel"),$mr=o(" (Pegasus model)"),kmr=l(),L4=a("li"),V2e=a("strong"),Smr=o("rembert"),Rmr=o(" \u2014 "),RW=a("a"),Pmr=o("TFRemBertModel"),Bmr=o(" (RemBERT model)"),Imr=l(),x4=a("li"),X2e=a("strong"),qmr=o("roberta"),Nmr=o(" \u2014 "),PW=a("a"),jmr=o("TFRobertaModel"),Dmr=o(" (RoBERTa model)"),Gmr=l(),$4=a("li"),z2e=a("strong"),Omr=o("roformer"),Vmr=o(" \u2014 "),BW=a("a"),Xmr=o("TFRoFormerModel"),zmr=o(" (RoFormer model)"),Wmr=l(),k4=a("li"),W2e=a("strong"),Qmr=o("speech_to_text"),Hmr=o(" \u2014 "),IW=a("a"),Umr=o("TFSpeech2TextModel"),Jmr=o(" (Speech2Text model)"),Ymr=l(),S4=a("li"),Q2e=a("strong"),Kmr=o("swin"),Zmr=o(" \u2014 "),qW=a("a"),efr=o("TFSwinModel"),ofr=o(" (Swin model)"),rfr=l(),R4=a("li"),H2e=a("strong"),tfr=o("t5"),afr=o(" \u2014 "),NW=a("a"),nfr=o("TFT5Model"),sfr=o(" (T5 model)"),lfr=l(),P4=a("li"),U2e=a("strong"),ifr=o("tapas"),dfr=o(" \u2014 "),jW=a("a"),cfr=o("TFTapasModel"),mfr=o(" (TAPAS model)"),ffr=l(),B4=a("li"),J2e=a("strong"),gfr=o("transfo-xl"),hfr=o(" \u2014 "),DW=a("a"),ufr=o("TFTransfoXLModel"),pfr=o(" (Transformer-XL model)"),_fr=l(),I4=a("li"),Y2e=a("strong"),bfr=o("vit"),vfr=o(" \u2014 "),GW=a("a"),Ffr=o("TFViTModel"),Tfr=o(" (ViT model)"),Mfr=l(),q4=a("li"),K2e=a("strong"),Efr=o("vit_mae"),Cfr=o(" \u2014 "),OW=a("a"),wfr=o("TFViTMAEModel"),Afr=o(" (ViTMAE model)"),yfr=l(),N4=a("li"),Z2e=a("strong"),Lfr=o("wav2vec2"),xfr=o(" \u2014 "),VW=a("a"),$fr=o("TFWav2Vec2Model"),kfr=o(" (Wav2Vec2 model)"),Sfr=l(),j4=a("li"),eve=a("strong"),Rfr=o("xlm"),Pfr=o(" \u2014 "),XW=a("a"),Bfr=o("TFXLMModel"),Ifr=o(" (XLM model)"),qfr=l(),D4=a("li"),ove=a("strong"),Nfr=o("xlm-roberta"),jfr=o(" \u2014 "),zW=a("a"),Dfr=o("TFXLMRobertaModel"),Gfr=o(" (XLM-RoBERTa model)"),Ofr=l(),G4=a("li"),rve=a("strong"),Vfr=o("xlnet"),Xfr=o(" \u2014 "),WW=a("a"),zfr=o("TFXLNetModel"),Wfr=o(" (XLNet model)"),Qfr=l(),F(O4.$$.fragment),VNe=l(),Xd=a("h2"),V4=a("a"),tve=a("span"),F(d7.$$.fragment),Hfr=l(),ave=a("span"),Ufr=o("TFAutoModelForPreTraining"),XNe=l(),Ko=a("div"),F(c7.$$.fragment),Jfr=l(),zd=a("p"),Yfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QW=a("a"),Kfr=o("from_pretrained()"),Zfr=o(" class method or the "),HW=a("a"),egr=o("from_config()"),ogr=o(` class
method.`),rgr=l(),m7=a("p"),tgr=o("This class cannot be instantiated directly using "),nve=a("code"),agr=o("__init__()"),ngr=o(" (throws an error)."),sgr=l(),Lt=a("div"),F(f7.$$.fragment),lgr=l(),sve=a("p"),igr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dgr=l(),Wd=a("p"),cgr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),mgr=o("not"),fgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),ggr=o("from_pretrained()"),hgr=o(" to load the model weights."),ugr=l(),F(X4.$$.fragment),pgr=l(),Ar=a("div"),F(g7.$$.fragment),_gr=l(),ive=a("p"),bgr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vgr=l(),Za=a("p"),Fgr=o("The model class to instantiate is selected based on the "),dve=a("code"),Tgr=o("model_type"),Mgr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),Egr=o("pretrained_model_name_or_path"),Cgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(":"),ygr=l(),se=a("ul"),z4=a("li"),fve=a("strong"),Lgr=o("albert"),xgr=o(" \u2014 "),JW=a("a"),$gr=o("TFAlbertForPreTraining"),kgr=o(" (ALBERT model)"),Sgr=l(),W4=a("li"),gve=a("strong"),Rgr=o("bart"),Pgr=o(" \u2014 "),YW=a("a"),Bgr=o("TFBartForConditionalGeneration"),Igr=o(" (BART model)"),qgr=l(),Q4=a("li"),hve=a("strong"),Ngr=o("bert"),jgr=o(" \u2014 "),KW=a("a"),Dgr=o("TFBertForPreTraining"),Ggr=o(" (BERT model)"),Ogr=l(),H4=a("li"),uve=a("strong"),Vgr=o("camembert"),Xgr=o(" \u2014 "),ZW=a("a"),zgr=o("TFCamembertForMaskedLM"),Wgr=o(" (CamemBERT model)"),Qgr=l(),U4=a("li"),pve=a("strong"),Hgr=o("ctrl"),Ugr=o(" \u2014 "),eQ=a("a"),Jgr=o("TFCTRLLMHeadModel"),Ygr=o(" (CTRL model)"),Kgr=l(),J4=a("li"),_ve=a("strong"),Zgr=o("distilbert"),ehr=o(" \u2014 "),oQ=a("a"),ohr=o("TFDistilBertForMaskedLM"),rhr=o(" (DistilBERT model)"),thr=l(),Y4=a("li"),bve=a("strong"),ahr=o("electra"),nhr=o(" \u2014 "),rQ=a("a"),shr=o("TFElectraForPreTraining"),lhr=o(" (ELECTRA model)"),ihr=l(),K4=a("li"),vve=a("strong"),dhr=o("flaubert"),chr=o(" \u2014 "),tQ=a("a"),mhr=o("TFFlaubertWithLMHeadModel"),fhr=o(" (FlauBERT model)"),ghr=l(),Z4=a("li"),Fve=a("strong"),hhr=o("funnel"),uhr=o(" \u2014 "),aQ=a("a"),phr=o("TFFunnelForPreTraining"),_hr=o(" (Funnel Transformer model)"),bhr=l(),eE=a("li"),Tve=a("strong"),vhr=o("gpt2"),Fhr=o(" \u2014 "),nQ=a("a"),Thr=o("TFGPT2LMHeadModel"),Mhr=o(" (OpenAI GPT-2 model)"),Ehr=l(),oE=a("li"),Mve=a("strong"),Chr=o("layoutlm"),whr=o(" \u2014 "),sQ=a("a"),Ahr=o("TFLayoutLMForMaskedLM"),yhr=o(" (LayoutLM model)"),Lhr=l(),rE=a("li"),Eve=a("strong"),xhr=o("lxmert"),$hr=o(" \u2014 "),lQ=a("a"),khr=o("TFLxmertForPreTraining"),Shr=o(" (LXMERT model)"),Rhr=l(),tE=a("li"),Cve=a("strong"),Phr=o("mobilebert"),Bhr=o(" \u2014 "),iQ=a("a"),Ihr=o("TFMobileBertForPreTraining"),qhr=o(" (MobileBERT model)"),Nhr=l(),aE=a("li"),wve=a("strong"),jhr=o("mpnet"),Dhr=o(" \u2014 "),dQ=a("a"),Ghr=o("TFMPNetForMaskedLM"),Ohr=o(" (MPNet model)"),Vhr=l(),nE=a("li"),Ave=a("strong"),Xhr=o("openai-gpt"),zhr=o(" \u2014 "),cQ=a("a"),Whr=o("TFOpenAIGPTLMHeadModel"),Qhr=o(" (OpenAI GPT model)"),Hhr=l(),sE=a("li"),yve=a("strong"),Uhr=o("roberta"),Jhr=o(" \u2014 "),mQ=a("a"),Yhr=o("TFRobertaForMaskedLM"),Khr=o(" (RoBERTa model)"),Zhr=l(),lE=a("li"),Lve=a("strong"),eur=o("t5"),our=o(" \u2014 "),fQ=a("a"),rur=o("TFT5ForConditionalGeneration"),tur=o(" (T5 model)"),aur=l(),iE=a("li"),xve=a("strong"),nur=o("tapas"),sur=o(" \u2014 "),gQ=a("a"),lur=o("TFTapasForMaskedLM"),iur=o(" (TAPAS model)"),dur=l(),dE=a("li"),$ve=a("strong"),cur=o("transfo-xl"),mur=o(" \u2014 "),hQ=a("a"),fur=o("TFTransfoXLLMHeadModel"),gur=o(" (Transformer-XL model)"),hur=l(),cE=a("li"),kve=a("strong"),uur=o("vit_mae"),pur=o(" \u2014 "),uQ=a("a"),_ur=o("TFViTMAEForPreTraining"),bur=o(" (ViTMAE model)"),vur=l(),mE=a("li"),Sve=a("strong"),Fur=o("xlm"),Tur=o(" \u2014 "),pQ=a("a"),Mur=o("TFXLMWithLMHeadModel"),Eur=o(" (XLM model)"),Cur=l(),fE=a("li"),Rve=a("strong"),wur=o("xlm-roberta"),Aur=o(" \u2014 "),_Q=a("a"),yur=o("TFXLMRobertaForMaskedLM"),Lur=o(" (XLM-RoBERTa model)"),xur=l(),gE=a("li"),Pve=a("strong"),$ur=o("xlnet"),kur=o(" \u2014 "),bQ=a("a"),Sur=o("TFXLNetLMHeadModel"),Rur=o(" (XLNet model)"),Pur=l(),F(hE.$$.fragment),zNe=l(),Qd=a("h2"),uE=a("a"),Bve=a("span"),F(h7.$$.fragment),Bur=l(),Ive=a("span"),Iur=o("TFAutoModelForCausalLM"),WNe=l(),Zo=a("div"),F(u7.$$.fragment),qur=l(),Hd=a("p"),Nur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=a("a"),jur=o("from_pretrained()"),Dur=o(" class method or the "),FQ=a("a"),Gur=o("from_config()"),Our=o(` class
method.`),Vur=l(),p7=a("p"),Xur=o("This class cannot be instantiated directly using "),qve=a("code"),zur=o("__init__()"),Wur=o(" (throws an error)."),Qur=l(),xt=a("div"),F(_7.$$.fragment),Hur=l(),Nve=a("p"),Uur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jur=l(),Ud=a("p"),Yur=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),Kur=o("not"),Zur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),epr=o("from_pretrained()"),opr=o(" to load the model weights."),rpr=l(),F(pE.$$.fragment),tpr=l(),yr=a("div"),F(b7.$$.fragment),apr=l(),Dve=a("p"),npr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),spr=l(),en=a("p"),lpr=o("The model class to instantiate is selected based on the "),Gve=a("code"),ipr=o("model_type"),dpr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),cpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),fpr=o("pretrained_model_name_or_path"),gpr=o(":"),hpr=l(),Me=a("ul"),_E=a("li"),Xve=a("strong"),upr=o("bert"),ppr=o(" \u2014 "),MQ=a("a"),_pr=o("TFBertLMHeadModel"),bpr=o(" (BERT model)"),vpr=l(),bE=a("li"),zve=a("strong"),Fpr=o("camembert"),Tpr=o(" \u2014 "),EQ=a("a"),Mpr=o("TFCamembertForCausalLM"),Epr=o(" (CamemBERT model)"),Cpr=l(),vE=a("li"),Wve=a("strong"),wpr=o("ctrl"),Apr=o(" \u2014 "),CQ=a("a"),ypr=o("TFCTRLLMHeadModel"),Lpr=o(" (CTRL model)"),xpr=l(),FE=a("li"),Qve=a("strong"),$pr=o("gpt2"),kpr=o(" \u2014 "),wQ=a("a"),Spr=o("TFGPT2LMHeadModel"),Rpr=o(" (OpenAI GPT-2 model)"),Ppr=l(),TE=a("li"),Hve=a("strong"),Bpr=o("gptj"),Ipr=o(" \u2014 "),AQ=a("a"),qpr=o("TFGPTJForCausalLM"),Npr=o(" (GPT-J model)"),jpr=l(),ME=a("li"),Uve=a("strong"),Dpr=o("openai-gpt"),Gpr=o(" \u2014 "),yQ=a("a"),Opr=o("TFOpenAIGPTLMHeadModel"),Vpr=o(" (OpenAI GPT model)"),Xpr=l(),EE=a("li"),Jve=a("strong"),zpr=o("rembert"),Wpr=o(" \u2014 "),LQ=a("a"),Qpr=o("TFRemBertForCausalLM"),Hpr=o(" (RemBERT model)"),Upr=l(),CE=a("li"),Yve=a("strong"),Jpr=o("roberta"),Ypr=o(" \u2014 "),xQ=a("a"),Kpr=o("TFRobertaForCausalLM"),Zpr=o(" (RoBERTa model)"),e_r=l(),wE=a("li"),Kve=a("strong"),o_r=o("roformer"),r_r=o(" \u2014 "),$Q=a("a"),t_r=o("TFRoFormerForCausalLM"),a_r=o(" (RoFormer model)"),n_r=l(),AE=a("li"),Zve=a("strong"),s_r=o("transfo-xl"),l_r=o(" \u2014 "),kQ=a("a"),i_r=o("TFTransfoXLLMHeadModel"),d_r=o(" (Transformer-XL model)"),c_r=l(),yE=a("li"),eFe=a("strong"),m_r=o("xlm"),f_r=o(" \u2014 "),SQ=a("a"),g_r=o("TFXLMWithLMHeadModel"),h_r=o(" (XLM model)"),u_r=l(),LE=a("li"),oFe=a("strong"),p_r=o("xlnet"),__r=o(" \u2014 "),RQ=a("a"),b_r=o("TFXLNetLMHeadModel"),v_r=o(" (XLNet model)"),F_r=l(),F(xE.$$.fragment),QNe=l(),Jd=a("h2"),$E=a("a"),rFe=a("span"),F(v7.$$.fragment),T_r=l(),tFe=a("span"),M_r=o("TFAutoModelForImageClassification"),HNe=l(),er=a("div"),F(F7.$$.fragment),E_r=l(),Yd=a("p"),C_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PQ=a("a"),w_r=o("from_pretrained()"),A_r=o(" class method or the "),BQ=a("a"),y_r=o("from_config()"),L_r=o(` class
method.`),x_r=l(),T7=a("p"),$_r=o("This class cannot be instantiated directly using "),aFe=a("code"),k_r=o("__init__()"),S_r=o(" (throws an error)."),R_r=l(),$t=a("div"),F(M7.$$.fragment),P_r=l(),nFe=a("p"),B_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),I_r=l(),Kd=a("p"),q_r=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),N_r=o("not"),j_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),D_r=o("from_pretrained()"),G_r=o(" to load the model weights."),O_r=l(),F(kE.$$.fragment),V_r=l(),Lr=a("div"),F(E7.$$.fragment),X_r=l(),lFe=a("p"),z_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W_r=l(),on=a("p"),Q_r=o("The model class to instantiate is selected based on the "),iFe=a("code"),H_r=o("model_type"),U_r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(":"),ebr=l(),rn=a("ul"),SE=a("li"),mFe=a("strong"),obr=o("convnext"),rbr=o(" \u2014 "),qQ=a("a"),tbr=o("TFConvNextForImageClassification"),abr=o(" (ConvNext model)"),nbr=l(),RE=a("li"),fFe=a("strong"),sbr=o("data2vec-vision"),lbr=o(" \u2014 "),NQ=a("a"),ibr=o("TFData2VecVisionForImageClassification"),dbr=o(" (Data2VecVision model)"),cbr=l(),PE=a("li"),gFe=a("strong"),mbr=o("swin"),fbr=o(" \u2014 "),jQ=a("a"),gbr=o("TFSwinForImageClassification"),hbr=o(" (Swin model)"),ubr=l(),BE=a("li"),hFe=a("strong"),pbr=o("vit"),_br=o(" \u2014 "),DQ=a("a"),bbr=o("TFViTForImageClassification"),vbr=o(" (ViT model)"),Fbr=l(),F(IE.$$.fragment),UNe=l(),Zd=a("h2"),qE=a("a"),uFe=a("span"),F(C7.$$.fragment),Tbr=l(),pFe=a("span"),Mbr=o("TFAutoModelForMaskedLM"),JNe=l(),or=a("div"),F(w7.$$.fragment),Ebr=l(),ec=a("p"),Cbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=a("a"),wbr=o("from_pretrained()"),Abr=o(" class method or the "),OQ=a("a"),ybr=o("from_config()"),Lbr=o(` class
method.`),xbr=l(),A7=a("p"),$br=o("This class cannot be instantiated directly using "),_Fe=a("code"),kbr=o("__init__()"),Sbr=o(" (throws an error)."),Rbr=l(),kt=a("div"),F(y7.$$.fragment),Pbr=l(),bFe=a("p"),Bbr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ibr=l(),oc=a("p"),qbr=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),Nbr=o("not"),jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),Dbr=o("from_pretrained()"),Gbr=o(" to load the model weights."),Obr=l(),F(NE.$$.fragment),Vbr=l(),xr=a("div"),F(L7.$$.fragment),Xbr=l(),FFe=a("p"),zbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wbr=l(),tn=a("p"),Qbr=o("The model class to instantiate is selected based on the "),TFe=a("code"),Hbr=o("model_type"),Ubr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),Jbr=o("pretrained_model_name_or_path"),Ybr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),Kbr=o("pretrained_model_name_or_path"),Zbr=o(":"),e2r=l(),ie=a("ul"),jE=a("li"),CFe=a("strong"),o2r=o("albert"),r2r=o(" \u2014 "),XQ=a("a"),t2r=o("TFAlbertForMaskedLM"),a2r=o(" (ALBERT model)"),n2r=l(),DE=a("li"),wFe=a("strong"),s2r=o("bert"),l2r=o(" \u2014 "),zQ=a("a"),i2r=o("TFBertForMaskedLM"),d2r=o(" (BERT model)"),c2r=l(),GE=a("li"),AFe=a("strong"),m2r=o("camembert"),f2r=o(" \u2014 "),WQ=a("a"),g2r=o("TFCamembertForMaskedLM"),h2r=o(" (CamemBERT model)"),u2r=l(),OE=a("li"),yFe=a("strong"),p2r=o("convbert"),_2r=o(" \u2014 "),QQ=a("a"),b2r=o("TFConvBertForMaskedLM"),v2r=o(" (ConvBERT model)"),F2r=l(),VE=a("li"),LFe=a("strong"),T2r=o("deberta"),M2r=o(" \u2014 "),HQ=a("a"),E2r=o("TFDebertaForMaskedLM"),C2r=o(" (DeBERTa model)"),w2r=l(),XE=a("li"),xFe=a("strong"),A2r=o("deberta-v2"),y2r=o(" \u2014 "),UQ=a("a"),L2r=o("TFDebertaV2ForMaskedLM"),x2r=o(" (DeBERTa-v2 model)"),$2r=l(),zE=a("li"),$Fe=a("strong"),k2r=o("distilbert"),S2r=o(" \u2014 "),JQ=a("a"),R2r=o("TFDistilBertForMaskedLM"),P2r=o(" (DistilBERT model)"),B2r=l(),WE=a("li"),kFe=a("strong"),I2r=o("electra"),q2r=o(" \u2014 "),YQ=a("a"),N2r=o("TFElectraForMaskedLM"),j2r=o(" (ELECTRA model)"),D2r=l(),QE=a("li"),SFe=a("strong"),G2r=o("flaubert"),O2r=o(" \u2014 "),KQ=a("a"),V2r=o("TFFlaubertWithLMHeadModel"),X2r=o(" (FlauBERT model)"),z2r=l(),HE=a("li"),RFe=a("strong"),W2r=o("funnel"),Q2r=o(" \u2014 "),ZQ=a("a"),H2r=o("TFFunnelForMaskedLM"),U2r=o(" (Funnel Transformer model)"),J2r=l(),UE=a("li"),PFe=a("strong"),Y2r=o("layoutlm"),K2r=o(" \u2014 "),eH=a("a"),Z2r=o("TFLayoutLMForMaskedLM"),evr=o(" (LayoutLM model)"),ovr=l(),JE=a("li"),BFe=a("strong"),rvr=o("longformer"),tvr=o(" \u2014 "),oH=a("a"),avr=o("TFLongformerForMaskedLM"),nvr=o(" (Longformer model)"),svr=l(),YE=a("li"),IFe=a("strong"),lvr=o("mobilebert"),ivr=o(" \u2014 "),rH=a("a"),dvr=o("TFMobileBertForMaskedLM"),cvr=o(" (MobileBERT model)"),mvr=l(),KE=a("li"),qFe=a("strong"),fvr=o("mpnet"),gvr=o(" \u2014 "),tH=a("a"),hvr=o("TFMPNetForMaskedLM"),uvr=o(" (MPNet model)"),pvr=l(),ZE=a("li"),NFe=a("strong"),_vr=o("rembert"),bvr=o(" \u2014 "),aH=a("a"),vvr=o("TFRemBertForMaskedLM"),Fvr=o(" (RemBERT model)"),Tvr=l(),eC=a("li"),jFe=a("strong"),Mvr=o("roberta"),Evr=o(" \u2014 "),nH=a("a"),Cvr=o("TFRobertaForMaskedLM"),wvr=o(" (RoBERTa model)"),Avr=l(),oC=a("li"),DFe=a("strong"),yvr=o("roformer"),Lvr=o(" \u2014 "),sH=a("a"),xvr=o("TFRoFormerForMaskedLM"),$vr=o(" (RoFormer model)"),kvr=l(),rC=a("li"),GFe=a("strong"),Svr=o("tapas"),Rvr=o(" \u2014 "),lH=a("a"),Pvr=o("TFTapasForMaskedLM"),Bvr=o(" (TAPAS model)"),Ivr=l(),tC=a("li"),OFe=a("strong"),qvr=o("xlm"),Nvr=o(" \u2014 "),iH=a("a"),jvr=o("TFXLMWithLMHeadModel"),Dvr=o(" (XLM model)"),Gvr=l(),aC=a("li"),VFe=a("strong"),Ovr=o("xlm-roberta"),Vvr=o(" \u2014 "),dH=a("a"),Xvr=o("TFXLMRobertaForMaskedLM"),zvr=o(" (XLM-RoBERTa model)"),Wvr=l(),F(nC.$$.fragment),YNe=l(),rc=a("h2"),sC=a("a"),XFe=a("span"),F(x7.$$.fragment),Qvr=l(),zFe=a("span"),Hvr=o("TFAutoModelForSeq2SeqLM"),KNe=l(),rr=a("div"),F($7.$$.fragment),Uvr=l(),tc=a("p"),Jvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cH=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" class method or the "),mH=a("a"),Zvr=o("from_config()"),eFr=o(` class
method.`),oFr=l(),k7=a("p"),rFr=o("This class cannot be instantiated directly using "),WFe=a("code"),tFr=o("__init__()"),aFr=o(" (throws an error)."),nFr=l(),St=a("div"),F(S7.$$.fragment),sFr=l(),QFe=a("p"),lFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iFr=l(),ac=a("p"),dFr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),cFr=o("not"),mFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),fFr=o("from_pretrained()"),gFr=o(" to load the model weights."),hFr=l(),F(lC.$$.fragment),uFr=l(),$r=a("div"),F(R7.$$.fragment),pFr=l(),UFe=a("p"),_Fr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bFr=l(),an=a("p"),vFr=o("The model class to instantiate is selected based on the "),JFe=a("code"),FFr=o("model_type"),TFr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),MFr=o("pretrained_model_name_or_path"),EFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),CFr=o("pretrained_model_name_or_path"),wFr=o(":"),AFr=l(),ye=a("ul"),iC=a("li"),ZFe=a("strong"),yFr=o("bart"),LFr=o(" \u2014 "),gH=a("a"),xFr=o("TFBartForConditionalGeneration"),$Fr=o(" (BART model)"),kFr=l(),dC=a("li"),e1e=a("strong"),SFr=o("blenderbot"),RFr=o(" \u2014 "),hH=a("a"),PFr=o("TFBlenderbotForConditionalGeneration"),BFr=o(" (Blenderbot model)"),IFr=l(),cC=a("li"),o1e=a("strong"),qFr=o("blenderbot-small"),NFr=o(" \u2014 "),uH=a("a"),jFr=o("TFBlenderbotSmallForConditionalGeneration"),DFr=o(" (BlenderbotSmall model)"),GFr=l(),mC=a("li"),r1e=a("strong"),OFr=o("encoder-decoder"),VFr=o(" \u2014 "),pH=a("a"),XFr=o("TFEncoderDecoderModel"),zFr=o(" (Encoder decoder model)"),WFr=l(),fC=a("li"),t1e=a("strong"),QFr=o("led"),HFr=o(" \u2014 "),_H=a("a"),UFr=o("TFLEDForConditionalGeneration"),JFr=o(" (LED model)"),YFr=l(),gC=a("li"),a1e=a("strong"),KFr=o("marian"),ZFr=o(" \u2014 "),bH=a("a"),e1r=o("TFMarianMTModel"),o1r=o(" (Marian model)"),r1r=l(),hC=a("li"),n1e=a("strong"),t1r=o("mbart"),a1r=o(" \u2014 "),vH=a("a"),n1r=o("TFMBartForConditionalGeneration"),s1r=o(" (mBART model)"),l1r=l(),uC=a("li"),s1e=a("strong"),i1r=o("mt5"),d1r=o(" \u2014 "),FH=a("a"),c1r=o("TFMT5ForConditionalGeneration"),m1r=o(" (mT5 model)"),f1r=l(),pC=a("li"),l1e=a("strong"),g1r=o("pegasus"),h1r=o(" \u2014 "),TH=a("a"),u1r=o("TFPegasusForConditionalGeneration"),p1r=o(" (Pegasus model)"),_1r=l(),_C=a("li"),i1e=a("strong"),b1r=o("t5"),v1r=o(" \u2014 "),MH=a("a"),F1r=o("TFT5ForConditionalGeneration"),T1r=o(" (T5 model)"),M1r=l(),F(bC.$$.fragment),ZNe=l(),nc=a("h2"),vC=a("a"),d1e=a("span"),F(P7.$$.fragment),E1r=l(),c1e=a("span"),C1r=o("TFAutoModelForSequenceClassification"),eje=l(),tr=a("div"),F(B7.$$.fragment),w1r=l(),sc=a("p"),A1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EH=a("a"),y1r=o("from_pretrained()"),L1r=o(" class method or the "),CH=a("a"),x1r=o("from_config()"),$1r=o(` class
method.`),k1r=l(),I7=a("p"),S1r=o("This class cannot be instantiated directly using "),m1e=a("code"),R1r=o("__init__()"),P1r=o(" (throws an error)."),B1r=l(),Rt=a("div"),F(q7.$$.fragment),I1r=l(),f1e=a("p"),q1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),N1r=l(),lc=a("p"),j1r=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),D1r=o("not"),G1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),O1r=o("from_pretrained()"),V1r=o(" to load the model weights."),X1r=l(),F(FC.$$.fragment),z1r=l(),kr=a("div"),F(N7.$$.fragment),W1r=l(),h1e=a("p"),Q1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H1r=l(),nn=a("p"),U1r=o("The model class to instantiate is selected based on the "),u1e=a("code"),J1r=o("model_type"),Y1r=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(":"),rTr=l(),oe=a("ul"),TC=a("li"),b1e=a("strong"),tTr=o("albert"),aTr=o(" \u2014 "),AH=a("a"),nTr=o("TFAlbertForSequenceClassification"),sTr=o(" (ALBERT model)"),lTr=l(),MC=a("li"),v1e=a("strong"),iTr=o("bert"),dTr=o(" \u2014 "),yH=a("a"),cTr=o("TFBertForSequenceClassification"),mTr=o(" (BERT model)"),fTr=l(),EC=a("li"),F1e=a("strong"),gTr=o("camembert"),hTr=o(" \u2014 "),LH=a("a"),uTr=o("TFCamembertForSequenceClassification"),pTr=o(" (CamemBERT model)"),_Tr=l(),CC=a("li"),T1e=a("strong"),bTr=o("convbert"),vTr=o(" \u2014 "),xH=a("a"),FTr=o("TFConvBertForSequenceClassification"),TTr=o(" (ConvBERT model)"),MTr=l(),wC=a("li"),M1e=a("strong"),ETr=o("ctrl"),CTr=o(" \u2014 "),$H=a("a"),wTr=o("TFCTRLForSequenceClassification"),ATr=o(" (CTRL model)"),yTr=l(),AC=a("li"),E1e=a("strong"),LTr=o("deberta"),xTr=o(" \u2014 "),kH=a("a"),$Tr=o("TFDebertaForSequenceClassification"),kTr=o(" (DeBERTa model)"),STr=l(),yC=a("li"),C1e=a("strong"),RTr=o("deberta-v2"),PTr=o(" \u2014 "),SH=a("a"),BTr=o("TFDebertaV2ForSequenceClassification"),ITr=o(" (DeBERTa-v2 model)"),qTr=l(),LC=a("li"),w1e=a("strong"),NTr=o("distilbert"),jTr=o(" \u2014 "),RH=a("a"),DTr=o("TFDistilBertForSequenceClassification"),GTr=o(" (DistilBERT model)"),OTr=l(),xC=a("li"),A1e=a("strong"),VTr=o("electra"),XTr=o(" \u2014 "),PH=a("a"),zTr=o("TFElectraForSequenceClassification"),WTr=o(" (ELECTRA model)"),QTr=l(),$C=a("li"),y1e=a("strong"),HTr=o("flaubert"),UTr=o(" \u2014 "),BH=a("a"),JTr=o("TFFlaubertForSequenceClassification"),YTr=o(" (FlauBERT model)"),KTr=l(),kC=a("li"),L1e=a("strong"),ZTr=o("funnel"),eMr=o(" \u2014 "),IH=a("a"),oMr=o("TFFunnelForSequenceClassification"),rMr=o(" (Funnel Transformer model)"),tMr=l(),SC=a("li"),x1e=a("strong"),aMr=o("gpt2"),nMr=o(" \u2014 "),qH=a("a"),sMr=o("TFGPT2ForSequenceClassification"),lMr=o(" (OpenAI GPT-2 model)"),iMr=l(),RC=a("li"),$1e=a("strong"),dMr=o("gptj"),cMr=o(" \u2014 "),NH=a("a"),mMr=o("TFGPTJForSequenceClassification"),fMr=o(" (GPT-J model)"),gMr=l(),PC=a("li"),k1e=a("strong"),hMr=o("layoutlm"),uMr=o(" \u2014 "),jH=a("a"),pMr=o("TFLayoutLMForSequenceClassification"),_Mr=o(" (LayoutLM model)"),bMr=l(),BC=a("li"),S1e=a("strong"),vMr=o("longformer"),FMr=o(" \u2014 "),DH=a("a"),TMr=o("TFLongformerForSequenceClassification"),MMr=o(" (Longformer model)"),EMr=l(),IC=a("li"),R1e=a("strong"),CMr=o("mobilebert"),wMr=o(" \u2014 "),GH=a("a"),AMr=o("TFMobileBertForSequenceClassification"),yMr=o(" (MobileBERT model)"),LMr=l(),qC=a("li"),P1e=a("strong"),xMr=o("mpnet"),$Mr=o(" \u2014 "),OH=a("a"),kMr=o("TFMPNetForSequenceClassification"),SMr=o(" (MPNet model)"),RMr=l(),NC=a("li"),B1e=a("strong"),PMr=o("openai-gpt"),BMr=o(" \u2014 "),VH=a("a"),IMr=o("TFOpenAIGPTForSequenceClassification"),qMr=o(" (OpenAI GPT model)"),NMr=l(),jC=a("li"),I1e=a("strong"),jMr=o("rembert"),DMr=o(" \u2014 "),XH=a("a"),GMr=o("TFRemBertForSequenceClassification"),OMr=o(" (RemBERT model)"),VMr=l(),DC=a("li"),q1e=a("strong"),XMr=o("roberta"),zMr=o(" \u2014 "),zH=a("a"),WMr=o("TFRobertaForSequenceClassification"),QMr=o(" (RoBERTa model)"),HMr=l(),GC=a("li"),N1e=a("strong"),UMr=o("roformer"),JMr=o(" \u2014 "),WH=a("a"),YMr=o("TFRoFormerForSequenceClassification"),KMr=o(" (RoFormer model)"),ZMr=l(),OC=a("li"),j1e=a("strong"),e4r=o("tapas"),o4r=o(" \u2014 "),QH=a("a"),r4r=o("TFTapasForSequenceClassification"),t4r=o(" (TAPAS model)"),a4r=l(),VC=a("li"),D1e=a("strong"),n4r=o("transfo-xl"),s4r=o(" \u2014 "),HH=a("a"),l4r=o("TFTransfoXLForSequenceClassification"),i4r=o(" (Transformer-XL model)"),d4r=l(),XC=a("li"),G1e=a("strong"),c4r=o("xlm"),m4r=o(" \u2014 "),UH=a("a"),f4r=o("TFXLMForSequenceClassification"),g4r=o(" (XLM model)"),h4r=l(),zC=a("li"),O1e=a("strong"),u4r=o("xlm-roberta"),p4r=o(" \u2014 "),JH=a("a"),_4r=o("TFXLMRobertaForSequenceClassification"),b4r=o(" (XLM-RoBERTa model)"),v4r=l(),WC=a("li"),V1e=a("strong"),F4r=o("xlnet"),T4r=o(" \u2014 "),YH=a("a"),M4r=o("TFXLNetForSequenceClassification"),E4r=o(" (XLNet model)"),C4r=l(),F(QC.$$.fragment),oje=l(),ic=a("h2"),HC=a("a"),X1e=a("span"),F(j7.$$.fragment),w4r=l(),z1e=a("span"),A4r=o("TFAutoModelForMultipleChoice"),rje=l(),ar=a("div"),F(D7.$$.fragment),y4r=l(),dc=a("p"),L4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KH=a("a"),x4r=o("from_pretrained()"),$4r=o(" class method or the "),ZH=a("a"),k4r=o("from_config()"),S4r=o(` class
method.`),R4r=l(),G7=a("p"),P4r=o("This class cannot be instantiated directly using "),W1e=a("code"),B4r=o("__init__()"),I4r=o(" (throws an error)."),q4r=l(),Pt=a("div"),F(O7.$$.fragment),N4r=l(),Q1e=a("p"),j4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),D4r=l(),cc=a("p"),G4r=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),O4r=o("not"),V4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),X4r=o("from_pretrained()"),z4r=o(" to load the model weights."),W4r=l(),F(UC.$$.fragment),Q4r=l(),Sr=a("div"),F(V7.$$.fragment),H4r=l(),U1e=a("p"),U4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J4r=l(),sn=a("p"),Y4r=o("The model class to instantiate is selected based on the "),J1e=a("code"),K4r=o("model_type"),Z4r=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),eEr=o("pretrained_model_name_or_path"),oEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),rEr=o("pretrained_model_name_or_path"),tEr=o(":"),aEr=l(),ue=a("ul"),JC=a("li"),Z1e=a("strong"),nEr=o("albert"),sEr=o(" \u2014 "),oU=a("a"),lEr=o("TFAlbertForMultipleChoice"),iEr=o(" (ALBERT model)"),dEr=l(),YC=a("li"),eTe=a("strong"),cEr=o("bert"),mEr=o(" \u2014 "),rU=a("a"),fEr=o("TFBertForMultipleChoice"),gEr=o(" (BERT model)"),hEr=l(),KC=a("li"),oTe=a("strong"),uEr=o("camembert"),pEr=o(" \u2014 "),tU=a("a"),_Er=o("TFCamembertForMultipleChoice"),bEr=o(" (CamemBERT model)"),vEr=l(),ZC=a("li"),rTe=a("strong"),FEr=o("convbert"),TEr=o(" \u2014 "),aU=a("a"),MEr=o("TFConvBertForMultipleChoice"),EEr=o(" (ConvBERT model)"),CEr=l(),e5=a("li"),tTe=a("strong"),wEr=o("distilbert"),AEr=o(" \u2014 "),nU=a("a"),yEr=o("TFDistilBertForMultipleChoice"),LEr=o(" (DistilBERT model)"),xEr=l(),o5=a("li"),aTe=a("strong"),$Er=o("electra"),kEr=o(" \u2014 "),sU=a("a"),SEr=o("TFElectraForMultipleChoice"),REr=o(" (ELECTRA model)"),PEr=l(),r5=a("li"),nTe=a("strong"),BEr=o("flaubert"),IEr=o(" \u2014 "),lU=a("a"),qEr=o("TFFlaubertForMultipleChoice"),NEr=o(" (FlauBERT model)"),jEr=l(),t5=a("li"),sTe=a("strong"),DEr=o("funnel"),GEr=o(" \u2014 "),iU=a("a"),OEr=o("TFFunnelForMultipleChoice"),VEr=o(" (Funnel Transformer model)"),XEr=l(),a5=a("li"),lTe=a("strong"),zEr=o("longformer"),WEr=o(" \u2014 "),dU=a("a"),QEr=o("TFLongformerForMultipleChoice"),HEr=o(" (Longformer model)"),UEr=l(),n5=a("li"),iTe=a("strong"),JEr=o("mobilebert"),YEr=o(" \u2014 "),cU=a("a"),KEr=o("TFMobileBertForMultipleChoice"),ZEr=o(" (MobileBERT model)"),eCr=l(),s5=a("li"),dTe=a("strong"),oCr=o("mpnet"),rCr=o(" \u2014 "),mU=a("a"),tCr=o("TFMPNetForMultipleChoice"),aCr=o(" (MPNet model)"),nCr=l(),l5=a("li"),cTe=a("strong"),sCr=o("rembert"),lCr=o(" \u2014 "),fU=a("a"),iCr=o("TFRemBertForMultipleChoice"),dCr=o(" (RemBERT model)"),cCr=l(),i5=a("li"),mTe=a("strong"),mCr=o("roberta"),fCr=o(" \u2014 "),gU=a("a"),gCr=o("TFRobertaForMultipleChoice"),hCr=o(" (RoBERTa model)"),uCr=l(),d5=a("li"),fTe=a("strong"),pCr=o("roformer"),_Cr=o(" \u2014 "),hU=a("a"),bCr=o("TFRoFormerForMultipleChoice"),vCr=o(" (RoFormer model)"),FCr=l(),c5=a("li"),gTe=a("strong"),TCr=o("xlm"),MCr=o(" \u2014 "),uU=a("a"),ECr=o("TFXLMForMultipleChoice"),CCr=o(" (XLM model)"),wCr=l(),m5=a("li"),hTe=a("strong"),ACr=o("xlm-roberta"),yCr=o(" \u2014 "),pU=a("a"),LCr=o("TFXLMRobertaForMultipleChoice"),xCr=o(" (XLM-RoBERTa model)"),$Cr=l(),f5=a("li"),uTe=a("strong"),kCr=o("xlnet"),SCr=o(" \u2014 "),_U=a("a"),RCr=o("TFXLNetForMultipleChoice"),PCr=o(" (XLNet model)"),BCr=l(),F(g5.$$.fragment),tje=l(),mc=a("h2"),h5=a("a"),pTe=a("span"),F(X7.$$.fragment),ICr=l(),_Te=a("span"),qCr=o("TFAutoModelForNextSentencePrediction"),aje=l(),nr=a("div"),F(z7.$$.fragment),NCr=l(),fc=a("p"),jCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bU=a("a"),DCr=o("from_pretrained()"),GCr=o(" class method or the "),vU=a("a"),OCr=o("from_config()"),VCr=o(` class
method.`),XCr=l(),W7=a("p"),zCr=o("This class cannot be instantiated directly using "),bTe=a("code"),WCr=o("__init__()"),QCr=o(" (throws an error)."),HCr=l(),Bt=a("div"),F(Q7.$$.fragment),UCr=l(),vTe=a("p"),JCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YCr=l(),gc=a("p"),KCr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),ZCr=o("not"),e5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),o5r=o("from_pretrained()"),r5r=o(" to load the model weights."),t5r=l(),F(u5.$$.fragment),a5r=l(),Rr=a("div"),F(H7.$$.fragment),n5r=l(),TTe=a("p"),s5r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),l5r=l(),ln=a("p"),i5r=o("The model class to instantiate is selected based on the "),MTe=a("code"),d5r=o("model_type"),c5r=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),m5r=o("pretrained_model_name_or_path"),f5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),g5r=o("pretrained_model_name_or_path"),h5r=o(":"),u5r=l(),U7=a("ul"),p5=a("li"),wTe=a("strong"),p5r=o("bert"),_5r=o(" \u2014 "),TU=a("a"),b5r=o("TFBertForNextSentencePrediction"),v5r=o(" (BERT model)"),F5r=l(),_5=a("li"),ATe=a("strong"),T5r=o("mobilebert"),M5r=o(" \u2014 "),MU=a("a"),E5r=o("TFMobileBertForNextSentencePrediction"),C5r=o(" (MobileBERT model)"),w5r=l(),F(b5.$$.fragment),nje=l(),hc=a("h2"),v5=a("a"),yTe=a("span"),F(J7.$$.fragment),A5r=l(),LTe=a("span"),y5r=o("TFAutoModelForTableQuestionAnswering"),sje=l(),sr=a("div"),F(Y7.$$.fragment),L5r=l(),uc=a("p"),x5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EU=a("a"),$5r=o("from_pretrained()"),k5r=o(" class method or the "),CU=a("a"),S5r=o("from_config()"),R5r=o(` class
method.`),P5r=l(),K7=a("p"),B5r=o("This class cannot be instantiated directly using "),xTe=a("code"),I5r=o("__init__()"),q5r=o(" (throws an error)."),N5r=l(),It=a("div"),F(Z7.$$.fragment),j5r=l(),$Te=a("p"),D5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),G5r=l(),pc=a("p"),O5r=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),V5r=o("not"),X5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),z5r=o("from_pretrained()"),W5r=o(" to load the model weights."),Q5r=l(),F(F5.$$.fragment),H5r=l(),Pr=a("div"),F(e9.$$.fragment),U5r=l(),STe=a("p"),J5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Y5r=l(),dn=a("p"),K5r=o("The model class to instantiate is selected based on the "),RTe=a("code"),Z5r=o("model_type"),e3r=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),o3r=o("pretrained_model_name_or_path"),r3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),t3r=o("pretrained_model_name_or_path"),a3r=o(":"),n3r=l(),ITe=a("ul"),T5=a("li"),qTe=a("strong"),s3r=o("tapas"),l3r=o(" \u2014 "),AU=a("a"),i3r=o("TFTapasForQuestionAnswering"),d3r=o(" (TAPAS model)"),c3r=l(),F(M5.$$.fragment),lje=l(),_c=a("h2"),E5=a("a"),NTe=a("span"),F(o9.$$.fragment),m3r=l(),jTe=a("span"),f3r=o("TFAutoModelForTokenClassification"),ije=l(),lr=a("div"),F(r9.$$.fragment),g3r=l(),bc=a("p"),h3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yU=a("a"),u3r=o("from_pretrained()"),p3r=o(" class method or the "),LU=a("a"),_3r=o("from_config()"),b3r=o(` class
method.`),v3r=l(),t9=a("p"),F3r=o("This class cannot be instantiated directly using "),DTe=a("code"),T3r=o("__init__()"),M3r=o(" (throws an error)."),E3r=l(),qt=a("div"),F(a9.$$.fragment),C3r=l(),GTe=a("p"),w3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),A3r=l(),vc=a("p"),y3r=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),L3r=o("not"),x3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),$3r=o("from_pretrained()"),k3r=o(" to load the model weights."),S3r=l(),F(C5.$$.fragment),R3r=l(),Br=a("div"),F(n9.$$.fragment),P3r=l(),VTe=a("p"),B3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),I3r=l(),cn=a("p"),q3r=o("The model class to instantiate is selected based on the "),XTe=a("code"),N3r=o("model_type"),j3r=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),D3r=o("pretrained_model_name_or_path"),G3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),O3r=o("pretrained_model_name_or_path"),V3r=o(":"),X3r=l(),de=a("ul"),w5=a("li"),QTe=a("strong"),z3r=o("albert"),W3r=o(" \u2014 "),$U=a("a"),Q3r=o("TFAlbertForTokenClassification"),H3r=o(" (ALBERT model)"),U3r=l(),A5=a("li"),HTe=a("strong"),J3r=o("bert"),Y3r=o(" \u2014 "),kU=a("a"),K3r=o("TFBertForTokenClassification"),Z3r=o(" (BERT model)"),ewr=l(),y5=a("li"),UTe=a("strong"),owr=o("camembert"),rwr=o(" \u2014 "),SU=a("a"),twr=o("TFCamembertForTokenClassification"),awr=o(" (CamemBERT model)"),nwr=l(),L5=a("li"),JTe=a("strong"),swr=o("convbert"),lwr=o(" \u2014 "),RU=a("a"),iwr=o("TFConvBertForTokenClassification"),dwr=o(" (ConvBERT model)"),cwr=l(),x5=a("li"),YTe=a("strong"),mwr=o("deberta"),fwr=o(" \u2014 "),PU=a("a"),gwr=o("TFDebertaForTokenClassification"),hwr=o(" (DeBERTa model)"),uwr=l(),$5=a("li"),KTe=a("strong"),pwr=o("deberta-v2"),_wr=o(" \u2014 "),BU=a("a"),bwr=o("TFDebertaV2ForTokenClassification"),vwr=o(" (DeBERTa-v2 model)"),Fwr=l(),k5=a("li"),ZTe=a("strong"),Twr=o("distilbert"),Mwr=o(" \u2014 "),IU=a("a"),Ewr=o("TFDistilBertForTokenClassification"),Cwr=o(" (DistilBERT model)"),wwr=l(),S5=a("li"),eMe=a("strong"),Awr=o("electra"),ywr=o(" \u2014 "),qU=a("a"),Lwr=o("TFElectraForTokenClassification"),xwr=o(" (ELECTRA model)"),$wr=l(),R5=a("li"),oMe=a("strong"),kwr=o("flaubert"),Swr=o(" \u2014 "),NU=a("a"),Rwr=o("TFFlaubertForTokenClassification"),Pwr=o(" (FlauBERT model)"),Bwr=l(),P5=a("li"),rMe=a("strong"),Iwr=o("funnel"),qwr=o(" \u2014 "),jU=a("a"),Nwr=o("TFFunnelForTokenClassification"),jwr=o(" (Funnel Transformer model)"),Dwr=l(),B5=a("li"),tMe=a("strong"),Gwr=o("layoutlm"),Owr=o(" \u2014 "),DU=a("a"),Vwr=o("TFLayoutLMForTokenClassification"),Xwr=o(" (LayoutLM model)"),zwr=l(),I5=a("li"),aMe=a("strong"),Wwr=o("longformer"),Qwr=o(" \u2014 "),GU=a("a"),Hwr=o("TFLongformerForTokenClassification"),Uwr=o(" (Longformer model)"),Jwr=l(),q5=a("li"),nMe=a("strong"),Ywr=o("mobilebert"),Kwr=o(" \u2014 "),OU=a("a"),Zwr=o("TFMobileBertForTokenClassification"),e0r=o(" (MobileBERT model)"),o0r=l(),N5=a("li"),sMe=a("strong"),r0r=o("mpnet"),t0r=o(" \u2014 "),VU=a("a"),a0r=o("TFMPNetForTokenClassification"),n0r=o(" (MPNet model)"),s0r=l(),j5=a("li"),lMe=a("strong"),l0r=o("rembert"),i0r=o(" \u2014 "),XU=a("a"),d0r=o("TFRemBertForTokenClassification"),c0r=o(" (RemBERT model)"),m0r=l(),D5=a("li"),iMe=a("strong"),f0r=o("roberta"),g0r=o(" \u2014 "),zU=a("a"),h0r=o("TFRobertaForTokenClassification"),u0r=o(" (RoBERTa model)"),p0r=l(),G5=a("li"),dMe=a("strong"),_0r=o("roformer"),b0r=o(" \u2014 "),WU=a("a"),v0r=o("TFRoFormerForTokenClassification"),F0r=o(" (RoFormer model)"),T0r=l(),O5=a("li"),cMe=a("strong"),M0r=o("xlm"),E0r=o(" \u2014 "),QU=a("a"),C0r=o("TFXLMForTokenClassification"),w0r=o(" (XLM model)"),A0r=l(),V5=a("li"),mMe=a("strong"),y0r=o("xlm-roberta"),L0r=o(" \u2014 "),HU=a("a"),x0r=o("TFXLMRobertaForTokenClassification"),$0r=o(" (XLM-RoBERTa model)"),k0r=l(),X5=a("li"),fMe=a("strong"),S0r=o("xlnet"),R0r=o(" \u2014 "),UU=a("a"),P0r=o("TFXLNetForTokenClassification"),B0r=o(" (XLNet model)"),I0r=l(),F(z5.$$.fragment),dje=l(),Fc=a("h2"),W5=a("a"),gMe=a("span"),F(s9.$$.fragment),q0r=l(),hMe=a("span"),N0r=o("TFAutoModelForQuestionAnswering"),cje=l(),ir=a("div"),F(l9.$$.fragment),j0r=l(),Tc=a("p"),D0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JU=a("a"),G0r=o("from_pretrained()"),O0r=o(" class method or the "),YU=a("a"),V0r=o("from_config()"),X0r=o(` class
method.`),z0r=l(),i9=a("p"),W0r=o("This class cannot be instantiated directly using "),uMe=a("code"),Q0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),Nt=a("div"),F(d9.$$.fragment),J0r=l(),pMe=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K0r=l(),Mc=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),eAr=o("not"),oAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),rAr=o("from_pretrained()"),tAr=o(" to load the model weights."),aAr=l(),F(Q5.$$.fragment),nAr=l(),Ir=a("div"),F(c9.$$.fragment),sAr=l(),bMe=a("p"),lAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iAr=l(),mn=a("p"),dAr=o("The model class to instantiate is selected based on the "),vMe=a("code"),cAr=o("model_type"),mAr=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),fAr=o("pretrained_model_name_or_path"),gAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),hAr=o("pretrained_model_name_or_path"),uAr=o(":"),pAr=l(),ce=a("ul"),H5=a("li"),MMe=a("strong"),_Ar=o("albert"),bAr=o(" \u2014 "),ZU=a("a"),vAr=o("TFAlbertForQuestionAnswering"),FAr=o(" (ALBERT model)"),TAr=l(),U5=a("li"),EMe=a("strong"),MAr=o("bert"),EAr=o(" \u2014 "),eJ=a("a"),CAr=o("TFBertForQuestionAnswering"),wAr=o(" (BERT model)"),AAr=l(),J5=a("li"),CMe=a("strong"),yAr=o("camembert"),LAr=o(" \u2014 "),oJ=a("a"),xAr=o("TFCamembertForQuestionAnswering"),$Ar=o(" (CamemBERT model)"),kAr=l(),Y5=a("li"),wMe=a("strong"),SAr=o("convbert"),RAr=o(" \u2014 "),rJ=a("a"),PAr=o("TFConvBertForQuestionAnswering"),BAr=o(" (ConvBERT model)"),IAr=l(),K5=a("li"),AMe=a("strong"),qAr=o("deberta"),NAr=o(" \u2014 "),tJ=a("a"),jAr=o("TFDebertaForQuestionAnswering"),DAr=o(" (DeBERTa model)"),GAr=l(),Z5=a("li"),yMe=a("strong"),OAr=o("deberta-v2"),VAr=o(" \u2014 "),aJ=a("a"),XAr=o("TFDebertaV2ForQuestionAnswering"),zAr=o(" (DeBERTa-v2 model)"),WAr=l(),e3=a("li"),LMe=a("strong"),QAr=o("distilbert"),HAr=o(" \u2014 "),nJ=a("a"),UAr=o("TFDistilBertForQuestionAnswering"),JAr=o(" (DistilBERT model)"),YAr=l(),o3=a("li"),xMe=a("strong"),KAr=o("electra"),ZAr=o(" \u2014 "),sJ=a("a"),e6r=o("TFElectraForQuestionAnswering"),o6r=o(" (ELECTRA model)"),r6r=l(),r3=a("li"),$Me=a("strong"),t6r=o("flaubert"),a6r=o(" \u2014 "),lJ=a("a"),n6r=o("TFFlaubertForQuestionAnsweringSimple"),s6r=o(" (FlauBERT model)"),l6r=l(),t3=a("li"),kMe=a("strong"),i6r=o("funnel"),d6r=o(" \u2014 "),iJ=a("a"),c6r=o("TFFunnelForQuestionAnswering"),m6r=o(" (Funnel Transformer model)"),f6r=l(),a3=a("li"),SMe=a("strong"),g6r=o("gptj"),h6r=o(" \u2014 "),dJ=a("a"),u6r=o("TFGPTJForQuestionAnswering"),p6r=o(" (GPT-J model)"),_6r=l(),n3=a("li"),RMe=a("strong"),b6r=o("longformer"),v6r=o(" \u2014 "),cJ=a("a"),F6r=o("TFLongformerForQuestionAnswering"),T6r=o(" (Longformer model)"),M6r=l(),s3=a("li"),PMe=a("strong"),E6r=o("mobilebert"),C6r=o(" \u2014 "),mJ=a("a"),w6r=o("TFMobileBertForQuestionAnswering"),A6r=o(" (MobileBERT model)"),y6r=l(),l3=a("li"),BMe=a("strong"),L6r=o("mpnet"),x6r=o(" \u2014 "),fJ=a("a"),$6r=o("TFMPNetForQuestionAnswering"),k6r=o(" (MPNet model)"),S6r=l(),i3=a("li"),IMe=a("strong"),R6r=o("rembert"),P6r=o(" \u2014 "),gJ=a("a"),B6r=o("TFRemBertForQuestionAnswering"),I6r=o(" (RemBERT model)"),q6r=l(),d3=a("li"),qMe=a("strong"),N6r=o("roberta"),j6r=o(" \u2014 "),hJ=a("a"),D6r=o("TFRobertaForQuestionAnswering"),G6r=o(" (RoBERTa model)"),O6r=l(),c3=a("li"),NMe=a("strong"),V6r=o("roformer"),X6r=o(" \u2014 "),uJ=a("a"),z6r=o("TFRoFormerForQuestionAnswering"),W6r=o(" (RoFormer model)"),Q6r=l(),m3=a("li"),jMe=a("strong"),H6r=o("xlm"),U6r=o(" \u2014 "),pJ=a("a"),J6r=o("TFXLMForQuestionAnsweringSimple"),Y6r=o(" (XLM model)"),K6r=l(),f3=a("li"),DMe=a("strong"),Z6r=o("xlm-roberta"),eyr=o(" \u2014 "),_J=a("a"),oyr=o("TFXLMRobertaForQuestionAnswering"),ryr=o(" (XLM-RoBERTa model)"),tyr=l(),g3=a("li"),GMe=a("strong"),ayr=o("xlnet"),nyr=o(" \u2014 "),bJ=a("a"),syr=o("TFXLNetForQuestionAnsweringSimple"),lyr=o(" (XLNet model)"),iyr=l(),F(h3.$$.fragment),mje=l(),Ec=a("h2"),u3=a("a"),OMe=a("span"),F(m9.$$.fragment),dyr=l(),VMe=a("span"),cyr=o("TFAutoModelForVision2Seq"),fje=l(),dr=a("div"),F(f9.$$.fragment),myr=l(),Cc=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vJ=a("a"),gyr=o("from_pretrained()"),hyr=o(" class method or the "),FJ=a("a"),uyr=o("from_config()"),pyr=o(` class
method.`),_yr=l(),g9=a("p"),byr=o("This class cannot be instantiated directly using "),XMe=a("code"),vyr=o("__init__()"),Fyr=o(" (throws an error)."),Tyr=l(),jt=a("div"),F(h9.$$.fragment),Myr=l(),zMe=a("p"),Eyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cyr=l(),wc=a("p"),wyr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),Ayr=o("not"),yyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),Lyr=o("from_pretrained()"),xyr=o(" to load the model weights."),$yr=l(),F(p3.$$.fragment),kyr=l(),qr=a("div"),F(u9.$$.fragment),Syr=l(),QMe=a("p"),Ryr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pyr=l(),fn=a("p"),Byr=o("The model class to instantiate is selected based on the "),HMe=a("code"),Iyr=o("model_type"),qyr=o(` property of the config object (either
passed as an argument or loaded from `),UMe=a("code"),Nyr=o("pretrained_model_name_or_path"),jyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=a("code"),Dyr=o("pretrained_model_name_or_path"),Gyr=o(":"),Oyr=l(),YMe=a("ul"),_3=a("li"),KMe=a("strong"),Vyr=o("vision-encoder-decoder"),Xyr=o(" \u2014 "),MJ=a("a"),zyr=o("TFVisionEncoderDecoderModel"),Wyr=o(" (Vision Encoder decoder model)"),Qyr=l(),F(b3.$$.fragment),gje=l(),Ac=a("h2"),v3=a("a"),ZMe=a("span"),F(p9.$$.fragment),Hyr=l(),e4e=a("span"),Uyr=o("TFAutoModelForSpeechSeq2Seq"),hje=l(),cr=a("div"),F(_9.$$.fragment),Jyr=l(),yc=a("p"),Yyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EJ=a("a"),Kyr=o("from_pretrained()"),Zyr=o(" class method or the "),CJ=a("a"),eLr=o("from_config()"),oLr=o(` class
method.`),rLr=l(),b9=a("p"),tLr=o("This class cannot be instantiated directly using "),o4e=a("code"),aLr=o("__init__()"),nLr=o(" (throws an error)."),sLr=l(),Dt=a("div"),F(v9.$$.fragment),lLr=l(),r4e=a("p"),iLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dLr=l(),Lc=a("p"),cLr=o(`Note:
Loading a model from its configuration file does `),t4e=a("strong"),mLr=o("not"),fLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),gLr=o("from_pretrained()"),hLr=o(" to load the model weights."),uLr=l(),F(F3.$$.fragment),pLr=l(),Nr=a("div"),F(F9.$$.fragment),_Lr=l(),a4e=a("p"),bLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vLr=l(),gn=a("p"),FLr=o("The model class to instantiate is selected based on the "),n4e=a("code"),TLr=o("model_type"),MLr=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(":"),yLr=l(),i4e=a("ul"),T3=a("li"),d4e=a("strong"),LLr=o("speech_to_text"),xLr=o(" \u2014 "),AJ=a("a"),$Lr=o("TFSpeech2TextForConditionalGeneration"),kLr=o(" (Speech2Text model)"),SLr=l(),F(M3.$$.fragment),uje=l(),xc=a("h2"),E3=a("a"),c4e=a("span"),F(T9.$$.fragment),RLr=l(),m4e=a("span"),PLr=o("FlaxAutoModel"),pje=l(),mr=a("div"),F(M9.$$.fragment),BLr=l(),$c=a("p"),ILr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yJ=a("a"),qLr=o("from_pretrained()"),NLr=o(" class method or the "),LJ=a("a"),jLr=o("from_config()"),DLr=o(` class
method.`),GLr=l(),E9=a("p"),OLr=o("This class cannot be instantiated directly using "),f4e=a("code"),VLr=o("__init__()"),XLr=o(" (throws an error)."),zLr=l(),Gt=a("div"),F(C9.$$.fragment),WLr=l(),g4e=a("p"),QLr=o("Instantiates one of the base model classes of the library from a configuration."),HLr=l(),kc=a("p"),ULr=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),JLr=o("not"),YLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),KLr=o("from_pretrained()"),ZLr=o(" to load the model weights."),e8r=l(),F(C3.$$.fragment),o8r=l(),jr=a("div"),F(w9.$$.fragment),r8r=l(),u4e=a("p"),t8r=o("Instantiate one of the base model classes of the library from a pretrained model."),a8r=l(),hn=a("p"),n8r=o("The model class to instantiate is selected based on the "),p4e=a("code"),s8r=o("model_type"),l8r=o(` property of the config object (either
passed as an argument or loaded from `),_4e=a("code"),i8r=o("pretrained_model_name_or_path"),d8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),c8r=o("pretrained_model_name_or_path"),m8r=o(":"),f8r=l(),te=a("ul"),w3=a("li"),v4e=a("strong"),g8r=o("albert"),h8r=o(" \u2014 "),$J=a("a"),u8r=o("FlaxAlbertModel"),p8r=o(" (ALBERT model)"),_8r=l(),A3=a("li"),F4e=a("strong"),b8r=o("bart"),v8r=o(" \u2014 "),kJ=a("a"),F8r=o("FlaxBartModel"),T8r=o(" (BART model)"),M8r=l(),y3=a("li"),T4e=a("strong"),E8r=o("beit"),C8r=o(" \u2014 "),SJ=a("a"),w8r=o("FlaxBeitModel"),A8r=o(" (BEiT model)"),y8r=l(),L3=a("li"),M4e=a("strong"),L8r=o("bert"),x8r=o(" \u2014 "),RJ=a("a"),$8r=o("FlaxBertModel"),k8r=o(" (BERT model)"),S8r=l(),x3=a("li"),E4e=a("strong"),R8r=o("big_bird"),P8r=o(" \u2014 "),PJ=a("a"),B8r=o("FlaxBigBirdModel"),I8r=o(" (BigBird model)"),q8r=l(),$3=a("li"),C4e=a("strong"),N8r=o("blenderbot"),j8r=o(" \u2014 "),BJ=a("a"),D8r=o("FlaxBlenderbotModel"),G8r=o(" (Blenderbot model)"),O8r=l(),k3=a("li"),w4e=a("strong"),V8r=o("blenderbot-small"),X8r=o(" \u2014 "),IJ=a("a"),z8r=o("FlaxBlenderbotSmallModel"),W8r=o(" (BlenderbotSmall model)"),Q8r=l(),S3=a("li"),A4e=a("strong"),H8r=o("clip"),U8r=o(" \u2014 "),qJ=a("a"),J8r=o("FlaxCLIPModel"),Y8r=o(" (CLIP model)"),K8r=l(),R3=a("li"),y4e=a("strong"),Z8r=o("distilbert"),e7r=o(" \u2014 "),NJ=a("a"),o7r=o("FlaxDistilBertModel"),r7r=o(" (DistilBERT model)"),t7r=l(),P3=a("li"),L4e=a("strong"),a7r=o("electra"),n7r=o(" \u2014 "),jJ=a("a"),s7r=o("FlaxElectraModel"),l7r=o(" (ELECTRA model)"),i7r=l(),B3=a("li"),x4e=a("strong"),d7r=o("gpt2"),c7r=o(" \u2014 "),DJ=a("a"),m7r=o("FlaxGPT2Model"),f7r=o(" (OpenAI GPT-2 model)"),g7r=l(),I3=a("li"),$4e=a("strong"),h7r=o("gpt_neo"),u7r=o(" \u2014 "),GJ=a("a"),p7r=o("FlaxGPTNeoModel"),_7r=o(" (GPT Neo model)"),b7r=l(),q3=a("li"),k4e=a("strong"),v7r=o("gptj"),F7r=o(" \u2014 "),OJ=a("a"),T7r=o("FlaxGPTJModel"),M7r=o(" (GPT-J model)"),E7r=l(),N3=a("li"),S4e=a("strong"),C7r=o("marian"),w7r=o(" \u2014 "),VJ=a("a"),A7r=o("FlaxMarianModel"),y7r=o(" (Marian model)"),L7r=l(),j3=a("li"),R4e=a("strong"),x7r=o("mbart"),$7r=o(" \u2014 "),XJ=a("a"),k7r=o("FlaxMBartModel"),S7r=o(" (mBART model)"),R7r=l(),D3=a("li"),P4e=a("strong"),P7r=o("mt5"),B7r=o(" \u2014 "),zJ=a("a"),I7r=o("FlaxMT5Model"),q7r=o(" (mT5 model)"),N7r=l(),G3=a("li"),B4e=a("strong"),j7r=o("pegasus"),D7r=o(" \u2014 "),WJ=a("a"),G7r=o("FlaxPegasusModel"),O7r=o(" (Pegasus model)"),V7r=l(),O3=a("li"),I4e=a("strong"),X7r=o("roberta"),z7r=o(" \u2014 "),QJ=a("a"),W7r=o("FlaxRobertaModel"),Q7r=o(" (RoBERTa model)"),H7r=l(),V3=a("li"),q4e=a("strong"),U7r=o("roformer"),J7r=o(" \u2014 "),HJ=a("a"),Y7r=o("FlaxRoFormerModel"),K7r=o(" (RoFormer model)"),Z7r=l(),X3=a("li"),N4e=a("strong"),e9r=o("t5"),o9r=o(" \u2014 "),UJ=a("a"),r9r=o("FlaxT5Model"),t9r=o(" (T5 model)"),a9r=l(),z3=a("li"),j4e=a("strong"),n9r=o("vision-text-dual-encoder"),s9r=o(" \u2014 "),JJ=a("a"),l9r=o("FlaxVisionTextDualEncoderModel"),i9r=o(" (VisionTextDualEncoder model)"),d9r=l(),W3=a("li"),D4e=a("strong"),c9r=o("vit"),m9r=o(" \u2014 "),YJ=a("a"),f9r=o("FlaxViTModel"),g9r=o(" (ViT model)"),h9r=l(),Q3=a("li"),G4e=a("strong"),u9r=o("wav2vec2"),p9r=o(" \u2014 "),KJ=a("a"),_9r=o("FlaxWav2Vec2Model"),b9r=o(" (Wav2Vec2 model)"),v9r=l(),H3=a("li"),O4e=a("strong"),F9r=o("xglm"),T9r=o(" \u2014 "),ZJ=a("a"),M9r=o("FlaxXGLMModel"),E9r=o(" (XGLM model)"),C9r=l(),U3=a("li"),V4e=a("strong"),w9r=o("xlm-roberta"),A9r=o(" \u2014 "),eY=a("a"),y9r=o("FlaxXLMRobertaModel"),L9r=o(" (XLM-RoBERTa model)"),x9r=l(),F(J3.$$.fragment),_je=l(),Sc=a("h2"),Y3=a("a"),X4e=a("span"),F(A9.$$.fragment),$9r=l(),z4e=a("span"),k9r=o("FlaxAutoModelForCausalLM"),bje=l(),fr=a("div"),F(y9.$$.fragment),S9r=l(),Rc=a("p"),R9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oY=a("a"),P9r=o("from_pretrained()"),B9r=o(" class method or the "),rY=a("a"),I9r=o("from_config()"),q9r=o(` class
method.`),N9r=l(),L9=a("p"),j9r=o("This class cannot be instantiated directly using "),W4e=a("code"),D9r=o("__init__()"),G9r=o(" (throws an error)."),O9r=l(),Ot=a("div"),F(x9.$$.fragment),V9r=l(),Q4e=a("p"),X9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),z9r=l(),Pc=a("p"),W9r=o(`Note:
Loading a model from its configuration file does `),H4e=a("strong"),Q9r=o("not"),H9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),U9r=o("from_pretrained()"),J9r=o(" to load the model weights."),Y9r=l(),F(K3.$$.fragment),K9r=l(),Dr=a("div"),F($9.$$.fragment),Z9r=l(),U4e=a("p"),exr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oxr=l(),un=a("p"),rxr=o("The model class to instantiate is selected based on the "),J4e=a("code"),txr=o("model_type"),axr=o(` property of the config object (either
passed as an argument or loaded from `),Y4e=a("code"),nxr=o("pretrained_model_name_or_path"),sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(":"),dxr=l(),Re=a("ul"),Z3=a("li"),Z4e=a("strong"),cxr=o("bart"),mxr=o(" \u2014 "),aY=a("a"),fxr=o("FlaxBartForCausalLM"),gxr=o(" (BART model)"),hxr=l(),ew=a("li"),eEe=a("strong"),uxr=o("bert"),pxr=o(" \u2014 "),nY=a("a"),_xr=o("FlaxBertForCausalLM"),bxr=o(" (BERT model)"),vxr=l(),ow=a("li"),oEe=a("strong"),Fxr=o("big_bird"),Txr=o(" \u2014 "),sY=a("a"),Mxr=o("FlaxBigBirdForCausalLM"),Exr=o(" (BigBird model)"),Cxr=l(),rw=a("li"),rEe=a("strong"),wxr=o("electra"),Axr=o(" \u2014 "),lY=a("a"),yxr=o("FlaxElectraForCausalLM"),Lxr=o(" (ELECTRA model)"),xxr=l(),tw=a("li"),tEe=a("strong"),$xr=o("gpt2"),kxr=o(" \u2014 "),iY=a("a"),Sxr=o("FlaxGPT2LMHeadModel"),Rxr=o(" (OpenAI GPT-2 model)"),Pxr=l(),aw=a("li"),aEe=a("strong"),Bxr=o("gpt_neo"),Ixr=o(" \u2014 "),dY=a("a"),qxr=o("FlaxGPTNeoForCausalLM"),Nxr=o(" (GPT Neo model)"),jxr=l(),nw=a("li"),nEe=a("strong"),Dxr=o("gptj"),Gxr=o(" \u2014 "),cY=a("a"),Oxr=o("FlaxGPTJForCausalLM"),Vxr=o(" (GPT-J model)"),Xxr=l(),sw=a("li"),sEe=a("strong"),zxr=o("roberta"),Wxr=o(" \u2014 "),mY=a("a"),Qxr=o("FlaxRobertaForCausalLM"),Hxr=o(" (RoBERTa model)"),Uxr=l(),lw=a("li"),lEe=a("strong"),Jxr=o("xglm"),Yxr=o(" \u2014 "),fY=a("a"),Kxr=o("FlaxXGLMForCausalLM"),Zxr=o(" (XGLM model)"),e$r=l(),F(iw.$$.fragment),vje=l(),Bc=a("h2"),dw=a("a"),iEe=a("span"),F(k9.$$.fragment),o$r=l(),dEe=a("span"),r$r=o("FlaxAutoModelForPreTraining"),Fje=l(),gr=a("div"),F(S9.$$.fragment),t$r=l(),Ic=a("p"),a$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gY=a("a"),n$r=o("from_pretrained()"),s$r=o(" class method or the "),hY=a("a"),l$r=o("from_config()"),i$r=o(` class
method.`),d$r=l(),R9=a("p"),c$r=o("This class cannot be instantiated directly using "),cEe=a("code"),m$r=o("__init__()"),f$r=o(" (throws an error)."),g$r=l(),Vt=a("div"),F(P9.$$.fragment),h$r=l(),mEe=a("p"),u$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),p$r=l(),qc=a("p"),_$r=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),b$r=o("not"),v$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),F$r=o("from_pretrained()"),T$r=o(" to load the model weights."),M$r=l(),F(cw.$$.fragment),E$r=l(),Gr=a("div"),F(B9.$$.fragment),C$r=l(),gEe=a("p"),w$r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),A$r=l(),pn=a("p"),y$r=o("The model class to instantiate is selected based on the "),hEe=a("code"),L$r=o("model_type"),x$r=o(` property of the config object (either
passed as an argument or loaded from `),uEe=a("code"),$$r=o("pretrained_model_name_or_path"),k$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(":"),P$r=l(),Ee=a("ul"),mw=a("li"),_Ee=a("strong"),B$r=o("albert"),I$r=o(" \u2014 "),pY=a("a"),q$r=o("FlaxAlbertForPreTraining"),N$r=o(" (ALBERT model)"),j$r=l(),fw=a("li"),bEe=a("strong"),D$r=o("bart"),G$r=o(" \u2014 "),_Y=a("a"),O$r=o("FlaxBartForConditionalGeneration"),V$r=o(" (BART model)"),X$r=l(),gw=a("li"),vEe=a("strong"),z$r=o("bert"),W$r=o(" \u2014 "),bY=a("a"),Q$r=o("FlaxBertForPreTraining"),H$r=o(" (BERT model)"),U$r=l(),hw=a("li"),FEe=a("strong"),J$r=o("big_bird"),Y$r=o(" \u2014 "),vY=a("a"),K$r=o("FlaxBigBirdForPreTraining"),Z$r=o(" (BigBird model)"),ekr=l(),uw=a("li"),TEe=a("strong"),okr=o("electra"),rkr=o(" \u2014 "),FY=a("a"),tkr=o("FlaxElectraForPreTraining"),akr=o(" (ELECTRA model)"),nkr=l(),pw=a("li"),MEe=a("strong"),skr=o("mbart"),lkr=o(" \u2014 "),TY=a("a"),ikr=o("FlaxMBartForConditionalGeneration"),dkr=o(" (mBART model)"),ckr=l(),_w=a("li"),EEe=a("strong"),mkr=o("mt5"),fkr=o(" \u2014 "),MY=a("a"),gkr=o("FlaxMT5ForConditionalGeneration"),hkr=o(" (mT5 model)"),ukr=l(),bw=a("li"),CEe=a("strong"),pkr=o("roberta"),_kr=o(" \u2014 "),EY=a("a"),bkr=o("FlaxRobertaForMaskedLM"),vkr=o(" (RoBERTa model)"),Fkr=l(),vw=a("li"),wEe=a("strong"),Tkr=o("roformer"),Mkr=o(" \u2014 "),CY=a("a"),Ekr=o("FlaxRoFormerForMaskedLM"),Ckr=o(" (RoFormer model)"),wkr=l(),Fw=a("li"),AEe=a("strong"),Akr=o("t5"),ykr=o(" \u2014 "),wY=a("a"),Lkr=o("FlaxT5ForConditionalGeneration"),xkr=o(" (T5 model)"),$kr=l(),Tw=a("li"),yEe=a("strong"),kkr=o("wav2vec2"),Skr=o(" \u2014 "),AY=a("a"),Rkr=o("FlaxWav2Vec2ForPreTraining"),Pkr=o(" (Wav2Vec2 model)"),Bkr=l(),Mw=a("li"),LEe=a("strong"),Ikr=o("xlm-roberta"),qkr=o(" \u2014 "),yY=a("a"),Nkr=o("FlaxXLMRobertaForMaskedLM"),jkr=o(" (XLM-RoBERTa model)"),Dkr=l(),F(Ew.$$.fragment),Tje=l(),Nc=a("h2"),Cw=a("a"),xEe=a("span"),F(I9.$$.fragment),Gkr=l(),$Ee=a("span"),Okr=o("FlaxAutoModelForMaskedLM"),Mje=l(),hr=a("div"),F(q9.$$.fragment),Vkr=l(),jc=a("p"),Xkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LY=a("a"),zkr=o("from_pretrained()"),Wkr=o(" class method or the "),xY=a("a"),Qkr=o("from_config()"),Hkr=o(` class
method.`),Ukr=l(),N9=a("p"),Jkr=o("This class cannot be instantiated directly using "),kEe=a("code"),Ykr=o("__init__()"),Kkr=o(" (throws an error)."),Zkr=l(),Xt=a("div"),F(j9.$$.fragment),eSr=l(),SEe=a("p"),oSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rSr=l(),Dc=a("p"),tSr=o(`Note:
Loading a model from its configuration file does `),REe=a("strong"),aSr=o("not"),nSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),sSr=o("from_pretrained()"),lSr=o(" to load the model weights."),iSr=l(),F(ww.$$.fragment),dSr=l(),Or=a("div"),F(D9.$$.fragment),cSr=l(),PEe=a("p"),mSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fSr=l(),_n=a("p"),gSr=o("The model class to instantiate is selected based on the "),BEe=a("code"),hSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),IEe=a("code"),pSr=o("pretrained_model_name_or_path"),_Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),Le=a("ul"),Aw=a("li"),NEe=a("strong"),TSr=o("albert"),MSr=o(" \u2014 "),kY=a("a"),ESr=o("FlaxAlbertForMaskedLM"),CSr=o(" (ALBERT model)"),wSr=l(),yw=a("li"),jEe=a("strong"),ASr=o("bart"),ySr=o(" \u2014 "),SY=a("a"),LSr=o("FlaxBartForConditionalGeneration"),xSr=o(" (BART model)"),$Sr=l(),Lw=a("li"),DEe=a("strong"),kSr=o("bert"),SSr=o(" \u2014 "),RY=a("a"),RSr=o("FlaxBertForMaskedLM"),PSr=o(" (BERT model)"),BSr=l(),xw=a("li"),GEe=a("strong"),ISr=o("big_bird"),qSr=o(" \u2014 "),PY=a("a"),NSr=o("FlaxBigBirdForMaskedLM"),jSr=o(" (BigBird model)"),DSr=l(),$w=a("li"),OEe=a("strong"),GSr=o("distilbert"),OSr=o(" \u2014 "),BY=a("a"),VSr=o("FlaxDistilBertForMaskedLM"),XSr=o(" (DistilBERT model)"),zSr=l(),kw=a("li"),VEe=a("strong"),WSr=o("electra"),QSr=o(" \u2014 "),IY=a("a"),HSr=o("FlaxElectraForMaskedLM"),USr=o(" (ELECTRA model)"),JSr=l(),Sw=a("li"),XEe=a("strong"),YSr=o("mbart"),KSr=o(" \u2014 "),qY=a("a"),ZSr=o("FlaxMBartForConditionalGeneration"),eRr=o(" (mBART model)"),oRr=l(),Rw=a("li"),zEe=a("strong"),rRr=o("roberta"),tRr=o(" \u2014 "),NY=a("a"),aRr=o("FlaxRobertaForMaskedLM"),nRr=o(" (RoBERTa model)"),sRr=l(),Pw=a("li"),WEe=a("strong"),lRr=o("roformer"),iRr=o(" \u2014 "),jY=a("a"),dRr=o("FlaxRoFormerForMaskedLM"),cRr=o(" (RoFormer model)"),mRr=l(),Bw=a("li"),QEe=a("strong"),fRr=o("xlm-roberta"),gRr=o(" \u2014 "),DY=a("a"),hRr=o("FlaxXLMRobertaForMaskedLM"),uRr=o(" (XLM-RoBERTa model)"),pRr=l(),F(Iw.$$.fragment),Eje=l(),Gc=a("h2"),qw=a("a"),HEe=a("span"),F(G9.$$.fragment),_Rr=l(),UEe=a("span"),bRr=o("FlaxAutoModelForSeq2SeqLM"),Cje=l(),ur=a("div"),F(O9.$$.fragment),vRr=l(),Oc=a("p"),FRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GY=a("a"),TRr=o("from_pretrained()"),MRr=o(" class method or the "),OY=a("a"),ERr=o("from_config()"),CRr=o(` class
method.`),wRr=l(),V9=a("p"),ARr=o("This class cannot be instantiated directly using "),JEe=a("code"),yRr=o("__init__()"),LRr=o(" (throws an error)."),xRr=l(),zt=a("div"),F(X9.$$.fragment),$Rr=l(),YEe=a("p"),kRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SRr=l(),Vc=a("p"),RRr=o(`Note:
Loading a model from its configuration file does `),KEe=a("strong"),PRr=o("not"),BRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),IRr=o("from_pretrained()"),qRr=o(" to load the model weights."),NRr=l(),F(Nw.$$.fragment),jRr=l(),Vr=a("div"),F(z9.$$.fragment),DRr=l(),ZEe=a("p"),GRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ORr=l(),bn=a("p"),VRr=o("The model class to instantiate is selected based on the "),eCe=a("code"),XRr=o("model_type"),zRr=o(` property of the config object (either
passed as an argument or loaded from `),oCe=a("code"),WRr=o("pretrained_model_name_or_path"),QRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rCe=a("code"),HRr=o("pretrained_model_name_or_path"),URr=o(":"),JRr=l(),Pe=a("ul"),jw=a("li"),tCe=a("strong"),YRr=o("bart"),KRr=o(" \u2014 "),XY=a("a"),ZRr=o("FlaxBartForConditionalGeneration"),ePr=o(" (BART model)"),oPr=l(),Dw=a("li"),aCe=a("strong"),rPr=o("blenderbot"),tPr=o(" \u2014 "),zY=a("a"),aPr=o("FlaxBlenderbotForConditionalGeneration"),nPr=o(" (Blenderbot model)"),sPr=l(),Gw=a("li"),nCe=a("strong"),lPr=o("blenderbot-small"),iPr=o(" \u2014 "),WY=a("a"),dPr=o("FlaxBlenderbotSmallForConditionalGeneration"),cPr=o(" (BlenderbotSmall model)"),mPr=l(),Ow=a("li"),sCe=a("strong"),fPr=o("encoder-decoder"),gPr=o(" \u2014 "),QY=a("a"),hPr=o("FlaxEncoderDecoderModel"),uPr=o(" (Encoder decoder model)"),pPr=l(),Vw=a("li"),lCe=a("strong"),_Pr=o("marian"),bPr=o(" \u2014 "),HY=a("a"),vPr=o("FlaxMarianMTModel"),FPr=o(" (Marian model)"),TPr=l(),Xw=a("li"),iCe=a("strong"),MPr=o("mbart"),EPr=o(" \u2014 "),UY=a("a"),CPr=o("FlaxMBartForConditionalGeneration"),wPr=o(" (mBART model)"),APr=l(),zw=a("li"),dCe=a("strong"),yPr=o("mt5"),LPr=o(" \u2014 "),JY=a("a"),xPr=o("FlaxMT5ForConditionalGeneration"),$Pr=o(" (mT5 model)"),kPr=l(),Ww=a("li"),cCe=a("strong"),SPr=o("pegasus"),RPr=o(" \u2014 "),YY=a("a"),PPr=o("FlaxPegasusForConditionalGeneration"),BPr=o(" (Pegasus model)"),IPr=l(),Qw=a("li"),mCe=a("strong"),qPr=o("t5"),NPr=o(" \u2014 "),KY=a("a"),jPr=o("FlaxT5ForConditionalGeneration"),DPr=o(" (T5 model)"),GPr=l(),F(Hw.$$.fragment),wje=l(),Xc=a("h2"),Uw=a("a"),fCe=a("span"),F(W9.$$.fragment),OPr=l(),gCe=a("span"),VPr=o("FlaxAutoModelForSequenceClassification"),Aje=l(),pr=a("div"),F(Q9.$$.fragment),XPr=l(),zc=a("p"),zPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZY=a("a"),WPr=o("from_pretrained()"),QPr=o(" class method or the "),eK=a("a"),HPr=o("from_config()"),UPr=o(` class
method.`),JPr=l(),H9=a("p"),YPr=o("This class cannot be instantiated directly using "),hCe=a("code"),KPr=o("__init__()"),ZPr=o(" (throws an error)."),eBr=l(),Wt=a("div"),F(U9.$$.fragment),oBr=l(),uCe=a("p"),rBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tBr=l(),Wc=a("p"),aBr=o(`Note:
Loading a model from its configuration file does `),pCe=a("strong"),nBr=o("not"),sBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),lBr=o("from_pretrained()"),iBr=o(" to load the model weights."),dBr=l(),F(Jw.$$.fragment),cBr=l(),Xr=a("div"),F(J9.$$.fragment),mBr=l(),_Ce=a("p"),fBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gBr=l(),vn=a("p"),hBr=o("The model class to instantiate is selected based on the "),bCe=a("code"),uBr=o("model_type"),pBr=o(` property of the config object (either
passed as an argument or loaded from `),vCe=a("code"),_Br=o("pretrained_model_name_or_path"),bBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(":"),TBr=l(),xe=a("ul"),Yw=a("li"),TCe=a("strong"),MBr=o("albert"),EBr=o(" \u2014 "),rK=a("a"),CBr=o("FlaxAlbertForSequenceClassification"),wBr=o(" (ALBERT model)"),ABr=l(),Kw=a("li"),MCe=a("strong"),yBr=o("bart"),LBr=o(" \u2014 "),tK=a("a"),xBr=o("FlaxBartForSequenceClassification"),$Br=o(" (BART model)"),kBr=l(),Zw=a("li"),ECe=a("strong"),SBr=o("bert"),RBr=o(" \u2014 "),aK=a("a"),PBr=o("FlaxBertForSequenceClassification"),BBr=o(" (BERT model)"),IBr=l(),e0=a("li"),CCe=a("strong"),qBr=o("big_bird"),NBr=o(" \u2014 "),nK=a("a"),jBr=o("FlaxBigBirdForSequenceClassification"),DBr=o(" (BigBird model)"),GBr=l(),o0=a("li"),wCe=a("strong"),OBr=o("distilbert"),VBr=o(" \u2014 "),sK=a("a"),XBr=o("FlaxDistilBertForSequenceClassification"),zBr=o(" (DistilBERT model)"),WBr=l(),r0=a("li"),ACe=a("strong"),QBr=o("electra"),HBr=o(" \u2014 "),lK=a("a"),UBr=o("FlaxElectraForSequenceClassification"),JBr=o(" (ELECTRA model)"),YBr=l(),t0=a("li"),yCe=a("strong"),KBr=o("mbart"),ZBr=o(" \u2014 "),iK=a("a"),eIr=o("FlaxMBartForSequenceClassification"),oIr=o(" (mBART model)"),rIr=l(),a0=a("li"),LCe=a("strong"),tIr=o("roberta"),aIr=o(" \u2014 "),dK=a("a"),nIr=o("FlaxRobertaForSequenceClassification"),sIr=o(" (RoBERTa model)"),lIr=l(),n0=a("li"),xCe=a("strong"),iIr=o("roformer"),dIr=o(" \u2014 "),cK=a("a"),cIr=o("FlaxRoFormerForSequenceClassification"),mIr=o(" (RoFormer model)"),fIr=l(),s0=a("li"),$Ce=a("strong"),gIr=o("xlm-roberta"),hIr=o(" \u2014 "),mK=a("a"),uIr=o("FlaxXLMRobertaForSequenceClassification"),pIr=o(" (XLM-RoBERTa model)"),_Ir=l(),F(l0.$$.fragment),yje=l(),Qc=a("h2"),i0=a("a"),kCe=a("span"),F(Y9.$$.fragment),bIr=l(),SCe=a("span"),vIr=o("FlaxAutoModelForQuestionAnswering"),Lje=l(),_r=a("div"),F(K9.$$.fragment),FIr=l(),Hc=a("p"),TIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fK=a("a"),MIr=o("from_pretrained()"),EIr=o(" class method or the "),gK=a("a"),CIr=o("from_config()"),wIr=o(` class
method.`),AIr=l(),Z9=a("p"),yIr=o("This class cannot be instantiated directly using "),RCe=a("code"),LIr=o("__init__()"),xIr=o(" (throws an error)."),$Ir=l(),Qt=a("div"),F(ex.$$.fragment),kIr=l(),PCe=a("p"),SIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RIr=l(),Uc=a("p"),PIr=o(`Note:
Loading a model from its configuration file does `),BCe=a("strong"),BIr=o("not"),IIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),qIr=o("from_pretrained()"),NIr=o(" to load the model weights."),jIr=l(),F(d0.$$.fragment),DIr=l(),zr=a("div"),F(ox.$$.fragment),GIr=l(),ICe=a("p"),OIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VIr=l(),Fn=a("p"),XIr=o("The model class to instantiate is selected based on the "),qCe=a("code"),zIr=o("model_type"),WIr=o(` property of the config object (either
passed as an argument or loaded from `),NCe=a("code"),QIr=o("pretrained_model_name_or_path"),HIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=a("code"),UIr=o("pretrained_model_name_or_path"),JIr=o(":"),YIr=l(),$e=a("ul"),c0=a("li"),DCe=a("strong"),KIr=o("albert"),ZIr=o(" \u2014 "),uK=a("a"),eqr=o("FlaxAlbertForQuestionAnswering"),oqr=o(" (ALBERT model)"),rqr=l(),m0=a("li"),GCe=a("strong"),tqr=o("bart"),aqr=o(" \u2014 "),pK=a("a"),nqr=o("FlaxBartForQuestionAnswering"),sqr=o(" (BART model)"),lqr=l(),f0=a("li"),OCe=a("strong"),iqr=o("bert"),dqr=o(" \u2014 "),_K=a("a"),cqr=o("FlaxBertForQuestionAnswering"),mqr=o(" (BERT model)"),fqr=l(),g0=a("li"),VCe=a("strong"),gqr=o("big_bird"),hqr=o(" \u2014 "),bK=a("a"),uqr=o("FlaxBigBirdForQuestionAnswering"),pqr=o(" (BigBird model)"),_qr=l(),h0=a("li"),XCe=a("strong"),bqr=o("distilbert"),vqr=o(" \u2014 "),vK=a("a"),Fqr=o("FlaxDistilBertForQuestionAnswering"),Tqr=o(" (DistilBERT model)"),Mqr=l(),u0=a("li"),zCe=a("strong"),Eqr=o("electra"),Cqr=o(" \u2014 "),FK=a("a"),wqr=o("FlaxElectraForQuestionAnswering"),Aqr=o(" (ELECTRA model)"),yqr=l(),p0=a("li"),WCe=a("strong"),Lqr=o("mbart"),xqr=o(" \u2014 "),TK=a("a"),$qr=o("FlaxMBartForQuestionAnswering"),kqr=o(" (mBART model)"),Sqr=l(),_0=a("li"),QCe=a("strong"),Rqr=o("roberta"),Pqr=o(" \u2014 "),MK=a("a"),Bqr=o("FlaxRobertaForQuestionAnswering"),Iqr=o(" (RoBERTa model)"),qqr=l(),b0=a("li"),HCe=a("strong"),Nqr=o("roformer"),jqr=o(" \u2014 "),EK=a("a"),Dqr=o("FlaxRoFormerForQuestionAnswering"),Gqr=o(" (RoFormer model)"),Oqr=l(),v0=a("li"),UCe=a("strong"),Vqr=o("xlm-roberta"),Xqr=o(" \u2014 "),CK=a("a"),zqr=o("FlaxXLMRobertaForQuestionAnswering"),Wqr=o(" (XLM-RoBERTa model)"),Qqr=l(),F(F0.$$.fragment),xje=l(),Jc=a("h2"),T0=a("a"),JCe=a("span"),F(rx.$$.fragment),Hqr=l(),YCe=a("span"),Uqr=o("FlaxAutoModelForTokenClassification"),$je=l(),br=a("div"),F(tx.$$.fragment),Jqr=l(),Yc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wK=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),AK=a("a"),eNr=o("from_config()"),oNr=o(` class
method.`),rNr=l(),ax=a("p"),tNr=o("This class cannot be instantiated directly using "),KCe=a("code"),aNr=o("__init__()"),nNr=o(" (throws an error)."),sNr=l(),Ht=a("div"),F(nx.$$.fragment),lNr=l(),ZCe=a("p"),iNr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dNr=l(),Kc=a("p"),cNr=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),mNr=o("not"),fNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),gNr=o("from_pretrained()"),hNr=o(" to load the model weights."),uNr=l(),F(M0.$$.fragment),pNr=l(),Wr=a("div"),F(sx.$$.fragment),_Nr=l(),o5e=a("p"),bNr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vNr=l(),Tn=a("p"),FNr=o("The model class to instantiate is selected based on the "),r5e=a("code"),TNr=o("model_type"),MNr=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),ENr=o("pretrained_model_name_or_path"),CNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),wNr=o("pretrained_model_name_or_path"),ANr=o(":"),yNr=l(),De=a("ul"),E0=a("li"),n5e=a("strong"),LNr=o("albert"),xNr=o(" \u2014 "),LK=a("a"),$Nr=o("FlaxAlbertForTokenClassification"),kNr=o(" (ALBERT model)"),SNr=l(),C0=a("li"),s5e=a("strong"),RNr=o("bert"),PNr=o(" \u2014 "),xK=a("a"),BNr=o("FlaxBertForTokenClassification"),INr=o(" (BERT model)"),qNr=l(),w0=a("li"),l5e=a("strong"),NNr=o("big_bird"),jNr=o(" \u2014 "),$K=a("a"),DNr=o("FlaxBigBirdForTokenClassification"),GNr=o(" (BigBird model)"),ONr=l(),A0=a("li"),i5e=a("strong"),VNr=o("distilbert"),XNr=o(" \u2014 "),kK=a("a"),zNr=o("FlaxDistilBertForTokenClassification"),WNr=o(" (DistilBERT model)"),QNr=l(),y0=a("li"),d5e=a("strong"),HNr=o("electra"),UNr=o(" \u2014 "),SK=a("a"),JNr=o("FlaxElectraForTokenClassification"),YNr=o(" (ELECTRA model)"),KNr=l(),L0=a("li"),c5e=a("strong"),ZNr=o("roberta"),ejr=o(" \u2014 "),RK=a("a"),ojr=o("FlaxRobertaForTokenClassification"),rjr=o(" (RoBERTa model)"),tjr=l(),x0=a("li"),m5e=a("strong"),ajr=o("roformer"),njr=o(" \u2014 "),PK=a("a"),sjr=o("FlaxRoFormerForTokenClassification"),ljr=o(" (RoFormer model)"),ijr=l(),$0=a("li"),f5e=a("strong"),djr=o("xlm-roberta"),cjr=o(" \u2014 "),BK=a("a"),mjr=o("FlaxXLMRobertaForTokenClassification"),fjr=o(" (XLM-RoBERTa model)"),gjr=l(),F(k0.$$.fragment),kje=l(),Zc=a("h2"),S0=a("a"),g5e=a("span"),F(lx.$$.fragment),hjr=l(),h5e=a("span"),ujr=o("FlaxAutoModelForMultipleChoice"),Sje=l(),vr=a("div"),F(ix.$$.fragment),pjr=l(),em=a("p"),_jr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IK=a("a"),bjr=o("from_pretrained()"),vjr=o(" class method or the "),qK=a("a"),Fjr=o("from_config()"),Tjr=o(` class
method.`),Mjr=l(),dx=a("p"),Ejr=o("This class cannot be instantiated directly using "),u5e=a("code"),Cjr=o("__init__()"),wjr=o(" (throws an error)."),Ajr=l(),Ut=a("div"),F(cx.$$.fragment),yjr=l(),p5e=a("p"),Ljr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xjr=l(),om=a("p"),$jr=o(`Note:
Loading a model from its configuration file does `),_5e=a("strong"),kjr=o("not"),Sjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),Rjr=o("from_pretrained()"),Pjr=o(" to load the model weights."),Bjr=l(),F(R0.$$.fragment),Ijr=l(),Qr=a("div"),F(mx.$$.fragment),qjr=l(),b5e=a("p"),Njr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jjr=l(),Mn=a("p"),Djr=o("The model class to instantiate is selected based on the "),v5e=a("code"),Gjr=o("model_type"),Ojr=o(` property of the config object (either
passed as an argument or loaded from `),F5e=a("code"),Vjr=o("pretrained_model_name_or_path"),Xjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=a("code"),zjr=o("pretrained_model_name_or_path"),Wjr=o(":"),Qjr=l(),Ge=a("ul"),P0=a("li"),M5e=a("strong"),Hjr=o("albert"),Ujr=o(" \u2014 "),jK=a("a"),Jjr=o("FlaxAlbertForMultipleChoice"),Yjr=o(" (ALBERT model)"),Kjr=l(),B0=a("li"),E5e=a("strong"),Zjr=o("bert"),eDr=o(" \u2014 "),DK=a("a"),oDr=o("FlaxBertForMultipleChoice"),rDr=o(" (BERT model)"),tDr=l(),I0=a("li"),C5e=a("strong"),aDr=o("big_bird"),nDr=o(" \u2014 "),GK=a("a"),sDr=o("FlaxBigBirdForMultipleChoice"),lDr=o(" (BigBird model)"),iDr=l(),q0=a("li"),w5e=a("strong"),dDr=o("distilbert"),cDr=o(" \u2014 "),OK=a("a"),mDr=o("FlaxDistilBertForMultipleChoice"),fDr=o(" (DistilBERT model)"),gDr=l(),N0=a("li"),A5e=a("strong"),hDr=o("electra"),uDr=o(" \u2014 "),VK=a("a"),pDr=o("FlaxElectraForMultipleChoice"),_Dr=o(" (ELECTRA model)"),bDr=l(),j0=a("li"),y5e=a("strong"),vDr=o("roberta"),FDr=o(" \u2014 "),XK=a("a"),TDr=o("FlaxRobertaForMultipleChoice"),MDr=o(" (RoBERTa model)"),EDr=l(),D0=a("li"),L5e=a("strong"),CDr=o("roformer"),wDr=o(" \u2014 "),zK=a("a"),ADr=o("FlaxRoFormerForMultipleChoice"),yDr=o(" (RoFormer model)"),LDr=l(),G0=a("li"),x5e=a("strong"),xDr=o("xlm-roberta"),$Dr=o(" \u2014 "),WK=a("a"),kDr=o("FlaxXLMRobertaForMultipleChoice"),SDr=o(" (XLM-RoBERTa model)"),RDr=l(),F(O0.$$.fragment),Rje=l(),rm=a("h2"),V0=a("a"),$5e=a("span"),F(fx.$$.fragment),PDr=l(),k5e=a("span"),BDr=o("FlaxAutoModelForNextSentencePrediction"),Pje=l(),Fr=a("div"),F(gx.$$.fragment),IDr=l(),tm=a("p"),qDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QK=a("a"),NDr=o("from_pretrained()"),jDr=o(" class method or the "),HK=a("a"),DDr=o("from_config()"),GDr=o(` class
method.`),ODr=l(),hx=a("p"),VDr=o("This class cannot be instantiated directly using "),S5e=a("code"),XDr=o("__init__()"),zDr=o(" (throws an error)."),WDr=l(),Jt=a("div"),F(ux.$$.fragment),QDr=l(),R5e=a("p"),HDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UDr=l(),am=a("p"),JDr=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),YDr=o("not"),KDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=a("a"),ZDr=o("from_pretrained()"),eGr=o(" to load the model weights."),oGr=l(),F(X0.$$.fragment),rGr=l(),Hr=a("div"),F(px.$$.fragment),tGr=l(),B5e=a("p"),aGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nGr=l(),En=a("p"),sGr=o("The model class to instantiate is selected based on the "),I5e=a("code"),lGr=o("model_type"),iGr=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),dGr=o("pretrained_model_name_or_path"),cGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),mGr=o("pretrained_model_name_or_path"),fGr=o(":"),gGr=l(),j5e=a("ul"),z0=a("li"),D5e=a("strong"),hGr=o("bert"),uGr=o(" \u2014 "),JK=a("a"),pGr=o("FlaxBertForNextSentencePrediction"),_Gr=o(" (BERT model)"),bGr=l(),F(W0.$$.fragment),Bje=l(),nm=a("h2"),Q0=a("a"),G5e=a("span"),F(_x.$$.fragment),vGr=l(),O5e=a("span"),FGr=o("FlaxAutoModelForImageClassification"),Ije=l(),Tr=a("div"),F(bx.$$.fragment),TGr=l(),sm=a("p"),MGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YK=a("a"),EGr=o("from_pretrained()"),CGr=o(" class method or the "),KK=a("a"),wGr=o("from_config()"),AGr=o(` class
method.`),yGr=l(),vx=a("p"),LGr=o("This class cannot be instantiated directly using "),V5e=a("code"),xGr=o("__init__()"),$Gr=o(" (throws an error)."),kGr=l(),Yt=a("div"),F(Fx.$$.fragment),SGr=l(),X5e=a("p"),RGr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PGr=l(),lm=a("p"),BGr=o(`Note:
Loading a model from its configuration file does `),z5e=a("strong"),IGr=o("not"),qGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),NGr=o("from_pretrained()"),jGr=o(" to load the model weights."),DGr=l(),F(H0.$$.fragment),GGr=l(),Ur=a("div"),F(Tx.$$.fragment),OGr=l(),W5e=a("p"),VGr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XGr=l(),Cn=a("p"),zGr=o("The model class to instantiate is selected based on the "),Q5e=a("code"),WGr=o("model_type"),QGr=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),HGr=o("pretrained_model_name_or_path"),UGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=a("code"),JGr=o("pretrained_model_name_or_path"),YGr=o(":"),KGr=l(),Mx=a("ul"),U0=a("li"),J5e=a("strong"),ZGr=o("beit"),eOr=o(" \u2014 "),eZ=a("a"),oOr=o("FlaxBeitForImageClassification"),rOr=o(" (BEiT model)"),tOr=l(),J0=a("li"),Y5e=a("strong"),aOr=o("vit"),nOr=o(" \u2014 "),oZ=a("a"),sOr=o("FlaxViTForImageClassification"),lOr=o(" (ViT model)"),iOr=l(),F(Y0.$$.fragment),qje=l(),im=a("h2"),K0=a("a"),K5e=a("span"),F(Ex.$$.fragment),dOr=l(),Z5e=a("span"),cOr=o("FlaxAutoModelForVision2Seq"),Nje=l(),Mr=a("div"),F(Cx.$$.fragment),mOr=l(),dm=a("p"),fOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rZ=a("a"),gOr=o("from_pretrained()"),hOr=o(" class method or the "),tZ=a("a"),uOr=o("from_config()"),pOr=o(` class
method.`),_Or=l(),wx=a("p"),bOr=o("This class cannot be instantiated directly using "),e3e=a("code"),vOr=o("__init__()"),FOr=o(" (throws an error)."),TOr=l(),Kt=a("div"),F(Ax.$$.fragment),MOr=l(),o3e=a("p"),EOr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),COr=l(),cm=a("p"),wOr=o(`Note:
Loading a model from its configuration file does `),r3e=a("strong"),AOr=o("not"),yOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),LOr=o("from_pretrained()"),xOr=o(" to load the model weights."),$Or=l(),F(Z0.$$.fragment),kOr=l(),Jr=a("div"),F(yx.$$.fragment),SOr=l(),t3e=a("p"),ROr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),POr=l(),wn=a("p"),BOr=o("The model class to instantiate is selected based on the "),a3e=a("code"),IOr=o("model_type"),qOr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),NOr=o("pretrained_model_name_or_path"),jOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),DOr=o("pretrained_model_name_or_path"),GOr=o(":"),OOr=l(),l3e=a("ul"),eA=a("li"),i3e=a("strong"),VOr=o("vision-encoder-decoder"),XOr=o(" \u2014 "),nZ=a("a"),zOr=o("FlaxVisionEncoderDecoderModel"),WOr=o(" (Vision Encoder decoder model)"),QOr=l(),F(oA.$$.fragment),this.h()},l(m){const _=vxt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var Lx=s(u);f=n(Lx,"A",{id:!0,class:!0,href:!0});var d3e=s(f);p=n(d3e,"SPAN",{});var c3e=s(p);T(d.$$.fragment,c3e),c3e.forEach(t),d3e.forEach(t),h=i(Lx),Mo=n(Lx,"SPAN",{});var m3e=s(Mo);mi=r(m3e,"Auto Classes"),m3e.forEach(t),Lx.forEach(t),hm=i(m),rt=n(m,"P",{});var xx=s(rt);fi=r(xx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(xx,"CODE",{});var f3e=s(gi);vy=r(f3e,"from_pretrained()"),f3e.forEach(t),um=r(xx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xx.forEach(t),je=i(m),We=n(m,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var g3e=s(yn);Fy=r(g3e,"AutoConfig"),g3e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var h3e=s(xn);Ty=r(h3e,"AutoModel"),h3e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var u3e=s($n);My=r(u3e,"AutoTokenizer"),u3e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),pm=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var $x=s(Ae);G$=r($x,"will create a model that is an instance of "),_i=n($x,"A",{href:!0});var p3e=s(_i);O$=r(p3e,"BertModel"),p3e.forEach(t),V$=r($x,"."),$x.forEach(t),Eo=i(m),wa=n(m,"P",{});var kx=s(wa);X$=r(kx,"There is one class of "),_m=n(kx,"CODE",{});var _3e=s(_m);z$=r(_3e,"AutoModel"),_3e.forEach(t),QGe=r(kx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kx.forEach(t),Iqe=i(m),bi=n(m,"H2",{class:!0});var Sx=s(bi);bm=n(Sx,"A",{id:!0,class:!0,href:!0});var b3e=s(bm);Kee=n(b3e,"SPAN",{});var v3e=s(Kee);T(Ey.$$.fragment,v3e),v3e.forEach(t),b3e.forEach(t),HGe=i(Sx),Zee=n(Sx,"SPAN",{});var F3e=s(Zee);UGe=r(F3e,"Extending the Auto Classes"),F3e.forEach(t),Sx.forEach(t),qqe=i(m),kn=n(m,"P",{});var mm=s(kn);JGe=r(mm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eoe=n(mm,"CODE",{});var T3e=s(eoe);YGe=r(T3e,"NewModel"),T3e.forEach(t),KGe=r(mm,", make sure you have a "),ooe=n(mm,"CODE",{});var M3e=s(ooe);ZGe=r(M3e,"NewModelConfig"),M3e.forEach(t),eOe=r(mm,` then you can add those to the auto
classes like this:`),mm.forEach(t),Nqe=i(m),T(Cy.$$.fragment,m),jqe=i(m),W$=n(m,"P",{});var E3e=s(W$);oOe=r(E3e,"You will then be able to use the auto classes like you would usually do!"),E3e.forEach(t),Dqe=i(m),T(vm.$$.fragment,m),Gqe=i(m),vi=n(m,"H2",{class:!0});var Rx=s(vi);Fm=n(Rx,"A",{id:!0,class:!0,href:!0});var C3e=s(Fm);roe=n(C3e,"SPAN",{});var w3e=s(roe);T(wy.$$.fragment,w3e),w3e.forEach(t),C3e.forEach(t),rOe=i(Rx),toe=n(Rx,"SPAN",{});var A3e=s(toe);tOe=r(A3e,"AutoConfig"),A3e.forEach(t),Rx.forEach(t),Oqe=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T(Ay.$$.fragment,et),aOe=i(et),yy=n(et,"P",{});var Px=s(yy);nOe=r(Px,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Q$=n(Px,"A",{href:!0});var y3e=s(Q$);sOe=r(y3e,"from_pretrained()"),y3e.forEach(t),lOe=r(Px," class method."),Px.forEach(t),iOe=i(et),Ly=n(et,"P",{});var Bx=s(Ly);dOe=r(Bx,"This class cannot be instantiated directly using "),aoe=n(Bx,"CODE",{});var L3e=s(aoe);cOe=r(L3e,"__init__()"),L3e.forEach(t),mOe=r(Bx," (throws an error)."),Bx.forEach(t),fOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(xy.$$.fragment,ot),gOe=i(ot),noe=n(ot,"P",{});var x3e=s(noe);hOe=r(x3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),x3e.forEach(t),uOe=i(ot),Fi=n(ot,"P",{});var fm=s(Fi);pOe=r(fm,"The configuration class to instantiate is selected based on the "),soe=n(fm,"CODE",{});var $3e=s(soe);_Oe=r($3e,"model_type"),$3e.forEach(t),bOe=r(fm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),loe=n(fm,"CODE",{});var k3e=s(loe);vOe=r(k3e,"pretrained_model_name_or_path"),k3e.forEach(t),FOe=r(fm,":"),fm.forEach(t),TOe=i(ot),A=n(ot,"UL",{});var y=s(A);Tm=n(y,"LI",{});var rA=s(Tm);ioe=n(rA,"STRONG",{});var S3e=s(ioe);MOe=r(S3e,"albert"),S3e.forEach(t),EOe=r(rA," \u2014 "),H$=n(rA,"A",{href:!0});var R3e=s(H$);COe=r(R3e,"AlbertConfig"),R3e.forEach(t),wOe=r(rA," (ALBERT model)"),rA.forEach(t),AOe=i(y),Mm=n(y,"LI",{});var tA=s(Mm);doe=n(tA,"STRONG",{});var P3e=s(doe);yOe=r(P3e,"bart"),P3e.forEach(t),LOe=r(tA," \u2014 "),U$=n(tA,"A",{href:!0});var B3e=s(U$);xOe=r(B3e,"BartConfig"),B3e.forEach(t),$Oe=r(tA," (BART model)"),tA.forEach(t),kOe=i(y),Em=n(y,"LI",{});var aA=s(Em);coe=n(aA,"STRONG",{});var I3e=s(coe);SOe=r(I3e,"beit"),I3e.forEach(t),ROe=r(aA," \u2014 "),J$=n(aA,"A",{href:!0});var q3e=s(J$);POe=r(q3e,"BeitConfig"),q3e.forEach(t),BOe=r(aA," (BEiT model)"),aA.forEach(t),IOe=i(y),Cm=n(y,"LI",{});var nA=s(Cm);moe=n(nA,"STRONG",{});var N3e=s(moe);qOe=r(N3e,"bert"),N3e.forEach(t),NOe=r(nA," \u2014 "),Y$=n(nA,"A",{href:!0});var j3e=s(Y$);jOe=r(j3e,"BertConfig"),j3e.forEach(t),DOe=r(nA," (BERT model)"),nA.forEach(t),GOe=i(y),wm=n(y,"LI",{});var sA=s(wm);foe=n(sA,"STRONG",{});var D3e=s(foe);OOe=r(D3e,"bert-generation"),D3e.forEach(t),VOe=r(sA," \u2014 "),K$=n(sA,"A",{href:!0});var G3e=s(K$);XOe=r(G3e,"BertGenerationConfig"),G3e.forEach(t),zOe=r(sA," (Bert Generation model)"),sA.forEach(t),WOe=i(y),Am=n(y,"LI",{});var lA=s(Am);goe=n(lA,"STRONG",{});var O3e=s(goe);QOe=r(O3e,"big_bird"),O3e.forEach(t),HOe=r(lA," \u2014 "),Z$=n(lA,"A",{href:!0});var V3e=s(Z$);UOe=r(V3e,"BigBirdConfig"),V3e.forEach(t),JOe=r(lA," (BigBird model)"),lA.forEach(t),YOe=i(y),ym=n(y,"LI",{});var iA=s(ym);hoe=n(iA,"STRONG",{});var X3e=s(hoe);KOe=r(X3e,"bigbird_pegasus"),X3e.forEach(t),ZOe=r(iA," \u2014 "),ek=n(iA,"A",{href:!0});var z3e=s(ek);eVe=r(z3e,"BigBirdPegasusConfig"),z3e.forEach(t),oVe=r(iA," (BigBirdPegasus model)"),iA.forEach(t),rVe=i(y),Lm=n(y,"LI",{});var dA=s(Lm);uoe=n(dA,"STRONG",{});var W3e=s(uoe);tVe=r(W3e,"blenderbot"),W3e.forEach(t),aVe=r(dA," \u2014 "),ok=n(dA,"A",{href:!0});var Q3e=s(ok);nVe=r(Q3e,"BlenderbotConfig"),Q3e.forEach(t),sVe=r(dA," (Blenderbot model)"),dA.forEach(t),lVe=i(y),xm=n(y,"LI",{});var cA=s(xm);poe=n(cA,"STRONG",{});var H3e=s(poe);iVe=r(H3e,"blenderbot-small"),H3e.forEach(t),dVe=r(cA," \u2014 "),rk=n(cA,"A",{href:!0});var U3e=s(rk);cVe=r(U3e,"BlenderbotSmallConfig"),U3e.forEach(t),mVe=r(cA," (BlenderbotSmall model)"),cA.forEach(t),fVe=i(y),$m=n(y,"LI",{});var mA=s($m);_oe=n(mA,"STRONG",{});var J3e=s(_oe);gVe=r(J3e,"camembert"),J3e.forEach(t),hVe=r(mA," \u2014 "),tk=n(mA,"A",{href:!0});var Y3e=s(tk);uVe=r(Y3e,"CamembertConfig"),Y3e.forEach(t),pVe=r(mA," (CamemBERT model)"),mA.forEach(t),_Ve=i(y),km=n(y,"LI",{});var fA=s(km);boe=n(fA,"STRONG",{});var K3e=s(boe);bVe=r(K3e,"canine"),K3e.forEach(t),vVe=r(fA," \u2014 "),ak=n(fA,"A",{href:!0});var Z3e=s(ak);FVe=r(Z3e,"CanineConfig"),Z3e.forEach(t),TVe=r(fA," (Canine model)"),fA.forEach(t),MVe=i(y),Sm=n(y,"LI",{});var gA=s(Sm);voe=n(gA,"STRONG",{});var ewe=s(voe);EVe=r(ewe,"clip"),ewe.forEach(t),CVe=r(gA," \u2014 "),nk=n(gA,"A",{href:!0});var owe=s(nk);wVe=r(owe,"CLIPConfig"),owe.forEach(t),AVe=r(gA," (CLIP model)"),gA.forEach(t),yVe=i(y),Rm=n(y,"LI",{});var hA=s(Rm);Foe=n(hA,"STRONG",{});var rwe=s(Foe);LVe=r(rwe,"convbert"),rwe.forEach(t),xVe=r(hA," \u2014 "),sk=n(hA,"A",{href:!0});var twe=s(sk);$Ve=r(twe,"ConvBertConfig"),twe.forEach(t),kVe=r(hA," (ConvBERT model)"),hA.forEach(t),SVe=i(y),Pm=n(y,"LI",{});var uA=s(Pm);Toe=n(uA,"STRONG",{});var awe=s(Toe);RVe=r(awe,"convnext"),awe.forEach(t),PVe=r(uA," \u2014 "),lk=n(uA,"A",{href:!0});var nwe=s(lk);BVe=r(nwe,"ConvNextConfig"),nwe.forEach(t),IVe=r(uA," (ConvNext model)"),uA.forEach(t),qVe=i(y),Bm=n(y,"LI",{});var pA=s(Bm);Moe=n(pA,"STRONG",{});var swe=s(Moe);NVe=r(swe,"ctrl"),swe.forEach(t),jVe=r(pA," \u2014 "),ik=n(pA,"A",{href:!0});var lwe=s(ik);DVe=r(lwe,"CTRLConfig"),lwe.forEach(t),GVe=r(pA," (CTRL model)"),pA.forEach(t),OVe=i(y),Im=n(y,"LI",{});var _A=s(Im);Eoe=n(_A,"STRONG",{});var iwe=s(Eoe);VVe=r(iwe,"cvt"),iwe.forEach(t),XVe=r(_A," \u2014 "),dk=n(_A,"A",{href:!0});var dwe=s(dk);zVe=r(dwe,"CvtConfig"),dwe.forEach(t),WVe=r(_A," (CvT model)"),_A.forEach(t),QVe=i(y),qm=n(y,"LI",{});var bA=s(qm);Coe=n(bA,"STRONG",{});var cwe=s(Coe);HVe=r(cwe,"data2vec-audio"),cwe.forEach(t),UVe=r(bA," \u2014 "),ck=n(bA,"A",{href:!0});var mwe=s(ck);JVe=r(mwe,"Data2VecAudioConfig"),mwe.forEach(t),YVe=r(bA," (Data2VecAudio model)"),bA.forEach(t),KVe=i(y),Nm=n(y,"LI",{});var vA=s(Nm);woe=n(vA,"STRONG",{});var fwe=s(woe);ZVe=r(fwe,"data2vec-text"),fwe.forEach(t),eXe=r(vA," \u2014 "),mk=n(vA,"A",{href:!0});var gwe=s(mk);oXe=r(gwe,"Data2VecTextConfig"),gwe.forEach(t),rXe=r(vA," (Data2VecText model)"),vA.forEach(t),tXe=i(y),jm=n(y,"LI",{});var FA=s(jm);Aoe=n(FA,"STRONG",{});var hwe=s(Aoe);aXe=r(hwe,"data2vec-vision"),hwe.forEach(t),nXe=r(FA," \u2014 "),fk=n(FA,"A",{href:!0});var uwe=s(fk);sXe=r(uwe,"Data2VecVisionConfig"),uwe.forEach(t),lXe=r(FA," (Data2VecVision model)"),FA.forEach(t),iXe=i(y),Dm=n(y,"LI",{});var TA=s(Dm);yoe=n(TA,"STRONG",{});var pwe=s(yoe);dXe=r(pwe,"deberta"),pwe.forEach(t),cXe=r(TA," \u2014 "),gk=n(TA,"A",{href:!0});var _we=s(gk);mXe=r(_we,"DebertaConfig"),_we.forEach(t),fXe=r(TA," (DeBERTa model)"),TA.forEach(t),gXe=i(y),Gm=n(y,"LI",{});var MA=s(Gm);Loe=n(MA,"STRONG",{});var bwe=s(Loe);hXe=r(bwe,"deberta-v2"),bwe.forEach(t),uXe=r(MA," \u2014 "),hk=n(MA,"A",{href:!0});var vwe=s(hk);pXe=r(vwe,"DebertaV2Config"),vwe.forEach(t),_Xe=r(MA," (DeBERTa-v2 model)"),MA.forEach(t),bXe=i(y),Om=n(y,"LI",{});var EA=s(Om);xoe=n(EA,"STRONG",{});var Fwe=s(xoe);vXe=r(Fwe,"decision_transformer"),Fwe.forEach(t),FXe=r(EA," \u2014 "),uk=n(EA,"A",{href:!0});var Twe=s(uk);TXe=r(Twe,"DecisionTransformerConfig"),Twe.forEach(t),MXe=r(EA," (Decision Transformer model)"),EA.forEach(t),EXe=i(y),Vm=n(y,"LI",{});var CA=s(Vm);$oe=n(CA,"STRONG",{});var Mwe=s($oe);CXe=r(Mwe,"deit"),Mwe.forEach(t),wXe=r(CA," \u2014 "),pk=n(CA,"A",{href:!0});var UOr=s(pk);AXe=r(UOr,"DeiTConfig"),UOr.forEach(t),yXe=r(CA," (DeiT model)"),CA.forEach(t),LXe=i(y),Xm=n(y,"LI",{});var Ewe=s(Xm);koe=n(Ewe,"STRONG",{});var JOr=s(koe);xXe=r(JOr,"detr"),JOr.forEach(t),$Xe=r(Ewe," \u2014 "),_k=n(Ewe,"A",{href:!0});var YOr=s(_k);kXe=r(YOr,"DetrConfig"),YOr.forEach(t),SXe=r(Ewe," (DETR model)"),Ewe.forEach(t),RXe=i(y),zm=n(y,"LI",{});var Cwe=s(zm);Soe=n(Cwe,"STRONG",{});var KOr=s(Soe);PXe=r(KOr,"distilbert"),KOr.forEach(t),BXe=r(Cwe," \u2014 "),bk=n(Cwe,"A",{href:!0});var ZOr=s(bk);IXe=r(ZOr,"DistilBertConfig"),ZOr.forEach(t),qXe=r(Cwe," (DistilBERT model)"),Cwe.forEach(t),NXe=i(y),Wm=n(y,"LI",{});var wwe=s(Wm);Roe=n(wwe,"STRONG",{});var eVr=s(Roe);jXe=r(eVr,"dpr"),eVr.forEach(t),DXe=r(wwe," \u2014 "),vk=n(wwe,"A",{href:!0});var oVr=s(vk);GXe=r(oVr,"DPRConfig"),oVr.forEach(t),OXe=r(wwe," (DPR model)"),wwe.forEach(t),VXe=i(y),Qm=n(y,"LI",{});var Awe=s(Qm);Poe=n(Awe,"STRONG",{});var rVr=s(Poe);XXe=r(rVr,"dpt"),rVr.forEach(t),zXe=r(Awe," \u2014 "),Fk=n(Awe,"A",{href:!0});var tVr=s(Fk);WXe=r(tVr,"DPTConfig"),tVr.forEach(t),QXe=r(Awe," (DPT model)"),Awe.forEach(t),HXe=i(y),Hm=n(y,"LI",{});var ywe=s(Hm);Boe=n(ywe,"STRONG",{});var aVr=s(Boe);UXe=r(aVr,"electra"),aVr.forEach(t),JXe=r(ywe," \u2014 "),Tk=n(ywe,"A",{href:!0});var nVr=s(Tk);YXe=r(nVr,"ElectraConfig"),nVr.forEach(t),KXe=r(ywe," (ELECTRA model)"),ywe.forEach(t),ZXe=i(y),Um=n(y,"LI",{});var Lwe=s(Um);Ioe=n(Lwe,"STRONG",{});var sVr=s(Ioe);eze=r(sVr,"encoder-decoder"),sVr.forEach(t),oze=r(Lwe," \u2014 "),Mk=n(Lwe,"A",{href:!0});var lVr=s(Mk);rze=r(lVr,"EncoderDecoderConfig"),lVr.forEach(t),tze=r(Lwe," (Encoder decoder model)"),Lwe.forEach(t),aze=i(y),Jm=n(y,"LI",{});var xwe=s(Jm);qoe=n(xwe,"STRONG",{});var iVr=s(qoe);nze=r(iVr,"flaubert"),iVr.forEach(t),sze=r(xwe," \u2014 "),Ek=n(xwe,"A",{href:!0});var dVr=s(Ek);lze=r(dVr,"FlaubertConfig"),dVr.forEach(t),ize=r(xwe," (FlauBERT model)"),xwe.forEach(t),dze=i(y),Ym=n(y,"LI",{});var $we=s(Ym);Noe=n($we,"STRONG",{});var cVr=s(Noe);cze=r(cVr,"flava"),cVr.forEach(t),mze=r($we," \u2014 "),Ck=n($we,"A",{href:!0});var mVr=s(Ck);fze=r(mVr,"FlavaConfig"),mVr.forEach(t),gze=r($we," (Flava model)"),$we.forEach(t),hze=i(y),Km=n(y,"LI",{});var kwe=s(Km);joe=n(kwe,"STRONG",{});var fVr=s(joe);uze=r(fVr,"fnet"),fVr.forEach(t),pze=r(kwe," \u2014 "),wk=n(kwe,"A",{href:!0});var gVr=s(wk);_ze=r(gVr,"FNetConfig"),gVr.forEach(t),bze=r(kwe," (FNet model)"),kwe.forEach(t),vze=i(y),Zm=n(y,"LI",{});var Swe=s(Zm);Doe=n(Swe,"STRONG",{});var hVr=s(Doe);Fze=r(hVr,"fsmt"),hVr.forEach(t),Tze=r(Swe," \u2014 "),Ak=n(Swe,"A",{href:!0});var uVr=s(Ak);Mze=r(uVr,"FSMTConfig"),uVr.forEach(t),Eze=r(Swe," (FairSeq Machine-Translation model)"),Swe.forEach(t),Cze=i(y),ef=n(y,"LI",{});var Rwe=s(ef);Goe=n(Rwe,"STRONG",{});var pVr=s(Goe);wze=r(pVr,"funnel"),pVr.forEach(t),Aze=r(Rwe," \u2014 "),yk=n(Rwe,"A",{href:!0});var _Vr=s(yk);yze=r(_Vr,"FunnelConfig"),_Vr.forEach(t),Lze=r(Rwe," (Funnel Transformer model)"),Rwe.forEach(t),xze=i(y),of=n(y,"LI",{});var Pwe=s(of);Ooe=n(Pwe,"STRONG",{});var bVr=s(Ooe);$ze=r(bVr,"glpn"),bVr.forEach(t),kze=r(Pwe," \u2014 "),Lk=n(Pwe,"A",{href:!0});var vVr=s(Lk);Sze=r(vVr,"GLPNConfig"),vVr.forEach(t),Rze=r(Pwe," (GLPN model)"),Pwe.forEach(t),Pze=i(y),rf=n(y,"LI",{});var Bwe=s(rf);Voe=n(Bwe,"STRONG",{});var FVr=s(Voe);Bze=r(FVr,"gpt2"),FVr.forEach(t),Ize=r(Bwe," \u2014 "),xk=n(Bwe,"A",{href:!0});var TVr=s(xk);qze=r(TVr,"GPT2Config"),TVr.forEach(t),Nze=r(Bwe," (OpenAI GPT-2 model)"),Bwe.forEach(t),jze=i(y),tf=n(y,"LI",{});var Iwe=s(tf);Xoe=n(Iwe,"STRONG",{});var MVr=s(Xoe);Dze=r(MVr,"gpt_neo"),MVr.forEach(t),Gze=r(Iwe," \u2014 "),$k=n(Iwe,"A",{href:!0});var EVr=s($k);Oze=r(EVr,"GPTNeoConfig"),EVr.forEach(t),Vze=r(Iwe," (GPT Neo model)"),Iwe.forEach(t),Xze=i(y),af=n(y,"LI",{});var qwe=s(af);zoe=n(qwe,"STRONG",{});var CVr=s(zoe);zze=r(CVr,"gptj"),CVr.forEach(t),Wze=r(qwe," \u2014 "),kk=n(qwe,"A",{href:!0});var wVr=s(kk);Qze=r(wVr,"GPTJConfig"),wVr.forEach(t),Hze=r(qwe," (GPT-J model)"),qwe.forEach(t),Uze=i(y),nf=n(y,"LI",{});var Nwe=s(nf);Woe=n(Nwe,"STRONG",{});var AVr=s(Woe);Jze=r(AVr,"hubert"),AVr.forEach(t),Yze=r(Nwe," \u2014 "),Sk=n(Nwe,"A",{href:!0});var yVr=s(Sk);Kze=r(yVr,"HubertConfig"),yVr.forEach(t),Zze=r(Nwe," (Hubert model)"),Nwe.forEach(t),eWe=i(y),sf=n(y,"LI",{});var jwe=s(sf);Qoe=n(jwe,"STRONG",{});var LVr=s(Qoe);oWe=r(LVr,"ibert"),LVr.forEach(t),rWe=r(jwe," \u2014 "),Rk=n(jwe,"A",{href:!0});var xVr=s(Rk);tWe=r(xVr,"IBertConfig"),xVr.forEach(t),aWe=r(jwe," (I-BERT model)"),jwe.forEach(t),nWe=i(y),lf=n(y,"LI",{});var Dwe=s(lf);Hoe=n(Dwe,"STRONG",{});var $Vr=s(Hoe);sWe=r($Vr,"imagegpt"),$Vr.forEach(t),lWe=r(Dwe," \u2014 "),Pk=n(Dwe,"A",{href:!0});var kVr=s(Pk);iWe=r(kVr,"ImageGPTConfig"),kVr.forEach(t),dWe=r(Dwe," (ImageGPT model)"),Dwe.forEach(t),cWe=i(y),df=n(y,"LI",{});var Gwe=s(df);Uoe=n(Gwe,"STRONG",{});var SVr=s(Uoe);mWe=r(SVr,"layoutlm"),SVr.forEach(t),fWe=r(Gwe," \u2014 "),Bk=n(Gwe,"A",{href:!0});var RVr=s(Bk);gWe=r(RVr,"LayoutLMConfig"),RVr.forEach(t),hWe=r(Gwe," (LayoutLM model)"),Gwe.forEach(t),uWe=i(y),cf=n(y,"LI",{});var Owe=s(cf);Joe=n(Owe,"STRONG",{});var PVr=s(Joe);pWe=r(PVr,"layoutlmv2"),PVr.forEach(t),_We=r(Owe," \u2014 "),Ik=n(Owe,"A",{href:!0});var BVr=s(Ik);bWe=r(BVr,"LayoutLMv2Config"),BVr.forEach(t),vWe=r(Owe," (LayoutLMv2 model)"),Owe.forEach(t),FWe=i(y),mf=n(y,"LI",{});var Vwe=s(mf);Yoe=n(Vwe,"STRONG",{});var IVr=s(Yoe);TWe=r(IVr,"layoutlmv3"),IVr.forEach(t),MWe=r(Vwe," \u2014 "),qk=n(Vwe,"A",{href:!0});var qVr=s(qk);EWe=r(qVr,"LayoutLMv3Config"),qVr.forEach(t),CWe=r(Vwe," (LayoutLMv3 model)"),Vwe.forEach(t),wWe=i(y),ff=n(y,"LI",{});var Xwe=s(ff);Koe=n(Xwe,"STRONG",{});var NVr=s(Koe);AWe=r(NVr,"led"),NVr.forEach(t),yWe=r(Xwe," \u2014 "),Nk=n(Xwe,"A",{href:!0});var jVr=s(Nk);LWe=r(jVr,"LEDConfig"),jVr.forEach(t),xWe=r(Xwe," (LED model)"),Xwe.forEach(t),$We=i(y),gf=n(y,"LI",{});var zwe=s(gf);Zoe=n(zwe,"STRONG",{});var DVr=s(Zoe);kWe=r(DVr,"longformer"),DVr.forEach(t),SWe=r(zwe," \u2014 "),jk=n(zwe,"A",{href:!0});var GVr=s(jk);RWe=r(GVr,"LongformerConfig"),GVr.forEach(t),PWe=r(zwe," (Longformer model)"),zwe.forEach(t),BWe=i(y),hf=n(y,"LI",{});var Wwe=s(hf);ere=n(Wwe,"STRONG",{});var OVr=s(ere);IWe=r(OVr,"luke"),OVr.forEach(t),qWe=r(Wwe," \u2014 "),Dk=n(Wwe,"A",{href:!0});var VVr=s(Dk);NWe=r(VVr,"LukeConfig"),VVr.forEach(t),jWe=r(Wwe," (LUKE model)"),Wwe.forEach(t),DWe=i(y),uf=n(y,"LI",{});var Qwe=s(uf);ore=n(Qwe,"STRONG",{});var XVr=s(ore);GWe=r(XVr,"lxmert"),XVr.forEach(t),OWe=r(Qwe," \u2014 "),Gk=n(Qwe,"A",{href:!0});var zVr=s(Gk);VWe=r(zVr,"LxmertConfig"),zVr.forEach(t),XWe=r(Qwe," (LXMERT model)"),Qwe.forEach(t),zWe=i(y),pf=n(y,"LI",{});var Hwe=s(pf);rre=n(Hwe,"STRONG",{});var WVr=s(rre);WWe=r(WVr,"m2m_100"),WVr.forEach(t),QWe=r(Hwe," \u2014 "),Ok=n(Hwe,"A",{href:!0});var QVr=s(Ok);HWe=r(QVr,"M2M100Config"),QVr.forEach(t),UWe=r(Hwe," (M2M100 model)"),Hwe.forEach(t),JWe=i(y),_f=n(y,"LI",{});var Uwe=s(_f);tre=n(Uwe,"STRONG",{});var HVr=s(tre);YWe=r(HVr,"marian"),HVr.forEach(t),KWe=r(Uwe," \u2014 "),Vk=n(Uwe,"A",{href:!0});var UVr=s(Vk);ZWe=r(UVr,"MarianConfig"),UVr.forEach(t),eQe=r(Uwe," (Marian model)"),Uwe.forEach(t),oQe=i(y),bf=n(y,"LI",{});var Jwe=s(bf);are=n(Jwe,"STRONG",{});var JVr=s(are);rQe=r(JVr,"maskformer"),JVr.forEach(t),tQe=r(Jwe," \u2014 "),Xk=n(Jwe,"A",{href:!0});var YVr=s(Xk);aQe=r(YVr,"MaskFormerConfig"),YVr.forEach(t),nQe=r(Jwe," (MaskFormer model)"),Jwe.forEach(t),sQe=i(y),vf=n(y,"LI",{});var Ywe=s(vf);nre=n(Ywe,"STRONG",{});var KVr=s(nre);lQe=r(KVr,"mbart"),KVr.forEach(t),iQe=r(Ywe," \u2014 "),zk=n(Ywe,"A",{href:!0});var ZVr=s(zk);dQe=r(ZVr,"MBartConfig"),ZVr.forEach(t),cQe=r(Ywe," (mBART model)"),Ywe.forEach(t),mQe=i(y),Ff=n(y,"LI",{});var Kwe=s(Ff);sre=n(Kwe,"STRONG",{});var eXr=s(sre);fQe=r(eXr,"megatron-bert"),eXr.forEach(t),gQe=r(Kwe," \u2014 "),Wk=n(Kwe,"A",{href:!0});var oXr=s(Wk);hQe=r(oXr,"MegatronBertConfig"),oXr.forEach(t),uQe=r(Kwe," (MegatronBert model)"),Kwe.forEach(t),pQe=i(y),Tf=n(y,"LI",{});var Zwe=s(Tf);lre=n(Zwe,"STRONG",{});var rXr=s(lre);_Qe=r(rXr,"mobilebert"),rXr.forEach(t),bQe=r(Zwe," \u2014 "),Qk=n(Zwe,"A",{href:!0});var tXr=s(Qk);vQe=r(tXr,"MobileBertConfig"),tXr.forEach(t),FQe=r(Zwe," (MobileBERT model)"),Zwe.forEach(t),TQe=i(y),Mf=n(y,"LI",{});var e0e=s(Mf);ire=n(e0e,"STRONG",{});var aXr=s(ire);MQe=r(aXr,"mpnet"),aXr.forEach(t),EQe=r(e0e," \u2014 "),Hk=n(e0e,"A",{href:!0});var nXr=s(Hk);CQe=r(nXr,"MPNetConfig"),nXr.forEach(t),wQe=r(e0e," (MPNet model)"),e0e.forEach(t),AQe=i(y),Ef=n(y,"LI",{});var o0e=s(Ef);dre=n(o0e,"STRONG",{});var sXr=s(dre);yQe=r(sXr,"mt5"),sXr.forEach(t),LQe=r(o0e," \u2014 "),Uk=n(o0e,"A",{href:!0});var lXr=s(Uk);xQe=r(lXr,"MT5Config"),lXr.forEach(t),$Qe=r(o0e," (mT5 model)"),o0e.forEach(t),kQe=i(y),Cf=n(y,"LI",{});var r0e=s(Cf);cre=n(r0e,"STRONG",{});var iXr=s(cre);SQe=r(iXr,"nystromformer"),iXr.forEach(t),RQe=r(r0e," \u2014 "),Jk=n(r0e,"A",{href:!0});var dXr=s(Jk);PQe=r(dXr,"NystromformerConfig"),dXr.forEach(t),BQe=r(r0e," (Nystromformer model)"),r0e.forEach(t),IQe=i(y),wf=n(y,"LI",{});var t0e=s(wf);mre=n(t0e,"STRONG",{});var cXr=s(mre);qQe=r(cXr,"openai-gpt"),cXr.forEach(t),NQe=r(t0e," \u2014 "),Yk=n(t0e,"A",{href:!0});var mXr=s(Yk);jQe=r(mXr,"OpenAIGPTConfig"),mXr.forEach(t),DQe=r(t0e," (OpenAI GPT model)"),t0e.forEach(t),GQe=i(y),Af=n(y,"LI",{});var a0e=s(Af);fre=n(a0e,"STRONG",{});var fXr=s(fre);OQe=r(fXr,"opt"),fXr.forEach(t),VQe=r(a0e," \u2014 "),Kk=n(a0e,"A",{href:!0});var gXr=s(Kk);XQe=r(gXr,"OPTConfig"),gXr.forEach(t),zQe=r(a0e," (OPT model)"),a0e.forEach(t),WQe=i(y),yf=n(y,"LI",{});var n0e=s(yf);gre=n(n0e,"STRONG",{});var hXr=s(gre);QQe=r(hXr,"pegasus"),hXr.forEach(t),HQe=r(n0e," \u2014 "),Zk=n(n0e,"A",{href:!0});var uXr=s(Zk);UQe=r(uXr,"PegasusConfig"),uXr.forEach(t),JQe=r(n0e," (Pegasus model)"),n0e.forEach(t),YQe=i(y),Lf=n(y,"LI",{});var s0e=s(Lf);hre=n(s0e,"STRONG",{});var pXr=s(hre);KQe=r(pXr,"perceiver"),pXr.forEach(t),ZQe=r(s0e," \u2014 "),eS=n(s0e,"A",{href:!0});var _Xr=s(eS);eHe=r(_Xr,"PerceiverConfig"),_Xr.forEach(t),oHe=r(s0e," (Perceiver model)"),s0e.forEach(t),rHe=i(y),xf=n(y,"LI",{});var l0e=s(xf);ure=n(l0e,"STRONG",{});var bXr=s(ure);tHe=r(bXr,"plbart"),bXr.forEach(t),aHe=r(l0e," \u2014 "),oS=n(l0e,"A",{href:!0});var vXr=s(oS);nHe=r(vXr,"PLBartConfig"),vXr.forEach(t),sHe=r(l0e," (PLBart model)"),l0e.forEach(t),lHe=i(y),$f=n(y,"LI",{});var i0e=s($f);pre=n(i0e,"STRONG",{});var FXr=s(pre);iHe=r(FXr,"poolformer"),FXr.forEach(t),dHe=r(i0e," \u2014 "),rS=n(i0e,"A",{href:!0});var TXr=s(rS);cHe=r(TXr,"PoolFormerConfig"),TXr.forEach(t),mHe=r(i0e," (PoolFormer model)"),i0e.forEach(t),fHe=i(y),kf=n(y,"LI",{});var d0e=s(kf);_re=n(d0e,"STRONG",{});var MXr=s(_re);gHe=r(MXr,"prophetnet"),MXr.forEach(t),hHe=r(d0e," \u2014 "),tS=n(d0e,"A",{href:!0});var EXr=s(tS);uHe=r(EXr,"ProphetNetConfig"),EXr.forEach(t),pHe=r(d0e," (ProphetNet model)"),d0e.forEach(t),_He=i(y),Sf=n(y,"LI",{});var c0e=s(Sf);bre=n(c0e,"STRONG",{});var CXr=s(bre);bHe=r(CXr,"qdqbert"),CXr.forEach(t),vHe=r(c0e," \u2014 "),aS=n(c0e,"A",{href:!0});var wXr=s(aS);FHe=r(wXr,"QDQBertConfig"),wXr.forEach(t),THe=r(c0e," (QDQBert model)"),c0e.forEach(t),MHe=i(y),Rf=n(y,"LI",{});var m0e=s(Rf);vre=n(m0e,"STRONG",{});var AXr=s(vre);EHe=r(AXr,"rag"),AXr.forEach(t),CHe=r(m0e," \u2014 "),nS=n(m0e,"A",{href:!0});var yXr=s(nS);wHe=r(yXr,"RagConfig"),yXr.forEach(t),AHe=r(m0e," (RAG model)"),m0e.forEach(t),yHe=i(y),Pf=n(y,"LI",{});var f0e=s(Pf);Fre=n(f0e,"STRONG",{});var LXr=s(Fre);LHe=r(LXr,"realm"),LXr.forEach(t),xHe=r(f0e," \u2014 "),sS=n(f0e,"A",{href:!0});var xXr=s(sS);$He=r(xXr,"RealmConfig"),xXr.forEach(t),kHe=r(f0e," (Realm model)"),f0e.forEach(t),SHe=i(y),Bf=n(y,"LI",{});var g0e=s(Bf);Tre=n(g0e,"STRONG",{});var $Xr=s(Tre);RHe=r($Xr,"reformer"),$Xr.forEach(t),PHe=r(g0e," \u2014 "),lS=n(g0e,"A",{href:!0});var kXr=s(lS);BHe=r(kXr,"ReformerConfig"),kXr.forEach(t),IHe=r(g0e," (Reformer model)"),g0e.forEach(t),qHe=i(y),If=n(y,"LI",{});var h0e=s(If);Mre=n(h0e,"STRONG",{});var SXr=s(Mre);NHe=r(SXr,"regnet"),SXr.forEach(t),jHe=r(h0e," \u2014 "),iS=n(h0e,"A",{href:!0});var RXr=s(iS);DHe=r(RXr,"RegNetConfig"),RXr.forEach(t),GHe=r(h0e," (RegNet model)"),h0e.forEach(t),OHe=i(y),qf=n(y,"LI",{});var u0e=s(qf);Ere=n(u0e,"STRONG",{});var PXr=s(Ere);VHe=r(PXr,"rembert"),PXr.forEach(t),XHe=r(u0e," \u2014 "),dS=n(u0e,"A",{href:!0});var BXr=s(dS);zHe=r(BXr,"RemBertConfig"),BXr.forEach(t),WHe=r(u0e," (RemBERT model)"),u0e.forEach(t),QHe=i(y),Nf=n(y,"LI",{});var p0e=s(Nf);Cre=n(p0e,"STRONG",{});var IXr=s(Cre);HHe=r(IXr,"resnet"),IXr.forEach(t),UHe=r(p0e," \u2014 "),cS=n(p0e,"A",{href:!0});var qXr=s(cS);JHe=r(qXr,"ResNetConfig"),qXr.forEach(t),YHe=r(p0e," (ResNet model)"),p0e.forEach(t),KHe=i(y),jf=n(y,"LI",{});var _0e=s(jf);wre=n(_0e,"STRONG",{});var NXr=s(wre);ZHe=r(NXr,"retribert"),NXr.forEach(t),eUe=r(_0e," \u2014 "),mS=n(_0e,"A",{href:!0});var jXr=s(mS);oUe=r(jXr,"RetriBertConfig"),jXr.forEach(t),rUe=r(_0e," (RetriBERT model)"),_0e.forEach(t),tUe=i(y),Df=n(y,"LI",{});var b0e=s(Df);Are=n(b0e,"STRONG",{});var DXr=s(Are);aUe=r(DXr,"roberta"),DXr.forEach(t),nUe=r(b0e," \u2014 "),fS=n(b0e,"A",{href:!0});var GXr=s(fS);sUe=r(GXr,"RobertaConfig"),GXr.forEach(t),lUe=r(b0e," (RoBERTa model)"),b0e.forEach(t),iUe=i(y),Gf=n(y,"LI",{});var v0e=s(Gf);yre=n(v0e,"STRONG",{});var OXr=s(yre);dUe=r(OXr,"roformer"),OXr.forEach(t),cUe=r(v0e," \u2014 "),gS=n(v0e,"A",{href:!0});var VXr=s(gS);mUe=r(VXr,"RoFormerConfig"),VXr.forEach(t),fUe=r(v0e," (RoFormer model)"),v0e.forEach(t),gUe=i(y),Of=n(y,"LI",{});var F0e=s(Of);Lre=n(F0e,"STRONG",{});var XXr=s(Lre);hUe=r(XXr,"segformer"),XXr.forEach(t),uUe=r(F0e," \u2014 "),hS=n(F0e,"A",{href:!0});var zXr=s(hS);pUe=r(zXr,"SegformerConfig"),zXr.forEach(t),_Ue=r(F0e," (SegFormer model)"),F0e.forEach(t),bUe=i(y),Vf=n(y,"LI",{});var T0e=s(Vf);xre=n(T0e,"STRONG",{});var WXr=s(xre);vUe=r(WXr,"sew"),WXr.forEach(t),FUe=r(T0e," \u2014 "),uS=n(T0e,"A",{href:!0});var QXr=s(uS);TUe=r(QXr,"SEWConfig"),QXr.forEach(t),MUe=r(T0e," (SEW model)"),T0e.forEach(t),EUe=i(y),Xf=n(y,"LI",{});var M0e=s(Xf);$re=n(M0e,"STRONG",{});var HXr=s($re);CUe=r(HXr,"sew-d"),HXr.forEach(t),wUe=r(M0e," \u2014 "),pS=n(M0e,"A",{href:!0});var UXr=s(pS);AUe=r(UXr,"SEWDConfig"),UXr.forEach(t),yUe=r(M0e," (SEW-D model)"),M0e.forEach(t),LUe=i(y),zf=n(y,"LI",{});var E0e=s(zf);kre=n(E0e,"STRONG",{});var JXr=s(kre);xUe=r(JXr,"speech-encoder-decoder"),JXr.forEach(t),$Ue=r(E0e," \u2014 "),_S=n(E0e,"A",{href:!0});var YXr=s(_S);kUe=r(YXr,"SpeechEncoderDecoderConfig"),YXr.forEach(t),SUe=r(E0e," (Speech Encoder decoder model)"),E0e.forEach(t),RUe=i(y),Wf=n(y,"LI",{});var C0e=s(Wf);Sre=n(C0e,"STRONG",{});var KXr=s(Sre);PUe=r(KXr,"speech_to_text"),KXr.forEach(t),BUe=r(C0e," \u2014 "),bS=n(C0e,"A",{href:!0});var ZXr=s(bS);IUe=r(ZXr,"Speech2TextConfig"),ZXr.forEach(t),qUe=r(C0e," (Speech2Text model)"),C0e.forEach(t),NUe=i(y),Qf=n(y,"LI",{});var w0e=s(Qf);Rre=n(w0e,"STRONG",{});var ezr=s(Rre);jUe=r(ezr,"speech_to_text_2"),ezr.forEach(t),DUe=r(w0e," \u2014 "),vS=n(w0e,"A",{href:!0});var ozr=s(vS);GUe=r(ozr,"Speech2Text2Config"),ozr.forEach(t),OUe=r(w0e," (Speech2Text2 model)"),w0e.forEach(t),VUe=i(y),Hf=n(y,"LI",{});var A0e=s(Hf);Pre=n(A0e,"STRONG",{});var rzr=s(Pre);XUe=r(rzr,"splinter"),rzr.forEach(t),zUe=r(A0e," \u2014 "),FS=n(A0e,"A",{href:!0});var tzr=s(FS);WUe=r(tzr,"SplinterConfig"),tzr.forEach(t),QUe=r(A0e," (Splinter model)"),A0e.forEach(t),HUe=i(y),Uf=n(y,"LI",{});var y0e=s(Uf);Bre=n(y0e,"STRONG",{});var azr=s(Bre);UUe=r(azr,"squeezebert"),azr.forEach(t),JUe=r(y0e," \u2014 "),TS=n(y0e,"A",{href:!0});var nzr=s(TS);YUe=r(nzr,"SqueezeBertConfig"),nzr.forEach(t),KUe=r(y0e," (SqueezeBERT model)"),y0e.forEach(t),ZUe=i(y),Jf=n(y,"LI",{});var L0e=s(Jf);Ire=n(L0e,"STRONG",{});var szr=s(Ire);eJe=r(szr,"swin"),szr.forEach(t),oJe=r(L0e," \u2014 "),MS=n(L0e,"A",{href:!0});var lzr=s(MS);rJe=r(lzr,"SwinConfig"),lzr.forEach(t),tJe=r(L0e," (Swin model)"),L0e.forEach(t),aJe=i(y),Yf=n(y,"LI",{});var x0e=s(Yf);qre=n(x0e,"STRONG",{});var izr=s(qre);nJe=r(izr,"t5"),izr.forEach(t),sJe=r(x0e," \u2014 "),ES=n(x0e,"A",{href:!0});var dzr=s(ES);lJe=r(dzr,"T5Config"),dzr.forEach(t),iJe=r(x0e," (T5 model)"),x0e.forEach(t),dJe=i(y),Kf=n(y,"LI",{});var $0e=s(Kf);Nre=n($0e,"STRONG",{});var czr=s(Nre);cJe=r(czr,"tapas"),czr.forEach(t),mJe=r($0e," \u2014 "),CS=n($0e,"A",{href:!0});var mzr=s(CS);fJe=r(mzr,"TapasConfig"),mzr.forEach(t),gJe=r($0e," (TAPAS model)"),$0e.forEach(t),hJe=i(y),Zf=n(y,"LI",{});var k0e=s(Zf);jre=n(k0e,"STRONG",{});var fzr=s(jre);uJe=r(fzr,"trajectory_transformer"),fzr.forEach(t),pJe=r(k0e," \u2014 "),wS=n(k0e,"A",{href:!0});var gzr=s(wS);_Je=r(gzr,"TrajectoryTransformerConfig"),gzr.forEach(t),bJe=r(k0e," (Trajectory Transformer model)"),k0e.forEach(t),vJe=i(y),eg=n(y,"LI",{});var S0e=s(eg);Dre=n(S0e,"STRONG",{});var hzr=s(Dre);FJe=r(hzr,"transfo-xl"),hzr.forEach(t),TJe=r(S0e," \u2014 "),AS=n(S0e,"A",{href:!0});var uzr=s(AS);MJe=r(uzr,"TransfoXLConfig"),uzr.forEach(t),EJe=r(S0e," (Transformer-XL model)"),S0e.forEach(t),CJe=i(y),og=n(y,"LI",{});var R0e=s(og);Gre=n(R0e,"STRONG",{});var pzr=s(Gre);wJe=r(pzr,"trocr"),pzr.forEach(t),AJe=r(R0e," \u2014 "),yS=n(R0e,"A",{href:!0});var _zr=s(yS);yJe=r(_zr,"TrOCRConfig"),_zr.forEach(t),LJe=r(R0e," (TrOCR model)"),R0e.forEach(t),xJe=i(y),rg=n(y,"LI",{});var P0e=s(rg);Ore=n(P0e,"STRONG",{});var bzr=s(Ore);$Je=r(bzr,"unispeech"),bzr.forEach(t),kJe=r(P0e," \u2014 "),LS=n(P0e,"A",{href:!0});var vzr=s(LS);SJe=r(vzr,"UniSpeechConfig"),vzr.forEach(t),RJe=r(P0e," (UniSpeech model)"),P0e.forEach(t),PJe=i(y),tg=n(y,"LI",{});var B0e=s(tg);Vre=n(B0e,"STRONG",{});var Fzr=s(Vre);BJe=r(Fzr,"unispeech-sat"),Fzr.forEach(t),IJe=r(B0e," \u2014 "),xS=n(B0e,"A",{href:!0});var Tzr=s(xS);qJe=r(Tzr,"UniSpeechSatConfig"),Tzr.forEach(t),NJe=r(B0e," (UniSpeechSat model)"),B0e.forEach(t),jJe=i(y),ag=n(y,"LI",{});var I0e=s(ag);Xre=n(I0e,"STRONG",{});var Mzr=s(Xre);DJe=r(Mzr,"van"),Mzr.forEach(t),GJe=r(I0e," \u2014 "),$S=n(I0e,"A",{href:!0});var Ezr=s($S);OJe=r(Ezr,"VanConfig"),Ezr.forEach(t),VJe=r(I0e," (VAN model)"),I0e.forEach(t),XJe=i(y),ng=n(y,"LI",{});var q0e=s(ng);zre=n(q0e,"STRONG",{});var Czr=s(zre);zJe=r(Czr,"vilt"),Czr.forEach(t),WJe=r(q0e," \u2014 "),kS=n(q0e,"A",{href:!0});var wzr=s(kS);QJe=r(wzr,"ViltConfig"),wzr.forEach(t),HJe=r(q0e," (ViLT model)"),q0e.forEach(t),UJe=i(y),sg=n(y,"LI",{});var N0e=s(sg);Wre=n(N0e,"STRONG",{});var Azr=s(Wre);JJe=r(Azr,"vision-encoder-decoder"),Azr.forEach(t),YJe=r(N0e," \u2014 "),SS=n(N0e,"A",{href:!0});var yzr=s(SS);KJe=r(yzr,"VisionEncoderDecoderConfig"),yzr.forEach(t),ZJe=r(N0e," (Vision Encoder decoder model)"),N0e.forEach(t),eYe=i(y),lg=n(y,"LI",{});var j0e=s(lg);Qre=n(j0e,"STRONG",{});var Lzr=s(Qre);oYe=r(Lzr,"vision-text-dual-encoder"),Lzr.forEach(t),rYe=r(j0e," \u2014 "),RS=n(j0e,"A",{href:!0});var xzr=s(RS);tYe=r(xzr,"VisionTextDualEncoderConfig"),xzr.forEach(t),aYe=r(j0e," (VisionTextDualEncoder model)"),j0e.forEach(t),nYe=i(y),ig=n(y,"LI",{});var D0e=s(ig);Hre=n(D0e,"STRONG",{});var $zr=s(Hre);sYe=r($zr,"visual_bert"),$zr.forEach(t),lYe=r(D0e," \u2014 "),PS=n(D0e,"A",{href:!0});var kzr=s(PS);iYe=r(kzr,"VisualBertConfig"),kzr.forEach(t),dYe=r(D0e," (VisualBert model)"),D0e.forEach(t),cYe=i(y),dg=n(y,"LI",{});var G0e=s(dg);Ure=n(G0e,"STRONG",{});var Szr=s(Ure);mYe=r(Szr,"vit"),Szr.forEach(t),fYe=r(G0e," \u2014 "),BS=n(G0e,"A",{href:!0});var Rzr=s(BS);gYe=r(Rzr,"ViTConfig"),Rzr.forEach(t),hYe=r(G0e," (ViT model)"),G0e.forEach(t),uYe=i(y),cg=n(y,"LI",{});var O0e=s(cg);Jre=n(O0e,"STRONG",{});var Pzr=s(Jre);pYe=r(Pzr,"vit_mae"),Pzr.forEach(t),_Ye=r(O0e," \u2014 "),IS=n(O0e,"A",{href:!0});var Bzr=s(IS);bYe=r(Bzr,"ViTMAEConfig"),Bzr.forEach(t),vYe=r(O0e," (ViTMAE model)"),O0e.forEach(t),FYe=i(y),mg=n(y,"LI",{});var V0e=s(mg);Yre=n(V0e,"STRONG",{});var Izr=s(Yre);TYe=r(Izr,"wav2vec2"),Izr.forEach(t),MYe=r(V0e," \u2014 "),qS=n(V0e,"A",{href:!0});var qzr=s(qS);EYe=r(qzr,"Wav2Vec2Config"),qzr.forEach(t),CYe=r(V0e," (Wav2Vec2 model)"),V0e.forEach(t),wYe=i(y),fg=n(y,"LI",{});var X0e=s(fg);Kre=n(X0e,"STRONG",{});var Nzr=s(Kre);AYe=r(Nzr,"wav2vec2-conformer"),Nzr.forEach(t),yYe=r(X0e," \u2014 "),NS=n(X0e,"A",{href:!0});var jzr=s(NS);LYe=r(jzr,"Wav2Vec2ConformerConfig"),jzr.forEach(t),xYe=r(X0e," (Wav2Vec2-Conformer model)"),X0e.forEach(t),$Ye=i(y),gg=n(y,"LI",{});var z0e=s(gg);Zre=n(z0e,"STRONG",{});var Dzr=s(Zre);kYe=r(Dzr,"wavlm"),Dzr.forEach(t),SYe=r(z0e," \u2014 "),jS=n(z0e,"A",{href:!0});var Gzr=s(jS);RYe=r(Gzr,"WavLMConfig"),Gzr.forEach(t),PYe=r(z0e," (WavLM model)"),z0e.forEach(t),BYe=i(y),hg=n(y,"LI",{});var W0e=s(hg);ete=n(W0e,"STRONG",{});var Ozr=s(ete);IYe=r(Ozr,"xglm"),Ozr.forEach(t),qYe=r(W0e," \u2014 "),DS=n(W0e,"A",{href:!0});var Vzr=s(DS);NYe=r(Vzr,"XGLMConfig"),Vzr.forEach(t),jYe=r(W0e," (XGLM model)"),W0e.forEach(t),DYe=i(y),ug=n(y,"LI",{});var Q0e=s(ug);ote=n(Q0e,"STRONG",{});var Xzr=s(ote);GYe=r(Xzr,"xlm"),Xzr.forEach(t),OYe=r(Q0e," \u2014 "),GS=n(Q0e,"A",{href:!0});var zzr=s(GS);VYe=r(zzr,"XLMConfig"),zzr.forEach(t),XYe=r(Q0e," (XLM model)"),Q0e.forEach(t),zYe=i(y),pg=n(y,"LI",{});var H0e=s(pg);rte=n(H0e,"STRONG",{});var Wzr=s(rte);WYe=r(Wzr,"xlm-prophetnet"),Wzr.forEach(t),QYe=r(H0e," \u2014 "),OS=n(H0e,"A",{href:!0});var Qzr=s(OS);HYe=r(Qzr,"XLMProphetNetConfig"),Qzr.forEach(t),UYe=r(H0e," (XLMProphetNet model)"),H0e.forEach(t),JYe=i(y),_g=n(y,"LI",{});var U0e=s(_g);tte=n(U0e,"STRONG",{});var Hzr=s(tte);YYe=r(Hzr,"xlm-roberta"),Hzr.forEach(t),KYe=r(U0e," \u2014 "),VS=n(U0e,"A",{href:!0});var Uzr=s(VS);ZYe=r(Uzr,"XLMRobertaConfig"),Uzr.forEach(t),eKe=r(U0e," (XLM-RoBERTa model)"),U0e.forEach(t),oKe=i(y),bg=n(y,"LI",{});var J0e=s(bg);ate=n(J0e,"STRONG",{});var Jzr=s(ate);rKe=r(Jzr,"xlm-roberta-xl"),Jzr.forEach(t),tKe=r(J0e," \u2014 "),XS=n(J0e,"A",{href:!0});var Yzr=s(XS);aKe=r(Yzr,"XLMRobertaXLConfig"),Yzr.forEach(t),nKe=r(J0e," (XLM-RoBERTa-XL model)"),J0e.forEach(t),sKe=i(y),vg=n(y,"LI",{});var Y0e=s(vg);nte=n(Y0e,"STRONG",{});var Kzr=s(nte);lKe=r(Kzr,"xlnet"),Kzr.forEach(t),iKe=r(Y0e," \u2014 "),zS=n(Y0e,"A",{href:!0});var Zzr=s(zS);dKe=r(Zzr,"XLNetConfig"),Zzr.forEach(t),cKe=r(Y0e," (XLNet model)"),Y0e.forEach(t),mKe=i(y),Fg=n(y,"LI",{});var K0e=s(Fg);ste=n(K0e,"STRONG",{});var eWr=s(ste);fKe=r(eWr,"yolos"),eWr.forEach(t),gKe=r(K0e," \u2014 "),WS=n(K0e,"A",{href:!0});var oWr=s(WS);hKe=r(oWr,"YolosConfig"),oWr.forEach(t),uKe=r(K0e," (YOLOS model)"),K0e.forEach(t),pKe=i(y),Tg=n(y,"LI",{});var Z0e=s(Tg);lte=n(Z0e,"STRONG",{});var rWr=s(lte);_Ke=r(rWr,"yoso"),rWr.forEach(t),bKe=r(Z0e," \u2014 "),QS=n(Z0e,"A",{href:!0});var tWr=s(QS);vKe=r(tWr,"YosoConfig"),tWr.forEach(t),FKe=r(Z0e," (YOSO model)"),Z0e.forEach(t),y.forEach(t),TKe=i(ot),T(Mg.$$.fragment,ot),ot.forEach(t),MKe=i(et),Eg=n(et,"DIV",{class:!0});var Dje=s(Eg);T($y.$$.fragment,Dje),EKe=i(Dje),ite=n(Dje,"P",{});var aWr=s(ite);CKe=r(aWr,"Register a new configuration for this class."),aWr.forEach(t),Dje.forEach(t),et.forEach(t),Vqe=i(m),Ti=n(m,"H2",{class:!0});var Gje=s(Ti);Cg=n(Gje,"A",{id:!0,class:!0,href:!0});var nWr=s(Cg);dte=n(nWr,"SPAN",{});var sWr=s(dte);T(ky.$$.fragment,sWr),sWr.forEach(t),nWr.forEach(t),wKe=i(Gje),cte=n(Gje,"SPAN",{});var lWr=s(cte);AKe=r(lWr,"AutoTokenizer"),lWr.forEach(t),Gje.forEach(t),Xqe=i(m),wo=n(m,"DIV",{class:!0});var qs=s(wo);T(Sy.$$.fragment,qs),yKe=i(qs),Ry=n(qs,"P",{});var Oje=s(Ry);LKe=r(Oje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HS=n(Oje,"A",{href:!0});var iWr=s(HS);xKe=r(iWr,"AutoTokenizer.from_pretrained()"),iWr.forEach(t),$Ke=r(Oje," class method."),Oje.forEach(t),kKe=i(qs),Py=n(qs,"P",{});var Vje=s(Py);SKe=r(Vje,"This class cannot be instantiated directly using "),mte=n(Vje,"CODE",{});var dWr=s(mte);RKe=r(dWr,"__init__()"),dWr.forEach(t),PKe=r(Vje," (throws an error)."),Vje.forEach(t),BKe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(By.$$.fragment,Ns),IKe=i(Ns),fte=n(Ns,"P",{});var cWr=s(fte);qKe=r(cWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cWr.forEach(t),NKe=i(Ns),Aa=n(Ns,"P",{});var wA=s(Aa);jKe=r(wA,"The tokenizer class to instantiate is selected based on the "),gte=n(wA,"CODE",{});var mWr=s(gte);DKe=r(mWr,"model_type"),mWr.forEach(t),GKe=r(wA,` property of the config object (either
passed as an argument or loaded from `),hte=n(wA,"CODE",{});var fWr=s(hte);OKe=r(fWr,"pretrained_model_name_or_path"),fWr.forEach(t),VKe=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=n(wA,"CODE",{});var gWr=s(ute);XKe=r(gWr,"pretrained_model_name_or_path"),gWr.forEach(t),zKe=r(wA,":"),wA.forEach(t),WKe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Ix=s(Sn);pte=n(Ix,"STRONG",{});var hWr=s(pte);QKe=r(hWr,"albert"),hWr.forEach(t),HKe=r(Ix," \u2014 "),US=n(Ix,"A",{href:!0});var uWr=s(US);UKe=r(uWr,"AlbertTokenizer"),uWr.forEach(t),JKe=r(Ix," or "),JS=n(Ix,"A",{href:!0});var pWr=s(JS);YKe=r(pWr,"AlbertTokenizerFast"),pWr.forEach(t),KKe=r(Ix," (ALBERT model)"),Ix.forEach(t),ZKe=i(S),Rn=n(S,"LI",{});var qx=s(Rn);_te=n(qx,"STRONG",{});var _Wr=s(_te);eZe=r(_Wr,"bart"),_Wr.forEach(t),oZe=r(qx," \u2014 "),YS=n(qx,"A",{href:!0});var bWr=s(YS);rZe=r(bWr,"BartTokenizer"),bWr.forEach(t),tZe=r(qx," or "),KS=n(qx,"A",{href:!0});var vWr=s(KS);aZe=r(vWr,"BartTokenizerFast"),vWr.forEach(t),nZe=r(qx," (BART model)"),qx.forEach(t),sZe=i(S),Pn=n(S,"LI",{});var Nx=s(Pn);bte=n(Nx,"STRONG",{});var FWr=s(bte);lZe=r(FWr,"barthez"),FWr.forEach(t),iZe=r(Nx," \u2014 "),ZS=n(Nx,"A",{href:!0});var TWr=s(ZS);dZe=r(TWr,"BarthezTokenizer"),TWr.forEach(t),cZe=r(Nx," or "),eR=n(Nx,"A",{href:!0});var MWr=s(eR);mZe=r(MWr,"BarthezTokenizerFast"),MWr.forEach(t),fZe=r(Nx," (BARThez model)"),Nx.forEach(t),gZe=i(S),wg=n(S,"LI",{});var eAe=s(wg);vte=n(eAe,"STRONG",{});var EWr=s(vte);hZe=r(EWr,"bartpho"),EWr.forEach(t),uZe=r(eAe," \u2014 "),oR=n(eAe,"A",{href:!0});var CWr=s(oR);pZe=r(CWr,"BartphoTokenizer"),CWr.forEach(t),_Ze=r(eAe," (BARTpho model)"),eAe.forEach(t),bZe=i(S),Bn=n(S,"LI",{});var jx=s(Bn);Fte=n(jx,"STRONG",{});var wWr=s(Fte);vZe=r(wWr,"bert"),wWr.forEach(t),FZe=r(jx," \u2014 "),rR=n(jx,"A",{href:!0});var AWr=s(rR);TZe=r(AWr,"BertTokenizer"),AWr.forEach(t),MZe=r(jx," or "),tR=n(jx,"A",{href:!0});var yWr=s(tR);EZe=r(yWr,"BertTokenizerFast"),yWr.forEach(t),CZe=r(jx," (BERT model)"),jx.forEach(t),wZe=i(S),Ag=n(S,"LI",{});var oAe=s(Ag);Tte=n(oAe,"STRONG",{});var LWr=s(Tte);AZe=r(LWr,"bert-generation"),LWr.forEach(t),yZe=r(oAe," \u2014 "),aR=n(oAe,"A",{href:!0});var xWr=s(aR);LZe=r(xWr,"BertGenerationTokenizer"),xWr.forEach(t),xZe=r(oAe," (Bert Generation model)"),oAe.forEach(t),$Ze=i(S),yg=n(S,"LI",{});var rAe=s(yg);Mte=n(rAe,"STRONG",{});var $Wr=s(Mte);kZe=r($Wr,"bert-japanese"),$Wr.forEach(t),SZe=r(rAe," \u2014 "),nR=n(rAe,"A",{href:!0});var kWr=s(nR);RZe=r(kWr,"BertJapaneseTokenizer"),kWr.forEach(t),PZe=r(rAe," (BertJapanese model)"),rAe.forEach(t),BZe=i(S),Lg=n(S,"LI",{});var tAe=s(Lg);Ete=n(tAe,"STRONG",{});var SWr=s(Ete);IZe=r(SWr,"bertweet"),SWr.forEach(t),qZe=r(tAe," \u2014 "),sR=n(tAe,"A",{href:!0});var RWr=s(sR);NZe=r(RWr,"BertweetTokenizer"),RWr.forEach(t),jZe=r(tAe," (Bertweet model)"),tAe.forEach(t),DZe=i(S),In=n(S,"LI",{});var Dx=s(In);Cte=n(Dx,"STRONG",{});var PWr=s(Cte);GZe=r(PWr,"big_bird"),PWr.forEach(t),OZe=r(Dx," \u2014 "),lR=n(Dx,"A",{href:!0});var BWr=s(lR);VZe=r(BWr,"BigBirdTokenizer"),BWr.forEach(t),XZe=r(Dx," or "),iR=n(Dx,"A",{href:!0});var IWr=s(iR);zZe=r(IWr,"BigBirdTokenizerFast"),IWr.forEach(t),WZe=r(Dx," (BigBird model)"),Dx.forEach(t),QZe=i(S),qn=n(S,"LI",{});var Gx=s(qn);wte=n(Gx,"STRONG",{});var qWr=s(wte);HZe=r(qWr,"bigbird_pegasus"),qWr.forEach(t),UZe=r(Gx," \u2014 "),dR=n(Gx,"A",{href:!0});var NWr=s(dR);JZe=r(NWr,"PegasusTokenizer"),NWr.forEach(t),YZe=r(Gx," or "),cR=n(Gx,"A",{href:!0});var jWr=s(cR);KZe=r(jWr,"PegasusTokenizerFast"),jWr.forEach(t),ZZe=r(Gx," (BigBirdPegasus model)"),Gx.forEach(t),eeo=i(S),Nn=n(S,"LI",{});var Ox=s(Nn);Ate=n(Ox,"STRONG",{});var DWr=s(Ate);oeo=r(DWr,"blenderbot"),DWr.forEach(t),reo=r(Ox," \u2014 "),mR=n(Ox,"A",{href:!0});var GWr=s(mR);teo=r(GWr,"BlenderbotTokenizer"),GWr.forEach(t),aeo=r(Ox," or "),fR=n(Ox,"A",{href:!0});var OWr=s(fR);neo=r(OWr,"BlenderbotTokenizerFast"),OWr.forEach(t),seo=r(Ox," (Blenderbot model)"),Ox.forEach(t),leo=i(S),xg=n(S,"LI",{});var aAe=s(xg);yte=n(aAe,"STRONG",{});var VWr=s(yte);ieo=r(VWr,"blenderbot-small"),VWr.forEach(t),deo=r(aAe," \u2014 "),gR=n(aAe,"A",{href:!0});var XWr=s(gR);ceo=r(XWr,"BlenderbotSmallTokenizer"),XWr.forEach(t),meo=r(aAe," (BlenderbotSmall model)"),aAe.forEach(t),feo=i(S),$g=n(S,"LI",{});var nAe=s($g);Lte=n(nAe,"STRONG",{});var zWr=s(Lte);geo=r(zWr,"byt5"),zWr.forEach(t),heo=r(nAe," \u2014 "),hR=n(nAe,"A",{href:!0});var WWr=s(hR);ueo=r(WWr,"ByT5Tokenizer"),WWr.forEach(t),peo=r(nAe," (ByT5 model)"),nAe.forEach(t),_eo=i(S),jn=n(S,"LI",{});var Vx=s(jn);xte=n(Vx,"STRONG",{});var QWr=s(xte);beo=r(QWr,"camembert"),QWr.forEach(t),veo=r(Vx," \u2014 "),uR=n(Vx,"A",{href:!0});var HWr=s(uR);Feo=r(HWr,"CamembertTokenizer"),HWr.forEach(t),Teo=r(Vx," or "),pR=n(Vx,"A",{href:!0});var UWr=s(pR);Meo=r(UWr,"CamembertTokenizerFast"),UWr.forEach(t),Eeo=r(Vx," (CamemBERT model)"),Vx.forEach(t),Ceo=i(S),kg=n(S,"LI",{});var sAe=s(kg);$te=n(sAe,"STRONG",{});var JWr=s($te);weo=r(JWr,"canine"),JWr.forEach(t),Aeo=r(sAe," \u2014 "),_R=n(sAe,"A",{href:!0});var YWr=s(_R);yeo=r(YWr,"CanineTokenizer"),YWr.forEach(t),Leo=r(sAe," (Canine model)"),sAe.forEach(t),xeo=i(S),Dn=n(S,"LI",{});var Xx=s(Dn);kte=n(Xx,"STRONG",{});var KWr=s(kte);$eo=r(KWr,"clip"),KWr.forEach(t),keo=r(Xx," \u2014 "),bR=n(Xx,"A",{href:!0});var ZWr=s(bR);Seo=r(ZWr,"CLIPTokenizer"),ZWr.forEach(t),Reo=r(Xx," or "),vR=n(Xx,"A",{href:!0});var eQr=s(vR);Peo=r(eQr,"CLIPTokenizerFast"),eQr.forEach(t),Beo=r(Xx," (CLIP model)"),Xx.forEach(t),Ieo=i(S),Gn=n(S,"LI",{});var zx=s(Gn);Ste=n(zx,"STRONG",{});var oQr=s(Ste);qeo=r(oQr,"convbert"),oQr.forEach(t),Neo=r(zx," \u2014 "),FR=n(zx,"A",{href:!0});var rQr=s(FR);jeo=r(rQr,"ConvBertTokenizer"),rQr.forEach(t),Deo=r(zx," or "),TR=n(zx,"A",{href:!0});var tQr=s(TR);Geo=r(tQr,"ConvBertTokenizerFast"),tQr.forEach(t),Oeo=r(zx," (ConvBERT model)"),zx.forEach(t),Veo=i(S),On=n(S,"LI",{});var Wx=s(On);Rte=n(Wx,"STRONG",{});var aQr=s(Rte);Xeo=r(aQr,"cpm"),aQr.forEach(t),zeo=r(Wx," \u2014 "),MR=n(Wx,"A",{href:!0});var nQr=s(MR);Weo=r(nQr,"CpmTokenizer"),nQr.forEach(t),Qeo=r(Wx," or "),ER=n(Wx,"A",{href:!0});var sQr=s(ER);Heo=r(sQr,"CpmTokenizerFast"),sQr.forEach(t),Ueo=r(Wx," (CPM model)"),Wx.forEach(t),Jeo=i(S),Sg=n(S,"LI",{});var lAe=s(Sg);Pte=n(lAe,"STRONG",{});var lQr=s(Pte);Yeo=r(lQr,"ctrl"),lQr.forEach(t),Keo=r(lAe," \u2014 "),CR=n(lAe,"A",{href:!0});var iQr=s(CR);Zeo=r(iQr,"CTRLTokenizer"),iQr.forEach(t),eoo=r(lAe," (CTRL model)"),lAe.forEach(t),ooo=i(S),Vn=n(S,"LI",{});var Qx=s(Vn);Bte=n(Qx,"STRONG",{});var dQr=s(Bte);roo=r(dQr,"data2vec-text"),dQr.forEach(t),too=r(Qx," \u2014 "),wR=n(Qx,"A",{href:!0});var cQr=s(wR);aoo=r(cQr,"RobertaTokenizer"),cQr.forEach(t),noo=r(Qx," or "),AR=n(Qx,"A",{href:!0});var mQr=s(AR);soo=r(mQr,"RobertaTokenizerFast"),mQr.forEach(t),loo=r(Qx," (Data2VecText model)"),Qx.forEach(t),ioo=i(S),Xn=n(S,"LI",{});var Hx=s(Xn);Ite=n(Hx,"STRONG",{});var fQr=s(Ite);doo=r(fQr,"deberta"),fQr.forEach(t),coo=r(Hx," \u2014 "),yR=n(Hx,"A",{href:!0});var gQr=s(yR);moo=r(gQr,"DebertaTokenizer"),gQr.forEach(t),foo=r(Hx," or "),LR=n(Hx,"A",{href:!0});var hQr=s(LR);goo=r(hQr,"DebertaTokenizerFast"),hQr.forEach(t),hoo=r(Hx," (DeBERTa model)"),Hx.forEach(t),uoo=i(S),zn=n(S,"LI",{});var Ux=s(zn);qte=n(Ux,"STRONG",{});var uQr=s(qte);poo=r(uQr,"deberta-v2"),uQr.forEach(t),_oo=r(Ux," \u2014 "),xR=n(Ux,"A",{href:!0});var pQr=s(xR);boo=r(pQr,"DebertaV2Tokenizer"),pQr.forEach(t),voo=r(Ux," or "),$R=n(Ux,"A",{href:!0});var _Qr=s($R);Foo=r(_Qr,"DebertaV2TokenizerFast"),_Qr.forEach(t),Too=r(Ux," (DeBERTa-v2 model)"),Ux.forEach(t),Moo=i(S),Wn=n(S,"LI",{});var Jx=s(Wn);Nte=n(Jx,"STRONG",{});var bQr=s(Nte);Eoo=r(bQr,"distilbert"),bQr.forEach(t),Coo=r(Jx," \u2014 "),kR=n(Jx,"A",{href:!0});var vQr=s(kR);woo=r(vQr,"DistilBertTokenizer"),vQr.forEach(t),Aoo=r(Jx," or "),SR=n(Jx,"A",{href:!0});var FQr=s(SR);yoo=r(FQr,"DistilBertTokenizerFast"),FQr.forEach(t),Loo=r(Jx," (DistilBERT model)"),Jx.forEach(t),xoo=i(S),Qn=n(S,"LI",{});var Yx=s(Qn);jte=n(Yx,"STRONG",{});var TQr=s(jte);$oo=r(TQr,"dpr"),TQr.forEach(t),koo=r(Yx," \u2014 "),RR=n(Yx,"A",{href:!0});var MQr=s(RR);Soo=r(MQr,"DPRQuestionEncoderTokenizer"),MQr.forEach(t),Roo=r(Yx," or "),PR=n(Yx,"A",{href:!0});var EQr=s(PR);Poo=r(EQr,"DPRQuestionEncoderTokenizerFast"),EQr.forEach(t),Boo=r(Yx," (DPR model)"),Yx.forEach(t),Ioo=i(S),Hn=n(S,"LI",{});var Kx=s(Hn);Dte=n(Kx,"STRONG",{});var CQr=s(Dte);qoo=r(CQr,"electra"),CQr.forEach(t),Noo=r(Kx," \u2014 "),BR=n(Kx,"A",{href:!0});var wQr=s(BR);joo=r(wQr,"ElectraTokenizer"),wQr.forEach(t),Doo=r(Kx," or "),IR=n(Kx,"A",{href:!0});var AQr=s(IR);Goo=r(AQr,"ElectraTokenizerFast"),AQr.forEach(t),Ooo=r(Kx," (ELECTRA model)"),Kx.forEach(t),Voo=i(S),Rg=n(S,"LI",{});var iAe=s(Rg);Gte=n(iAe,"STRONG",{});var yQr=s(Gte);Xoo=r(yQr,"flaubert"),yQr.forEach(t),zoo=r(iAe," \u2014 "),qR=n(iAe,"A",{href:!0});var LQr=s(qR);Woo=r(LQr,"FlaubertTokenizer"),LQr.forEach(t),Qoo=r(iAe," (FlauBERT model)"),iAe.forEach(t),Hoo=i(S),Un=n(S,"LI",{});var Zx=s(Un);Ote=n(Zx,"STRONG",{});var xQr=s(Ote);Uoo=r(xQr,"fnet"),xQr.forEach(t),Joo=r(Zx," \u2014 "),NR=n(Zx,"A",{href:!0});var $Qr=s(NR);Yoo=r($Qr,"FNetTokenizer"),$Qr.forEach(t),Koo=r(Zx," or "),jR=n(Zx,"A",{href:!0});var kQr=s(jR);Zoo=r(kQr,"FNetTokenizerFast"),kQr.forEach(t),ero=r(Zx," (FNet model)"),Zx.forEach(t),oro=i(S),Pg=n(S,"LI",{});var dAe=s(Pg);Vte=n(dAe,"STRONG",{});var SQr=s(Vte);rro=r(SQr,"fsmt"),SQr.forEach(t),tro=r(dAe," \u2014 "),DR=n(dAe,"A",{href:!0});var RQr=s(DR);aro=r(RQr,"FSMTTokenizer"),RQr.forEach(t),nro=r(dAe," (FairSeq Machine-Translation model)"),dAe.forEach(t),sro=i(S),Jn=n(S,"LI",{});var e$=s(Jn);Xte=n(e$,"STRONG",{});var PQr=s(Xte);lro=r(PQr,"funnel"),PQr.forEach(t),iro=r(e$," \u2014 "),GR=n(e$,"A",{href:!0});var BQr=s(GR);dro=r(BQr,"FunnelTokenizer"),BQr.forEach(t),cro=r(e$," or "),OR=n(e$,"A",{href:!0});var IQr=s(OR);mro=r(IQr,"FunnelTokenizerFast"),IQr.forEach(t),fro=r(e$," (Funnel Transformer model)"),e$.forEach(t),gro=i(S),Yn=n(S,"LI",{});var o$=s(Yn);zte=n(o$,"STRONG",{});var qQr=s(zte);hro=r(qQr,"gpt2"),qQr.forEach(t),uro=r(o$," \u2014 "),VR=n(o$,"A",{href:!0});var NQr=s(VR);pro=r(NQr,"GPT2Tokenizer"),NQr.forEach(t),_ro=r(o$," or "),XR=n(o$,"A",{href:!0});var jQr=s(XR);bro=r(jQr,"GPT2TokenizerFast"),jQr.forEach(t),vro=r(o$," (OpenAI GPT-2 model)"),o$.forEach(t),Fro=i(S),Kn=n(S,"LI",{});var r$=s(Kn);Wte=n(r$,"STRONG",{});var DQr=s(Wte);Tro=r(DQr,"gpt_neo"),DQr.forEach(t),Mro=r(r$," \u2014 "),zR=n(r$,"A",{href:!0});var GQr=s(zR);Ero=r(GQr,"GPT2Tokenizer"),GQr.forEach(t),Cro=r(r$," or "),WR=n(r$,"A",{href:!0});var OQr=s(WR);wro=r(OQr,"GPT2TokenizerFast"),OQr.forEach(t),Aro=r(r$," (GPT Neo model)"),r$.forEach(t),yro=i(S),Zn=n(S,"LI",{});var t$=s(Zn);Qte=n(t$,"STRONG",{});var VQr=s(Qte);Lro=r(VQr,"gptj"),VQr.forEach(t),xro=r(t$," \u2014 "),QR=n(t$,"A",{href:!0});var XQr=s(QR);$ro=r(XQr,"GPT2Tokenizer"),XQr.forEach(t),kro=r(t$," or "),HR=n(t$,"A",{href:!0});var zQr=s(HR);Sro=r(zQr,"GPT2TokenizerFast"),zQr.forEach(t),Rro=r(t$," (GPT-J model)"),t$.forEach(t),Pro=i(S),es=n(S,"LI",{});var a$=s(es);Hte=n(a$,"STRONG",{});var WQr=s(Hte);Bro=r(WQr,"herbert"),WQr.forEach(t),Iro=r(a$," \u2014 "),UR=n(a$,"A",{href:!0});var QQr=s(UR);qro=r(QQr,"HerbertTokenizer"),QQr.forEach(t),Nro=r(a$," or "),JR=n(a$,"A",{href:!0});var HQr=s(JR);jro=r(HQr,"HerbertTokenizerFast"),HQr.forEach(t),Dro=r(a$," (HerBERT model)"),a$.forEach(t),Gro=i(S),Bg=n(S,"LI",{});var cAe=s(Bg);Ute=n(cAe,"STRONG",{});var UQr=s(Ute);Oro=r(UQr,"hubert"),UQr.forEach(t),Vro=r(cAe," \u2014 "),YR=n(cAe,"A",{href:!0});var JQr=s(YR);Xro=r(JQr,"Wav2Vec2CTCTokenizer"),JQr.forEach(t),zro=r(cAe," (Hubert model)"),cAe.forEach(t),Wro=i(S),os=n(S,"LI",{});var n$=s(os);Jte=n(n$,"STRONG",{});var YQr=s(Jte);Qro=r(YQr,"ibert"),YQr.forEach(t),Hro=r(n$," \u2014 "),KR=n(n$,"A",{href:!0});var KQr=s(KR);Uro=r(KQr,"RobertaTokenizer"),KQr.forEach(t),Jro=r(n$," or "),ZR=n(n$,"A",{href:!0});var ZQr=s(ZR);Yro=r(ZQr,"RobertaTokenizerFast"),ZQr.forEach(t),Kro=r(n$," (I-BERT model)"),n$.forEach(t),Zro=i(S),rs=n(S,"LI",{});var s$=s(rs);Yte=n(s$,"STRONG",{});var eHr=s(Yte);eto=r(eHr,"layoutlm"),eHr.forEach(t),oto=r(s$," \u2014 "),eP=n(s$,"A",{href:!0});var oHr=s(eP);rto=r(oHr,"LayoutLMTokenizer"),oHr.forEach(t),tto=r(s$," or "),oP=n(s$,"A",{href:!0});var rHr=s(oP);ato=r(rHr,"LayoutLMTokenizerFast"),rHr.forEach(t),nto=r(s$," (LayoutLM model)"),s$.forEach(t),sto=i(S),ts=n(S,"LI",{});var l$=s(ts);Kte=n(l$,"STRONG",{});var tHr=s(Kte);lto=r(tHr,"layoutlmv2"),tHr.forEach(t),ito=r(l$," \u2014 "),rP=n(l$,"A",{href:!0});var aHr=s(rP);dto=r(aHr,"LayoutLMv2Tokenizer"),aHr.forEach(t),cto=r(l$," or "),tP=n(l$,"A",{href:!0});var nHr=s(tP);mto=r(nHr,"LayoutLMv2TokenizerFast"),nHr.forEach(t),fto=r(l$," (LayoutLMv2 model)"),l$.forEach(t),gto=i(S),as=n(S,"LI",{});var i$=s(as);Zte=n(i$,"STRONG",{});var sHr=s(Zte);hto=r(sHr,"layoutlmv3"),sHr.forEach(t),uto=r(i$," \u2014 "),aP=n(i$,"A",{href:!0});var lHr=s(aP);pto=r(lHr,"LayoutLMv3Tokenizer"),lHr.forEach(t),_to=r(i$," or "),nP=n(i$,"A",{href:!0});var iHr=s(nP);bto=r(iHr,"LayoutLMv3TokenizerFast"),iHr.forEach(t),vto=r(i$," (LayoutLMv3 model)"),i$.forEach(t),Fto=i(S),ns=n(S,"LI",{});var d$=s(ns);eae=n(d$,"STRONG",{});var dHr=s(eae);Tto=r(dHr,"layoutxlm"),dHr.forEach(t),Mto=r(d$," \u2014 "),sP=n(d$,"A",{href:!0});var cHr=s(sP);Eto=r(cHr,"LayoutXLMTokenizer"),cHr.forEach(t),Cto=r(d$," or "),lP=n(d$,"A",{href:!0});var mHr=s(lP);wto=r(mHr,"LayoutXLMTokenizerFast"),mHr.forEach(t),Ato=r(d$," (LayoutXLM model)"),d$.forEach(t),yto=i(S),ss=n(S,"LI",{});var c$=s(ss);oae=n(c$,"STRONG",{});var fHr=s(oae);Lto=r(fHr,"led"),fHr.forEach(t),xto=r(c$," \u2014 "),iP=n(c$,"A",{href:!0});var gHr=s(iP);$to=r(gHr,"LEDTokenizer"),gHr.forEach(t),kto=r(c$," or "),dP=n(c$,"A",{href:!0});var hHr=s(dP);Sto=r(hHr,"LEDTokenizerFast"),hHr.forEach(t),Rto=r(c$," (LED model)"),c$.forEach(t),Pto=i(S),ls=n(S,"LI",{});var m$=s(ls);rae=n(m$,"STRONG",{});var uHr=s(rae);Bto=r(uHr,"longformer"),uHr.forEach(t),Ito=r(m$," \u2014 "),cP=n(m$,"A",{href:!0});var pHr=s(cP);qto=r(pHr,"LongformerTokenizer"),pHr.forEach(t),Nto=r(m$," or "),mP=n(m$,"A",{href:!0});var _Hr=s(mP);jto=r(_Hr,"LongformerTokenizerFast"),_Hr.forEach(t),Dto=r(m$," (Longformer model)"),m$.forEach(t),Gto=i(S),Ig=n(S,"LI",{});var mAe=s(Ig);tae=n(mAe,"STRONG",{});var bHr=s(tae);Oto=r(bHr,"luke"),bHr.forEach(t),Vto=r(mAe," \u2014 "),fP=n(mAe,"A",{href:!0});var vHr=s(fP);Xto=r(vHr,"LukeTokenizer"),vHr.forEach(t),zto=r(mAe," (LUKE model)"),mAe.forEach(t),Wto=i(S),is=n(S,"LI",{});var f$=s(is);aae=n(f$,"STRONG",{});var FHr=s(aae);Qto=r(FHr,"lxmert"),FHr.forEach(t),Hto=r(f$," \u2014 "),gP=n(f$,"A",{href:!0});var THr=s(gP);Uto=r(THr,"LxmertTokenizer"),THr.forEach(t),Jto=r(f$," or "),hP=n(f$,"A",{href:!0});var MHr=s(hP);Yto=r(MHr,"LxmertTokenizerFast"),MHr.forEach(t),Kto=r(f$," (LXMERT model)"),f$.forEach(t),Zto=i(S),qg=n(S,"LI",{});var fAe=s(qg);nae=n(fAe,"STRONG",{});var EHr=s(nae);eao=r(EHr,"m2m_100"),EHr.forEach(t),oao=r(fAe," \u2014 "),uP=n(fAe,"A",{href:!0});var CHr=s(uP);rao=r(CHr,"M2M100Tokenizer"),CHr.forEach(t),tao=r(fAe," (M2M100 model)"),fAe.forEach(t),aao=i(S),Ng=n(S,"LI",{});var gAe=s(Ng);sae=n(gAe,"STRONG",{});var wHr=s(sae);nao=r(wHr,"marian"),wHr.forEach(t),sao=r(gAe," \u2014 "),pP=n(gAe,"A",{href:!0});var AHr=s(pP);lao=r(AHr,"MarianTokenizer"),AHr.forEach(t),iao=r(gAe," (Marian model)"),gAe.forEach(t),dao=i(S),ds=n(S,"LI",{});var g$=s(ds);lae=n(g$,"STRONG",{});var yHr=s(lae);cao=r(yHr,"mbart"),yHr.forEach(t),mao=r(g$," \u2014 "),_P=n(g$,"A",{href:!0});var LHr=s(_P);fao=r(LHr,"MBartTokenizer"),LHr.forEach(t),gao=r(g$," or "),bP=n(g$,"A",{href:!0});var xHr=s(bP);hao=r(xHr,"MBartTokenizerFast"),xHr.forEach(t),uao=r(g$," (mBART model)"),g$.forEach(t),pao=i(S),cs=n(S,"LI",{});var h$=s(cs);iae=n(h$,"STRONG",{});var $Hr=s(iae);_ao=r($Hr,"mbart50"),$Hr.forEach(t),bao=r(h$," \u2014 "),vP=n(h$,"A",{href:!0});var kHr=s(vP);vao=r(kHr,"MBart50Tokenizer"),kHr.forEach(t),Fao=r(h$," or "),FP=n(h$,"A",{href:!0});var SHr=s(FP);Tao=r(SHr,"MBart50TokenizerFast"),SHr.forEach(t),Mao=r(h$," (mBART-50 model)"),h$.forEach(t),Eao=i(S),ms=n(S,"LI",{});var u$=s(ms);dae=n(u$,"STRONG",{});var RHr=s(dae);Cao=r(RHr,"megatron-bert"),RHr.forEach(t),wao=r(u$," \u2014 "),TP=n(u$,"A",{href:!0});var PHr=s(TP);Aao=r(PHr,"BertTokenizer"),PHr.forEach(t),yao=r(u$," or "),MP=n(u$,"A",{href:!0});var BHr=s(MP);Lao=r(BHr,"BertTokenizerFast"),BHr.forEach(t),xao=r(u$," (MegatronBert model)"),u$.forEach(t),$ao=i(S),jg=n(S,"LI",{});var hAe=s(jg);cae=n(hAe,"STRONG",{});var IHr=s(cae);kao=r(IHr,"mluke"),IHr.forEach(t),Sao=r(hAe," \u2014 "),EP=n(hAe,"A",{href:!0});var qHr=s(EP);Rao=r(qHr,"MLukeTokenizer"),qHr.forEach(t),Pao=r(hAe," (mLUKE model)"),hAe.forEach(t),Bao=i(S),fs=n(S,"LI",{});var p$=s(fs);mae=n(p$,"STRONG",{});var NHr=s(mae);Iao=r(NHr,"mobilebert"),NHr.forEach(t),qao=r(p$," \u2014 "),CP=n(p$,"A",{href:!0});var jHr=s(CP);Nao=r(jHr,"MobileBertTokenizer"),jHr.forEach(t),jao=r(p$," or "),wP=n(p$,"A",{href:!0});var DHr=s(wP);Dao=r(DHr,"MobileBertTokenizerFast"),DHr.forEach(t),Gao=r(p$," (MobileBERT model)"),p$.forEach(t),Oao=i(S),gs=n(S,"LI",{});var _$=s(gs);fae=n(_$,"STRONG",{});var GHr=s(fae);Vao=r(GHr,"mpnet"),GHr.forEach(t),Xao=r(_$," \u2014 "),AP=n(_$,"A",{href:!0});var OHr=s(AP);zao=r(OHr,"MPNetTokenizer"),OHr.forEach(t),Wao=r(_$," or "),yP=n(_$,"A",{href:!0});var VHr=s(yP);Qao=r(VHr,"MPNetTokenizerFast"),VHr.forEach(t),Hao=r(_$," (MPNet model)"),_$.forEach(t),Uao=i(S),hs=n(S,"LI",{});var b$=s(hs);gae=n(b$,"STRONG",{});var XHr=s(gae);Jao=r(XHr,"mt5"),XHr.forEach(t),Yao=r(b$," \u2014 "),LP=n(b$,"A",{href:!0});var zHr=s(LP);Kao=r(zHr,"MT5Tokenizer"),zHr.forEach(t),Zao=r(b$," or "),xP=n(b$,"A",{href:!0});var WHr=s(xP);eno=r(WHr,"MT5TokenizerFast"),WHr.forEach(t),ono=r(b$," (mT5 model)"),b$.forEach(t),rno=i(S),us=n(S,"LI",{});var v$=s(us);hae=n(v$,"STRONG",{});var QHr=s(hae);tno=r(QHr,"nystromformer"),QHr.forEach(t),ano=r(v$," \u2014 "),$P=n(v$,"A",{href:!0});var HHr=s($P);nno=r(HHr,"AlbertTokenizer"),HHr.forEach(t),sno=r(v$," or "),kP=n(v$,"A",{href:!0});var UHr=s(kP);lno=r(UHr,"AlbertTokenizerFast"),UHr.forEach(t),ino=r(v$," (Nystromformer model)"),v$.forEach(t),dno=i(S),ps=n(S,"LI",{});var F$=s(ps);uae=n(F$,"STRONG",{});var JHr=s(uae);cno=r(JHr,"openai-gpt"),JHr.forEach(t),mno=r(F$," \u2014 "),SP=n(F$,"A",{href:!0});var YHr=s(SP);fno=r(YHr,"OpenAIGPTTokenizer"),YHr.forEach(t),gno=r(F$," or "),RP=n(F$,"A",{href:!0});var KHr=s(RP);hno=r(KHr,"OpenAIGPTTokenizerFast"),KHr.forEach(t),uno=r(F$," (OpenAI GPT model)"),F$.forEach(t),pno=i(S),Dg=n(S,"LI",{});var uAe=s(Dg);pae=n(uAe,"STRONG",{});var ZHr=s(pae);_no=r(ZHr,"opt"),ZHr.forEach(t),bno=r(uAe," \u2014 "),PP=n(uAe,"A",{href:!0});var eUr=s(PP);vno=r(eUr,"GPT2Tokenizer"),eUr.forEach(t),Fno=r(uAe," (OPT model)"),uAe.forEach(t),Tno=i(S),_s=n(S,"LI",{});var T$=s(_s);_ae=n(T$,"STRONG",{});var oUr=s(_ae);Mno=r(oUr,"pegasus"),oUr.forEach(t),Eno=r(T$," \u2014 "),BP=n(T$,"A",{href:!0});var rUr=s(BP);Cno=r(rUr,"PegasusTokenizer"),rUr.forEach(t),wno=r(T$," or "),IP=n(T$,"A",{href:!0});var tUr=s(IP);Ano=r(tUr,"PegasusTokenizerFast"),tUr.forEach(t),yno=r(T$," (Pegasus model)"),T$.forEach(t),Lno=i(S),Gg=n(S,"LI",{});var pAe=s(Gg);bae=n(pAe,"STRONG",{});var aUr=s(bae);xno=r(aUr,"perceiver"),aUr.forEach(t),$no=r(pAe," \u2014 "),qP=n(pAe,"A",{href:!0});var nUr=s(qP);kno=r(nUr,"PerceiverTokenizer"),nUr.forEach(t),Sno=r(pAe," (Perceiver model)"),pAe.forEach(t),Rno=i(S),Og=n(S,"LI",{});var _Ae=s(Og);vae=n(_Ae,"STRONG",{});var sUr=s(vae);Pno=r(sUr,"phobert"),sUr.forEach(t),Bno=r(_Ae," \u2014 "),NP=n(_Ae,"A",{href:!0});var lUr=s(NP);Ino=r(lUr,"PhobertTokenizer"),lUr.forEach(t),qno=r(_Ae," (PhoBERT model)"),_Ae.forEach(t),Nno=i(S),Vg=n(S,"LI",{});var bAe=s(Vg);Fae=n(bAe,"STRONG",{});var iUr=s(Fae);jno=r(iUr,"plbart"),iUr.forEach(t),Dno=r(bAe," \u2014 "),jP=n(bAe,"A",{href:!0});var dUr=s(jP);Gno=r(dUr,"PLBartTokenizer"),dUr.forEach(t),Ono=r(bAe," (PLBart model)"),bAe.forEach(t),Vno=i(S),Xg=n(S,"LI",{});var vAe=s(Xg);Tae=n(vAe,"STRONG",{});var cUr=s(Tae);Xno=r(cUr,"prophetnet"),cUr.forEach(t),zno=r(vAe," \u2014 "),DP=n(vAe,"A",{href:!0});var mUr=s(DP);Wno=r(mUr,"ProphetNetTokenizer"),mUr.forEach(t),Qno=r(vAe," (ProphetNet model)"),vAe.forEach(t),Hno=i(S),bs=n(S,"LI",{});var M$=s(bs);Mae=n(M$,"STRONG",{});var fUr=s(Mae);Uno=r(fUr,"qdqbert"),fUr.forEach(t),Jno=r(M$," \u2014 "),GP=n(M$,"A",{href:!0});var gUr=s(GP);Yno=r(gUr,"BertTokenizer"),gUr.forEach(t),Kno=r(M$," or "),OP=n(M$,"A",{href:!0});var hUr=s(OP);Zno=r(hUr,"BertTokenizerFast"),hUr.forEach(t),eso=r(M$," (QDQBert model)"),M$.forEach(t),oso=i(S),zg=n(S,"LI",{});var FAe=s(zg);Eae=n(FAe,"STRONG",{});var uUr=s(Eae);rso=r(uUr,"rag"),uUr.forEach(t),tso=r(FAe," \u2014 "),VP=n(FAe,"A",{href:!0});var pUr=s(VP);aso=r(pUr,"RagTokenizer"),pUr.forEach(t),nso=r(FAe," (RAG model)"),FAe.forEach(t),sso=i(S),vs=n(S,"LI",{});var E$=s(vs);Cae=n(E$,"STRONG",{});var _Ur=s(Cae);lso=r(_Ur,"realm"),_Ur.forEach(t),iso=r(E$," \u2014 "),XP=n(E$,"A",{href:!0});var bUr=s(XP);dso=r(bUr,"RealmTokenizer"),bUr.forEach(t),cso=r(E$," or "),zP=n(E$,"A",{href:!0});var vUr=s(zP);mso=r(vUr,"RealmTokenizerFast"),vUr.forEach(t),fso=r(E$," (Realm model)"),E$.forEach(t),gso=i(S),Fs=n(S,"LI",{});var C$=s(Fs);wae=n(C$,"STRONG",{});var FUr=s(wae);hso=r(FUr,"reformer"),FUr.forEach(t),uso=r(C$," \u2014 "),WP=n(C$,"A",{href:!0});var TUr=s(WP);pso=r(TUr,"ReformerTokenizer"),TUr.forEach(t),_so=r(C$," or "),QP=n(C$,"A",{href:!0});var MUr=s(QP);bso=r(MUr,"ReformerTokenizerFast"),MUr.forEach(t),vso=r(C$," (Reformer model)"),C$.forEach(t),Fso=i(S),Ts=n(S,"LI",{});var w$=s(Ts);Aae=n(w$,"STRONG",{});var EUr=s(Aae);Tso=r(EUr,"rembert"),EUr.forEach(t),Mso=r(w$," \u2014 "),HP=n(w$,"A",{href:!0});var CUr=s(HP);Eso=r(CUr,"RemBertTokenizer"),CUr.forEach(t),Cso=r(w$," or "),UP=n(w$,"A",{href:!0});var wUr=s(UP);wso=r(wUr,"RemBertTokenizerFast"),wUr.forEach(t),Aso=r(w$," (RemBERT model)"),w$.forEach(t),yso=i(S),Ms=n(S,"LI",{});var A$=s(Ms);yae=n(A$,"STRONG",{});var AUr=s(yae);Lso=r(AUr,"retribert"),AUr.forEach(t),xso=r(A$," \u2014 "),JP=n(A$,"A",{href:!0});var yUr=s(JP);$so=r(yUr,"RetriBertTokenizer"),yUr.forEach(t),kso=r(A$," or "),YP=n(A$,"A",{href:!0});var LUr=s(YP);Sso=r(LUr,"RetriBertTokenizerFast"),LUr.forEach(t),Rso=r(A$," (RetriBERT model)"),A$.forEach(t),Pso=i(S),Es=n(S,"LI",{});var y$=s(Es);Lae=n(y$,"STRONG",{});var xUr=s(Lae);Bso=r(xUr,"roberta"),xUr.forEach(t),Iso=r(y$," \u2014 "),KP=n(y$,"A",{href:!0});var $Ur=s(KP);qso=r($Ur,"RobertaTokenizer"),$Ur.forEach(t),Nso=r(y$," or "),ZP=n(y$,"A",{href:!0});var kUr=s(ZP);jso=r(kUr,"RobertaTokenizerFast"),kUr.forEach(t),Dso=r(y$," (RoBERTa model)"),y$.forEach(t),Gso=i(S),Cs=n(S,"LI",{});var L$=s(Cs);xae=n(L$,"STRONG",{});var SUr=s(xae);Oso=r(SUr,"roformer"),SUr.forEach(t),Vso=r(L$," \u2014 "),eB=n(L$,"A",{href:!0});var RUr=s(eB);Xso=r(RUr,"RoFormerTokenizer"),RUr.forEach(t),zso=r(L$," or "),oB=n(L$,"A",{href:!0});var PUr=s(oB);Wso=r(PUr,"RoFormerTokenizerFast"),PUr.forEach(t),Qso=r(L$," (RoFormer model)"),L$.forEach(t),Hso=i(S),Wg=n(S,"LI",{});var TAe=s(Wg);$ae=n(TAe,"STRONG",{});var BUr=s($ae);Uso=r(BUr,"speech_to_text"),BUr.forEach(t),Jso=r(TAe," \u2014 "),rB=n(TAe,"A",{href:!0});var IUr=s(rB);Yso=r(IUr,"Speech2TextTokenizer"),IUr.forEach(t),Kso=r(TAe," (Speech2Text model)"),TAe.forEach(t),Zso=i(S),Qg=n(S,"LI",{});var MAe=s(Qg);kae=n(MAe,"STRONG",{});var qUr=s(kae);elo=r(qUr,"speech_to_text_2"),qUr.forEach(t),olo=r(MAe," \u2014 "),tB=n(MAe,"A",{href:!0});var NUr=s(tB);rlo=r(NUr,"Speech2Text2Tokenizer"),NUr.forEach(t),tlo=r(MAe," (Speech2Text2 model)"),MAe.forEach(t),alo=i(S),ws=n(S,"LI",{});var x$=s(ws);Sae=n(x$,"STRONG",{});var jUr=s(Sae);nlo=r(jUr,"splinter"),jUr.forEach(t),slo=r(x$," \u2014 "),aB=n(x$,"A",{href:!0});var DUr=s(aB);llo=r(DUr,"SplinterTokenizer"),DUr.forEach(t),ilo=r(x$," or "),nB=n(x$,"A",{href:!0});var GUr=s(nB);dlo=r(GUr,"SplinterTokenizerFast"),GUr.forEach(t),clo=r(x$," (Splinter model)"),x$.forEach(t),mlo=i(S),As=n(S,"LI",{});var $$=s(As);Rae=n($$,"STRONG",{});var OUr=s(Rae);flo=r(OUr,"squeezebert"),OUr.forEach(t),glo=r($$," \u2014 "),sB=n($$,"A",{href:!0});var VUr=s(sB);hlo=r(VUr,"SqueezeBertTokenizer"),VUr.forEach(t),ulo=r($$," or "),lB=n($$,"A",{href:!0});var XUr=s(lB);plo=r(XUr,"SqueezeBertTokenizerFast"),XUr.forEach(t),_lo=r($$," (SqueezeBERT model)"),$$.forEach(t),blo=i(S),ys=n(S,"LI",{});var k$=s(ys);Pae=n(k$,"STRONG",{});var zUr=s(Pae);vlo=r(zUr,"t5"),zUr.forEach(t),Flo=r(k$," \u2014 "),iB=n(k$,"A",{href:!0});var WUr=s(iB);Tlo=r(WUr,"T5Tokenizer"),WUr.forEach(t),Mlo=r(k$," or "),dB=n(k$,"A",{href:!0});var QUr=s(dB);Elo=r(QUr,"T5TokenizerFast"),QUr.forEach(t),Clo=r(k$," (T5 model)"),k$.forEach(t),wlo=i(S),Hg=n(S,"LI",{});var EAe=s(Hg);Bae=n(EAe,"STRONG",{});var HUr=s(Bae);Alo=r(HUr,"tapas"),HUr.forEach(t),ylo=r(EAe," \u2014 "),cB=n(EAe,"A",{href:!0});var UUr=s(cB);Llo=r(UUr,"TapasTokenizer"),UUr.forEach(t),xlo=r(EAe," (TAPAS model)"),EAe.forEach(t),$lo=i(S),Ug=n(S,"LI",{});var CAe=s(Ug);Iae=n(CAe,"STRONG",{});var JUr=s(Iae);klo=r(JUr,"tapex"),JUr.forEach(t),Slo=r(CAe," \u2014 "),mB=n(CAe,"A",{href:!0});var YUr=s(mB);Rlo=r(YUr,"TapexTokenizer"),YUr.forEach(t),Plo=r(CAe," (TAPEX model)"),CAe.forEach(t),Blo=i(S),Jg=n(S,"LI",{});var wAe=s(Jg);qae=n(wAe,"STRONG",{});var KUr=s(qae);Ilo=r(KUr,"transfo-xl"),KUr.forEach(t),qlo=r(wAe," \u2014 "),fB=n(wAe,"A",{href:!0});var ZUr=s(fB);Nlo=r(ZUr,"TransfoXLTokenizer"),ZUr.forEach(t),jlo=r(wAe," (Transformer-XL model)"),wAe.forEach(t),Dlo=i(S),Ls=n(S,"LI",{});var S$=s(Ls);Nae=n(S$,"STRONG",{});var eJr=s(Nae);Glo=r(eJr,"visual_bert"),eJr.forEach(t),Olo=r(S$," \u2014 "),gB=n(S$,"A",{href:!0});var oJr=s(gB);Vlo=r(oJr,"BertTokenizer"),oJr.forEach(t),Xlo=r(S$," or "),hB=n(S$,"A",{href:!0});var rJr=s(hB);zlo=r(rJr,"BertTokenizerFast"),rJr.forEach(t),Wlo=r(S$," (VisualBert model)"),S$.forEach(t),Qlo=i(S),Yg=n(S,"LI",{});var AAe=s(Yg);jae=n(AAe,"STRONG",{});var tJr=s(jae);Hlo=r(tJr,"wav2vec2"),tJr.forEach(t),Ulo=r(AAe," \u2014 "),uB=n(AAe,"A",{href:!0});var aJr=s(uB);Jlo=r(aJr,"Wav2Vec2CTCTokenizer"),aJr.forEach(t),Ylo=r(AAe," (Wav2Vec2 model)"),AAe.forEach(t),Klo=i(S),Kg=n(S,"LI",{});var yAe=s(Kg);Dae=n(yAe,"STRONG",{});var nJr=s(Dae);Zlo=r(nJr,"wav2vec2-conformer"),nJr.forEach(t),eio=r(yAe," \u2014 "),pB=n(yAe,"A",{href:!0});var sJr=s(pB);oio=r(sJr,"Wav2Vec2CTCTokenizer"),sJr.forEach(t),rio=r(yAe," (Wav2Vec2-Conformer model)"),yAe.forEach(t),tio=i(S),Zg=n(S,"LI",{});var LAe=s(Zg);Gae=n(LAe,"STRONG",{});var lJr=s(Gae);aio=r(lJr,"wav2vec2_phoneme"),lJr.forEach(t),nio=r(LAe," \u2014 "),_B=n(LAe,"A",{href:!0});var iJr=s(_B);sio=r(iJr,"Wav2Vec2PhonemeCTCTokenizer"),iJr.forEach(t),lio=r(LAe," (Wav2Vec2Phoneme model)"),LAe.forEach(t),iio=i(S),xs=n(S,"LI",{});var R$=s(xs);Oae=n(R$,"STRONG",{});var dJr=s(Oae);dio=r(dJr,"xglm"),dJr.forEach(t),cio=r(R$," \u2014 "),bB=n(R$,"A",{href:!0});var cJr=s(bB);mio=r(cJr,"XGLMTokenizer"),cJr.forEach(t),fio=r(R$," or "),vB=n(R$,"A",{href:!0});var mJr=s(vB);gio=r(mJr,"XGLMTokenizerFast"),mJr.forEach(t),hio=r(R$," (XGLM model)"),R$.forEach(t),uio=i(S),eh=n(S,"LI",{});var xAe=s(eh);Vae=n(xAe,"STRONG",{});var fJr=s(Vae);pio=r(fJr,"xlm"),fJr.forEach(t),_io=r(xAe," \u2014 "),FB=n(xAe,"A",{href:!0});var gJr=s(FB);bio=r(gJr,"XLMTokenizer"),gJr.forEach(t),vio=r(xAe," (XLM model)"),xAe.forEach(t),Fio=i(S),oh=n(S,"LI",{});var $Ae=s(oh);Xae=n($Ae,"STRONG",{});var hJr=s(Xae);Tio=r(hJr,"xlm-prophetnet"),hJr.forEach(t),Mio=r($Ae," \u2014 "),TB=n($Ae,"A",{href:!0});var uJr=s(TB);Eio=r(uJr,"XLMProphetNetTokenizer"),uJr.forEach(t),Cio=r($Ae," (XLMProphetNet model)"),$Ae.forEach(t),wio=i(S),$s=n(S,"LI",{});var P$=s($s);zae=n(P$,"STRONG",{});var pJr=s(zae);Aio=r(pJr,"xlm-roberta"),pJr.forEach(t),yio=r(P$," \u2014 "),MB=n(P$,"A",{href:!0});var _Jr=s(MB);Lio=r(_Jr,"XLMRobertaTokenizer"),_Jr.forEach(t),xio=r(P$," or "),EB=n(P$,"A",{href:!0});var bJr=s(EB);$io=r(bJr,"XLMRobertaTokenizerFast"),bJr.forEach(t),kio=r(P$," (XLM-RoBERTa model)"),P$.forEach(t),Sio=i(S),ks=n(S,"LI",{});var B$=s(ks);Wae=n(B$,"STRONG",{});var vJr=s(Wae);Rio=r(vJr,"xlm-roberta-xl"),vJr.forEach(t),Pio=r(B$," \u2014 "),CB=n(B$,"A",{href:!0});var FJr=s(CB);Bio=r(FJr,"RobertaTokenizer"),FJr.forEach(t),Iio=r(B$," or "),wB=n(B$,"A",{href:!0});var TJr=s(wB);qio=r(TJr,"RobertaTokenizerFast"),TJr.forEach(t),Nio=r(B$," (XLM-RoBERTa-XL model)"),B$.forEach(t),jio=i(S),Ss=n(S,"LI",{});var I$=s(Ss);Qae=n(I$,"STRONG",{});var MJr=s(Qae);Dio=r(MJr,"xlnet"),MJr.forEach(t),Gio=r(I$," \u2014 "),AB=n(I$,"A",{href:!0});var EJr=s(AB);Oio=r(EJr,"XLNetTokenizer"),EJr.forEach(t),Vio=r(I$," or "),yB=n(I$,"A",{href:!0});var CJr=s(yB);Xio=r(CJr,"XLNetTokenizerFast"),CJr.forEach(t),zio=r(I$," (XLNet model)"),I$.forEach(t),Wio=i(S),Rs=n(S,"LI",{});var q$=s(Rs);Hae=n(q$,"STRONG",{});var wJr=s(Hae);Qio=r(wJr,"yoso"),wJr.forEach(t),Hio=r(q$," \u2014 "),LB=n(q$,"A",{href:!0});var AJr=s(LB);Uio=r(AJr,"AlbertTokenizer"),AJr.forEach(t),Jio=r(q$," or "),xB=n(q$,"A",{href:!0});var yJr=s(xB);Yio=r(yJr,"AlbertTokenizerFast"),yJr.forEach(t),Kio=r(q$," (YOSO model)"),q$.forEach(t),S.forEach(t),Zio=i(Ns),T(rh.$$.fragment,Ns),Ns.forEach(t),edo=i(qs),th=n(qs,"DIV",{class:!0});var Xje=s(th);T(Iy.$$.fragment,Xje),odo=i(Xje),Uae=n(Xje,"P",{});var LJr=s(Uae);rdo=r(LJr,"Register a new tokenizer in this mapping."),LJr.forEach(t),Xje.forEach(t),qs.forEach(t),zqe=i(m),Mi=n(m,"H2",{class:!0});var zje=s(Mi);ah=n(zje,"A",{id:!0,class:!0,href:!0});var xJr=s(ah);Jae=n(xJr,"SPAN",{});var $Jr=s(Jae);T(qy.$$.fragment,$Jr),$Jr.forEach(t),xJr.forEach(t),tdo=i(zje),Yae=n(zje,"SPAN",{});var kJr=s(Yae);ado=r(kJr,"AutoFeatureExtractor"),kJr.forEach(t),zje.forEach(t),Wqe=i(m),Ao=n(m,"DIV",{class:!0});var js=s(Ao);T(Ny.$$.fragment,js),ndo=i(js),jy=n(js,"P",{});var Wje=s(jy);sdo=r(Wje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$B=n(Wje,"A",{href:!0});var SJr=s($B);ldo=r(SJr,"AutoFeatureExtractor.from_pretrained()"),SJr.forEach(t),ido=r(Wje," class method."),Wje.forEach(t),ddo=i(js),Dy=n(js,"P",{});var Qje=s(Dy);cdo=r(Qje,"This class cannot be instantiated directly using "),Kae=n(Qje,"CODE",{});var RJr=s(Kae);mdo=r(RJr,"__init__()"),RJr.forEach(t),fdo=r(Qje," (throws an error)."),Qje.forEach(t),gdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(Gy.$$.fragment,Zt),hdo=i(Zt),Zae=n(Zt,"P",{});var PJr=s(Zae);udo=r(PJr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),PJr.forEach(t),pdo=i(Zt),ya=n(Zt,"P",{});var AA=s(ya);_do=r(AA,"The feature extractor class to instantiate is selected based on the "),ene=n(AA,"CODE",{});var BJr=s(ene);bdo=r(BJr,"model_type"),BJr.forEach(t),vdo=r(AA,` property of the config object
(either passed as an argument or loaded from `),one=n(AA,"CODE",{});var IJr=s(one);Fdo=r(IJr,"pretrained_model_name_or_path"),IJr.forEach(t),Tdo=r(AA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rne=n(AA,"CODE",{});var qJr=s(rne);Mdo=r(qJr,"pretrained_model_name_or_path"),qJr.forEach(t),Edo=r(AA,":"),AA.forEach(t),Cdo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);nh=n(Z,"LI",{});var kAe=s(nh);tne=n(kAe,"STRONG",{});var NJr=s(tne);wdo=r(NJr,"beit"),NJr.forEach(t),Ado=r(kAe," \u2014 "),kB=n(kAe,"A",{href:!0});var jJr=s(kB);ydo=r(jJr,"BeitFeatureExtractor"),jJr.forEach(t),Ldo=r(kAe," (BEiT model)"),kAe.forEach(t),xdo=i(Z),sh=n(Z,"LI",{});var SAe=s(sh);ane=n(SAe,"STRONG",{});var DJr=s(ane);$do=r(DJr,"clip"),DJr.forEach(t),kdo=r(SAe," \u2014 "),SB=n(SAe,"A",{href:!0});var GJr=s(SB);Sdo=r(GJr,"CLIPFeatureExtractor"),GJr.forEach(t),Rdo=r(SAe," (CLIP model)"),SAe.forEach(t),Pdo=i(Z),lh=n(Z,"LI",{});var RAe=s(lh);nne=n(RAe,"STRONG",{});var OJr=s(nne);Bdo=r(OJr,"convnext"),OJr.forEach(t),Ido=r(RAe," \u2014 "),RB=n(RAe,"A",{href:!0});var VJr=s(RB);qdo=r(VJr,"ConvNextFeatureExtractor"),VJr.forEach(t),Ndo=r(RAe," (ConvNext model)"),RAe.forEach(t),jdo=i(Z),ih=n(Z,"LI",{});var PAe=s(ih);sne=n(PAe,"STRONG",{});var XJr=s(sne);Ddo=r(XJr,"cvt"),XJr.forEach(t),Gdo=r(PAe," \u2014 "),PB=n(PAe,"A",{href:!0});var zJr=s(PB);Odo=r(zJr,"ConvNextFeatureExtractor"),zJr.forEach(t),Vdo=r(PAe," (CvT model)"),PAe.forEach(t),Xdo=i(Z),dh=n(Z,"LI",{});var BAe=s(dh);lne=n(BAe,"STRONG",{});var WJr=s(lne);zdo=r(WJr,"data2vec-audio"),WJr.forEach(t),Wdo=r(BAe," \u2014 "),BB=n(BAe,"A",{href:!0});var QJr=s(BB);Qdo=r(QJr,"Wav2Vec2FeatureExtractor"),QJr.forEach(t),Hdo=r(BAe," (Data2VecAudio model)"),BAe.forEach(t),Udo=i(Z),ch=n(Z,"LI",{});var IAe=s(ch);ine=n(IAe,"STRONG",{});var HJr=s(ine);Jdo=r(HJr,"data2vec-vision"),HJr.forEach(t),Ydo=r(IAe," \u2014 "),IB=n(IAe,"A",{href:!0});var UJr=s(IB);Kdo=r(UJr,"BeitFeatureExtractor"),UJr.forEach(t),Zdo=r(IAe," (Data2VecVision model)"),IAe.forEach(t),eco=i(Z),mh=n(Z,"LI",{});var qAe=s(mh);dne=n(qAe,"STRONG",{});var JJr=s(dne);oco=r(JJr,"deit"),JJr.forEach(t),rco=r(qAe," \u2014 "),qB=n(qAe,"A",{href:!0});var YJr=s(qB);tco=r(YJr,"DeiTFeatureExtractor"),YJr.forEach(t),aco=r(qAe," (DeiT model)"),qAe.forEach(t),nco=i(Z),fh=n(Z,"LI",{});var NAe=s(fh);cne=n(NAe,"STRONG",{});var KJr=s(cne);sco=r(KJr,"detr"),KJr.forEach(t),lco=r(NAe," \u2014 "),NB=n(NAe,"A",{href:!0});var ZJr=s(NB);ico=r(ZJr,"DetrFeatureExtractor"),ZJr.forEach(t),dco=r(NAe," (DETR model)"),NAe.forEach(t),cco=i(Z),gh=n(Z,"LI",{});var jAe=s(gh);mne=n(jAe,"STRONG",{});var eYr=s(mne);mco=r(eYr,"dpt"),eYr.forEach(t),fco=r(jAe," \u2014 "),jB=n(jAe,"A",{href:!0});var oYr=s(jB);gco=r(oYr,"DPTFeatureExtractor"),oYr.forEach(t),hco=r(jAe," (DPT model)"),jAe.forEach(t),uco=i(Z),hh=n(Z,"LI",{});var DAe=s(hh);fne=n(DAe,"STRONG",{});var rYr=s(fne);pco=r(rYr,"flava"),rYr.forEach(t),_co=r(DAe," \u2014 "),DB=n(DAe,"A",{href:!0});var tYr=s(DB);bco=r(tYr,"FlavaFeatureExtractor"),tYr.forEach(t),vco=r(DAe," (Flava model)"),DAe.forEach(t),Fco=i(Z),uh=n(Z,"LI",{});var GAe=s(uh);gne=n(GAe,"STRONG",{});var aYr=s(gne);Tco=r(aYr,"glpn"),aYr.forEach(t),Mco=r(GAe," \u2014 "),GB=n(GAe,"A",{href:!0});var nYr=s(GB);Eco=r(nYr,"GLPNFeatureExtractor"),nYr.forEach(t),Cco=r(GAe," (GLPN model)"),GAe.forEach(t),wco=i(Z),ph=n(Z,"LI",{});var OAe=s(ph);hne=n(OAe,"STRONG",{});var sYr=s(hne);Aco=r(sYr,"hubert"),sYr.forEach(t),yco=r(OAe," \u2014 "),OB=n(OAe,"A",{href:!0});var lYr=s(OB);Lco=r(lYr,"Wav2Vec2FeatureExtractor"),lYr.forEach(t),xco=r(OAe," (Hubert model)"),OAe.forEach(t),$co=i(Z),_h=n(Z,"LI",{});var VAe=s(_h);une=n(VAe,"STRONG",{});var iYr=s(une);kco=r(iYr,"imagegpt"),iYr.forEach(t),Sco=r(VAe," \u2014 "),VB=n(VAe,"A",{href:!0});var dYr=s(VB);Rco=r(dYr,"ImageGPTFeatureExtractor"),dYr.forEach(t),Pco=r(VAe," (ImageGPT model)"),VAe.forEach(t),Bco=i(Z),bh=n(Z,"LI",{});var XAe=s(bh);pne=n(XAe,"STRONG",{});var cYr=s(pne);Ico=r(cYr,"layoutlmv2"),cYr.forEach(t),qco=r(XAe," \u2014 "),XB=n(XAe,"A",{href:!0});var mYr=s(XB);Nco=r(mYr,"LayoutLMv2FeatureExtractor"),mYr.forEach(t),jco=r(XAe," (LayoutLMv2 model)"),XAe.forEach(t),Dco=i(Z),vh=n(Z,"LI",{});var zAe=s(vh);_ne=n(zAe,"STRONG",{});var fYr=s(_ne);Gco=r(fYr,"layoutlmv3"),fYr.forEach(t),Oco=r(zAe," \u2014 "),zB=n(zAe,"A",{href:!0});var gYr=s(zB);Vco=r(gYr,"LayoutLMv3FeatureExtractor"),gYr.forEach(t),Xco=r(zAe," (LayoutLMv3 model)"),zAe.forEach(t),zco=i(Z),Fh=n(Z,"LI",{});var WAe=s(Fh);bne=n(WAe,"STRONG",{});var hYr=s(bne);Wco=r(hYr,"maskformer"),hYr.forEach(t),Qco=r(WAe," \u2014 "),WB=n(WAe,"A",{href:!0});var uYr=s(WB);Hco=r(uYr,"MaskFormerFeatureExtractor"),uYr.forEach(t),Uco=r(WAe," (MaskFormer model)"),WAe.forEach(t),Jco=i(Z),Th=n(Z,"LI",{});var QAe=s(Th);vne=n(QAe,"STRONG",{});var pYr=s(vne);Yco=r(pYr,"perceiver"),pYr.forEach(t),Kco=r(QAe," \u2014 "),QB=n(QAe,"A",{href:!0});var _Yr=s(QB);Zco=r(_Yr,"PerceiverFeatureExtractor"),_Yr.forEach(t),emo=r(QAe," (Perceiver model)"),QAe.forEach(t),omo=i(Z),Mh=n(Z,"LI",{});var HAe=s(Mh);Fne=n(HAe,"STRONG",{});var bYr=s(Fne);rmo=r(bYr,"poolformer"),bYr.forEach(t),tmo=r(HAe," \u2014 "),HB=n(HAe,"A",{href:!0});var vYr=s(HB);amo=r(vYr,"PoolFormerFeatureExtractor"),vYr.forEach(t),nmo=r(HAe," (PoolFormer model)"),HAe.forEach(t),smo=i(Z),Eh=n(Z,"LI",{});var UAe=s(Eh);Tne=n(UAe,"STRONG",{});var FYr=s(Tne);lmo=r(FYr,"regnet"),FYr.forEach(t),imo=r(UAe," \u2014 "),UB=n(UAe,"A",{href:!0});var TYr=s(UB);dmo=r(TYr,"ConvNextFeatureExtractor"),TYr.forEach(t),cmo=r(UAe," (RegNet model)"),UAe.forEach(t),mmo=i(Z),Ch=n(Z,"LI",{});var JAe=s(Ch);Mne=n(JAe,"STRONG",{});var MYr=s(Mne);fmo=r(MYr,"resnet"),MYr.forEach(t),gmo=r(JAe," \u2014 "),JB=n(JAe,"A",{href:!0});var EYr=s(JB);hmo=r(EYr,"ConvNextFeatureExtractor"),EYr.forEach(t),umo=r(JAe," (ResNet model)"),JAe.forEach(t),pmo=i(Z),wh=n(Z,"LI",{});var YAe=s(wh);Ene=n(YAe,"STRONG",{});var CYr=s(Ene);_mo=r(CYr,"segformer"),CYr.forEach(t),bmo=r(YAe," \u2014 "),YB=n(YAe,"A",{href:!0});var wYr=s(YB);vmo=r(wYr,"SegformerFeatureExtractor"),wYr.forEach(t),Fmo=r(YAe," (SegFormer model)"),YAe.forEach(t),Tmo=i(Z),Ah=n(Z,"LI",{});var KAe=s(Ah);Cne=n(KAe,"STRONG",{});var AYr=s(Cne);Mmo=r(AYr,"speech_to_text"),AYr.forEach(t),Emo=r(KAe," \u2014 "),KB=n(KAe,"A",{href:!0});var yYr=s(KB);Cmo=r(yYr,"Speech2TextFeatureExtractor"),yYr.forEach(t),wmo=r(KAe," (Speech2Text model)"),KAe.forEach(t),Amo=i(Z),yh=n(Z,"LI",{});var ZAe=s(yh);wne=n(ZAe,"STRONG",{});var LYr=s(wne);ymo=r(LYr,"swin"),LYr.forEach(t),Lmo=r(ZAe," \u2014 "),ZB=n(ZAe,"A",{href:!0});var xYr=s(ZB);xmo=r(xYr,"ViTFeatureExtractor"),xYr.forEach(t),$mo=r(ZAe," (Swin model)"),ZAe.forEach(t),kmo=i(Z),Lh=n(Z,"LI",{});var e6e=s(Lh);Ane=n(e6e,"STRONG",{});var $Yr=s(Ane);Smo=r($Yr,"van"),$Yr.forEach(t),Rmo=r(e6e," \u2014 "),eI=n(e6e,"A",{href:!0});var kYr=s(eI);Pmo=r(kYr,"ConvNextFeatureExtractor"),kYr.forEach(t),Bmo=r(e6e," (VAN model)"),e6e.forEach(t),Imo=i(Z),xh=n(Z,"LI",{});var o6e=s(xh);yne=n(o6e,"STRONG",{});var SYr=s(yne);qmo=r(SYr,"vit"),SYr.forEach(t),Nmo=r(o6e," \u2014 "),oI=n(o6e,"A",{href:!0});var RYr=s(oI);jmo=r(RYr,"ViTFeatureExtractor"),RYr.forEach(t),Dmo=r(o6e," (ViT model)"),o6e.forEach(t),Gmo=i(Z),$h=n(Z,"LI",{});var r6e=s($h);Lne=n(r6e,"STRONG",{});var PYr=s(Lne);Omo=r(PYr,"vit_mae"),PYr.forEach(t),Vmo=r(r6e," \u2014 "),rI=n(r6e,"A",{href:!0});var BYr=s(rI);Xmo=r(BYr,"ViTFeatureExtractor"),BYr.forEach(t),zmo=r(r6e," (ViTMAE model)"),r6e.forEach(t),Wmo=i(Z),kh=n(Z,"LI",{});var t6e=s(kh);xne=n(t6e,"STRONG",{});var IYr=s(xne);Qmo=r(IYr,"wav2vec2"),IYr.forEach(t),Hmo=r(t6e," \u2014 "),tI=n(t6e,"A",{href:!0});var qYr=s(tI);Umo=r(qYr,"Wav2Vec2FeatureExtractor"),qYr.forEach(t),Jmo=r(t6e," (Wav2Vec2 model)"),t6e.forEach(t),Ymo=i(Z),Sh=n(Z,"LI",{});var a6e=s(Sh);$ne=n(a6e,"STRONG",{});var NYr=s($ne);Kmo=r(NYr,"wav2vec2-conformer"),NYr.forEach(t),Zmo=r(a6e," \u2014 "),aI=n(a6e,"A",{href:!0});var jYr=s(aI);efo=r(jYr,"Wav2Vec2FeatureExtractor"),jYr.forEach(t),ofo=r(a6e," (Wav2Vec2-Conformer model)"),a6e.forEach(t),rfo=i(Z),Rh=n(Z,"LI",{});var n6e=s(Rh);kne=n(n6e,"STRONG",{});var DYr=s(kne);tfo=r(DYr,"yolos"),DYr.forEach(t),afo=r(n6e," \u2014 "),nI=n(n6e,"A",{href:!0});var GYr=s(nI);nfo=r(GYr,"YolosFeatureExtractor"),GYr.forEach(t),sfo=r(n6e," (YOLOS model)"),n6e.forEach(t),Z.forEach(t),lfo=i(Zt),T(Ph.$$.fragment,Zt),ifo=i(Zt),T(Bh.$$.fragment,Zt),Zt.forEach(t),dfo=i(js),Ih=n(js,"DIV",{class:!0});var Hje=s(Ih);T(Oy.$$.fragment,Hje),cfo=i(Hje),Sne=n(Hje,"P",{});var OYr=s(Sne);mfo=r(OYr,"Register a new feature extractor for this class."),OYr.forEach(t),Hje.forEach(t),js.forEach(t),Qqe=i(m),Ei=n(m,"H2",{class:!0});var Uje=s(Ei);qh=n(Uje,"A",{id:!0,class:!0,href:!0});var VYr=s(qh);Rne=n(VYr,"SPAN",{});var XYr=s(Rne);T(Vy.$$.fragment,XYr),XYr.forEach(t),VYr.forEach(t),ffo=i(Uje),Pne=n(Uje,"SPAN",{});var zYr=s(Pne);gfo=r(zYr,"AutoProcessor"),zYr.forEach(t),Uje.forEach(t),Hqe=i(m),yo=n(m,"DIV",{class:!0});var Ds=s(yo);T(Xy.$$.fragment,Ds),hfo=i(Ds),zy=n(Ds,"P",{});var Jje=s(zy);ufo=r(Jje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),sI=n(Jje,"A",{href:!0});var WYr=s(sI);pfo=r(WYr,"AutoProcessor.from_pretrained()"),WYr.forEach(t),_fo=r(Jje," class method."),Jje.forEach(t),bfo=i(Ds),Wy=n(Ds,"P",{});var Yje=s(Wy);vfo=r(Yje,"This class cannot be instantiated directly using "),Bne=n(Yje,"CODE",{});var QYr=s(Bne);Ffo=r(QYr,"__init__()"),QYr.forEach(t),Tfo=r(Yje," (throws an error)."),Yje.forEach(t),Mfo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(Qy.$$.fragment,ea),Efo=i(ea),Ine=n(ea,"P",{});var HYr=s(Ine);Cfo=r(HYr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),HYr.forEach(t),wfo=i(ea),Ci=n(ea,"P",{});var sZ=s(Ci);Afo=r(sZ,"The processor class to instantiate is selected based on the "),qne=n(sZ,"CODE",{});var UYr=s(qne);yfo=r(UYr,"model_type"),UYr.forEach(t),Lfo=r(sZ,` property of the config object (either
passed as an argument or loaded from `),Nne=n(sZ,"CODE",{});var JYr=s(Nne);xfo=r(JYr,"pretrained_model_name_or_path"),JYr.forEach(t),$fo=r(sZ," if possible):"),sZ.forEach(t),kfo=i(ea),he=n(ea,"UL",{});var _e=s(he);Nh=n(_e,"LI",{});var s6e=s(Nh);jne=n(s6e,"STRONG",{});var YYr=s(jne);Sfo=r(YYr,"clip"),YYr.forEach(t),Rfo=r(s6e," \u2014 "),lI=n(s6e,"A",{href:!0});var KYr=s(lI);Pfo=r(KYr,"CLIPProcessor"),KYr.forEach(t),Bfo=r(s6e," (CLIP model)"),s6e.forEach(t),Ifo=i(_e),jh=n(_e,"LI",{});var l6e=s(jh);Dne=n(l6e,"STRONG",{});var ZYr=s(Dne);qfo=r(ZYr,"flava"),ZYr.forEach(t),Nfo=r(l6e," \u2014 "),Gne=n(l6e,"CODE",{});var eKr=s(Gne);jfo=r(eKr,"FLAVAProcessor"),eKr.forEach(t),Dfo=r(l6e," (Flava model)"),l6e.forEach(t),Gfo=i(_e),Dh=n(_e,"LI",{});var i6e=s(Dh);One=n(i6e,"STRONG",{});var oKr=s(One);Ofo=r(oKr,"layoutlmv2"),oKr.forEach(t),Vfo=r(i6e," \u2014 "),iI=n(i6e,"A",{href:!0});var rKr=s(iI);Xfo=r(rKr,"LayoutLMv2Processor"),rKr.forEach(t),zfo=r(i6e," (LayoutLMv2 model)"),i6e.forEach(t),Wfo=i(_e),Gh=n(_e,"LI",{});var d6e=s(Gh);Vne=n(d6e,"STRONG",{});var tKr=s(Vne);Qfo=r(tKr,"layoutlmv3"),tKr.forEach(t),Hfo=r(d6e," \u2014 "),dI=n(d6e,"A",{href:!0});var aKr=s(dI);Ufo=r(aKr,"LayoutLMv3Processor"),aKr.forEach(t),Jfo=r(d6e," (LayoutLMv3 model)"),d6e.forEach(t),Yfo=i(_e),Oh=n(_e,"LI",{});var c6e=s(Oh);Xne=n(c6e,"STRONG",{});var nKr=s(Xne);Kfo=r(nKr,"layoutxlm"),nKr.forEach(t),Zfo=r(c6e," \u2014 "),cI=n(c6e,"A",{href:!0});var sKr=s(cI);ego=r(sKr,"LayoutXLMProcessor"),sKr.forEach(t),ogo=r(c6e," (LayoutXLM model)"),c6e.forEach(t),rgo=i(_e),Vh=n(_e,"LI",{});var m6e=s(Vh);zne=n(m6e,"STRONG",{});var lKr=s(zne);tgo=r(lKr,"sew"),lKr.forEach(t),ago=r(m6e," \u2014 "),mI=n(m6e,"A",{href:!0});var iKr=s(mI);ngo=r(iKr,"Wav2Vec2Processor"),iKr.forEach(t),sgo=r(m6e," (SEW model)"),m6e.forEach(t),lgo=i(_e),Xh=n(_e,"LI",{});var f6e=s(Xh);Wne=n(f6e,"STRONG",{});var dKr=s(Wne);igo=r(dKr,"sew-d"),dKr.forEach(t),dgo=r(f6e," \u2014 "),fI=n(f6e,"A",{href:!0});var cKr=s(fI);cgo=r(cKr,"Wav2Vec2Processor"),cKr.forEach(t),mgo=r(f6e," (SEW-D model)"),f6e.forEach(t),fgo=i(_e),zh=n(_e,"LI",{});var g6e=s(zh);Qne=n(g6e,"STRONG",{});var mKr=s(Qne);ggo=r(mKr,"speech_to_text"),mKr.forEach(t),hgo=r(g6e," \u2014 "),gI=n(g6e,"A",{href:!0});var fKr=s(gI);ugo=r(fKr,"Speech2TextProcessor"),fKr.forEach(t),pgo=r(g6e," (Speech2Text model)"),g6e.forEach(t),_go=i(_e),Wh=n(_e,"LI",{});var h6e=s(Wh);Hne=n(h6e,"STRONG",{});var gKr=s(Hne);bgo=r(gKr,"speech_to_text_2"),gKr.forEach(t),vgo=r(h6e," \u2014 "),hI=n(h6e,"A",{href:!0});var hKr=s(hI);Fgo=r(hKr,"Speech2Text2Processor"),hKr.forEach(t),Tgo=r(h6e," (Speech2Text2 model)"),h6e.forEach(t),Mgo=i(_e),Qh=n(_e,"LI",{});var u6e=s(Qh);Une=n(u6e,"STRONG",{});var uKr=s(Une);Ego=r(uKr,"trocr"),uKr.forEach(t),Cgo=r(u6e," \u2014 "),uI=n(u6e,"A",{href:!0});var pKr=s(uI);wgo=r(pKr,"TrOCRProcessor"),pKr.forEach(t),Ago=r(u6e," (TrOCR model)"),u6e.forEach(t),ygo=i(_e),Hh=n(_e,"LI",{});var p6e=s(Hh);Jne=n(p6e,"STRONG",{});var _Kr=s(Jne);Lgo=r(_Kr,"unispeech"),_Kr.forEach(t),xgo=r(p6e," \u2014 "),pI=n(p6e,"A",{href:!0});var bKr=s(pI);$go=r(bKr,"Wav2Vec2Processor"),bKr.forEach(t),kgo=r(p6e," (UniSpeech model)"),p6e.forEach(t),Sgo=i(_e),Uh=n(_e,"LI",{});var _6e=s(Uh);Yne=n(_6e,"STRONG",{});var vKr=s(Yne);Rgo=r(vKr,"unispeech-sat"),vKr.forEach(t),Pgo=r(_6e," \u2014 "),_I=n(_6e,"A",{href:!0});var FKr=s(_I);Bgo=r(FKr,"Wav2Vec2Processor"),FKr.forEach(t),Igo=r(_6e," (UniSpeechSat model)"),_6e.forEach(t),qgo=i(_e),Jh=n(_e,"LI",{});var b6e=s(Jh);Kne=n(b6e,"STRONG",{});var TKr=s(Kne);Ngo=r(TKr,"vilt"),TKr.forEach(t),jgo=r(b6e," \u2014 "),bI=n(b6e,"A",{href:!0});var MKr=s(bI);Dgo=r(MKr,"ViltProcessor"),MKr.forEach(t),Ggo=r(b6e," (ViLT model)"),b6e.forEach(t),Ogo=i(_e),Yh=n(_e,"LI",{});var v6e=s(Yh);Zne=n(v6e,"STRONG",{});var EKr=s(Zne);Vgo=r(EKr,"vision-text-dual-encoder"),EKr.forEach(t),Xgo=r(v6e," \u2014 "),vI=n(v6e,"A",{href:!0});var CKr=s(vI);zgo=r(CKr,"VisionTextDualEncoderProcessor"),CKr.forEach(t),Wgo=r(v6e," (VisionTextDualEncoder model)"),v6e.forEach(t),Qgo=i(_e),Kh=n(_e,"LI",{});var F6e=s(Kh);ese=n(F6e,"STRONG",{});var wKr=s(ese);Hgo=r(wKr,"wav2vec2"),wKr.forEach(t),Ugo=r(F6e," \u2014 "),FI=n(F6e,"A",{href:!0});var AKr=s(FI);Jgo=r(AKr,"Wav2Vec2Processor"),AKr.forEach(t),Ygo=r(F6e," (Wav2Vec2 model)"),F6e.forEach(t),Kgo=i(_e),Zh=n(_e,"LI",{});var T6e=s(Zh);ose=n(T6e,"STRONG",{});var yKr=s(ose);Zgo=r(yKr,"wav2vec2-conformer"),yKr.forEach(t),eho=r(T6e," \u2014 "),TI=n(T6e,"A",{href:!0});var LKr=s(TI);oho=r(LKr,"Wav2Vec2Processor"),LKr.forEach(t),rho=r(T6e," (Wav2Vec2-Conformer model)"),T6e.forEach(t),tho=i(_e),eu=n(_e,"LI",{});var M6e=s(eu);rse=n(M6e,"STRONG",{});var xKr=s(rse);aho=r(xKr,"wavlm"),xKr.forEach(t),nho=r(M6e," \u2014 "),MI=n(M6e,"A",{href:!0});var $Kr=s(MI);sho=r($Kr,"Wav2Vec2Processor"),$Kr.forEach(t),lho=r(M6e," (WavLM model)"),M6e.forEach(t),_e.forEach(t),iho=i(ea),T(ou.$$.fragment,ea),dho=i(ea),T(ru.$$.fragment,ea),ea.forEach(t),cho=i(Ds),tu=n(Ds,"DIV",{class:!0});var Kje=s(tu);T(Hy.$$.fragment,Kje),mho=i(Kje),tse=n(Kje,"P",{});var kKr=s(tse);fho=r(kKr,"Register a new processor for this class."),kKr.forEach(t),Kje.forEach(t),Ds.forEach(t),Uqe=i(m),wi=n(m,"H2",{class:!0});var Zje=s(wi);au=n(Zje,"A",{id:!0,class:!0,href:!0});var SKr=s(au);ase=n(SKr,"SPAN",{});var RKr=s(ase);T(Uy.$$.fragment,RKr),RKr.forEach(t),SKr.forEach(t),gho=i(Zje),nse=n(Zje,"SPAN",{});var PKr=s(nse);hho=r(PKr,"AutoModel"),PKr.forEach(t),Zje.forEach(t),Jqe=i(m),Lo=n(m,"DIV",{class:!0});var Gs=s(Lo);T(Jy.$$.fragment,Gs),uho=i(Gs),Ai=n(Gs,"P",{});var lZ=s(Ai);pho=r(lZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EI=n(lZ,"A",{href:!0});var BKr=s(EI);_ho=r(BKr,"from_pretrained()"),BKr.forEach(t),bho=r(lZ," class method or the "),CI=n(lZ,"A",{href:!0});var IKr=s(CI);vho=r(IKr,"from_config()"),IKr.forEach(t),Fho=r(lZ,` class
method.`),lZ.forEach(t),Tho=i(Gs),Yy=n(Gs,"P",{});var eDe=s(Yy);Mho=r(eDe,"This class cannot be instantiated directly using "),sse=n(eDe,"CODE",{});var qKr=s(sse);Eho=r(qKr,"__init__()"),qKr.forEach(t),Cho=r(eDe," (throws an error)."),eDe.forEach(t),who=i(Gs),tt=n(Gs,"DIV",{class:!0});var yA=s(tt);T(Ky.$$.fragment,yA),Aho=i(yA),lse=n(yA,"P",{});var NKr=s(lse);yho=r(NKr,"Instantiates one of the base model classes of the library from a configuration."),NKr.forEach(t),Lho=i(yA),yi=n(yA,"P",{});var iZ=s(yi);xho=r(iZ,`Note:
Loading a model from its configuration file does `),ise=n(iZ,"STRONG",{});var jKr=s(ise);$ho=r(jKr,"not"),jKr.forEach(t),kho=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=n(iZ,"A",{href:!0});var DKr=s(wI);Sho=r(DKr,"from_pretrained()"),DKr.forEach(t),Rho=r(iZ," to load the model weights."),iZ.forEach(t),Pho=i(yA),T(nu.$$.fragment,yA),yA.forEach(t),Bho=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(Zy.$$.fragment,oa),Iho=i(oa),dse=n(oa,"P",{});var GKr=s(dse);qho=r(GKr,"Instantiate one of the base model classes of the library from a pretrained model."),GKr.forEach(t),Nho=i(oa),La=n(oa,"P",{});var LA=s(La);jho=r(LA,"The model class to instantiate is selected based on the "),cse=n(LA,"CODE",{});var OKr=s(cse);Dho=r(OKr,"model_type"),OKr.forEach(t),Gho=r(LA,` property of the config object (either
passed as an argument or loaded from `),mse=n(LA,"CODE",{});var VKr=s(mse);Oho=r(VKr,"pretrained_model_name_or_path"),VKr.forEach(t),Vho=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=n(LA,"CODE",{});var XKr=s(fse);Xho=r(XKr,"pretrained_model_name_or_path"),XKr.forEach(t),zho=r(LA,":"),LA.forEach(t),Who=i(oa),x=n(oa,"UL",{});var $=s(x);su=n($,"LI",{});var E6e=s(su);gse=n(E6e,"STRONG",{});var zKr=s(gse);Qho=r(zKr,"albert"),zKr.forEach(t),Hho=r(E6e," \u2014 "),AI=n(E6e,"A",{href:!0});var WKr=s(AI);Uho=r(WKr,"AlbertModel"),WKr.forEach(t),Jho=r(E6e," (ALBERT model)"),E6e.forEach(t),Yho=i($),lu=n($,"LI",{});var C6e=s(lu);hse=n(C6e,"STRONG",{});var QKr=s(hse);Kho=r(QKr,"bart"),QKr.forEach(t),Zho=r(C6e," \u2014 "),yI=n(C6e,"A",{href:!0});var HKr=s(yI);euo=r(HKr,"BartModel"),HKr.forEach(t),ouo=r(C6e," (BART model)"),C6e.forEach(t),ruo=i($),iu=n($,"LI",{});var w6e=s(iu);use=n(w6e,"STRONG",{});var UKr=s(use);tuo=r(UKr,"beit"),UKr.forEach(t),auo=r(w6e," \u2014 "),LI=n(w6e,"A",{href:!0});var JKr=s(LI);nuo=r(JKr,"BeitModel"),JKr.forEach(t),suo=r(w6e," (BEiT model)"),w6e.forEach(t),luo=i($),du=n($,"LI",{});var A6e=s(du);pse=n(A6e,"STRONG",{});var YKr=s(pse);iuo=r(YKr,"bert"),YKr.forEach(t),duo=r(A6e," \u2014 "),xI=n(A6e,"A",{href:!0});var KKr=s(xI);cuo=r(KKr,"BertModel"),KKr.forEach(t),muo=r(A6e," (BERT model)"),A6e.forEach(t),fuo=i($),cu=n($,"LI",{});var y6e=s(cu);_se=n(y6e,"STRONG",{});var ZKr=s(_se);guo=r(ZKr,"bert-generation"),ZKr.forEach(t),huo=r(y6e," \u2014 "),$I=n(y6e,"A",{href:!0});var eZr=s($I);uuo=r(eZr,"BertGenerationEncoder"),eZr.forEach(t),puo=r(y6e," (Bert Generation model)"),y6e.forEach(t),_uo=i($),mu=n($,"LI",{});var L6e=s(mu);bse=n(L6e,"STRONG",{});var oZr=s(bse);buo=r(oZr,"big_bird"),oZr.forEach(t),vuo=r(L6e," \u2014 "),kI=n(L6e,"A",{href:!0});var rZr=s(kI);Fuo=r(rZr,"BigBirdModel"),rZr.forEach(t),Tuo=r(L6e," (BigBird model)"),L6e.forEach(t),Muo=i($),fu=n($,"LI",{});var x6e=s(fu);vse=n(x6e,"STRONG",{});var tZr=s(vse);Euo=r(tZr,"bigbird_pegasus"),tZr.forEach(t),Cuo=r(x6e," \u2014 "),SI=n(x6e,"A",{href:!0});var aZr=s(SI);wuo=r(aZr,"BigBirdPegasusModel"),aZr.forEach(t),Auo=r(x6e," (BigBirdPegasus model)"),x6e.forEach(t),yuo=i($),gu=n($,"LI",{});var $6e=s(gu);Fse=n($6e,"STRONG",{});var nZr=s(Fse);Luo=r(nZr,"blenderbot"),nZr.forEach(t),xuo=r($6e," \u2014 "),RI=n($6e,"A",{href:!0});var sZr=s(RI);$uo=r(sZr,"BlenderbotModel"),sZr.forEach(t),kuo=r($6e," (Blenderbot model)"),$6e.forEach(t),Suo=i($),hu=n($,"LI",{});var k6e=s(hu);Tse=n(k6e,"STRONG",{});var lZr=s(Tse);Ruo=r(lZr,"blenderbot-small"),lZr.forEach(t),Puo=r(k6e," \u2014 "),PI=n(k6e,"A",{href:!0});var iZr=s(PI);Buo=r(iZr,"BlenderbotSmallModel"),iZr.forEach(t),Iuo=r(k6e," (BlenderbotSmall model)"),k6e.forEach(t),quo=i($),uu=n($,"LI",{});var S6e=s(uu);Mse=n(S6e,"STRONG",{});var dZr=s(Mse);Nuo=r(dZr,"camembert"),dZr.forEach(t),juo=r(S6e," \u2014 "),BI=n(S6e,"A",{href:!0});var cZr=s(BI);Duo=r(cZr,"CamembertModel"),cZr.forEach(t),Guo=r(S6e," (CamemBERT model)"),S6e.forEach(t),Ouo=i($),pu=n($,"LI",{});var R6e=s(pu);Ese=n(R6e,"STRONG",{});var mZr=s(Ese);Vuo=r(mZr,"canine"),mZr.forEach(t),Xuo=r(R6e," \u2014 "),II=n(R6e,"A",{href:!0});var fZr=s(II);zuo=r(fZr,"CanineModel"),fZr.forEach(t),Wuo=r(R6e," (Canine model)"),R6e.forEach(t),Quo=i($),_u=n($,"LI",{});var P6e=s(_u);Cse=n(P6e,"STRONG",{});var gZr=s(Cse);Huo=r(gZr,"clip"),gZr.forEach(t),Uuo=r(P6e," \u2014 "),qI=n(P6e,"A",{href:!0});var hZr=s(qI);Juo=r(hZr,"CLIPModel"),hZr.forEach(t),Yuo=r(P6e," (CLIP model)"),P6e.forEach(t),Kuo=i($),bu=n($,"LI",{});var B6e=s(bu);wse=n(B6e,"STRONG",{});var uZr=s(wse);Zuo=r(uZr,"convbert"),uZr.forEach(t),epo=r(B6e," \u2014 "),NI=n(B6e,"A",{href:!0});var pZr=s(NI);opo=r(pZr,"ConvBertModel"),pZr.forEach(t),rpo=r(B6e," (ConvBERT model)"),B6e.forEach(t),tpo=i($),vu=n($,"LI",{});var I6e=s(vu);Ase=n(I6e,"STRONG",{});var _Zr=s(Ase);apo=r(_Zr,"convnext"),_Zr.forEach(t),npo=r(I6e," \u2014 "),jI=n(I6e,"A",{href:!0});var bZr=s(jI);spo=r(bZr,"ConvNextModel"),bZr.forEach(t),lpo=r(I6e," (ConvNext model)"),I6e.forEach(t),ipo=i($),Fu=n($,"LI",{});var q6e=s(Fu);yse=n(q6e,"STRONG",{});var vZr=s(yse);dpo=r(vZr,"ctrl"),vZr.forEach(t),cpo=r(q6e," \u2014 "),DI=n(q6e,"A",{href:!0});var FZr=s(DI);mpo=r(FZr,"CTRLModel"),FZr.forEach(t),fpo=r(q6e," (CTRL model)"),q6e.forEach(t),gpo=i($),Tu=n($,"LI",{});var N6e=s(Tu);Lse=n(N6e,"STRONG",{});var TZr=s(Lse);hpo=r(TZr,"cvt"),TZr.forEach(t),upo=r(N6e," \u2014 "),GI=n(N6e,"A",{href:!0});var MZr=s(GI);ppo=r(MZr,"CvtModel"),MZr.forEach(t),_po=r(N6e," (CvT model)"),N6e.forEach(t),bpo=i($),Mu=n($,"LI",{});var j6e=s(Mu);xse=n(j6e,"STRONG",{});var EZr=s(xse);vpo=r(EZr,"data2vec-audio"),EZr.forEach(t),Fpo=r(j6e," \u2014 "),OI=n(j6e,"A",{href:!0});var CZr=s(OI);Tpo=r(CZr,"Data2VecAudioModel"),CZr.forEach(t),Mpo=r(j6e," (Data2VecAudio model)"),j6e.forEach(t),Epo=i($),Eu=n($,"LI",{});var D6e=s(Eu);$se=n(D6e,"STRONG",{});var wZr=s($se);Cpo=r(wZr,"data2vec-text"),wZr.forEach(t),wpo=r(D6e," \u2014 "),VI=n(D6e,"A",{href:!0});var AZr=s(VI);Apo=r(AZr,"Data2VecTextModel"),AZr.forEach(t),ypo=r(D6e," (Data2VecText model)"),D6e.forEach(t),Lpo=i($),Cu=n($,"LI",{});var G6e=s(Cu);kse=n(G6e,"STRONG",{});var yZr=s(kse);xpo=r(yZr,"data2vec-vision"),yZr.forEach(t),$po=r(G6e," \u2014 "),XI=n(G6e,"A",{href:!0});var LZr=s(XI);kpo=r(LZr,"Data2VecVisionModel"),LZr.forEach(t),Spo=r(G6e," (Data2VecVision model)"),G6e.forEach(t),Rpo=i($),wu=n($,"LI",{});var O6e=s(wu);Sse=n(O6e,"STRONG",{});var xZr=s(Sse);Ppo=r(xZr,"deberta"),xZr.forEach(t),Bpo=r(O6e," \u2014 "),zI=n(O6e,"A",{href:!0});var $Zr=s(zI);Ipo=r($Zr,"DebertaModel"),$Zr.forEach(t),qpo=r(O6e," (DeBERTa model)"),O6e.forEach(t),Npo=i($),Au=n($,"LI",{});var V6e=s(Au);Rse=n(V6e,"STRONG",{});var kZr=s(Rse);jpo=r(kZr,"deberta-v2"),kZr.forEach(t),Dpo=r(V6e," \u2014 "),WI=n(V6e,"A",{href:!0});var SZr=s(WI);Gpo=r(SZr,"DebertaV2Model"),SZr.forEach(t),Opo=r(V6e," (DeBERTa-v2 model)"),V6e.forEach(t),Vpo=i($),yu=n($,"LI",{});var X6e=s(yu);Pse=n(X6e,"STRONG",{});var RZr=s(Pse);Xpo=r(RZr,"decision_transformer"),RZr.forEach(t),zpo=r(X6e," \u2014 "),QI=n(X6e,"A",{href:!0});var PZr=s(QI);Wpo=r(PZr,"DecisionTransformerModel"),PZr.forEach(t),Qpo=r(X6e," (Decision Transformer model)"),X6e.forEach(t),Hpo=i($),Lu=n($,"LI",{});var z6e=s(Lu);Bse=n(z6e,"STRONG",{});var BZr=s(Bse);Upo=r(BZr,"deit"),BZr.forEach(t),Jpo=r(z6e," \u2014 "),HI=n(z6e,"A",{href:!0});var IZr=s(HI);Ypo=r(IZr,"DeiTModel"),IZr.forEach(t),Kpo=r(z6e," (DeiT model)"),z6e.forEach(t),Zpo=i($),xu=n($,"LI",{});var W6e=s(xu);Ise=n(W6e,"STRONG",{});var qZr=s(Ise);e_o=r(qZr,"detr"),qZr.forEach(t),o_o=r(W6e," \u2014 "),UI=n(W6e,"A",{href:!0});var NZr=s(UI);r_o=r(NZr,"DetrModel"),NZr.forEach(t),t_o=r(W6e," (DETR model)"),W6e.forEach(t),a_o=i($),$u=n($,"LI",{});var Q6e=s($u);qse=n(Q6e,"STRONG",{});var jZr=s(qse);n_o=r(jZr,"distilbert"),jZr.forEach(t),s_o=r(Q6e," \u2014 "),JI=n(Q6e,"A",{href:!0});var DZr=s(JI);l_o=r(DZr,"DistilBertModel"),DZr.forEach(t),i_o=r(Q6e," (DistilBERT model)"),Q6e.forEach(t),d_o=i($),ku=n($,"LI",{});var H6e=s(ku);Nse=n(H6e,"STRONG",{});var GZr=s(Nse);c_o=r(GZr,"dpr"),GZr.forEach(t),m_o=r(H6e," \u2014 "),YI=n(H6e,"A",{href:!0});var OZr=s(YI);f_o=r(OZr,"DPRQuestionEncoder"),OZr.forEach(t),g_o=r(H6e," (DPR model)"),H6e.forEach(t),h_o=i($),Su=n($,"LI",{});var U6e=s(Su);jse=n(U6e,"STRONG",{});var VZr=s(jse);u_o=r(VZr,"dpt"),VZr.forEach(t),p_o=r(U6e," \u2014 "),KI=n(U6e,"A",{href:!0});var XZr=s(KI);__o=r(XZr,"DPTModel"),XZr.forEach(t),b_o=r(U6e," (DPT model)"),U6e.forEach(t),v_o=i($),Ru=n($,"LI",{});var J6e=s(Ru);Dse=n(J6e,"STRONG",{});var zZr=s(Dse);F_o=r(zZr,"electra"),zZr.forEach(t),T_o=r(J6e," \u2014 "),ZI=n(J6e,"A",{href:!0});var WZr=s(ZI);M_o=r(WZr,"ElectraModel"),WZr.forEach(t),E_o=r(J6e," (ELECTRA model)"),J6e.forEach(t),C_o=i($),Pu=n($,"LI",{});var Y6e=s(Pu);Gse=n(Y6e,"STRONG",{});var QZr=s(Gse);w_o=r(QZr,"flaubert"),QZr.forEach(t),A_o=r(Y6e," \u2014 "),eq=n(Y6e,"A",{href:!0});var HZr=s(eq);y_o=r(HZr,"FlaubertModel"),HZr.forEach(t),L_o=r(Y6e," (FlauBERT model)"),Y6e.forEach(t),x_o=i($),Bu=n($,"LI",{});var K6e=s(Bu);Ose=n(K6e,"STRONG",{});var UZr=s(Ose);$_o=r(UZr,"flava"),UZr.forEach(t),k_o=r(K6e," \u2014 "),oq=n(K6e,"A",{href:!0});var JZr=s(oq);S_o=r(JZr,"FlavaModel"),JZr.forEach(t),R_o=r(K6e," (Flava model)"),K6e.forEach(t),P_o=i($),Iu=n($,"LI",{});var Z6e=s(Iu);Vse=n(Z6e,"STRONG",{});var YZr=s(Vse);B_o=r(YZr,"fnet"),YZr.forEach(t),I_o=r(Z6e," \u2014 "),rq=n(Z6e,"A",{href:!0});var KZr=s(rq);q_o=r(KZr,"FNetModel"),KZr.forEach(t),N_o=r(Z6e," (FNet model)"),Z6e.forEach(t),j_o=i($),qu=n($,"LI",{});var eye=s(qu);Xse=n(eye,"STRONG",{});var ZZr=s(Xse);D_o=r(ZZr,"fsmt"),ZZr.forEach(t),G_o=r(eye," \u2014 "),tq=n(eye,"A",{href:!0});var eet=s(tq);O_o=r(eet,"FSMTModel"),eet.forEach(t),V_o=r(eye," (FairSeq Machine-Translation model)"),eye.forEach(t),X_o=i($),Ps=n($,"LI",{});var N$=s(Ps);zse=n(N$,"STRONG",{});var oet=s(zse);z_o=r(oet,"funnel"),oet.forEach(t),W_o=r(N$," \u2014 "),aq=n(N$,"A",{href:!0});var ret=s(aq);Q_o=r(ret,"FunnelModel"),ret.forEach(t),H_o=r(N$," or "),nq=n(N$,"A",{href:!0});var tet=s(nq);U_o=r(tet,"FunnelBaseModel"),tet.forEach(t),J_o=r(N$," (Funnel Transformer model)"),N$.forEach(t),Y_o=i($),Nu=n($,"LI",{});var oye=s(Nu);Wse=n(oye,"STRONG",{});var aet=s(Wse);K_o=r(aet,"glpn"),aet.forEach(t),Z_o=r(oye," \u2014 "),sq=n(oye,"A",{href:!0});var net=s(sq);ebo=r(net,"GLPNModel"),net.forEach(t),obo=r(oye," (GLPN model)"),oye.forEach(t),rbo=i($),ju=n($,"LI",{});var rye=s(ju);Qse=n(rye,"STRONG",{});var set=s(Qse);tbo=r(set,"gpt2"),set.forEach(t),abo=r(rye," \u2014 "),lq=n(rye,"A",{href:!0});var iet=s(lq);nbo=r(iet,"GPT2Model"),iet.forEach(t),sbo=r(rye," (OpenAI GPT-2 model)"),rye.forEach(t),lbo=i($),Du=n($,"LI",{});var tye=s(Du);Hse=n(tye,"STRONG",{});var det=s(Hse);ibo=r(det,"gpt_neo"),det.forEach(t),dbo=r(tye," \u2014 "),iq=n(tye,"A",{href:!0});var cet=s(iq);cbo=r(cet,"GPTNeoModel"),cet.forEach(t),mbo=r(tye," (GPT Neo model)"),tye.forEach(t),fbo=i($),Gu=n($,"LI",{});var aye=s(Gu);Use=n(aye,"STRONG",{});var met=s(Use);gbo=r(met,"gptj"),met.forEach(t),hbo=r(aye," \u2014 "),dq=n(aye,"A",{href:!0});var fet=s(dq);ubo=r(fet,"GPTJModel"),fet.forEach(t),pbo=r(aye," (GPT-J model)"),aye.forEach(t),_bo=i($),Ou=n($,"LI",{});var nye=s(Ou);Jse=n(nye,"STRONG",{});var get=s(Jse);bbo=r(get,"hubert"),get.forEach(t),vbo=r(nye," \u2014 "),cq=n(nye,"A",{href:!0});var het=s(cq);Fbo=r(het,"HubertModel"),het.forEach(t),Tbo=r(nye," (Hubert model)"),nye.forEach(t),Mbo=i($),Vu=n($,"LI",{});var sye=s(Vu);Yse=n(sye,"STRONG",{});var uet=s(Yse);Ebo=r(uet,"ibert"),uet.forEach(t),Cbo=r(sye," \u2014 "),mq=n(sye,"A",{href:!0});var pet=s(mq);wbo=r(pet,"IBertModel"),pet.forEach(t),Abo=r(sye," (I-BERT model)"),sye.forEach(t),ybo=i($),Xu=n($,"LI",{});var lye=s(Xu);Kse=n(lye,"STRONG",{});var _et=s(Kse);Lbo=r(_et,"imagegpt"),_et.forEach(t),xbo=r(lye," \u2014 "),fq=n(lye,"A",{href:!0});var bet=s(fq);$bo=r(bet,"ImageGPTModel"),bet.forEach(t),kbo=r(lye," (ImageGPT model)"),lye.forEach(t),Sbo=i($),zu=n($,"LI",{});var iye=s(zu);Zse=n(iye,"STRONG",{});var vet=s(Zse);Rbo=r(vet,"layoutlm"),vet.forEach(t),Pbo=r(iye," \u2014 "),gq=n(iye,"A",{href:!0});var Fet=s(gq);Bbo=r(Fet,"LayoutLMModel"),Fet.forEach(t),Ibo=r(iye," (LayoutLM model)"),iye.forEach(t),qbo=i($),Wu=n($,"LI",{});var dye=s(Wu);ele=n(dye,"STRONG",{});var Tet=s(ele);Nbo=r(Tet,"layoutlmv2"),Tet.forEach(t),jbo=r(dye," \u2014 "),hq=n(dye,"A",{href:!0});var Met=s(hq);Dbo=r(Met,"LayoutLMv2Model"),Met.forEach(t),Gbo=r(dye," (LayoutLMv2 model)"),dye.forEach(t),Obo=i($),Qu=n($,"LI",{});var cye=s(Qu);ole=n(cye,"STRONG",{});var Eet=s(ole);Vbo=r(Eet,"layoutlmv3"),Eet.forEach(t),Xbo=r(cye," \u2014 "),uq=n(cye,"A",{href:!0});var Cet=s(uq);zbo=r(Cet,"LayoutLMv3Model"),Cet.forEach(t),Wbo=r(cye," (LayoutLMv3 model)"),cye.forEach(t),Qbo=i($),Hu=n($,"LI",{});var mye=s(Hu);rle=n(mye,"STRONG",{});var wet=s(rle);Hbo=r(wet,"led"),wet.forEach(t),Ubo=r(mye," \u2014 "),pq=n(mye,"A",{href:!0});var Aet=s(pq);Jbo=r(Aet,"LEDModel"),Aet.forEach(t),Ybo=r(mye," (LED model)"),mye.forEach(t),Kbo=i($),Uu=n($,"LI",{});var fye=s(Uu);tle=n(fye,"STRONG",{});var yet=s(tle);Zbo=r(yet,"longformer"),yet.forEach(t),e2o=r(fye," \u2014 "),_q=n(fye,"A",{href:!0});var Let=s(_q);o2o=r(Let,"LongformerModel"),Let.forEach(t),r2o=r(fye," (Longformer model)"),fye.forEach(t),t2o=i($),Ju=n($,"LI",{});var gye=s(Ju);ale=n(gye,"STRONG",{});var xet=s(ale);a2o=r(xet,"luke"),xet.forEach(t),n2o=r(gye," \u2014 "),bq=n(gye,"A",{href:!0});var $et=s(bq);s2o=r($et,"LukeModel"),$et.forEach(t),l2o=r(gye," (LUKE model)"),gye.forEach(t),i2o=i($),Yu=n($,"LI",{});var hye=s(Yu);nle=n(hye,"STRONG",{});var ket=s(nle);d2o=r(ket,"lxmert"),ket.forEach(t),c2o=r(hye," \u2014 "),vq=n(hye,"A",{href:!0});var Set=s(vq);m2o=r(Set,"LxmertModel"),Set.forEach(t),f2o=r(hye," (LXMERT model)"),hye.forEach(t),g2o=i($),Ku=n($,"LI",{});var uye=s(Ku);sle=n(uye,"STRONG",{});var Ret=s(sle);h2o=r(Ret,"m2m_100"),Ret.forEach(t),u2o=r(uye," \u2014 "),Fq=n(uye,"A",{href:!0});var Pet=s(Fq);p2o=r(Pet,"M2M100Model"),Pet.forEach(t),_2o=r(uye," (M2M100 model)"),uye.forEach(t),b2o=i($),Zu=n($,"LI",{});var pye=s(Zu);lle=n(pye,"STRONG",{});var Bet=s(lle);v2o=r(Bet,"marian"),Bet.forEach(t),F2o=r(pye," \u2014 "),Tq=n(pye,"A",{href:!0});var Iet=s(Tq);T2o=r(Iet,"MarianModel"),Iet.forEach(t),M2o=r(pye," (Marian model)"),pye.forEach(t),E2o=i($),ep=n($,"LI",{});var _ye=s(ep);ile=n(_ye,"STRONG",{});var qet=s(ile);C2o=r(qet,"maskformer"),qet.forEach(t),w2o=r(_ye," \u2014 "),Mq=n(_ye,"A",{href:!0});var Net=s(Mq);A2o=r(Net,"MaskFormerModel"),Net.forEach(t),y2o=r(_ye," (MaskFormer model)"),_ye.forEach(t),L2o=i($),op=n($,"LI",{});var bye=s(op);dle=n(bye,"STRONG",{});var jet=s(dle);x2o=r(jet,"mbart"),jet.forEach(t),$2o=r(bye," \u2014 "),Eq=n(bye,"A",{href:!0});var Det=s(Eq);k2o=r(Det,"MBartModel"),Det.forEach(t),S2o=r(bye," (mBART model)"),bye.forEach(t),R2o=i($),rp=n($,"LI",{});var vye=s(rp);cle=n(vye,"STRONG",{});var Get=s(cle);P2o=r(Get,"megatron-bert"),Get.forEach(t),B2o=r(vye," \u2014 "),Cq=n(vye,"A",{href:!0});var Oet=s(Cq);I2o=r(Oet,"MegatronBertModel"),Oet.forEach(t),q2o=r(vye," (MegatronBert model)"),vye.forEach(t),N2o=i($),tp=n($,"LI",{});var Fye=s(tp);mle=n(Fye,"STRONG",{});var Vet=s(mle);j2o=r(Vet,"mobilebert"),Vet.forEach(t),D2o=r(Fye," \u2014 "),wq=n(Fye,"A",{href:!0});var Xet=s(wq);G2o=r(Xet,"MobileBertModel"),Xet.forEach(t),O2o=r(Fye," (MobileBERT model)"),Fye.forEach(t),V2o=i($),ap=n($,"LI",{});var Tye=s(ap);fle=n(Tye,"STRONG",{});var zet=s(fle);X2o=r(zet,"mpnet"),zet.forEach(t),z2o=r(Tye," \u2014 "),Aq=n(Tye,"A",{href:!0});var Wet=s(Aq);W2o=r(Wet,"MPNetModel"),Wet.forEach(t),Q2o=r(Tye," (MPNet model)"),Tye.forEach(t),H2o=i($),np=n($,"LI",{});var Mye=s(np);gle=n(Mye,"STRONG",{});var Qet=s(gle);U2o=r(Qet,"mt5"),Qet.forEach(t),J2o=r(Mye," \u2014 "),yq=n(Mye,"A",{href:!0});var Het=s(yq);Y2o=r(Het,"MT5Model"),Het.forEach(t),K2o=r(Mye," (mT5 model)"),Mye.forEach(t),Z2o=i($),sp=n($,"LI",{});var Eye=s(sp);hle=n(Eye,"STRONG",{});var Uet=s(hle);evo=r(Uet,"nystromformer"),Uet.forEach(t),ovo=r(Eye," \u2014 "),Lq=n(Eye,"A",{href:!0});var Jet=s(Lq);rvo=r(Jet,"NystromformerModel"),Jet.forEach(t),tvo=r(Eye," (Nystromformer model)"),Eye.forEach(t),avo=i($),lp=n($,"LI",{});var Cye=s(lp);ule=n(Cye,"STRONG",{});var Yet=s(ule);nvo=r(Yet,"openai-gpt"),Yet.forEach(t),svo=r(Cye," \u2014 "),xq=n(Cye,"A",{href:!0});var Ket=s(xq);lvo=r(Ket,"OpenAIGPTModel"),Ket.forEach(t),ivo=r(Cye," (OpenAI GPT model)"),Cye.forEach(t),dvo=i($),ip=n($,"LI",{});var wye=s(ip);ple=n(wye,"STRONG",{});var Zet=s(ple);cvo=r(Zet,"opt"),Zet.forEach(t),mvo=r(wye," \u2014 "),$q=n(wye,"A",{href:!0});var eot=s($q);fvo=r(eot,"OPTModel"),eot.forEach(t),gvo=r(wye," (OPT model)"),wye.forEach(t),hvo=i($),dp=n($,"LI",{});var Aye=s(dp);_le=n(Aye,"STRONG",{});var oot=s(_le);uvo=r(oot,"pegasus"),oot.forEach(t),pvo=r(Aye," \u2014 "),kq=n(Aye,"A",{href:!0});var rot=s(kq);_vo=r(rot,"PegasusModel"),rot.forEach(t),bvo=r(Aye," (Pegasus model)"),Aye.forEach(t),vvo=i($),cp=n($,"LI",{});var yye=s(cp);ble=n(yye,"STRONG",{});var tot=s(ble);Fvo=r(tot,"perceiver"),tot.forEach(t),Tvo=r(yye," \u2014 "),Sq=n(yye,"A",{href:!0});var aot=s(Sq);Mvo=r(aot,"PerceiverModel"),aot.forEach(t),Evo=r(yye," (Perceiver model)"),yye.forEach(t),Cvo=i($),mp=n($,"LI",{});var Lye=s(mp);vle=n(Lye,"STRONG",{});var not=s(vle);wvo=r(not,"plbart"),not.forEach(t),Avo=r(Lye," \u2014 "),Rq=n(Lye,"A",{href:!0});var sot=s(Rq);yvo=r(sot,"PLBartModel"),sot.forEach(t),Lvo=r(Lye," (PLBart model)"),Lye.forEach(t),xvo=i($),fp=n($,"LI",{});var xye=s(fp);Fle=n(xye,"STRONG",{});var lot=s(Fle);$vo=r(lot,"poolformer"),lot.forEach(t),kvo=r(xye," \u2014 "),Pq=n(xye,"A",{href:!0});var iot=s(Pq);Svo=r(iot,"PoolFormerModel"),iot.forEach(t),Rvo=r(xye," (PoolFormer model)"),xye.forEach(t),Pvo=i($),gp=n($,"LI",{});var $ye=s(gp);Tle=n($ye,"STRONG",{});var dot=s(Tle);Bvo=r(dot,"prophetnet"),dot.forEach(t),Ivo=r($ye," \u2014 "),Bq=n($ye,"A",{href:!0});var cot=s(Bq);qvo=r(cot,"ProphetNetModel"),cot.forEach(t),Nvo=r($ye," (ProphetNet model)"),$ye.forEach(t),jvo=i($),hp=n($,"LI",{});var kye=s(hp);Mle=n(kye,"STRONG",{});var mot=s(Mle);Dvo=r(mot,"qdqbert"),mot.forEach(t),Gvo=r(kye," \u2014 "),Iq=n(kye,"A",{href:!0});var fot=s(Iq);Ovo=r(fot,"QDQBertModel"),fot.forEach(t),Vvo=r(kye," (QDQBert model)"),kye.forEach(t),Xvo=i($),up=n($,"LI",{});var Sye=s(up);Ele=n(Sye,"STRONG",{});var got=s(Ele);zvo=r(got,"reformer"),got.forEach(t),Wvo=r(Sye," \u2014 "),qq=n(Sye,"A",{href:!0});var hot=s(qq);Qvo=r(hot,"ReformerModel"),hot.forEach(t),Hvo=r(Sye," (Reformer model)"),Sye.forEach(t),Uvo=i($),pp=n($,"LI",{});var Rye=s(pp);Cle=n(Rye,"STRONG",{});var uot=s(Cle);Jvo=r(uot,"regnet"),uot.forEach(t),Yvo=r(Rye," \u2014 "),Nq=n(Rye,"A",{href:!0});var pot=s(Nq);Kvo=r(pot,"RegNetModel"),pot.forEach(t),Zvo=r(Rye," (RegNet model)"),Rye.forEach(t),eFo=i($),_p=n($,"LI",{});var Pye=s(_p);wle=n(Pye,"STRONG",{});var _ot=s(wle);oFo=r(_ot,"rembert"),_ot.forEach(t),rFo=r(Pye," \u2014 "),jq=n(Pye,"A",{href:!0});var bot=s(jq);tFo=r(bot,"RemBertModel"),bot.forEach(t),aFo=r(Pye," (RemBERT model)"),Pye.forEach(t),nFo=i($),bp=n($,"LI",{});var Bye=s(bp);Ale=n(Bye,"STRONG",{});var vot=s(Ale);sFo=r(vot,"resnet"),vot.forEach(t),lFo=r(Bye," \u2014 "),Dq=n(Bye,"A",{href:!0});var Fot=s(Dq);iFo=r(Fot,"ResNetModel"),Fot.forEach(t),dFo=r(Bye," (ResNet model)"),Bye.forEach(t),cFo=i($),vp=n($,"LI",{});var Iye=s(vp);yle=n(Iye,"STRONG",{});var Tot=s(yle);mFo=r(Tot,"retribert"),Tot.forEach(t),fFo=r(Iye," \u2014 "),Gq=n(Iye,"A",{href:!0});var Mot=s(Gq);gFo=r(Mot,"RetriBertModel"),Mot.forEach(t),hFo=r(Iye," (RetriBERT model)"),Iye.forEach(t),uFo=i($),Fp=n($,"LI",{});var qye=s(Fp);Lle=n(qye,"STRONG",{});var Eot=s(Lle);pFo=r(Eot,"roberta"),Eot.forEach(t),_Fo=r(qye," \u2014 "),Oq=n(qye,"A",{href:!0});var Cot=s(Oq);bFo=r(Cot,"RobertaModel"),Cot.forEach(t),vFo=r(qye," (RoBERTa model)"),qye.forEach(t),FFo=i($),Tp=n($,"LI",{});var Nye=s(Tp);xle=n(Nye,"STRONG",{});var wot=s(xle);TFo=r(wot,"roformer"),wot.forEach(t),MFo=r(Nye," \u2014 "),Vq=n(Nye,"A",{href:!0});var Aot=s(Vq);EFo=r(Aot,"RoFormerModel"),Aot.forEach(t),CFo=r(Nye," (RoFormer model)"),Nye.forEach(t),wFo=i($),Mp=n($,"LI",{});var jye=s(Mp);$le=n(jye,"STRONG",{});var yot=s($le);AFo=r(yot,"segformer"),yot.forEach(t),yFo=r(jye," \u2014 "),Xq=n(jye,"A",{href:!0});var Lot=s(Xq);LFo=r(Lot,"SegformerModel"),Lot.forEach(t),xFo=r(jye," (SegFormer model)"),jye.forEach(t),$Fo=i($),Ep=n($,"LI",{});var Dye=s(Ep);kle=n(Dye,"STRONG",{});var xot=s(kle);kFo=r(xot,"sew"),xot.forEach(t),SFo=r(Dye," \u2014 "),zq=n(Dye,"A",{href:!0});var $ot=s(zq);RFo=r($ot,"SEWModel"),$ot.forEach(t),PFo=r(Dye," (SEW model)"),Dye.forEach(t),BFo=i($),Cp=n($,"LI",{});var Gye=s(Cp);Sle=n(Gye,"STRONG",{});var kot=s(Sle);IFo=r(kot,"sew-d"),kot.forEach(t),qFo=r(Gye," \u2014 "),Wq=n(Gye,"A",{href:!0});var Sot=s(Wq);NFo=r(Sot,"SEWDModel"),Sot.forEach(t),jFo=r(Gye," (SEW-D model)"),Gye.forEach(t),DFo=i($),wp=n($,"LI",{});var Oye=s(wp);Rle=n(Oye,"STRONG",{});var Rot=s(Rle);GFo=r(Rot,"speech_to_text"),Rot.forEach(t),OFo=r(Oye," \u2014 "),Qq=n(Oye,"A",{href:!0});var Pot=s(Qq);VFo=r(Pot,"Speech2TextModel"),Pot.forEach(t),XFo=r(Oye," (Speech2Text model)"),Oye.forEach(t),zFo=i($),Ap=n($,"LI",{});var Vye=s(Ap);Ple=n(Vye,"STRONG",{});var Bot=s(Ple);WFo=r(Bot,"splinter"),Bot.forEach(t),QFo=r(Vye," \u2014 "),Hq=n(Vye,"A",{href:!0});var Iot=s(Hq);HFo=r(Iot,"SplinterModel"),Iot.forEach(t),UFo=r(Vye," (Splinter model)"),Vye.forEach(t),JFo=i($),yp=n($,"LI",{});var Xye=s(yp);Ble=n(Xye,"STRONG",{});var qot=s(Ble);YFo=r(qot,"squeezebert"),qot.forEach(t),KFo=r(Xye," \u2014 "),Uq=n(Xye,"A",{href:!0});var Not=s(Uq);ZFo=r(Not,"SqueezeBertModel"),Not.forEach(t),e1o=r(Xye," (SqueezeBERT model)"),Xye.forEach(t),o1o=i($),Lp=n($,"LI",{});var zye=s(Lp);Ile=n(zye,"STRONG",{});var jot=s(Ile);r1o=r(jot,"swin"),jot.forEach(t),t1o=r(zye," \u2014 "),Jq=n(zye,"A",{href:!0});var Dot=s(Jq);a1o=r(Dot,"SwinModel"),Dot.forEach(t),n1o=r(zye," (Swin model)"),zye.forEach(t),s1o=i($),xp=n($,"LI",{});var Wye=s(xp);qle=n(Wye,"STRONG",{});var Got=s(qle);l1o=r(Got,"t5"),Got.forEach(t),i1o=r(Wye," \u2014 "),Yq=n(Wye,"A",{href:!0});var Oot=s(Yq);d1o=r(Oot,"T5Model"),Oot.forEach(t),c1o=r(Wye," (T5 model)"),Wye.forEach(t),m1o=i($),$p=n($,"LI",{});var Qye=s($p);Nle=n(Qye,"STRONG",{});var Vot=s(Nle);f1o=r(Vot,"tapas"),Vot.forEach(t),g1o=r(Qye," \u2014 "),Kq=n(Qye,"A",{href:!0});var Xot=s(Kq);h1o=r(Xot,"TapasModel"),Xot.forEach(t),u1o=r(Qye," (TAPAS model)"),Qye.forEach(t),p1o=i($),kp=n($,"LI",{});var Hye=s(kp);jle=n(Hye,"STRONG",{});var zot=s(jle);_1o=r(zot,"trajectory_transformer"),zot.forEach(t),b1o=r(Hye," \u2014 "),Zq=n(Hye,"A",{href:!0});var Wot=s(Zq);v1o=r(Wot,"TrajectoryTransformerModel"),Wot.forEach(t),F1o=r(Hye," (Trajectory Transformer model)"),Hye.forEach(t),T1o=i($),Sp=n($,"LI",{});var Uye=s(Sp);Dle=n(Uye,"STRONG",{});var Qot=s(Dle);M1o=r(Qot,"transfo-xl"),Qot.forEach(t),E1o=r(Uye," \u2014 "),eN=n(Uye,"A",{href:!0});var Hot=s(eN);C1o=r(Hot,"TransfoXLModel"),Hot.forEach(t),w1o=r(Uye," (Transformer-XL model)"),Uye.forEach(t),A1o=i($),Rp=n($,"LI",{});var Jye=s(Rp);Gle=n(Jye,"STRONG",{});var Uot=s(Gle);y1o=r(Uot,"unispeech"),Uot.forEach(t),L1o=r(Jye," \u2014 "),oN=n(Jye,"A",{href:!0});var Jot=s(oN);x1o=r(Jot,"UniSpeechModel"),Jot.forEach(t),$1o=r(Jye," (UniSpeech model)"),Jye.forEach(t),k1o=i($),Pp=n($,"LI",{});var Yye=s(Pp);Ole=n(Yye,"STRONG",{});var Yot=s(Ole);S1o=r(Yot,"unispeech-sat"),Yot.forEach(t),R1o=r(Yye," \u2014 "),rN=n(Yye,"A",{href:!0});var Kot=s(rN);P1o=r(Kot,"UniSpeechSatModel"),Kot.forEach(t),B1o=r(Yye," (UniSpeechSat model)"),Yye.forEach(t),I1o=i($),Bp=n($,"LI",{});var Kye=s(Bp);Vle=n(Kye,"STRONG",{});var Zot=s(Vle);q1o=r(Zot,"van"),Zot.forEach(t),N1o=r(Kye," \u2014 "),tN=n(Kye,"A",{href:!0});var ert=s(tN);j1o=r(ert,"VanModel"),ert.forEach(t),D1o=r(Kye," (VAN model)"),Kye.forEach(t),G1o=i($),Ip=n($,"LI",{});var Zye=s(Ip);Xle=n(Zye,"STRONG",{});var ort=s(Xle);O1o=r(ort,"vilt"),ort.forEach(t),V1o=r(Zye," \u2014 "),aN=n(Zye,"A",{href:!0});var rrt=s(aN);X1o=r(rrt,"ViltModel"),rrt.forEach(t),z1o=r(Zye," (ViLT model)"),Zye.forEach(t),W1o=i($),qp=n($,"LI",{});var eLe=s(qp);zle=n(eLe,"STRONG",{});var trt=s(zle);Q1o=r(trt,"vision-text-dual-encoder"),trt.forEach(t),H1o=r(eLe," \u2014 "),nN=n(eLe,"A",{href:!0});var art=s(nN);U1o=r(art,"VisionTextDualEncoderModel"),art.forEach(t),J1o=r(eLe," (VisionTextDualEncoder model)"),eLe.forEach(t),Y1o=i($),Np=n($,"LI",{});var oLe=s(Np);Wle=n(oLe,"STRONG",{});var nrt=s(Wle);K1o=r(nrt,"visual_bert"),nrt.forEach(t),Z1o=r(oLe," \u2014 "),sN=n(oLe,"A",{href:!0});var srt=s(sN);eTo=r(srt,"VisualBertModel"),srt.forEach(t),oTo=r(oLe," (VisualBert model)"),oLe.forEach(t),rTo=i($),jp=n($,"LI",{});var rLe=s(jp);Qle=n(rLe,"STRONG",{});var lrt=s(Qle);tTo=r(lrt,"vit"),lrt.forEach(t),aTo=r(rLe," \u2014 "),lN=n(rLe,"A",{href:!0});var irt=s(lN);nTo=r(irt,"ViTModel"),irt.forEach(t),sTo=r(rLe," (ViT model)"),rLe.forEach(t),lTo=i($),Dp=n($,"LI",{});var tLe=s(Dp);Hle=n(tLe,"STRONG",{});var drt=s(Hle);iTo=r(drt,"vit_mae"),drt.forEach(t),dTo=r(tLe," \u2014 "),iN=n(tLe,"A",{href:!0});var crt=s(iN);cTo=r(crt,"ViTMAEModel"),crt.forEach(t),mTo=r(tLe," (ViTMAE model)"),tLe.forEach(t),fTo=i($),Gp=n($,"LI",{});var aLe=s(Gp);Ule=n(aLe,"STRONG",{});var mrt=s(Ule);gTo=r(mrt,"wav2vec2"),mrt.forEach(t),hTo=r(aLe," \u2014 "),dN=n(aLe,"A",{href:!0});var frt=s(dN);uTo=r(frt,"Wav2Vec2Model"),frt.forEach(t),pTo=r(aLe," (Wav2Vec2 model)"),aLe.forEach(t),_To=i($),Op=n($,"LI",{});var nLe=s(Op);Jle=n(nLe,"STRONG",{});var grt=s(Jle);bTo=r(grt,"wav2vec2-conformer"),grt.forEach(t),vTo=r(nLe," \u2014 "),cN=n(nLe,"A",{href:!0});var hrt=s(cN);FTo=r(hrt,"Wav2Vec2ConformerModel"),hrt.forEach(t),TTo=r(nLe," (Wav2Vec2-Conformer model)"),nLe.forEach(t),MTo=i($),Vp=n($,"LI",{});var sLe=s(Vp);Yle=n(sLe,"STRONG",{});var urt=s(Yle);ETo=r(urt,"wavlm"),urt.forEach(t),CTo=r(sLe," \u2014 "),mN=n(sLe,"A",{href:!0});var prt=s(mN);wTo=r(prt,"WavLMModel"),prt.forEach(t),ATo=r(sLe," (WavLM model)"),sLe.forEach(t),yTo=i($),Xp=n($,"LI",{});var lLe=s(Xp);Kle=n(lLe,"STRONG",{});var _rt=s(Kle);LTo=r(_rt,"xglm"),_rt.forEach(t),xTo=r(lLe," \u2014 "),fN=n(lLe,"A",{href:!0});var brt=s(fN);$To=r(brt,"XGLMModel"),brt.forEach(t),kTo=r(lLe," (XGLM model)"),lLe.forEach(t),STo=i($),zp=n($,"LI",{});var iLe=s(zp);Zle=n(iLe,"STRONG",{});var vrt=s(Zle);RTo=r(vrt,"xlm"),vrt.forEach(t),PTo=r(iLe," \u2014 "),gN=n(iLe,"A",{href:!0});var Frt=s(gN);BTo=r(Frt,"XLMModel"),Frt.forEach(t),ITo=r(iLe," (XLM model)"),iLe.forEach(t),qTo=i($),Wp=n($,"LI",{});var dLe=s(Wp);eie=n(dLe,"STRONG",{});var Trt=s(eie);NTo=r(Trt,"xlm-prophetnet"),Trt.forEach(t),jTo=r(dLe," \u2014 "),hN=n(dLe,"A",{href:!0});var Mrt=s(hN);DTo=r(Mrt,"XLMProphetNetModel"),Mrt.forEach(t),GTo=r(dLe," (XLMProphetNet model)"),dLe.forEach(t),OTo=i($),Qp=n($,"LI",{});var cLe=s(Qp);oie=n(cLe,"STRONG",{});var Ert=s(oie);VTo=r(Ert,"xlm-roberta"),Ert.forEach(t),XTo=r(cLe," \u2014 "),uN=n(cLe,"A",{href:!0});var Crt=s(uN);zTo=r(Crt,"XLMRobertaModel"),Crt.forEach(t),WTo=r(cLe," (XLM-RoBERTa model)"),cLe.forEach(t),QTo=i($),Hp=n($,"LI",{});var mLe=s(Hp);rie=n(mLe,"STRONG",{});var wrt=s(rie);HTo=r(wrt,"xlm-roberta-xl"),wrt.forEach(t),UTo=r(mLe," \u2014 "),pN=n(mLe,"A",{href:!0});var Art=s(pN);JTo=r(Art,"XLMRobertaXLModel"),Art.forEach(t),YTo=r(mLe," (XLM-RoBERTa-XL model)"),mLe.forEach(t),KTo=i($),Up=n($,"LI",{});var fLe=s(Up);tie=n(fLe,"STRONG",{});var yrt=s(tie);ZTo=r(yrt,"xlnet"),yrt.forEach(t),eMo=r(fLe," \u2014 "),_N=n(fLe,"A",{href:!0});var Lrt=s(_N);oMo=r(Lrt,"XLNetModel"),Lrt.forEach(t),rMo=r(fLe," (XLNet model)"),fLe.forEach(t),tMo=i($),Jp=n($,"LI",{});var gLe=s(Jp);aie=n(gLe,"STRONG",{});var xrt=s(aie);aMo=r(xrt,"yolos"),xrt.forEach(t),nMo=r(gLe," \u2014 "),bN=n(gLe,"A",{href:!0});var $rt=s(bN);sMo=r($rt,"YolosModel"),$rt.forEach(t),lMo=r(gLe," (YOLOS model)"),gLe.forEach(t),iMo=i($),Yp=n($,"LI",{});var hLe=s(Yp);nie=n(hLe,"STRONG",{});var krt=s(nie);dMo=r(krt,"yoso"),krt.forEach(t),cMo=r(hLe," \u2014 "),vN=n(hLe,"A",{href:!0});var Srt=s(vN);mMo=r(Srt,"YosoModel"),Srt.forEach(t),fMo=r(hLe," (YOSO model)"),hLe.forEach(t),$.forEach(t),gMo=i(oa),Kp=n(oa,"P",{});var uLe=s(Kp);hMo=r(uLe,"The model is set in evaluation mode by default using "),sie=n(uLe,"CODE",{});var Rrt=s(sie);uMo=r(Rrt,"model.eval()"),Rrt.forEach(t),pMo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lie=n(uLe,"CODE",{});var Prt=s(lie);_Mo=r(Prt,"model.train()"),Prt.forEach(t),uLe.forEach(t),bMo=i(oa),T(Zp.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Yqe=i(m),Li=n(m,"H2",{class:!0});var oDe=s(Li);e_=n(oDe,"A",{id:!0,class:!0,href:!0});var Brt=s(e_);iie=n(Brt,"SPAN",{});var Irt=s(iie);T(eL.$$.fragment,Irt),Irt.forEach(t),Brt.forEach(t),vMo=i(oDe),die=n(oDe,"SPAN",{});var qrt=s(die);FMo=r(qrt,"AutoModelForPreTraining"),qrt.forEach(t),oDe.forEach(t),Kqe=i(m),xo=n(m,"DIV",{class:!0});var Os=s(xo);T(oL.$$.fragment,Os),TMo=i(Os),xi=n(Os,"P",{});var dZ=s(xi);MMo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FN=n(dZ,"A",{href:!0});var Nrt=s(FN);EMo=r(Nrt,"from_pretrained()"),Nrt.forEach(t),CMo=r(dZ," class method or the "),TN=n(dZ,"A",{href:!0});var jrt=s(TN);wMo=r(jrt,"from_config()"),jrt.forEach(t),AMo=r(dZ,` class
method.`),dZ.forEach(t),yMo=i(Os),rL=n(Os,"P",{});var rDe=s(rL);LMo=r(rDe,"This class cannot be instantiated directly using "),cie=n(rDe,"CODE",{});var Drt=s(cie);xMo=r(Drt,"__init__()"),Drt.forEach(t),$Mo=r(rDe," (throws an error)."),rDe.forEach(t),kMo=i(Os),at=n(Os,"DIV",{class:!0});var xA=s(at);T(tL.$$.fragment,xA),SMo=i(xA),mie=n(xA,"P",{});var Grt=s(mie);RMo=r(Grt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Grt.forEach(t),PMo=i(xA),$i=n(xA,"P",{});var cZ=s($i);BMo=r(cZ,`Note:
Loading a model from its configuration file does `),fie=n(cZ,"STRONG",{});var Ort=s(fie);IMo=r(Ort,"not"),Ort.forEach(t),qMo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=n(cZ,"A",{href:!0});var Vrt=s(MN);NMo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),jMo=r(cZ," to load the model weights."),cZ.forEach(t),DMo=i(xA),T(o_.$$.fragment,xA),xA.forEach(t),GMo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(aL.$$.fragment,ra),OMo=i(ra),gie=n(ra,"P",{});var Xrt=s(gie);VMo=r(Xrt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xrt.forEach(t),XMo=i(ra),xa=n(ra,"P",{});var $A=s(xa);zMo=r($A,"The model class to instantiate is selected based on the "),hie=n($A,"CODE",{});var zrt=s(hie);WMo=r(zrt,"model_type"),zrt.forEach(t),QMo=r($A,` property of the config object (either
passed as an argument or loaded from `),uie=n($A,"CODE",{});var Wrt=s(uie);HMo=r(Wrt,"pretrained_model_name_or_path"),Wrt.forEach(t),UMo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=n($A,"CODE",{});var Qrt=s(pie);JMo=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),YMo=r($A,":"),$A.forEach(t),KMo=i(ra),G=n(ra,"UL",{});var O=s(G);r_=n(O,"LI",{});var pLe=s(r_);_ie=n(pLe,"STRONG",{});var Hrt=s(_ie);ZMo=r(Hrt,"albert"),Hrt.forEach(t),e4o=r(pLe," \u2014 "),EN=n(pLe,"A",{href:!0});var Urt=s(EN);o4o=r(Urt,"AlbertForPreTraining"),Urt.forEach(t),r4o=r(pLe," (ALBERT model)"),pLe.forEach(t),t4o=i(O),t_=n(O,"LI",{});var _Le=s(t_);bie=n(_Le,"STRONG",{});var Jrt=s(bie);a4o=r(Jrt,"bart"),Jrt.forEach(t),n4o=r(_Le," \u2014 "),CN=n(_Le,"A",{href:!0});var Yrt=s(CN);s4o=r(Yrt,"BartForConditionalGeneration"),Yrt.forEach(t),l4o=r(_Le," (BART model)"),_Le.forEach(t),i4o=i(O),a_=n(O,"LI",{});var bLe=s(a_);vie=n(bLe,"STRONG",{});var Krt=s(vie);d4o=r(Krt,"bert"),Krt.forEach(t),c4o=r(bLe," \u2014 "),wN=n(bLe,"A",{href:!0});var Zrt=s(wN);m4o=r(Zrt,"BertForPreTraining"),Zrt.forEach(t),f4o=r(bLe," (BERT model)"),bLe.forEach(t),g4o=i(O),n_=n(O,"LI",{});var vLe=s(n_);Fie=n(vLe,"STRONG",{});var ett=s(Fie);h4o=r(ett,"big_bird"),ett.forEach(t),u4o=r(vLe," \u2014 "),AN=n(vLe,"A",{href:!0});var ott=s(AN);p4o=r(ott,"BigBirdForPreTraining"),ott.forEach(t),_4o=r(vLe," (BigBird model)"),vLe.forEach(t),b4o=i(O),s_=n(O,"LI",{});var FLe=s(s_);Tie=n(FLe,"STRONG",{});var rtt=s(Tie);v4o=r(rtt,"camembert"),rtt.forEach(t),F4o=r(FLe," \u2014 "),yN=n(FLe,"A",{href:!0});var ttt=s(yN);T4o=r(ttt,"CamembertForMaskedLM"),ttt.forEach(t),M4o=r(FLe," (CamemBERT model)"),FLe.forEach(t),E4o=i(O),l_=n(O,"LI",{});var TLe=s(l_);Mie=n(TLe,"STRONG",{});var att=s(Mie);C4o=r(att,"ctrl"),att.forEach(t),w4o=r(TLe," \u2014 "),LN=n(TLe,"A",{href:!0});var ntt=s(LN);A4o=r(ntt,"CTRLLMHeadModel"),ntt.forEach(t),y4o=r(TLe," (CTRL model)"),TLe.forEach(t),L4o=i(O),i_=n(O,"LI",{});var MLe=s(i_);Eie=n(MLe,"STRONG",{});var stt=s(Eie);x4o=r(stt,"data2vec-text"),stt.forEach(t),$4o=r(MLe," \u2014 "),xN=n(MLe,"A",{href:!0});var ltt=s(xN);k4o=r(ltt,"Data2VecTextForMaskedLM"),ltt.forEach(t),S4o=r(MLe," (Data2VecText model)"),MLe.forEach(t),R4o=i(O),d_=n(O,"LI",{});var ELe=s(d_);Cie=n(ELe,"STRONG",{});var itt=s(Cie);P4o=r(itt,"deberta"),itt.forEach(t),B4o=r(ELe," \u2014 "),$N=n(ELe,"A",{href:!0});var dtt=s($N);I4o=r(dtt,"DebertaForMaskedLM"),dtt.forEach(t),q4o=r(ELe," (DeBERTa model)"),ELe.forEach(t),N4o=i(O),c_=n(O,"LI",{});var CLe=s(c_);wie=n(CLe,"STRONG",{});var ctt=s(wie);j4o=r(ctt,"deberta-v2"),ctt.forEach(t),D4o=r(CLe," \u2014 "),kN=n(CLe,"A",{href:!0});var mtt=s(kN);G4o=r(mtt,"DebertaV2ForMaskedLM"),mtt.forEach(t),O4o=r(CLe," (DeBERTa-v2 model)"),CLe.forEach(t),V4o=i(O),m_=n(O,"LI",{});var wLe=s(m_);Aie=n(wLe,"STRONG",{});var ftt=s(Aie);X4o=r(ftt,"distilbert"),ftt.forEach(t),z4o=r(wLe," \u2014 "),SN=n(wLe,"A",{href:!0});var gtt=s(SN);W4o=r(gtt,"DistilBertForMaskedLM"),gtt.forEach(t),Q4o=r(wLe," (DistilBERT model)"),wLe.forEach(t),H4o=i(O),f_=n(O,"LI",{});var ALe=s(f_);yie=n(ALe,"STRONG",{});var htt=s(yie);U4o=r(htt,"electra"),htt.forEach(t),J4o=r(ALe," \u2014 "),RN=n(ALe,"A",{href:!0});var utt=s(RN);Y4o=r(utt,"ElectraForPreTraining"),utt.forEach(t),K4o=r(ALe," (ELECTRA model)"),ALe.forEach(t),Z4o=i(O),g_=n(O,"LI",{});var yLe=s(g_);Lie=n(yLe,"STRONG",{});var ptt=s(Lie);eEo=r(ptt,"flaubert"),ptt.forEach(t),oEo=r(yLe," \u2014 "),PN=n(yLe,"A",{href:!0});var _tt=s(PN);rEo=r(_tt,"FlaubertWithLMHeadModel"),_tt.forEach(t),tEo=r(yLe," (FlauBERT model)"),yLe.forEach(t),aEo=i(O),h_=n(O,"LI",{});var LLe=s(h_);xie=n(LLe,"STRONG",{});var btt=s(xie);nEo=r(btt,"flava"),btt.forEach(t),sEo=r(LLe," \u2014 "),BN=n(LLe,"A",{href:!0});var vtt=s(BN);lEo=r(vtt,"FlavaForPreTraining"),vtt.forEach(t),iEo=r(LLe," (Flava model)"),LLe.forEach(t),dEo=i(O),u_=n(O,"LI",{});var xLe=s(u_);$ie=n(xLe,"STRONG",{});var Ftt=s($ie);cEo=r(Ftt,"fnet"),Ftt.forEach(t),mEo=r(xLe," \u2014 "),IN=n(xLe,"A",{href:!0});var Ttt=s(IN);fEo=r(Ttt,"FNetForPreTraining"),Ttt.forEach(t),gEo=r(xLe," (FNet model)"),xLe.forEach(t),hEo=i(O),p_=n(O,"LI",{});var $Le=s(p_);kie=n($Le,"STRONG",{});var Mtt=s(kie);uEo=r(Mtt,"fsmt"),Mtt.forEach(t),pEo=r($Le," \u2014 "),qN=n($Le,"A",{href:!0});var Ett=s(qN);_Eo=r(Ett,"FSMTForConditionalGeneration"),Ett.forEach(t),bEo=r($Le," (FairSeq Machine-Translation model)"),$Le.forEach(t),vEo=i(O),__=n(O,"LI",{});var kLe=s(__);Sie=n(kLe,"STRONG",{});var Ctt=s(Sie);FEo=r(Ctt,"funnel"),Ctt.forEach(t),TEo=r(kLe," \u2014 "),NN=n(kLe,"A",{href:!0});var wtt=s(NN);MEo=r(wtt,"FunnelForPreTraining"),wtt.forEach(t),EEo=r(kLe," (Funnel Transformer model)"),kLe.forEach(t),CEo=i(O),b_=n(O,"LI",{});var SLe=s(b_);Rie=n(SLe,"STRONG",{});var Att=s(Rie);wEo=r(Att,"gpt2"),Att.forEach(t),AEo=r(SLe," \u2014 "),jN=n(SLe,"A",{href:!0});var ytt=s(jN);yEo=r(ytt,"GPT2LMHeadModel"),ytt.forEach(t),LEo=r(SLe," (OpenAI GPT-2 model)"),SLe.forEach(t),xEo=i(O),v_=n(O,"LI",{});var RLe=s(v_);Pie=n(RLe,"STRONG",{});var Ltt=s(Pie);$Eo=r(Ltt,"ibert"),Ltt.forEach(t),kEo=r(RLe," \u2014 "),DN=n(RLe,"A",{href:!0});var xtt=s(DN);SEo=r(xtt,"IBertForMaskedLM"),xtt.forEach(t),REo=r(RLe," (I-BERT model)"),RLe.forEach(t),PEo=i(O),F_=n(O,"LI",{});var PLe=s(F_);Bie=n(PLe,"STRONG",{});var $tt=s(Bie);BEo=r($tt,"layoutlm"),$tt.forEach(t),IEo=r(PLe," \u2014 "),GN=n(PLe,"A",{href:!0});var ktt=s(GN);qEo=r(ktt,"LayoutLMForMaskedLM"),ktt.forEach(t),NEo=r(PLe," (LayoutLM model)"),PLe.forEach(t),jEo=i(O),T_=n(O,"LI",{});var BLe=s(T_);Iie=n(BLe,"STRONG",{});var Stt=s(Iie);DEo=r(Stt,"longformer"),Stt.forEach(t),GEo=r(BLe," \u2014 "),ON=n(BLe,"A",{href:!0});var Rtt=s(ON);OEo=r(Rtt,"LongformerForMaskedLM"),Rtt.forEach(t),VEo=r(BLe," (Longformer model)"),BLe.forEach(t),XEo=i(O),M_=n(O,"LI",{});var ILe=s(M_);qie=n(ILe,"STRONG",{});var Ptt=s(qie);zEo=r(Ptt,"lxmert"),Ptt.forEach(t),WEo=r(ILe," \u2014 "),VN=n(ILe,"A",{href:!0});var Btt=s(VN);QEo=r(Btt,"LxmertForPreTraining"),Btt.forEach(t),HEo=r(ILe," (LXMERT model)"),ILe.forEach(t),UEo=i(O),E_=n(O,"LI",{});var qLe=s(E_);Nie=n(qLe,"STRONG",{});var Itt=s(Nie);JEo=r(Itt,"megatron-bert"),Itt.forEach(t),YEo=r(qLe," \u2014 "),XN=n(qLe,"A",{href:!0});var qtt=s(XN);KEo=r(qtt,"MegatronBertForPreTraining"),qtt.forEach(t),ZEo=r(qLe," (MegatronBert model)"),qLe.forEach(t),eCo=i(O),C_=n(O,"LI",{});var NLe=s(C_);jie=n(NLe,"STRONG",{});var Ntt=s(jie);oCo=r(Ntt,"mobilebert"),Ntt.forEach(t),rCo=r(NLe," \u2014 "),zN=n(NLe,"A",{href:!0});var jtt=s(zN);tCo=r(jtt,"MobileBertForPreTraining"),jtt.forEach(t),aCo=r(NLe," (MobileBERT model)"),NLe.forEach(t),nCo=i(O),w_=n(O,"LI",{});var jLe=s(w_);Die=n(jLe,"STRONG",{});var Dtt=s(Die);sCo=r(Dtt,"mpnet"),Dtt.forEach(t),lCo=r(jLe," \u2014 "),WN=n(jLe,"A",{href:!0});var Gtt=s(WN);iCo=r(Gtt,"MPNetForMaskedLM"),Gtt.forEach(t),dCo=r(jLe," (MPNet model)"),jLe.forEach(t),cCo=i(O),A_=n(O,"LI",{});var DLe=s(A_);Gie=n(DLe,"STRONG",{});var Ott=s(Gie);mCo=r(Ott,"openai-gpt"),Ott.forEach(t),fCo=r(DLe," \u2014 "),QN=n(DLe,"A",{href:!0});var Vtt=s(QN);gCo=r(Vtt,"OpenAIGPTLMHeadModel"),Vtt.forEach(t),hCo=r(DLe," (OpenAI GPT model)"),DLe.forEach(t),uCo=i(O),y_=n(O,"LI",{});var GLe=s(y_);Oie=n(GLe,"STRONG",{});var Xtt=s(Oie);pCo=r(Xtt,"retribert"),Xtt.forEach(t),_Co=r(GLe," \u2014 "),HN=n(GLe,"A",{href:!0});var ztt=s(HN);bCo=r(ztt,"RetriBertModel"),ztt.forEach(t),vCo=r(GLe," (RetriBERT model)"),GLe.forEach(t),FCo=i(O),L_=n(O,"LI",{});var OLe=s(L_);Vie=n(OLe,"STRONG",{});var Wtt=s(Vie);TCo=r(Wtt,"roberta"),Wtt.forEach(t),MCo=r(OLe," \u2014 "),UN=n(OLe,"A",{href:!0});var Qtt=s(UN);ECo=r(Qtt,"RobertaForMaskedLM"),Qtt.forEach(t),CCo=r(OLe," (RoBERTa model)"),OLe.forEach(t),wCo=i(O),x_=n(O,"LI",{});var VLe=s(x_);Xie=n(VLe,"STRONG",{});var Htt=s(Xie);ACo=r(Htt,"splinter"),Htt.forEach(t),yCo=r(VLe," \u2014 "),JN=n(VLe,"A",{href:!0});var Utt=s(JN);LCo=r(Utt,"SplinterForPreTraining"),Utt.forEach(t),xCo=r(VLe," (Splinter model)"),VLe.forEach(t),$Co=i(O),$_=n(O,"LI",{});var XLe=s($_);zie=n(XLe,"STRONG",{});var Jtt=s(zie);kCo=r(Jtt,"squeezebert"),Jtt.forEach(t),SCo=r(XLe," \u2014 "),YN=n(XLe,"A",{href:!0});var Ytt=s(YN);RCo=r(Ytt,"SqueezeBertForMaskedLM"),Ytt.forEach(t),PCo=r(XLe," (SqueezeBERT model)"),XLe.forEach(t),BCo=i(O),k_=n(O,"LI",{});var zLe=s(k_);Wie=n(zLe,"STRONG",{});var Ktt=s(Wie);ICo=r(Ktt,"t5"),Ktt.forEach(t),qCo=r(zLe," \u2014 "),KN=n(zLe,"A",{href:!0});var Ztt=s(KN);NCo=r(Ztt,"T5ForConditionalGeneration"),Ztt.forEach(t),jCo=r(zLe," (T5 model)"),zLe.forEach(t),DCo=i(O),S_=n(O,"LI",{});var WLe=s(S_);Qie=n(WLe,"STRONG",{});var eat=s(Qie);GCo=r(eat,"tapas"),eat.forEach(t),OCo=r(WLe," \u2014 "),ZN=n(WLe,"A",{href:!0});var oat=s(ZN);VCo=r(oat,"TapasForMaskedLM"),oat.forEach(t),XCo=r(WLe," (TAPAS model)"),WLe.forEach(t),zCo=i(O),R_=n(O,"LI",{});var QLe=s(R_);Hie=n(QLe,"STRONG",{});var rat=s(Hie);WCo=r(rat,"transfo-xl"),rat.forEach(t),QCo=r(QLe," \u2014 "),ej=n(QLe,"A",{href:!0});var tat=s(ej);HCo=r(tat,"TransfoXLLMHeadModel"),tat.forEach(t),UCo=r(QLe," (Transformer-XL model)"),QLe.forEach(t),JCo=i(O),P_=n(O,"LI",{});var HLe=s(P_);Uie=n(HLe,"STRONG",{});var aat=s(Uie);YCo=r(aat,"unispeech"),aat.forEach(t),KCo=r(HLe," \u2014 "),oj=n(HLe,"A",{href:!0});var nat=s(oj);ZCo=r(nat,"UniSpeechForPreTraining"),nat.forEach(t),e5o=r(HLe," (UniSpeech model)"),HLe.forEach(t),o5o=i(O),B_=n(O,"LI",{});var ULe=s(B_);Jie=n(ULe,"STRONG",{});var sat=s(Jie);r5o=r(sat,"unispeech-sat"),sat.forEach(t),t5o=r(ULe," \u2014 "),rj=n(ULe,"A",{href:!0});var lat=s(rj);a5o=r(lat,"UniSpeechSatForPreTraining"),lat.forEach(t),n5o=r(ULe," (UniSpeechSat model)"),ULe.forEach(t),s5o=i(O),I_=n(O,"LI",{});var JLe=s(I_);Yie=n(JLe,"STRONG",{});var iat=s(Yie);l5o=r(iat,"visual_bert"),iat.forEach(t),i5o=r(JLe," \u2014 "),tj=n(JLe,"A",{href:!0});var dat=s(tj);d5o=r(dat,"VisualBertForPreTraining"),dat.forEach(t),c5o=r(JLe," (VisualBert model)"),JLe.forEach(t),m5o=i(O),q_=n(O,"LI",{});var YLe=s(q_);Kie=n(YLe,"STRONG",{});var cat=s(Kie);f5o=r(cat,"vit_mae"),cat.forEach(t),g5o=r(YLe," \u2014 "),aj=n(YLe,"A",{href:!0});var mat=s(aj);h5o=r(mat,"ViTMAEForPreTraining"),mat.forEach(t),u5o=r(YLe," (ViTMAE model)"),YLe.forEach(t),p5o=i(O),N_=n(O,"LI",{});var KLe=s(N_);Zie=n(KLe,"STRONG",{});var fat=s(Zie);_5o=r(fat,"wav2vec2"),fat.forEach(t),b5o=r(KLe," \u2014 "),nj=n(KLe,"A",{href:!0});var gat=s(nj);v5o=r(gat,"Wav2Vec2ForPreTraining"),gat.forEach(t),F5o=r(KLe," (Wav2Vec2 model)"),KLe.forEach(t),T5o=i(O),j_=n(O,"LI",{});var ZLe=s(j_);ede=n(ZLe,"STRONG",{});var hat=s(ede);M5o=r(hat,"wav2vec2-conformer"),hat.forEach(t),E5o=r(ZLe," \u2014 "),sj=n(ZLe,"A",{href:!0});var uat=s(sj);C5o=r(uat,"Wav2Vec2ConformerForPreTraining"),uat.forEach(t),w5o=r(ZLe," (Wav2Vec2-Conformer model)"),ZLe.forEach(t),A5o=i(O),D_=n(O,"LI",{});var e8e=s(D_);ode=n(e8e,"STRONG",{});var pat=s(ode);y5o=r(pat,"xlm"),pat.forEach(t),L5o=r(e8e," \u2014 "),lj=n(e8e,"A",{href:!0});var _at=s(lj);x5o=r(_at,"XLMWithLMHeadModel"),_at.forEach(t),$5o=r(e8e," (XLM model)"),e8e.forEach(t),k5o=i(O),G_=n(O,"LI",{});var o8e=s(G_);rde=n(o8e,"STRONG",{});var bat=s(rde);S5o=r(bat,"xlm-roberta"),bat.forEach(t),R5o=r(o8e," \u2014 "),ij=n(o8e,"A",{href:!0});var vat=s(ij);P5o=r(vat,"XLMRobertaForMaskedLM"),vat.forEach(t),B5o=r(o8e," (XLM-RoBERTa model)"),o8e.forEach(t),I5o=i(O),O_=n(O,"LI",{});var r8e=s(O_);tde=n(r8e,"STRONG",{});var Fat=s(tde);q5o=r(Fat,"xlm-roberta-xl"),Fat.forEach(t),N5o=r(r8e," \u2014 "),dj=n(r8e,"A",{href:!0});var Tat=s(dj);j5o=r(Tat,"XLMRobertaXLForMaskedLM"),Tat.forEach(t),D5o=r(r8e," (XLM-RoBERTa-XL model)"),r8e.forEach(t),G5o=i(O),V_=n(O,"LI",{});var t8e=s(V_);ade=n(t8e,"STRONG",{});var Mat=s(ade);O5o=r(Mat,"xlnet"),Mat.forEach(t),V5o=r(t8e," \u2014 "),cj=n(t8e,"A",{href:!0});var Eat=s(cj);X5o=r(Eat,"XLNetLMHeadModel"),Eat.forEach(t),z5o=r(t8e," (XLNet model)"),t8e.forEach(t),O.forEach(t),W5o=i(ra),X_=n(ra,"P",{});var a8e=s(X_);Q5o=r(a8e,"The model is set in evaluation mode by default using "),nde=n(a8e,"CODE",{});var Cat=s(nde);H5o=r(Cat,"model.eval()"),Cat.forEach(t),U5o=r(a8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=n(a8e,"CODE",{});var wat=s(sde);J5o=r(wat,"model.train()"),wat.forEach(t),a8e.forEach(t),Y5o=i(ra),T(z_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Zqe=i(m),ki=n(m,"H2",{class:!0});var tDe=s(ki);W_=n(tDe,"A",{id:!0,class:!0,href:!0});var Aat=s(W_);lde=n(Aat,"SPAN",{});var yat=s(lde);T(nL.$$.fragment,yat),yat.forEach(t),Aat.forEach(t),K5o=i(tDe),ide=n(tDe,"SPAN",{});var Lat=s(ide);Z5o=r(Lat,"AutoModelForCausalLM"),Lat.forEach(t),tDe.forEach(t),eNe=i(m),$o=n(m,"DIV",{class:!0});var Vs=s($o);T(sL.$$.fragment,Vs),e3o=i(Vs),Si=n(Vs,"P",{});var mZ=s(Si);o3o=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mj=n(mZ,"A",{href:!0});var xat=s(mj);r3o=r(xat,"from_pretrained()"),xat.forEach(t),t3o=r(mZ," class method or the "),fj=n(mZ,"A",{href:!0});var $at=s(fj);a3o=r($at,"from_config()"),$at.forEach(t),n3o=r(mZ,` class
method.`),mZ.forEach(t),s3o=i(Vs),lL=n(Vs,"P",{});var aDe=s(lL);l3o=r(aDe,"This class cannot be instantiated directly using "),dde=n(aDe,"CODE",{});var kat=s(dde);i3o=r(kat,"__init__()"),kat.forEach(t),d3o=r(aDe," (throws an error)."),aDe.forEach(t),c3o=i(Vs),nt=n(Vs,"DIV",{class:!0});var kA=s(nt);T(iL.$$.fragment,kA),m3o=i(kA),cde=n(kA,"P",{});var Sat=s(cde);f3o=r(Sat,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Sat.forEach(t),g3o=i(kA),Ri=n(kA,"P",{});var fZ=s(Ri);h3o=r(fZ,`Note:
Loading a model from its configuration file does `),mde=n(fZ,"STRONG",{});var Rat=s(mde);u3o=r(Rat,"not"),Rat.forEach(t),p3o=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gj=n(fZ,"A",{href:!0});var Pat=s(gj);_3o=r(Pat,"from_pretrained()"),Pat.forEach(t),b3o=r(fZ," to load the model weights."),fZ.forEach(t),v3o=i(kA),T(Q_.$$.fragment,kA),kA.forEach(t),F3o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(dL.$$.fragment,ta),T3o=i(ta),fde=n(ta,"P",{});var Bat=s(fde);M3o=r(Bat,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bat.forEach(t),E3o=i(ta),$a=n(ta,"P",{});var SA=s($a);C3o=r(SA,"The model class to instantiate is selected based on the "),gde=n(SA,"CODE",{});var Iat=s(gde);w3o=r(Iat,"model_type"),Iat.forEach(t),A3o=r(SA,` property of the config object (either
passed as an argument or loaded from `),hde=n(SA,"CODE",{});var qat=s(hde);y3o=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),L3o=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=n(SA,"CODE",{});var Nat=s(ude);x3o=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),$3o=r(SA,":"),SA.forEach(t),k3o=i(ta),z=n(ta,"UL",{});var Q=s(z);H_=n(Q,"LI",{});var n8e=s(H_);pde=n(n8e,"STRONG",{});var jat=s(pde);S3o=r(jat,"bart"),jat.forEach(t),R3o=r(n8e," \u2014 "),hj=n(n8e,"A",{href:!0});var Dat=s(hj);P3o=r(Dat,"BartForCausalLM"),Dat.forEach(t),B3o=r(n8e," (BART model)"),n8e.forEach(t),I3o=i(Q),U_=n(Q,"LI",{});var s8e=s(U_);_de=n(s8e,"STRONG",{});var Gat=s(_de);q3o=r(Gat,"bert"),Gat.forEach(t),N3o=r(s8e," \u2014 "),uj=n(s8e,"A",{href:!0});var Oat=s(uj);j3o=r(Oat,"BertLMHeadModel"),Oat.forEach(t),D3o=r(s8e," (BERT model)"),s8e.forEach(t),G3o=i(Q),J_=n(Q,"LI",{});var l8e=s(J_);bde=n(l8e,"STRONG",{});var Vat=s(bde);O3o=r(Vat,"bert-generation"),Vat.forEach(t),V3o=r(l8e," \u2014 "),pj=n(l8e,"A",{href:!0});var Xat=s(pj);X3o=r(Xat,"BertGenerationDecoder"),Xat.forEach(t),z3o=r(l8e," (Bert Generation model)"),l8e.forEach(t),W3o=i(Q),Y_=n(Q,"LI",{});var i8e=s(Y_);vde=n(i8e,"STRONG",{});var zat=s(vde);Q3o=r(zat,"big_bird"),zat.forEach(t),H3o=r(i8e," \u2014 "),_j=n(i8e,"A",{href:!0});var Wat=s(_j);U3o=r(Wat,"BigBirdForCausalLM"),Wat.forEach(t),J3o=r(i8e," (BigBird model)"),i8e.forEach(t),Y3o=i(Q),K_=n(Q,"LI",{});var d8e=s(K_);Fde=n(d8e,"STRONG",{});var Qat=s(Fde);K3o=r(Qat,"bigbird_pegasus"),Qat.forEach(t),Z3o=r(d8e," \u2014 "),bj=n(d8e,"A",{href:!0});var Hat=s(bj);ewo=r(Hat,"BigBirdPegasusForCausalLM"),Hat.forEach(t),owo=r(d8e," (BigBirdPegasus model)"),d8e.forEach(t),rwo=i(Q),Z_=n(Q,"LI",{});var c8e=s(Z_);Tde=n(c8e,"STRONG",{});var Uat=s(Tde);two=r(Uat,"blenderbot"),Uat.forEach(t),awo=r(c8e," \u2014 "),vj=n(c8e,"A",{href:!0});var Jat=s(vj);nwo=r(Jat,"BlenderbotForCausalLM"),Jat.forEach(t),swo=r(c8e," (Blenderbot model)"),c8e.forEach(t),lwo=i(Q),eb=n(Q,"LI",{});var m8e=s(eb);Mde=n(m8e,"STRONG",{});var Yat=s(Mde);iwo=r(Yat,"blenderbot-small"),Yat.forEach(t),dwo=r(m8e," \u2014 "),Fj=n(m8e,"A",{href:!0});var Kat=s(Fj);cwo=r(Kat,"BlenderbotSmallForCausalLM"),Kat.forEach(t),mwo=r(m8e," (BlenderbotSmall model)"),m8e.forEach(t),fwo=i(Q),ob=n(Q,"LI",{});var f8e=s(ob);Ede=n(f8e,"STRONG",{});var Zat=s(Ede);gwo=r(Zat,"camembert"),Zat.forEach(t),hwo=r(f8e," \u2014 "),Tj=n(f8e,"A",{href:!0});var ent=s(Tj);uwo=r(ent,"CamembertForCausalLM"),ent.forEach(t),pwo=r(f8e," (CamemBERT model)"),f8e.forEach(t),_wo=i(Q),rb=n(Q,"LI",{});var g8e=s(rb);Cde=n(g8e,"STRONG",{});var ont=s(Cde);bwo=r(ont,"ctrl"),ont.forEach(t),vwo=r(g8e," \u2014 "),Mj=n(g8e,"A",{href:!0});var rnt=s(Mj);Fwo=r(rnt,"CTRLLMHeadModel"),rnt.forEach(t),Two=r(g8e," (CTRL model)"),g8e.forEach(t),Mwo=i(Q),tb=n(Q,"LI",{});var h8e=s(tb);wde=n(h8e,"STRONG",{});var tnt=s(wde);Ewo=r(tnt,"data2vec-text"),tnt.forEach(t),Cwo=r(h8e," \u2014 "),Ej=n(h8e,"A",{href:!0});var ant=s(Ej);wwo=r(ant,"Data2VecTextForCausalLM"),ant.forEach(t),Awo=r(h8e," (Data2VecText model)"),h8e.forEach(t),ywo=i(Q),ab=n(Q,"LI",{});var u8e=s(ab);Ade=n(u8e,"STRONG",{});var nnt=s(Ade);Lwo=r(nnt,"electra"),nnt.forEach(t),xwo=r(u8e," \u2014 "),Cj=n(u8e,"A",{href:!0});var snt=s(Cj);$wo=r(snt,"ElectraForCausalLM"),snt.forEach(t),kwo=r(u8e," (ELECTRA model)"),u8e.forEach(t),Swo=i(Q),nb=n(Q,"LI",{});var p8e=s(nb);yde=n(p8e,"STRONG",{});var lnt=s(yde);Rwo=r(lnt,"gpt2"),lnt.forEach(t),Pwo=r(p8e," \u2014 "),wj=n(p8e,"A",{href:!0});var int=s(wj);Bwo=r(int,"GPT2LMHeadModel"),int.forEach(t),Iwo=r(p8e," (OpenAI GPT-2 model)"),p8e.forEach(t),qwo=i(Q),sb=n(Q,"LI",{});var _8e=s(sb);Lde=n(_8e,"STRONG",{});var dnt=s(Lde);Nwo=r(dnt,"gpt_neo"),dnt.forEach(t),jwo=r(_8e," \u2014 "),Aj=n(_8e,"A",{href:!0});var cnt=s(Aj);Dwo=r(cnt,"GPTNeoForCausalLM"),cnt.forEach(t),Gwo=r(_8e," (GPT Neo model)"),_8e.forEach(t),Owo=i(Q),lb=n(Q,"LI",{});var b8e=s(lb);xde=n(b8e,"STRONG",{});var mnt=s(xde);Vwo=r(mnt,"gptj"),mnt.forEach(t),Xwo=r(b8e," \u2014 "),yj=n(b8e,"A",{href:!0});var fnt=s(yj);zwo=r(fnt,"GPTJForCausalLM"),fnt.forEach(t),Wwo=r(b8e," (GPT-J model)"),b8e.forEach(t),Qwo=i(Q),ib=n(Q,"LI",{});var v8e=s(ib);$de=n(v8e,"STRONG",{});var gnt=s($de);Hwo=r(gnt,"marian"),gnt.forEach(t),Uwo=r(v8e," \u2014 "),Lj=n(v8e,"A",{href:!0});var hnt=s(Lj);Jwo=r(hnt,"MarianForCausalLM"),hnt.forEach(t),Ywo=r(v8e," (Marian model)"),v8e.forEach(t),Kwo=i(Q),db=n(Q,"LI",{});var F8e=s(db);kde=n(F8e,"STRONG",{});var unt=s(kde);Zwo=r(unt,"mbart"),unt.forEach(t),e0o=r(F8e," \u2014 "),xj=n(F8e,"A",{href:!0});var pnt=s(xj);o0o=r(pnt,"MBartForCausalLM"),pnt.forEach(t),r0o=r(F8e," (mBART model)"),F8e.forEach(t),t0o=i(Q),cb=n(Q,"LI",{});var T8e=s(cb);Sde=n(T8e,"STRONG",{});var _nt=s(Sde);a0o=r(_nt,"megatron-bert"),_nt.forEach(t),n0o=r(T8e," \u2014 "),$j=n(T8e,"A",{href:!0});var bnt=s($j);s0o=r(bnt,"MegatronBertForCausalLM"),bnt.forEach(t),l0o=r(T8e," (MegatronBert model)"),T8e.forEach(t),i0o=i(Q),mb=n(Q,"LI",{});var M8e=s(mb);Rde=n(M8e,"STRONG",{});var vnt=s(Rde);d0o=r(vnt,"openai-gpt"),vnt.forEach(t),c0o=r(M8e," \u2014 "),kj=n(M8e,"A",{href:!0});var Fnt=s(kj);m0o=r(Fnt,"OpenAIGPTLMHeadModel"),Fnt.forEach(t),f0o=r(M8e," (OpenAI GPT model)"),M8e.forEach(t),g0o=i(Q),fb=n(Q,"LI",{});var E8e=s(fb);Pde=n(E8e,"STRONG",{});var Tnt=s(Pde);h0o=r(Tnt,"opt"),Tnt.forEach(t),u0o=r(E8e," \u2014 "),Sj=n(E8e,"A",{href:!0});var Mnt=s(Sj);p0o=r(Mnt,"OPTForCausalLM"),Mnt.forEach(t),_0o=r(E8e," (OPT model)"),E8e.forEach(t),b0o=i(Q),gb=n(Q,"LI",{});var C8e=s(gb);Bde=n(C8e,"STRONG",{});var Ent=s(Bde);v0o=r(Ent,"pegasus"),Ent.forEach(t),F0o=r(C8e," \u2014 "),Rj=n(C8e,"A",{href:!0});var Cnt=s(Rj);T0o=r(Cnt,"PegasusForCausalLM"),Cnt.forEach(t),M0o=r(C8e," (Pegasus model)"),C8e.forEach(t),E0o=i(Q),hb=n(Q,"LI",{});var w8e=s(hb);Ide=n(w8e,"STRONG",{});var wnt=s(Ide);C0o=r(wnt,"plbart"),wnt.forEach(t),w0o=r(w8e," \u2014 "),Pj=n(w8e,"A",{href:!0});var Ant=s(Pj);A0o=r(Ant,"PLBartForCausalLM"),Ant.forEach(t),y0o=r(w8e," (PLBart model)"),w8e.forEach(t),L0o=i(Q),ub=n(Q,"LI",{});var A8e=s(ub);qde=n(A8e,"STRONG",{});var ynt=s(qde);x0o=r(ynt,"prophetnet"),ynt.forEach(t),$0o=r(A8e," \u2014 "),Bj=n(A8e,"A",{href:!0});var Lnt=s(Bj);k0o=r(Lnt,"ProphetNetForCausalLM"),Lnt.forEach(t),S0o=r(A8e," (ProphetNet model)"),A8e.forEach(t),R0o=i(Q),pb=n(Q,"LI",{});var y8e=s(pb);Nde=n(y8e,"STRONG",{});var xnt=s(Nde);P0o=r(xnt,"qdqbert"),xnt.forEach(t),B0o=r(y8e," \u2014 "),Ij=n(y8e,"A",{href:!0});var $nt=s(Ij);I0o=r($nt,"QDQBertLMHeadModel"),$nt.forEach(t),q0o=r(y8e," (QDQBert model)"),y8e.forEach(t),N0o=i(Q),_b=n(Q,"LI",{});var L8e=s(_b);jde=n(L8e,"STRONG",{});var knt=s(jde);j0o=r(knt,"reformer"),knt.forEach(t),D0o=r(L8e," \u2014 "),qj=n(L8e,"A",{href:!0});var Snt=s(qj);G0o=r(Snt,"ReformerModelWithLMHead"),Snt.forEach(t),O0o=r(L8e," (Reformer model)"),L8e.forEach(t),V0o=i(Q),bb=n(Q,"LI",{});var x8e=s(bb);Dde=n(x8e,"STRONG",{});var Rnt=s(Dde);X0o=r(Rnt,"rembert"),Rnt.forEach(t),z0o=r(x8e," \u2014 "),Nj=n(x8e,"A",{href:!0});var Pnt=s(Nj);W0o=r(Pnt,"RemBertForCausalLM"),Pnt.forEach(t),Q0o=r(x8e," (RemBERT model)"),x8e.forEach(t),H0o=i(Q),vb=n(Q,"LI",{});var $8e=s(vb);Gde=n($8e,"STRONG",{});var Bnt=s(Gde);U0o=r(Bnt,"roberta"),Bnt.forEach(t),J0o=r($8e," \u2014 "),jj=n($8e,"A",{href:!0});var Int=s(jj);Y0o=r(Int,"RobertaForCausalLM"),Int.forEach(t),K0o=r($8e," (RoBERTa model)"),$8e.forEach(t),Z0o=i(Q),Fb=n(Q,"LI",{});var k8e=s(Fb);Ode=n(k8e,"STRONG",{});var qnt=s(Ode);eAo=r(qnt,"roformer"),qnt.forEach(t),oAo=r(k8e," \u2014 "),Dj=n(k8e,"A",{href:!0});var Nnt=s(Dj);rAo=r(Nnt,"RoFormerForCausalLM"),Nnt.forEach(t),tAo=r(k8e," (RoFormer model)"),k8e.forEach(t),aAo=i(Q),Tb=n(Q,"LI",{});var S8e=s(Tb);Vde=n(S8e,"STRONG",{});var jnt=s(Vde);nAo=r(jnt,"speech_to_text_2"),jnt.forEach(t),sAo=r(S8e," \u2014 "),Gj=n(S8e,"A",{href:!0});var Dnt=s(Gj);lAo=r(Dnt,"Speech2Text2ForCausalLM"),Dnt.forEach(t),iAo=r(S8e," (Speech2Text2 model)"),S8e.forEach(t),dAo=i(Q),Mb=n(Q,"LI",{});var R8e=s(Mb);Xde=n(R8e,"STRONG",{});var Gnt=s(Xde);cAo=r(Gnt,"transfo-xl"),Gnt.forEach(t),mAo=r(R8e," \u2014 "),Oj=n(R8e,"A",{href:!0});var Ont=s(Oj);fAo=r(Ont,"TransfoXLLMHeadModel"),Ont.forEach(t),gAo=r(R8e," (Transformer-XL model)"),R8e.forEach(t),hAo=i(Q),Eb=n(Q,"LI",{});var P8e=s(Eb);zde=n(P8e,"STRONG",{});var Vnt=s(zde);uAo=r(Vnt,"trocr"),Vnt.forEach(t),pAo=r(P8e," \u2014 "),Vj=n(P8e,"A",{href:!0});var Xnt=s(Vj);_Ao=r(Xnt,"TrOCRForCausalLM"),Xnt.forEach(t),bAo=r(P8e," (TrOCR model)"),P8e.forEach(t),vAo=i(Q),Cb=n(Q,"LI",{});var B8e=s(Cb);Wde=n(B8e,"STRONG",{});var znt=s(Wde);FAo=r(znt,"xglm"),znt.forEach(t),TAo=r(B8e," \u2014 "),Xj=n(B8e,"A",{href:!0});var Wnt=s(Xj);MAo=r(Wnt,"XGLMForCausalLM"),Wnt.forEach(t),EAo=r(B8e," (XGLM model)"),B8e.forEach(t),CAo=i(Q),wb=n(Q,"LI",{});var I8e=s(wb);Qde=n(I8e,"STRONG",{});var Qnt=s(Qde);wAo=r(Qnt,"xlm"),Qnt.forEach(t),AAo=r(I8e," \u2014 "),zj=n(I8e,"A",{href:!0});var Hnt=s(zj);yAo=r(Hnt,"XLMWithLMHeadModel"),Hnt.forEach(t),LAo=r(I8e," (XLM model)"),I8e.forEach(t),xAo=i(Q),Ab=n(Q,"LI",{});var q8e=s(Ab);Hde=n(q8e,"STRONG",{});var Unt=s(Hde);$Ao=r(Unt,"xlm-prophetnet"),Unt.forEach(t),kAo=r(q8e," \u2014 "),Wj=n(q8e,"A",{href:!0});var Jnt=s(Wj);SAo=r(Jnt,"XLMProphetNetForCausalLM"),Jnt.forEach(t),RAo=r(q8e," (XLMProphetNet model)"),q8e.forEach(t),PAo=i(Q),yb=n(Q,"LI",{});var N8e=s(yb);Ude=n(N8e,"STRONG",{});var Ynt=s(Ude);BAo=r(Ynt,"xlm-roberta"),Ynt.forEach(t),IAo=r(N8e," \u2014 "),Qj=n(N8e,"A",{href:!0});var Knt=s(Qj);qAo=r(Knt,"XLMRobertaForCausalLM"),Knt.forEach(t),NAo=r(N8e," (XLM-RoBERTa model)"),N8e.forEach(t),jAo=i(Q),Lb=n(Q,"LI",{});var j8e=s(Lb);Jde=n(j8e,"STRONG",{});var Znt=s(Jde);DAo=r(Znt,"xlm-roberta-xl"),Znt.forEach(t),GAo=r(j8e," \u2014 "),Hj=n(j8e,"A",{href:!0});var est=s(Hj);OAo=r(est,"XLMRobertaXLForCausalLM"),est.forEach(t),VAo=r(j8e," (XLM-RoBERTa-XL model)"),j8e.forEach(t),XAo=i(Q),xb=n(Q,"LI",{});var D8e=s(xb);Yde=n(D8e,"STRONG",{});var ost=s(Yde);zAo=r(ost,"xlnet"),ost.forEach(t),WAo=r(D8e," \u2014 "),Uj=n(D8e,"A",{href:!0});var rst=s(Uj);QAo=r(rst,"XLNetLMHeadModel"),rst.forEach(t),HAo=r(D8e," (XLNet model)"),D8e.forEach(t),Q.forEach(t),UAo=i(ta),$b=n(ta,"P",{});var G8e=s($b);JAo=r(G8e,"The model is set in evaluation mode by default using "),Kde=n(G8e,"CODE",{});var tst=s(Kde);YAo=r(tst,"model.eval()"),tst.forEach(t),KAo=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=n(G8e,"CODE",{});var ast=s(Zde);ZAo=r(ast,"model.train()"),ast.forEach(t),G8e.forEach(t),e6o=i(ta),T(kb.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),oNe=i(m),Pi=n(m,"H2",{class:!0});var nDe=s(Pi);Sb=n(nDe,"A",{id:!0,class:!0,href:!0});var nst=s(Sb);ece=n(nst,"SPAN",{});var sst=s(ece);T(cL.$$.fragment,sst),sst.forEach(t),nst.forEach(t),o6o=i(nDe),oce=n(nDe,"SPAN",{});var lst=s(oce);r6o=r(lst,"AutoModelForMaskedLM"),lst.forEach(t),nDe.forEach(t),rNe=i(m),ko=n(m,"DIV",{class:!0});var Xs=s(ko);T(mL.$$.fragment,Xs),t6o=i(Xs),Bi=n(Xs,"P",{});var gZ=s(Bi);a6o=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jj=n(gZ,"A",{href:!0});var ist=s(Jj);n6o=r(ist,"from_pretrained()"),ist.forEach(t),s6o=r(gZ," class method or the "),Yj=n(gZ,"A",{href:!0});var dst=s(Yj);l6o=r(dst,"from_config()"),dst.forEach(t),i6o=r(gZ,` class
method.`),gZ.forEach(t),d6o=i(Xs),fL=n(Xs,"P",{});var sDe=s(fL);c6o=r(sDe,"This class cannot be instantiated directly using "),rce=n(sDe,"CODE",{});var cst=s(rce);m6o=r(cst,"__init__()"),cst.forEach(t),f6o=r(sDe," (throws an error)."),sDe.forEach(t),g6o=i(Xs),st=n(Xs,"DIV",{class:!0});var RA=s(st);T(gL.$$.fragment,RA),h6o=i(RA),tce=n(RA,"P",{});var mst=s(tce);u6o=r(mst,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mst.forEach(t),p6o=i(RA),Ii=n(RA,"P",{});var hZ=s(Ii);_6o=r(hZ,`Note:
Loading a model from its configuration file does `),ace=n(hZ,"STRONG",{});var fst=s(ace);b6o=r(fst,"not"),fst.forEach(t),v6o=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=n(hZ,"A",{href:!0});var gst=s(Kj);F6o=r(gst,"from_pretrained()"),gst.forEach(t),T6o=r(hZ," to load the model weights."),hZ.forEach(t),M6o=i(RA),T(Rb.$$.fragment,RA),RA.forEach(t),E6o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(hL.$$.fragment,aa),C6o=i(aa),nce=n(aa,"P",{});var hst=s(nce);w6o=r(hst,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hst.forEach(t),A6o=i(aa),ka=n(aa,"P",{});var PA=s(ka);y6o=r(PA,"The model class to instantiate is selected based on the "),sce=n(PA,"CODE",{});var ust=s(sce);L6o=r(ust,"model_type"),ust.forEach(t),x6o=r(PA,` property of the config object (either
passed as an argument or loaded from `),lce=n(PA,"CODE",{});var pst=s(lce);$6o=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),k6o=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(PA,"CODE",{});var _st=s(ice);S6o=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),R6o=r(PA,":"),PA.forEach(t),P6o=i(aa),W=n(aa,"UL",{});var U=s(W);Pb=n(U,"LI",{});var O8e=s(Pb);dce=n(O8e,"STRONG",{});var bst=s(dce);B6o=r(bst,"albert"),bst.forEach(t),I6o=r(O8e," \u2014 "),Zj=n(O8e,"A",{href:!0});var vst=s(Zj);q6o=r(vst,"AlbertForMaskedLM"),vst.forEach(t),N6o=r(O8e," (ALBERT model)"),O8e.forEach(t),j6o=i(U),Bb=n(U,"LI",{});var V8e=s(Bb);cce=n(V8e,"STRONG",{});var Fst=s(cce);D6o=r(Fst,"bart"),Fst.forEach(t),G6o=r(V8e," \u2014 "),eD=n(V8e,"A",{href:!0});var Tst=s(eD);O6o=r(Tst,"BartForConditionalGeneration"),Tst.forEach(t),V6o=r(V8e," (BART model)"),V8e.forEach(t),X6o=i(U),Ib=n(U,"LI",{});var X8e=s(Ib);mce=n(X8e,"STRONG",{});var Mst=s(mce);z6o=r(Mst,"bert"),Mst.forEach(t),W6o=r(X8e," \u2014 "),oD=n(X8e,"A",{href:!0});var Est=s(oD);Q6o=r(Est,"BertForMaskedLM"),Est.forEach(t),H6o=r(X8e," (BERT model)"),X8e.forEach(t),U6o=i(U),qb=n(U,"LI",{});var z8e=s(qb);fce=n(z8e,"STRONG",{});var Cst=s(fce);J6o=r(Cst,"big_bird"),Cst.forEach(t),Y6o=r(z8e," \u2014 "),rD=n(z8e,"A",{href:!0});var wst=s(rD);K6o=r(wst,"BigBirdForMaskedLM"),wst.forEach(t),Z6o=r(z8e," (BigBird model)"),z8e.forEach(t),eyo=i(U),Nb=n(U,"LI",{});var W8e=s(Nb);gce=n(W8e,"STRONG",{});var Ast=s(gce);oyo=r(Ast,"camembert"),Ast.forEach(t),ryo=r(W8e," \u2014 "),tD=n(W8e,"A",{href:!0});var yst=s(tD);tyo=r(yst,"CamembertForMaskedLM"),yst.forEach(t),ayo=r(W8e," (CamemBERT model)"),W8e.forEach(t),nyo=i(U),jb=n(U,"LI",{});var Q8e=s(jb);hce=n(Q8e,"STRONG",{});var Lst=s(hce);syo=r(Lst,"convbert"),Lst.forEach(t),lyo=r(Q8e," \u2014 "),aD=n(Q8e,"A",{href:!0});var xst=s(aD);iyo=r(xst,"ConvBertForMaskedLM"),xst.forEach(t),dyo=r(Q8e," (ConvBERT model)"),Q8e.forEach(t),cyo=i(U),Db=n(U,"LI",{});var H8e=s(Db);uce=n(H8e,"STRONG",{});var $st=s(uce);myo=r($st,"data2vec-text"),$st.forEach(t),fyo=r(H8e," \u2014 "),nD=n(H8e,"A",{href:!0});var kst=s(nD);gyo=r(kst,"Data2VecTextForMaskedLM"),kst.forEach(t),hyo=r(H8e," (Data2VecText model)"),H8e.forEach(t),uyo=i(U),Gb=n(U,"LI",{});var U8e=s(Gb);pce=n(U8e,"STRONG",{});var Sst=s(pce);pyo=r(Sst,"deberta"),Sst.forEach(t),_yo=r(U8e," \u2014 "),sD=n(U8e,"A",{href:!0});var Rst=s(sD);byo=r(Rst,"DebertaForMaskedLM"),Rst.forEach(t),vyo=r(U8e," (DeBERTa model)"),U8e.forEach(t),Fyo=i(U),Ob=n(U,"LI",{});var J8e=s(Ob);_ce=n(J8e,"STRONG",{});var Pst=s(_ce);Tyo=r(Pst,"deberta-v2"),Pst.forEach(t),Myo=r(J8e," \u2014 "),lD=n(J8e,"A",{href:!0});var Bst=s(lD);Eyo=r(Bst,"DebertaV2ForMaskedLM"),Bst.forEach(t),Cyo=r(J8e," (DeBERTa-v2 model)"),J8e.forEach(t),wyo=i(U),Vb=n(U,"LI",{});var Y8e=s(Vb);bce=n(Y8e,"STRONG",{});var Ist=s(bce);Ayo=r(Ist,"distilbert"),Ist.forEach(t),yyo=r(Y8e," \u2014 "),iD=n(Y8e,"A",{href:!0});var qst=s(iD);Lyo=r(qst,"DistilBertForMaskedLM"),qst.forEach(t),xyo=r(Y8e," (DistilBERT model)"),Y8e.forEach(t),$yo=i(U),Xb=n(U,"LI",{});var K8e=s(Xb);vce=n(K8e,"STRONG",{});var Nst=s(vce);kyo=r(Nst,"electra"),Nst.forEach(t),Syo=r(K8e," \u2014 "),dD=n(K8e,"A",{href:!0});var jst=s(dD);Ryo=r(jst,"ElectraForMaskedLM"),jst.forEach(t),Pyo=r(K8e," (ELECTRA model)"),K8e.forEach(t),Byo=i(U),zb=n(U,"LI",{});var Z8e=s(zb);Fce=n(Z8e,"STRONG",{});var Dst=s(Fce);Iyo=r(Dst,"flaubert"),Dst.forEach(t),qyo=r(Z8e," \u2014 "),cD=n(Z8e,"A",{href:!0});var Gst=s(cD);Nyo=r(Gst,"FlaubertWithLMHeadModel"),Gst.forEach(t),jyo=r(Z8e," (FlauBERT model)"),Z8e.forEach(t),Dyo=i(U),Wb=n(U,"LI",{});var e7e=s(Wb);Tce=n(e7e,"STRONG",{});var Ost=s(Tce);Gyo=r(Ost,"fnet"),Ost.forEach(t),Oyo=r(e7e," \u2014 "),mD=n(e7e,"A",{href:!0});var Vst=s(mD);Vyo=r(Vst,"FNetForMaskedLM"),Vst.forEach(t),Xyo=r(e7e," (FNet model)"),e7e.forEach(t),zyo=i(U),Qb=n(U,"LI",{});var o7e=s(Qb);Mce=n(o7e,"STRONG",{});var Xst=s(Mce);Wyo=r(Xst,"funnel"),Xst.forEach(t),Qyo=r(o7e," \u2014 "),fD=n(o7e,"A",{href:!0});var zst=s(fD);Hyo=r(zst,"FunnelForMaskedLM"),zst.forEach(t),Uyo=r(o7e," (Funnel Transformer model)"),o7e.forEach(t),Jyo=i(U),Hb=n(U,"LI",{});var r7e=s(Hb);Ece=n(r7e,"STRONG",{});var Wst=s(Ece);Yyo=r(Wst,"ibert"),Wst.forEach(t),Kyo=r(r7e," \u2014 "),gD=n(r7e,"A",{href:!0});var Qst=s(gD);Zyo=r(Qst,"IBertForMaskedLM"),Qst.forEach(t),eLo=r(r7e," (I-BERT model)"),r7e.forEach(t),oLo=i(U),Ub=n(U,"LI",{});var t7e=s(Ub);Cce=n(t7e,"STRONG",{});var Hst=s(Cce);rLo=r(Hst,"layoutlm"),Hst.forEach(t),tLo=r(t7e," \u2014 "),hD=n(t7e,"A",{href:!0});var Ust=s(hD);aLo=r(Ust,"LayoutLMForMaskedLM"),Ust.forEach(t),nLo=r(t7e," (LayoutLM model)"),t7e.forEach(t),sLo=i(U),Jb=n(U,"LI",{});var a7e=s(Jb);wce=n(a7e,"STRONG",{});var Jst=s(wce);lLo=r(Jst,"longformer"),Jst.forEach(t),iLo=r(a7e," \u2014 "),uD=n(a7e,"A",{href:!0});var Yst=s(uD);dLo=r(Yst,"LongformerForMaskedLM"),Yst.forEach(t),cLo=r(a7e," (Longformer model)"),a7e.forEach(t),mLo=i(U),Yb=n(U,"LI",{});var n7e=s(Yb);Ace=n(n7e,"STRONG",{});var Kst=s(Ace);fLo=r(Kst,"mbart"),Kst.forEach(t),gLo=r(n7e," \u2014 "),pD=n(n7e,"A",{href:!0});var Zst=s(pD);hLo=r(Zst,"MBartForConditionalGeneration"),Zst.forEach(t),uLo=r(n7e," (mBART model)"),n7e.forEach(t),pLo=i(U),Kb=n(U,"LI",{});var s7e=s(Kb);yce=n(s7e,"STRONG",{});var elt=s(yce);_Lo=r(elt,"megatron-bert"),elt.forEach(t),bLo=r(s7e," \u2014 "),_D=n(s7e,"A",{href:!0});var olt=s(_D);vLo=r(olt,"MegatronBertForMaskedLM"),olt.forEach(t),FLo=r(s7e," (MegatronBert model)"),s7e.forEach(t),TLo=i(U),Zb=n(U,"LI",{});var l7e=s(Zb);Lce=n(l7e,"STRONG",{});var rlt=s(Lce);MLo=r(rlt,"mobilebert"),rlt.forEach(t),ELo=r(l7e," \u2014 "),bD=n(l7e,"A",{href:!0});var tlt=s(bD);CLo=r(tlt,"MobileBertForMaskedLM"),tlt.forEach(t),wLo=r(l7e," (MobileBERT model)"),l7e.forEach(t),ALo=i(U),e2=n(U,"LI",{});var i7e=s(e2);xce=n(i7e,"STRONG",{});var alt=s(xce);yLo=r(alt,"mpnet"),alt.forEach(t),LLo=r(i7e," \u2014 "),vD=n(i7e,"A",{href:!0});var nlt=s(vD);xLo=r(nlt,"MPNetForMaskedLM"),nlt.forEach(t),$Lo=r(i7e," (MPNet model)"),i7e.forEach(t),kLo=i(U),o2=n(U,"LI",{});var d7e=s(o2);$ce=n(d7e,"STRONG",{});var slt=s($ce);SLo=r(slt,"nystromformer"),slt.forEach(t),RLo=r(d7e," \u2014 "),FD=n(d7e,"A",{href:!0});var llt=s(FD);PLo=r(llt,"NystromformerForMaskedLM"),llt.forEach(t),BLo=r(d7e," (Nystromformer model)"),d7e.forEach(t),ILo=i(U),r2=n(U,"LI",{});var c7e=s(r2);kce=n(c7e,"STRONG",{});var ilt=s(kce);qLo=r(ilt,"perceiver"),ilt.forEach(t),NLo=r(c7e," \u2014 "),TD=n(c7e,"A",{href:!0});var dlt=s(TD);jLo=r(dlt,"PerceiverForMaskedLM"),dlt.forEach(t),DLo=r(c7e," (Perceiver model)"),c7e.forEach(t),GLo=i(U),t2=n(U,"LI",{});var m7e=s(t2);Sce=n(m7e,"STRONG",{});var clt=s(Sce);OLo=r(clt,"qdqbert"),clt.forEach(t),VLo=r(m7e," \u2014 "),MD=n(m7e,"A",{href:!0});var mlt=s(MD);XLo=r(mlt,"QDQBertForMaskedLM"),mlt.forEach(t),zLo=r(m7e," (QDQBert model)"),m7e.forEach(t),WLo=i(U),a2=n(U,"LI",{});var f7e=s(a2);Rce=n(f7e,"STRONG",{});var flt=s(Rce);QLo=r(flt,"reformer"),flt.forEach(t),HLo=r(f7e," \u2014 "),ED=n(f7e,"A",{href:!0});var glt=s(ED);ULo=r(glt,"ReformerForMaskedLM"),glt.forEach(t),JLo=r(f7e," (Reformer model)"),f7e.forEach(t),YLo=i(U),n2=n(U,"LI",{});var g7e=s(n2);Pce=n(g7e,"STRONG",{});var hlt=s(Pce);KLo=r(hlt,"rembert"),hlt.forEach(t),ZLo=r(g7e," \u2014 "),CD=n(g7e,"A",{href:!0});var ult=s(CD);e8o=r(ult,"RemBertForMaskedLM"),ult.forEach(t),o8o=r(g7e," (RemBERT model)"),g7e.forEach(t),r8o=i(U),s2=n(U,"LI",{});var h7e=s(s2);Bce=n(h7e,"STRONG",{});var plt=s(Bce);t8o=r(plt,"roberta"),plt.forEach(t),a8o=r(h7e," \u2014 "),wD=n(h7e,"A",{href:!0});var _lt=s(wD);n8o=r(_lt,"RobertaForMaskedLM"),_lt.forEach(t),s8o=r(h7e," (RoBERTa model)"),h7e.forEach(t),l8o=i(U),l2=n(U,"LI",{});var u7e=s(l2);Ice=n(u7e,"STRONG",{});var blt=s(Ice);i8o=r(blt,"roformer"),blt.forEach(t),d8o=r(u7e," \u2014 "),AD=n(u7e,"A",{href:!0});var vlt=s(AD);c8o=r(vlt,"RoFormerForMaskedLM"),vlt.forEach(t),m8o=r(u7e," (RoFormer model)"),u7e.forEach(t),f8o=i(U),i2=n(U,"LI",{});var p7e=s(i2);qce=n(p7e,"STRONG",{});var Flt=s(qce);g8o=r(Flt,"squeezebert"),Flt.forEach(t),h8o=r(p7e," \u2014 "),yD=n(p7e,"A",{href:!0});var Tlt=s(yD);u8o=r(Tlt,"SqueezeBertForMaskedLM"),Tlt.forEach(t),p8o=r(p7e," (SqueezeBERT model)"),p7e.forEach(t),_8o=i(U),d2=n(U,"LI",{});var _7e=s(d2);Nce=n(_7e,"STRONG",{});var Mlt=s(Nce);b8o=r(Mlt,"tapas"),Mlt.forEach(t),v8o=r(_7e," \u2014 "),LD=n(_7e,"A",{href:!0});var Elt=s(LD);F8o=r(Elt,"TapasForMaskedLM"),Elt.forEach(t),T8o=r(_7e," (TAPAS model)"),_7e.forEach(t),M8o=i(U),c2=n(U,"LI",{});var b7e=s(c2);jce=n(b7e,"STRONG",{});var Clt=s(jce);E8o=r(Clt,"wav2vec2"),Clt.forEach(t),C8o=r(b7e," \u2014 "),Dce=n(b7e,"CODE",{});var wlt=s(Dce);w8o=r(wlt,"Wav2Vec2ForMaskedLM"),wlt.forEach(t),A8o=r(b7e," (Wav2Vec2 model)"),b7e.forEach(t),y8o=i(U),m2=n(U,"LI",{});var v7e=s(m2);Gce=n(v7e,"STRONG",{});var Alt=s(Gce);L8o=r(Alt,"xlm"),Alt.forEach(t),x8o=r(v7e," \u2014 "),xD=n(v7e,"A",{href:!0});var ylt=s(xD);$8o=r(ylt,"XLMWithLMHeadModel"),ylt.forEach(t),k8o=r(v7e," (XLM model)"),v7e.forEach(t),S8o=i(U),f2=n(U,"LI",{});var F7e=s(f2);Oce=n(F7e,"STRONG",{});var Llt=s(Oce);R8o=r(Llt,"xlm-roberta"),Llt.forEach(t),P8o=r(F7e," \u2014 "),$D=n(F7e,"A",{href:!0});var xlt=s($D);B8o=r(xlt,"XLMRobertaForMaskedLM"),xlt.forEach(t),I8o=r(F7e," (XLM-RoBERTa model)"),F7e.forEach(t),q8o=i(U),g2=n(U,"LI",{});var T7e=s(g2);Vce=n(T7e,"STRONG",{});var $lt=s(Vce);N8o=r($lt,"xlm-roberta-xl"),$lt.forEach(t),j8o=r(T7e," \u2014 "),kD=n(T7e,"A",{href:!0});var klt=s(kD);D8o=r(klt,"XLMRobertaXLForMaskedLM"),klt.forEach(t),G8o=r(T7e," (XLM-RoBERTa-XL model)"),T7e.forEach(t),O8o=i(U),h2=n(U,"LI",{});var M7e=s(h2);Xce=n(M7e,"STRONG",{});var Slt=s(Xce);V8o=r(Slt,"yoso"),Slt.forEach(t),X8o=r(M7e," \u2014 "),SD=n(M7e,"A",{href:!0});var Rlt=s(SD);z8o=r(Rlt,"YosoForMaskedLM"),Rlt.forEach(t),W8o=r(M7e," (YOSO model)"),M7e.forEach(t),U.forEach(t),Q8o=i(aa),u2=n(aa,"P",{});var E7e=s(u2);H8o=r(E7e,"The model is set in evaluation mode by default using "),zce=n(E7e,"CODE",{});var Plt=s(zce);U8o=r(Plt,"model.eval()"),Plt.forEach(t),J8o=r(E7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=n(E7e,"CODE",{});var Blt=s(Wce);Y8o=r(Blt,"model.train()"),Blt.forEach(t),E7e.forEach(t),K8o=i(aa),T(p2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),tNe=i(m),qi=n(m,"H2",{class:!0});var lDe=s(qi);_2=n(lDe,"A",{id:!0,class:!0,href:!0});var Ilt=s(_2);Qce=n(Ilt,"SPAN",{});var qlt=s(Qce);T(uL.$$.fragment,qlt),qlt.forEach(t),Ilt.forEach(t),Z8o=i(lDe),Hce=n(lDe,"SPAN",{});var Nlt=s(Hce);e7o=r(Nlt,"AutoModelForSeq2SeqLM"),Nlt.forEach(t),lDe.forEach(t),aNe=i(m),So=n(m,"DIV",{class:!0});var zs=s(So);T(pL.$$.fragment,zs),o7o=i(zs),Ni=n(zs,"P",{});var uZ=s(Ni);r7o=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RD=n(uZ,"A",{href:!0});var jlt=s(RD);t7o=r(jlt,"from_pretrained()"),jlt.forEach(t),a7o=r(uZ," class method or the "),PD=n(uZ,"A",{href:!0});var Dlt=s(PD);n7o=r(Dlt,"from_config()"),Dlt.forEach(t),s7o=r(uZ,` class
method.`),uZ.forEach(t),l7o=i(zs),_L=n(zs,"P",{});var iDe=s(_L);i7o=r(iDe,"This class cannot be instantiated directly using "),Uce=n(iDe,"CODE",{});var Glt=s(Uce);d7o=r(Glt,"__init__()"),Glt.forEach(t),c7o=r(iDe," (throws an error)."),iDe.forEach(t),m7o=i(zs),lt=n(zs,"DIV",{class:!0});var BA=s(lt);T(bL.$$.fragment,BA),f7o=i(BA),Jce=n(BA,"P",{});var Olt=s(Jce);g7o=r(Olt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Olt.forEach(t),h7o=i(BA),ji=n(BA,"P",{});var pZ=s(ji);u7o=r(pZ,`Note:
Loading a model from its configuration file does `),Yce=n(pZ,"STRONG",{});var Vlt=s(Yce);p7o=r(Vlt,"not"),Vlt.forEach(t),_7o=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(pZ,"A",{href:!0});var Xlt=s(BD);b7o=r(Xlt,"from_pretrained()"),Xlt.forEach(t),v7o=r(pZ," to load the model weights."),pZ.forEach(t),F7o=i(BA),T(b2.$$.fragment,BA),BA.forEach(t),T7o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(vL.$$.fragment,na),M7o=i(na),Kce=n(na,"P",{});var zlt=s(Kce);E7o=r(zlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zlt.forEach(t),C7o=i(na),Sa=n(na,"P",{});var IA=s(Sa);w7o=r(IA,"The model class to instantiate is selected based on the "),Zce=n(IA,"CODE",{});var Wlt=s(Zce);A7o=r(Wlt,"model_type"),Wlt.forEach(t),y7o=r(IA,` property of the config object (either
passed as an argument or loaded from `),eme=n(IA,"CODE",{});var Qlt=s(eme);L7o=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),x7o=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(IA,"CODE",{});var Hlt=s(ome);$7o=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),k7o=r(IA,":"),IA.forEach(t),S7o=i(na),pe=n(na,"UL",{});var ve=s(pe);v2=n(ve,"LI",{});var C7e=s(v2);rme=n(C7e,"STRONG",{});var Ult=s(rme);R7o=r(Ult,"bart"),Ult.forEach(t),P7o=r(C7e," \u2014 "),ID=n(C7e,"A",{href:!0});var Jlt=s(ID);B7o=r(Jlt,"BartForConditionalGeneration"),Jlt.forEach(t),I7o=r(C7e," (BART model)"),C7e.forEach(t),q7o=i(ve),F2=n(ve,"LI",{});var w7e=s(F2);tme=n(w7e,"STRONG",{});var Ylt=s(tme);N7o=r(Ylt,"bigbird_pegasus"),Ylt.forEach(t),j7o=r(w7e," \u2014 "),qD=n(w7e,"A",{href:!0});var Klt=s(qD);D7o=r(Klt,"BigBirdPegasusForConditionalGeneration"),Klt.forEach(t),G7o=r(w7e," (BigBirdPegasus model)"),w7e.forEach(t),O7o=i(ve),T2=n(ve,"LI",{});var A7e=s(T2);ame=n(A7e,"STRONG",{});var Zlt=s(ame);V7o=r(Zlt,"blenderbot"),Zlt.forEach(t),X7o=r(A7e," \u2014 "),ND=n(A7e,"A",{href:!0});var eit=s(ND);z7o=r(eit,"BlenderbotForConditionalGeneration"),eit.forEach(t),W7o=r(A7e," (Blenderbot model)"),A7e.forEach(t),Q7o=i(ve),M2=n(ve,"LI",{});var y7e=s(M2);nme=n(y7e,"STRONG",{});var oit=s(nme);H7o=r(oit,"blenderbot-small"),oit.forEach(t),U7o=r(y7e," \u2014 "),jD=n(y7e,"A",{href:!0});var rit=s(jD);J7o=r(rit,"BlenderbotSmallForConditionalGeneration"),rit.forEach(t),Y7o=r(y7e," (BlenderbotSmall model)"),y7e.forEach(t),K7o=i(ve),E2=n(ve,"LI",{});var L7e=s(E2);sme=n(L7e,"STRONG",{});var tit=s(sme);Z7o=r(tit,"encoder-decoder"),tit.forEach(t),e9o=r(L7e," \u2014 "),DD=n(L7e,"A",{href:!0});var ait=s(DD);o9o=r(ait,"EncoderDecoderModel"),ait.forEach(t),r9o=r(L7e," (Encoder decoder model)"),L7e.forEach(t),t9o=i(ve),C2=n(ve,"LI",{});var x7e=s(C2);lme=n(x7e,"STRONG",{});var nit=s(lme);a9o=r(nit,"fsmt"),nit.forEach(t),n9o=r(x7e," \u2014 "),GD=n(x7e,"A",{href:!0});var sit=s(GD);s9o=r(sit,"FSMTForConditionalGeneration"),sit.forEach(t),l9o=r(x7e," (FairSeq Machine-Translation model)"),x7e.forEach(t),i9o=i(ve),w2=n(ve,"LI",{});var $7e=s(w2);ime=n($7e,"STRONG",{});var lit=s(ime);d9o=r(lit,"led"),lit.forEach(t),c9o=r($7e," \u2014 "),OD=n($7e,"A",{href:!0});var iit=s(OD);m9o=r(iit,"LEDForConditionalGeneration"),iit.forEach(t),f9o=r($7e," (LED model)"),$7e.forEach(t),g9o=i(ve),A2=n(ve,"LI",{});var k7e=s(A2);dme=n(k7e,"STRONG",{});var dit=s(dme);h9o=r(dit,"m2m_100"),dit.forEach(t),u9o=r(k7e," \u2014 "),VD=n(k7e,"A",{href:!0});var cit=s(VD);p9o=r(cit,"M2M100ForConditionalGeneration"),cit.forEach(t),_9o=r(k7e," (M2M100 model)"),k7e.forEach(t),b9o=i(ve),y2=n(ve,"LI",{});var S7e=s(y2);cme=n(S7e,"STRONG",{});var mit=s(cme);v9o=r(mit,"marian"),mit.forEach(t),F9o=r(S7e," \u2014 "),XD=n(S7e,"A",{href:!0});var fit=s(XD);T9o=r(fit,"MarianMTModel"),fit.forEach(t),M9o=r(S7e," (Marian model)"),S7e.forEach(t),E9o=i(ve),L2=n(ve,"LI",{});var R7e=s(L2);mme=n(R7e,"STRONG",{});var git=s(mme);C9o=r(git,"mbart"),git.forEach(t),w9o=r(R7e," \u2014 "),zD=n(R7e,"A",{href:!0});var hit=s(zD);A9o=r(hit,"MBartForConditionalGeneration"),hit.forEach(t),y9o=r(R7e," (mBART model)"),R7e.forEach(t),L9o=i(ve),x2=n(ve,"LI",{});var P7e=s(x2);fme=n(P7e,"STRONG",{});var uit=s(fme);x9o=r(uit,"mt5"),uit.forEach(t),$9o=r(P7e," \u2014 "),WD=n(P7e,"A",{href:!0});var pit=s(WD);k9o=r(pit,"MT5ForConditionalGeneration"),pit.forEach(t),S9o=r(P7e," (mT5 model)"),P7e.forEach(t),R9o=i(ve),$2=n(ve,"LI",{});var B7e=s($2);gme=n(B7e,"STRONG",{});var _it=s(gme);P9o=r(_it,"pegasus"),_it.forEach(t),B9o=r(B7e," \u2014 "),QD=n(B7e,"A",{href:!0});var bit=s(QD);I9o=r(bit,"PegasusForConditionalGeneration"),bit.forEach(t),q9o=r(B7e," (Pegasus model)"),B7e.forEach(t),N9o=i(ve),k2=n(ve,"LI",{});var I7e=s(k2);hme=n(I7e,"STRONG",{});var vit=s(hme);j9o=r(vit,"plbart"),vit.forEach(t),D9o=r(I7e," \u2014 "),HD=n(I7e,"A",{href:!0});var Fit=s(HD);G9o=r(Fit,"PLBartForConditionalGeneration"),Fit.forEach(t),O9o=r(I7e," (PLBart model)"),I7e.forEach(t),V9o=i(ve),S2=n(ve,"LI",{});var q7e=s(S2);ume=n(q7e,"STRONG",{});var Tit=s(ume);X9o=r(Tit,"prophetnet"),Tit.forEach(t),z9o=r(q7e," \u2014 "),UD=n(q7e,"A",{href:!0});var Mit=s(UD);W9o=r(Mit,"ProphetNetForConditionalGeneration"),Mit.forEach(t),Q9o=r(q7e," (ProphetNet model)"),q7e.forEach(t),H9o=i(ve),R2=n(ve,"LI",{});var N7e=s(R2);pme=n(N7e,"STRONG",{});var Eit=s(pme);U9o=r(Eit,"t5"),Eit.forEach(t),J9o=r(N7e," \u2014 "),JD=n(N7e,"A",{href:!0});var Cit=s(JD);Y9o=r(Cit,"T5ForConditionalGeneration"),Cit.forEach(t),K9o=r(N7e," (T5 model)"),N7e.forEach(t),Z9o=i(ve),P2=n(ve,"LI",{});var j7e=s(P2);_me=n(j7e,"STRONG",{});var wit=s(_me);exo=r(wit,"xlm-prophetnet"),wit.forEach(t),oxo=r(j7e," \u2014 "),YD=n(j7e,"A",{href:!0});var Ait=s(YD);rxo=r(Ait,"XLMProphetNetForConditionalGeneration"),Ait.forEach(t),txo=r(j7e," (XLMProphetNet model)"),j7e.forEach(t),ve.forEach(t),axo=i(na),B2=n(na,"P",{});var D7e=s(B2);nxo=r(D7e,"The model is set in evaluation mode by default using "),bme=n(D7e,"CODE",{});var yit=s(bme);sxo=r(yit,"model.eval()"),yit.forEach(t),lxo=r(D7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(D7e,"CODE",{});var Lit=s(vme);ixo=r(Lit,"model.train()"),Lit.forEach(t),D7e.forEach(t),dxo=i(na),T(I2.$$.fragment,na),na.forEach(t),zs.forEach(t),nNe=i(m),Di=n(m,"H2",{class:!0});var dDe=s(Di);q2=n(dDe,"A",{id:!0,class:!0,href:!0});var xit=s(q2);Fme=n(xit,"SPAN",{});var $it=s(Fme);T(FL.$$.fragment,$it),$it.forEach(t),xit.forEach(t),cxo=i(dDe),Tme=n(dDe,"SPAN",{});var kit=s(Tme);mxo=r(kit,"AutoModelForSequenceClassification"),kit.forEach(t),dDe.forEach(t),sNe=i(m),Ro=n(m,"DIV",{class:!0});var Ws=s(Ro);T(TL.$$.fragment,Ws),fxo=i(Ws),Gi=n(Ws,"P",{});var _Z=s(Gi);gxo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KD=n(_Z,"A",{href:!0});var Sit=s(KD);hxo=r(Sit,"from_pretrained()"),Sit.forEach(t),uxo=r(_Z," class method or the "),ZD=n(_Z,"A",{href:!0});var Rit=s(ZD);pxo=r(Rit,"from_config()"),Rit.forEach(t),_xo=r(_Z,` class
method.`),_Z.forEach(t),bxo=i(Ws),ML=n(Ws,"P",{});var cDe=s(ML);vxo=r(cDe,"This class cannot be instantiated directly using "),Mme=n(cDe,"CODE",{});var Pit=s(Mme);Fxo=r(Pit,"__init__()"),Pit.forEach(t),Txo=r(cDe," (throws an error)."),cDe.forEach(t),Mxo=i(Ws),it=n(Ws,"DIV",{class:!0});var qA=s(it);T(EL.$$.fragment,qA),Exo=i(qA),Eme=n(qA,"P",{});var Bit=s(Eme);Cxo=r(Bit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bit.forEach(t),wxo=i(qA),Oi=n(qA,"P",{});var bZ=s(Oi);Axo=r(bZ,`Note:
Loading a model from its configuration file does `),Cme=n(bZ,"STRONG",{});var Iit=s(Cme);yxo=r(Iit,"not"),Iit.forEach(t),Lxo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n(bZ,"A",{href:!0});var qit=s(eG);xxo=r(qit,"from_pretrained()"),qit.forEach(t),$xo=r(bZ," to load the model weights."),bZ.forEach(t),kxo=i(qA),T(N2.$$.fragment,qA),qA.forEach(t),Sxo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(CL.$$.fragment,sa),Rxo=i(sa),wme=n(sa,"P",{});var Nit=s(wme);Pxo=r(Nit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nit.forEach(t),Bxo=i(sa),Ra=n(sa,"P",{});var NA=s(Ra);Ixo=r(NA,"The model class to instantiate is selected based on the "),Ame=n(NA,"CODE",{});var jit=s(Ame);qxo=r(jit,"model_type"),jit.forEach(t),Nxo=r(NA,` property of the config object (either
passed as an argument or loaded from `),yme=n(NA,"CODE",{});var Dit=s(yme);jxo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),Dxo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n(NA,"CODE",{});var Git=s(Lme);Gxo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),Oxo=r(NA,":"),NA.forEach(t),Vxo=i(sa),q=n(sa,"UL",{});var j=s(q);j2=n(j,"LI",{});var G7e=s(j2);xme=n(G7e,"STRONG",{});var Oit=s(xme);Xxo=r(Oit,"albert"),Oit.forEach(t),zxo=r(G7e," \u2014 "),oG=n(G7e,"A",{href:!0});var Vit=s(oG);Wxo=r(Vit,"AlbertForSequenceClassification"),Vit.forEach(t),Qxo=r(G7e," (ALBERT model)"),G7e.forEach(t),Hxo=i(j),D2=n(j,"LI",{});var O7e=s(D2);$me=n(O7e,"STRONG",{});var Xit=s($me);Uxo=r(Xit,"bart"),Xit.forEach(t),Jxo=r(O7e," \u2014 "),rG=n(O7e,"A",{href:!0});var zit=s(rG);Yxo=r(zit,"BartForSequenceClassification"),zit.forEach(t),Kxo=r(O7e," (BART model)"),O7e.forEach(t),Zxo=i(j),G2=n(j,"LI",{});var V7e=s(G2);kme=n(V7e,"STRONG",{});var Wit=s(kme);e$o=r(Wit,"bert"),Wit.forEach(t),o$o=r(V7e," \u2014 "),tG=n(V7e,"A",{href:!0});var Qit=s(tG);r$o=r(Qit,"BertForSequenceClassification"),Qit.forEach(t),t$o=r(V7e," (BERT model)"),V7e.forEach(t),a$o=i(j),O2=n(j,"LI",{});var X7e=s(O2);Sme=n(X7e,"STRONG",{});var Hit=s(Sme);n$o=r(Hit,"big_bird"),Hit.forEach(t),s$o=r(X7e," \u2014 "),aG=n(X7e,"A",{href:!0});var Uit=s(aG);l$o=r(Uit,"BigBirdForSequenceClassification"),Uit.forEach(t),i$o=r(X7e," (BigBird model)"),X7e.forEach(t),d$o=i(j),V2=n(j,"LI",{});var z7e=s(V2);Rme=n(z7e,"STRONG",{});var Jit=s(Rme);c$o=r(Jit,"bigbird_pegasus"),Jit.forEach(t),m$o=r(z7e," \u2014 "),nG=n(z7e,"A",{href:!0});var Yit=s(nG);f$o=r(Yit,"BigBirdPegasusForSequenceClassification"),Yit.forEach(t),g$o=r(z7e," (BigBirdPegasus model)"),z7e.forEach(t),h$o=i(j),X2=n(j,"LI",{});var W7e=s(X2);Pme=n(W7e,"STRONG",{});var Kit=s(Pme);u$o=r(Kit,"camembert"),Kit.forEach(t),p$o=r(W7e," \u2014 "),sG=n(W7e,"A",{href:!0});var Zit=s(sG);_$o=r(Zit,"CamembertForSequenceClassification"),Zit.forEach(t),b$o=r(W7e," (CamemBERT model)"),W7e.forEach(t),v$o=i(j),z2=n(j,"LI",{});var Q7e=s(z2);Bme=n(Q7e,"STRONG",{});var edt=s(Bme);F$o=r(edt,"canine"),edt.forEach(t),T$o=r(Q7e," \u2014 "),lG=n(Q7e,"A",{href:!0});var odt=s(lG);M$o=r(odt,"CanineForSequenceClassification"),odt.forEach(t),E$o=r(Q7e," (Canine model)"),Q7e.forEach(t),C$o=i(j),W2=n(j,"LI",{});var H7e=s(W2);Ime=n(H7e,"STRONG",{});var rdt=s(Ime);w$o=r(rdt,"convbert"),rdt.forEach(t),A$o=r(H7e," \u2014 "),iG=n(H7e,"A",{href:!0});var tdt=s(iG);y$o=r(tdt,"ConvBertForSequenceClassification"),tdt.forEach(t),L$o=r(H7e," (ConvBERT model)"),H7e.forEach(t),x$o=i(j),Q2=n(j,"LI",{});var U7e=s(Q2);qme=n(U7e,"STRONG",{});var adt=s(qme);$$o=r(adt,"ctrl"),adt.forEach(t),k$o=r(U7e," \u2014 "),dG=n(U7e,"A",{href:!0});var ndt=s(dG);S$o=r(ndt,"CTRLForSequenceClassification"),ndt.forEach(t),R$o=r(U7e," (CTRL model)"),U7e.forEach(t),P$o=i(j),H2=n(j,"LI",{});var J7e=s(H2);Nme=n(J7e,"STRONG",{});var sdt=s(Nme);B$o=r(sdt,"data2vec-text"),sdt.forEach(t),I$o=r(J7e," \u2014 "),cG=n(J7e,"A",{href:!0});var ldt=s(cG);q$o=r(ldt,"Data2VecTextForSequenceClassification"),ldt.forEach(t),N$o=r(J7e," (Data2VecText model)"),J7e.forEach(t),j$o=i(j),U2=n(j,"LI",{});var Y7e=s(U2);jme=n(Y7e,"STRONG",{});var idt=s(jme);D$o=r(idt,"deberta"),idt.forEach(t),G$o=r(Y7e," \u2014 "),mG=n(Y7e,"A",{href:!0});var ddt=s(mG);O$o=r(ddt,"DebertaForSequenceClassification"),ddt.forEach(t),V$o=r(Y7e," (DeBERTa model)"),Y7e.forEach(t),X$o=i(j),J2=n(j,"LI",{});var K7e=s(J2);Dme=n(K7e,"STRONG",{});var cdt=s(Dme);z$o=r(cdt,"deberta-v2"),cdt.forEach(t),W$o=r(K7e," \u2014 "),fG=n(K7e,"A",{href:!0});var mdt=s(fG);Q$o=r(mdt,"DebertaV2ForSequenceClassification"),mdt.forEach(t),H$o=r(K7e," (DeBERTa-v2 model)"),K7e.forEach(t),U$o=i(j),Y2=n(j,"LI",{});var Z7e=s(Y2);Gme=n(Z7e,"STRONG",{});var fdt=s(Gme);J$o=r(fdt,"distilbert"),fdt.forEach(t),Y$o=r(Z7e," \u2014 "),gG=n(Z7e,"A",{href:!0});var gdt=s(gG);K$o=r(gdt,"DistilBertForSequenceClassification"),gdt.forEach(t),Z$o=r(Z7e," (DistilBERT model)"),Z7e.forEach(t),eko=i(j),K2=n(j,"LI",{});var e9e=s(K2);Ome=n(e9e,"STRONG",{});var hdt=s(Ome);oko=r(hdt,"electra"),hdt.forEach(t),rko=r(e9e," \u2014 "),hG=n(e9e,"A",{href:!0});var udt=s(hG);tko=r(udt,"ElectraForSequenceClassification"),udt.forEach(t),ako=r(e9e," (ELECTRA model)"),e9e.forEach(t),nko=i(j),Z2=n(j,"LI",{});var o9e=s(Z2);Vme=n(o9e,"STRONG",{});var pdt=s(Vme);sko=r(pdt,"flaubert"),pdt.forEach(t),lko=r(o9e," \u2014 "),uG=n(o9e,"A",{href:!0});var _dt=s(uG);iko=r(_dt,"FlaubertForSequenceClassification"),_dt.forEach(t),dko=r(o9e," (FlauBERT model)"),o9e.forEach(t),cko=i(j),ev=n(j,"LI",{});var r9e=s(ev);Xme=n(r9e,"STRONG",{});var bdt=s(Xme);mko=r(bdt,"fnet"),bdt.forEach(t),fko=r(r9e," \u2014 "),pG=n(r9e,"A",{href:!0});var vdt=s(pG);gko=r(vdt,"FNetForSequenceClassification"),vdt.forEach(t),hko=r(r9e," (FNet model)"),r9e.forEach(t),uko=i(j),ov=n(j,"LI",{});var t9e=s(ov);zme=n(t9e,"STRONG",{});var Fdt=s(zme);pko=r(Fdt,"funnel"),Fdt.forEach(t),_ko=r(t9e," \u2014 "),_G=n(t9e,"A",{href:!0});var Tdt=s(_G);bko=r(Tdt,"FunnelForSequenceClassification"),Tdt.forEach(t),vko=r(t9e," (Funnel Transformer model)"),t9e.forEach(t),Fko=i(j),rv=n(j,"LI",{});var a9e=s(rv);Wme=n(a9e,"STRONG",{});var Mdt=s(Wme);Tko=r(Mdt,"gpt2"),Mdt.forEach(t),Mko=r(a9e," \u2014 "),bG=n(a9e,"A",{href:!0});var Edt=s(bG);Eko=r(Edt,"GPT2ForSequenceClassification"),Edt.forEach(t),Cko=r(a9e," (OpenAI GPT-2 model)"),a9e.forEach(t),wko=i(j),tv=n(j,"LI",{});var n9e=s(tv);Qme=n(n9e,"STRONG",{});var Cdt=s(Qme);Ako=r(Cdt,"gpt_neo"),Cdt.forEach(t),yko=r(n9e," \u2014 "),vG=n(n9e,"A",{href:!0});var wdt=s(vG);Lko=r(wdt,"GPTNeoForSequenceClassification"),wdt.forEach(t),xko=r(n9e," (GPT Neo model)"),n9e.forEach(t),$ko=i(j),av=n(j,"LI",{});var s9e=s(av);Hme=n(s9e,"STRONG",{});var Adt=s(Hme);kko=r(Adt,"gptj"),Adt.forEach(t),Sko=r(s9e," \u2014 "),FG=n(s9e,"A",{href:!0});var ydt=s(FG);Rko=r(ydt,"GPTJForSequenceClassification"),ydt.forEach(t),Pko=r(s9e," (GPT-J model)"),s9e.forEach(t),Bko=i(j),nv=n(j,"LI",{});var l9e=s(nv);Ume=n(l9e,"STRONG",{});var Ldt=s(Ume);Iko=r(Ldt,"ibert"),Ldt.forEach(t),qko=r(l9e," \u2014 "),TG=n(l9e,"A",{href:!0});var xdt=s(TG);Nko=r(xdt,"IBertForSequenceClassification"),xdt.forEach(t),jko=r(l9e," (I-BERT model)"),l9e.forEach(t),Dko=i(j),sv=n(j,"LI",{});var i9e=s(sv);Jme=n(i9e,"STRONG",{});var $dt=s(Jme);Gko=r($dt,"layoutlm"),$dt.forEach(t),Oko=r(i9e," \u2014 "),MG=n(i9e,"A",{href:!0});var kdt=s(MG);Vko=r(kdt,"LayoutLMForSequenceClassification"),kdt.forEach(t),Xko=r(i9e," (LayoutLM model)"),i9e.forEach(t),zko=i(j),lv=n(j,"LI",{});var d9e=s(lv);Yme=n(d9e,"STRONG",{});var Sdt=s(Yme);Wko=r(Sdt,"layoutlmv2"),Sdt.forEach(t),Qko=r(d9e," \u2014 "),EG=n(d9e,"A",{href:!0});var Rdt=s(EG);Hko=r(Rdt,"LayoutLMv2ForSequenceClassification"),Rdt.forEach(t),Uko=r(d9e," (LayoutLMv2 model)"),d9e.forEach(t),Jko=i(j),iv=n(j,"LI",{});var c9e=s(iv);Kme=n(c9e,"STRONG",{});var Pdt=s(Kme);Yko=r(Pdt,"layoutlmv3"),Pdt.forEach(t),Kko=r(c9e," \u2014 "),CG=n(c9e,"A",{href:!0});var Bdt=s(CG);Zko=r(Bdt,"LayoutLMv3ForSequenceClassification"),Bdt.forEach(t),eSo=r(c9e," (LayoutLMv3 model)"),c9e.forEach(t),oSo=i(j),dv=n(j,"LI",{});var m9e=s(dv);Zme=n(m9e,"STRONG",{});var Idt=s(Zme);rSo=r(Idt,"led"),Idt.forEach(t),tSo=r(m9e," \u2014 "),wG=n(m9e,"A",{href:!0});var qdt=s(wG);aSo=r(qdt,"LEDForSequenceClassification"),qdt.forEach(t),nSo=r(m9e," (LED model)"),m9e.forEach(t),sSo=i(j),cv=n(j,"LI",{});var f9e=s(cv);efe=n(f9e,"STRONG",{});var Ndt=s(efe);lSo=r(Ndt,"longformer"),Ndt.forEach(t),iSo=r(f9e," \u2014 "),AG=n(f9e,"A",{href:!0});var jdt=s(AG);dSo=r(jdt,"LongformerForSequenceClassification"),jdt.forEach(t),cSo=r(f9e," (Longformer model)"),f9e.forEach(t),mSo=i(j),mv=n(j,"LI",{});var g9e=s(mv);ofe=n(g9e,"STRONG",{});var Ddt=s(ofe);fSo=r(Ddt,"mbart"),Ddt.forEach(t),gSo=r(g9e," \u2014 "),yG=n(g9e,"A",{href:!0});var Gdt=s(yG);hSo=r(Gdt,"MBartForSequenceClassification"),Gdt.forEach(t),uSo=r(g9e," (mBART model)"),g9e.forEach(t),pSo=i(j),fv=n(j,"LI",{});var h9e=s(fv);rfe=n(h9e,"STRONG",{});var Odt=s(rfe);_So=r(Odt,"megatron-bert"),Odt.forEach(t),bSo=r(h9e," \u2014 "),LG=n(h9e,"A",{href:!0});var Vdt=s(LG);vSo=r(Vdt,"MegatronBertForSequenceClassification"),Vdt.forEach(t),FSo=r(h9e," (MegatronBert model)"),h9e.forEach(t),TSo=i(j),gv=n(j,"LI",{});var u9e=s(gv);tfe=n(u9e,"STRONG",{});var Xdt=s(tfe);MSo=r(Xdt,"mobilebert"),Xdt.forEach(t),ESo=r(u9e," \u2014 "),xG=n(u9e,"A",{href:!0});var zdt=s(xG);CSo=r(zdt,"MobileBertForSequenceClassification"),zdt.forEach(t),wSo=r(u9e," (MobileBERT model)"),u9e.forEach(t),ASo=i(j),hv=n(j,"LI",{});var p9e=s(hv);afe=n(p9e,"STRONG",{});var Wdt=s(afe);ySo=r(Wdt,"mpnet"),Wdt.forEach(t),LSo=r(p9e," \u2014 "),$G=n(p9e,"A",{href:!0});var Qdt=s($G);xSo=r(Qdt,"MPNetForSequenceClassification"),Qdt.forEach(t),$So=r(p9e," (MPNet model)"),p9e.forEach(t),kSo=i(j),uv=n(j,"LI",{});var _9e=s(uv);nfe=n(_9e,"STRONG",{});var Hdt=s(nfe);SSo=r(Hdt,"nystromformer"),Hdt.forEach(t),RSo=r(_9e," \u2014 "),kG=n(_9e,"A",{href:!0});var Udt=s(kG);PSo=r(Udt,"NystromformerForSequenceClassification"),Udt.forEach(t),BSo=r(_9e," (Nystromformer model)"),_9e.forEach(t),ISo=i(j),pv=n(j,"LI",{});var b9e=s(pv);sfe=n(b9e,"STRONG",{});var Jdt=s(sfe);qSo=r(Jdt,"openai-gpt"),Jdt.forEach(t),NSo=r(b9e," \u2014 "),SG=n(b9e,"A",{href:!0});var Ydt=s(SG);jSo=r(Ydt,"OpenAIGPTForSequenceClassification"),Ydt.forEach(t),DSo=r(b9e," (OpenAI GPT model)"),b9e.forEach(t),GSo=i(j),_v=n(j,"LI",{});var v9e=s(_v);lfe=n(v9e,"STRONG",{});var Kdt=s(lfe);OSo=r(Kdt,"perceiver"),Kdt.forEach(t),VSo=r(v9e," \u2014 "),RG=n(v9e,"A",{href:!0});var Zdt=s(RG);XSo=r(Zdt,"PerceiverForSequenceClassification"),Zdt.forEach(t),zSo=r(v9e," (Perceiver model)"),v9e.forEach(t),WSo=i(j),bv=n(j,"LI",{});var F9e=s(bv);ife=n(F9e,"STRONG",{});var ect=s(ife);QSo=r(ect,"plbart"),ect.forEach(t),HSo=r(F9e," \u2014 "),PG=n(F9e,"A",{href:!0});var oct=s(PG);USo=r(oct,"PLBartForSequenceClassification"),oct.forEach(t),JSo=r(F9e," (PLBart model)"),F9e.forEach(t),YSo=i(j),vv=n(j,"LI",{});var T9e=s(vv);dfe=n(T9e,"STRONG",{});var rct=s(dfe);KSo=r(rct,"qdqbert"),rct.forEach(t),ZSo=r(T9e," \u2014 "),BG=n(T9e,"A",{href:!0});var tct=s(BG);eRo=r(tct,"QDQBertForSequenceClassification"),tct.forEach(t),oRo=r(T9e," (QDQBert model)"),T9e.forEach(t),rRo=i(j),Fv=n(j,"LI",{});var M9e=s(Fv);cfe=n(M9e,"STRONG",{});var act=s(cfe);tRo=r(act,"reformer"),act.forEach(t),aRo=r(M9e," \u2014 "),IG=n(M9e,"A",{href:!0});var nct=s(IG);nRo=r(nct,"ReformerForSequenceClassification"),nct.forEach(t),sRo=r(M9e," (Reformer model)"),M9e.forEach(t),lRo=i(j),Tv=n(j,"LI",{});var E9e=s(Tv);mfe=n(E9e,"STRONG",{});var sct=s(mfe);iRo=r(sct,"rembert"),sct.forEach(t),dRo=r(E9e," \u2014 "),qG=n(E9e,"A",{href:!0});var lct=s(qG);cRo=r(lct,"RemBertForSequenceClassification"),lct.forEach(t),mRo=r(E9e," (RemBERT model)"),E9e.forEach(t),fRo=i(j),Mv=n(j,"LI",{});var C9e=s(Mv);ffe=n(C9e,"STRONG",{});var ict=s(ffe);gRo=r(ict,"roberta"),ict.forEach(t),hRo=r(C9e," \u2014 "),NG=n(C9e,"A",{href:!0});var dct=s(NG);uRo=r(dct,"RobertaForSequenceClassification"),dct.forEach(t),pRo=r(C9e," (RoBERTa model)"),C9e.forEach(t),_Ro=i(j),Ev=n(j,"LI",{});var w9e=s(Ev);gfe=n(w9e,"STRONG",{});var cct=s(gfe);bRo=r(cct,"roformer"),cct.forEach(t),vRo=r(w9e," \u2014 "),jG=n(w9e,"A",{href:!0});var mct=s(jG);FRo=r(mct,"RoFormerForSequenceClassification"),mct.forEach(t),TRo=r(w9e," (RoFormer model)"),w9e.forEach(t),MRo=i(j),Cv=n(j,"LI",{});var A9e=s(Cv);hfe=n(A9e,"STRONG",{});var fct=s(hfe);ERo=r(fct,"squeezebert"),fct.forEach(t),CRo=r(A9e," \u2014 "),DG=n(A9e,"A",{href:!0});var gct=s(DG);wRo=r(gct,"SqueezeBertForSequenceClassification"),gct.forEach(t),ARo=r(A9e," (SqueezeBERT model)"),A9e.forEach(t),yRo=i(j),wv=n(j,"LI",{});var y9e=s(wv);ufe=n(y9e,"STRONG",{});var hct=s(ufe);LRo=r(hct,"tapas"),hct.forEach(t),xRo=r(y9e," \u2014 "),GG=n(y9e,"A",{href:!0});var uct=s(GG);$Ro=r(uct,"TapasForSequenceClassification"),uct.forEach(t),kRo=r(y9e," (TAPAS model)"),y9e.forEach(t),SRo=i(j),Av=n(j,"LI",{});var L9e=s(Av);pfe=n(L9e,"STRONG",{});var pct=s(pfe);RRo=r(pct,"transfo-xl"),pct.forEach(t),PRo=r(L9e," \u2014 "),OG=n(L9e,"A",{href:!0});var _ct=s(OG);BRo=r(_ct,"TransfoXLForSequenceClassification"),_ct.forEach(t),IRo=r(L9e," (Transformer-XL model)"),L9e.forEach(t),qRo=i(j),yv=n(j,"LI",{});var x9e=s(yv);_fe=n(x9e,"STRONG",{});var bct=s(_fe);NRo=r(bct,"xlm"),bct.forEach(t),jRo=r(x9e," \u2014 "),VG=n(x9e,"A",{href:!0});var vct=s(VG);DRo=r(vct,"XLMForSequenceClassification"),vct.forEach(t),GRo=r(x9e," (XLM model)"),x9e.forEach(t),ORo=i(j),Lv=n(j,"LI",{});var $9e=s(Lv);bfe=n($9e,"STRONG",{});var Fct=s(bfe);VRo=r(Fct,"xlm-roberta"),Fct.forEach(t),XRo=r($9e," \u2014 "),XG=n($9e,"A",{href:!0});var Tct=s(XG);zRo=r(Tct,"XLMRobertaForSequenceClassification"),Tct.forEach(t),WRo=r($9e," (XLM-RoBERTa model)"),$9e.forEach(t),QRo=i(j),xv=n(j,"LI",{});var k9e=s(xv);vfe=n(k9e,"STRONG",{});var Mct=s(vfe);HRo=r(Mct,"xlm-roberta-xl"),Mct.forEach(t),URo=r(k9e," \u2014 "),zG=n(k9e,"A",{href:!0});var Ect=s(zG);JRo=r(Ect,"XLMRobertaXLForSequenceClassification"),Ect.forEach(t),YRo=r(k9e," (XLM-RoBERTa-XL model)"),k9e.forEach(t),KRo=i(j),$v=n(j,"LI",{});var S9e=s($v);Ffe=n(S9e,"STRONG",{});var Cct=s(Ffe);ZRo=r(Cct,"xlnet"),Cct.forEach(t),ePo=r(S9e," \u2014 "),WG=n(S9e,"A",{href:!0});var wct=s(WG);oPo=r(wct,"XLNetForSequenceClassification"),wct.forEach(t),rPo=r(S9e," (XLNet model)"),S9e.forEach(t),tPo=i(j),kv=n(j,"LI",{});var R9e=s(kv);Tfe=n(R9e,"STRONG",{});var Act=s(Tfe);aPo=r(Act,"yoso"),Act.forEach(t),nPo=r(R9e," \u2014 "),QG=n(R9e,"A",{href:!0});var yct=s(QG);sPo=r(yct,"YosoForSequenceClassification"),yct.forEach(t),lPo=r(R9e," (YOSO model)"),R9e.forEach(t),j.forEach(t),iPo=i(sa),Sv=n(sa,"P",{});var P9e=s(Sv);dPo=r(P9e,"The model is set in evaluation mode by default using "),Mfe=n(P9e,"CODE",{});var Lct=s(Mfe);cPo=r(Lct,"model.eval()"),Lct.forEach(t),mPo=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=n(P9e,"CODE",{});var xct=s(Efe);fPo=r(xct,"model.train()"),xct.forEach(t),P9e.forEach(t),gPo=i(sa),T(Rv.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),lNe=i(m),Vi=n(m,"H2",{class:!0});var mDe=s(Vi);Pv=n(mDe,"A",{id:!0,class:!0,href:!0});var $ct=s(Pv);Cfe=n($ct,"SPAN",{});var kct=s(Cfe);T(wL.$$.fragment,kct),kct.forEach(t),$ct.forEach(t),hPo=i(mDe),wfe=n(mDe,"SPAN",{});var Sct=s(wfe);uPo=r(Sct,"AutoModelForMultipleChoice"),Sct.forEach(t),mDe.forEach(t),iNe=i(m),Po=n(m,"DIV",{class:!0});var Qs=s(Po);T(AL.$$.fragment,Qs),pPo=i(Qs),Xi=n(Qs,"P",{});var vZ=s(Xi);_Po=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HG=n(vZ,"A",{href:!0});var Rct=s(HG);bPo=r(Rct,"from_pretrained()"),Rct.forEach(t),vPo=r(vZ," class method or the "),UG=n(vZ,"A",{href:!0});var Pct=s(UG);FPo=r(Pct,"from_config()"),Pct.forEach(t),TPo=r(vZ,` class
method.`),vZ.forEach(t),MPo=i(Qs),yL=n(Qs,"P",{});var fDe=s(yL);EPo=r(fDe,"This class cannot be instantiated directly using "),Afe=n(fDe,"CODE",{});var Bct=s(Afe);CPo=r(Bct,"__init__()"),Bct.forEach(t),wPo=r(fDe," (throws an error)."),fDe.forEach(t),APo=i(Qs),dt=n(Qs,"DIV",{class:!0});var jA=s(dt);T(LL.$$.fragment,jA),yPo=i(jA),yfe=n(jA,"P",{});var Ict=s(yfe);LPo=r(Ict,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ict.forEach(t),xPo=i(jA),zi=n(jA,"P",{});var FZ=s(zi);$Po=r(FZ,`Note:
Loading a model from its configuration file does `),Lfe=n(FZ,"STRONG",{});var qct=s(Lfe);kPo=r(qct,"not"),qct.forEach(t),SPo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(FZ,"A",{href:!0});var Nct=s(JG);RPo=r(Nct,"from_pretrained()"),Nct.forEach(t),PPo=r(FZ," to load the model weights."),FZ.forEach(t),BPo=i(jA),T(Bv.$$.fragment,jA),jA.forEach(t),IPo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(xL.$$.fragment,la),qPo=i(la),xfe=n(la,"P",{});var jct=s(xfe);NPo=r(jct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jct.forEach(t),jPo=i(la),Pa=n(la,"P",{});var DA=s(Pa);DPo=r(DA,"The model class to instantiate is selected based on the "),$fe=n(DA,"CODE",{});var Dct=s($fe);GPo=r(Dct,"model_type"),Dct.forEach(t),OPo=r(DA,` property of the config object (either
passed as an argument or loaded from `),kfe=n(DA,"CODE",{});var Gct=s(kfe);VPo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),XPo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(DA,"CODE",{});var Oct=s(Sfe);zPo=r(Oct,"pretrained_model_name_or_path"),Oct.forEach(t),WPo=r(DA,":"),DA.forEach(t),QPo=i(la),K=n(la,"UL",{});var ee=s(K);Iv=n(ee,"LI",{});var B9e=s(Iv);Rfe=n(B9e,"STRONG",{});var Vct=s(Rfe);HPo=r(Vct,"albert"),Vct.forEach(t),UPo=r(B9e," \u2014 "),YG=n(B9e,"A",{href:!0});var Xct=s(YG);JPo=r(Xct,"AlbertForMultipleChoice"),Xct.forEach(t),YPo=r(B9e," (ALBERT model)"),B9e.forEach(t),KPo=i(ee),qv=n(ee,"LI",{});var I9e=s(qv);Pfe=n(I9e,"STRONG",{});var zct=s(Pfe);ZPo=r(zct,"bert"),zct.forEach(t),eBo=r(I9e," \u2014 "),KG=n(I9e,"A",{href:!0});var Wct=s(KG);oBo=r(Wct,"BertForMultipleChoice"),Wct.forEach(t),rBo=r(I9e," (BERT model)"),I9e.forEach(t),tBo=i(ee),Nv=n(ee,"LI",{});var q9e=s(Nv);Bfe=n(q9e,"STRONG",{});var Qct=s(Bfe);aBo=r(Qct,"big_bird"),Qct.forEach(t),nBo=r(q9e," \u2014 "),ZG=n(q9e,"A",{href:!0});var Hct=s(ZG);sBo=r(Hct,"BigBirdForMultipleChoice"),Hct.forEach(t),lBo=r(q9e," (BigBird model)"),q9e.forEach(t),iBo=i(ee),jv=n(ee,"LI",{});var N9e=s(jv);Ife=n(N9e,"STRONG",{});var Uct=s(Ife);dBo=r(Uct,"camembert"),Uct.forEach(t),cBo=r(N9e," \u2014 "),eO=n(N9e,"A",{href:!0});var Jct=s(eO);mBo=r(Jct,"CamembertForMultipleChoice"),Jct.forEach(t),fBo=r(N9e," (CamemBERT model)"),N9e.forEach(t),gBo=i(ee),Dv=n(ee,"LI",{});var j9e=s(Dv);qfe=n(j9e,"STRONG",{});var Yct=s(qfe);hBo=r(Yct,"canine"),Yct.forEach(t),uBo=r(j9e," \u2014 "),oO=n(j9e,"A",{href:!0});var Kct=s(oO);pBo=r(Kct,"CanineForMultipleChoice"),Kct.forEach(t),_Bo=r(j9e," (Canine model)"),j9e.forEach(t),bBo=i(ee),Gv=n(ee,"LI",{});var D9e=s(Gv);Nfe=n(D9e,"STRONG",{});var Zct=s(Nfe);vBo=r(Zct,"convbert"),Zct.forEach(t),FBo=r(D9e," \u2014 "),rO=n(D9e,"A",{href:!0});var emt=s(rO);TBo=r(emt,"ConvBertForMultipleChoice"),emt.forEach(t),MBo=r(D9e," (ConvBERT model)"),D9e.forEach(t),EBo=i(ee),Ov=n(ee,"LI",{});var G9e=s(Ov);jfe=n(G9e,"STRONG",{});var omt=s(jfe);CBo=r(omt,"data2vec-text"),omt.forEach(t),wBo=r(G9e," \u2014 "),tO=n(G9e,"A",{href:!0});var rmt=s(tO);ABo=r(rmt,"Data2VecTextForMultipleChoice"),rmt.forEach(t),yBo=r(G9e," (Data2VecText model)"),G9e.forEach(t),LBo=i(ee),Vv=n(ee,"LI",{});var O9e=s(Vv);Dfe=n(O9e,"STRONG",{});var tmt=s(Dfe);xBo=r(tmt,"deberta-v2"),tmt.forEach(t),$Bo=r(O9e," \u2014 "),aO=n(O9e,"A",{href:!0});var amt=s(aO);kBo=r(amt,"DebertaV2ForMultipleChoice"),amt.forEach(t),SBo=r(O9e," (DeBERTa-v2 model)"),O9e.forEach(t),RBo=i(ee),Xv=n(ee,"LI",{});var V9e=s(Xv);Gfe=n(V9e,"STRONG",{});var nmt=s(Gfe);PBo=r(nmt,"distilbert"),nmt.forEach(t),BBo=r(V9e," \u2014 "),nO=n(V9e,"A",{href:!0});var smt=s(nO);IBo=r(smt,"DistilBertForMultipleChoice"),smt.forEach(t),qBo=r(V9e," (DistilBERT model)"),V9e.forEach(t),NBo=i(ee),zv=n(ee,"LI",{});var X9e=s(zv);Ofe=n(X9e,"STRONG",{});var lmt=s(Ofe);jBo=r(lmt,"electra"),lmt.forEach(t),DBo=r(X9e," \u2014 "),sO=n(X9e,"A",{href:!0});var imt=s(sO);GBo=r(imt,"ElectraForMultipleChoice"),imt.forEach(t),OBo=r(X9e," (ELECTRA model)"),X9e.forEach(t),VBo=i(ee),Wv=n(ee,"LI",{});var z9e=s(Wv);Vfe=n(z9e,"STRONG",{});var dmt=s(Vfe);XBo=r(dmt,"flaubert"),dmt.forEach(t),zBo=r(z9e," \u2014 "),lO=n(z9e,"A",{href:!0});var cmt=s(lO);WBo=r(cmt,"FlaubertForMultipleChoice"),cmt.forEach(t),QBo=r(z9e," (FlauBERT model)"),z9e.forEach(t),HBo=i(ee),Qv=n(ee,"LI",{});var W9e=s(Qv);Xfe=n(W9e,"STRONG",{});var mmt=s(Xfe);UBo=r(mmt,"fnet"),mmt.forEach(t),JBo=r(W9e," \u2014 "),iO=n(W9e,"A",{href:!0});var fmt=s(iO);YBo=r(fmt,"FNetForMultipleChoice"),fmt.forEach(t),KBo=r(W9e," (FNet model)"),W9e.forEach(t),ZBo=i(ee),Hv=n(ee,"LI",{});var Q9e=s(Hv);zfe=n(Q9e,"STRONG",{});var gmt=s(zfe);eIo=r(gmt,"funnel"),gmt.forEach(t),oIo=r(Q9e," \u2014 "),dO=n(Q9e,"A",{href:!0});var hmt=s(dO);rIo=r(hmt,"FunnelForMultipleChoice"),hmt.forEach(t),tIo=r(Q9e," (Funnel Transformer model)"),Q9e.forEach(t),aIo=i(ee),Uv=n(ee,"LI",{});var H9e=s(Uv);Wfe=n(H9e,"STRONG",{});var umt=s(Wfe);nIo=r(umt,"ibert"),umt.forEach(t),sIo=r(H9e," \u2014 "),cO=n(H9e,"A",{href:!0});var pmt=s(cO);lIo=r(pmt,"IBertForMultipleChoice"),pmt.forEach(t),iIo=r(H9e," (I-BERT model)"),H9e.forEach(t),dIo=i(ee),Jv=n(ee,"LI",{});var U9e=s(Jv);Qfe=n(U9e,"STRONG",{});var _mt=s(Qfe);cIo=r(_mt,"longformer"),_mt.forEach(t),mIo=r(U9e," \u2014 "),mO=n(U9e,"A",{href:!0});var bmt=s(mO);fIo=r(bmt,"LongformerForMultipleChoice"),bmt.forEach(t),gIo=r(U9e," (Longformer model)"),U9e.forEach(t),hIo=i(ee),Yv=n(ee,"LI",{});var J9e=s(Yv);Hfe=n(J9e,"STRONG",{});var vmt=s(Hfe);uIo=r(vmt,"megatron-bert"),vmt.forEach(t),pIo=r(J9e," \u2014 "),fO=n(J9e,"A",{href:!0});var Fmt=s(fO);_Io=r(Fmt,"MegatronBertForMultipleChoice"),Fmt.forEach(t),bIo=r(J9e," (MegatronBert model)"),J9e.forEach(t),vIo=i(ee),Kv=n(ee,"LI",{});var Y9e=s(Kv);Ufe=n(Y9e,"STRONG",{});var Tmt=s(Ufe);FIo=r(Tmt,"mobilebert"),Tmt.forEach(t),TIo=r(Y9e," \u2014 "),gO=n(Y9e,"A",{href:!0});var Mmt=s(gO);MIo=r(Mmt,"MobileBertForMultipleChoice"),Mmt.forEach(t),EIo=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),CIo=i(ee),Zv=n(ee,"LI",{});var K9e=s(Zv);Jfe=n(K9e,"STRONG",{});var Emt=s(Jfe);wIo=r(Emt,"mpnet"),Emt.forEach(t),AIo=r(K9e," \u2014 "),hO=n(K9e,"A",{href:!0});var Cmt=s(hO);yIo=r(Cmt,"MPNetForMultipleChoice"),Cmt.forEach(t),LIo=r(K9e," (MPNet model)"),K9e.forEach(t),xIo=i(ee),eF=n(ee,"LI",{});var Z9e=s(eF);Yfe=n(Z9e,"STRONG",{});var wmt=s(Yfe);$Io=r(wmt,"nystromformer"),wmt.forEach(t),kIo=r(Z9e," \u2014 "),uO=n(Z9e,"A",{href:!0});var Amt=s(uO);SIo=r(Amt,"NystromformerForMultipleChoice"),Amt.forEach(t),RIo=r(Z9e," (Nystromformer model)"),Z9e.forEach(t),PIo=i(ee),oF=n(ee,"LI",{});var exe=s(oF);Kfe=n(exe,"STRONG",{});var ymt=s(Kfe);BIo=r(ymt,"qdqbert"),ymt.forEach(t),IIo=r(exe," \u2014 "),pO=n(exe,"A",{href:!0});var Lmt=s(pO);qIo=r(Lmt,"QDQBertForMultipleChoice"),Lmt.forEach(t),NIo=r(exe," (QDQBert model)"),exe.forEach(t),jIo=i(ee),rF=n(ee,"LI",{});var oxe=s(rF);Zfe=n(oxe,"STRONG",{});var xmt=s(Zfe);DIo=r(xmt,"rembert"),xmt.forEach(t),GIo=r(oxe," \u2014 "),_O=n(oxe,"A",{href:!0});var $mt=s(_O);OIo=r($mt,"RemBertForMultipleChoice"),$mt.forEach(t),VIo=r(oxe," (RemBERT model)"),oxe.forEach(t),XIo=i(ee),tF=n(ee,"LI",{});var rxe=s(tF);ege=n(rxe,"STRONG",{});var kmt=s(ege);zIo=r(kmt,"roberta"),kmt.forEach(t),WIo=r(rxe," \u2014 "),bO=n(rxe,"A",{href:!0});var Smt=s(bO);QIo=r(Smt,"RobertaForMultipleChoice"),Smt.forEach(t),HIo=r(rxe," (RoBERTa model)"),rxe.forEach(t),UIo=i(ee),aF=n(ee,"LI",{});var txe=s(aF);oge=n(txe,"STRONG",{});var Rmt=s(oge);JIo=r(Rmt,"roformer"),Rmt.forEach(t),YIo=r(txe," \u2014 "),vO=n(txe,"A",{href:!0});var Pmt=s(vO);KIo=r(Pmt,"RoFormerForMultipleChoice"),Pmt.forEach(t),ZIo=r(txe," (RoFormer model)"),txe.forEach(t),eqo=i(ee),nF=n(ee,"LI",{});var axe=s(nF);rge=n(axe,"STRONG",{});var Bmt=s(rge);oqo=r(Bmt,"squeezebert"),Bmt.forEach(t),rqo=r(axe," \u2014 "),FO=n(axe,"A",{href:!0});var Imt=s(FO);tqo=r(Imt,"SqueezeBertForMultipleChoice"),Imt.forEach(t),aqo=r(axe," (SqueezeBERT model)"),axe.forEach(t),nqo=i(ee),sF=n(ee,"LI",{});var nxe=s(sF);tge=n(nxe,"STRONG",{});var qmt=s(tge);sqo=r(qmt,"xlm"),qmt.forEach(t),lqo=r(nxe," \u2014 "),TO=n(nxe,"A",{href:!0});var Nmt=s(TO);iqo=r(Nmt,"XLMForMultipleChoice"),Nmt.forEach(t),dqo=r(nxe," (XLM model)"),nxe.forEach(t),cqo=i(ee),lF=n(ee,"LI",{});var sxe=s(lF);age=n(sxe,"STRONG",{});var jmt=s(age);mqo=r(jmt,"xlm-roberta"),jmt.forEach(t),fqo=r(sxe," \u2014 "),MO=n(sxe,"A",{href:!0});var Dmt=s(MO);gqo=r(Dmt,"XLMRobertaForMultipleChoice"),Dmt.forEach(t),hqo=r(sxe," (XLM-RoBERTa model)"),sxe.forEach(t),uqo=i(ee),iF=n(ee,"LI",{});var lxe=s(iF);nge=n(lxe,"STRONG",{});var Gmt=s(nge);pqo=r(Gmt,"xlm-roberta-xl"),Gmt.forEach(t),_qo=r(lxe," \u2014 "),EO=n(lxe,"A",{href:!0});var Omt=s(EO);bqo=r(Omt,"XLMRobertaXLForMultipleChoice"),Omt.forEach(t),vqo=r(lxe," (XLM-RoBERTa-XL model)"),lxe.forEach(t),Fqo=i(ee),dF=n(ee,"LI",{});var ixe=s(dF);sge=n(ixe,"STRONG",{});var Vmt=s(sge);Tqo=r(Vmt,"xlnet"),Vmt.forEach(t),Mqo=r(ixe," \u2014 "),CO=n(ixe,"A",{href:!0});var Xmt=s(CO);Eqo=r(Xmt,"XLNetForMultipleChoice"),Xmt.forEach(t),Cqo=r(ixe," (XLNet model)"),ixe.forEach(t),wqo=i(ee),cF=n(ee,"LI",{});var dxe=s(cF);lge=n(dxe,"STRONG",{});var zmt=s(lge);Aqo=r(zmt,"yoso"),zmt.forEach(t),yqo=r(dxe," \u2014 "),wO=n(dxe,"A",{href:!0});var Wmt=s(wO);Lqo=r(Wmt,"YosoForMultipleChoice"),Wmt.forEach(t),xqo=r(dxe," (YOSO model)"),dxe.forEach(t),ee.forEach(t),$qo=i(la),mF=n(la,"P",{});var cxe=s(mF);kqo=r(cxe,"The model is set in evaluation mode by default using "),ige=n(cxe,"CODE",{});var Qmt=s(ige);Sqo=r(Qmt,"model.eval()"),Qmt.forEach(t),Rqo=r(cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n(cxe,"CODE",{});var Hmt=s(dge);Pqo=r(Hmt,"model.train()"),Hmt.forEach(t),cxe.forEach(t),Bqo=i(la),T(fF.$$.fragment,la),la.forEach(t),Qs.forEach(t),dNe=i(m),Wi=n(m,"H2",{class:!0});var gDe=s(Wi);gF=n(gDe,"A",{id:!0,class:!0,href:!0});var Umt=s(gF);cge=n(Umt,"SPAN",{});var Jmt=s(cge);T($L.$$.fragment,Jmt),Jmt.forEach(t),Umt.forEach(t),Iqo=i(gDe),mge=n(gDe,"SPAN",{});var Ymt=s(mge);qqo=r(Ymt,"AutoModelForNextSentencePrediction"),Ymt.forEach(t),gDe.forEach(t),cNe=i(m),Bo=n(m,"DIV",{class:!0});var Hs=s(Bo);T(kL.$$.fragment,Hs),Nqo=i(Hs),Qi=n(Hs,"P",{});var TZ=s(Qi);jqo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AO=n(TZ,"A",{href:!0});var Kmt=s(AO);Dqo=r(Kmt,"from_pretrained()"),Kmt.forEach(t),Gqo=r(TZ," class method or the "),yO=n(TZ,"A",{href:!0});var Zmt=s(yO);Oqo=r(Zmt,"from_config()"),Zmt.forEach(t),Vqo=r(TZ,` class
method.`),TZ.forEach(t),Xqo=i(Hs),SL=n(Hs,"P",{});var hDe=s(SL);zqo=r(hDe,"This class cannot be instantiated directly using "),fge=n(hDe,"CODE",{});var eft=s(fge);Wqo=r(eft,"__init__()"),eft.forEach(t),Qqo=r(hDe," (throws an error)."),hDe.forEach(t),Hqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var GA=s(ct);T(RL.$$.fragment,GA),Uqo=i(GA),gge=n(GA,"P",{});var oft=s(gge);Jqo=r(oft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oft.forEach(t),Yqo=i(GA),Hi=n(GA,"P",{});var MZ=s(Hi);Kqo=r(MZ,`Note:
Loading a model from its configuration file does `),hge=n(MZ,"STRONG",{});var rft=s(hge);Zqo=r(rft,"not"),rft.forEach(t),eNo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=n(MZ,"A",{href:!0});var tft=s(LO);oNo=r(tft,"from_pretrained()"),tft.forEach(t),rNo=r(MZ," to load the model weights."),MZ.forEach(t),tNo=i(GA),T(hF.$$.fragment,GA),GA.forEach(t),aNo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(PL.$$.fragment,ia),nNo=i(ia),uge=n(ia,"P",{});var aft=s(uge);sNo=r(aft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aft.forEach(t),lNo=i(ia),Ba=n(ia,"P",{});var OA=s(Ba);iNo=r(OA,"The model class to instantiate is selected based on the "),pge=n(OA,"CODE",{});var nft=s(pge);dNo=r(nft,"model_type"),nft.forEach(t),cNo=r(OA,` property of the config object (either
passed as an argument or loaded from `),_ge=n(OA,"CODE",{});var sft=s(_ge);mNo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),fNo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(OA,"CODE",{});var lft=s(bge);gNo=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),hNo=r(OA,":"),OA.forEach(t),uNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);uF=n(Us,"LI",{});var mxe=s(uF);vge=n(mxe,"STRONG",{});var ift=s(vge);pNo=r(ift,"bert"),ift.forEach(t),_No=r(mxe," \u2014 "),xO=n(mxe,"A",{href:!0});var dft=s(xO);bNo=r(dft,"BertForNextSentencePrediction"),dft.forEach(t),vNo=r(mxe," (BERT model)"),mxe.forEach(t),FNo=i(Us),pF=n(Us,"LI",{});var fxe=s(pF);Fge=n(fxe,"STRONG",{});var cft=s(Fge);TNo=r(cft,"fnet"),cft.forEach(t),MNo=r(fxe," \u2014 "),$O=n(fxe,"A",{href:!0});var mft=s($O);ENo=r(mft,"FNetForNextSentencePrediction"),mft.forEach(t),CNo=r(fxe," (FNet model)"),fxe.forEach(t),wNo=i(Us),_F=n(Us,"LI",{});var gxe=s(_F);Tge=n(gxe,"STRONG",{});var fft=s(Tge);ANo=r(fft,"megatron-bert"),fft.forEach(t),yNo=r(gxe," \u2014 "),kO=n(gxe,"A",{href:!0});var gft=s(kO);LNo=r(gft,"MegatronBertForNextSentencePrediction"),gft.forEach(t),xNo=r(gxe," (MegatronBert model)"),gxe.forEach(t),$No=i(Us),bF=n(Us,"LI",{});var hxe=s(bF);Mge=n(hxe,"STRONG",{});var hft=s(Mge);kNo=r(hft,"mobilebert"),hft.forEach(t),SNo=r(hxe," \u2014 "),SO=n(hxe,"A",{href:!0});var uft=s(SO);RNo=r(uft,"MobileBertForNextSentencePrediction"),uft.forEach(t),PNo=r(hxe," (MobileBERT model)"),hxe.forEach(t),BNo=i(Us),vF=n(Us,"LI",{});var uxe=s(vF);Ege=n(uxe,"STRONG",{});var pft=s(Ege);INo=r(pft,"qdqbert"),pft.forEach(t),qNo=r(uxe," \u2014 "),RO=n(uxe,"A",{href:!0});var _ft=s(RO);NNo=r(_ft,"QDQBertForNextSentencePrediction"),_ft.forEach(t),jNo=r(uxe," (QDQBert model)"),uxe.forEach(t),Us.forEach(t),DNo=i(ia),FF=n(ia,"P",{});var pxe=s(FF);GNo=r(pxe,"The model is set in evaluation mode by default using "),Cge=n(pxe,"CODE",{});var bft=s(Cge);ONo=r(bft,"model.eval()"),bft.forEach(t),VNo=r(pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(pxe,"CODE",{});var vft=s(wge);XNo=r(vft,"model.train()"),vft.forEach(t),pxe.forEach(t),zNo=i(ia),T(TF.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),mNe=i(m),Ui=n(m,"H2",{class:!0});var uDe=s(Ui);MF=n(uDe,"A",{id:!0,class:!0,href:!0});var Fft=s(MF);Age=n(Fft,"SPAN",{});var Tft=s(Age);T(BL.$$.fragment,Tft),Tft.forEach(t),Fft.forEach(t),WNo=i(uDe),yge=n(uDe,"SPAN",{});var Mft=s(yge);QNo=r(Mft,"AutoModelForTokenClassification"),Mft.forEach(t),uDe.forEach(t),fNe=i(m),Io=n(m,"DIV",{class:!0});var Js=s(Io);T(IL.$$.fragment,Js),HNo=i(Js),Ji=n(Js,"P",{});var EZ=s(Ji);UNo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PO=n(EZ,"A",{href:!0});var Eft=s(PO);JNo=r(Eft,"from_pretrained()"),Eft.forEach(t),YNo=r(EZ," class method or the "),BO=n(EZ,"A",{href:!0});var Cft=s(BO);KNo=r(Cft,"from_config()"),Cft.forEach(t),ZNo=r(EZ,` class
method.`),EZ.forEach(t),ejo=i(Js),qL=n(Js,"P",{});var pDe=s(qL);ojo=r(pDe,"This class cannot be instantiated directly using "),Lge=n(pDe,"CODE",{});var wft=s(Lge);rjo=r(wft,"__init__()"),wft.forEach(t),tjo=r(pDe," (throws an error)."),pDe.forEach(t),ajo=i(Js),mt=n(Js,"DIV",{class:!0});var VA=s(mt);T(NL.$$.fragment,VA),njo=i(VA),xge=n(VA,"P",{});var Aft=s(xge);sjo=r(Aft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Aft.forEach(t),ljo=i(VA),Yi=n(VA,"P",{});var CZ=s(Yi);ijo=r(CZ,`Note:
Loading a model from its configuration file does `),$ge=n(CZ,"STRONG",{});var yft=s($ge);djo=r(yft,"not"),yft.forEach(t),cjo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(CZ,"A",{href:!0});var Lft=s(IO);mjo=r(Lft,"from_pretrained()"),Lft.forEach(t),fjo=r(CZ," to load the model weights."),CZ.forEach(t),gjo=i(VA),T(EF.$$.fragment,VA),VA.forEach(t),hjo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(jL.$$.fragment,da),ujo=i(da),kge=n(da,"P",{});var xft=s(kge);pjo=r(xft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xft.forEach(t),_jo=i(da),Ia=n(da,"P",{});var XA=s(Ia);bjo=r(XA,"The model class to instantiate is selected based on the "),Sge=n(XA,"CODE",{});var $ft=s(Sge);vjo=r($ft,"model_type"),$ft.forEach(t),Fjo=r(XA,` property of the config object (either
passed as an argument or loaded from `),Rge=n(XA,"CODE",{});var kft=s(Rge);Tjo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),Mjo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(XA,"CODE",{});var Sft=s(Pge);Ejo=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),Cjo=r(XA,":"),XA.forEach(t),wjo=i(da),H=n(da,"UL",{});var J=s(H);CF=n(J,"LI",{});var _xe=s(CF);Bge=n(_xe,"STRONG",{});var Rft=s(Bge);Ajo=r(Rft,"albert"),Rft.forEach(t),yjo=r(_xe," \u2014 "),qO=n(_xe,"A",{href:!0});var Pft=s(qO);Ljo=r(Pft,"AlbertForTokenClassification"),Pft.forEach(t),xjo=r(_xe," (ALBERT model)"),_xe.forEach(t),$jo=i(J),wF=n(J,"LI",{});var bxe=s(wF);Ige=n(bxe,"STRONG",{});var Bft=s(Ige);kjo=r(Bft,"bert"),Bft.forEach(t),Sjo=r(bxe," \u2014 "),NO=n(bxe,"A",{href:!0});var Ift=s(NO);Rjo=r(Ift,"BertForTokenClassification"),Ift.forEach(t),Pjo=r(bxe," (BERT model)"),bxe.forEach(t),Bjo=i(J),AF=n(J,"LI",{});var vxe=s(AF);qge=n(vxe,"STRONG",{});var qft=s(qge);Ijo=r(qft,"big_bird"),qft.forEach(t),qjo=r(vxe," \u2014 "),jO=n(vxe,"A",{href:!0});var Nft=s(jO);Njo=r(Nft,"BigBirdForTokenClassification"),Nft.forEach(t),jjo=r(vxe," (BigBird model)"),vxe.forEach(t),Djo=i(J),yF=n(J,"LI",{});var Fxe=s(yF);Nge=n(Fxe,"STRONG",{});var jft=s(Nge);Gjo=r(jft,"camembert"),jft.forEach(t),Ojo=r(Fxe," \u2014 "),DO=n(Fxe,"A",{href:!0});var Dft=s(DO);Vjo=r(Dft,"CamembertForTokenClassification"),Dft.forEach(t),Xjo=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),zjo=i(J),LF=n(J,"LI",{});var Txe=s(LF);jge=n(Txe,"STRONG",{});var Gft=s(jge);Wjo=r(Gft,"canine"),Gft.forEach(t),Qjo=r(Txe," \u2014 "),GO=n(Txe,"A",{href:!0});var Oft=s(GO);Hjo=r(Oft,"CanineForTokenClassification"),Oft.forEach(t),Ujo=r(Txe," (Canine model)"),Txe.forEach(t),Jjo=i(J),xF=n(J,"LI",{});var Mxe=s(xF);Dge=n(Mxe,"STRONG",{});var Vft=s(Dge);Yjo=r(Vft,"convbert"),Vft.forEach(t),Kjo=r(Mxe," \u2014 "),OO=n(Mxe,"A",{href:!0});var Xft=s(OO);Zjo=r(Xft,"ConvBertForTokenClassification"),Xft.forEach(t),eDo=r(Mxe," (ConvBERT model)"),Mxe.forEach(t),oDo=i(J),$F=n(J,"LI",{});var Exe=s($F);Gge=n(Exe,"STRONG",{});var zft=s(Gge);rDo=r(zft,"data2vec-text"),zft.forEach(t),tDo=r(Exe," \u2014 "),VO=n(Exe,"A",{href:!0});var Wft=s(VO);aDo=r(Wft,"Data2VecTextForTokenClassification"),Wft.forEach(t),nDo=r(Exe," (Data2VecText model)"),Exe.forEach(t),sDo=i(J),kF=n(J,"LI",{});var Cxe=s(kF);Oge=n(Cxe,"STRONG",{});var Qft=s(Oge);lDo=r(Qft,"deberta"),Qft.forEach(t),iDo=r(Cxe," \u2014 "),XO=n(Cxe,"A",{href:!0});var Hft=s(XO);dDo=r(Hft,"DebertaForTokenClassification"),Hft.forEach(t),cDo=r(Cxe," (DeBERTa model)"),Cxe.forEach(t),mDo=i(J),SF=n(J,"LI",{});var wxe=s(SF);Vge=n(wxe,"STRONG",{});var Uft=s(Vge);fDo=r(Uft,"deberta-v2"),Uft.forEach(t),gDo=r(wxe," \u2014 "),zO=n(wxe,"A",{href:!0});var Jft=s(zO);hDo=r(Jft,"DebertaV2ForTokenClassification"),Jft.forEach(t),uDo=r(wxe," (DeBERTa-v2 model)"),wxe.forEach(t),pDo=i(J),RF=n(J,"LI",{});var Axe=s(RF);Xge=n(Axe,"STRONG",{});var Yft=s(Xge);_Do=r(Yft,"distilbert"),Yft.forEach(t),bDo=r(Axe," \u2014 "),WO=n(Axe,"A",{href:!0});var Kft=s(WO);vDo=r(Kft,"DistilBertForTokenClassification"),Kft.forEach(t),FDo=r(Axe," (DistilBERT model)"),Axe.forEach(t),TDo=i(J),PF=n(J,"LI",{});var yxe=s(PF);zge=n(yxe,"STRONG",{});var Zft=s(zge);MDo=r(Zft,"electra"),Zft.forEach(t),EDo=r(yxe," \u2014 "),QO=n(yxe,"A",{href:!0});var egt=s(QO);CDo=r(egt,"ElectraForTokenClassification"),egt.forEach(t),wDo=r(yxe," (ELECTRA model)"),yxe.forEach(t),ADo=i(J),BF=n(J,"LI",{});var Lxe=s(BF);Wge=n(Lxe,"STRONG",{});var ogt=s(Wge);yDo=r(ogt,"flaubert"),ogt.forEach(t),LDo=r(Lxe," \u2014 "),HO=n(Lxe,"A",{href:!0});var rgt=s(HO);xDo=r(rgt,"FlaubertForTokenClassification"),rgt.forEach(t),$Do=r(Lxe," (FlauBERT model)"),Lxe.forEach(t),kDo=i(J),IF=n(J,"LI",{});var xxe=s(IF);Qge=n(xxe,"STRONG",{});var tgt=s(Qge);SDo=r(tgt,"fnet"),tgt.forEach(t),RDo=r(xxe," \u2014 "),UO=n(xxe,"A",{href:!0});var agt=s(UO);PDo=r(agt,"FNetForTokenClassification"),agt.forEach(t),BDo=r(xxe," (FNet model)"),xxe.forEach(t),IDo=i(J),qF=n(J,"LI",{});var $xe=s(qF);Hge=n($xe,"STRONG",{});var ngt=s(Hge);qDo=r(ngt,"funnel"),ngt.forEach(t),NDo=r($xe," \u2014 "),JO=n($xe,"A",{href:!0});var sgt=s(JO);jDo=r(sgt,"FunnelForTokenClassification"),sgt.forEach(t),DDo=r($xe," (Funnel Transformer model)"),$xe.forEach(t),GDo=i(J),NF=n(J,"LI",{});var kxe=s(NF);Uge=n(kxe,"STRONG",{});var lgt=s(Uge);ODo=r(lgt,"gpt2"),lgt.forEach(t),VDo=r(kxe," \u2014 "),YO=n(kxe,"A",{href:!0});var igt=s(YO);XDo=r(igt,"GPT2ForTokenClassification"),igt.forEach(t),zDo=r(kxe," (OpenAI GPT-2 model)"),kxe.forEach(t),WDo=i(J),jF=n(J,"LI",{});var Sxe=s(jF);Jge=n(Sxe,"STRONG",{});var dgt=s(Jge);QDo=r(dgt,"ibert"),dgt.forEach(t),HDo=r(Sxe," \u2014 "),KO=n(Sxe,"A",{href:!0});var cgt=s(KO);UDo=r(cgt,"IBertForTokenClassification"),cgt.forEach(t),JDo=r(Sxe," (I-BERT model)"),Sxe.forEach(t),YDo=i(J),DF=n(J,"LI",{});var Rxe=s(DF);Yge=n(Rxe,"STRONG",{});var mgt=s(Yge);KDo=r(mgt,"layoutlm"),mgt.forEach(t),ZDo=r(Rxe," \u2014 "),ZO=n(Rxe,"A",{href:!0});var fgt=s(ZO);eGo=r(fgt,"LayoutLMForTokenClassification"),fgt.forEach(t),oGo=r(Rxe," (LayoutLM model)"),Rxe.forEach(t),rGo=i(J),GF=n(J,"LI",{});var Pxe=s(GF);Kge=n(Pxe,"STRONG",{});var ggt=s(Kge);tGo=r(ggt,"layoutlmv2"),ggt.forEach(t),aGo=r(Pxe," \u2014 "),eV=n(Pxe,"A",{href:!0});var hgt=s(eV);nGo=r(hgt,"LayoutLMv2ForTokenClassification"),hgt.forEach(t),sGo=r(Pxe," (LayoutLMv2 model)"),Pxe.forEach(t),lGo=i(J),OF=n(J,"LI",{});var Bxe=s(OF);Zge=n(Bxe,"STRONG",{});var ugt=s(Zge);iGo=r(ugt,"layoutlmv3"),ugt.forEach(t),dGo=r(Bxe," \u2014 "),oV=n(Bxe,"A",{href:!0});var pgt=s(oV);cGo=r(pgt,"LayoutLMv3ForTokenClassification"),pgt.forEach(t),mGo=r(Bxe," (LayoutLMv3 model)"),Bxe.forEach(t),fGo=i(J),VF=n(J,"LI",{});var Ixe=s(VF);ehe=n(Ixe,"STRONG",{});var _gt=s(ehe);gGo=r(_gt,"longformer"),_gt.forEach(t),hGo=r(Ixe," \u2014 "),rV=n(Ixe,"A",{href:!0});var bgt=s(rV);uGo=r(bgt,"LongformerForTokenClassification"),bgt.forEach(t),pGo=r(Ixe," (Longformer model)"),Ixe.forEach(t),_Go=i(J),XF=n(J,"LI",{});var qxe=s(XF);ohe=n(qxe,"STRONG",{});var vgt=s(ohe);bGo=r(vgt,"megatron-bert"),vgt.forEach(t),vGo=r(qxe," \u2014 "),tV=n(qxe,"A",{href:!0});var Fgt=s(tV);FGo=r(Fgt,"MegatronBertForTokenClassification"),Fgt.forEach(t),TGo=r(qxe," (MegatronBert model)"),qxe.forEach(t),MGo=i(J),zF=n(J,"LI",{});var Nxe=s(zF);rhe=n(Nxe,"STRONG",{});var Tgt=s(rhe);EGo=r(Tgt,"mobilebert"),Tgt.forEach(t),CGo=r(Nxe," \u2014 "),aV=n(Nxe,"A",{href:!0});var Mgt=s(aV);wGo=r(Mgt,"MobileBertForTokenClassification"),Mgt.forEach(t),AGo=r(Nxe," (MobileBERT model)"),Nxe.forEach(t),yGo=i(J),WF=n(J,"LI",{});var jxe=s(WF);the=n(jxe,"STRONG",{});var Egt=s(the);LGo=r(Egt,"mpnet"),Egt.forEach(t),xGo=r(jxe," \u2014 "),nV=n(jxe,"A",{href:!0});var Cgt=s(nV);$Go=r(Cgt,"MPNetForTokenClassification"),Cgt.forEach(t),kGo=r(jxe," (MPNet model)"),jxe.forEach(t),SGo=i(J),QF=n(J,"LI",{});var Dxe=s(QF);ahe=n(Dxe,"STRONG",{});var wgt=s(ahe);RGo=r(wgt,"nystromformer"),wgt.forEach(t),PGo=r(Dxe," \u2014 "),sV=n(Dxe,"A",{href:!0});var Agt=s(sV);BGo=r(Agt,"NystromformerForTokenClassification"),Agt.forEach(t),IGo=r(Dxe," (Nystromformer model)"),Dxe.forEach(t),qGo=i(J),HF=n(J,"LI",{});var Gxe=s(HF);nhe=n(Gxe,"STRONG",{});var ygt=s(nhe);NGo=r(ygt,"qdqbert"),ygt.forEach(t),jGo=r(Gxe," \u2014 "),lV=n(Gxe,"A",{href:!0});var Lgt=s(lV);DGo=r(Lgt,"QDQBertForTokenClassification"),Lgt.forEach(t),GGo=r(Gxe," (QDQBert model)"),Gxe.forEach(t),OGo=i(J),UF=n(J,"LI",{});var Oxe=s(UF);she=n(Oxe,"STRONG",{});var xgt=s(she);VGo=r(xgt,"rembert"),xgt.forEach(t),XGo=r(Oxe," \u2014 "),iV=n(Oxe,"A",{href:!0});var $gt=s(iV);zGo=r($gt,"RemBertForTokenClassification"),$gt.forEach(t),WGo=r(Oxe," (RemBERT model)"),Oxe.forEach(t),QGo=i(J),JF=n(J,"LI",{});var Vxe=s(JF);lhe=n(Vxe,"STRONG",{});var kgt=s(lhe);HGo=r(kgt,"roberta"),kgt.forEach(t),UGo=r(Vxe," \u2014 "),dV=n(Vxe,"A",{href:!0});var Sgt=s(dV);JGo=r(Sgt,"RobertaForTokenClassification"),Sgt.forEach(t),YGo=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),KGo=i(J),YF=n(J,"LI",{});var Xxe=s(YF);ihe=n(Xxe,"STRONG",{});var Rgt=s(ihe);ZGo=r(Rgt,"roformer"),Rgt.forEach(t),eOo=r(Xxe," \u2014 "),cV=n(Xxe,"A",{href:!0});var Pgt=s(cV);oOo=r(Pgt,"RoFormerForTokenClassification"),Pgt.forEach(t),rOo=r(Xxe," (RoFormer model)"),Xxe.forEach(t),tOo=i(J),KF=n(J,"LI",{});var zxe=s(KF);dhe=n(zxe,"STRONG",{});var Bgt=s(dhe);aOo=r(Bgt,"squeezebert"),Bgt.forEach(t),nOo=r(zxe," \u2014 "),mV=n(zxe,"A",{href:!0});var Igt=s(mV);sOo=r(Igt,"SqueezeBertForTokenClassification"),Igt.forEach(t),lOo=r(zxe," (SqueezeBERT model)"),zxe.forEach(t),iOo=i(J),ZF=n(J,"LI",{});var Wxe=s(ZF);che=n(Wxe,"STRONG",{});var qgt=s(che);dOo=r(qgt,"xlm"),qgt.forEach(t),cOo=r(Wxe," \u2014 "),fV=n(Wxe,"A",{href:!0});var Ngt=s(fV);mOo=r(Ngt,"XLMForTokenClassification"),Ngt.forEach(t),fOo=r(Wxe," (XLM model)"),Wxe.forEach(t),gOo=i(J),e1=n(J,"LI",{});var Qxe=s(e1);mhe=n(Qxe,"STRONG",{});var jgt=s(mhe);hOo=r(jgt,"xlm-roberta"),jgt.forEach(t),uOo=r(Qxe," \u2014 "),gV=n(Qxe,"A",{href:!0});var Dgt=s(gV);pOo=r(Dgt,"XLMRobertaForTokenClassification"),Dgt.forEach(t),_Oo=r(Qxe," (XLM-RoBERTa model)"),Qxe.forEach(t),bOo=i(J),o1=n(J,"LI",{});var Hxe=s(o1);fhe=n(Hxe,"STRONG",{});var Ggt=s(fhe);vOo=r(Ggt,"xlm-roberta-xl"),Ggt.forEach(t),FOo=r(Hxe," \u2014 "),hV=n(Hxe,"A",{href:!0});var Ogt=s(hV);TOo=r(Ogt,"XLMRobertaXLForTokenClassification"),Ogt.forEach(t),MOo=r(Hxe," (XLM-RoBERTa-XL model)"),Hxe.forEach(t),EOo=i(J),r1=n(J,"LI",{});var Uxe=s(r1);ghe=n(Uxe,"STRONG",{});var Vgt=s(ghe);COo=r(Vgt,"xlnet"),Vgt.forEach(t),wOo=r(Uxe," \u2014 "),uV=n(Uxe,"A",{href:!0});var Xgt=s(uV);AOo=r(Xgt,"XLNetForTokenClassification"),Xgt.forEach(t),yOo=r(Uxe," (XLNet model)"),Uxe.forEach(t),LOo=i(J),t1=n(J,"LI",{});var Jxe=s(t1);hhe=n(Jxe,"STRONG",{});var zgt=s(hhe);xOo=r(zgt,"yoso"),zgt.forEach(t),$Oo=r(Jxe," \u2014 "),pV=n(Jxe,"A",{href:!0});var Wgt=s(pV);kOo=r(Wgt,"YosoForTokenClassification"),Wgt.forEach(t),SOo=r(Jxe," (YOSO model)"),Jxe.forEach(t),J.forEach(t),ROo=i(da),a1=n(da,"P",{});var Yxe=s(a1);POo=r(Yxe,"The model is set in evaluation mode by default using "),uhe=n(Yxe,"CODE",{});var Qgt=s(uhe);BOo=r(Qgt,"model.eval()"),Qgt.forEach(t),IOo=r(Yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n(Yxe,"CODE",{});var Hgt=s(phe);qOo=r(Hgt,"model.train()"),Hgt.forEach(t),Yxe.forEach(t),NOo=i(da),T(n1.$$.fragment,da),da.forEach(t),Js.forEach(t),gNe=i(m),Ki=n(m,"H2",{class:!0});var _De=s(Ki);s1=n(_De,"A",{id:!0,class:!0,href:!0});var Ugt=s(s1);_he=n(Ugt,"SPAN",{});var Jgt=s(_he);T(DL.$$.fragment,Jgt),Jgt.forEach(t),Ugt.forEach(t),jOo=i(_De),bhe=n(_De,"SPAN",{});var Ygt=s(bhe);DOo=r(Ygt,"AutoModelForQuestionAnswering"),Ygt.forEach(t),_De.forEach(t),hNe=i(m),qo=n(m,"DIV",{class:!0});var Ys=s(qo);T(GL.$$.fragment,Ys),GOo=i(Ys),Zi=n(Ys,"P",{});var wZ=s(Zi);OOo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_V=n(wZ,"A",{href:!0});var Kgt=s(_V);VOo=r(Kgt,"from_pretrained()"),Kgt.forEach(t),XOo=r(wZ," class method or the "),bV=n(wZ,"A",{href:!0});var Zgt=s(bV);zOo=r(Zgt,"from_config()"),Zgt.forEach(t),WOo=r(wZ,` class
method.`),wZ.forEach(t),QOo=i(Ys),OL=n(Ys,"P",{});var bDe=s(OL);HOo=r(bDe,"This class cannot be instantiated directly using "),vhe=n(bDe,"CODE",{});var eht=s(vhe);UOo=r(eht,"__init__()"),eht.forEach(t),JOo=r(bDe," (throws an error)."),bDe.forEach(t),YOo=i(Ys),ft=n(Ys,"DIV",{class:!0});var zA=s(ft);T(VL.$$.fragment,zA),KOo=i(zA),Fhe=n(zA,"P",{});var oht=s(Fhe);ZOo=r(oht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oht.forEach(t),eVo=i(zA),ed=n(zA,"P",{});var AZ=s(ed);oVo=r(AZ,`Note:
Loading a model from its configuration file does `),The=n(AZ,"STRONG",{});var rht=s(The);rVo=r(rht,"not"),rht.forEach(t),tVo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(AZ,"A",{href:!0});var tht=s(vV);aVo=r(tht,"from_pretrained()"),tht.forEach(t),nVo=r(AZ," to load the model weights."),AZ.forEach(t),sVo=i(zA),T(l1.$$.fragment,zA),zA.forEach(t),lVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(XL.$$.fragment,ca),iVo=i(ca),Mhe=n(ca,"P",{});var aht=s(Mhe);dVo=r(aht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aht.forEach(t),cVo=i(ca),qa=n(ca,"P",{});var WA=s(qa);mVo=r(WA,"The model class to instantiate is selected based on the "),Ehe=n(WA,"CODE",{});var nht=s(Ehe);fVo=r(nht,"model_type"),nht.forEach(t),gVo=r(WA,` property of the config object (either
passed as an argument or loaded from `),Che=n(WA,"CODE",{});var sht=s(Che);hVo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),uVo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(WA,"CODE",{});var lht=s(whe);pVo=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),_Vo=r(WA,":"),WA.forEach(t),bVo=i(ca),V=n(ca,"UL",{});var X=s(V);i1=n(X,"LI",{});var Kxe=s(i1);Ahe=n(Kxe,"STRONG",{});var iht=s(Ahe);vVo=r(iht,"albert"),iht.forEach(t),FVo=r(Kxe," \u2014 "),FV=n(Kxe,"A",{href:!0});var dht=s(FV);TVo=r(dht,"AlbertForQuestionAnswering"),dht.forEach(t),MVo=r(Kxe," (ALBERT model)"),Kxe.forEach(t),EVo=i(X),d1=n(X,"LI",{});var Zxe=s(d1);yhe=n(Zxe,"STRONG",{});var cht=s(yhe);CVo=r(cht,"bart"),cht.forEach(t),wVo=r(Zxe," \u2014 "),TV=n(Zxe,"A",{href:!0});var mht=s(TV);AVo=r(mht,"BartForQuestionAnswering"),mht.forEach(t),yVo=r(Zxe," (BART model)"),Zxe.forEach(t),LVo=i(X),c1=n(X,"LI",{});var e$e=s(c1);Lhe=n(e$e,"STRONG",{});var fht=s(Lhe);xVo=r(fht,"bert"),fht.forEach(t),$Vo=r(e$e," \u2014 "),MV=n(e$e,"A",{href:!0});var ght=s(MV);kVo=r(ght,"BertForQuestionAnswering"),ght.forEach(t),SVo=r(e$e," (BERT model)"),e$e.forEach(t),RVo=i(X),m1=n(X,"LI",{});var o$e=s(m1);xhe=n(o$e,"STRONG",{});var hht=s(xhe);PVo=r(hht,"big_bird"),hht.forEach(t),BVo=r(o$e," \u2014 "),EV=n(o$e,"A",{href:!0});var uht=s(EV);IVo=r(uht,"BigBirdForQuestionAnswering"),uht.forEach(t),qVo=r(o$e," (BigBird model)"),o$e.forEach(t),NVo=i(X),f1=n(X,"LI",{});var r$e=s(f1);$he=n(r$e,"STRONG",{});var pht=s($he);jVo=r(pht,"bigbird_pegasus"),pht.forEach(t),DVo=r(r$e," \u2014 "),CV=n(r$e,"A",{href:!0});var _ht=s(CV);GVo=r(_ht,"BigBirdPegasusForQuestionAnswering"),_ht.forEach(t),OVo=r(r$e," (BigBirdPegasus model)"),r$e.forEach(t),VVo=i(X),g1=n(X,"LI",{});var t$e=s(g1);khe=n(t$e,"STRONG",{});var bht=s(khe);XVo=r(bht,"camembert"),bht.forEach(t),zVo=r(t$e," \u2014 "),wV=n(t$e,"A",{href:!0});var vht=s(wV);WVo=r(vht,"CamembertForQuestionAnswering"),vht.forEach(t),QVo=r(t$e," (CamemBERT model)"),t$e.forEach(t),HVo=i(X),h1=n(X,"LI",{});var a$e=s(h1);She=n(a$e,"STRONG",{});var Fht=s(She);UVo=r(Fht,"canine"),Fht.forEach(t),JVo=r(a$e," \u2014 "),AV=n(a$e,"A",{href:!0});var Tht=s(AV);YVo=r(Tht,"CanineForQuestionAnswering"),Tht.forEach(t),KVo=r(a$e," (Canine model)"),a$e.forEach(t),ZVo=i(X),u1=n(X,"LI",{});var n$e=s(u1);Rhe=n(n$e,"STRONG",{});var Mht=s(Rhe);eXo=r(Mht,"convbert"),Mht.forEach(t),oXo=r(n$e," \u2014 "),yV=n(n$e,"A",{href:!0});var Eht=s(yV);rXo=r(Eht,"ConvBertForQuestionAnswering"),Eht.forEach(t),tXo=r(n$e," (ConvBERT model)"),n$e.forEach(t),aXo=i(X),p1=n(X,"LI",{});var s$e=s(p1);Phe=n(s$e,"STRONG",{});var Cht=s(Phe);nXo=r(Cht,"data2vec-text"),Cht.forEach(t),sXo=r(s$e," \u2014 "),LV=n(s$e,"A",{href:!0});var wht=s(LV);lXo=r(wht,"Data2VecTextForQuestionAnswering"),wht.forEach(t),iXo=r(s$e," (Data2VecText model)"),s$e.forEach(t),dXo=i(X),_1=n(X,"LI",{});var l$e=s(_1);Bhe=n(l$e,"STRONG",{});var Aht=s(Bhe);cXo=r(Aht,"deberta"),Aht.forEach(t),mXo=r(l$e," \u2014 "),xV=n(l$e,"A",{href:!0});var yht=s(xV);fXo=r(yht,"DebertaForQuestionAnswering"),yht.forEach(t),gXo=r(l$e," (DeBERTa model)"),l$e.forEach(t),hXo=i(X),b1=n(X,"LI",{});var i$e=s(b1);Ihe=n(i$e,"STRONG",{});var Lht=s(Ihe);uXo=r(Lht,"deberta-v2"),Lht.forEach(t),pXo=r(i$e," \u2014 "),$V=n(i$e,"A",{href:!0});var xht=s($V);_Xo=r(xht,"DebertaV2ForQuestionAnswering"),xht.forEach(t),bXo=r(i$e," (DeBERTa-v2 model)"),i$e.forEach(t),vXo=i(X),v1=n(X,"LI",{});var d$e=s(v1);qhe=n(d$e,"STRONG",{});var $ht=s(qhe);FXo=r($ht,"distilbert"),$ht.forEach(t),TXo=r(d$e," \u2014 "),kV=n(d$e,"A",{href:!0});var kht=s(kV);MXo=r(kht,"DistilBertForQuestionAnswering"),kht.forEach(t),EXo=r(d$e," (DistilBERT model)"),d$e.forEach(t),CXo=i(X),F1=n(X,"LI",{});var c$e=s(F1);Nhe=n(c$e,"STRONG",{});var Sht=s(Nhe);wXo=r(Sht,"electra"),Sht.forEach(t),AXo=r(c$e," \u2014 "),SV=n(c$e,"A",{href:!0});var Rht=s(SV);yXo=r(Rht,"ElectraForQuestionAnswering"),Rht.forEach(t),LXo=r(c$e," (ELECTRA model)"),c$e.forEach(t),xXo=i(X),T1=n(X,"LI",{});var m$e=s(T1);jhe=n(m$e,"STRONG",{});var Pht=s(jhe);$Xo=r(Pht,"flaubert"),Pht.forEach(t),kXo=r(m$e," \u2014 "),RV=n(m$e,"A",{href:!0});var Bht=s(RV);SXo=r(Bht,"FlaubertForQuestionAnsweringSimple"),Bht.forEach(t),RXo=r(m$e," (FlauBERT model)"),m$e.forEach(t),PXo=i(X),M1=n(X,"LI",{});var f$e=s(M1);Dhe=n(f$e,"STRONG",{});var Iht=s(Dhe);BXo=r(Iht,"fnet"),Iht.forEach(t),IXo=r(f$e," \u2014 "),PV=n(f$e,"A",{href:!0});var qht=s(PV);qXo=r(qht,"FNetForQuestionAnswering"),qht.forEach(t),NXo=r(f$e," (FNet model)"),f$e.forEach(t),jXo=i(X),E1=n(X,"LI",{});var g$e=s(E1);Ghe=n(g$e,"STRONG",{});var Nht=s(Ghe);DXo=r(Nht,"funnel"),Nht.forEach(t),GXo=r(g$e," \u2014 "),BV=n(g$e,"A",{href:!0});var jht=s(BV);OXo=r(jht,"FunnelForQuestionAnswering"),jht.forEach(t),VXo=r(g$e," (Funnel Transformer model)"),g$e.forEach(t),XXo=i(X),C1=n(X,"LI",{});var h$e=s(C1);Ohe=n(h$e,"STRONG",{});var Dht=s(Ohe);zXo=r(Dht,"gptj"),Dht.forEach(t),WXo=r(h$e," \u2014 "),IV=n(h$e,"A",{href:!0});var Ght=s(IV);QXo=r(Ght,"GPTJForQuestionAnswering"),Ght.forEach(t),HXo=r(h$e," (GPT-J model)"),h$e.forEach(t),UXo=i(X),w1=n(X,"LI",{});var u$e=s(w1);Vhe=n(u$e,"STRONG",{});var Oht=s(Vhe);JXo=r(Oht,"ibert"),Oht.forEach(t),YXo=r(u$e," \u2014 "),qV=n(u$e,"A",{href:!0});var Vht=s(qV);KXo=r(Vht,"IBertForQuestionAnswering"),Vht.forEach(t),ZXo=r(u$e," (I-BERT model)"),u$e.forEach(t),ezo=i(X),A1=n(X,"LI",{});var p$e=s(A1);Xhe=n(p$e,"STRONG",{});var Xht=s(Xhe);ozo=r(Xht,"layoutlmv2"),Xht.forEach(t),rzo=r(p$e," \u2014 "),NV=n(p$e,"A",{href:!0});var zht=s(NV);tzo=r(zht,"LayoutLMv2ForQuestionAnswering"),zht.forEach(t),azo=r(p$e," (LayoutLMv2 model)"),p$e.forEach(t),nzo=i(X),y1=n(X,"LI",{});var _$e=s(y1);zhe=n(_$e,"STRONG",{});var Wht=s(zhe);szo=r(Wht,"layoutlmv3"),Wht.forEach(t),lzo=r(_$e," \u2014 "),jV=n(_$e,"A",{href:!0});var Qht=s(jV);izo=r(Qht,"LayoutLMv3ForQuestionAnswering"),Qht.forEach(t),dzo=r(_$e," (LayoutLMv3 model)"),_$e.forEach(t),czo=i(X),L1=n(X,"LI",{});var b$e=s(L1);Whe=n(b$e,"STRONG",{});var Hht=s(Whe);mzo=r(Hht,"led"),Hht.forEach(t),fzo=r(b$e," \u2014 "),DV=n(b$e,"A",{href:!0});var Uht=s(DV);gzo=r(Uht,"LEDForQuestionAnswering"),Uht.forEach(t),hzo=r(b$e," (LED model)"),b$e.forEach(t),uzo=i(X),x1=n(X,"LI",{});var v$e=s(x1);Qhe=n(v$e,"STRONG",{});var Jht=s(Qhe);pzo=r(Jht,"longformer"),Jht.forEach(t),_zo=r(v$e," \u2014 "),GV=n(v$e,"A",{href:!0});var Yht=s(GV);bzo=r(Yht,"LongformerForQuestionAnswering"),Yht.forEach(t),vzo=r(v$e," (Longformer model)"),v$e.forEach(t),Fzo=i(X),$1=n(X,"LI",{});var F$e=s($1);Hhe=n(F$e,"STRONG",{});var Kht=s(Hhe);Tzo=r(Kht,"lxmert"),Kht.forEach(t),Mzo=r(F$e," \u2014 "),OV=n(F$e,"A",{href:!0});var Zht=s(OV);Ezo=r(Zht,"LxmertForQuestionAnswering"),Zht.forEach(t),Czo=r(F$e," (LXMERT model)"),F$e.forEach(t),wzo=i(X),k1=n(X,"LI",{});var T$e=s(k1);Uhe=n(T$e,"STRONG",{});var eut=s(Uhe);Azo=r(eut,"mbart"),eut.forEach(t),yzo=r(T$e," \u2014 "),VV=n(T$e,"A",{href:!0});var out=s(VV);Lzo=r(out,"MBartForQuestionAnswering"),out.forEach(t),xzo=r(T$e," (mBART model)"),T$e.forEach(t),$zo=i(X),S1=n(X,"LI",{});var M$e=s(S1);Jhe=n(M$e,"STRONG",{});var rut=s(Jhe);kzo=r(rut,"megatron-bert"),rut.forEach(t),Szo=r(M$e," \u2014 "),XV=n(M$e,"A",{href:!0});var tut=s(XV);Rzo=r(tut,"MegatronBertForQuestionAnswering"),tut.forEach(t),Pzo=r(M$e," (MegatronBert model)"),M$e.forEach(t),Bzo=i(X),R1=n(X,"LI",{});var E$e=s(R1);Yhe=n(E$e,"STRONG",{});var aut=s(Yhe);Izo=r(aut,"mobilebert"),aut.forEach(t),qzo=r(E$e," \u2014 "),zV=n(E$e,"A",{href:!0});var nut=s(zV);Nzo=r(nut,"MobileBertForQuestionAnswering"),nut.forEach(t),jzo=r(E$e," (MobileBERT model)"),E$e.forEach(t),Dzo=i(X),P1=n(X,"LI",{});var C$e=s(P1);Khe=n(C$e,"STRONG",{});var sut=s(Khe);Gzo=r(sut,"mpnet"),sut.forEach(t),Ozo=r(C$e," \u2014 "),WV=n(C$e,"A",{href:!0});var lut=s(WV);Vzo=r(lut,"MPNetForQuestionAnswering"),lut.forEach(t),Xzo=r(C$e," (MPNet model)"),C$e.forEach(t),zzo=i(X),B1=n(X,"LI",{});var w$e=s(B1);Zhe=n(w$e,"STRONG",{});var iut=s(Zhe);Wzo=r(iut,"nystromformer"),iut.forEach(t),Qzo=r(w$e," \u2014 "),QV=n(w$e,"A",{href:!0});var dut=s(QV);Hzo=r(dut,"NystromformerForQuestionAnswering"),dut.forEach(t),Uzo=r(w$e," (Nystromformer model)"),w$e.forEach(t),Jzo=i(X),I1=n(X,"LI",{});var A$e=s(I1);eue=n(A$e,"STRONG",{});var cut=s(eue);Yzo=r(cut,"qdqbert"),cut.forEach(t),Kzo=r(A$e," \u2014 "),HV=n(A$e,"A",{href:!0});var mut=s(HV);Zzo=r(mut,"QDQBertForQuestionAnswering"),mut.forEach(t),eWo=r(A$e," (QDQBert model)"),A$e.forEach(t),oWo=i(X),q1=n(X,"LI",{});var y$e=s(q1);oue=n(y$e,"STRONG",{});var fut=s(oue);rWo=r(fut,"reformer"),fut.forEach(t),tWo=r(y$e," \u2014 "),UV=n(y$e,"A",{href:!0});var gut=s(UV);aWo=r(gut,"ReformerForQuestionAnswering"),gut.forEach(t),nWo=r(y$e," (Reformer model)"),y$e.forEach(t),sWo=i(X),N1=n(X,"LI",{});var L$e=s(N1);rue=n(L$e,"STRONG",{});var hut=s(rue);lWo=r(hut,"rembert"),hut.forEach(t),iWo=r(L$e," \u2014 "),JV=n(L$e,"A",{href:!0});var uut=s(JV);dWo=r(uut,"RemBertForQuestionAnswering"),uut.forEach(t),cWo=r(L$e," (RemBERT model)"),L$e.forEach(t),mWo=i(X),j1=n(X,"LI",{});var x$e=s(j1);tue=n(x$e,"STRONG",{});var put=s(tue);fWo=r(put,"roberta"),put.forEach(t),gWo=r(x$e," \u2014 "),YV=n(x$e,"A",{href:!0});var _ut=s(YV);hWo=r(_ut,"RobertaForQuestionAnswering"),_ut.forEach(t),uWo=r(x$e," (RoBERTa model)"),x$e.forEach(t),pWo=i(X),D1=n(X,"LI",{});var $$e=s(D1);aue=n($$e,"STRONG",{});var but=s(aue);_Wo=r(but,"roformer"),but.forEach(t),bWo=r($$e," \u2014 "),KV=n($$e,"A",{href:!0});var vut=s(KV);vWo=r(vut,"RoFormerForQuestionAnswering"),vut.forEach(t),FWo=r($$e," (RoFormer model)"),$$e.forEach(t),TWo=i(X),G1=n(X,"LI",{});var k$e=s(G1);nue=n(k$e,"STRONG",{});var Fut=s(nue);MWo=r(Fut,"splinter"),Fut.forEach(t),EWo=r(k$e," \u2014 "),ZV=n(k$e,"A",{href:!0});var Tut=s(ZV);CWo=r(Tut,"SplinterForQuestionAnswering"),Tut.forEach(t),wWo=r(k$e," (Splinter model)"),k$e.forEach(t),AWo=i(X),O1=n(X,"LI",{});var S$e=s(O1);sue=n(S$e,"STRONG",{});var Mut=s(sue);yWo=r(Mut,"squeezebert"),Mut.forEach(t),LWo=r(S$e," \u2014 "),eX=n(S$e,"A",{href:!0});var Eut=s(eX);xWo=r(Eut,"SqueezeBertForQuestionAnswering"),Eut.forEach(t),$Wo=r(S$e," (SqueezeBERT model)"),S$e.forEach(t),kWo=i(X),V1=n(X,"LI",{});var R$e=s(V1);lue=n(R$e,"STRONG",{});var Cut=s(lue);SWo=r(Cut,"xlm"),Cut.forEach(t),RWo=r(R$e," \u2014 "),oX=n(R$e,"A",{href:!0});var wut=s(oX);PWo=r(wut,"XLMForQuestionAnsweringSimple"),wut.forEach(t),BWo=r(R$e," (XLM model)"),R$e.forEach(t),IWo=i(X),X1=n(X,"LI",{});var P$e=s(X1);iue=n(P$e,"STRONG",{});var Aut=s(iue);qWo=r(Aut,"xlm-roberta"),Aut.forEach(t),NWo=r(P$e," \u2014 "),rX=n(P$e,"A",{href:!0});var yut=s(rX);jWo=r(yut,"XLMRobertaForQuestionAnswering"),yut.forEach(t),DWo=r(P$e," (XLM-RoBERTa model)"),P$e.forEach(t),GWo=i(X),z1=n(X,"LI",{});var B$e=s(z1);due=n(B$e,"STRONG",{});var Lut=s(due);OWo=r(Lut,"xlm-roberta-xl"),Lut.forEach(t),VWo=r(B$e," \u2014 "),tX=n(B$e,"A",{href:!0});var xut=s(tX);XWo=r(xut,"XLMRobertaXLForQuestionAnswering"),xut.forEach(t),zWo=r(B$e," (XLM-RoBERTa-XL model)"),B$e.forEach(t),WWo=i(X),W1=n(X,"LI",{});var I$e=s(W1);cue=n(I$e,"STRONG",{});var $ut=s(cue);QWo=r($ut,"xlnet"),$ut.forEach(t),HWo=r(I$e," \u2014 "),aX=n(I$e,"A",{href:!0});var kut=s(aX);UWo=r(kut,"XLNetForQuestionAnsweringSimple"),kut.forEach(t),JWo=r(I$e," (XLNet model)"),I$e.forEach(t),YWo=i(X),Q1=n(X,"LI",{});var q$e=s(Q1);mue=n(q$e,"STRONG",{});var Sut=s(mue);KWo=r(Sut,"yoso"),Sut.forEach(t),ZWo=r(q$e," \u2014 "),nX=n(q$e,"A",{href:!0});var Rut=s(nX);eQo=r(Rut,"YosoForQuestionAnswering"),Rut.forEach(t),oQo=r(q$e," (YOSO model)"),q$e.forEach(t),X.forEach(t),rQo=i(ca),H1=n(ca,"P",{});var N$e=s(H1);tQo=r(N$e,"The model is set in evaluation mode by default using "),fue=n(N$e,"CODE",{});var Put=s(fue);aQo=r(Put,"model.eval()"),Put.forEach(t),nQo=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(N$e,"CODE",{});var But=s(gue);sQo=r(But,"model.train()"),But.forEach(t),N$e.forEach(t),lQo=i(ca),T(U1.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),uNe=i(m),od=n(m,"H2",{class:!0});var vDe=s(od);J1=n(vDe,"A",{id:!0,class:!0,href:!0});var Iut=s(J1);hue=n(Iut,"SPAN",{});var qut=s(hue);T(zL.$$.fragment,qut),qut.forEach(t),Iut.forEach(t),iQo=i(vDe),uue=n(vDe,"SPAN",{});var Nut=s(uue);dQo=r(Nut,"AutoModelForTableQuestionAnswering"),Nut.forEach(t),vDe.forEach(t),pNe=i(m),No=n(m,"DIV",{class:!0});var Ks=s(No);T(WL.$$.fragment,Ks),cQo=i(Ks),rd=n(Ks,"P",{});var yZ=s(rd);mQo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sX=n(yZ,"A",{href:!0});var jut=s(sX);fQo=r(jut,"from_pretrained()"),jut.forEach(t),gQo=r(yZ," class method or the "),lX=n(yZ,"A",{href:!0});var Dut=s(lX);hQo=r(Dut,"from_config()"),Dut.forEach(t),uQo=r(yZ,` class
method.`),yZ.forEach(t),pQo=i(Ks),QL=n(Ks,"P",{});var FDe=s(QL);_Qo=r(FDe,"This class cannot be instantiated directly using "),pue=n(FDe,"CODE",{});var Gut=s(pue);bQo=r(Gut,"__init__()"),Gut.forEach(t),vQo=r(FDe," (throws an error)."),FDe.forEach(t),FQo=i(Ks),gt=n(Ks,"DIV",{class:!0});var QA=s(gt);T(HL.$$.fragment,QA),TQo=i(QA),_ue=n(QA,"P",{});var Out=s(_ue);MQo=r(Out,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Out.forEach(t),EQo=i(QA),td=n(QA,"P",{});var LZ=s(td);CQo=r(LZ,`Note:
Loading a model from its configuration file does `),bue=n(LZ,"STRONG",{});var Vut=s(bue);wQo=r(Vut,"not"),Vut.forEach(t),AQo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(LZ,"A",{href:!0});var Xut=s(iX);yQo=r(Xut,"from_pretrained()"),Xut.forEach(t),LQo=r(LZ," to load the model weights."),LZ.forEach(t),xQo=i(QA),T(Y1.$$.fragment,QA),QA.forEach(t),$Qo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(UL.$$.fragment,ma),kQo=i(ma),vue=n(ma,"P",{});var zut=s(vue);SQo=r(zut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zut.forEach(t),RQo=i(ma),Na=n(ma,"P",{});var HA=s(Na);PQo=r(HA,"The model class to instantiate is selected based on the "),Fue=n(HA,"CODE",{});var Wut=s(Fue);BQo=r(Wut,"model_type"),Wut.forEach(t),IQo=r(HA,` property of the config object (either
passed as an argument or loaded from `),Tue=n(HA,"CODE",{});var Qut=s(Tue);qQo=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),NQo=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(HA,"CODE",{});var Hut=s(Mue);jQo=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),DQo=r(HA,":"),HA.forEach(t),GQo=i(ma),Eue=n(ma,"UL",{});var Uut=s(Eue);K1=n(Uut,"LI",{});var j$e=s(K1);Cue=n(j$e,"STRONG",{});var Jut=s(Cue);OQo=r(Jut,"tapas"),Jut.forEach(t),VQo=r(j$e," \u2014 "),dX=n(j$e,"A",{href:!0});var Yut=s(dX);XQo=r(Yut,"TapasForQuestionAnswering"),Yut.forEach(t),zQo=r(j$e," (TAPAS model)"),j$e.forEach(t),Uut.forEach(t),WQo=i(ma),Z1=n(ma,"P",{});var D$e=s(Z1);QQo=r(D$e,"The model is set in evaluation mode by default using "),wue=n(D$e,"CODE",{});var Kut=s(wue);HQo=r(Kut,"model.eval()"),Kut.forEach(t),UQo=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(D$e,"CODE",{});var Zut=s(Aue);JQo=r(Zut,"model.train()"),Zut.forEach(t),D$e.forEach(t),YQo=i(ma),T(eT.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),_Ne=i(m),ad=n(m,"H2",{class:!0});var TDe=s(ad);oT=n(TDe,"A",{id:!0,class:!0,href:!0});var ept=s(oT);yue=n(ept,"SPAN",{});var opt=s(yue);T(JL.$$.fragment,opt),opt.forEach(t),ept.forEach(t),KQo=i(TDe),Lue=n(TDe,"SPAN",{});var rpt=s(Lue);ZQo=r(rpt,"AutoModelForImageClassification"),rpt.forEach(t),TDe.forEach(t),bNe=i(m),jo=n(m,"DIV",{class:!0});var Zs=s(jo);T(YL.$$.fragment,Zs),eHo=i(Zs),nd=n(Zs,"P",{});var xZ=s(nd);oHo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cX=n(xZ,"A",{href:!0});var tpt=s(cX);rHo=r(tpt,"from_pretrained()"),tpt.forEach(t),tHo=r(xZ," class method or the "),mX=n(xZ,"A",{href:!0});var apt=s(mX);aHo=r(apt,"from_config()"),apt.forEach(t),nHo=r(xZ,` class
method.`),xZ.forEach(t),sHo=i(Zs),KL=n(Zs,"P",{});var MDe=s(KL);lHo=r(MDe,"This class cannot be instantiated directly using "),xue=n(MDe,"CODE",{});var npt=s(xue);iHo=r(npt,"__init__()"),npt.forEach(t),dHo=r(MDe," (throws an error)."),MDe.forEach(t),cHo=i(Zs),ht=n(Zs,"DIV",{class:!0});var UA=s(ht);T(ZL.$$.fragment,UA),mHo=i(UA),$ue=n(UA,"P",{});var spt=s($ue);fHo=r(spt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),spt.forEach(t),gHo=i(UA),sd=n(UA,"P",{});var $Z=s(sd);hHo=r($Z,`Note:
Loading a model from its configuration file does `),kue=n($Z,"STRONG",{});var lpt=s(kue);uHo=r(lpt,"not"),lpt.forEach(t),pHo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n($Z,"A",{href:!0});var ipt=s(fX);_Ho=r(ipt,"from_pretrained()"),ipt.forEach(t),bHo=r($Z," to load the model weights."),$Z.forEach(t),vHo=i(UA),T(rT.$$.fragment,UA),UA.forEach(t),FHo=i(Zs),lo=n(Zs,"DIV",{class:!0});var fa=s(lo);T(e8.$$.fragment,fa),THo=i(fa),Sue=n(fa,"P",{});var dpt=s(Sue);MHo=r(dpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dpt.forEach(t),EHo=i(fa),ja=n(fa,"P",{});var JA=s(ja);CHo=r(JA,"The model class to instantiate is selected based on the "),Rue=n(JA,"CODE",{});var cpt=s(Rue);wHo=r(cpt,"model_type"),cpt.forEach(t),AHo=r(JA,` property of the config object (either
passed as an argument or loaded from `),Pue=n(JA,"CODE",{});var mpt=s(Pue);yHo=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),LHo=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(JA,"CODE",{});var fpt=s(Bue);xHo=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),$Ho=r(JA,":"),JA.forEach(t),kHo=i(fa),Fe=n(fa,"UL",{});var Te=s(Fe);tT=n(Te,"LI",{});var G$e=s(tT);Iue=n(G$e,"STRONG",{});var gpt=s(Iue);SHo=r(gpt,"beit"),gpt.forEach(t),RHo=r(G$e," \u2014 "),gX=n(G$e,"A",{href:!0});var hpt=s(gX);PHo=r(hpt,"BeitForImageClassification"),hpt.forEach(t),BHo=r(G$e," (BEiT model)"),G$e.forEach(t),IHo=i(Te),aT=n(Te,"LI",{});var O$e=s(aT);que=n(O$e,"STRONG",{});var upt=s(que);qHo=r(upt,"convnext"),upt.forEach(t),NHo=r(O$e," \u2014 "),hX=n(O$e,"A",{href:!0});var ppt=s(hX);jHo=r(ppt,"ConvNextForImageClassification"),ppt.forEach(t),DHo=r(O$e," (ConvNext model)"),O$e.forEach(t),GHo=i(Te),nT=n(Te,"LI",{});var V$e=s(nT);Nue=n(V$e,"STRONG",{});var _pt=s(Nue);OHo=r(_pt,"cvt"),_pt.forEach(t),VHo=r(V$e," \u2014 "),uX=n(V$e,"A",{href:!0});var bpt=s(uX);XHo=r(bpt,"CvtForImageClassification"),bpt.forEach(t),zHo=r(V$e," (CvT model)"),V$e.forEach(t),WHo=i(Te),sT=n(Te,"LI",{});var X$e=s(sT);jue=n(X$e,"STRONG",{});var vpt=s(jue);QHo=r(vpt,"data2vec-vision"),vpt.forEach(t),HHo=r(X$e," \u2014 "),pX=n(X$e,"A",{href:!0});var Fpt=s(pX);UHo=r(Fpt,"Data2VecVisionForImageClassification"),Fpt.forEach(t),JHo=r(X$e," (Data2VecVision model)"),X$e.forEach(t),YHo=i(Te),Bs=n(Te,"LI",{});var j$=s(Bs);Due=n(j$,"STRONG",{});var Tpt=s(Due);KHo=r(Tpt,"deit"),Tpt.forEach(t),ZHo=r(j$," \u2014 "),_X=n(j$,"A",{href:!0});var Mpt=s(_X);eUo=r(Mpt,"DeiTForImageClassification"),Mpt.forEach(t),oUo=r(j$," or "),bX=n(j$,"A",{href:!0});var Ept=s(bX);rUo=r(Ept,"DeiTForImageClassificationWithTeacher"),Ept.forEach(t),tUo=r(j$," (DeiT model)"),j$.forEach(t),aUo=i(Te),lT=n(Te,"LI",{});var z$e=s(lT);Gue=n(z$e,"STRONG",{});var Cpt=s(Gue);nUo=r(Cpt,"imagegpt"),Cpt.forEach(t),sUo=r(z$e," \u2014 "),vX=n(z$e,"A",{href:!0});var wpt=s(vX);lUo=r(wpt,"ImageGPTForImageClassification"),wpt.forEach(t),iUo=r(z$e," (ImageGPT model)"),z$e.forEach(t),dUo=i(Te),ut=n(Te,"LI",{});var gm=s(ut);Oue=n(gm,"STRONG",{});var Apt=s(Oue);cUo=r(Apt,"perceiver"),Apt.forEach(t),mUo=r(gm," \u2014 "),FX=n(gm,"A",{href:!0});var ypt=s(FX);fUo=r(ypt,"PerceiverForImageClassificationLearned"),ypt.forEach(t),gUo=r(gm," or "),TX=n(gm,"A",{href:!0});var Lpt=s(TX);hUo=r(Lpt,"PerceiverForImageClassificationFourier"),Lpt.forEach(t),uUo=r(gm," or "),MX=n(gm,"A",{href:!0});var xpt=s(MX);pUo=r(xpt,"PerceiverForImageClassificationConvProcessing"),xpt.forEach(t),_Uo=r(gm," (Perceiver model)"),gm.forEach(t),bUo=i(Te),iT=n(Te,"LI",{});var W$e=s(iT);Vue=n(W$e,"STRONG",{});var $pt=s(Vue);vUo=r($pt,"poolformer"),$pt.forEach(t),FUo=r(W$e," \u2014 "),EX=n(W$e,"A",{href:!0});var kpt=s(EX);TUo=r(kpt,"PoolFormerForImageClassification"),kpt.forEach(t),MUo=r(W$e," (PoolFormer model)"),W$e.forEach(t),EUo=i(Te),dT=n(Te,"LI",{});var Q$e=s(dT);Xue=n(Q$e,"STRONG",{});var Spt=s(Xue);CUo=r(Spt,"regnet"),Spt.forEach(t),wUo=r(Q$e," \u2014 "),CX=n(Q$e,"A",{href:!0});var Rpt=s(CX);AUo=r(Rpt,"RegNetForImageClassification"),Rpt.forEach(t),yUo=r(Q$e," (RegNet model)"),Q$e.forEach(t),LUo=i(Te),cT=n(Te,"LI",{});var H$e=s(cT);zue=n(H$e,"STRONG",{});var Ppt=s(zue);xUo=r(Ppt,"resnet"),Ppt.forEach(t),$Uo=r(H$e," \u2014 "),wX=n(H$e,"A",{href:!0});var Bpt=s(wX);kUo=r(Bpt,"ResNetForImageClassification"),Bpt.forEach(t),SUo=r(H$e," (ResNet model)"),H$e.forEach(t),RUo=i(Te),mT=n(Te,"LI",{});var U$e=s(mT);Wue=n(U$e,"STRONG",{});var Ipt=s(Wue);PUo=r(Ipt,"segformer"),Ipt.forEach(t),BUo=r(U$e," \u2014 "),AX=n(U$e,"A",{href:!0});var qpt=s(AX);IUo=r(qpt,"SegformerForImageClassification"),qpt.forEach(t),qUo=r(U$e," (SegFormer model)"),U$e.forEach(t),NUo=i(Te),fT=n(Te,"LI",{});var J$e=s(fT);Que=n(J$e,"STRONG",{});var Npt=s(Que);jUo=r(Npt,"swin"),Npt.forEach(t),DUo=r(J$e," \u2014 "),yX=n(J$e,"A",{href:!0});var jpt=s(yX);GUo=r(jpt,"SwinForImageClassification"),jpt.forEach(t),OUo=r(J$e," (Swin model)"),J$e.forEach(t),VUo=i(Te),gT=n(Te,"LI",{});var Y$e=s(gT);Hue=n(Y$e,"STRONG",{});var Dpt=s(Hue);XUo=r(Dpt,"van"),Dpt.forEach(t),zUo=r(Y$e," \u2014 "),LX=n(Y$e,"A",{href:!0});var Gpt=s(LX);WUo=r(Gpt,"VanForImageClassification"),Gpt.forEach(t),QUo=r(Y$e," (VAN model)"),Y$e.forEach(t),HUo=i(Te),hT=n(Te,"LI",{});var K$e=s(hT);Uue=n(K$e,"STRONG",{});var Opt=s(Uue);UUo=r(Opt,"vit"),Opt.forEach(t),JUo=r(K$e," \u2014 "),xX=n(K$e,"A",{href:!0});var Vpt=s(xX);YUo=r(Vpt,"ViTForImageClassification"),Vpt.forEach(t),KUo=r(K$e," (ViT model)"),K$e.forEach(t),Te.forEach(t),ZUo=i(fa),uT=n(fa,"P",{});var Z$e=s(uT);eJo=r(Z$e,"The model is set in evaluation mode by default using "),Jue=n(Z$e,"CODE",{});var Xpt=s(Jue);oJo=r(Xpt,"model.eval()"),Xpt.forEach(t),rJo=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(Z$e,"CODE",{});var zpt=s(Yue);tJo=r(zpt,"model.train()"),zpt.forEach(t),Z$e.forEach(t),aJo=i(fa),T(pT.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),vNe=i(m),ld=n(m,"H2",{class:!0});var EDe=s(ld);_T=n(EDe,"A",{id:!0,class:!0,href:!0});var Wpt=s(_T);Kue=n(Wpt,"SPAN",{});var Qpt=s(Kue);T(o8.$$.fragment,Qpt),Qpt.forEach(t),Wpt.forEach(t),nJo=i(EDe),Zue=n(EDe,"SPAN",{});var Hpt=s(Zue);sJo=r(Hpt,"AutoModelForVision2Seq"),Hpt.forEach(t),EDe.forEach(t),FNe=i(m),Do=n(m,"DIV",{class:!0});var el=s(Do);T(r8.$$.fragment,el),lJo=i(el),id=n(el,"P",{});var kZ=s(id);iJo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$X=n(kZ,"A",{href:!0});var Upt=s($X);dJo=r(Upt,"from_pretrained()"),Upt.forEach(t),cJo=r(kZ," class method or the "),kX=n(kZ,"A",{href:!0});var Jpt=s(kX);mJo=r(Jpt,"from_config()"),Jpt.forEach(t),fJo=r(kZ,` class
method.`),kZ.forEach(t),gJo=i(el),t8=n(el,"P",{});var CDe=s(t8);hJo=r(CDe,"This class cannot be instantiated directly using "),epe=n(CDe,"CODE",{});var Ypt=s(epe);uJo=r(Ypt,"__init__()"),Ypt.forEach(t),pJo=r(CDe," (throws an error)."),CDe.forEach(t),_Jo=i(el),pt=n(el,"DIV",{class:!0});var YA=s(pt);T(a8.$$.fragment,YA),bJo=i(YA),ope=n(YA,"P",{});var Kpt=s(ope);vJo=r(Kpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kpt.forEach(t),FJo=i(YA),dd=n(YA,"P",{});var SZ=s(dd);TJo=r(SZ,`Note:
Loading a model from its configuration file does `),rpe=n(SZ,"STRONG",{});var Zpt=s(rpe);MJo=r(Zpt,"not"),Zpt.forEach(t),EJo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(SZ,"A",{href:!0});var e_t=s(SX);CJo=r(e_t,"from_pretrained()"),e_t.forEach(t),wJo=r(SZ," to load the model weights."),SZ.forEach(t),AJo=i(YA),T(bT.$$.fragment,YA),YA.forEach(t),yJo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(n8.$$.fragment,ga),LJo=i(ga),tpe=n(ga,"P",{});var o_t=s(tpe);xJo=r(o_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),o_t.forEach(t),$Jo=i(ga),Da=n(ga,"P",{});var KA=s(Da);kJo=r(KA,"The model class to instantiate is selected based on the "),ape=n(KA,"CODE",{});var r_t=s(ape);SJo=r(r_t,"model_type"),r_t.forEach(t),RJo=r(KA,` property of the config object (either
passed as an argument or loaded from `),npe=n(KA,"CODE",{});var t_t=s(npe);PJo=r(t_t,"pretrained_model_name_or_path"),t_t.forEach(t),BJo=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(KA,"CODE",{});var a_t=s(spe);IJo=r(a_t,"pretrained_model_name_or_path"),a_t.forEach(t),qJo=r(KA,":"),KA.forEach(t),NJo=i(ga),lpe=n(ga,"UL",{});var n_t=s(lpe);vT=n(n_t,"LI",{});var eke=s(vT);ipe=n(eke,"STRONG",{});var s_t=s(ipe);jJo=r(s_t,"vision-encoder-decoder"),s_t.forEach(t),DJo=r(eke," \u2014 "),RX=n(eke,"A",{href:!0});var l_t=s(RX);GJo=r(l_t,"VisionEncoderDecoderModel"),l_t.forEach(t),OJo=r(eke," (Vision Encoder decoder model)"),eke.forEach(t),n_t.forEach(t),VJo=i(ga),FT=n(ga,"P",{});var oke=s(FT);XJo=r(oke,"The model is set in evaluation mode by default using "),dpe=n(oke,"CODE",{});var i_t=s(dpe);zJo=r(i_t,"model.eval()"),i_t.forEach(t),WJo=r(oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(oke,"CODE",{});var d_t=s(cpe);QJo=r(d_t,"model.train()"),d_t.forEach(t),oke.forEach(t),HJo=i(ga),T(TT.$$.fragment,ga),ga.forEach(t),el.forEach(t),TNe=i(m),cd=n(m,"H2",{class:!0});var wDe=s(cd);MT=n(wDe,"A",{id:!0,class:!0,href:!0});var c_t=s(MT);mpe=n(c_t,"SPAN",{});var m_t=s(mpe);T(s8.$$.fragment,m_t),m_t.forEach(t),c_t.forEach(t),UJo=i(wDe),fpe=n(wDe,"SPAN",{});var f_t=s(fpe);JJo=r(f_t,"AutoModelForAudioClassification"),f_t.forEach(t),wDe.forEach(t),MNe=i(m),Go=n(m,"DIV",{class:!0});var ol=s(Go);T(l8.$$.fragment,ol),YJo=i(ol),md=n(ol,"P",{});var RZ=s(md);KJo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PX=n(RZ,"A",{href:!0});var g_t=s(PX);ZJo=r(g_t,"from_pretrained()"),g_t.forEach(t),eYo=r(RZ," class method or the "),BX=n(RZ,"A",{href:!0});var h_t=s(BX);oYo=r(h_t,"from_config()"),h_t.forEach(t),rYo=r(RZ,` class
method.`),RZ.forEach(t),tYo=i(ol),i8=n(ol,"P",{});var ADe=s(i8);aYo=r(ADe,"This class cannot be instantiated directly using "),gpe=n(ADe,"CODE",{});var u_t=s(gpe);nYo=r(u_t,"__init__()"),u_t.forEach(t),sYo=r(ADe," (throws an error)."),ADe.forEach(t),lYo=i(ol),_t=n(ol,"DIV",{class:!0});var ZA=s(_t);T(d8.$$.fragment,ZA),iYo=i(ZA),hpe=n(ZA,"P",{});var p_t=s(hpe);dYo=r(p_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),p_t.forEach(t),cYo=i(ZA),fd=n(ZA,"P",{});var PZ=s(fd);mYo=r(PZ,`Note:
Loading a model from its configuration file does `),upe=n(PZ,"STRONG",{});var __t=s(upe);fYo=r(__t,"not"),__t.forEach(t),gYo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(PZ,"A",{href:!0});var b_t=s(IX);hYo=r(b_t,"from_pretrained()"),b_t.forEach(t),uYo=r(PZ," to load the model weights."),PZ.forEach(t),pYo=i(ZA),T(ET.$$.fragment,ZA),ZA.forEach(t),_Yo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(c8.$$.fragment,ha),bYo=i(ha),ppe=n(ha,"P",{});var v_t=s(ppe);vYo=r(v_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),v_t.forEach(t),FYo=i(ha),Ga=n(ha,"P",{});var e6=s(Ga);TYo=r(e6,"The model class to instantiate is selected based on the "),_pe=n(e6,"CODE",{});var F_t=s(_pe);MYo=r(F_t,"model_type"),F_t.forEach(t),EYo=r(e6,` property of the config object (either
passed as an argument or loaded from `),bpe=n(e6,"CODE",{});var T_t=s(bpe);CYo=r(T_t,"pretrained_model_name_or_path"),T_t.forEach(t),wYo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(e6,"CODE",{});var M_t=s(vpe);AYo=r(M_t,"pretrained_model_name_or_path"),M_t.forEach(t),yYo=r(e6,":"),e6.forEach(t),LYo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);CT=n(Oe,"LI",{});var rke=s(CT);Fpe=n(rke,"STRONG",{});var E_t=s(Fpe);xYo=r(E_t,"data2vec-audio"),E_t.forEach(t),$Yo=r(rke," \u2014 "),qX=n(rke,"A",{href:!0});var C_t=s(qX);kYo=r(C_t,"Data2VecAudioForSequenceClassification"),C_t.forEach(t),SYo=r(rke," (Data2VecAudio model)"),rke.forEach(t),RYo=i(Oe),wT=n(Oe,"LI",{});var tke=s(wT);Tpe=n(tke,"STRONG",{});var w_t=s(Tpe);PYo=r(w_t,"hubert"),w_t.forEach(t),BYo=r(tke," \u2014 "),NX=n(tke,"A",{href:!0});var A_t=s(NX);IYo=r(A_t,"HubertForSequenceClassification"),A_t.forEach(t),qYo=r(tke," (Hubert model)"),tke.forEach(t),NYo=i(Oe),AT=n(Oe,"LI",{});var ake=s(AT);Mpe=n(ake,"STRONG",{});var y_t=s(Mpe);jYo=r(y_t,"sew"),y_t.forEach(t),DYo=r(ake," \u2014 "),jX=n(ake,"A",{href:!0});var L_t=s(jX);GYo=r(L_t,"SEWForSequenceClassification"),L_t.forEach(t),OYo=r(ake," (SEW model)"),ake.forEach(t),VYo=i(Oe),yT=n(Oe,"LI",{});var nke=s(yT);Epe=n(nke,"STRONG",{});var x_t=s(Epe);XYo=r(x_t,"sew-d"),x_t.forEach(t),zYo=r(nke," \u2014 "),DX=n(nke,"A",{href:!0});var $_t=s(DX);WYo=r($_t,"SEWDForSequenceClassification"),$_t.forEach(t),QYo=r(nke," (SEW-D model)"),nke.forEach(t),HYo=i(Oe),LT=n(Oe,"LI",{});var ske=s(LT);Cpe=n(ske,"STRONG",{});var k_t=s(Cpe);UYo=r(k_t,"unispeech"),k_t.forEach(t),JYo=r(ske," \u2014 "),GX=n(ske,"A",{href:!0});var S_t=s(GX);YYo=r(S_t,"UniSpeechForSequenceClassification"),S_t.forEach(t),KYo=r(ske," (UniSpeech model)"),ske.forEach(t),ZYo=i(Oe),xT=n(Oe,"LI",{});var lke=s(xT);wpe=n(lke,"STRONG",{});var R_t=s(wpe);eKo=r(R_t,"unispeech-sat"),R_t.forEach(t),oKo=r(lke," \u2014 "),OX=n(lke,"A",{href:!0});var P_t=s(OX);rKo=r(P_t,"UniSpeechSatForSequenceClassification"),P_t.forEach(t),tKo=r(lke," (UniSpeechSat model)"),lke.forEach(t),aKo=i(Oe),$T=n(Oe,"LI",{});var ike=s($T);Ape=n(ike,"STRONG",{});var B_t=s(Ape);nKo=r(B_t,"wav2vec2"),B_t.forEach(t),sKo=r(ike," \u2014 "),VX=n(ike,"A",{href:!0});var I_t=s(VX);lKo=r(I_t,"Wav2Vec2ForSequenceClassification"),I_t.forEach(t),iKo=r(ike," (Wav2Vec2 model)"),ike.forEach(t),dKo=i(Oe),kT=n(Oe,"LI",{});var dke=s(kT);ype=n(dke,"STRONG",{});var q_t=s(ype);cKo=r(q_t,"wav2vec2-conformer"),q_t.forEach(t),mKo=r(dke," \u2014 "),XX=n(dke,"A",{href:!0});var N_t=s(XX);fKo=r(N_t,"Wav2Vec2ConformerForSequenceClassification"),N_t.forEach(t),gKo=r(dke," (Wav2Vec2-Conformer model)"),dke.forEach(t),hKo=i(Oe),ST=n(Oe,"LI",{});var cke=s(ST);Lpe=n(cke,"STRONG",{});var j_t=s(Lpe);uKo=r(j_t,"wavlm"),j_t.forEach(t),pKo=r(cke," \u2014 "),zX=n(cke,"A",{href:!0});var D_t=s(zX);_Ko=r(D_t,"WavLMForSequenceClassification"),D_t.forEach(t),bKo=r(cke," (WavLM model)"),cke.forEach(t),Oe.forEach(t),vKo=i(ha),RT=n(ha,"P",{});var mke=s(RT);FKo=r(mke,"The model is set in evaluation mode by default using "),xpe=n(mke,"CODE",{});var G_t=s(xpe);TKo=r(G_t,"model.eval()"),G_t.forEach(t),MKo=r(mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(mke,"CODE",{});var O_t=s($pe);EKo=r(O_t,"model.train()"),O_t.forEach(t),mke.forEach(t),CKo=i(ha),T(PT.$$.fragment,ha),ha.forEach(t),ol.forEach(t),ENe=i(m),gd=n(m,"H2",{class:!0});var yDe=s(gd);BT=n(yDe,"A",{id:!0,class:!0,href:!0});var V_t=s(BT);kpe=n(V_t,"SPAN",{});var X_t=s(kpe);T(m8.$$.fragment,X_t),X_t.forEach(t),V_t.forEach(t),wKo=i(yDe),Spe=n(yDe,"SPAN",{});var z_t=s(Spe);AKo=r(z_t,"AutoModelForAudioFrameClassification"),z_t.forEach(t),yDe.forEach(t),CNe=i(m),Oo=n(m,"DIV",{class:!0});var rl=s(Oo);T(f8.$$.fragment,rl),yKo=i(rl),hd=n(rl,"P",{});var BZ=s(hd);LKo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),WX=n(BZ,"A",{href:!0});var W_t=s(WX);xKo=r(W_t,"from_pretrained()"),W_t.forEach(t),$Ko=r(BZ," class method or the "),QX=n(BZ,"A",{href:!0});var Q_t=s(QX);kKo=r(Q_t,"from_config()"),Q_t.forEach(t),SKo=r(BZ,` class
method.`),BZ.forEach(t),RKo=i(rl),g8=n(rl,"P",{});var LDe=s(g8);PKo=r(LDe,"This class cannot be instantiated directly using "),Rpe=n(LDe,"CODE",{});var H_t=s(Rpe);BKo=r(H_t,"__init__()"),H_t.forEach(t),IKo=r(LDe," (throws an error)."),LDe.forEach(t),qKo=i(rl),bt=n(rl,"DIV",{class:!0});var o6=s(bt);T(h8.$$.fragment,o6),NKo=i(o6),Ppe=n(o6,"P",{});var U_t=s(Ppe);jKo=r(U_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),U_t.forEach(t),DKo=i(o6),ud=n(o6,"P",{});var IZ=s(ud);GKo=r(IZ,`Note:
Loading a model from its configuration file does `),Bpe=n(IZ,"STRONG",{});var J_t=s(Bpe);OKo=r(J_t,"not"),J_t.forEach(t),VKo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(IZ,"A",{href:!0});var Y_t=s(HX);XKo=r(Y_t,"from_pretrained()"),Y_t.forEach(t),zKo=r(IZ," to load the model weights."),IZ.forEach(t),WKo=i(o6),T(IT.$$.fragment,o6),o6.forEach(t),QKo=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(u8.$$.fragment,ua),HKo=i(ua),Ipe=n(ua,"P",{});var K_t=s(Ipe);UKo=r(K_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),K_t.forEach(t),JKo=i(ua),Oa=n(ua,"P",{});var r6=s(Oa);YKo=r(r6,"The model class to instantiate is selected based on the "),qpe=n(r6,"CODE",{});var Z_t=s(qpe);KKo=r(Z_t,"model_type"),Z_t.forEach(t),ZKo=r(r6,` property of the config object (either
passed as an argument or loaded from `),Npe=n(r6,"CODE",{});var ebt=s(Npe);eZo=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),oZo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(r6,"CODE",{});var obt=s(jpe);rZo=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),tZo=r(r6,":"),r6.forEach(t),aZo=i(ua),Kr=n(ua,"UL",{});var tl=s(Kr);qT=n(tl,"LI",{});var fke=s(qT);Dpe=n(fke,"STRONG",{});var rbt=s(Dpe);nZo=r(rbt,"data2vec-audio"),rbt.forEach(t),sZo=r(fke," \u2014 "),UX=n(fke,"A",{href:!0});var tbt=s(UX);lZo=r(tbt,"Data2VecAudioForAudioFrameClassification"),tbt.forEach(t),iZo=r(fke," (Data2VecAudio model)"),fke.forEach(t),dZo=i(tl),NT=n(tl,"LI",{});var gke=s(NT);Gpe=n(gke,"STRONG",{});var abt=s(Gpe);cZo=r(abt,"unispeech-sat"),abt.forEach(t),mZo=r(gke," \u2014 "),JX=n(gke,"A",{href:!0});var nbt=s(JX);fZo=r(nbt,"UniSpeechSatForAudioFrameClassification"),nbt.forEach(t),gZo=r(gke," (UniSpeechSat model)"),gke.forEach(t),hZo=i(tl),jT=n(tl,"LI",{});var hke=s(jT);Ope=n(hke,"STRONG",{});var sbt=s(Ope);uZo=r(sbt,"wav2vec2"),sbt.forEach(t),pZo=r(hke," \u2014 "),YX=n(hke,"A",{href:!0});var lbt=s(YX);_Zo=r(lbt,"Wav2Vec2ForAudioFrameClassification"),lbt.forEach(t),bZo=r(hke," (Wav2Vec2 model)"),hke.forEach(t),vZo=i(tl),DT=n(tl,"LI",{});var uke=s(DT);Vpe=n(uke,"STRONG",{});var ibt=s(Vpe);FZo=r(ibt,"wav2vec2-conformer"),ibt.forEach(t),TZo=r(uke," \u2014 "),KX=n(uke,"A",{href:!0});var dbt=s(KX);MZo=r(dbt,"Wav2Vec2ConformerForAudioFrameClassification"),dbt.forEach(t),EZo=r(uke," (Wav2Vec2-Conformer model)"),uke.forEach(t),CZo=i(tl),GT=n(tl,"LI",{});var pke=s(GT);Xpe=n(pke,"STRONG",{});var cbt=s(Xpe);wZo=r(cbt,"wavlm"),cbt.forEach(t),AZo=r(pke," \u2014 "),ZX=n(pke,"A",{href:!0});var mbt=s(ZX);yZo=r(mbt,"WavLMForAudioFrameClassification"),mbt.forEach(t),LZo=r(pke," (WavLM model)"),pke.forEach(t),tl.forEach(t),xZo=i(ua),OT=n(ua,"P",{});var _ke=s(OT);$Zo=r(_ke,"The model is set in evaluation mode by default using "),zpe=n(_ke,"CODE",{});var fbt=s(zpe);kZo=r(fbt,"model.eval()"),fbt.forEach(t),SZo=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(_ke,"CODE",{});var gbt=s(Wpe);RZo=r(gbt,"model.train()"),gbt.forEach(t),_ke.forEach(t),PZo=i(ua),T(VT.$$.fragment,ua),ua.forEach(t),rl.forEach(t),wNe=i(m),pd=n(m,"H2",{class:!0});var xDe=s(pd);XT=n(xDe,"A",{id:!0,class:!0,href:!0});var hbt=s(XT);Qpe=n(hbt,"SPAN",{});var ubt=s(Qpe);T(p8.$$.fragment,ubt),ubt.forEach(t),hbt.forEach(t),BZo=i(xDe),Hpe=n(xDe,"SPAN",{});var pbt=s(Hpe);IZo=r(pbt,"AutoModelForCTC"),pbt.forEach(t),xDe.forEach(t),ANe=i(m),Vo=n(m,"DIV",{class:!0});var al=s(Vo);T(_8.$$.fragment,al),qZo=i(al),_d=n(al,"P",{});var qZ=s(_d);NZo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ez=n(qZ,"A",{href:!0});var _bt=s(ez);jZo=r(_bt,"from_pretrained()"),_bt.forEach(t),DZo=r(qZ," class method or the "),oz=n(qZ,"A",{href:!0});var bbt=s(oz);GZo=r(bbt,"from_config()"),bbt.forEach(t),OZo=r(qZ,` class
method.`),qZ.forEach(t),VZo=i(al),b8=n(al,"P",{});var $De=s(b8);XZo=r($De,"This class cannot be instantiated directly using "),Upe=n($De,"CODE",{});var vbt=s(Upe);zZo=r(vbt,"__init__()"),vbt.forEach(t),WZo=r($De," (throws an error)."),$De.forEach(t),QZo=i(al),vt=n(al,"DIV",{class:!0});var t6=s(vt);T(v8.$$.fragment,t6),HZo=i(t6),Jpe=n(t6,"P",{});var Fbt=s(Jpe);UZo=r(Fbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Fbt.forEach(t),JZo=i(t6),bd=n(t6,"P",{});var NZ=s(bd);YZo=r(NZ,`Note:
Loading a model from its configuration file does `),Ype=n(NZ,"STRONG",{});var Tbt=s(Ype);KZo=r(Tbt,"not"),Tbt.forEach(t),ZZo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(NZ,"A",{href:!0});var Mbt=s(rz);eer=r(Mbt,"from_pretrained()"),Mbt.forEach(t),oer=r(NZ," to load the model weights."),NZ.forEach(t),rer=i(t6),T(zT.$$.fragment,t6),t6.forEach(t),ter=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(F8.$$.fragment,pa),aer=i(pa),Kpe=n(pa,"P",{});var Ebt=s(Kpe);ner=r(Ebt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ebt.forEach(t),ser=i(pa),Va=n(pa,"P",{});var a6=s(Va);ler=r(a6,"The model class to instantiate is selected based on the "),Zpe=n(a6,"CODE",{});var Cbt=s(Zpe);ier=r(Cbt,"model_type"),Cbt.forEach(t),der=r(a6,` property of the config object (either
passed as an argument or loaded from `),e_e=n(a6,"CODE",{});var wbt=s(e_e);cer=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),mer=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(a6,"CODE",{});var Abt=s(o_e);fer=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),ger=r(a6,":"),a6.forEach(t),her=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);WT=n(Ve,"LI",{});var bke=s(WT);r_e=n(bke,"STRONG",{});var ybt=s(r_e);uer=r(ybt,"data2vec-audio"),ybt.forEach(t),per=r(bke," \u2014 "),tz=n(bke,"A",{href:!0});var Lbt=s(tz);_er=r(Lbt,"Data2VecAudioForCTC"),Lbt.forEach(t),ber=r(bke," (Data2VecAudio model)"),bke.forEach(t),ver=i(Ve),QT=n(Ve,"LI",{});var vke=s(QT);t_e=n(vke,"STRONG",{});var xbt=s(t_e);Fer=r(xbt,"hubert"),xbt.forEach(t),Ter=r(vke," \u2014 "),az=n(vke,"A",{href:!0});var $bt=s(az);Mer=r($bt,"HubertForCTC"),$bt.forEach(t),Eer=r(vke," (Hubert model)"),vke.forEach(t),Cer=i(Ve),HT=n(Ve,"LI",{});var Fke=s(HT);a_e=n(Fke,"STRONG",{});var kbt=s(a_e);wer=r(kbt,"sew"),kbt.forEach(t),Aer=r(Fke," \u2014 "),nz=n(Fke,"A",{href:!0});var Sbt=s(nz);yer=r(Sbt,"SEWForCTC"),Sbt.forEach(t),Ler=r(Fke," (SEW model)"),Fke.forEach(t),xer=i(Ve),UT=n(Ve,"LI",{});var Tke=s(UT);n_e=n(Tke,"STRONG",{});var Rbt=s(n_e);$er=r(Rbt,"sew-d"),Rbt.forEach(t),ker=r(Tke," \u2014 "),sz=n(Tke,"A",{href:!0});var Pbt=s(sz);Ser=r(Pbt,"SEWDForCTC"),Pbt.forEach(t),Rer=r(Tke," (SEW-D model)"),Tke.forEach(t),Per=i(Ve),JT=n(Ve,"LI",{});var Mke=s(JT);s_e=n(Mke,"STRONG",{});var Bbt=s(s_e);Ber=r(Bbt,"unispeech"),Bbt.forEach(t),Ier=r(Mke," \u2014 "),lz=n(Mke,"A",{href:!0});var Ibt=s(lz);qer=r(Ibt,"UniSpeechForCTC"),Ibt.forEach(t),Ner=r(Mke," (UniSpeech model)"),Mke.forEach(t),jer=i(Ve),YT=n(Ve,"LI",{});var Eke=s(YT);l_e=n(Eke,"STRONG",{});var qbt=s(l_e);Der=r(qbt,"unispeech-sat"),qbt.forEach(t),Ger=r(Eke," \u2014 "),iz=n(Eke,"A",{href:!0});var Nbt=s(iz);Oer=r(Nbt,"UniSpeechSatForCTC"),Nbt.forEach(t),Ver=r(Eke," (UniSpeechSat model)"),Eke.forEach(t),Xer=i(Ve),KT=n(Ve,"LI",{});var Cke=s(KT);i_e=n(Cke,"STRONG",{});var jbt=s(i_e);zer=r(jbt,"wav2vec2"),jbt.forEach(t),Wer=r(Cke," \u2014 "),dz=n(Cke,"A",{href:!0});var Dbt=s(dz);Qer=r(Dbt,"Wav2Vec2ForCTC"),Dbt.forEach(t),Her=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),Uer=i(Ve),ZT=n(Ve,"LI",{});var wke=s(ZT);d_e=n(wke,"STRONG",{});var Gbt=s(d_e);Jer=r(Gbt,"wav2vec2-conformer"),Gbt.forEach(t),Yer=r(wke," \u2014 "),cz=n(wke,"A",{href:!0});var Obt=s(cz);Ker=r(Obt,"Wav2Vec2ConformerForCTC"),Obt.forEach(t),Zer=r(wke," (Wav2Vec2-Conformer model)"),wke.forEach(t),eor=i(Ve),eM=n(Ve,"LI",{});var Ake=s(eM);c_e=n(Ake,"STRONG",{});var Vbt=s(c_e);oor=r(Vbt,"wavlm"),Vbt.forEach(t),ror=r(Ake," \u2014 "),mz=n(Ake,"A",{href:!0});var Xbt=s(mz);tor=r(Xbt,"WavLMForCTC"),Xbt.forEach(t),aor=r(Ake," (WavLM model)"),Ake.forEach(t),Ve.forEach(t),nor=i(pa),oM=n(pa,"P",{});var yke=s(oM);sor=r(yke,"The model is set in evaluation mode by default using "),m_e=n(yke,"CODE",{});var zbt=s(m_e);lor=r(zbt,"model.eval()"),zbt.forEach(t),ior=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(yke,"CODE",{});var Wbt=s(f_e);dor=r(Wbt,"model.train()"),Wbt.forEach(t),yke.forEach(t),cor=i(pa),T(rM.$$.fragment,pa),pa.forEach(t),al.forEach(t),yNe=i(m),vd=n(m,"H2",{class:!0});var kDe=s(vd);tM=n(kDe,"A",{id:!0,class:!0,href:!0});var Qbt=s(tM);g_e=n(Qbt,"SPAN",{});var Hbt=s(g_e);T(T8.$$.fragment,Hbt),Hbt.forEach(t),Qbt.forEach(t),mor=i(kDe),h_e=n(kDe,"SPAN",{});var Ubt=s(h_e);gor=r(Ubt,"AutoModelForSpeechSeq2Seq"),Ubt.forEach(t),kDe.forEach(t),LNe=i(m),Xo=n(m,"DIV",{class:!0});var nl=s(Xo);T(M8.$$.fragment,nl),hor=i(nl),Fd=n(nl,"P",{});var jZ=s(Fd);uor=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fz=n(jZ,"A",{href:!0});var Jbt=s(fz);por=r(Jbt,"from_pretrained()"),Jbt.forEach(t),_or=r(jZ," class method or the "),gz=n(jZ,"A",{href:!0});var Ybt=s(gz);bor=r(Ybt,"from_config()"),Ybt.forEach(t),vor=r(jZ,` class
method.`),jZ.forEach(t),For=i(nl),E8=n(nl,"P",{});var SDe=s(E8);Tor=r(SDe,"This class cannot be instantiated directly using "),u_e=n(SDe,"CODE",{});var Kbt=s(u_e);Mor=r(Kbt,"__init__()"),Kbt.forEach(t),Eor=r(SDe," (throws an error)."),SDe.forEach(t),Cor=i(nl),Ft=n(nl,"DIV",{class:!0});var n6=s(Ft);T(C8.$$.fragment,n6),wor=i(n6),p_e=n(n6,"P",{});var Zbt=s(p_e);Aor=r(Zbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zbt.forEach(t),yor=i(n6),Td=n(n6,"P",{});var DZ=s(Td);Lor=r(DZ,`Note:
Loading a model from its configuration file does `),__e=n(DZ,"STRONG",{});var e2t=s(__e);xor=r(e2t,"not"),e2t.forEach(t),$or=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(DZ,"A",{href:!0});var o2t=s(hz);kor=r(o2t,"from_pretrained()"),o2t.forEach(t),Sor=r(DZ," to load the model weights."),DZ.forEach(t),Ror=i(n6),T(aM.$$.fragment,n6),n6.forEach(t),Por=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(w8.$$.fragment,_a),Bor=i(_a),b_e=n(_a,"P",{});var r2t=s(b_e);Ior=r(r2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),r2t.forEach(t),qor=i(_a),Xa=n(_a,"P",{});var s6=s(Xa);Nor=r(s6,"The model class to instantiate is selected based on the "),v_e=n(s6,"CODE",{});var t2t=s(v_e);jor=r(t2t,"model_type"),t2t.forEach(t),Dor=r(s6,` property of the config object (either
passed as an argument or loaded from `),F_e=n(s6,"CODE",{});var a2t=s(F_e);Gor=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),Oor=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(s6,"CODE",{});var n2t=s(T_e);Vor=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),Xor=r(s6,":"),s6.forEach(t),zor=i(_a),A8=n(_a,"UL",{});var RDe=s(A8);nM=n(RDe,"LI",{});var Lke=s(nM);M_e=n(Lke,"STRONG",{});var s2t=s(M_e);Wor=r(s2t,"speech-encoder-decoder"),s2t.forEach(t),Qor=r(Lke," \u2014 "),uz=n(Lke,"A",{href:!0});var l2t=s(uz);Hor=r(l2t,"SpeechEncoderDecoderModel"),l2t.forEach(t),Uor=r(Lke," (Speech Encoder decoder model)"),Lke.forEach(t),Jor=i(RDe),sM=n(RDe,"LI",{});var xke=s(sM);E_e=n(xke,"STRONG",{});var i2t=s(E_e);Yor=r(i2t,"speech_to_text"),i2t.forEach(t),Kor=r(xke," \u2014 "),pz=n(xke,"A",{href:!0});var d2t=s(pz);Zor=r(d2t,"Speech2TextForConditionalGeneration"),d2t.forEach(t),err=r(xke," (Speech2Text model)"),xke.forEach(t),RDe.forEach(t),orr=i(_a),lM=n(_a,"P",{});var $ke=s(lM);rrr=r($ke,"The model is set in evaluation mode by default using "),C_e=n($ke,"CODE",{});var c2t=s(C_e);trr=r(c2t,"model.eval()"),c2t.forEach(t),arr=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n($ke,"CODE",{});var m2t=s(w_e);nrr=r(m2t,"model.train()"),m2t.forEach(t),$ke.forEach(t),srr=i(_a),T(iM.$$.fragment,_a),_a.forEach(t),nl.forEach(t),xNe=i(m),Md=n(m,"H2",{class:!0});var PDe=s(Md);dM=n(PDe,"A",{id:!0,class:!0,href:!0});var f2t=s(dM);A_e=n(f2t,"SPAN",{});var g2t=s(A_e);T(y8.$$.fragment,g2t),g2t.forEach(t),f2t.forEach(t),lrr=i(PDe),y_e=n(PDe,"SPAN",{});var h2t=s(y_e);irr=r(h2t,"AutoModelForAudioXVector"),h2t.forEach(t),PDe.forEach(t),$Ne=i(m),zo=n(m,"DIV",{class:!0});var sl=s(zo);T(L8.$$.fragment,sl),drr=i(sl),Ed=n(sl,"P",{});var GZ=s(Ed);crr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_z=n(GZ,"A",{href:!0});var u2t=s(_z);mrr=r(u2t,"from_pretrained()"),u2t.forEach(t),frr=r(GZ," class method or the "),bz=n(GZ,"A",{href:!0});var p2t=s(bz);grr=r(p2t,"from_config()"),p2t.forEach(t),hrr=r(GZ,` class
method.`),GZ.forEach(t),urr=i(sl),x8=n(sl,"P",{});var BDe=s(x8);prr=r(BDe,"This class cannot be instantiated directly using "),L_e=n(BDe,"CODE",{});var _2t=s(L_e);_rr=r(_2t,"__init__()"),_2t.forEach(t),brr=r(BDe," (throws an error)."),BDe.forEach(t),vrr=i(sl),Tt=n(sl,"DIV",{class:!0});var l6=s(Tt);T($8.$$.fragment,l6),Frr=i(l6),x_e=n(l6,"P",{});var b2t=s(x_e);Trr=r(b2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),b2t.forEach(t),Mrr=i(l6),Cd=n(l6,"P",{});var OZ=s(Cd);Err=r(OZ,`Note:
Loading a model from its configuration file does `),$_e=n(OZ,"STRONG",{});var v2t=s($_e);Crr=r(v2t,"not"),v2t.forEach(t),wrr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(OZ,"A",{href:!0});var F2t=s(vz);Arr=r(F2t,"from_pretrained()"),F2t.forEach(t),yrr=r(OZ," to load the model weights."),OZ.forEach(t),Lrr=i(l6),T(cM.$$.fragment,l6),l6.forEach(t),xrr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(k8.$$.fragment,ba),$rr=i(ba),k_e=n(ba,"P",{});var T2t=s(k_e);krr=r(T2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),T2t.forEach(t),Srr=i(ba),za=n(ba,"P",{});var i6=s(za);Rrr=r(i6,"The model class to instantiate is selected based on the "),S_e=n(i6,"CODE",{});var M2t=s(S_e);Prr=r(M2t,"model_type"),M2t.forEach(t),Brr=r(i6,` property of the config object (either
passed as an argument or loaded from `),R_e=n(i6,"CODE",{});var E2t=s(R_e);Irr=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),qrr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=n(i6,"CODE",{});var C2t=s(P_e);Nrr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),jrr=r(i6,":"),i6.forEach(t),Drr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);mM=n(ll,"LI",{});var kke=s(mM);B_e=n(kke,"STRONG",{});var w2t=s(B_e);Grr=r(w2t,"data2vec-audio"),w2t.forEach(t),Orr=r(kke," \u2014 "),Fz=n(kke,"A",{href:!0});var A2t=s(Fz);Vrr=r(A2t,"Data2VecAudioForXVector"),A2t.forEach(t),Xrr=r(kke," (Data2VecAudio model)"),kke.forEach(t),zrr=i(ll),fM=n(ll,"LI",{});var Ske=s(fM);I_e=n(Ske,"STRONG",{});var y2t=s(I_e);Wrr=r(y2t,"unispeech-sat"),y2t.forEach(t),Qrr=r(Ske," \u2014 "),Tz=n(Ske,"A",{href:!0});var L2t=s(Tz);Hrr=r(L2t,"UniSpeechSatForXVector"),L2t.forEach(t),Urr=r(Ske," (UniSpeechSat model)"),Ske.forEach(t),Jrr=i(ll),gM=n(ll,"LI",{});var Rke=s(gM);q_e=n(Rke,"STRONG",{});var x2t=s(q_e);Yrr=r(x2t,"wav2vec2"),x2t.forEach(t),Krr=r(Rke," \u2014 "),Mz=n(Rke,"A",{href:!0});var $2t=s(Mz);Zrr=r($2t,"Wav2Vec2ForXVector"),$2t.forEach(t),etr=r(Rke," (Wav2Vec2 model)"),Rke.forEach(t),otr=i(ll),hM=n(ll,"LI",{});var Pke=s(hM);N_e=n(Pke,"STRONG",{});var k2t=s(N_e);rtr=r(k2t,"wav2vec2-conformer"),k2t.forEach(t),ttr=r(Pke," \u2014 "),Ez=n(Pke,"A",{href:!0});var S2t=s(Ez);atr=r(S2t,"Wav2Vec2ConformerForXVector"),S2t.forEach(t),ntr=r(Pke," (Wav2Vec2-Conformer model)"),Pke.forEach(t),str=i(ll),uM=n(ll,"LI",{});var Bke=s(uM);j_e=n(Bke,"STRONG",{});var R2t=s(j_e);ltr=r(R2t,"wavlm"),R2t.forEach(t),itr=r(Bke," \u2014 "),Cz=n(Bke,"A",{href:!0});var P2t=s(Cz);dtr=r(P2t,"WavLMForXVector"),P2t.forEach(t),ctr=r(Bke," (WavLM model)"),Bke.forEach(t),ll.forEach(t),mtr=i(ba),pM=n(ba,"P",{});var Ike=s(pM);ftr=r(Ike,"The model is set in evaluation mode by default using "),D_e=n(Ike,"CODE",{});var B2t=s(D_e);gtr=r(B2t,"model.eval()"),B2t.forEach(t),htr=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(Ike,"CODE",{});var I2t=s(G_e);utr=r(I2t,"model.train()"),I2t.forEach(t),Ike.forEach(t),ptr=i(ba),T(_M.$$.fragment,ba),ba.forEach(t),sl.forEach(t),kNe=i(m),wd=n(m,"H2",{class:!0});var IDe=s(wd);bM=n(IDe,"A",{id:!0,class:!0,href:!0});var q2t=s(bM);O_e=n(q2t,"SPAN",{});var N2t=s(O_e);T(S8.$$.fragment,N2t),N2t.forEach(t),q2t.forEach(t),_tr=i(IDe),V_e=n(IDe,"SPAN",{});var j2t=s(V_e);btr=r(j2t,"AutoModelForMaskedImageModeling"),j2t.forEach(t),IDe.forEach(t),SNe=i(m),Wo=n(m,"DIV",{class:!0});var il=s(Wo);T(R8.$$.fragment,il),vtr=i(il),Ad=n(il,"P",{});var VZ=s(Ad);Ftr=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wz=n(VZ,"A",{href:!0});var D2t=s(wz);Ttr=r(D2t,"from_pretrained()"),D2t.forEach(t),Mtr=r(VZ," class method or the "),Az=n(VZ,"A",{href:!0});var G2t=s(Az);Etr=r(G2t,"from_config()"),G2t.forEach(t),Ctr=r(VZ,` class
method.`),VZ.forEach(t),wtr=i(il),P8=n(il,"P",{});var qDe=s(P8);Atr=r(qDe,"This class cannot be instantiated directly using "),X_e=n(qDe,"CODE",{});var O2t=s(X_e);ytr=r(O2t,"__init__()"),O2t.forEach(t),Ltr=r(qDe," (throws an error)."),qDe.forEach(t),xtr=i(il),Mt=n(il,"DIV",{class:!0});var d6=s(Mt);T(B8.$$.fragment,d6),$tr=i(d6),z_e=n(d6,"P",{});var V2t=s(z_e);ktr=r(V2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),V2t.forEach(t),Str=i(d6),yd=n(d6,"P",{});var XZ=s(yd);Rtr=r(XZ,`Note:
Loading a model from its configuration file does `),W_e=n(XZ,"STRONG",{});var X2t=s(W_e);Ptr=r(X2t,"not"),X2t.forEach(t),Btr=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(XZ,"A",{href:!0});var z2t=s(yz);Itr=r(z2t,"from_pretrained()"),z2t.forEach(t),qtr=r(XZ," to load the model weights."),XZ.forEach(t),Ntr=i(d6),T(vM.$$.fragment,d6),d6.forEach(t),jtr=i(il),uo=n(il,"DIV",{class:!0});var va=s(uo);T(I8.$$.fragment,va),Dtr=i(va),Q_e=n(va,"P",{});var W2t=s(Q_e);Gtr=r(W2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),W2t.forEach(t),Otr=i(va),Wa=n(va,"P",{});var c6=s(Wa);Vtr=r(c6,"The model class to instantiate is selected based on the "),H_e=n(c6,"CODE",{});var Q2t=s(H_e);Xtr=r(Q2t,"model_type"),Q2t.forEach(t),ztr=r(c6,` property of the config object (either
passed as an argument or loaded from `),U_e=n(c6,"CODE",{});var H2t=s(U_e);Wtr=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),Qtr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(c6,"CODE",{});var U2t=s(J_e);Htr=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),Utr=r(c6,":"),c6.forEach(t),Jtr=i(va),Ld=n(va,"UL",{});var zZ=s(Ld);FM=n(zZ,"LI",{});var qke=s(FM);Y_e=n(qke,"STRONG",{});var J2t=s(Y_e);Ytr=r(J2t,"deit"),J2t.forEach(t),Ktr=r(qke," \u2014 "),Lz=n(qke,"A",{href:!0});var Y2t=s(Lz);Ztr=r(Y2t,"DeiTForMaskedImageModeling"),Y2t.forEach(t),ear=r(qke," (DeiT model)"),qke.forEach(t),oar=i(zZ),TM=n(zZ,"LI",{});var Nke=s(TM);K_e=n(Nke,"STRONG",{});var K2t=s(K_e);rar=r(K2t,"swin"),K2t.forEach(t),tar=r(Nke," \u2014 "),xz=n(Nke,"A",{href:!0});var Z2t=s(xz);aar=r(Z2t,"SwinForMaskedImageModeling"),Z2t.forEach(t),nar=r(Nke," (Swin model)"),Nke.forEach(t),sar=i(zZ),MM=n(zZ,"LI",{});var jke=s(MM);Z_e=n(jke,"STRONG",{});var evt=s(Z_e);lar=r(evt,"vit"),evt.forEach(t),iar=r(jke," \u2014 "),$z=n(jke,"A",{href:!0});var ovt=s($z);dar=r(ovt,"ViTForMaskedImageModeling"),ovt.forEach(t),car=r(jke," (ViT model)"),jke.forEach(t),zZ.forEach(t),mar=i(va),EM=n(va,"P",{});var Dke=s(EM);far=r(Dke,"The model is set in evaluation mode by default using "),ebe=n(Dke,"CODE",{});var rvt=s(ebe);gar=r(rvt,"model.eval()"),rvt.forEach(t),har=r(Dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(Dke,"CODE",{});var tvt=s(obe);uar=r(tvt,"model.train()"),tvt.forEach(t),Dke.forEach(t),par=i(va),T(CM.$$.fragment,va),va.forEach(t),il.forEach(t),RNe=i(m),xd=n(m,"H2",{class:!0});var NDe=s(xd);wM=n(NDe,"A",{id:!0,class:!0,href:!0});var avt=s(wM);rbe=n(avt,"SPAN",{});var nvt=s(rbe);T(q8.$$.fragment,nvt),nvt.forEach(t),avt.forEach(t),_ar=i(NDe),tbe=n(NDe,"SPAN",{});var svt=s(tbe);bar=r(svt,"AutoModelForObjectDetection"),svt.forEach(t),NDe.forEach(t),PNe=i(m),Qo=n(m,"DIV",{class:!0});var dl=s(Qo);T(N8.$$.fragment,dl),Far=i(dl),$d=n(dl,"P",{});var WZ=s($d);Tar=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kz=n(WZ,"A",{href:!0});var lvt=s(kz);Mar=r(lvt,"from_pretrained()"),lvt.forEach(t),Ear=r(WZ," class method or the "),Sz=n(WZ,"A",{href:!0});var ivt=s(Sz);Car=r(ivt,"from_config()"),ivt.forEach(t),war=r(WZ,` class
method.`),WZ.forEach(t),Aar=i(dl),j8=n(dl,"P",{});var jDe=s(j8);yar=r(jDe,"This class cannot be instantiated directly using "),abe=n(jDe,"CODE",{});var dvt=s(abe);Lar=r(dvt,"__init__()"),dvt.forEach(t),xar=r(jDe," (throws an error)."),jDe.forEach(t),$ar=i(dl),Et=n(dl,"DIV",{class:!0});var m6=s(Et);T(D8.$$.fragment,m6),kar=i(m6),nbe=n(m6,"P",{});var cvt=s(nbe);Sar=r(cvt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cvt.forEach(t),Rar=i(m6),kd=n(m6,"P",{});var QZ=s(kd);Par=r(QZ,`Note:
Loading a model from its configuration file does `),sbe=n(QZ,"STRONG",{});var mvt=s(sbe);Bar=r(mvt,"not"),mvt.forEach(t),Iar=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(QZ,"A",{href:!0});var fvt=s(Rz);qar=r(fvt,"from_pretrained()"),fvt.forEach(t),Nar=r(QZ," to load the model weights."),QZ.forEach(t),jar=i(m6),T(AM.$$.fragment,m6),m6.forEach(t),Dar=i(dl),po=n(dl,"DIV",{class:!0});var Fa=s(po);T(G8.$$.fragment,Fa),Gar=i(Fa),lbe=n(Fa,"P",{});var gvt=s(lbe);Oar=r(gvt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gvt.forEach(t),Var=i(Fa),Qa=n(Fa,"P",{});var f6=s(Qa);Xar=r(f6,"The model class to instantiate is selected based on the "),ibe=n(f6,"CODE",{});var hvt=s(ibe);zar=r(hvt,"model_type"),hvt.forEach(t),War=r(f6,` property of the config object (either
passed as an argument or loaded from `),dbe=n(f6,"CODE",{});var uvt=s(dbe);Qar=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),Har=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(f6,"CODE",{});var pvt=s(cbe);Uar=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),Jar=r(f6,":"),f6.forEach(t),Yar=i(Fa),O8=n(Fa,"UL",{});var DDe=s(O8);yM=n(DDe,"LI",{});var Gke=s(yM);mbe=n(Gke,"STRONG",{});var _vt=s(mbe);Kar=r(_vt,"detr"),_vt.forEach(t),Zar=r(Gke," \u2014 "),Pz=n(Gke,"A",{href:!0});var bvt=s(Pz);enr=r(bvt,"DetrForObjectDetection"),bvt.forEach(t),onr=r(Gke," (DETR model)"),Gke.forEach(t),rnr=i(DDe),LM=n(DDe,"LI",{});var Oke=s(LM);fbe=n(Oke,"STRONG",{});var vvt=s(fbe);tnr=r(vvt,"yolos"),vvt.forEach(t),anr=r(Oke," \u2014 "),Bz=n(Oke,"A",{href:!0});var Fvt=s(Bz);nnr=r(Fvt,"YolosForObjectDetection"),Fvt.forEach(t),snr=r(Oke," (YOLOS model)"),Oke.forEach(t),DDe.forEach(t),lnr=i(Fa),xM=n(Fa,"P",{});var Vke=s(xM);inr=r(Vke,"The model is set in evaluation mode by default using "),gbe=n(Vke,"CODE",{});var Tvt=s(gbe);dnr=r(Tvt,"model.eval()"),Tvt.forEach(t),cnr=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=n(Vke,"CODE",{});var Mvt=s(hbe);mnr=r(Mvt,"model.train()"),Mvt.forEach(t),Vke.forEach(t),fnr=i(Fa),T($M.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),BNe=i(m),Sd=n(m,"H2",{class:!0});var GDe=s(Sd);kM=n(GDe,"A",{id:!0,class:!0,href:!0});var Evt=s(kM);ube=n(Evt,"SPAN",{});var Cvt=s(ube);T(V8.$$.fragment,Cvt),Cvt.forEach(t),Evt.forEach(t),gnr=i(GDe),pbe=n(GDe,"SPAN",{});var wvt=s(pbe);hnr=r(wvt,"AutoModelForImageSegmentation"),wvt.forEach(t),GDe.forEach(t),INe=i(m),Ho=n(m,"DIV",{class:!0});var cl=s(Ho);T(X8.$$.fragment,cl),unr=i(cl),Rd=n(cl,"P",{});var HZ=s(Rd);pnr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Iz=n(HZ,"A",{href:!0});var Avt=s(Iz);_nr=r(Avt,"from_pretrained()"),Avt.forEach(t),bnr=r(HZ," class method or the "),qz=n(HZ,"A",{href:!0});var yvt=s(qz);vnr=r(yvt,"from_config()"),yvt.forEach(t),Fnr=r(HZ,` class
method.`),HZ.forEach(t),Tnr=i(cl),z8=n(cl,"P",{});var ODe=s(z8);Mnr=r(ODe,"This class cannot be instantiated directly using "),_be=n(ODe,"CODE",{});var Lvt=s(_be);Enr=r(Lvt,"__init__()"),Lvt.forEach(t),Cnr=r(ODe," (throws an error)."),ODe.forEach(t),wnr=i(cl),Ct=n(cl,"DIV",{class:!0});var g6=s(Ct);T(W8.$$.fragment,g6),Anr=i(g6),bbe=n(g6,"P",{});var xvt=s(bbe);ynr=r(xvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xvt.forEach(t),Lnr=i(g6),Pd=n(g6,"P",{});var UZ=s(Pd);xnr=r(UZ,`Note:
Loading a model from its configuration file does `),vbe=n(UZ,"STRONG",{});var $vt=s(vbe);$nr=r($vt,"not"),$vt.forEach(t),knr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(UZ,"A",{href:!0});var kvt=s(Nz);Snr=r(kvt,"from_pretrained()"),kvt.forEach(t),Rnr=r(UZ," to load the model weights."),UZ.forEach(t),Pnr=i(g6),T(SM.$$.fragment,g6),g6.forEach(t),Bnr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(Q8.$$.fragment,Ta),Inr=i(Ta),Fbe=n(Ta,"P",{});var Svt=s(Fbe);qnr=r(Svt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Svt.forEach(t),Nnr=i(Ta),Ha=n(Ta,"P",{});var h6=s(Ha);jnr=r(h6,"The model class to instantiate is selected based on the "),Tbe=n(h6,"CODE",{});var Rvt=s(Tbe);Dnr=r(Rvt,"model_type"),Rvt.forEach(t),Gnr=r(h6,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(h6,"CODE",{});var Pvt=s(Mbe);Onr=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),Vnr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(h6,"CODE",{});var Bvt=s(Ebe);Xnr=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),znr=r(h6,":"),h6.forEach(t),Wnr=i(Ta),Cbe=n(Ta,"UL",{});var Ivt=s(Cbe);RM=n(Ivt,"LI",{});var Xke=s(RM);wbe=n(Xke,"STRONG",{});var qvt=s(wbe);Qnr=r(qvt,"detr"),qvt.forEach(t),Hnr=r(Xke," \u2014 "),jz=n(Xke,"A",{href:!0});var Nvt=s(jz);Unr=r(Nvt,"DetrForSegmentation"),Nvt.forEach(t),Jnr=r(Xke," (DETR model)"),Xke.forEach(t),Ivt.forEach(t),Ynr=i(Ta),PM=n(Ta,"P",{});var zke=s(PM);Knr=r(zke,"The model is set in evaluation mode by default using "),Abe=n(zke,"CODE",{});var jvt=s(Abe);Znr=r(jvt,"model.eval()"),jvt.forEach(t),esr=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=n(zke,"CODE",{});var Dvt=s(ybe);osr=r(Dvt,"model.train()"),Dvt.forEach(t),zke.forEach(t),rsr=i(Ta),T(BM.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),qNe=i(m),Bd=n(m,"H2",{class:!0});var VDe=s(Bd);IM=n(VDe,"A",{id:!0,class:!0,href:!0});var Gvt=s(IM);Lbe=n(Gvt,"SPAN",{});var Ovt=s(Lbe);T(H8.$$.fragment,Ovt),Ovt.forEach(t),Gvt.forEach(t),tsr=i(VDe),xbe=n(VDe,"SPAN",{});var Vvt=s(xbe);asr=r(Vvt,"AutoModelForSemanticSegmentation"),Vvt.forEach(t),VDe.forEach(t),NNe=i(m),Uo=n(m,"DIV",{class:!0});var ml=s(Uo);T(U8.$$.fragment,ml),nsr=i(ml),Id=n(ml,"P",{});var JZ=s(Id);ssr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Dz=n(JZ,"A",{href:!0});var Xvt=s(Dz);lsr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),isr=r(JZ," class method or the "),Gz=n(JZ,"A",{href:!0});var zvt=s(Gz);dsr=r(zvt,"from_config()"),zvt.forEach(t),csr=r(JZ,` class
method.`),JZ.forEach(t),msr=i(ml),J8=n(ml,"P",{});var XDe=s(J8);fsr=r(XDe,"This class cannot be instantiated directly using "),$be=n(XDe,"CODE",{});var Wvt=s($be);gsr=r(Wvt,"__init__()"),Wvt.forEach(t),hsr=r(XDe," (throws an error)."),XDe.forEach(t),usr=i(ml),wt=n(ml,"DIV",{class:!0});var u6=s(wt);T(Y8.$$.fragment,u6),psr=i(u6),kbe=n(u6,"P",{});var Qvt=s(kbe);_sr=r(Qvt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qvt.forEach(t),bsr=i(u6),qd=n(u6,"P",{});var YZ=s(qd);vsr=r(YZ,`Note:
Loading a model from its configuration file does `),Sbe=n(YZ,"STRONG",{});var Hvt=s(Sbe);Fsr=r(Hvt,"not"),Hvt.forEach(t),Tsr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(YZ,"A",{href:!0});var Uvt=s(Oz);Msr=r(Uvt,"from_pretrained()"),Uvt.forEach(t),Esr=r(YZ," to load the model weights."),YZ.forEach(t),Csr=i(u6),T(qM.$$.fragment,u6),u6.forEach(t),wsr=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(K8.$$.fragment,Ma),Asr=i(Ma),Rbe=n(Ma,"P",{});var Jvt=s(Rbe);ysr=r(Jvt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jvt.forEach(t),Lsr=i(Ma),Ua=n(Ma,"P",{});var p6=s(Ua);xsr=r(p6,"The model class to instantiate is selected based on the "),Pbe=n(p6,"CODE",{});var Yvt=s(Pbe);$sr=r(Yvt,"model_type"),Yvt.forEach(t),ksr=r(p6,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(p6,"CODE",{});var Kvt=s(Bbe);Ssr=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),Rsr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(p6,"CODE",{});var Zvt=s(Ibe);Psr=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),Bsr=r(p6,":"),p6.forEach(t),Isr=i(Ma),Ja=n(Ma,"UL",{});var _6=s(Ja);NM=n(_6,"LI",{});var Wke=s(NM);qbe=n(Wke,"STRONG",{});var eFt=s(qbe);qsr=r(eFt,"beit"),eFt.forEach(t),Nsr=r(Wke," \u2014 "),Vz=n(Wke,"A",{href:!0});var oFt=s(Vz);jsr=r(oFt,"BeitForSemanticSegmentation"),oFt.forEach(t),Dsr=r(Wke," (BEiT model)"),Wke.forEach(t),Gsr=i(_6),jM=n(_6,"LI",{});var Qke=s(jM);Nbe=n(Qke,"STRONG",{});var rFt=s(Nbe);Osr=r(rFt,"data2vec-vision"),rFt.forEach(t),Vsr=r(Qke," \u2014 "),Xz=n(Qke,"A",{href:!0});var tFt=s(Xz);Xsr=r(tFt,"Data2VecVisionForSemanticSegmentation"),tFt.forEach(t),zsr=r(Qke," (Data2VecVision model)"),Qke.forEach(t),Wsr=i(_6),DM=n(_6,"LI",{});var Hke=s(DM);jbe=n(Hke,"STRONG",{});var aFt=s(jbe);Qsr=r(aFt,"dpt"),aFt.forEach(t),Hsr=r(Hke," \u2014 "),zz=n(Hke,"A",{href:!0});var nFt=s(zz);Usr=r(nFt,"DPTForSemanticSegmentation"),nFt.forEach(t),Jsr=r(Hke," (DPT model)"),Hke.forEach(t),Ysr=i(_6),GM=n(_6,"LI",{});var Uke=s(GM);Dbe=n(Uke,"STRONG",{});var sFt=s(Dbe);Ksr=r(sFt,"segformer"),sFt.forEach(t),Zsr=r(Uke," \u2014 "),Wz=n(Uke,"A",{href:!0});var lFt=s(Wz);elr=r(lFt,"SegformerForSemanticSegmentation"),lFt.forEach(t),olr=r(Uke," (SegFormer model)"),Uke.forEach(t),_6.forEach(t),rlr=i(Ma),OM=n(Ma,"P",{});var Jke=s(OM);tlr=r(Jke,"The model is set in evaluation mode by default using "),Gbe=n(Jke,"CODE",{});var iFt=s(Gbe);alr=r(iFt,"model.eval()"),iFt.forEach(t),nlr=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=n(Jke,"CODE",{});var dFt=s(Obe);slr=r(dFt,"model.train()"),dFt.forEach(t),Jke.forEach(t),llr=i(Ma),T(VM.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),jNe=i(m),Nd=n(m,"H2",{class:!0});var zDe=s(Nd);XM=n(zDe,"A",{id:!0,class:!0,href:!0});var cFt=s(XM);Vbe=n(cFt,"SPAN",{});var mFt=s(Vbe);T(Z8.$$.fragment,mFt),mFt.forEach(t),cFt.forEach(t),ilr=i(zDe),Xbe=n(zDe,"SPAN",{});var fFt=s(Xbe);dlr=r(fFt,"AutoModelForInstanceSegmentation"),fFt.forEach(t),zDe.forEach(t),DNe=i(m),Jo=n(m,"DIV",{class:!0});var fl=s(Jo);T(e7.$$.fragment,fl),clr=i(fl),jd=n(fl,"P",{});var KZ=s(jd);mlr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Qz=n(KZ,"A",{href:!0});var gFt=s(Qz);flr=r(gFt,"from_pretrained()"),gFt.forEach(t),glr=r(KZ," class method or the "),Hz=n(KZ,"A",{href:!0});var hFt=s(Hz);hlr=r(hFt,"from_config()"),hFt.forEach(t),ulr=r(KZ,` class
method.`),KZ.forEach(t),plr=i(fl),o7=n(fl,"P",{});var WDe=s(o7);_lr=r(WDe,"This class cannot be instantiated directly using "),zbe=n(WDe,"CODE",{});var uFt=s(zbe);blr=r(uFt,"__init__()"),uFt.forEach(t),vlr=r(WDe," (throws an error)."),WDe.forEach(t),Flr=i(fl),At=n(fl,"DIV",{class:!0});var b6=s(At);T(r7.$$.fragment,b6),Tlr=i(b6),Wbe=n(b6,"P",{});var pFt=s(Wbe);Mlr=r(pFt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pFt.forEach(t),Elr=i(b6),Dd=n(b6,"P",{});var ZZ=s(Dd);Clr=r(ZZ,`Note:
Loading a model from its configuration file does `),Qbe=n(ZZ,"STRONG",{});var _Ft=s(Qbe);wlr=r(_Ft,"not"),_Ft.forEach(t),Alr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(ZZ,"A",{href:!0});var bFt=s(Uz);ylr=r(bFt,"from_pretrained()"),bFt.forEach(t),Llr=r(ZZ," to load the model weights."),ZZ.forEach(t),xlr=i(b6),T(zM.$$.fragment,b6),b6.forEach(t),$lr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(t7.$$.fragment,Ea),klr=i(Ea),Hbe=n(Ea,"P",{});var vFt=s(Hbe);Slr=r(vFt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),vFt.forEach(t),Rlr=i(Ea),Ya=n(Ea,"P",{});var v6=s(Ya);Plr=r(v6,"The model class to instantiate is selected based on the "),Ube=n(v6,"CODE",{});var FFt=s(Ube);Blr=r(FFt,"model_type"),FFt.forEach(t),Ilr=r(v6,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(v6,"CODE",{});var TFt=s(Jbe);qlr=r(TFt,"pretrained_model_name_or_path"),TFt.forEach(t),Nlr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(v6,"CODE",{});var MFt=s(Ybe);jlr=r(MFt,"pretrained_model_name_or_path"),MFt.forEach(t),Dlr=r(v6,":"),v6.forEach(t),Glr=i(Ea),Kbe=n(Ea,"UL",{});var EFt=s(Kbe);WM=n(EFt,"LI",{});var Yke=s(WM);Zbe=n(Yke,"STRONG",{});var CFt=s(Zbe);Olr=r(CFt,"maskformer"),CFt.forEach(t),Vlr=r(Yke," \u2014 "),Jz=n(Yke,"A",{href:!0});var wFt=s(Jz);Xlr=r(wFt,"MaskFormerForInstanceSegmentation"),wFt.forEach(t),zlr=r(Yke," (MaskFormer model)"),Yke.forEach(t),EFt.forEach(t),Wlr=i(Ea),QM=n(Ea,"P",{});var Kke=s(QM);Qlr=r(Kke,"The model is set in evaluation mode by default using "),e2e=n(Kke,"CODE",{});var AFt=s(e2e);Hlr=r(AFt,"model.eval()"),AFt.forEach(t),Ulr=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=n(Kke,"CODE",{});var yFt=s(o2e);Jlr=r(yFt,"model.train()"),yFt.forEach(t),Kke.forEach(t),Ylr=i(Ea),T(HM.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),GNe=i(m),Gd=n(m,"H2",{class:!0});var QDe=s(Gd);UM=n(QDe,"A",{id:!0,class:!0,href:!0});var LFt=s(UM);r2e=n(LFt,"SPAN",{});var xFt=s(r2e);T(a7.$$.fragment,xFt),xFt.forEach(t),LFt.forEach(t),Klr=i(QDe),t2e=n(QDe,"SPAN",{});var $Ft=s(t2e);Zlr=r($Ft,"TFAutoModel"),$Ft.forEach(t),QDe.forEach(t),ONe=i(m),Yo=n(m,"DIV",{class:!0});var gl=s(Yo);T(n7.$$.fragment,gl),eir=i(gl),Od=n(gl,"P",{});var eee=s(Od);oir=r(eee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yz=n(eee,"A",{href:!0});var kFt=s(Yz);rir=r(kFt,"from_pretrained()"),kFt.forEach(t),tir=r(eee," class method or the "),Kz=n(eee,"A",{href:!0});var SFt=s(Kz);air=r(SFt,"from_config()"),SFt.forEach(t),nir=r(eee,` class
method.`),eee.forEach(t),sir=i(gl),s7=n(gl,"P",{});var HDe=s(s7);lir=r(HDe,"This class cannot be instantiated directly using "),a2e=n(HDe,"CODE",{});var RFt=s(a2e);iir=r(RFt,"__init__()"),RFt.forEach(t),dir=r(HDe," (throws an error)."),HDe.forEach(t),cir=i(gl),yt=n(gl,"DIV",{class:!0});var F6=s(yt);T(l7.$$.fragment,F6),mir=i(F6),n2e=n(F6,"P",{});var PFt=s(n2e);fir=r(PFt,"Instantiates one of the base model classes of the library from a configuration."),PFt.forEach(t),gir=i(F6),Vd=n(F6,"P",{});var oee=s(Vd);hir=r(oee,`Note:
Loading a model from its configuration file does `),s2e=n(oee,"STRONG",{});var BFt=s(s2e);uir=r(BFt,"not"),BFt.forEach(t),pir=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(oee,"A",{href:!0});var IFt=s(Zz);_ir=r(IFt,"from_pretrained()"),IFt.forEach(t),bir=r(oee," to load the model weights."),oee.forEach(t),vir=i(F6),T(JM.$$.fragment,F6),F6.forEach(t),Fir=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(i7.$$.fragment,hl),Tir=i(hl),l2e=n(hl,"P",{});var qFt=s(l2e);Mir=r(qFt,"Instantiate one of the base model classes of the library from a pretrained model."),qFt.forEach(t),Eir=i(hl),Ka=n(hl,"P",{});var T6=s(Ka);Cir=r(T6,"The model class to instantiate is selected based on the "),i2e=n(T6,"CODE",{});var NFt=s(i2e);wir=r(NFt,"model_type"),NFt.forEach(t),Air=r(T6,` property of the config object (either
passed as an argument or loaded from `),d2e=n(T6,"CODE",{});var jFt=s(d2e);yir=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),Lir=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(T6,"CODE",{});var DFt=s(c2e);xir=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),$ir=r(T6,":"),T6.forEach(t),kir=i(hl),N=n(hl,"UL",{});var D=s(N);YM=n(D,"LI",{});var Zke=s(YM);m2e=n(Zke,"STRONG",{});var GFt=s(m2e);Sir=r(GFt,"albert"),GFt.forEach(t),Rir=r(Zke," \u2014 "),eW=n(Zke,"A",{href:!0});var OFt=s(eW);Pir=r(OFt,"TFAlbertModel"),OFt.forEach(t),Bir=r(Zke," (ALBERT model)"),Zke.forEach(t),Iir=i(D),KM=n(D,"LI",{});var eSe=s(KM);f2e=n(eSe,"STRONG",{});var VFt=s(f2e);qir=r(VFt,"bart"),VFt.forEach(t),Nir=r(eSe," \u2014 "),oW=n(eSe,"A",{href:!0});var XFt=s(oW);jir=r(XFt,"TFBartModel"),XFt.forEach(t),Dir=r(eSe," (BART model)"),eSe.forEach(t),Gir=i(D),ZM=n(D,"LI",{});var oSe=s(ZM);g2e=n(oSe,"STRONG",{});var zFt=s(g2e);Oir=r(zFt,"bert"),zFt.forEach(t),Vir=r(oSe," \u2014 "),rW=n(oSe,"A",{href:!0});var WFt=s(rW);Xir=r(WFt,"TFBertModel"),WFt.forEach(t),zir=r(oSe," (BERT model)"),oSe.forEach(t),Wir=i(D),e4=n(D,"LI",{});var rSe=s(e4);h2e=n(rSe,"STRONG",{});var QFt=s(h2e);Qir=r(QFt,"blenderbot"),QFt.forEach(t),Hir=r(rSe," \u2014 "),tW=n(rSe,"A",{href:!0});var HFt=s(tW);Uir=r(HFt,"TFBlenderbotModel"),HFt.forEach(t),Jir=r(rSe," (Blenderbot model)"),rSe.forEach(t),Yir=i(D),o4=n(D,"LI",{});var tSe=s(o4);u2e=n(tSe,"STRONG",{});var UFt=s(u2e);Kir=r(UFt,"blenderbot-small"),UFt.forEach(t),Zir=r(tSe," \u2014 "),aW=n(tSe,"A",{href:!0});var JFt=s(aW);edr=r(JFt,"TFBlenderbotSmallModel"),JFt.forEach(t),odr=r(tSe," (BlenderbotSmall model)"),tSe.forEach(t),rdr=i(D),r4=n(D,"LI",{});var aSe=s(r4);p2e=n(aSe,"STRONG",{});var YFt=s(p2e);tdr=r(YFt,"camembert"),YFt.forEach(t),adr=r(aSe," \u2014 "),nW=n(aSe,"A",{href:!0});var KFt=s(nW);ndr=r(KFt,"TFCamembertModel"),KFt.forEach(t),sdr=r(aSe," (CamemBERT model)"),aSe.forEach(t),ldr=i(D),t4=n(D,"LI",{});var nSe=s(t4);_2e=n(nSe,"STRONG",{});var ZFt=s(_2e);idr=r(ZFt,"clip"),ZFt.forEach(t),ddr=r(nSe," \u2014 "),sW=n(nSe,"A",{href:!0});var e1t=s(sW);cdr=r(e1t,"TFCLIPModel"),e1t.forEach(t),mdr=r(nSe," (CLIP model)"),nSe.forEach(t),fdr=i(D),a4=n(D,"LI",{});var sSe=s(a4);b2e=n(sSe,"STRONG",{});var o1t=s(b2e);gdr=r(o1t,"convbert"),o1t.forEach(t),hdr=r(sSe," \u2014 "),lW=n(sSe,"A",{href:!0});var r1t=s(lW);udr=r(r1t,"TFConvBertModel"),r1t.forEach(t),pdr=r(sSe," (ConvBERT model)"),sSe.forEach(t),_dr=i(D),n4=n(D,"LI",{});var lSe=s(n4);v2e=n(lSe,"STRONG",{});var t1t=s(v2e);bdr=r(t1t,"convnext"),t1t.forEach(t),vdr=r(lSe," \u2014 "),iW=n(lSe,"A",{href:!0});var a1t=s(iW);Fdr=r(a1t,"TFConvNextModel"),a1t.forEach(t),Tdr=r(lSe," (ConvNext model)"),lSe.forEach(t),Mdr=i(D),s4=n(D,"LI",{});var iSe=s(s4);F2e=n(iSe,"STRONG",{});var n1t=s(F2e);Edr=r(n1t,"ctrl"),n1t.forEach(t),Cdr=r(iSe," \u2014 "),dW=n(iSe,"A",{href:!0});var s1t=s(dW);wdr=r(s1t,"TFCTRLModel"),s1t.forEach(t),Adr=r(iSe," (CTRL model)"),iSe.forEach(t),ydr=i(D),l4=n(D,"LI",{});var dSe=s(l4);T2e=n(dSe,"STRONG",{});var l1t=s(T2e);Ldr=r(l1t,"data2vec-vision"),l1t.forEach(t),xdr=r(dSe," \u2014 "),cW=n(dSe,"A",{href:!0});var i1t=s(cW);$dr=r(i1t,"TFData2VecVisionModel"),i1t.forEach(t),kdr=r(dSe," (Data2VecVision model)"),dSe.forEach(t),Sdr=i(D),i4=n(D,"LI",{});var cSe=s(i4);M2e=n(cSe,"STRONG",{});var d1t=s(M2e);Rdr=r(d1t,"deberta"),d1t.forEach(t),Pdr=r(cSe," \u2014 "),mW=n(cSe,"A",{href:!0});var c1t=s(mW);Bdr=r(c1t,"TFDebertaModel"),c1t.forEach(t),Idr=r(cSe," (DeBERTa model)"),cSe.forEach(t),qdr=i(D),d4=n(D,"LI",{});var mSe=s(d4);E2e=n(mSe,"STRONG",{});var m1t=s(E2e);Ndr=r(m1t,"deberta-v2"),m1t.forEach(t),jdr=r(mSe," \u2014 "),fW=n(mSe,"A",{href:!0});var f1t=s(fW);Ddr=r(f1t,"TFDebertaV2Model"),f1t.forEach(t),Gdr=r(mSe," (DeBERTa-v2 model)"),mSe.forEach(t),Odr=i(D),c4=n(D,"LI",{});var fSe=s(c4);C2e=n(fSe,"STRONG",{});var g1t=s(C2e);Vdr=r(g1t,"distilbert"),g1t.forEach(t),Xdr=r(fSe," \u2014 "),gW=n(fSe,"A",{href:!0});var h1t=s(gW);zdr=r(h1t,"TFDistilBertModel"),h1t.forEach(t),Wdr=r(fSe," (DistilBERT model)"),fSe.forEach(t),Qdr=i(D),m4=n(D,"LI",{});var gSe=s(m4);w2e=n(gSe,"STRONG",{});var u1t=s(w2e);Hdr=r(u1t,"dpr"),u1t.forEach(t),Udr=r(gSe," \u2014 "),hW=n(gSe,"A",{href:!0});var p1t=s(hW);Jdr=r(p1t,"TFDPRQuestionEncoder"),p1t.forEach(t),Ydr=r(gSe," (DPR model)"),gSe.forEach(t),Kdr=i(D),f4=n(D,"LI",{});var hSe=s(f4);A2e=n(hSe,"STRONG",{});var _1t=s(A2e);Zdr=r(_1t,"electra"),_1t.forEach(t),ecr=r(hSe," \u2014 "),uW=n(hSe,"A",{href:!0});var b1t=s(uW);ocr=r(b1t,"TFElectraModel"),b1t.forEach(t),rcr=r(hSe," (ELECTRA model)"),hSe.forEach(t),tcr=i(D),g4=n(D,"LI",{});var uSe=s(g4);y2e=n(uSe,"STRONG",{});var v1t=s(y2e);acr=r(v1t,"flaubert"),v1t.forEach(t),ncr=r(uSe," \u2014 "),pW=n(uSe,"A",{href:!0});var F1t=s(pW);scr=r(F1t,"TFFlaubertModel"),F1t.forEach(t),lcr=r(uSe," (FlauBERT model)"),uSe.forEach(t),icr=i(D),Is=n(D,"LI",{});var D$=s(Is);L2e=n(D$,"STRONG",{});var T1t=s(L2e);dcr=r(T1t,"funnel"),T1t.forEach(t),ccr=r(D$," \u2014 "),_W=n(D$,"A",{href:!0});var M1t=s(_W);mcr=r(M1t,"TFFunnelModel"),M1t.forEach(t),fcr=r(D$," or "),bW=n(D$,"A",{href:!0});var E1t=s(bW);gcr=r(E1t,"TFFunnelBaseModel"),E1t.forEach(t),hcr=r(D$," (Funnel Transformer model)"),D$.forEach(t),ucr=i(D),h4=n(D,"LI",{});var pSe=s(h4);x2e=n(pSe,"STRONG",{});var C1t=s(x2e);pcr=r(C1t,"gpt2"),C1t.forEach(t),_cr=r(pSe," \u2014 "),vW=n(pSe,"A",{href:!0});var w1t=s(vW);bcr=r(w1t,"TFGPT2Model"),w1t.forEach(t),vcr=r(pSe," (OpenAI GPT-2 model)"),pSe.forEach(t),Fcr=i(D),u4=n(D,"LI",{});var _Se=s(u4);$2e=n(_Se,"STRONG",{});var A1t=s($2e);Tcr=r(A1t,"gptj"),A1t.forEach(t),Mcr=r(_Se," \u2014 "),FW=n(_Se,"A",{href:!0});var y1t=s(FW);Ecr=r(y1t,"TFGPTJModel"),y1t.forEach(t),Ccr=r(_Se," (GPT-J model)"),_Se.forEach(t),wcr=i(D),p4=n(D,"LI",{});var bSe=s(p4);k2e=n(bSe,"STRONG",{});var L1t=s(k2e);Acr=r(L1t,"hubert"),L1t.forEach(t),ycr=r(bSe," \u2014 "),TW=n(bSe,"A",{href:!0});var x1t=s(TW);Lcr=r(x1t,"TFHubertModel"),x1t.forEach(t),xcr=r(bSe," (Hubert model)"),bSe.forEach(t),$cr=i(D),_4=n(D,"LI",{});var vSe=s(_4);S2e=n(vSe,"STRONG",{});var $1t=s(S2e);kcr=r($1t,"layoutlm"),$1t.forEach(t),Scr=r(vSe," \u2014 "),MW=n(vSe,"A",{href:!0});var k1t=s(MW);Rcr=r(k1t,"TFLayoutLMModel"),k1t.forEach(t),Pcr=r(vSe," (LayoutLM model)"),vSe.forEach(t),Bcr=i(D),b4=n(D,"LI",{});var FSe=s(b4);R2e=n(FSe,"STRONG",{});var S1t=s(R2e);Icr=r(S1t,"led"),S1t.forEach(t),qcr=r(FSe," \u2014 "),EW=n(FSe,"A",{href:!0});var R1t=s(EW);Ncr=r(R1t,"TFLEDModel"),R1t.forEach(t),jcr=r(FSe," (LED model)"),FSe.forEach(t),Dcr=i(D),v4=n(D,"LI",{});var TSe=s(v4);P2e=n(TSe,"STRONG",{});var P1t=s(P2e);Gcr=r(P1t,"longformer"),P1t.forEach(t),Ocr=r(TSe," \u2014 "),CW=n(TSe,"A",{href:!0});var B1t=s(CW);Vcr=r(B1t,"TFLongformerModel"),B1t.forEach(t),Xcr=r(TSe," (Longformer model)"),TSe.forEach(t),zcr=i(D),F4=n(D,"LI",{});var MSe=s(F4);B2e=n(MSe,"STRONG",{});var I1t=s(B2e);Wcr=r(I1t,"lxmert"),I1t.forEach(t),Qcr=r(MSe," \u2014 "),wW=n(MSe,"A",{href:!0});var q1t=s(wW);Hcr=r(q1t,"TFLxmertModel"),q1t.forEach(t),Ucr=r(MSe," (LXMERT model)"),MSe.forEach(t),Jcr=i(D),T4=n(D,"LI",{});var ESe=s(T4);I2e=n(ESe,"STRONG",{});var N1t=s(I2e);Ycr=r(N1t,"marian"),N1t.forEach(t),Kcr=r(ESe," \u2014 "),AW=n(ESe,"A",{href:!0});var j1t=s(AW);Zcr=r(j1t,"TFMarianModel"),j1t.forEach(t),emr=r(ESe," (Marian model)"),ESe.forEach(t),omr=i(D),M4=n(D,"LI",{});var CSe=s(M4);q2e=n(CSe,"STRONG",{});var D1t=s(q2e);rmr=r(D1t,"mbart"),D1t.forEach(t),tmr=r(CSe," \u2014 "),yW=n(CSe,"A",{href:!0});var G1t=s(yW);amr=r(G1t,"TFMBartModel"),G1t.forEach(t),nmr=r(CSe," (mBART model)"),CSe.forEach(t),smr=i(D),E4=n(D,"LI",{});var wSe=s(E4);N2e=n(wSe,"STRONG",{});var O1t=s(N2e);lmr=r(O1t,"mobilebert"),O1t.forEach(t),imr=r(wSe," \u2014 "),LW=n(wSe,"A",{href:!0});var V1t=s(LW);dmr=r(V1t,"TFMobileBertModel"),V1t.forEach(t),cmr=r(wSe," (MobileBERT model)"),wSe.forEach(t),mmr=i(D),C4=n(D,"LI",{});var ASe=s(C4);j2e=n(ASe,"STRONG",{});var X1t=s(j2e);fmr=r(X1t,"mpnet"),X1t.forEach(t),gmr=r(ASe," \u2014 "),xW=n(ASe,"A",{href:!0});var z1t=s(xW);hmr=r(z1t,"TFMPNetModel"),z1t.forEach(t),umr=r(ASe," (MPNet model)"),ASe.forEach(t),pmr=i(D),w4=n(D,"LI",{});var ySe=s(w4);D2e=n(ySe,"STRONG",{});var W1t=s(D2e);_mr=r(W1t,"mt5"),W1t.forEach(t),bmr=r(ySe," \u2014 "),$W=n(ySe,"A",{href:!0});var Q1t=s($W);vmr=r(Q1t,"TFMT5Model"),Q1t.forEach(t),Fmr=r(ySe," (mT5 model)"),ySe.forEach(t),Tmr=i(D),A4=n(D,"LI",{});var LSe=s(A4);G2e=n(LSe,"STRONG",{});var H1t=s(G2e);Mmr=r(H1t,"openai-gpt"),H1t.forEach(t),Emr=r(LSe," \u2014 "),kW=n(LSe,"A",{href:!0});var U1t=s(kW);Cmr=r(U1t,"TFOpenAIGPTModel"),U1t.forEach(t),wmr=r(LSe," (OpenAI GPT model)"),LSe.forEach(t),Amr=i(D),y4=n(D,"LI",{});var xSe=s(y4);O2e=n(xSe,"STRONG",{});var J1t=s(O2e);ymr=r(J1t,"pegasus"),J1t.forEach(t),Lmr=r(xSe," \u2014 "),SW=n(xSe,"A",{href:!0});var Y1t=s(SW);xmr=r(Y1t,"TFPegasusModel"),Y1t.forEach(t),$mr=r(xSe," (Pegasus model)"),xSe.forEach(t),kmr=i(D),L4=n(D,"LI",{});var $Se=s(L4);V2e=n($Se,"STRONG",{});var K1t=s(V2e);Smr=r(K1t,"rembert"),K1t.forEach(t),Rmr=r($Se," \u2014 "),RW=n($Se,"A",{href:!0});var Z1t=s(RW);Pmr=r(Z1t,"TFRemBertModel"),Z1t.forEach(t),Bmr=r($Se," (RemBERT model)"),$Se.forEach(t),Imr=i(D),x4=n(D,"LI",{});var kSe=s(x4);X2e=n(kSe,"STRONG",{});var eTt=s(X2e);qmr=r(eTt,"roberta"),eTt.forEach(t),Nmr=r(kSe," \u2014 "),PW=n(kSe,"A",{href:!0});var oTt=s(PW);jmr=r(oTt,"TFRobertaModel"),oTt.forEach(t),Dmr=r(kSe," (RoBERTa model)"),kSe.forEach(t),Gmr=i(D),$4=n(D,"LI",{});var SSe=s($4);z2e=n(SSe,"STRONG",{});var rTt=s(z2e);Omr=r(rTt,"roformer"),rTt.forEach(t),Vmr=r(SSe," \u2014 "),BW=n(SSe,"A",{href:!0});var tTt=s(BW);Xmr=r(tTt,"TFRoFormerModel"),tTt.forEach(t),zmr=r(SSe," (RoFormer model)"),SSe.forEach(t),Wmr=i(D),k4=n(D,"LI",{});var RSe=s(k4);W2e=n(RSe,"STRONG",{});var aTt=s(W2e);Qmr=r(aTt,"speech_to_text"),aTt.forEach(t),Hmr=r(RSe," \u2014 "),IW=n(RSe,"A",{href:!0});var nTt=s(IW);Umr=r(nTt,"TFSpeech2TextModel"),nTt.forEach(t),Jmr=r(RSe," (Speech2Text model)"),RSe.forEach(t),Ymr=i(D),S4=n(D,"LI",{});var PSe=s(S4);Q2e=n(PSe,"STRONG",{});var sTt=s(Q2e);Kmr=r(sTt,"swin"),sTt.forEach(t),Zmr=r(PSe," \u2014 "),qW=n(PSe,"A",{href:!0});var lTt=s(qW);efr=r(lTt,"TFSwinModel"),lTt.forEach(t),ofr=r(PSe," (Swin model)"),PSe.forEach(t),rfr=i(D),R4=n(D,"LI",{});var BSe=s(R4);H2e=n(BSe,"STRONG",{});var iTt=s(H2e);tfr=r(iTt,"t5"),iTt.forEach(t),afr=r(BSe," \u2014 "),NW=n(BSe,"A",{href:!0});var dTt=s(NW);nfr=r(dTt,"TFT5Model"),dTt.forEach(t),sfr=r(BSe," (T5 model)"),BSe.forEach(t),lfr=i(D),P4=n(D,"LI",{});var ISe=s(P4);U2e=n(ISe,"STRONG",{});var cTt=s(U2e);ifr=r(cTt,"tapas"),cTt.forEach(t),dfr=r(ISe," \u2014 "),jW=n(ISe,"A",{href:!0});var mTt=s(jW);cfr=r(mTt,"TFTapasModel"),mTt.forEach(t),mfr=r(ISe," (TAPAS model)"),ISe.forEach(t),ffr=i(D),B4=n(D,"LI",{});var qSe=s(B4);J2e=n(qSe,"STRONG",{});var fTt=s(J2e);gfr=r(fTt,"transfo-xl"),fTt.forEach(t),hfr=r(qSe," \u2014 "),DW=n(qSe,"A",{href:!0});var gTt=s(DW);ufr=r(gTt,"TFTransfoXLModel"),gTt.forEach(t),pfr=r(qSe," (Transformer-XL model)"),qSe.forEach(t),_fr=i(D),I4=n(D,"LI",{});var NSe=s(I4);Y2e=n(NSe,"STRONG",{});var hTt=s(Y2e);bfr=r(hTt,"vit"),hTt.forEach(t),vfr=r(NSe," \u2014 "),GW=n(NSe,"A",{href:!0});var uTt=s(GW);Ffr=r(uTt,"TFViTModel"),uTt.forEach(t),Tfr=r(NSe," (ViT model)"),NSe.forEach(t),Mfr=i(D),q4=n(D,"LI",{});var jSe=s(q4);K2e=n(jSe,"STRONG",{});var pTt=s(K2e);Efr=r(pTt,"vit_mae"),pTt.forEach(t),Cfr=r(jSe," \u2014 "),OW=n(jSe,"A",{href:!0});var _Tt=s(OW);wfr=r(_Tt,"TFViTMAEModel"),_Tt.forEach(t),Afr=r(jSe," (ViTMAE model)"),jSe.forEach(t),yfr=i(D),N4=n(D,"LI",{});var DSe=s(N4);Z2e=n(DSe,"STRONG",{});var bTt=s(Z2e);Lfr=r(bTt,"wav2vec2"),bTt.forEach(t),xfr=r(DSe," \u2014 "),VW=n(DSe,"A",{href:!0});var vTt=s(VW);$fr=r(vTt,"TFWav2Vec2Model"),vTt.forEach(t),kfr=r(DSe," (Wav2Vec2 model)"),DSe.forEach(t),Sfr=i(D),j4=n(D,"LI",{});var GSe=s(j4);eve=n(GSe,"STRONG",{});var FTt=s(eve);Rfr=r(FTt,"xlm"),FTt.forEach(t),Pfr=r(GSe," \u2014 "),XW=n(GSe,"A",{href:!0});var TTt=s(XW);Bfr=r(TTt,"TFXLMModel"),TTt.forEach(t),Ifr=r(GSe," (XLM model)"),GSe.forEach(t),qfr=i(D),D4=n(D,"LI",{});var OSe=s(D4);ove=n(OSe,"STRONG",{});var MTt=s(ove);Nfr=r(MTt,"xlm-roberta"),MTt.forEach(t),jfr=r(OSe," \u2014 "),zW=n(OSe,"A",{href:!0});var ETt=s(zW);Dfr=r(ETt,"TFXLMRobertaModel"),ETt.forEach(t),Gfr=r(OSe," (XLM-RoBERTa model)"),OSe.forEach(t),Ofr=i(D),G4=n(D,"LI",{});var VSe=s(G4);rve=n(VSe,"STRONG",{});var CTt=s(rve);Vfr=r(CTt,"xlnet"),CTt.forEach(t),Xfr=r(VSe," \u2014 "),WW=n(VSe,"A",{href:!0});var wTt=s(WW);zfr=r(wTt,"TFXLNetModel"),wTt.forEach(t),Wfr=r(VSe," (XLNet model)"),VSe.forEach(t),D.forEach(t),Qfr=i(hl),T(O4.$$.fragment,hl),hl.forEach(t),gl.forEach(t),VNe=i(m),Xd=n(m,"H2",{class:!0});var UDe=s(Xd);V4=n(UDe,"A",{id:!0,class:!0,href:!0});var ATt=s(V4);tve=n(ATt,"SPAN",{});var yTt=s(tve);T(d7.$$.fragment,yTt),yTt.forEach(t),ATt.forEach(t),Hfr=i(UDe),ave=n(UDe,"SPAN",{});var LTt=s(ave);Ufr=r(LTt,"TFAutoModelForPreTraining"),LTt.forEach(t),UDe.forEach(t),XNe=i(m),Ko=n(m,"DIV",{class:!0});var ul=s(Ko);T(c7.$$.fragment,ul),Jfr=i(ul),zd=n(ul,"P",{});var ree=s(zd);Yfr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QW=n(ree,"A",{href:!0});var xTt=s(QW);Kfr=r(xTt,"from_pretrained()"),xTt.forEach(t),Zfr=r(ree," class method or the "),HW=n(ree,"A",{href:!0});var $Tt=s(HW);egr=r($Tt,"from_config()"),$Tt.forEach(t),ogr=r(ree,` class
method.`),ree.forEach(t),rgr=i(ul),m7=n(ul,"P",{});var JDe=s(m7);tgr=r(JDe,"This class cannot be instantiated directly using "),nve=n(JDe,"CODE",{});var kTt=s(nve);agr=r(kTt,"__init__()"),kTt.forEach(t),ngr=r(JDe," (throws an error)."),JDe.forEach(t),sgr=i(ul),Lt=n(ul,"DIV",{class:!0});var M6=s(Lt);T(f7.$$.fragment,M6),lgr=i(M6),sve=n(M6,"P",{});var STt=s(sve);igr=r(STt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),STt.forEach(t),dgr=i(M6),Wd=n(M6,"P",{});var tee=s(Wd);cgr=r(tee,`Note:
Loading a model from its configuration file does `),lve=n(tee,"STRONG",{});var RTt=s(lve);mgr=r(RTt,"not"),RTt.forEach(t),fgr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(tee,"A",{href:!0});var PTt=s(UW);ggr=r(PTt,"from_pretrained()"),PTt.forEach(t),hgr=r(tee," to load the model weights."),tee.forEach(t),ugr=i(M6),T(X4.$$.fragment,M6),M6.forEach(t),pgr=i(ul),Ar=n(ul,"DIV",{class:!0});var pl=s(Ar);T(g7.$$.fragment,pl),_gr=i(pl),ive=n(pl,"P",{});var BTt=s(ive);bgr=r(BTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BTt.forEach(t),vgr=i(pl),Za=n(pl,"P",{});var E6=s(Za);Fgr=r(E6,"The model class to instantiate is selected based on the "),dve=n(E6,"CODE",{});var ITt=s(dve);Tgr=r(ITt,"model_type"),ITt.forEach(t),Mgr=r(E6,` property of the config object (either
passed as an argument or loaded from `),cve=n(E6,"CODE",{});var qTt=s(cve);Egr=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),Cgr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(E6,"CODE",{});var NTt=s(mve);wgr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),Agr=r(E6,":"),E6.forEach(t),ygr=i(pl),se=n(pl,"UL",{});var le=s(se);z4=n(le,"LI",{});var XSe=s(z4);fve=n(XSe,"STRONG",{});var jTt=s(fve);Lgr=r(jTt,"albert"),jTt.forEach(t),xgr=r(XSe," \u2014 "),JW=n(XSe,"A",{href:!0});var DTt=s(JW);$gr=r(DTt,"TFAlbertForPreTraining"),DTt.forEach(t),kgr=r(XSe," (ALBERT model)"),XSe.forEach(t),Sgr=i(le),W4=n(le,"LI",{});var zSe=s(W4);gve=n(zSe,"STRONG",{});var GTt=s(gve);Rgr=r(GTt,"bart"),GTt.forEach(t),Pgr=r(zSe," \u2014 "),YW=n(zSe,"A",{href:!0});var OTt=s(YW);Bgr=r(OTt,"TFBartForConditionalGeneration"),OTt.forEach(t),Igr=r(zSe," (BART model)"),zSe.forEach(t),qgr=i(le),Q4=n(le,"LI",{});var WSe=s(Q4);hve=n(WSe,"STRONG",{});var VTt=s(hve);Ngr=r(VTt,"bert"),VTt.forEach(t),jgr=r(WSe," \u2014 "),KW=n(WSe,"A",{href:!0});var XTt=s(KW);Dgr=r(XTt,"TFBertForPreTraining"),XTt.forEach(t),Ggr=r(WSe," (BERT model)"),WSe.forEach(t),Ogr=i(le),H4=n(le,"LI",{});var QSe=s(H4);uve=n(QSe,"STRONG",{});var zTt=s(uve);Vgr=r(zTt,"camembert"),zTt.forEach(t),Xgr=r(QSe," \u2014 "),ZW=n(QSe,"A",{href:!0});var WTt=s(ZW);zgr=r(WTt,"TFCamembertForMaskedLM"),WTt.forEach(t),Wgr=r(QSe," (CamemBERT model)"),QSe.forEach(t),Qgr=i(le),U4=n(le,"LI",{});var HSe=s(U4);pve=n(HSe,"STRONG",{});var QTt=s(pve);Hgr=r(QTt,"ctrl"),QTt.forEach(t),Ugr=r(HSe," \u2014 "),eQ=n(HSe,"A",{href:!0});var HTt=s(eQ);Jgr=r(HTt,"TFCTRLLMHeadModel"),HTt.forEach(t),Ygr=r(HSe," (CTRL model)"),HSe.forEach(t),Kgr=i(le),J4=n(le,"LI",{});var USe=s(J4);_ve=n(USe,"STRONG",{});var UTt=s(_ve);Zgr=r(UTt,"distilbert"),UTt.forEach(t),ehr=r(USe," \u2014 "),oQ=n(USe,"A",{href:!0});var JTt=s(oQ);ohr=r(JTt,"TFDistilBertForMaskedLM"),JTt.forEach(t),rhr=r(USe," (DistilBERT model)"),USe.forEach(t),thr=i(le),Y4=n(le,"LI",{});var JSe=s(Y4);bve=n(JSe,"STRONG",{});var YTt=s(bve);ahr=r(YTt,"electra"),YTt.forEach(t),nhr=r(JSe," \u2014 "),rQ=n(JSe,"A",{href:!0});var KTt=s(rQ);shr=r(KTt,"TFElectraForPreTraining"),KTt.forEach(t),lhr=r(JSe," (ELECTRA model)"),JSe.forEach(t),ihr=i(le),K4=n(le,"LI",{});var YSe=s(K4);vve=n(YSe,"STRONG",{});var ZTt=s(vve);dhr=r(ZTt,"flaubert"),ZTt.forEach(t),chr=r(YSe," \u2014 "),tQ=n(YSe,"A",{href:!0});var eMt=s(tQ);mhr=r(eMt,"TFFlaubertWithLMHeadModel"),eMt.forEach(t),fhr=r(YSe," (FlauBERT model)"),YSe.forEach(t),ghr=i(le),Z4=n(le,"LI",{});var KSe=s(Z4);Fve=n(KSe,"STRONG",{});var oMt=s(Fve);hhr=r(oMt,"funnel"),oMt.forEach(t),uhr=r(KSe," \u2014 "),aQ=n(KSe,"A",{href:!0});var rMt=s(aQ);phr=r(rMt,"TFFunnelForPreTraining"),rMt.forEach(t),_hr=r(KSe," (Funnel Transformer model)"),KSe.forEach(t),bhr=i(le),eE=n(le,"LI",{});var ZSe=s(eE);Tve=n(ZSe,"STRONG",{});var tMt=s(Tve);vhr=r(tMt,"gpt2"),tMt.forEach(t),Fhr=r(ZSe," \u2014 "),nQ=n(ZSe,"A",{href:!0});var aMt=s(nQ);Thr=r(aMt,"TFGPT2LMHeadModel"),aMt.forEach(t),Mhr=r(ZSe," (OpenAI GPT-2 model)"),ZSe.forEach(t),Ehr=i(le),oE=n(le,"LI",{});var eRe=s(oE);Mve=n(eRe,"STRONG",{});var nMt=s(Mve);Chr=r(nMt,"layoutlm"),nMt.forEach(t),whr=r(eRe," \u2014 "),sQ=n(eRe,"A",{href:!0});var sMt=s(sQ);Ahr=r(sMt,"TFLayoutLMForMaskedLM"),sMt.forEach(t),yhr=r(eRe," (LayoutLM model)"),eRe.forEach(t),Lhr=i(le),rE=n(le,"LI",{});var oRe=s(rE);Eve=n(oRe,"STRONG",{});var lMt=s(Eve);xhr=r(lMt,"lxmert"),lMt.forEach(t),$hr=r(oRe," \u2014 "),lQ=n(oRe,"A",{href:!0});var iMt=s(lQ);khr=r(iMt,"TFLxmertForPreTraining"),iMt.forEach(t),Shr=r(oRe," (LXMERT model)"),oRe.forEach(t),Rhr=i(le),tE=n(le,"LI",{});var rRe=s(tE);Cve=n(rRe,"STRONG",{});var dMt=s(Cve);Phr=r(dMt,"mobilebert"),dMt.forEach(t),Bhr=r(rRe," \u2014 "),iQ=n(rRe,"A",{href:!0});var cMt=s(iQ);Ihr=r(cMt,"TFMobileBertForPreTraining"),cMt.forEach(t),qhr=r(rRe," (MobileBERT model)"),rRe.forEach(t),Nhr=i(le),aE=n(le,"LI",{});var tRe=s(aE);wve=n(tRe,"STRONG",{});var mMt=s(wve);jhr=r(mMt,"mpnet"),mMt.forEach(t),Dhr=r(tRe," \u2014 "),dQ=n(tRe,"A",{href:!0});var fMt=s(dQ);Ghr=r(fMt,"TFMPNetForMaskedLM"),fMt.forEach(t),Ohr=r(tRe," (MPNet model)"),tRe.forEach(t),Vhr=i(le),nE=n(le,"LI",{});var aRe=s(nE);Ave=n(aRe,"STRONG",{});var gMt=s(Ave);Xhr=r(gMt,"openai-gpt"),gMt.forEach(t),zhr=r(aRe," \u2014 "),cQ=n(aRe,"A",{href:!0});var hMt=s(cQ);Whr=r(hMt,"TFOpenAIGPTLMHeadModel"),hMt.forEach(t),Qhr=r(aRe," (OpenAI GPT model)"),aRe.forEach(t),Hhr=i(le),sE=n(le,"LI",{});var nRe=s(sE);yve=n(nRe,"STRONG",{});var uMt=s(yve);Uhr=r(uMt,"roberta"),uMt.forEach(t),Jhr=r(nRe," \u2014 "),mQ=n(nRe,"A",{href:!0});var pMt=s(mQ);Yhr=r(pMt,"TFRobertaForMaskedLM"),pMt.forEach(t),Khr=r(nRe," (RoBERTa model)"),nRe.forEach(t),Zhr=i(le),lE=n(le,"LI",{});var sRe=s(lE);Lve=n(sRe,"STRONG",{});var _Mt=s(Lve);eur=r(_Mt,"t5"),_Mt.forEach(t),our=r(sRe," \u2014 "),fQ=n(sRe,"A",{href:!0});var bMt=s(fQ);rur=r(bMt,"TFT5ForConditionalGeneration"),bMt.forEach(t),tur=r(sRe," (T5 model)"),sRe.forEach(t),aur=i(le),iE=n(le,"LI",{});var lRe=s(iE);xve=n(lRe,"STRONG",{});var vMt=s(xve);nur=r(vMt,"tapas"),vMt.forEach(t),sur=r(lRe," \u2014 "),gQ=n(lRe,"A",{href:!0});var FMt=s(gQ);lur=r(FMt,"TFTapasForMaskedLM"),FMt.forEach(t),iur=r(lRe," (TAPAS model)"),lRe.forEach(t),dur=i(le),dE=n(le,"LI",{});var iRe=s(dE);$ve=n(iRe,"STRONG",{});var TMt=s($ve);cur=r(TMt,"transfo-xl"),TMt.forEach(t),mur=r(iRe," \u2014 "),hQ=n(iRe,"A",{href:!0});var MMt=s(hQ);fur=r(MMt,"TFTransfoXLLMHeadModel"),MMt.forEach(t),gur=r(iRe," (Transformer-XL model)"),iRe.forEach(t),hur=i(le),cE=n(le,"LI",{});var dRe=s(cE);kve=n(dRe,"STRONG",{});var EMt=s(kve);uur=r(EMt,"vit_mae"),EMt.forEach(t),pur=r(dRe," \u2014 "),uQ=n(dRe,"A",{href:!0});var CMt=s(uQ);_ur=r(CMt,"TFViTMAEForPreTraining"),CMt.forEach(t),bur=r(dRe," (ViTMAE model)"),dRe.forEach(t),vur=i(le),mE=n(le,"LI",{});var cRe=s(mE);Sve=n(cRe,"STRONG",{});var wMt=s(Sve);Fur=r(wMt,"xlm"),wMt.forEach(t),Tur=r(cRe," \u2014 "),pQ=n(cRe,"A",{href:!0});var AMt=s(pQ);Mur=r(AMt,"TFXLMWithLMHeadModel"),AMt.forEach(t),Eur=r(cRe," (XLM model)"),cRe.forEach(t),Cur=i(le),fE=n(le,"LI",{});var mRe=s(fE);Rve=n(mRe,"STRONG",{});var yMt=s(Rve);wur=r(yMt,"xlm-roberta"),yMt.forEach(t),Aur=r(mRe," \u2014 "),_Q=n(mRe,"A",{href:!0});var LMt=s(_Q);yur=r(LMt,"TFXLMRobertaForMaskedLM"),LMt.forEach(t),Lur=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),xur=i(le),gE=n(le,"LI",{});var fRe=s(gE);Pve=n(fRe,"STRONG",{});var xMt=s(Pve);$ur=r(xMt,"xlnet"),xMt.forEach(t),kur=r(fRe," \u2014 "),bQ=n(fRe,"A",{href:!0});var $Mt=s(bQ);Sur=r($Mt,"TFXLNetLMHeadModel"),$Mt.forEach(t),Rur=r(fRe," (XLNet model)"),fRe.forEach(t),le.forEach(t),Pur=i(pl),T(hE.$$.fragment,pl),pl.forEach(t),ul.forEach(t),zNe=i(m),Qd=n(m,"H2",{class:!0});var YDe=s(Qd);uE=n(YDe,"A",{id:!0,class:!0,href:!0});var kMt=s(uE);Bve=n(kMt,"SPAN",{});var SMt=s(Bve);T(h7.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),Bur=i(YDe),Ive=n(YDe,"SPAN",{});var RMt=s(Ive);Iur=r(RMt,"TFAutoModelForCausalLM"),RMt.forEach(t),YDe.forEach(t),WNe=i(m),Zo=n(m,"DIV",{class:!0});var _l=s(Zo);T(u7.$$.fragment,_l),qur=i(_l),Hd=n(_l,"P",{});var aee=s(Hd);Nur=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=n(aee,"A",{href:!0});var PMt=s(vQ);jur=r(PMt,"from_pretrained()"),PMt.forEach(t),Dur=r(aee," class method or the "),FQ=n(aee,"A",{href:!0});var BMt=s(FQ);Gur=r(BMt,"from_config()"),BMt.forEach(t),Our=r(aee,` class
method.`),aee.forEach(t),Vur=i(_l),p7=n(_l,"P",{});var KDe=s(p7);Xur=r(KDe,"This class cannot be instantiated directly using "),qve=n(KDe,"CODE",{});var IMt=s(qve);zur=r(IMt,"__init__()"),IMt.forEach(t),Wur=r(KDe," (throws an error)."),KDe.forEach(t),Qur=i(_l),xt=n(_l,"DIV",{class:!0});var C6=s(xt);T(_7.$$.fragment,C6),Hur=i(C6),Nve=n(C6,"P",{});var qMt=s(Nve);Uur=r(qMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qMt.forEach(t),Jur=i(C6),Ud=n(C6,"P",{});var nee=s(Ud);Yur=r(nee,`Note:
Loading a model from its configuration file does `),jve=n(nee,"STRONG",{});var NMt=s(jve);Kur=r(NMt,"not"),NMt.forEach(t),Zur=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(nee,"A",{href:!0});var jMt=s(TQ);epr=r(jMt,"from_pretrained()"),jMt.forEach(t),opr=r(nee," to load the model weights."),nee.forEach(t),rpr=i(C6),T(pE.$$.fragment,C6),C6.forEach(t),tpr=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(b7.$$.fragment,bl),apr=i(bl),Dve=n(bl,"P",{});var DMt=s(Dve);npr=r(DMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DMt.forEach(t),spr=i(bl),en=n(bl,"P",{});var w6=s(en);lpr=r(w6,"The model class to instantiate is selected based on the "),Gve=n(w6,"CODE",{});var GMt=s(Gve);ipr=r(GMt,"model_type"),GMt.forEach(t),dpr=r(w6,` property of the config object (either
passed as an argument or loaded from `),Ove=n(w6,"CODE",{});var OMt=s(Ove);cpr=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),mpr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(w6,"CODE",{});var VMt=s(Vve);fpr=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),gpr=r(w6,":"),w6.forEach(t),hpr=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);_E=n(Ce,"LI",{});var gRe=s(_E);Xve=n(gRe,"STRONG",{});var XMt=s(Xve);upr=r(XMt,"bert"),XMt.forEach(t),ppr=r(gRe," \u2014 "),MQ=n(gRe,"A",{href:!0});var zMt=s(MQ);_pr=r(zMt,"TFBertLMHeadModel"),zMt.forEach(t),bpr=r(gRe," (BERT model)"),gRe.forEach(t),vpr=i(Ce),bE=n(Ce,"LI",{});var hRe=s(bE);zve=n(hRe,"STRONG",{});var WMt=s(zve);Fpr=r(WMt,"camembert"),WMt.forEach(t),Tpr=r(hRe," \u2014 "),EQ=n(hRe,"A",{href:!0});var QMt=s(EQ);Mpr=r(QMt,"TFCamembertForCausalLM"),QMt.forEach(t),Epr=r(hRe," (CamemBERT model)"),hRe.forEach(t),Cpr=i(Ce),vE=n(Ce,"LI",{});var uRe=s(vE);Wve=n(uRe,"STRONG",{});var HMt=s(Wve);wpr=r(HMt,"ctrl"),HMt.forEach(t),Apr=r(uRe," \u2014 "),CQ=n(uRe,"A",{href:!0});var UMt=s(CQ);ypr=r(UMt,"TFCTRLLMHeadModel"),UMt.forEach(t),Lpr=r(uRe," (CTRL model)"),uRe.forEach(t),xpr=i(Ce),FE=n(Ce,"LI",{});var pRe=s(FE);Qve=n(pRe,"STRONG",{});var JMt=s(Qve);$pr=r(JMt,"gpt2"),JMt.forEach(t),kpr=r(pRe," \u2014 "),wQ=n(pRe,"A",{href:!0});var YMt=s(wQ);Spr=r(YMt,"TFGPT2LMHeadModel"),YMt.forEach(t),Rpr=r(pRe," (OpenAI GPT-2 model)"),pRe.forEach(t),Ppr=i(Ce),TE=n(Ce,"LI",{});var _Re=s(TE);Hve=n(_Re,"STRONG",{});var KMt=s(Hve);Bpr=r(KMt,"gptj"),KMt.forEach(t),Ipr=r(_Re," \u2014 "),AQ=n(_Re,"A",{href:!0});var ZMt=s(AQ);qpr=r(ZMt,"TFGPTJForCausalLM"),ZMt.forEach(t),Npr=r(_Re," (GPT-J model)"),_Re.forEach(t),jpr=i(Ce),ME=n(Ce,"LI",{});var bRe=s(ME);Uve=n(bRe,"STRONG",{});var e4t=s(Uve);Dpr=r(e4t,"openai-gpt"),e4t.forEach(t),Gpr=r(bRe," \u2014 "),yQ=n(bRe,"A",{href:!0});var o4t=s(yQ);Opr=r(o4t,"TFOpenAIGPTLMHeadModel"),o4t.forEach(t),Vpr=r(bRe," (OpenAI GPT model)"),bRe.forEach(t),Xpr=i(Ce),EE=n(Ce,"LI",{});var vRe=s(EE);Jve=n(vRe,"STRONG",{});var r4t=s(Jve);zpr=r(r4t,"rembert"),r4t.forEach(t),Wpr=r(vRe," \u2014 "),LQ=n(vRe,"A",{href:!0});var t4t=s(LQ);Qpr=r(t4t,"TFRemBertForCausalLM"),t4t.forEach(t),Hpr=r(vRe," (RemBERT model)"),vRe.forEach(t),Upr=i(Ce),CE=n(Ce,"LI",{});var FRe=s(CE);Yve=n(FRe,"STRONG",{});var a4t=s(Yve);Jpr=r(a4t,"roberta"),a4t.forEach(t),Ypr=r(FRe," \u2014 "),xQ=n(FRe,"A",{href:!0});var n4t=s(xQ);Kpr=r(n4t,"TFRobertaForCausalLM"),n4t.forEach(t),Zpr=r(FRe," (RoBERTa model)"),FRe.forEach(t),e_r=i(Ce),wE=n(Ce,"LI",{});var TRe=s(wE);Kve=n(TRe,"STRONG",{});var s4t=s(Kve);o_r=r(s4t,"roformer"),s4t.forEach(t),r_r=r(TRe," \u2014 "),$Q=n(TRe,"A",{href:!0});var l4t=s($Q);t_r=r(l4t,"TFRoFormerForCausalLM"),l4t.forEach(t),a_r=r(TRe," (RoFormer model)"),TRe.forEach(t),n_r=i(Ce),AE=n(Ce,"LI",{});var MRe=s(AE);Zve=n(MRe,"STRONG",{});var i4t=s(Zve);s_r=r(i4t,"transfo-xl"),i4t.forEach(t),l_r=r(MRe," \u2014 "),kQ=n(MRe,"A",{href:!0});var d4t=s(kQ);i_r=r(d4t,"TFTransfoXLLMHeadModel"),d4t.forEach(t),d_r=r(MRe," (Transformer-XL model)"),MRe.forEach(t),c_r=i(Ce),yE=n(Ce,"LI",{});var ERe=s(yE);eFe=n(ERe,"STRONG",{});var c4t=s(eFe);m_r=r(c4t,"xlm"),c4t.forEach(t),f_r=r(ERe," \u2014 "),SQ=n(ERe,"A",{href:!0});var m4t=s(SQ);g_r=r(m4t,"TFXLMWithLMHeadModel"),m4t.forEach(t),h_r=r(ERe," (XLM model)"),ERe.forEach(t),u_r=i(Ce),LE=n(Ce,"LI",{});var CRe=s(LE);oFe=n(CRe,"STRONG",{});var f4t=s(oFe);p_r=r(f4t,"xlnet"),f4t.forEach(t),__r=r(CRe," \u2014 "),RQ=n(CRe,"A",{href:!0});var g4t=s(RQ);b_r=r(g4t,"TFXLNetLMHeadModel"),g4t.forEach(t),v_r=r(CRe," (XLNet model)"),CRe.forEach(t),Ce.forEach(t),F_r=i(bl),T(xE.$$.fragment,bl),bl.forEach(t),_l.forEach(t),QNe=i(m),Jd=n(m,"H2",{class:!0});var ZDe=s(Jd);$E=n(ZDe,"A",{id:!0,class:!0,href:!0});var h4t=s($E);rFe=n(h4t,"SPAN",{});var u4t=s(rFe);T(v7.$$.fragment,u4t),u4t.forEach(t),h4t.forEach(t),T_r=i(ZDe),tFe=n(ZDe,"SPAN",{});var p4t=s(tFe);M_r=r(p4t,"TFAutoModelForImageClassification"),p4t.forEach(t),ZDe.forEach(t),HNe=i(m),er=n(m,"DIV",{class:!0});var vl=s(er);T(F7.$$.fragment,vl),E_r=i(vl),Yd=n(vl,"P",{});var see=s(Yd);C_r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PQ=n(see,"A",{href:!0});var _4t=s(PQ);w_r=r(_4t,"from_pretrained()"),_4t.forEach(t),A_r=r(see," class method or the "),BQ=n(see,"A",{href:!0});var b4t=s(BQ);y_r=r(b4t,"from_config()"),b4t.forEach(t),L_r=r(see,` class
method.`),see.forEach(t),x_r=i(vl),T7=n(vl,"P",{});var eGe=s(T7);$_r=r(eGe,"This class cannot be instantiated directly using "),aFe=n(eGe,"CODE",{});var v4t=s(aFe);k_r=r(v4t,"__init__()"),v4t.forEach(t),S_r=r(eGe," (throws an error)."),eGe.forEach(t),R_r=i(vl),$t=n(vl,"DIV",{class:!0});var A6=s($t);T(M7.$$.fragment,A6),P_r=i(A6),nFe=n(A6,"P",{});var F4t=s(nFe);B_r=r(F4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F4t.forEach(t),I_r=i(A6),Kd=n(A6,"P",{});var lee=s(Kd);q_r=r(lee,`Note:
Loading a model from its configuration file does `),sFe=n(lee,"STRONG",{});var T4t=s(sFe);N_r=r(T4t,"not"),T4t.forEach(t),j_r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(lee,"A",{href:!0});var M4t=s(IQ);D_r=r(M4t,"from_pretrained()"),M4t.forEach(t),G_r=r(lee," to load the model weights."),lee.forEach(t),O_r=i(A6),T(kE.$$.fragment,A6),A6.forEach(t),V_r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(E7.$$.fragment,Fl),X_r=i(Fl),lFe=n(Fl,"P",{});var E4t=s(lFe);z_r=r(E4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E4t.forEach(t),W_r=i(Fl),on=n(Fl,"P",{});var y6=s(on);Q_r=r(y6,"The model class to instantiate is selected based on the "),iFe=n(y6,"CODE",{});var C4t=s(iFe);H_r=r(C4t,"model_type"),C4t.forEach(t),U_r=r(y6,` property of the config object (either
passed as an argument or loaded from `),dFe=n(y6,"CODE",{});var w4t=s(dFe);J_r=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),Y_r=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(y6,"CODE",{});var A4t=s(cFe);K_r=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),Z_r=r(y6,":"),y6.forEach(t),ebr=i(Fl),rn=n(Fl,"UL",{});var L6=s(rn);SE=n(L6,"LI",{});var wRe=s(SE);mFe=n(wRe,"STRONG",{});var y4t=s(mFe);obr=r(y4t,"convnext"),y4t.forEach(t),rbr=r(wRe," \u2014 "),qQ=n(wRe,"A",{href:!0});var L4t=s(qQ);tbr=r(L4t,"TFConvNextForImageClassification"),L4t.forEach(t),abr=r(wRe," (ConvNext model)"),wRe.forEach(t),nbr=i(L6),RE=n(L6,"LI",{});var ARe=s(RE);fFe=n(ARe,"STRONG",{});var x4t=s(fFe);sbr=r(x4t,"data2vec-vision"),x4t.forEach(t),lbr=r(ARe," \u2014 "),NQ=n(ARe,"A",{href:!0});var $4t=s(NQ);ibr=r($4t,"TFData2VecVisionForImageClassification"),$4t.forEach(t),dbr=r(ARe," (Data2VecVision model)"),ARe.forEach(t),cbr=i(L6),PE=n(L6,"LI",{});var yRe=s(PE);gFe=n(yRe,"STRONG",{});var k4t=s(gFe);mbr=r(k4t,"swin"),k4t.forEach(t),fbr=r(yRe," \u2014 "),jQ=n(yRe,"A",{href:!0});var S4t=s(jQ);gbr=r(S4t,"TFSwinForImageClassification"),S4t.forEach(t),hbr=r(yRe," (Swin model)"),yRe.forEach(t),ubr=i(L6),BE=n(L6,"LI",{});var LRe=s(BE);hFe=n(LRe,"STRONG",{});var R4t=s(hFe);pbr=r(R4t,"vit"),R4t.forEach(t),_br=r(LRe," \u2014 "),DQ=n(LRe,"A",{href:!0});var P4t=s(DQ);bbr=r(P4t,"TFViTForImageClassification"),P4t.forEach(t),vbr=r(LRe," (ViT model)"),LRe.forEach(t),L6.forEach(t),Fbr=i(Fl),T(IE.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),UNe=i(m),Zd=n(m,"H2",{class:!0});var oGe=s(Zd);qE=n(oGe,"A",{id:!0,class:!0,href:!0});var B4t=s(qE);uFe=n(B4t,"SPAN",{});var I4t=s(uFe);T(C7.$$.fragment,I4t),I4t.forEach(t),B4t.forEach(t),Tbr=i(oGe),pFe=n(oGe,"SPAN",{});var q4t=s(pFe);Mbr=r(q4t,"TFAutoModelForMaskedLM"),q4t.forEach(t),oGe.forEach(t),JNe=i(m),or=n(m,"DIV",{class:!0});var Tl=s(or);T(w7.$$.fragment,Tl),Ebr=i(Tl),ec=n(Tl,"P",{});var iee=s(ec);Cbr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=n(iee,"A",{href:!0});var N4t=s(GQ);wbr=r(N4t,"from_pretrained()"),N4t.forEach(t),Abr=r(iee," class method or the "),OQ=n(iee,"A",{href:!0});var j4t=s(OQ);ybr=r(j4t,"from_config()"),j4t.forEach(t),Lbr=r(iee,` class
method.`),iee.forEach(t),xbr=i(Tl),A7=n(Tl,"P",{});var rGe=s(A7);$br=r(rGe,"This class cannot be instantiated directly using "),_Fe=n(rGe,"CODE",{});var D4t=s(_Fe);kbr=r(D4t,"__init__()"),D4t.forEach(t),Sbr=r(rGe," (throws an error)."),rGe.forEach(t),Rbr=i(Tl),kt=n(Tl,"DIV",{class:!0});var x6=s(kt);T(y7.$$.fragment,x6),Pbr=i(x6),bFe=n(x6,"P",{});var G4t=s(bFe);Bbr=r(G4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G4t.forEach(t),Ibr=i(x6),oc=n(x6,"P",{});var dee=s(oc);qbr=r(dee,`Note:
Loading a model from its configuration file does `),vFe=n(dee,"STRONG",{});var O4t=s(vFe);Nbr=r(O4t,"not"),O4t.forEach(t),jbr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(dee,"A",{href:!0});var V4t=s(VQ);Dbr=r(V4t,"from_pretrained()"),V4t.forEach(t),Gbr=r(dee," to load the model weights."),dee.forEach(t),Obr=i(x6),T(NE.$$.fragment,x6),x6.forEach(t),Vbr=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(L7.$$.fragment,Ml),Xbr=i(Ml),FFe=n(Ml,"P",{});var X4t=s(FFe);zbr=r(X4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),X4t.forEach(t),Wbr=i(Ml),tn=n(Ml,"P",{});var $6=s(tn);Qbr=r($6,"The model class to instantiate is selected based on the "),TFe=n($6,"CODE",{});var z4t=s(TFe);Hbr=r(z4t,"model_type"),z4t.forEach(t),Ubr=r($6,` property of the config object (either
passed as an argument or loaded from `),MFe=n($6,"CODE",{});var W4t=s(MFe);Jbr=r(W4t,"pretrained_model_name_or_path"),W4t.forEach(t),Ybr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n($6,"CODE",{});var Q4t=s(EFe);Kbr=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),Zbr=r($6,":"),$6.forEach(t),e2r=i(Ml),ie=n(Ml,"UL",{});var me=s(ie);jE=n(me,"LI",{});var xRe=s(jE);CFe=n(xRe,"STRONG",{});var H4t=s(CFe);o2r=r(H4t,"albert"),H4t.forEach(t),r2r=r(xRe," \u2014 "),XQ=n(xRe,"A",{href:!0});var U4t=s(XQ);t2r=r(U4t,"TFAlbertForMaskedLM"),U4t.forEach(t),a2r=r(xRe," (ALBERT model)"),xRe.forEach(t),n2r=i(me),DE=n(me,"LI",{});var $Re=s(DE);wFe=n($Re,"STRONG",{});var J4t=s(wFe);s2r=r(J4t,"bert"),J4t.forEach(t),l2r=r($Re," \u2014 "),zQ=n($Re,"A",{href:!0});var Y4t=s(zQ);i2r=r(Y4t,"TFBertForMaskedLM"),Y4t.forEach(t),d2r=r($Re," (BERT model)"),$Re.forEach(t),c2r=i(me),GE=n(me,"LI",{});var kRe=s(GE);AFe=n(kRe,"STRONG",{});var K4t=s(AFe);m2r=r(K4t,"camembert"),K4t.forEach(t),f2r=r(kRe," \u2014 "),WQ=n(kRe,"A",{href:!0});var Z4t=s(WQ);g2r=r(Z4t,"TFCamembertForMaskedLM"),Z4t.forEach(t),h2r=r(kRe," (CamemBERT model)"),kRe.forEach(t),u2r=i(me),OE=n(me,"LI",{});var SRe=s(OE);yFe=n(SRe,"STRONG",{});var eEt=s(yFe);p2r=r(eEt,"convbert"),eEt.forEach(t),_2r=r(SRe," \u2014 "),QQ=n(SRe,"A",{href:!0});var oEt=s(QQ);b2r=r(oEt,"TFConvBertForMaskedLM"),oEt.forEach(t),v2r=r(SRe," (ConvBERT model)"),SRe.forEach(t),F2r=i(me),VE=n(me,"LI",{});var RRe=s(VE);LFe=n(RRe,"STRONG",{});var rEt=s(LFe);T2r=r(rEt,"deberta"),rEt.forEach(t),M2r=r(RRe," \u2014 "),HQ=n(RRe,"A",{href:!0});var tEt=s(HQ);E2r=r(tEt,"TFDebertaForMaskedLM"),tEt.forEach(t),C2r=r(RRe," (DeBERTa model)"),RRe.forEach(t),w2r=i(me),XE=n(me,"LI",{});var PRe=s(XE);xFe=n(PRe,"STRONG",{});var aEt=s(xFe);A2r=r(aEt,"deberta-v2"),aEt.forEach(t),y2r=r(PRe," \u2014 "),UQ=n(PRe,"A",{href:!0});var nEt=s(UQ);L2r=r(nEt,"TFDebertaV2ForMaskedLM"),nEt.forEach(t),x2r=r(PRe," (DeBERTa-v2 model)"),PRe.forEach(t),$2r=i(me),zE=n(me,"LI",{});var BRe=s(zE);$Fe=n(BRe,"STRONG",{});var sEt=s($Fe);k2r=r(sEt,"distilbert"),sEt.forEach(t),S2r=r(BRe," \u2014 "),JQ=n(BRe,"A",{href:!0});var lEt=s(JQ);R2r=r(lEt,"TFDistilBertForMaskedLM"),lEt.forEach(t),P2r=r(BRe," (DistilBERT model)"),BRe.forEach(t),B2r=i(me),WE=n(me,"LI",{});var IRe=s(WE);kFe=n(IRe,"STRONG",{});var iEt=s(kFe);I2r=r(iEt,"electra"),iEt.forEach(t),q2r=r(IRe," \u2014 "),YQ=n(IRe,"A",{href:!0});var dEt=s(YQ);N2r=r(dEt,"TFElectraForMaskedLM"),dEt.forEach(t),j2r=r(IRe," (ELECTRA model)"),IRe.forEach(t),D2r=i(me),QE=n(me,"LI",{});var qRe=s(QE);SFe=n(qRe,"STRONG",{});var cEt=s(SFe);G2r=r(cEt,"flaubert"),cEt.forEach(t),O2r=r(qRe," \u2014 "),KQ=n(qRe,"A",{href:!0});var mEt=s(KQ);V2r=r(mEt,"TFFlaubertWithLMHeadModel"),mEt.forEach(t),X2r=r(qRe," (FlauBERT model)"),qRe.forEach(t),z2r=i(me),HE=n(me,"LI",{});var NRe=s(HE);RFe=n(NRe,"STRONG",{});var fEt=s(RFe);W2r=r(fEt,"funnel"),fEt.forEach(t),Q2r=r(NRe," \u2014 "),ZQ=n(NRe,"A",{href:!0});var gEt=s(ZQ);H2r=r(gEt,"TFFunnelForMaskedLM"),gEt.forEach(t),U2r=r(NRe," (Funnel Transformer model)"),NRe.forEach(t),J2r=i(me),UE=n(me,"LI",{});var jRe=s(UE);PFe=n(jRe,"STRONG",{});var hEt=s(PFe);Y2r=r(hEt,"layoutlm"),hEt.forEach(t),K2r=r(jRe," \u2014 "),eH=n(jRe,"A",{href:!0});var uEt=s(eH);Z2r=r(uEt,"TFLayoutLMForMaskedLM"),uEt.forEach(t),evr=r(jRe," (LayoutLM model)"),jRe.forEach(t),ovr=i(me),JE=n(me,"LI",{});var DRe=s(JE);BFe=n(DRe,"STRONG",{});var pEt=s(BFe);rvr=r(pEt,"longformer"),pEt.forEach(t),tvr=r(DRe," \u2014 "),oH=n(DRe,"A",{href:!0});var _Et=s(oH);avr=r(_Et,"TFLongformerForMaskedLM"),_Et.forEach(t),nvr=r(DRe," (Longformer model)"),DRe.forEach(t),svr=i(me),YE=n(me,"LI",{});var GRe=s(YE);IFe=n(GRe,"STRONG",{});var bEt=s(IFe);lvr=r(bEt,"mobilebert"),bEt.forEach(t),ivr=r(GRe," \u2014 "),rH=n(GRe,"A",{href:!0});var vEt=s(rH);dvr=r(vEt,"TFMobileBertForMaskedLM"),vEt.forEach(t),cvr=r(GRe," (MobileBERT model)"),GRe.forEach(t),mvr=i(me),KE=n(me,"LI",{});var ORe=s(KE);qFe=n(ORe,"STRONG",{});var FEt=s(qFe);fvr=r(FEt,"mpnet"),FEt.forEach(t),gvr=r(ORe," \u2014 "),tH=n(ORe,"A",{href:!0});var TEt=s(tH);hvr=r(TEt,"TFMPNetForMaskedLM"),TEt.forEach(t),uvr=r(ORe," (MPNet model)"),ORe.forEach(t),pvr=i(me),ZE=n(me,"LI",{});var VRe=s(ZE);NFe=n(VRe,"STRONG",{});var MEt=s(NFe);_vr=r(MEt,"rembert"),MEt.forEach(t),bvr=r(VRe," \u2014 "),aH=n(VRe,"A",{href:!0});var EEt=s(aH);vvr=r(EEt,"TFRemBertForMaskedLM"),EEt.forEach(t),Fvr=r(VRe," (RemBERT model)"),VRe.forEach(t),Tvr=i(me),eC=n(me,"LI",{});var XRe=s(eC);jFe=n(XRe,"STRONG",{});var CEt=s(jFe);Mvr=r(CEt,"roberta"),CEt.forEach(t),Evr=r(XRe," \u2014 "),nH=n(XRe,"A",{href:!0});var wEt=s(nH);Cvr=r(wEt,"TFRobertaForMaskedLM"),wEt.forEach(t),wvr=r(XRe," (RoBERTa model)"),XRe.forEach(t),Avr=i(me),oC=n(me,"LI",{});var zRe=s(oC);DFe=n(zRe,"STRONG",{});var AEt=s(DFe);yvr=r(AEt,"roformer"),AEt.forEach(t),Lvr=r(zRe," \u2014 "),sH=n(zRe,"A",{href:!0});var yEt=s(sH);xvr=r(yEt,"TFRoFormerForMaskedLM"),yEt.forEach(t),$vr=r(zRe," (RoFormer model)"),zRe.forEach(t),kvr=i(me),rC=n(me,"LI",{});var WRe=s(rC);GFe=n(WRe,"STRONG",{});var LEt=s(GFe);Svr=r(LEt,"tapas"),LEt.forEach(t),Rvr=r(WRe," \u2014 "),lH=n(WRe,"A",{href:!0});var xEt=s(lH);Pvr=r(xEt,"TFTapasForMaskedLM"),xEt.forEach(t),Bvr=r(WRe," (TAPAS model)"),WRe.forEach(t),Ivr=i(me),tC=n(me,"LI",{});var QRe=s(tC);OFe=n(QRe,"STRONG",{});var $Et=s(OFe);qvr=r($Et,"xlm"),$Et.forEach(t),Nvr=r(QRe," \u2014 "),iH=n(QRe,"A",{href:!0});var kEt=s(iH);jvr=r(kEt,"TFXLMWithLMHeadModel"),kEt.forEach(t),Dvr=r(QRe," (XLM model)"),QRe.forEach(t),Gvr=i(me),aC=n(me,"LI",{});var HRe=s(aC);VFe=n(HRe,"STRONG",{});var SEt=s(VFe);Ovr=r(SEt,"xlm-roberta"),SEt.forEach(t),Vvr=r(HRe," \u2014 "),dH=n(HRe,"A",{href:!0});var REt=s(dH);Xvr=r(REt,"TFXLMRobertaForMaskedLM"),REt.forEach(t),zvr=r(HRe," (XLM-RoBERTa model)"),HRe.forEach(t),me.forEach(t),Wvr=i(Ml),T(nC.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),YNe=i(m),rc=n(m,"H2",{class:!0});var tGe=s(rc);sC=n(tGe,"A",{id:!0,class:!0,href:!0});var PEt=s(sC);XFe=n(PEt,"SPAN",{});var BEt=s(XFe);T(x7.$$.fragment,BEt),BEt.forEach(t),PEt.forEach(t),Qvr=i(tGe),zFe=n(tGe,"SPAN",{});var IEt=s(zFe);Hvr=r(IEt,"TFAutoModelForSeq2SeqLM"),IEt.forEach(t),tGe.forEach(t),KNe=i(m),rr=n(m,"DIV",{class:!0});var El=s(rr);T($7.$$.fragment,El),Uvr=i(El),tc=n(El,"P",{});var cee=s(tc);Jvr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cH=n(cee,"A",{href:!0});var qEt=s(cH);Yvr=r(qEt,"from_pretrained()"),qEt.forEach(t),Kvr=r(cee," class method or the "),mH=n(cee,"A",{href:!0});var NEt=s(mH);Zvr=r(NEt,"from_config()"),NEt.forEach(t),eFr=r(cee,` class
method.`),cee.forEach(t),oFr=i(El),k7=n(El,"P",{});var aGe=s(k7);rFr=r(aGe,"This class cannot be instantiated directly using "),WFe=n(aGe,"CODE",{});var jEt=s(WFe);tFr=r(jEt,"__init__()"),jEt.forEach(t),aFr=r(aGe," (throws an error)."),aGe.forEach(t),nFr=i(El),St=n(El,"DIV",{class:!0});var k6=s(St);T(S7.$$.fragment,k6),sFr=i(k6),QFe=n(k6,"P",{});var DEt=s(QFe);lFr=r(DEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DEt.forEach(t),iFr=i(k6),ac=n(k6,"P",{});var mee=s(ac);dFr=r(mee,`Note:
Loading a model from its configuration file does `),HFe=n(mee,"STRONG",{});var GEt=s(HFe);cFr=r(GEt,"not"),GEt.forEach(t),mFr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(mee,"A",{href:!0});var OEt=s(fH);fFr=r(OEt,"from_pretrained()"),OEt.forEach(t),gFr=r(mee," to load the model weights."),mee.forEach(t),hFr=i(k6),T(lC.$$.fragment,k6),k6.forEach(t),uFr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(R7.$$.fragment,Cl),pFr=i(Cl),UFe=n(Cl,"P",{});var VEt=s(UFe);_Fr=r(VEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VEt.forEach(t),bFr=i(Cl),an=n(Cl,"P",{});var S6=s(an);vFr=r(S6,"The model class to instantiate is selected based on the "),JFe=n(S6,"CODE",{});var XEt=s(JFe);FFr=r(XEt,"model_type"),XEt.forEach(t),TFr=r(S6,` property of the config object (either
passed as an argument or loaded from `),YFe=n(S6,"CODE",{});var zEt=s(YFe);MFr=r(zEt,"pretrained_model_name_or_path"),zEt.forEach(t),EFr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(S6,"CODE",{});var WEt=s(KFe);CFr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),wFr=r(S6,":"),S6.forEach(t),AFr=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);iC=n(Be,"LI",{});var URe=s(iC);ZFe=n(URe,"STRONG",{});var QEt=s(ZFe);yFr=r(QEt,"bart"),QEt.forEach(t),LFr=r(URe," \u2014 "),gH=n(URe,"A",{href:!0});var HEt=s(gH);xFr=r(HEt,"TFBartForConditionalGeneration"),HEt.forEach(t),$Fr=r(URe," (BART model)"),URe.forEach(t),kFr=i(Be),dC=n(Be,"LI",{});var JRe=s(dC);e1e=n(JRe,"STRONG",{});var UEt=s(e1e);SFr=r(UEt,"blenderbot"),UEt.forEach(t),RFr=r(JRe," \u2014 "),hH=n(JRe,"A",{href:!0});var JEt=s(hH);PFr=r(JEt,"TFBlenderbotForConditionalGeneration"),JEt.forEach(t),BFr=r(JRe," (Blenderbot model)"),JRe.forEach(t),IFr=i(Be),cC=n(Be,"LI",{});var YRe=s(cC);o1e=n(YRe,"STRONG",{});var YEt=s(o1e);qFr=r(YEt,"blenderbot-small"),YEt.forEach(t),NFr=r(YRe," \u2014 "),uH=n(YRe,"A",{href:!0});var KEt=s(uH);jFr=r(KEt,"TFBlenderbotSmallForConditionalGeneration"),KEt.forEach(t),DFr=r(YRe," (BlenderbotSmall model)"),YRe.forEach(t),GFr=i(Be),mC=n(Be,"LI",{});var KRe=s(mC);r1e=n(KRe,"STRONG",{});var ZEt=s(r1e);OFr=r(ZEt,"encoder-decoder"),ZEt.forEach(t),VFr=r(KRe," \u2014 "),pH=n(KRe,"A",{href:!0});var eCt=s(pH);XFr=r(eCt,"TFEncoderDecoderModel"),eCt.forEach(t),zFr=r(KRe," (Encoder decoder model)"),KRe.forEach(t),WFr=i(Be),fC=n(Be,"LI",{});var ZRe=s(fC);t1e=n(ZRe,"STRONG",{});var oCt=s(t1e);QFr=r(oCt,"led"),oCt.forEach(t),HFr=r(ZRe," \u2014 "),_H=n(ZRe,"A",{href:!0});var rCt=s(_H);UFr=r(rCt,"TFLEDForConditionalGeneration"),rCt.forEach(t),JFr=r(ZRe," (LED model)"),ZRe.forEach(t),YFr=i(Be),gC=n(Be,"LI",{});var ePe=s(gC);a1e=n(ePe,"STRONG",{});var tCt=s(a1e);KFr=r(tCt,"marian"),tCt.forEach(t),ZFr=r(ePe," \u2014 "),bH=n(ePe,"A",{href:!0});var aCt=s(bH);e1r=r(aCt,"TFMarianMTModel"),aCt.forEach(t),o1r=r(ePe," (Marian model)"),ePe.forEach(t),r1r=i(Be),hC=n(Be,"LI",{});var oPe=s(hC);n1e=n(oPe,"STRONG",{});var nCt=s(n1e);t1r=r(nCt,"mbart"),nCt.forEach(t),a1r=r(oPe," \u2014 "),vH=n(oPe,"A",{href:!0});var sCt=s(vH);n1r=r(sCt,"TFMBartForConditionalGeneration"),sCt.forEach(t),s1r=r(oPe," (mBART model)"),oPe.forEach(t),l1r=i(Be),uC=n(Be,"LI",{});var rPe=s(uC);s1e=n(rPe,"STRONG",{});var lCt=s(s1e);i1r=r(lCt,"mt5"),lCt.forEach(t),d1r=r(rPe," \u2014 "),FH=n(rPe,"A",{href:!0});var iCt=s(FH);c1r=r(iCt,"TFMT5ForConditionalGeneration"),iCt.forEach(t),m1r=r(rPe," (mT5 model)"),rPe.forEach(t),f1r=i(Be),pC=n(Be,"LI",{});var tPe=s(pC);l1e=n(tPe,"STRONG",{});var dCt=s(l1e);g1r=r(dCt,"pegasus"),dCt.forEach(t),h1r=r(tPe," \u2014 "),TH=n(tPe,"A",{href:!0});var cCt=s(TH);u1r=r(cCt,"TFPegasusForConditionalGeneration"),cCt.forEach(t),p1r=r(tPe," (Pegasus model)"),tPe.forEach(t),_1r=i(Be),_C=n(Be,"LI",{});var aPe=s(_C);i1e=n(aPe,"STRONG",{});var mCt=s(i1e);b1r=r(mCt,"t5"),mCt.forEach(t),v1r=r(aPe," \u2014 "),MH=n(aPe,"A",{href:!0});var fCt=s(MH);F1r=r(fCt,"TFT5ForConditionalGeneration"),fCt.forEach(t),T1r=r(aPe," (T5 model)"),aPe.forEach(t),Be.forEach(t),M1r=i(Cl),T(bC.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),ZNe=i(m),nc=n(m,"H2",{class:!0});var nGe=s(nc);vC=n(nGe,"A",{id:!0,class:!0,href:!0});var gCt=s(vC);d1e=n(gCt,"SPAN",{});var hCt=s(d1e);T(P7.$$.fragment,hCt),hCt.forEach(t),gCt.forEach(t),E1r=i(nGe),c1e=n(nGe,"SPAN",{});var uCt=s(c1e);C1r=r(uCt,"TFAutoModelForSequenceClassification"),uCt.forEach(t),nGe.forEach(t),eje=i(m),tr=n(m,"DIV",{class:!0});var wl=s(tr);T(B7.$$.fragment,wl),w1r=i(wl),sc=n(wl,"P",{});var fee=s(sc);A1r=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EH=n(fee,"A",{href:!0});var pCt=s(EH);y1r=r(pCt,"from_pretrained()"),pCt.forEach(t),L1r=r(fee," class method or the "),CH=n(fee,"A",{href:!0});var _Ct=s(CH);x1r=r(_Ct,"from_config()"),_Ct.forEach(t),$1r=r(fee,` class
method.`),fee.forEach(t),k1r=i(wl),I7=n(wl,"P",{});var sGe=s(I7);S1r=r(sGe,"This class cannot be instantiated directly using "),m1e=n(sGe,"CODE",{});var bCt=s(m1e);R1r=r(bCt,"__init__()"),bCt.forEach(t),P1r=r(sGe," (throws an error)."),sGe.forEach(t),B1r=i(wl),Rt=n(wl,"DIV",{class:!0});var R6=s(Rt);T(q7.$$.fragment,R6),I1r=i(R6),f1e=n(R6,"P",{});var vCt=s(f1e);q1r=r(vCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vCt.forEach(t),N1r=i(R6),lc=n(R6,"P",{});var gee=s(lc);j1r=r(gee,`Note:
Loading a model from its configuration file does `),g1e=n(gee,"STRONG",{});var FCt=s(g1e);D1r=r(FCt,"not"),FCt.forEach(t),G1r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(gee,"A",{href:!0});var TCt=s(wH);O1r=r(TCt,"from_pretrained()"),TCt.forEach(t),V1r=r(gee," to load the model weights."),gee.forEach(t),X1r=i(R6),T(FC.$$.fragment,R6),R6.forEach(t),z1r=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(N7.$$.fragment,Al),W1r=i(Al),h1e=n(Al,"P",{});var MCt=s(h1e);Q1r=r(MCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MCt.forEach(t),H1r=i(Al),nn=n(Al,"P",{});var P6=s(nn);U1r=r(P6,"The model class to instantiate is selected based on the "),u1e=n(P6,"CODE",{});var ECt=s(u1e);J1r=r(ECt,"model_type"),ECt.forEach(t),Y1r=r(P6,` property of the config object (either
passed as an argument or loaded from `),p1e=n(P6,"CODE",{});var CCt=s(p1e);K1r=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),Z1r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(P6,"CODE",{});var wCt=s(_1e);eTr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),oTr=r(P6,":"),P6.forEach(t),rTr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);TC=n(ae,"LI",{});var nPe=s(TC);b1e=n(nPe,"STRONG",{});var ACt=s(b1e);tTr=r(ACt,"albert"),ACt.forEach(t),aTr=r(nPe," \u2014 "),AH=n(nPe,"A",{href:!0});var yCt=s(AH);nTr=r(yCt,"TFAlbertForSequenceClassification"),yCt.forEach(t),sTr=r(nPe," (ALBERT model)"),nPe.forEach(t),lTr=i(ae),MC=n(ae,"LI",{});var sPe=s(MC);v1e=n(sPe,"STRONG",{});var LCt=s(v1e);iTr=r(LCt,"bert"),LCt.forEach(t),dTr=r(sPe," \u2014 "),yH=n(sPe,"A",{href:!0});var xCt=s(yH);cTr=r(xCt,"TFBertForSequenceClassification"),xCt.forEach(t),mTr=r(sPe," (BERT model)"),sPe.forEach(t),fTr=i(ae),EC=n(ae,"LI",{});var lPe=s(EC);F1e=n(lPe,"STRONG",{});var $Ct=s(F1e);gTr=r($Ct,"camembert"),$Ct.forEach(t),hTr=r(lPe," \u2014 "),LH=n(lPe,"A",{href:!0});var kCt=s(LH);uTr=r(kCt,"TFCamembertForSequenceClassification"),kCt.forEach(t),pTr=r(lPe," (CamemBERT model)"),lPe.forEach(t),_Tr=i(ae),CC=n(ae,"LI",{});var iPe=s(CC);T1e=n(iPe,"STRONG",{});var SCt=s(T1e);bTr=r(SCt,"convbert"),SCt.forEach(t),vTr=r(iPe," \u2014 "),xH=n(iPe,"A",{href:!0});var RCt=s(xH);FTr=r(RCt,"TFConvBertForSequenceClassification"),RCt.forEach(t),TTr=r(iPe," (ConvBERT model)"),iPe.forEach(t),MTr=i(ae),wC=n(ae,"LI",{});var dPe=s(wC);M1e=n(dPe,"STRONG",{});var PCt=s(M1e);ETr=r(PCt,"ctrl"),PCt.forEach(t),CTr=r(dPe," \u2014 "),$H=n(dPe,"A",{href:!0});var BCt=s($H);wTr=r(BCt,"TFCTRLForSequenceClassification"),BCt.forEach(t),ATr=r(dPe," (CTRL model)"),dPe.forEach(t),yTr=i(ae),AC=n(ae,"LI",{});var cPe=s(AC);E1e=n(cPe,"STRONG",{});var ICt=s(E1e);LTr=r(ICt,"deberta"),ICt.forEach(t),xTr=r(cPe," \u2014 "),kH=n(cPe,"A",{href:!0});var qCt=s(kH);$Tr=r(qCt,"TFDebertaForSequenceClassification"),qCt.forEach(t),kTr=r(cPe," (DeBERTa model)"),cPe.forEach(t),STr=i(ae),yC=n(ae,"LI",{});var mPe=s(yC);C1e=n(mPe,"STRONG",{});var NCt=s(C1e);RTr=r(NCt,"deberta-v2"),NCt.forEach(t),PTr=r(mPe," \u2014 "),SH=n(mPe,"A",{href:!0});var jCt=s(SH);BTr=r(jCt,"TFDebertaV2ForSequenceClassification"),jCt.forEach(t),ITr=r(mPe," (DeBERTa-v2 model)"),mPe.forEach(t),qTr=i(ae),LC=n(ae,"LI",{});var fPe=s(LC);w1e=n(fPe,"STRONG",{});var DCt=s(w1e);NTr=r(DCt,"distilbert"),DCt.forEach(t),jTr=r(fPe," \u2014 "),RH=n(fPe,"A",{href:!0});var GCt=s(RH);DTr=r(GCt,"TFDistilBertForSequenceClassification"),GCt.forEach(t),GTr=r(fPe," (DistilBERT model)"),fPe.forEach(t),OTr=i(ae),xC=n(ae,"LI",{});var gPe=s(xC);A1e=n(gPe,"STRONG",{});var OCt=s(A1e);VTr=r(OCt,"electra"),OCt.forEach(t),XTr=r(gPe," \u2014 "),PH=n(gPe,"A",{href:!0});var VCt=s(PH);zTr=r(VCt,"TFElectraForSequenceClassification"),VCt.forEach(t),WTr=r(gPe," (ELECTRA model)"),gPe.forEach(t),QTr=i(ae),$C=n(ae,"LI",{});var hPe=s($C);y1e=n(hPe,"STRONG",{});var XCt=s(y1e);HTr=r(XCt,"flaubert"),XCt.forEach(t),UTr=r(hPe," \u2014 "),BH=n(hPe,"A",{href:!0});var zCt=s(BH);JTr=r(zCt,"TFFlaubertForSequenceClassification"),zCt.forEach(t),YTr=r(hPe," (FlauBERT model)"),hPe.forEach(t),KTr=i(ae),kC=n(ae,"LI",{});var uPe=s(kC);L1e=n(uPe,"STRONG",{});var WCt=s(L1e);ZTr=r(WCt,"funnel"),WCt.forEach(t),eMr=r(uPe," \u2014 "),IH=n(uPe,"A",{href:!0});var QCt=s(IH);oMr=r(QCt,"TFFunnelForSequenceClassification"),QCt.forEach(t),rMr=r(uPe," (Funnel Transformer model)"),uPe.forEach(t),tMr=i(ae),SC=n(ae,"LI",{});var pPe=s(SC);x1e=n(pPe,"STRONG",{});var HCt=s(x1e);aMr=r(HCt,"gpt2"),HCt.forEach(t),nMr=r(pPe," \u2014 "),qH=n(pPe,"A",{href:!0});var UCt=s(qH);sMr=r(UCt,"TFGPT2ForSequenceClassification"),UCt.forEach(t),lMr=r(pPe," (OpenAI GPT-2 model)"),pPe.forEach(t),iMr=i(ae),RC=n(ae,"LI",{});var _Pe=s(RC);$1e=n(_Pe,"STRONG",{});var JCt=s($1e);dMr=r(JCt,"gptj"),JCt.forEach(t),cMr=r(_Pe," \u2014 "),NH=n(_Pe,"A",{href:!0});var YCt=s(NH);mMr=r(YCt,"TFGPTJForSequenceClassification"),YCt.forEach(t),fMr=r(_Pe," (GPT-J model)"),_Pe.forEach(t),gMr=i(ae),PC=n(ae,"LI",{});var bPe=s(PC);k1e=n(bPe,"STRONG",{});var KCt=s(k1e);hMr=r(KCt,"layoutlm"),KCt.forEach(t),uMr=r(bPe," \u2014 "),jH=n(bPe,"A",{href:!0});var ZCt=s(jH);pMr=r(ZCt,"TFLayoutLMForSequenceClassification"),ZCt.forEach(t),_Mr=r(bPe," (LayoutLM model)"),bPe.forEach(t),bMr=i(ae),BC=n(ae,"LI",{});var vPe=s(BC);S1e=n(vPe,"STRONG",{});var e5t=s(S1e);vMr=r(e5t,"longformer"),e5t.forEach(t),FMr=r(vPe," \u2014 "),DH=n(vPe,"A",{href:!0});var o5t=s(DH);TMr=r(o5t,"TFLongformerForSequenceClassification"),o5t.forEach(t),MMr=r(vPe," (Longformer model)"),vPe.forEach(t),EMr=i(ae),IC=n(ae,"LI",{});var FPe=s(IC);R1e=n(FPe,"STRONG",{});var r5t=s(R1e);CMr=r(r5t,"mobilebert"),r5t.forEach(t),wMr=r(FPe," \u2014 "),GH=n(FPe,"A",{href:!0});var t5t=s(GH);AMr=r(t5t,"TFMobileBertForSequenceClassification"),t5t.forEach(t),yMr=r(FPe," (MobileBERT model)"),FPe.forEach(t),LMr=i(ae),qC=n(ae,"LI",{});var TPe=s(qC);P1e=n(TPe,"STRONG",{});var a5t=s(P1e);xMr=r(a5t,"mpnet"),a5t.forEach(t),$Mr=r(TPe," \u2014 "),OH=n(TPe,"A",{href:!0});var n5t=s(OH);kMr=r(n5t,"TFMPNetForSequenceClassification"),n5t.forEach(t),SMr=r(TPe," (MPNet model)"),TPe.forEach(t),RMr=i(ae),NC=n(ae,"LI",{});var MPe=s(NC);B1e=n(MPe,"STRONG",{});var s5t=s(B1e);PMr=r(s5t,"openai-gpt"),s5t.forEach(t),BMr=r(MPe," \u2014 "),VH=n(MPe,"A",{href:!0});var l5t=s(VH);IMr=r(l5t,"TFOpenAIGPTForSequenceClassification"),l5t.forEach(t),qMr=r(MPe," (OpenAI GPT model)"),MPe.forEach(t),NMr=i(ae),jC=n(ae,"LI",{});var EPe=s(jC);I1e=n(EPe,"STRONG",{});var i5t=s(I1e);jMr=r(i5t,"rembert"),i5t.forEach(t),DMr=r(EPe," \u2014 "),XH=n(EPe,"A",{href:!0});var d5t=s(XH);GMr=r(d5t,"TFRemBertForSequenceClassification"),d5t.forEach(t),OMr=r(EPe," (RemBERT model)"),EPe.forEach(t),VMr=i(ae),DC=n(ae,"LI",{});var CPe=s(DC);q1e=n(CPe,"STRONG",{});var c5t=s(q1e);XMr=r(c5t,"roberta"),c5t.forEach(t),zMr=r(CPe," \u2014 "),zH=n(CPe,"A",{href:!0});var m5t=s(zH);WMr=r(m5t,"TFRobertaForSequenceClassification"),m5t.forEach(t),QMr=r(CPe," (RoBERTa model)"),CPe.forEach(t),HMr=i(ae),GC=n(ae,"LI",{});var wPe=s(GC);N1e=n(wPe,"STRONG",{});var f5t=s(N1e);UMr=r(f5t,"roformer"),f5t.forEach(t),JMr=r(wPe," \u2014 "),WH=n(wPe,"A",{href:!0});var g5t=s(WH);YMr=r(g5t,"TFRoFormerForSequenceClassification"),g5t.forEach(t),KMr=r(wPe," (RoFormer model)"),wPe.forEach(t),ZMr=i(ae),OC=n(ae,"LI",{});var APe=s(OC);j1e=n(APe,"STRONG",{});var h5t=s(j1e);e4r=r(h5t,"tapas"),h5t.forEach(t),o4r=r(APe," \u2014 "),QH=n(APe,"A",{href:!0});var u5t=s(QH);r4r=r(u5t,"TFTapasForSequenceClassification"),u5t.forEach(t),t4r=r(APe," (TAPAS model)"),APe.forEach(t),a4r=i(ae),VC=n(ae,"LI",{});var yPe=s(VC);D1e=n(yPe,"STRONG",{});var p5t=s(D1e);n4r=r(p5t,"transfo-xl"),p5t.forEach(t),s4r=r(yPe," \u2014 "),HH=n(yPe,"A",{href:!0});var _5t=s(HH);l4r=r(_5t,"TFTransfoXLForSequenceClassification"),_5t.forEach(t),i4r=r(yPe," (Transformer-XL model)"),yPe.forEach(t),d4r=i(ae),XC=n(ae,"LI",{});var LPe=s(XC);G1e=n(LPe,"STRONG",{});var b5t=s(G1e);c4r=r(b5t,"xlm"),b5t.forEach(t),m4r=r(LPe," \u2014 "),UH=n(LPe,"A",{href:!0});var v5t=s(UH);f4r=r(v5t,"TFXLMForSequenceClassification"),v5t.forEach(t),g4r=r(LPe," (XLM model)"),LPe.forEach(t),h4r=i(ae),zC=n(ae,"LI",{});var xPe=s(zC);O1e=n(xPe,"STRONG",{});var F5t=s(O1e);u4r=r(F5t,"xlm-roberta"),F5t.forEach(t),p4r=r(xPe," \u2014 "),JH=n(xPe,"A",{href:!0});var T5t=s(JH);_4r=r(T5t,"TFXLMRobertaForSequenceClassification"),T5t.forEach(t),b4r=r(xPe," (XLM-RoBERTa model)"),xPe.forEach(t),v4r=i(ae),WC=n(ae,"LI",{});var $Pe=s(WC);V1e=n($Pe,"STRONG",{});var M5t=s(V1e);F4r=r(M5t,"xlnet"),M5t.forEach(t),T4r=r($Pe," \u2014 "),YH=n($Pe,"A",{href:!0});var E5t=s(YH);M4r=r(E5t,"TFXLNetForSequenceClassification"),E5t.forEach(t),E4r=r($Pe," (XLNet model)"),$Pe.forEach(t),ae.forEach(t),C4r=i(Al),T(QC.$$.fragment,Al),Al.forEach(t),wl.forEach(t),oje=i(m),ic=n(m,"H2",{class:!0});var lGe=s(ic);HC=n(lGe,"A",{id:!0,class:!0,href:!0});var C5t=s(HC);X1e=n(C5t,"SPAN",{});var w5t=s(X1e);T(j7.$$.fragment,w5t),w5t.forEach(t),C5t.forEach(t),w4r=i(lGe),z1e=n(lGe,"SPAN",{});var A5t=s(z1e);A4r=r(A5t,"TFAutoModelForMultipleChoice"),A5t.forEach(t),lGe.forEach(t),rje=i(m),ar=n(m,"DIV",{class:!0});var yl=s(ar);T(D7.$$.fragment,yl),y4r=i(yl),dc=n(yl,"P",{});var hee=s(dc);L4r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KH=n(hee,"A",{href:!0});var y5t=s(KH);x4r=r(y5t,"from_pretrained()"),y5t.forEach(t),$4r=r(hee," class method or the "),ZH=n(hee,"A",{href:!0});var L5t=s(ZH);k4r=r(L5t,"from_config()"),L5t.forEach(t),S4r=r(hee,` class
method.`),hee.forEach(t),R4r=i(yl),G7=n(yl,"P",{});var iGe=s(G7);P4r=r(iGe,"This class cannot be instantiated directly using "),W1e=n(iGe,"CODE",{});var x5t=s(W1e);B4r=r(x5t,"__init__()"),x5t.forEach(t),I4r=r(iGe," (throws an error)."),iGe.forEach(t),q4r=i(yl),Pt=n(yl,"DIV",{class:!0});var B6=s(Pt);T(O7.$$.fragment,B6),N4r=i(B6),Q1e=n(B6,"P",{});var $5t=s(Q1e);j4r=r($5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$5t.forEach(t),D4r=i(B6),cc=n(B6,"P",{});var uee=s(cc);G4r=r(uee,`Note:
Loading a model from its configuration file does `),H1e=n(uee,"STRONG",{});var k5t=s(H1e);O4r=r(k5t,"not"),k5t.forEach(t),V4r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(uee,"A",{href:!0});var S5t=s(eU);X4r=r(S5t,"from_pretrained()"),S5t.forEach(t),z4r=r(uee," to load the model weights."),uee.forEach(t),W4r=i(B6),T(UC.$$.fragment,B6),B6.forEach(t),Q4r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(V7.$$.fragment,Ll),H4r=i(Ll),U1e=n(Ll,"P",{});var R5t=s(U1e);U4r=r(R5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),R5t.forEach(t),J4r=i(Ll),sn=n(Ll,"P",{});var I6=s(sn);Y4r=r(I6,"The model class to instantiate is selected based on the "),J1e=n(I6,"CODE",{});var P5t=s(J1e);K4r=r(P5t,"model_type"),P5t.forEach(t),Z4r=r(I6,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(I6,"CODE",{});var B5t=s(Y1e);eEr=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),oEr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(I6,"CODE",{});var I5t=s(K1e);rEr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),tEr=r(I6,":"),I6.forEach(t),aEr=i(Ll),ue=n(Ll,"UL",{});var be=s(ue);JC=n(be,"LI",{});var kPe=s(JC);Z1e=n(kPe,"STRONG",{});var q5t=s(Z1e);nEr=r(q5t,"albert"),q5t.forEach(t),sEr=r(kPe," \u2014 "),oU=n(kPe,"A",{href:!0});var N5t=s(oU);lEr=r(N5t,"TFAlbertForMultipleChoice"),N5t.forEach(t),iEr=r(kPe," (ALBERT model)"),kPe.forEach(t),dEr=i(be),YC=n(be,"LI",{});var SPe=s(YC);eTe=n(SPe,"STRONG",{});var j5t=s(eTe);cEr=r(j5t,"bert"),j5t.forEach(t),mEr=r(SPe," \u2014 "),rU=n(SPe,"A",{href:!0});var D5t=s(rU);fEr=r(D5t,"TFBertForMultipleChoice"),D5t.forEach(t),gEr=r(SPe," (BERT model)"),SPe.forEach(t),hEr=i(be),KC=n(be,"LI",{});var RPe=s(KC);oTe=n(RPe,"STRONG",{});var G5t=s(oTe);uEr=r(G5t,"camembert"),G5t.forEach(t),pEr=r(RPe," \u2014 "),tU=n(RPe,"A",{href:!0});var O5t=s(tU);_Er=r(O5t,"TFCamembertForMultipleChoice"),O5t.forEach(t),bEr=r(RPe," (CamemBERT model)"),RPe.forEach(t),vEr=i(be),ZC=n(be,"LI",{});var PPe=s(ZC);rTe=n(PPe,"STRONG",{});var V5t=s(rTe);FEr=r(V5t,"convbert"),V5t.forEach(t),TEr=r(PPe," \u2014 "),aU=n(PPe,"A",{href:!0});var X5t=s(aU);MEr=r(X5t,"TFConvBertForMultipleChoice"),X5t.forEach(t),EEr=r(PPe," (ConvBERT model)"),PPe.forEach(t),CEr=i(be),e5=n(be,"LI",{});var BPe=s(e5);tTe=n(BPe,"STRONG",{});var z5t=s(tTe);wEr=r(z5t,"distilbert"),z5t.forEach(t),AEr=r(BPe," \u2014 "),nU=n(BPe,"A",{href:!0});var W5t=s(nU);yEr=r(W5t,"TFDistilBertForMultipleChoice"),W5t.forEach(t),LEr=r(BPe," (DistilBERT model)"),BPe.forEach(t),xEr=i(be),o5=n(be,"LI",{});var IPe=s(o5);aTe=n(IPe,"STRONG",{});var Q5t=s(aTe);$Er=r(Q5t,"electra"),Q5t.forEach(t),kEr=r(IPe," \u2014 "),sU=n(IPe,"A",{href:!0});var H5t=s(sU);SEr=r(H5t,"TFElectraForMultipleChoice"),H5t.forEach(t),REr=r(IPe," (ELECTRA model)"),IPe.forEach(t),PEr=i(be),r5=n(be,"LI",{});var qPe=s(r5);nTe=n(qPe,"STRONG",{});var U5t=s(nTe);BEr=r(U5t,"flaubert"),U5t.forEach(t),IEr=r(qPe," \u2014 "),lU=n(qPe,"A",{href:!0});var J5t=s(lU);qEr=r(J5t,"TFFlaubertForMultipleChoice"),J5t.forEach(t),NEr=r(qPe," (FlauBERT model)"),qPe.forEach(t),jEr=i(be),t5=n(be,"LI",{});var NPe=s(t5);sTe=n(NPe,"STRONG",{});var Y5t=s(sTe);DEr=r(Y5t,"funnel"),Y5t.forEach(t),GEr=r(NPe," \u2014 "),iU=n(NPe,"A",{href:!0});var K5t=s(iU);OEr=r(K5t,"TFFunnelForMultipleChoice"),K5t.forEach(t),VEr=r(NPe," (Funnel Transformer model)"),NPe.forEach(t),XEr=i(be),a5=n(be,"LI",{});var jPe=s(a5);lTe=n(jPe,"STRONG",{});var Z5t=s(lTe);zEr=r(Z5t,"longformer"),Z5t.forEach(t),WEr=r(jPe," \u2014 "),dU=n(jPe,"A",{href:!0});var e3t=s(dU);QEr=r(e3t,"TFLongformerForMultipleChoice"),e3t.forEach(t),HEr=r(jPe," (Longformer model)"),jPe.forEach(t),UEr=i(be),n5=n(be,"LI",{});var DPe=s(n5);iTe=n(DPe,"STRONG",{});var o3t=s(iTe);JEr=r(o3t,"mobilebert"),o3t.forEach(t),YEr=r(DPe," \u2014 "),cU=n(DPe,"A",{href:!0});var r3t=s(cU);KEr=r(r3t,"TFMobileBertForMultipleChoice"),r3t.forEach(t),ZEr=r(DPe," (MobileBERT model)"),DPe.forEach(t),eCr=i(be),s5=n(be,"LI",{});var GPe=s(s5);dTe=n(GPe,"STRONG",{});var t3t=s(dTe);oCr=r(t3t,"mpnet"),t3t.forEach(t),rCr=r(GPe," \u2014 "),mU=n(GPe,"A",{href:!0});var a3t=s(mU);tCr=r(a3t,"TFMPNetForMultipleChoice"),a3t.forEach(t),aCr=r(GPe," (MPNet model)"),GPe.forEach(t),nCr=i(be),l5=n(be,"LI",{});var OPe=s(l5);cTe=n(OPe,"STRONG",{});var n3t=s(cTe);sCr=r(n3t,"rembert"),n3t.forEach(t),lCr=r(OPe," \u2014 "),fU=n(OPe,"A",{href:!0});var s3t=s(fU);iCr=r(s3t,"TFRemBertForMultipleChoice"),s3t.forEach(t),dCr=r(OPe," (RemBERT model)"),OPe.forEach(t),cCr=i(be),i5=n(be,"LI",{});var VPe=s(i5);mTe=n(VPe,"STRONG",{});var l3t=s(mTe);mCr=r(l3t,"roberta"),l3t.forEach(t),fCr=r(VPe," \u2014 "),gU=n(VPe,"A",{href:!0});var i3t=s(gU);gCr=r(i3t,"TFRobertaForMultipleChoice"),i3t.forEach(t),hCr=r(VPe," (RoBERTa model)"),VPe.forEach(t),uCr=i(be),d5=n(be,"LI",{});var XPe=s(d5);fTe=n(XPe,"STRONG",{});var d3t=s(fTe);pCr=r(d3t,"roformer"),d3t.forEach(t),_Cr=r(XPe," \u2014 "),hU=n(XPe,"A",{href:!0});var c3t=s(hU);bCr=r(c3t,"TFRoFormerForMultipleChoice"),c3t.forEach(t),vCr=r(XPe," (RoFormer model)"),XPe.forEach(t),FCr=i(be),c5=n(be,"LI",{});var zPe=s(c5);gTe=n(zPe,"STRONG",{});var m3t=s(gTe);TCr=r(m3t,"xlm"),m3t.forEach(t),MCr=r(zPe," \u2014 "),uU=n(zPe,"A",{href:!0});var f3t=s(uU);ECr=r(f3t,"TFXLMForMultipleChoice"),f3t.forEach(t),CCr=r(zPe," (XLM model)"),zPe.forEach(t),wCr=i(be),m5=n(be,"LI",{});var WPe=s(m5);hTe=n(WPe,"STRONG",{});var g3t=s(hTe);ACr=r(g3t,"xlm-roberta"),g3t.forEach(t),yCr=r(WPe," \u2014 "),pU=n(WPe,"A",{href:!0});var h3t=s(pU);LCr=r(h3t,"TFXLMRobertaForMultipleChoice"),h3t.forEach(t),xCr=r(WPe," (XLM-RoBERTa model)"),WPe.forEach(t),$Cr=i(be),f5=n(be,"LI",{});var QPe=s(f5);uTe=n(QPe,"STRONG",{});var u3t=s(uTe);kCr=r(u3t,"xlnet"),u3t.forEach(t),SCr=r(QPe," \u2014 "),_U=n(QPe,"A",{href:!0});var p3t=s(_U);RCr=r(p3t,"TFXLNetForMultipleChoice"),p3t.forEach(t),PCr=r(QPe," (XLNet model)"),QPe.forEach(t),be.forEach(t),BCr=i(Ll),T(g5.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),tje=i(m),mc=n(m,"H2",{class:!0});var dGe=s(mc);h5=n(dGe,"A",{id:!0,class:!0,href:!0});var _3t=s(h5);pTe=n(_3t,"SPAN",{});var b3t=s(pTe);T(X7.$$.fragment,b3t),b3t.forEach(t),_3t.forEach(t),ICr=i(dGe),_Te=n(dGe,"SPAN",{});var v3t=s(_Te);qCr=r(v3t,"TFAutoModelForNextSentencePrediction"),v3t.forEach(t),dGe.forEach(t),aje=i(m),nr=n(m,"DIV",{class:!0});var xl=s(nr);T(z7.$$.fragment,xl),NCr=i(xl),fc=n(xl,"P",{});var pee=s(fc);jCr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bU=n(pee,"A",{href:!0});var F3t=s(bU);DCr=r(F3t,"from_pretrained()"),F3t.forEach(t),GCr=r(pee," class method or the "),vU=n(pee,"A",{href:!0});var T3t=s(vU);OCr=r(T3t,"from_config()"),T3t.forEach(t),VCr=r(pee,` class
method.`),pee.forEach(t),XCr=i(xl),W7=n(xl,"P",{});var cGe=s(W7);zCr=r(cGe,"This class cannot be instantiated directly using "),bTe=n(cGe,"CODE",{});var M3t=s(bTe);WCr=r(M3t,"__init__()"),M3t.forEach(t),QCr=r(cGe," (throws an error)."),cGe.forEach(t),HCr=i(xl),Bt=n(xl,"DIV",{class:!0});var q6=s(Bt);T(Q7.$$.fragment,q6),UCr=i(q6),vTe=n(q6,"P",{});var E3t=s(vTe);JCr=r(E3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E3t.forEach(t),YCr=i(q6),gc=n(q6,"P",{});var _ee=s(gc);KCr=r(_ee,`Note:
Loading a model from its configuration file does `),FTe=n(_ee,"STRONG",{});var C3t=s(FTe);ZCr=r(C3t,"not"),C3t.forEach(t),e5r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(_ee,"A",{href:!0});var w3t=s(FU);o5r=r(w3t,"from_pretrained()"),w3t.forEach(t),r5r=r(_ee," to load the model weights."),_ee.forEach(t),t5r=i(q6),T(u5.$$.fragment,q6),q6.forEach(t),a5r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(H7.$$.fragment,$l),n5r=i($l),TTe=n($l,"P",{});var A3t=s(TTe);s5r=r(A3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),A3t.forEach(t),l5r=i($l),ln=n($l,"P",{});var N6=s(ln);i5r=r(N6,"The model class to instantiate is selected based on the "),MTe=n(N6,"CODE",{});var y3t=s(MTe);d5r=r(y3t,"model_type"),y3t.forEach(t),c5r=r(N6,` property of the config object (either
passed as an argument or loaded from `),ETe=n(N6,"CODE",{});var L3t=s(ETe);m5r=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),f5r=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(N6,"CODE",{});var x3t=s(CTe);g5r=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),h5r=r(N6,":"),N6.forEach(t),u5r=i($l),U7=n($l,"UL",{});var mGe=s(U7);p5=n(mGe,"LI",{});var HPe=s(p5);wTe=n(HPe,"STRONG",{});var $3t=s(wTe);p5r=r($3t,"bert"),$3t.forEach(t),_5r=r(HPe," \u2014 "),TU=n(HPe,"A",{href:!0});var k3t=s(TU);b5r=r(k3t,"TFBertForNextSentencePrediction"),k3t.forEach(t),v5r=r(HPe," (BERT model)"),HPe.forEach(t),F5r=i(mGe),_5=n(mGe,"LI",{});var UPe=s(_5);ATe=n(UPe,"STRONG",{});var S3t=s(ATe);T5r=r(S3t,"mobilebert"),S3t.forEach(t),M5r=r(UPe," \u2014 "),MU=n(UPe,"A",{href:!0});var R3t=s(MU);E5r=r(R3t,"TFMobileBertForNextSentencePrediction"),R3t.forEach(t),C5r=r(UPe," (MobileBERT model)"),UPe.forEach(t),mGe.forEach(t),w5r=i($l),T(b5.$$.fragment,$l),$l.forEach(t),xl.forEach(t),nje=i(m),hc=n(m,"H2",{class:!0});var fGe=s(hc);v5=n(fGe,"A",{id:!0,class:!0,href:!0});var P3t=s(v5);yTe=n(P3t,"SPAN",{});var B3t=s(yTe);T(J7.$$.fragment,B3t),B3t.forEach(t),P3t.forEach(t),A5r=i(fGe),LTe=n(fGe,"SPAN",{});var I3t=s(LTe);y5r=r(I3t,"TFAutoModelForTableQuestionAnswering"),I3t.forEach(t),fGe.forEach(t),sje=i(m),sr=n(m,"DIV",{class:!0});var kl=s(sr);T(Y7.$$.fragment,kl),L5r=i(kl),uc=n(kl,"P",{});var bee=s(uc);x5r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EU=n(bee,"A",{href:!0});var q3t=s(EU);$5r=r(q3t,"from_pretrained()"),q3t.forEach(t),k5r=r(bee," class method or the "),CU=n(bee,"A",{href:!0});var N3t=s(CU);S5r=r(N3t,"from_config()"),N3t.forEach(t),R5r=r(bee,` class
method.`),bee.forEach(t),P5r=i(kl),K7=n(kl,"P",{});var gGe=s(K7);B5r=r(gGe,"This class cannot be instantiated directly using "),xTe=n(gGe,"CODE",{});var j3t=s(xTe);I5r=r(j3t,"__init__()"),j3t.forEach(t),q5r=r(gGe," (throws an error)."),gGe.forEach(t),N5r=i(kl),It=n(kl,"DIV",{class:!0});var j6=s(It);T(Z7.$$.fragment,j6),j5r=i(j6),$Te=n(j6,"P",{});var D3t=s($Te);D5r=r(D3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D3t.forEach(t),G5r=i(j6),pc=n(j6,"P",{});var vee=s(pc);O5r=r(vee,`Note:
Loading a model from its configuration file does `),kTe=n(vee,"STRONG",{});var G3t=s(kTe);V5r=r(G3t,"not"),G3t.forEach(t),X5r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(vee,"A",{href:!0});var O3t=s(wU);z5r=r(O3t,"from_pretrained()"),O3t.forEach(t),W5r=r(vee," to load the model weights."),vee.forEach(t),Q5r=i(j6),T(F5.$$.fragment,j6),j6.forEach(t),H5r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(e9.$$.fragment,Sl),U5r=i(Sl),STe=n(Sl,"P",{});var V3t=s(STe);J5r=r(V3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),V3t.forEach(t),Y5r=i(Sl),dn=n(Sl,"P",{});var D6=s(dn);K5r=r(D6,"The model class to instantiate is selected based on the "),RTe=n(D6,"CODE",{});var X3t=s(RTe);Z5r=r(X3t,"model_type"),X3t.forEach(t),e3r=r(D6,` property of the config object (either
passed as an argument or loaded from `),PTe=n(D6,"CODE",{});var z3t=s(PTe);o3r=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),r3r=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(D6,"CODE",{});var W3t=s(BTe);t3r=r(W3t,"pretrained_model_name_or_path"),W3t.forEach(t),a3r=r(D6,":"),D6.forEach(t),n3r=i(Sl),ITe=n(Sl,"UL",{});var Q3t=s(ITe);T5=n(Q3t,"LI",{});var JPe=s(T5);qTe=n(JPe,"STRONG",{});var H3t=s(qTe);s3r=r(H3t,"tapas"),H3t.forEach(t),l3r=r(JPe," \u2014 "),AU=n(JPe,"A",{href:!0});var U3t=s(AU);i3r=r(U3t,"TFTapasForQuestionAnswering"),U3t.forEach(t),d3r=r(JPe," (TAPAS model)"),JPe.forEach(t),Q3t.forEach(t),c3r=i(Sl),T(M5.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),lje=i(m),_c=n(m,"H2",{class:!0});var hGe=s(_c);E5=n(hGe,"A",{id:!0,class:!0,href:!0});var J3t=s(E5);NTe=n(J3t,"SPAN",{});var Y3t=s(NTe);T(o9.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),m3r=i(hGe),jTe=n(hGe,"SPAN",{});var K3t=s(jTe);f3r=r(K3t,"TFAutoModelForTokenClassification"),K3t.forEach(t),hGe.forEach(t),ije=i(m),lr=n(m,"DIV",{class:!0});var Rl=s(lr);T(r9.$$.fragment,Rl),g3r=i(Rl),bc=n(Rl,"P",{});var Fee=s(bc);h3r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yU=n(Fee,"A",{href:!0});var Z3t=s(yU);u3r=r(Z3t,"from_pretrained()"),Z3t.forEach(t),p3r=r(Fee," class method or the "),LU=n(Fee,"A",{href:!0});var ewt=s(LU);_3r=r(ewt,"from_config()"),ewt.forEach(t),b3r=r(Fee,` class
method.`),Fee.forEach(t),v3r=i(Rl),t9=n(Rl,"P",{});var uGe=s(t9);F3r=r(uGe,"This class cannot be instantiated directly using "),DTe=n(uGe,"CODE",{});var owt=s(DTe);T3r=r(owt,"__init__()"),owt.forEach(t),M3r=r(uGe," (throws an error)."),uGe.forEach(t),E3r=i(Rl),qt=n(Rl,"DIV",{class:!0});var G6=s(qt);T(a9.$$.fragment,G6),C3r=i(G6),GTe=n(G6,"P",{});var rwt=s(GTe);w3r=r(rwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rwt.forEach(t),A3r=i(G6),vc=n(G6,"P",{});var Tee=s(vc);y3r=r(Tee,`Note:
Loading a model from its configuration file does `),OTe=n(Tee,"STRONG",{});var twt=s(OTe);L3r=r(twt,"not"),twt.forEach(t),x3r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(Tee,"A",{href:!0});var awt=s(xU);$3r=r(awt,"from_pretrained()"),awt.forEach(t),k3r=r(Tee," to load the model weights."),Tee.forEach(t),S3r=i(G6),T(C5.$$.fragment,G6),G6.forEach(t),R3r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(n9.$$.fragment,Pl),P3r=i(Pl),VTe=n(Pl,"P",{});var nwt=s(VTe);B3r=r(nwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nwt.forEach(t),I3r=i(Pl),cn=n(Pl,"P",{});var O6=s(cn);q3r=r(O6,"The model class to instantiate is selected based on the "),XTe=n(O6,"CODE",{});var swt=s(XTe);N3r=r(swt,"model_type"),swt.forEach(t),j3r=r(O6,` property of the config object (either
passed as an argument or loaded from `),zTe=n(O6,"CODE",{});var lwt=s(zTe);D3r=r(lwt,"pretrained_model_name_or_path"),lwt.forEach(t),G3r=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(O6,"CODE",{});var iwt=s(WTe);O3r=r(iwt,"pretrained_model_name_or_path"),iwt.forEach(t),V3r=r(O6,":"),O6.forEach(t),X3r=i(Pl),de=n(Pl,"UL",{});var fe=s(de);w5=n(fe,"LI",{});var YPe=s(w5);QTe=n(YPe,"STRONG",{});var dwt=s(QTe);z3r=r(dwt,"albert"),dwt.forEach(t),W3r=r(YPe," \u2014 "),$U=n(YPe,"A",{href:!0});var cwt=s($U);Q3r=r(cwt,"TFAlbertForTokenClassification"),cwt.forEach(t),H3r=r(YPe," (ALBERT model)"),YPe.forEach(t),U3r=i(fe),A5=n(fe,"LI",{});var KPe=s(A5);HTe=n(KPe,"STRONG",{});var mwt=s(HTe);J3r=r(mwt,"bert"),mwt.forEach(t),Y3r=r(KPe," \u2014 "),kU=n(KPe,"A",{href:!0});var fwt=s(kU);K3r=r(fwt,"TFBertForTokenClassification"),fwt.forEach(t),Z3r=r(KPe," (BERT model)"),KPe.forEach(t),ewr=i(fe),y5=n(fe,"LI",{});var ZPe=s(y5);UTe=n(ZPe,"STRONG",{});var gwt=s(UTe);owr=r(gwt,"camembert"),gwt.forEach(t),rwr=r(ZPe," \u2014 "),SU=n(ZPe,"A",{href:!0});var hwt=s(SU);twr=r(hwt,"TFCamembertForTokenClassification"),hwt.forEach(t),awr=r(ZPe," (CamemBERT model)"),ZPe.forEach(t),nwr=i(fe),L5=n(fe,"LI",{});var eBe=s(L5);JTe=n(eBe,"STRONG",{});var uwt=s(JTe);swr=r(uwt,"convbert"),uwt.forEach(t),lwr=r(eBe," \u2014 "),RU=n(eBe,"A",{href:!0});var pwt=s(RU);iwr=r(pwt,"TFConvBertForTokenClassification"),pwt.forEach(t),dwr=r(eBe," (ConvBERT model)"),eBe.forEach(t),cwr=i(fe),x5=n(fe,"LI",{});var oBe=s(x5);YTe=n(oBe,"STRONG",{});var _wt=s(YTe);mwr=r(_wt,"deberta"),_wt.forEach(t),fwr=r(oBe," \u2014 "),PU=n(oBe,"A",{href:!0});var bwt=s(PU);gwr=r(bwt,"TFDebertaForTokenClassification"),bwt.forEach(t),hwr=r(oBe," (DeBERTa model)"),oBe.forEach(t),uwr=i(fe),$5=n(fe,"LI",{});var rBe=s($5);KTe=n(rBe,"STRONG",{});var vwt=s(KTe);pwr=r(vwt,"deberta-v2"),vwt.forEach(t),_wr=r(rBe," \u2014 "),BU=n(rBe,"A",{href:!0});var Fwt=s(BU);bwr=r(Fwt,"TFDebertaV2ForTokenClassification"),Fwt.forEach(t),vwr=r(rBe," (DeBERTa-v2 model)"),rBe.forEach(t),Fwr=i(fe),k5=n(fe,"LI",{});var tBe=s(k5);ZTe=n(tBe,"STRONG",{});var Twt=s(ZTe);Twr=r(Twt,"distilbert"),Twt.forEach(t),Mwr=r(tBe," \u2014 "),IU=n(tBe,"A",{href:!0});var Mwt=s(IU);Ewr=r(Mwt,"TFDistilBertForTokenClassification"),Mwt.forEach(t),Cwr=r(tBe," (DistilBERT model)"),tBe.forEach(t),wwr=i(fe),S5=n(fe,"LI",{});var aBe=s(S5);eMe=n(aBe,"STRONG",{});var Ewt=s(eMe);Awr=r(Ewt,"electra"),Ewt.forEach(t),ywr=r(aBe," \u2014 "),qU=n(aBe,"A",{href:!0});var Cwt=s(qU);Lwr=r(Cwt,"TFElectraForTokenClassification"),Cwt.forEach(t),xwr=r(aBe," (ELECTRA model)"),aBe.forEach(t),$wr=i(fe),R5=n(fe,"LI",{});var nBe=s(R5);oMe=n(nBe,"STRONG",{});var wwt=s(oMe);kwr=r(wwt,"flaubert"),wwt.forEach(t),Swr=r(nBe," \u2014 "),NU=n(nBe,"A",{href:!0});var Awt=s(NU);Rwr=r(Awt,"TFFlaubertForTokenClassification"),Awt.forEach(t),Pwr=r(nBe," (FlauBERT model)"),nBe.forEach(t),Bwr=i(fe),P5=n(fe,"LI",{});var sBe=s(P5);rMe=n(sBe,"STRONG",{});var ywt=s(rMe);Iwr=r(ywt,"funnel"),ywt.forEach(t),qwr=r(sBe," \u2014 "),jU=n(sBe,"A",{href:!0});var Lwt=s(jU);Nwr=r(Lwt,"TFFunnelForTokenClassification"),Lwt.forEach(t),jwr=r(sBe," (Funnel Transformer model)"),sBe.forEach(t),Dwr=i(fe),B5=n(fe,"LI",{});var lBe=s(B5);tMe=n(lBe,"STRONG",{});var xwt=s(tMe);Gwr=r(xwt,"layoutlm"),xwt.forEach(t),Owr=r(lBe," \u2014 "),DU=n(lBe,"A",{href:!0});var $wt=s(DU);Vwr=r($wt,"TFLayoutLMForTokenClassification"),$wt.forEach(t),Xwr=r(lBe," (LayoutLM model)"),lBe.forEach(t),zwr=i(fe),I5=n(fe,"LI",{});var iBe=s(I5);aMe=n(iBe,"STRONG",{});var kwt=s(aMe);Wwr=r(kwt,"longformer"),kwt.forEach(t),Qwr=r(iBe," \u2014 "),GU=n(iBe,"A",{href:!0});var Swt=s(GU);Hwr=r(Swt,"TFLongformerForTokenClassification"),Swt.forEach(t),Uwr=r(iBe," (Longformer model)"),iBe.forEach(t),Jwr=i(fe),q5=n(fe,"LI",{});var dBe=s(q5);nMe=n(dBe,"STRONG",{});var Rwt=s(nMe);Ywr=r(Rwt,"mobilebert"),Rwt.forEach(t),Kwr=r(dBe," \u2014 "),OU=n(dBe,"A",{href:!0});var Pwt=s(OU);Zwr=r(Pwt,"TFMobileBertForTokenClassification"),Pwt.forEach(t),e0r=r(dBe," (MobileBERT model)"),dBe.forEach(t),o0r=i(fe),N5=n(fe,"LI",{});var cBe=s(N5);sMe=n(cBe,"STRONG",{});var Bwt=s(sMe);r0r=r(Bwt,"mpnet"),Bwt.forEach(t),t0r=r(cBe," \u2014 "),VU=n(cBe,"A",{href:!0});var Iwt=s(VU);a0r=r(Iwt,"TFMPNetForTokenClassification"),Iwt.forEach(t),n0r=r(cBe," (MPNet model)"),cBe.forEach(t),s0r=i(fe),j5=n(fe,"LI",{});var mBe=s(j5);lMe=n(mBe,"STRONG",{});var qwt=s(lMe);l0r=r(qwt,"rembert"),qwt.forEach(t),i0r=r(mBe," \u2014 "),XU=n(mBe,"A",{href:!0});var Nwt=s(XU);d0r=r(Nwt,"TFRemBertForTokenClassification"),Nwt.forEach(t),c0r=r(mBe," (RemBERT model)"),mBe.forEach(t),m0r=i(fe),D5=n(fe,"LI",{});var fBe=s(D5);iMe=n(fBe,"STRONG",{});var jwt=s(iMe);f0r=r(jwt,"roberta"),jwt.forEach(t),g0r=r(fBe," \u2014 "),zU=n(fBe,"A",{href:!0});var Dwt=s(zU);h0r=r(Dwt,"TFRobertaForTokenClassification"),Dwt.forEach(t),u0r=r(fBe," (RoBERTa model)"),fBe.forEach(t),p0r=i(fe),G5=n(fe,"LI",{});var gBe=s(G5);dMe=n(gBe,"STRONG",{});var Gwt=s(dMe);_0r=r(Gwt,"roformer"),Gwt.forEach(t),b0r=r(gBe," \u2014 "),WU=n(gBe,"A",{href:!0});var Owt=s(WU);v0r=r(Owt,"TFRoFormerForTokenClassification"),Owt.forEach(t),F0r=r(gBe," (RoFormer model)"),gBe.forEach(t),T0r=i(fe),O5=n(fe,"LI",{});var hBe=s(O5);cMe=n(hBe,"STRONG",{});var Vwt=s(cMe);M0r=r(Vwt,"xlm"),Vwt.forEach(t),E0r=r(hBe," \u2014 "),QU=n(hBe,"A",{href:!0});var Xwt=s(QU);C0r=r(Xwt,"TFXLMForTokenClassification"),Xwt.forEach(t),w0r=r(hBe," (XLM model)"),hBe.forEach(t),A0r=i(fe),V5=n(fe,"LI",{});var uBe=s(V5);mMe=n(uBe,"STRONG",{});var zwt=s(mMe);y0r=r(zwt,"xlm-roberta"),zwt.forEach(t),L0r=r(uBe," \u2014 "),HU=n(uBe,"A",{href:!0});var Wwt=s(HU);x0r=r(Wwt,"TFXLMRobertaForTokenClassification"),Wwt.forEach(t),$0r=r(uBe," (XLM-RoBERTa model)"),uBe.forEach(t),k0r=i(fe),X5=n(fe,"LI",{});var pBe=s(X5);fMe=n(pBe,"STRONG",{});var Qwt=s(fMe);S0r=r(Qwt,"xlnet"),Qwt.forEach(t),R0r=r(pBe," \u2014 "),UU=n(pBe,"A",{href:!0});var Hwt=s(UU);P0r=r(Hwt,"TFXLNetForTokenClassification"),Hwt.forEach(t),B0r=r(pBe," (XLNet model)"),pBe.forEach(t),fe.forEach(t),I0r=i(Pl),T(z5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),dje=i(m),Fc=n(m,"H2",{class:!0});var pGe=s(Fc);W5=n(pGe,"A",{id:!0,class:!0,href:!0});var Uwt=s(W5);gMe=n(Uwt,"SPAN",{});var Jwt=s(gMe);T(s9.$$.fragment,Jwt),Jwt.forEach(t),Uwt.forEach(t),q0r=i(pGe),hMe=n(pGe,"SPAN",{});var Ywt=s(hMe);N0r=r(Ywt,"TFAutoModelForQuestionAnswering"),Ywt.forEach(t),pGe.forEach(t),cje=i(m),ir=n(m,"DIV",{class:!0});var Bl=s(ir);T(l9.$$.fragment,Bl),j0r=i(Bl),Tc=n(Bl,"P",{});var Mee=s(Tc);D0r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JU=n(Mee,"A",{href:!0});var Kwt=s(JU);G0r=r(Kwt,"from_pretrained()"),Kwt.forEach(t),O0r=r(Mee," class method or the "),YU=n(Mee,"A",{href:!0});var Zwt=s(YU);V0r=r(Zwt,"from_config()"),Zwt.forEach(t),X0r=r(Mee,` class
method.`),Mee.forEach(t),z0r=i(Bl),i9=n(Bl,"P",{});var _Ge=s(i9);W0r=r(_Ge,"This class cannot be instantiated directly using "),uMe=n(_Ge,"CODE",{});var e0t=s(uMe);Q0r=r(e0t,"__init__()"),e0t.forEach(t),H0r=r(_Ge," (throws an error)."),_Ge.forEach(t),U0r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var V6=s(Nt);T(d9.$$.fragment,V6),J0r=i(V6),pMe=n(V6,"P",{});var o0t=s(pMe);Y0r=r(o0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o0t.forEach(t),K0r=i(V6),Mc=n(V6,"P",{});var Eee=s(Mc);Z0r=r(Eee,`Note:
Loading a model from its configuration file does `),_Me=n(Eee,"STRONG",{});var r0t=s(_Me);eAr=r(r0t,"not"),r0t.forEach(t),oAr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(Eee,"A",{href:!0});var t0t=s(KU);rAr=r(t0t,"from_pretrained()"),t0t.forEach(t),tAr=r(Eee," to load the model weights."),Eee.forEach(t),aAr=i(V6),T(Q5.$$.fragment,V6),V6.forEach(t),nAr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(c9.$$.fragment,Il),sAr=i(Il),bMe=n(Il,"P",{});var a0t=s(bMe);lAr=r(a0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a0t.forEach(t),iAr=i(Il),mn=n(Il,"P",{});var X6=s(mn);dAr=r(X6,"The model class to instantiate is selected based on the "),vMe=n(X6,"CODE",{});var n0t=s(vMe);cAr=r(n0t,"model_type"),n0t.forEach(t),mAr=r(X6,` property of the config object (either
passed as an argument or loaded from `),FMe=n(X6,"CODE",{});var s0t=s(FMe);fAr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),gAr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(X6,"CODE",{});var l0t=s(TMe);hAr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),uAr=r(X6,":"),X6.forEach(t),pAr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);H5=n(ge,"LI",{});var _Be=s(H5);MMe=n(_Be,"STRONG",{});var i0t=s(MMe);_Ar=r(i0t,"albert"),i0t.forEach(t),bAr=r(_Be," \u2014 "),ZU=n(_Be,"A",{href:!0});var d0t=s(ZU);vAr=r(d0t,"TFAlbertForQuestionAnswering"),d0t.forEach(t),FAr=r(_Be," (ALBERT model)"),_Be.forEach(t),TAr=i(ge),U5=n(ge,"LI",{});var bBe=s(U5);EMe=n(bBe,"STRONG",{});var c0t=s(EMe);MAr=r(c0t,"bert"),c0t.forEach(t),EAr=r(bBe," \u2014 "),eJ=n(bBe,"A",{href:!0});var m0t=s(eJ);CAr=r(m0t,"TFBertForQuestionAnswering"),m0t.forEach(t),wAr=r(bBe," (BERT model)"),bBe.forEach(t),AAr=i(ge),J5=n(ge,"LI",{});var vBe=s(J5);CMe=n(vBe,"STRONG",{});var f0t=s(CMe);yAr=r(f0t,"camembert"),f0t.forEach(t),LAr=r(vBe," \u2014 "),oJ=n(vBe,"A",{href:!0});var g0t=s(oJ);xAr=r(g0t,"TFCamembertForQuestionAnswering"),g0t.forEach(t),$Ar=r(vBe," (CamemBERT model)"),vBe.forEach(t),kAr=i(ge),Y5=n(ge,"LI",{});var FBe=s(Y5);wMe=n(FBe,"STRONG",{});var h0t=s(wMe);SAr=r(h0t,"convbert"),h0t.forEach(t),RAr=r(FBe," \u2014 "),rJ=n(FBe,"A",{href:!0});var u0t=s(rJ);PAr=r(u0t,"TFConvBertForQuestionAnswering"),u0t.forEach(t),BAr=r(FBe," (ConvBERT model)"),FBe.forEach(t),IAr=i(ge),K5=n(ge,"LI",{});var TBe=s(K5);AMe=n(TBe,"STRONG",{});var p0t=s(AMe);qAr=r(p0t,"deberta"),p0t.forEach(t),NAr=r(TBe," \u2014 "),tJ=n(TBe,"A",{href:!0});var _0t=s(tJ);jAr=r(_0t,"TFDebertaForQuestionAnswering"),_0t.forEach(t),DAr=r(TBe," (DeBERTa model)"),TBe.forEach(t),GAr=i(ge),Z5=n(ge,"LI",{});var MBe=s(Z5);yMe=n(MBe,"STRONG",{});var b0t=s(yMe);OAr=r(b0t,"deberta-v2"),b0t.forEach(t),VAr=r(MBe," \u2014 "),aJ=n(MBe,"A",{href:!0});var v0t=s(aJ);XAr=r(v0t,"TFDebertaV2ForQuestionAnswering"),v0t.forEach(t),zAr=r(MBe," (DeBERTa-v2 model)"),MBe.forEach(t),WAr=i(ge),e3=n(ge,"LI",{});var EBe=s(e3);LMe=n(EBe,"STRONG",{});var F0t=s(LMe);QAr=r(F0t,"distilbert"),F0t.forEach(t),HAr=r(EBe," \u2014 "),nJ=n(EBe,"A",{href:!0});var T0t=s(nJ);UAr=r(T0t,"TFDistilBertForQuestionAnswering"),T0t.forEach(t),JAr=r(EBe," (DistilBERT model)"),EBe.forEach(t),YAr=i(ge),o3=n(ge,"LI",{});var CBe=s(o3);xMe=n(CBe,"STRONG",{});var M0t=s(xMe);KAr=r(M0t,"electra"),M0t.forEach(t),ZAr=r(CBe," \u2014 "),sJ=n(CBe,"A",{href:!0});var E0t=s(sJ);e6r=r(E0t,"TFElectraForQuestionAnswering"),E0t.forEach(t),o6r=r(CBe," (ELECTRA model)"),CBe.forEach(t),r6r=i(ge),r3=n(ge,"LI",{});var wBe=s(r3);$Me=n(wBe,"STRONG",{});var C0t=s($Me);t6r=r(C0t,"flaubert"),C0t.forEach(t),a6r=r(wBe," \u2014 "),lJ=n(wBe,"A",{href:!0});var w0t=s(lJ);n6r=r(w0t,"TFFlaubertForQuestionAnsweringSimple"),w0t.forEach(t),s6r=r(wBe," (FlauBERT model)"),wBe.forEach(t),l6r=i(ge),t3=n(ge,"LI",{});var ABe=s(t3);kMe=n(ABe,"STRONG",{});var A0t=s(kMe);i6r=r(A0t,"funnel"),A0t.forEach(t),d6r=r(ABe," \u2014 "),iJ=n(ABe,"A",{href:!0});var y0t=s(iJ);c6r=r(y0t,"TFFunnelForQuestionAnswering"),y0t.forEach(t),m6r=r(ABe," (Funnel Transformer model)"),ABe.forEach(t),f6r=i(ge),a3=n(ge,"LI",{});var yBe=s(a3);SMe=n(yBe,"STRONG",{});var L0t=s(SMe);g6r=r(L0t,"gptj"),L0t.forEach(t),h6r=r(yBe," \u2014 "),dJ=n(yBe,"A",{href:!0});var x0t=s(dJ);u6r=r(x0t,"TFGPTJForQuestionAnswering"),x0t.forEach(t),p6r=r(yBe," (GPT-J model)"),yBe.forEach(t),_6r=i(ge),n3=n(ge,"LI",{});var LBe=s(n3);RMe=n(LBe,"STRONG",{});var $0t=s(RMe);b6r=r($0t,"longformer"),$0t.forEach(t),v6r=r(LBe," \u2014 "),cJ=n(LBe,"A",{href:!0});var k0t=s(cJ);F6r=r(k0t,"TFLongformerForQuestionAnswering"),k0t.forEach(t),T6r=r(LBe," (Longformer model)"),LBe.forEach(t),M6r=i(ge),s3=n(ge,"LI",{});var xBe=s(s3);PMe=n(xBe,"STRONG",{});var S0t=s(PMe);E6r=r(S0t,"mobilebert"),S0t.forEach(t),C6r=r(xBe," \u2014 "),mJ=n(xBe,"A",{href:!0});var R0t=s(mJ);w6r=r(R0t,"TFMobileBertForQuestionAnswering"),R0t.forEach(t),A6r=r(xBe," (MobileBERT model)"),xBe.forEach(t),y6r=i(ge),l3=n(ge,"LI",{});var $Be=s(l3);BMe=n($Be,"STRONG",{});var P0t=s(BMe);L6r=r(P0t,"mpnet"),P0t.forEach(t),x6r=r($Be," \u2014 "),fJ=n($Be,"A",{href:!0});var B0t=s(fJ);$6r=r(B0t,"TFMPNetForQuestionAnswering"),B0t.forEach(t),k6r=r($Be," (MPNet model)"),$Be.forEach(t),S6r=i(ge),i3=n(ge,"LI",{});var kBe=s(i3);IMe=n(kBe,"STRONG",{});var I0t=s(IMe);R6r=r(I0t,"rembert"),I0t.forEach(t),P6r=r(kBe," \u2014 "),gJ=n(kBe,"A",{href:!0});var q0t=s(gJ);B6r=r(q0t,"TFRemBertForQuestionAnswering"),q0t.forEach(t),I6r=r(kBe," (RemBERT model)"),kBe.forEach(t),q6r=i(ge),d3=n(ge,"LI",{});var SBe=s(d3);qMe=n(SBe,"STRONG",{});var N0t=s(qMe);N6r=r(N0t,"roberta"),N0t.forEach(t),j6r=r(SBe," \u2014 "),hJ=n(SBe,"A",{href:!0});var j0t=s(hJ);D6r=r(j0t,"TFRobertaForQuestionAnswering"),j0t.forEach(t),G6r=r(SBe," (RoBERTa model)"),SBe.forEach(t),O6r=i(ge),c3=n(ge,"LI",{});var RBe=s(c3);NMe=n(RBe,"STRONG",{});var D0t=s(NMe);V6r=r(D0t,"roformer"),D0t.forEach(t),X6r=r(RBe," \u2014 "),uJ=n(RBe,"A",{href:!0});var G0t=s(uJ);z6r=r(G0t,"TFRoFormerForQuestionAnswering"),G0t.forEach(t),W6r=r(RBe," (RoFormer model)"),RBe.forEach(t),Q6r=i(ge),m3=n(ge,"LI",{});var PBe=s(m3);jMe=n(PBe,"STRONG",{});var O0t=s(jMe);H6r=r(O0t,"xlm"),O0t.forEach(t),U6r=r(PBe," \u2014 "),pJ=n(PBe,"A",{href:!0});var V0t=s(pJ);J6r=r(V0t,"TFXLMForQuestionAnsweringSimple"),V0t.forEach(t),Y6r=r(PBe," (XLM model)"),PBe.forEach(t),K6r=i(ge),f3=n(ge,"LI",{});var BBe=s(f3);DMe=n(BBe,"STRONG",{});var X0t=s(DMe);Z6r=r(X0t,"xlm-roberta"),X0t.forEach(t),eyr=r(BBe," \u2014 "),_J=n(BBe,"A",{href:!0});var z0t=s(_J);oyr=r(z0t,"TFXLMRobertaForQuestionAnswering"),z0t.forEach(t),ryr=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),tyr=i(ge),g3=n(ge,"LI",{});var IBe=s(g3);GMe=n(IBe,"STRONG",{});var W0t=s(GMe);ayr=r(W0t,"xlnet"),W0t.forEach(t),nyr=r(IBe," \u2014 "),bJ=n(IBe,"A",{href:!0});var Q0t=s(bJ);syr=r(Q0t,"TFXLNetForQuestionAnsweringSimple"),Q0t.forEach(t),lyr=r(IBe," (XLNet model)"),IBe.forEach(t),ge.forEach(t),iyr=i(Il),T(h3.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),mje=i(m),Ec=n(m,"H2",{class:!0});var bGe=s(Ec);u3=n(bGe,"A",{id:!0,class:!0,href:!0});var H0t=s(u3);OMe=n(H0t,"SPAN",{});var U0t=s(OMe);T(m9.$$.fragment,U0t),U0t.forEach(t),H0t.forEach(t),dyr=i(bGe),VMe=n(bGe,"SPAN",{});var J0t=s(VMe);cyr=r(J0t,"TFAutoModelForVision2Seq"),J0t.forEach(t),bGe.forEach(t),fje=i(m),dr=n(m,"DIV",{class:!0});var ql=s(dr);T(f9.$$.fragment,ql),myr=i(ql),Cc=n(ql,"P",{});var Cee=s(Cc);fyr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vJ=n(Cee,"A",{href:!0});var Y0t=s(vJ);gyr=r(Y0t,"from_pretrained()"),Y0t.forEach(t),hyr=r(Cee," class method or the "),FJ=n(Cee,"A",{href:!0});var K0t=s(FJ);uyr=r(K0t,"from_config()"),K0t.forEach(t),pyr=r(Cee,` class
method.`),Cee.forEach(t),_yr=i(ql),g9=n(ql,"P",{});var vGe=s(g9);byr=r(vGe,"This class cannot be instantiated directly using "),XMe=n(vGe,"CODE",{});var Z0t=s(XMe);vyr=r(Z0t,"__init__()"),Z0t.forEach(t),Fyr=r(vGe," (throws an error)."),vGe.forEach(t),Tyr=i(ql),jt=n(ql,"DIV",{class:!0});var z6=s(jt);T(h9.$$.fragment,z6),Myr=i(z6),zMe=n(z6,"P",{});var eAt=s(zMe);Eyr=r(eAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eAt.forEach(t),Cyr=i(z6),wc=n(z6,"P",{});var wee=s(wc);wyr=r(wee,`Note:
Loading a model from its configuration file does `),WMe=n(wee,"STRONG",{});var oAt=s(WMe);Ayr=r(oAt,"not"),oAt.forEach(t),yyr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(wee,"A",{href:!0});var rAt=s(TJ);Lyr=r(rAt,"from_pretrained()"),rAt.forEach(t),xyr=r(wee," to load the model weights."),wee.forEach(t),$yr=i(z6),T(p3.$$.fragment,z6),z6.forEach(t),kyr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(u9.$$.fragment,Nl),Syr=i(Nl),QMe=n(Nl,"P",{});var tAt=s(QMe);Ryr=r(tAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tAt.forEach(t),Pyr=i(Nl),fn=n(Nl,"P",{});var W6=s(fn);Byr=r(W6,"The model class to instantiate is selected based on the "),HMe=n(W6,"CODE",{});var aAt=s(HMe);Iyr=r(aAt,"model_type"),aAt.forEach(t),qyr=r(W6,` property of the config object (either
passed as an argument or loaded from `),UMe=n(W6,"CODE",{});var nAt=s(UMe);Nyr=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),jyr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=n(W6,"CODE",{});var sAt=s(JMe);Dyr=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),Gyr=r(W6,":"),W6.forEach(t),Oyr=i(Nl),YMe=n(Nl,"UL",{});var lAt=s(YMe);_3=n(lAt,"LI",{});var qBe=s(_3);KMe=n(qBe,"STRONG",{});var iAt=s(KMe);Vyr=r(iAt,"vision-encoder-decoder"),iAt.forEach(t),Xyr=r(qBe," \u2014 "),MJ=n(qBe,"A",{href:!0});var dAt=s(MJ);zyr=r(dAt,"TFVisionEncoderDecoderModel"),dAt.forEach(t),Wyr=r(qBe," (Vision Encoder decoder model)"),qBe.forEach(t),lAt.forEach(t),Qyr=i(Nl),T(b3.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),gje=i(m),Ac=n(m,"H2",{class:!0});var FGe=s(Ac);v3=n(FGe,"A",{id:!0,class:!0,href:!0});var cAt=s(v3);ZMe=n(cAt,"SPAN",{});var mAt=s(ZMe);T(p9.$$.fragment,mAt),mAt.forEach(t),cAt.forEach(t),Hyr=i(FGe),e4e=n(FGe,"SPAN",{});var fAt=s(e4e);Uyr=r(fAt,"TFAutoModelForSpeechSeq2Seq"),fAt.forEach(t),FGe.forEach(t),hje=i(m),cr=n(m,"DIV",{class:!0});var jl=s(cr);T(_9.$$.fragment,jl),Jyr=i(jl),yc=n(jl,"P",{});var Aee=s(yc);Yyr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EJ=n(Aee,"A",{href:!0});var gAt=s(EJ);Kyr=r(gAt,"from_pretrained()"),gAt.forEach(t),Zyr=r(Aee," class method or the "),CJ=n(Aee,"A",{href:!0});var hAt=s(CJ);eLr=r(hAt,"from_config()"),hAt.forEach(t),oLr=r(Aee,` class
method.`),Aee.forEach(t),rLr=i(jl),b9=n(jl,"P",{});var TGe=s(b9);tLr=r(TGe,"This class cannot be instantiated directly using "),o4e=n(TGe,"CODE",{});var uAt=s(o4e);aLr=r(uAt,"__init__()"),uAt.forEach(t),nLr=r(TGe," (throws an error)."),TGe.forEach(t),sLr=i(jl),Dt=n(jl,"DIV",{class:!0});var Q6=s(Dt);T(v9.$$.fragment,Q6),lLr=i(Q6),r4e=n(Q6,"P",{});var pAt=s(r4e);iLr=r(pAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pAt.forEach(t),dLr=i(Q6),Lc=n(Q6,"P",{});var yee=s(Lc);cLr=r(yee,`Note:
Loading a model from its configuration file does `),t4e=n(yee,"STRONG",{});var _At=s(t4e);mLr=r(_At,"not"),_At.forEach(t),fLr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(yee,"A",{href:!0});var bAt=s(wJ);gLr=r(bAt,"from_pretrained()"),bAt.forEach(t),hLr=r(yee," to load the model weights."),yee.forEach(t),uLr=i(Q6),T(F3.$$.fragment,Q6),Q6.forEach(t),pLr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(F9.$$.fragment,Dl),_Lr=i(Dl),a4e=n(Dl,"P",{});var vAt=s(a4e);bLr=r(vAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vAt.forEach(t),vLr=i(Dl),gn=n(Dl,"P",{});var H6=s(gn);FLr=r(H6,"The model class to instantiate is selected based on the "),n4e=n(H6,"CODE",{});var FAt=s(n4e);TLr=r(FAt,"model_type"),FAt.forEach(t),MLr=r(H6,` property of the config object (either
passed as an argument or loaded from `),s4e=n(H6,"CODE",{});var TAt=s(s4e);ELr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),CLr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(H6,"CODE",{});var MAt=s(l4e);wLr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),ALr=r(H6,":"),H6.forEach(t),yLr=i(Dl),i4e=n(Dl,"UL",{});var EAt=s(i4e);T3=n(EAt,"LI",{});var NBe=s(T3);d4e=n(NBe,"STRONG",{});var CAt=s(d4e);LLr=r(CAt,"speech_to_text"),CAt.forEach(t),xLr=r(NBe," \u2014 "),AJ=n(NBe,"A",{href:!0});var wAt=s(AJ);$Lr=r(wAt,"TFSpeech2TextForConditionalGeneration"),wAt.forEach(t),kLr=r(NBe," (Speech2Text model)"),NBe.forEach(t),EAt.forEach(t),SLr=i(Dl),T(M3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),uje=i(m),xc=n(m,"H2",{class:!0});var MGe=s(xc);E3=n(MGe,"A",{id:!0,class:!0,href:!0});var AAt=s(E3);c4e=n(AAt,"SPAN",{});var yAt=s(c4e);T(T9.$$.fragment,yAt),yAt.forEach(t),AAt.forEach(t),RLr=i(MGe),m4e=n(MGe,"SPAN",{});var LAt=s(m4e);PLr=r(LAt,"FlaxAutoModel"),LAt.forEach(t),MGe.forEach(t),pje=i(m),mr=n(m,"DIV",{class:!0});var Gl=s(mr);T(M9.$$.fragment,Gl),BLr=i(Gl),$c=n(Gl,"P",{});var Lee=s($c);ILr=r(Lee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yJ=n(Lee,"A",{href:!0});var xAt=s(yJ);qLr=r(xAt,"from_pretrained()"),xAt.forEach(t),NLr=r(Lee," class method or the "),LJ=n(Lee,"A",{href:!0});var $At=s(LJ);jLr=r($At,"from_config()"),$At.forEach(t),DLr=r(Lee,` class
method.`),Lee.forEach(t),GLr=i(Gl),E9=n(Gl,"P",{});var EGe=s(E9);OLr=r(EGe,"This class cannot be instantiated directly using "),f4e=n(EGe,"CODE",{});var kAt=s(f4e);VLr=r(kAt,"__init__()"),kAt.forEach(t),XLr=r(EGe," (throws an error)."),EGe.forEach(t),zLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var U6=s(Gt);T(C9.$$.fragment,U6),WLr=i(U6),g4e=n(U6,"P",{});var SAt=s(g4e);QLr=r(SAt,"Instantiates one of the base model classes of the library from a configuration."),SAt.forEach(t),HLr=i(U6),kc=n(U6,"P",{});var xee=s(kc);ULr=r(xee,`Note:
Loading a model from its configuration file does `),h4e=n(xee,"STRONG",{});var RAt=s(h4e);JLr=r(RAt,"not"),RAt.forEach(t),YLr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(xee,"A",{href:!0});var PAt=s(xJ);KLr=r(PAt,"from_pretrained()"),PAt.forEach(t),ZLr=r(xee," to load the model weights."),xee.forEach(t),e8r=i(U6),T(C3.$$.fragment,U6),U6.forEach(t),o8r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(w9.$$.fragment,Ol),r8r=i(Ol),u4e=n(Ol,"P",{});var BAt=s(u4e);t8r=r(BAt,"Instantiate one of the base model classes of the library from a pretrained model."),BAt.forEach(t),a8r=i(Ol),hn=n(Ol,"P",{});var J6=s(hn);n8r=r(J6,"The model class to instantiate is selected based on the "),p4e=n(J6,"CODE",{});var IAt=s(p4e);s8r=r(IAt,"model_type"),IAt.forEach(t),l8r=r(J6,` property of the config object (either
passed as an argument or loaded from `),_4e=n(J6,"CODE",{});var qAt=s(_4e);i8r=r(qAt,"pretrained_model_name_or_path"),qAt.forEach(t),d8r=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(J6,"CODE",{});var NAt=s(b4e);c8r=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),m8r=r(J6,":"),J6.forEach(t),f8r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);w3=n(ne,"LI",{});var jBe=s(w3);v4e=n(jBe,"STRONG",{});var jAt=s(v4e);g8r=r(jAt,"albert"),jAt.forEach(t),h8r=r(jBe," \u2014 "),$J=n(jBe,"A",{href:!0});var DAt=s($J);u8r=r(DAt,"FlaxAlbertModel"),DAt.forEach(t),p8r=r(jBe," (ALBERT model)"),jBe.forEach(t),_8r=i(ne),A3=n(ne,"LI",{});var DBe=s(A3);F4e=n(DBe,"STRONG",{});var GAt=s(F4e);b8r=r(GAt,"bart"),GAt.forEach(t),v8r=r(DBe," \u2014 "),kJ=n(DBe,"A",{href:!0});var OAt=s(kJ);F8r=r(OAt,"FlaxBartModel"),OAt.forEach(t),T8r=r(DBe," (BART model)"),DBe.forEach(t),M8r=i(ne),y3=n(ne,"LI",{});var GBe=s(y3);T4e=n(GBe,"STRONG",{});var VAt=s(T4e);E8r=r(VAt,"beit"),VAt.forEach(t),C8r=r(GBe," \u2014 "),SJ=n(GBe,"A",{href:!0});var XAt=s(SJ);w8r=r(XAt,"FlaxBeitModel"),XAt.forEach(t),A8r=r(GBe," (BEiT model)"),GBe.forEach(t),y8r=i(ne),L3=n(ne,"LI",{});var OBe=s(L3);M4e=n(OBe,"STRONG",{});var zAt=s(M4e);L8r=r(zAt,"bert"),zAt.forEach(t),x8r=r(OBe," \u2014 "),RJ=n(OBe,"A",{href:!0});var WAt=s(RJ);$8r=r(WAt,"FlaxBertModel"),WAt.forEach(t),k8r=r(OBe," (BERT model)"),OBe.forEach(t),S8r=i(ne),x3=n(ne,"LI",{});var VBe=s(x3);E4e=n(VBe,"STRONG",{});var QAt=s(E4e);R8r=r(QAt,"big_bird"),QAt.forEach(t),P8r=r(VBe," \u2014 "),PJ=n(VBe,"A",{href:!0});var HAt=s(PJ);B8r=r(HAt,"FlaxBigBirdModel"),HAt.forEach(t),I8r=r(VBe," (BigBird model)"),VBe.forEach(t),q8r=i(ne),$3=n(ne,"LI",{});var XBe=s($3);C4e=n(XBe,"STRONG",{});var UAt=s(C4e);N8r=r(UAt,"blenderbot"),UAt.forEach(t),j8r=r(XBe," \u2014 "),BJ=n(XBe,"A",{href:!0});var JAt=s(BJ);D8r=r(JAt,"FlaxBlenderbotModel"),JAt.forEach(t),G8r=r(XBe," (Blenderbot model)"),XBe.forEach(t),O8r=i(ne),k3=n(ne,"LI",{});var zBe=s(k3);w4e=n(zBe,"STRONG",{});var YAt=s(w4e);V8r=r(YAt,"blenderbot-small"),YAt.forEach(t),X8r=r(zBe," \u2014 "),IJ=n(zBe,"A",{href:!0});var KAt=s(IJ);z8r=r(KAt,"FlaxBlenderbotSmallModel"),KAt.forEach(t),W8r=r(zBe," (BlenderbotSmall model)"),zBe.forEach(t),Q8r=i(ne),S3=n(ne,"LI",{});var WBe=s(S3);A4e=n(WBe,"STRONG",{});var ZAt=s(A4e);H8r=r(ZAt,"clip"),ZAt.forEach(t),U8r=r(WBe," \u2014 "),qJ=n(WBe,"A",{href:!0});var e6t=s(qJ);J8r=r(e6t,"FlaxCLIPModel"),e6t.forEach(t),Y8r=r(WBe," (CLIP model)"),WBe.forEach(t),K8r=i(ne),R3=n(ne,"LI",{});var QBe=s(R3);y4e=n(QBe,"STRONG",{});var o6t=s(y4e);Z8r=r(o6t,"distilbert"),o6t.forEach(t),e7r=r(QBe," \u2014 "),NJ=n(QBe,"A",{href:!0});var r6t=s(NJ);o7r=r(r6t,"FlaxDistilBertModel"),r6t.forEach(t),r7r=r(QBe," (DistilBERT model)"),QBe.forEach(t),t7r=i(ne),P3=n(ne,"LI",{});var HBe=s(P3);L4e=n(HBe,"STRONG",{});var t6t=s(L4e);a7r=r(t6t,"electra"),t6t.forEach(t),n7r=r(HBe," \u2014 "),jJ=n(HBe,"A",{href:!0});var a6t=s(jJ);s7r=r(a6t,"FlaxElectraModel"),a6t.forEach(t),l7r=r(HBe," (ELECTRA model)"),HBe.forEach(t),i7r=i(ne),B3=n(ne,"LI",{});var UBe=s(B3);x4e=n(UBe,"STRONG",{});var n6t=s(x4e);d7r=r(n6t,"gpt2"),n6t.forEach(t),c7r=r(UBe," \u2014 "),DJ=n(UBe,"A",{href:!0});var s6t=s(DJ);m7r=r(s6t,"FlaxGPT2Model"),s6t.forEach(t),f7r=r(UBe," (OpenAI GPT-2 model)"),UBe.forEach(t),g7r=i(ne),I3=n(ne,"LI",{});var JBe=s(I3);$4e=n(JBe,"STRONG",{});var l6t=s($4e);h7r=r(l6t,"gpt_neo"),l6t.forEach(t),u7r=r(JBe," \u2014 "),GJ=n(JBe,"A",{href:!0});var i6t=s(GJ);p7r=r(i6t,"FlaxGPTNeoModel"),i6t.forEach(t),_7r=r(JBe," (GPT Neo model)"),JBe.forEach(t),b7r=i(ne),q3=n(ne,"LI",{});var YBe=s(q3);k4e=n(YBe,"STRONG",{});var d6t=s(k4e);v7r=r(d6t,"gptj"),d6t.forEach(t),F7r=r(YBe," \u2014 "),OJ=n(YBe,"A",{href:!0});var c6t=s(OJ);T7r=r(c6t,"FlaxGPTJModel"),c6t.forEach(t),M7r=r(YBe," (GPT-J model)"),YBe.forEach(t),E7r=i(ne),N3=n(ne,"LI",{});var KBe=s(N3);S4e=n(KBe,"STRONG",{});var m6t=s(S4e);C7r=r(m6t,"marian"),m6t.forEach(t),w7r=r(KBe," \u2014 "),VJ=n(KBe,"A",{href:!0});var f6t=s(VJ);A7r=r(f6t,"FlaxMarianModel"),f6t.forEach(t),y7r=r(KBe," (Marian model)"),KBe.forEach(t),L7r=i(ne),j3=n(ne,"LI",{});var ZBe=s(j3);R4e=n(ZBe,"STRONG",{});var g6t=s(R4e);x7r=r(g6t,"mbart"),g6t.forEach(t),$7r=r(ZBe," \u2014 "),XJ=n(ZBe,"A",{href:!0});var h6t=s(XJ);k7r=r(h6t,"FlaxMBartModel"),h6t.forEach(t),S7r=r(ZBe," (mBART model)"),ZBe.forEach(t),R7r=i(ne),D3=n(ne,"LI",{});var eIe=s(D3);P4e=n(eIe,"STRONG",{});var u6t=s(P4e);P7r=r(u6t,"mt5"),u6t.forEach(t),B7r=r(eIe," \u2014 "),zJ=n(eIe,"A",{href:!0});var p6t=s(zJ);I7r=r(p6t,"FlaxMT5Model"),p6t.forEach(t),q7r=r(eIe," (mT5 model)"),eIe.forEach(t),N7r=i(ne),G3=n(ne,"LI",{});var oIe=s(G3);B4e=n(oIe,"STRONG",{});var _6t=s(B4e);j7r=r(_6t,"pegasus"),_6t.forEach(t),D7r=r(oIe," \u2014 "),WJ=n(oIe,"A",{href:!0});var b6t=s(WJ);G7r=r(b6t,"FlaxPegasusModel"),b6t.forEach(t),O7r=r(oIe," (Pegasus model)"),oIe.forEach(t),V7r=i(ne),O3=n(ne,"LI",{});var rIe=s(O3);I4e=n(rIe,"STRONG",{});var v6t=s(I4e);X7r=r(v6t,"roberta"),v6t.forEach(t),z7r=r(rIe," \u2014 "),QJ=n(rIe,"A",{href:!0});var F6t=s(QJ);W7r=r(F6t,"FlaxRobertaModel"),F6t.forEach(t),Q7r=r(rIe," (RoBERTa model)"),rIe.forEach(t),H7r=i(ne),V3=n(ne,"LI",{});var tIe=s(V3);q4e=n(tIe,"STRONG",{});var T6t=s(q4e);U7r=r(T6t,"roformer"),T6t.forEach(t),J7r=r(tIe," \u2014 "),HJ=n(tIe,"A",{href:!0});var M6t=s(HJ);Y7r=r(M6t,"FlaxRoFormerModel"),M6t.forEach(t),K7r=r(tIe," (RoFormer model)"),tIe.forEach(t),Z7r=i(ne),X3=n(ne,"LI",{});var aIe=s(X3);N4e=n(aIe,"STRONG",{});var E6t=s(N4e);e9r=r(E6t,"t5"),E6t.forEach(t),o9r=r(aIe," \u2014 "),UJ=n(aIe,"A",{href:!0});var C6t=s(UJ);r9r=r(C6t,"FlaxT5Model"),C6t.forEach(t),t9r=r(aIe," (T5 model)"),aIe.forEach(t),a9r=i(ne),z3=n(ne,"LI",{});var nIe=s(z3);j4e=n(nIe,"STRONG",{});var w6t=s(j4e);n9r=r(w6t,"vision-text-dual-encoder"),w6t.forEach(t),s9r=r(nIe," \u2014 "),JJ=n(nIe,"A",{href:!0});var A6t=s(JJ);l9r=r(A6t,"FlaxVisionTextDualEncoderModel"),A6t.forEach(t),i9r=r(nIe," (VisionTextDualEncoder model)"),nIe.forEach(t),d9r=i(ne),W3=n(ne,"LI",{});var sIe=s(W3);D4e=n(sIe,"STRONG",{});var y6t=s(D4e);c9r=r(y6t,"vit"),y6t.forEach(t),m9r=r(sIe," \u2014 "),YJ=n(sIe,"A",{href:!0});var L6t=s(YJ);f9r=r(L6t,"FlaxViTModel"),L6t.forEach(t),g9r=r(sIe," (ViT model)"),sIe.forEach(t),h9r=i(ne),Q3=n(ne,"LI",{});var lIe=s(Q3);G4e=n(lIe,"STRONG",{});var x6t=s(G4e);u9r=r(x6t,"wav2vec2"),x6t.forEach(t),p9r=r(lIe," \u2014 "),KJ=n(lIe,"A",{href:!0});var $6t=s(KJ);_9r=r($6t,"FlaxWav2Vec2Model"),$6t.forEach(t),b9r=r(lIe," (Wav2Vec2 model)"),lIe.forEach(t),v9r=i(ne),H3=n(ne,"LI",{});var iIe=s(H3);O4e=n(iIe,"STRONG",{});var k6t=s(O4e);F9r=r(k6t,"xglm"),k6t.forEach(t),T9r=r(iIe," \u2014 "),ZJ=n(iIe,"A",{href:!0});var S6t=s(ZJ);M9r=r(S6t,"FlaxXGLMModel"),S6t.forEach(t),E9r=r(iIe," (XGLM model)"),iIe.forEach(t),C9r=i(ne),U3=n(ne,"LI",{});var dIe=s(U3);V4e=n(dIe,"STRONG",{});var R6t=s(V4e);w9r=r(R6t,"xlm-roberta"),R6t.forEach(t),A9r=r(dIe," \u2014 "),eY=n(dIe,"A",{href:!0});var P6t=s(eY);y9r=r(P6t,"FlaxXLMRobertaModel"),P6t.forEach(t),L9r=r(dIe," (XLM-RoBERTa model)"),dIe.forEach(t),ne.forEach(t),x9r=i(Ol),T(J3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),_je=i(m),Sc=n(m,"H2",{class:!0});var CGe=s(Sc);Y3=n(CGe,"A",{id:!0,class:!0,href:!0});var B6t=s(Y3);X4e=n(B6t,"SPAN",{});var I6t=s(X4e);T(A9.$$.fragment,I6t),I6t.forEach(t),B6t.forEach(t),$9r=i(CGe),z4e=n(CGe,"SPAN",{});var q6t=s(z4e);k9r=r(q6t,"FlaxAutoModelForCausalLM"),q6t.forEach(t),CGe.forEach(t),bje=i(m),fr=n(m,"DIV",{class:!0});var Vl=s(fr);T(y9.$$.fragment,Vl),S9r=i(Vl),Rc=n(Vl,"P",{});var $ee=s(Rc);R9r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oY=n($ee,"A",{href:!0});var N6t=s(oY);P9r=r(N6t,"from_pretrained()"),N6t.forEach(t),B9r=r($ee," class method or the "),rY=n($ee,"A",{href:!0});var j6t=s(rY);I9r=r(j6t,"from_config()"),j6t.forEach(t),q9r=r($ee,` class
method.`),$ee.forEach(t),N9r=i(Vl),L9=n(Vl,"P",{});var wGe=s(L9);j9r=r(wGe,"This class cannot be instantiated directly using "),W4e=n(wGe,"CODE",{});var D6t=s(W4e);D9r=r(D6t,"__init__()"),D6t.forEach(t),G9r=r(wGe," (throws an error)."),wGe.forEach(t),O9r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Y6=s(Ot);T(x9.$$.fragment,Y6),V9r=i(Y6),Q4e=n(Y6,"P",{});var G6t=s(Q4e);X9r=r(G6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G6t.forEach(t),z9r=i(Y6),Pc=n(Y6,"P",{});var kee=s(Pc);W9r=r(kee,`Note:
Loading a model from its configuration file does `),H4e=n(kee,"STRONG",{});var O6t=s(H4e);Q9r=r(O6t,"not"),O6t.forEach(t),H9r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(kee,"A",{href:!0});var V6t=s(tY);U9r=r(V6t,"from_pretrained()"),V6t.forEach(t),J9r=r(kee," to load the model weights."),kee.forEach(t),Y9r=i(Y6),T(K3.$$.fragment,Y6),Y6.forEach(t),K9r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T($9.$$.fragment,Xl),Z9r=i(Xl),U4e=n(Xl,"P",{});var X6t=s(U4e);exr=r(X6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X6t.forEach(t),oxr=i(Xl),un=n(Xl,"P",{});var K6=s(un);rxr=r(K6,"The model class to instantiate is selected based on the "),J4e=n(K6,"CODE",{});var z6t=s(J4e);txr=r(z6t,"model_type"),z6t.forEach(t),axr=r(K6,` property of the config object (either
passed as an argument or loaded from `),Y4e=n(K6,"CODE",{});var W6t=s(Y4e);nxr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),sxr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=n(K6,"CODE",{});var Q6t=s(K4e);lxr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),ixr=r(K6,":"),K6.forEach(t),dxr=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);Z3=n(Xe,"LI",{});var cIe=s(Z3);Z4e=n(cIe,"STRONG",{});var H6t=s(Z4e);cxr=r(H6t,"bart"),H6t.forEach(t),mxr=r(cIe," \u2014 "),aY=n(cIe,"A",{href:!0});var U6t=s(aY);fxr=r(U6t,"FlaxBartForCausalLM"),U6t.forEach(t),gxr=r(cIe," (BART model)"),cIe.forEach(t),hxr=i(Xe),ew=n(Xe,"LI",{});var mIe=s(ew);eEe=n(mIe,"STRONG",{});var J6t=s(eEe);uxr=r(J6t,"bert"),J6t.forEach(t),pxr=r(mIe," \u2014 "),nY=n(mIe,"A",{href:!0});var Y6t=s(nY);_xr=r(Y6t,"FlaxBertForCausalLM"),Y6t.forEach(t),bxr=r(mIe," (BERT model)"),mIe.forEach(t),vxr=i(Xe),ow=n(Xe,"LI",{});var fIe=s(ow);oEe=n(fIe,"STRONG",{});var K6t=s(oEe);Fxr=r(K6t,"big_bird"),K6t.forEach(t),Txr=r(fIe," \u2014 "),sY=n(fIe,"A",{href:!0});var Z6t=s(sY);Mxr=r(Z6t,"FlaxBigBirdForCausalLM"),Z6t.forEach(t),Exr=r(fIe," (BigBird model)"),fIe.forEach(t),Cxr=i(Xe),rw=n(Xe,"LI",{});var gIe=s(rw);rEe=n(gIe,"STRONG",{});var eyt=s(rEe);wxr=r(eyt,"electra"),eyt.forEach(t),Axr=r(gIe," \u2014 "),lY=n(gIe,"A",{href:!0});var oyt=s(lY);yxr=r(oyt,"FlaxElectraForCausalLM"),oyt.forEach(t),Lxr=r(gIe," (ELECTRA model)"),gIe.forEach(t),xxr=i(Xe),tw=n(Xe,"LI",{});var hIe=s(tw);tEe=n(hIe,"STRONG",{});var ryt=s(tEe);$xr=r(ryt,"gpt2"),ryt.forEach(t),kxr=r(hIe," \u2014 "),iY=n(hIe,"A",{href:!0});var tyt=s(iY);Sxr=r(tyt,"FlaxGPT2LMHeadModel"),tyt.forEach(t),Rxr=r(hIe," (OpenAI GPT-2 model)"),hIe.forEach(t),Pxr=i(Xe),aw=n(Xe,"LI",{});var uIe=s(aw);aEe=n(uIe,"STRONG",{});var ayt=s(aEe);Bxr=r(ayt,"gpt_neo"),ayt.forEach(t),Ixr=r(uIe," \u2014 "),dY=n(uIe,"A",{href:!0});var nyt=s(dY);qxr=r(nyt,"FlaxGPTNeoForCausalLM"),nyt.forEach(t),Nxr=r(uIe," (GPT Neo model)"),uIe.forEach(t),jxr=i(Xe),nw=n(Xe,"LI",{});var pIe=s(nw);nEe=n(pIe,"STRONG",{});var syt=s(nEe);Dxr=r(syt,"gptj"),syt.forEach(t),Gxr=r(pIe," \u2014 "),cY=n(pIe,"A",{href:!0});var lyt=s(cY);Oxr=r(lyt,"FlaxGPTJForCausalLM"),lyt.forEach(t),Vxr=r(pIe," (GPT-J model)"),pIe.forEach(t),Xxr=i(Xe),sw=n(Xe,"LI",{});var _Ie=s(sw);sEe=n(_Ie,"STRONG",{});var iyt=s(sEe);zxr=r(iyt,"roberta"),iyt.forEach(t),Wxr=r(_Ie," \u2014 "),mY=n(_Ie,"A",{href:!0});var dyt=s(mY);Qxr=r(dyt,"FlaxRobertaForCausalLM"),dyt.forEach(t),Hxr=r(_Ie," (RoBERTa model)"),_Ie.forEach(t),Uxr=i(Xe),lw=n(Xe,"LI",{});var bIe=s(lw);lEe=n(bIe,"STRONG",{});var cyt=s(lEe);Jxr=r(cyt,"xglm"),cyt.forEach(t),Yxr=r(bIe," \u2014 "),fY=n(bIe,"A",{href:!0});var myt=s(fY);Kxr=r(myt,"FlaxXGLMForCausalLM"),myt.forEach(t),Zxr=r(bIe," (XGLM model)"),bIe.forEach(t),Xe.forEach(t),e$r=i(Xl),T(iw.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),vje=i(m),Bc=n(m,"H2",{class:!0});var AGe=s(Bc);dw=n(AGe,"A",{id:!0,class:!0,href:!0});var fyt=s(dw);iEe=n(fyt,"SPAN",{});var gyt=s(iEe);T(k9.$$.fragment,gyt),gyt.forEach(t),fyt.forEach(t),o$r=i(AGe),dEe=n(AGe,"SPAN",{});var hyt=s(dEe);r$r=r(hyt,"FlaxAutoModelForPreTraining"),hyt.forEach(t),AGe.forEach(t),Fje=i(m),gr=n(m,"DIV",{class:!0});var zl=s(gr);T(S9.$$.fragment,zl),t$r=i(zl),Ic=n(zl,"P",{});var See=s(Ic);a$r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gY=n(See,"A",{href:!0});var uyt=s(gY);n$r=r(uyt,"from_pretrained()"),uyt.forEach(t),s$r=r(See," class method or the "),hY=n(See,"A",{href:!0});var pyt=s(hY);l$r=r(pyt,"from_config()"),pyt.forEach(t),i$r=r(See,` class
method.`),See.forEach(t),d$r=i(zl),R9=n(zl,"P",{});var yGe=s(R9);c$r=r(yGe,"This class cannot be instantiated directly using "),cEe=n(yGe,"CODE",{});var _yt=s(cEe);m$r=r(_yt,"__init__()"),_yt.forEach(t),f$r=r(yGe," (throws an error)."),yGe.forEach(t),g$r=i(zl),Vt=n(zl,"DIV",{class:!0});var Z6=s(Vt);T(P9.$$.fragment,Z6),h$r=i(Z6),mEe=n(Z6,"P",{});var byt=s(mEe);u$r=r(byt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),byt.forEach(t),p$r=i(Z6),qc=n(Z6,"P",{});var Ree=s(qc);_$r=r(Ree,`Note:
Loading a model from its configuration file does `),fEe=n(Ree,"STRONG",{});var vyt=s(fEe);b$r=r(vyt,"not"),vyt.forEach(t),v$r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(Ree,"A",{href:!0});var Fyt=s(uY);F$r=r(Fyt,"from_pretrained()"),Fyt.forEach(t),T$r=r(Ree," to load the model weights."),Ree.forEach(t),M$r=i(Z6),T(cw.$$.fragment,Z6),Z6.forEach(t),E$r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(B9.$$.fragment,Wl),C$r=i(Wl),gEe=n(Wl,"P",{});var Tyt=s(gEe);w$r=r(Tyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tyt.forEach(t),A$r=i(Wl),pn=n(Wl,"P",{});var ey=s(pn);y$r=r(ey,"The model class to instantiate is selected based on the "),hEe=n(ey,"CODE",{});var Myt=s(hEe);L$r=r(Myt,"model_type"),Myt.forEach(t),x$r=r(ey,` property of the config object (either
passed as an argument or loaded from `),uEe=n(ey,"CODE",{});var Eyt=s(uEe);$$r=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),k$r=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(ey,"CODE",{});var Cyt=s(pEe);S$r=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),R$r=r(ey,":"),ey.forEach(t),P$r=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);mw=n(we,"LI",{});var vIe=s(mw);_Ee=n(vIe,"STRONG",{});var wyt=s(_Ee);B$r=r(wyt,"albert"),wyt.forEach(t),I$r=r(vIe," \u2014 "),pY=n(vIe,"A",{href:!0});var Ayt=s(pY);q$r=r(Ayt,"FlaxAlbertForPreTraining"),Ayt.forEach(t),N$r=r(vIe," (ALBERT model)"),vIe.forEach(t),j$r=i(we),fw=n(we,"LI",{});var FIe=s(fw);bEe=n(FIe,"STRONG",{});var yyt=s(bEe);D$r=r(yyt,"bart"),yyt.forEach(t),G$r=r(FIe," \u2014 "),_Y=n(FIe,"A",{href:!0});var Lyt=s(_Y);O$r=r(Lyt,"FlaxBartForConditionalGeneration"),Lyt.forEach(t),V$r=r(FIe," (BART model)"),FIe.forEach(t),X$r=i(we),gw=n(we,"LI",{});var TIe=s(gw);vEe=n(TIe,"STRONG",{});var xyt=s(vEe);z$r=r(xyt,"bert"),xyt.forEach(t),W$r=r(TIe," \u2014 "),bY=n(TIe,"A",{href:!0});var $yt=s(bY);Q$r=r($yt,"FlaxBertForPreTraining"),$yt.forEach(t),H$r=r(TIe," (BERT model)"),TIe.forEach(t),U$r=i(we),hw=n(we,"LI",{});var MIe=s(hw);FEe=n(MIe,"STRONG",{});var kyt=s(FEe);J$r=r(kyt,"big_bird"),kyt.forEach(t),Y$r=r(MIe," \u2014 "),vY=n(MIe,"A",{href:!0});var Syt=s(vY);K$r=r(Syt,"FlaxBigBirdForPreTraining"),Syt.forEach(t),Z$r=r(MIe," (BigBird model)"),MIe.forEach(t),ekr=i(we),uw=n(we,"LI",{});var EIe=s(uw);TEe=n(EIe,"STRONG",{});var Ryt=s(TEe);okr=r(Ryt,"electra"),Ryt.forEach(t),rkr=r(EIe," \u2014 "),FY=n(EIe,"A",{href:!0});var Pyt=s(FY);tkr=r(Pyt,"FlaxElectraForPreTraining"),Pyt.forEach(t),akr=r(EIe," (ELECTRA model)"),EIe.forEach(t),nkr=i(we),pw=n(we,"LI",{});var CIe=s(pw);MEe=n(CIe,"STRONG",{});var Byt=s(MEe);skr=r(Byt,"mbart"),Byt.forEach(t),lkr=r(CIe," \u2014 "),TY=n(CIe,"A",{href:!0});var Iyt=s(TY);ikr=r(Iyt,"FlaxMBartForConditionalGeneration"),Iyt.forEach(t),dkr=r(CIe," (mBART model)"),CIe.forEach(t),ckr=i(we),_w=n(we,"LI",{});var wIe=s(_w);EEe=n(wIe,"STRONG",{});var qyt=s(EEe);mkr=r(qyt,"mt5"),qyt.forEach(t),fkr=r(wIe," \u2014 "),MY=n(wIe,"A",{href:!0});var Nyt=s(MY);gkr=r(Nyt,"FlaxMT5ForConditionalGeneration"),Nyt.forEach(t),hkr=r(wIe," (mT5 model)"),wIe.forEach(t),ukr=i(we),bw=n(we,"LI",{});var AIe=s(bw);CEe=n(AIe,"STRONG",{});var jyt=s(CEe);pkr=r(jyt,"roberta"),jyt.forEach(t),_kr=r(AIe," \u2014 "),EY=n(AIe,"A",{href:!0});var Dyt=s(EY);bkr=r(Dyt,"FlaxRobertaForMaskedLM"),Dyt.forEach(t),vkr=r(AIe," (RoBERTa model)"),AIe.forEach(t),Fkr=i(we),vw=n(we,"LI",{});var yIe=s(vw);wEe=n(yIe,"STRONG",{});var Gyt=s(wEe);Tkr=r(Gyt,"roformer"),Gyt.forEach(t),Mkr=r(yIe," \u2014 "),CY=n(yIe,"A",{href:!0});var Oyt=s(CY);Ekr=r(Oyt,"FlaxRoFormerForMaskedLM"),Oyt.forEach(t),Ckr=r(yIe," (RoFormer model)"),yIe.forEach(t),wkr=i(we),Fw=n(we,"LI",{});var LIe=s(Fw);AEe=n(LIe,"STRONG",{});var Vyt=s(AEe);Akr=r(Vyt,"t5"),Vyt.forEach(t),ykr=r(LIe," \u2014 "),wY=n(LIe,"A",{href:!0});var Xyt=s(wY);Lkr=r(Xyt,"FlaxT5ForConditionalGeneration"),Xyt.forEach(t),xkr=r(LIe," (T5 model)"),LIe.forEach(t),$kr=i(we),Tw=n(we,"LI",{});var xIe=s(Tw);yEe=n(xIe,"STRONG",{});var zyt=s(yEe);kkr=r(zyt,"wav2vec2"),zyt.forEach(t),Skr=r(xIe," \u2014 "),AY=n(xIe,"A",{href:!0});var Wyt=s(AY);Rkr=r(Wyt,"FlaxWav2Vec2ForPreTraining"),Wyt.forEach(t),Pkr=r(xIe," (Wav2Vec2 model)"),xIe.forEach(t),Bkr=i(we),Mw=n(we,"LI",{});var $Ie=s(Mw);LEe=n($Ie,"STRONG",{});var Qyt=s(LEe);Ikr=r(Qyt,"xlm-roberta"),Qyt.forEach(t),qkr=r($Ie," \u2014 "),yY=n($Ie,"A",{href:!0});var Hyt=s(yY);Nkr=r(Hyt,"FlaxXLMRobertaForMaskedLM"),Hyt.forEach(t),jkr=r($Ie," (XLM-RoBERTa model)"),$Ie.forEach(t),we.forEach(t),Dkr=i(Wl),T(Ew.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Tje=i(m),Nc=n(m,"H2",{class:!0});var LGe=s(Nc);Cw=n(LGe,"A",{id:!0,class:!0,href:!0});var Uyt=s(Cw);xEe=n(Uyt,"SPAN",{});var Jyt=s(xEe);T(I9.$$.fragment,Jyt),Jyt.forEach(t),Uyt.forEach(t),Gkr=i(LGe),$Ee=n(LGe,"SPAN",{});var Yyt=s($Ee);Okr=r(Yyt,"FlaxAutoModelForMaskedLM"),Yyt.forEach(t),LGe.forEach(t),Mje=i(m),hr=n(m,"DIV",{class:!0});var Ql=s(hr);T(q9.$$.fragment,Ql),Vkr=i(Ql),jc=n(Ql,"P",{});var Pee=s(jc);Xkr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LY=n(Pee,"A",{href:!0});var Kyt=s(LY);zkr=r(Kyt,"from_pretrained()"),Kyt.forEach(t),Wkr=r(Pee," class method or the "),xY=n(Pee,"A",{href:!0});var Zyt=s(xY);Qkr=r(Zyt,"from_config()"),Zyt.forEach(t),Hkr=r(Pee,` class
method.`),Pee.forEach(t),Ukr=i(Ql),N9=n(Ql,"P",{});var xGe=s(N9);Jkr=r(xGe,"This class cannot be instantiated directly using "),kEe=n(xGe,"CODE",{});var eLt=s(kEe);Ykr=r(eLt,"__init__()"),eLt.forEach(t),Kkr=r(xGe," (throws an error)."),xGe.forEach(t),Zkr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var oy=s(Xt);T(j9.$$.fragment,oy),eSr=i(oy),SEe=n(oy,"P",{});var oLt=s(SEe);oSr=r(oLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oLt.forEach(t),rSr=i(oy),Dc=n(oy,"P",{});var Bee=s(Dc);tSr=r(Bee,`Note:
Loading a model from its configuration file does `),REe=n(Bee,"STRONG",{});var rLt=s(REe);aSr=r(rLt,"not"),rLt.forEach(t),nSr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(Bee,"A",{href:!0});var tLt=s($Y);sSr=r(tLt,"from_pretrained()"),tLt.forEach(t),lSr=r(Bee," to load the model weights."),Bee.forEach(t),iSr=i(oy),T(ww.$$.fragment,oy),oy.forEach(t),dSr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(D9.$$.fragment,Hl),cSr=i(Hl),PEe=n(Hl,"P",{});var aLt=s(PEe);mSr=r(aLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aLt.forEach(t),fSr=i(Hl),_n=n(Hl,"P",{});var ry=s(_n);gSr=r(ry,"The model class to instantiate is selected based on the "),BEe=n(ry,"CODE",{});var nLt=s(BEe);hSr=r(nLt,"model_type"),nLt.forEach(t),uSr=r(ry,` property of the config object (either
passed as an argument or loaded from `),IEe=n(ry,"CODE",{});var sLt=s(IEe);pSr=r(sLt,"pretrained_model_name_or_path"),sLt.forEach(t),_Sr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(ry,"CODE",{});var lLt=s(qEe);bSr=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),vSr=r(ry,":"),ry.forEach(t),FSr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);Aw=n(Ie,"LI",{});var kIe=s(Aw);NEe=n(kIe,"STRONG",{});var iLt=s(NEe);TSr=r(iLt,"albert"),iLt.forEach(t),MSr=r(kIe," \u2014 "),kY=n(kIe,"A",{href:!0});var dLt=s(kY);ESr=r(dLt,"FlaxAlbertForMaskedLM"),dLt.forEach(t),CSr=r(kIe," (ALBERT model)"),kIe.forEach(t),wSr=i(Ie),yw=n(Ie,"LI",{});var SIe=s(yw);jEe=n(SIe,"STRONG",{});var cLt=s(jEe);ASr=r(cLt,"bart"),cLt.forEach(t),ySr=r(SIe," \u2014 "),SY=n(SIe,"A",{href:!0});var mLt=s(SY);LSr=r(mLt,"FlaxBartForConditionalGeneration"),mLt.forEach(t),xSr=r(SIe," (BART model)"),SIe.forEach(t),$Sr=i(Ie),Lw=n(Ie,"LI",{});var RIe=s(Lw);DEe=n(RIe,"STRONG",{});var fLt=s(DEe);kSr=r(fLt,"bert"),fLt.forEach(t),SSr=r(RIe," \u2014 "),RY=n(RIe,"A",{href:!0});var gLt=s(RY);RSr=r(gLt,"FlaxBertForMaskedLM"),gLt.forEach(t),PSr=r(RIe," (BERT model)"),RIe.forEach(t),BSr=i(Ie),xw=n(Ie,"LI",{});var PIe=s(xw);GEe=n(PIe,"STRONG",{});var hLt=s(GEe);ISr=r(hLt,"big_bird"),hLt.forEach(t),qSr=r(PIe," \u2014 "),PY=n(PIe,"A",{href:!0});var uLt=s(PY);NSr=r(uLt,"FlaxBigBirdForMaskedLM"),uLt.forEach(t),jSr=r(PIe," (BigBird model)"),PIe.forEach(t),DSr=i(Ie),$w=n(Ie,"LI",{});var BIe=s($w);OEe=n(BIe,"STRONG",{});var pLt=s(OEe);GSr=r(pLt,"distilbert"),pLt.forEach(t),OSr=r(BIe," \u2014 "),BY=n(BIe,"A",{href:!0});var _Lt=s(BY);VSr=r(_Lt,"FlaxDistilBertForMaskedLM"),_Lt.forEach(t),XSr=r(BIe," (DistilBERT model)"),BIe.forEach(t),zSr=i(Ie),kw=n(Ie,"LI",{});var IIe=s(kw);VEe=n(IIe,"STRONG",{});var bLt=s(VEe);WSr=r(bLt,"electra"),bLt.forEach(t),QSr=r(IIe," \u2014 "),IY=n(IIe,"A",{href:!0});var vLt=s(IY);HSr=r(vLt,"FlaxElectraForMaskedLM"),vLt.forEach(t),USr=r(IIe," (ELECTRA model)"),IIe.forEach(t),JSr=i(Ie),Sw=n(Ie,"LI",{});var qIe=s(Sw);XEe=n(qIe,"STRONG",{});var FLt=s(XEe);YSr=r(FLt,"mbart"),FLt.forEach(t),KSr=r(qIe," \u2014 "),qY=n(qIe,"A",{href:!0});var TLt=s(qY);ZSr=r(TLt,"FlaxMBartForConditionalGeneration"),TLt.forEach(t),eRr=r(qIe," (mBART model)"),qIe.forEach(t),oRr=i(Ie),Rw=n(Ie,"LI",{});var NIe=s(Rw);zEe=n(NIe,"STRONG",{});var MLt=s(zEe);rRr=r(MLt,"roberta"),MLt.forEach(t),tRr=r(NIe," \u2014 "),NY=n(NIe,"A",{href:!0});var ELt=s(NY);aRr=r(ELt,"FlaxRobertaForMaskedLM"),ELt.forEach(t),nRr=r(NIe," (RoBERTa model)"),NIe.forEach(t),sRr=i(Ie),Pw=n(Ie,"LI",{});var jIe=s(Pw);WEe=n(jIe,"STRONG",{});var CLt=s(WEe);lRr=r(CLt,"roformer"),CLt.forEach(t),iRr=r(jIe," \u2014 "),jY=n(jIe,"A",{href:!0});var wLt=s(jY);dRr=r(wLt,"FlaxRoFormerForMaskedLM"),wLt.forEach(t),cRr=r(jIe," (RoFormer model)"),jIe.forEach(t),mRr=i(Ie),Bw=n(Ie,"LI",{});var DIe=s(Bw);QEe=n(DIe,"STRONG",{});var ALt=s(QEe);fRr=r(ALt,"xlm-roberta"),ALt.forEach(t),gRr=r(DIe," \u2014 "),DY=n(DIe,"A",{href:!0});var yLt=s(DY);hRr=r(yLt,"FlaxXLMRobertaForMaskedLM"),yLt.forEach(t),uRr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),Ie.forEach(t),pRr=i(Hl),T(Iw.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),Eje=i(m),Gc=n(m,"H2",{class:!0});var $Ge=s(Gc);qw=n($Ge,"A",{id:!0,class:!0,href:!0});var LLt=s(qw);HEe=n(LLt,"SPAN",{});var xLt=s(HEe);T(G9.$$.fragment,xLt),xLt.forEach(t),LLt.forEach(t),_Rr=i($Ge),UEe=n($Ge,"SPAN",{});var $Lt=s(UEe);bRr=r($Lt,"FlaxAutoModelForSeq2SeqLM"),$Lt.forEach(t),$Ge.forEach(t),Cje=i(m),ur=n(m,"DIV",{class:!0});var Ul=s(ur);T(O9.$$.fragment,Ul),vRr=i(Ul),Oc=n(Ul,"P",{});var Iee=s(Oc);FRr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GY=n(Iee,"A",{href:!0});var kLt=s(GY);TRr=r(kLt,"from_pretrained()"),kLt.forEach(t),MRr=r(Iee," class method or the "),OY=n(Iee,"A",{href:!0});var SLt=s(OY);ERr=r(SLt,"from_config()"),SLt.forEach(t),CRr=r(Iee,` class
method.`),Iee.forEach(t),wRr=i(Ul),V9=n(Ul,"P",{});var kGe=s(V9);ARr=r(kGe,"This class cannot be instantiated directly using "),JEe=n(kGe,"CODE",{});var RLt=s(JEe);yRr=r(RLt,"__init__()"),RLt.forEach(t),LRr=r(kGe," (throws an error)."),kGe.forEach(t),xRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var ty=s(zt);T(X9.$$.fragment,ty),$Rr=i(ty),YEe=n(ty,"P",{});var PLt=s(YEe);kRr=r(PLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PLt.forEach(t),SRr=i(ty),Vc=n(ty,"P",{});var qee=s(Vc);RRr=r(qee,`Note:
Loading a model from its configuration file does `),KEe=n(qee,"STRONG",{});var BLt=s(KEe);PRr=r(BLt,"not"),BLt.forEach(t),BRr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(qee,"A",{href:!0});var ILt=s(VY);IRr=r(ILt,"from_pretrained()"),ILt.forEach(t),qRr=r(qee," to load the model weights."),qee.forEach(t),NRr=i(ty),T(Nw.$$.fragment,ty),ty.forEach(t),jRr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(z9.$$.fragment,Jl),DRr=i(Jl),ZEe=n(Jl,"P",{});var qLt=s(ZEe);GRr=r(qLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qLt.forEach(t),ORr=i(Jl),bn=n(Jl,"P",{});var ay=s(bn);VRr=r(ay,"The model class to instantiate is selected based on the "),eCe=n(ay,"CODE",{});var NLt=s(eCe);XRr=r(NLt,"model_type"),NLt.forEach(t),zRr=r(ay,` property of the config object (either
passed as an argument or loaded from `),oCe=n(ay,"CODE",{});var jLt=s(oCe);WRr=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),QRr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rCe=n(ay,"CODE",{});var DLt=s(rCe);HRr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),URr=r(ay,":"),ay.forEach(t),JRr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);jw=n(ze,"LI",{});var GIe=s(jw);tCe=n(GIe,"STRONG",{});var GLt=s(tCe);YRr=r(GLt,"bart"),GLt.forEach(t),KRr=r(GIe," \u2014 "),XY=n(GIe,"A",{href:!0});var OLt=s(XY);ZRr=r(OLt,"FlaxBartForConditionalGeneration"),OLt.forEach(t),ePr=r(GIe," (BART model)"),GIe.forEach(t),oPr=i(ze),Dw=n(ze,"LI",{});var OIe=s(Dw);aCe=n(OIe,"STRONG",{});var VLt=s(aCe);rPr=r(VLt,"blenderbot"),VLt.forEach(t),tPr=r(OIe," \u2014 "),zY=n(OIe,"A",{href:!0});var XLt=s(zY);aPr=r(XLt,"FlaxBlenderbotForConditionalGeneration"),XLt.forEach(t),nPr=r(OIe," (Blenderbot model)"),OIe.forEach(t),sPr=i(ze),Gw=n(ze,"LI",{});var VIe=s(Gw);nCe=n(VIe,"STRONG",{});var zLt=s(nCe);lPr=r(zLt,"blenderbot-small"),zLt.forEach(t),iPr=r(VIe," \u2014 "),WY=n(VIe,"A",{href:!0});var WLt=s(WY);dPr=r(WLt,"FlaxBlenderbotSmallForConditionalGeneration"),WLt.forEach(t),cPr=r(VIe," (BlenderbotSmall model)"),VIe.forEach(t),mPr=i(ze),Ow=n(ze,"LI",{});var XIe=s(Ow);sCe=n(XIe,"STRONG",{});var QLt=s(sCe);fPr=r(QLt,"encoder-decoder"),QLt.forEach(t),gPr=r(XIe," \u2014 "),QY=n(XIe,"A",{href:!0});var HLt=s(QY);hPr=r(HLt,"FlaxEncoderDecoderModel"),HLt.forEach(t),uPr=r(XIe," (Encoder decoder model)"),XIe.forEach(t),pPr=i(ze),Vw=n(ze,"LI",{});var zIe=s(Vw);lCe=n(zIe,"STRONG",{});var ULt=s(lCe);_Pr=r(ULt,"marian"),ULt.forEach(t),bPr=r(zIe," \u2014 "),HY=n(zIe,"A",{href:!0});var JLt=s(HY);vPr=r(JLt,"FlaxMarianMTModel"),JLt.forEach(t),FPr=r(zIe," (Marian model)"),zIe.forEach(t),TPr=i(ze),Xw=n(ze,"LI",{});var WIe=s(Xw);iCe=n(WIe,"STRONG",{});var YLt=s(iCe);MPr=r(YLt,"mbart"),YLt.forEach(t),EPr=r(WIe," \u2014 "),UY=n(WIe,"A",{href:!0});var KLt=s(UY);CPr=r(KLt,"FlaxMBartForConditionalGeneration"),KLt.forEach(t),wPr=r(WIe," (mBART model)"),WIe.forEach(t),APr=i(ze),zw=n(ze,"LI",{});var QIe=s(zw);dCe=n(QIe,"STRONG",{});var ZLt=s(dCe);yPr=r(ZLt,"mt5"),ZLt.forEach(t),LPr=r(QIe," \u2014 "),JY=n(QIe,"A",{href:!0});var e8t=s(JY);xPr=r(e8t,"FlaxMT5ForConditionalGeneration"),e8t.forEach(t),$Pr=r(QIe," (mT5 model)"),QIe.forEach(t),kPr=i(ze),Ww=n(ze,"LI",{});var HIe=s(Ww);cCe=n(HIe,"STRONG",{});var o8t=s(cCe);SPr=r(o8t,"pegasus"),o8t.forEach(t),RPr=r(HIe," \u2014 "),YY=n(HIe,"A",{href:!0});var r8t=s(YY);PPr=r(r8t,"FlaxPegasusForConditionalGeneration"),r8t.forEach(t),BPr=r(HIe," (Pegasus model)"),HIe.forEach(t),IPr=i(ze),Qw=n(ze,"LI",{});var UIe=s(Qw);mCe=n(UIe,"STRONG",{});var t8t=s(mCe);qPr=r(t8t,"t5"),t8t.forEach(t),NPr=r(UIe," \u2014 "),KY=n(UIe,"A",{href:!0});var a8t=s(KY);jPr=r(a8t,"FlaxT5ForConditionalGeneration"),a8t.forEach(t),DPr=r(UIe," (T5 model)"),UIe.forEach(t),ze.forEach(t),GPr=i(Jl),T(Hw.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),wje=i(m),Xc=n(m,"H2",{class:!0});var SGe=s(Xc);Uw=n(SGe,"A",{id:!0,class:!0,href:!0});var n8t=s(Uw);fCe=n(n8t,"SPAN",{});var s8t=s(fCe);T(W9.$$.fragment,s8t),s8t.forEach(t),n8t.forEach(t),OPr=i(SGe),gCe=n(SGe,"SPAN",{});var l8t=s(gCe);VPr=r(l8t,"FlaxAutoModelForSequenceClassification"),l8t.forEach(t),SGe.forEach(t),Aje=i(m),pr=n(m,"DIV",{class:!0});var Yl=s(pr);T(Q9.$$.fragment,Yl),XPr=i(Yl),zc=n(Yl,"P",{});var Nee=s(zc);zPr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZY=n(Nee,"A",{href:!0});var i8t=s(ZY);WPr=r(i8t,"from_pretrained()"),i8t.forEach(t),QPr=r(Nee," class method or the "),eK=n(Nee,"A",{href:!0});var d8t=s(eK);HPr=r(d8t,"from_config()"),d8t.forEach(t),UPr=r(Nee,` class
method.`),Nee.forEach(t),JPr=i(Yl),H9=n(Yl,"P",{});var RGe=s(H9);YPr=r(RGe,"This class cannot be instantiated directly using "),hCe=n(RGe,"CODE",{});var c8t=s(hCe);KPr=r(c8t,"__init__()"),c8t.forEach(t),ZPr=r(RGe," (throws an error)."),RGe.forEach(t),eBr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var ny=s(Wt);T(U9.$$.fragment,ny),oBr=i(ny),uCe=n(ny,"P",{});var m8t=s(uCe);rBr=r(m8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m8t.forEach(t),tBr=i(ny),Wc=n(ny,"P",{});var jee=s(Wc);aBr=r(jee,`Note:
Loading a model from its configuration file does `),pCe=n(jee,"STRONG",{});var f8t=s(pCe);nBr=r(f8t,"not"),f8t.forEach(t),sBr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(jee,"A",{href:!0});var g8t=s(oK);lBr=r(g8t,"from_pretrained()"),g8t.forEach(t),iBr=r(jee," to load the model weights."),jee.forEach(t),dBr=i(ny),T(Jw.$$.fragment,ny),ny.forEach(t),cBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(J9.$$.fragment,Kl),mBr=i(Kl),_Ce=n(Kl,"P",{});var h8t=s(_Ce);fBr=r(h8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h8t.forEach(t),gBr=i(Kl),vn=n(Kl,"P",{});var sy=s(vn);hBr=r(sy,"The model class to instantiate is selected based on the "),bCe=n(sy,"CODE",{});var u8t=s(bCe);uBr=r(u8t,"model_type"),u8t.forEach(t),pBr=r(sy,` property of the config object (either
passed as an argument or loaded from `),vCe=n(sy,"CODE",{});var p8t=s(vCe);_Br=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),bBr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=n(sy,"CODE",{});var _8t=s(FCe);vBr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),FBr=r(sy,":"),sy.forEach(t),TBr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);Yw=n(qe,"LI",{});var JIe=s(Yw);TCe=n(JIe,"STRONG",{});var b8t=s(TCe);MBr=r(b8t,"albert"),b8t.forEach(t),EBr=r(JIe," \u2014 "),rK=n(JIe,"A",{href:!0});var v8t=s(rK);CBr=r(v8t,"FlaxAlbertForSequenceClassification"),v8t.forEach(t),wBr=r(JIe," (ALBERT model)"),JIe.forEach(t),ABr=i(qe),Kw=n(qe,"LI",{});var YIe=s(Kw);MCe=n(YIe,"STRONG",{});var F8t=s(MCe);yBr=r(F8t,"bart"),F8t.forEach(t),LBr=r(YIe," \u2014 "),tK=n(YIe,"A",{href:!0});var T8t=s(tK);xBr=r(T8t,"FlaxBartForSequenceClassification"),T8t.forEach(t),$Br=r(YIe," (BART model)"),YIe.forEach(t),kBr=i(qe),Zw=n(qe,"LI",{});var KIe=s(Zw);ECe=n(KIe,"STRONG",{});var M8t=s(ECe);SBr=r(M8t,"bert"),M8t.forEach(t),RBr=r(KIe," \u2014 "),aK=n(KIe,"A",{href:!0});var E8t=s(aK);PBr=r(E8t,"FlaxBertForSequenceClassification"),E8t.forEach(t),BBr=r(KIe," (BERT model)"),KIe.forEach(t),IBr=i(qe),e0=n(qe,"LI",{});var ZIe=s(e0);CCe=n(ZIe,"STRONG",{});var C8t=s(CCe);qBr=r(C8t,"big_bird"),C8t.forEach(t),NBr=r(ZIe," \u2014 "),nK=n(ZIe,"A",{href:!0});var w8t=s(nK);jBr=r(w8t,"FlaxBigBirdForSequenceClassification"),w8t.forEach(t),DBr=r(ZIe," (BigBird model)"),ZIe.forEach(t),GBr=i(qe),o0=n(qe,"LI",{});var eqe=s(o0);wCe=n(eqe,"STRONG",{});var A8t=s(wCe);OBr=r(A8t,"distilbert"),A8t.forEach(t),VBr=r(eqe," \u2014 "),sK=n(eqe,"A",{href:!0});var y8t=s(sK);XBr=r(y8t,"FlaxDistilBertForSequenceClassification"),y8t.forEach(t),zBr=r(eqe," (DistilBERT model)"),eqe.forEach(t),WBr=i(qe),r0=n(qe,"LI",{});var oqe=s(r0);ACe=n(oqe,"STRONG",{});var L8t=s(ACe);QBr=r(L8t,"electra"),L8t.forEach(t),HBr=r(oqe," \u2014 "),lK=n(oqe,"A",{href:!0});var x8t=s(lK);UBr=r(x8t,"FlaxElectraForSequenceClassification"),x8t.forEach(t),JBr=r(oqe," (ELECTRA model)"),oqe.forEach(t),YBr=i(qe),t0=n(qe,"LI",{});var rqe=s(t0);yCe=n(rqe,"STRONG",{});var $8t=s(yCe);KBr=r($8t,"mbart"),$8t.forEach(t),ZBr=r(rqe," \u2014 "),iK=n(rqe,"A",{href:!0});var k8t=s(iK);eIr=r(k8t,"FlaxMBartForSequenceClassification"),k8t.forEach(t),oIr=r(rqe," (mBART model)"),rqe.forEach(t),rIr=i(qe),a0=n(qe,"LI",{});var tqe=s(a0);LCe=n(tqe,"STRONG",{});var S8t=s(LCe);tIr=r(S8t,"roberta"),S8t.forEach(t),aIr=r(tqe," \u2014 "),dK=n(tqe,"A",{href:!0});var R8t=s(dK);nIr=r(R8t,"FlaxRobertaForSequenceClassification"),R8t.forEach(t),sIr=r(tqe," (RoBERTa model)"),tqe.forEach(t),lIr=i(qe),n0=n(qe,"LI",{});var aqe=s(n0);xCe=n(aqe,"STRONG",{});var P8t=s(xCe);iIr=r(P8t,"roformer"),P8t.forEach(t),dIr=r(aqe," \u2014 "),cK=n(aqe,"A",{href:!0});var B8t=s(cK);cIr=r(B8t,"FlaxRoFormerForSequenceClassification"),B8t.forEach(t),mIr=r(aqe," (RoFormer model)"),aqe.forEach(t),fIr=i(qe),s0=n(qe,"LI",{});var nqe=s(s0);$Ce=n(nqe,"STRONG",{});var I8t=s($Ce);gIr=r(I8t,"xlm-roberta"),I8t.forEach(t),hIr=r(nqe," \u2014 "),mK=n(nqe,"A",{href:!0});var q8t=s(mK);uIr=r(q8t,"FlaxXLMRobertaForSequenceClassification"),q8t.forEach(t),pIr=r(nqe," (XLM-RoBERTa model)"),nqe.forEach(t),qe.forEach(t),_Ir=i(Kl),T(l0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),yje=i(m),Qc=n(m,"H2",{class:!0});var PGe=s(Qc);i0=n(PGe,"A",{id:!0,class:!0,href:!0});var N8t=s(i0);kCe=n(N8t,"SPAN",{});var j8t=s(kCe);T(Y9.$$.fragment,j8t),j8t.forEach(t),N8t.forEach(t),bIr=i(PGe),SCe=n(PGe,"SPAN",{});var D8t=s(SCe);vIr=r(D8t,"FlaxAutoModelForQuestionAnswering"),D8t.forEach(t),PGe.forEach(t),Lje=i(m),_r=n(m,"DIV",{class:!0});var Zl=s(_r);T(K9.$$.fragment,Zl),FIr=i(Zl),Hc=n(Zl,"P",{});var Dee=s(Hc);TIr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fK=n(Dee,"A",{href:!0});var G8t=s(fK);MIr=r(G8t,"from_pretrained()"),G8t.forEach(t),EIr=r(Dee," class method or the "),gK=n(Dee,"A",{href:!0});var O8t=s(gK);CIr=r(O8t,"from_config()"),O8t.forEach(t),wIr=r(Dee,` class
method.`),Dee.forEach(t),AIr=i(Zl),Z9=n(Zl,"P",{});var BGe=s(Z9);yIr=r(BGe,"This class cannot be instantiated directly using "),RCe=n(BGe,"CODE",{});var V8t=s(RCe);LIr=r(V8t,"__init__()"),V8t.forEach(t),xIr=r(BGe," (throws an error)."),BGe.forEach(t),$Ir=i(Zl),Qt=n(Zl,"DIV",{class:!0});var ly=s(Qt);T(ex.$$.fragment,ly),kIr=i(ly),PCe=n(ly,"P",{});var X8t=s(PCe);SIr=r(X8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),X8t.forEach(t),RIr=i(ly),Uc=n(ly,"P",{});var Gee=s(Uc);PIr=r(Gee,`Note:
Loading a model from its configuration file does `),BCe=n(Gee,"STRONG",{});var z8t=s(BCe);BIr=r(z8t,"not"),z8t.forEach(t),IIr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Gee,"A",{href:!0});var W8t=s(hK);qIr=r(W8t,"from_pretrained()"),W8t.forEach(t),NIr=r(Gee," to load the model weights."),Gee.forEach(t),jIr=i(ly),T(d0.$$.fragment,ly),ly.forEach(t),DIr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(ox.$$.fragment,ei),GIr=i(ei),ICe=n(ei,"P",{});var Q8t=s(ICe);OIr=r(Q8t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Q8t.forEach(t),VIr=i(ei),Fn=n(ei,"P",{});var iy=s(Fn);XIr=r(iy,"The model class to instantiate is selected based on the "),qCe=n(iy,"CODE",{});var H8t=s(qCe);zIr=r(H8t,"model_type"),H8t.forEach(t),WIr=r(iy,` property of the config object (either
passed as an argument or loaded from `),NCe=n(iy,"CODE",{});var U8t=s(NCe);QIr=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),HIr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=n(iy,"CODE",{});var J8t=s(jCe);UIr=r(J8t,"pretrained_model_name_or_path"),J8t.forEach(t),JIr=r(iy,":"),iy.forEach(t),YIr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);c0=n(Ne,"LI",{});var sqe=s(c0);DCe=n(sqe,"STRONG",{});var Y8t=s(DCe);KIr=r(Y8t,"albert"),Y8t.forEach(t),ZIr=r(sqe," \u2014 "),uK=n(sqe,"A",{href:!0});var K8t=s(uK);eqr=r(K8t,"FlaxAlbertForQuestionAnswering"),K8t.forEach(t),oqr=r(sqe," (ALBERT model)"),sqe.forEach(t),rqr=i(Ne),m0=n(Ne,"LI",{});var lqe=s(m0);GCe=n(lqe,"STRONG",{});var Z8t=s(GCe);tqr=r(Z8t,"bart"),Z8t.forEach(t),aqr=r(lqe," \u2014 "),pK=n(lqe,"A",{href:!0});var e7t=s(pK);nqr=r(e7t,"FlaxBartForQuestionAnswering"),e7t.forEach(t),sqr=r(lqe," (BART model)"),lqe.forEach(t),lqr=i(Ne),f0=n(Ne,"LI",{});var iqe=s(f0);OCe=n(iqe,"STRONG",{});var o7t=s(OCe);iqr=r(o7t,"bert"),o7t.forEach(t),dqr=r(iqe," \u2014 "),_K=n(iqe,"A",{href:!0});var r7t=s(_K);cqr=r(r7t,"FlaxBertForQuestionAnswering"),r7t.forEach(t),mqr=r(iqe," (BERT model)"),iqe.forEach(t),fqr=i(Ne),g0=n(Ne,"LI",{});var dqe=s(g0);VCe=n(dqe,"STRONG",{});var t7t=s(VCe);gqr=r(t7t,"big_bird"),t7t.forEach(t),hqr=r(dqe," \u2014 "),bK=n(dqe,"A",{href:!0});var a7t=s(bK);uqr=r(a7t,"FlaxBigBirdForQuestionAnswering"),a7t.forEach(t),pqr=r(dqe," (BigBird model)"),dqe.forEach(t),_qr=i(Ne),h0=n(Ne,"LI",{});var cqe=s(h0);XCe=n(cqe,"STRONG",{});var n7t=s(XCe);bqr=r(n7t,"distilbert"),n7t.forEach(t),vqr=r(cqe," \u2014 "),vK=n(cqe,"A",{href:!0});var s7t=s(vK);Fqr=r(s7t,"FlaxDistilBertForQuestionAnswering"),s7t.forEach(t),Tqr=r(cqe," (DistilBERT model)"),cqe.forEach(t),Mqr=i(Ne),u0=n(Ne,"LI",{});var mqe=s(u0);zCe=n(mqe,"STRONG",{});var l7t=s(zCe);Eqr=r(l7t,"electra"),l7t.forEach(t),Cqr=r(mqe," \u2014 "),FK=n(mqe,"A",{href:!0});var i7t=s(FK);wqr=r(i7t,"FlaxElectraForQuestionAnswering"),i7t.forEach(t),Aqr=r(mqe," (ELECTRA model)"),mqe.forEach(t),yqr=i(Ne),p0=n(Ne,"LI",{});var fqe=s(p0);WCe=n(fqe,"STRONG",{});var d7t=s(WCe);Lqr=r(d7t,"mbart"),d7t.forEach(t),xqr=r(fqe," \u2014 "),TK=n(fqe,"A",{href:!0});var c7t=s(TK);$qr=r(c7t,"FlaxMBartForQuestionAnswering"),c7t.forEach(t),kqr=r(fqe," (mBART model)"),fqe.forEach(t),Sqr=i(Ne),_0=n(Ne,"LI",{});var gqe=s(_0);QCe=n(gqe,"STRONG",{});var m7t=s(QCe);Rqr=r(m7t,"roberta"),m7t.forEach(t),Pqr=r(gqe," \u2014 "),MK=n(gqe,"A",{href:!0});var f7t=s(MK);Bqr=r(f7t,"FlaxRobertaForQuestionAnswering"),f7t.forEach(t),Iqr=r(gqe," (RoBERTa model)"),gqe.forEach(t),qqr=i(Ne),b0=n(Ne,"LI",{});var hqe=s(b0);HCe=n(hqe,"STRONG",{});var g7t=s(HCe);Nqr=r(g7t,"roformer"),g7t.forEach(t),jqr=r(hqe," \u2014 "),EK=n(hqe,"A",{href:!0});var h7t=s(EK);Dqr=r(h7t,"FlaxRoFormerForQuestionAnswering"),h7t.forEach(t),Gqr=r(hqe," (RoFormer model)"),hqe.forEach(t),Oqr=i(Ne),v0=n(Ne,"LI",{});var uqe=s(v0);UCe=n(uqe,"STRONG",{});var u7t=s(UCe);Vqr=r(u7t,"xlm-roberta"),u7t.forEach(t),Xqr=r(uqe," \u2014 "),CK=n(uqe,"A",{href:!0});var p7t=s(CK);zqr=r(p7t,"FlaxXLMRobertaForQuestionAnswering"),p7t.forEach(t),Wqr=r(uqe," (XLM-RoBERTa model)"),uqe.forEach(t),Ne.forEach(t),Qqr=i(ei),T(F0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),xje=i(m),Jc=n(m,"H2",{class:!0});var IGe=s(Jc);T0=n(IGe,"A",{id:!0,class:!0,href:!0});var _7t=s(T0);JCe=n(_7t,"SPAN",{});var b7t=s(JCe);T(rx.$$.fragment,b7t),b7t.forEach(t),_7t.forEach(t),Hqr=i(IGe),YCe=n(IGe,"SPAN",{});var v7t=s(YCe);Uqr=r(v7t,"FlaxAutoModelForTokenClassification"),v7t.forEach(t),IGe.forEach(t),$je=i(m),br=n(m,"DIV",{class:!0});var oi=s(br);T(tx.$$.fragment,oi),Jqr=i(oi),Yc=n(oi,"P",{});var Oee=s(Yc);Yqr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wK=n(Oee,"A",{href:!0});var F7t=s(wK);Kqr=r(F7t,"from_pretrained()"),F7t.forEach(t),Zqr=r(Oee," class method or the "),AK=n(Oee,"A",{href:!0});var T7t=s(AK);eNr=r(T7t,"from_config()"),T7t.forEach(t),oNr=r(Oee,` class
method.`),Oee.forEach(t),rNr=i(oi),ax=n(oi,"P",{});var qGe=s(ax);tNr=r(qGe,"This class cannot be instantiated directly using "),KCe=n(qGe,"CODE",{});var M7t=s(KCe);aNr=r(M7t,"__init__()"),M7t.forEach(t),nNr=r(qGe," (throws an error)."),qGe.forEach(t),sNr=i(oi),Ht=n(oi,"DIV",{class:!0});var dy=s(Ht);T(nx.$$.fragment,dy),lNr=i(dy),ZCe=n(dy,"P",{});var E7t=s(ZCe);iNr=r(E7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),E7t.forEach(t),dNr=i(dy),Kc=n(dy,"P",{});var Vee=s(Kc);cNr=r(Vee,`Note:
Loading a model from its configuration file does `),e5e=n(Vee,"STRONG",{});var C7t=s(e5e);mNr=r(C7t,"not"),C7t.forEach(t),fNr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(Vee,"A",{href:!0});var w7t=s(yK);gNr=r(w7t,"from_pretrained()"),w7t.forEach(t),hNr=r(Vee," to load the model weights."),Vee.forEach(t),uNr=i(dy),T(M0.$$.fragment,dy),dy.forEach(t),pNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(sx.$$.fragment,ri),_Nr=i(ri),o5e=n(ri,"P",{});var A7t=s(o5e);bNr=r(A7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),A7t.forEach(t),vNr=i(ri),Tn=n(ri,"P",{});var cy=s(Tn);FNr=r(cy,"The model class to instantiate is selected based on the "),r5e=n(cy,"CODE",{});var y7t=s(r5e);TNr=r(y7t,"model_type"),y7t.forEach(t),MNr=r(cy,` property of the config object (either
passed as an argument or loaded from `),t5e=n(cy,"CODE",{});var L7t=s(t5e);ENr=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),CNr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(cy,"CODE",{});var x7t=s(a5e);wNr=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),ANr=r(cy,":"),cy.forEach(t),yNr=i(ri),De=n(ri,"UL",{});var Fo=s(De);E0=n(Fo,"LI",{});var pqe=s(E0);n5e=n(pqe,"STRONG",{});var $7t=s(n5e);LNr=r($7t,"albert"),$7t.forEach(t),xNr=r(pqe," \u2014 "),LK=n(pqe,"A",{href:!0});var k7t=s(LK);$Nr=r(k7t,"FlaxAlbertForTokenClassification"),k7t.forEach(t),kNr=r(pqe," (ALBERT model)"),pqe.forEach(t),SNr=i(Fo),C0=n(Fo,"LI",{});var _qe=s(C0);s5e=n(_qe,"STRONG",{});var S7t=s(s5e);RNr=r(S7t,"bert"),S7t.forEach(t),PNr=r(_qe," \u2014 "),xK=n(_qe,"A",{href:!0});var R7t=s(xK);BNr=r(R7t,"FlaxBertForTokenClassification"),R7t.forEach(t),INr=r(_qe," (BERT model)"),_qe.forEach(t),qNr=i(Fo),w0=n(Fo,"LI",{});var bqe=s(w0);l5e=n(bqe,"STRONG",{});var P7t=s(l5e);NNr=r(P7t,"big_bird"),P7t.forEach(t),jNr=r(bqe," \u2014 "),$K=n(bqe,"A",{href:!0});var B7t=s($K);DNr=r(B7t,"FlaxBigBirdForTokenClassification"),B7t.forEach(t),GNr=r(bqe," (BigBird model)"),bqe.forEach(t),ONr=i(Fo),A0=n(Fo,"LI",{});var vqe=s(A0);i5e=n(vqe,"STRONG",{});var I7t=s(i5e);VNr=r(I7t,"distilbert"),I7t.forEach(t),XNr=r(vqe," \u2014 "),kK=n(vqe,"A",{href:!0});var q7t=s(kK);zNr=r(q7t,"FlaxDistilBertForTokenClassification"),q7t.forEach(t),WNr=r(vqe," (DistilBERT model)"),vqe.forEach(t),QNr=i(Fo),y0=n(Fo,"LI",{});var Fqe=s(y0);d5e=n(Fqe,"STRONG",{});var N7t=s(d5e);HNr=r(N7t,"electra"),N7t.forEach(t),UNr=r(Fqe," \u2014 "),SK=n(Fqe,"A",{href:!0});var j7t=s(SK);JNr=r(j7t,"FlaxElectraForTokenClassification"),j7t.forEach(t),YNr=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),KNr=i(Fo),L0=n(Fo,"LI",{});var Tqe=s(L0);c5e=n(Tqe,"STRONG",{});var D7t=s(c5e);ZNr=r(D7t,"roberta"),D7t.forEach(t),ejr=r(Tqe," \u2014 "),RK=n(Tqe,"A",{href:!0});var G7t=s(RK);ojr=r(G7t,"FlaxRobertaForTokenClassification"),G7t.forEach(t),rjr=r(Tqe," (RoBERTa model)"),Tqe.forEach(t),tjr=i(Fo),x0=n(Fo,"LI",{});var Mqe=s(x0);m5e=n(Mqe,"STRONG",{});var O7t=s(m5e);ajr=r(O7t,"roformer"),O7t.forEach(t),njr=r(Mqe," \u2014 "),PK=n(Mqe,"A",{href:!0});var V7t=s(PK);sjr=r(V7t,"FlaxRoFormerForTokenClassification"),V7t.forEach(t),ljr=r(Mqe," (RoFormer model)"),Mqe.forEach(t),ijr=i(Fo),$0=n(Fo,"LI",{});var Eqe=s($0);f5e=n(Eqe,"STRONG",{});var X7t=s(f5e);djr=r(X7t,"xlm-roberta"),X7t.forEach(t),cjr=r(Eqe," \u2014 "),BK=n(Eqe,"A",{href:!0});var z7t=s(BK);mjr=r(z7t,"FlaxXLMRobertaForTokenClassification"),z7t.forEach(t),fjr=r(Eqe," (XLM-RoBERTa model)"),Eqe.forEach(t),Fo.forEach(t),gjr=i(ri),T(k0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),kje=i(m),Zc=n(m,"H2",{class:!0});var NGe=s(Zc);S0=n(NGe,"A",{id:!0,class:!0,href:!0});var W7t=s(S0);g5e=n(W7t,"SPAN",{});var Q7t=s(g5e);T(lx.$$.fragment,Q7t),Q7t.forEach(t),W7t.forEach(t),hjr=i(NGe),h5e=n(NGe,"SPAN",{});var H7t=s(h5e);ujr=r(H7t,"FlaxAutoModelForMultipleChoice"),H7t.forEach(t),NGe.forEach(t),Sje=i(m),vr=n(m,"DIV",{class:!0});var ti=s(vr);T(ix.$$.fragment,ti),pjr=i(ti),em=n(ti,"P",{});var Xee=s(em);_jr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IK=n(Xee,"A",{href:!0});var U7t=s(IK);bjr=r(U7t,"from_pretrained()"),U7t.forEach(t),vjr=r(Xee," class method or the "),qK=n(Xee,"A",{href:!0});var J7t=s(qK);Fjr=r(J7t,"from_config()"),J7t.forEach(t),Tjr=r(Xee,` class
method.`),Xee.forEach(t),Mjr=i(ti),dx=n(ti,"P",{});var jGe=s(dx);Ejr=r(jGe,"This class cannot be instantiated directly using "),u5e=n(jGe,"CODE",{});var Y7t=s(u5e);Cjr=r(Y7t,"__init__()"),Y7t.forEach(t),wjr=r(jGe," (throws an error)."),jGe.forEach(t),Ajr=i(ti),Ut=n(ti,"DIV",{class:!0});var my=s(Ut);T(cx.$$.fragment,my),yjr=i(my),p5e=n(my,"P",{});var K7t=s(p5e);Ljr=r(K7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K7t.forEach(t),xjr=i(my),om=n(my,"P",{});var zee=s(om);$jr=r(zee,`Note:
Loading a model from its configuration file does `),_5e=n(zee,"STRONG",{});var Z7t=s(_5e);kjr=r(Z7t,"not"),Z7t.forEach(t),Sjr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(zee,"A",{href:!0});var e9t=s(NK);Rjr=r(e9t,"from_pretrained()"),e9t.forEach(t),Pjr=r(zee," to load the model weights."),zee.forEach(t),Bjr=i(my),T(R0.$$.fragment,my),my.forEach(t),Ijr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(mx.$$.fragment,ai),qjr=i(ai),b5e=n(ai,"P",{});var o9t=s(b5e);Njr=r(o9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o9t.forEach(t),jjr=i(ai),Mn=n(ai,"P",{});var fy=s(Mn);Djr=r(fy,"The model class to instantiate is selected based on the "),v5e=n(fy,"CODE",{});var r9t=s(v5e);Gjr=r(r9t,"model_type"),r9t.forEach(t),Ojr=r(fy,` property of the config object (either
passed as an argument or loaded from `),F5e=n(fy,"CODE",{});var t9t=s(F5e);Vjr=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),Xjr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=n(fy,"CODE",{});var a9t=s(T5e);zjr=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),Wjr=r(fy,":"),fy.forEach(t),Qjr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);P0=n(To,"LI",{});var Cqe=s(P0);M5e=n(Cqe,"STRONG",{});var n9t=s(M5e);Hjr=r(n9t,"albert"),n9t.forEach(t),Ujr=r(Cqe," \u2014 "),jK=n(Cqe,"A",{href:!0});var s9t=s(jK);Jjr=r(s9t,"FlaxAlbertForMultipleChoice"),s9t.forEach(t),Yjr=r(Cqe," (ALBERT model)"),Cqe.forEach(t),Kjr=i(To),B0=n(To,"LI",{});var wqe=s(B0);E5e=n(wqe,"STRONG",{});var l9t=s(E5e);Zjr=r(l9t,"bert"),l9t.forEach(t),eDr=r(wqe," \u2014 "),DK=n(wqe,"A",{href:!0});var i9t=s(DK);oDr=r(i9t,"FlaxBertForMultipleChoice"),i9t.forEach(t),rDr=r(wqe," (BERT model)"),wqe.forEach(t),tDr=i(To),I0=n(To,"LI",{});var Aqe=s(I0);C5e=n(Aqe,"STRONG",{});var d9t=s(C5e);aDr=r(d9t,"big_bird"),d9t.forEach(t),nDr=r(Aqe," \u2014 "),GK=n(Aqe,"A",{href:!0});var c9t=s(GK);sDr=r(c9t,"FlaxBigBirdForMultipleChoice"),c9t.forEach(t),lDr=r(Aqe," (BigBird model)"),Aqe.forEach(t),iDr=i(To),q0=n(To,"LI",{});var yqe=s(q0);w5e=n(yqe,"STRONG",{});var m9t=s(w5e);dDr=r(m9t,"distilbert"),m9t.forEach(t),cDr=r(yqe," \u2014 "),OK=n(yqe,"A",{href:!0});var f9t=s(OK);mDr=r(f9t,"FlaxDistilBertForMultipleChoice"),f9t.forEach(t),fDr=r(yqe," (DistilBERT model)"),yqe.forEach(t),gDr=i(To),N0=n(To,"LI",{});var Lqe=s(N0);A5e=n(Lqe,"STRONG",{});var g9t=s(A5e);hDr=r(g9t,"electra"),g9t.forEach(t),uDr=r(Lqe," \u2014 "),VK=n(Lqe,"A",{href:!0});var h9t=s(VK);pDr=r(h9t,"FlaxElectraForMultipleChoice"),h9t.forEach(t),_Dr=r(Lqe," (ELECTRA model)"),Lqe.forEach(t),bDr=i(To),j0=n(To,"LI",{});var xqe=s(j0);y5e=n(xqe,"STRONG",{});var u9t=s(y5e);vDr=r(u9t,"roberta"),u9t.forEach(t),FDr=r(xqe," \u2014 "),XK=n(xqe,"A",{href:!0});var p9t=s(XK);TDr=r(p9t,"FlaxRobertaForMultipleChoice"),p9t.forEach(t),MDr=r(xqe," (RoBERTa model)"),xqe.forEach(t),EDr=i(To),D0=n(To,"LI",{});var $qe=s(D0);L5e=n($qe,"STRONG",{});var _9t=s(L5e);CDr=r(_9t,"roformer"),_9t.forEach(t),wDr=r($qe," \u2014 "),zK=n($qe,"A",{href:!0});var b9t=s(zK);ADr=r(b9t,"FlaxRoFormerForMultipleChoice"),b9t.forEach(t),yDr=r($qe," (RoFormer model)"),$qe.forEach(t),LDr=i(To),G0=n(To,"LI",{});var kqe=s(G0);x5e=n(kqe,"STRONG",{});var v9t=s(x5e);xDr=r(v9t,"xlm-roberta"),v9t.forEach(t),$Dr=r(kqe," \u2014 "),WK=n(kqe,"A",{href:!0});var F9t=s(WK);kDr=r(F9t,"FlaxXLMRobertaForMultipleChoice"),F9t.forEach(t),SDr=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),To.forEach(t),RDr=i(ai),T(O0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Rje=i(m),rm=n(m,"H2",{class:!0});var DGe=s(rm);V0=n(DGe,"A",{id:!0,class:!0,href:!0});var T9t=s(V0);$5e=n(T9t,"SPAN",{});var M9t=s($5e);T(fx.$$.fragment,M9t),M9t.forEach(t),T9t.forEach(t),PDr=i(DGe),k5e=n(DGe,"SPAN",{});var E9t=s(k5e);BDr=r(E9t,"FlaxAutoModelForNextSentencePrediction"),E9t.forEach(t),DGe.forEach(t),Pje=i(m),Fr=n(m,"DIV",{class:!0});var ni=s(Fr);T(gx.$$.fragment,ni),IDr=i(ni),tm=n(ni,"P",{});var Wee=s(tm);qDr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QK=n(Wee,"A",{href:!0});var C9t=s(QK);NDr=r(C9t,"from_pretrained()"),C9t.forEach(t),jDr=r(Wee," class method or the "),HK=n(Wee,"A",{href:!0});var w9t=s(HK);DDr=r(w9t,"from_config()"),w9t.forEach(t),GDr=r(Wee,` class
method.`),Wee.forEach(t),ODr=i(ni),hx=n(ni,"P",{});var GGe=s(hx);VDr=r(GGe,"This class cannot be instantiated directly using "),S5e=n(GGe,"CODE",{});var A9t=s(S5e);XDr=r(A9t,"__init__()"),A9t.forEach(t),zDr=r(GGe," (throws an error)."),GGe.forEach(t),WDr=i(ni),Jt=n(ni,"DIV",{class:!0});var gy=s(Jt);T(ux.$$.fragment,gy),QDr=i(gy),R5e=n(gy,"P",{});var y9t=s(R5e);HDr=r(y9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),y9t.forEach(t),UDr=i(gy),am=n(gy,"P",{});var Qee=s(am);JDr=r(Qee,`Note:
Loading a model from its configuration file does `),P5e=n(Qee,"STRONG",{});var L9t=s(P5e);YDr=r(L9t,"not"),L9t.forEach(t),KDr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=n(Qee,"A",{href:!0});var x9t=s(UK);ZDr=r(x9t,"from_pretrained()"),x9t.forEach(t),eGr=r(Qee," to load the model weights."),Qee.forEach(t),oGr=i(gy),T(X0.$$.fragment,gy),gy.forEach(t),rGr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(px.$$.fragment,si),tGr=i(si),B5e=n(si,"P",{});var $9t=s(B5e);aGr=r($9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$9t.forEach(t),nGr=i(si),En=n(si,"P",{});var hy=s(En);sGr=r(hy,"The model class to instantiate is selected based on the "),I5e=n(hy,"CODE",{});var k9t=s(I5e);lGr=r(k9t,"model_type"),k9t.forEach(t),iGr=r(hy,` property of the config object (either
passed as an argument or loaded from `),q5e=n(hy,"CODE",{});var S9t=s(q5e);dGr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),cGr=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(hy,"CODE",{});var R9t=s(N5e);mGr=r(R9t,"pretrained_model_name_or_path"),R9t.forEach(t),fGr=r(hy,":"),hy.forEach(t),gGr=i(si),j5e=n(si,"UL",{});var P9t=s(j5e);z0=n(P9t,"LI",{});var Sqe=s(z0);D5e=n(Sqe,"STRONG",{});var B9t=s(D5e);hGr=r(B9t,"bert"),B9t.forEach(t),uGr=r(Sqe," \u2014 "),JK=n(Sqe,"A",{href:!0});var I9t=s(JK);pGr=r(I9t,"FlaxBertForNextSentencePrediction"),I9t.forEach(t),_Gr=r(Sqe," (BERT model)"),Sqe.forEach(t),P9t.forEach(t),bGr=i(si),T(W0.$$.fragment,si),si.forEach(t),ni.forEach(t),Bje=i(m),nm=n(m,"H2",{class:!0});var OGe=s(nm);Q0=n(OGe,"A",{id:!0,class:!0,href:!0});var q9t=s(Q0);G5e=n(q9t,"SPAN",{});var N9t=s(G5e);T(_x.$$.fragment,N9t),N9t.forEach(t),q9t.forEach(t),vGr=i(OGe),O5e=n(OGe,"SPAN",{});var j9t=s(O5e);FGr=r(j9t,"FlaxAutoModelForImageClassification"),j9t.forEach(t),OGe.forEach(t),Ije=i(m),Tr=n(m,"DIV",{class:!0});var li=s(Tr);T(bx.$$.fragment,li),TGr=i(li),sm=n(li,"P",{});var Hee=s(sm);MGr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YK=n(Hee,"A",{href:!0});var D9t=s(YK);EGr=r(D9t,"from_pretrained()"),D9t.forEach(t),CGr=r(Hee," class method or the "),KK=n(Hee,"A",{href:!0});var G9t=s(KK);wGr=r(G9t,"from_config()"),G9t.forEach(t),AGr=r(Hee,` class
method.`),Hee.forEach(t),yGr=i(li),vx=n(li,"P",{});var VGe=s(vx);LGr=r(VGe,"This class cannot be instantiated directly using "),V5e=n(VGe,"CODE",{});var O9t=s(V5e);xGr=r(O9t,"__init__()"),O9t.forEach(t),$Gr=r(VGe," (throws an error)."),VGe.forEach(t),kGr=i(li),Yt=n(li,"DIV",{class:!0});var uy=s(Yt);T(Fx.$$.fragment,uy),SGr=i(uy),X5e=n(uy,"P",{});var V9t=s(X5e);RGr=r(V9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),V9t.forEach(t),PGr=i(uy),lm=n(uy,"P",{});var Uee=s(lm);BGr=r(Uee,`Note:
Loading a model from its configuration file does `),z5e=n(Uee,"STRONG",{});var X9t=s(z5e);IGr=r(X9t,"not"),X9t.forEach(t),qGr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(Uee,"A",{href:!0});var z9t=s(ZK);NGr=r(z9t,"from_pretrained()"),z9t.forEach(t),jGr=r(Uee," to load the model weights."),Uee.forEach(t),DGr=i(uy),T(H0.$$.fragment,uy),uy.forEach(t),GGr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(Tx.$$.fragment,ii),OGr=i(ii),W5e=n(ii,"P",{});var W9t=s(W5e);VGr=r(W9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W9t.forEach(t),XGr=i(ii),Cn=n(ii,"P",{});var py=s(Cn);zGr=r(py,"The model class to instantiate is selected based on the "),Q5e=n(py,"CODE",{});var Q9t=s(Q5e);WGr=r(Q9t,"model_type"),Q9t.forEach(t),QGr=r(py,` property of the config object (either
passed as an argument or loaded from `),H5e=n(py,"CODE",{});var H9t=s(H5e);HGr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),UGr=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=n(py,"CODE",{});var U9t=s(U5e);JGr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),YGr=r(py,":"),py.forEach(t),KGr=i(ii),Mx=n(ii,"UL",{});var XGe=s(Mx);U0=n(XGe,"LI",{});var Rqe=s(U0);J5e=n(Rqe,"STRONG",{});var J9t=s(J5e);ZGr=r(J9t,"beit"),J9t.forEach(t),eOr=r(Rqe," \u2014 "),eZ=n(Rqe,"A",{href:!0});var Y9t=s(eZ);oOr=r(Y9t,"FlaxBeitForImageClassification"),Y9t.forEach(t),rOr=r(Rqe," (BEiT model)"),Rqe.forEach(t),tOr=i(XGe),J0=n(XGe,"LI",{});var Pqe=s(J0);Y5e=n(Pqe,"STRONG",{});var K9t=s(Y5e);aOr=r(K9t,"vit"),K9t.forEach(t),nOr=r(Pqe," \u2014 "),oZ=n(Pqe,"A",{href:!0});var Z9t=s(oZ);sOr=r(Z9t,"FlaxViTForImageClassification"),Z9t.forEach(t),lOr=r(Pqe," (ViT model)"),Pqe.forEach(t),XGe.forEach(t),iOr=i(ii),T(Y0.$$.fragment,ii),ii.forEach(t),li.forEach(t),qje=i(m),im=n(m,"H2",{class:!0});var zGe=s(im);K0=n(zGe,"A",{id:!0,class:!0,href:!0});var ext=s(K0);K5e=n(ext,"SPAN",{});var oxt=s(K5e);T(Ex.$$.fragment,oxt),oxt.forEach(t),ext.forEach(t),dOr=i(zGe),Z5e=n(zGe,"SPAN",{});var rxt=s(Z5e);cOr=r(rxt,"FlaxAutoModelForVision2Seq"),rxt.forEach(t),zGe.forEach(t),Nje=i(m),Mr=n(m,"DIV",{class:!0});var di=s(Mr);T(Cx.$$.fragment,di),mOr=i(di),dm=n(di,"P",{});var Jee=s(dm);fOr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rZ=n(Jee,"A",{href:!0});var txt=s(rZ);gOr=r(txt,"from_pretrained()"),txt.forEach(t),hOr=r(Jee," class method or the "),tZ=n(Jee,"A",{href:!0});var axt=s(tZ);uOr=r(axt,"from_config()"),axt.forEach(t),pOr=r(Jee,` class
method.`),Jee.forEach(t),_Or=i(di),wx=n(di,"P",{});var WGe=s(wx);bOr=r(WGe,"This class cannot be instantiated directly using "),e3e=n(WGe,"CODE",{});var nxt=s(e3e);vOr=r(nxt,"__init__()"),nxt.forEach(t),FOr=r(WGe," (throws an error)."),WGe.forEach(t),TOr=i(di),Kt=n(di,"DIV",{class:!0});var _y=s(Kt);T(Ax.$$.fragment,_y),MOr=i(_y),o3e=n(_y,"P",{});var sxt=s(o3e);EOr=r(sxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sxt.forEach(t),COr=i(_y),cm=n(_y,"P",{});var Yee=s(cm);wOr=r(Yee,`Note:
Loading a model from its configuration file does `),r3e=n(Yee,"STRONG",{});var lxt=s(r3e);AOr=r(lxt,"not"),lxt.forEach(t),yOr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(Yee,"A",{href:!0});var ixt=s(aZ);LOr=r(ixt,"from_pretrained()"),ixt.forEach(t),xOr=r(Yee," to load the model weights."),Yee.forEach(t),$Or=i(_y),T(Z0.$$.fragment,_y),_y.forEach(t),kOr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(yx.$$.fragment,ci),SOr=i(ci),t3e=n(ci,"P",{});var dxt=s(t3e);ROr=r(dxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dxt.forEach(t),POr=i(ci),wn=n(ci,"P",{});var by=s(wn);BOr=r(by,"The model class to instantiate is selected based on the "),a3e=n(by,"CODE",{});var cxt=s(a3e);IOr=r(cxt,"model_type"),cxt.forEach(t),qOr=r(by,` property of the config object (either
passed as an argument or loaded from `),n3e=n(by,"CODE",{});var mxt=s(n3e);NOr=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),jOr=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(by,"CODE",{});var fxt=s(s3e);DOr=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),GOr=r(by,":"),by.forEach(t),OOr=i(ci),l3e=n(ci,"UL",{});var gxt=s(l3e);eA=n(gxt,"LI",{});var Bqe=s(eA);i3e=n(Bqe,"STRONG",{});var hxt=s(i3e);VOr=r(hxt,"vision-encoder-decoder"),hxt.forEach(t),XOr=r(Bqe," \u2014 "),nZ=n(Bqe,"A",{href:!0});var uxt=s(nZ);zOr=r(uxt,"FlaxVisionEncoderDecoderModel"),uxt.forEach(t),WOr=r(Bqe," (Vision Encoder decoder model)"),Bqe.forEach(t),gxt.forEach(t),QOr=i(ci),T(oA.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(vkt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(bm,"id","extending-the-auto-classes"),c(bm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bm,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Fm,"id","transformers.AutoConfig"),c(Fm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fm,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(Q$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(H$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(uk,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c($k,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(qk,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Nk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(Vk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(Jk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(FS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(CS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c($S,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(RS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(NS,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoTokenizer"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(HS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(US,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(JS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(YS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(KS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(ZS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(eR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(oR,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(rR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(tR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(aR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(sR,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(dR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(mR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(uR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(_R,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(FR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(TR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(MR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(CR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(AR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(xR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c($R,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(kR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(SR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(RR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(BR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(IR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(qR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(OR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(VR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(XR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(zR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(QR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(YR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(oP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(rP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(tP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(aP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(nP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(sP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(lP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(iP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(dP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(cP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(mP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(fP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(gP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(hP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(uP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(pP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(_P,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(bP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(vP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(FP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(TP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(MP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(EP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(CP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(wP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(AP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(yP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(LP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(xP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c($P,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(kP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(SP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(RP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(PP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(BP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(IP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(qP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(NP,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(jP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(OP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(VP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(zP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(WP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(HP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(UP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(JP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(KP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(sB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(iB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(uB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(FB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(CB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(LB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c($B,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(kB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(SB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(RB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(qB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(NB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(jB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(DB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(GB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(OB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VB,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(XB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(zB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(WB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(QB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(HB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(UB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(KB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"id","transformers.AutoProcessor"),c(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(sI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(lI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(iI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(dI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(cI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(mI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(hI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(uI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(pI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_I,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(vI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(FI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(au,"id","transformers.AutoModel"),c(au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(au,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(EI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(yI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(LI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(xI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c($I,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(kI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(SI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(RI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(PI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(BI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(II,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(qI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(NI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(jI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(DI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(GI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(OI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(VI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(XI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(zI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(WI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(QI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(HI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(UI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(JI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(YI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(KI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(eq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(oq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(rq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(tq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(aq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(nq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(sq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(lq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(iq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(dq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(cq,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(mq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(fq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(gq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(hq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(uq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(pq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(_q,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(bq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(vq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(Tq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(wq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(yq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(Lq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(xq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c($q,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(kq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(qq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(jq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(zq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(Kq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(eN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(oN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(rN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(tN,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(aN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(nN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(sN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(lN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(iN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(dN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(cN,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(mN,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(fN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(gN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(hN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(uN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(pN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(_N,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(bN,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(vN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e_,"id","transformers.AutoModelForPreTraining"),c(e_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(FN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(CN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(wN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(AN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(yN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(LN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(xN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c($N,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(kN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(SN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(RN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(PN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(BN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(IN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(qN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(NN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(jN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(DN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(GN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ON,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(VN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(XN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(zN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(WN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(QN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(HN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(UN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(JN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(YN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(KN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ZN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(ej,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oj,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(rj,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(tj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(aj,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(nj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(sj,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(lj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ij,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(dj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(cj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W_,"id","transformers.AutoModelForCausalLM"),c(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(mj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(uj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(pj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(_j,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(bj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(vj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Fj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Tj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Mj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Cj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(wj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(yj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Lj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(xj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c($j,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(kj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Bj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(qj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Nj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(jj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Gj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Vj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Xj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(zj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Wj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Qj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Hj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Uj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sb,"id","transformers.AutoModelForMaskedLM"),c(Sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sb,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Jj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(eD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(rD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(tD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(nD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(cD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(fD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(gD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(_D,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(bD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(vD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(TD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(MD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(ED,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(CD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(wD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(yD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($D,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(SD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForSeq2SeqLM"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(RD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ID,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ND,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(jD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(DD,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(GD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(OD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(VD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(XD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(zD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(WD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(QD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(HD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(UD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(JD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q2,"id","transformers.AutoModelForSequenceClassification"),c(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q2,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(KD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(rG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(aG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(nG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(sG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(lG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(iG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(dG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(cG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(mG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(fG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(gG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(vG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(FG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(TG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(MG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(EG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(CG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(wG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(AG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(yG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(LG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(xG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c($G,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(kG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(SG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(RG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(PG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(BG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(IG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(qG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(NG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(jG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(DG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(GG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(OG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(VG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(XG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(WG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(QG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForMultipleChoice"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(HG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(KG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(ZG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(eO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(oO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(rO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(tO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(aO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(nO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(sO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(lO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(iO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(dO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(cO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(mO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(fO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(gO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(hO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(uO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(pO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(_O,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(bO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(vO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(FO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(TO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(MO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(EO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(CO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(wO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForNextSentencePrediction"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(AO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c($O,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(kO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(SO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(RO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForTokenClassification"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(NO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(jO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(DO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(GO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(OO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(VO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(XO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(zO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(WO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(QO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(HO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(UO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(JO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(YO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(KO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(ZO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(eV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(oV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(rV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(lV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(dV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(cV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(fV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(gV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(uV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s1,"id","transformers.AutoModelForQuestionAnswering"),c(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s1,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(_V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(TV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(MV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(EV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(CV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(wV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(AV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(xV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c($V,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(SV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(RV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(BV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(IV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(qV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(NV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(DV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(GV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(VV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(XV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(zV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(WV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(QV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(HV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(UV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(JV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(YV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(KV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ZV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(eX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(oX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(rX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(tX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(aX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(nX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J1,"id","transformers.AutoModelForTableQuestionAnswering"),c(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(sX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForImageClassification"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(cX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(vX,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(TX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(MX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(EX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForVision2Seq"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c($X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForAudioClassification"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(NX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(DX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(GX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(OX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(VX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(XX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(zX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForAudioFrameClassification"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(WX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(JX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(YX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(KX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(ZX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForCTC"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(az,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(nz,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(sz,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(lz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(iz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(dz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(cz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(mz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(pz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.AutoModelForAudioXVector"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(_z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Tz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Mz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Ez,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Cz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.AutoModelForMaskedImageModeling"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(xz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c($z,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.AutoModelForObjectDetection"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Bz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.AutoModelForImageSegmentation"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.AutoModelForSemanticSegmentation"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Xz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(zz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Wz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.AutoModelForInstanceSegmentation"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModel"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(oW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(rW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(tW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(aW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(nW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(sW,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(lW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(iW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(dW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(cW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(mW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(fW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(gW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(hW,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(uW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(pW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(_W,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(bW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(vW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(FW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(TW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(MW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(EW,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(CW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(wW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(AW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(yW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(LW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(xW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c($W,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(kW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(SW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(RW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(PW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(BW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(IW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(qW,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(NW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(jW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(DW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(GW,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(OW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(VW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(XW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(zW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(WW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.TFAutoModelForPreTraining"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(YW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(KW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(ZW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(eQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(tQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(nQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(iQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(dQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(gQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(pQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_Q,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForCausalLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(EQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($Q,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForImageClassification"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(jQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForMaskedLM"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(WQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ZQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(eH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(rH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(tH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(nH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(lH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(uH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(pH,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(_H,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(bH,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(vH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(FH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(TH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(MH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.TFAutoModelForSequenceClassification"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c($H,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.TFAutoModelForMultipleChoice"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(rU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(tU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(aU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(nU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(sU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(lU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(iU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(dU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(cU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(mU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(fU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(gU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(hU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(uU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(pU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(_U,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(MU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(EU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.TFAutoModelForTokenClassification"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(yU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(kU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(SU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(RU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(PU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(BU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(IU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(qU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(NU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(DU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(GU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(OU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(VU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(XU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(zU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(WU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(QU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(HU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.TFAutoModelForQuestionAnswering"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(eJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(oJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(rJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(tJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(aJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(nJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(sJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(lJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(iJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(dJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(cJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(mJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(fJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(gJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(uJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(pJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(_J,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(bJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.TFAutoModelForVision2Seq"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(vJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.FlaxAutoModel"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(kJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(SJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(RJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(PJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(BJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(IJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(qJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(NJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(DJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(GJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(VJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(XJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(WJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(QJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(HJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(UJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(JJ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(YJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(KJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(ZJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(eY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForCausalLM"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(nY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(sY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(lY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(iY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(dY,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(cY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(mY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(fY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.FlaxAutoModelForPreTraining"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(_Y,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(vY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(FY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(TY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(CY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(AY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(yY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cw,"id","transformers.FlaxAutoModelForMaskedLM"),c(Cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(LY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(SY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(PY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(BY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(IY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(qY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(jY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(DY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(GY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(WY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(QY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(HY,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(UY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(KY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(fK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(pK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(_K,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(bK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(vK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(FK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(TK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(MK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(EK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(CK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.FlaxAutoModelForTokenClassification"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(xK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c($K,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(kK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(SK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(RK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(PK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(BK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(DK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(GK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(OK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(VK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(XK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(zK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(WK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rm,"class","relative group"),c(QK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q0,"id","transformers.FlaxAutoModelForImageClassification"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.FlaxAutoModelForImageClassification"),c(nm,"class","relative group"),c(YK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(oZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K0,"id","transformers.FlaxAutoModelForVision2Seq"),c(K0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(im,"class","relative group"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,mi),b(m,hm,_),b(m,rt,_),e(rt,fi),e(rt,gi),e(gi,vy),e(rt,um),b(m,je,_),b(m,We,_),e(We,hi),e(We,yn),e(yn,Fy),e(We,Ln),e(We,xn),e(xn,Ty),e(We,ui),e(We,$n),e($n,My),e(We,pi),b(m,pm,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,G$),e(Ae,_i),e(_i,O$),e(Ae,V$),b(m,Eo,_),b(m,wa,_),e(wa,X$),e(wa,_m),e(_m,z$),e(wa,QGe),b(m,Iqe,_),b(m,bi,_),e(bi,bm),e(bm,Kee),M(Ey,Kee,null),e(bi,HGe),e(bi,Zee),e(Zee,UGe),b(m,qqe,_),b(m,kn,_),e(kn,JGe),e(kn,eoe),e(eoe,YGe),e(kn,KGe),e(kn,ooe),e(ooe,ZGe),e(kn,eOe),b(m,Nqe,_),M(Cy,m,_),b(m,jqe,_),b(m,W$,_),e(W$,oOe),b(m,Dqe,_),M(vm,m,_),b(m,Gqe,_),b(m,vi,_),e(vi,Fm),e(Fm,roe),M(wy,roe,null),e(vi,rOe),e(vi,toe),e(toe,tOe),b(m,Oqe,_),b(m,Co,_),M(Ay,Co,null),e(Co,aOe),e(Co,yy),e(yy,nOe),e(yy,Q$),e(Q$,sOe),e(yy,lOe),e(Co,iOe),e(Co,Ly),e(Ly,dOe),e(Ly,aoe),e(aoe,cOe),e(Ly,mOe),e(Co,fOe),e(Co,Er),M(xy,Er,null),e(Er,gOe),e(Er,noe),e(noe,hOe),e(Er,uOe),e(Er,Fi),e(Fi,pOe),e(Fi,soe),e(soe,_Oe),e(Fi,bOe),e(Fi,loe),e(loe,vOe),e(Fi,FOe),e(Er,TOe),e(Er,A),e(A,Tm),e(Tm,ioe),e(ioe,MOe),e(Tm,EOe),e(Tm,H$),e(H$,COe),e(Tm,wOe),e(A,AOe),e(A,Mm),e(Mm,doe),e(doe,yOe),e(Mm,LOe),e(Mm,U$),e(U$,xOe),e(Mm,$Oe),e(A,kOe),e(A,Em),e(Em,coe),e(coe,SOe),e(Em,ROe),e(Em,J$),e(J$,POe),e(Em,BOe),e(A,IOe),e(A,Cm),e(Cm,moe),e(moe,qOe),e(Cm,NOe),e(Cm,Y$),e(Y$,jOe),e(Cm,DOe),e(A,GOe),e(A,wm),e(wm,foe),e(foe,OOe),e(wm,VOe),e(wm,K$),e(K$,XOe),e(wm,zOe),e(A,WOe),e(A,Am),e(Am,goe),e(goe,QOe),e(Am,HOe),e(Am,Z$),e(Z$,UOe),e(Am,JOe),e(A,YOe),e(A,ym),e(ym,hoe),e(hoe,KOe),e(ym,ZOe),e(ym,ek),e(ek,eVe),e(ym,oVe),e(A,rVe),e(A,Lm),e(Lm,uoe),e(uoe,tVe),e(Lm,aVe),e(Lm,ok),e(ok,nVe),e(Lm,sVe),e(A,lVe),e(A,xm),e(xm,poe),e(poe,iVe),e(xm,dVe),e(xm,rk),e(rk,cVe),e(xm,mVe),e(A,fVe),e(A,$m),e($m,_oe),e(_oe,gVe),e($m,hVe),e($m,tk),e(tk,uVe),e($m,pVe),e(A,_Ve),e(A,km),e(km,boe),e(boe,bVe),e(km,vVe),e(km,ak),e(ak,FVe),e(km,TVe),e(A,MVe),e(A,Sm),e(Sm,voe),e(voe,EVe),e(Sm,CVe),e(Sm,nk),e(nk,wVe),e(Sm,AVe),e(A,yVe),e(A,Rm),e(Rm,Foe),e(Foe,LVe),e(Rm,xVe),e(Rm,sk),e(sk,$Ve),e(Rm,kVe),e(A,SVe),e(A,Pm),e(Pm,Toe),e(Toe,RVe),e(Pm,PVe),e(Pm,lk),e(lk,BVe),e(Pm,IVe),e(A,qVe),e(A,Bm),e(Bm,Moe),e(Moe,NVe),e(Bm,jVe),e(Bm,ik),e(ik,DVe),e(Bm,GVe),e(A,OVe),e(A,Im),e(Im,Eoe),e(Eoe,VVe),e(Im,XVe),e(Im,dk),e(dk,zVe),e(Im,WVe),e(A,QVe),e(A,qm),e(qm,Coe),e(Coe,HVe),e(qm,UVe),e(qm,ck),e(ck,JVe),e(qm,YVe),e(A,KVe),e(A,Nm),e(Nm,woe),e(woe,ZVe),e(Nm,eXe),e(Nm,mk),e(mk,oXe),e(Nm,rXe),e(A,tXe),e(A,jm),e(jm,Aoe),e(Aoe,aXe),e(jm,nXe),e(jm,fk),e(fk,sXe),e(jm,lXe),e(A,iXe),e(A,Dm),e(Dm,yoe),e(yoe,dXe),e(Dm,cXe),e(Dm,gk),e(gk,mXe),e(Dm,fXe),e(A,gXe),e(A,Gm),e(Gm,Loe),e(Loe,hXe),e(Gm,uXe),e(Gm,hk),e(hk,pXe),e(Gm,_Xe),e(A,bXe),e(A,Om),e(Om,xoe),e(xoe,vXe),e(Om,FXe),e(Om,uk),e(uk,TXe),e(Om,MXe),e(A,EXe),e(A,Vm),e(Vm,$oe),e($oe,CXe),e(Vm,wXe),e(Vm,pk),e(pk,AXe),e(Vm,yXe),e(A,LXe),e(A,Xm),e(Xm,koe),e(koe,xXe),e(Xm,$Xe),e(Xm,_k),e(_k,kXe),e(Xm,SXe),e(A,RXe),e(A,zm),e(zm,Soe),e(Soe,PXe),e(zm,BXe),e(zm,bk),e(bk,IXe),e(zm,qXe),e(A,NXe),e(A,Wm),e(Wm,Roe),e(Roe,jXe),e(Wm,DXe),e(Wm,vk),e(vk,GXe),e(Wm,OXe),e(A,VXe),e(A,Qm),e(Qm,Poe),e(Poe,XXe),e(Qm,zXe),e(Qm,Fk),e(Fk,WXe),e(Qm,QXe),e(A,HXe),e(A,Hm),e(Hm,Boe),e(Boe,UXe),e(Hm,JXe),e(Hm,Tk),e(Tk,YXe),e(Hm,KXe),e(A,ZXe),e(A,Um),e(Um,Ioe),e(Ioe,eze),e(Um,oze),e(Um,Mk),e(Mk,rze),e(Um,tze),e(A,aze),e(A,Jm),e(Jm,qoe),e(qoe,nze),e(Jm,sze),e(Jm,Ek),e(Ek,lze),e(Jm,ize),e(A,dze),e(A,Ym),e(Ym,Noe),e(Noe,cze),e(Ym,mze),e(Ym,Ck),e(Ck,fze),e(Ym,gze),e(A,hze),e(A,Km),e(Km,joe),e(joe,uze),e(Km,pze),e(Km,wk),e(wk,_ze),e(Km,bze),e(A,vze),e(A,Zm),e(Zm,Doe),e(Doe,Fze),e(Zm,Tze),e(Zm,Ak),e(Ak,Mze),e(Zm,Eze),e(A,Cze),e(A,ef),e(ef,Goe),e(Goe,wze),e(ef,Aze),e(ef,yk),e(yk,yze),e(ef,Lze),e(A,xze),e(A,of),e(of,Ooe),e(Ooe,$ze),e(of,kze),e(of,Lk),e(Lk,Sze),e(of,Rze),e(A,Pze),e(A,rf),e(rf,Voe),e(Voe,Bze),e(rf,Ize),e(rf,xk),e(xk,qze),e(rf,Nze),e(A,jze),e(A,tf),e(tf,Xoe),e(Xoe,Dze),e(tf,Gze),e(tf,$k),e($k,Oze),e(tf,Vze),e(A,Xze),e(A,af),e(af,zoe),e(zoe,zze),e(af,Wze),e(af,kk),e(kk,Qze),e(af,Hze),e(A,Uze),e(A,nf),e(nf,Woe),e(Woe,Jze),e(nf,Yze),e(nf,Sk),e(Sk,Kze),e(nf,Zze),e(A,eWe),e(A,sf),e(sf,Qoe),e(Qoe,oWe),e(sf,rWe),e(sf,Rk),e(Rk,tWe),e(sf,aWe),e(A,nWe),e(A,lf),e(lf,Hoe),e(Hoe,sWe),e(lf,lWe),e(lf,Pk),e(Pk,iWe),e(lf,dWe),e(A,cWe),e(A,df),e(df,Uoe),e(Uoe,mWe),e(df,fWe),e(df,Bk),e(Bk,gWe),e(df,hWe),e(A,uWe),e(A,cf),e(cf,Joe),e(Joe,pWe),e(cf,_We),e(cf,Ik),e(Ik,bWe),e(cf,vWe),e(A,FWe),e(A,mf),e(mf,Yoe),e(Yoe,TWe),e(mf,MWe),e(mf,qk),e(qk,EWe),e(mf,CWe),e(A,wWe),e(A,ff),e(ff,Koe),e(Koe,AWe),e(ff,yWe),e(ff,Nk),e(Nk,LWe),e(ff,xWe),e(A,$We),e(A,gf),e(gf,Zoe),e(Zoe,kWe),e(gf,SWe),e(gf,jk),e(jk,RWe),e(gf,PWe),e(A,BWe),e(A,hf),e(hf,ere),e(ere,IWe),e(hf,qWe),e(hf,Dk),e(Dk,NWe),e(hf,jWe),e(A,DWe),e(A,uf),e(uf,ore),e(ore,GWe),e(uf,OWe),e(uf,Gk),e(Gk,VWe),e(uf,XWe),e(A,zWe),e(A,pf),e(pf,rre),e(rre,WWe),e(pf,QWe),e(pf,Ok),e(Ok,HWe),e(pf,UWe),e(A,JWe),e(A,_f),e(_f,tre),e(tre,YWe),e(_f,KWe),e(_f,Vk),e(Vk,ZWe),e(_f,eQe),e(A,oQe),e(A,bf),e(bf,are),e(are,rQe),e(bf,tQe),e(bf,Xk),e(Xk,aQe),e(bf,nQe),e(A,sQe),e(A,vf),e(vf,nre),e(nre,lQe),e(vf,iQe),e(vf,zk),e(zk,dQe),e(vf,cQe),e(A,mQe),e(A,Ff),e(Ff,sre),e(sre,fQe),e(Ff,gQe),e(Ff,Wk),e(Wk,hQe),e(Ff,uQe),e(A,pQe),e(A,Tf),e(Tf,lre),e(lre,_Qe),e(Tf,bQe),e(Tf,Qk),e(Qk,vQe),e(Tf,FQe),e(A,TQe),e(A,Mf),e(Mf,ire),e(ire,MQe),e(Mf,EQe),e(Mf,Hk),e(Hk,CQe),e(Mf,wQe),e(A,AQe),e(A,Ef),e(Ef,dre),e(dre,yQe),e(Ef,LQe),e(Ef,Uk),e(Uk,xQe),e(Ef,$Qe),e(A,kQe),e(A,Cf),e(Cf,cre),e(cre,SQe),e(Cf,RQe),e(Cf,Jk),e(Jk,PQe),e(Cf,BQe),e(A,IQe),e(A,wf),e(wf,mre),e(mre,qQe),e(wf,NQe),e(wf,Yk),e(Yk,jQe),e(wf,DQe),e(A,GQe),e(A,Af),e(Af,fre),e(fre,OQe),e(Af,VQe),e(Af,Kk),e(Kk,XQe),e(Af,zQe),e(A,WQe),e(A,yf),e(yf,gre),e(gre,QQe),e(yf,HQe),e(yf,Zk),e(Zk,UQe),e(yf,JQe),e(A,YQe),e(A,Lf),e(Lf,hre),e(hre,KQe),e(Lf,ZQe),e(Lf,eS),e(eS,eHe),e(Lf,oHe),e(A,rHe),e(A,xf),e(xf,ure),e(ure,tHe),e(xf,aHe),e(xf,oS),e(oS,nHe),e(xf,sHe),e(A,lHe),e(A,$f),e($f,pre),e(pre,iHe),e($f,dHe),e($f,rS),e(rS,cHe),e($f,mHe),e(A,fHe),e(A,kf),e(kf,_re),e(_re,gHe),e(kf,hHe),e(kf,tS),e(tS,uHe),e(kf,pHe),e(A,_He),e(A,Sf),e(Sf,bre),e(bre,bHe),e(Sf,vHe),e(Sf,aS),e(aS,FHe),e(Sf,THe),e(A,MHe),e(A,Rf),e(Rf,vre),e(vre,EHe),e(Rf,CHe),e(Rf,nS),e(nS,wHe),e(Rf,AHe),e(A,yHe),e(A,Pf),e(Pf,Fre),e(Fre,LHe),e(Pf,xHe),e(Pf,sS),e(sS,$He),e(Pf,kHe),e(A,SHe),e(A,Bf),e(Bf,Tre),e(Tre,RHe),e(Bf,PHe),e(Bf,lS),e(lS,BHe),e(Bf,IHe),e(A,qHe),e(A,If),e(If,Mre),e(Mre,NHe),e(If,jHe),e(If,iS),e(iS,DHe),e(If,GHe),e(A,OHe),e(A,qf),e(qf,Ere),e(Ere,VHe),e(qf,XHe),e(qf,dS),e(dS,zHe),e(qf,WHe),e(A,QHe),e(A,Nf),e(Nf,Cre),e(Cre,HHe),e(Nf,UHe),e(Nf,cS),e(cS,JHe),e(Nf,YHe),e(A,KHe),e(A,jf),e(jf,wre),e(wre,ZHe),e(jf,eUe),e(jf,mS),e(mS,oUe),e(jf,rUe),e(A,tUe),e(A,Df),e(Df,Are),e(Are,aUe),e(Df,nUe),e(Df,fS),e(fS,sUe),e(Df,lUe),e(A,iUe),e(A,Gf),e(Gf,yre),e(yre,dUe),e(Gf,cUe),e(Gf,gS),e(gS,mUe),e(Gf,fUe),e(A,gUe),e(A,Of),e(Of,Lre),e(Lre,hUe),e(Of,uUe),e(Of,hS),e(hS,pUe),e(Of,_Ue),e(A,bUe),e(A,Vf),e(Vf,xre),e(xre,vUe),e(Vf,FUe),e(Vf,uS),e(uS,TUe),e(Vf,MUe),e(A,EUe),e(A,Xf),e(Xf,$re),e($re,CUe),e(Xf,wUe),e(Xf,pS),e(pS,AUe),e(Xf,yUe),e(A,LUe),e(A,zf),e(zf,kre),e(kre,xUe),e(zf,$Ue),e(zf,_S),e(_S,kUe),e(zf,SUe),e(A,RUe),e(A,Wf),e(Wf,Sre),e(Sre,PUe),e(Wf,BUe),e(Wf,bS),e(bS,IUe),e(Wf,qUe),e(A,NUe),e(A,Qf),e(Qf,Rre),e(Rre,jUe),e(Qf,DUe),e(Qf,vS),e(vS,GUe),e(Qf,OUe),e(A,VUe),e(A,Hf),e(Hf,Pre),e(Pre,XUe),e(Hf,zUe),e(Hf,FS),e(FS,WUe),e(Hf,QUe),e(A,HUe),e(A,Uf),e(Uf,Bre),e(Bre,UUe),e(Uf,JUe),e(Uf,TS),e(TS,YUe),e(Uf,KUe),e(A,ZUe),e(A,Jf),e(Jf,Ire),e(Ire,eJe),e(Jf,oJe),e(Jf,MS),e(MS,rJe),e(Jf,tJe),e(A,aJe),e(A,Yf),e(Yf,qre),e(qre,nJe),e(Yf,sJe),e(Yf,ES),e(ES,lJe),e(Yf,iJe),e(A,dJe),e(A,Kf),e(Kf,Nre),e(Nre,cJe),e(Kf,mJe),e(Kf,CS),e(CS,fJe),e(Kf,gJe),e(A,hJe),e(A,Zf),e(Zf,jre),e(jre,uJe),e(Zf,pJe),e(Zf,wS),e(wS,_Je),e(Zf,bJe),e(A,vJe),e(A,eg),e(eg,Dre),e(Dre,FJe),e(eg,TJe),e(eg,AS),e(AS,MJe),e(eg,EJe),e(A,CJe),e(A,og),e(og,Gre),e(Gre,wJe),e(og,AJe),e(og,yS),e(yS,yJe),e(og,LJe),e(A,xJe),e(A,rg),e(rg,Ore),e(Ore,$Je),e(rg,kJe),e(rg,LS),e(LS,SJe),e(rg,RJe),e(A,PJe),e(A,tg),e(tg,Vre),e(Vre,BJe),e(tg,IJe),e(tg,xS),e(xS,qJe),e(tg,NJe),e(A,jJe),e(A,ag),e(ag,Xre),e(Xre,DJe),e(ag,GJe),e(ag,$S),e($S,OJe),e(ag,VJe),e(A,XJe),e(A,ng),e(ng,zre),e(zre,zJe),e(ng,WJe),e(ng,kS),e(kS,QJe),e(ng,HJe),e(A,UJe),e(A,sg),e(sg,Wre),e(Wre,JJe),e(sg,YJe),e(sg,SS),e(SS,KJe),e(sg,ZJe),e(A,eYe),e(A,lg),e(lg,Qre),e(Qre,oYe),e(lg,rYe),e(lg,RS),e(RS,tYe),e(lg,aYe),e(A,nYe),e(A,ig),e(ig,Hre),e(Hre,sYe),e(ig,lYe),e(ig,PS),e(PS,iYe),e(ig,dYe),e(A,cYe),e(A,dg),e(dg,Ure),e(Ure,mYe),e(dg,fYe),e(dg,BS),e(BS,gYe),e(dg,hYe),e(A,uYe),e(A,cg),e(cg,Jre),e(Jre,pYe),e(cg,_Ye),e(cg,IS),e(IS,bYe),e(cg,vYe),e(A,FYe),e(A,mg),e(mg,Yre),e(Yre,TYe),e(mg,MYe),e(mg,qS),e(qS,EYe),e(mg,CYe),e(A,wYe),e(A,fg),e(fg,Kre),e(Kre,AYe),e(fg,yYe),e(fg,NS),e(NS,LYe),e(fg,xYe),e(A,$Ye),e(A,gg),e(gg,Zre),e(Zre,kYe),e(gg,SYe),e(gg,jS),e(jS,RYe),e(gg,PYe),e(A,BYe),e(A,hg),e(hg,ete),e(ete,IYe),e(hg,qYe),e(hg,DS),e(DS,NYe),e(hg,jYe),e(A,DYe),e(A,ug),e(ug,ote),e(ote,GYe),e(ug,OYe),e(ug,GS),e(GS,VYe),e(ug,XYe),e(A,zYe),e(A,pg),e(pg,rte),e(rte,WYe),e(pg,QYe),e(pg,OS),e(OS,HYe),e(pg,UYe),e(A,JYe),e(A,_g),e(_g,tte),e(tte,YYe),e(_g,KYe),e(_g,VS),e(VS,ZYe),e(_g,eKe),e(A,oKe),e(A,bg),e(bg,ate),e(ate,rKe),e(bg,tKe),e(bg,XS),e(XS,aKe),e(bg,nKe),e(A,sKe),e(A,vg),e(vg,nte),e(nte,lKe),e(vg,iKe),e(vg,zS),e(zS,dKe),e(vg,cKe),e(A,mKe),e(A,Fg),e(Fg,ste),e(ste,fKe),e(Fg,gKe),e(Fg,WS),e(WS,hKe),e(Fg,uKe),e(A,pKe),e(A,Tg),e(Tg,lte),e(lte,_Ke),e(Tg,bKe),e(Tg,QS),e(QS,vKe),e(Tg,FKe),e(Er,TKe),M(Mg,Er,null),e(Co,MKe),e(Co,Eg),M($y,Eg,null),e(Eg,EKe),e(Eg,ite),e(ite,CKe),b(m,Vqe,_),b(m,Ti,_),e(Ti,Cg),e(Cg,dte),M(ky,dte,null),e(Ti,wKe),e(Ti,cte),e(cte,AKe),b(m,Xqe,_),b(m,wo,_),M(Sy,wo,null),e(wo,yKe),e(wo,Ry),e(Ry,LKe),e(Ry,HS),e(HS,xKe),e(Ry,$Ke),e(wo,kKe),e(wo,Py),e(Py,SKe),e(Py,mte),e(mte,RKe),e(Py,PKe),e(wo,BKe),e(wo,Cr),M(By,Cr,null),e(Cr,IKe),e(Cr,fte),e(fte,qKe),e(Cr,NKe),e(Cr,Aa),e(Aa,jKe),e(Aa,gte),e(gte,DKe),e(Aa,GKe),e(Aa,hte),e(hte,OKe),e(Aa,VKe),e(Aa,ute),e(ute,XKe),e(Aa,zKe),e(Cr,WKe),e(Cr,k),e(k,Sn),e(Sn,pte),e(pte,QKe),e(Sn,HKe),e(Sn,US),e(US,UKe),e(Sn,JKe),e(Sn,JS),e(JS,YKe),e(Sn,KKe),e(k,ZKe),e(k,Rn),e(Rn,_te),e(_te,eZe),e(Rn,oZe),e(Rn,YS),e(YS,rZe),e(Rn,tZe),e(Rn,KS),e(KS,aZe),e(Rn,nZe),e(k,sZe),e(k,Pn),e(Pn,bte),e(bte,lZe),e(Pn,iZe),e(Pn,ZS),e(ZS,dZe),e(Pn,cZe),e(Pn,eR),e(eR,mZe),e(Pn,fZe),e(k,gZe),e(k,wg),e(wg,vte),e(vte,hZe),e(wg,uZe),e(wg,oR),e(oR,pZe),e(wg,_Ze),e(k,bZe),e(k,Bn),e(Bn,Fte),e(Fte,vZe),e(Bn,FZe),e(Bn,rR),e(rR,TZe),e(Bn,MZe),e(Bn,tR),e(tR,EZe),e(Bn,CZe),e(k,wZe),e(k,Ag),e(Ag,Tte),e(Tte,AZe),e(Ag,yZe),e(Ag,aR),e(aR,LZe),e(Ag,xZe),e(k,$Ze),e(k,yg),e(yg,Mte),e(Mte,kZe),e(yg,SZe),e(yg,nR),e(nR,RZe),e(yg,PZe),e(k,BZe),e(k,Lg),e(Lg,Ete),e(Ete,IZe),e(Lg,qZe),e(Lg,sR),e(sR,NZe),e(Lg,jZe),e(k,DZe),e(k,In),e(In,Cte),e(Cte,GZe),e(In,OZe),e(In,lR),e(lR,VZe),e(In,XZe),e(In,iR),e(iR,zZe),e(In,WZe),e(k,QZe),e(k,qn),e(qn,wte),e(wte,HZe),e(qn,UZe),e(qn,dR),e(dR,JZe),e(qn,YZe),e(qn,cR),e(cR,KZe),e(qn,ZZe),e(k,eeo),e(k,Nn),e(Nn,Ate),e(Ate,oeo),e(Nn,reo),e(Nn,mR),e(mR,teo),e(Nn,aeo),e(Nn,fR),e(fR,neo),e(Nn,seo),e(k,leo),e(k,xg),e(xg,yte),e(yte,ieo),e(xg,deo),e(xg,gR),e(gR,ceo),e(xg,meo),e(k,feo),e(k,$g),e($g,Lte),e(Lte,geo),e($g,heo),e($g,hR),e(hR,ueo),e($g,peo),e(k,_eo),e(k,jn),e(jn,xte),e(xte,beo),e(jn,veo),e(jn,uR),e(uR,Feo),e(jn,Teo),e(jn,pR),e(pR,Meo),e(jn,Eeo),e(k,Ceo),e(k,kg),e(kg,$te),e($te,weo),e(kg,Aeo),e(kg,_R),e(_R,yeo),e(kg,Leo),e(k,xeo),e(k,Dn),e(Dn,kte),e(kte,$eo),e(Dn,keo),e(Dn,bR),e(bR,Seo),e(Dn,Reo),e(Dn,vR),e(vR,Peo),e(Dn,Beo),e(k,Ieo),e(k,Gn),e(Gn,Ste),e(Ste,qeo),e(Gn,Neo),e(Gn,FR),e(FR,jeo),e(Gn,Deo),e(Gn,TR),e(TR,Geo),e(Gn,Oeo),e(k,Veo),e(k,On),e(On,Rte),e(Rte,Xeo),e(On,zeo),e(On,MR),e(MR,Weo),e(On,Qeo),e(On,ER),e(ER,Heo),e(On,Ueo),e(k,Jeo),e(k,Sg),e(Sg,Pte),e(Pte,Yeo),e(Sg,Keo),e(Sg,CR),e(CR,Zeo),e(Sg,eoo),e(k,ooo),e(k,Vn),e(Vn,Bte),e(Bte,roo),e(Vn,too),e(Vn,wR),e(wR,aoo),e(Vn,noo),e(Vn,AR),e(AR,soo),e(Vn,loo),e(k,ioo),e(k,Xn),e(Xn,Ite),e(Ite,doo),e(Xn,coo),e(Xn,yR),e(yR,moo),e(Xn,foo),e(Xn,LR),e(LR,goo),e(Xn,hoo),e(k,uoo),e(k,zn),e(zn,qte),e(qte,poo),e(zn,_oo),e(zn,xR),e(xR,boo),e(zn,voo),e(zn,$R),e($R,Foo),e(zn,Too),e(k,Moo),e(k,Wn),e(Wn,Nte),e(Nte,Eoo),e(Wn,Coo),e(Wn,kR),e(kR,woo),e(Wn,Aoo),e(Wn,SR),e(SR,yoo),e(Wn,Loo),e(k,xoo),e(k,Qn),e(Qn,jte),e(jte,$oo),e(Qn,koo),e(Qn,RR),e(RR,Soo),e(Qn,Roo),e(Qn,PR),e(PR,Poo),e(Qn,Boo),e(k,Ioo),e(k,Hn),e(Hn,Dte),e(Dte,qoo),e(Hn,Noo),e(Hn,BR),e(BR,joo),e(Hn,Doo),e(Hn,IR),e(IR,Goo),e(Hn,Ooo),e(k,Voo),e(k,Rg),e(Rg,Gte),e(Gte,Xoo),e(Rg,zoo),e(Rg,qR),e(qR,Woo),e(Rg,Qoo),e(k,Hoo),e(k,Un),e(Un,Ote),e(Ote,Uoo),e(Un,Joo),e(Un,NR),e(NR,Yoo),e(Un,Koo),e(Un,jR),e(jR,Zoo),e(Un,ero),e(k,oro),e(k,Pg),e(Pg,Vte),e(Vte,rro),e(Pg,tro),e(Pg,DR),e(DR,aro),e(Pg,nro),e(k,sro),e(k,Jn),e(Jn,Xte),e(Xte,lro),e(Jn,iro),e(Jn,GR),e(GR,dro),e(Jn,cro),e(Jn,OR),e(OR,mro),e(Jn,fro),e(k,gro),e(k,Yn),e(Yn,zte),e(zte,hro),e(Yn,uro),e(Yn,VR),e(VR,pro),e(Yn,_ro),e(Yn,XR),e(XR,bro),e(Yn,vro),e(k,Fro),e(k,Kn),e(Kn,Wte),e(Wte,Tro),e(Kn,Mro),e(Kn,zR),e(zR,Ero),e(Kn,Cro),e(Kn,WR),e(WR,wro),e(Kn,Aro),e(k,yro),e(k,Zn),e(Zn,Qte),e(Qte,Lro),e(Zn,xro),e(Zn,QR),e(QR,$ro),e(Zn,kro),e(Zn,HR),e(HR,Sro),e(Zn,Rro),e(k,Pro),e(k,es),e(es,Hte),e(Hte,Bro),e(es,Iro),e(es,UR),e(UR,qro),e(es,Nro),e(es,JR),e(JR,jro),e(es,Dro),e(k,Gro),e(k,Bg),e(Bg,Ute),e(Ute,Oro),e(Bg,Vro),e(Bg,YR),e(YR,Xro),e(Bg,zro),e(k,Wro),e(k,os),e(os,Jte),e(Jte,Qro),e(os,Hro),e(os,KR),e(KR,Uro),e(os,Jro),e(os,ZR),e(ZR,Yro),e(os,Kro),e(k,Zro),e(k,rs),e(rs,Yte),e(Yte,eto),e(rs,oto),e(rs,eP),e(eP,rto),e(rs,tto),e(rs,oP),e(oP,ato),e(rs,nto),e(k,sto),e(k,ts),e(ts,Kte),e(Kte,lto),e(ts,ito),e(ts,rP),e(rP,dto),e(ts,cto),e(ts,tP),e(tP,mto),e(ts,fto),e(k,gto),e(k,as),e(as,Zte),e(Zte,hto),e(as,uto),e(as,aP),e(aP,pto),e(as,_to),e(as,nP),e(nP,bto),e(as,vto),e(k,Fto),e(k,ns),e(ns,eae),e(eae,Tto),e(ns,Mto),e(ns,sP),e(sP,Eto),e(ns,Cto),e(ns,lP),e(lP,wto),e(ns,Ato),e(k,yto),e(k,ss),e(ss,oae),e(oae,Lto),e(ss,xto),e(ss,iP),e(iP,$to),e(ss,kto),e(ss,dP),e(dP,Sto),e(ss,Rto),e(k,Pto),e(k,ls),e(ls,rae),e(rae,Bto),e(ls,Ito),e(ls,cP),e(cP,qto),e(ls,Nto),e(ls,mP),e(mP,jto),e(ls,Dto),e(k,Gto),e(k,Ig),e(Ig,tae),e(tae,Oto),e(Ig,Vto),e(Ig,fP),e(fP,Xto),e(Ig,zto),e(k,Wto),e(k,is),e(is,aae),e(aae,Qto),e(is,Hto),e(is,gP),e(gP,Uto),e(is,Jto),e(is,hP),e(hP,Yto),e(is,Kto),e(k,Zto),e(k,qg),e(qg,nae),e(nae,eao),e(qg,oao),e(qg,uP),e(uP,rao),e(qg,tao),e(k,aao),e(k,Ng),e(Ng,sae),e(sae,nao),e(Ng,sao),e(Ng,pP),e(pP,lao),e(Ng,iao),e(k,dao),e(k,ds),e(ds,lae),e(lae,cao),e(ds,mao),e(ds,_P),e(_P,fao),e(ds,gao),e(ds,bP),e(bP,hao),e(ds,uao),e(k,pao),e(k,cs),e(cs,iae),e(iae,_ao),e(cs,bao),e(cs,vP),e(vP,vao),e(cs,Fao),e(cs,FP),e(FP,Tao),e(cs,Mao),e(k,Eao),e(k,ms),e(ms,dae),e(dae,Cao),e(ms,wao),e(ms,TP),e(TP,Aao),e(ms,yao),e(ms,MP),e(MP,Lao),e(ms,xao),e(k,$ao),e(k,jg),e(jg,cae),e(cae,kao),e(jg,Sao),e(jg,EP),e(EP,Rao),e(jg,Pao),e(k,Bao),e(k,fs),e(fs,mae),e(mae,Iao),e(fs,qao),e(fs,CP),e(CP,Nao),e(fs,jao),e(fs,wP),e(wP,Dao),e(fs,Gao),e(k,Oao),e(k,gs),e(gs,fae),e(fae,Vao),e(gs,Xao),e(gs,AP),e(AP,zao),e(gs,Wao),e(gs,yP),e(yP,Qao),e(gs,Hao),e(k,Uao),e(k,hs),e(hs,gae),e(gae,Jao),e(hs,Yao),e(hs,LP),e(LP,Kao),e(hs,Zao),e(hs,xP),e(xP,eno),e(hs,ono),e(k,rno),e(k,us),e(us,hae),e(hae,tno),e(us,ano),e(us,$P),e($P,nno),e(us,sno),e(us,kP),e(kP,lno),e(us,ino),e(k,dno),e(k,ps),e(ps,uae),e(uae,cno),e(ps,mno),e(ps,SP),e(SP,fno),e(ps,gno),e(ps,RP),e(RP,hno),e(ps,uno),e(k,pno),e(k,Dg),e(Dg,pae),e(pae,_no),e(Dg,bno),e(Dg,PP),e(PP,vno),e(Dg,Fno),e(k,Tno),e(k,_s),e(_s,_ae),e(_ae,Mno),e(_s,Eno),e(_s,BP),e(BP,Cno),e(_s,wno),e(_s,IP),e(IP,Ano),e(_s,yno),e(k,Lno),e(k,Gg),e(Gg,bae),e(bae,xno),e(Gg,$no),e(Gg,qP),e(qP,kno),e(Gg,Sno),e(k,Rno),e(k,Og),e(Og,vae),e(vae,Pno),e(Og,Bno),e(Og,NP),e(NP,Ino),e(Og,qno),e(k,Nno),e(k,Vg),e(Vg,Fae),e(Fae,jno),e(Vg,Dno),e(Vg,jP),e(jP,Gno),e(Vg,Ono),e(k,Vno),e(k,Xg),e(Xg,Tae),e(Tae,Xno),e(Xg,zno),e(Xg,DP),e(DP,Wno),e(Xg,Qno),e(k,Hno),e(k,bs),e(bs,Mae),e(Mae,Uno),e(bs,Jno),e(bs,GP),e(GP,Yno),e(bs,Kno),e(bs,OP),e(OP,Zno),e(bs,eso),e(k,oso),e(k,zg),e(zg,Eae),e(Eae,rso),e(zg,tso),e(zg,VP),e(VP,aso),e(zg,nso),e(k,sso),e(k,vs),e(vs,Cae),e(Cae,lso),e(vs,iso),e(vs,XP),e(XP,dso),e(vs,cso),e(vs,zP),e(zP,mso),e(vs,fso),e(k,gso),e(k,Fs),e(Fs,wae),e(wae,hso),e(Fs,uso),e(Fs,WP),e(WP,pso),e(Fs,_so),e(Fs,QP),e(QP,bso),e(Fs,vso),e(k,Fso),e(k,Ts),e(Ts,Aae),e(Aae,Tso),e(Ts,Mso),e(Ts,HP),e(HP,Eso),e(Ts,Cso),e(Ts,UP),e(UP,wso),e(Ts,Aso),e(k,yso),e(k,Ms),e(Ms,yae),e(yae,Lso),e(Ms,xso),e(Ms,JP),e(JP,$so),e(Ms,kso),e(Ms,YP),e(YP,Sso),e(Ms,Rso),e(k,Pso),e(k,Es),e(Es,Lae),e(Lae,Bso),e(Es,Iso),e(Es,KP),e(KP,qso),e(Es,Nso),e(Es,ZP),e(ZP,jso),e(Es,Dso),e(k,Gso),e(k,Cs),e(Cs,xae),e(xae,Oso),e(Cs,Vso),e(Cs,eB),e(eB,Xso),e(Cs,zso),e(Cs,oB),e(oB,Wso),e(Cs,Qso),e(k,Hso),e(k,Wg),e(Wg,$ae),e($ae,Uso),e(Wg,Jso),e(Wg,rB),e(rB,Yso),e(Wg,Kso),e(k,Zso),e(k,Qg),e(Qg,kae),e(kae,elo),e(Qg,olo),e(Qg,tB),e(tB,rlo),e(Qg,tlo),e(k,alo),e(k,ws),e(ws,Sae),e(Sae,nlo),e(ws,slo),e(ws,aB),e(aB,llo),e(ws,ilo),e(ws,nB),e(nB,dlo),e(ws,clo),e(k,mlo),e(k,As),e(As,Rae),e(Rae,flo),e(As,glo),e(As,sB),e(sB,hlo),e(As,ulo),e(As,lB),e(lB,plo),e(As,_lo),e(k,blo),e(k,ys),e(ys,Pae),e(Pae,vlo),e(ys,Flo),e(ys,iB),e(iB,Tlo),e(ys,Mlo),e(ys,dB),e(dB,Elo),e(ys,Clo),e(k,wlo),e(k,Hg),e(Hg,Bae),e(Bae,Alo),e(Hg,ylo),e(Hg,cB),e(cB,Llo),e(Hg,xlo),e(k,$lo),e(k,Ug),e(Ug,Iae),e(Iae,klo),e(Ug,Slo),e(Ug,mB),e(mB,Rlo),e(Ug,Plo),e(k,Blo),e(k,Jg),e(Jg,qae),e(qae,Ilo),e(Jg,qlo),e(Jg,fB),e(fB,Nlo),e(Jg,jlo),e(k,Dlo),e(k,Ls),e(Ls,Nae),e(Nae,Glo),e(Ls,Olo),e(Ls,gB),e(gB,Vlo),e(Ls,Xlo),e(Ls,hB),e(hB,zlo),e(Ls,Wlo),e(k,Qlo),e(k,Yg),e(Yg,jae),e(jae,Hlo),e(Yg,Ulo),e(Yg,uB),e(uB,Jlo),e(Yg,Ylo),e(k,Klo),e(k,Kg),e(Kg,Dae),e(Dae,Zlo),e(Kg,eio),e(Kg,pB),e(pB,oio),e(Kg,rio),e(k,tio),e(k,Zg),e(Zg,Gae),e(Gae,aio),e(Zg,nio),e(Zg,_B),e(_B,sio),e(Zg,lio),e(k,iio),e(k,xs),e(xs,Oae),e(Oae,dio),e(xs,cio),e(xs,bB),e(bB,mio),e(xs,fio),e(xs,vB),e(vB,gio),e(xs,hio),e(k,uio),e(k,eh),e(eh,Vae),e(Vae,pio),e(eh,_io),e(eh,FB),e(FB,bio),e(eh,vio),e(k,Fio),e(k,oh),e(oh,Xae),e(Xae,Tio),e(oh,Mio),e(oh,TB),e(TB,Eio),e(oh,Cio),e(k,wio),e(k,$s),e($s,zae),e(zae,Aio),e($s,yio),e($s,MB),e(MB,Lio),e($s,xio),e($s,EB),e(EB,$io),e($s,kio),e(k,Sio),e(k,ks),e(ks,Wae),e(Wae,Rio),e(ks,Pio),e(ks,CB),e(CB,Bio),e(ks,Iio),e(ks,wB),e(wB,qio),e(ks,Nio),e(k,jio),e(k,Ss),e(Ss,Qae),e(Qae,Dio),e(Ss,Gio),e(Ss,AB),e(AB,Oio),e(Ss,Vio),e(Ss,yB),e(yB,Xio),e(Ss,zio),e(k,Wio),e(k,Rs),e(Rs,Hae),e(Hae,Qio),e(Rs,Hio),e(Rs,LB),e(LB,Uio),e(Rs,Jio),e(Rs,xB),e(xB,Yio),e(Rs,Kio),e(Cr,Zio),M(rh,Cr,null),e(wo,edo),e(wo,th),M(Iy,th,null),e(th,odo),e(th,Uae),e(Uae,rdo),b(m,zqe,_),b(m,Mi,_),e(Mi,ah),e(ah,Jae),M(qy,Jae,null),e(Mi,tdo),e(Mi,Yae),e(Yae,ado),b(m,Wqe,_),b(m,Ao,_),M(Ny,Ao,null),e(Ao,ndo),e(Ao,jy),e(jy,sdo),e(jy,$B),e($B,ldo),e(jy,ido),e(Ao,ddo),e(Ao,Dy),e(Dy,cdo),e(Dy,Kae),e(Kae,mdo),e(Dy,fdo),e(Ao,gdo),e(Ao,He),M(Gy,He,null),e(He,hdo),e(He,Zae),e(Zae,udo),e(He,pdo),e(He,ya),e(ya,_do),e(ya,ene),e(ene,bdo),e(ya,vdo),e(ya,one),e(one,Fdo),e(ya,Tdo),e(ya,rne),e(rne,Mdo),e(ya,Edo),e(He,Cdo),e(He,Y),e(Y,nh),e(nh,tne),e(tne,wdo),e(nh,Ado),e(nh,kB),e(kB,ydo),e(nh,Ldo),e(Y,xdo),e(Y,sh),e(sh,ane),e(ane,$do),e(sh,kdo),e(sh,SB),e(SB,Sdo),e(sh,Rdo),e(Y,Pdo),e(Y,lh),e(lh,nne),e(nne,Bdo),e(lh,Ido),e(lh,RB),e(RB,qdo),e(lh,Ndo),e(Y,jdo),e(Y,ih),e(ih,sne),e(sne,Ddo),e(ih,Gdo),e(ih,PB),e(PB,Odo),e(ih,Vdo),e(Y,Xdo),e(Y,dh),e(dh,lne),e(lne,zdo),e(dh,Wdo),e(dh,BB),e(BB,Qdo),e(dh,Hdo),e(Y,Udo),e(Y,ch),e(ch,ine),e(ine,Jdo),e(ch,Ydo),e(ch,IB),e(IB,Kdo),e(ch,Zdo),e(Y,eco),e(Y,mh),e(mh,dne),e(dne,oco),e(mh,rco),e(mh,qB),e(qB,tco),e(mh,aco),e(Y,nco),e(Y,fh),e(fh,cne),e(cne,sco),e(fh,lco),e(fh,NB),e(NB,ico),e(fh,dco),e(Y,cco),e(Y,gh),e(gh,mne),e(mne,mco),e(gh,fco),e(gh,jB),e(jB,gco),e(gh,hco),e(Y,uco),e(Y,hh),e(hh,fne),e(fne,pco),e(hh,_co),e(hh,DB),e(DB,bco),e(hh,vco),e(Y,Fco),e(Y,uh),e(uh,gne),e(gne,Tco),e(uh,Mco),e(uh,GB),e(GB,Eco),e(uh,Cco),e(Y,wco),e(Y,ph),e(ph,hne),e(hne,Aco),e(ph,yco),e(ph,OB),e(OB,Lco),e(ph,xco),e(Y,$co),e(Y,_h),e(_h,une),e(une,kco),e(_h,Sco),e(_h,VB),e(VB,Rco),e(_h,Pco),e(Y,Bco),e(Y,bh),e(bh,pne),e(pne,Ico),e(bh,qco),e(bh,XB),e(XB,Nco),e(bh,jco),e(Y,Dco),e(Y,vh),e(vh,_ne),e(_ne,Gco),e(vh,Oco),e(vh,zB),e(zB,Vco),e(vh,Xco),e(Y,zco),e(Y,Fh),e(Fh,bne),e(bne,Wco),e(Fh,Qco),e(Fh,WB),e(WB,Hco),e(Fh,Uco),e(Y,Jco),e(Y,Th),e(Th,vne),e(vne,Yco),e(Th,Kco),e(Th,QB),e(QB,Zco),e(Th,emo),e(Y,omo),e(Y,Mh),e(Mh,Fne),e(Fne,rmo),e(Mh,tmo),e(Mh,HB),e(HB,amo),e(Mh,nmo),e(Y,smo),e(Y,Eh),e(Eh,Tne),e(Tne,lmo),e(Eh,imo),e(Eh,UB),e(UB,dmo),e(Eh,cmo),e(Y,mmo),e(Y,Ch),e(Ch,Mne),e(Mne,fmo),e(Ch,gmo),e(Ch,JB),e(JB,hmo),e(Ch,umo),e(Y,pmo),e(Y,wh),e(wh,Ene),e(Ene,_mo),e(wh,bmo),e(wh,YB),e(YB,vmo),e(wh,Fmo),e(Y,Tmo),e(Y,Ah),e(Ah,Cne),e(Cne,Mmo),e(Ah,Emo),e(Ah,KB),e(KB,Cmo),e(Ah,wmo),e(Y,Amo),e(Y,yh),e(yh,wne),e(wne,ymo),e(yh,Lmo),e(yh,ZB),e(ZB,xmo),e(yh,$mo),e(Y,kmo),e(Y,Lh),e(Lh,Ane),e(Ane,Smo),e(Lh,Rmo),e(Lh,eI),e(eI,Pmo),e(Lh,Bmo),e(Y,Imo),e(Y,xh),e(xh,yne),e(yne,qmo),e(xh,Nmo),e(xh,oI),e(oI,jmo),e(xh,Dmo),e(Y,Gmo),e(Y,$h),e($h,Lne),e(Lne,Omo),e($h,Vmo),e($h,rI),e(rI,Xmo),e($h,zmo),e(Y,Wmo),e(Y,kh),e(kh,xne),e(xne,Qmo),e(kh,Hmo),e(kh,tI),e(tI,Umo),e(kh,Jmo),e(Y,Ymo),e(Y,Sh),e(Sh,$ne),e($ne,Kmo),e(Sh,Zmo),e(Sh,aI),e(aI,efo),e(Sh,ofo),e(Y,rfo),e(Y,Rh),e(Rh,kne),e(kne,tfo),e(Rh,afo),e(Rh,nI),e(nI,nfo),e(Rh,sfo),e(He,lfo),M(Ph,He,null),e(He,ifo),M(Bh,He,null),e(Ao,dfo),e(Ao,Ih),M(Oy,Ih,null),e(Ih,cfo),e(Ih,Sne),e(Sne,mfo),b(m,Qqe,_),b(m,Ei,_),e(Ei,qh),e(qh,Rne),M(Vy,Rne,null),e(Ei,ffo),e(Ei,Pne),e(Pne,gfo),b(m,Hqe,_),b(m,yo,_),M(Xy,yo,null),e(yo,hfo),e(yo,zy),e(zy,ufo),e(zy,sI),e(sI,pfo),e(zy,_fo),e(yo,bfo),e(yo,Wy),e(Wy,vfo),e(Wy,Bne),e(Bne,Ffo),e(Wy,Tfo),e(yo,Mfo),e(yo,Ue),M(Qy,Ue,null),e(Ue,Efo),e(Ue,Ine),e(Ine,Cfo),e(Ue,wfo),e(Ue,Ci),e(Ci,Afo),e(Ci,qne),e(qne,yfo),e(Ci,Lfo),e(Ci,Nne),e(Nne,xfo),e(Ci,$fo),e(Ue,kfo),e(Ue,he),e(he,Nh),e(Nh,jne),e(jne,Sfo),e(Nh,Rfo),e(Nh,lI),e(lI,Pfo),e(Nh,Bfo),e(he,Ifo),e(he,jh),e(jh,Dne),e(Dne,qfo),e(jh,Nfo),e(jh,Gne),e(Gne,jfo),e(jh,Dfo),e(he,Gfo),e(he,Dh),e(Dh,One),e(One,Ofo),e(Dh,Vfo),e(Dh,iI),e(iI,Xfo),e(Dh,zfo),e(he,Wfo),e(he,Gh),e(Gh,Vne),e(Vne,Qfo),e(Gh,Hfo),e(Gh,dI),e(dI,Ufo),e(Gh,Jfo),e(he,Yfo),e(he,Oh),e(Oh,Xne),e(Xne,Kfo),e(Oh,Zfo),e(Oh,cI),e(cI,ego),e(Oh,ogo),e(he,rgo),e(he,Vh),e(Vh,zne),e(zne,tgo),e(Vh,ago),e(Vh,mI),e(mI,ngo),e(Vh,sgo),e(he,lgo),e(he,Xh),e(Xh,Wne),e(Wne,igo),e(Xh,dgo),e(Xh,fI),e(fI,cgo),e(Xh,mgo),e(he,fgo),e(he,zh),e(zh,Qne),e(Qne,ggo),e(zh,hgo),e(zh,gI),e(gI,ugo),e(zh,pgo),e(he,_go),e(he,Wh),e(Wh,Hne),e(Hne,bgo),e(Wh,vgo),e(Wh,hI),e(hI,Fgo),e(Wh,Tgo),e(he,Mgo),e(he,Qh),e(Qh,Une),e(Une,Ego),e(Qh,Cgo),e(Qh,uI),e(uI,wgo),e(Qh,Ago),e(he,ygo),e(he,Hh),e(Hh,Jne),e(Jne,Lgo),e(Hh,xgo),e(Hh,pI),e(pI,$go),e(Hh,kgo),e(he,Sgo),e(he,Uh),e(Uh,Yne),e(Yne,Rgo),e(Uh,Pgo),e(Uh,_I),e(_I,Bgo),e(Uh,Igo),e(he,qgo),e(he,Jh),e(Jh,Kne),e(Kne,Ngo),e(Jh,jgo),e(Jh,bI),e(bI,Dgo),e(Jh,Ggo),e(he,Ogo),e(he,Yh),e(Yh,Zne),e(Zne,Vgo),e(Yh,Xgo),e(Yh,vI),e(vI,zgo),e(Yh,Wgo),e(he,Qgo),e(he,Kh),e(Kh,ese),e(ese,Hgo),e(Kh,Ugo),e(Kh,FI),e(FI,Jgo),e(Kh,Ygo),e(he,Kgo),e(he,Zh),e(Zh,ose),e(ose,Zgo),e(Zh,eho),e(Zh,TI),e(TI,oho),e(Zh,rho),e(he,tho),e(he,eu),e(eu,rse),e(rse,aho),e(eu,nho),e(eu,MI),e(MI,sho),e(eu,lho),e(Ue,iho),M(ou,Ue,null),e(Ue,dho),M(ru,Ue,null),e(yo,cho),e(yo,tu),M(Hy,tu,null),e(tu,mho),e(tu,tse),e(tse,fho),b(m,Uqe,_),b(m,wi,_),e(wi,au),e(au,ase),M(Uy,ase,null),e(wi,gho),e(wi,nse),e(nse,hho),b(m,Jqe,_),b(m,Lo,_),M(Jy,Lo,null),e(Lo,uho),e(Lo,Ai),e(Ai,pho),e(Ai,EI),e(EI,_ho),e(Ai,bho),e(Ai,CI),e(CI,vho),e(Ai,Fho),e(Lo,Tho),e(Lo,Yy),e(Yy,Mho),e(Yy,sse),e(sse,Eho),e(Yy,Cho),e(Lo,who),e(Lo,tt),M(Ky,tt,null),e(tt,Aho),e(tt,lse),e(lse,yho),e(tt,Lho),e(tt,yi),e(yi,xho),e(yi,ise),e(ise,$ho),e(yi,kho),e(yi,wI),e(wI,Sho),e(yi,Rho),e(tt,Pho),M(nu,tt,null),e(Lo,Bho),e(Lo,Je),M(Zy,Je,null),e(Je,Iho),e(Je,dse),e(dse,qho),e(Je,Nho),e(Je,La),e(La,jho),e(La,cse),e(cse,Dho),e(La,Gho),e(La,mse),e(mse,Oho),e(La,Vho),e(La,fse),e(fse,Xho),e(La,zho),e(Je,Who),e(Je,x),e(x,su),e(su,gse),e(gse,Qho),e(su,Hho),e(su,AI),e(AI,Uho),e(su,Jho),e(x,Yho),e(x,lu),e(lu,hse),e(hse,Kho),e(lu,Zho),e(lu,yI),e(yI,euo),e(lu,ouo),e(x,ruo),e(x,iu),e(iu,use),e(use,tuo),e(iu,auo),e(iu,LI),e(LI,nuo),e(iu,suo),e(x,luo),e(x,du),e(du,pse),e(pse,iuo),e(du,duo),e(du,xI),e(xI,cuo),e(du,muo),e(x,fuo),e(x,cu),e(cu,_se),e(_se,guo),e(cu,huo),e(cu,$I),e($I,uuo),e(cu,puo),e(x,_uo),e(x,mu),e(mu,bse),e(bse,buo),e(mu,vuo),e(mu,kI),e(kI,Fuo),e(mu,Tuo),e(x,Muo),e(x,fu),e(fu,vse),e(vse,Euo),e(fu,Cuo),e(fu,SI),e(SI,wuo),e(fu,Auo),e(x,yuo),e(x,gu),e(gu,Fse),e(Fse,Luo),e(gu,xuo),e(gu,RI),e(RI,$uo),e(gu,kuo),e(x,Suo),e(x,hu),e(hu,Tse),e(Tse,Ruo),e(hu,Puo),e(hu,PI),e(PI,Buo),e(hu,Iuo),e(x,quo),e(x,uu),e(uu,Mse),e(Mse,Nuo),e(uu,juo),e(uu,BI),e(BI,Duo),e(uu,Guo),e(x,Ouo),e(x,pu),e(pu,Ese),e(Ese,Vuo),e(pu,Xuo),e(pu,II),e(II,zuo),e(pu,Wuo),e(x,Quo),e(x,_u),e(_u,Cse),e(Cse,Huo),e(_u,Uuo),e(_u,qI),e(qI,Juo),e(_u,Yuo),e(x,Kuo),e(x,bu),e(bu,wse),e(wse,Zuo),e(bu,epo),e(bu,NI),e(NI,opo),e(bu,rpo),e(x,tpo),e(x,vu),e(vu,Ase),e(Ase,apo),e(vu,npo),e(vu,jI),e(jI,spo),e(vu,lpo),e(x,ipo),e(x,Fu),e(Fu,yse),e(yse,dpo),e(Fu,cpo),e(Fu,DI),e(DI,mpo),e(Fu,fpo),e(x,gpo),e(x,Tu),e(Tu,Lse),e(Lse,hpo),e(Tu,upo),e(Tu,GI),e(GI,ppo),e(Tu,_po),e(x,bpo),e(x,Mu),e(Mu,xse),e(xse,vpo),e(Mu,Fpo),e(Mu,OI),e(OI,Tpo),e(Mu,Mpo),e(x,Epo),e(x,Eu),e(Eu,$se),e($se,Cpo),e(Eu,wpo),e(Eu,VI),e(VI,Apo),e(Eu,ypo),e(x,Lpo),e(x,Cu),e(Cu,kse),e(kse,xpo),e(Cu,$po),e(Cu,XI),e(XI,kpo),e(Cu,Spo),e(x,Rpo),e(x,wu),e(wu,Sse),e(Sse,Ppo),e(wu,Bpo),e(wu,zI),e(zI,Ipo),e(wu,qpo),e(x,Npo),e(x,Au),e(Au,Rse),e(Rse,jpo),e(Au,Dpo),e(Au,WI),e(WI,Gpo),e(Au,Opo),e(x,Vpo),e(x,yu),e(yu,Pse),e(Pse,Xpo),e(yu,zpo),e(yu,QI),e(QI,Wpo),e(yu,Qpo),e(x,Hpo),e(x,Lu),e(Lu,Bse),e(Bse,Upo),e(Lu,Jpo),e(Lu,HI),e(HI,Ypo),e(Lu,Kpo),e(x,Zpo),e(x,xu),e(xu,Ise),e(Ise,e_o),e(xu,o_o),e(xu,UI),e(UI,r_o),e(xu,t_o),e(x,a_o),e(x,$u),e($u,qse),e(qse,n_o),e($u,s_o),e($u,JI),e(JI,l_o),e($u,i_o),e(x,d_o),e(x,ku),e(ku,Nse),e(Nse,c_o),e(ku,m_o),e(ku,YI),e(YI,f_o),e(ku,g_o),e(x,h_o),e(x,Su),e(Su,jse),e(jse,u_o),e(Su,p_o),e(Su,KI),e(KI,__o),e(Su,b_o),e(x,v_o),e(x,Ru),e(Ru,Dse),e(Dse,F_o),e(Ru,T_o),e(Ru,ZI),e(ZI,M_o),e(Ru,E_o),e(x,C_o),e(x,Pu),e(Pu,Gse),e(Gse,w_o),e(Pu,A_o),e(Pu,eq),e(eq,y_o),e(Pu,L_o),e(x,x_o),e(x,Bu),e(Bu,Ose),e(Ose,$_o),e(Bu,k_o),e(Bu,oq),e(oq,S_o),e(Bu,R_o),e(x,P_o),e(x,Iu),e(Iu,Vse),e(Vse,B_o),e(Iu,I_o),e(Iu,rq),e(rq,q_o),e(Iu,N_o),e(x,j_o),e(x,qu),e(qu,Xse),e(Xse,D_o),e(qu,G_o),e(qu,tq),e(tq,O_o),e(qu,V_o),e(x,X_o),e(x,Ps),e(Ps,zse),e(zse,z_o),e(Ps,W_o),e(Ps,aq),e(aq,Q_o),e(Ps,H_o),e(Ps,nq),e(nq,U_o),e(Ps,J_o),e(x,Y_o),e(x,Nu),e(Nu,Wse),e(Wse,K_o),e(Nu,Z_o),e(Nu,sq),e(sq,ebo),e(Nu,obo),e(x,rbo),e(x,ju),e(ju,Qse),e(Qse,tbo),e(ju,abo),e(ju,lq),e(lq,nbo),e(ju,sbo),e(x,lbo),e(x,Du),e(Du,Hse),e(Hse,ibo),e(Du,dbo),e(Du,iq),e(iq,cbo),e(Du,mbo),e(x,fbo),e(x,Gu),e(Gu,Use),e(Use,gbo),e(Gu,hbo),e(Gu,dq),e(dq,ubo),e(Gu,pbo),e(x,_bo),e(x,Ou),e(Ou,Jse),e(Jse,bbo),e(Ou,vbo),e(Ou,cq),e(cq,Fbo),e(Ou,Tbo),e(x,Mbo),e(x,Vu),e(Vu,Yse),e(Yse,Ebo),e(Vu,Cbo),e(Vu,mq),e(mq,wbo),e(Vu,Abo),e(x,ybo),e(x,Xu),e(Xu,Kse),e(Kse,Lbo),e(Xu,xbo),e(Xu,fq),e(fq,$bo),e(Xu,kbo),e(x,Sbo),e(x,zu),e(zu,Zse),e(Zse,Rbo),e(zu,Pbo),e(zu,gq),e(gq,Bbo),e(zu,Ibo),e(x,qbo),e(x,Wu),e(Wu,ele),e(ele,Nbo),e(Wu,jbo),e(Wu,hq),e(hq,Dbo),e(Wu,Gbo),e(x,Obo),e(x,Qu),e(Qu,ole),e(ole,Vbo),e(Qu,Xbo),e(Qu,uq),e(uq,zbo),e(Qu,Wbo),e(x,Qbo),e(x,Hu),e(Hu,rle),e(rle,Hbo),e(Hu,Ubo),e(Hu,pq),e(pq,Jbo),e(Hu,Ybo),e(x,Kbo),e(x,Uu),e(Uu,tle),e(tle,Zbo),e(Uu,e2o),e(Uu,_q),e(_q,o2o),e(Uu,r2o),e(x,t2o),e(x,Ju),e(Ju,ale),e(ale,a2o),e(Ju,n2o),e(Ju,bq),e(bq,s2o),e(Ju,l2o),e(x,i2o),e(x,Yu),e(Yu,nle),e(nle,d2o),e(Yu,c2o),e(Yu,vq),e(vq,m2o),e(Yu,f2o),e(x,g2o),e(x,Ku),e(Ku,sle),e(sle,h2o),e(Ku,u2o),e(Ku,Fq),e(Fq,p2o),e(Ku,_2o),e(x,b2o),e(x,Zu),e(Zu,lle),e(lle,v2o),e(Zu,F2o),e(Zu,Tq),e(Tq,T2o),e(Zu,M2o),e(x,E2o),e(x,ep),e(ep,ile),e(ile,C2o),e(ep,w2o),e(ep,Mq),e(Mq,A2o),e(ep,y2o),e(x,L2o),e(x,op),e(op,dle),e(dle,x2o),e(op,$2o),e(op,Eq),e(Eq,k2o),e(op,S2o),e(x,R2o),e(x,rp),e(rp,cle),e(cle,P2o),e(rp,B2o),e(rp,Cq),e(Cq,I2o),e(rp,q2o),e(x,N2o),e(x,tp),e(tp,mle),e(mle,j2o),e(tp,D2o),e(tp,wq),e(wq,G2o),e(tp,O2o),e(x,V2o),e(x,ap),e(ap,fle),e(fle,X2o),e(ap,z2o),e(ap,Aq),e(Aq,W2o),e(ap,Q2o),e(x,H2o),e(x,np),e(np,gle),e(gle,U2o),e(np,J2o),e(np,yq),e(yq,Y2o),e(np,K2o),e(x,Z2o),e(x,sp),e(sp,hle),e(hle,evo),e(sp,ovo),e(sp,Lq),e(Lq,rvo),e(sp,tvo),e(x,avo),e(x,lp),e(lp,ule),e(ule,nvo),e(lp,svo),e(lp,xq),e(xq,lvo),e(lp,ivo),e(x,dvo),e(x,ip),e(ip,ple),e(ple,cvo),e(ip,mvo),e(ip,$q),e($q,fvo),e(ip,gvo),e(x,hvo),e(x,dp),e(dp,_le),e(_le,uvo),e(dp,pvo),e(dp,kq),e(kq,_vo),e(dp,bvo),e(x,vvo),e(x,cp),e(cp,ble),e(ble,Fvo),e(cp,Tvo),e(cp,Sq),e(Sq,Mvo),e(cp,Evo),e(x,Cvo),e(x,mp),e(mp,vle),e(vle,wvo),e(mp,Avo),e(mp,Rq),e(Rq,yvo),e(mp,Lvo),e(x,xvo),e(x,fp),e(fp,Fle),e(Fle,$vo),e(fp,kvo),e(fp,Pq),e(Pq,Svo),e(fp,Rvo),e(x,Pvo),e(x,gp),e(gp,Tle),e(Tle,Bvo),e(gp,Ivo),e(gp,Bq),e(Bq,qvo),e(gp,Nvo),e(x,jvo),e(x,hp),e(hp,Mle),e(Mle,Dvo),e(hp,Gvo),e(hp,Iq),e(Iq,Ovo),e(hp,Vvo),e(x,Xvo),e(x,up),e(up,Ele),e(Ele,zvo),e(up,Wvo),e(up,qq),e(qq,Qvo),e(up,Hvo),e(x,Uvo),e(x,pp),e(pp,Cle),e(Cle,Jvo),e(pp,Yvo),e(pp,Nq),e(Nq,Kvo),e(pp,Zvo),e(x,eFo),e(x,_p),e(_p,wle),e(wle,oFo),e(_p,rFo),e(_p,jq),e(jq,tFo),e(_p,aFo),e(x,nFo),e(x,bp),e(bp,Ale),e(Ale,sFo),e(bp,lFo),e(bp,Dq),e(Dq,iFo),e(bp,dFo),e(x,cFo),e(x,vp),e(vp,yle),e(yle,mFo),e(vp,fFo),e(vp,Gq),e(Gq,gFo),e(vp,hFo),e(x,uFo),e(x,Fp),e(Fp,Lle),e(Lle,pFo),e(Fp,_Fo),e(Fp,Oq),e(Oq,bFo),e(Fp,vFo),e(x,FFo),e(x,Tp),e(Tp,xle),e(xle,TFo),e(Tp,MFo),e(Tp,Vq),e(Vq,EFo),e(Tp,CFo),e(x,wFo),e(x,Mp),e(Mp,$le),e($le,AFo),e(Mp,yFo),e(Mp,Xq),e(Xq,LFo),e(Mp,xFo),e(x,$Fo),e(x,Ep),e(Ep,kle),e(kle,kFo),e(Ep,SFo),e(Ep,zq),e(zq,RFo),e(Ep,PFo),e(x,BFo),e(x,Cp),e(Cp,Sle),e(Sle,IFo),e(Cp,qFo),e(Cp,Wq),e(Wq,NFo),e(Cp,jFo),e(x,DFo),e(x,wp),e(wp,Rle),e(Rle,GFo),e(wp,OFo),e(wp,Qq),e(Qq,VFo),e(wp,XFo),e(x,zFo),e(x,Ap),e(Ap,Ple),e(Ple,WFo),e(Ap,QFo),e(Ap,Hq),e(Hq,HFo),e(Ap,UFo),e(x,JFo),e(x,yp),e(yp,Ble),e(Ble,YFo),e(yp,KFo),e(yp,Uq),e(Uq,ZFo),e(yp,e1o),e(x,o1o),e(x,Lp),e(Lp,Ile),e(Ile,r1o),e(Lp,t1o),e(Lp,Jq),e(Jq,a1o),e(Lp,n1o),e(x,s1o),e(x,xp),e(xp,qle),e(qle,l1o),e(xp,i1o),e(xp,Yq),e(Yq,d1o),e(xp,c1o),e(x,m1o),e(x,$p),e($p,Nle),e(Nle,f1o),e($p,g1o),e($p,Kq),e(Kq,h1o),e($p,u1o),e(x,p1o),e(x,kp),e(kp,jle),e(jle,_1o),e(kp,b1o),e(kp,Zq),e(Zq,v1o),e(kp,F1o),e(x,T1o),e(x,Sp),e(Sp,Dle),e(Dle,M1o),e(Sp,E1o),e(Sp,eN),e(eN,C1o),e(Sp,w1o),e(x,A1o),e(x,Rp),e(Rp,Gle),e(Gle,y1o),e(Rp,L1o),e(Rp,oN),e(oN,x1o),e(Rp,$1o),e(x,k1o),e(x,Pp),e(Pp,Ole),e(Ole,S1o),e(Pp,R1o),e(Pp,rN),e(rN,P1o),e(Pp,B1o),e(x,I1o),e(x,Bp),e(Bp,Vle),e(Vle,q1o),e(Bp,N1o),e(Bp,tN),e(tN,j1o),e(Bp,D1o),e(x,G1o),e(x,Ip),e(Ip,Xle),e(Xle,O1o),e(Ip,V1o),e(Ip,aN),e(aN,X1o),e(Ip,z1o),e(x,W1o),e(x,qp),e(qp,zle),e(zle,Q1o),e(qp,H1o),e(qp,nN),e(nN,U1o),e(qp,J1o),e(x,Y1o),e(x,Np),e(Np,Wle),e(Wle,K1o),e(Np,Z1o),e(Np,sN),e(sN,eTo),e(Np,oTo),e(x,rTo),e(x,jp),e(jp,Qle),e(Qle,tTo),e(jp,aTo),e(jp,lN),e(lN,nTo),e(jp,sTo),e(x,lTo),e(x,Dp),e(Dp,Hle),e(Hle,iTo),e(Dp,dTo),e(Dp,iN),e(iN,cTo),e(Dp,mTo),e(x,fTo),e(x,Gp),e(Gp,Ule),e(Ule,gTo),e(Gp,hTo),e(Gp,dN),e(dN,uTo),e(Gp,pTo),e(x,_To),e(x,Op),e(Op,Jle),e(Jle,bTo),e(Op,vTo),e(Op,cN),e(cN,FTo),e(Op,TTo),e(x,MTo),e(x,Vp),e(Vp,Yle),e(Yle,ETo),e(Vp,CTo),e(Vp,mN),e(mN,wTo),e(Vp,ATo),e(x,yTo),e(x,Xp),e(Xp,Kle),e(Kle,LTo),e(Xp,xTo),e(Xp,fN),e(fN,$To),e(Xp,kTo),e(x,STo),e(x,zp),e(zp,Zle),e(Zle,RTo),e(zp,PTo),e(zp,gN),e(gN,BTo),e(zp,ITo),e(x,qTo),e(x,Wp),e(Wp,eie),e(eie,NTo),e(Wp,jTo),e(Wp,hN),e(hN,DTo),e(Wp,GTo),e(x,OTo),e(x,Qp),e(Qp,oie),e(oie,VTo),e(Qp,XTo),e(Qp,uN),e(uN,zTo),e(Qp,WTo),e(x,QTo),e(x,Hp),e(Hp,rie),e(rie,HTo),e(Hp,UTo),e(Hp,pN),e(pN,JTo),e(Hp,YTo),e(x,KTo),e(x,Up),e(Up,tie),e(tie,ZTo),e(Up,eMo),e(Up,_N),e(_N,oMo),e(Up,rMo),e(x,tMo),e(x,Jp),e(Jp,aie),e(aie,aMo),e(Jp,nMo),e(Jp,bN),e(bN,sMo),e(Jp,lMo),e(x,iMo),e(x,Yp),e(Yp,nie),e(nie,dMo),e(Yp,cMo),e(Yp,vN),e(vN,mMo),e(Yp,fMo),e(Je,gMo),e(Je,Kp),e(Kp,hMo),e(Kp,sie),e(sie,uMo),e(Kp,pMo),e(Kp,lie),e(lie,_Mo),e(Je,bMo),M(Zp,Je,null),b(m,Yqe,_),b(m,Li,_),e(Li,e_),e(e_,iie),M(eL,iie,null),e(Li,vMo),e(Li,die),e(die,FMo),b(m,Kqe,_),b(m,xo,_),M(oL,xo,null),e(xo,TMo),e(xo,xi),e(xi,MMo),e(xi,FN),e(FN,EMo),e(xi,CMo),e(xi,TN),e(TN,wMo),e(xi,AMo),e(xo,yMo),e(xo,rL),e(rL,LMo),e(rL,cie),e(cie,xMo),e(rL,$Mo),e(xo,kMo),e(xo,at),M(tL,at,null),e(at,SMo),e(at,mie),e(mie,RMo),e(at,PMo),e(at,$i),e($i,BMo),e($i,fie),e(fie,IMo),e($i,qMo),e($i,MN),e(MN,NMo),e($i,jMo),e(at,DMo),M(o_,at,null),e(xo,GMo),e(xo,Ye),M(aL,Ye,null),e(Ye,OMo),e(Ye,gie),e(gie,VMo),e(Ye,XMo),e(Ye,xa),e(xa,zMo),e(xa,hie),e(hie,WMo),e(xa,QMo),e(xa,uie),e(uie,HMo),e(xa,UMo),e(xa,pie),e(pie,JMo),e(xa,YMo),e(Ye,KMo),e(Ye,G),e(G,r_),e(r_,_ie),e(_ie,ZMo),e(r_,e4o),e(r_,EN),e(EN,o4o),e(r_,r4o),e(G,t4o),e(G,t_),e(t_,bie),e(bie,a4o),e(t_,n4o),e(t_,CN),e(CN,s4o),e(t_,l4o),e(G,i4o),e(G,a_),e(a_,vie),e(vie,d4o),e(a_,c4o),e(a_,wN),e(wN,m4o),e(a_,f4o),e(G,g4o),e(G,n_),e(n_,Fie),e(Fie,h4o),e(n_,u4o),e(n_,AN),e(AN,p4o),e(n_,_4o),e(G,b4o),e(G,s_),e(s_,Tie),e(Tie,v4o),e(s_,F4o),e(s_,yN),e(yN,T4o),e(s_,M4o),e(G,E4o),e(G,l_),e(l_,Mie),e(Mie,C4o),e(l_,w4o),e(l_,LN),e(LN,A4o),e(l_,y4o),e(G,L4o),e(G,i_),e(i_,Eie),e(Eie,x4o),e(i_,$4o),e(i_,xN),e(xN,k4o),e(i_,S4o),e(G,R4o),e(G,d_),e(d_,Cie),e(Cie,P4o),e(d_,B4o),e(d_,$N),e($N,I4o),e(d_,q4o),e(G,N4o),e(G,c_),e(c_,wie),e(wie,j4o),e(c_,D4o),e(c_,kN),e(kN,G4o),e(c_,O4o),e(G,V4o),e(G,m_),e(m_,Aie),e(Aie,X4o),e(m_,z4o),e(m_,SN),e(SN,W4o),e(m_,Q4o),e(G,H4o),e(G,f_),e(f_,yie),e(yie,U4o),e(f_,J4o),e(f_,RN),e(RN,Y4o),e(f_,K4o),e(G,Z4o),e(G,g_),e(g_,Lie),e(Lie,eEo),e(g_,oEo),e(g_,PN),e(PN,rEo),e(g_,tEo),e(G,aEo),e(G,h_),e(h_,xie),e(xie,nEo),e(h_,sEo),e(h_,BN),e(BN,lEo),e(h_,iEo),e(G,dEo),e(G,u_),e(u_,$ie),e($ie,cEo),e(u_,mEo),e(u_,IN),e(IN,fEo),e(u_,gEo),e(G,hEo),e(G,p_),e(p_,kie),e(kie,uEo),e(p_,pEo),e(p_,qN),e(qN,_Eo),e(p_,bEo),e(G,vEo),e(G,__),e(__,Sie),e(Sie,FEo),e(__,TEo),e(__,NN),e(NN,MEo),e(__,EEo),e(G,CEo),e(G,b_),e(b_,Rie),e(Rie,wEo),e(b_,AEo),e(b_,jN),e(jN,yEo),e(b_,LEo),e(G,xEo),e(G,v_),e(v_,Pie),e(Pie,$Eo),e(v_,kEo),e(v_,DN),e(DN,SEo),e(v_,REo),e(G,PEo),e(G,F_),e(F_,Bie),e(Bie,BEo),e(F_,IEo),e(F_,GN),e(GN,qEo),e(F_,NEo),e(G,jEo),e(G,T_),e(T_,Iie),e(Iie,DEo),e(T_,GEo),e(T_,ON),e(ON,OEo),e(T_,VEo),e(G,XEo),e(G,M_),e(M_,qie),e(qie,zEo),e(M_,WEo),e(M_,VN),e(VN,QEo),e(M_,HEo),e(G,UEo),e(G,E_),e(E_,Nie),e(Nie,JEo),e(E_,YEo),e(E_,XN),e(XN,KEo),e(E_,ZEo),e(G,eCo),e(G,C_),e(C_,jie),e(jie,oCo),e(C_,rCo),e(C_,zN),e(zN,tCo),e(C_,aCo),e(G,nCo),e(G,w_),e(w_,Die),e(Die,sCo),e(w_,lCo),e(w_,WN),e(WN,iCo),e(w_,dCo),e(G,cCo),e(G,A_),e(A_,Gie),e(Gie,mCo),e(A_,fCo),e(A_,QN),e(QN,gCo),e(A_,hCo),e(G,uCo),e(G,y_),e(y_,Oie),e(Oie,pCo),e(y_,_Co),e(y_,HN),e(HN,bCo),e(y_,vCo),e(G,FCo),e(G,L_),e(L_,Vie),e(Vie,TCo),e(L_,MCo),e(L_,UN),e(UN,ECo),e(L_,CCo),e(G,wCo),e(G,x_),e(x_,Xie),e(Xie,ACo),e(x_,yCo),e(x_,JN),e(JN,LCo),e(x_,xCo),e(G,$Co),e(G,$_),e($_,zie),e(zie,kCo),e($_,SCo),e($_,YN),e(YN,RCo),e($_,PCo),e(G,BCo),e(G,k_),e(k_,Wie),e(Wie,ICo),e(k_,qCo),e(k_,KN),e(KN,NCo),e(k_,jCo),e(G,DCo),e(G,S_),e(S_,Qie),e(Qie,GCo),e(S_,OCo),e(S_,ZN),e(ZN,VCo),e(S_,XCo),e(G,zCo),e(G,R_),e(R_,Hie),e(Hie,WCo),e(R_,QCo),e(R_,ej),e(ej,HCo),e(R_,UCo),e(G,JCo),e(G,P_),e(P_,Uie),e(Uie,YCo),e(P_,KCo),e(P_,oj),e(oj,ZCo),e(P_,e5o),e(G,o5o),e(G,B_),e(B_,Jie),e(Jie,r5o),e(B_,t5o),e(B_,rj),e(rj,a5o),e(B_,n5o),e(G,s5o),e(G,I_),e(I_,Yie),e(Yie,l5o),e(I_,i5o),e(I_,tj),e(tj,d5o),e(I_,c5o),e(G,m5o),e(G,q_),e(q_,Kie),e(Kie,f5o),e(q_,g5o),e(q_,aj),e(aj,h5o),e(q_,u5o),e(G,p5o),e(G,N_),e(N_,Zie),e(Zie,_5o),e(N_,b5o),e(N_,nj),e(nj,v5o),e(N_,F5o),e(G,T5o),e(G,j_),e(j_,ede),e(ede,M5o),e(j_,E5o),e(j_,sj),e(sj,C5o),e(j_,w5o),e(G,A5o),e(G,D_),e(D_,ode),e(ode,y5o),e(D_,L5o),e(D_,lj),e(lj,x5o),e(D_,$5o),e(G,k5o),e(G,G_),e(G_,rde),e(rde,S5o),e(G_,R5o),e(G_,ij),e(ij,P5o),e(G_,B5o),e(G,I5o),e(G,O_),e(O_,tde),e(tde,q5o),e(O_,N5o),e(O_,dj),e(dj,j5o),e(O_,D5o),e(G,G5o),e(G,V_),e(V_,ade),e(ade,O5o),e(V_,V5o),e(V_,cj),e(cj,X5o),e(V_,z5o),e(Ye,W5o),e(Ye,X_),e(X_,Q5o),e(X_,nde),e(nde,H5o),e(X_,U5o),e(X_,sde),e(sde,J5o),e(Ye,Y5o),M(z_,Ye,null),b(m,Zqe,_),b(m,ki,_),e(ki,W_),e(W_,lde),M(nL,lde,null),e(ki,K5o),e(ki,ide),e(ide,Z5o),b(m,eNe,_),b(m,$o,_),M(sL,$o,null),e($o,e3o),e($o,Si),e(Si,o3o),e(Si,mj),e(mj,r3o),e(Si,t3o),e(Si,fj),e(fj,a3o),e(Si,n3o),e($o,s3o),e($o,lL),e(lL,l3o),e(lL,dde),e(dde,i3o),e(lL,d3o),e($o,c3o),e($o,nt),M(iL,nt,null),e(nt,m3o),e(nt,cde),e(cde,f3o),e(nt,g3o),e(nt,Ri),e(Ri,h3o),e(Ri,mde),e(mde,u3o),e(Ri,p3o),e(Ri,gj),e(gj,_3o),e(Ri,b3o),e(nt,v3o),M(Q_,nt,null),e($o,F3o),e($o,Ke),M(dL,Ke,null),e(Ke,T3o),e(Ke,fde),e(fde,M3o),e(Ke,E3o),e(Ke,$a),e($a,C3o),e($a,gde),e(gde,w3o),e($a,A3o),e($a,hde),e(hde,y3o),e($a,L3o),e($a,ude),e(ude,x3o),e($a,$3o),e(Ke,k3o),e(Ke,z),e(z,H_),e(H_,pde),e(pde,S3o),e(H_,R3o),e(H_,hj),e(hj,P3o),e(H_,B3o),e(z,I3o),e(z,U_),e(U_,_de),e(_de,q3o),e(U_,N3o),e(U_,uj),e(uj,j3o),e(U_,D3o),e(z,G3o),e(z,J_),e(J_,bde),e(bde,O3o),e(J_,V3o),e(J_,pj),e(pj,X3o),e(J_,z3o),e(z,W3o),e(z,Y_),e(Y_,vde),e(vde,Q3o),e(Y_,H3o),e(Y_,_j),e(_j,U3o),e(Y_,J3o),e(z,Y3o),e(z,K_),e(K_,Fde),e(Fde,K3o),e(K_,Z3o),e(K_,bj),e(bj,ewo),e(K_,owo),e(z,rwo),e(z,Z_),e(Z_,Tde),e(Tde,two),e(Z_,awo),e(Z_,vj),e(vj,nwo),e(Z_,swo),e(z,lwo),e(z,eb),e(eb,Mde),e(Mde,iwo),e(eb,dwo),e(eb,Fj),e(Fj,cwo),e(eb,mwo),e(z,fwo),e(z,ob),e(ob,Ede),e(Ede,gwo),e(ob,hwo),e(ob,Tj),e(Tj,uwo),e(ob,pwo),e(z,_wo),e(z,rb),e(rb,Cde),e(Cde,bwo),e(rb,vwo),e(rb,Mj),e(Mj,Fwo),e(rb,Two),e(z,Mwo),e(z,tb),e(tb,wde),e(wde,Ewo),e(tb,Cwo),e(tb,Ej),e(Ej,wwo),e(tb,Awo),e(z,ywo),e(z,ab),e(ab,Ade),e(Ade,Lwo),e(ab,xwo),e(ab,Cj),e(Cj,$wo),e(ab,kwo),e(z,Swo),e(z,nb),e(nb,yde),e(yde,Rwo),e(nb,Pwo),e(nb,wj),e(wj,Bwo),e(nb,Iwo),e(z,qwo),e(z,sb),e(sb,Lde),e(Lde,Nwo),e(sb,jwo),e(sb,Aj),e(Aj,Dwo),e(sb,Gwo),e(z,Owo),e(z,lb),e(lb,xde),e(xde,Vwo),e(lb,Xwo),e(lb,yj),e(yj,zwo),e(lb,Wwo),e(z,Qwo),e(z,ib),e(ib,$de),e($de,Hwo),e(ib,Uwo),e(ib,Lj),e(Lj,Jwo),e(ib,Ywo),e(z,Kwo),e(z,db),e(db,kde),e(kde,Zwo),e(db,e0o),e(db,xj),e(xj,o0o),e(db,r0o),e(z,t0o),e(z,cb),e(cb,Sde),e(Sde,a0o),e(cb,n0o),e(cb,$j),e($j,s0o),e(cb,l0o),e(z,i0o),e(z,mb),e(mb,Rde),e(Rde,d0o),e(mb,c0o),e(mb,kj),e(kj,m0o),e(mb,f0o),e(z,g0o),e(z,fb),e(fb,Pde),e(Pde,h0o),e(fb,u0o),e(fb,Sj),e(Sj,p0o),e(fb,_0o),e(z,b0o),e(z,gb),e(gb,Bde),e(Bde,v0o),e(gb,F0o),e(gb,Rj),e(Rj,T0o),e(gb,M0o),e(z,E0o),e(z,hb),e(hb,Ide),e(Ide,C0o),e(hb,w0o),e(hb,Pj),e(Pj,A0o),e(hb,y0o),e(z,L0o),e(z,ub),e(ub,qde),e(qde,x0o),e(ub,$0o),e(ub,Bj),e(Bj,k0o),e(ub,S0o),e(z,R0o),e(z,pb),e(pb,Nde),e(Nde,P0o),e(pb,B0o),e(pb,Ij),e(Ij,I0o),e(pb,q0o),e(z,N0o),e(z,_b),e(_b,jde),e(jde,j0o),e(_b,D0o),e(_b,qj),e(qj,G0o),e(_b,O0o),e(z,V0o),e(z,bb),e(bb,Dde),e(Dde,X0o),e(bb,z0o),e(bb,Nj),e(Nj,W0o),e(bb,Q0o),e(z,H0o),e(z,vb),e(vb,Gde),e(Gde,U0o),e(vb,J0o),e(vb,jj),e(jj,Y0o),e(vb,K0o),e(z,Z0o),e(z,Fb),e(Fb,Ode),e(Ode,eAo),e(Fb,oAo),e(Fb,Dj),e(Dj,rAo),e(Fb,tAo),e(z,aAo),e(z,Tb),e(Tb,Vde),e(Vde,nAo),e(Tb,sAo),e(Tb,Gj),e(Gj,lAo),e(Tb,iAo),e(z,dAo),e(z,Mb),e(Mb,Xde),e(Xde,cAo),e(Mb,mAo),e(Mb,Oj),e(Oj,fAo),e(Mb,gAo),e(z,hAo),e(z,Eb),e(Eb,zde),e(zde,uAo),e(Eb,pAo),e(Eb,Vj),e(Vj,_Ao),e(Eb,bAo),e(z,vAo),e(z,Cb),e(Cb,Wde),e(Wde,FAo),e(Cb,TAo),e(Cb,Xj),e(Xj,MAo),e(Cb,EAo),e(z,CAo),e(z,wb),e(wb,Qde),e(Qde,wAo),e(wb,AAo),e(wb,zj),e(zj,yAo),e(wb,LAo),e(z,xAo),e(z,Ab),e(Ab,Hde),e(Hde,$Ao),e(Ab,kAo),e(Ab,Wj),e(Wj,SAo),e(Ab,RAo),e(z,PAo),e(z,yb),e(yb,Ude),e(Ude,BAo),e(yb,IAo),e(yb,Qj),e(Qj,qAo),e(yb,NAo),e(z,jAo),e(z,Lb),e(Lb,Jde),e(Jde,DAo),e(Lb,GAo),e(Lb,Hj),e(Hj,OAo),e(Lb,VAo),e(z,XAo),e(z,xb),e(xb,Yde),e(Yde,zAo),e(xb,WAo),e(xb,Uj),e(Uj,QAo),e(xb,HAo),e(Ke,UAo),e(Ke,$b),e($b,JAo),e($b,Kde),e(Kde,YAo),e($b,KAo),e($b,Zde),e(Zde,ZAo),e(Ke,e6o),M(kb,Ke,null),b(m,oNe,_),b(m,Pi,_),e(Pi,Sb),e(Sb,ece),M(cL,ece,null),e(Pi,o6o),e(Pi,oce),e(oce,r6o),b(m,rNe,_),b(m,ko,_),M(mL,ko,null),e(ko,t6o),e(ko,Bi),e(Bi,a6o),e(Bi,Jj),e(Jj,n6o),e(Bi,s6o),e(Bi,Yj),e(Yj,l6o),e(Bi,i6o),e(ko,d6o),e(ko,fL),e(fL,c6o),e(fL,rce),e(rce,m6o),e(fL,f6o),e(ko,g6o),e(ko,st),M(gL,st,null),e(st,h6o),e(st,tce),e(tce,u6o),e(st,p6o),e(st,Ii),e(Ii,_6o),e(Ii,ace),e(ace,b6o),e(Ii,v6o),e(Ii,Kj),e(Kj,F6o),e(Ii,T6o),e(st,M6o),M(Rb,st,null),e(ko,E6o),e(ko,Ze),M(hL,Ze,null),e(Ze,C6o),e(Ze,nce),e(nce,w6o),e(Ze,A6o),e(Ze,ka),e(ka,y6o),e(ka,sce),e(sce,L6o),e(ka,x6o),e(ka,lce),e(lce,$6o),e(ka,k6o),e(ka,ice),e(ice,S6o),e(ka,R6o),e(Ze,P6o),e(Ze,W),e(W,Pb),e(Pb,dce),e(dce,B6o),e(Pb,I6o),e(Pb,Zj),e(Zj,q6o),e(Pb,N6o),e(W,j6o),e(W,Bb),e(Bb,cce),e(cce,D6o),e(Bb,G6o),e(Bb,eD),e(eD,O6o),e(Bb,V6o),e(W,X6o),e(W,Ib),e(Ib,mce),e(mce,z6o),e(Ib,W6o),e(Ib,oD),e(oD,Q6o),e(Ib,H6o),e(W,U6o),e(W,qb),e(qb,fce),e(fce,J6o),e(qb,Y6o),e(qb,rD),e(rD,K6o),e(qb,Z6o),e(W,eyo),e(W,Nb),e(Nb,gce),e(gce,oyo),e(Nb,ryo),e(Nb,tD),e(tD,tyo),e(Nb,ayo),e(W,nyo),e(W,jb),e(jb,hce),e(hce,syo),e(jb,lyo),e(jb,aD),e(aD,iyo),e(jb,dyo),e(W,cyo),e(W,Db),e(Db,uce),e(uce,myo),e(Db,fyo),e(Db,nD),e(nD,gyo),e(Db,hyo),e(W,uyo),e(W,Gb),e(Gb,pce),e(pce,pyo),e(Gb,_yo),e(Gb,sD),e(sD,byo),e(Gb,vyo),e(W,Fyo),e(W,Ob),e(Ob,_ce),e(_ce,Tyo),e(Ob,Myo),e(Ob,lD),e(lD,Eyo),e(Ob,Cyo),e(W,wyo),e(W,Vb),e(Vb,bce),e(bce,Ayo),e(Vb,yyo),e(Vb,iD),e(iD,Lyo),e(Vb,xyo),e(W,$yo),e(W,Xb),e(Xb,vce),e(vce,kyo),e(Xb,Syo),e(Xb,dD),e(dD,Ryo),e(Xb,Pyo),e(W,Byo),e(W,zb),e(zb,Fce),e(Fce,Iyo),e(zb,qyo),e(zb,cD),e(cD,Nyo),e(zb,jyo),e(W,Dyo),e(W,Wb),e(Wb,Tce),e(Tce,Gyo),e(Wb,Oyo),e(Wb,mD),e(mD,Vyo),e(Wb,Xyo),e(W,zyo),e(W,Qb),e(Qb,Mce),e(Mce,Wyo),e(Qb,Qyo),e(Qb,fD),e(fD,Hyo),e(Qb,Uyo),e(W,Jyo),e(W,Hb),e(Hb,Ece),e(Ece,Yyo),e(Hb,Kyo),e(Hb,gD),e(gD,Zyo),e(Hb,eLo),e(W,oLo),e(W,Ub),e(Ub,Cce),e(Cce,rLo),e(Ub,tLo),e(Ub,hD),e(hD,aLo),e(Ub,nLo),e(W,sLo),e(W,Jb),e(Jb,wce),e(wce,lLo),e(Jb,iLo),e(Jb,uD),e(uD,dLo),e(Jb,cLo),e(W,mLo),e(W,Yb),e(Yb,Ace),e(Ace,fLo),e(Yb,gLo),e(Yb,pD),e(pD,hLo),e(Yb,uLo),e(W,pLo),e(W,Kb),e(Kb,yce),e(yce,_Lo),e(Kb,bLo),e(Kb,_D),e(_D,vLo),e(Kb,FLo),e(W,TLo),e(W,Zb),e(Zb,Lce),e(Lce,MLo),e(Zb,ELo),e(Zb,bD),e(bD,CLo),e(Zb,wLo),e(W,ALo),e(W,e2),e(e2,xce),e(xce,yLo),e(e2,LLo),e(e2,vD),e(vD,xLo),e(e2,$Lo),e(W,kLo),e(W,o2),e(o2,$ce),e($ce,SLo),e(o2,RLo),e(o2,FD),e(FD,PLo),e(o2,BLo),e(W,ILo),e(W,r2),e(r2,kce),e(kce,qLo),e(r2,NLo),e(r2,TD),e(TD,jLo),e(r2,DLo),e(W,GLo),e(W,t2),e(t2,Sce),e(Sce,OLo),e(t2,VLo),e(t2,MD),e(MD,XLo),e(t2,zLo),e(W,WLo),e(W,a2),e(a2,Rce),e(Rce,QLo),e(a2,HLo),e(a2,ED),e(ED,ULo),e(a2,JLo),e(W,YLo),e(W,n2),e(n2,Pce),e(Pce,KLo),e(n2,ZLo),e(n2,CD),e(CD,e8o),e(n2,o8o),e(W,r8o),e(W,s2),e(s2,Bce),e(Bce,t8o),e(s2,a8o),e(s2,wD),e(wD,n8o),e(s2,s8o),e(W,l8o),e(W,l2),e(l2,Ice),e(Ice,i8o),e(l2,d8o),e(l2,AD),e(AD,c8o),e(l2,m8o),e(W,f8o),e(W,i2),e(i2,qce),e(qce,g8o),e(i2,h8o),e(i2,yD),e(yD,u8o),e(i2,p8o),e(W,_8o),e(W,d2),e(d2,Nce),e(Nce,b8o),e(d2,v8o),e(d2,LD),e(LD,F8o),e(d2,T8o),e(W,M8o),e(W,c2),e(c2,jce),e(jce,E8o),e(c2,C8o),e(c2,Dce),e(Dce,w8o),e(c2,A8o),e(W,y8o),e(W,m2),e(m2,Gce),e(Gce,L8o),e(m2,x8o),e(m2,xD),e(xD,$8o),e(m2,k8o),e(W,S8o),e(W,f2),e(f2,Oce),e(Oce,R8o),e(f2,P8o),e(f2,$D),e($D,B8o),e(f2,I8o),e(W,q8o),e(W,g2),e(g2,Vce),e(Vce,N8o),e(g2,j8o),e(g2,kD),e(kD,D8o),e(g2,G8o),e(W,O8o),e(W,h2),e(h2,Xce),e(Xce,V8o),e(h2,X8o),e(h2,SD),e(SD,z8o),e(h2,W8o),e(Ze,Q8o),e(Ze,u2),e(u2,H8o),e(u2,zce),e(zce,U8o),e(u2,J8o),e(u2,Wce),e(Wce,Y8o),e(Ze,K8o),M(p2,Ze,null),b(m,tNe,_),b(m,qi,_),e(qi,_2),e(_2,Qce),M(uL,Qce,null),e(qi,Z8o),e(qi,Hce),e(Hce,e7o),b(m,aNe,_),b(m,So,_),M(pL,So,null),e(So,o7o),e(So,Ni),e(Ni,r7o),e(Ni,RD),e(RD,t7o),e(Ni,a7o),e(Ni,PD),e(PD,n7o),e(Ni,s7o),e(So,l7o),e(So,_L),e(_L,i7o),e(_L,Uce),e(Uce,d7o),e(_L,c7o),e(So,m7o),e(So,lt),M(bL,lt,null),e(lt,f7o),e(lt,Jce),e(Jce,g7o),e(lt,h7o),e(lt,ji),e(ji,u7o),e(ji,Yce),e(Yce,p7o),e(ji,_7o),e(ji,BD),e(BD,b7o),e(ji,v7o),e(lt,F7o),M(b2,lt,null),e(So,T7o),e(So,eo),M(vL,eo,null),e(eo,M7o),e(eo,Kce),e(Kce,E7o),e(eo,C7o),e(eo,Sa),e(Sa,w7o),e(Sa,Zce),e(Zce,A7o),e(Sa,y7o),e(Sa,eme),e(eme,L7o),e(Sa,x7o),e(Sa,ome),e(ome,$7o),e(Sa,k7o),e(eo,S7o),e(eo,pe),e(pe,v2),e(v2,rme),e(rme,R7o),e(v2,P7o),e(v2,ID),e(ID,B7o),e(v2,I7o),e(pe,q7o),e(pe,F2),e(F2,tme),e(tme,N7o),e(F2,j7o),e(F2,qD),e(qD,D7o),e(F2,G7o),e(pe,O7o),e(pe,T2),e(T2,ame),e(ame,V7o),e(T2,X7o),e(T2,ND),e(ND,z7o),e(T2,W7o),e(pe,Q7o),e(pe,M2),e(M2,nme),e(nme,H7o),e(M2,U7o),e(M2,jD),e(jD,J7o),e(M2,Y7o),e(pe,K7o),e(pe,E2),e(E2,sme),e(sme,Z7o),e(E2,e9o),e(E2,DD),e(DD,o9o),e(E2,r9o),e(pe,t9o),e(pe,C2),e(C2,lme),e(lme,a9o),e(C2,n9o),e(C2,GD),e(GD,s9o),e(C2,l9o),e(pe,i9o),e(pe,w2),e(w2,ime),e(ime,d9o),e(w2,c9o),e(w2,OD),e(OD,m9o),e(w2,f9o),e(pe,g9o),e(pe,A2),e(A2,dme),e(dme,h9o),e(A2,u9o),e(A2,VD),e(VD,p9o),e(A2,_9o),e(pe,b9o),e(pe,y2),e(y2,cme),e(cme,v9o),e(y2,F9o),e(y2,XD),e(XD,T9o),e(y2,M9o),e(pe,E9o),e(pe,L2),e(L2,mme),e(mme,C9o),e(L2,w9o),e(L2,zD),e(zD,A9o),e(L2,y9o),e(pe,L9o),e(pe,x2),e(x2,fme),e(fme,x9o),e(x2,$9o),e(x2,WD),e(WD,k9o),e(x2,S9o),e(pe,R9o),e(pe,$2),e($2,gme),e(gme,P9o),e($2,B9o),e($2,QD),e(QD,I9o),e($2,q9o),e(pe,N9o),e(pe,k2),e(k2,hme),e(hme,j9o),e(k2,D9o),e(k2,HD),e(HD,G9o),e(k2,O9o),e(pe,V9o),e(pe,S2),e(S2,ume),e(ume,X9o),e(S2,z9o),e(S2,UD),e(UD,W9o),e(S2,Q9o),e(pe,H9o),e(pe,R2),e(R2,pme),e(pme,U9o),e(R2,J9o),e(R2,JD),e(JD,Y9o),e(R2,K9o),e(pe,Z9o),e(pe,P2),e(P2,_me),e(_me,exo),e(P2,oxo),e(P2,YD),e(YD,rxo),e(P2,txo),e(eo,axo),e(eo,B2),e(B2,nxo),e(B2,bme),e(bme,sxo),e(B2,lxo),e(B2,vme),e(vme,ixo),e(eo,dxo),M(I2,eo,null),b(m,nNe,_),b(m,Di,_),e(Di,q2),e(q2,Fme),M(FL,Fme,null),e(Di,cxo),e(Di,Tme),e(Tme,mxo),b(m,sNe,_),b(m,Ro,_),M(TL,Ro,null),e(Ro,fxo),e(Ro,Gi),e(Gi,gxo),e(Gi,KD),e(KD,hxo),e(Gi,uxo),e(Gi,ZD),e(ZD,pxo),e(Gi,_xo),e(Ro,bxo),e(Ro,ML),e(ML,vxo),e(ML,Mme),e(Mme,Fxo),e(ML,Txo),e(Ro,Mxo),e(Ro,it),M(EL,it,null),e(it,Exo),e(it,Eme),e(Eme,Cxo),e(it,wxo),e(it,Oi),e(Oi,Axo),e(Oi,Cme),e(Cme,yxo),e(Oi,Lxo),e(Oi,eG),e(eG,xxo),e(Oi,$xo),e(it,kxo),M(N2,it,null),e(Ro,Sxo),e(Ro,oo),M(CL,oo,null),e(oo,Rxo),e(oo,wme),e(wme,Pxo),e(oo,Bxo),e(oo,Ra),e(Ra,Ixo),e(Ra,Ame),e(Ame,qxo),e(Ra,Nxo),e(Ra,yme),e(yme,jxo),e(Ra,Dxo),e(Ra,Lme),e(Lme,Gxo),e(Ra,Oxo),e(oo,Vxo),e(oo,q),e(q,j2),e(j2,xme),e(xme,Xxo),e(j2,zxo),e(j2,oG),e(oG,Wxo),e(j2,Qxo),e(q,Hxo),e(q,D2),e(D2,$me),e($me,Uxo),e(D2,Jxo),e(D2,rG),e(rG,Yxo),e(D2,Kxo),e(q,Zxo),e(q,G2),e(G2,kme),e(kme,e$o),e(G2,o$o),e(G2,tG),e(tG,r$o),e(G2,t$o),e(q,a$o),e(q,O2),e(O2,Sme),e(Sme,n$o),e(O2,s$o),e(O2,aG),e(aG,l$o),e(O2,i$o),e(q,d$o),e(q,V2),e(V2,Rme),e(Rme,c$o),e(V2,m$o),e(V2,nG),e(nG,f$o),e(V2,g$o),e(q,h$o),e(q,X2),e(X2,Pme),e(Pme,u$o),e(X2,p$o),e(X2,sG),e(sG,_$o),e(X2,b$o),e(q,v$o),e(q,z2),e(z2,Bme),e(Bme,F$o),e(z2,T$o),e(z2,lG),e(lG,M$o),e(z2,E$o),e(q,C$o),e(q,W2),e(W2,Ime),e(Ime,w$o),e(W2,A$o),e(W2,iG),e(iG,y$o),e(W2,L$o),e(q,x$o),e(q,Q2),e(Q2,qme),e(qme,$$o),e(Q2,k$o),e(Q2,dG),e(dG,S$o),e(Q2,R$o),e(q,P$o),e(q,H2),e(H2,Nme),e(Nme,B$o),e(H2,I$o),e(H2,cG),e(cG,q$o),e(H2,N$o),e(q,j$o),e(q,U2),e(U2,jme),e(jme,D$o),e(U2,G$o),e(U2,mG),e(mG,O$o),e(U2,V$o),e(q,X$o),e(q,J2),e(J2,Dme),e(Dme,z$o),e(J2,W$o),e(J2,fG),e(fG,Q$o),e(J2,H$o),e(q,U$o),e(q,Y2),e(Y2,Gme),e(Gme,J$o),e(Y2,Y$o),e(Y2,gG),e(gG,K$o),e(Y2,Z$o),e(q,eko),e(q,K2),e(K2,Ome),e(Ome,oko),e(K2,rko),e(K2,hG),e(hG,tko),e(K2,ako),e(q,nko),e(q,Z2),e(Z2,Vme),e(Vme,sko),e(Z2,lko),e(Z2,uG),e(uG,iko),e(Z2,dko),e(q,cko),e(q,ev),e(ev,Xme),e(Xme,mko),e(ev,fko),e(ev,pG),e(pG,gko),e(ev,hko),e(q,uko),e(q,ov),e(ov,zme),e(zme,pko),e(ov,_ko),e(ov,_G),e(_G,bko),e(ov,vko),e(q,Fko),e(q,rv),e(rv,Wme),e(Wme,Tko),e(rv,Mko),e(rv,bG),e(bG,Eko),e(rv,Cko),e(q,wko),e(q,tv),e(tv,Qme),e(Qme,Ako),e(tv,yko),e(tv,vG),e(vG,Lko),e(tv,xko),e(q,$ko),e(q,av),e(av,Hme),e(Hme,kko),e(av,Sko),e(av,FG),e(FG,Rko),e(av,Pko),e(q,Bko),e(q,nv),e(nv,Ume),e(Ume,Iko),e(nv,qko),e(nv,TG),e(TG,Nko),e(nv,jko),e(q,Dko),e(q,sv),e(sv,Jme),e(Jme,Gko),e(sv,Oko),e(sv,MG),e(MG,Vko),e(sv,Xko),e(q,zko),e(q,lv),e(lv,Yme),e(Yme,Wko),e(lv,Qko),e(lv,EG),e(EG,Hko),e(lv,Uko),e(q,Jko),e(q,iv),e(iv,Kme),e(Kme,Yko),e(iv,Kko),e(iv,CG),e(CG,Zko),e(iv,eSo),e(q,oSo),e(q,dv),e(dv,Zme),e(Zme,rSo),e(dv,tSo),e(dv,wG),e(wG,aSo),e(dv,nSo),e(q,sSo),e(q,cv),e(cv,efe),e(efe,lSo),e(cv,iSo),e(cv,AG),e(AG,dSo),e(cv,cSo),e(q,mSo),e(q,mv),e(mv,ofe),e(ofe,fSo),e(mv,gSo),e(mv,yG),e(yG,hSo),e(mv,uSo),e(q,pSo),e(q,fv),e(fv,rfe),e(rfe,_So),e(fv,bSo),e(fv,LG),e(LG,vSo),e(fv,FSo),e(q,TSo),e(q,gv),e(gv,tfe),e(tfe,MSo),e(gv,ESo),e(gv,xG),e(xG,CSo),e(gv,wSo),e(q,ASo),e(q,hv),e(hv,afe),e(afe,ySo),e(hv,LSo),e(hv,$G),e($G,xSo),e(hv,$So),e(q,kSo),e(q,uv),e(uv,nfe),e(nfe,SSo),e(uv,RSo),e(uv,kG),e(kG,PSo),e(uv,BSo),e(q,ISo),e(q,pv),e(pv,sfe),e(sfe,qSo),e(pv,NSo),e(pv,SG),e(SG,jSo),e(pv,DSo),e(q,GSo),e(q,_v),e(_v,lfe),e(lfe,OSo),e(_v,VSo),e(_v,RG),e(RG,XSo),e(_v,zSo),e(q,WSo),e(q,bv),e(bv,ife),e(ife,QSo),e(bv,HSo),e(bv,PG),e(PG,USo),e(bv,JSo),e(q,YSo),e(q,vv),e(vv,dfe),e(dfe,KSo),e(vv,ZSo),e(vv,BG),e(BG,eRo),e(vv,oRo),e(q,rRo),e(q,Fv),e(Fv,cfe),e(cfe,tRo),e(Fv,aRo),e(Fv,IG),e(IG,nRo),e(Fv,sRo),e(q,lRo),e(q,Tv),e(Tv,mfe),e(mfe,iRo),e(Tv,dRo),e(Tv,qG),e(qG,cRo),e(Tv,mRo),e(q,fRo),e(q,Mv),e(Mv,ffe),e(ffe,gRo),e(Mv,hRo),e(Mv,NG),e(NG,uRo),e(Mv,pRo),e(q,_Ro),e(q,Ev),e(Ev,gfe),e(gfe,bRo),e(Ev,vRo),e(Ev,jG),e(jG,FRo),e(Ev,TRo),e(q,MRo),e(q,Cv),e(Cv,hfe),e(hfe,ERo),e(Cv,CRo),e(Cv,DG),e(DG,wRo),e(Cv,ARo),e(q,yRo),e(q,wv),e(wv,ufe),e(ufe,LRo),e(wv,xRo),e(wv,GG),e(GG,$Ro),e(wv,kRo),e(q,SRo),e(q,Av),e(Av,pfe),e(pfe,RRo),e(Av,PRo),e(Av,OG),e(OG,BRo),e(Av,IRo),e(q,qRo),e(q,yv),e(yv,_fe),e(_fe,NRo),e(yv,jRo),e(yv,VG),e(VG,DRo),e(yv,GRo),e(q,ORo),e(q,Lv),e(Lv,bfe),e(bfe,VRo),e(Lv,XRo),e(Lv,XG),e(XG,zRo),e(Lv,WRo),e(q,QRo),e(q,xv),e(xv,vfe),e(vfe,HRo),e(xv,URo),e(xv,zG),e(zG,JRo),e(xv,YRo),e(q,KRo),e(q,$v),e($v,Ffe),e(Ffe,ZRo),e($v,ePo),e($v,WG),e(WG,oPo),e($v,rPo),e(q,tPo),e(q,kv),e(kv,Tfe),e(Tfe,aPo),e(kv,nPo),e(kv,QG),e(QG,sPo),e(kv,lPo),e(oo,iPo),e(oo,Sv),e(Sv,dPo),e(Sv,Mfe),e(Mfe,cPo),e(Sv,mPo),e(Sv,Efe),e(Efe,fPo),e(oo,gPo),M(Rv,oo,null),b(m,lNe,_),b(m,Vi,_),e(Vi,Pv),e(Pv,Cfe),M(wL,Cfe,null),e(Vi,hPo),e(Vi,wfe),e(wfe,uPo),b(m,iNe,_),b(m,Po,_),M(AL,Po,null),e(Po,pPo),e(Po,Xi),e(Xi,_Po),e(Xi,HG),e(HG,bPo),e(Xi,vPo),e(Xi,UG),e(UG,FPo),e(Xi,TPo),e(Po,MPo),e(Po,yL),e(yL,EPo),e(yL,Afe),e(Afe,CPo),e(yL,wPo),e(Po,APo),e(Po,dt),M(LL,dt,null),e(dt,yPo),e(dt,yfe),e(yfe,LPo),e(dt,xPo),e(dt,zi),e(zi,$Po),e(zi,Lfe),e(Lfe,kPo),e(zi,SPo),e(zi,JG),e(JG,RPo),e(zi,PPo),e(dt,BPo),M(Bv,dt,null),e(Po,IPo),e(Po,ro),M(xL,ro,null),e(ro,qPo),e(ro,xfe),e(xfe,NPo),e(ro,jPo),e(ro,Pa),e(Pa,DPo),e(Pa,$fe),e($fe,GPo),e(Pa,OPo),e(Pa,kfe),e(kfe,VPo),e(Pa,XPo),e(Pa,Sfe),e(Sfe,zPo),e(Pa,WPo),e(ro,QPo),e(ro,K),e(K,Iv),e(Iv,Rfe),e(Rfe,HPo),e(Iv,UPo),e(Iv,YG),e(YG,JPo),e(Iv,YPo),e(K,KPo),e(K,qv),e(qv,Pfe),e(Pfe,ZPo),e(qv,eBo),e(qv,KG),e(KG,oBo),e(qv,rBo),e(K,tBo),e(K,Nv),e(Nv,Bfe),e(Bfe,aBo),e(Nv,nBo),e(Nv,ZG),e(ZG,sBo),e(Nv,lBo),e(K,iBo),e(K,jv),e(jv,Ife),e(Ife,dBo),e(jv,cBo),e(jv,eO),e(eO,mBo),e(jv,fBo),e(K,gBo),e(K,Dv),e(Dv,qfe),e(qfe,hBo),e(Dv,uBo),e(Dv,oO),e(oO,pBo),e(Dv,_Bo),e(K,bBo),e(K,Gv),e(Gv,Nfe),e(Nfe,vBo),e(Gv,FBo),e(Gv,rO),e(rO,TBo),e(Gv,MBo),e(K,EBo),e(K,Ov),e(Ov,jfe),e(jfe,CBo),e(Ov,wBo),e(Ov,tO),e(tO,ABo),e(Ov,yBo),e(K,LBo),e(K,Vv),e(Vv,Dfe),e(Dfe,xBo),e(Vv,$Bo),e(Vv,aO),e(aO,kBo),e(Vv,SBo),e(K,RBo),e(K,Xv),e(Xv,Gfe),e(Gfe,PBo),e(Xv,BBo),e(Xv,nO),e(nO,IBo),e(Xv,qBo),e(K,NBo),e(K,zv),e(zv,Ofe),e(Ofe,jBo),e(zv,DBo),e(zv,sO),e(sO,GBo),e(zv,OBo),e(K,VBo),e(K,Wv),e(Wv,Vfe),e(Vfe,XBo),e(Wv,zBo),e(Wv,lO),e(lO,WBo),e(Wv,QBo),e(K,HBo),e(K,Qv),e(Qv,Xfe),e(Xfe,UBo),e(Qv,JBo),e(Qv,iO),e(iO,YBo),e(Qv,KBo),e(K,ZBo),e(K,Hv),e(Hv,zfe),e(zfe,eIo),e(Hv,oIo),e(Hv,dO),e(dO,rIo),e(Hv,tIo),e(K,aIo),e(K,Uv),e(Uv,Wfe),e(Wfe,nIo),e(Uv,sIo),e(Uv,cO),e(cO,lIo),e(Uv,iIo),e(K,dIo),e(K,Jv),e(Jv,Qfe),e(Qfe,cIo),e(Jv,mIo),e(Jv,mO),e(mO,fIo),e(Jv,gIo),e(K,hIo),e(K,Yv),e(Yv,Hfe),e(Hfe,uIo),e(Yv,pIo),e(Yv,fO),e(fO,_Io),e(Yv,bIo),e(K,vIo),e(K,Kv),e(Kv,Ufe),e(Ufe,FIo),e(Kv,TIo),e(Kv,gO),e(gO,MIo),e(Kv,EIo),e(K,CIo),e(K,Zv),e(Zv,Jfe),e(Jfe,wIo),e(Zv,AIo),e(Zv,hO),e(hO,yIo),e(Zv,LIo),e(K,xIo),e(K,eF),e(eF,Yfe),e(Yfe,$Io),e(eF,kIo),e(eF,uO),e(uO,SIo),e(eF,RIo),e(K,PIo),e(K,oF),e(oF,Kfe),e(Kfe,BIo),e(oF,IIo),e(oF,pO),e(pO,qIo),e(oF,NIo),e(K,jIo),e(K,rF),e(rF,Zfe),e(Zfe,DIo),e(rF,GIo),e(rF,_O),e(_O,OIo),e(rF,VIo),e(K,XIo),e(K,tF),e(tF,ege),e(ege,zIo),e(tF,WIo),e(tF,bO),e(bO,QIo),e(tF,HIo),e(K,UIo),e(K,aF),e(aF,oge),e(oge,JIo),e(aF,YIo),e(aF,vO),e(vO,KIo),e(aF,ZIo),e(K,eqo),e(K,nF),e(nF,rge),e(rge,oqo),e(nF,rqo),e(nF,FO),e(FO,tqo),e(nF,aqo),e(K,nqo),e(K,sF),e(sF,tge),e(tge,sqo),e(sF,lqo),e(sF,TO),e(TO,iqo),e(sF,dqo),e(K,cqo),e(K,lF),e(lF,age),e(age,mqo),e(lF,fqo),e(lF,MO),e(MO,gqo),e(lF,hqo),e(K,uqo),e(K,iF),e(iF,nge),e(nge,pqo),e(iF,_qo),e(iF,EO),e(EO,bqo),e(iF,vqo),e(K,Fqo),e(K,dF),e(dF,sge),e(sge,Tqo),e(dF,Mqo),e(dF,CO),e(CO,Eqo),e(dF,Cqo),e(K,wqo),e(K,cF),e(cF,lge),e(lge,Aqo),e(cF,yqo),e(cF,wO),e(wO,Lqo),e(cF,xqo),e(ro,$qo),e(ro,mF),e(mF,kqo),e(mF,ige),e(ige,Sqo),e(mF,Rqo),e(mF,dge),e(dge,Pqo),e(ro,Bqo),M(fF,ro,null),b(m,dNe,_),b(m,Wi,_),e(Wi,gF),e(gF,cge),M($L,cge,null),e(Wi,Iqo),e(Wi,mge),e(mge,qqo),b(m,cNe,_),b(m,Bo,_),M(kL,Bo,null),e(Bo,Nqo),e(Bo,Qi),e(Qi,jqo),e(Qi,AO),e(AO,Dqo),e(Qi,Gqo),e(Qi,yO),e(yO,Oqo),e(Qi,Vqo),e(Bo,Xqo),e(Bo,SL),e(SL,zqo),e(SL,fge),e(fge,Wqo),e(SL,Qqo),e(Bo,Hqo),e(Bo,ct),M(RL,ct,null),e(ct,Uqo),e(ct,gge),e(gge,Jqo),e(ct,Yqo),e(ct,Hi),e(Hi,Kqo),e(Hi,hge),e(hge,Zqo),e(Hi,eNo),e(Hi,LO),e(LO,oNo),e(Hi,rNo),e(ct,tNo),M(hF,ct,null),e(Bo,aNo),e(Bo,to),M(PL,to,null),e(to,nNo),e(to,uge),e(uge,sNo),e(to,lNo),e(to,Ba),e(Ba,iNo),e(Ba,pge),e(pge,dNo),e(Ba,cNo),e(Ba,_ge),e(_ge,mNo),e(Ba,fNo),e(Ba,bge),e(bge,gNo),e(Ba,hNo),e(to,uNo),e(to,Yr),e(Yr,uF),e(uF,vge),e(vge,pNo),e(uF,_No),e(uF,xO),e(xO,bNo),e(uF,vNo),e(Yr,FNo),e(Yr,pF),e(pF,Fge),e(Fge,TNo),e(pF,MNo),e(pF,$O),e($O,ENo),e(pF,CNo),e(Yr,wNo),e(Yr,_F),e(_F,Tge),e(Tge,ANo),e(_F,yNo),e(_F,kO),e(kO,LNo),e(_F,xNo),e(Yr,$No),e(Yr,bF),e(bF,Mge),e(Mge,kNo),e(bF,SNo),e(bF,SO),e(SO,RNo),e(bF,PNo),e(Yr,BNo),e(Yr,vF),e(vF,Ege),e(Ege,INo),e(vF,qNo),e(vF,RO),e(RO,NNo),e(vF,jNo),e(to,DNo),e(to,FF),e(FF,GNo),e(FF,Cge),e(Cge,ONo),e(FF,VNo),e(FF,wge),e(wge,XNo),e(to,zNo),M(TF,to,null),b(m,mNe,_),b(m,Ui,_),e(Ui,MF),e(MF,Age),M(BL,Age,null),e(Ui,WNo),e(Ui,yge),e(yge,QNo),b(m,fNe,_),b(m,Io,_),M(IL,Io,null),e(Io,HNo),e(Io,Ji),e(Ji,UNo),e(Ji,PO),e(PO,JNo),e(Ji,YNo),e(Ji,BO),e(BO,KNo),e(Ji,ZNo),e(Io,ejo),e(Io,qL),e(qL,ojo),e(qL,Lge),e(Lge,rjo),e(qL,tjo),e(Io,ajo),e(Io,mt),M(NL,mt,null),e(mt,njo),e(mt,xge),e(xge,sjo),e(mt,ljo),e(mt,Yi),e(Yi,ijo),e(Yi,$ge),e($ge,djo),e(Yi,cjo),e(Yi,IO),e(IO,mjo),e(Yi,fjo),e(mt,gjo),M(EF,mt,null),e(Io,hjo),e(Io,ao),M(jL,ao,null),e(ao,ujo),e(ao,kge),e(kge,pjo),e(ao,_jo),e(ao,Ia),e(Ia,bjo),e(Ia,Sge),e(Sge,vjo),e(Ia,Fjo),e(Ia,Rge),e(Rge,Tjo),e(Ia,Mjo),e(Ia,Pge),e(Pge,Ejo),e(Ia,Cjo),e(ao,wjo),e(ao,H),e(H,CF),e(CF,Bge),e(Bge,Ajo),e(CF,yjo),e(CF,qO),e(qO,Ljo),e(CF,xjo),e(H,$jo),e(H,wF),e(wF,Ige),e(Ige,kjo),e(wF,Sjo),e(wF,NO),e(NO,Rjo),e(wF,Pjo),e(H,Bjo),e(H,AF),e(AF,qge),e(qge,Ijo),e(AF,qjo),e(AF,jO),e(jO,Njo),e(AF,jjo),e(H,Djo),e(H,yF),e(yF,Nge),e(Nge,Gjo),e(yF,Ojo),e(yF,DO),e(DO,Vjo),e(yF,Xjo),e(H,zjo),e(H,LF),e(LF,jge),e(jge,Wjo),e(LF,Qjo),e(LF,GO),e(GO,Hjo),e(LF,Ujo),e(H,Jjo),e(H,xF),e(xF,Dge),e(Dge,Yjo),e(xF,Kjo),e(xF,OO),e(OO,Zjo),e(xF,eDo),e(H,oDo),e(H,$F),e($F,Gge),e(Gge,rDo),e($F,tDo),e($F,VO),e(VO,aDo),e($F,nDo),e(H,sDo),e(H,kF),e(kF,Oge),e(Oge,lDo),e(kF,iDo),e(kF,XO),e(XO,dDo),e(kF,cDo),e(H,mDo),e(H,SF),e(SF,Vge),e(Vge,fDo),e(SF,gDo),e(SF,zO),e(zO,hDo),e(SF,uDo),e(H,pDo),e(H,RF),e(RF,Xge),e(Xge,_Do),e(RF,bDo),e(RF,WO),e(WO,vDo),e(RF,FDo),e(H,TDo),e(H,PF),e(PF,zge),e(zge,MDo),e(PF,EDo),e(PF,QO),e(QO,CDo),e(PF,wDo),e(H,ADo),e(H,BF),e(BF,Wge),e(Wge,yDo),e(BF,LDo),e(BF,HO),e(HO,xDo),e(BF,$Do),e(H,kDo),e(H,IF),e(IF,Qge),e(Qge,SDo),e(IF,RDo),e(IF,UO),e(UO,PDo),e(IF,BDo),e(H,IDo),e(H,qF),e(qF,Hge),e(Hge,qDo),e(qF,NDo),e(qF,JO),e(JO,jDo),e(qF,DDo),e(H,GDo),e(H,NF),e(NF,Uge),e(Uge,ODo),e(NF,VDo),e(NF,YO),e(YO,XDo),e(NF,zDo),e(H,WDo),e(H,jF),e(jF,Jge),e(Jge,QDo),e(jF,HDo),e(jF,KO),e(KO,UDo),e(jF,JDo),e(H,YDo),e(H,DF),e(DF,Yge),e(Yge,KDo),e(DF,ZDo),e(DF,ZO),e(ZO,eGo),e(DF,oGo),e(H,rGo),e(H,GF),e(GF,Kge),e(Kge,tGo),e(GF,aGo),e(GF,eV),e(eV,nGo),e(GF,sGo),e(H,lGo),e(H,OF),e(OF,Zge),e(Zge,iGo),e(OF,dGo),e(OF,oV),e(oV,cGo),e(OF,mGo),e(H,fGo),e(H,VF),e(VF,ehe),e(ehe,gGo),e(VF,hGo),e(VF,rV),e(rV,uGo),e(VF,pGo),e(H,_Go),e(H,XF),e(XF,ohe),e(ohe,bGo),e(XF,vGo),e(XF,tV),e(tV,FGo),e(XF,TGo),e(H,MGo),e(H,zF),e(zF,rhe),e(rhe,EGo),e(zF,CGo),e(zF,aV),e(aV,wGo),e(zF,AGo),e(H,yGo),e(H,WF),e(WF,the),e(the,LGo),e(WF,xGo),e(WF,nV),e(nV,$Go),e(WF,kGo),e(H,SGo),e(H,QF),e(QF,ahe),e(ahe,RGo),e(QF,PGo),e(QF,sV),e(sV,BGo),e(QF,IGo),e(H,qGo),e(H,HF),e(HF,nhe),e(nhe,NGo),e(HF,jGo),e(HF,lV),e(lV,DGo),e(HF,GGo),e(H,OGo),e(H,UF),e(UF,she),e(she,VGo),e(UF,XGo),e(UF,iV),e(iV,zGo),e(UF,WGo),e(H,QGo),e(H,JF),e(JF,lhe),e(lhe,HGo),e(JF,UGo),e(JF,dV),e(dV,JGo),e(JF,YGo),e(H,KGo),e(H,YF),e(YF,ihe),e(ihe,ZGo),e(YF,eOo),e(YF,cV),e(cV,oOo),e(YF,rOo),e(H,tOo),e(H,KF),e(KF,dhe),e(dhe,aOo),e(KF,nOo),e(KF,mV),e(mV,sOo),e(KF,lOo),e(H,iOo),e(H,ZF),e(ZF,che),e(che,dOo),e(ZF,cOo),e(ZF,fV),e(fV,mOo),e(ZF,fOo),e(H,gOo),e(H,e1),e(e1,mhe),e(mhe,hOo),e(e1,uOo),e(e1,gV),e(gV,pOo),e(e1,_Oo),e(H,bOo),e(H,o1),e(o1,fhe),e(fhe,vOo),e(o1,FOo),e(o1,hV),e(hV,TOo),e(o1,MOo),e(H,EOo),e(H,r1),e(r1,ghe),e(ghe,COo),e(r1,wOo),e(r1,uV),e(uV,AOo),e(r1,yOo),e(H,LOo),e(H,t1),e(t1,hhe),e(hhe,xOo),e(t1,$Oo),e(t1,pV),e(pV,kOo),e(t1,SOo),e(ao,ROo),e(ao,a1),e(a1,POo),e(a1,uhe),e(uhe,BOo),e(a1,IOo),e(a1,phe),e(phe,qOo),e(ao,NOo),M(n1,ao,null),b(m,gNe,_),b(m,Ki,_),e(Ki,s1),e(s1,_he),M(DL,_he,null),e(Ki,jOo),e(Ki,bhe),e(bhe,DOo),b(m,hNe,_),b(m,qo,_),M(GL,qo,null),e(qo,GOo),e(qo,Zi),e(Zi,OOo),e(Zi,_V),e(_V,VOo),e(Zi,XOo),e(Zi,bV),e(bV,zOo),e(Zi,WOo),e(qo,QOo),e(qo,OL),e(OL,HOo),e(OL,vhe),e(vhe,UOo),e(OL,JOo),e(qo,YOo),e(qo,ft),M(VL,ft,null),e(ft,KOo),e(ft,Fhe),e(Fhe,ZOo),e(ft,eVo),e(ft,ed),e(ed,oVo),e(ed,The),e(The,rVo),e(ed,tVo),e(ed,vV),e(vV,aVo),e(ed,nVo),e(ft,sVo),M(l1,ft,null),e(qo,lVo),e(qo,no),M(XL,no,null),e(no,iVo),e(no,Mhe),e(Mhe,dVo),e(no,cVo),e(no,qa),e(qa,mVo),e(qa,Ehe),e(Ehe,fVo),e(qa,gVo),e(qa,Che),e(Che,hVo),e(qa,uVo),e(qa,whe),e(whe,pVo),e(qa,_Vo),e(no,bVo),e(no,V),e(V,i1),e(i1,Ahe),e(Ahe,vVo),e(i1,FVo),e(i1,FV),e(FV,TVo),e(i1,MVo),e(V,EVo),e(V,d1),e(d1,yhe),e(yhe,CVo),e(d1,wVo),e(d1,TV),e(TV,AVo),e(d1,yVo),e(V,LVo),e(V,c1),e(c1,Lhe),e(Lhe,xVo),e(c1,$Vo),e(c1,MV),e(MV,kVo),e(c1,SVo),e(V,RVo),e(V,m1),e(m1,xhe),e(xhe,PVo),e(m1,BVo),e(m1,EV),e(EV,IVo),e(m1,qVo),e(V,NVo),e(V,f1),e(f1,$he),e($he,jVo),e(f1,DVo),e(f1,CV),e(CV,GVo),e(f1,OVo),e(V,VVo),e(V,g1),e(g1,khe),e(khe,XVo),e(g1,zVo),e(g1,wV),e(wV,WVo),e(g1,QVo),e(V,HVo),e(V,h1),e(h1,She),e(She,UVo),e(h1,JVo),e(h1,AV),e(AV,YVo),e(h1,KVo),e(V,ZVo),e(V,u1),e(u1,Rhe),e(Rhe,eXo),e(u1,oXo),e(u1,yV),e(yV,rXo),e(u1,tXo),e(V,aXo),e(V,p1),e(p1,Phe),e(Phe,nXo),e(p1,sXo),e(p1,LV),e(LV,lXo),e(p1,iXo),e(V,dXo),e(V,_1),e(_1,Bhe),e(Bhe,cXo),e(_1,mXo),e(_1,xV),e(xV,fXo),e(_1,gXo),e(V,hXo),e(V,b1),e(b1,Ihe),e(Ihe,uXo),e(b1,pXo),e(b1,$V),e($V,_Xo),e(b1,bXo),e(V,vXo),e(V,v1),e(v1,qhe),e(qhe,FXo),e(v1,TXo),e(v1,kV),e(kV,MXo),e(v1,EXo),e(V,CXo),e(V,F1),e(F1,Nhe),e(Nhe,wXo),e(F1,AXo),e(F1,SV),e(SV,yXo),e(F1,LXo),e(V,xXo),e(V,T1),e(T1,jhe),e(jhe,$Xo),e(T1,kXo),e(T1,RV),e(RV,SXo),e(T1,RXo),e(V,PXo),e(V,M1),e(M1,Dhe),e(Dhe,BXo),e(M1,IXo),e(M1,PV),e(PV,qXo),e(M1,NXo),e(V,jXo),e(V,E1),e(E1,Ghe),e(Ghe,DXo),e(E1,GXo),e(E1,BV),e(BV,OXo),e(E1,VXo),e(V,XXo),e(V,C1),e(C1,Ohe),e(Ohe,zXo),e(C1,WXo),e(C1,IV),e(IV,QXo),e(C1,HXo),e(V,UXo),e(V,w1),e(w1,Vhe),e(Vhe,JXo),e(w1,YXo),e(w1,qV),e(qV,KXo),e(w1,ZXo),e(V,ezo),e(V,A1),e(A1,Xhe),e(Xhe,ozo),e(A1,rzo),e(A1,NV),e(NV,tzo),e(A1,azo),e(V,nzo),e(V,y1),e(y1,zhe),e(zhe,szo),e(y1,lzo),e(y1,jV),e(jV,izo),e(y1,dzo),e(V,czo),e(V,L1),e(L1,Whe),e(Whe,mzo),e(L1,fzo),e(L1,DV),e(DV,gzo),e(L1,hzo),e(V,uzo),e(V,x1),e(x1,Qhe),e(Qhe,pzo),e(x1,_zo),e(x1,GV),e(GV,bzo),e(x1,vzo),e(V,Fzo),e(V,$1),e($1,Hhe),e(Hhe,Tzo),e($1,Mzo),e($1,OV),e(OV,Ezo),e($1,Czo),e(V,wzo),e(V,k1),e(k1,Uhe),e(Uhe,Azo),e(k1,yzo),e(k1,VV),e(VV,Lzo),e(k1,xzo),e(V,$zo),e(V,S1),e(S1,Jhe),e(Jhe,kzo),e(S1,Szo),e(S1,XV),e(XV,Rzo),e(S1,Pzo),e(V,Bzo),e(V,R1),e(R1,Yhe),e(Yhe,Izo),e(R1,qzo),e(R1,zV),e(zV,Nzo),e(R1,jzo),e(V,Dzo),e(V,P1),e(P1,Khe),e(Khe,Gzo),e(P1,Ozo),e(P1,WV),e(WV,Vzo),e(P1,Xzo),e(V,zzo),e(V,B1),e(B1,Zhe),e(Zhe,Wzo),e(B1,Qzo),e(B1,QV),e(QV,Hzo),e(B1,Uzo),e(V,Jzo),e(V,I1),e(I1,eue),e(eue,Yzo),e(I1,Kzo),e(I1,HV),e(HV,Zzo),e(I1,eWo),e(V,oWo),e(V,q1),e(q1,oue),e(oue,rWo),e(q1,tWo),e(q1,UV),e(UV,aWo),e(q1,nWo),e(V,sWo),e(V,N1),e(N1,rue),e(rue,lWo),e(N1,iWo),e(N1,JV),e(JV,dWo),e(N1,cWo),e(V,mWo),e(V,j1),e(j1,tue),e(tue,fWo),e(j1,gWo),e(j1,YV),e(YV,hWo),e(j1,uWo),e(V,pWo),e(V,D1),e(D1,aue),e(aue,_Wo),e(D1,bWo),e(D1,KV),e(KV,vWo),e(D1,FWo),e(V,TWo),e(V,G1),e(G1,nue),e(nue,MWo),e(G1,EWo),e(G1,ZV),e(ZV,CWo),e(G1,wWo),e(V,AWo),e(V,O1),e(O1,sue),e(sue,yWo),e(O1,LWo),e(O1,eX),e(eX,xWo),e(O1,$Wo),e(V,kWo),e(V,V1),e(V1,lue),e(lue,SWo),e(V1,RWo),e(V1,oX),e(oX,PWo),e(V1,BWo),e(V,IWo),e(V,X1),e(X1,iue),e(iue,qWo),e(X1,NWo),e(X1,rX),e(rX,jWo),e(X1,DWo),e(V,GWo),e(V,z1),e(z1,due),e(due,OWo),e(z1,VWo),e(z1,tX),e(tX,XWo),e(z1,zWo),e(V,WWo),e(V,W1),e(W1,cue),e(cue,QWo),e(W1,HWo),e(W1,aX),e(aX,UWo),e(W1,JWo),e(V,YWo),e(V,Q1),e(Q1,mue),e(mue,KWo),e(Q1,ZWo),e(Q1,nX),e(nX,eQo),e(Q1,oQo),e(no,rQo),e(no,H1),e(H1,tQo),e(H1,fue),e(fue,aQo),e(H1,nQo),e(H1,gue),e(gue,sQo),e(no,lQo),M(U1,no,null),b(m,uNe,_),b(m,od,_),e(od,J1),e(J1,hue),M(zL,hue,null),e(od,iQo),e(od,uue),e(uue,dQo),b(m,pNe,_),b(m,No,_),M(WL,No,null),e(No,cQo),e(No,rd),e(rd,mQo),e(rd,sX),e(sX,fQo),e(rd,gQo),e(rd,lX),e(lX,hQo),e(rd,uQo),e(No,pQo),e(No,QL),e(QL,_Qo),e(QL,pue),e(pue,bQo),e(QL,vQo),e(No,FQo),e(No,gt),M(HL,gt,null),e(gt,TQo),e(gt,_ue),e(_ue,MQo),e(gt,EQo),e(gt,td),e(td,CQo),e(td,bue),e(bue,wQo),e(td,AQo),e(td,iX),e(iX,yQo),e(td,LQo),e(gt,xQo),M(Y1,gt,null),e(No,$Qo),e(No,so),M(UL,so,null),e(so,kQo),e(so,vue),e(vue,SQo),e(so,RQo),e(so,Na),e(Na,PQo),e(Na,Fue),e(Fue,BQo),e(Na,IQo),e(Na,Tue),e(Tue,qQo),e(Na,NQo),e(Na,Mue),e(Mue,jQo),e(Na,DQo),e(so,GQo),e(so,Eue),e(Eue,K1),e(K1,Cue),e(Cue,OQo),e(K1,VQo),e(K1,dX),e(dX,XQo),e(K1,zQo),e(so,WQo),e(so,Z1),e(Z1,QQo),e(Z1,wue),e(wue,HQo),e(Z1,UQo),e(Z1,Aue),e(Aue,JQo),e(so,YQo),M(eT,so,null),b(m,_Ne,_),b(m,ad,_),e(ad,oT),e(oT,yue),M(JL,yue,null),e(ad,KQo),e(ad,Lue),e(Lue,ZQo),b(m,bNe,_),b(m,jo,_),M(YL,jo,null),e(jo,eHo),e(jo,nd),e(nd,oHo),e(nd,cX),e(cX,rHo),e(nd,tHo),e(nd,mX),e(mX,aHo),e(nd,nHo),e(jo,sHo),e(jo,KL),e(KL,lHo),e(KL,xue),e(xue,iHo),e(KL,dHo),e(jo,cHo),e(jo,ht),M(ZL,ht,null),e(ht,mHo),e(ht,$ue),e($ue,fHo),e(ht,gHo),e(ht,sd),e(sd,hHo),e(sd,kue),e(kue,uHo),e(sd,pHo),e(sd,fX),e(fX,_Ho),e(sd,bHo),e(ht,vHo),M(rT,ht,null),e(jo,FHo),e(jo,lo),M(e8,lo,null),e(lo,THo),e(lo,Sue),e(Sue,MHo),e(lo,EHo),e(lo,ja),e(ja,CHo),e(ja,Rue),e(Rue,wHo),e(ja,AHo),e(ja,Pue),e(Pue,yHo),e(ja,LHo),e(ja,Bue),e(Bue,xHo),e(ja,$Ho),e(lo,kHo),e(lo,Fe),e(Fe,tT),e(tT,Iue),e(Iue,SHo),e(tT,RHo),e(tT,gX),e(gX,PHo),e(tT,BHo),e(Fe,IHo),e(Fe,aT),e(aT,que),e(que,qHo),e(aT,NHo),e(aT,hX),e(hX,jHo),e(aT,DHo),e(Fe,GHo),e(Fe,nT),e(nT,Nue),e(Nue,OHo),e(nT,VHo),e(nT,uX),e(uX,XHo),e(nT,zHo),e(Fe,WHo),e(Fe,sT),e(sT,jue),e(jue,QHo),e(sT,HHo),e(sT,pX),e(pX,UHo),e(sT,JHo),e(Fe,YHo),e(Fe,Bs),e(Bs,Due),e(Due,KHo),e(Bs,ZHo),e(Bs,_X),e(_X,eUo),e(Bs,oUo),e(Bs,bX),e(bX,rUo),e(Bs,tUo),e(Fe,aUo),e(Fe,lT),e(lT,Gue),e(Gue,nUo),e(lT,sUo),e(lT,vX),e(vX,lUo),e(lT,iUo),e(Fe,dUo),e(Fe,ut),e(ut,Oue),e(Oue,cUo),e(ut,mUo),e(ut,FX),e(FX,fUo),e(ut,gUo),e(ut,TX),e(TX,hUo),e(ut,uUo),e(ut,MX),e(MX,pUo),e(ut,_Uo),e(Fe,bUo),e(Fe,iT),e(iT,Vue),e(Vue,vUo),e(iT,FUo),e(iT,EX),e(EX,TUo),e(iT,MUo),e(Fe,EUo),e(Fe,dT),e(dT,Xue),e(Xue,CUo),e(dT,wUo),e(dT,CX),e(CX,AUo),e(dT,yUo),e(Fe,LUo),e(Fe,cT),e(cT,zue),e(zue,xUo),e(cT,$Uo),e(cT,wX),e(wX,kUo),e(cT,SUo),e(Fe,RUo),e(Fe,mT),e(mT,Wue),e(Wue,PUo),e(mT,BUo),e(mT,AX),e(AX,IUo),e(mT,qUo),e(Fe,NUo),e(Fe,fT),e(fT,Que),e(Que,jUo),e(fT,DUo),e(fT,yX),e(yX,GUo),e(fT,OUo),e(Fe,VUo),e(Fe,gT),e(gT,Hue),e(Hue,XUo),e(gT,zUo),e(gT,LX),e(LX,WUo),e(gT,QUo),e(Fe,HUo),e(Fe,hT),e(hT,Uue),e(Uue,UUo),e(hT,JUo),e(hT,xX),e(xX,YUo),e(hT,KUo),e(lo,ZUo),e(lo,uT),e(uT,eJo),e(uT,Jue),e(Jue,oJo),e(uT,rJo),e(uT,Yue),e(Yue,tJo),e(lo,aJo),M(pT,lo,null),b(m,vNe,_),b(m,ld,_),e(ld,_T),e(_T,Kue),M(o8,Kue,null),e(ld,nJo),e(ld,Zue),e(Zue,sJo),b(m,FNe,_),b(m,Do,_),M(r8,Do,null),e(Do,lJo),e(Do,id),e(id,iJo),e(id,$X),e($X,dJo),e(id,cJo),e(id,kX),e(kX,mJo),e(id,fJo),e(Do,gJo),e(Do,t8),e(t8,hJo),e(t8,epe),e(epe,uJo),e(t8,pJo),e(Do,_Jo),e(Do,pt),M(a8,pt,null),e(pt,bJo),e(pt,ope),e(ope,vJo),e(pt,FJo),e(pt,dd),e(dd,TJo),e(dd,rpe),e(rpe,MJo),e(dd,EJo),e(dd,SX),e(SX,CJo),e(dd,wJo),e(pt,AJo),M(bT,pt,null),e(Do,yJo),e(Do,io),M(n8,io,null),e(io,LJo),e(io,tpe),e(tpe,xJo),e(io,$Jo),e(io,Da),e(Da,kJo),e(Da,ape),e(ape,SJo),e(Da,RJo),e(Da,npe),e(npe,PJo),e(Da,BJo),e(Da,spe),e(spe,IJo),e(Da,qJo),e(io,NJo),e(io,lpe),e(lpe,vT),e(vT,ipe),e(ipe,jJo),e(vT,DJo),e(vT,RX),e(RX,GJo),e(vT,OJo),e(io,VJo),e(io,FT),e(FT,XJo),e(FT,dpe),e(dpe,zJo),e(FT,WJo),e(FT,cpe),e(cpe,QJo),e(io,HJo),M(TT,io,null),b(m,TNe,_),b(m,cd,_),e(cd,MT),e(MT,mpe),M(s8,mpe,null),e(cd,UJo),e(cd,fpe),e(fpe,JJo),b(m,MNe,_),b(m,Go,_),M(l8,Go,null),e(Go,YJo),e(Go,md),e(md,KJo),e(md,PX),e(PX,ZJo),e(md,eYo),e(md,BX),e(BX,oYo),e(md,rYo),e(Go,tYo),e(Go,i8),e(i8,aYo),e(i8,gpe),e(gpe,nYo),e(i8,sYo),e(Go,lYo),e(Go,_t),M(d8,_t,null),e(_t,iYo),e(_t,hpe),e(hpe,dYo),e(_t,cYo),e(_t,fd),e(fd,mYo),e(fd,upe),e(upe,fYo),e(fd,gYo),e(fd,IX),e(IX,hYo),e(fd,uYo),e(_t,pYo),M(ET,_t,null),e(Go,_Yo),e(Go,co),M(c8,co,null),e(co,bYo),e(co,ppe),e(ppe,vYo),e(co,FYo),e(co,Ga),e(Ga,TYo),e(Ga,_pe),e(_pe,MYo),e(Ga,EYo),e(Ga,bpe),e(bpe,CYo),e(Ga,wYo),e(Ga,vpe),e(vpe,AYo),e(Ga,yYo),e(co,LYo),e(co,ke),e(ke,CT),e(CT,Fpe),e(Fpe,xYo),e(CT,$Yo),e(CT,qX),e(qX,kYo),e(CT,SYo),e(ke,RYo),e(ke,wT),e(wT,Tpe),e(Tpe,PYo),e(wT,BYo),e(wT,NX),e(NX,IYo),e(wT,qYo),e(ke,NYo),e(ke,AT),e(AT,Mpe),e(Mpe,jYo),e(AT,DYo),e(AT,jX),e(jX,GYo),e(AT,OYo),e(ke,VYo),e(ke,yT),e(yT,Epe),e(Epe,XYo),e(yT,zYo),e(yT,DX),e(DX,WYo),e(yT,QYo),e(ke,HYo),e(ke,LT),e(LT,Cpe),e(Cpe,UYo),e(LT,JYo),e(LT,GX),e(GX,YYo),e(LT,KYo),e(ke,ZYo),e(ke,xT),e(xT,wpe),e(wpe,eKo),e(xT,oKo),e(xT,OX),e(OX,rKo),e(xT,tKo),e(ke,aKo),e(ke,$T),e($T,Ape),e(Ape,nKo),e($T,sKo),e($T,VX),e(VX,lKo),e($T,iKo),e(ke,dKo),e(ke,kT),e(kT,ype),e(ype,cKo),e(kT,mKo),e(kT,XX),e(XX,fKo),e(kT,gKo),e(ke,hKo),e(ke,ST),e(ST,Lpe),e(Lpe,uKo),e(ST,pKo),e(ST,zX),e(zX,_Ko),e(ST,bKo),e(co,vKo),e(co,RT),e(RT,FKo),e(RT,xpe),e(xpe,TKo),e(RT,MKo),e(RT,$pe),e($pe,EKo),e(co,CKo),M(PT,co,null),b(m,ENe,_),b(m,gd,_),e(gd,BT),e(BT,kpe),M(m8,kpe,null),e(gd,wKo),e(gd,Spe),e(Spe,AKo),b(m,CNe,_),b(m,Oo,_),M(f8,Oo,null),e(Oo,yKo),e(Oo,hd),e(hd,LKo),e(hd,WX),e(WX,xKo),e(hd,$Ko),e(hd,QX),e(QX,kKo),e(hd,SKo),e(Oo,RKo),e(Oo,g8),e(g8,PKo),e(g8,Rpe),e(Rpe,BKo),e(g8,IKo),e(Oo,qKo),e(Oo,bt),M(h8,bt,null),e(bt,NKo),e(bt,Ppe),e(Ppe,jKo),e(bt,DKo),e(bt,ud),e(ud,GKo),e(ud,Bpe),e(Bpe,OKo),e(ud,VKo),e(ud,HX),e(HX,XKo),e(ud,zKo),e(bt,WKo),M(IT,bt,null),e(Oo,QKo),e(Oo,mo),M(u8,mo,null),e(mo,HKo),e(mo,Ipe),e(Ipe,UKo),e(mo,JKo),e(mo,Oa),e(Oa,YKo),e(Oa,qpe),e(qpe,KKo),e(Oa,ZKo),e(Oa,Npe),e(Npe,eZo),e(Oa,oZo),e(Oa,jpe),e(jpe,rZo),e(Oa,tZo),e(mo,aZo),e(mo,Kr),e(Kr,qT),e(qT,Dpe),e(Dpe,nZo),e(qT,sZo),e(qT,UX),e(UX,lZo),e(qT,iZo),e(Kr,dZo),e(Kr,NT),e(NT,Gpe),e(Gpe,cZo),e(NT,mZo),e(NT,JX),e(JX,fZo),e(NT,gZo),e(Kr,hZo),e(Kr,jT),e(jT,Ope),e(Ope,uZo),e(jT,pZo),e(jT,YX),e(YX,_Zo),e(jT,bZo),e(Kr,vZo),e(Kr,DT),e(DT,Vpe),e(Vpe,FZo),e(DT,TZo),e(DT,KX),e(KX,MZo),e(DT,EZo),e(Kr,CZo),e(Kr,GT),e(GT,Xpe),e(Xpe,wZo),e(GT,AZo),e(GT,ZX),e(ZX,yZo),e(GT,LZo),e(mo,xZo),e(mo,OT),e(OT,$Zo),e(OT,zpe),e(zpe,kZo),e(OT,SZo),e(OT,Wpe),e(Wpe,RZo),e(mo,PZo),M(VT,mo,null),b(m,wNe,_),b(m,pd,_),e(pd,XT),e(XT,Qpe),M(p8,Qpe,null),e(pd,BZo),e(pd,Hpe),e(Hpe,IZo),b(m,ANe,_),b(m,Vo,_),M(_8,Vo,null),e(Vo,qZo),e(Vo,_d),e(_d,NZo),e(_d,ez),e(ez,jZo),e(_d,DZo),e(_d,oz),e(oz,GZo),e(_d,OZo),e(Vo,VZo),e(Vo,b8),e(b8,XZo),e(b8,Upe),e(Upe,zZo),e(b8,WZo),e(Vo,QZo),e(Vo,vt),M(v8,vt,null),e(vt,HZo),e(vt,Jpe),e(Jpe,UZo),e(vt,JZo),e(vt,bd),e(bd,YZo),e(bd,Ype),e(Ype,KZo),e(bd,ZZo),e(bd,rz),e(rz,eer),e(bd,oer),e(vt,rer),M(zT,vt,null),e(Vo,ter),e(Vo,fo),M(F8,fo,null),e(fo,aer),e(fo,Kpe),e(Kpe,ner),e(fo,ser),e(fo,Va),e(Va,ler),e(Va,Zpe),e(Zpe,ier),e(Va,der),e(Va,e_e),e(e_e,cer),e(Va,mer),e(Va,o_e),e(o_e,fer),e(Va,ger),e(fo,her),e(fo,Se),e(Se,WT),e(WT,r_e),e(r_e,uer),e(WT,per),e(WT,tz),e(tz,_er),e(WT,ber),e(Se,ver),e(Se,QT),e(QT,t_e),e(t_e,Fer),e(QT,Ter),e(QT,az),e(az,Mer),e(QT,Eer),e(Se,Cer),e(Se,HT),e(HT,a_e),e(a_e,wer),e(HT,Aer),e(HT,nz),e(nz,yer),e(HT,Ler),e(Se,xer),e(Se,UT),e(UT,n_e),e(n_e,$er),e(UT,ker),e(UT,sz),e(sz,Ser),e(UT,Rer),e(Se,Per),e(Se,JT),e(JT,s_e),e(s_e,Ber),e(JT,Ier),e(JT,lz),e(lz,qer),e(JT,Ner),e(Se,jer),e(Se,YT),e(YT,l_e),e(l_e,Der),e(YT,Ger),e(YT,iz),e(iz,Oer),e(YT,Ver),e(Se,Xer),e(Se,KT),e(KT,i_e),e(i_e,zer),e(KT,Wer),e(KT,dz),e(dz,Qer),e(KT,Her),e(Se,Uer),e(Se,ZT),e(ZT,d_e),e(d_e,Jer),e(ZT,Yer),e(ZT,cz),e(cz,Ker),e(ZT,Zer),e(Se,eor),e(Se,eM),e(eM,c_e),e(c_e,oor),e(eM,ror),e(eM,mz),e(mz,tor),e(eM,aor),e(fo,nor),e(fo,oM),e(oM,sor),e(oM,m_e),e(m_e,lor),e(oM,ior),e(oM,f_e),e(f_e,dor),e(fo,cor),M(rM,fo,null),b(m,yNe,_),b(m,vd,_),e(vd,tM),e(tM,g_e),M(T8,g_e,null),e(vd,mor),e(vd,h_e),e(h_e,gor),b(m,LNe,_),b(m,Xo,_),M(M8,Xo,null),e(Xo,hor),e(Xo,Fd),e(Fd,uor),e(Fd,fz),e(fz,por),e(Fd,_or),e(Fd,gz),e(gz,bor),e(Fd,vor),e(Xo,For),e(Xo,E8),e(E8,Tor),e(E8,u_e),e(u_e,Mor),e(E8,Eor),e(Xo,Cor),e(Xo,Ft),M(C8,Ft,null),e(Ft,wor),e(Ft,p_e),e(p_e,Aor),e(Ft,yor),e(Ft,Td),e(Td,Lor),e(Td,__e),e(__e,xor),e(Td,$or),e(Td,hz),e(hz,kor),e(Td,Sor),e(Ft,Ror),M(aM,Ft,null),e(Xo,Por),e(Xo,go),M(w8,go,null),e(go,Bor),e(go,b_e),e(b_e,Ior),e(go,qor),e(go,Xa),e(Xa,Nor),e(Xa,v_e),e(v_e,jor),e(Xa,Dor),e(Xa,F_e),e(F_e,Gor),e(Xa,Oor),e(Xa,T_e),e(T_e,Vor),e(Xa,Xor),e(go,zor),e(go,A8),e(A8,nM),e(nM,M_e),e(M_e,Wor),e(nM,Qor),e(nM,uz),e(uz,Hor),e(nM,Uor),e(A8,Jor),e(A8,sM),e(sM,E_e),e(E_e,Yor),e(sM,Kor),e(sM,pz),e(pz,Zor),e(sM,err),e(go,orr),e(go,lM),e(lM,rrr),e(lM,C_e),e(C_e,trr),e(lM,arr),e(lM,w_e),e(w_e,nrr),e(go,srr),M(iM,go,null),b(m,xNe,_),b(m,Md,_),e(Md,dM),e(dM,A_e),M(y8,A_e,null),e(Md,lrr),e(Md,y_e),e(y_e,irr),b(m,$Ne,_),b(m,zo,_),M(L8,zo,null),e(zo,drr),e(zo,Ed),e(Ed,crr),e(Ed,_z),e(_z,mrr),e(Ed,frr),e(Ed,bz),e(bz,grr),e(Ed,hrr),e(zo,urr),e(zo,x8),e(x8,prr),e(x8,L_e),e(L_e,_rr),e(x8,brr),e(zo,vrr),e(zo,Tt),M($8,Tt,null),e(Tt,Frr),e(Tt,x_e),e(x_e,Trr),e(Tt,Mrr),e(Tt,Cd),e(Cd,Err),e(Cd,$_e),e($_e,Crr),e(Cd,wrr),e(Cd,vz),e(vz,Arr),e(Cd,yrr),e(Tt,Lrr),M(cM,Tt,null),e(zo,xrr),e(zo,ho),M(k8,ho,null),e(ho,$rr),e(ho,k_e),e(k_e,krr),e(ho,Srr),e(ho,za),e(za,Rrr),e(za,S_e),e(S_e,Prr),e(za,Brr),e(za,R_e),e(R_e,Irr),e(za,qrr),e(za,P_e),e(P_e,Nrr),e(za,jrr),e(ho,Drr),e(ho,Zr),e(Zr,mM),e(mM,B_e),e(B_e,Grr),e(mM,Orr),e(mM,Fz),e(Fz,Vrr),e(mM,Xrr),e(Zr,zrr),e(Zr,fM),e(fM,I_e),e(I_e,Wrr),e(fM,Qrr),e(fM,Tz),e(Tz,Hrr),e(fM,Urr),e(Zr,Jrr),e(Zr,gM),e(gM,q_e),e(q_e,Yrr),e(gM,Krr),e(gM,Mz),e(Mz,Zrr),e(gM,etr),e(Zr,otr),e(Zr,hM),e(hM,N_e),e(N_e,rtr),e(hM,ttr),e(hM,Ez),e(Ez,atr),e(hM,ntr),e(Zr,str),e(Zr,uM),e(uM,j_e),e(j_e,ltr),e(uM,itr),e(uM,Cz),e(Cz,dtr),e(uM,ctr),e(ho,mtr),e(ho,pM),e(pM,ftr),e(pM,D_e),e(D_e,gtr),e(pM,htr),e(pM,G_e),e(G_e,utr),e(ho,ptr),M(_M,ho,null),b(m,kNe,_),b(m,wd,_),e(wd,bM),e(bM,O_e),M(S8,O_e,null),e(wd,_tr),e(wd,V_e),e(V_e,btr),b(m,SNe,_),b(m,Wo,_),M(R8,Wo,null),e(Wo,vtr),e(Wo,Ad),e(Ad,Ftr),e(Ad,wz),e(wz,Ttr),e(Ad,Mtr),e(Ad,Az),e(Az,Etr),e(Ad,Ctr),e(Wo,wtr),e(Wo,P8),e(P8,Atr),e(P8,X_e),e(X_e,ytr),e(P8,Ltr),e(Wo,xtr),e(Wo,Mt),M(B8,Mt,null),e(Mt,$tr),e(Mt,z_e),e(z_e,ktr),e(Mt,Str),e(Mt,yd),e(yd,Rtr),e(yd,W_e),e(W_e,Ptr),e(yd,Btr),e(yd,yz),e(yz,Itr),e(yd,qtr),e(Mt,Ntr),M(vM,Mt,null),e(Wo,jtr),e(Wo,uo),M(I8,uo,null),e(uo,Dtr),e(uo,Q_e),e(Q_e,Gtr),e(uo,Otr),e(uo,Wa),e(Wa,Vtr),e(Wa,H_e),e(H_e,Xtr),e(Wa,ztr),e(Wa,U_e),e(U_e,Wtr),e(Wa,Qtr),e(Wa,J_e),e(J_e,Htr),e(Wa,Utr),e(uo,Jtr),e(uo,Ld),e(Ld,FM),e(FM,Y_e),e(Y_e,Ytr),e(FM,Ktr),e(FM,Lz),e(Lz,Ztr),e(FM,ear),e(Ld,oar),e(Ld,TM),e(TM,K_e),e(K_e,rar),e(TM,tar),e(TM,xz),e(xz,aar),e(TM,nar),e(Ld,sar),e(Ld,MM),e(MM,Z_e),e(Z_e,lar),e(MM,iar),e(MM,$z),e($z,dar),e(MM,car),e(uo,mar),e(uo,EM),e(EM,far),e(EM,ebe),e(ebe,gar),e(EM,har),e(EM,obe),e(obe,uar),e(uo,par),M(CM,uo,null),b(m,RNe,_),b(m,xd,_),e(xd,wM),e(wM,rbe),M(q8,rbe,null),e(xd,_ar),e(xd,tbe),e(tbe,bar),b(m,PNe,_),b(m,Qo,_),M(N8,Qo,null),e(Qo,Far),e(Qo,$d),e($d,Tar),e($d,kz),e(kz,Mar),e($d,Ear),e($d,Sz),e(Sz,Car),e($d,war),e(Qo,Aar),e(Qo,j8),e(j8,yar),e(j8,abe),e(abe,Lar),e(j8,xar),e(Qo,$ar),e(Qo,Et),M(D8,Et,null),e(Et,kar),e(Et,nbe),e(nbe,Sar),e(Et,Rar),e(Et,kd),e(kd,Par),e(kd,sbe),e(sbe,Bar),e(kd,Iar),e(kd,Rz),e(Rz,qar),e(kd,Nar),e(Et,jar),M(AM,Et,null),e(Qo,Dar),e(Qo,po),M(G8,po,null),e(po,Gar),e(po,lbe),e(lbe,Oar),e(po,Var),e(po,Qa),e(Qa,Xar),e(Qa,ibe),e(ibe,zar),e(Qa,War),e(Qa,dbe),e(dbe,Qar),e(Qa,Har),e(Qa,cbe),e(cbe,Uar),e(Qa,Jar),e(po,Yar),e(po,O8),e(O8,yM),e(yM,mbe),e(mbe,Kar),e(yM,Zar),e(yM,Pz),e(Pz,enr),e(yM,onr),e(O8,rnr),e(O8,LM),e(LM,fbe),e(fbe,tnr),e(LM,anr),e(LM,Bz),e(Bz,nnr),e(LM,snr),e(po,lnr),e(po,xM),e(xM,inr),e(xM,gbe),e(gbe,dnr),e(xM,cnr),e(xM,hbe),e(hbe,mnr),e(po,fnr),M($M,po,null),b(m,BNe,_),b(m,Sd,_),e(Sd,kM),e(kM,ube),M(V8,ube,null),e(Sd,gnr),e(Sd,pbe),e(pbe,hnr),b(m,INe,_),b(m,Ho,_),M(X8,Ho,null),e(Ho,unr),e(Ho,Rd),e(Rd,pnr),e(Rd,Iz),e(Iz,_nr),e(Rd,bnr),e(Rd,qz),e(qz,vnr),e(Rd,Fnr),e(Ho,Tnr),e(Ho,z8),e(z8,Mnr),e(z8,_be),e(_be,Enr),e(z8,Cnr),e(Ho,wnr),e(Ho,Ct),M(W8,Ct,null),e(Ct,Anr),e(Ct,bbe),e(bbe,ynr),e(Ct,Lnr),e(Ct,Pd),e(Pd,xnr),e(Pd,vbe),e(vbe,$nr),e(Pd,knr),e(Pd,Nz),e(Nz,Snr),e(Pd,Rnr),e(Ct,Pnr),M(SM,Ct,null),e(Ho,Bnr),e(Ho,_o),M(Q8,_o,null),e(_o,Inr),e(_o,Fbe),e(Fbe,qnr),e(_o,Nnr),e(_o,Ha),e(Ha,jnr),e(Ha,Tbe),e(Tbe,Dnr),e(Ha,Gnr),e(Ha,Mbe),e(Mbe,Onr),e(Ha,Vnr),e(Ha,Ebe),e(Ebe,Xnr),e(Ha,znr),e(_o,Wnr),e(_o,Cbe),e(Cbe,RM),e(RM,wbe),e(wbe,Qnr),e(RM,Hnr),e(RM,jz),e(jz,Unr),e(RM,Jnr),e(_o,Ynr),e(_o,PM),e(PM,Knr),e(PM,Abe),e(Abe,Znr),e(PM,esr),e(PM,ybe),e(ybe,osr),e(_o,rsr),M(BM,_o,null),b(m,qNe,_),b(m,Bd,_),e(Bd,IM),e(IM,Lbe),M(H8,Lbe,null),e(Bd,tsr),e(Bd,xbe),e(xbe,asr),b(m,NNe,_),b(m,Uo,_),M(U8,Uo,null),e(Uo,nsr),e(Uo,Id),e(Id,ssr),e(Id,Dz),e(Dz,lsr),e(Id,isr),e(Id,Gz),e(Gz,dsr),e(Id,csr),e(Uo,msr),e(Uo,J8),e(J8,fsr),e(J8,$be),e($be,gsr),e(J8,hsr),e(Uo,usr),e(Uo,wt),M(Y8,wt,null),e(wt,psr),e(wt,kbe),e(kbe,_sr),e(wt,bsr),e(wt,qd),e(qd,vsr),e(qd,Sbe),e(Sbe,Fsr),e(qd,Tsr),e(qd,Oz),e(Oz,Msr),e(qd,Esr),e(wt,Csr),M(qM,wt,null),e(Uo,wsr),e(Uo,bo),M(K8,bo,null),e(bo,Asr),e(bo,Rbe),e(Rbe,ysr),e(bo,Lsr),e(bo,Ua),e(Ua,xsr),e(Ua,Pbe),e(Pbe,$sr),e(Ua,ksr),e(Ua,Bbe),e(Bbe,Ssr),e(Ua,Rsr),e(Ua,Ibe),e(Ibe,Psr),e(Ua,Bsr),e(bo,Isr),e(bo,Ja),e(Ja,NM),e(NM,qbe),e(qbe,qsr),e(NM,Nsr),e(NM,Vz),e(Vz,jsr),e(NM,Dsr),e(Ja,Gsr),e(Ja,jM),e(jM,Nbe),e(Nbe,Osr),e(jM,Vsr),e(jM,Xz),e(Xz,Xsr),e(jM,zsr),e(Ja,Wsr),e(Ja,DM),e(DM,jbe),e(jbe,Qsr),e(DM,Hsr),e(DM,zz),e(zz,Usr),e(DM,Jsr),e(Ja,Ysr),e(Ja,GM),e(GM,Dbe),e(Dbe,Ksr),e(GM,Zsr),e(GM,Wz),e(Wz,elr),e(GM,olr),e(bo,rlr),e(bo,OM),e(OM,tlr),e(OM,Gbe),e(Gbe,alr),e(OM,nlr),e(OM,Obe),e(Obe,slr),e(bo,llr),M(VM,bo,null),b(m,jNe,_),b(m,Nd,_),e(Nd,XM),e(XM,Vbe),M(Z8,Vbe,null),e(Nd,ilr),e(Nd,Xbe),e(Xbe,dlr),b(m,DNe,_),b(m,Jo,_),M(e7,Jo,null),e(Jo,clr),e(Jo,jd),e(jd,mlr),e(jd,Qz),e(Qz,flr),e(jd,glr),e(jd,Hz),e(Hz,hlr),e(jd,ulr),e(Jo,plr),e(Jo,o7),e(o7,_lr),e(o7,zbe),e(zbe,blr),e(o7,vlr),e(Jo,Flr),e(Jo,At),M(r7,At,null),e(At,Tlr),e(At,Wbe),e(Wbe,Mlr),e(At,Elr),e(At,Dd),e(Dd,Clr),e(Dd,Qbe),e(Qbe,wlr),e(Dd,Alr),e(Dd,Uz),e(Uz,ylr),e(Dd,Llr),e(At,xlr),M(zM,At,null),e(Jo,$lr),e(Jo,vo),M(t7,vo,null),e(vo,klr),e(vo,Hbe),e(Hbe,Slr),e(vo,Rlr),e(vo,Ya),e(Ya,Plr),e(Ya,Ube),e(Ube,Blr),e(Ya,Ilr),e(Ya,Jbe),e(Jbe,qlr),e(Ya,Nlr),e(Ya,Ybe),e(Ybe,jlr),e(Ya,Dlr),e(vo,Glr),e(vo,Kbe),e(Kbe,WM),e(WM,Zbe),e(Zbe,Olr),e(WM,Vlr),e(WM,Jz),e(Jz,Xlr),e(WM,zlr),e(vo,Wlr),e(vo,QM),e(QM,Qlr),e(QM,e2e),e(e2e,Hlr),e(QM,Ulr),e(QM,o2e),e(o2e,Jlr),e(vo,Ylr),M(HM,vo,null),b(m,GNe,_),b(m,Gd,_),e(Gd,UM),e(UM,r2e),M(a7,r2e,null),e(Gd,Klr),e(Gd,t2e),e(t2e,Zlr),b(m,ONe,_),b(m,Yo,_),M(n7,Yo,null),e(Yo,eir),e(Yo,Od),e(Od,oir),e(Od,Yz),e(Yz,rir),e(Od,tir),e(Od,Kz),e(Kz,air),e(Od,nir),e(Yo,sir),e(Yo,s7),e(s7,lir),e(s7,a2e),e(a2e,iir),e(s7,dir),e(Yo,cir),e(Yo,yt),M(l7,yt,null),e(yt,mir),e(yt,n2e),e(n2e,fir),e(yt,gir),e(yt,Vd),e(Vd,hir),e(Vd,s2e),e(s2e,uir),e(Vd,pir),e(Vd,Zz),e(Zz,_ir),e(Vd,bir),e(yt,vir),M(JM,yt,null),e(Yo,Fir),e(Yo,wr),M(i7,wr,null),e(wr,Tir),e(wr,l2e),e(l2e,Mir),e(wr,Eir),e(wr,Ka),e(Ka,Cir),e(Ka,i2e),e(i2e,wir),e(Ka,Air),e(Ka,d2e),e(d2e,yir),e(Ka,Lir),e(Ka,c2e),e(c2e,xir),e(Ka,$ir),e(wr,kir),e(wr,N),e(N,YM),e(YM,m2e),e(m2e,Sir),e(YM,Rir),e(YM,eW),e(eW,Pir),e(YM,Bir),e(N,Iir),e(N,KM),e(KM,f2e),e(f2e,qir),e(KM,Nir),e(KM,oW),e(oW,jir),e(KM,Dir),e(N,Gir),e(N,ZM),e(ZM,g2e),e(g2e,Oir),e(ZM,Vir),e(ZM,rW),e(rW,Xir),e(ZM,zir),e(N,Wir),e(N,e4),e(e4,h2e),e(h2e,Qir),e(e4,Hir),e(e4,tW),e(tW,Uir),e(e4,Jir),e(N,Yir),e(N,o4),e(o4,u2e),e(u2e,Kir),e(o4,Zir),e(o4,aW),e(aW,edr),e(o4,odr),e(N,rdr),e(N,r4),e(r4,p2e),e(p2e,tdr),e(r4,adr),e(r4,nW),e(nW,ndr),e(r4,sdr),e(N,ldr),e(N,t4),e(t4,_2e),e(_2e,idr),e(t4,ddr),e(t4,sW),e(sW,cdr),e(t4,mdr),e(N,fdr),e(N,a4),e(a4,b2e),e(b2e,gdr),e(a4,hdr),e(a4,lW),e(lW,udr),e(a4,pdr),e(N,_dr),e(N,n4),e(n4,v2e),e(v2e,bdr),e(n4,vdr),e(n4,iW),e(iW,Fdr),e(n4,Tdr),e(N,Mdr),e(N,s4),e(s4,F2e),e(F2e,Edr),e(s4,Cdr),e(s4,dW),e(dW,wdr),e(s4,Adr),e(N,ydr),e(N,l4),e(l4,T2e),e(T2e,Ldr),e(l4,xdr),e(l4,cW),e(cW,$dr),e(l4,kdr),e(N,Sdr),e(N,i4),e(i4,M2e),e(M2e,Rdr),e(i4,Pdr),e(i4,mW),e(mW,Bdr),e(i4,Idr),e(N,qdr),e(N,d4),e(d4,E2e),e(E2e,Ndr),e(d4,jdr),e(d4,fW),e(fW,Ddr),e(d4,Gdr),e(N,Odr),e(N,c4),e(c4,C2e),e(C2e,Vdr),e(c4,Xdr),e(c4,gW),e(gW,zdr),e(c4,Wdr),e(N,Qdr),e(N,m4),e(m4,w2e),e(w2e,Hdr),e(m4,Udr),e(m4,hW),e(hW,Jdr),e(m4,Ydr),e(N,Kdr),e(N,f4),e(f4,A2e),e(A2e,Zdr),e(f4,ecr),e(f4,uW),e(uW,ocr),e(f4,rcr),e(N,tcr),e(N,g4),e(g4,y2e),e(y2e,acr),e(g4,ncr),e(g4,pW),e(pW,scr),e(g4,lcr),e(N,icr),e(N,Is),e(Is,L2e),e(L2e,dcr),e(Is,ccr),e(Is,_W),e(_W,mcr),e(Is,fcr),e(Is,bW),e(bW,gcr),e(Is,hcr),e(N,ucr),e(N,h4),e(h4,x2e),e(x2e,pcr),e(h4,_cr),e(h4,vW),e(vW,bcr),e(h4,vcr),e(N,Fcr),e(N,u4),e(u4,$2e),e($2e,Tcr),e(u4,Mcr),e(u4,FW),e(FW,Ecr),e(u4,Ccr),e(N,wcr),e(N,p4),e(p4,k2e),e(k2e,Acr),e(p4,ycr),e(p4,TW),e(TW,Lcr),e(p4,xcr),e(N,$cr),e(N,_4),e(_4,S2e),e(S2e,kcr),e(_4,Scr),e(_4,MW),e(MW,Rcr),e(_4,Pcr),e(N,Bcr),e(N,b4),e(b4,R2e),e(R2e,Icr),e(b4,qcr),e(b4,EW),e(EW,Ncr),e(b4,jcr),e(N,Dcr),e(N,v4),e(v4,P2e),e(P2e,Gcr),e(v4,Ocr),e(v4,CW),e(CW,Vcr),e(v4,Xcr),e(N,zcr),e(N,F4),e(F4,B2e),e(B2e,Wcr),e(F4,Qcr),e(F4,wW),e(wW,Hcr),e(F4,Ucr),e(N,Jcr),e(N,T4),e(T4,I2e),e(I2e,Ycr),e(T4,Kcr),e(T4,AW),e(AW,Zcr),e(T4,emr),e(N,omr),e(N,M4),e(M4,q2e),e(q2e,rmr),e(M4,tmr),e(M4,yW),e(yW,amr),e(M4,nmr),e(N,smr),e(N,E4),e(E4,N2e),e(N2e,lmr),e(E4,imr),e(E4,LW),e(LW,dmr),e(E4,cmr),e(N,mmr),e(N,C4),e(C4,j2e),e(j2e,fmr),e(C4,gmr),e(C4,xW),e(xW,hmr),e(C4,umr),e(N,pmr),e(N,w4),e(w4,D2e),e(D2e,_mr),e(w4,bmr),e(w4,$W),e($W,vmr),e(w4,Fmr),e(N,Tmr),e(N,A4),e(A4,G2e),e(G2e,Mmr),e(A4,Emr),e(A4,kW),e(kW,Cmr),e(A4,wmr),e(N,Amr),e(N,y4),e(y4,O2e),e(O2e,ymr),e(y4,Lmr),e(y4,SW),e(SW,xmr),e(y4,$mr),e(N,kmr),e(N,L4),e(L4,V2e),e(V2e,Smr),e(L4,Rmr),e(L4,RW),e(RW,Pmr),e(L4,Bmr),e(N,Imr),e(N,x4),e(x4,X2e),e(X2e,qmr),e(x4,Nmr),e(x4,PW),e(PW,jmr),e(x4,Dmr),e(N,Gmr),e(N,$4),e($4,z2e),e(z2e,Omr),e($4,Vmr),e($4,BW),e(BW,Xmr),e($4,zmr),e(N,Wmr),e(N,k4),e(k4,W2e),e(W2e,Qmr),e(k4,Hmr),e(k4,IW),e(IW,Umr),e(k4,Jmr),e(N,Ymr),e(N,S4),e(S4,Q2e),e(Q2e,Kmr),e(S4,Zmr),e(S4,qW),e(qW,efr),e(S4,ofr),e(N,rfr),e(N,R4),e(R4,H2e),e(H2e,tfr),e(R4,afr),e(R4,NW),e(NW,nfr),e(R4,sfr),e(N,lfr),e(N,P4),e(P4,U2e),e(U2e,ifr),e(P4,dfr),e(P4,jW),e(jW,cfr),e(P4,mfr),e(N,ffr),e(N,B4),e(B4,J2e),e(J2e,gfr),e(B4,hfr),e(B4,DW),e(DW,ufr),e(B4,pfr),e(N,_fr),e(N,I4),e(I4,Y2e),e(Y2e,bfr),e(I4,vfr),e(I4,GW),e(GW,Ffr),e(I4,Tfr),e(N,Mfr),e(N,q4),e(q4,K2e),e(K2e,Efr),e(q4,Cfr),e(q4,OW),e(OW,wfr),e(q4,Afr),e(N,yfr),e(N,N4),e(N4,Z2e),e(Z2e,Lfr),e(N4,xfr),e(N4,VW),e(VW,$fr),e(N4,kfr),e(N,Sfr),e(N,j4),e(j4,eve),e(eve,Rfr),e(j4,Pfr),e(j4,XW),e(XW,Bfr),e(j4,Ifr),e(N,qfr),e(N,D4),e(D4,ove),e(ove,Nfr),e(D4,jfr),e(D4,zW),e(zW,Dfr),e(D4,Gfr),e(N,Ofr),e(N,G4),e(G4,rve),e(rve,Vfr),e(G4,Xfr),e(G4,WW),e(WW,zfr),e(G4,Wfr),e(wr,Qfr),M(O4,wr,null),b(m,VNe,_),b(m,Xd,_),e(Xd,V4),e(V4,tve),M(d7,tve,null),e(Xd,Hfr),e(Xd,ave),e(ave,Ufr),b(m,XNe,_),b(m,Ko,_),M(c7,Ko,null),e(Ko,Jfr),e(Ko,zd),e(zd,Yfr),e(zd,QW),e(QW,Kfr),e(zd,Zfr),e(zd,HW),e(HW,egr),e(zd,ogr),e(Ko,rgr),e(Ko,m7),e(m7,tgr),e(m7,nve),e(nve,agr),e(m7,ngr),e(Ko,sgr),e(Ko,Lt),M(f7,Lt,null),e(Lt,lgr),e(Lt,sve),e(sve,igr),e(Lt,dgr),e(Lt,Wd),e(Wd,cgr),e(Wd,lve),e(lve,mgr),e(Wd,fgr),e(Wd,UW),e(UW,ggr),e(Wd,hgr),e(Lt,ugr),M(X4,Lt,null),e(Ko,pgr),e(Ko,Ar),M(g7,Ar,null),e(Ar,_gr),e(Ar,ive),e(ive,bgr),e(Ar,vgr),e(Ar,Za),e(Za,Fgr),e(Za,dve),e(dve,Tgr),e(Za,Mgr),e(Za,cve),e(cve,Egr),e(Za,Cgr),e(Za,mve),e(mve,wgr),e(Za,Agr),e(Ar,ygr),e(Ar,se),e(se,z4),e(z4,fve),e(fve,Lgr),e(z4,xgr),e(z4,JW),e(JW,$gr),e(z4,kgr),e(se,Sgr),e(se,W4),e(W4,gve),e(gve,Rgr),e(W4,Pgr),e(W4,YW),e(YW,Bgr),e(W4,Igr),e(se,qgr),e(se,Q4),e(Q4,hve),e(hve,Ngr),e(Q4,jgr),e(Q4,KW),e(KW,Dgr),e(Q4,Ggr),e(se,Ogr),e(se,H4),e(H4,uve),e(uve,Vgr),e(H4,Xgr),e(H4,ZW),e(ZW,zgr),e(H4,Wgr),e(se,Qgr),e(se,U4),e(U4,pve),e(pve,Hgr),e(U4,Ugr),e(U4,eQ),e(eQ,Jgr),e(U4,Ygr),e(se,Kgr),e(se,J4),e(J4,_ve),e(_ve,Zgr),e(J4,ehr),e(J4,oQ),e(oQ,ohr),e(J4,rhr),e(se,thr),e(se,Y4),e(Y4,bve),e(bve,ahr),e(Y4,nhr),e(Y4,rQ),e(rQ,shr),e(Y4,lhr),e(se,ihr),e(se,K4),e(K4,vve),e(vve,dhr),e(K4,chr),e(K4,tQ),e(tQ,mhr),e(K4,fhr),e(se,ghr),e(se,Z4),e(Z4,Fve),e(Fve,hhr),e(Z4,uhr),e(Z4,aQ),e(aQ,phr),e(Z4,_hr),e(se,bhr),e(se,eE),e(eE,Tve),e(Tve,vhr),e(eE,Fhr),e(eE,nQ),e(nQ,Thr),e(eE,Mhr),e(se,Ehr),e(se,oE),e(oE,Mve),e(Mve,Chr),e(oE,whr),e(oE,sQ),e(sQ,Ahr),e(oE,yhr),e(se,Lhr),e(se,rE),e(rE,Eve),e(Eve,xhr),e(rE,$hr),e(rE,lQ),e(lQ,khr),e(rE,Shr),e(se,Rhr),e(se,tE),e(tE,Cve),e(Cve,Phr),e(tE,Bhr),e(tE,iQ),e(iQ,Ihr),e(tE,qhr),e(se,Nhr),e(se,aE),e(aE,wve),e(wve,jhr),e(aE,Dhr),e(aE,dQ),e(dQ,Ghr),e(aE,Ohr),e(se,Vhr),e(se,nE),e(nE,Ave),e(Ave,Xhr),e(nE,zhr),e(nE,cQ),e(cQ,Whr),e(nE,Qhr),e(se,Hhr),e(se,sE),e(sE,yve),e(yve,Uhr),e(sE,Jhr),e(sE,mQ),e(mQ,Yhr),e(sE,Khr),e(se,Zhr),e(se,lE),e(lE,Lve),e(Lve,eur),e(lE,our),e(lE,fQ),e(fQ,rur),e(lE,tur),e(se,aur),e(se,iE),e(iE,xve),e(xve,nur),e(iE,sur),e(iE,gQ),e(gQ,lur),e(iE,iur),e(se,dur),e(se,dE),e(dE,$ve),e($ve,cur),e(dE,mur),e(dE,hQ),e(hQ,fur),e(dE,gur),e(se,hur),e(se,cE),e(cE,kve),e(kve,uur),e(cE,pur),e(cE,uQ),e(uQ,_ur),e(cE,bur),e(se,vur),e(se,mE),e(mE,Sve),e(Sve,Fur),e(mE,Tur),e(mE,pQ),e(pQ,Mur),e(mE,Eur),e(se,Cur),e(se,fE),e(fE,Rve),e(Rve,wur),e(fE,Aur),e(fE,_Q),e(_Q,yur),e(fE,Lur),e(se,xur),e(se,gE),e(gE,Pve),e(Pve,$ur),e(gE,kur),e(gE,bQ),e(bQ,Sur),e(gE,Rur),e(Ar,Pur),M(hE,Ar,null),b(m,zNe,_),b(m,Qd,_),e(Qd,uE),e(uE,Bve),M(h7,Bve,null),e(Qd,Bur),e(Qd,Ive),e(Ive,Iur),b(m,WNe,_),b(m,Zo,_),M(u7,Zo,null),e(Zo,qur),e(Zo,Hd),e(Hd,Nur),e(Hd,vQ),e(vQ,jur),e(Hd,Dur),e(Hd,FQ),e(FQ,Gur),e(Hd,Our),e(Zo,Vur),e(Zo,p7),e(p7,Xur),e(p7,qve),e(qve,zur),e(p7,Wur),e(Zo,Qur),e(Zo,xt),M(_7,xt,null),e(xt,Hur),e(xt,Nve),e(Nve,Uur),e(xt,Jur),e(xt,Ud),e(Ud,Yur),e(Ud,jve),e(jve,Kur),e(Ud,Zur),e(Ud,TQ),e(TQ,epr),e(Ud,opr),e(xt,rpr),M(pE,xt,null),e(Zo,tpr),e(Zo,yr),M(b7,yr,null),e(yr,apr),e(yr,Dve),e(Dve,npr),e(yr,spr),e(yr,en),e(en,lpr),e(en,Gve),e(Gve,ipr),e(en,dpr),e(en,Ove),e(Ove,cpr),e(en,mpr),e(en,Vve),e(Vve,fpr),e(en,gpr),e(yr,hpr),e(yr,Me),e(Me,_E),e(_E,Xve),e(Xve,upr),e(_E,ppr),e(_E,MQ),e(MQ,_pr),e(_E,bpr),e(Me,vpr),e(Me,bE),e(bE,zve),e(zve,Fpr),e(bE,Tpr),e(bE,EQ),e(EQ,Mpr),e(bE,Epr),e(Me,Cpr),e(Me,vE),e(vE,Wve),e(Wve,wpr),e(vE,Apr),e(vE,CQ),e(CQ,ypr),e(vE,Lpr),e(Me,xpr),e(Me,FE),e(FE,Qve),e(Qve,$pr),e(FE,kpr),e(FE,wQ),e(wQ,Spr),e(FE,Rpr),e(Me,Ppr),e(Me,TE),e(TE,Hve),e(Hve,Bpr),e(TE,Ipr),e(TE,AQ),e(AQ,qpr),e(TE,Npr),e(Me,jpr),e(Me,ME),e(ME,Uve),e(Uve,Dpr),e(ME,Gpr),e(ME,yQ),e(yQ,Opr),e(ME,Vpr),e(Me,Xpr),e(Me,EE),e(EE,Jve),e(Jve,zpr),e(EE,Wpr),e(EE,LQ),e(LQ,Qpr),e(EE,Hpr),e(Me,Upr),e(Me,CE),e(CE,Yve),e(Yve,Jpr),e(CE,Ypr),e(CE,xQ),e(xQ,Kpr),e(CE,Zpr),e(Me,e_r),e(Me,wE),e(wE,Kve),e(Kve,o_r),e(wE,r_r),e(wE,$Q),e($Q,t_r),e(wE,a_r),e(Me,n_r),e(Me,AE),e(AE,Zve),e(Zve,s_r),e(AE,l_r),e(AE,kQ),e(kQ,i_r),e(AE,d_r),e(Me,c_r),e(Me,yE),e(yE,eFe),e(eFe,m_r),e(yE,f_r),e(yE,SQ),e(SQ,g_r),e(yE,h_r),e(Me,u_r),e(Me,LE),e(LE,oFe),e(oFe,p_r),e(LE,__r),e(LE,RQ),e(RQ,b_r),e(LE,v_r),e(yr,F_r),M(xE,yr,null),b(m,QNe,_),b(m,Jd,_),e(Jd,$E),e($E,rFe),M(v7,rFe,null),e(Jd,T_r),e(Jd,tFe),e(tFe,M_r),b(m,HNe,_),b(m,er,_),M(F7,er,null),e(er,E_r),e(er,Yd),e(Yd,C_r),e(Yd,PQ),e(PQ,w_r),e(Yd,A_r),e(Yd,BQ),e(BQ,y_r),e(Yd,L_r),e(er,x_r),e(er,T7),e(T7,$_r),e(T7,aFe),e(aFe,k_r),e(T7,S_r),e(er,R_r),e(er,$t),M(M7,$t,null),e($t,P_r),e($t,nFe),e(nFe,B_r),e($t,I_r),e($t,Kd),e(Kd,q_r),e(Kd,sFe),e(sFe,N_r),e(Kd,j_r),e(Kd,IQ),e(IQ,D_r),e(Kd,G_r),e($t,O_r),M(kE,$t,null),e(er,V_r),e(er,Lr),M(E7,Lr,null),e(Lr,X_r),e(Lr,lFe),e(lFe,z_r),e(Lr,W_r),e(Lr,on),e(on,Q_r),e(on,iFe),e(iFe,H_r),e(on,U_r),e(on,dFe),e(dFe,J_r),e(on,Y_r),e(on,cFe),e(cFe,K_r),e(on,Z_r),e(Lr,ebr),e(Lr,rn),e(rn,SE),e(SE,mFe),e(mFe,obr),e(SE,rbr),e(SE,qQ),e(qQ,tbr),e(SE,abr),e(rn,nbr),e(rn,RE),e(RE,fFe),e(fFe,sbr),e(RE,lbr),e(RE,NQ),e(NQ,ibr),e(RE,dbr),e(rn,cbr),e(rn,PE),e(PE,gFe),e(gFe,mbr),e(PE,fbr),e(PE,jQ),e(jQ,gbr),e(PE,hbr),e(rn,ubr),e(rn,BE),e(BE,hFe),e(hFe,pbr),e(BE,_br),e(BE,DQ),e(DQ,bbr),e(BE,vbr),e(Lr,Fbr),M(IE,Lr,null),b(m,UNe,_),b(m,Zd,_),e(Zd,qE),e(qE,uFe),M(C7,uFe,null),e(Zd,Tbr),e(Zd,pFe),e(pFe,Mbr),b(m,JNe,_),b(m,or,_),M(w7,or,null),e(or,Ebr),e(or,ec),e(ec,Cbr),e(ec,GQ),e(GQ,wbr),e(ec,Abr),e(ec,OQ),e(OQ,ybr),e(ec,Lbr),e(or,xbr),e(or,A7),e(A7,$br),e(A7,_Fe),e(_Fe,kbr),e(A7,Sbr),e(or,Rbr),e(or,kt),M(y7,kt,null),e(kt,Pbr),e(kt,bFe),e(bFe,Bbr),e(kt,Ibr),e(kt,oc),e(oc,qbr),e(oc,vFe),e(vFe,Nbr),e(oc,jbr),e(oc,VQ),e(VQ,Dbr),e(oc,Gbr),e(kt,Obr),M(NE,kt,null),e(or,Vbr),e(or,xr),M(L7,xr,null),e(xr,Xbr),e(xr,FFe),e(FFe,zbr),e(xr,Wbr),e(xr,tn),e(tn,Qbr),e(tn,TFe),e(TFe,Hbr),e(tn,Ubr),e(tn,MFe),e(MFe,Jbr),e(tn,Ybr),e(tn,EFe),e(EFe,Kbr),e(tn,Zbr),e(xr,e2r),e(xr,ie),e(ie,jE),e(jE,CFe),e(CFe,o2r),e(jE,r2r),e(jE,XQ),e(XQ,t2r),e(jE,a2r),e(ie,n2r),e(ie,DE),e(DE,wFe),e(wFe,s2r),e(DE,l2r),e(DE,zQ),e(zQ,i2r),e(DE,d2r),e(ie,c2r),e(ie,GE),e(GE,AFe),e(AFe,m2r),e(GE,f2r),e(GE,WQ),e(WQ,g2r),e(GE,h2r),e(ie,u2r),e(ie,OE),e(OE,yFe),e(yFe,p2r),e(OE,_2r),e(OE,QQ),e(QQ,b2r),e(OE,v2r),e(ie,F2r),e(ie,VE),e(VE,LFe),e(LFe,T2r),e(VE,M2r),e(VE,HQ),e(HQ,E2r),e(VE,C2r),e(ie,w2r),e(ie,XE),e(XE,xFe),e(xFe,A2r),e(XE,y2r),e(XE,UQ),e(UQ,L2r),e(XE,x2r),e(ie,$2r),e(ie,zE),e(zE,$Fe),e($Fe,k2r),e(zE,S2r),e(zE,JQ),e(JQ,R2r),e(zE,P2r),e(ie,B2r),e(ie,WE),e(WE,kFe),e(kFe,I2r),e(WE,q2r),e(WE,YQ),e(YQ,N2r),e(WE,j2r),e(ie,D2r),e(ie,QE),e(QE,SFe),e(SFe,G2r),e(QE,O2r),e(QE,KQ),e(KQ,V2r),e(QE,X2r),e(ie,z2r),e(ie,HE),e(HE,RFe),e(RFe,W2r),e(HE,Q2r),e(HE,ZQ),e(ZQ,H2r),e(HE,U2r),e(ie,J2r),e(ie,UE),e(UE,PFe),e(PFe,Y2r),e(UE,K2r),e(UE,eH),e(eH,Z2r),e(UE,evr),e(ie,ovr),e(ie,JE),e(JE,BFe),e(BFe,rvr),e(JE,tvr),e(JE,oH),e(oH,avr),e(JE,nvr),e(ie,svr),e(ie,YE),e(YE,IFe),e(IFe,lvr),e(YE,ivr),e(YE,rH),e(rH,dvr),e(YE,cvr),e(ie,mvr),e(ie,KE),e(KE,qFe),e(qFe,fvr),e(KE,gvr),e(KE,tH),e(tH,hvr),e(KE,uvr),e(ie,pvr),e(ie,ZE),e(ZE,NFe),e(NFe,_vr),e(ZE,bvr),e(ZE,aH),e(aH,vvr),e(ZE,Fvr),e(ie,Tvr),e(ie,eC),e(eC,jFe),e(jFe,Mvr),e(eC,Evr),e(eC,nH),e(nH,Cvr),e(eC,wvr),e(ie,Avr),e(ie,oC),e(oC,DFe),e(DFe,yvr),e(oC,Lvr),e(oC,sH),e(sH,xvr),e(oC,$vr),e(ie,kvr),e(ie,rC),e(rC,GFe),e(GFe,Svr),e(rC,Rvr),e(rC,lH),e(lH,Pvr),e(rC,Bvr),e(ie,Ivr),e(ie,tC),e(tC,OFe),e(OFe,qvr),e(tC,Nvr),e(tC,iH),e(iH,jvr),e(tC,Dvr),e(ie,Gvr),e(ie,aC),e(aC,VFe),e(VFe,Ovr),e(aC,Vvr),e(aC,dH),e(dH,Xvr),e(aC,zvr),e(xr,Wvr),M(nC,xr,null),b(m,YNe,_),b(m,rc,_),e(rc,sC),e(sC,XFe),M(x7,XFe,null),e(rc,Qvr),e(rc,zFe),e(zFe,Hvr),b(m,KNe,_),b(m,rr,_),M($7,rr,null),e(rr,Uvr),e(rr,tc),e(tc,Jvr),e(tc,cH),e(cH,Yvr),e(tc,Kvr),e(tc,mH),e(mH,Zvr),e(tc,eFr),e(rr,oFr),e(rr,k7),e(k7,rFr),e(k7,WFe),e(WFe,tFr),e(k7,aFr),e(rr,nFr),e(rr,St),M(S7,St,null),e(St,sFr),e(St,QFe),e(QFe,lFr),e(St,iFr),e(St,ac),e(ac,dFr),e(ac,HFe),e(HFe,cFr),e(ac,mFr),e(ac,fH),e(fH,fFr),e(ac,gFr),e(St,hFr),M(lC,St,null),e(rr,uFr),e(rr,$r),M(R7,$r,null),e($r,pFr),e($r,UFe),e(UFe,_Fr),e($r,bFr),e($r,an),e(an,vFr),e(an,JFe),e(JFe,FFr),e(an,TFr),e(an,YFe),e(YFe,MFr),e(an,EFr),e(an,KFe),e(KFe,CFr),e(an,wFr),e($r,AFr),e($r,ye),e(ye,iC),e(iC,ZFe),e(ZFe,yFr),e(iC,LFr),e(iC,gH),e(gH,xFr),e(iC,$Fr),e(ye,kFr),e(ye,dC),e(dC,e1e),e(e1e,SFr),e(dC,RFr),e(dC,hH),e(hH,PFr),e(dC,BFr),e(ye,IFr),e(ye,cC),e(cC,o1e),e(o1e,qFr),e(cC,NFr),e(cC,uH),e(uH,jFr),e(cC,DFr),e(ye,GFr),e(ye,mC),e(mC,r1e),e(r1e,OFr),e(mC,VFr),e(mC,pH),e(pH,XFr),e(mC,zFr),e(ye,WFr),e(ye,fC),e(fC,t1e),e(t1e,QFr),e(fC,HFr),e(fC,_H),e(_H,UFr),e(fC,JFr),e(ye,YFr),e(ye,gC),e(gC,a1e),e(a1e,KFr),e(gC,ZFr),e(gC,bH),e(bH,e1r),e(gC,o1r),e(ye,r1r),e(ye,hC),e(hC,n1e),e(n1e,t1r),e(hC,a1r),e(hC,vH),e(vH,n1r),e(hC,s1r),e(ye,l1r),e(ye,uC),e(uC,s1e),e(s1e,i1r),e(uC,d1r),e(uC,FH),e(FH,c1r),e(uC,m1r),e(ye,f1r),e(ye,pC),e(pC,l1e),e(l1e,g1r),e(pC,h1r),e(pC,TH),e(TH,u1r),e(pC,p1r),e(ye,_1r),e(ye,_C),e(_C,i1e),e(i1e,b1r),e(_C,v1r),e(_C,MH),e(MH,F1r),e(_C,T1r),e($r,M1r),M(bC,$r,null),b(m,ZNe,_),b(m,nc,_),e(nc,vC),e(vC,d1e),M(P7,d1e,null),e(nc,E1r),e(nc,c1e),e(c1e,C1r),b(m,eje,_),b(m,tr,_),M(B7,tr,null),e(tr,w1r),e(tr,sc),e(sc,A1r),e(sc,EH),e(EH,y1r),e(sc,L1r),e(sc,CH),e(CH,x1r),e(sc,$1r),e(tr,k1r),e(tr,I7),e(I7,S1r),e(I7,m1e),e(m1e,R1r),e(I7,P1r),e(tr,B1r),e(tr,Rt),M(q7,Rt,null),e(Rt,I1r),e(Rt,f1e),e(f1e,q1r),e(Rt,N1r),e(Rt,lc),e(lc,j1r),e(lc,g1e),e(g1e,D1r),e(lc,G1r),e(lc,wH),e(wH,O1r),e(lc,V1r),e(Rt,X1r),M(FC,Rt,null),e(tr,z1r),e(tr,kr),M(N7,kr,null),e(kr,W1r),e(kr,h1e),e(h1e,Q1r),e(kr,H1r),e(kr,nn),e(nn,U1r),e(nn,u1e),e(u1e,J1r),e(nn,Y1r),e(nn,p1e),e(p1e,K1r),e(nn,Z1r),e(nn,_1e),e(_1e,eTr),e(nn,oTr),e(kr,rTr),e(kr,oe),e(oe,TC),e(TC,b1e),e(b1e,tTr),e(TC,aTr),e(TC,AH),e(AH,nTr),e(TC,sTr),e(oe,lTr),e(oe,MC),e(MC,v1e),e(v1e,iTr),e(MC,dTr),e(MC,yH),e(yH,cTr),e(MC,mTr),e(oe,fTr),e(oe,EC),e(EC,F1e),e(F1e,gTr),e(EC,hTr),e(EC,LH),e(LH,uTr),e(EC,pTr),e(oe,_Tr),e(oe,CC),e(CC,T1e),e(T1e,bTr),e(CC,vTr),e(CC,xH),e(xH,FTr),e(CC,TTr),e(oe,MTr),e(oe,wC),e(wC,M1e),e(M1e,ETr),e(wC,CTr),e(wC,$H),e($H,wTr),e(wC,ATr),e(oe,yTr),e(oe,AC),e(AC,E1e),e(E1e,LTr),e(AC,xTr),e(AC,kH),e(kH,$Tr),e(AC,kTr),e(oe,STr),e(oe,yC),e(yC,C1e),e(C1e,RTr),e(yC,PTr),e(yC,SH),e(SH,BTr),e(yC,ITr),e(oe,qTr),e(oe,LC),e(LC,w1e),e(w1e,NTr),e(LC,jTr),e(LC,RH),e(RH,DTr),e(LC,GTr),e(oe,OTr),e(oe,xC),e(xC,A1e),e(A1e,VTr),e(xC,XTr),e(xC,PH),e(PH,zTr),e(xC,WTr),e(oe,QTr),e(oe,$C),e($C,y1e),e(y1e,HTr),e($C,UTr),e($C,BH),e(BH,JTr),e($C,YTr),e(oe,KTr),e(oe,kC),e(kC,L1e),e(L1e,ZTr),e(kC,eMr),e(kC,IH),e(IH,oMr),e(kC,rMr),e(oe,tMr),e(oe,SC),e(SC,x1e),e(x1e,aMr),e(SC,nMr),e(SC,qH),e(qH,sMr),e(SC,lMr),e(oe,iMr),e(oe,RC),e(RC,$1e),e($1e,dMr),e(RC,cMr),e(RC,NH),e(NH,mMr),e(RC,fMr),e(oe,gMr),e(oe,PC),e(PC,k1e),e(k1e,hMr),e(PC,uMr),e(PC,jH),e(jH,pMr),e(PC,_Mr),e(oe,bMr),e(oe,BC),e(BC,S1e),e(S1e,vMr),e(BC,FMr),e(BC,DH),e(DH,TMr),e(BC,MMr),e(oe,EMr),e(oe,IC),e(IC,R1e),e(R1e,CMr),e(IC,wMr),e(IC,GH),e(GH,AMr),e(IC,yMr),e(oe,LMr),e(oe,qC),e(qC,P1e),e(P1e,xMr),e(qC,$Mr),e(qC,OH),e(OH,kMr),e(qC,SMr),e(oe,RMr),e(oe,NC),e(NC,B1e),e(B1e,PMr),e(NC,BMr),e(NC,VH),e(VH,IMr),e(NC,qMr),e(oe,NMr),e(oe,jC),e(jC,I1e),e(I1e,jMr),e(jC,DMr),e(jC,XH),e(XH,GMr),e(jC,OMr),e(oe,VMr),e(oe,DC),e(DC,q1e),e(q1e,XMr),e(DC,zMr),e(DC,zH),e(zH,WMr),e(DC,QMr),e(oe,HMr),e(oe,GC),e(GC,N1e),e(N1e,UMr),e(GC,JMr),e(GC,WH),e(WH,YMr),e(GC,KMr),e(oe,ZMr),e(oe,OC),e(OC,j1e),e(j1e,e4r),e(OC,o4r),e(OC,QH),e(QH,r4r),e(OC,t4r),e(oe,a4r),e(oe,VC),e(VC,D1e),e(D1e,n4r),e(VC,s4r),e(VC,HH),e(HH,l4r),e(VC,i4r),e(oe,d4r),e(oe,XC),e(XC,G1e),e(G1e,c4r),e(XC,m4r),e(XC,UH),e(UH,f4r),e(XC,g4r),e(oe,h4r),e(oe,zC),e(zC,O1e),e(O1e,u4r),e(zC,p4r),e(zC,JH),e(JH,_4r),e(zC,b4r),e(oe,v4r),e(oe,WC),e(WC,V1e),e(V1e,F4r),e(WC,T4r),e(WC,YH),e(YH,M4r),e(WC,E4r),e(kr,C4r),M(QC,kr,null),b(m,oje,_),b(m,ic,_),e(ic,HC),e(HC,X1e),M(j7,X1e,null),e(ic,w4r),e(ic,z1e),e(z1e,A4r),b(m,rje,_),b(m,ar,_),M(D7,ar,null),e(ar,y4r),e(ar,dc),e(dc,L4r),e(dc,KH),e(KH,x4r),e(dc,$4r),e(dc,ZH),e(ZH,k4r),e(dc,S4r),e(ar,R4r),e(ar,G7),e(G7,P4r),e(G7,W1e),e(W1e,B4r),e(G7,I4r),e(ar,q4r),e(ar,Pt),M(O7,Pt,null),e(Pt,N4r),e(Pt,Q1e),e(Q1e,j4r),e(Pt,D4r),e(Pt,cc),e(cc,G4r),e(cc,H1e),e(H1e,O4r),e(cc,V4r),e(cc,eU),e(eU,X4r),e(cc,z4r),e(Pt,W4r),M(UC,Pt,null),e(ar,Q4r),e(ar,Sr),M(V7,Sr,null),e(Sr,H4r),e(Sr,U1e),e(U1e,U4r),e(Sr,J4r),e(Sr,sn),e(sn,Y4r),e(sn,J1e),e(J1e,K4r),e(sn,Z4r),e(sn,Y1e),e(Y1e,eEr),e(sn,oEr),e(sn,K1e),e(K1e,rEr),e(sn,tEr),e(Sr,aEr),e(Sr,ue),e(ue,JC),e(JC,Z1e),e(Z1e,nEr),e(JC,sEr),e(JC,oU),e(oU,lEr),e(JC,iEr),e(ue,dEr),e(ue,YC),e(YC,eTe),e(eTe,cEr),e(YC,mEr),e(YC,rU),e(rU,fEr),e(YC,gEr),e(ue,hEr),e(ue,KC),e(KC,oTe),e(oTe,uEr),e(KC,pEr),e(KC,tU),e(tU,_Er),e(KC,bEr),e(ue,vEr),e(ue,ZC),e(ZC,rTe),e(rTe,FEr),e(ZC,TEr),e(ZC,aU),e(aU,MEr),e(ZC,EEr),e(ue,CEr),e(ue,e5),e(e5,tTe),e(tTe,wEr),e(e5,AEr),e(e5,nU),e(nU,yEr),e(e5,LEr),e(ue,xEr),e(ue,o5),e(o5,aTe),e(aTe,$Er),e(o5,kEr),e(o5,sU),e(sU,SEr),e(o5,REr),e(ue,PEr),e(ue,r5),e(r5,nTe),e(nTe,BEr),e(r5,IEr),e(r5,lU),e(lU,qEr),e(r5,NEr),e(ue,jEr),e(ue,t5),e(t5,sTe),e(sTe,DEr),e(t5,GEr),e(t5,iU),e(iU,OEr),e(t5,VEr),e(ue,XEr),e(ue,a5),e(a5,lTe),e(lTe,zEr),e(a5,WEr),e(a5,dU),e(dU,QEr),e(a5,HEr),e(ue,UEr),e(ue,n5),e(n5,iTe),e(iTe,JEr),e(n5,YEr),e(n5,cU),e(cU,KEr),e(n5,ZEr),e(ue,eCr),e(ue,s5),e(s5,dTe),e(dTe,oCr),e(s5,rCr),e(s5,mU),e(mU,tCr),e(s5,aCr),e(ue,nCr),e(ue,l5),e(l5,cTe),e(cTe,sCr),e(l5,lCr),e(l5,fU),e(fU,iCr),e(l5,dCr),e(ue,cCr),e(ue,i5),e(i5,mTe),e(mTe,mCr),e(i5,fCr),e(i5,gU),e(gU,gCr),e(i5,hCr),e(ue,uCr),e(ue,d5),e(d5,fTe),e(fTe,pCr),e(d5,_Cr),e(d5,hU),e(hU,bCr),e(d5,vCr),e(ue,FCr),e(ue,c5),e(c5,gTe),e(gTe,TCr),e(c5,MCr),e(c5,uU),e(uU,ECr),e(c5,CCr),e(ue,wCr),e(ue,m5),e(m5,hTe),e(hTe,ACr),e(m5,yCr),e(m5,pU),e(pU,LCr),e(m5,xCr),e(ue,$Cr),e(ue,f5),e(f5,uTe),e(uTe,kCr),e(f5,SCr),e(f5,_U),e(_U,RCr),e(f5,PCr),e(Sr,BCr),M(g5,Sr,null),b(m,tje,_),b(m,mc,_),e(mc,h5),e(h5,pTe),M(X7,pTe,null),e(mc,ICr),e(mc,_Te),e(_Te,qCr),b(m,aje,_),b(m,nr,_),M(z7,nr,null),e(nr,NCr),e(nr,fc),e(fc,jCr),e(fc,bU),e(bU,DCr),e(fc,GCr),e(fc,vU),e(vU,OCr),e(fc,VCr),e(nr,XCr),e(nr,W7),e(W7,zCr),e(W7,bTe),e(bTe,WCr),e(W7,QCr),e(nr,HCr),e(nr,Bt),M(Q7,Bt,null),e(Bt,UCr),e(Bt,vTe),e(vTe,JCr),e(Bt,YCr),e(Bt,gc),e(gc,KCr),e(gc,FTe),e(FTe,ZCr),e(gc,e5r),e(gc,FU),e(FU,o5r),e(gc,r5r),e(Bt,t5r),M(u5,Bt,null),e(nr,a5r),e(nr,Rr),M(H7,Rr,null),e(Rr,n5r),e(Rr,TTe),e(TTe,s5r),e(Rr,l5r),e(Rr,ln),e(ln,i5r),e(ln,MTe),e(MTe,d5r),e(ln,c5r),e(ln,ETe),e(ETe,m5r),e(ln,f5r),e(ln,CTe),e(CTe,g5r),e(ln,h5r),e(Rr,u5r),e(Rr,U7),e(U7,p5),e(p5,wTe),e(wTe,p5r),e(p5,_5r),e(p5,TU),e(TU,b5r),e(p5,v5r),e(U7,F5r),e(U7,_5),e(_5,ATe),e(ATe,T5r),e(_5,M5r),e(_5,MU),e(MU,E5r),e(_5,C5r),e(Rr,w5r),M(b5,Rr,null),b(m,nje,_),b(m,hc,_),e(hc,v5),e(v5,yTe),M(J7,yTe,null),e(hc,A5r),e(hc,LTe),e(LTe,y5r),b(m,sje,_),b(m,sr,_),M(Y7,sr,null),e(sr,L5r),e(sr,uc),e(uc,x5r),e(uc,EU),e(EU,$5r),e(uc,k5r),e(uc,CU),e(CU,S5r),e(uc,R5r),e(sr,P5r),e(sr,K7),e(K7,B5r),e(K7,xTe),e(xTe,I5r),e(K7,q5r),e(sr,N5r),e(sr,It),M(Z7,It,null),e(It,j5r),e(It,$Te),e($Te,D5r),e(It,G5r),e(It,pc),e(pc,O5r),e(pc,kTe),e(kTe,V5r),e(pc,X5r),e(pc,wU),e(wU,z5r),e(pc,W5r),e(It,Q5r),M(F5,It,null),e(sr,H5r),e(sr,Pr),M(e9,Pr,null),e(Pr,U5r),e(Pr,STe),e(STe,J5r),e(Pr,Y5r),e(Pr,dn),e(dn,K5r),e(dn,RTe),e(RTe,Z5r),e(dn,e3r),e(dn,PTe),e(PTe,o3r),e(dn,r3r),e(dn,BTe),e(BTe,t3r),e(dn,a3r),e(Pr,n3r),e(Pr,ITe),e(ITe,T5),e(T5,qTe),e(qTe,s3r),e(T5,l3r),e(T5,AU),e(AU,i3r),e(T5,d3r),e(Pr,c3r),M(M5,Pr,null),b(m,lje,_),b(m,_c,_),e(_c,E5),e(E5,NTe),M(o9,NTe,null),e(_c,m3r),e(_c,jTe),e(jTe,f3r),b(m,ije,_),b(m,lr,_),M(r9,lr,null),e(lr,g3r),e(lr,bc),e(bc,h3r),e(bc,yU),e(yU,u3r),e(bc,p3r),e(bc,LU),e(LU,_3r),e(bc,b3r),e(lr,v3r),e(lr,t9),e(t9,F3r),e(t9,DTe),e(DTe,T3r),e(t9,M3r),e(lr,E3r),e(lr,qt),M(a9,qt,null),e(qt,C3r),e(qt,GTe),e(GTe,w3r),e(qt,A3r),e(qt,vc),e(vc,y3r),e(vc,OTe),e(OTe,L3r),e(vc,x3r),e(vc,xU),e(xU,$3r),e(vc,k3r),e(qt,S3r),M(C5,qt,null),e(lr,R3r),e(lr,Br),M(n9,Br,null),e(Br,P3r),e(Br,VTe),e(VTe,B3r),e(Br,I3r),e(Br,cn),e(cn,q3r),e(cn,XTe),e(XTe,N3r),e(cn,j3r),e(cn,zTe),e(zTe,D3r),e(cn,G3r),e(cn,WTe),e(WTe,O3r),e(cn,V3r),e(Br,X3r),e(Br,de),e(de,w5),e(w5,QTe),e(QTe,z3r),e(w5,W3r),e(w5,$U),e($U,Q3r),e(w5,H3r),e(de,U3r),e(de,A5),e(A5,HTe),e(HTe,J3r),e(A5,Y3r),e(A5,kU),e(kU,K3r),e(A5,Z3r),e(de,ewr),e(de,y5),e(y5,UTe),e(UTe,owr),e(y5,rwr),e(y5,SU),e(SU,twr),e(y5,awr),e(de,nwr),e(de,L5),e(L5,JTe),e(JTe,swr),e(L5,lwr),e(L5,RU),e(RU,iwr),e(L5,dwr),e(de,cwr),e(de,x5),e(x5,YTe),e(YTe,mwr),e(x5,fwr),e(x5,PU),e(PU,gwr),e(x5,hwr),e(de,uwr),e(de,$5),e($5,KTe),e(KTe,pwr),e($5,_wr),e($5,BU),e(BU,bwr),e($5,vwr),e(de,Fwr),e(de,k5),e(k5,ZTe),e(ZTe,Twr),e(k5,Mwr),e(k5,IU),e(IU,Ewr),e(k5,Cwr),e(de,wwr),e(de,S5),e(S5,eMe),e(eMe,Awr),e(S5,ywr),e(S5,qU),e(qU,Lwr),e(S5,xwr),e(de,$wr),e(de,R5),e(R5,oMe),e(oMe,kwr),e(R5,Swr),e(R5,NU),e(NU,Rwr),e(R5,Pwr),e(de,Bwr),e(de,P5),e(P5,rMe),e(rMe,Iwr),e(P5,qwr),e(P5,jU),e(jU,Nwr),e(P5,jwr),e(de,Dwr),e(de,B5),e(B5,tMe),e(tMe,Gwr),e(B5,Owr),e(B5,DU),e(DU,Vwr),e(B5,Xwr),e(de,zwr),e(de,I5),e(I5,aMe),e(aMe,Wwr),e(I5,Qwr),e(I5,GU),e(GU,Hwr),e(I5,Uwr),e(de,Jwr),e(de,q5),e(q5,nMe),e(nMe,Ywr),e(q5,Kwr),e(q5,OU),e(OU,Zwr),e(q5,e0r),e(de,o0r),e(de,N5),e(N5,sMe),e(sMe,r0r),e(N5,t0r),e(N5,VU),e(VU,a0r),e(N5,n0r),e(de,s0r),e(de,j5),e(j5,lMe),e(lMe,l0r),e(j5,i0r),e(j5,XU),e(XU,d0r),e(j5,c0r),e(de,m0r),e(de,D5),e(D5,iMe),e(iMe,f0r),e(D5,g0r),e(D5,zU),e(zU,h0r),e(D5,u0r),e(de,p0r),e(de,G5),e(G5,dMe),e(dMe,_0r),e(G5,b0r),e(G5,WU),e(WU,v0r),e(G5,F0r),e(de,T0r),e(de,O5),e(O5,cMe),e(cMe,M0r),e(O5,E0r),e(O5,QU),e(QU,C0r),e(O5,w0r),e(de,A0r),e(de,V5),e(V5,mMe),e(mMe,y0r),e(V5,L0r),e(V5,HU),e(HU,x0r),e(V5,$0r),e(de,k0r),e(de,X5),e(X5,fMe),e(fMe,S0r),e(X5,R0r),e(X5,UU),e(UU,P0r),e(X5,B0r),e(Br,I0r),M(z5,Br,null),b(m,dje,_),b(m,Fc,_),e(Fc,W5),e(W5,gMe),M(s9,gMe,null),e(Fc,q0r),e(Fc,hMe),e(hMe,N0r),b(m,cje,_),b(m,ir,_),M(l9,ir,null),e(ir,j0r),e(ir,Tc),e(Tc,D0r),e(Tc,JU),e(JU,G0r),e(Tc,O0r),e(Tc,YU),e(YU,V0r),e(Tc,X0r),e(ir,z0r),e(ir,i9),e(i9,W0r),e(i9,uMe),e(uMe,Q0r),e(i9,H0r),e(ir,U0r),e(ir,Nt),M(d9,Nt,null),e(Nt,J0r),e(Nt,pMe),e(pMe,Y0r),e(Nt,K0r),e(Nt,Mc),e(Mc,Z0r),e(Mc,_Me),e(_Me,eAr),e(Mc,oAr),e(Mc,KU),e(KU,rAr),e(Mc,tAr),e(Nt,aAr),M(Q5,Nt,null),e(ir,nAr),e(ir,Ir),M(c9,Ir,null),e(Ir,sAr),e(Ir,bMe),e(bMe,lAr),e(Ir,iAr),e(Ir,mn),e(mn,dAr),e(mn,vMe),e(vMe,cAr),e(mn,mAr),e(mn,FMe),e(FMe,fAr),e(mn,gAr),e(mn,TMe),e(TMe,hAr),e(mn,uAr),e(Ir,pAr),e(Ir,ce),e(ce,H5),e(H5,MMe),e(MMe,_Ar),e(H5,bAr),e(H5,ZU),e(ZU,vAr),e(H5,FAr),e(ce,TAr),e(ce,U5),e(U5,EMe),e(EMe,MAr),e(U5,EAr),e(U5,eJ),e(eJ,CAr),e(U5,wAr),e(ce,AAr),e(ce,J5),e(J5,CMe),e(CMe,yAr),e(J5,LAr),e(J5,oJ),e(oJ,xAr),e(J5,$Ar),e(ce,kAr),e(ce,Y5),e(Y5,wMe),e(wMe,SAr),e(Y5,RAr),e(Y5,rJ),e(rJ,PAr),e(Y5,BAr),e(ce,IAr),e(ce,K5),e(K5,AMe),e(AMe,qAr),e(K5,NAr),e(K5,tJ),e(tJ,jAr),e(K5,DAr),e(ce,GAr),e(ce,Z5),e(Z5,yMe),e(yMe,OAr),e(Z5,VAr),e(Z5,aJ),e(aJ,XAr),e(Z5,zAr),e(ce,WAr),e(ce,e3),e(e3,LMe),e(LMe,QAr),e(e3,HAr),e(e3,nJ),e(nJ,UAr),e(e3,JAr),e(ce,YAr),e(ce,o3),e(o3,xMe),e(xMe,KAr),e(o3,ZAr),e(o3,sJ),e(sJ,e6r),e(o3,o6r),e(ce,r6r),e(ce,r3),e(r3,$Me),e($Me,t6r),e(r3,a6r),e(r3,lJ),e(lJ,n6r),e(r3,s6r),e(ce,l6r),e(ce,t3),e(t3,kMe),e(kMe,i6r),e(t3,d6r),e(t3,iJ),e(iJ,c6r),e(t3,m6r),e(ce,f6r),e(ce,a3),e(a3,SMe),e(SMe,g6r),e(a3,h6r),e(a3,dJ),e(dJ,u6r),e(a3,p6r),e(ce,_6r),e(ce,n3),e(n3,RMe),e(RMe,b6r),e(n3,v6r),e(n3,cJ),e(cJ,F6r),e(n3,T6r),e(ce,M6r),e(ce,s3),e(s3,PMe),e(PMe,E6r),e(s3,C6r),e(s3,mJ),e(mJ,w6r),e(s3,A6r),e(ce,y6r),e(ce,l3),e(l3,BMe),e(BMe,L6r),e(l3,x6r),e(l3,fJ),e(fJ,$6r),e(l3,k6r),e(ce,S6r),e(ce,i3),e(i3,IMe),e(IMe,R6r),e(i3,P6r),e(i3,gJ),e(gJ,B6r),e(i3,I6r),e(ce,q6r),e(ce,d3),e(d3,qMe),e(qMe,N6r),e(d3,j6r),e(d3,hJ),e(hJ,D6r),e(d3,G6r),e(ce,O6r),e(ce,c3),e(c3,NMe),e(NMe,V6r),e(c3,X6r),e(c3,uJ),e(uJ,z6r),e(c3,W6r),e(ce,Q6r),e(ce,m3),e(m3,jMe),e(jMe,H6r),e(m3,U6r),e(m3,pJ),e(pJ,J6r),e(m3,Y6r),e(ce,K6r),e(ce,f3),e(f3,DMe),e(DMe,Z6r),e(f3,eyr),e(f3,_J),e(_J,oyr),e(f3,ryr),e(ce,tyr),e(ce,g3),e(g3,GMe),e(GMe,ayr),e(g3,nyr),e(g3,bJ),e(bJ,syr),e(g3,lyr),e(Ir,iyr),M(h3,Ir,null),b(m,mje,_),b(m,Ec,_),e(Ec,u3),e(u3,OMe),M(m9,OMe,null),e(Ec,dyr),e(Ec,VMe),e(VMe,cyr),b(m,fje,_),b(m,dr,_),M(f9,dr,null),e(dr,myr),e(dr,Cc),e(Cc,fyr),e(Cc,vJ),e(vJ,gyr),e(Cc,hyr),e(Cc,FJ),e(FJ,uyr),e(Cc,pyr),e(dr,_yr),e(dr,g9),e(g9,byr),e(g9,XMe),e(XMe,vyr),e(g9,Fyr),e(dr,Tyr),e(dr,jt),M(h9,jt,null),e(jt,Myr),e(jt,zMe),e(zMe,Eyr),e(jt,Cyr),e(jt,wc),e(wc,wyr),e(wc,WMe),e(WMe,Ayr),e(wc,yyr),e(wc,TJ),e(TJ,Lyr),e(wc,xyr),e(jt,$yr),M(p3,jt,null),e(dr,kyr),e(dr,qr),M(u9,qr,null),e(qr,Syr),e(qr,QMe),e(QMe,Ryr),e(qr,Pyr),e(qr,fn),e(fn,Byr),e(fn,HMe),e(HMe,Iyr),e(fn,qyr),e(fn,UMe),e(UMe,Nyr),e(fn,jyr),e(fn,JMe),e(JMe,Dyr),e(fn,Gyr),e(qr,Oyr),e(qr,YMe),e(YMe,_3),e(_3,KMe),e(KMe,Vyr),e(_3,Xyr),e(_3,MJ),e(MJ,zyr),e(_3,Wyr),e(qr,Qyr),M(b3,qr,null),b(m,gje,_),b(m,Ac,_),e(Ac,v3),e(v3,ZMe),M(p9,ZMe,null),e(Ac,Hyr),e(Ac,e4e),e(e4e,Uyr),b(m,hje,_),b(m,cr,_),M(_9,cr,null),e(cr,Jyr),e(cr,yc),e(yc,Yyr),e(yc,EJ),e(EJ,Kyr),e(yc,Zyr),e(yc,CJ),e(CJ,eLr),e(yc,oLr),e(cr,rLr),e(cr,b9),e(b9,tLr),e(b9,o4e),e(o4e,aLr),e(b9,nLr),e(cr,sLr),e(cr,Dt),M(v9,Dt,null),e(Dt,lLr),e(Dt,r4e),e(r4e,iLr),e(Dt,dLr),e(Dt,Lc),e(Lc,cLr),e(Lc,t4e),e(t4e,mLr),e(Lc,fLr),e(Lc,wJ),e(wJ,gLr),e(Lc,hLr),e(Dt,uLr),M(F3,Dt,null),e(cr,pLr),e(cr,Nr),M(F9,Nr,null),e(Nr,_Lr),e(Nr,a4e),e(a4e,bLr),e(Nr,vLr),e(Nr,gn),e(gn,FLr),e(gn,n4e),e(n4e,TLr),e(gn,MLr),e(gn,s4e),e(s4e,ELr),e(gn,CLr),e(gn,l4e),e(l4e,wLr),e(gn,ALr),e(Nr,yLr),e(Nr,i4e),e(i4e,T3),e(T3,d4e),e(d4e,LLr),e(T3,xLr),e(T3,AJ),e(AJ,$Lr),e(T3,kLr),e(Nr,SLr),M(M3,Nr,null),b(m,uje,_),b(m,xc,_),e(xc,E3),e(E3,c4e),M(T9,c4e,null),e(xc,RLr),e(xc,m4e),e(m4e,PLr),b(m,pje,_),b(m,mr,_),M(M9,mr,null),e(mr,BLr),e(mr,$c),e($c,ILr),e($c,yJ),e(yJ,qLr),e($c,NLr),e($c,LJ),e(LJ,jLr),e($c,DLr),e(mr,GLr),e(mr,E9),e(E9,OLr),e(E9,f4e),e(f4e,VLr),e(E9,XLr),e(mr,zLr),e(mr,Gt),M(C9,Gt,null),e(Gt,WLr),e(Gt,g4e),e(g4e,QLr),e(Gt,HLr),e(Gt,kc),e(kc,ULr),e(kc,h4e),e(h4e,JLr),e(kc,YLr),e(kc,xJ),e(xJ,KLr),e(kc,ZLr),e(Gt,e8r),M(C3,Gt,null),e(mr,o8r),e(mr,jr),M(w9,jr,null),e(jr,r8r),e(jr,u4e),e(u4e,t8r),e(jr,a8r),e(jr,hn),e(hn,n8r),e(hn,p4e),e(p4e,s8r),e(hn,l8r),e(hn,_4e),e(_4e,i8r),e(hn,d8r),e(hn,b4e),e(b4e,c8r),e(hn,m8r),e(jr,f8r),e(jr,te),e(te,w3),e(w3,v4e),e(v4e,g8r),e(w3,h8r),e(w3,$J),e($J,u8r),e(w3,p8r),e(te,_8r),e(te,A3),e(A3,F4e),e(F4e,b8r),e(A3,v8r),e(A3,kJ),e(kJ,F8r),e(A3,T8r),e(te,M8r),e(te,y3),e(y3,T4e),e(T4e,E8r),e(y3,C8r),e(y3,SJ),e(SJ,w8r),e(y3,A8r),e(te,y8r),e(te,L3),e(L3,M4e),e(M4e,L8r),e(L3,x8r),e(L3,RJ),e(RJ,$8r),e(L3,k8r),e(te,S8r),e(te,x3),e(x3,E4e),e(E4e,R8r),e(x3,P8r),e(x3,PJ),e(PJ,B8r),e(x3,I8r),e(te,q8r),e(te,$3),e($3,C4e),e(C4e,N8r),e($3,j8r),e($3,BJ),e(BJ,D8r),e($3,G8r),e(te,O8r),e(te,k3),e(k3,w4e),e(w4e,V8r),e(k3,X8r),e(k3,IJ),e(IJ,z8r),e(k3,W8r),e(te,Q8r),e(te,S3),e(S3,A4e),e(A4e,H8r),e(S3,U8r),e(S3,qJ),e(qJ,J8r),e(S3,Y8r),e(te,K8r),e(te,R3),e(R3,y4e),e(y4e,Z8r),e(R3,e7r),e(R3,NJ),e(NJ,o7r),e(R3,r7r),e(te,t7r),e(te,P3),e(P3,L4e),e(L4e,a7r),e(P3,n7r),e(P3,jJ),e(jJ,s7r),e(P3,l7r),e(te,i7r),e(te,B3),e(B3,x4e),e(x4e,d7r),e(B3,c7r),e(B3,DJ),e(DJ,m7r),e(B3,f7r),e(te,g7r),e(te,I3),e(I3,$4e),e($4e,h7r),e(I3,u7r),e(I3,GJ),e(GJ,p7r),e(I3,_7r),e(te,b7r),e(te,q3),e(q3,k4e),e(k4e,v7r),e(q3,F7r),e(q3,OJ),e(OJ,T7r),e(q3,M7r),e(te,E7r),e(te,N3),e(N3,S4e),e(S4e,C7r),e(N3,w7r),e(N3,VJ),e(VJ,A7r),e(N3,y7r),e(te,L7r),e(te,j3),e(j3,R4e),e(R4e,x7r),e(j3,$7r),e(j3,XJ),e(XJ,k7r),e(j3,S7r),e(te,R7r),e(te,D3),e(D3,P4e),e(P4e,P7r),e(D3,B7r),e(D3,zJ),e(zJ,I7r),e(D3,q7r),e(te,N7r),e(te,G3),e(G3,B4e),e(B4e,j7r),e(G3,D7r),e(G3,WJ),e(WJ,G7r),e(G3,O7r),e(te,V7r),e(te,O3),e(O3,I4e),e(I4e,X7r),e(O3,z7r),e(O3,QJ),e(QJ,W7r),e(O3,Q7r),e(te,H7r),e(te,V3),e(V3,q4e),e(q4e,U7r),e(V3,J7r),e(V3,HJ),e(HJ,Y7r),e(V3,K7r),e(te,Z7r),e(te,X3),e(X3,N4e),e(N4e,e9r),e(X3,o9r),e(X3,UJ),e(UJ,r9r),e(X3,t9r),e(te,a9r),e(te,z3),e(z3,j4e),e(j4e,n9r),e(z3,s9r),e(z3,JJ),e(JJ,l9r),e(z3,i9r),e(te,d9r),e(te,W3),e(W3,D4e),e(D4e,c9r),e(W3,m9r),e(W3,YJ),e(YJ,f9r),e(W3,g9r),e(te,h9r),e(te,Q3),e(Q3,G4e),e(G4e,u9r),e(Q3,p9r),e(Q3,KJ),e(KJ,_9r),e(Q3,b9r),e(te,v9r),e(te,H3),e(H3,O4e),e(O4e,F9r),e(H3,T9r),e(H3,ZJ),e(ZJ,M9r),e(H3,E9r),e(te,C9r),e(te,U3),e(U3,V4e),e(V4e,w9r),e(U3,A9r),e(U3,eY),e(eY,y9r),e(U3,L9r),e(jr,x9r),M(J3,jr,null),b(m,_je,_),b(m,Sc,_),e(Sc,Y3),e(Y3,X4e),M(A9,X4e,null),e(Sc,$9r),e(Sc,z4e),e(z4e,k9r),b(m,bje,_),b(m,fr,_),M(y9,fr,null),e(fr,S9r),e(fr,Rc),e(Rc,R9r),e(Rc,oY),e(oY,P9r),e(Rc,B9r),e(Rc,rY),e(rY,I9r),e(Rc,q9r),e(fr,N9r),e(fr,L9),e(L9,j9r),e(L9,W4e),e(W4e,D9r),e(L9,G9r),e(fr,O9r),e(fr,Ot),M(x9,Ot,null),e(Ot,V9r),e(Ot,Q4e),e(Q4e,X9r),e(Ot,z9r),e(Ot,Pc),e(Pc,W9r),e(Pc,H4e),e(H4e,Q9r),e(Pc,H9r),e(Pc,tY),e(tY,U9r),e(Pc,J9r),e(Ot,Y9r),M(K3,Ot,null),e(fr,K9r),e(fr,Dr),M($9,Dr,null),e(Dr,Z9r),e(Dr,U4e),e(U4e,exr),e(Dr,oxr),e(Dr,un),e(un,rxr),e(un,J4e),e(J4e,txr),e(un,axr),e(un,Y4e),e(Y4e,nxr),e(un,sxr),e(un,K4e),e(K4e,lxr),e(un,ixr),e(Dr,dxr),e(Dr,Re),e(Re,Z3),e(Z3,Z4e),e(Z4e,cxr),e(Z3,mxr),e(Z3,aY),e(aY,fxr),e(Z3,gxr),e(Re,hxr),e(Re,ew),e(ew,eEe),e(eEe,uxr),e(ew,pxr),e(ew,nY),e(nY,_xr),e(ew,bxr),e(Re,vxr),e(Re,ow),e(ow,oEe),e(oEe,Fxr),e(ow,Txr),e(ow,sY),e(sY,Mxr),e(ow,Exr),e(Re,Cxr),e(Re,rw),e(rw,rEe),e(rEe,wxr),e(rw,Axr),e(rw,lY),e(lY,yxr),e(rw,Lxr),e(Re,xxr),e(Re,tw),e(tw,tEe),e(tEe,$xr),e(tw,kxr),e(tw,iY),e(iY,Sxr),e(tw,Rxr),e(Re,Pxr),e(Re,aw),e(aw,aEe),e(aEe,Bxr),e(aw,Ixr),e(aw,dY),e(dY,qxr),e(aw,Nxr),e(Re,jxr),e(Re,nw),e(nw,nEe),e(nEe,Dxr),e(nw,Gxr),e(nw,cY),e(cY,Oxr),e(nw,Vxr),e(Re,Xxr),e(Re,sw),e(sw,sEe),e(sEe,zxr),e(sw,Wxr),e(sw,mY),e(mY,Qxr),e(sw,Hxr),e(Re,Uxr),e(Re,lw),e(lw,lEe),e(lEe,Jxr),e(lw,Yxr),e(lw,fY),e(fY,Kxr),e(lw,Zxr),e(Dr,e$r),M(iw,Dr,null),b(m,vje,_),b(m,Bc,_),e(Bc,dw),e(dw,iEe),M(k9,iEe,null),e(Bc,o$r),e(Bc,dEe),e(dEe,r$r),b(m,Fje,_),b(m,gr,_),M(S9,gr,null),e(gr,t$r),e(gr,Ic),e(Ic,a$r),e(Ic,gY),e(gY,n$r),e(Ic,s$r),e(Ic,hY),e(hY,l$r),e(Ic,i$r),e(gr,d$r),e(gr,R9),e(R9,c$r),e(R9,cEe),e(cEe,m$r),e(R9,f$r),e(gr,g$r),e(gr,Vt),M(P9,Vt,null),e(Vt,h$r),e(Vt,mEe),e(mEe,u$r),e(Vt,p$r),e(Vt,qc),e(qc,_$r),e(qc,fEe),e(fEe,b$r),e(qc,v$r),e(qc,uY),e(uY,F$r),e(qc,T$r),e(Vt,M$r),M(cw,Vt,null),e(gr,E$r),e(gr,Gr),M(B9,Gr,null),e(Gr,C$r),e(Gr,gEe),e(gEe,w$r),e(Gr,A$r),e(Gr,pn),e(pn,y$r),e(pn,hEe),e(hEe,L$r),e(pn,x$r),e(pn,uEe),e(uEe,$$r),e(pn,k$r),e(pn,pEe),e(pEe,S$r),e(pn,R$r),e(Gr,P$r),e(Gr,Ee),e(Ee,mw),e(mw,_Ee),e(_Ee,B$r),e(mw,I$r),e(mw,pY),e(pY,q$r),e(mw,N$r),e(Ee,j$r),e(Ee,fw),e(fw,bEe),e(bEe,D$r),e(fw,G$r),e(fw,_Y),e(_Y,O$r),e(fw,V$r),e(Ee,X$r),e(Ee,gw),e(gw,vEe),e(vEe,z$r),e(gw,W$r),e(gw,bY),e(bY,Q$r),e(gw,H$r),e(Ee,U$r),e(Ee,hw),e(hw,FEe),e(FEe,J$r),e(hw,Y$r),e(hw,vY),e(vY,K$r),e(hw,Z$r),e(Ee,ekr),e(Ee,uw),e(uw,TEe),e(TEe,okr),e(uw,rkr),e(uw,FY),e(FY,tkr),e(uw,akr),e(Ee,nkr),e(Ee,pw),e(pw,MEe),e(MEe,skr),e(pw,lkr),e(pw,TY),e(TY,ikr),e(pw,dkr),e(Ee,ckr),e(Ee,_w),e(_w,EEe),e(EEe,mkr),e(_w,fkr),e(_w,MY),e(MY,gkr),e(_w,hkr),e(Ee,ukr),e(Ee,bw),e(bw,CEe),e(CEe,pkr),e(bw,_kr),e(bw,EY),e(EY,bkr),e(bw,vkr),e(Ee,Fkr),e(Ee,vw),e(vw,wEe),e(wEe,Tkr),e(vw,Mkr),e(vw,CY),e(CY,Ekr),e(vw,Ckr),e(Ee,wkr),e(Ee,Fw),e(Fw,AEe),e(AEe,Akr),e(Fw,ykr),e(Fw,wY),e(wY,Lkr),e(Fw,xkr),e(Ee,$kr),e(Ee,Tw),e(Tw,yEe),e(yEe,kkr),e(Tw,Skr),e(Tw,AY),e(AY,Rkr),e(Tw,Pkr),e(Ee,Bkr),e(Ee,Mw),e(Mw,LEe),e(LEe,Ikr),e(Mw,qkr),e(Mw,yY),e(yY,Nkr),e(Mw,jkr),e(Gr,Dkr),M(Ew,Gr,null),b(m,Tje,_),b(m,Nc,_),e(Nc,Cw),e(Cw,xEe),M(I9,xEe,null),e(Nc,Gkr),e(Nc,$Ee),e($Ee,Okr),b(m,Mje,_),b(m,hr,_),M(q9,hr,null),e(hr,Vkr),e(hr,jc),e(jc,Xkr),e(jc,LY),e(LY,zkr),e(jc,Wkr),e(jc,xY),e(xY,Qkr),e(jc,Hkr),e(hr,Ukr),e(hr,N9),e(N9,Jkr),e(N9,kEe),e(kEe,Ykr),e(N9,Kkr),e(hr,Zkr),e(hr,Xt),M(j9,Xt,null),e(Xt,eSr),e(Xt,SEe),e(SEe,oSr),e(Xt,rSr),e(Xt,Dc),e(Dc,tSr),e(Dc,REe),e(REe,aSr),e(Dc,nSr),e(Dc,$Y),e($Y,sSr),e(Dc,lSr),e(Xt,iSr),M(ww,Xt,null),e(hr,dSr),e(hr,Or),M(D9,Or,null),e(Or,cSr),e(Or,PEe),e(PEe,mSr),e(Or,fSr),e(Or,_n),e(_n,gSr),e(_n,BEe),e(BEe,hSr),e(_n,uSr),e(_n,IEe),e(IEe,pSr),e(_n,_Sr),e(_n,qEe),e(qEe,bSr),e(_n,vSr),e(Or,FSr),e(Or,Le),e(Le,Aw),e(Aw,NEe),e(NEe,TSr),e(Aw,MSr),e(Aw,kY),e(kY,ESr),e(Aw,CSr),e(Le,wSr),e(Le,yw),e(yw,jEe),e(jEe,ASr),e(yw,ySr),e(yw,SY),e(SY,LSr),e(yw,xSr),e(Le,$Sr),e(Le,Lw),e(Lw,DEe),e(DEe,kSr),e(Lw,SSr),e(Lw,RY),e(RY,RSr),e(Lw,PSr),e(Le,BSr),e(Le,xw),e(xw,GEe),e(GEe,ISr),e(xw,qSr),e(xw,PY),e(PY,NSr),e(xw,jSr),e(Le,DSr),e(Le,$w),e($w,OEe),e(OEe,GSr),e($w,OSr),e($w,BY),e(BY,VSr),e($w,XSr),e(Le,zSr),e(Le,kw),e(kw,VEe),e(VEe,WSr),e(kw,QSr),e(kw,IY),e(IY,HSr),e(kw,USr),e(Le,JSr),e(Le,Sw),e(Sw,XEe),e(XEe,YSr),e(Sw,KSr),e(Sw,qY),e(qY,ZSr),e(Sw,eRr),e(Le,oRr),e(Le,Rw),e(Rw,zEe),e(zEe,rRr),e(Rw,tRr),e(Rw,NY),e(NY,aRr),e(Rw,nRr),e(Le,sRr),e(Le,Pw),e(Pw,WEe),e(WEe,lRr),e(Pw,iRr),e(Pw,jY),e(jY,dRr),e(Pw,cRr),e(Le,mRr),e(Le,Bw),e(Bw,QEe),e(QEe,fRr),e(Bw,gRr),e(Bw,DY),e(DY,hRr),e(Bw,uRr),e(Or,pRr),M(Iw,Or,null),b(m,Eje,_),b(m,Gc,_),e(Gc,qw),e(qw,HEe),M(G9,HEe,null),e(Gc,_Rr),e(Gc,UEe),e(UEe,bRr),b(m,Cje,_),b(m,ur,_),M(O9,ur,null),e(ur,vRr),e(ur,Oc),e(Oc,FRr),e(Oc,GY),e(GY,TRr),e(Oc,MRr),e(Oc,OY),e(OY,ERr),e(Oc,CRr),e(ur,wRr),e(ur,V9),e(V9,ARr),e(V9,JEe),e(JEe,yRr),e(V9,LRr),e(ur,xRr),e(ur,zt),M(X9,zt,null),e(zt,$Rr),e(zt,YEe),e(YEe,kRr),e(zt,SRr),e(zt,Vc),e(Vc,RRr),e(Vc,KEe),e(KEe,PRr),e(Vc,BRr),e(Vc,VY),e(VY,IRr),e(Vc,qRr),e(zt,NRr),M(Nw,zt,null),e(ur,jRr),e(ur,Vr),M(z9,Vr,null),e(Vr,DRr),e(Vr,ZEe),e(ZEe,GRr),e(Vr,ORr),e(Vr,bn),e(bn,VRr),e(bn,eCe),e(eCe,XRr),e(bn,zRr),e(bn,oCe),e(oCe,WRr),e(bn,QRr),e(bn,rCe),e(rCe,HRr),e(bn,URr),e(Vr,JRr),e(Vr,Pe),e(Pe,jw),e(jw,tCe),e(tCe,YRr),e(jw,KRr),e(jw,XY),e(XY,ZRr),e(jw,ePr),e(Pe,oPr),e(Pe,Dw),e(Dw,aCe),e(aCe,rPr),e(Dw,tPr),e(Dw,zY),e(zY,aPr),e(Dw,nPr),e(Pe,sPr),e(Pe,Gw),e(Gw,nCe),e(nCe,lPr),e(Gw,iPr),e(Gw,WY),e(WY,dPr),e(Gw,cPr),e(Pe,mPr),e(Pe,Ow),e(Ow,sCe),e(sCe,fPr),e(Ow,gPr),e(Ow,QY),e(QY,hPr),e(Ow,uPr),e(Pe,pPr),e(Pe,Vw),e(Vw,lCe),e(lCe,_Pr),e(Vw,bPr),e(Vw,HY),e(HY,vPr),e(Vw,FPr),e(Pe,TPr),e(Pe,Xw),e(Xw,iCe),e(iCe,MPr),e(Xw,EPr),e(Xw,UY),e(UY,CPr),e(Xw,wPr),e(Pe,APr),e(Pe,zw),e(zw,dCe),e(dCe,yPr),e(zw,LPr),e(zw,JY),e(JY,xPr),e(zw,$Pr),e(Pe,kPr),e(Pe,Ww),e(Ww,cCe),e(cCe,SPr),e(Ww,RPr),e(Ww,YY),e(YY,PPr),e(Ww,BPr),e(Pe,IPr),e(Pe,Qw),e(Qw,mCe),e(mCe,qPr),e(Qw,NPr),e(Qw,KY),e(KY,jPr),e(Qw,DPr),e(Vr,GPr),M(Hw,Vr,null),b(m,wje,_),b(m,Xc,_),e(Xc,Uw),e(Uw,fCe),M(W9,fCe,null),e(Xc,OPr),e(Xc,gCe),e(gCe,VPr),b(m,Aje,_),b(m,pr,_),M(Q9,pr,null),e(pr,XPr),e(pr,zc),e(zc,zPr),e(zc,ZY),e(ZY,WPr),e(zc,QPr),e(zc,eK),e(eK,HPr),e(zc,UPr),e(pr,JPr),e(pr,H9),e(H9,YPr),e(H9,hCe),e(hCe,KPr),e(H9,ZPr),e(pr,eBr),e(pr,Wt),M(U9,Wt,null),e(Wt,oBr),e(Wt,uCe),e(uCe,rBr),e(Wt,tBr),e(Wt,Wc),e(Wc,aBr),e(Wc,pCe),e(pCe,nBr),e(Wc,sBr),e(Wc,oK),e(oK,lBr),e(Wc,iBr),e(Wt,dBr),M(Jw,Wt,null),e(pr,cBr),e(pr,Xr),M(J9,Xr,null),e(Xr,mBr),e(Xr,_Ce),e(_Ce,fBr),e(Xr,gBr),e(Xr,vn),e(vn,hBr),e(vn,bCe),e(bCe,uBr),e(vn,pBr),e(vn,vCe),e(vCe,_Br),e(vn,bBr),e(vn,FCe),e(FCe,vBr),e(vn,FBr),e(Xr,TBr),e(Xr,xe),e(xe,Yw),e(Yw,TCe),e(TCe,MBr),e(Yw,EBr),e(Yw,rK),e(rK,CBr),e(Yw,wBr),e(xe,ABr),e(xe,Kw),e(Kw,MCe),e(MCe,yBr),e(Kw,LBr),e(Kw,tK),e(tK,xBr),e(Kw,$Br),e(xe,kBr),e(xe,Zw),e(Zw,ECe),e(ECe,SBr),e(Zw,RBr),e(Zw,aK),e(aK,PBr),e(Zw,BBr),e(xe,IBr),e(xe,e0),e(e0,CCe),e(CCe,qBr),e(e0,NBr),e(e0,nK),e(nK,jBr),e(e0,DBr),e(xe,GBr),e(xe,o0),e(o0,wCe),e(wCe,OBr),e(o0,VBr),e(o0,sK),e(sK,XBr),e(o0,zBr),e(xe,WBr),e(xe,r0),e(r0,ACe),e(ACe,QBr),e(r0,HBr),e(r0,lK),e(lK,UBr),e(r0,JBr),e(xe,YBr),e(xe,t0),e(t0,yCe),e(yCe,KBr),e(t0,ZBr),e(t0,iK),e(iK,eIr),e(t0,oIr),e(xe,rIr),e(xe,a0),e(a0,LCe),e(LCe,tIr),e(a0,aIr),e(a0,dK),e(dK,nIr),e(a0,sIr),e(xe,lIr),e(xe,n0),e(n0,xCe),e(xCe,iIr),e(n0,dIr),e(n0,cK),e(cK,cIr),e(n0,mIr),e(xe,fIr),e(xe,s0),e(s0,$Ce),e($Ce,gIr),e(s0,hIr),e(s0,mK),e(mK,uIr),e(s0,pIr),e(Xr,_Ir),M(l0,Xr,null),b(m,yje,_),b(m,Qc,_),e(Qc,i0),e(i0,kCe),M(Y9,kCe,null),e(Qc,bIr),e(Qc,SCe),e(SCe,vIr),b(m,Lje,_),b(m,_r,_),M(K9,_r,null),e(_r,FIr),e(_r,Hc),e(Hc,TIr),e(Hc,fK),e(fK,MIr),e(Hc,EIr),e(Hc,gK),e(gK,CIr),e(Hc,wIr),e(_r,AIr),e(_r,Z9),e(Z9,yIr),e(Z9,RCe),e(RCe,LIr),e(Z9,xIr),e(_r,$Ir),e(_r,Qt),M(ex,Qt,null),e(Qt,kIr),e(Qt,PCe),e(PCe,SIr),e(Qt,RIr),e(Qt,Uc),e(Uc,PIr),e(Uc,BCe),e(BCe,BIr),e(Uc,IIr),e(Uc,hK),e(hK,qIr),e(Uc,NIr),e(Qt,jIr),M(d0,Qt,null),e(_r,DIr),e(_r,zr),M(ox,zr,null),e(zr,GIr),e(zr,ICe),e(ICe,OIr),e(zr,VIr),e(zr,Fn),e(Fn,XIr),e(Fn,qCe),e(qCe,zIr),e(Fn,WIr),e(Fn,NCe),e(NCe,QIr),e(Fn,HIr),e(Fn,jCe),e(jCe,UIr),e(Fn,JIr),e(zr,YIr),e(zr,$e),e($e,c0),e(c0,DCe),e(DCe,KIr),e(c0,ZIr),e(c0,uK),e(uK,eqr),e(c0,oqr),e($e,rqr),e($e,m0),e(m0,GCe),e(GCe,tqr),e(m0,aqr),e(m0,pK),e(pK,nqr),e(m0,sqr),e($e,lqr),e($e,f0),e(f0,OCe),e(OCe,iqr),e(f0,dqr),e(f0,_K),e(_K,cqr),e(f0,mqr),e($e,fqr),e($e,g0),e(g0,VCe),e(VCe,gqr),e(g0,hqr),e(g0,bK),e(bK,uqr),e(g0,pqr),e($e,_qr),e($e,h0),e(h0,XCe),e(XCe,bqr),e(h0,vqr),e(h0,vK),e(vK,Fqr),e(h0,Tqr),e($e,Mqr),e($e,u0),e(u0,zCe),e(zCe,Eqr),e(u0,Cqr),e(u0,FK),e(FK,wqr),e(u0,Aqr),e($e,yqr),e($e,p0),e(p0,WCe),e(WCe,Lqr),e(p0,xqr),e(p0,TK),e(TK,$qr),e(p0,kqr),e($e,Sqr),e($e,_0),e(_0,QCe),e(QCe,Rqr),e(_0,Pqr),e(_0,MK),e(MK,Bqr),e(_0,Iqr),e($e,qqr),e($e,b0),e(b0,HCe),e(HCe,Nqr),e(b0,jqr),e(b0,EK),e(EK,Dqr),e(b0,Gqr),e($e,Oqr),e($e,v0),e(v0,UCe),e(UCe,Vqr),e(v0,Xqr),e(v0,CK),e(CK,zqr),e(v0,Wqr),e(zr,Qqr),M(F0,zr,null),b(m,xje,_),b(m,Jc,_),e(Jc,T0),e(T0,JCe),M(rx,JCe,null),e(Jc,Hqr),e(Jc,YCe),e(YCe,Uqr),b(m,$je,_),b(m,br,_),M(tx,br,null),e(br,Jqr),e(br,Yc),e(Yc,Yqr),e(Yc,wK),e(wK,Kqr),e(Yc,Zqr),e(Yc,AK),e(AK,eNr),e(Yc,oNr),e(br,rNr),e(br,ax),e(ax,tNr),e(ax,KCe),e(KCe,aNr),e(ax,nNr),e(br,sNr),e(br,Ht),M(nx,Ht,null),e(Ht,lNr),e(Ht,ZCe),e(ZCe,iNr),e(Ht,dNr),e(Ht,Kc),e(Kc,cNr),e(Kc,e5e),e(e5e,mNr),e(Kc,fNr),e(Kc,yK),e(yK,gNr),e(Kc,hNr),e(Ht,uNr),M(M0,Ht,null),e(br,pNr),e(br,Wr),M(sx,Wr,null),e(Wr,_Nr),e(Wr,o5e),e(o5e,bNr),e(Wr,vNr),e(Wr,Tn),e(Tn,FNr),e(Tn,r5e),e(r5e,TNr),e(Tn,MNr),e(Tn,t5e),e(t5e,ENr),e(Tn,CNr),e(Tn,a5e),e(a5e,wNr),e(Tn,ANr),e(Wr,yNr),e(Wr,De),e(De,E0),e(E0,n5e),e(n5e,LNr),e(E0,xNr),e(E0,LK),e(LK,$Nr),e(E0,kNr),e(De,SNr),e(De,C0),e(C0,s5e),e(s5e,RNr),e(C0,PNr),e(C0,xK),e(xK,BNr),e(C0,INr),e(De,qNr),e(De,w0),e(w0,l5e),e(l5e,NNr),e(w0,jNr),e(w0,$K),e($K,DNr),e(w0,GNr),e(De,ONr),e(De,A0),e(A0,i5e),e(i5e,VNr),e(A0,XNr),e(A0,kK),e(kK,zNr),e(A0,WNr),e(De,QNr),e(De,y0),e(y0,d5e),e(d5e,HNr),e(y0,UNr),e(y0,SK),e(SK,JNr),e(y0,YNr),e(De,KNr),e(De,L0),e(L0,c5e),e(c5e,ZNr),e(L0,ejr),e(L0,RK),e(RK,ojr),e(L0,rjr),e(De,tjr),e(De,x0),e(x0,m5e),e(m5e,ajr),e(x0,njr),e(x0,PK),e(PK,sjr),e(x0,ljr),e(De,ijr),e(De,$0),e($0,f5e),e(f5e,djr),e($0,cjr),e($0,BK),e(BK,mjr),e($0,fjr),e(Wr,gjr),M(k0,Wr,null),b(m,kje,_),b(m,Zc,_),e(Zc,S0),e(S0,g5e),M(lx,g5e,null),e(Zc,hjr),e(Zc,h5e),e(h5e,ujr),b(m,Sje,_),b(m,vr,_),M(ix,vr,null),e(vr,pjr),e(vr,em),e(em,_jr),e(em,IK),e(IK,bjr),e(em,vjr),e(em,qK),e(qK,Fjr),e(em,Tjr),e(vr,Mjr),e(vr,dx),e(dx,Ejr),e(dx,u5e),e(u5e,Cjr),e(dx,wjr),e(vr,Ajr),e(vr,Ut),M(cx,Ut,null),e(Ut,yjr),e(Ut,p5e),e(p5e,Ljr),e(Ut,xjr),e(Ut,om),e(om,$jr),e(om,_5e),e(_5e,kjr),e(om,Sjr),e(om,NK),e(NK,Rjr),e(om,Pjr),e(Ut,Bjr),M(R0,Ut,null),e(vr,Ijr),e(vr,Qr),M(mx,Qr,null),e(Qr,qjr),e(Qr,b5e),e(b5e,Njr),e(Qr,jjr),e(Qr,Mn),e(Mn,Djr),e(Mn,v5e),e(v5e,Gjr),e(Mn,Ojr),e(Mn,F5e),e(F5e,Vjr),e(Mn,Xjr),e(Mn,T5e),e(T5e,zjr),e(Mn,Wjr),e(Qr,Qjr),e(Qr,Ge),e(Ge,P0),e(P0,M5e),e(M5e,Hjr),e(P0,Ujr),e(P0,jK),e(jK,Jjr),e(P0,Yjr),e(Ge,Kjr),e(Ge,B0),e(B0,E5e),e(E5e,Zjr),e(B0,eDr),e(B0,DK),e(DK,oDr),e(B0,rDr),e(Ge,tDr),e(Ge,I0),e(I0,C5e),e(C5e,aDr),e(I0,nDr),e(I0,GK),e(GK,sDr),e(I0,lDr),e(Ge,iDr),e(Ge,q0),e(q0,w5e),e(w5e,dDr),e(q0,cDr),e(q0,OK),e(OK,mDr),e(q0,fDr),e(Ge,gDr),e(Ge,N0),e(N0,A5e),e(A5e,hDr),e(N0,uDr),e(N0,VK),e(VK,pDr),e(N0,_Dr),e(Ge,bDr),e(Ge,j0),e(j0,y5e),e(y5e,vDr),e(j0,FDr),e(j0,XK),e(XK,TDr),e(j0,MDr),e(Ge,EDr),e(Ge,D0),e(D0,L5e),e(L5e,CDr),e(D0,wDr),e(D0,zK),e(zK,ADr),e(D0,yDr),e(Ge,LDr),e(Ge,G0),e(G0,x5e),e(x5e,xDr),e(G0,$Dr),e(G0,WK),e(WK,kDr),e(G0,SDr),e(Qr,RDr),M(O0,Qr,null),b(m,Rje,_),b(m,rm,_),e(rm,V0),e(V0,$5e),M(fx,$5e,null),e(rm,PDr),e(rm,k5e),e(k5e,BDr),b(m,Pje,_),b(m,Fr,_),M(gx,Fr,null),e(Fr,IDr),e(Fr,tm),e(tm,qDr),e(tm,QK),e(QK,NDr),e(tm,jDr),e(tm,HK),e(HK,DDr),e(tm,GDr),e(Fr,ODr),e(Fr,hx),e(hx,VDr),e(hx,S5e),e(S5e,XDr),e(hx,zDr),e(Fr,WDr),e(Fr,Jt),M(ux,Jt,null),e(Jt,QDr),e(Jt,R5e),e(R5e,HDr),e(Jt,UDr),e(Jt,am),e(am,JDr),e(am,P5e),e(P5e,YDr),e(am,KDr),e(am,UK),e(UK,ZDr),e(am,eGr),e(Jt,oGr),M(X0,Jt,null),e(Fr,rGr),e(Fr,Hr),M(px,Hr,null),e(Hr,tGr),e(Hr,B5e),e(B5e,aGr),e(Hr,nGr),e(Hr,En),e(En,sGr),e(En,I5e),e(I5e,lGr),e(En,iGr),e(En,q5e),e(q5e,dGr),e(En,cGr),e(En,N5e),e(N5e,mGr),e(En,fGr),e(Hr,gGr),e(Hr,j5e),e(j5e,z0),e(z0,D5e),e(D5e,hGr),e(z0,uGr),e(z0,JK),e(JK,pGr),e(z0,_Gr),e(Hr,bGr),M(W0,Hr,null),b(m,Bje,_),b(m,nm,_),e(nm,Q0),e(Q0,G5e),M(_x,G5e,null),e(nm,vGr),e(nm,O5e),e(O5e,FGr),b(m,Ije,_),b(m,Tr,_),M(bx,Tr,null),e(Tr,TGr),e(Tr,sm),e(sm,MGr),e(sm,YK),e(YK,EGr),e(sm,CGr),e(sm,KK),e(KK,wGr),e(sm,AGr),e(Tr,yGr),e(Tr,vx),e(vx,LGr),e(vx,V5e),e(V5e,xGr),e(vx,$Gr),e(Tr,kGr),e(Tr,Yt),M(Fx,Yt,null),e(Yt,SGr),e(Yt,X5e),e(X5e,RGr),e(Yt,PGr),e(Yt,lm),e(lm,BGr),e(lm,z5e),e(z5e,IGr),e(lm,qGr),e(lm,ZK),e(ZK,NGr),e(lm,jGr),e(Yt,DGr),M(H0,Yt,null),e(Tr,GGr),e(Tr,Ur),M(Tx,Ur,null),e(Ur,OGr),e(Ur,W5e),e(W5e,VGr),e(Ur,XGr),e(Ur,Cn),e(Cn,zGr),e(Cn,Q5e),e(Q5e,WGr),e(Cn,QGr),e(Cn,H5e),e(H5e,HGr),e(Cn,UGr),e(Cn,U5e),e(U5e,JGr),e(Cn,YGr),e(Ur,KGr),e(Ur,Mx),e(Mx,U0),e(U0,J5e),e(J5e,ZGr),e(U0,eOr),e(U0,eZ),e(eZ,oOr),e(U0,rOr),e(Mx,tOr),e(Mx,J0),e(J0,Y5e),e(Y5e,aOr),e(J0,nOr),e(J0,oZ),e(oZ,sOr),e(J0,lOr),e(Ur,iOr),M(Y0,Ur,null),b(m,qje,_),b(m,im,_),e(im,K0),e(K0,K5e),M(Ex,K5e,null),e(im,dOr),e(im,Z5e),e(Z5e,cOr),b(m,Nje,_),b(m,Mr,_),M(Cx,Mr,null),e(Mr,mOr),e(Mr,dm),e(dm,fOr),e(dm,rZ),e(rZ,gOr),e(dm,hOr),e(dm,tZ),e(tZ,uOr),e(dm,pOr),e(Mr,_Or),e(Mr,wx),e(wx,bOr),e(wx,e3e),e(e3e,vOr),e(wx,FOr),e(Mr,TOr),e(Mr,Kt),M(Ax,Kt,null),e(Kt,MOr),e(Kt,o3e),e(o3e,EOr),e(Kt,COr),e(Kt,cm),e(cm,wOr),e(cm,r3e),e(r3e,AOr),e(cm,yOr),e(cm,aZ),e(aZ,LOr),e(cm,xOr),e(Kt,$Or),M(Z0,Kt,null),e(Mr,kOr),e(Mr,Jr),M(yx,Jr,null),e(Jr,SOr),e(Jr,t3e),e(t3e,ROr),e(Jr,POr),e(Jr,wn),e(wn,BOr),e(wn,a3e),e(a3e,IOr),e(wn,qOr),e(wn,n3e),e(n3e,NOr),e(wn,jOr),e(wn,s3e),e(s3e,DOr),e(wn,GOr),e(Jr,OOr),e(Jr,l3e),e(l3e,eA),e(eA,i3e),e(i3e,VOr),e(eA,XOr),e(eA,nZ),e(nZ,zOr),e(eA,WOr),e(Jr,QOr),M(oA,Jr,null),jje=!0},p(m,[_]){const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:m}),vm.$set(Lx);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:m}),Mg.$set(d3e);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:m}),rh.$set(c3e);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:m}),Ph.$set(m3e);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:m}),Bh.$set(xx);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:m}),ou.$set(f3e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),ru.$set(An);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:m}),nu.$set(g3e);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:m}),Zp.$set(h3e);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:m}),o_.$set(u3e);const $x={};_&2&&($x.$$scope={dirty:_,ctx:m}),z_.$set($x);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:m}),Q_.$set(p3e);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:m}),kb.$set(kx);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:m}),Rb.$set(_3e);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:m}),p2.$set(Sx);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:m}),b2.$set(b3e);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:m}),I2.$set(v3e);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:m}),N2.$set(F3e);const mm={};_&2&&(mm.$$scope={dirty:_,ctx:m}),Rv.$set(mm);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:m}),Bv.$set(T3e);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:m}),fF.$set(M3e);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:m}),hF.$set(E3e);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:m}),TF.$set(Rx);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:m}),EF.$set(C3e);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:m}),n1.$set(w3e);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:m}),l1.$set(A3e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),U1.$set(et);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:m}),Y1.$set(Px);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:m}),eT.$set(y3e);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:m}),rT.$set(Bx);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:m}),pT.$set(L3e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),bT.$set(ot);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:m}),TT.$set(x3e);const fm={};_&2&&(fm.$$scope={dirty:_,ctx:m}),ET.$set(fm);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:m}),PT.$set($3e);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:m}),IT.$set(k3e);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),VT.$set(y);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:m}),zT.$set(rA);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:m}),rM.$set(S3e);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:m}),aM.$set(R3e);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:m}),iM.$set(tA);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:m}),cM.$set(P3e);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:m}),_M.$set(B3e);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:m}),vM.$set(aA);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:m}),CM.$set(I3e);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:m}),AM.$set(q3e);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:m}),$M.$set(nA);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:m}),SM.$set(N3e);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:m}),BM.$set(j3e);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:m}),qM.$set(sA);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:m}),VM.$set(D3e);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:m}),zM.$set(G3e);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:m}),HM.$set(lA);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:m}),JM.$set(O3e);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:m}),O4.$set(V3e);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:m}),X4.$set(iA);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:m}),hE.$set(X3e);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:m}),pE.$set(z3e);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:m}),xE.$set(dA);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:m}),kE.$set(W3e);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:m}),IE.$set(Q3e);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:m}),NE.$set(cA);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:m}),nC.$set(H3e);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:m}),lC.$set(U3e);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:m}),bC.$set(mA);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:m}),FC.$set(J3e);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:m}),QC.$set(Y3e);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:m}),UC.$set(fA);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:m}),g5.$set(K3e);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:m}),u5.$set(Z3e);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:m}),b5.$set(gA);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:m}),F5.$set(ewe);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:m}),M5.$set(owe);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:m}),C5.$set(hA);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:m}),z5.$set(rwe);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:m}),Q5.$set(twe);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:m}),h3.$set(uA);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:m}),p3.$set(awe);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:m}),b3.$set(nwe);const pA={};_&2&&(pA.$$scope={dirty:_,ctx:m}),F3.$set(pA);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:m}),M3.$set(swe);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:m}),C3.$set(lwe);const _A={};_&2&&(_A.$$scope={dirty:_,ctx:m}),J3.$set(_A);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:m}),K3.$set(iwe);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:m}),iw.$set(dwe);const bA={};_&2&&(bA.$$scope={dirty:_,ctx:m}),cw.$set(bA);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:m}),Ew.$set(cwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:m}),ww.$set(mwe);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:m}),Iw.$set(vA);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:m}),Nw.$set(fwe);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:m}),Hw.$set(gwe);const FA={};_&2&&(FA.$$scope={dirty:_,ctx:m}),Jw.$set(FA);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:m}),l0.$set(hwe);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:m}),d0.$set(uwe);const TA={};_&2&&(TA.$$scope={dirty:_,ctx:m}),F0.$set(TA);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:m}),M0.$set(pwe);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:m}),k0.$set(_we);const MA={};_&2&&(MA.$$scope={dirty:_,ctx:m}),R0.$set(MA);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:m}),O0.$set(bwe);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:m}),X0.$set(vwe);const EA={};_&2&&(EA.$$scope={dirty:_,ctx:m}),W0.$set(EA);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:m}),H0.$set(Fwe);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:m}),Y0.$set(Twe);const CA={};_&2&&(CA.$$scope={dirty:_,ctx:m}),Z0.$set(CA);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:m}),oA.$set(Mwe)},i(m){jje||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(vm.$$.fragment,m),E(wy.$$.fragment,m),E(Ay.$$.fragment,m),E(xy.$$.fragment,m),E(Mg.$$.fragment,m),E($y.$$.fragment,m),E(ky.$$.fragment,m),E(Sy.$$.fragment,m),E(By.$$.fragment,m),E(rh.$$.fragment,m),E(Iy.$$.fragment,m),E(qy.$$.fragment,m),E(Ny.$$.fragment,m),E(Gy.$$.fragment,m),E(Ph.$$.fragment,m),E(Bh.$$.fragment,m),E(Oy.$$.fragment,m),E(Vy.$$.fragment,m),E(Xy.$$.fragment,m),E(Qy.$$.fragment,m),E(ou.$$.fragment,m),E(ru.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Jy.$$.fragment,m),E(Ky.$$.fragment,m),E(nu.$$.fragment,m),E(Zy.$$.fragment,m),E(Zp.$$.fragment,m),E(eL.$$.fragment,m),E(oL.$$.fragment,m),E(tL.$$.fragment,m),E(o_.$$.fragment,m),E(aL.$$.fragment,m),E(z_.$$.fragment,m),E(nL.$$.fragment,m),E(sL.$$.fragment,m),E(iL.$$.fragment,m),E(Q_.$$.fragment,m),E(dL.$$.fragment,m),E(kb.$$.fragment,m),E(cL.$$.fragment,m),E(mL.$$.fragment,m),E(gL.$$.fragment,m),E(Rb.$$.fragment,m),E(hL.$$.fragment,m),E(p2.$$.fragment,m),E(uL.$$.fragment,m),E(pL.$$.fragment,m),E(bL.$$.fragment,m),E(b2.$$.fragment,m),E(vL.$$.fragment,m),E(I2.$$.fragment,m),E(FL.$$.fragment,m),E(TL.$$.fragment,m),E(EL.$$.fragment,m),E(N2.$$.fragment,m),E(CL.$$.fragment,m),E(Rv.$$.fragment,m),E(wL.$$.fragment,m),E(AL.$$.fragment,m),E(LL.$$.fragment,m),E(Bv.$$.fragment,m),E(xL.$$.fragment,m),E(fF.$$.fragment,m),E($L.$$.fragment,m),E(kL.$$.fragment,m),E(RL.$$.fragment,m),E(hF.$$.fragment,m),E(PL.$$.fragment,m),E(TF.$$.fragment,m),E(BL.$$.fragment,m),E(IL.$$.fragment,m),E(NL.$$.fragment,m),E(EF.$$.fragment,m),E(jL.$$.fragment,m),E(n1.$$.fragment,m),E(DL.$$.fragment,m),E(GL.$$.fragment,m),E(VL.$$.fragment,m),E(l1.$$.fragment,m),E(XL.$$.fragment,m),E(U1.$$.fragment,m),E(zL.$$.fragment,m),E(WL.$$.fragment,m),E(HL.$$.fragment,m),E(Y1.$$.fragment,m),E(UL.$$.fragment,m),E(eT.$$.fragment,m),E(JL.$$.fragment,m),E(YL.$$.fragment,m),E(ZL.$$.fragment,m),E(rT.$$.fragment,m),E(e8.$$.fragment,m),E(pT.$$.fragment,m),E(o8.$$.fragment,m),E(r8.$$.fragment,m),E(a8.$$.fragment,m),E(bT.$$.fragment,m),E(n8.$$.fragment,m),E(TT.$$.fragment,m),E(s8.$$.fragment,m),E(l8.$$.fragment,m),E(d8.$$.fragment,m),E(ET.$$.fragment,m),E(c8.$$.fragment,m),E(PT.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(h8.$$.fragment,m),E(IT.$$.fragment,m),E(u8.$$.fragment,m),E(VT.$$.fragment,m),E(p8.$$.fragment,m),E(_8.$$.fragment,m),E(v8.$$.fragment,m),E(zT.$$.fragment,m),E(F8.$$.fragment,m),E(rM.$$.fragment,m),E(T8.$$.fragment,m),E(M8.$$.fragment,m),E(C8.$$.fragment,m),E(aM.$$.fragment,m),E(w8.$$.fragment,m),E(iM.$$.fragment,m),E(y8.$$.fragment,m),E(L8.$$.fragment,m),E($8.$$.fragment,m),E(cM.$$.fragment,m),E(k8.$$.fragment,m),E(_M.$$.fragment,m),E(S8.$$.fragment,m),E(R8.$$.fragment,m),E(B8.$$.fragment,m),E(vM.$$.fragment,m),E(I8.$$.fragment,m),E(CM.$$.fragment,m),E(q8.$$.fragment,m),E(N8.$$.fragment,m),E(D8.$$.fragment,m),E(AM.$$.fragment,m),E(G8.$$.fragment,m),E($M.$$.fragment,m),E(V8.$$.fragment,m),E(X8.$$.fragment,m),E(W8.$$.fragment,m),E(SM.$$.fragment,m),E(Q8.$$.fragment,m),E(BM.$$.fragment,m),E(H8.$$.fragment,m),E(U8.$$.fragment,m),E(Y8.$$.fragment,m),E(qM.$$.fragment,m),E(K8.$$.fragment,m),E(VM.$$.fragment,m),E(Z8.$$.fragment,m),E(e7.$$.fragment,m),E(r7.$$.fragment,m),E(zM.$$.fragment,m),E(t7.$$.fragment,m),E(HM.$$.fragment,m),E(a7.$$.fragment,m),E(n7.$$.fragment,m),E(l7.$$.fragment,m),E(JM.$$.fragment,m),E(i7.$$.fragment,m),E(O4.$$.fragment,m),E(d7.$$.fragment,m),E(c7.$$.fragment,m),E(f7.$$.fragment,m),E(X4.$$.fragment,m),E(g7.$$.fragment,m),E(hE.$$.fragment,m),E(h7.$$.fragment,m),E(u7.$$.fragment,m),E(_7.$$.fragment,m),E(pE.$$.fragment,m),E(b7.$$.fragment,m),E(xE.$$.fragment,m),E(v7.$$.fragment,m),E(F7.$$.fragment,m),E(M7.$$.fragment,m),E(kE.$$.fragment,m),E(E7.$$.fragment,m),E(IE.$$.fragment,m),E(C7.$$.fragment,m),E(w7.$$.fragment,m),E(y7.$$.fragment,m),E(NE.$$.fragment,m),E(L7.$$.fragment,m),E(nC.$$.fragment,m),E(x7.$$.fragment,m),E($7.$$.fragment,m),E(S7.$$.fragment,m),E(lC.$$.fragment,m),E(R7.$$.fragment,m),E(bC.$$.fragment,m),E(P7.$$.fragment,m),E(B7.$$.fragment,m),E(q7.$$.fragment,m),E(FC.$$.fragment,m),E(N7.$$.fragment,m),E(QC.$$.fragment,m),E(j7.$$.fragment,m),E(D7.$$.fragment,m),E(O7.$$.fragment,m),E(UC.$$.fragment,m),E(V7.$$.fragment,m),E(g5.$$.fragment,m),E(X7.$$.fragment,m),E(z7.$$.fragment,m),E(Q7.$$.fragment,m),E(u5.$$.fragment,m),E(H7.$$.fragment,m),E(b5.$$.fragment,m),E(J7.$$.fragment,m),E(Y7.$$.fragment,m),E(Z7.$$.fragment,m),E(F5.$$.fragment,m),E(e9.$$.fragment,m),E(M5.$$.fragment,m),E(o9.$$.fragment,m),E(r9.$$.fragment,m),E(a9.$$.fragment,m),E(C5.$$.fragment,m),E(n9.$$.fragment,m),E(z5.$$.fragment,m),E(s9.$$.fragment,m),E(l9.$$.fragment,m),E(d9.$$.fragment,m),E(Q5.$$.fragment,m),E(c9.$$.fragment,m),E(h3.$$.fragment,m),E(m9.$$.fragment,m),E(f9.$$.fragment,m),E(h9.$$.fragment,m),E(p3.$$.fragment,m),E(u9.$$.fragment,m),E(b3.$$.fragment,m),E(p9.$$.fragment,m),E(_9.$$.fragment,m),E(v9.$$.fragment,m),E(F3.$$.fragment,m),E(F9.$$.fragment,m),E(M3.$$.fragment,m),E(T9.$$.fragment,m),E(M9.$$.fragment,m),E(C9.$$.fragment,m),E(C3.$$.fragment,m),E(w9.$$.fragment,m),E(J3.$$.fragment,m),E(A9.$$.fragment,m),E(y9.$$.fragment,m),E(x9.$$.fragment,m),E(K3.$$.fragment,m),E($9.$$.fragment,m),E(iw.$$.fragment,m),E(k9.$$.fragment,m),E(S9.$$.fragment,m),E(P9.$$.fragment,m),E(cw.$$.fragment,m),E(B9.$$.fragment,m),E(Ew.$$.fragment,m),E(I9.$$.fragment,m),E(q9.$$.fragment,m),E(j9.$$.fragment,m),E(ww.$$.fragment,m),E(D9.$$.fragment,m),E(Iw.$$.fragment,m),E(G9.$$.fragment,m),E(O9.$$.fragment,m),E(X9.$$.fragment,m),E(Nw.$$.fragment,m),E(z9.$$.fragment,m),E(Hw.$$.fragment,m),E(W9.$$.fragment,m),E(Q9.$$.fragment,m),E(U9.$$.fragment,m),E(Jw.$$.fragment,m),E(J9.$$.fragment,m),E(l0.$$.fragment,m),E(Y9.$$.fragment,m),E(K9.$$.fragment,m),E(ex.$$.fragment,m),E(d0.$$.fragment,m),E(ox.$$.fragment,m),E(F0.$$.fragment,m),E(rx.$$.fragment,m),E(tx.$$.fragment,m),E(nx.$$.fragment,m),E(M0.$$.fragment,m),E(sx.$$.fragment,m),E(k0.$$.fragment,m),E(lx.$$.fragment,m),E(ix.$$.fragment,m),E(cx.$$.fragment,m),E(R0.$$.fragment,m),E(mx.$$.fragment,m),E(O0.$$.fragment,m),E(fx.$$.fragment,m),E(gx.$$.fragment,m),E(ux.$$.fragment,m),E(X0.$$.fragment,m),E(px.$$.fragment,m),E(W0.$$.fragment,m),E(_x.$$.fragment,m),E(bx.$$.fragment,m),E(Fx.$$.fragment,m),E(H0.$$.fragment,m),E(Tx.$$.fragment,m),E(Y0.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(Ax.$$.fragment,m),E(Z0.$$.fragment,m),E(yx.$$.fragment,m),E(oA.$$.fragment,m),jje=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(vm.$$.fragment,m),C(wy.$$.fragment,m),C(Ay.$$.fragment,m),C(xy.$$.fragment,m),C(Mg.$$.fragment,m),C($y.$$.fragment,m),C(ky.$$.fragment,m),C(Sy.$$.fragment,m),C(By.$$.fragment,m),C(rh.$$.fragment,m),C(Iy.$$.fragment,m),C(qy.$$.fragment,m),C(Ny.$$.fragment,m),C(Gy.$$.fragment,m),C(Ph.$$.fragment,m),C(Bh.$$.fragment,m),C(Oy.$$.fragment,m),C(Vy.$$.fragment,m),C(Xy.$$.fragment,m),C(Qy.$$.fragment,m),C(ou.$$.fragment,m),C(ru.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Jy.$$.fragment,m),C(Ky.$$.fragment,m),C(nu.$$.fragment,m),C(Zy.$$.fragment,m),C(Zp.$$.fragment,m),C(eL.$$.fragment,m),C(oL.$$.fragment,m),C(tL.$$.fragment,m),C(o_.$$.fragment,m),C(aL.$$.fragment,m),C(z_.$$.fragment,m),C(nL.$$.fragment,m),C(sL.$$.fragment,m),C(iL.$$.fragment,m),C(Q_.$$.fragment,m),C(dL.$$.fragment,m),C(kb.$$.fragment,m),C(cL.$$.fragment,m),C(mL.$$.fragment,m),C(gL.$$.fragment,m),C(Rb.$$.fragment,m),C(hL.$$.fragment,m),C(p2.$$.fragment,m),C(uL.$$.fragment,m),C(pL.$$.fragment,m),C(bL.$$.fragment,m),C(b2.$$.fragment,m),C(vL.$$.fragment,m),C(I2.$$.fragment,m),C(FL.$$.fragment,m),C(TL.$$.fragment,m),C(EL.$$.fragment,m),C(N2.$$.fragment,m),C(CL.$$.fragment,m),C(Rv.$$.fragment,m),C(wL.$$.fragment,m),C(AL.$$.fragment,m),C(LL.$$.fragment,m),C(Bv.$$.fragment,m),C(xL.$$.fragment,m),C(fF.$$.fragment,m),C($L.$$.fragment,m),C(kL.$$.fragment,m),C(RL.$$.fragment,m),C(hF.$$.fragment,m),C(PL.$$.fragment,m),C(TF.$$.fragment,m),C(BL.$$.fragment,m),C(IL.$$.fragment,m),C(NL.$$.fragment,m),C(EF.$$.fragment,m),C(jL.$$.fragment,m),C(n1.$$.fragment,m),C(DL.$$.fragment,m),C(GL.$$.fragment,m),C(VL.$$.fragment,m),C(l1.$$.fragment,m),C(XL.$$.fragment,m),C(U1.$$.fragment,m),C(zL.$$.fragment,m),C(WL.$$.fragment,m),C(HL.$$.fragment,m),C(Y1.$$.fragment,m),C(UL.$$.fragment,m),C(eT.$$.fragment,m),C(JL.$$.fragment,m),C(YL.$$.fragment,m),C(ZL.$$.fragment,m),C(rT.$$.fragment,m),C(e8.$$.fragment,m),C(pT.$$.fragment,m),C(o8.$$.fragment,m),C(r8.$$.fragment,m),C(a8.$$.fragment,m),C(bT.$$.fragment,m),C(n8.$$.fragment,m),C(TT.$$.fragment,m),C(s8.$$.fragment,m),C(l8.$$.fragment,m),C(d8.$$.fragment,m),C(ET.$$.fragment,m),C(c8.$$.fragment,m),C(PT.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(h8.$$.fragment,m),C(IT.$$.fragment,m),C(u8.$$.fragment,m),C(VT.$$.fragment,m),C(p8.$$.fragment,m),C(_8.$$.fragment,m),C(v8.$$.fragment,m),C(zT.$$.fragment,m),C(F8.$$.fragment,m),C(rM.$$.fragment,m),C(T8.$$.fragment,m),C(M8.$$.fragment,m),C(C8.$$.fragment,m),C(aM.$$.fragment,m),C(w8.$$.fragment,m),C(iM.$$.fragment,m),C(y8.$$.fragment,m),C(L8.$$.fragment,m),C($8.$$.fragment,m),C(cM.$$.fragment,m),C(k8.$$.fragment,m),C(_M.$$.fragment,m),C(S8.$$.fragment,m),C(R8.$$.fragment,m),C(B8.$$.fragment,m),C(vM.$$.fragment,m),C(I8.$$.fragment,m),C(CM.$$.fragment,m),C(q8.$$.fragment,m),C(N8.$$.fragment,m),C(D8.$$.fragment,m),C(AM.$$.fragment,m),C(G8.$$.fragment,m),C($M.$$.fragment,m),C(V8.$$.fragment,m),C(X8.$$.fragment,m),C(W8.$$.fragment,m),C(SM.$$.fragment,m),C(Q8.$$.fragment,m),C(BM.$$.fragment,m),C(H8.$$.fragment,m),C(U8.$$.fragment,m),C(Y8.$$.fragment,m),C(qM.$$.fragment,m),C(K8.$$.fragment,m),C(VM.$$.fragment,m),C(Z8.$$.fragment,m),C(e7.$$.fragment,m),C(r7.$$.fragment,m),C(zM.$$.fragment,m),C(t7.$$.fragment,m),C(HM.$$.fragment,m),C(a7.$$.fragment,m),C(n7.$$.fragment,m),C(l7.$$.fragment,m),C(JM.$$.fragment,m),C(i7.$$.fragment,m),C(O4.$$.fragment,m),C(d7.$$.fragment,m),C(c7.$$.fragment,m),C(f7.$$.fragment,m),C(X4.$$.fragment,m),C(g7.$$.fragment,m),C(hE.$$.fragment,m),C(h7.$$.fragment,m),C(u7.$$.fragment,m),C(_7.$$.fragment,m),C(pE.$$.fragment,m),C(b7.$$.fragment,m),C(xE.$$.fragment,m),C(v7.$$.fragment,m),C(F7.$$.fragment,m),C(M7.$$.fragment,m),C(kE.$$.fragment,m),C(E7.$$.fragment,m),C(IE.$$.fragment,m),C(C7.$$.fragment,m),C(w7.$$.fragment,m),C(y7.$$.fragment,m),C(NE.$$.fragment,m),C(L7.$$.fragment,m),C(nC.$$.fragment,m),C(x7.$$.fragment,m),C($7.$$.fragment,m),C(S7.$$.fragment,m),C(lC.$$.fragment,m),C(R7.$$.fragment,m),C(bC.$$.fragment,m),C(P7.$$.fragment,m),C(B7.$$.fragment,m),C(q7.$$.fragment,m),C(FC.$$.fragment,m),C(N7.$$.fragment,m),C(QC.$$.fragment,m),C(j7.$$.fragment,m),C(D7.$$.fragment,m),C(O7.$$.fragment,m),C(UC.$$.fragment,m),C(V7.$$.fragment,m),C(g5.$$.fragment,m),C(X7.$$.fragment,m),C(z7.$$.fragment,m),C(Q7.$$.fragment,m),C(u5.$$.fragment,m),C(H7.$$.fragment,m),C(b5.$$.fragment,m),C(J7.$$.fragment,m),C(Y7.$$.fragment,m),C(Z7.$$.fragment,m),C(F5.$$.fragment,m),C(e9.$$.fragment,m),C(M5.$$.fragment,m),C(o9.$$.fragment,m),C(r9.$$.fragment,m),C(a9.$$.fragment,m),C(C5.$$.fragment,m),C(n9.$$.fragment,m),C(z5.$$.fragment,m),C(s9.$$.fragment,m),C(l9.$$.fragment,m),C(d9.$$.fragment,m),C(Q5.$$.fragment,m),C(c9.$$.fragment,m),C(h3.$$.fragment,m),C(m9.$$.fragment,m),C(f9.$$.fragment,m),C(h9.$$.fragment,m),C(p3.$$.fragment,m),C(u9.$$.fragment,m),C(b3.$$.fragment,m),C(p9.$$.fragment,m),C(_9.$$.fragment,m),C(v9.$$.fragment,m),C(F3.$$.fragment,m),C(F9.$$.fragment,m),C(M3.$$.fragment,m),C(T9.$$.fragment,m),C(M9.$$.fragment,m),C(C9.$$.fragment,m),C(C3.$$.fragment,m),C(w9.$$.fragment,m),C(J3.$$.fragment,m),C(A9.$$.fragment,m),C(y9.$$.fragment,m),C(x9.$$.fragment,m),C(K3.$$.fragment,m),C($9.$$.fragment,m),C(iw.$$.fragment,m),C(k9.$$.fragment,m),C(S9.$$.fragment,m),C(P9.$$.fragment,m),C(cw.$$.fragment,m),C(B9.$$.fragment,m),C(Ew.$$.fragment,m),C(I9.$$.fragment,m),C(q9.$$.fragment,m),C(j9.$$.fragment,m),C(ww.$$.fragment,m),C(D9.$$.fragment,m),C(Iw.$$.fragment,m),C(G9.$$.fragment,m),C(O9.$$.fragment,m),C(X9.$$.fragment,m),C(Nw.$$.fragment,m),C(z9.$$.fragment,m),C(Hw.$$.fragment,m),C(W9.$$.fragment,m),C(Q9.$$.fragment,m),C(U9.$$.fragment,m),C(Jw.$$.fragment,m),C(J9.$$.fragment,m),C(l0.$$.fragment,m),C(Y9.$$.fragment,m),C(K9.$$.fragment,m),C(ex.$$.fragment,m),C(d0.$$.fragment,m),C(ox.$$.fragment,m),C(F0.$$.fragment,m),C(rx.$$.fragment,m),C(tx.$$.fragment,m),C(nx.$$.fragment,m),C(M0.$$.fragment,m),C(sx.$$.fragment,m),C(k0.$$.fragment,m),C(lx.$$.fragment,m),C(ix.$$.fragment,m),C(cx.$$.fragment,m),C(R0.$$.fragment,m),C(mx.$$.fragment,m),C(O0.$$.fragment,m),C(fx.$$.fragment,m),C(gx.$$.fragment,m),C(ux.$$.fragment,m),C(X0.$$.fragment,m),C(px.$$.fragment,m),C(W0.$$.fragment,m),C(_x.$$.fragment,m),C(bx.$$.fragment,m),C(Fx.$$.fragment,m),C(H0.$$.fragment,m),C(Tx.$$.fragment,m),C(Y0.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(Ax.$$.fragment,m),C(Z0.$$.fragment,m),C(yx.$$.fragment,m),C(oA.$$.fragment,m),jje=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(hm),m&&t(rt),m&&t(je),m&&t(We),m&&t(pm),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(Iqe),m&&t(bi),w(Ey),m&&t(qqe),m&&t(kn),m&&t(Nqe),w(Cy,m),m&&t(jqe),m&&t(W$),m&&t(Dqe),w(vm,m),m&&t(Gqe),m&&t(vi),w(wy),m&&t(Oqe),m&&t(Co),w(Ay),w(xy),w(Mg),w($y),m&&t(Vqe),m&&t(Ti),w(ky),m&&t(Xqe),m&&t(wo),w(Sy),w(By),w(rh),w(Iy),m&&t(zqe),m&&t(Mi),w(qy),m&&t(Wqe),m&&t(Ao),w(Ny),w(Gy),w(Ph),w(Bh),w(Oy),m&&t(Qqe),m&&t(Ei),w(Vy),m&&t(Hqe),m&&t(yo),w(Xy),w(Qy),w(ou),w(ru),w(Hy),m&&t(Uqe),m&&t(wi),w(Uy),m&&t(Jqe),m&&t(Lo),w(Jy),w(Ky),w(nu),w(Zy),w(Zp),m&&t(Yqe),m&&t(Li),w(eL),m&&t(Kqe),m&&t(xo),w(oL),w(tL),w(o_),w(aL),w(z_),m&&t(Zqe),m&&t(ki),w(nL),m&&t(eNe),m&&t($o),w(sL),w(iL),w(Q_),w(dL),w(kb),m&&t(oNe),m&&t(Pi),w(cL),m&&t(rNe),m&&t(ko),w(mL),w(gL),w(Rb),w(hL),w(p2),m&&t(tNe),m&&t(qi),w(uL),m&&t(aNe),m&&t(So),w(pL),w(bL),w(b2),w(vL),w(I2),m&&t(nNe),m&&t(Di),w(FL),m&&t(sNe),m&&t(Ro),w(TL),w(EL),w(N2),w(CL),w(Rv),m&&t(lNe),m&&t(Vi),w(wL),m&&t(iNe),m&&t(Po),w(AL),w(LL),w(Bv),w(xL),w(fF),m&&t(dNe),m&&t(Wi),w($L),m&&t(cNe),m&&t(Bo),w(kL),w(RL),w(hF),w(PL),w(TF),m&&t(mNe),m&&t(Ui),w(BL),m&&t(fNe),m&&t(Io),w(IL),w(NL),w(EF),w(jL),w(n1),m&&t(gNe),m&&t(Ki),w(DL),m&&t(hNe),m&&t(qo),w(GL),w(VL),w(l1),w(XL),w(U1),m&&t(uNe),m&&t(od),w(zL),m&&t(pNe),m&&t(No),w(WL),w(HL),w(Y1),w(UL),w(eT),m&&t(_Ne),m&&t(ad),w(JL),m&&t(bNe),m&&t(jo),w(YL),w(ZL),w(rT),w(e8),w(pT),m&&t(vNe),m&&t(ld),w(o8),m&&t(FNe),m&&t(Do),w(r8),w(a8),w(bT),w(n8),w(TT),m&&t(TNe),m&&t(cd),w(s8),m&&t(MNe),m&&t(Go),w(l8),w(d8),w(ET),w(c8),w(PT),m&&t(ENe),m&&t(gd),w(m8),m&&t(CNe),m&&t(Oo),w(f8),w(h8),w(IT),w(u8),w(VT),m&&t(wNe),m&&t(pd),w(p8),m&&t(ANe),m&&t(Vo),w(_8),w(v8),w(zT),w(F8),w(rM),m&&t(yNe),m&&t(vd),w(T8),m&&t(LNe),m&&t(Xo),w(M8),w(C8),w(aM),w(w8),w(iM),m&&t(xNe),m&&t(Md),w(y8),m&&t($Ne),m&&t(zo),w(L8),w($8),w(cM),w(k8),w(_M),m&&t(kNe),m&&t(wd),w(S8),m&&t(SNe),m&&t(Wo),w(R8),w(B8),w(vM),w(I8),w(CM),m&&t(RNe),m&&t(xd),w(q8),m&&t(PNe),m&&t(Qo),w(N8),w(D8),w(AM),w(G8),w($M),m&&t(BNe),m&&t(Sd),w(V8),m&&t(INe),m&&t(Ho),w(X8),w(W8),w(SM),w(Q8),w(BM),m&&t(qNe),m&&t(Bd),w(H8),m&&t(NNe),m&&t(Uo),w(U8),w(Y8),w(qM),w(K8),w(VM),m&&t(jNe),m&&t(Nd),w(Z8),m&&t(DNe),m&&t(Jo),w(e7),w(r7),w(zM),w(t7),w(HM),m&&t(GNe),m&&t(Gd),w(a7),m&&t(ONe),m&&t(Yo),w(n7),w(l7),w(JM),w(i7),w(O4),m&&t(VNe),m&&t(Xd),w(d7),m&&t(XNe),m&&t(Ko),w(c7),w(f7),w(X4),w(g7),w(hE),m&&t(zNe),m&&t(Qd),w(h7),m&&t(WNe),m&&t(Zo),w(u7),w(_7),w(pE),w(b7),w(xE),m&&t(QNe),m&&t(Jd),w(v7),m&&t(HNe),m&&t(er),w(F7),w(M7),w(kE),w(E7),w(IE),m&&t(UNe),m&&t(Zd),w(C7),m&&t(JNe),m&&t(or),w(w7),w(y7),w(NE),w(L7),w(nC),m&&t(YNe),m&&t(rc),w(x7),m&&t(KNe),m&&t(rr),w($7),w(S7),w(lC),w(R7),w(bC),m&&t(ZNe),m&&t(nc),w(P7),m&&t(eje),m&&t(tr),w(B7),w(q7),w(FC),w(N7),w(QC),m&&t(oje),m&&t(ic),w(j7),m&&t(rje),m&&t(ar),w(D7),w(O7),w(UC),w(V7),w(g5),m&&t(tje),m&&t(mc),w(X7),m&&t(aje),m&&t(nr),w(z7),w(Q7),w(u5),w(H7),w(b5),m&&t(nje),m&&t(hc),w(J7),m&&t(sje),m&&t(sr),w(Y7),w(Z7),w(F5),w(e9),w(M5),m&&t(lje),m&&t(_c),w(o9),m&&t(ije),m&&t(lr),w(r9),w(a9),w(C5),w(n9),w(z5),m&&t(dje),m&&t(Fc),w(s9),m&&t(cje),m&&t(ir),w(l9),w(d9),w(Q5),w(c9),w(h3),m&&t(mje),m&&t(Ec),w(m9),m&&t(fje),m&&t(dr),w(f9),w(h9),w(p3),w(u9),w(b3),m&&t(gje),m&&t(Ac),w(p9),m&&t(hje),m&&t(cr),w(_9),w(v9),w(F3),w(F9),w(M3),m&&t(uje),m&&t(xc),w(T9),m&&t(pje),m&&t(mr),w(M9),w(C9),w(C3),w(w9),w(J3),m&&t(_je),m&&t(Sc),w(A9),m&&t(bje),m&&t(fr),w(y9),w(x9),w(K3),w($9),w(iw),m&&t(vje),m&&t(Bc),w(k9),m&&t(Fje),m&&t(gr),w(S9),w(P9),w(cw),w(B9),w(Ew),m&&t(Tje),m&&t(Nc),w(I9),m&&t(Mje),m&&t(hr),w(q9),w(j9),w(ww),w(D9),w(Iw),m&&t(Eje),m&&t(Gc),w(G9),m&&t(Cje),m&&t(ur),w(O9),w(X9),w(Nw),w(z9),w(Hw),m&&t(wje),m&&t(Xc),w(W9),m&&t(Aje),m&&t(pr),w(Q9),w(U9),w(Jw),w(J9),w(l0),m&&t(yje),m&&t(Qc),w(Y9),m&&t(Lje),m&&t(_r),w(K9),w(ex),w(d0),w(ox),w(F0),m&&t(xje),m&&t(Jc),w(rx),m&&t($je),m&&t(br),w(tx),w(nx),w(M0),w(sx),w(k0),m&&t(kje),m&&t(Zc),w(lx),m&&t(Sje),m&&t(vr),w(ix),w(cx),w(R0),w(mx),w(O0),m&&t(Rje),m&&t(rm),w(fx),m&&t(Pje),m&&t(Fr),w(gx),w(ux),w(X0),w(px),w(W0),m&&t(Bje),m&&t(nm),w(_x),m&&t(Ije),m&&t(Tr),w(bx),w(Fx),w(H0),w(Tx),w(Y0),m&&t(qje),m&&t(im),w(Ex),m&&t(Nje),m&&t(Mr),w(Cx),w(Ax),w(Z0),w(yx),w(oA)}}}const vkt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Fkt(L){return Fxt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ykt extends pxt{constructor(g){super();_xt(this,g,Fkt,bkt,bxt,{})}}export{ykt as default,vkt as metadata};
