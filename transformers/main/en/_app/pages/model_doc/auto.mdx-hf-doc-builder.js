import{S as O1a,i as V1a,s as X1a,e as a,k as l,w as F,t as o,M as z1a,c as n,d as t,m as i,a as s,x as T,h as r,b as m,G as e,g as b,y as M,q as E,o as C,B as w,v as Q1a,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as DMt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function W1a($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,Y9,Cf,Ve,He,sd,es,K9,os,rs,Z9,ld,ts,ex,id,wf,Qa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),yo=o(`, make sure its
`),td=a("code"),Ef=o("model_type"),pt=o(" attribute is set to the same key you use when registering the config (here "),ad=a("code"),nd=o('"new-model"'),Y9=o(")."),Cf=l(),Ve=a("p"),He=o("Likewise, if your "),sd=a("code"),es=o("NewModel"),K9=o(" is a subclass of "),os=a("a"),rs=o("PreTrainedModel"),Z9=o(`, make sure its
`),ld=a("code"),ts=o("config_class"),ex=o(` attribute is set to the same class you use when registering the model (here
`),id=a("code"),wf=o("NewModelConfig"),Qa=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var oI=s(u);f=r(oI,"NewModelConfig"),oI.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var dd=s(d);h=r(dd,"PretrainedConfig"),dd.forEach(t),yo=r(Ae,`, make sure its
`),td=n(Ae,"CODE",{});var rI=s(td);Ef=r(rI,"model_type"),rI.forEach(t),pt=r(Ae," attribute is set to the same key you use when registering the config (here "),ad=n(Ae,"CODE",{});var tI=s(ad);nd=r(tI,'"new-model"'),tI.forEach(t),Y9=r(Ae,")."),Ae.forEach(t),Cf=i(Je),Ve=n(Je,"P",{});var xo=s(Ve);He=r(xo,"Likewise, if your "),sd=n(xo,"CODE",{});var Wa=s(sd);es=r(Wa,"NewModel"),Wa.forEach(t),K9=r(xo," is a subclass of "),os=n(xo,"A",{href:!0});var aI=s(os);rs=r(aI,"PreTrainedModel"),aI.forEach(t),Z9=r(xo,`, make sure its
`),ld=n(xo,"CODE",{});var Af=s(ld);ts=r(Af,"config_class"),Af.forEach(t),ex=r(xo,` attribute is set to the same class you use when registering the model (here
`),id=n(xo,"CODE",{});var nI=s(id);wf=r(nI,"NewModelConfig"),nI.forEach(t),Qa=r(xo,")."),xo.forEach(t),this.h()},h(){m(os,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){b(Je,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,yo),e(g,td),e(td,Ef),e(g,pt),e(g,ad),e(ad,nd),e(g,Y9),b(Je,Cf,Ae),b(Je,Ve,Ae),e(Ve,He),e(Ve,sd),e(sd,es),e(Ve,K9),e(Ve,os),e(os,rs),e(Ve,Z9),e(Ve,ld),e(ld,ts),e(Ve,ex),e(Ve,id),e(id,wf),e(Ve,Qa)},d(Je){Je&&t(g),Je&&t(Cf),Je&&t(Ve)}}}function U1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J1a($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function Y1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K1a($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function Z1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $ba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eva($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,Y9,Cf,Ve,He,sd,es,K9,os,rs,Z9,ld,ts,ex,id,wf,Qa,Je,Ae,oI,dd,rI,tI,xo,Wa,aI,Af,nI,Fao,XZe,md,Lf,rme,ox,Tao,tme,Mao,zZe,as,Eao,ame,Cao,wao,nme,Aao,Lao,QZe,rx,WZe,sI,yao,UZe,yf,HZe,cd,xf,sme,tx,xao,lme,$ao,JZe,$o,ax,kao,nx,Sao,lI,Rao,Pao,Bao,sx,Iao,ime,Nao,qao,jao,Pr,lx,Dao,dme,Gao,Oao,fd,Vao,mme,Xao,zao,cme,Qao,Wao,Uao,A,$f,fme,Hao,Jao,iI,Yao,Kao,Zao,kf,gme,eno,ono,dI,rno,tno,ano,Sf,hme,nno,sno,mI,lno,ino,dno,Rf,ume,mno,cno,cI,fno,gno,hno,Pf,pme,uno,pno,fI,_no,bno,vno,Bf,_me,Fno,Tno,gI,Mno,Eno,Cno,If,bme,wno,Ano,hI,Lno,yno,xno,Nf,vme,$no,kno,uI,Sno,Rno,Pno,qf,Fme,Bno,Ino,pI,Nno,qno,jno,jf,Tme,Dno,Gno,_I,Ono,Vno,Xno,Df,Mme,zno,Qno,bI,Wno,Uno,Hno,Gf,Eme,Jno,Yno,vI,Kno,Zno,eso,Of,Cme,oso,rso,FI,tso,aso,nso,Vf,wme,sso,lso,TI,iso,dso,mso,Xf,Ame,cso,fso,MI,gso,hso,uso,zf,Lme,pso,_so,EI,bso,vso,Fso,Qf,yme,Tso,Mso,CI,Eso,Cso,wso,Wf,xme,Aso,Lso,wI,yso,xso,$so,Uf,$me,kso,Sso,AI,Rso,Pso,Bso,Hf,kme,Iso,Nso,LI,qso,jso,Dso,Jf,Sme,Gso,Oso,yI,Vso,Xso,zso,Yf,Rme,Qso,Wso,xI,Uso,Hso,Jso,Kf,Pme,Yso,Kso,$I,Zso,elo,olo,Zf,Bme,rlo,tlo,kI,alo,nlo,slo,eg,Ime,llo,ilo,SI,dlo,mlo,clo,og,Nme,flo,glo,RI,hlo,ulo,plo,rg,qme,_lo,blo,PI,vlo,Flo,Tlo,tg,jme,Mlo,Elo,BI,Clo,wlo,Alo,ag,Dme,Llo,ylo,II,xlo,$lo,klo,ng,Gme,Slo,Rlo,NI,Plo,Blo,Ilo,sg,Ome,Nlo,qlo,qI,jlo,Dlo,Glo,lg,Vme,Olo,Vlo,jI,Xlo,zlo,Qlo,ig,Xme,Wlo,Ulo,DI,Hlo,Jlo,Ylo,dg,zme,Klo,Zlo,GI,eio,oio,rio,mg,Qme,tio,aio,OI,nio,sio,lio,cg,Wme,iio,dio,VI,mio,cio,fio,fg,Ume,gio,hio,XI,uio,pio,_io,gg,Hme,bio,vio,zI,Fio,Tio,Mio,hg,Jme,Eio,Cio,QI,wio,Aio,Lio,ug,Yme,yio,xio,WI,$io,kio,Sio,pg,Kme,Rio,Pio,UI,Bio,Iio,Nio,_g,Zme,qio,jio,HI,Dio,Gio,Oio,bg,ece,Vio,Xio,JI,zio,Qio,Wio,vg,oce,Uio,Hio,YI,Jio,Yio,Kio,Fg,rce,Zio,edo,KI,odo,rdo,tdo,Tg,tce,ado,ndo,ZI,sdo,ldo,ido,Mg,ace,ddo,mdo,eN,cdo,fdo,gdo,Eg,nce,hdo,udo,oN,pdo,_do,bdo,Cg,sce,vdo,Fdo,rN,Tdo,Mdo,Edo,wg,lce,Cdo,wdo,tN,Ado,Ldo,ydo,Ag,ice,xdo,$do,aN,kdo,Sdo,Rdo,Lg,dce,Pdo,Bdo,nN,Ido,Ndo,qdo,yg,mce,jdo,Ddo,sN,Gdo,Odo,Vdo,xg,cce,Xdo,zdo,lN,Qdo,Wdo,Udo,$g,fce,Hdo,Jdo,iN,Ydo,Kdo,Zdo,kg,gce,emo,omo,dN,rmo,tmo,amo,Sg,hce,nmo,smo,mN,lmo,imo,dmo,Rg,uce,mmo,cmo,cN,fmo,gmo,hmo,Pg,pce,umo,pmo,fN,_mo,bmo,vmo,Bg,_ce,Fmo,Tmo,gN,Mmo,Emo,Cmo,Ig,bce,wmo,Amo,hN,Lmo,ymo,xmo,Ng,vce,$mo,kmo,uN,Smo,Rmo,Pmo,qg,Fce,Bmo,Imo,pN,Nmo,qmo,jmo,jg,Tce,Dmo,Gmo,_N,Omo,Vmo,Xmo,Dg,Mce,zmo,Qmo,bN,Wmo,Umo,Hmo,Gg,Ece,Jmo,Ymo,vN,Kmo,Zmo,eco,Og,Cce,oco,rco,FN,tco,aco,nco,Vg,wce,sco,lco,TN,ico,dco,mco,Xg,Ace,cco,fco,MN,gco,hco,uco,zg,Lce,pco,_co,EN,bco,vco,Fco,Qg,yce,Tco,Mco,CN,Eco,Cco,wco,Wg,xce,Aco,Lco,wN,yco,xco,$co,Ug,$ce,kco,Sco,AN,Rco,Pco,Bco,Hg,kce,Ico,Nco,LN,qco,jco,Dco,Jg,Sce,Gco,Oco,yN,Vco,Xco,zco,Yg,Rce,Qco,Wco,xN,Uco,Hco,Jco,Kg,Pce,Yco,Kco,$N,Zco,efo,ofo,Zg,Bce,rfo,tfo,kN,afo,nfo,sfo,eh,Ice,lfo,ifo,SN,dfo,mfo,cfo,oh,Nce,ffo,gfo,RN,hfo,ufo,pfo,rh,qce,_fo,bfo,PN,vfo,Ffo,Tfo,th,jce,Mfo,Efo,BN,Cfo,wfo,Afo,ah,Dce,Lfo,yfo,IN,xfo,$fo,kfo,nh,Gce,Sfo,Rfo,NN,Pfo,Bfo,Ifo,sh,Oce,Nfo,qfo,qN,jfo,Dfo,Gfo,lh,Vce,Ofo,Vfo,jN,Xfo,zfo,Qfo,ih,Xce,Wfo,Ufo,DN,Hfo,Jfo,Yfo,dh,zce,Kfo,Zfo,GN,ego,ogo,rgo,mh,Qce,tgo,ago,ON,ngo,sgo,lgo,ch,Wce,igo,dgo,VN,mgo,cgo,fgo,fh,Uce,ggo,hgo,XN,ugo,pgo,_go,gh,Hce,bgo,vgo,zN,Fgo,Tgo,Mgo,hh,Jce,Ego,Cgo,QN,wgo,Ago,Lgo,uh,Yce,ygo,xgo,WN,$go,kgo,Sgo,ph,Kce,Rgo,Pgo,UN,Bgo,Igo,Ngo,_h,Zce,qgo,jgo,HN,Dgo,Ggo,Ogo,bh,efe,Vgo,Xgo,JN,zgo,Qgo,Wgo,vh,ofe,Ugo,Hgo,YN,Jgo,Ygo,Kgo,Fh,rfe,Zgo,eho,KN,oho,rho,tho,Th,tfe,aho,nho,ZN,sho,lho,iho,Mh,afe,dho,mho,eq,cho,fho,gho,Eh,nfe,hho,uho,oq,pho,_ho,bho,Ch,sfe,vho,Fho,rq,Tho,Mho,Eho,wh,lfe,Cho,who,tq,Aho,Lho,yho,Ah,ife,xho,$ho,aq,kho,Sho,Rho,Lh,dfe,Pho,Bho,nq,Iho,Nho,qho,yh,mfe,jho,Dho,sq,Gho,Oho,Vho,xh,cfe,Xho,zho,lq,Qho,Who,Uho,$h,ffe,Hho,Jho,iq,Yho,Kho,Zho,kh,gfe,euo,ouo,dq,ruo,tuo,auo,Sh,hfe,nuo,suo,mq,luo,iuo,duo,Rh,ufe,muo,cuo,cq,fuo,guo,huo,Ph,pfe,uuo,puo,fq,_uo,buo,vuo,Bh,_fe,Fuo,Tuo,gq,Muo,Euo,Cuo,Ih,bfe,wuo,Auo,hq,Luo,yuo,xuo,Nh,vfe,$uo,kuo,uq,Suo,Ruo,Puo,qh,Ffe,Buo,Iuo,pq,Nuo,quo,juo,jh,Tfe,Duo,Guo,_q,Ouo,Vuo,Xuo,Dh,Mfe,zuo,Quo,bq,Wuo,Uuo,Huo,Gh,Efe,Juo,Yuo,vq,Kuo,Zuo,epo,Oh,Cfe,opo,rpo,Fq,tpo,apo,npo,Vh,wfe,spo,lpo,Tq,ipo,dpo,mpo,Xh,Afe,cpo,fpo,Mq,gpo,hpo,upo,zh,Lfe,ppo,_po,Eq,bpo,vpo,Fpo,Qh,yfe,Tpo,Mpo,Cq,Epo,Cpo,wpo,Wh,xfe,Apo,Lpo,wq,ypo,xpo,$po,Uh,$fe,kpo,Spo,Aq,Rpo,Ppo,Bpo,Hh,kfe,Ipo,Npo,Lq,qpo,jpo,Dpo,Jh,Sfe,Gpo,Opo,yq,Vpo,Xpo,zpo,Yh,Rfe,Qpo,Wpo,xq,Upo,Hpo,Jpo,Kh,Pfe,Ypo,Kpo,$q,Zpo,e_o,o_o,Zh,Bfe,r_o,t_o,kq,a_o,n_o,s_o,eu,l_o,ou,ix,i_o,Ife,d_o,YZe,gd,ru,Nfe,dx,m_o,qfe,c_o,KZe,ko,mx,f_o,cx,g_o,Sq,h_o,u_o,p_o,fx,__o,jfe,b_o,v_o,F_o,Br,gx,T_o,Dfe,M_o,E_o,Ua,C_o,Gfe,w_o,A_o,Ofe,L_o,y_o,Vfe,x_o,$_o,k_o,k,ns,Xfe,S_o,R_o,Rq,P_o,B_o,Pq,I_o,N_o,q_o,ss,zfe,j_o,D_o,Bq,G_o,O_o,Iq,V_o,X_o,z_o,ls,Qfe,Q_o,W_o,Nq,U_o,H_o,qq,J_o,Y_o,K_o,tu,Wfe,Z_o,e1o,jq,o1o,r1o,t1o,is,Ufe,a1o,n1o,Dq,s1o,l1o,Gq,i1o,d1o,m1o,au,Hfe,c1o,f1o,Oq,g1o,h1o,u1o,nu,Jfe,p1o,_1o,Vq,b1o,v1o,F1o,su,Yfe,T1o,M1o,Xq,E1o,C1o,w1o,ds,Kfe,A1o,L1o,zq,y1o,x1o,Qq,$1o,k1o,S1o,ms,Zfe,R1o,P1o,Wq,B1o,I1o,Uq,N1o,q1o,j1o,cs,ege,D1o,G1o,Hq,O1o,V1o,Jq,X1o,z1o,Q1o,lu,oge,W1o,U1o,Yq,H1o,J1o,Y1o,iu,rge,K1o,Z1o,Kq,e2o,o2o,r2o,du,tge,t2o,a2o,Zq,n2o,s2o,l2o,fs,age,i2o,d2o,ej,m2o,c2o,oj,f2o,g2o,h2o,mu,nge,u2o,p2o,rj,_2o,b2o,v2o,gs,sge,F2o,T2o,tj,M2o,E2o,aj,C2o,w2o,A2o,hs,lge,L2o,y2o,nj,x2o,$2o,sj,k2o,S2o,R2o,us,ige,P2o,B2o,lj,I2o,N2o,ij,q2o,j2o,D2o,ps,dge,G2o,O2o,dj,V2o,X2o,mj,z2o,Q2o,W2o,cu,mge,U2o,H2o,cj,J2o,Y2o,K2o,_s,cge,Z2o,ebo,fj,obo,rbo,gj,tbo,abo,nbo,bs,fge,sbo,lbo,hj,ibo,dbo,uj,mbo,cbo,fbo,vs,gge,gbo,hbo,pj,ubo,pbo,_j,_bo,bbo,vbo,Fs,hge,Fbo,Tbo,bj,Mbo,Ebo,vj,Cbo,wbo,Abo,Ts,uge,Lbo,ybo,Fj,xbo,$bo,Tj,kbo,Sbo,Rbo,Ms,pge,Pbo,Bbo,Mj,Ibo,Nbo,Ej,qbo,jbo,Dbo,Es,_ge,Gbo,Obo,Cj,Vbo,Xbo,wj,zbo,Qbo,Wbo,fu,bge,Ubo,Hbo,Aj,Jbo,Ybo,Kbo,Cs,vge,Zbo,evo,Lj,ovo,rvo,yj,tvo,avo,nvo,gu,Fge,svo,lvo,xj,ivo,dvo,mvo,ws,Tge,cvo,fvo,$j,gvo,hvo,kj,uvo,pvo,_vo,As,Mge,bvo,vvo,Sj,Fvo,Tvo,Rj,Mvo,Evo,Cvo,Ls,Ege,wvo,Avo,Pj,Lvo,yvo,Bj,xvo,$vo,kvo,hu,Cge,Svo,Rvo,Ij,Pvo,Bvo,Ivo,uu,wge,Nvo,qvo,Nj,jvo,Dvo,Gvo,ys,Age,Ovo,Vvo,qj,Xvo,zvo,jj,Qvo,Wvo,Uvo,xs,Lge,Hvo,Jvo,Dj,Yvo,Kvo,Gj,Zvo,eFo,oFo,$s,yge,rFo,tFo,Oj,aFo,nFo,Vj,sFo,lFo,iFo,pu,xge,dFo,mFo,Xj,cFo,fFo,gFo,ks,$ge,hFo,uFo,zj,pFo,_Fo,Qj,bFo,vFo,FFo,Ss,kge,TFo,MFo,Wj,EFo,CFo,Uj,wFo,AFo,LFo,Rs,Sge,yFo,xFo,Hj,$Fo,kFo,Jj,SFo,RFo,PFo,Ps,Rge,BFo,IFo,Yj,NFo,qFo,Kj,jFo,DFo,GFo,Bs,Pge,OFo,VFo,Zj,XFo,zFo,eD,QFo,WFo,UFo,Is,Bge,HFo,JFo,oD,YFo,KFo,rD,ZFo,eTo,oTo,Ns,Ige,rTo,tTo,tD,aTo,nTo,aD,sTo,lTo,iTo,qs,Nge,dTo,mTo,nD,cTo,fTo,sD,gTo,hTo,uTo,_u,qge,pTo,_To,lD,bTo,vTo,FTo,js,jge,TTo,MTo,iD,ETo,CTo,dD,wTo,ATo,LTo,bu,Dge,yTo,xTo,mD,$To,kTo,STo,vu,Gge,RTo,PTo,cD,BTo,ITo,NTo,Ds,Oge,qTo,jTo,fD,DTo,GTo,gD,OTo,VTo,XTo,Gs,Vge,zTo,QTo,hD,WTo,UTo,uD,HTo,JTo,YTo,Os,Xge,KTo,ZTo,pD,eMo,oMo,_D,rMo,tMo,aMo,Fu,zge,nMo,sMo,bD,lMo,iMo,dMo,Vs,Qge,mMo,cMo,vD,fMo,gMo,FD,hMo,uMo,pMo,Xs,Wge,_Mo,bMo,TD,vMo,FMo,MD,TMo,MMo,EMo,zs,Uge,CMo,wMo,ED,AMo,LMo,CD,yMo,xMo,$Mo,Qs,Hge,kMo,SMo,wD,RMo,PMo,AD,BMo,IMo,NMo,Ws,Jge,qMo,jMo,LD,DMo,GMo,yD,OMo,VMo,XMo,Us,Yge,zMo,QMo,xD,WMo,UMo,$D,HMo,JMo,YMo,Hs,Kge,KMo,ZMo,kD,eEo,oEo,SD,rEo,tEo,aEo,Js,Zge,nEo,sEo,RD,lEo,iEo,PD,dEo,mEo,cEo,Tu,ehe,fEo,gEo,BD,hEo,uEo,pEo,Ys,ohe,_Eo,bEo,ID,vEo,FEo,ND,TEo,MEo,EEo,Ks,rhe,CEo,wEo,qD,AEo,LEo,jD,yEo,xEo,$Eo,Mu,the,kEo,SEo,DD,REo,PEo,BEo,Eu,ahe,IEo,NEo,GD,qEo,jEo,DEo,Cu,nhe,GEo,OEo,OD,VEo,XEo,zEo,wu,she,QEo,WEo,VD,UEo,HEo,JEo,Zs,lhe,YEo,KEo,XD,ZEo,e4o,zD,o4o,r4o,t4o,Au,ihe,a4o,n4o,QD,s4o,l4o,i4o,el,dhe,d4o,m4o,WD,c4o,f4o,UD,g4o,h4o,u4o,ol,mhe,p4o,_4o,HD,b4o,v4o,JD,F4o,T4o,M4o,rl,che,E4o,C4o,YD,w4o,A4o,KD,L4o,y4o,x4o,tl,fhe,$4o,k4o,ZD,S4o,R4o,eG,P4o,B4o,I4o,al,ghe,N4o,q4o,oG,j4o,D4o,rG,G4o,O4o,V4o,nl,hhe,X4o,z4o,tG,Q4o,W4o,aG,U4o,H4o,J4o,Lu,uhe,Y4o,K4o,nG,Z4o,eCo,oCo,yu,phe,rCo,tCo,sG,aCo,nCo,sCo,sl,_he,lCo,iCo,lG,dCo,mCo,iG,cCo,fCo,gCo,ll,bhe,hCo,uCo,dG,pCo,_Co,mG,bCo,vCo,FCo,il,vhe,TCo,MCo,cG,ECo,CCo,fG,wCo,ACo,LCo,xu,Fhe,yCo,xCo,gG,$Co,kCo,SCo,$u,The,RCo,PCo,hG,BCo,ICo,NCo,ku,Mhe,qCo,jCo,uG,DCo,GCo,OCo,dl,Ehe,VCo,XCo,pG,zCo,QCo,_G,WCo,UCo,HCo,ml,Che,JCo,YCo,bG,KCo,ZCo,vG,e3o,o3o,r3o,Su,whe,t3o,a3o,FG,n3o,s3o,l3o,Ru,Ahe,i3o,d3o,TG,m3o,c3o,f3o,Pu,Lhe,g3o,h3o,MG,u3o,p3o,_3o,cl,yhe,b3o,v3o,EG,F3o,T3o,CG,M3o,E3o,C3o,fl,xhe,w3o,A3o,wG,L3o,y3o,AG,x3o,$3o,k3o,Bu,$he,S3o,R3o,LG,P3o,B3o,I3o,Iu,khe,N3o,q3o,yG,j3o,D3o,G3o,gl,She,O3o,V3o,xG,X3o,z3o,$G,Q3o,W3o,U3o,hl,Rhe,H3o,J3o,kG,Y3o,K3o,SG,Z3o,e5o,o5o,ul,Phe,r5o,t5o,RG,a5o,n5o,PG,s5o,l5o,i5o,pl,Bhe,d5o,m5o,BG,c5o,f5o,IG,g5o,h5o,u5o,Nu,p5o,qu,hx,_5o,Ihe,b5o,ZZe,hd,ju,Nhe,ux,v5o,qhe,F5o,eeo,So,px,T5o,_x,M5o,NG,E5o,C5o,w5o,bx,A5o,jhe,L5o,y5o,x5o,Ye,vx,$5o,Dhe,k5o,S5o,Ha,R5o,Ghe,P5o,B5o,Ohe,I5o,N5o,Vhe,q5o,j5o,D5o,z,Du,Xhe,G5o,O5o,qG,V5o,X5o,z5o,Gu,zhe,Q5o,W5o,jG,U5o,H5o,J5o,Ou,Qhe,Y5o,K5o,DG,Z5o,e0o,o0o,Vu,Whe,r0o,t0o,GG,a0o,n0o,s0o,Xu,Uhe,l0o,i0o,OG,d0o,m0o,c0o,zu,Hhe,f0o,g0o,VG,h0o,u0o,p0o,Qu,Jhe,_0o,b0o,XG,v0o,F0o,T0o,Wu,Yhe,M0o,E0o,zG,C0o,w0o,A0o,Uu,Khe,L0o,y0o,QG,x0o,$0o,k0o,Hu,Zhe,S0o,R0o,WG,P0o,B0o,I0o,Ju,eue,N0o,q0o,UG,j0o,D0o,G0o,Yu,oue,O0o,V0o,HG,X0o,z0o,Q0o,Ku,rue,W0o,U0o,JG,H0o,J0o,Y0o,Zu,tue,K0o,Z0o,YG,ewo,owo,rwo,ep,aue,two,awo,KG,nwo,swo,lwo,op,nue,iwo,dwo,ZG,mwo,cwo,fwo,rp,sue,gwo,hwo,eO,uwo,pwo,_wo,tp,lue,bwo,vwo,oO,Fwo,Two,Mwo,ap,iue,Ewo,Cwo,rO,wwo,Awo,Lwo,np,due,ywo,xwo,tO,$wo,kwo,Swo,sp,mue,Rwo,Pwo,aO,Bwo,Iwo,Nwo,lp,cue,qwo,jwo,nO,Dwo,Gwo,Owo,ip,fue,Vwo,Xwo,sO,zwo,Qwo,Wwo,dp,gue,Uwo,Hwo,lO,Jwo,Ywo,Kwo,mp,hue,Zwo,eAo,iO,oAo,rAo,tAo,cp,uue,aAo,nAo,dO,sAo,lAo,iAo,fp,pue,dAo,mAo,mO,cAo,fAo,gAo,gp,_ue,hAo,uAo,cO,pAo,_Ao,bAo,hp,bue,vAo,FAo,fO,TAo,MAo,EAo,up,vue,CAo,wAo,gO,AAo,LAo,yAo,pp,Fue,xAo,$Ao,hO,kAo,SAo,RAo,_p,Tue,PAo,BAo,uO,IAo,NAo,qAo,bp,Mue,jAo,DAo,pO,GAo,OAo,VAo,vp,Eue,XAo,zAo,_O,QAo,WAo,UAo,Fp,Cue,HAo,JAo,bO,YAo,KAo,ZAo,Tp,wue,e6o,o6o,vO,r6o,t6o,a6o,Mp,Aue,n6o,s6o,FO,l6o,i6o,d6o,Ep,Lue,m6o,c6o,TO,f6o,g6o,h6o,Cp,yue,u6o,p6o,MO,_6o,b6o,v6o,wp,xue,F6o,T6o,EO,M6o,E6o,C6o,Ap,$ue,w6o,A6o,CO,L6o,y6o,x6o,Lp,kue,$6o,k6o,wO,S6o,R6o,P6o,yp,B6o,xp,I6o,$p,Fx,N6o,Sue,q6o,oeo,ud,kp,Rue,Tx,j6o,Pue,D6o,reo,Ro,Mx,G6o,Ex,O6o,AO,V6o,X6o,z6o,Cx,Q6o,Bue,W6o,U6o,H6o,Ke,wx,J6o,Iue,Y6o,K6o,pd,Z6o,Nue,e7o,o7o,que,r7o,t7o,a7o,le,Sp,jue,n7o,s7o,LO,l7o,i7o,d7o,Rp,Due,m7o,c7o,yO,f7o,g7o,h7o,Pp,Gue,u7o,p7o,xO,_7o,b7o,v7o,Bp,Oue,F7o,T7o,$O,M7o,E7o,C7o,Ip,Vue,w7o,A7o,kO,L7o,y7o,x7o,Np,Xue,$7o,k7o,SO,S7o,R7o,P7o,qp,zue,B7o,I7o,RO,N7o,q7o,j7o,jp,Que,D7o,G7o,PO,O7o,V7o,X7o,Dp,Wue,z7o,Q7o,BO,W7o,U7o,H7o,Gp,Uue,J7o,Y7o,IO,K7o,Z7o,eLo,Op,Hue,oLo,rLo,NO,tLo,aLo,nLo,Vp,Jue,sLo,lLo,qO,iLo,dLo,mLo,Xp,Yue,cLo,fLo,jO,gLo,hLo,uLo,zp,Kue,pLo,_Lo,DO,bLo,vLo,FLo,Qp,Zue,TLo,MLo,GO,ELo,CLo,wLo,Wp,epe,ALo,LLo,OO,yLo,xLo,$Lo,Up,ope,kLo,SLo,VO,RLo,PLo,BLo,Hp,rpe,ILo,NLo,XO,qLo,jLo,DLo,Jp,tpe,GLo,OLo,zO,VLo,XLo,zLo,Yp,ape,QLo,WLo,QO,ULo,HLo,JLo,Kp,npe,YLo,KLo,WO,ZLo,eyo,oyo,Zp,spe,ryo,tyo,UO,ayo,nyo,syo,e_,lyo,o_,iyo,r_,Ax,dyo,lpe,myo,teo,_d,t_,ipe,Lx,cyo,dpe,fyo,aeo,Po,yx,gyo,bd,hyo,HO,uyo,pyo,JO,_yo,byo,vyo,xx,Fyo,mpe,Tyo,Myo,Eyo,_t,$x,Cyo,cpe,wyo,Ayo,vd,Lyo,fpe,yyo,xyo,YO,$yo,kyo,Syo,a_,Ryo,Ze,kx,Pyo,gpe,Byo,Iyo,Ja,Nyo,hpe,qyo,jyo,upe,Dyo,Gyo,ppe,Oyo,Vyo,Xyo,y,n_,_pe,zyo,Qyo,KO,Wyo,Uyo,Hyo,s_,bpe,Jyo,Yyo,ZO,Kyo,Zyo,e8o,l_,vpe,o8o,r8o,eV,t8o,a8o,n8o,i_,Fpe,s8o,l8o,oV,i8o,d8o,m8o,d_,Tpe,c8o,f8o,rV,g8o,h8o,u8o,m_,Mpe,p8o,_8o,tV,b8o,v8o,F8o,c_,Epe,T8o,M8o,aV,E8o,C8o,w8o,f_,Cpe,A8o,L8o,nV,y8o,x8o,$8o,g_,wpe,k8o,S8o,sV,R8o,P8o,B8o,h_,Ape,I8o,N8o,lV,q8o,j8o,D8o,u_,Lpe,G8o,O8o,iV,V8o,X8o,z8o,p_,ype,Q8o,W8o,dV,U8o,H8o,J8o,__,xpe,Y8o,K8o,mV,Z8o,e9o,o9o,b_,$pe,r9o,t9o,cV,a9o,n9o,s9o,v_,kpe,l9o,i9o,fV,d9o,m9o,c9o,F_,Spe,f9o,g9o,gV,h9o,u9o,p9o,T_,Rpe,_9o,b9o,hV,v9o,F9o,T9o,M_,Ppe,M9o,E9o,uV,C9o,w9o,A9o,E_,Bpe,L9o,y9o,pV,x9o,$9o,k9o,C_,Ipe,S9o,R9o,_V,P9o,B9o,I9o,w_,Npe,N9o,q9o,bV,j9o,D9o,G9o,A_,qpe,O9o,V9o,vV,X9o,z9o,Q9o,L_,jpe,W9o,U9o,FV,H9o,J9o,Y9o,y_,Dpe,K9o,Z9o,TV,exo,oxo,rxo,x_,Gpe,txo,axo,MV,nxo,sxo,lxo,$_,Ope,ixo,dxo,EV,mxo,cxo,fxo,k_,Vpe,gxo,hxo,CV,uxo,pxo,_xo,S_,Xpe,bxo,vxo,wV,Fxo,Txo,Mxo,R_,zpe,Exo,Cxo,AV,wxo,Axo,Lxo,P_,Qpe,yxo,xxo,LV,$xo,kxo,Sxo,B_,Wpe,Rxo,Pxo,yV,Bxo,Ixo,Nxo,I_,Upe,qxo,jxo,xV,Dxo,Gxo,Oxo,N_,Hpe,Vxo,Xxo,$V,zxo,Qxo,Wxo,q_,Jpe,Uxo,Hxo,kV,Jxo,Yxo,Kxo,j_,Ype,Zxo,e$o,SV,o$o,r$o,t$o,D_,Kpe,a$o,n$o,RV,s$o,l$o,i$o,G_,Zpe,d$o,m$o,PV,c$o,f$o,g$o,O_,e_e,h$o,u$o,BV,p$o,_$o,b$o,V_,o_e,v$o,F$o,IV,T$o,M$o,E$o,_l,r_e,C$o,w$o,NV,A$o,L$o,qV,y$o,x$o,$$o,X_,t_e,k$o,S$o,jV,R$o,P$o,B$o,z_,a_e,I$o,N$o,DV,q$o,j$o,D$o,Q_,n_e,G$o,O$o,GV,V$o,X$o,z$o,W_,s_e,Q$o,W$o,OV,U$o,H$o,J$o,U_,l_e,Y$o,K$o,VV,Z$o,eko,oko,H_,i_e,rko,tko,XV,ako,nko,sko,J_,d_e,lko,iko,zV,dko,mko,cko,Y_,m_e,fko,gko,QV,hko,uko,pko,K_,c_e,_ko,bko,WV,vko,Fko,Tko,Z_,f_e,Mko,Eko,UV,Cko,wko,Ako,e1,g_e,Lko,yko,HV,xko,$ko,kko,o1,h_e,Sko,Rko,JV,Pko,Bko,Iko,r1,u_e,Nko,qko,YV,jko,Dko,Gko,t1,p_e,Oko,Vko,KV,Xko,zko,Qko,a1,__e,Wko,Uko,ZV,Hko,Jko,Yko,n1,b_e,Kko,Zko,eX,eSo,oSo,rSo,s1,v_e,tSo,aSo,oX,nSo,sSo,lSo,l1,F_e,iSo,dSo,rX,mSo,cSo,fSo,i1,T_e,gSo,hSo,tX,uSo,pSo,_So,d1,M_e,bSo,vSo,aX,FSo,TSo,MSo,m1,E_e,ESo,CSo,nX,wSo,ASo,LSo,c1,C_e,ySo,xSo,sX,$So,kSo,SSo,f1,w_e,RSo,PSo,lX,BSo,ISo,NSo,g1,A_e,qSo,jSo,iX,DSo,GSo,OSo,h1,L_e,VSo,XSo,dX,zSo,QSo,WSo,u1,y_e,USo,HSo,mX,JSo,YSo,KSo,p1,x_e,ZSo,eRo,cX,oRo,rRo,tRo,_1,$_e,aRo,nRo,fX,sRo,lRo,iRo,b1,k_e,dRo,mRo,gX,cRo,fRo,gRo,v1,S_e,hRo,uRo,hX,pRo,_Ro,bRo,F1,R_e,vRo,FRo,uX,TRo,MRo,ERo,T1,P_e,CRo,wRo,pX,ARo,LRo,yRo,M1,B_e,xRo,$Ro,_X,kRo,SRo,RRo,E1,I_e,PRo,BRo,bX,IRo,NRo,qRo,C1,N_e,jRo,DRo,vX,GRo,ORo,VRo,w1,q_e,XRo,zRo,FX,QRo,WRo,URo,A1,j_e,HRo,JRo,TX,YRo,KRo,ZRo,L1,D_e,ePo,oPo,MX,rPo,tPo,aPo,y1,G_e,nPo,sPo,EX,lPo,iPo,dPo,x1,O_e,mPo,cPo,CX,fPo,gPo,hPo,$1,V_e,uPo,pPo,wX,_Po,bPo,vPo,k1,X_e,FPo,TPo,AX,MPo,EPo,CPo,S1,z_e,wPo,APo,LX,LPo,yPo,xPo,R1,Q_e,$Po,kPo,yX,SPo,RPo,PPo,P1,W_e,BPo,IPo,xX,NPo,qPo,jPo,B1,U_e,DPo,GPo,$X,OPo,VPo,XPo,I1,H_e,zPo,QPo,kX,WPo,UPo,HPo,N1,J_e,JPo,YPo,SX,KPo,ZPo,eBo,q1,Y_e,oBo,rBo,RX,tBo,aBo,nBo,j1,K_e,sBo,lBo,PX,iBo,dBo,mBo,D1,Z_e,cBo,fBo,BX,gBo,hBo,uBo,G1,e1e,pBo,_Bo,IX,bBo,vBo,FBo,O1,o1e,TBo,MBo,NX,EBo,CBo,wBo,V1,r1e,ABo,LBo,qX,yBo,xBo,$Bo,X1,t1e,kBo,SBo,jX,RBo,PBo,BBo,z1,a1e,IBo,NBo,DX,qBo,jBo,DBo,Q1,n1e,GBo,OBo,GX,VBo,XBo,zBo,W1,s1e,QBo,WBo,OX,UBo,HBo,JBo,U1,l1e,YBo,KBo,VX,ZBo,eIo,oIo,H1,i1e,rIo,tIo,XX,aIo,nIo,sIo,J1,d1e,lIo,iIo,zX,dIo,mIo,cIo,Y1,m1e,fIo,gIo,QX,hIo,uIo,pIo,K1,c1e,_Io,bIo,WX,vIo,FIo,TIo,Z1,f1e,MIo,EIo,UX,CIo,wIo,AIo,e2,g1e,LIo,yIo,HX,xIo,$Io,kIo,o2,h1e,SIo,RIo,JX,PIo,BIo,IIo,r2,u1e,NIo,qIo,YX,jIo,DIo,GIo,t2,p1e,OIo,VIo,KX,XIo,zIo,QIo,a2,_1e,WIo,UIo,ZX,HIo,JIo,YIo,n2,b1e,KIo,ZIo,ez,eNo,oNo,rNo,s2,v1e,tNo,aNo,oz,nNo,sNo,lNo,l2,F1e,iNo,dNo,rz,mNo,cNo,fNo,i2,T1e,gNo,hNo,tz,uNo,pNo,_No,d2,M1e,bNo,vNo,az,FNo,TNo,MNo,m2,E1e,ENo,CNo,nz,wNo,ANo,LNo,c2,C1e,yNo,xNo,sz,$No,kNo,SNo,f2,w1e,RNo,PNo,lz,BNo,INo,NNo,g2,A1e,qNo,jNo,iz,DNo,GNo,ONo,h2,L1e,VNo,XNo,dz,zNo,QNo,WNo,u2,y1e,UNo,HNo,mz,JNo,YNo,KNo,p2,x1e,ZNo,eqo,cz,oqo,rqo,tqo,_2,$1e,aqo,nqo,fz,sqo,lqo,iqo,b2,k1e,dqo,mqo,gz,cqo,fqo,gqo,v2,S1e,hqo,uqo,hz,pqo,_qo,bqo,F2,R1e,vqo,Fqo,uz,Tqo,Mqo,Eqo,T2,P1e,Cqo,wqo,pz,Aqo,Lqo,yqo,M2,xqo,B1e,$qo,kqo,I1e,Sqo,Rqo,E2,neo,Fd,C2,N1e,Sx,Pqo,q1e,Bqo,seo,Bo,Rx,Iqo,Td,Nqo,_z,qqo,jqo,bz,Dqo,Gqo,Oqo,Px,Vqo,j1e,Xqo,zqo,Qqo,bt,Bx,Wqo,D1e,Uqo,Hqo,Md,Jqo,G1e,Yqo,Kqo,vz,Zqo,ejo,ojo,w2,rjo,eo,Ix,tjo,O1e,ajo,njo,Ya,sjo,V1e,ljo,ijo,X1e,djo,mjo,z1e,cjo,fjo,gjo,G,A2,Q1e,hjo,ujo,Fz,pjo,_jo,bjo,L2,W1e,vjo,Fjo,Tz,Tjo,Mjo,Ejo,y2,U1e,Cjo,wjo,Mz,Ajo,Ljo,yjo,x2,H1e,xjo,$jo,Ez,kjo,Sjo,Rjo,$2,J1e,Pjo,Bjo,Cz,Ijo,Njo,qjo,k2,Y1e,jjo,Djo,wz,Gjo,Ojo,Vjo,S2,K1e,Xjo,zjo,Az,Qjo,Wjo,Ujo,R2,Z1e,Hjo,Jjo,Lz,Yjo,Kjo,Zjo,P2,e2e,eDo,oDo,yz,rDo,tDo,aDo,B2,o2e,nDo,sDo,xz,lDo,iDo,dDo,I2,r2e,mDo,cDo,$z,fDo,gDo,hDo,N2,t2e,uDo,pDo,kz,_Do,bDo,vDo,q2,a2e,FDo,TDo,Sz,MDo,EDo,CDo,j2,n2e,wDo,ADo,Rz,LDo,yDo,xDo,D2,s2e,$Do,kDo,Pz,SDo,RDo,PDo,G2,l2e,BDo,IDo,Bz,NDo,qDo,jDo,O2,i2e,DDo,GDo,Iz,ODo,VDo,XDo,V2,d2e,zDo,QDo,Nz,WDo,UDo,HDo,X2,m2e,JDo,YDo,qz,KDo,ZDo,eGo,z2,c2e,oGo,rGo,jz,tGo,aGo,nGo,Q2,f2e,sGo,lGo,Dz,iGo,dGo,mGo,W2,g2e,cGo,fGo,Gz,gGo,hGo,uGo,U2,h2e,pGo,_Go,Oz,bGo,vGo,FGo,H2,u2e,TGo,MGo,Vz,EGo,CGo,wGo,J2,p2e,AGo,LGo,Xz,yGo,xGo,$Go,Y2,_2e,kGo,SGo,zz,RGo,PGo,BGo,K2,b2e,IGo,NGo,Qz,qGo,jGo,DGo,Z2,v2e,GGo,OGo,Wz,VGo,XGo,zGo,eb,F2e,QGo,WGo,Uz,UGo,HGo,JGo,ob,T2e,YGo,KGo,Hz,ZGo,eOo,oOo,rb,M2e,rOo,tOo,Jz,aOo,nOo,sOo,tb,E2e,lOo,iOo,Yz,dOo,mOo,cOo,ab,C2e,fOo,gOo,Kz,hOo,uOo,pOo,nb,w2e,_Oo,bOo,Zz,vOo,FOo,TOo,sb,A2e,MOo,EOo,eQ,COo,wOo,AOo,lb,L2e,LOo,yOo,oQ,xOo,$Oo,kOo,ib,y2e,SOo,ROo,rQ,POo,BOo,IOo,db,x2e,NOo,qOo,tQ,jOo,DOo,GOo,mb,$2e,OOo,VOo,aQ,XOo,zOo,QOo,cb,k2e,WOo,UOo,nQ,HOo,JOo,YOo,fb,S2e,KOo,ZOo,sQ,eVo,oVo,rVo,gb,R2e,tVo,aVo,lQ,nVo,sVo,lVo,hb,P2e,iVo,dVo,iQ,mVo,cVo,fVo,ub,B2e,gVo,hVo,dQ,uVo,pVo,_Vo,pb,I2e,bVo,vVo,mQ,FVo,TVo,MVo,_b,N2e,EVo,CVo,cQ,wVo,AVo,LVo,bb,q2e,yVo,xVo,fQ,$Vo,kVo,SVo,vb,j2e,RVo,PVo,gQ,BVo,IVo,NVo,Fb,qVo,D2e,jVo,DVo,G2e,GVo,OVo,Tb,leo,Ed,Mb,O2e,Nx,VVo,V2e,XVo,ieo,Io,qx,zVo,Cd,QVo,hQ,WVo,UVo,uQ,HVo,JVo,YVo,jx,KVo,X2e,ZVo,eXo,oXo,vt,Dx,rXo,z2e,tXo,aXo,wd,nXo,Q2e,sXo,lXo,pQ,iXo,dXo,mXo,Eb,cXo,oo,Gx,fXo,W2e,gXo,hXo,Ka,uXo,U2e,pXo,_Xo,H2e,bXo,vXo,J2e,FXo,TXo,MXo,Q,Cb,Y2e,EXo,CXo,_Q,wXo,AXo,LXo,wb,K2e,yXo,xXo,bQ,$Xo,kXo,SXo,Ab,Z2e,RXo,PXo,vQ,BXo,IXo,NXo,Lb,ebe,qXo,jXo,FQ,DXo,GXo,OXo,yb,obe,VXo,XXo,TQ,zXo,QXo,WXo,xb,rbe,UXo,HXo,MQ,JXo,YXo,KXo,$b,tbe,ZXo,ezo,EQ,ozo,rzo,tzo,kb,abe,azo,nzo,CQ,szo,lzo,izo,Sb,nbe,dzo,mzo,wQ,czo,fzo,gzo,Rb,sbe,hzo,uzo,AQ,pzo,_zo,bzo,Pb,lbe,vzo,Fzo,LQ,Tzo,Mzo,Ezo,Bb,ibe,Czo,wzo,yQ,Azo,Lzo,yzo,Ib,dbe,xzo,$zo,xQ,kzo,Szo,Rzo,Nb,mbe,Pzo,Bzo,$Q,Izo,Nzo,qzo,qb,cbe,jzo,Dzo,kQ,Gzo,Ozo,Vzo,jb,fbe,Xzo,zzo,SQ,Qzo,Wzo,Uzo,Db,gbe,Hzo,Jzo,RQ,Yzo,Kzo,Zzo,Gb,hbe,eQo,oQo,PQ,rQo,tQo,aQo,Ob,ube,nQo,sQo,BQ,lQo,iQo,dQo,Vb,pbe,mQo,cQo,IQ,fQo,gQo,hQo,Xb,_be,uQo,pQo,NQ,_Qo,bQo,vQo,zb,bbe,FQo,TQo,qQ,MQo,EQo,CQo,Qb,vbe,wQo,AQo,jQ,LQo,yQo,xQo,Wb,Fbe,$Qo,kQo,DQ,SQo,RQo,PQo,Ub,Tbe,BQo,IQo,GQ,NQo,qQo,jQo,Hb,Mbe,DQo,GQo,OQ,OQo,VQo,XQo,Jb,Ebe,zQo,QQo,VQ,WQo,UQo,HQo,Yb,Cbe,JQo,YQo,XQ,KQo,ZQo,eWo,Kb,wbe,oWo,rWo,zQ,tWo,aWo,nWo,Zb,Abe,sWo,lWo,QQ,iWo,dWo,mWo,ev,Lbe,cWo,fWo,WQ,gWo,hWo,uWo,ov,ybe,pWo,_Wo,UQ,bWo,vWo,FWo,rv,xbe,TWo,MWo,HQ,EWo,CWo,wWo,tv,$be,AWo,LWo,JQ,yWo,xWo,$Wo,av,kbe,kWo,SWo,YQ,RWo,PWo,BWo,nv,Sbe,IWo,NWo,KQ,qWo,jWo,DWo,sv,Rbe,GWo,OWo,ZQ,VWo,XWo,zWo,lv,Pbe,QWo,WWo,eW,UWo,HWo,JWo,iv,Bbe,YWo,KWo,oW,ZWo,eUo,oUo,dv,Ibe,rUo,tUo,rW,aUo,nUo,sUo,mv,Nbe,lUo,iUo,tW,dUo,mUo,cUo,cv,qbe,fUo,gUo,aW,hUo,uUo,pUo,fv,_Uo,jbe,bUo,vUo,Dbe,FUo,TUo,gv,deo,Ad,hv,Gbe,Ox,MUo,Obe,EUo,meo,No,Vx,CUo,Ld,wUo,nW,AUo,LUo,sW,yUo,xUo,$Uo,Xx,kUo,Vbe,SUo,RUo,PUo,Ft,zx,BUo,Xbe,IUo,NUo,yd,qUo,zbe,jUo,DUo,lW,GUo,OUo,VUo,uv,XUo,ro,Qx,zUo,Qbe,QUo,WUo,Za,UUo,Wbe,HUo,JUo,Ube,YUo,KUo,Hbe,ZUo,eHo,oHo,J,pv,Jbe,rHo,tHo,iW,aHo,nHo,sHo,_v,Ybe,lHo,iHo,dW,dHo,mHo,cHo,bv,Kbe,fHo,gHo,mW,hHo,uHo,pHo,vv,Zbe,_Ho,bHo,cW,vHo,FHo,THo,Fv,eve,MHo,EHo,fW,CHo,wHo,AHo,Tv,ove,LHo,yHo,gW,xHo,$Ho,kHo,Mv,rve,SHo,RHo,hW,PHo,BHo,IHo,Ev,tve,NHo,qHo,uW,jHo,DHo,GHo,Cv,ave,OHo,VHo,pW,XHo,zHo,QHo,wv,nve,WHo,UHo,_W,HHo,JHo,YHo,Av,sve,KHo,ZHo,bW,eJo,oJo,rJo,Lv,lve,tJo,aJo,vW,nJo,sJo,lJo,yv,ive,iJo,dJo,FW,mJo,cJo,fJo,xv,dve,gJo,hJo,TW,uJo,pJo,_Jo,$v,mve,bJo,vJo,MW,FJo,TJo,MJo,kv,cve,EJo,CJo,EW,wJo,AJo,LJo,Sv,fve,yJo,xJo,CW,$Jo,kJo,SJo,Rv,gve,RJo,PJo,wW,BJo,IJo,NJo,Pv,hve,qJo,jJo,AW,DJo,GJo,OJo,Bv,uve,VJo,XJo,LW,zJo,QJo,WJo,Iv,pve,UJo,HJo,yW,JJo,YJo,KJo,Nv,_ve,ZJo,eYo,xW,oYo,rYo,tYo,qv,bve,aYo,nYo,$W,sYo,lYo,iYo,jv,vve,dYo,mYo,kW,cYo,fYo,gYo,Dv,Fve,hYo,uYo,SW,pYo,_Yo,bYo,Gv,Tve,vYo,FYo,RW,TYo,MYo,EYo,Ov,Mve,CYo,wYo,PW,AYo,LYo,yYo,Vv,Eve,xYo,$Yo,BW,kYo,SYo,RYo,Xv,Cve,PYo,BYo,IW,IYo,NYo,qYo,zv,wve,jYo,DYo,NW,GYo,OYo,VYo,Qv,Ave,XYo,zYo,qW,QYo,WYo,UYo,Wv,Lve,HYo,JYo,jW,YYo,KYo,ZYo,Uv,yve,eKo,oKo,DW,rKo,tKo,aKo,Hv,xve,nKo,sKo,GW,lKo,iKo,dKo,Jv,$ve,mKo,cKo,kve,fKo,gKo,hKo,Yv,Sve,uKo,pKo,OW,_Ko,bKo,vKo,Kv,Rve,FKo,TKo,VW,MKo,EKo,CKo,Zv,Pve,wKo,AKo,XW,LKo,yKo,xKo,eF,Bve,$Ko,kKo,zW,SKo,RKo,PKo,oF,BKo,Ive,IKo,NKo,Nve,qKo,jKo,rF,ceo,xd,tF,qve,Wx,DKo,jve,GKo,feo,qo,Ux,OKo,$d,VKo,QW,XKo,zKo,WW,QKo,WKo,UKo,Hx,HKo,Dve,JKo,YKo,KKo,Tt,Jx,ZKo,Gve,eZo,oZo,kd,rZo,Ove,tZo,aZo,UW,nZo,sZo,lZo,aF,iZo,to,Yx,dZo,Vve,mZo,cZo,en,fZo,Xve,gZo,hZo,zve,uZo,pZo,Qve,_Zo,bZo,vZo,fe,nF,Wve,FZo,TZo,HW,MZo,EZo,CZo,sF,Uve,wZo,AZo,JW,LZo,yZo,xZo,lF,Hve,$Zo,kZo,YW,SZo,RZo,PZo,iF,Jve,BZo,IZo,KW,NZo,qZo,jZo,dF,Yve,DZo,GZo,ZW,OZo,VZo,XZo,mF,Kve,zZo,QZo,eU,WZo,UZo,HZo,cF,Zve,JZo,YZo,oU,KZo,ZZo,eer,fF,eFe,oer,rer,rU,ter,aer,ner,gF,oFe,ser,ler,tU,ier,der,mer,hF,rFe,cer,fer,aU,ger,her,uer,uF,tFe,per,_er,nU,ber,ver,Fer,pF,aFe,Ter,Mer,sU,Eer,Cer,wer,_F,nFe,Aer,Ler,lU,yer,xer,$er,bF,sFe,ker,Ser,iU,Rer,Per,Ber,vF,lFe,Ier,Ner,dU,qer,jer,Der,FF,iFe,Ger,Oer,mU,Ver,Xer,zer,TF,dFe,Qer,Wer,cU,Uer,Her,Jer,MF,mFe,Yer,Ker,fU,Zer,eor,oor,EF,cFe,ror,tor,gU,aor,nor,sor,CF,fFe,lor,ior,hU,dor,mor,cor,wF,gor,gFe,hor,uor,hFe,por,_or,AF,geo,Sd,LF,uFe,Kx,bor,pFe,vor,heo,jo,Zx,For,Rd,Tor,uU,Mor,Eor,pU,Cor,wor,Aor,e$,Lor,_Fe,yor,xor,$or,Mt,o$,kor,bFe,Sor,Ror,Pd,Por,vFe,Bor,Ior,_U,Nor,qor,jor,yF,Dor,ao,r$,Gor,FFe,Oor,Vor,on,Xor,TFe,zor,Qor,MFe,Wor,Uor,EFe,Hor,Jor,Yor,B,xF,CFe,Kor,Zor,bU,err,orr,rrr,$F,wFe,trr,arr,vU,nrr,srr,lrr,kF,AFe,irr,drr,FU,mrr,crr,frr,SF,LFe,grr,hrr,TU,urr,prr,_rr,RF,yFe,brr,vrr,MU,Frr,Trr,Mrr,PF,xFe,Err,Crr,EU,wrr,Arr,Lrr,BF,$Fe,yrr,xrr,CU,$rr,krr,Srr,IF,kFe,Rrr,Prr,wU,Brr,Irr,Nrr,NF,SFe,qrr,jrr,AU,Drr,Grr,Orr,qF,RFe,Vrr,Xrr,LU,zrr,Qrr,Wrr,jF,PFe,Urr,Hrr,yU,Jrr,Yrr,Krr,DF,BFe,Zrr,etr,xU,otr,rtr,ttr,GF,IFe,atr,ntr,$U,str,ltr,itr,OF,NFe,dtr,mtr,kU,ctr,ftr,gtr,VF,qFe,htr,utr,SU,ptr,_tr,btr,XF,jFe,vtr,Ftr,RU,Ttr,Mtr,Etr,zF,DFe,Ctr,wtr,PU,Atr,Ltr,ytr,QF,GFe,xtr,$tr,BU,ktr,Str,Rtr,WF,OFe,Ptr,Btr,IU,Itr,Ntr,qtr,UF,VFe,jtr,Dtr,NU,Gtr,Otr,Vtr,HF,XFe,Xtr,ztr,qU,Qtr,Wtr,Utr,JF,zFe,Htr,Jtr,jU,Ytr,Ktr,Ztr,YF,QFe,ear,oar,DU,rar,tar,aar,KF,WFe,nar,sar,GU,lar,iar,dar,ZF,UFe,mar,car,OU,far,gar,har,eT,HFe,uar,par,VU,_ar,bar,Far,oT,JFe,Tar,Mar,XU,Ear,Car,war,rT,YFe,Aar,Lar,zU,yar,xar,$ar,tT,KFe,kar,Sar,QU,Rar,Par,Bar,aT,ZFe,Iar,Nar,WU,qar,jar,Dar,nT,eTe,Gar,Oar,UU,Var,Xar,zar,sT,oTe,Qar,War,HU,Uar,Har,Jar,lT,rTe,Yar,Kar,JU,Zar,enr,onr,iT,tTe,rnr,tnr,YU,anr,nnr,snr,dT,aTe,lnr,inr,KU,dnr,mnr,cnr,mT,nTe,fnr,gnr,ZU,hnr,unr,pnr,cT,sTe,_nr,bnr,eH,vnr,Fnr,Tnr,fT,lTe,Mnr,Enr,oH,Cnr,wnr,Anr,gT,iTe,Lnr,ynr,rH,xnr,$nr,knr,hT,dTe,Snr,Rnr,tH,Pnr,Bnr,Inr,uT,mTe,Nnr,qnr,aH,jnr,Dnr,Gnr,pT,cTe,Onr,Vnr,nH,Xnr,znr,Qnr,_T,fTe,Wnr,Unr,sH,Hnr,Jnr,Ynr,bT,gTe,Knr,Znr,lH,esr,osr,rsr,vT,hTe,tsr,asr,iH,nsr,ssr,lsr,FT,uTe,isr,dsr,dH,msr,csr,fsr,TT,pTe,gsr,hsr,mH,usr,psr,_sr,MT,_Te,bsr,vsr,cH,Fsr,Tsr,Msr,ET,bTe,Esr,Csr,fH,wsr,Asr,Lsr,CT,vTe,ysr,xsr,gH,$sr,ksr,Ssr,wT,FTe,Rsr,Psr,hH,Bsr,Isr,Nsr,AT,TTe,qsr,jsr,uH,Dsr,Gsr,Osr,LT,MTe,Vsr,Xsr,pH,zsr,Qsr,Wsr,yT,ETe,Usr,Hsr,_H,Jsr,Ysr,Ksr,xT,CTe,Zsr,elr,bH,olr,rlr,tlr,$T,alr,wTe,nlr,slr,ATe,llr,ilr,kT,ueo,Bd,ST,LTe,t$,dlr,yTe,mlr,peo,Do,a$,clr,Id,flr,vH,glr,hlr,FH,ulr,plr,_lr,n$,blr,xTe,vlr,Flr,Tlr,Et,s$,Mlr,$Te,Elr,Clr,Nd,wlr,kTe,Alr,Llr,TH,ylr,xlr,$lr,RT,klr,no,l$,Slr,STe,Rlr,Plr,rn,Blr,RTe,Ilr,Nlr,PTe,qlr,jlr,BTe,Dlr,Glr,Olr,Z,PT,ITe,Vlr,Xlr,MH,zlr,Qlr,Wlr,BT,NTe,Ulr,Hlr,EH,Jlr,Ylr,Klr,IT,qTe,Zlr,eir,CH,oir,rir,tir,NT,jTe,air,nir,wH,sir,lir,iir,qT,DTe,dir,mir,AH,cir,fir,gir,jT,GTe,hir,uir,LH,pir,_ir,bir,DT,OTe,vir,Fir,yH,Tir,Mir,Eir,GT,VTe,Cir,wir,xH,Air,Lir,yir,OT,XTe,xir,$ir,$H,kir,Sir,Rir,VT,zTe,Pir,Bir,kH,Iir,Nir,qir,XT,QTe,jir,Dir,SH,Gir,Oir,Vir,zT,WTe,Xir,zir,RH,Qir,Wir,Uir,QT,UTe,Hir,Jir,PH,Yir,Kir,Zir,WT,HTe,edr,odr,BH,rdr,tdr,adr,UT,JTe,ndr,sdr,IH,ldr,idr,ddr,HT,YTe,mdr,cdr,NH,fdr,gdr,hdr,JT,KTe,udr,pdr,qH,_dr,bdr,vdr,YT,ZTe,Fdr,Tdr,jH,Mdr,Edr,Cdr,KT,eMe,wdr,Adr,DH,Ldr,ydr,xdr,ZT,oMe,$dr,kdr,GH,Sdr,Rdr,Pdr,eM,rMe,Bdr,Idr,OH,Ndr,qdr,jdr,oM,tMe,Ddr,Gdr,VH,Odr,Vdr,Xdr,rM,aMe,zdr,Qdr,XH,Wdr,Udr,Hdr,tM,nMe,Jdr,Ydr,zH,Kdr,Zdr,emr,aM,sMe,omr,rmr,QH,tmr,amr,nmr,nM,lMe,smr,lmr,WH,imr,dmr,mmr,sM,iMe,cmr,fmr,UH,gmr,hmr,umr,lM,dMe,pmr,_mr,HH,bmr,vmr,Fmr,iM,mMe,Tmr,Mmr,JH,Emr,Cmr,wmr,dM,cMe,Amr,Lmr,YH,ymr,xmr,$mr,mM,fMe,kmr,Smr,KH,Rmr,Pmr,Bmr,cM,gMe,Imr,Nmr,ZH,qmr,jmr,Dmr,fM,Gmr,hMe,Omr,Vmr,uMe,Xmr,zmr,gM,_eo,qd,hM,pMe,i$,Qmr,_Me,Wmr,beo,Go,d$,Umr,jd,Hmr,eJ,Jmr,Ymr,oJ,Kmr,Zmr,ecr,m$,ocr,bMe,rcr,tcr,acr,Ct,c$,ncr,vMe,scr,lcr,Dd,icr,FMe,dcr,mcr,rJ,ccr,fcr,gcr,uM,hcr,so,f$,ucr,TMe,pcr,_cr,tn,bcr,MMe,vcr,Fcr,EMe,Tcr,Mcr,CMe,Ecr,Ccr,wcr,Ue,pM,wMe,Acr,Lcr,tJ,ycr,xcr,$cr,_M,AMe,kcr,Scr,aJ,Rcr,Pcr,Bcr,bM,LMe,Icr,Ncr,nJ,qcr,jcr,Dcr,vM,yMe,Gcr,Ocr,sJ,Vcr,Xcr,zcr,FM,xMe,Qcr,Wcr,lJ,Ucr,Hcr,Jcr,TM,$Me,Ycr,Kcr,iJ,Zcr,efr,ofr,MM,kMe,rfr,tfr,dJ,afr,nfr,sfr,EM,lfr,SMe,ifr,dfr,RMe,mfr,cfr,CM,veo,Gd,wM,PMe,g$,ffr,BMe,gfr,Feo,Oo,h$,hfr,Od,ufr,mJ,pfr,_fr,cJ,bfr,vfr,Ffr,u$,Tfr,IMe,Mfr,Efr,Cfr,wt,p$,wfr,NMe,Afr,Lfr,Vd,yfr,qMe,xfr,$fr,fJ,kfr,Sfr,Rfr,AM,Pfr,lo,_$,Bfr,jMe,Ifr,Nfr,an,qfr,DMe,jfr,Dfr,GMe,Gfr,Ofr,OMe,Vfr,Xfr,zfr,H,LM,VMe,Qfr,Wfr,gJ,Ufr,Hfr,Jfr,yM,XMe,Yfr,Kfr,hJ,Zfr,egr,ogr,xM,zMe,rgr,tgr,uJ,agr,ngr,sgr,$M,QMe,lgr,igr,pJ,dgr,mgr,cgr,kM,WMe,fgr,ggr,_J,hgr,ugr,pgr,SM,UMe,_gr,bgr,bJ,vgr,Fgr,Tgr,RM,HMe,Mgr,Egr,vJ,Cgr,wgr,Agr,PM,JMe,Lgr,ygr,FJ,xgr,$gr,kgr,BM,YMe,Sgr,Rgr,TJ,Pgr,Bgr,Igr,IM,KMe,Ngr,qgr,MJ,jgr,Dgr,Ggr,NM,ZMe,Ogr,Vgr,EJ,Xgr,zgr,Qgr,qM,eEe,Wgr,Ugr,CJ,Hgr,Jgr,Ygr,jM,oEe,Kgr,Zgr,wJ,ehr,ohr,rhr,DM,rEe,thr,ahr,AJ,nhr,shr,lhr,GM,tEe,ihr,dhr,LJ,mhr,chr,fhr,OM,aEe,ghr,hhr,yJ,uhr,phr,_hr,VM,nEe,bhr,vhr,xJ,Fhr,Thr,Mhr,XM,sEe,Ehr,Chr,$J,whr,Ahr,Lhr,zM,lEe,yhr,xhr,kJ,$hr,khr,Shr,QM,iEe,Rhr,Phr,SJ,Bhr,Ihr,Nhr,WM,dEe,qhr,jhr,RJ,Dhr,Ghr,Ohr,UM,mEe,Vhr,Xhr,PJ,zhr,Qhr,Whr,HM,cEe,Uhr,Hhr,BJ,Jhr,Yhr,Khr,JM,fEe,Zhr,eur,IJ,our,rur,tur,YM,gEe,aur,nur,NJ,sur,lur,iur,KM,hEe,dur,mur,qJ,cur,fur,gur,ZM,uEe,hur,uur,jJ,pur,_ur,bur,eE,pEe,vur,Fur,DJ,Tur,Mur,Eur,oE,_Ee,Cur,wur,GJ,Aur,Lur,yur,rE,bEe,xur,$ur,OJ,kur,Sur,Rur,tE,vEe,Pur,Bur,VJ,Iur,Nur,qur,aE,FEe,jur,Dur,XJ,Gur,Our,Vur,nE,TEe,Xur,zur,zJ,Qur,Wur,Uur,sE,MEe,Hur,Jur,QJ,Yur,Kur,Zur,lE,EEe,epr,opr,WJ,rpr,tpr,apr,iE,CEe,npr,spr,UJ,lpr,ipr,dpr,dE,wEe,mpr,cpr,HJ,fpr,gpr,hpr,mE,AEe,upr,ppr,JJ,_pr,bpr,vpr,cE,LEe,Fpr,Tpr,YJ,Mpr,Epr,Cpr,fE,yEe,wpr,Apr,KJ,Lpr,ypr,xpr,gE,$pr,xEe,kpr,Spr,$Ee,Rpr,Ppr,hE,Teo,Xd,uE,kEe,b$,Bpr,SEe,Ipr,Meo,Vo,v$,Npr,zd,qpr,ZJ,jpr,Dpr,eY,Gpr,Opr,Vpr,F$,Xpr,REe,zpr,Qpr,Wpr,At,T$,Upr,PEe,Hpr,Jpr,Qd,Ypr,BEe,Kpr,Zpr,oY,e_r,o_r,r_r,pE,t_r,io,M$,a_r,IEe,n_r,s_r,nn,l_r,NEe,i_r,d_r,qEe,m_r,c_r,jEe,f_r,g_r,h_r,V,_E,DEe,u_r,p_r,rY,__r,b_r,v_r,bE,GEe,F_r,T_r,tY,M_r,E_r,C_r,vE,OEe,w_r,A_r,aY,L_r,y_r,x_r,FE,VEe,$_r,k_r,nY,S_r,R_r,P_r,TE,XEe,B_r,I_r,sY,N_r,q_r,j_r,ME,zEe,D_r,G_r,lY,O_r,V_r,X_r,EE,QEe,z_r,Q_r,iY,W_r,U_r,H_r,CE,WEe,J_r,Y_r,dY,K_r,Z_r,e1r,wE,UEe,o1r,r1r,mY,t1r,a1r,n1r,AE,HEe,s1r,l1r,cY,i1r,d1r,m1r,LE,JEe,c1r,f1r,fY,g1r,h1r,u1r,yE,YEe,p1r,_1r,gY,b1r,v1r,F1r,xE,KEe,T1r,M1r,hY,E1r,C1r,w1r,$E,ZEe,A1r,L1r,uY,y1r,x1r,$1r,kE,e4e,k1r,S1r,pY,R1r,P1r,B1r,SE,o4e,I1r,N1r,_Y,q1r,j1r,D1r,RE,r4e,G1r,O1r,bY,V1r,X1r,z1r,PE,t4e,Q1r,W1r,vY,U1r,H1r,J1r,BE,a4e,Y1r,K1r,FY,Z1r,e2r,o2r,IE,n4e,r2r,t2r,TY,a2r,n2r,s2r,NE,s4e,l2r,i2r,MY,d2r,m2r,c2r,qE,l4e,f2r,g2r,EY,h2r,u2r,p2r,jE,i4e,_2r,b2r,CY,v2r,F2r,T2r,DE,d4e,M2r,E2r,wY,C2r,w2r,A2r,GE,m4e,L2r,y2r,AY,x2r,$2r,k2r,OE,c4e,S2r,R2r,LY,P2r,B2r,I2r,VE,f4e,N2r,q2r,yY,j2r,D2r,G2r,XE,g4e,O2r,V2r,xY,X2r,z2r,Q2r,zE,h4e,W2r,U2r,$Y,H2r,J2r,Y2r,QE,u4e,K2r,Z2r,kY,ebr,obr,rbr,WE,p4e,tbr,abr,SY,nbr,sbr,lbr,UE,_4e,ibr,dbr,RY,mbr,cbr,fbr,HE,b4e,gbr,hbr,PY,ubr,pbr,_br,JE,v4e,bbr,vbr,BY,Fbr,Tbr,Mbr,YE,F4e,Ebr,Cbr,IY,wbr,Abr,Lbr,KE,T4e,ybr,xbr,NY,$br,kbr,Sbr,ZE,M4e,Rbr,Pbr,qY,Bbr,Ibr,Nbr,e4,E4e,qbr,jbr,jY,Dbr,Gbr,Obr,o4,C4e,Vbr,Xbr,DY,zbr,Qbr,Wbr,r4,w4e,Ubr,Hbr,GY,Jbr,Ybr,Kbr,t4,A4e,Zbr,evr,OY,ovr,rvr,tvr,a4,L4e,avr,nvr,VY,svr,lvr,ivr,n4,y4e,dvr,mvr,XY,cvr,fvr,gvr,s4,x4e,hvr,uvr,zY,pvr,_vr,bvr,l4,$4e,vvr,Fvr,QY,Tvr,Mvr,Evr,i4,k4e,Cvr,wvr,WY,Avr,Lvr,yvr,d4,xvr,S4e,$vr,kvr,R4e,Svr,Rvr,m4,Eeo,Wd,c4,P4e,E$,Pvr,B4e,Bvr,Ceo,Xo,C$,Ivr,Ud,Nvr,UY,qvr,jvr,HY,Dvr,Gvr,Ovr,w$,Vvr,I4e,Xvr,zvr,Qvr,Lt,A$,Wvr,N4e,Uvr,Hvr,Hd,Jvr,q4e,Yvr,Kvr,JY,Zvr,eFr,oFr,f4,rFr,mo,L$,tFr,j4e,aFr,nFr,sn,sFr,D4e,lFr,iFr,G4e,dFr,mFr,O4e,cFr,fFr,gFr,V4e,g4,X4e,hFr,uFr,YY,pFr,_Fr,bFr,h4,vFr,z4e,FFr,TFr,Q4e,MFr,EFr,u4,weo,Jd,p4,W4e,y$,CFr,U4e,wFr,Aeo,zo,x$,AFr,Yd,LFr,KY,yFr,xFr,ZY,$Fr,kFr,SFr,$$,RFr,H4e,PFr,BFr,IFr,yt,k$,NFr,J4e,qFr,jFr,Kd,DFr,Y4e,GFr,OFr,eK,VFr,XFr,zFr,_4,QFr,co,S$,WFr,K4e,UFr,HFr,ln,JFr,Z4e,YFr,KFr,eCe,ZFr,eTr,oCe,oTr,rTr,tTr,Zd,b4,rCe,aTr,nTr,oK,sTr,lTr,iTr,v4,tCe,dTr,mTr,rK,cTr,fTr,gTr,F4,aCe,hTr,uTr,tK,pTr,_Tr,bTr,T4,vTr,nCe,FTr,TTr,sCe,MTr,ETr,M4,Leo,em,E4,lCe,R$,CTr,iCe,wTr,yeo,Qo,P$,ATr,om,LTr,aK,yTr,xTr,nK,$Tr,kTr,STr,B$,RTr,dCe,PTr,BTr,ITr,xt,I$,NTr,mCe,qTr,jTr,rm,DTr,cCe,GTr,OTr,sK,VTr,XTr,zTr,C4,QTr,fo,N$,WTr,fCe,UTr,HTr,dn,JTr,gCe,YTr,KTr,hCe,ZTr,eMr,uCe,oMr,rMr,tMr,be,w4,pCe,aMr,nMr,lK,sMr,lMr,iMr,A4,_Ce,dMr,mMr,iK,cMr,fMr,gMr,L4,bCe,hMr,uMr,dK,pMr,_Mr,bMr,y4,vCe,vMr,FMr,mK,TMr,MMr,EMr,bl,FCe,CMr,wMr,cK,AMr,LMr,fK,yMr,xMr,$Mr,x4,TCe,kMr,SMr,gK,RMr,PMr,BMr,vl,MCe,IMr,NMr,hK,qMr,jMr,uK,DMr,GMr,OMr,$4,ECe,VMr,XMr,pK,zMr,QMr,WMr,$t,CCe,UMr,HMr,_K,JMr,YMr,bK,KMr,ZMr,vK,eEr,oEr,rEr,k4,wCe,tEr,aEr,FK,nEr,sEr,lEr,S4,ACe,iEr,dEr,TK,mEr,cEr,fEr,R4,LCe,gEr,hEr,MK,uEr,pEr,_Er,P4,yCe,bEr,vEr,EK,FEr,TEr,MEr,B4,xCe,EEr,CEr,CK,wEr,AEr,LEr,I4,$Ce,yEr,xEr,wK,$Er,kEr,SEr,N4,kCe,REr,PEr,AK,BEr,IEr,NEr,q4,SCe,qEr,jEr,LK,DEr,GEr,OEr,j4,RCe,VEr,XEr,yK,zEr,QEr,WEr,D4,UEr,PCe,HEr,JEr,BCe,YEr,KEr,G4,xeo,tm,O4,ICe,q$,ZEr,NCe,e4r,$eo,Wo,j$,o4r,am,r4r,xK,t4r,a4r,$K,n4r,s4r,l4r,D$,i4r,qCe,d4r,m4r,c4r,kt,G$,f4r,jCe,g4r,h4r,nm,u4r,DCe,p4r,_4r,kK,b4r,v4r,F4r,V4,T4r,go,O$,M4r,GCe,E4r,C4r,mn,w4r,OCe,A4r,L4r,VCe,y4r,x4r,XCe,$4r,k4r,S4r,zCe,X4,QCe,R4r,P4r,SK,B4r,I4r,N4r,z4,q4r,WCe,j4r,D4r,UCe,G4r,O4r,Q4,keo,sm,W4,HCe,V$,V4r,JCe,X4r,Seo,Uo,X$,z4r,lm,Q4r,RK,W4r,U4r,PK,H4r,J4r,Y4r,z$,K4r,YCe,Z4r,eCr,oCr,St,Q$,rCr,KCe,tCr,aCr,im,nCr,ZCe,sCr,lCr,BK,iCr,dCr,mCr,U4,cCr,ho,W$,fCr,e3e,gCr,hCr,cn,uCr,o3e,pCr,_Cr,r3e,bCr,vCr,t3e,FCr,TCr,MCr,a3e,H4,n3e,ECr,CCr,IK,wCr,ACr,LCr,J4,yCr,s3e,xCr,$Cr,l3e,kCr,SCr,Y4,Reo,dm,K4,i3e,U$,RCr,d3e,PCr,Peo,Ho,H$,BCr,mm,ICr,NK,NCr,qCr,qK,jCr,DCr,GCr,J$,OCr,m3e,VCr,XCr,zCr,Rt,Y$,QCr,c3e,WCr,UCr,cm,HCr,f3e,JCr,YCr,jK,KCr,ZCr,e3r,Z4,o3r,uo,K$,r3r,g3e,t3r,a3r,fn,n3r,h3e,s3r,l3r,u3e,i3r,d3r,p3e,m3r,c3r,f3r,_3e,eC,b3e,g3r,h3r,DK,u3r,p3r,_3r,oC,b3r,v3e,v3r,F3r,F3e,T3r,M3r,rC,Beo,fm,tC,T3e,Z$,E3r,M3e,C3r,Ieo,Jo,ek,w3r,gm,A3r,GK,L3r,y3r,OK,x3r,$3r,k3r,ok,S3r,E3e,R3r,P3r,B3r,Pt,rk,I3r,C3e,N3r,q3r,hm,j3r,w3e,D3r,G3r,VK,O3r,V3r,X3r,aC,z3r,po,tk,Q3r,A3e,W3r,U3r,gn,H3r,L3e,J3r,Y3r,y3e,K3r,Z3r,x3e,e5r,o5r,r5r,Pe,nC,$3e,t5r,a5r,XK,n5r,s5r,l5r,sC,k3e,i5r,d5r,zK,m5r,c5r,f5r,lC,S3e,g5r,h5r,QK,u5r,p5r,_5r,iC,R3e,b5r,v5r,WK,F5r,T5r,M5r,dC,P3e,E5r,C5r,UK,w5r,A5r,L5r,mC,B3e,y5r,x5r,HK,$5r,k5r,S5r,cC,I3e,R5r,P5r,JK,B5r,I5r,N5r,fC,N3e,q5r,j5r,YK,D5r,G5r,O5r,gC,q3e,V5r,X5r,KK,z5r,Q5r,W5r,hC,U5r,j3e,H5r,J5r,D3e,Y5r,K5r,uC,Neo,um,pC,G3e,ak,Z5r,O3e,e0r,qeo,Yo,nk,o0r,pm,r0r,ZK,t0r,a0r,eZ,n0r,s0r,l0r,sk,i0r,V3e,d0r,m0r,c0r,Bt,lk,f0r,X3e,g0r,h0r,_m,u0r,z3e,p0r,_0r,oZ,b0r,v0r,F0r,_C,T0r,_o,ik,M0r,Q3e,E0r,C0r,hn,w0r,W3e,A0r,L0r,U3e,y0r,x0r,H3e,$0r,k0r,S0r,ct,bC,J3e,R0r,P0r,rZ,B0r,I0r,N0r,vC,Y3e,q0r,j0r,tZ,D0r,G0r,O0r,FC,K3e,V0r,X0r,aZ,z0r,Q0r,W0r,TC,Z3e,U0r,H0r,nZ,J0r,Y0r,K0r,MC,e5e,Z0r,ewr,sZ,owr,rwr,twr,EC,awr,o5e,nwr,swr,r5e,lwr,iwr,CC,jeo,bm,wC,t5e,dk,dwr,a5e,mwr,Deo,Ko,mk,cwr,vm,fwr,lZ,gwr,hwr,iZ,uwr,pwr,_wr,ck,bwr,n5e,vwr,Fwr,Twr,It,fk,Mwr,s5e,Ewr,Cwr,Fm,wwr,l5e,Awr,Lwr,dZ,ywr,xwr,$wr,AC,kwr,bo,gk,Swr,i5e,Rwr,Pwr,un,Bwr,d5e,Iwr,Nwr,m5e,qwr,jwr,c5e,Dwr,Gwr,Owr,Le,LC,f5e,Vwr,Xwr,mZ,zwr,Qwr,Wwr,yC,g5e,Uwr,Hwr,cZ,Jwr,Ywr,Kwr,xC,h5e,Zwr,eAr,fZ,oAr,rAr,tAr,$C,u5e,aAr,nAr,gZ,sAr,lAr,iAr,kC,p5e,dAr,mAr,hZ,cAr,fAr,gAr,SC,_5e,hAr,uAr,uZ,pAr,_Ar,bAr,RC,b5e,vAr,FAr,pZ,TAr,MAr,EAr,PC,v5e,CAr,wAr,_Z,AAr,LAr,yAr,BC,F5e,xAr,$Ar,bZ,kAr,SAr,RAr,IC,T5e,PAr,BAr,vZ,IAr,NAr,qAr,NC,jAr,M5e,DAr,GAr,E5e,OAr,VAr,qC,Geo,Tm,jC,C5e,hk,XAr,w5e,zAr,Oeo,Zo,uk,QAr,Mm,WAr,FZ,UAr,HAr,TZ,JAr,YAr,KAr,pk,ZAr,A5e,e6r,o6r,r6r,Nt,_k,t6r,L5e,a6r,n6r,Em,s6r,y5e,l6r,i6r,MZ,d6r,m6r,c6r,DC,f6r,vo,bk,g6r,x5e,h6r,u6r,pn,p6r,$5e,_6r,b6r,k5e,v6r,F6r,S5e,T6r,M6r,E6r,vk,GC,R5e,C6r,w6r,EZ,A6r,L6r,y6r,OC,P5e,x6r,$6r,CZ,k6r,S6r,R6r,VC,P6r,B5e,B6r,I6r,I5e,N6r,q6r,XC,Veo,Cm,zC,N5e,Fk,j6r,q5e,D6r,Xeo,er,Tk,G6r,wm,O6r,wZ,V6r,X6r,AZ,z6r,Q6r,W6r,Mk,U6r,j5e,H6r,J6r,Y6r,qt,Ek,K6r,D5e,Z6r,e7r,Am,o7r,G5e,r7r,t7r,LZ,a7r,n7r,s7r,QC,l7r,Fo,Ck,i7r,O5e,d7r,m7r,_n,c7r,V5e,f7r,g7r,X5e,h7r,u7r,z5e,p7r,_7r,b7r,ft,WC,Q5e,v7r,F7r,yZ,T7r,M7r,E7r,UC,W5e,C7r,w7r,xZ,A7r,L7r,y7r,HC,U5e,x7r,$7r,$Z,k7r,S7r,R7r,JC,H5e,P7r,B7r,kZ,I7r,N7r,q7r,YC,J5e,j7r,D7r,SZ,G7r,O7r,V7r,KC,X7r,Y5e,z7r,Q7r,K5e,W7r,U7r,ZC,zeo,Lm,e3,Z5e,wk,H7r,e0e,J7r,Qeo,or,Ak,Y7r,ym,K7r,RZ,Z7r,eLr,PZ,oLr,rLr,tLr,Lk,aLr,o0e,nLr,sLr,lLr,jt,yk,iLr,r0e,dLr,mLr,xm,cLr,t0e,fLr,gLr,BZ,hLr,uLr,pLr,o3,_Lr,To,xk,bLr,a0e,vLr,FLr,bn,TLr,n0e,MLr,ELr,s0e,CLr,wLr,l0e,ALr,LLr,yLr,vn,r3,i0e,xLr,$Lr,IZ,kLr,SLr,RLr,t3,d0e,PLr,BLr,NZ,ILr,NLr,qLr,a3,m0e,jLr,DLr,qZ,GLr,OLr,VLr,n3,c0e,XLr,zLr,jZ,QLr,WLr,ULr,s3,HLr,f0e,JLr,YLr,g0e,KLr,ZLr,l3,Weo,$m,i3,h0e,$k,eyr,u0e,oyr,Ueo,rr,kk,ryr,km,tyr,DZ,ayr,nyr,GZ,syr,lyr,iyr,Sk,dyr,p0e,myr,cyr,fyr,Dt,Rk,gyr,_0e,hyr,uyr,Sm,pyr,b0e,_yr,byr,OZ,vyr,Fyr,Tyr,d3,Myr,Mo,Pk,Eyr,v0e,Cyr,wyr,Fn,Ayr,F0e,Lyr,yyr,T0e,xyr,$yr,M0e,kyr,Syr,Ryr,Tn,m3,E0e,Pyr,Byr,VZ,Iyr,Nyr,qyr,c3,C0e,jyr,Dyr,XZ,Gyr,Oyr,Vyr,f3,w0e,Xyr,zyr,zZ,Qyr,Wyr,Uyr,g3,A0e,Hyr,Jyr,QZ,Yyr,Kyr,Zyr,h3,e8r,L0e,o8r,r8r,y0e,t8r,a8r,u3,Heo,Rm,p3,x0e,Bk,n8r,$0e,s8r,Jeo,tr,Ik,l8r,Pm,i8r,WZ,d8r,m8r,UZ,c8r,f8r,g8r,Nk,h8r,k0e,u8r,p8r,_8r,Gt,qk,b8r,S0e,v8r,F8r,Bm,T8r,R0e,M8r,E8r,HZ,C8r,w8r,A8r,_3,L8r,Eo,jk,y8r,P0e,x8r,$8r,Mn,k8r,B0e,S8r,R8r,I0e,P8r,B8r,N0e,I8r,N8r,q8r,q0e,b3,j0e,j8r,D8r,JZ,G8r,O8r,V8r,v3,X8r,D0e,z8r,Q8r,G0e,W8r,U8r,F3,Yeo,Im,T3,O0e,Dk,H8r,V0e,J8r,Keo,ar,Gk,Y8r,Nm,K8r,YZ,Z8r,e9r,KZ,o9r,r9r,t9r,Ok,a9r,X0e,n9r,s9r,l9r,Ot,Vk,i9r,z0e,d9r,m9r,qm,c9r,Q0e,f9r,g9r,ZZ,h9r,u9r,p9r,M3,_9r,Co,Xk,b9r,W0e,v9r,F9r,En,T9r,U0e,M9r,E9r,H0e,C9r,w9r,J0e,A9r,L9r,y9r,gt,E3,Y0e,x9r,$9r,eee,k9r,S9r,R9r,C3,K0e,P9r,B9r,oee,I9r,N9r,q9r,w3,Z0e,j9r,D9r,ree,G9r,O9r,V9r,A3,ewe,X9r,z9r,tee,Q9r,W9r,U9r,L3,owe,H9r,J9r,aee,Y9r,K9r,Z9r,y3,exr,rwe,oxr,rxr,twe,txr,axr,x3,Zeo,jm,$3,awe,zk,nxr,nwe,sxr,eoo,nr,Qk,lxr,Dm,ixr,nee,dxr,mxr,see,cxr,fxr,gxr,Wk,hxr,swe,uxr,pxr,_xr,Vt,Uk,bxr,lwe,vxr,Fxr,Gm,Txr,iwe,Mxr,Exr,lee,Cxr,wxr,Axr,k3,Lxr,wo,Hk,yxr,dwe,xxr,$xr,Cn,kxr,mwe,Sxr,Rxr,cwe,Pxr,Bxr,fwe,Ixr,Nxr,qxr,gwe,S3,hwe,jxr,Dxr,iee,Gxr,Oxr,Vxr,R3,Xxr,uwe,zxr,Qxr,pwe,Wxr,Uxr,P3,ooo,Om,B3,_we,Jk,Hxr,bwe,Jxr,roo,sr,Yk,Yxr,Vm,Kxr,dee,Zxr,e$r,mee,o$r,r$r,t$r,Kk,a$r,vwe,n$r,s$r,l$r,Xt,Zk,i$r,Fwe,d$r,m$r,Xm,c$r,Twe,f$r,g$r,cee,h$r,u$r,p$r,I3,_$r,Ir,eS,b$r,Mwe,v$r,F$r,wn,T$r,Ewe,M$r,E$r,Cwe,C$r,w$r,wwe,A$r,L$r,y$r,I,N3,Awe,x$r,$$r,fee,k$r,S$r,R$r,q3,Lwe,P$r,B$r,gee,I$r,N$r,q$r,j3,ywe,j$r,D$r,hee,G$r,O$r,V$r,D3,xwe,X$r,z$r,uee,Q$r,W$r,U$r,G3,$we,H$r,J$r,pee,Y$r,K$r,Z$r,O3,kwe,ekr,okr,_ee,rkr,tkr,akr,V3,Swe,nkr,skr,bee,lkr,ikr,dkr,X3,Rwe,mkr,ckr,vee,fkr,gkr,hkr,z3,Pwe,ukr,pkr,Fee,_kr,bkr,vkr,Q3,Bwe,Fkr,Tkr,Tee,Mkr,Ekr,Ckr,W3,Iwe,wkr,Akr,Mee,Lkr,ykr,xkr,U3,Nwe,$kr,kkr,Eee,Skr,Rkr,Pkr,H3,qwe,Bkr,Ikr,Cee,Nkr,qkr,jkr,J3,jwe,Dkr,Gkr,wee,Okr,Vkr,Xkr,Y3,Dwe,zkr,Qkr,Aee,Wkr,Ukr,Hkr,K3,Gwe,Jkr,Ykr,Lee,Kkr,Zkr,eSr,Z3,Owe,oSr,rSr,yee,tSr,aSr,nSr,e5,Vwe,sSr,lSr,xee,iSr,dSr,mSr,Fl,Xwe,cSr,fSr,$ee,gSr,hSr,kee,uSr,pSr,_Sr,o5,zwe,bSr,vSr,See,FSr,TSr,MSr,r5,Qwe,ESr,CSr,Ree,wSr,ASr,LSr,t5,Wwe,ySr,xSr,Pee,$Sr,kSr,SSr,a5,Uwe,RSr,PSr,Bee,BSr,ISr,NSr,n5,Hwe,qSr,jSr,Iee,DSr,GSr,OSr,s5,Jwe,VSr,XSr,Nee,zSr,QSr,WSr,l5,Ywe,USr,HSr,qee,JSr,YSr,KSr,i5,Kwe,ZSr,eRr,jee,oRr,rRr,tRr,d5,Zwe,aRr,nRr,Dee,sRr,lRr,iRr,m5,eAe,dRr,mRr,Gee,cRr,fRr,gRr,c5,oAe,hRr,uRr,Oee,pRr,_Rr,bRr,f5,rAe,vRr,FRr,Vee,TRr,MRr,ERr,g5,tAe,CRr,wRr,Xee,ARr,LRr,yRr,h5,aAe,xRr,$Rr,zee,kRr,SRr,RRr,u5,nAe,PRr,BRr,Qee,IRr,NRr,qRr,p5,sAe,jRr,DRr,Wee,GRr,ORr,VRr,_5,lAe,XRr,zRr,Uee,QRr,WRr,URr,b5,iAe,HRr,JRr,Hee,YRr,KRr,ZRr,v5,dAe,ePr,oPr,Jee,rPr,tPr,aPr,F5,mAe,nPr,sPr,Yee,lPr,iPr,dPr,T5,cAe,mPr,cPr,Kee,fPr,gPr,hPr,M5,fAe,uPr,pPr,Zee,_Pr,bPr,vPr,E5,gAe,FPr,TPr,eoe,MPr,EPr,CPr,C5,hAe,wPr,APr,ooe,LPr,yPr,xPr,w5,uAe,$Pr,kPr,roe,SPr,RPr,PPr,A5,pAe,BPr,IPr,toe,NPr,qPr,jPr,L5,_Ae,DPr,GPr,aoe,OPr,VPr,XPr,y5,bAe,zPr,QPr,noe,WPr,UPr,HPr,x5,vAe,JPr,YPr,soe,KPr,ZPr,eBr,$5,FAe,oBr,rBr,loe,tBr,aBr,nBr,k5,TAe,sBr,lBr,ioe,iBr,dBr,mBr,S5,MAe,cBr,fBr,doe,gBr,hBr,uBr,R5,EAe,pBr,_Br,moe,bBr,vBr,FBr,P5,CAe,TBr,MBr,coe,EBr,CBr,wBr,B5,wAe,ABr,LBr,foe,yBr,xBr,$Br,I5,AAe,kBr,SBr,goe,RBr,PBr,BBr,N5,too,zm,q5,LAe,oS,IBr,yAe,NBr,aoo,lr,rS,qBr,Qm,jBr,hoe,DBr,GBr,uoe,OBr,VBr,XBr,tS,zBr,xAe,QBr,WBr,UBr,zt,aS,HBr,$Ae,JBr,YBr,Wm,KBr,kAe,ZBr,eIr,poe,oIr,rIr,tIr,j5,aIr,Nr,nS,nIr,SAe,sIr,lIr,An,iIr,RAe,dIr,mIr,PAe,cIr,fIr,BAe,gIr,hIr,uIr,se,D5,IAe,pIr,_Ir,_oe,bIr,vIr,FIr,G5,NAe,TIr,MIr,boe,EIr,CIr,wIr,O5,qAe,AIr,LIr,voe,yIr,xIr,$Ir,V5,jAe,kIr,SIr,Foe,RIr,PIr,BIr,X5,DAe,IIr,NIr,Toe,qIr,jIr,DIr,z5,GAe,GIr,OIr,Moe,VIr,XIr,zIr,Q5,OAe,QIr,WIr,Eoe,UIr,HIr,JIr,W5,VAe,YIr,KIr,Coe,ZIr,eNr,oNr,U5,XAe,rNr,tNr,woe,aNr,nNr,sNr,H5,zAe,lNr,iNr,Aoe,dNr,mNr,cNr,J5,QAe,fNr,gNr,Loe,hNr,uNr,pNr,Y5,WAe,_Nr,bNr,yoe,vNr,FNr,TNr,K5,UAe,MNr,ENr,xoe,CNr,wNr,ANr,Z5,HAe,LNr,yNr,$oe,xNr,$Nr,kNr,e0,JAe,SNr,RNr,koe,PNr,BNr,INr,o0,YAe,NNr,qNr,Soe,jNr,DNr,GNr,r0,KAe,ONr,VNr,Roe,XNr,zNr,QNr,t0,ZAe,WNr,UNr,Poe,HNr,JNr,YNr,a0,e6e,KNr,ZNr,Boe,eqr,oqr,rqr,n0,o6e,tqr,aqr,Ioe,nqr,sqr,lqr,s0,r6e,iqr,dqr,Noe,mqr,cqr,fqr,l0,t6e,gqr,hqr,qoe,uqr,pqr,_qr,i0,a6e,bqr,vqr,joe,Fqr,Tqr,Mqr,d0,noo,Um,m0,n6e,sS,Eqr,s6e,Cqr,soo,ir,lS,wqr,Hm,Aqr,Doe,Lqr,yqr,Goe,xqr,$qr,kqr,iS,Sqr,l6e,Rqr,Pqr,Bqr,Qt,dS,Iqr,i6e,Nqr,qqr,Jm,jqr,d6e,Dqr,Gqr,Ooe,Oqr,Vqr,Xqr,c0,zqr,qr,mS,Qqr,m6e,Wqr,Uqr,Ln,Hqr,c6e,Jqr,Yqr,f6e,Kqr,Zqr,g6e,ejr,ojr,rjr,Me,f0,h6e,tjr,ajr,Voe,njr,sjr,ljr,g0,u6e,ijr,djr,Xoe,mjr,cjr,fjr,h0,p6e,gjr,hjr,zoe,ujr,pjr,_jr,u0,_6e,bjr,vjr,Qoe,Fjr,Tjr,Mjr,p0,b6e,Ejr,Cjr,Woe,wjr,Ajr,Ljr,_0,v6e,yjr,xjr,Uoe,$jr,kjr,Sjr,b0,F6e,Rjr,Pjr,Hoe,Bjr,Ijr,Njr,v0,T6e,qjr,jjr,Joe,Djr,Gjr,Ojr,F0,M6e,Vjr,Xjr,Yoe,zjr,Qjr,Wjr,T0,E6e,Ujr,Hjr,Koe,Jjr,Yjr,Kjr,M0,C6e,Zjr,eDr,Zoe,oDr,rDr,tDr,E0,w6e,aDr,nDr,ere,sDr,lDr,iDr,C0,A6e,dDr,mDr,ore,cDr,fDr,gDr,w0,L6e,hDr,uDr,rre,pDr,_Dr,bDr,A0,loo,Ym,L0,y6e,cS,vDr,x6e,FDr,ioo,dr,fS,TDr,Km,MDr,tre,EDr,CDr,are,wDr,ADr,LDr,gS,yDr,$6e,xDr,$Dr,kDr,Wt,hS,SDr,k6e,RDr,PDr,Zm,BDr,S6e,IDr,NDr,nre,qDr,jDr,DDr,y0,GDr,jr,uS,ODr,R6e,VDr,XDr,yn,zDr,P6e,QDr,WDr,B6e,UDr,HDr,I6e,JDr,YDr,KDr,Be,x0,N6e,ZDr,eGr,sre,oGr,rGr,tGr,$0,q6e,aGr,nGr,lre,sGr,lGr,iGr,Tl,j6e,dGr,mGr,ire,cGr,fGr,dre,gGr,hGr,uGr,k0,D6e,pGr,_Gr,mre,bGr,vGr,FGr,S0,G6e,TGr,MGr,cre,EGr,CGr,wGr,R0,O6e,AGr,LGr,fre,yGr,xGr,$Gr,P0,V6e,kGr,SGr,gre,RGr,PGr,BGr,B0,X6e,IGr,NGr,hre,qGr,jGr,DGr,I0,z6e,GGr,OGr,ure,VGr,XGr,zGr,N0,doo,ec,q0,Q6e,pS,QGr,W6e,WGr,moo,mr,_S,UGr,oc,HGr,pre,JGr,YGr,_re,KGr,ZGr,eOr,bS,oOr,U6e,rOr,tOr,aOr,Ut,vS,nOr,H6e,sOr,lOr,rc,iOr,J6e,dOr,mOr,bre,cOr,fOr,gOr,j0,hOr,Dr,FS,uOr,Y6e,pOr,_Or,xn,bOr,K6e,vOr,FOr,Z6e,TOr,MOr,e7e,EOr,COr,wOr,tc,D0,o7e,AOr,LOr,vre,yOr,xOr,$Or,G0,r7e,kOr,SOr,Fre,ROr,POr,BOr,O0,t7e,IOr,NOr,Tre,qOr,jOr,DOr,V0,coo,ac,X0,a7e,TS,GOr,n7e,OOr,foo,cr,MS,VOr,nc,XOr,Mre,zOr,QOr,Ere,WOr,UOr,HOr,ES,JOr,s7e,YOr,KOr,ZOr,Ht,CS,eVr,l7e,oVr,rVr,sc,tVr,i7e,aVr,nVr,Cre,sVr,lVr,iVr,z0,dVr,Gr,wS,mVr,d7e,cVr,fVr,$n,gVr,m7e,hVr,uVr,c7e,pVr,_Vr,f7e,bVr,vVr,FVr,ge,Q0,g7e,TVr,MVr,wre,EVr,CVr,wVr,W0,h7e,AVr,LVr,Are,yVr,xVr,$Vr,U0,u7e,kVr,SVr,Lre,RVr,PVr,BVr,H0,p7e,IVr,NVr,yre,qVr,jVr,DVr,J0,_7e,GVr,OVr,xre,VVr,XVr,zVr,Y0,b7e,QVr,WVr,$re,UVr,HVr,JVr,K0,v7e,YVr,KVr,kre,ZVr,eXr,oXr,Z0,F7e,rXr,tXr,Sre,aXr,nXr,sXr,ew,T7e,lXr,iXr,Rre,dXr,mXr,cXr,ow,M7e,fXr,gXr,Pre,hXr,uXr,pXr,rw,E7e,_Xr,bXr,Bre,vXr,FXr,TXr,tw,C7e,MXr,EXr,Ire,CXr,wXr,AXr,aw,w7e,LXr,yXr,Nre,xXr,$Xr,kXr,nw,A7e,SXr,RXr,qre,PXr,BXr,IXr,sw,L7e,NXr,qXr,jre,jXr,DXr,GXr,lw,y7e,OXr,VXr,Dre,XXr,zXr,QXr,iw,x7e,WXr,UXr,Gre,HXr,JXr,YXr,dw,$7e,KXr,ZXr,Ore,ezr,ozr,rzr,mw,k7e,tzr,azr,Vre,nzr,szr,lzr,cw,S7e,izr,dzr,Xre,mzr,czr,fzr,fw,goo,lc,gw,R7e,AS,gzr,P7e,hzr,hoo,fr,LS,uzr,ic,pzr,zre,_zr,bzr,Qre,vzr,Fzr,Tzr,yS,Mzr,B7e,Ezr,Czr,wzr,Jt,xS,Azr,I7e,Lzr,yzr,dc,xzr,N7e,$zr,kzr,Wre,Szr,Rzr,Pzr,hw,Bzr,Or,$S,Izr,q7e,Nzr,qzr,kn,jzr,j7e,Dzr,Gzr,D7e,Ozr,Vzr,G7e,Xzr,zzr,Qzr,ye,uw,O7e,Wzr,Uzr,Ure,Hzr,Jzr,Yzr,pw,V7e,Kzr,Zzr,Hre,eQr,oQr,rQr,_w,X7e,tQr,aQr,Jre,nQr,sQr,lQr,bw,z7e,iQr,dQr,Yre,mQr,cQr,fQr,vw,Q7e,gQr,hQr,Kre,uQr,pQr,_Qr,Fw,W7e,bQr,vQr,Zre,FQr,TQr,MQr,Tw,U7e,EQr,CQr,ete,wQr,AQr,LQr,Mw,H7e,yQr,xQr,ote,$Qr,kQr,SQr,Ew,J7e,RQr,PQr,rte,BQr,IQr,NQr,Cw,Y7e,qQr,jQr,tte,DQr,GQr,OQr,ww,uoo,mc,Aw,K7e,kS,VQr,Z7e,XQr,poo,gr,SS,zQr,cc,QQr,ate,WQr,UQr,nte,HQr,JQr,YQr,RS,KQr,eLe,ZQr,eWr,oWr,Yt,PS,rWr,oLe,tWr,aWr,fc,nWr,rLe,sWr,lWr,ste,iWr,dWr,mWr,Lw,cWr,Vr,BS,fWr,tLe,gWr,hWr,Sn,uWr,aLe,pWr,_Wr,nLe,bWr,vWr,sLe,FWr,TWr,MWr,re,yw,lLe,EWr,CWr,lte,wWr,AWr,LWr,xw,iLe,yWr,xWr,ite,$Wr,kWr,SWr,$w,dLe,RWr,PWr,dte,BWr,IWr,NWr,kw,mLe,qWr,jWr,mte,DWr,GWr,OWr,Sw,cLe,VWr,XWr,cte,zWr,QWr,WWr,Rw,fLe,UWr,HWr,fte,JWr,YWr,KWr,Pw,gLe,ZWr,eUr,gte,oUr,rUr,tUr,Bw,hLe,aUr,nUr,hte,sUr,lUr,iUr,Iw,uLe,dUr,mUr,ute,cUr,fUr,gUr,Nw,pLe,hUr,uUr,pte,pUr,_Ur,bUr,qw,_Le,vUr,FUr,_te,TUr,MUr,EUr,jw,bLe,CUr,wUr,bte,AUr,LUr,yUr,Dw,vLe,xUr,$Ur,vte,kUr,SUr,RUr,Gw,FLe,PUr,BUr,Fte,IUr,NUr,qUr,Ow,TLe,jUr,DUr,Tte,GUr,OUr,VUr,Vw,MLe,XUr,zUr,Mte,QUr,WUr,UUr,Xw,ELe,HUr,JUr,Ete,YUr,KUr,ZUr,zw,CLe,eHr,oHr,Cte,rHr,tHr,aHr,Qw,wLe,nHr,sHr,wte,lHr,iHr,dHr,Ww,ALe,mHr,cHr,Ate,fHr,gHr,hHr,Uw,LLe,uHr,pHr,Lte,_Hr,bHr,vHr,Hw,yLe,FHr,THr,yte,MHr,EHr,CHr,Jw,xLe,wHr,AHr,xte,LHr,yHr,xHr,Yw,$Le,$Hr,kHr,$te,SHr,RHr,PHr,Kw,kLe,BHr,IHr,kte,NHr,qHr,jHr,Zw,SLe,DHr,GHr,Ste,OHr,VHr,XHr,eA,RLe,zHr,QHr,Rte,WHr,UHr,HHr,oA,_oo,gc,rA,PLe,IS,JHr,BLe,YHr,boo,hr,NS,KHr,hc,ZHr,Pte,eJr,oJr,Bte,rJr,tJr,aJr,qS,nJr,ILe,sJr,lJr,iJr,Kt,jS,dJr,NLe,mJr,cJr,uc,fJr,qLe,gJr,hJr,Ite,uJr,pJr,_Jr,tA,bJr,Xr,DS,vJr,jLe,FJr,TJr,Rn,MJr,DLe,EJr,CJr,GLe,wJr,AJr,OLe,LJr,yJr,xJr,ve,aA,VLe,$Jr,kJr,Nte,SJr,RJr,PJr,nA,XLe,BJr,IJr,qte,NJr,qJr,jJr,sA,zLe,DJr,GJr,jte,OJr,VJr,XJr,lA,QLe,zJr,QJr,Dte,WJr,UJr,HJr,iA,WLe,JJr,YJr,Gte,KJr,ZJr,eYr,dA,ULe,oYr,rYr,Ote,tYr,aYr,nYr,mA,HLe,sYr,lYr,Vte,iYr,dYr,mYr,cA,JLe,cYr,fYr,Xte,gYr,hYr,uYr,fA,YLe,pYr,_Yr,zte,bYr,vYr,FYr,gA,KLe,TYr,MYr,Qte,EYr,CYr,wYr,hA,ZLe,AYr,LYr,Wte,yYr,xYr,$Yr,uA,eye,kYr,SYr,Ute,RYr,PYr,BYr,pA,oye,IYr,NYr,Hte,qYr,jYr,DYr,_A,rye,GYr,OYr,Jte,VYr,XYr,zYr,bA,tye,QYr,WYr,Yte,UYr,HYr,JYr,vA,aye,YYr,KYr,Kte,ZYr,eKr,oKr,FA,nye,rKr,tKr,Zte,aKr,nKr,sKr,TA,voo,pc,MA,sye,GS,lKr,lye,iKr,Foo,ur,OS,dKr,_c,mKr,eae,cKr,fKr,oae,gKr,hKr,uKr,VS,pKr,iye,_Kr,bKr,vKr,Zt,XS,FKr,dye,TKr,MKr,bc,EKr,mye,CKr,wKr,rae,AKr,LKr,yKr,EA,xKr,zr,zS,$Kr,cye,kKr,SKr,Pn,RKr,fye,PKr,BKr,gye,IKr,NKr,hye,qKr,jKr,DKr,QS,CA,uye,GKr,OKr,tae,VKr,XKr,zKr,wA,pye,QKr,WKr,aae,UKr,HKr,JKr,AA,Too,vc,LA,_ye,WS,YKr,bye,KKr,Moo,pr,US,ZKr,Fc,eZr,nae,oZr,rZr,sae,tZr,aZr,nZr,HS,sZr,vye,lZr,iZr,dZr,ea,JS,mZr,Fye,cZr,fZr,Tc,gZr,Tye,hZr,uZr,lae,pZr,_Zr,bZr,yA,vZr,Qr,YS,FZr,Mye,TZr,MZr,Bn,EZr,Eye,CZr,wZr,Cye,AZr,LZr,wye,yZr,xZr,$Zr,Aye,xA,Lye,kZr,SZr,iae,RZr,PZr,BZr,$A,Eoo,Mc,kA,yye,KS,IZr,xye,NZr,Coo,_r,ZS,qZr,Ec,jZr,dae,DZr,GZr,mae,OZr,VZr,XZr,eR,zZr,$ye,QZr,WZr,UZr,oa,oR,HZr,kye,JZr,YZr,Cc,KZr,Sye,ZZr,eet,cae,oet,ret,tet,SA,aet,Wr,rR,net,Rye,set,iet,In,det,Pye,met,cet,Bye,fet,get,Iye,het,uet,pet,Nye,RA,qye,_et,bet,fae,vet,Fet,Tet,PA,woo,wc,BA,jye,tR,Met,Dye,Eet,Aoo,br,aR,Cet,Ac,wet,gae,Aet,Let,hae,yet,xet,$et,nR,ket,Gye,Set,Ret,Pet,ra,sR,Bet,Oye,Iet,Net,Lc,qet,Vye,jet,Det,uae,Get,Oet,Vet,IA,Xet,Ur,lR,zet,Xye,Qet,Wet,Nn,Uet,zye,Het,Jet,Qye,Yet,Ket,Wye,Zet,eot,oot,de,NA,Uye,rot,tot,pae,aot,not,sot,qA,Hye,lot,iot,_ae,dot,mot,cot,jA,Jye,fot,got,bae,hot,uot,pot,DA,Yye,_ot,bot,vae,vot,Fot,Tot,GA,Kye,Mot,Eot,Fae,Cot,wot,Aot,OA,Zye,Lot,yot,Tae,xot,$ot,kot,VA,e8e,Sot,Rot,Mae,Pot,Bot,Iot,XA,o8e,Not,qot,Eae,jot,Dot,Got,zA,r8e,Oot,Vot,Cae,Xot,zot,Qot,QA,t8e,Wot,Uot,wae,Hot,Jot,Yot,WA,a8e,Kot,Zot,Aae,ert,ort,rrt,UA,n8e,trt,art,Lae,nrt,srt,lrt,HA,s8e,irt,drt,yae,mrt,crt,frt,JA,l8e,grt,hrt,xae,urt,prt,_rt,YA,i8e,brt,vrt,$ae,Frt,Trt,Mrt,KA,d8e,Ert,Crt,kae,wrt,Art,Lrt,ZA,m8e,yrt,xrt,Sae,$rt,krt,Srt,e6,c8e,Rrt,Prt,Rae,Brt,Irt,Nrt,o6,f8e,qrt,jrt,Pae,Drt,Grt,Ort,r6,g8e,Vrt,Xrt,Bae,zrt,Qrt,Wrt,t6,h8e,Urt,Hrt,Iae,Jrt,Yrt,Krt,a6,Loo,yc,n6,u8e,iR,Zrt,p8e,ett,yoo,vr,dR,ott,xc,rtt,Nae,ttt,att,qae,ntt,stt,ltt,mR,itt,_8e,dtt,mtt,ctt,ta,cR,ftt,b8e,gtt,htt,$c,utt,v8e,ptt,_tt,jae,btt,vtt,Ftt,s6,Ttt,Hr,fR,Mtt,F8e,Ett,Ctt,qn,wtt,T8e,Att,Ltt,M8e,ytt,xtt,E8e,$tt,ktt,Stt,me,l6,C8e,Rtt,Ptt,Dae,Btt,Itt,Ntt,i6,w8e,qtt,jtt,Gae,Dtt,Gtt,Ott,d6,A8e,Vtt,Xtt,Oae,ztt,Qtt,Wtt,m6,L8e,Utt,Htt,Vae,Jtt,Ytt,Ktt,c6,y8e,Ztt,eat,Xae,oat,rat,tat,f6,x8e,aat,nat,zae,sat,lat,iat,g6,$8e,dat,mat,Qae,cat,fat,gat,h6,k8e,hat,uat,Wae,pat,_at,bat,u6,S8e,vat,Fat,Uae,Tat,Mat,Eat,p6,R8e,Cat,wat,Hae,Aat,Lat,yat,_6,P8e,xat,$at,Jae,kat,Sat,Rat,b6,B8e,Pat,Bat,Yae,Iat,Nat,qat,v6,I8e,jat,Dat,Kae,Gat,Oat,Vat,F6,N8e,Xat,zat,Zae,Qat,Wat,Uat,T6,q8e,Hat,Jat,ene,Yat,Kat,Zat,M6,j8e,ent,ont,one,rnt,tnt,ant,E6,D8e,nnt,snt,rne,lnt,int,dnt,C6,G8e,mnt,cnt,tne,fnt,gnt,hnt,w6,O8e,unt,pnt,ane,_nt,bnt,vnt,A6,V8e,Fnt,Tnt,nne,Mnt,Ent,Cnt,L6,X8e,wnt,Ant,sne,Lnt,ynt,xnt,y6,xoo,kc,x6,z8e,gR,$nt,Q8e,knt,$oo,Fr,hR,Snt,Sc,Rnt,lne,Pnt,Bnt,ine,Int,Nnt,qnt,uR,jnt,W8e,Dnt,Gnt,Ont,aa,pR,Vnt,U8e,Xnt,znt,Rc,Qnt,H8e,Wnt,Unt,dne,Hnt,Jnt,Ynt,$6,Knt,Jr,_R,Znt,J8e,est,ost,jn,rst,Y8e,tst,ast,K8e,nst,sst,Z8e,lst,ist,dst,e9e,k6,o9e,mst,cst,mne,fst,gst,hst,S6,koo,Pc,R6,r9e,bR,ust,t9e,pst,Soo,Tr,vR,_st,Bc,bst,cne,vst,Fst,fne,Tst,Mst,Est,FR,Cst,a9e,wst,Ast,Lst,na,TR,yst,n9e,xst,$st,Ic,kst,s9e,Sst,Rst,gne,Pst,Bst,Ist,P6,Nst,Yr,MR,qst,l9e,jst,Dst,Dn,Gst,i9e,Ost,Vst,d9e,Xst,zst,m9e,Qst,Wst,Ust,c9e,B6,f9e,Hst,Jst,hne,Yst,Kst,Zst,I6,Roo,Nc,N6,g9e,ER,elt,h9e,olt,Poo,Mr,CR,rlt,qc,tlt,une,alt,nlt,pne,slt,llt,ilt,wR,dlt,u9e,mlt,clt,flt,sa,AR,glt,p9e,hlt,ult,jc,plt,_9e,_lt,blt,_ne,vlt,Flt,Tlt,q6,Mlt,Kr,LR,Elt,b9e,Clt,wlt,Gn,Alt,v9e,Llt,ylt,F9e,xlt,$lt,T9e,klt,Slt,Rlt,te,j6,M9e,Plt,Blt,bne,Ilt,Nlt,qlt,D6,E9e,jlt,Dlt,vne,Glt,Olt,Vlt,G6,C9e,Xlt,zlt,Fne,Qlt,Wlt,Ult,O6,w9e,Hlt,Jlt,Tne,Ylt,Klt,Zlt,V6,A9e,eit,oit,Mne,rit,tit,ait,X6,L9e,nit,sit,Ene,lit,iit,dit,z6,y9e,mit,cit,Cne,fit,git,hit,Q6,x9e,uit,pit,wne,_it,bit,vit,W6,$9e,Fit,Tit,Ane,Mit,Eit,Cit,U6,k9e,wit,Ait,Lne,Lit,yit,xit,H6,S9e,$it,kit,yne,Sit,Rit,Pit,J6,R9e,Bit,Iit,xne,Nit,qit,jit,Y6,P9e,Dit,Git,$ne,Oit,Vit,Xit,K6,B9e,zit,Qit,kne,Wit,Uit,Hit,Z6,I9e,Jit,Yit,Sne,Kit,Zit,edt,e7,N9e,odt,rdt,Rne,tdt,adt,ndt,o7,q9e,sdt,ldt,Pne,idt,ddt,mdt,r7,j9e,cdt,fdt,Bne,gdt,hdt,udt,t7,D9e,pdt,_dt,Ine,bdt,vdt,Fdt,a7,G9e,Tdt,Mdt,Nne,Edt,Cdt,wdt,n7,O9e,Adt,Ldt,qne,ydt,xdt,$dt,s7,V9e,kdt,Sdt,jne,Rdt,Pdt,Bdt,l7,X9e,Idt,Ndt,Dne,qdt,jdt,Ddt,i7,z9e,Gdt,Odt,Gne,Vdt,Xdt,zdt,d7,Q9e,Qdt,Wdt,One,Udt,Hdt,Jdt,m7,W9e,Ydt,Kdt,Vne,Zdt,emt,omt,c7,U9e,rmt,tmt,Xne,amt,nmt,smt,f7,Boo,Dc,g7,H9e,yR,lmt,J9e,imt,Ioo,Er,xR,dmt,Gc,mmt,zne,cmt,fmt,Qne,gmt,hmt,umt,$R,pmt,Y9e,_mt,bmt,vmt,la,kR,Fmt,K9e,Tmt,Mmt,Oc,Emt,Z9e,Cmt,wmt,Wne,Amt,Lmt,ymt,h7,xmt,Zr,SR,$mt,exe,kmt,Smt,On,Rmt,oxe,Pmt,Bmt,rxe,Imt,Nmt,txe,qmt,jmt,Dmt,xe,u7,axe,Gmt,Omt,Une,Vmt,Xmt,zmt,p7,nxe,Qmt,Wmt,Hne,Umt,Hmt,Jmt,_7,sxe,Ymt,Kmt,Jne,Zmt,ect,oct,b7,lxe,rct,tct,Yne,act,nct,sct,v7,ixe,lct,ict,Kne,dct,mct,cct,F7,dxe,fct,gct,Zne,hct,uct,pct,T7,mxe,_ct,bct,ese,vct,Fct,Tct,M7,cxe,Mct,Ect,ose,Cct,wct,Act,E7,fxe,Lct,yct,rse,xct,$ct,kct,C7,gxe,Sct,Rct,tse,Pct,Bct,Ict,w7,Noo,Vc,A7,hxe,RR,Nct,uxe,qct,qoo,Cr,PR,jct,Xc,Dct,ase,Gct,Oct,nse,Vct,Xct,zct,BR,Qct,pxe,Wct,Uct,Hct,ia,IR,Jct,_xe,Yct,Kct,zc,Zct,bxe,eft,oft,sse,rft,tft,aft,L7,nft,et,NR,sft,vxe,lft,ift,Vn,dft,Fxe,mft,cft,Txe,fft,gft,Mxe,hft,uft,pft,Ee,y7,Exe,_ft,bft,lse,vft,Fft,Tft,x7,Cxe,Mft,Eft,ise,Cft,wft,Aft,$7,wxe,Lft,yft,dse,xft,$ft,kft,k7,Axe,Sft,Rft,mse,Pft,Bft,Ift,S7,Lxe,Nft,qft,cse,jft,Dft,Gft,R7,yxe,Oft,Vft,fse,Xft,zft,Qft,P7,xxe,Wft,Uft,gse,Hft,Jft,Yft,B7,$xe,Kft,Zft,hse,egt,ogt,rgt,I7,kxe,tgt,agt,use,ngt,sgt,lgt,N7,Sxe,igt,dgt,pse,mgt,cgt,fgt,q7,Rxe,ggt,hgt,_se,ugt,pgt,_gt,j7,Pxe,bgt,vgt,bse,Fgt,Tgt,Mgt,D7,Bxe,Egt,Cgt,vse,wgt,Agt,Lgt,G7,joo,Qc,O7,Ixe,qR,ygt,Nxe,xgt,Doo,wr,jR,$gt,Wc,kgt,Fse,Sgt,Rgt,Tse,Pgt,Bgt,Igt,DR,Ngt,qxe,qgt,jgt,Dgt,da,GR,Ggt,jxe,Ogt,Vgt,Uc,Xgt,Dxe,zgt,Qgt,Mse,Wgt,Ugt,Hgt,V7,Jgt,ot,OR,Ygt,Gxe,Kgt,Zgt,Xn,eht,Oxe,oht,rht,Vxe,tht,aht,Xxe,nht,sht,lht,$e,X7,zxe,iht,dht,Ese,mht,cht,fht,z7,Qxe,ght,hht,Cse,uht,pht,_ht,Q7,Wxe,bht,vht,wse,Fht,Tht,Mht,W7,Uxe,Eht,Cht,Ase,wht,Aht,Lht,U7,Hxe,yht,xht,Lse,$ht,kht,Sht,H7,Jxe,Rht,Pht,yse,Bht,Iht,Nht,J7,Yxe,qht,jht,xse,Dht,Ght,Oht,Y7,Kxe,Vht,Xht,$se,zht,Qht,Wht,K7,Zxe,Uht,Hht,kse,Jht,Yht,Kht,Z7,e$e,Zht,eut,Sse,out,rut,tut,eL,Goo,Hc,oL,o$e,VR,aut,r$e,nut,Ooo,Ar,XR,sut,Jc,lut,Rse,iut,dut,Pse,mut,cut,fut,zR,gut,t$e,hut,uut,put,ma,QR,_ut,a$e,but,vut,Yc,Fut,n$e,Tut,Mut,Bse,Eut,Cut,wut,rL,Aut,rt,WR,Lut,s$e,yut,xut,zn,$ut,l$e,kut,Sut,i$e,Rut,Put,d$e,But,Iut,Nut,ke,tL,m$e,qut,jut,Ise,Dut,Gut,Out,aL,c$e,Vut,Xut,Nse,zut,Qut,Wut,nL,f$e,Uut,Hut,qse,Jut,Yut,Kut,sL,g$e,Zut,ept,jse,opt,rpt,tpt,lL,h$e,apt,npt,Dse,spt,lpt,ipt,iL,u$e,dpt,mpt,Gse,cpt,fpt,gpt,dL,p$e,hpt,upt,Ose,ppt,_pt,bpt,mL,_$e,vpt,Fpt,Vse,Tpt,Mpt,Ept,cL,b$e,Cpt,wpt,Xse,Apt,Lpt,ypt,fL,v$e,xpt,$pt,zse,kpt,Spt,Rpt,gL,Voo,Kc,hL,F$e,UR,Ppt,T$e,Bpt,Xoo,Lr,HR,Ipt,Zc,Npt,Qse,qpt,jpt,Wse,Dpt,Gpt,Opt,JR,Vpt,M$e,Xpt,zpt,Qpt,ca,YR,Wpt,E$e,Upt,Hpt,ef,Jpt,C$e,Ypt,Kpt,Use,Zpt,e_t,o_t,uL,r_t,tt,KR,t_t,w$e,a_t,n_t,Qn,s_t,A$e,l_t,i_t,L$e,d_t,m_t,y$e,c_t,f_t,g_t,Se,pL,x$e,h_t,u_t,Hse,p_t,__t,b_t,_L,$$e,v_t,F_t,Jse,T_t,M_t,E_t,bL,k$e,C_t,w_t,Yse,A_t,L_t,y_t,vL,S$e,x_t,$_t,Kse,k_t,S_t,R_t,FL,R$e,P_t,B_t,Zse,I_t,N_t,q_t,TL,P$e,j_t,D_t,ele,G_t,O_t,V_t,ML,B$e,X_t,z_t,ole,Q_t,W_t,U_t,EL,I$e,H_t,J_t,rle,Y_t,K_t,Z_t,CL,N$e,e1t,o1t,tle,r1t,t1t,a1t,wL,q$e,n1t,s1t,ale,l1t,i1t,d1t,AL,zoo,of,LL,j$e,ZR,m1t,D$e,c1t,Qoo,yr,eP,f1t,rf,g1t,nle,h1t,u1t,sle,p1t,_1t,b1t,oP,v1t,G$e,F1t,T1t,M1t,fa,rP,E1t,O$e,C1t,w1t,tf,A1t,V$e,L1t,y1t,lle,x1t,$1t,k1t,yL,S1t,at,tP,R1t,X$e,P1t,B1t,Wn,I1t,z$e,N1t,q1t,Q$e,j1t,D1t,W$e,G1t,O1t,V1t,Re,xL,U$e,X1t,z1t,ile,Q1t,W1t,U1t,$L,H$e,H1t,J1t,dle,Y1t,K1t,Z1t,kL,J$e,e2t,o2t,mle,r2t,t2t,a2t,SL,Y$e,n2t,s2t,cle,l2t,i2t,d2t,RL,K$e,m2t,c2t,fle,f2t,g2t,h2t,PL,Z$e,u2t,p2t,gle,_2t,b2t,v2t,BL,eke,F2t,T2t,hle,M2t,E2t,C2t,IL,oke,w2t,A2t,ule,L2t,y2t,x2t,NL,rke,$2t,k2t,ple,S2t,R2t,P2t,qL,tke,B2t,I2t,_le,N2t,q2t,j2t,jL,Woo,af,DL,ake,aP,D2t,nke,G2t,Uoo,xr,nP,O2t,nf,V2t,ble,X2t,z2t,vle,Q2t,W2t,U2t,sP,H2t,ske,J2t,Y2t,K2t,ga,lP,Z2t,lke,ebt,obt,sf,rbt,ike,tbt,abt,Fle,nbt,sbt,lbt,GL,ibt,nt,iP,dbt,dke,mbt,cbt,Un,fbt,mke,gbt,hbt,cke,ubt,pbt,fke,_bt,bbt,vbt,Xe,OL,gke,Fbt,Tbt,Tle,Mbt,Ebt,Cbt,VL,hke,wbt,Abt,Mle,Lbt,ybt,xbt,XL,uke,$bt,kbt,Ele,Sbt,Rbt,Pbt,zL,pke,Bbt,Ibt,Cle,Nbt,qbt,jbt,QL,_ke,Dbt,Gbt,wle,Obt,Vbt,Xbt,WL,bke,zbt,Qbt,Ale,Wbt,Ubt,Hbt,UL,vke,Jbt,Ybt,Lle,Kbt,Zbt,evt,HL,Fke,ovt,rvt,yle,tvt,avt,nvt,JL,Hoo,lf,YL,Tke,dP,svt,Mke,lvt,Joo,$r,mP,ivt,df,dvt,xle,mvt,cvt,$le,fvt,gvt,hvt,cP,uvt,Eke,pvt,_vt,bvt,ha,fP,vvt,Cke,Fvt,Tvt,mf,Mvt,wke,Evt,Cvt,kle,wvt,Avt,Lvt,KL,yvt,st,gP,xvt,Ake,$vt,kvt,Hn,Svt,Lke,Rvt,Pvt,yke,Bvt,Ivt,xke,Nvt,qvt,jvt,ze,ZL,$ke,Dvt,Gvt,Sle,Ovt,Vvt,Xvt,ey,kke,zvt,Qvt,Rle,Wvt,Uvt,Hvt,oy,Ske,Jvt,Yvt,Ple,Kvt,Zvt,eFt,ry,Rke,oFt,rFt,Ble,tFt,aFt,nFt,ty,Pke,sFt,lFt,Ile,iFt,dFt,mFt,ay,Bke,cFt,fFt,Nle,gFt,hFt,uFt,ny,Ike,pFt,_Ft,qle,bFt,vFt,FFt,sy,Nke,TFt,MFt,jle,EFt,CFt,wFt,ly,Yoo,cf,iy,qke,hP,AFt,jke,LFt,Koo,kr,uP,yFt,ff,xFt,Dle,$Ft,kFt,Gle,SFt,RFt,PFt,pP,BFt,Dke,IFt,NFt,qFt,ua,_P,jFt,Gke,DFt,GFt,gf,OFt,Oke,VFt,XFt,Ole,zFt,QFt,WFt,dy,UFt,lt,bP,HFt,Vke,JFt,YFt,Jn,KFt,Xke,ZFt,eTt,zke,oTt,rTt,Qke,tTt,aTt,nTt,Wke,my,Uke,sTt,lTt,Vle,iTt,dTt,mTt,cy,Zoo,hf,fy,Hke,vP,cTt,Jke,fTt,ero,Sr,FP,gTt,uf,hTt,Xle,uTt,pTt,zle,_Tt,bTt,vTt,TP,FTt,Yke,TTt,MTt,ETt,pa,MP,CTt,Kke,wTt,ATt,pf,LTt,Zke,yTt,xTt,Qle,$Tt,kTt,STt,gy,RTt,it,EP,PTt,eSe,BTt,ITt,Yn,NTt,oSe,qTt,jTt,rSe,DTt,GTt,tSe,OTt,VTt,XTt,CP,hy,aSe,zTt,QTt,Wle,WTt,UTt,HTt,uy,nSe,JTt,YTt,Ule,KTt,ZTt,eMt,py,oro,_f,_y,sSe,wP,oMt,lSe,rMt,rro,Rr,AP,tMt,bf,aMt,Hle,nMt,sMt,Jle,lMt,iMt,dMt,LP,mMt,iSe,cMt,fMt,gMt,_a,yP,hMt,dSe,uMt,pMt,vf,_Mt,mSe,bMt,vMt,Yle,FMt,TMt,MMt,by,EMt,dt,xP,CMt,cSe,wMt,AMt,Kn,LMt,fSe,yMt,xMt,gSe,$Mt,kMt,hSe,SMt,RMt,PMt,uSe,vy,pSe,BMt,IMt,Kle,NMt,qMt,jMt,Fy,tro;return d=new oe({}),Qa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ox=new oe({}),rx=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),yf=new DMt({props:{warning:!0,$$slots:{default:[W1a]},$$scope:{ctx:$}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L656"}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L679"}}),eu=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[U1a]},$$scope:{ctx:$}}}),ix=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L802"}}),dx=new oe({}),mx=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L427"}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L441"}}),Nu=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[H1a]},$$scope:{ctx:$}}}),hx=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L642"}}),ux=new oe({}),px=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L216"}}),yp=new DMt({props:{$$slots:{default:[J1a]},$$scope:{ctx:$}}}),xp=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Y1a]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L343"}}),Tx=new oe({}),Mx=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L95"}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L109"}}),e_=new DMt({props:{$$slots:{default:[K1a]},$$scope:{ctx:$}}}),o_=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Z1a]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L276"}}),Lx=new oe({}),yx=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),$x=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmModel">EsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel">MarkupLMModel</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig">TimeSeriesTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel">TimeSeriesTransformerModel</a> (Time Series Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a_=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[e2a]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[o2a]},$$scope:{ctx:$}}}),Sx=new oe({}),Rx=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L867"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[r2a]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[t2a]},$$scope:{ctx:$}}}),Nx=new oe({}),qx=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L882"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[a2a]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[n2a]},$$scope:{ctx:$}}}),Ox=new oe({}),Vx=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L889"}}),zx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[s2a]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[l2a]},$$scope:{ctx:$}}}),Wx=new oe({}),Ux=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L896"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[i2a]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[d2a]},$$scope:{ctx:$}}}),Kx=new oe({}),Zx=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L905"}}),o$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification">EsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification">MarkupLMForSequenceClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[m2a]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[c2a]},$$scope:{ctx:$}}}),t$=new oe({}),a$=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L961"}}),s$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[f2a]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[g2a]},$$scope:{ctx:$}}}),i$=new oe({}),d$=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L968"}}),c$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[h2a]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[u2a]},$$scope:{ctx:$}}}),g$=new oe({}),h$=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L954"}}),p$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification">EsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification">MarkupLMForTokenClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[p2a]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[_2a]},$$scope:{ctx:$}}}),b$=new oe({}),v$=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L914"}}),T$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering">BloomForQuestionAnswering</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering">MarkupLMForQuestionAnswering</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[b2a]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m4=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[v2a]},$$scope:{ctx:$}}}),E$=new oe({}),C$=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L921"}}),A$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[F2a]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[T2a]},$$scope:{ctx:$}}}),y$=new oe({}),x$=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L943"}}),k$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new N({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[M2a]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new N({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[E2a]},$$scope:{ctx:$}}}),R$=new oe({}),P$=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L977"}}),I$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[C2a]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[w2a]},$$scope:{ctx:$}}}),q$=new oe({}),j$=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1016"}}),G$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[A2a]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[L2a]},$$scope:{ctx:$}}}),V$=new oe({}),X$=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1023"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[y2a]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[x2a]},$$scope:{ctx:$}}}),U$=new oe({}),H$=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L932"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[$2a]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[k2a]},$$scope:{ctx:$}}}),Z$=new oe({}),ek=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1030"}}),rk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[S2a]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[R2a]},$$scope:{ctx:$}}}),ak=new oe({}),nk=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1053"}}),lk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[P2a]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[B2a]},$$scope:{ctx:$}}}),dk=new oe({}),mk=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1037"}}),fk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[I2a]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[N2a]},$$scope:{ctx:$}}}),hk=new oe({}),uk=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1044"}}),_k=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[q2a]},$$scope:{ctx:$}}}),bk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[j2a]},$$scope:{ctx:$}}}),Fk=new oe({}),Tk=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1062"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[D2a]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[G2a]},$$scope:{ctx:$}}}),wk=new oe({}),Ak=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1069"}}),yk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[O2a]},$$scope:{ctx:$}}}),xk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[V2a]},$$scope:{ctx:$}}}),$k=new oe({}),kk=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1009"}}),Rk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[X2a]},$$scope:{ctx:$}}}),Pk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[z2a]},$$scope:{ctx:$}}}),Bk=new oe({}),Ik=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L984"}}),qk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Q2a]},$$scope:{ctx:$}}}),jk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[W2a]},$$scope:{ctx:$}}}),Dk=new oe({}),Gk=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L991"}}),Vk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[U2a]},$$scope:{ctx:$}}}),Xk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[H2a]},$$scope:{ctx:$}}}),zk=new oe({}),Qk=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1000"}}),Uk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[J2a]},$$scope:{ctx:$}}}),Hk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Y2a]},$$scope:{ctx:$}}}),Jk=new oe({}),Yk=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),Zk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[K2a]},$$scope:{ctx:$}}}),eS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Z2a]},$$scope:{ctx:$}}}),oS=new oe({}),rS=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),aS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[eba]},$$scope:{ctx:$}}}),nS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oba]},$$scope:{ctx:$}}}),sS=new oe({}),lS=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),dS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[rba]},$$scope:{ctx:$}}}),mS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tba]},$$scope:{ctx:$}}}),cS=new oe({}),fS=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),hS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[aba]},$$scope:{ctx:$}}}),uS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N0=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nba]},$$scope:{ctx:$}}}),pS=new oe({}),_S=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),vS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[sba]},$$scope:{ctx:$}}}),FS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lba]},$$scope:{ctx:$}}}),TS=new oe({}),MS=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),CS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[iba]},$$scope:{ctx:$}}}),wS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dba]},$$scope:{ctx:$}}}),AS=new oe({}),LS=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),xS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mba]},$$scope:{ctx:$}}}),$S=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ww=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cba]},$$scope:{ctx:$}}}),kS=new oe({}),SS=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L513"}}),PS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fba]},$$scope:{ctx:$}}}),BS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gba]},$$scope:{ctx:$}}}),IS=new oe({}),NS=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L560"}}),jS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hba]},$$scope:{ctx:$}}}),DS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uba]},$$scope:{ctx:$}}}),GS=new oe({}),OS=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L567"}}),XS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pba]},$$scope:{ctx:$}}}),zS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_ba]},$$scope:{ctx:$}}}),WS=new oe({}),US=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),JS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bba]},$$scope:{ctx:$}}}),YS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vba]},$$scope:{ctx:$}}}),KS=new oe({}),ZS=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L529"}}),oR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SA=new N({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Fba]},$$scope:{ctx:$}}}),rR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PA=new N({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[Tba]},$$scope:{ctx:$}}}),tR=new oe({}),aR=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L551"}}),sR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IA=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Mba]},$$scope:{ctx:$}}}),lR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Eba]},$$scope:{ctx:$}}}),iR=new oe({}),dR=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),cR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s6=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Cba]},$$scope:{ctx:$}}}),fR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[wba]},$$scope:{ctx:$}}}),gR=new oe({}),hR=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),pR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Aba]},$$scope:{ctx:$}}}),_R=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Lba]},$$scope:{ctx:$}}}),bR=new oe({}),vR=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L576"}}),TR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[yba]},$$scope:{ctx:$}}}),MR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I6=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[xba]},$$scope:{ctx:$}}}),ER=new oe({}),CR=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),AR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[$ba]},$$scope:{ctx:$}}}),LR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[kba]},$$scope:{ctx:$}}}),yR=new oe({}),xR=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),kR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h7=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Sba]},$$scope:{ctx:$}}}),SR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w7=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Rba]},$$scope:{ctx:$}}}),RR=new oe({}),PR=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),IR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Pba]},$$scope:{ctx:$}}}),NR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Bba]},$$scope:{ctx:$}}}),qR=new oe({}),jR=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),GR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Iba]},$$scope:{ctx:$}}}),OR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eL=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Nba]},$$scope:{ctx:$}}}),VR=new oe({}),XR=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),QR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rL=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qba]},$$scope:{ctx:$}}}),WR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gL=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jba]},$$scope:{ctx:$}}}),UR=new oe({}),HR=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),YR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uL=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Dba]},$$scope:{ctx:$}}}),KR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AL=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Gba]},$$scope:{ctx:$}}}),ZR=new oe({}),eP=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),rP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yL=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Oba]},$$scope:{ctx:$}}}),tP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jL=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Vba]},$$scope:{ctx:$}}}),aP=new oe({}),nP=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),lP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GL=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Xba]},$$scope:{ctx:$}}}),iP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JL=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zba]},$$scope:{ctx:$}}}),dP=new oe({}),mP=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),fP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KL=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Qba]},$$scope:{ctx:$}}}),gP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ly=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Wba]},$$scope:{ctx:$}}}),hP=new oe({}),uP=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),_P=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dy=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Uba]},$$scope:{ctx:$}}}),bP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cy=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Hba]},$$scope:{ctx:$}}}),vP=new oe({}),FP=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),MP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gy=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Jba]},$$scope:{ctx:$}}}),EP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),py=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Yba]},$$scope:{ctx:$}}}),wP=new oe({}),AP=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),yP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),by=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Kba]},$$scope:{ctx:$}}}),xP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fy=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Zba]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),yo=a("span"),td=o("Auto Classes"),Ef=l(),pt=a("p"),ad=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=a("code"),Y9=o("from_pretrained()"),Cf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),He=a("p"),sd=o("Instantiating one of "),es=a("a"),K9=o("AutoConfig"),os=o(", "),rs=a("a"),Z9=o("AutoModel"),ld=o(`, and
`),ts=a("a"),ex=o("AutoTokenizer"),id=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),F(Qa.$$.fragment),Je=l(),Ae=a("p"),oI=o("will create a model that is an instance of "),dd=a("a"),rI=o("BertModel"),tI=o("."),xo=l(),Wa=a("p"),aI=o("There is one class of "),Af=a("code"),nI=o("AutoModel"),Fao=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),XZe=l(),md=a("h2"),Lf=a("a"),rme=a("span"),F(ox.$$.fragment),Tao=l(),tme=a("span"),Mao=o("Extending the Auto Classes"),zZe=l(),as=a("p"),Eao=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ame=a("code"),Cao=o("NewModel"),wao=o(", make sure you have a "),nme=a("code"),Aao=o("NewModelConfig"),Lao=o(` then you can add those to the auto
classes like this:`),QZe=l(),F(rx.$$.fragment),WZe=l(),sI=a("p"),yao=o("You will then be able to use the auto classes like you would usually do!"),UZe=l(),F(yf.$$.fragment),HZe=l(),cd=a("h2"),xf=a("a"),sme=a("span"),F(tx.$$.fragment),xao=l(),lme=a("span"),$ao=o("AutoConfig"),JZe=l(),$o=a("div"),F(ax.$$.fragment),kao=l(),nx=a("p"),Sao=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lI=a("a"),Rao=o("from_pretrained()"),Pao=o(" class method."),Bao=l(),sx=a("p"),Iao=o("This class cannot be instantiated directly using "),ime=a("code"),Nao=o("__init__()"),qao=o(" (throws an error)."),jao=l(),Pr=a("div"),F(lx.$$.fragment),Dao=l(),dme=a("p"),Gao=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Oao=l(),fd=a("p"),Vao=o("The configuration class to instantiate is selected based on the "),mme=a("code"),Xao=o("model_type"),zao=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cme=a("code"),Qao=o("pretrained_model_name_or_path"),Wao=o(":"),Uao=l(),A=a("ul"),$f=a("li"),fme=a("strong"),Hao=o("albert"),Jao=o(" \u2014 "),iI=a("a"),Yao=o("AlbertConfig"),Kao=o(" (ALBERT model)"),Zao=l(),kf=a("li"),gme=a("strong"),eno=o("bart"),ono=o(" \u2014 "),dI=a("a"),rno=o("BartConfig"),tno=o(" (BART model)"),ano=l(),Sf=a("li"),hme=a("strong"),nno=o("beit"),sno=o(" \u2014 "),mI=a("a"),lno=o("BeitConfig"),ino=o(" (BEiT model)"),dno=l(),Rf=a("li"),ume=a("strong"),mno=o("bert"),cno=o(" \u2014 "),cI=a("a"),fno=o("BertConfig"),gno=o(" (BERT model)"),hno=l(),Pf=a("li"),pme=a("strong"),uno=o("bert-generation"),pno=o(" \u2014 "),fI=a("a"),_no=o("BertGenerationConfig"),bno=o(" (Bert Generation model)"),vno=l(),Bf=a("li"),_me=a("strong"),Fno=o("big_bird"),Tno=o(" \u2014 "),gI=a("a"),Mno=o("BigBirdConfig"),Eno=o(" (BigBird model)"),Cno=l(),If=a("li"),bme=a("strong"),wno=o("bigbird_pegasus"),Ano=o(" \u2014 "),hI=a("a"),Lno=o("BigBirdPegasusConfig"),yno=o(" (BigBird-Pegasus model)"),xno=l(),Nf=a("li"),vme=a("strong"),$no=o("blenderbot"),kno=o(" \u2014 "),uI=a("a"),Sno=o("BlenderbotConfig"),Rno=o(" (Blenderbot model)"),Pno=l(),qf=a("li"),Fme=a("strong"),Bno=o("blenderbot-small"),Ino=o(" \u2014 "),pI=a("a"),Nno=o("BlenderbotSmallConfig"),qno=o(" (BlenderbotSmall model)"),jno=l(),jf=a("li"),Tme=a("strong"),Dno=o("bloom"),Gno=o(" \u2014 "),_I=a("a"),Ono=o("BloomConfig"),Vno=o(" (BLOOM model)"),Xno=l(),Df=a("li"),Mme=a("strong"),zno=o("camembert"),Qno=o(" \u2014 "),bI=a("a"),Wno=o("CamembertConfig"),Uno=o(" (CamemBERT model)"),Hno=l(),Gf=a("li"),Eme=a("strong"),Jno=o("canine"),Yno=o(" \u2014 "),vI=a("a"),Kno=o("CanineConfig"),Zno=o(" (CANINE model)"),eso=l(),Of=a("li"),Cme=a("strong"),oso=o("clip"),rso=o(" \u2014 "),FI=a("a"),tso=o("CLIPConfig"),aso=o(" (CLIP model)"),nso=l(),Vf=a("li"),wme=a("strong"),sso=o("codegen"),lso=o(" \u2014 "),TI=a("a"),iso=o("CodeGenConfig"),dso=o(" (CodeGen model)"),mso=l(),Xf=a("li"),Ame=a("strong"),cso=o("conditional_detr"),fso=o(" \u2014 "),MI=a("a"),gso=o("ConditionalDetrConfig"),hso=o(" (Conditional DETR model)"),uso=l(),zf=a("li"),Lme=a("strong"),pso=o("convbert"),_so=o(" \u2014 "),EI=a("a"),bso=o("ConvBertConfig"),vso=o(" (ConvBERT model)"),Fso=l(),Qf=a("li"),yme=a("strong"),Tso=o("convnext"),Mso=o(" \u2014 "),CI=a("a"),Eso=o("ConvNextConfig"),Cso=o(" (ConvNeXT model)"),wso=l(),Wf=a("li"),xme=a("strong"),Aso=o("ctrl"),Lso=o(" \u2014 "),wI=a("a"),yso=o("CTRLConfig"),xso=o(" (CTRL model)"),$so=l(),Uf=a("li"),$me=a("strong"),kso=o("cvt"),Sso=o(" \u2014 "),AI=a("a"),Rso=o("CvtConfig"),Pso=o(" (CvT model)"),Bso=l(),Hf=a("li"),kme=a("strong"),Iso=o("data2vec-audio"),Nso=o(" \u2014 "),LI=a("a"),qso=o("Data2VecAudioConfig"),jso=o(" (Data2VecAudio model)"),Dso=l(),Jf=a("li"),Sme=a("strong"),Gso=o("data2vec-text"),Oso=o(" \u2014 "),yI=a("a"),Vso=o("Data2VecTextConfig"),Xso=o(" (Data2VecText model)"),zso=l(),Yf=a("li"),Rme=a("strong"),Qso=o("data2vec-vision"),Wso=o(" \u2014 "),xI=a("a"),Uso=o("Data2VecVisionConfig"),Hso=o(" (Data2VecVision model)"),Jso=l(),Kf=a("li"),Pme=a("strong"),Yso=o("deberta"),Kso=o(" \u2014 "),$I=a("a"),Zso=o("DebertaConfig"),elo=o(" (DeBERTa model)"),olo=l(),Zf=a("li"),Bme=a("strong"),rlo=o("deberta-v2"),tlo=o(" \u2014 "),kI=a("a"),alo=o("DebertaV2Config"),nlo=o(" (DeBERTa-v2 model)"),slo=l(),eg=a("li"),Ime=a("strong"),llo=o("decision_transformer"),ilo=o(" \u2014 "),SI=a("a"),dlo=o("DecisionTransformerConfig"),mlo=o(" (Decision Transformer model)"),clo=l(),og=a("li"),Nme=a("strong"),flo=o("deformable_detr"),glo=o(" \u2014 "),RI=a("a"),hlo=o("DeformableDetrConfig"),ulo=o(" (Deformable DETR model)"),plo=l(),rg=a("li"),qme=a("strong"),_lo=o("deit"),blo=o(" \u2014 "),PI=a("a"),vlo=o("DeiTConfig"),Flo=o(" (DeiT model)"),Tlo=l(),tg=a("li"),jme=a("strong"),Mlo=o("detr"),Elo=o(" \u2014 "),BI=a("a"),Clo=o("DetrConfig"),wlo=o(" (DETR model)"),Alo=l(),ag=a("li"),Dme=a("strong"),Llo=o("distilbert"),ylo=o(" \u2014 "),II=a("a"),xlo=o("DistilBertConfig"),$lo=o(" (DistilBERT model)"),klo=l(),ng=a("li"),Gme=a("strong"),Slo=o("donut-swin"),Rlo=o(" \u2014 "),NI=a("a"),Plo=o("DonutSwinConfig"),Blo=o(" (DonutSwin model)"),Ilo=l(),sg=a("li"),Ome=a("strong"),Nlo=o("dpr"),qlo=o(" \u2014 "),qI=a("a"),jlo=o("DPRConfig"),Dlo=o(" (DPR model)"),Glo=l(),lg=a("li"),Vme=a("strong"),Olo=o("dpt"),Vlo=o(" \u2014 "),jI=a("a"),Xlo=o("DPTConfig"),zlo=o(" (DPT model)"),Qlo=l(),ig=a("li"),Xme=a("strong"),Wlo=o("electra"),Ulo=o(" \u2014 "),DI=a("a"),Hlo=o("ElectraConfig"),Jlo=o(" (ELECTRA model)"),Ylo=l(),dg=a("li"),zme=a("strong"),Klo=o("encoder-decoder"),Zlo=o(" \u2014 "),GI=a("a"),eio=o("EncoderDecoderConfig"),oio=o(" (Encoder decoder model)"),rio=l(),mg=a("li"),Qme=a("strong"),tio=o("ernie"),aio=o(" \u2014 "),OI=a("a"),nio=o("ErnieConfig"),sio=o(" (ERNIE model)"),lio=l(),cg=a("li"),Wme=a("strong"),iio=o("esm"),dio=o(" \u2014 "),VI=a("a"),mio=o("EsmConfig"),cio=o(" (ESM model)"),fio=l(),fg=a("li"),Ume=a("strong"),gio=o("flaubert"),hio=o(" \u2014 "),XI=a("a"),uio=o("FlaubertConfig"),pio=o(" (FlauBERT model)"),_io=l(),gg=a("li"),Hme=a("strong"),bio=o("flava"),vio=o(" \u2014 "),zI=a("a"),Fio=o("FlavaConfig"),Tio=o(" (FLAVA model)"),Mio=l(),hg=a("li"),Jme=a("strong"),Eio=o("fnet"),Cio=o(" \u2014 "),QI=a("a"),wio=o("FNetConfig"),Aio=o(" (FNet model)"),Lio=l(),ug=a("li"),Yme=a("strong"),yio=o("fsmt"),xio=o(" \u2014 "),WI=a("a"),$io=o("FSMTConfig"),kio=o(" (FairSeq Machine-Translation model)"),Sio=l(),pg=a("li"),Kme=a("strong"),Rio=o("funnel"),Pio=o(" \u2014 "),UI=a("a"),Bio=o("FunnelConfig"),Iio=o(" (Funnel Transformer model)"),Nio=l(),_g=a("li"),Zme=a("strong"),qio=o("glpn"),jio=o(" \u2014 "),HI=a("a"),Dio=o("GLPNConfig"),Gio=o(" (GLPN model)"),Oio=l(),bg=a("li"),ece=a("strong"),Vio=o("gpt2"),Xio=o(" \u2014 "),JI=a("a"),zio=o("GPT2Config"),Qio=o(" (OpenAI GPT-2 model)"),Wio=l(),vg=a("li"),oce=a("strong"),Uio=o("gpt_neo"),Hio=o(" \u2014 "),YI=a("a"),Jio=o("GPTNeoConfig"),Yio=o(" (GPT Neo model)"),Kio=l(),Fg=a("li"),rce=a("strong"),Zio=o("gpt_neox"),edo=o(" \u2014 "),KI=a("a"),odo=o("GPTNeoXConfig"),rdo=o(" (GPT NeoX model)"),tdo=l(),Tg=a("li"),tce=a("strong"),ado=o("gpt_neox_japanese"),ndo=o(" \u2014 "),ZI=a("a"),sdo=o("GPTNeoXJapaneseConfig"),ldo=o(" (GPT NeoX Japanese model)"),ido=l(),Mg=a("li"),ace=a("strong"),ddo=o("gptj"),mdo=o(" \u2014 "),eN=a("a"),cdo=o("GPTJConfig"),fdo=o(" (GPT-J model)"),gdo=l(),Eg=a("li"),nce=a("strong"),hdo=o("groupvit"),udo=o(" \u2014 "),oN=a("a"),pdo=o("GroupViTConfig"),_do=o(" (GroupViT model)"),bdo=l(),Cg=a("li"),sce=a("strong"),vdo=o("hubert"),Fdo=o(" \u2014 "),rN=a("a"),Tdo=o("HubertConfig"),Mdo=o(" (Hubert model)"),Edo=l(),wg=a("li"),lce=a("strong"),Cdo=o("ibert"),wdo=o(" \u2014 "),tN=a("a"),Ado=o("IBertConfig"),Ldo=o(" (I-BERT model)"),ydo=l(),Ag=a("li"),ice=a("strong"),xdo=o("imagegpt"),$do=o(" \u2014 "),aN=a("a"),kdo=o("ImageGPTConfig"),Sdo=o(" (ImageGPT model)"),Rdo=l(),Lg=a("li"),dce=a("strong"),Pdo=o("layoutlm"),Bdo=o(" \u2014 "),nN=a("a"),Ido=o("LayoutLMConfig"),Ndo=o(" (LayoutLM model)"),qdo=l(),yg=a("li"),mce=a("strong"),jdo=o("layoutlmv2"),Ddo=o(" \u2014 "),sN=a("a"),Gdo=o("LayoutLMv2Config"),Odo=o(" (LayoutLMv2 model)"),Vdo=l(),xg=a("li"),cce=a("strong"),Xdo=o("layoutlmv3"),zdo=o(" \u2014 "),lN=a("a"),Qdo=o("LayoutLMv3Config"),Wdo=o(" (LayoutLMv3 model)"),Udo=l(),$g=a("li"),fce=a("strong"),Hdo=o("led"),Jdo=o(" \u2014 "),iN=a("a"),Ydo=o("LEDConfig"),Kdo=o(" (LED model)"),Zdo=l(),kg=a("li"),gce=a("strong"),emo=o("levit"),omo=o(" \u2014 "),dN=a("a"),rmo=o("LevitConfig"),tmo=o(" (LeViT model)"),amo=l(),Sg=a("li"),hce=a("strong"),nmo=o("longformer"),smo=o(" \u2014 "),mN=a("a"),lmo=o("LongformerConfig"),imo=o(" (Longformer model)"),dmo=l(),Rg=a("li"),uce=a("strong"),mmo=o("longt5"),cmo=o(" \u2014 "),cN=a("a"),fmo=o("LongT5Config"),gmo=o(" (LongT5 model)"),hmo=l(),Pg=a("li"),pce=a("strong"),umo=o("luke"),pmo=o(" \u2014 "),fN=a("a"),_mo=o("LukeConfig"),bmo=o(" (LUKE model)"),vmo=l(),Bg=a("li"),_ce=a("strong"),Fmo=o("lxmert"),Tmo=o(" \u2014 "),gN=a("a"),Mmo=o("LxmertConfig"),Emo=o(" (LXMERT model)"),Cmo=l(),Ig=a("li"),bce=a("strong"),wmo=o("m2m_100"),Amo=o(" \u2014 "),hN=a("a"),Lmo=o("M2M100Config"),ymo=o(" (M2M100 model)"),xmo=l(),Ng=a("li"),vce=a("strong"),$mo=o("marian"),kmo=o(" \u2014 "),uN=a("a"),Smo=o("MarianConfig"),Rmo=o(" (Marian model)"),Pmo=l(),qg=a("li"),Fce=a("strong"),Bmo=o("markuplm"),Imo=o(" \u2014 "),pN=a("a"),Nmo=o("MarkupLMConfig"),qmo=o(" (MarkupLM model)"),jmo=l(),jg=a("li"),Tce=a("strong"),Dmo=o("maskformer"),Gmo=o(" \u2014 "),_N=a("a"),Omo=o("MaskFormerConfig"),Vmo=o(" (MaskFormer model)"),Xmo=l(),Dg=a("li"),Mce=a("strong"),zmo=o("mbart"),Qmo=o(" \u2014 "),bN=a("a"),Wmo=o("MBartConfig"),Umo=o(" (mBART model)"),Hmo=l(),Gg=a("li"),Ece=a("strong"),Jmo=o("mctct"),Ymo=o(" \u2014 "),vN=a("a"),Kmo=o("MCTCTConfig"),Zmo=o(" (M-CTC-T model)"),eco=l(),Og=a("li"),Cce=a("strong"),oco=o("megatron-bert"),rco=o(" \u2014 "),FN=a("a"),tco=o("MegatronBertConfig"),aco=o(" (Megatron-BERT model)"),nco=l(),Vg=a("li"),wce=a("strong"),sco=o("mobilebert"),lco=o(" \u2014 "),TN=a("a"),ico=o("MobileBertConfig"),dco=o(" (MobileBERT model)"),mco=l(),Xg=a("li"),Ace=a("strong"),cco=o("mobilevit"),fco=o(" \u2014 "),MN=a("a"),gco=o("MobileViTConfig"),hco=o(" (MobileViT model)"),uco=l(),zg=a("li"),Lce=a("strong"),pco=o("mpnet"),_co=o(" \u2014 "),EN=a("a"),bco=o("MPNetConfig"),vco=o(" (MPNet model)"),Fco=l(),Qg=a("li"),yce=a("strong"),Tco=o("mt5"),Mco=o(" \u2014 "),CN=a("a"),Eco=o("MT5Config"),Cco=o(" (MT5 model)"),wco=l(),Wg=a("li"),xce=a("strong"),Aco=o("mvp"),Lco=o(" \u2014 "),wN=a("a"),yco=o("MvpConfig"),xco=o(" (MVP model)"),$co=l(),Ug=a("li"),$ce=a("strong"),kco=o("nezha"),Sco=o(" \u2014 "),AN=a("a"),Rco=o("NezhaConfig"),Pco=o(" (Nezha model)"),Bco=l(),Hg=a("li"),kce=a("strong"),Ico=o("nystromformer"),Nco=o(" \u2014 "),LN=a("a"),qco=o("NystromformerConfig"),jco=o(" (Nystr\xF6mformer model)"),Dco=l(),Jg=a("li"),Sce=a("strong"),Gco=o("openai-gpt"),Oco=o(" \u2014 "),yN=a("a"),Vco=o("OpenAIGPTConfig"),Xco=o(" (OpenAI GPT model)"),zco=l(),Yg=a("li"),Rce=a("strong"),Qco=o("opt"),Wco=o(" \u2014 "),xN=a("a"),Uco=o("OPTConfig"),Hco=o(" (OPT model)"),Jco=l(),Kg=a("li"),Pce=a("strong"),Yco=o("owlvit"),Kco=o(" \u2014 "),$N=a("a"),Zco=o("OwlViTConfig"),efo=o(" (OWL-ViT model)"),ofo=l(),Zg=a("li"),Bce=a("strong"),rfo=o("pegasus"),tfo=o(" \u2014 "),kN=a("a"),afo=o("PegasusConfig"),nfo=o(" (Pegasus model)"),sfo=l(),eh=a("li"),Ice=a("strong"),lfo=o("pegasus_x"),ifo=o(" \u2014 "),SN=a("a"),dfo=o("PegasusXConfig"),mfo=o(" (PEGASUS-X model)"),cfo=l(),oh=a("li"),Nce=a("strong"),ffo=o("perceiver"),gfo=o(" \u2014 "),RN=a("a"),hfo=o("PerceiverConfig"),ufo=o(" (Perceiver model)"),pfo=l(),rh=a("li"),qce=a("strong"),_fo=o("plbart"),bfo=o(" \u2014 "),PN=a("a"),vfo=o("PLBartConfig"),Ffo=o(" (PLBart model)"),Tfo=l(),th=a("li"),jce=a("strong"),Mfo=o("poolformer"),Efo=o(" \u2014 "),BN=a("a"),Cfo=o("PoolFormerConfig"),wfo=o(" (PoolFormer model)"),Afo=l(),ah=a("li"),Dce=a("strong"),Lfo=o("prophetnet"),yfo=o(" \u2014 "),IN=a("a"),xfo=o("ProphetNetConfig"),$fo=o(" (ProphetNet model)"),kfo=l(),nh=a("li"),Gce=a("strong"),Sfo=o("qdqbert"),Rfo=o(" \u2014 "),NN=a("a"),Pfo=o("QDQBertConfig"),Bfo=o(" (QDQBert model)"),Ifo=l(),sh=a("li"),Oce=a("strong"),Nfo=o("rag"),qfo=o(" \u2014 "),qN=a("a"),jfo=o("RagConfig"),Dfo=o(" (RAG model)"),Gfo=l(),lh=a("li"),Vce=a("strong"),Ofo=o("realm"),Vfo=o(" \u2014 "),jN=a("a"),Xfo=o("RealmConfig"),zfo=o(" (REALM model)"),Qfo=l(),ih=a("li"),Xce=a("strong"),Wfo=o("reformer"),Ufo=o(" \u2014 "),DN=a("a"),Hfo=o("ReformerConfig"),Jfo=o(" (Reformer model)"),Yfo=l(),dh=a("li"),zce=a("strong"),Kfo=o("regnet"),Zfo=o(" \u2014 "),GN=a("a"),ego=o("RegNetConfig"),ogo=o(" (RegNet model)"),rgo=l(),mh=a("li"),Qce=a("strong"),tgo=o("rembert"),ago=o(" \u2014 "),ON=a("a"),ngo=o("RemBertConfig"),sgo=o(" (RemBERT model)"),lgo=l(),ch=a("li"),Wce=a("strong"),igo=o("resnet"),dgo=o(" \u2014 "),VN=a("a"),mgo=o("ResNetConfig"),cgo=o(" (ResNet model)"),fgo=l(),fh=a("li"),Uce=a("strong"),ggo=o("retribert"),hgo=o(" \u2014 "),XN=a("a"),ugo=o("RetriBertConfig"),pgo=o(" (RetriBERT model)"),_go=l(),gh=a("li"),Hce=a("strong"),bgo=o("roberta"),vgo=o(" \u2014 "),zN=a("a"),Fgo=o("RobertaConfig"),Tgo=o(" (RoBERTa model)"),Mgo=l(),hh=a("li"),Jce=a("strong"),Ego=o("roformer"),Cgo=o(" \u2014 "),QN=a("a"),wgo=o("RoFormerConfig"),Ago=o(" (RoFormer model)"),Lgo=l(),uh=a("li"),Yce=a("strong"),ygo=o("segformer"),xgo=o(" \u2014 "),WN=a("a"),$go=o("SegformerConfig"),kgo=o(" (SegFormer model)"),Sgo=l(),ph=a("li"),Kce=a("strong"),Rgo=o("sew"),Pgo=o(" \u2014 "),UN=a("a"),Bgo=o("SEWConfig"),Igo=o(" (SEW model)"),Ngo=l(),_h=a("li"),Zce=a("strong"),qgo=o("sew-d"),jgo=o(" \u2014 "),HN=a("a"),Dgo=o("SEWDConfig"),Ggo=o(" (SEW-D model)"),Ogo=l(),bh=a("li"),efe=a("strong"),Vgo=o("speech-encoder-decoder"),Xgo=o(" \u2014 "),JN=a("a"),zgo=o("SpeechEncoderDecoderConfig"),Qgo=o(" (Speech Encoder decoder model)"),Wgo=l(),vh=a("li"),ofe=a("strong"),Ugo=o("speech_to_text"),Hgo=o(" \u2014 "),YN=a("a"),Jgo=o("Speech2TextConfig"),Ygo=o(" (Speech2Text model)"),Kgo=l(),Fh=a("li"),rfe=a("strong"),Zgo=o("speech_to_text_2"),eho=o(" \u2014 "),KN=a("a"),oho=o("Speech2Text2Config"),rho=o(" (Speech2Text2 model)"),tho=l(),Th=a("li"),tfe=a("strong"),aho=o("splinter"),nho=o(" \u2014 "),ZN=a("a"),sho=o("SplinterConfig"),lho=o(" (Splinter model)"),iho=l(),Mh=a("li"),afe=a("strong"),dho=o("squeezebert"),mho=o(" \u2014 "),eq=a("a"),cho=o("SqueezeBertConfig"),fho=o(" (SqueezeBERT model)"),gho=l(),Eh=a("li"),nfe=a("strong"),hho=o("swin"),uho=o(" \u2014 "),oq=a("a"),pho=o("SwinConfig"),_ho=o(" (Swin Transformer model)"),bho=l(),Ch=a("li"),sfe=a("strong"),vho=o("swinv2"),Fho=o(" \u2014 "),rq=a("a"),Tho=o("Swinv2Config"),Mho=o(" (Swin Transformer V2 model)"),Eho=l(),wh=a("li"),lfe=a("strong"),Cho=o("t5"),who=o(" \u2014 "),tq=a("a"),Aho=o("T5Config"),Lho=o(" (T5 model)"),yho=l(),Ah=a("li"),ife=a("strong"),xho=o("tapas"),$ho=o(" \u2014 "),aq=a("a"),kho=o("TapasConfig"),Sho=o(" (TAPAS model)"),Rho=l(),Lh=a("li"),dfe=a("strong"),Pho=o("time_series_transformer"),Bho=o(" \u2014 "),nq=a("a"),Iho=o("TimeSeriesTransformerConfig"),Nho=o(" (Time Series Transformer model)"),qho=l(),yh=a("li"),mfe=a("strong"),jho=o("trajectory_transformer"),Dho=o(" \u2014 "),sq=a("a"),Gho=o("TrajectoryTransformerConfig"),Oho=o(" (Trajectory Transformer model)"),Vho=l(),xh=a("li"),cfe=a("strong"),Xho=o("transfo-xl"),zho=o(" \u2014 "),lq=a("a"),Qho=o("TransfoXLConfig"),Who=o(" (Transformer-XL model)"),Uho=l(),$h=a("li"),ffe=a("strong"),Hho=o("trocr"),Jho=o(" \u2014 "),iq=a("a"),Yho=o("TrOCRConfig"),Kho=o(" (TrOCR model)"),Zho=l(),kh=a("li"),gfe=a("strong"),euo=o("unispeech"),ouo=o(" \u2014 "),dq=a("a"),ruo=o("UniSpeechConfig"),tuo=o(" (UniSpeech model)"),auo=l(),Sh=a("li"),hfe=a("strong"),nuo=o("unispeech-sat"),suo=o(" \u2014 "),mq=a("a"),luo=o("UniSpeechSatConfig"),iuo=o(" (UniSpeechSat model)"),duo=l(),Rh=a("li"),ufe=a("strong"),muo=o("van"),cuo=o(" \u2014 "),cq=a("a"),fuo=o("VanConfig"),guo=o(" (VAN model)"),huo=l(),Ph=a("li"),pfe=a("strong"),uuo=o("videomae"),puo=o(" \u2014 "),fq=a("a"),_uo=o("VideoMAEConfig"),buo=o(" (VideoMAE model)"),vuo=l(),Bh=a("li"),_fe=a("strong"),Fuo=o("vilt"),Tuo=o(" \u2014 "),gq=a("a"),Muo=o("ViltConfig"),Euo=o(" (ViLT model)"),Cuo=l(),Ih=a("li"),bfe=a("strong"),wuo=o("vision-encoder-decoder"),Auo=o(" \u2014 "),hq=a("a"),Luo=o("VisionEncoderDecoderConfig"),yuo=o(" (Vision Encoder decoder model)"),xuo=l(),Nh=a("li"),vfe=a("strong"),$uo=o("vision-text-dual-encoder"),kuo=o(" \u2014 "),uq=a("a"),Suo=o("VisionTextDualEncoderConfig"),Ruo=o(" (VisionTextDualEncoder model)"),Puo=l(),qh=a("li"),Ffe=a("strong"),Buo=o("visual_bert"),Iuo=o(" \u2014 "),pq=a("a"),Nuo=o("VisualBertConfig"),quo=o(" (VisualBERT model)"),juo=l(),jh=a("li"),Tfe=a("strong"),Duo=o("vit"),Guo=o(" \u2014 "),_q=a("a"),Ouo=o("ViTConfig"),Vuo=o(" (ViT model)"),Xuo=l(),Dh=a("li"),Mfe=a("strong"),zuo=o("vit_mae"),Quo=o(" \u2014 "),bq=a("a"),Wuo=o("ViTMAEConfig"),Uuo=o(" (ViTMAE model)"),Huo=l(),Gh=a("li"),Efe=a("strong"),Juo=o("vit_msn"),Yuo=o(" \u2014 "),vq=a("a"),Kuo=o("ViTMSNConfig"),Zuo=o(" (ViTMSN model)"),epo=l(),Oh=a("li"),Cfe=a("strong"),opo=o("wav2vec2"),rpo=o(" \u2014 "),Fq=a("a"),tpo=o("Wav2Vec2Config"),apo=o(" (Wav2Vec2 model)"),npo=l(),Vh=a("li"),wfe=a("strong"),spo=o("wav2vec2-conformer"),lpo=o(" \u2014 "),Tq=a("a"),ipo=o("Wav2Vec2ConformerConfig"),dpo=o(" (Wav2Vec2-Conformer model)"),mpo=l(),Xh=a("li"),Afe=a("strong"),cpo=o("wavlm"),fpo=o(" \u2014 "),Mq=a("a"),gpo=o("WavLMConfig"),hpo=o(" (WavLM model)"),upo=l(),zh=a("li"),Lfe=a("strong"),ppo=o("xclip"),_po=o(" \u2014 "),Eq=a("a"),bpo=o("XCLIPConfig"),vpo=o(" (X-CLIP model)"),Fpo=l(),Qh=a("li"),yfe=a("strong"),Tpo=o("xglm"),Mpo=o(" \u2014 "),Cq=a("a"),Epo=o("XGLMConfig"),Cpo=o(" (XGLM model)"),wpo=l(),Wh=a("li"),xfe=a("strong"),Apo=o("xlm"),Lpo=o(" \u2014 "),wq=a("a"),ypo=o("XLMConfig"),xpo=o(" (XLM model)"),$po=l(),Uh=a("li"),$fe=a("strong"),kpo=o("xlm-prophetnet"),Spo=o(" \u2014 "),Aq=a("a"),Rpo=o("XLMProphetNetConfig"),Ppo=o(" (XLM-ProphetNet model)"),Bpo=l(),Hh=a("li"),kfe=a("strong"),Ipo=o("xlm-roberta"),Npo=o(" \u2014 "),Lq=a("a"),qpo=o("XLMRobertaConfig"),jpo=o(" (XLM-RoBERTa model)"),Dpo=l(),Jh=a("li"),Sfe=a("strong"),Gpo=o("xlm-roberta-xl"),Opo=o(" \u2014 "),yq=a("a"),Vpo=o("XLMRobertaXLConfig"),Xpo=o(" (XLM-RoBERTa-XL model)"),zpo=l(),Yh=a("li"),Rfe=a("strong"),Qpo=o("xlnet"),Wpo=o(" \u2014 "),xq=a("a"),Upo=o("XLNetConfig"),Hpo=o(" (XLNet model)"),Jpo=l(),Kh=a("li"),Pfe=a("strong"),Ypo=o("yolos"),Kpo=o(" \u2014 "),$q=a("a"),Zpo=o("YolosConfig"),e_o=o(" (YOLOS model)"),o_o=l(),Zh=a("li"),Bfe=a("strong"),r_o=o("yoso"),t_o=o(" \u2014 "),kq=a("a"),a_o=o("YosoConfig"),n_o=o(" (YOSO model)"),s_o=l(),F(eu.$$.fragment),l_o=l(),ou=a("div"),F(ix.$$.fragment),i_o=l(),Ife=a("p"),d_o=o("Register a new configuration for this class."),YZe=l(),gd=a("h2"),ru=a("a"),Nfe=a("span"),F(dx.$$.fragment),m_o=l(),qfe=a("span"),c_o=o("AutoTokenizer"),KZe=l(),ko=a("div"),F(mx.$$.fragment),f_o=l(),cx=a("p"),g_o=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Sq=a("a"),h_o=o("AutoTokenizer.from_pretrained()"),u_o=o(" class method."),p_o=l(),fx=a("p"),__o=o("This class cannot be instantiated directly using "),jfe=a("code"),b_o=o("__init__()"),v_o=o(" (throws an error)."),F_o=l(),Br=a("div"),F(gx.$$.fragment),T_o=l(),Dfe=a("p"),M_o=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),E_o=l(),Ua=a("p"),C_o=o("The tokenizer class to instantiate is selected based on the "),Gfe=a("code"),w_o=o("model_type"),A_o=o(` property of the config object (either
passed as an argument or loaded from `),Ofe=a("code"),L_o=o("pretrained_model_name_or_path"),y_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=a("code"),x_o=o("pretrained_model_name_or_path"),$_o=o(":"),k_o=l(),k=a("ul"),ns=a("li"),Xfe=a("strong"),S_o=o("albert"),R_o=o(" \u2014 "),Rq=a("a"),P_o=o("AlbertTokenizer"),B_o=o(" or "),Pq=a("a"),I_o=o("AlbertTokenizerFast"),N_o=o(" (ALBERT model)"),q_o=l(),ss=a("li"),zfe=a("strong"),j_o=o("bart"),D_o=o(" \u2014 "),Bq=a("a"),G_o=o("BartTokenizer"),O_o=o(" or "),Iq=a("a"),V_o=o("BartTokenizerFast"),X_o=o(" (BART model)"),z_o=l(),ls=a("li"),Qfe=a("strong"),Q_o=o("barthez"),W_o=o(" \u2014 "),Nq=a("a"),U_o=o("BarthezTokenizer"),H_o=o(" or "),qq=a("a"),J_o=o("BarthezTokenizerFast"),Y_o=o(" (BARThez model)"),K_o=l(),tu=a("li"),Wfe=a("strong"),Z_o=o("bartpho"),e1o=o(" \u2014 "),jq=a("a"),o1o=o("BartphoTokenizer"),r1o=o(" (BARTpho model)"),t1o=l(),is=a("li"),Ufe=a("strong"),a1o=o("bert"),n1o=o(" \u2014 "),Dq=a("a"),s1o=o("BertTokenizer"),l1o=o(" or "),Gq=a("a"),i1o=o("BertTokenizerFast"),d1o=o(" (BERT model)"),m1o=l(),au=a("li"),Hfe=a("strong"),c1o=o("bert-generation"),f1o=o(" \u2014 "),Oq=a("a"),g1o=o("BertGenerationTokenizer"),h1o=o(" (Bert Generation model)"),u1o=l(),nu=a("li"),Jfe=a("strong"),p1o=o("bert-japanese"),_1o=o(" \u2014 "),Vq=a("a"),b1o=o("BertJapaneseTokenizer"),v1o=o(" (BertJapanese model)"),F1o=l(),su=a("li"),Yfe=a("strong"),T1o=o("bertweet"),M1o=o(" \u2014 "),Xq=a("a"),E1o=o("BertweetTokenizer"),C1o=o(" (BERTweet model)"),w1o=l(),ds=a("li"),Kfe=a("strong"),A1o=o("big_bird"),L1o=o(" \u2014 "),zq=a("a"),y1o=o("BigBirdTokenizer"),x1o=o(" or "),Qq=a("a"),$1o=o("BigBirdTokenizerFast"),k1o=o(" (BigBird model)"),S1o=l(),ms=a("li"),Zfe=a("strong"),R1o=o("bigbird_pegasus"),P1o=o(" \u2014 "),Wq=a("a"),B1o=o("PegasusTokenizer"),I1o=o(" or "),Uq=a("a"),N1o=o("PegasusTokenizerFast"),q1o=o(" (BigBird-Pegasus model)"),j1o=l(),cs=a("li"),ege=a("strong"),D1o=o("blenderbot"),G1o=o(" \u2014 "),Hq=a("a"),O1o=o("BlenderbotTokenizer"),V1o=o(" or "),Jq=a("a"),X1o=o("BlenderbotTokenizerFast"),z1o=o(" (Blenderbot model)"),Q1o=l(),lu=a("li"),oge=a("strong"),W1o=o("blenderbot-small"),U1o=o(" \u2014 "),Yq=a("a"),H1o=o("BlenderbotSmallTokenizer"),J1o=o(" (BlenderbotSmall model)"),Y1o=l(),iu=a("li"),rge=a("strong"),K1o=o("bloom"),Z1o=o(" \u2014 "),Kq=a("a"),e2o=o("BloomTokenizerFast"),o2o=o(" (BLOOM model)"),r2o=l(),du=a("li"),tge=a("strong"),t2o=o("byt5"),a2o=o(" \u2014 "),Zq=a("a"),n2o=o("ByT5Tokenizer"),s2o=o(" (ByT5 model)"),l2o=l(),fs=a("li"),age=a("strong"),i2o=o("camembert"),d2o=o(" \u2014 "),ej=a("a"),m2o=o("CamembertTokenizer"),c2o=o(" or "),oj=a("a"),f2o=o("CamembertTokenizerFast"),g2o=o(" (CamemBERT model)"),h2o=l(),mu=a("li"),nge=a("strong"),u2o=o("canine"),p2o=o(" \u2014 "),rj=a("a"),_2o=o("CanineTokenizer"),b2o=o(" (CANINE model)"),v2o=l(),gs=a("li"),sge=a("strong"),F2o=o("clip"),T2o=o(" \u2014 "),tj=a("a"),M2o=o("CLIPTokenizer"),E2o=o(" or "),aj=a("a"),C2o=o("CLIPTokenizerFast"),w2o=o(" (CLIP model)"),A2o=l(),hs=a("li"),lge=a("strong"),L2o=o("codegen"),y2o=o(" \u2014 "),nj=a("a"),x2o=o("CodeGenTokenizer"),$2o=o(" or "),sj=a("a"),k2o=o("CodeGenTokenizerFast"),S2o=o(" (CodeGen model)"),R2o=l(),us=a("li"),ige=a("strong"),P2o=o("convbert"),B2o=o(" \u2014 "),lj=a("a"),I2o=o("ConvBertTokenizer"),N2o=o(" or "),ij=a("a"),q2o=o("ConvBertTokenizerFast"),j2o=o(" (ConvBERT model)"),D2o=l(),ps=a("li"),dge=a("strong"),G2o=o("cpm"),O2o=o(" \u2014 "),dj=a("a"),V2o=o("CpmTokenizer"),X2o=o(" or "),mj=a("a"),z2o=o("CpmTokenizerFast"),Q2o=o(" (CPM model)"),W2o=l(),cu=a("li"),mge=a("strong"),U2o=o("ctrl"),H2o=o(" \u2014 "),cj=a("a"),J2o=o("CTRLTokenizer"),Y2o=o(" (CTRL model)"),K2o=l(),_s=a("li"),cge=a("strong"),Z2o=o("data2vec-text"),ebo=o(" \u2014 "),fj=a("a"),obo=o("RobertaTokenizer"),rbo=o(" or "),gj=a("a"),tbo=o("RobertaTokenizerFast"),abo=o(" (Data2VecText model)"),nbo=l(),bs=a("li"),fge=a("strong"),sbo=o("deberta"),lbo=o(" \u2014 "),hj=a("a"),ibo=o("DebertaTokenizer"),dbo=o(" or "),uj=a("a"),mbo=o("DebertaTokenizerFast"),cbo=o(" (DeBERTa model)"),fbo=l(),vs=a("li"),gge=a("strong"),gbo=o("deberta-v2"),hbo=o(" \u2014 "),pj=a("a"),ubo=o("DebertaV2Tokenizer"),pbo=o(" or "),_j=a("a"),_bo=o("DebertaV2TokenizerFast"),bbo=o(" (DeBERTa-v2 model)"),vbo=l(),Fs=a("li"),hge=a("strong"),Fbo=o("distilbert"),Tbo=o(" \u2014 "),bj=a("a"),Mbo=o("DistilBertTokenizer"),Ebo=o(" or "),vj=a("a"),Cbo=o("DistilBertTokenizerFast"),wbo=o(" (DistilBERT model)"),Abo=l(),Ts=a("li"),uge=a("strong"),Lbo=o("dpr"),ybo=o(" \u2014 "),Fj=a("a"),xbo=o("DPRQuestionEncoderTokenizer"),$bo=o(" or "),Tj=a("a"),kbo=o("DPRQuestionEncoderTokenizerFast"),Sbo=o(" (DPR model)"),Rbo=l(),Ms=a("li"),pge=a("strong"),Pbo=o("electra"),Bbo=o(" \u2014 "),Mj=a("a"),Ibo=o("ElectraTokenizer"),Nbo=o(" or "),Ej=a("a"),qbo=o("ElectraTokenizerFast"),jbo=o(" (ELECTRA model)"),Dbo=l(),Es=a("li"),_ge=a("strong"),Gbo=o("ernie"),Obo=o(" \u2014 "),Cj=a("a"),Vbo=o("BertTokenizer"),Xbo=o(" or "),wj=a("a"),zbo=o("BertTokenizerFast"),Qbo=o(" (ERNIE model)"),Wbo=l(),fu=a("li"),bge=a("strong"),Ubo=o("flaubert"),Hbo=o(" \u2014 "),Aj=a("a"),Jbo=o("FlaubertTokenizer"),Ybo=o(" (FlauBERT model)"),Kbo=l(),Cs=a("li"),vge=a("strong"),Zbo=o("fnet"),evo=o(" \u2014 "),Lj=a("a"),ovo=o("FNetTokenizer"),rvo=o(" or "),yj=a("a"),tvo=o("FNetTokenizerFast"),avo=o(" (FNet model)"),nvo=l(),gu=a("li"),Fge=a("strong"),svo=o("fsmt"),lvo=o(" \u2014 "),xj=a("a"),ivo=o("FSMTTokenizer"),dvo=o(" (FairSeq Machine-Translation model)"),mvo=l(),ws=a("li"),Tge=a("strong"),cvo=o("funnel"),fvo=o(" \u2014 "),$j=a("a"),gvo=o("FunnelTokenizer"),hvo=o(" or "),kj=a("a"),uvo=o("FunnelTokenizerFast"),pvo=o(" (Funnel Transformer model)"),_vo=l(),As=a("li"),Mge=a("strong"),bvo=o("gpt2"),vvo=o(" \u2014 "),Sj=a("a"),Fvo=o("GPT2Tokenizer"),Tvo=o(" or "),Rj=a("a"),Mvo=o("GPT2TokenizerFast"),Evo=o(" (OpenAI GPT-2 model)"),Cvo=l(),Ls=a("li"),Ege=a("strong"),wvo=o("gpt_neo"),Avo=o(" \u2014 "),Pj=a("a"),Lvo=o("GPT2Tokenizer"),yvo=o(" or "),Bj=a("a"),xvo=o("GPT2TokenizerFast"),$vo=o(" (GPT Neo model)"),kvo=l(),hu=a("li"),Cge=a("strong"),Svo=o("gpt_neox"),Rvo=o(" \u2014 "),Ij=a("a"),Pvo=o("GPTNeoXTokenizerFast"),Bvo=o(" (GPT NeoX model)"),Ivo=l(),uu=a("li"),wge=a("strong"),Nvo=o("gpt_neox_japanese"),qvo=o(" \u2014 "),Nj=a("a"),jvo=o("GPTNeoXJapaneseTokenizer"),Dvo=o(" (GPT NeoX Japanese model)"),Gvo=l(),ys=a("li"),Age=a("strong"),Ovo=o("gptj"),Vvo=o(" \u2014 "),qj=a("a"),Xvo=o("GPT2Tokenizer"),zvo=o(" or "),jj=a("a"),Qvo=o("GPT2TokenizerFast"),Wvo=o(" (GPT-J model)"),Uvo=l(),xs=a("li"),Lge=a("strong"),Hvo=o("groupvit"),Jvo=o(" \u2014 "),Dj=a("a"),Yvo=o("CLIPTokenizer"),Kvo=o(" or "),Gj=a("a"),Zvo=o("CLIPTokenizerFast"),eFo=o(" (GroupViT model)"),oFo=l(),$s=a("li"),yge=a("strong"),rFo=o("herbert"),tFo=o(" \u2014 "),Oj=a("a"),aFo=o("HerbertTokenizer"),nFo=o(" or "),Vj=a("a"),sFo=o("HerbertTokenizerFast"),lFo=o(" (HerBERT model)"),iFo=l(),pu=a("li"),xge=a("strong"),dFo=o("hubert"),mFo=o(" \u2014 "),Xj=a("a"),cFo=o("Wav2Vec2CTCTokenizer"),fFo=o(" (Hubert model)"),gFo=l(),ks=a("li"),$ge=a("strong"),hFo=o("ibert"),uFo=o(" \u2014 "),zj=a("a"),pFo=o("RobertaTokenizer"),_Fo=o(" or "),Qj=a("a"),bFo=o("RobertaTokenizerFast"),vFo=o(" (I-BERT model)"),FFo=l(),Ss=a("li"),kge=a("strong"),TFo=o("layoutlm"),MFo=o(" \u2014 "),Wj=a("a"),EFo=o("LayoutLMTokenizer"),CFo=o(" or "),Uj=a("a"),wFo=o("LayoutLMTokenizerFast"),AFo=o(" (LayoutLM model)"),LFo=l(),Rs=a("li"),Sge=a("strong"),yFo=o("layoutlmv2"),xFo=o(" \u2014 "),Hj=a("a"),$Fo=o("LayoutLMv2Tokenizer"),kFo=o(" or "),Jj=a("a"),SFo=o("LayoutLMv2TokenizerFast"),RFo=o(" (LayoutLMv2 model)"),PFo=l(),Ps=a("li"),Rge=a("strong"),BFo=o("layoutlmv3"),IFo=o(" \u2014 "),Yj=a("a"),NFo=o("LayoutLMv3Tokenizer"),qFo=o(" or "),Kj=a("a"),jFo=o("LayoutLMv3TokenizerFast"),DFo=o(" (LayoutLMv3 model)"),GFo=l(),Bs=a("li"),Pge=a("strong"),OFo=o("layoutxlm"),VFo=o(" \u2014 "),Zj=a("a"),XFo=o("LayoutXLMTokenizer"),zFo=o(" or "),eD=a("a"),QFo=o("LayoutXLMTokenizerFast"),WFo=o(" (LayoutXLM model)"),UFo=l(),Is=a("li"),Bge=a("strong"),HFo=o("led"),JFo=o(" \u2014 "),oD=a("a"),YFo=o("LEDTokenizer"),KFo=o(" or "),rD=a("a"),ZFo=o("LEDTokenizerFast"),eTo=o(" (LED model)"),oTo=l(),Ns=a("li"),Ige=a("strong"),rTo=o("longformer"),tTo=o(" \u2014 "),tD=a("a"),aTo=o("LongformerTokenizer"),nTo=o(" or "),aD=a("a"),sTo=o("LongformerTokenizerFast"),lTo=o(" (Longformer model)"),iTo=l(),qs=a("li"),Nge=a("strong"),dTo=o("longt5"),mTo=o(" \u2014 "),nD=a("a"),cTo=o("T5Tokenizer"),fTo=o(" or "),sD=a("a"),gTo=o("T5TokenizerFast"),hTo=o(" (LongT5 model)"),uTo=l(),_u=a("li"),qge=a("strong"),pTo=o("luke"),_To=o(" \u2014 "),lD=a("a"),bTo=o("LukeTokenizer"),vTo=o(" (LUKE model)"),FTo=l(),js=a("li"),jge=a("strong"),TTo=o("lxmert"),MTo=o(" \u2014 "),iD=a("a"),ETo=o("LxmertTokenizer"),CTo=o(" or "),dD=a("a"),wTo=o("LxmertTokenizerFast"),ATo=o(" (LXMERT model)"),LTo=l(),bu=a("li"),Dge=a("strong"),yTo=o("m2m_100"),xTo=o(" \u2014 "),mD=a("a"),$To=o("M2M100Tokenizer"),kTo=o(" (M2M100 model)"),STo=l(),vu=a("li"),Gge=a("strong"),RTo=o("marian"),PTo=o(" \u2014 "),cD=a("a"),BTo=o("MarianTokenizer"),ITo=o(" (Marian model)"),NTo=l(),Ds=a("li"),Oge=a("strong"),qTo=o("mbart"),jTo=o(" \u2014 "),fD=a("a"),DTo=o("MBartTokenizer"),GTo=o(" or "),gD=a("a"),OTo=o("MBartTokenizerFast"),VTo=o(" (mBART model)"),XTo=l(),Gs=a("li"),Vge=a("strong"),zTo=o("mbart50"),QTo=o(" \u2014 "),hD=a("a"),WTo=o("MBart50Tokenizer"),UTo=o(" or "),uD=a("a"),HTo=o("MBart50TokenizerFast"),JTo=o(" (mBART-50 model)"),YTo=l(),Os=a("li"),Xge=a("strong"),KTo=o("megatron-bert"),ZTo=o(" \u2014 "),pD=a("a"),eMo=o("BertTokenizer"),oMo=o(" or "),_D=a("a"),rMo=o("BertTokenizerFast"),tMo=o(" (Megatron-BERT model)"),aMo=l(),Fu=a("li"),zge=a("strong"),nMo=o("mluke"),sMo=o(" \u2014 "),bD=a("a"),lMo=o("MLukeTokenizer"),iMo=o(" (mLUKE model)"),dMo=l(),Vs=a("li"),Qge=a("strong"),mMo=o("mobilebert"),cMo=o(" \u2014 "),vD=a("a"),fMo=o("MobileBertTokenizer"),gMo=o(" or "),FD=a("a"),hMo=o("MobileBertTokenizerFast"),uMo=o(" (MobileBERT model)"),pMo=l(),Xs=a("li"),Wge=a("strong"),_Mo=o("mpnet"),bMo=o(" \u2014 "),TD=a("a"),vMo=o("MPNetTokenizer"),FMo=o(" or "),MD=a("a"),TMo=o("MPNetTokenizerFast"),MMo=o(" (MPNet model)"),EMo=l(),zs=a("li"),Uge=a("strong"),CMo=o("mt5"),wMo=o(" \u2014 "),ED=a("a"),AMo=o("MT5Tokenizer"),LMo=o(" or "),CD=a("a"),yMo=o("MT5TokenizerFast"),xMo=o(" (MT5 model)"),$Mo=l(),Qs=a("li"),Hge=a("strong"),kMo=o("mvp"),SMo=o(" \u2014 "),wD=a("a"),RMo=o("MvpTokenizer"),PMo=o(" or "),AD=a("a"),BMo=o("MvpTokenizerFast"),IMo=o(" (MVP model)"),NMo=l(),Ws=a("li"),Jge=a("strong"),qMo=o("nezha"),jMo=o(" \u2014 "),LD=a("a"),DMo=o("BertTokenizer"),GMo=o(" or "),yD=a("a"),OMo=o("BertTokenizerFast"),VMo=o(" (Nezha model)"),XMo=l(),Us=a("li"),Yge=a("strong"),zMo=o("nllb"),QMo=o(" \u2014 "),xD=a("a"),WMo=o("NllbTokenizer"),UMo=o(" or "),$D=a("a"),HMo=o("NllbTokenizerFast"),JMo=o(" (NLLB model)"),YMo=l(),Hs=a("li"),Kge=a("strong"),KMo=o("nystromformer"),ZMo=o(" \u2014 "),kD=a("a"),eEo=o("AlbertTokenizer"),oEo=o(" or "),SD=a("a"),rEo=o("AlbertTokenizerFast"),tEo=o(" (Nystr\xF6mformer model)"),aEo=l(),Js=a("li"),Zge=a("strong"),nEo=o("openai-gpt"),sEo=o(" \u2014 "),RD=a("a"),lEo=o("OpenAIGPTTokenizer"),iEo=o(" or "),PD=a("a"),dEo=o("OpenAIGPTTokenizerFast"),mEo=o(" (OpenAI GPT model)"),cEo=l(),Tu=a("li"),ehe=a("strong"),fEo=o("opt"),gEo=o(" \u2014 "),BD=a("a"),hEo=o("GPT2Tokenizer"),uEo=o(" (OPT model)"),pEo=l(),Ys=a("li"),ohe=a("strong"),_Eo=o("owlvit"),bEo=o(" \u2014 "),ID=a("a"),vEo=o("CLIPTokenizer"),FEo=o(" or "),ND=a("a"),TEo=o("CLIPTokenizerFast"),MEo=o(" (OWL-ViT model)"),EEo=l(),Ks=a("li"),rhe=a("strong"),CEo=o("pegasus"),wEo=o(" \u2014 "),qD=a("a"),AEo=o("PegasusTokenizer"),LEo=o(" or "),jD=a("a"),yEo=o("PegasusTokenizerFast"),xEo=o(" (Pegasus model)"),$Eo=l(),Mu=a("li"),the=a("strong"),kEo=o("perceiver"),SEo=o(" \u2014 "),DD=a("a"),REo=o("PerceiverTokenizer"),PEo=o(" (Perceiver model)"),BEo=l(),Eu=a("li"),ahe=a("strong"),IEo=o("phobert"),NEo=o(" \u2014 "),GD=a("a"),qEo=o("PhobertTokenizer"),jEo=o(" (PhoBERT model)"),DEo=l(),Cu=a("li"),nhe=a("strong"),GEo=o("plbart"),OEo=o(" \u2014 "),OD=a("a"),VEo=o("PLBartTokenizer"),XEo=o(" (PLBart model)"),zEo=l(),wu=a("li"),she=a("strong"),QEo=o("prophetnet"),WEo=o(" \u2014 "),VD=a("a"),UEo=o("ProphetNetTokenizer"),HEo=o(" (ProphetNet model)"),JEo=l(),Zs=a("li"),lhe=a("strong"),YEo=o("qdqbert"),KEo=o(" \u2014 "),XD=a("a"),ZEo=o("BertTokenizer"),e4o=o(" or "),zD=a("a"),o4o=o("BertTokenizerFast"),r4o=o(" (QDQBert model)"),t4o=l(),Au=a("li"),ihe=a("strong"),a4o=o("rag"),n4o=o(" \u2014 "),QD=a("a"),s4o=o("RagTokenizer"),l4o=o(" (RAG model)"),i4o=l(),el=a("li"),dhe=a("strong"),d4o=o("realm"),m4o=o(" \u2014 "),WD=a("a"),c4o=o("RealmTokenizer"),f4o=o(" or "),UD=a("a"),g4o=o("RealmTokenizerFast"),h4o=o(" (REALM model)"),u4o=l(),ol=a("li"),mhe=a("strong"),p4o=o("reformer"),_4o=o(" \u2014 "),HD=a("a"),b4o=o("ReformerTokenizer"),v4o=o(" or "),JD=a("a"),F4o=o("ReformerTokenizerFast"),T4o=o(" (Reformer model)"),M4o=l(),rl=a("li"),che=a("strong"),E4o=o("rembert"),C4o=o(" \u2014 "),YD=a("a"),w4o=o("RemBertTokenizer"),A4o=o(" or "),KD=a("a"),L4o=o("RemBertTokenizerFast"),y4o=o(" (RemBERT model)"),x4o=l(),tl=a("li"),fhe=a("strong"),$4o=o("retribert"),k4o=o(" \u2014 "),ZD=a("a"),S4o=o("RetriBertTokenizer"),R4o=o(" or "),eG=a("a"),P4o=o("RetriBertTokenizerFast"),B4o=o(" (RetriBERT model)"),I4o=l(),al=a("li"),ghe=a("strong"),N4o=o("roberta"),q4o=o(" \u2014 "),oG=a("a"),j4o=o("RobertaTokenizer"),D4o=o(" or "),rG=a("a"),G4o=o("RobertaTokenizerFast"),O4o=o(" (RoBERTa model)"),V4o=l(),nl=a("li"),hhe=a("strong"),X4o=o("roformer"),z4o=o(" \u2014 "),tG=a("a"),Q4o=o("RoFormerTokenizer"),W4o=o(" or "),aG=a("a"),U4o=o("RoFormerTokenizerFast"),H4o=o(" (RoFormer model)"),J4o=l(),Lu=a("li"),uhe=a("strong"),Y4o=o("speech_to_text"),K4o=o(" \u2014 "),nG=a("a"),Z4o=o("Speech2TextTokenizer"),eCo=o(" (Speech2Text model)"),oCo=l(),yu=a("li"),phe=a("strong"),rCo=o("speech_to_text_2"),tCo=o(" \u2014 "),sG=a("a"),aCo=o("Speech2Text2Tokenizer"),nCo=o(" (Speech2Text2 model)"),sCo=l(),sl=a("li"),_he=a("strong"),lCo=o("splinter"),iCo=o(" \u2014 "),lG=a("a"),dCo=o("SplinterTokenizer"),mCo=o(" or "),iG=a("a"),cCo=o("SplinterTokenizerFast"),fCo=o(" (Splinter model)"),gCo=l(),ll=a("li"),bhe=a("strong"),hCo=o("squeezebert"),uCo=o(" \u2014 "),dG=a("a"),pCo=o("SqueezeBertTokenizer"),_Co=o(" or "),mG=a("a"),bCo=o("SqueezeBertTokenizerFast"),vCo=o(" (SqueezeBERT model)"),FCo=l(),il=a("li"),vhe=a("strong"),TCo=o("t5"),MCo=o(" \u2014 "),cG=a("a"),ECo=o("T5Tokenizer"),CCo=o(" or "),fG=a("a"),wCo=o("T5TokenizerFast"),ACo=o(" (T5 model)"),LCo=l(),xu=a("li"),Fhe=a("strong"),yCo=o("tapas"),xCo=o(" \u2014 "),gG=a("a"),$Co=o("TapasTokenizer"),kCo=o(" (TAPAS model)"),SCo=l(),$u=a("li"),The=a("strong"),RCo=o("tapex"),PCo=o(" \u2014 "),hG=a("a"),BCo=o("TapexTokenizer"),ICo=o(" (TAPEX model)"),NCo=l(),ku=a("li"),Mhe=a("strong"),qCo=o("transfo-xl"),jCo=o(" \u2014 "),uG=a("a"),DCo=o("TransfoXLTokenizer"),GCo=o(" (Transformer-XL model)"),OCo=l(),dl=a("li"),Ehe=a("strong"),VCo=o("vilt"),XCo=o(" \u2014 "),pG=a("a"),zCo=o("BertTokenizer"),QCo=o(" or "),_G=a("a"),WCo=o("BertTokenizerFast"),UCo=o(" (ViLT model)"),HCo=l(),ml=a("li"),Che=a("strong"),JCo=o("visual_bert"),YCo=o(" \u2014 "),bG=a("a"),KCo=o("BertTokenizer"),ZCo=o(" or "),vG=a("a"),e3o=o("BertTokenizerFast"),o3o=o(" (VisualBERT model)"),r3o=l(),Su=a("li"),whe=a("strong"),t3o=o("wav2vec2"),a3o=o(" \u2014 "),FG=a("a"),n3o=o("Wav2Vec2CTCTokenizer"),s3o=o(" (Wav2Vec2 model)"),l3o=l(),Ru=a("li"),Ahe=a("strong"),i3o=o("wav2vec2-conformer"),d3o=o(" \u2014 "),TG=a("a"),m3o=o("Wav2Vec2CTCTokenizer"),c3o=o(" (Wav2Vec2-Conformer model)"),f3o=l(),Pu=a("li"),Lhe=a("strong"),g3o=o("wav2vec2_phoneme"),h3o=o(" \u2014 "),MG=a("a"),u3o=o("Wav2Vec2PhonemeCTCTokenizer"),p3o=o(" (Wav2Vec2Phoneme model)"),_3o=l(),cl=a("li"),yhe=a("strong"),b3o=o("xclip"),v3o=o(" \u2014 "),EG=a("a"),F3o=o("CLIPTokenizer"),T3o=o(" or "),CG=a("a"),M3o=o("CLIPTokenizerFast"),E3o=o(" (X-CLIP model)"),C3o=l(),fl=a("li"),xhe=a("strong"),w3o=o("xglm"),A3o=o(" \u2014 "),wG=a("a"),L3o=o("XGLMTokenizer"),y3o=o(" or "),AG=a("a"),x3o=o("XGLMTokenizerFast"),$3o=o(" (XGLM model)"),k3o=l(),Bu=a("li"),$he=a("strong"),S3o=o("xlm"),R3o=o(" \u2014 "),LG=a("a"),P3o=o("XLMTokenizer"),B3o=o(" (XLM model)"),I3o=l(),Iu=a("li"),khe=a("strong"),N3o=o("xlm-prophetnet"),q3o=o(" \u2014 "),yG=a("a"),j3o=o("XLMProphetNetTokenizer"),D3o=o(" (XLM-ProphetNet model)"),G3o=l(),gl=a("li"),She=a("strong"),O3o=o("xlm-roberta"),V3o=o(" \u2014 "),xG=a("a"),X3o=o("XLMRobertaTokenizer"),z3o=o(" or "),$G=a("a"),Q3o=o("XLMRobertaTokenizerFast"),W3o=o(" (XLM-RoBERTa model)"),U3o=l(),hl=a("li"),Rhe=a("strong"),H3o=o("xlm-roberta-xl"),J3o=o(" \u2014 "),kG=a("a"),Y3o=o("XLMRobertaTokenizer"),K3o=o(" or "),SG=a("a"),Z3o=o("XLMRobertaTokenizerFast"),e5o=o(" (XLM-RoBERTa-XL model)"),o5o=l(),ul=a("li"),Phe=a("strong"),r5o=o("xlnet"),t5o=o(" \u2014 "),RG=a("a"),a5o=o("XLNetTokenizer"),n5o=o(" or "),PG=a("a"),s5o=o("XLNetTokenizerFast"),l5o=o(" (XLNet model)"),i5o=l(),pl=a("li"),Bhe=a("strong"),d5o=o("yoso"),m5o=o(" \u2014 "),BG=a("a"),c5o=o("AlbertTokenizer"),f5o=o(" or "),IG=a("a"),g5o=o("AlbertTokenizerFast"),h5o=o(" (YOSO model)"),u5o=l(),F(Nu.$$.fragment),p5o=l(),qu=a("div"),F(hx.$$.fragment),_5o=l(),Ihe=a("p"),b5o=o("Register a new tokenizer in this mapping."),ZZe=l(),hd=a("h2"),ju=a("a"),Nhe=a("span"),F(ux.$$.fragment),v5o=l(),qhe=a("span"),F5o=o("AutoFeatureExtractor"),eeo=l(),So=a("div"),F(px.$$.fragment),T5o=l(),_x=a("p"),M5o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NG=a("a"),E5o=o("AutoFeatureExtractor.from_pretrained()"),C5o=o(" class method."),w5o=l(),bx=a("p"),A5o=o("This class cannot be instantiated directly using "),jhe=a("code"),L5o=o("__init__()"),y5o=o(" (throws an error)."),x5o=l(),Ye=a("div"),F(vx.$$.fragment),$5o=l(),Dhe=a("p"),k5o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),S5o=l(),Ha=a("p"),R5o=o("The feature extractor class to instantiate is selected based on the "),Ghe=a("code"),P5o=o("model_type"),B5o=o(` property of the config object
(either passed as an argument or loaded from `),Ohe=a("code"),I5o=o("pretrained_model_name_or_path"),N5o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vhe=a("code"),q5o=o("pretrained_model_name_or_path"),j5o=o(":"),D5o=l(),z=a("ul"),Du=a("li"),Xhe=a("strong"),G5o=o("beit"),O5o=o(" \u2014 "),qG=a("a"),V5o=o("BeitFeatureExtractor"),X5o=o(" (BEiT model)"),z5o=l(),Gu=a("li"),zhe=a("strong"),Q5o=o("clip"),W5o=o(" \u2014 "),jG=a("a"),U5o=o("CLIPFeatureExtractor"),H5o=o(" (CLIP model)"),J5o=l(),Ou=a("li"),Qhe=a("strong"),Y5o=o("conditional_detr"),K5o=o(" \u2014 "),DG=a("a"),Z5o=o("ConditionalDetrFeatureExtractor"),e0o=o(" (Conditional DETR model)"),o0o=l(),Vu=a("li"),Whe=a("strong"),r0o=o("convnext"),t0o=o(" \u2014 "),GG=a("a"),a0o=o("ConvNextFeatureExtractor"),n0o=o(" (ConvNeXT model)"),s0o=l(),Xu=a("li"),Uhe=a("strong"),l0o=o("cvt"),i0o=o(" \u2014 "),OG=a("a"),d0o=o("ConvNextFeatureExtractor"),m0o=o(" (CvT model)"),c0o=l(),zu=a("li"),Hhe=a("strong"),f0o=o("data2vec-audio"),g0o=o(" \u2014 "),VG=a("a"),h0o=o("Wav2Vec2FeatureExtractor"),u0o=o(" (Data2VecAudio model)"),p0o=l(),Qu=a("li"),Jhe=a("strong"),_0o=o("data2vec-vision"),b0o=o(" \u2014 "),XG=a("a"),v0o=o("BeitFeatureExtractor"),F0o=o(" (Data2VecVision model)"),T0o=l(),Wu=a("li"),Yhe=a("strong"),M0o=o("deformable_detr"),E0o=o(" \u2014 "),zG=a("a"),C0o=o("DeformableDetrFeatureExtractor"),w0o=o(" (Deformable DETR model)"),A0o=l(),Uu=a("li"),Khe=a("strong"),L0o=o("deit"),y0o=o(" \u2014 "),QG=a("a"),x0o=o("DeiTFeatureExtractor"),$0o=o(" (DeiT model)"),k0o=l(),Hu=a("li"),Zhe=a("strong"),S0o=o("detr"),R0o=o(" \u2014 "),WG=a("a"),P0o=o("DetrFeatureExtractor"),B0o=o(" (DETR model)"),I0o=l(),Ju=a("li"),eue=a("strong"),N0o=o("donut"),q0o=o(" \u2014 "),UG=a("a"),j0o=o("DonutFeatureExtractor"),D0o=o(" (Donut model)"),G0o=l(),Yu=a("li"),oue=a("strong"),O0o=o("dpt"),V0o=o(" \u2014 "),HG=a("a"),X0o=o("DPTFeatureExtractor"),z0o=o(" (DPT model)"),Q0o=l(),Ku=a("li"),rue=a("strong"),W0o=o("flava"),U0o=o(" \u2014 "),JG=a("a"),H0o=o("FlavaFeatureExtractor"),J0o=o(" (FLAVA model)"),Y0o=l(),Zu=a("li"),tue=a("strong"),K0o=o("glpn"),Z0o=o(" \u2014 "),YG=a("a"),ewo=o("GLPNFeatureExtractor"),owo=o(" (GLPN model)"),rwo=l(),ep=a("li"),aue=a("strong"),two=o("groupvit"),awo=o(" \u2014 "),KG=a("a"),nwo=o("CLIPFeatureExtractor"),swo=o(" (GroupViT model)"),lwo=l(),op=a("li"),nue=a("strong"),iwo=o("hubert"),dwo=o(" \u2014 "),ZG=a("a"),mwo=o("Wav2Vec2FeatureExtractor"),cwo=o(" (Hubert model)"),fwo=l(),rp=a("li"),sue=a("strong"),gwo=o("imagegpt"),hwo=o(" \u2014 "),eO=a("a"),uwo=o("ImageGPTFeatureExtractor"),pwo=o(" (ImageGPT model)"),_wo=l(),tp=a("li"),lue=a("strong"),bwo=o("layoutlmv2"),vwo=o(" \u2014 "),oO=a("a"),Fwo=o("LayoutLMv2FeatureExtractor"),Two=o(" (LayoutLMv2 model)"),Mwo=l(),ap=a("li"),iue=a("strong"),Ewo=o("layoutlmv3"),Cwo=o(" \u2014 "),rO=a("a"),wwo=o("LayoutLMv3FeatureExtractor"),Awo=o(" (LayoutLMv3 model)"),Lwo=l(),np=a("li"),due=a("strong"),ywo=o("levit"),xwo=o(" \u2014 "),tO=a("a"),$wo=o("LevitFeatureExtractor"),kwo=o(" (LeViT model)"),Swo=l(),sp=a("li"),mue=a("strong"),Rwo=o("maskformer"),Pwo=o(" \u2014 "),aO=a("a"),Bwo=o("MaskFormerFeatureExtractor"),Iwo=o(" (MaskFormer model)"),Nwo=l(),lp=a("li"),cue=a("strong"),qwo=o("mctct"),jwo=o(" \u2014 "),nO=a("a"),Dwo=o("MCTCTFeatureExtractor"),Gwo=o(" (M-CTC-T model)"),Owo=l(),ip=a("li"),fue=a("strong"),Vwo=o("mobilevit"),Xwo=o(" \u2014 "),sO=a("a"),zwo=o("MobileViTFeatureExtractor"),Qwo=o(" (MobileViT model)"),Wwo=l(),dp=a("li"),gue=a("strong"),Uwo=o("owlvit"),Hwo=o(" \u2014 "),lO=a("a"),Jwo=o("OwlViTFeatureExtractor"),Ywo=o(" (OWL-ViT model)"),Kwo=l(),mp=a("li"),hue=a("strong"),Zwo=o("perceiver"),eAo=o(" \u2014 "),iO=a("a"),oAo=o("PerceiverFeatureExtractor"),rAo=o(" (Perceiver model)"),tAo=l(),cp=a("li"),uue=a("strong"),aAo=o("poolformer"),nAo=o(" \u2014 "),dO=a("a"),sAo=o("PoolFormerFeatureExtractor"),lAo=o(" (PoolFormer model)"),iAo=l(),fp=a("li"),pue=a("strong"),dAo=o("regnet"),mAo=o(" \u2014 "),mO=a("a"),cAo=o("ConvNextFeatureExtractor"),fAo=o(" (RegNet model)"),gAo=l(),gp=a("li"),_ue=a("strong"),hAo=o("resnet"),uAo=o(" \u2014 "),cO=a("a"),pAo=o("ConvNextFeatureExtractor"),_Ao=o(" (ResNet model)"),bAo=l(),hp=a("li"),bue=a("strong"),vAo=o("segformer"),FAo=o(" \u2014 "),fO=a("a"),TAo=o("SegformerFeatureExtractor"),MAo=o(" (SegFormer model)"),EAo=l(),up=a("li"),vue=a("strong"),CAo=o("speech_to_text"),wAo=o(" \u2014 "),gO=a("a"),AAo=o("Speech2TextFeatureExtractor"),LAo=o(" (Speech2Text model)"),yAo=l(),pp=a("li"),Fue=a("strong"),xAo=o("swin"),$Ao=o(" \u2014 "),hO=a("a"),kAo=o("ViTFeatureExtractor"),SAo=o(" (Swin Transformer model)"),RAo=l(),_p=a("li"),Tue=a("strong"),PAo=o("swinv2"),BAo=o(" \u2014 "),uO=a("a"),IAo=o("ViTFeatureExtractor"),NAo=o(" (Swin Transformer V2 model)"),qAo=l(),bp=a("li"),Mue=a("strong"),jAo=o("van"),DAo=o(" \u2014 "),pO=a("a"),GAo=o("ConvNextFeatureExtractor"),OAo=o(" (VAN model)"),VAo=l(),vp=a("li"),Eue=a("strong"),XAo=o("videomae"),zAo=o(" \u2014 "),_O=a("a"),QAo=o("VideoMAEFeatureExtractor"),WAo=o(" (VideoMAE model)"),UAo=l(),Fp=a("li"),Cue=a("strong"),HAo=o("vilt"),JAo=o(" \u2014 "),bO=a("a"),YAo=o("ViltFeatureExtractor"),KAo=o(" (ViLT model)"),ZAo=l(),Tp=a("li"),wue=a("strong"),e6o=o("vit"),o6o=o(" \u2014 "),vO=a("a"),r6o=o("ViTFeatureExtractor"),t6o=o(" (ViT model)"),a6o=l(),Mp=a("li"),Aue=a("strong"),n6o=o("vit_mae"),s6o=o(" \u2014 "),FO=a("a"),l6o=o("ViTFeatureExtractor"),i6o=o(" (ViTMAE model)"),d6o=l(),Ep=a("li"),Lue=a("strong"),m6o=o("vit_msn"),c6o=o(" \u2014 "),TO=a("a"),f6o=o("ViTFeatureExtractor"),g6o=o(" (ViTMSN model)"),h6o=l(),Cp=a("li"),yue=a("strong"),u6o=o("wav2vec2"),p6o=o(" \u2014 "),MO=a("a"),_6o=o("Wav2Vec2FeatureExtractor"),b6o=o(" (Wav2Vec2 model)"),v6o=l(),wp=a("li"),xue=a("strong"),F6o=o("wav2vec2-conformer"),T6o=o(" \u2014 "),EO=a("a"),M6o=o("Wav2Vec2FeatureExtractor"),E6o=o(" (Wav2Vec2-Conformer model)"),C6o=l(),Ap=a("li"),$ue=a("strong"),w6o=o("xclip"),A6o=o(" \u2014 "),CO=a("a"),L6o=o("CLIPFeatureExtractor"),y6o=o(" (X-CLIP model)"),x6o=l(),Lp=a("li"),kue=a("strong"),$6o=o("yolos"),k6o=o(" \u2014 "),wO=a("a"),S6o=o("YolosFeatureExtractor"),R6o=o(" (YOLOS model)"),P6o=l(),F(yp.$$.fragment),B6o=l(),F(xp.$$.fragment),I6o=l(),$p=a("div"),F(Fx.$$.fragment),N6o=l(),Sue=a("p"),q6o=o("Register a new feature extractor for this class."),oeo=l(),ud=a("h2"),kp=a("a"),Rue=a("span"),F(Tx.$$.fragment),j6o=l(),Pue=a("span"),D6o=o("AutoProcessor"),reo=l(),Ro=a("div"),F(Mx.$$.fragment),G6o=l(),Ex=a("p"),O6o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AO=a("a"),V6o=o("AutoProcessor.from_pretrained()"),X6o=o(" class method."),z6o=l(),Cx=a("p"),Q6o=o("This class cannot be instantiated directly using "),Bue=a("code"),W6o=o("__init__()"),U6o=o(" (throws an error)."),H6o=l(),Ke=a("div"),F(wx.$$.fragment),J6o=l(),Iue=a("p"),Y6o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),K6o=l(),pd=a("p"),Z6o=o("The processor class to instantiate is selected based on the "),Nue=a("code"),e7o=o("model_type"),o7o=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),r7o=o("pretrained_model_name_or_path"),t7o=o(" if possible):"),a7o=l(),le=a("ul"),Sp=a("li"),jue=a("strong"),n7o=o("clip"),s7o=o(" \u2014 "),LO=a("a"),l7o=o("CLIPProcessor"),i7o=o(" (CLIP model)"),d7o=l(),Rp=a("li"),Due=a("strong"),m7o=o("donut"),c7o=o(" \u2014 "),yO=a("a"),f7o=o("DonutProcessor"),g7o=o(" (Donut model)"),h7o=l(),Pp=a("li"),Gue=a("strong"),u7o=o("flava"),p7o=o(" \u2014 "),xO=a("a"),_7o=o("FlavaProcessor"),b7o=o(" (FLAVA model)"),v7o=l(),Bp=a("li"),Oue=a("strong"),F7o=o("groupvit"),T7o=o(" \u2014 "),$O=a("a"),M7o=o("CLIPProcessor"),E7o=o(" (GroupViT model)"),C7o=l(),Ip=a("li"),Vue=a("strong"),w7o=o("layoutlmv2"),A7o=o(" \u2014 "),kO=a("a"),L7o=o("LayoutLMv2Processor"),y7o=o(" (LayoutLMv2 model)"),x7o=l(),Np=a("li"),Xue=a("strong"),$7o=o("layoutlmv3"),k7o=o(" \u2014 "),SO=a("a"),S7o=o("LayoutLMv3Processor"),R7o=o(" (LayoutLMv3 model)"),P7o=l(),qp=a("li"),zue=a("strong"),B7o=o("layoutxlm"),I7o=o(" \u2014 "),RO=a("a"),N7o=o("LayoutXLMProcessor"),q7o=o(" (LayoutXLM model)"),j7o=l(),jp=a("li"),Que=a("strong"),D7o=o("markuplm"),G7o=o(" \u2014 "),PO=a("a"),O7o=o("MarkupLMProcessor"),V7o=o(" (MarkupLM model)"),X7o=l(),Dp=a("li"),Wue=a("strong"),z7o=o("owlvit"),Q7o=o(" \u2014 "),BO=a("a"),W7o=o("OwlViTProcessor"),U7o=o(" (OWL-ViT model)"),H7o=l(),Gp=a("li"),Uue=a("strong"),J7o=o("sew"),Y7o=o(" \u2014 "),IO=a("a"),K7o=o("Wav2Vec2Processor"),Z7o=o(" (SEW model)"),eLo=l(),Op=a("li"),Hue=a("strong"),oLo=o("sew-d"),rLo=o(" \u2014 "),NO=a("a"),tLo=o("Wav2Vec2Processor"),aLo=o(" (SEW-D model)"),nLo=l(),Vp=a("li"),Jue=a("strong"),sLo=o("speech_to_text"),lLo=o(" \u2014 "),qO=a("a"),iLo=o("Speech2TextProcessor"),dLo=o(" (Speech2Text model)"),mLo=l(),Xp=a("li"),Yue=a("strong"),cLo=o("speech_to_text_2"),fLo=o(" \u2014 "),jO=a("a"),gLo=o("Speech2Text2Processor"),hLo=o(" (Speech2Text2 model)"),uLo=l(),zp=a("li"),Kue=a("strong"),pLo=o("trocr"),_Lo=o(" \u2014 "),DO=a("a"),bLo=o("TrOCRProcessor"),vLo=o(" (TrOCR model)"),FLo=l(),Qp=a("li"),Zue=a("strong"),TLo=o("unispeech"),MLo=o(" \u2014 "),GO=a("a"),ELo=o("Wav2Vec2Processor"),CLo=o(" (UniSpeech model)"),wLo=l(),Wp=a("li"),epe=a("strong"),ALo=o("unispeech-sat"),LLo=o(" \u2014 "),OO=a("a"),yLo=o("Wav2Vec2Processor"),xLo=o(" (UniSpeechSat model)"),$Lo=l(),Up=a("li"),ope=a("strong"),kLo=o("vilt"),SLo=o(" \u2014 "),VO=a("a"),RLo=o("ViltProcessor"),PLo=o(" (ViLT model)"),BLo=l(),Hp=a("li"),rpe=a("strong"),ILo=o("vision-text-dual-encoder"),NLo=o(" \u2014 "),XO=a("a"),qLo=o("VisionTextDualEncoderProcessor"),jLo=o(" (VisionTextDualEncoder model)"),DLo=l(),Jp=a("li"),tpe=a("strong"),GLo=o("wav2vec2"),OLo=o(" \u2014 "),zO=a("a"),VLo=o("Wav2Vec2Processor"),XLo=o(" (Wav2Vec2 model)"),zLo=l(),Yp=a("li"),ape=a("strong"),QLo=o("wav2vec2-conformer"),WLo=o(" \u2014 "),QO=a("a"),ULo=o("Wav2Vec2Processor"),HLo=o(" (Wav2Vec2-Conformer model)"),JLo=l(),Kp=a("li"),npe=a("strong"),YLo=o("wavlm"),KLo=o(" \u2014 "),WO=a("a"),ZLo=o("Wav2Vec2Processor"),eyo=o(" (WavLM model)"),oyo=l(),Zp=a("li"),spe=a("strong"),ryo=o("xclip"),tyo=o(" \u2014 "),UO=a("a"),ayo=o("CLIPProcessor"),nyo=o(" (X-CLIP model)"),syo=l(),F(e_.$$.fragment),lyo=l(),F(o_.$$.fragment),iyo=l(),r_=a("div"),F(Ax.$$.fragment),dyo=l(),lpe=a("p"),myo=o("Register a new processor for this class."),teo=l(),_d=a("h2"),t_=a("a"),ipe=a("span"),F(Lx.$$.fragment),cyo=l(),dpe=a("span"),fyo=o("AutoModel"),aeo=l(),Po=a("div"),F(yx.$$.fragment),gyo=l(),bd=a("p"),hyo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HO=a("a"),uyo=o("from_pretrained()"),pyo=o(" class method or the "),JO=a("a"),_yo=o("from_config()"),byo=o(` class
method.`),vyo=l(),xx=a("p"),Fyo=o("This class cannot be instantiated directly using "),mpe=a("code"),Tyo=o("__init__()"),Myo=o(" (throws an error)."),Eyo=l(),_t=a("div"),F($x.$$.fragment),Cyo=l(),cpe=a("p"),wyo=o("Instantiates one of the base model classes of the library from a configuration."),Ayo=l(),vd=a("p"),Lyo=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),yyo=o("not"),xyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),$yo=o("from_pretrained()"),kyo=o(" to load the model weights."),Syo=l(),F(a_.$$.fragment),Ryo=l(),Ze=a("div"),F(kx.$$.fragment),Pyo=l(),gpe=a("p"),Byo=o("Instantiate one of the base model classes of the library from a pretrained model."),Iyo=l(),Ja=a("p"),Nyo=o("The model class to instantiate is selected based on the "),hpe=a("code"),qyo=o("model_type"),jyo=o(` property of the config object (either
passed as an argument or loaded from `),upe=a("code"),Dyo=o("pretrained_model_name_or_path"),Gyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=a("code"),Oyo=o("pretrained_model_name_or_path"),Vyo=o(":"),Xyo=l(),y=a("ul"),n_=a("li"),_pe=a("strong"),zyo=o("albert"),Qyo=o(" \u2014 "),KO=a("a"),Wyo=o("AlbertModel"),Uyo=o(" (ALBERT model)"),Hyo=l(),s_=a("li"),bpe=a("strong"),Jyo=o("bart"),Yyo=o(" \u2014 "),ZO=a("a"),Kyo=o("BartModel"),Zyo=o(" (BART model)"),e8o=l(),l_=a("li"),vpe=a("strong"),o8o=o("beit"),r8o=o(" \u2014 "),eV=a("a"),t8o=o("BeitModel"),a8o=o(" (BEiT model)"),n8o=l(),i_=a("li"),Fpe=a("strong"),s8o=o("bert"),l8o=o(" \u2014 "),oV=a("a"),i8o=o("BertModel"),d8o=o(" (BERT model)"),m8o=l(),d_=a("li"),Tpe=a("strong"),c8o=o("bert-generation"),f8o=o(" \u2014 "),rV=a("a"),g8o=o("BertGenerationEncoder"),h8o=o(" (Bert Generation model)"),u8o=l(),m_=a("li"),Mpe=a("strong"),p8o=o("big_bird"),_8o=o(" \u2014 "),tV=a("a"),b8o=o("BigBirdModel"),v8o=o(" (BigBird model)"),F8o=l(),c_=a("li"),Epe=a("strong"),T8o=o("bigbird_pegasus"),M8o=o(" \u2014 "),aV=a("a"),E8o=o("BigBirdPegasusModel"),C8o=o(" (BigBird-Pegasus model)"),w8o=l(),f_=a("li"),Cpe=a("strong"),A8o=o("blenderbot"),L8o=o(" \u2014 "),nV=a("a"),y8o=o("BlenderbotModel"),x8o=o(" (Blenderbot model)"),$8o=l(),g_=a("li"),wpe=a("strong"),k8o=o("blenderbot-small"),S8o=o(" \u2014 "),sV=a("a"),R8o=o("BlenderbotSmallModel"),P8o=o(" (BlenderbotSmall model)"),B8o=l(),h_=a("li"),Ape=a("strong"),I8o=o("bloom"),N8o=o(" \u2014 "),lV=a("a"),q8o=o("BloomModel"),j8o=o(" (BLOOM model)"),D8o=l(),u_=a("li"),Lpe=a("strong"),G8o=o("camembert"),O8o=o(" \u2014 "),iV=a("a"),V8o=o("CamembertModel"),X8o=o(" (CamemBERT model)"),z8o=l(),p_=a("li"),ype=a("strong"),Q8o=o("canine"),W8o=o(" \u2014 "),dV=a("a"),U8o=o("CanineModel"),H8o=o(" (CANINE model)"),J8o=l(),__=a("li"),xpe=a("strong"),Y8o=o("clip"),K8o=o(" \u2014 "),mV=a("a"),Z8o=o("CLIPModel"),e9o=o(" (CLIP model)"),o9o=l(),b_=a("li"),$pe=a("strong"),r9o=o("codegen"),t9o=o(" \u2014 "),cV=a("a"),a9o=o("CodeGenModel"),n9o=o(" (CodeGen model)"),s9o=l(),v_=a("li"),kpe=a("strong"),l9o=o("conditional_detr"),i9o=o(" \u2014 "),fV=a("a"),d9o=o("ConditionalDetrModel"),m9o=o(" (Conditional DETR model)"),c9o=l(),F_=a("li"),Spe=a("strong"),f9o=o("convbert"),g9o=o(" \u2014 "),gV=a("a"),h9o=o("ConvBertModel"),u9o=o(" (ConvBERT model)"),p9o=l(),T_=a("li"),Rpe=a("strong"),_9o=o("convnext"),b9o=o(" \u2014 "),hV=a("a"),v9o=o("ConvNextModel"),F9o=o(" (ConvNeXT model)"),T9o=l(),M_=a("li"),Ppe=a("strong"),M9o=o("ctrl"),E9o=o(" \u2014 "),uV=a("a"),C9o=o("CTRLModel"),w9o=o(" (CTRL model)"),A9o=l(),E_=a("li"),Bpe=a("strong"),L9o=o("cvt"),y9o=o(" \u2014 "),pV=a("a"),x9o=o("CvtModel"),$9o=o(" (CvT model)"),k9o=l(),C_=a("li"),Ipe=a("strong"),S9o=o("data2vec-audio"),R9o=o(" \u2014 "),_V=a("a"),P9o=o("Data2VecAudioModel"),B9o=o(" (Data2VecAudio model)"),I9o=l(),w_=a("li"),Npe=a("strong"),N9o=o("data2vec-text"),q9o=o(" \u2014 "),bV=a("a"),j9o=o("Data2VecTextModel"),D9o=o(" (Data2VecText model)"),G9o=l(),A_=a("li"),qpe=a("strong"),O9o=o("data2vec-vision"),V9o=o(" \u2014 "),vV=a("a"),X9o=o("Data2VecVisionModel"),z9o=o(" (Data2VecVision model)"),Q9o=l(),L_=a("li"),jpe=a("strong"),W9o=o("deberta"),U9o=o(" \u2014 "),FV=a("a"),H9o=o("DebertaModel"),J9o=o(" (DeBERTa model)"),Y9o=l(),y_=a("li"),Dpe=a("strong"),K9o=o("deberta-v2"),Z9o=o(" \u2014 "),TV=a("a"),exo=o("DebertaV2Model"),oxo=o(" (DeBERTa-v2 model)"),rxo=l(),x_=a("li"),Gpe=a("strong"),txo=o("decision_transformer"),axo=o(" \u2014 "),MV=a("a"),nxo=o("DecisionTransformerModel"),sxo=o(" (Decision Transformer model)"),lxo=l(),$_=a("li"),Ope=a("strong"),ixo=o("deformable_detr"),dxo=o(" \u2014 "),EV=a("a"),mxo=o("DeformableDetrModel"),cxo=o(" (Deformable DETR model)"),fxo=l(),k_=a("li"),Vpe=a("strong"),gxo=o("deit"),hxo=o(" \u2014 "),CV=a("a"),uxo=o("DeiTModel"),pxo=o(" (DeiT model)"),_xo=l(),S_=a("li"),Xpe=a("strong"),bxo=o("detr"),vxo=o(" \u2014 "),wV=a("a"),Fxo=o("DetrModel"),Txo=o(" (DETR model)"),Mxo=l(),R_=a("li"),zpe=a("strong"),Exo=o("distilbert"),Cxo=o(" \u2014 "),AV=a("a"),wxo=o("DistilBertModel"),Axo=o(" (DistilBERT model)"),Lxo=l(),P_=a("li"),Qpe=a("strong"),yxo=o("donut-swin"),xxo=o(" \u2014 "),LV=a("a"),$xo=o("DonutSwinModel"),kxo=o(" (DonutSwin model)"),Sxo=l(),B_=a("li"),Wpe=a("strong"),Rxo=o("dpr"),Pxo=o(" \u2014 "),yV=a("a"),Bxo=o("DPRQuestionEncoder"),Ixo=o(" (DPR model)"),Nxo=l(),I_=a("li"),Upe=a("strong"),qxo=o("dpt"),jxo=o(" \u2014 "),xV=a("a"),Dxo=o("DPTModel"),Gxo=o(" (DPT model)"),Oxo=l(),N_=a("li"),Hpe=a("strong"),Vxo=o("electra"),Xxo=o(" \u2014 "),$V=a("a"),zxo=o("ElectraModel"),Qxo=o(" (ELECTRA model)"),Wxo=l(),q_=a("li"),Jpe=a("strong"),Uxo=o("ernie"),Hxo=o(" \u2014 "),kV=a("a"),Jxo=o("ErnieModel"),Yxo=o(" (ERNIE model)"),Kxo=l(),j_=a("li"),Ype=a("strong"),Zxo=o("esm"),e$o=o(" \u2014 "),SV=a("a"),o$o=o("EsmModel"),r$o=o(" (ESM model)"),t$o=l(),D_=a("li"),Kpe=a("strong"),a$o=o("flaubert"),n$o=o(" \u2014 "),RV=a("a"),s$o=o("FlaubertModel"),l$o=o(" (FlauBERT model)"),i$o=l(),G_=a("li"),Zpe=a("strong"),d$o=o("flava"),m$o=o(" \u2014 "),PV=a("a"),c$o=o("FlavaModel"),f$o=o(" (FLAVA model)"),g$o=l(),O_=a("li"),e_e=a("strong"),h$o=o("fnet"),u$o=o(" \u2014 "),BV=a("a"),p$o=o("FNetModel"),_$o=o(" (FNet model)"),b$o=l(),V_=a("li"),o_e=a("strong"),v$o=o("fsmt"),F$o=o(" \u2014 "),IV=a("a"),T$o=o("FSMTModel"),M$o=o(" (FairSeq Machine-Translation model)"),E$o=l(),_l=a("li"),r_e=a("strong"),C$o=o("funnel"),w$o=o(" \u2014 "),NV=a("a"),A$o=o("FunnelModel"),L$o=o(" or "),qV=a("a"),y$o=o("FunnelBaseModel"),x$o=o(" (Funnel Transformer model)"),$$o=l(),X_=a("li"),t_e=a("strong"),k$o=o("glpn"),S$o=o(" \u2014 "),jV=a("a"),R$o=o("GLPNModel"),P$o=o(" (GLPN model)"),B$o=l(),z_=a("li"),a_e=a("strong"),I$o=o("gpt2"),N$o=o(" \u2014 "),DV=a("a"),q$o=o("GPT2Model"),j$o=o(" (OpenAI GPT-2 model)"),D$o=l(),Q_=a("li"),n_e=a("strong"),G$o=o("gpt_neo"),O$o=o(" \u2014 "),GV=a("a"),V$o=o("GPTNeoModel"),X$o=o(" (GPT Neo model)"),z$o=l(),W_=a("li"),s_e=a("strong"),Q$o=o("gpt_neox"),W$o=o(" \u2014 "),OV=a("a"),U$o=o("GPTNeoXModel"),H$o=o(" (GPT NeoX model)"),J$o=l(),U_=a("li"),l_e=a("strong"),Y$o=o("gpt_neox_japanese"),K$o=o(" \u2014 "),VV=a("a"),Z$o=o("GPTNeoXJapaneseModel"),eko=o(" (GPT NeoX Japanese model)"),oko=l(),H_=a("li"),i_e=a("strong"),rko=o("gptj"),tko=o(" \u2014 "),XV=a("a"),ako=o("GPTJModel"),nko=o(" (GPT-J model)"),sko=l(),J_=a("li"),d_e=a("strong"),lko=o("groupvit"),iko=o(" \u2014 "),zV=a("a"),dko=o("GroupViTModel"),mko=o(" (GroupViT model)"),cko=l(),Y_=a("li"),m_e=a("strong"),fko=o("hubert"),gko=o(" \u2014 "),QV=a("a"),hko=o("HubertModel"),uko=o(" (Hubert model)"),pko=l(),K_=a("li"),c_e=a("strong"),_ko=o("ibert"),bko=o(" \u2014 "),WV=a("a"),vko=o("IBertModel"),Fko=o(" (I-BERT model)"),Tko=l(),Z_=a("li"),f_e=a("strong"),Mko=o("imagegpt"),Eko=o(" \u2014 "),UV=a("a"),Cko=o("ImageGPTModel"),wko=o(" (ImageGPT model)"),Ako=l(),e1=a("li"),g_e=a("strong"),Lko=o("layoutlm"),yko=o(" \u2014 "),HV=a("a"),xko=o("LayoutLMModel"),$ko=o(" (LayoutLM model)"),kko=l(),o1=a("li"),h_e=a("strong"),Sko=o("layoutlmv2"),Rko=o(" \u2014 "),JV=a("a"),Pko=o("LayoutLMv2Model"),Bko=o(" (LayoutLMv2 model)"),Iko=l(),r1=a("li"),u_e=a("strong"),Nko=o("layoutlmv3"),qko=o(" \u2014 "),YV=a("a"),jko=o("LayoutLMv3Model"),Dko=o(" (LayoutLMv3 model)"),Gko=l(),t1=a("li"),p_e=a("strong"),Oko=o("led"),Vko=o(" \u2014 "),KV=a("a"),Xko=o("LEDModel"),zko=o(" (LED model)"),Qko=l(),a1=a("li"),__e=a("strong"),Wko=o("levit"),Uko=o(" \u2014 "),ZV=a("a"),Hko=o("LevitModel"),Jko=o(" (LeViT model)"),Yko=l(),n1=a("li"),b_e=a("strong"),Kko=o("longformer"),Zko=o(" \u2014 "),eX=a("a"),eSo=o("LongformerModel"),oSo=o(" (Longformer model)"),rSo=l(),s1=a("li"),v_e=a("strong"),tSo=o("longt5"),aSo=o(" \u2014 "),oX=a("a"),nSo=o("LongT5Model"),sSo=o(" (LongT5 model)"),lSo=l(),l1=a("li"),F_e=a("strong"),iSo=o("luke"),dSo=o(" \u2014 "),rX=a("a"),mSo=o("LukeModel"),cSo=o(" (LUKE model)"),fSo=l(),i1=a("li"),T_e=a("strong"),gSo=o("lxmert"),hSo=o(" \u2014 "),tX=a("a"),uSo=o("LxmertModel"),pSo=o(" (LXMERT model)"),_So=l(),d1=a("li"),M_e=a("strong"),bSo=o("m2m_100"),vSo=o(" \u2014 "),aX=a("a"),FSo=o("M2M100Model"),TSo=o(" (M2M100 model)"),MSo=l(),m1=a("li"),E_e=a("strong"),ESo=o("marian"),CSo=o(" \u2014 "),nX=a("a"),wSo=o("MarianModel"),ASo=o(" (Marian model)"),LSo=l(),c1=a("li"),C_e=a("strong"),ySo=o("markuplm"),xSo=o(" \u2014 "),sX=a("a"),$So=o("MarkupLMModel"),kSo=o(" (MarkupLM model)"),SSo=l(),f1=a("li"),w_e=a("strong"),RSo=o("maskformer"),PSo=o(" \u2014 "),lX=a("a"),BSo=o("MaskFormerModel"),ISo=o(" (MaskFormer model)"),NSo=l(),g1=a("li"),A_e=a("strong"),qSo=o("mbart"),jSo=o(" \u2014 "),iX=a("a"),DSo=o("MBartModel"),GSo=o(" (mBART model)"),OSo=l(),h1=a("li"),L_e=a("strong"),VSo=o("mctct"),XSo=o(" \u2014 "),dX=a("a"),zSo=o("MCTCTModel"),QSo=o(" (M-CTC-T model)"),WSo=l(),u1=a("li"),y_e=a("strong"),USo=o("megatron-bert"),HSo=o(" \u2014 "),mX=a("a"),JSo=o("MegatronBertModel"),YSo=o(" (Megatron-BERT model)"),KSo=l(),p1=a("li"),x_e=a("strong"),ZSo=o("mobilebert"),eRo=o(" \u2014 "),cX=a("a"),oRo=o("MobileBertModel"),rRo=o(" (MobileBERT model)"),tRo=l(),_1=a("li"),$_e=a("strong"),aRo=o("mobilevit"),nRo=o(" \u2014 "),fX=a("a"),sRo=o("MobileViTModel"),lRo=o(" (MobileViT model)"),iRo=l(),b1=a("li"),k_e=a("strong"),dRo=o("mpnet"),mRo=o(" \u2014 "),gX=a("a"),cRo=o("MPNetModel"),fRo=o(" (MPNet model)"),gRo=l(),v1=a("li"),S_e=a("strong"),hRo=o("mt5"),uRo=o(" \u2014 "),hX=a("a"),pRo=o("MT5Model"),_Ro=o(" (MT5 model)"),bRo=l(),F1=a("li"),R_e=a("strong"),vRo=o("mvp"),FRo=o(" \u2014 "),uX=a("a"),TRo=o("MvpModel"),MRo=o(" (MVP model)"),ERo=l(),T1=a("li"),P_e=a("strong"),CRo=o("nezha"),wRo=o(" \u2014 "),pX=a("a"),ARo=o("NezhaModel"),LRo=o(" (Nezha model)"),yRo=l(),M1=a("li"),B_e=a("strong"),xRo=o("nllb"),$Ro=o(" \u2014 "),_X=a("a"),kRo=o("M2M100Model"),SRo=o(" (NLLB model)"),RRo=l(),E1=a("li"),I_e=a("strong"),PRo=o("nystromformer"),BRo=o(" \u2014 "),bX=a("a"),IRo=o("NystromformerModel"),NRo=o(" (Nystr\xF6mformer model)"),qRo=l(),C1=a("li"),N_e=a("strong"),jRo=o("openai-gpt"),DRo=o(" \u2014 "),vX=a("a"),GRo=o("OpenAIGPTModel"),ORo=o(" (OpenAI GPT model)"),VRo=l(),w1=a("li"),q_e=a("strong"),XRo=o("opt"),zRo=o(" \u2014 "),FX=a("a"),QRo=o("OPTModel"),WRo=o(" (OPT model)"),URo=l(),A1=a("li"),j_e=a("strong"),HRo=o("owlvit"),JRo=o(" \u2014 "),TX=a("a"),YRo=o("OwlViTModel"),KRo=o(" (OWL-ViT model)"),ZRo=l(),L1=a("li"),D_e=a("strong"),ePo=o("pegasus"),oPo=o(" \u2014 "),MX=a("a"),rPo=o("PegasusModel"),tPo=o(" (Pegasus model)"),aPo=l(),y1=a("li"),G_e=a("strong"),nPo=o("pegasus_x"),sPo=o(" \u2014 "),EX=a("a"),lPo=o("PegasusXModel"),iPo=o(" (PEGASUS-X model)"),dPo=l(),x1=a("li"),O_e=a("strong"),mPo=o("perceiver"),cPo=o(" \u2014 "),CX=a("a"),fPo=o("PerceiverModel"),gPo=o(" (Perceiver model)"),hPo=l(),$1=a("li"),V_e=a("strong"),uPo=o("plbart"),pPo=o(" \u2014 "),wX=a("a"),_Po=o("PLBartModel"),bPo=o(" (PLBart model)"),vPo=l(),k1=a("li"),X_e=a("strong"),FPo=o("poolformer"),TPo=o(" \u2014 "),AX=a("a"),MPo=o("PoolFormerModel"),EPo=o(" (PoolFormer model)"),CPo=l(),S1=a("li"),z_e=a("strong"),wPo=o("prophetnet"),APo=o(" \u2014 "),LX=a("a"),LPo=o("ProphetNetModel"),yPo=o(" (ProphetNet model)"),xPo=l(),R1=a("li"),Q_e=a("strong"),$Po=o("qdqbert"),kPo=o(" \u2014 "),yX=a("a"),SPo=o("QDQBertModel"),RPo=o(" (QDQBert model)"),PPo=l(),P1=a("li"),W_e=a("strong"),BPo=o("reformer"),IPo=o(" \u2014 "),xX=a("a"),NPo=o("ReformerModel"),qPo=o(" (Reformer model)"),jPo=l(),B1=a("li"),U_e=a("strong"),DPo=o("regnet"),GPo=o(" \u2014 "),$X=a("a"),OPo=o("RegNetModel"),VPo=o(" (RegNet model)"),XPo=l(),I1=a("li"),H_e=a("strong"),zPo=o("rembert"),QPo=o(" \u2014 "),kX=a("a"),WPo=o("RemBertModel"),UPo=o(" (RemBERT model)"),HPo=l(),N1=a("li"),J_e=a("strong"),JPo=o("resnet"),YPo=o(" \u2014 "),SX=a("a"),KPo=o("ResNetModel"),ZPo=o(" (ResNet model)"),eBo=l(),q1=a("li"),Y_e=a("strong"),oBo=o("retribert"),rBo=o(" \u2014 "),RX=a("a"),tBo=o("RetriBertModel"),aBo=o(" (RetriBERT model)"),nBo=l(),j1=a("li"),K_e=a("strong"),sBo=o("roberta"),lBo=o(" \u2014 "),PX=a("a"),iBo=o("RobertaModel"),dBo=o(" (RoBERTa model)"),mBo=l(),D1=a("li"),Z_e=a("strong"),cBo=o("roformer"),fBo=o(" \u2014 "),BX=a("a"),gBo=o("RoFormerModel"),hBo=o(" (RoFormer model)"),uBo=l(),G1=a("li"),e1e=a("strong"),pBo=o("segformer"),_Bo=o(" \u2014 "),IX=a("a"),bBo=o("SegformerModel"),vBo=o(" (SegFormer model)"),FBo=l(),O1=a("li"),o1e=a("strong"),TBo=o("sew"),MBo=o(" \u2014 "),NX=a("a"),EBo=o("SEWModel"),CBo=o(" (SEW model)"),wBo=l(),V1=a("li"),r1e=a("strong"),ABo=o("sew-d"),LBo=o(" \u2014 "),qX=a("a"),yBo=o("SEWDModel"),xBo=o(" (SEW-D model)"),$Bo=l(),X1=a("li"),t1e=a("strong"),kBo=o("speech_to_text"),SBo=o(" \u2014 "),jX=a("a"),RBo=o("Speech2TextModel"),PBo=o(" (Speech2Text model)"),BBo=l(),z1=a("li"),a1e=a("strong"),IBo=o("splinter"),NBo=o(" \u2014 "),DX=a("a"),qBo=o("SplinterModel"),jBo=o(" (Splinter model)"),DBo=l(),Q1=a("li"),n1e=a("strong"),GBo=o("squeezebert"),OBo=o(" \u2014 "),GX=a("a"),VBo=o("SqueezeBertModel"),XBo=o(" (SqueezeBERT model)"),zBo=l(),W1=a("li"),s1e=a("strong"),QBo=o("swin"),WBo=o(" \u2014 "),OX=a("a"),UBo=o("SwinModel"),HBo=o(" (Swin Transformer model)"),JBo=l(),U1=a("li"),l1e=a("strong"),YBo=o("swinv2"),KBo=o(" \u2014 "),VX=a("a"),ZBo=o("Swinv2Model"),eIo=o(" (Swin Transformer V2 model)"),oIo=l(),H1=a("li"),i1e=a("strong"),rIo=o("t5"),tIo=o(" \u2014 "),XX=a("a"),aIo=o("T5Model"),nIo=o(" (T5 model)"),sIo=l(),J1=a("li"),d1e=a("strong"),lIo=o("tapas"),iIo=o(" \u2014 "),zX=a("a"),dIo=o("TapasModel"),mIo=o(" (TAPAS model)"),cIo=l(),Y1=a("li"),m1e=a("strong"),fIo=o("time_series_transformer"),gIo=o(" \u2014 "),QX=a("a"),hIo=o("TimeSeriesTransformerModel"),uIo=o(" (Time Series Transformer model)"),pIo=l(),K1=a("li"),c1e=a("strong"),_Io=o("trajectory_transformer"),bIo=o(" \u2014 "),WX=a("a"),vIo=o("TrajectoryTransformerModel"),FIo=o(" (Trajectory Transformer model)"),TIo=l(),Z1=a("li"),f1e=a("strong"),MIo=o("transfo-xl"),EIo=o(" \u2014 "),UX=a("a"),CIo=o("TransfoXLModel"),wIo=o(" (Transformer-XL model)"),AIo=l(),e2=a("li"),g1e=a("strong"),LIo=o("unispeech"),yIo=o(" \u2014 "),HX=a("a"),xIo=o("UniSpeechModel"),$Io=o(" (UniSpeech model)"),kIo=l(),o2=a("li"),h1e=a("strong"),SIo=o("unispeech-sat"),RIo=o(" \u2014 "),JX=a("a"),PIo=o("UniSpeechSatModel"),BIo=o(" (UniSpeechSat model)"),IIo=l(),r2=a("li"),u1e=a("strong"),NIo=o("van"),qIo=o(" \u2014 "),YX=a("a"),jIo=o("VanModel"),DIo=o(" (VAN model)"),GIo=l(),t2=a("li"),p1e=a("strong"),OIo=o("videomae"),VIo=o(" \u2014 "),KX=a("a"),XIo=o("VideoMAEModel"),zIo=o(" (VideoMAE model)"),QIo=l(),a2=a("li"),_1e=a("strong"),WIo=o("vilt"),UIo=o(" \u2014 "),ZX=a("a"),HIo=o("ViltModel"),JIo=o(" (ViLT model)"),YIo=l(),n2=a("li"),b1e=a("strong"),KIo=o("vision-text-dual-encoder"),ZIo=o(" \u2014 "),ez=a("a"),eNo=o("VisionTextDualEncoderModel"),oNo=o(" (VisionTextDualEncoder model)"),rNo=l(),s2=a("li"),v1e=a("strong"),tNo=o("visual_bert"),aNo=o(" \u2014 "),oz=a("a"),nNo=o("VisualBertModel"),sNo=o(" (VisualBERT model)"),lNo=l(),l2=a("li"),F1e=a("strong"),iNo=o("vit"),dNo=o(" \u2014 "),rz=a("a"),mNo=o("ViTModel"),cNo=o(" (ViT model)"),fNo=l(),i2=a("li"),T1e=a("strong"),gNo=o("vit_mae"),hNo=o(" \u2014 "),tz=a("a"),uNo=o("ViTMAEModel"),pNo=o(" (ViTMAE model)"),_No=l(),d2=a("li"),M1e=a("strong"),bNo=o("vit_msn"),vNo=o(" \u2014 "),az=a("a"),FNo=o("ViTMSNModel"),TNo=o(" (ViTMSN model)"),MNo=l(),m2=a("li"),E1e=a("strong"),ENo=o("wav2vec2"),CNo=o(" \u2014 "),nz=a("a"),wNo=o("Wav2Vec2Model"),ANo=o(" (Wav2Vec2 model)"),LNo=l(),c2=a("li"),C1e=a("strong"),yNo=o("wav2vec2-conformer"),xNo=o(" \u2014 "),sz=a("a"),$No=o("Wav2Vec2ConformerModel"),kNo=o(" (Wav2Vec2-Conformer model)"),SNo=l(),f2=a("li"),w1e=a("strong"),RNo=o("wavlm"),PNo=o(" \u2014 "),lz=a("a"),BNo=o("WavLMModel"),INo=o(" (WavLM model)"),NNo=l(),g2=a("li"),A1e=a("strong"),qNo=o("xclip"),jNo=o(" \u2014 "),iz=a("a"),DNo=o("XCLIPModel"),GNo=o(" (X-CLIP model)"),ONo=l(),h2=a("li"),L1e=a("strong"),VNo=o("xglm"),XNo=o(" \u2014 "),dz=a("a"),zNo=o("XGLMModel"),QNo=o(" (XGLM model)"),WNo=l(),u2=a("li"),y1e=a("strong"),UNo=o("xlm"),HNo=o(" \u2014 "),mz=a("a"),JNo=o("XLMModel"),YNo=o(" (XLM model)"),KNo=l(),p2=a("li"),x1e=a("strong"),ZNo=o("xlm-prophetnet"),eqo=o(" \u2014 "),cz=a("a"),oqo=o("XLMProphetNetModel"),rqo=o(" (XLM-ProphetNet model)"),tqo=l(),_2=a("li"),$1e=a("strong"),aqo=o("xlm-roberta"),nqo=o(" \u2014 "),fz=a("a"),sqo=o("XLMRobertaModel"),lqo=o(" (XLM-RoBERTa model)"),iqo=l(),b2=a("li"),k1e=a("strong"),dqo=o("xlm-roberta-xl"),mqo=o(" \u2014 "),gz=a("a"),cqo=o("XLMRobertaXLModel"),fqo=o(" (XLM-RoBERTa-XL model)"),gqo=l(),v2=a("li"),S1e=a("strong"),hqo=o("xlnet"),uqo=o(" \u2014 "),hz=a("a"),pqo=o("XLNetModel"),_qo=o(" (XLNet model)"),bqo=l(),F2=a("li"),R1e=a("strong"),vqo=o("yolos"),Fqo=o(" \u2014 "),uz=a("a"),Tqo=o("YolosModel"),Mqo=o(" (YOLOS model)"),Eqo=l(),T2=a("li"),P1e=a("strong"),Cqo=o("yoso"),wqo=o(" \u2014 "),pz=a("a"),Aqo=o("YosoModel"),Lqo=o(" (YOSO model)"),yqo=l(),M2=a("p"),xqo=o("The model is set in evaluation mode by default using "),B1e=a("code"),$qo=o("model.eval()"),kqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=a("code"),Sqo=o("model.train()"),Rqo=l(),F(E2.$$.fragment),neo=l(),Fd=a("h2"),C2=a("a"),N1e=a("span"),F(Sx.$$.fragment),Pqo=l(),q1e=a("span"),Bqo=o("AutoModelForPreTraining"),seo=l(),Bo=a("div"),F(Rx.$$.fragment),Iqo=l(),Td=a("p"),Nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_z=a("a"),qqo=o("from_pretrained()"),jqo=o(" class method or the "),bz=a("a"),Dqo=o("from_config()"),Gqo=o(` class
method.`),Oqo=l(),Px=a("p"),Vqo=o("This class cannot be instantiated directly using "),j1e=a("code"),Xqo=o("__init__()"),zqo=o(" (throws an error)."),Qqo=l(),bt=a("div"),F(Bx.$$.fragment),Wqo=l(),D1e=a("p"),Uqo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hqo=l(),Md=a("p"),Jqo=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),Yqo=o("not"),Kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),Zqo=o("from_pretrained()"),ejo=o(" to load the model weights."),ojo=l(),F(w2.$$.fragment),rjo=l(),eo=a("div"),F(Ix.$$.fragment),tjo=l(),O1e=a("p"),ajo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),njo=l(),Ya=a("p"),sjo=o("The model class to instantiate is selected based on the "),V1e=a("code"),ljo=o("model_type"),ijo=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),djo=o("pretrained_model_name_or_path"),mjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),cjo=o("pretrained_model_name_or_path"),fjo=o(":"),gjo=l(),G=a("ul"),A2=a("li"),Q1e=a("strong"),hjo=o("albert"),ujo=o(" \u2014 "),Fz=a("a"),pjo=o("AlbertForPreTraining"),_jo=o(" (ALBERT model)"),bjo=l(),L2=a("li"),W1e=a("strong"),vjo=o("bart"),Fjo=o(" \u2014 "),Tz=a("a"),Tjo=o("BartForConditionalGeneration"),Mjo=o(" (BART model)"),Ejo=l(),y2=a("li"),U1e=a("strong"),Cjo=o("bert"),wjo=o(" \u2014 "),Mz=a("a"),Ajo=o("BertForPreTraining"),Ljo=o(" (BERT model)"),yjo=l(),x2=a("li"),H1e=a("strong"),xjo=o("big_bird"),$jo=o(" \u2014 "),Ez=a("a"),kjo=o("BigBirdForPreTraining"),Sjo=o(" (BigBird model)"),Rjo=l(),$2=a("li"),J1e=a("strong"),Pjo=o("bloom"),Bjo=o(" \u2014 "),Cz=a("a"),Ijo=o("BloomForCausalLM"),Njo=o(" (BLOOM model)"),qjo=l(),k2=a("li"),Y1e=a("strong"),jjo=o("camembert"),Djo=o(" \u2014 "),wz=a("a"),Gjo=o("CamembertForMaskedLM"),Ojo=o(" (CamemBERT model)"),Vjo=l(),S2=a("li"),K1e=a("strong"),Xjo=o("ctrl"),zjo=o(" \u2014 "),Az=a("a"),Qjo=o("CTRLLMHeadModel"),Wjo=o(" (CTRL model)"),Ujo=l(),R2=a("li"),Z1e=a("strong"),Hjo=o("data2vec-text"),Jjo=o(" \u2014 "),Lz=a("a"),Yjo=o("Data2VecTextForMaskedLM"),Kjo=o(" (Data2VecText model)"),Zjo=l(),P2=a("li"),e2e=a("strong"),eDo=o("deberta"),oDo=o(" \u2014 "),yz=a("a"),rDo=o("DebertaForMaskedLM"),tDo=o(" (DeBERTa model)"),aDo=l(),B2=a("li"),o2e=a("strong"),nDo=o("deberta-v2"),sDo=o(" \u2014 "),xz=a("a"),lDo=o("DebertaV2ForMaskedLM"),iDo=o(" (DeBERTa-v2 model)"),dDo=l(),I2=a("li"),r2e=a("strong"),mDo=o("distilbert"),cDo=o(" \u2014 "),$z=a("a"),fDo=o("DistilBertForMaskedLM"),gDo=o(" (DistilBERT model)"),hDo=l(),N2=a("li"),t2e=a("strong"),uDo=o("electra"),pDo=o(" \u2014 "),kz=a("a"),_Do=o("ElectraForPreTraining"),bDo=o(" (ELECTRA model)"),vDo=l(),q2=a("li"),a2e=a("strong"),FDo=o("ernie"),TDo=o(" \u2014 "),Sz=a("a"),MDo=o("ErnieForPreTraining"),EDo=o(" (ERNIE model)"),CDo=l(),j2=a("li"),n2e=a("strong"),wDo=o("flaubert"),ADo=o(" \u2014 "),Rz=a("a"),LDo=o("FlaubertWithLMHeadModel"),yDo=o(" (FlauBERT model)"),xDo=l(),D2=a("li"),s2e=a("strong"),$Do=o("flava"),kDo=o(" \u2014 "),Pz=a("a"),SDo=o("FlavaForPreTraining"),RDo=o(" (FLAVA model)"),PDo=l(),G2=a("li"),l2e=a("strong"),BDo=o("fnet"),IDo=o(" \u2014 "),Bz=a("a"),NDo=o("FNetForPreTraining"),qDo=o(" (FNet model)"),jDo=l(),O2=a("li"),i2e=a("strong"),DDo=o("fsmt"),GDo=o(" \u2014 "),Iz=a("a"),ODo=o("FSMTForConditionalGeneration"),VDo=o(" (FairSeq Machine-Translation model)"),XDo=l(),V2=a("li"),d2e=a("strong"),zDo=o("funnel"),QDo=o(" \u2014 "),Nz=a("a"),WDo=o("FunnelForPreTraining"),UDo=o(" (Funnel Transformer model)"),HDo=l(),X2=a("li"),m2e=a("strong"),JDo=o("gpt2"),YDo=o(" \u2014 "),qz=a("a"),KDo=o("GPT2LMHeadModel"),ZDo=o(" (OpenAI GPT-2 model)"),eGo=l(),z2=a("li"),c2e=a("strong"),oGo=o("ibert"),rGo=o(" \u2014 "),jz=a("a"),tGo=o("IBertForMaskedLM"),aGo=o(" (I-BERT model)"),nGo=l(),Q2=a("li"),f2e=a("strong"),sGo=o("layoutlm"),lGo=o(" \u2014 "),Dz=a("a"),iGo=o("LayoutLMForMaskedLM"),dGo=o(" (LayoutLM model)"),mGo=l(),W2=a("li"),g2e=a("strong"),cGo=o("longformer"),fGo=o(" \u2014 "),Gz=a("a"),gGo=o("LongformerForMaskedLM"),hGo=o(" (Longformer model)"),uGo=l(),U2=a("li"),h2e=a("strong"),pGo=o("luke"),_Go=o(" \u2014 "),Oz=a("a"),bGo=o("LukeForMaskedLM"),vGo=o(" (LUKE model)"),FGo=l(),H2=a("li"),u2e=a("strong"),TGo=o("lxmert"),MGo=o(" \u2014 "),Vz=a("a"),EGo=o("LxmertForPreTraining"),CGo=o(" (LXMERT model)"),wGo=l(),J2=a("li"),p2e=a("strong"),AGo=o("megatron-bert"),LGo=o(" \u2014 "),Xz=a("a"),yGo=o("MegatronBertForPreTraining"),xGo=o(" (Megatron-BERT model)"),$Go=l(),Y2=a("li"),_2e=a("strong"),kGo=o("mobilebert"),SGo=o(" \u2014 "),zz=a("a"),RGo=o("MobileBertForPreTraining"),PGo=o(" (MobileBERT model)"),BGo=l(),K2=a("li"),b2e=a("strong"),IGo=o("mpnet"),NGo=o(" \u2014 "),Qz=a("a"),qGo=o("MPNetForMaskedLM"),jGo=o(" (MPNet model)"),DGo=l(),Z2=a("li"),v2e=a("strong"),GGo=o("mvp"),OGo=o(" \u2014 "),Wz=a("a"),VGo=o("MvpForConditionalGeneration"),XGo=o(" (MVP model)"),zGo=l(),eb=a("li"),F2e=a("strong"),QGo=o("nezha"),WGo=o(" \u2014 "),Uz=a("a"),UGo=o("NezhaForPreTraining"),HGo=o(" (Nezha model)"),JGo=l(),ob=a("li"),T2e=a("strong"),YGo=o("openai-gpt"),KGo=o(" \u2014 "),Hz=a("a"),ZGo=o("OpenAIGPTLMHeadModel"),eOo=o(" (OpenAI GPT model)"),oOo=l(),rb=a("li"),M2e=a("strong"),rOo=o("retribert"),tOo=o(" \u2014 "),Jz=a("a"),aOo=o("RetriBertModel"),nOo=o(" (RetriBERT model)"),sOo=l(),tb=a("li"),E2e=a("strong"),lOo=o("roberta"),iOo=o(" \u2014 "),Yz=a("a"),dOo=o("RobertaForMaskedLM"),mOo=o(" (RoBERTa model)"),cOo=l(),ab=a("li"),C2e=a("strong"),fOo=o("splinter"),gOo=o(" \u2014 "),Kz=a("a"),hOo=o("SplinterForPreTraining"),uOo=o(" (Splinter model)"),pOo=l(),nb=a("li"),w2e=a("strong"),_Oo=o("squeezebert"),bOo=o(" \u2014 "),Zz=a("a"),vOo=o("SqueezeBertForMaskedLM"),FOo=o(" (SqueezeBERT model)"),TOo=l(),sb=a("li"),A2e=a("strong"),MOo=o("t5"),EOo=o(" \u2014 "),eQ=a("a"),COo=o("T5ForConditionalGeneration"),wOo=o(" (T5 model)"),AOo=l(),lb=a("li"),L2e=a("strong"),LOo=o("tapas"),yOo=o(" \u2014 "),oQ=a("a"),xOo=o("TapasForMaskedLM"),$Oo=o(" (TAPAS model)"),kOo=l(),ib=a("li"),y2e=a("strong"),SOo=o("transfo-xl"),ROo=o(" \u2014 "),rQ=a("a"),POo=o("TransfoXLLMHeadModel"),BOo=o(" (Transformer-XL model)"),IOo=l(),db=a("li"),x2e=a("strong"),NOo=o("unispeech"),qOo=o(" \u2014 "),tQ=a("a"),jOo=o("UniSpeechForPreTraining"),DOo=o(" (UniSpeech model)"),GOo=l(),mb=a("li"),$2e=a("strong"),OOo=o("unispeech-sat"),VOo=o(" \u2014 "),aQ=a("a"),XOo=o("UniSpeechSatForPreTraining"),zOo=o(" (UniSpeechSat model)"),QOo=l(),cb=a("li"),k2e=a("strong"),WOo=o("videomae"),UOo=o(" \u2014 "),nQ=a("a"),HOo=o("VideoMAEForPreTraining"),JOo=o(" (VideoMAE model)"),YOo=l(),fb=a("li"),S2e=a("strong"),KOo=o("visual_bert"),ZOo=o(" \u2014 "),sQ=a("a"),eVo=o("VisualBertForPreTraining"),oVo=o(" (VisualBERT model)"),rVo=l(),gb=a("li"),R2e=a("strong"),tVo=o("vit_mae"),aVo=o(" \u2014 "),lQ=a("a"),nVo=o("ViTMAEForPreTraining"),sVo=o(" (ViTMAE model)"),lVo=l(),hb=a("li"),P2e=a("strong"),iVo=o("wav2vec2"),dVo=o(" \u2014 "),iQ=a("a"),mVo=o("Wav2Vec2ForPreTraining"),cVo=o(" (Wav2Vec2 model)"),fVo=l(),ub=a("li"),B2e=a("strong"),gVo=o("wav2vec2-conformer"),hVo=o(" \u2014 "),dQ=a("a"),uVo=o("Wav2Vec2ConformerForPreTraining"),pVo=o(" (Wav2Vec2-Conformer model)"),_Vo=l(),pb=a("li"),I2e=a("strong"),bVo=o("xlm"),vVo=o(" \u2014 "),mQ=a("a"),FVo=o("XLMWithLMHeadModel"),TVo=o(" (XLM model)"),MVo=l(),_b=a("li"),N2e=a("strong"),EVo=o("xlm-roberta"),CVo=o(" \u2014 "),cQ=a("a"),wVo=o("XLMRobertaForMaskedLM"),AVo=o(" (XLM-RoBERTa model)"),LVo=l(),bb=a("li"),q2e=a("strong"),yVo=o("xlm-roberta-xl"),xVo=o(" \u2014 "),fQ=a("a"),$Vo=o("XLMRobertaXLForMaskedLM"),kVo=o(" (XLM-RoBERTa-XL model)"),SVo=l(),vb=a("li"),j2e=a("strong"),RVo=o("xlnet"),PVo=o(" \u2014 "),gQ=a("a"),BVo=o("XLNetLMHeadModel"),IVo=o(" (XLNet model)"),NVo=l(),Fb=a("p"),qVo=o("The model is set in evaluation mode by default using "),D2e=a("code"),jVo=o("model.eval()"),DVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=a("code"),GVo=o("model.train()"),OVo=l(),F(Tb.$$.fragment),leo=l(),Ed=a("h2"),Mb=a("a"),O2e=a("span"),F(Nx.$$.fragment),VVo=l(),V2e=a("span"),XVo=o("AutoModelForCausalLM"),ieo=l(),Io=a("div"),F(qx.$$.fragment),zVo=l(),Cd=a("p"),QVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hQ=a("a"),WVo=o("from_pretrained()"),UVo=o(" class method or the "),uQ=a("a"),HVo=o("from_config()"),JVo=o(` class
method.`),YVo=l(),jx=a("p"),KVo=o("This class cannot be instantiated directly using "),X2e=a("code"),ZVo=o("__init__()"),eXo=o(" (throws an error)."),oXo=l(),vt=a("div"),F(Dx.$$.fragment),rXo=l(),z2e=a("p"),tXo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aXo=l(),wd=a("p"),nXo=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),sXo=o("not"),lXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),iXo=o("from_pretrained()"),dXo=o(" to load the model weights."),mXo=l(),F(Eb.$$.fragment),cXo=l(),oo=a("div"),F(Gx.$$.fragment),fXo=l(),W2e=a("p"),gXo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hXo=l(),Ka=a("p"),uXo=o("The model class to instantiate is selected based on the "),U2e=a("code"),pXo=o("model_type"),_Xo=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),bXo=o("pretrained_model_name_or_path"),vXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),FXo=o("pretrained_model_name_or_path"),TXo=o(":"),MXo=l(),Q=a("ul"),Cb=a("li"),Y2e=a("strong"),EXo=o("bart"),CXo=o(" \u2014 "),_Q=a("a"),wXo=o("BartForCausalLM"),AXo=o(" (BART model)"),LXo=l(),wb=a("li"),K2e=a("strong"),yXo=o("bert"),xXo=o(" \u2014 "),bQ=a("a"),$Xo=o("BertLMHeadModel"),kXo=o(" (BERT model)"),SXo=l(),Ab=a("li"),Z2e=a("strong"),RXo=o("bert-generation"),PXo=o(" \u2014 "),vQ=a("a"),BXo=o("BertGenerationDecoder"),IXo=o(" (Bert Generation model)"),NXo=l(),Lb=a("li"),ebe=a("strong"),qXo=o("big_bird"),jXo=o(" \u2014 "),FQ=a("a"),DXo=o("BigBirdForCausalLM"),GXo=o(" (BigBird model)"),OXo=l(),yb=a("li"),obe=a("strong"),VXo=o("bigbird_pegasus"),XXo=o(" \u2014 "),TQ=a("a"),zXo=o("BigBirdPegasusForCausalLM"),QXo=o(" (BigBird-Pegasus model)"),WXo=l(),xb=a("li"),rbe=a("strong"),UXo=o("blenderbot"),HXo=o(" \u2014 "),MQ=a("a"),JXo=o("BlenderbotForCausalLM"),YXo=o(" (Blenderbot model)"),KXo=l(),$b=a("li"),tbe=a("strong"),ZXo=o("blenderbot-small"),ezo=o(" \u2014 "),EQ=a("a"),ozo=o("BlenderbotSmallForCausalLM"),rzo=o(" (BlenderbotSmall model)"),tzo=l(),kb=a("li"),abe=a("strong"),azo=o("bloom"),nzo=o(" \u2014 "),CQ=a("a"),szo=o("BloomForCausalLM"),lzo=o(" (BLOOM model)"),izo=l(),Sb=a("li"),nbe=a("strong"),dzo=o("camembert"),mzo=o(" \u2014 "),wQ=a("a"),czo=o("CamembertForCausalLM"),fzo=o(" (CamemBERT model)"),gzo=l(),Rb=a("li"),sbe=a("strong"),hzo=o("codegen"),uzo=o(" \u2014 "),AQ=a("a"),pzo=o("CodeGenForCausalLM"),_zo=o(" (CodeGen model)"),bzo=l(),Pb=a("li"),lbe=a("strong"),vzo=o("ctrl"),Fzo=o(" \u2014 "),LQ=a("a"),Tzo=o("CTRLLMHeadModel"),Mzo=o(" (CTRL model)"),Ezo=l(),Bb=a("li"),ibe=a("strong"),Czo=o("data2vec-text"),wzo=o(" \u2014 "),yQ=a("a"),Azo=o("Data2VecTextForCausalLM"),Lzo=o(" (Data2VecText model)"),yzo=l(),Ib=a("li"),dbe=a("strong"),xzo=o("electra"),$zo=o(" \u2014 "),xQ=a("a"),kzo=o("ElectraForCausalLM"),Szo=o(" (ELECTRA model)"),Rzo=l(),Nb=a("li"),mbe=a("strong"),Pzo=o("ernie"),Bzo=o(" \u2014 "),$Q=a("a"),Izo=o("ErnieForCausalLM"),Nzo=o(" (ERNIE model)"),qzo=l(),qb=a("li"),cbe=a("strong"),jzo=o("gpt2"),Dzo=o(" \u2014 "),kQ=a("a"),Gzo=o("GPT2LMHeadModel"),Ozo=o(" (OpenAI GPT-2 model)"),Vzo=l(),jb=a("li"),fbe=a("strong"),Xzo=o("gpt_neo"),zzo=o(" \u2014 "),SQ=a("a"),Qzo=o("GPTNeoForCausalLM"),Wzo=o(" (GPT Neo model)"),Uzo=l(),Db=a("li"),gbe=a("strong"),Hzo=o("gpt_neox"),Jzo=o(" \u2014 "),RQ=a("a"),Yzo=o("GPTNeoXForCausalLM"),Kzo=o(" (GPT NeoX model)"),Zzo=l(),Gb=a("li"),hbe=a("strong"),eQo=o("gpt_neox_japanese"),oQo=o(" \u2014 "),PQ=a("a"),rQo=o("GPTNeoXJapaneseForCausalLM"),tQo=o(" (GPT NeoX Japanese model)"),aQo=l(),Ob=a("li"),ube=a("strong"),nQo=o("gptj"),sQo=o(" \u2014 "),BQ=a("a"),lQo=o("GPTJForCausalLM"),iQo=o(" (GPT-J model)"),dQo=l(),Vb=a("li"),pbe=a("strong"),mQo=o("marian"),cQo=o(" \u2014 "),IQ=a("a"),fQo=o("MarianForCausalLM"),gQo=o(" (Marian model)"),hQo=l(),Xb=a("li"),_be=a("strong"),uQo=o("mbart"),pQo=o(" \u2014 "),NQ=a("a"),_Qo=o("MBartForCausalLM"),bQo=o(" (mBART model)"),vQo=l(),zb=a("li"),bbe=a("strong"),FQo=o("megatron-bert"),TQo=o(" \u2014 "),qQ=a("a"),MQo=o("MegatronBertForCausalLM"),EQo=o(" (Megatron-BERT model)"),CQo=l(),Qb=a("li"),vbe=a("strong"),wQo=o("mvp"),AQo=o(" \u2014 "),jQ=a("a"),LQo=o("MvpForCausalLM"),yQo=o(" (MVP model)"),xQo=l(),Wb=a("li"),Fbe=a("strong"),$Qo=o("openai-gpt"),kQo=o(" \u2014 "),DQ=a("a"),SQo=o("OpenAIGPTLMHeadModel"),RQo=o(" (OpenAI GPT model)"),PQo=l(),Ub=a("li"),Tbe=a("strong"),BQo=o("opt"),IQo=o(" \u2014 "),GQ=a("a"),NQo=o("OPTForCausalLM"),qQo=o(" (OPT model)"),jQo=l(),Hb=a("li"),Mbe=a("strong"),DQo=o("pegasus"),GQo=o(" \u2014 "),OQ=a("a"),OQo=o("PegasusForCausalLM"),VQo=o(" (Pegasus model)"),XQo=l(),Jb=a("li"),Ebe=a("strong"),zQo=o("plbart"),QQo=o(" \u2014 "),VQ=a("a"),WQo=o("PLBartForCausalLM"),UQo=o(" (PLBart model)"),HQo=l(),Yb=a("li"),Cbe=a("strong"),JQo=o("prophetnet"),YQo=o(" \u2014 "),XQ=a("a"),KQo=o("ProphetNetForCausalLM"),ZQo=o(" (ProphetNet model)"),eWo=l(),Kb=a("li"),wbe=a("strong"),oWo=o("qdqbert"),rWo=o(" \u2014 "),zQ=a("a"),tWo=o("QDQBertLMHeadModel"),aWo=o(" (QDQBert model)"),nWo=l(),Zb=a("li"),Abe=a("strong"),sWo=o("reformer"),lWo=o(" \u2014 "),QQ=a("a"),iWo=o("ReformerModelWithLMHead"),dWo=o(" (Reformer model)"),mWo=l(),ev=a("li"),Lbe=a("strong"),cWo=o("rembert"),fWo=o(" \u2014 "),WQ=a("a"),gWo=o("RemBertForCausalLM"),hWo=o(" (RemBERT model)"),uWo=l(),ov=a("li"),ybe=a("strong"),pWo=o("roberta"),_Wo=o(" \u2014 "),UQ=a("a"),bWo=o("RobertaForCausalLM"),vWo=o(" (RoBERTa model)"),FWo=l(),rv=a("li"),xbe=a("strong"),TWo=o("roformer"),MWo=o(" \u2014 "),HQ=a("a"),EWo=o("RoFormerForCausalLM"),CWo=o(" (RoFormer model)"),wWo=l(),tv=a("li"),$be=a("strong"),AWo=o("speech_to_text_2"),LWo=o(" \u2014 "),JQ=a("a"),yWo=o("Speech2Text2ForCausalLM"),xWo=o(" (Speech2Text2 model)"),$Wo=l(),av=a("li"),kbe=a("strong"),kWo=o("transfo-xl"),SWo=o(" \u2014 "),YQ=a("a"),RWo=o("TransfoXLLMHeadModel"),PWo=o(" (Transformer-XL model)"),BWo=l(),nv=a("li"),Sbe=a("strong"),IWo=o("trocr"),NWo=o(" \u2014 "),KQ=a("a"),qWo=o("TrOCRForCausalLM"),jWo=o(" (TrOCR model)"),DWo=l(),sv=a("li"),Rbe=a("strong"),GWo=o("xglm"),OWo=o(" \u2014 "),ZQ=a("a"),VWo=o("XGLMForCausalLM"),XWo=o(" (XGLM model)"),zWo=l(),lv=a("li"),Pbe=a("strong"),QWo=o("xlm"),WWo=o(" \u2014 "),eW=a("a"),UWo=o("XLMWithLMHeadModel"),HWo=o(" (XLM model)"),JWo=l(),iv=a("li"),Bbe=a("strong"),YWo=o("xlm-prophetnet"),KWo=o(" \u2014 "),oW=a("a"),ZWo=o("XLMProphetNetForCausalLM"),eUo=o(" (XLM-ProphetNet model)"),oUo=l(),dv=a("li"),Ibe=a("strong"),rUo=o("xlm-roberta"),tUo=o(" \u2014 "),rW=a("a"),aUo=o("XLMRobertaForCausalLM"),nUo=o(" (XLM-RoBERTa model)"),sUo=l(),mv=a("li"),Nbe=a("strong"),lUo=o("xlm-roberta-xl"),iUo=o(" \u2014 "),tW=a("a"),dUo=o("XLMRobertaXLForCausalLM"),mUo=o(" (XLM-RoBERTa-XL model)"),cUo=l(),cv=a("li"),qbe=a("strong"),fUo=o("xlnet"),gUo=o(" \u2014 "),aW=a("a"),hUo=o("XLNetLMHeadModel"),uUo=o(" (XLNet model)"),pUo=l(),fv=a("p"),_Uo=o("The model is set in evaluation mode by default using "),jbe=a("code"),bUo=o("model.eval()"),vUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=a("code"),FUo=o("model.train()"),TUo=l(),F(gv.$$.fragment),deo=l(),Ad=a("h2"),hv=a("a"),Gbe=a("span"),F(Ox.$$.fragment),MUo=l(),Obe=a("span"),EUo=o("AutoModelForMaskedLM"),meo=l(),No=a("div"),F(Vx.$$.fragment),CUo=l(),Ld=a("p"),wUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nW=a("a"),AUo=o("from_pretrained()"),LUo=o(" class method or the "),sW=a("a"),yUo=o("from_config()"),xUo=o(` class
method.`),$Uo=l(),Xx=a("p"),kUo=o("This class cannot be instantiated directly using "),Vbe=a("code"),SUo=o("__init__()"),RUo=o(" (throws an error)."),PUo=l(),Ft=a("div"),F(zx.$$.fragment),BUo=l(),Xbe=a("p"),IUo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NUo=l(),yd=a("p"),qUo=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),jUo=o("not"),DUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),GUo=o("from_pretrained()"),OUo=o(" to load the model weights."),VUo=l(),F(uv.$$.fragment),XUo=l(),ro=a("div"),F(Qx.$$.fragment),zUo=l(),Qbe=a("p"),QUo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),WUo=l(),Za=a("p"),UUo=o("The model class to instantiate is selected based on the "),Wbe=a("code"),HUo=o("model_type"),JUo=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),YUo=o("pretrained_model_name_or_path"),KUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),ZUo=o("pretrained_model_name_or_path"),eHo=o(":"),oHo=l(),J=a("ul"),pv=a("li"),Jbe=a("strong"),rHo=o("albert"),tHo=o(" \u2014 "),iW=a("a"),aHo=o("AlbertForMaskedLM"),nHo=o(" (ALBERT model)"),sHo=l(),_v=a("li"),Ybe=a("strong"),lHo=o("bart"),iHo=o(" \u2014 "),dW=a("a"),dHo=o("BartForConditionalGeneration"),mHo=o(" (BART model)"),cHo=l(),bv=a("li"),Kbe=a("strong"),fHo=o("bert"),gHo=o(" \u2014 "),mW=a("a"),hHo=o("BertForMaskedLM"),uHo=o(" (BERT model)"),pHo=l(),vv=a("li"),Zbe=a("strong"),_Ho=o("big_bird"),bHo=o(" \u2014 "),cW=a("a"),vHo=o("BigBirdForMaskedLM"),FHo=o(" (BigBird model)"),THo=l(),Fv=a("li"),eve=a("strong"),MHo=o("camembert"),EHo=o(" \u2014 "),fW=a("a"),CHo=o("CamembertForMaskedLM"),wHo=o(" (CamemBERT model)"),AHo=l(),Tv=a("li"),ove=a("strong"),LHo=o("convbert"),yHo=o(" \u2014 "),gW=a("a"),xHo=o("ConvBertForMaskedLM"),$Ho=o(" (ConvBERT model)"),kHo=l(),Mv=a("li"),rve=a("strong"),SHo=o("data2vec-text"),RHo=o(" \u2014 "),hW=a("a"),PHo=o("Data2VecTextForMaskedLM"),BHo=o(" (Data2VecText model)"),IHo=l(),Ev=a("li"),tve=a("strong"),NHo=o("deberta"),qHo=o(" \u2014 "),uW=a("a"),jHo=o("DebertaForMaskedLM"),DHo=o(" (DeBERTa model)"),GHo=l(),Cv=a("li"),ave=a("strong"),OHo=o("deberta-v2"),VHo=o(" \u2014 "),pW=a("a"),XHo=o("DebertaV2ForMaskedLM"),zHo=o(" (DeBERTa-v2 model)"),QHo=l(),wv=a("li"),nve=a("strong"),WHo=o("distilbert"),UHo=o(" \u2014 "),_W=a("a"),HHo=o("DistilBertForMaskedLM"),JHo=o(" (DistilBERT model)"),YHo=l(),Av=a("li"),sve=a("strong"),KHo=o("electra"),ZHo=o(" \u2014 "),bW=a("a"),eJo=o("ElectraForMaskedLM"),oJo=o(" (ELECTRA model)"),rJo=l(),Lv=a("li"),lve=a("strong"),tJo=o("ernie"),aJo=o(" \u2014 "),vW=a("a"),nJo=o("ErnieForMaskedLM"),sJo=o(" (ERNIE model)"),lJo=l(),yv=a("li"),ive=a("strong"),iJo=o("flaubert"),dJo=o(" \u2014 "),FW=a("a"),mJo=o("FlaubertWithLMHeadModel"),cJo=o(" (FlauBERT model)"),fJo=l(),xv=a("li"),dve=a("strong"),gJo=o("fnet"),hJo=o(" \u2014 "),TW=a("a"),uJo=o("FNetForMaskedLM"),pJo=o(" (FNet model)"),_Jo=l(),$v=a("li"),mve=a("strong"),bJo=o("funnel"),vJo=o(" \u2014 "),MW=a("a"),FJo=o("FunnelForMaskedLM"),TJo=o(" (Funnel Transformer model)"),MJo=l(),kv=a("li"),cve=a("strong"),EJo=o("ibert"),CJo=o(" \u2014 "),EW=a("a"),wJo=o("IBertForMaskedLM"),AJo=o(" (I-BERT model)"),LJo=l(),Sv=a("li"),fve=a("strong"),yJo=o("layoutlm"),xJo=o(" \u2014 "),CW=a("a"),$Jo=o("LayoutLMForMaskedLM"),kJo=o(" (LayoutLM model)"),SJo=l(),Rv=a("li"),gve=a("strong"),RJo=o("longformer"),PJo=o(" \u2014 "),wW=a("a"),BJo=o("LongformerForMaskedLM"),IJo=o(" (Longformer model)"),NJo=l(),Pv=a("li"),hve=a("strong"),qJo=o("luke"),jJo=o(" \u2014 "),AW=a("a"),DJo=o("LukeForMaskedLM"),GJo=o(" (LUKE model)"),OJo=l(),Bv=a("li"),uve=a("strong"),VJo=o("mbart"),XJo=o(" \u2014 "),LW=a("a"),zJo=o("MBartForConditionalGeneration"),QJo=o(" (mBART model)"),WJo=l(),Iv=a("li"),pve=a("strong"),UJo=o("megatron-bert"),HJo=o(" \u2014 "),yW=a("a"),JJo=o("MegatronBertForMaskedLM"),YJo=o(" (Megatron-BERT model)"),KJo=l(),Nv=a("li"),_ve=a("strong"),ZJo=o("mobilebert"),eYo=o(" \u2014 "),xW=a("a"),oYo=o("MobileBertForMaskedLM"),rYo=o(" (MobileBERT model)"),tYo=l(),qv=a("li"),bve=a("strong"),aYo=o("mpnet"),nYo=o(" \u2014 "),$W=a("a"),sYo=o("MPNetForMaskedLM"),lYo=o(" (MPNet model)"),iYo=l(),jv=a("li"),vve=a("strong"),dYo=o("mvp"),mYo=o(" \u2014 "),kW=a("a"),cYo=o("MvpForConditionalGeneration"),fYo=o(" (MVP model)"),gYo=l(),Dv=a("li"),Fve=a("strong"),hYo=o("nezha"),uYo=o(" \u2014 "),SW=a("a"),pYo=o("NezhaForMaskedLM"),_Yo=o(" (Nezha model)"),bYo=l(),Gv=a("li"),Tve=a("strong"),vYo=o("nystromformer"),FYo=o(" \u2014 "),RW=a("a"),TYo=o("NystromformerForMaskedLM"),MYo=o(" (Nystr\xF6mformer model)"),EYo=l(),Ov=a("li"),Mve=a("strong"),CYo=o("perceiver"),wYo=o(" \u2014 "),PW=a("a"),AYo=o("PerceiverForMaskedLM"),LYo=o(" (Perceiver model)"),yYo=l(),Vv=a("li"),Eve=a("strong"),xYo=o("qdqbert"),$Yo=o(" \u2014 "),BW=a("a"),kYo=o("QDQBertForMaskedLM"),SYo=o(" (QDQBert model)"),RYo=l(),Xv=a("li"),Cve=a("strong"),PYo=o("reformer"),BYo=o(" \u2014 "),IW=a("a"),IYo=o("ReformerForMaskedLM"),NYo=o(" (Reformer model)"),qYo=l(),zv=a("li"),wve=a("strong"),jYo=o("rembert"),DYo=o(" \u2014 "),NW=a("a"),GYo=o("RemBertForMaskedLM"),OYo=o(" (RemBERT model)"),VYo=l(),Qv=a("li"),Ave=a("strong"),XYo=o("roberta"),zYo=o(" \u2014 "),qW=a("a"),QYo=o("RobertaForMaskedLM"),WYo=o(" (RoBERTa model)"),UYo=l(),Wv=a("li"),Lve=a("strong"),HYo=o("roformer"),JYo=o(" \u2014 "),jW=a("a"),YYo=o("RoFormerForMaskedLM"),KYo=o(" (RoFormer model)"),ZYo=l(),Uv=a("li"),yve=a("strong"),eKo=o("squeezebert"),oKo=o(" \u2014 "),DW=a("a"),rKo=o("SqueezeBertForMaskedLM"),tKo=o(" (SqueezeBERT model)"),aKo=l(),Hv=a("li"),xve=a("strong"),nKo=o("tapas"),sKo=o(" \u2014 "),GW=a("a"),lKo=o("TapasForMaskedLM"),iKo=o(" (TAPAS model)"),dKo=l(),Jv=a("li"),$ve=a("strong"),mKo=o("wav2vec2"),cKo=o(" \u2014 "),kve=a("code"),fKo=o("Wav2Vec2ForMaskedLM"),gKo=o(" (Wav2Vec2 model)"),hKo=l(),Yv=a("li"),Sve=a("strong"),uKo=o("xlm"),pKo=o(" \u2014 "),OW=a("a"),_Ko=o("XLMWithLMHeadModel"),bKo=o(" (XLM model)"),vKo=l(),Kv=a("li"),Rve=a("strong"),FKo=o("xlm-roberta"),TKo=o(" \u2014 "),VW=a("a"),MKo=o("XLMRobertaForMaskedLM"),EKo=o(" (XLM-RoBERTa model)"),CKo=l(),Zv=a("li"),Pve=a("strong"),wKo=o("xlm-roberta-xl"),AKo=o(" \u2014 "),XW=a("a"),LKo=o("XLMRobertaXLForMaskedLM"),yKo=o(" (XLM-RoBERTa-XL model)"),xKo=l(),eF=a("li"),Bve=a("strong"),$Ko=o("yoso"),kKo=o(" \u2014 "),zW=a("a"),SKo=o("YosoForMaskedLM"),RKo=o(" (YOSO model)"),PKo=l(),oF=a("p"),BKo=o("The model is set in evaluation mode by default using "),Ive=a("code"),IKo=o("model.eval()"),NKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=a("code"),qKo=o("model.train()"),jKo=l(),F(rF.$$.fragment),ceo=l(),xd=a("h2"),tF=a("a"),qve=a("span"),F(Wx.$$.fragment),DKo=l(),jve=a("span"),GKo=o("AutoModelForSeq2SeqLM"),feo=l(),qo=a("div"),F(Ux.$$.fragment),OKo=l(),$d=a("p"),VKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QW=a("a"),XKo=o("from_pretrained()"),zKo=o(" class method or the "),WW=a("a"),QKo=o("from_config()"),WKo=o(` class
method.`),UKo=l(),Hx=a("p"),HKo=o("This class cannot be instantiated directly using "),Dve=a("code"),JKo=o("__init__()"),YKo=o(" (throws an error)."),KKo=l(),Tt=a("div"),F(Jx.$$.fragment),ZKo=l(),Gve=a("p"),eZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oZo=l(),kd=a("p"),rZo=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),tZo=o("not"),aZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),nZo=o("from_pretrained()"),sZo=o(" to load the model weights."),lZo=l(),F(aF.$$.fragment),iZo=l(),to=a("div"),F(Yx.$$.fragment),dZo=l(),Vve=a("p"),mZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cZo=l(),en=a("p"),fZo=o("The model class to instantiate is selected based on the "),Xve=a("code"),gZo=o("model_type"),hZo=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),uZo=o("pretrained_model_name_or_path"),pZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),_Zo=o("pretrained_model_name_or_path"),bZo=o(":"),vZo=l(),fe=a("ul"),nF=a("li"),Wve=a("strong"),FZo=o("bart"),TZo=o(" \u2014 "),HW=a("a"),MZo=o("BartForConditionalGeneration"),EZo=o(" (BART model)"),CZo=l(),sF=a("li"),Uve=a("strong"),wZo=o("bigbird_pegasus"),AZo=o(" \u2014 "),JW=a("a"),LZo=o("BigBirdPegasusForConditionalGeneration"),yZo=o(" (BigBird-Pegasus model)"),xZo=l(),lF=a("li"),Hve=a("strong"),$Zo=o("blenderbot"),kZo=o(" \u2014 "),YW=a("a"),SZo=o("BlenderbotForConditionalGeneration"),RZo=o(" (Blenderbot model)"),PZo=l(),iF=a("li"),Jve=a("strong"),BZo=o("blenderbot-small"),IZo=o(" \u2014 "),KW=a("a"),NZo=o("BlenderbotSmallForConditionalGeneration"),qZo=o(" (BlenderbotSmall model)"),jZo=l(),dF=a("li"),Yve=a("strong"),DZo=o("encoder-decoder"),GZo=o(" \u2014 "),ZW=a("a"),OZo=o("EncoderDecoderModel"),VZo=o(" (Encoder decoder model)"),XZo=l(),mF=a("li"),Kve=a("strong"),zZo=o("fsmt"),QZo=o(" \u2014 "),eU=a("a"),WZo=o("FSMTForConditionalGeneration"),UZo=o(" (FairSeq Machine-Translation model)"),HZo=l(),cF=a("li"),Zve=a("strong"),JZo=o("led"),YZo=o(" \u2014 "),oU=a("a"),KZo=o("LEDForConditionalGeneration"),ZZo=o(" (LED model)"),eer=l(),fF=a("li"),eFe=a("strong"),oer=o("longt5"),rer=o(" \u2014 "),rU=a("a"),ter=o("LongT5ForConditionalGeneration"),aer=o(" (LongT5 model)"),ner=l(),gF=a("li"),oFe=a("strong"),ser=o("m2m_100"),ler=o(" \u2014 "),tU=a("a"),ier=o("M2M100ForConditionalGeneration"),der=o(" (M2M100 model)"),mer=l(),hF=a("li"),rFe=a("strong"),cer=o("marian"),fer=o(" \u2014 "),aU=a("a"),ger=o("MarianMTModel"),her=o(" (Marian model)"),uer=l(),uF=a("li"),tFe=a("strong"),per=o("mbart"),_er=o(" \u2014 "),nU=a("a"),ber=o("MBartForConditionalGeneration"),ver=o(" (mBART model)"),Fer=l(),pF=a("li"),aFe=a("strong"),Ter=o("mt5"),Mer=o(" \u2014 "),sU=a("a"),Eer=o("MT5ForConditionalGeneration"),Cer=o(" (MT5 model)"),wer=l(),_F=a("li"),nFe=a("strong"),Aer=o("mvp"),Ler=o(" \u2014 "),lU=a("a"),yer=o("MvpForConditionalGeneration"),xer=o(" (MVP model)"),$er=l(),bF=a("li"),sFe=a("strong"),ker=o("nllb"),Ser=o(" \u2014 "),iU=a("a"),Rer=o("M2M100ForConditionalGeneration"),Per=o(" (NLLB model)"),Ber=l(),vF=a("li"),lFe=a("strong"),Ier=o("pegasus"),Ner=o(" \u2014 "),dU=a("a"),qer=o("PegasusForConditionalGeneration"),jer=o(" (Pegasus model)"),Der=l(),FF=a("li"),iFe=a("strong"),Ger=o("pegasus_x"),Oer=o(" \u2014 "),mU=a("a"),Ver=o("PegasusXForConditionalGeneration"),Xer=o(" (PEGASUS-X model)"),zer=l(),TF=a("li"),dFe=a("strong"),Qer=o("plbart"),Wer=o(" \u2014 "),cU=a("a"),Uer=o("PLBartForConditionalGeneration"),Her=o(" (PLBart model)"),Jer=l(),MF=a("li"),mFe=a("strong"),Yer=o("prophetnet"),Ker=o(" \u2014 "),fU=a("a"),Zer=o("ProphetNetForConditionalGeneration"),eor=o(" (ProphetNet model)"),oor=l(),EF=a("li"),cFe=a("strong"),ror=o("t5"),tor=o(" \u2014 "),gU=a("a"),aor=o("T5ForConditionalGeneration"),nor=o(" (T5 model)"),sor=l(),CF=a("li"),fFe=a("strong"),lor=o("xlm-prophetnet"),ior=o(" \u2014 "),hU=a("a"),dor=o("XLMProphetNetForConditionalGeneration"),mor=o(" (XLM-ProphetNet model)"),cor=l(),wF=a("p"),gor=o("The model is set in evaluation mode by default using "),gFe=a("code"),hor=o("model.eval()"),uor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=a("code"),por=o("model.train()"),_or=l(),F(AF.$$.fragment),geo=l(),Sd=a("h2"),LF=a("a"),uFe=a("span"),F(Kx.$$.fragment),bor=l(),pFe=a("span"),vor=o("AutoModelForSequenceClassification"),heo=l(),jo=a("div"),F(Zx.$$.fragment),For=l(),Rd=a("p"),Tor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uU=a("a"),Mor=o("from_pretrained()"),Eor=o(" class method or the "),pU=a("a"),Cor=o("from_config()"),wor=o(` class
method.`),Aor=l(),e$=a("p"),Lor=o("This class cannot be instantiated directly using "),_Fe=a("code"),yor=o("__init__()"),xor=o(" (throws an error)."),$or=l(),Mt=a("div"),F(o$.$$.fragment),kor=l(),bFe=a("p"),Sor=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ror=l(),Pd=a("p"),Por=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),Bor=o("not"),Ior=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),Nor=o("from_pretrained()"),qor=o(" to load the model weights."),jor=l(),F(yF.$$.fragment),Dor=l(),ao=a("div"),F(r$.$$.fragment),Gor=l(),FFe=a("p"),Oor=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vor=l(),on=a("p"),Xor=o("The model class to instantiate is selected based on the "),TFe=a("code"),zor=o("model_type"),Qor=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),Wor=o("pretrained_model_name_or_path"),Uor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),Hor=o("pretrained_model_name_or_path"),Jor=o(":"),Yor=l(),B=a("ul"),xF=a("li"),CFe=a("strong"),Kor=o("albert"),Zor=o(" \u2014 "),bU=a("a"),err=o("AlbertForSequenceClassification"),orr=o(" (ALBERT model)"),rrr=l(),$F=a("li"),wFe=a("strong"),trr=o("bart"),arr=o(" \u2014 "),vU=a("a"),nrr=o("BartForSequenceClassification"),srr=o(" (BART model)"),lrr=l(),kF=a("li"),AFe=a("strong"),irr=o("bert"),drr=o(" \u2014 "),FU=a("a"),mrr=o("BertForSequenceClassification"),crr=o(" (BERT model)"),frr=l(),SF=a("li"),LFe=a("strong"),grr=o("big_bird"),hrr=o(" \u2014 "),TU=a("a"),urr=o("BigBirdForSequenceClassification"),prr=o(" (BigBird model)"),_rr=l(),RF=a("li"),yFe=a("strong"),brr=o("bigbird_pegasus"),vrr=o(" \u2014 "),MU=a("a"),Frr=o("BigBirdPegasusForSequenceClassification"),Trr=o(" (BigBird-Pegasus model)"),Mrr=l(),PF=a("li"),xFe=a("strong"),Err=o("bloom"),Crr=o(" \u2014 "),EU=a("a"),wrr=o("BloomForSequenceClassification"),Arr=o(" (BLOOM model)"),Lrr=l(),BF=a("li"),$Fe=a("strong"),yrr=o("camembert"),xrr=o(" \u2014 "),CU=a("a"),$rr=o("CamembertForSequenceClassification"),krr=o(" (CamemBERT model)"),Srr=l(),IF=a("li"),kFe=a("strong"),Rrr=o("canine"),Prr=o(" \u2014 "),wU=a("a"),Brr=o("CanineForSequenceClassification"),Irr=o(" (CANINE model)"),Nrr=l(),NF=a("li"),SFe=a("strong"),qrr=o("convbert"),jrr=o(" \u2014 "),AU=a("a"),Drr=o("ConvBertForSequenceClassification"),Grr=o(" (ConvBERT model)"),Orr=l(),qF=a("li"),RFe=a("strong"),Vrr=o("ctrl"),Xrr=o(" \u2014 "),LU=a("a"),zrr=o("CTRLForSequenceClassification"),Qrr=o(" (CTRL model)"),Wrr=l(),jF=a("li"),PFe=a("strong"),Urr=o("data2vec-text"),Hrr=o(" \u2014 "),yU=a("a"),Jrr=o("Data2VecTextForSequenceClassification"),Yrr=o(" (Data2VecText model)"),Krr=l(),DF=a("li"),BFe=a("strong"),Zrr=o("deberta"),etr=o(" \u2014 "),xU=a("a"),otr=o("DebertaForSequenceClassification"),rtr=o(" (DeBERTa model)"),ttr=l(),GF=a("li"),IFe=a("strong"),atr=o("deberta-v2"),ntr=o(" \u2014 "),$U=a("a"),str=o("DebertaV2ForSequenceClassification"),ltr=o(" (DeBERTa-v2 model)"),itr=l(),OF=a("li"),NFe=a("strong"),dtr=o("distilbert"),mtr=o(" \u2014 "),kU=a("a"),ctr=o("DistilBertForSequenceClassification"),ftr=o(" (DistilBERT model)"),gtr=l(),VF=a("li"),qFe=a("strong"),htr=o("electra"),utr=o(" \u2014 "),SU=a("a"),ptr=o("ElectraForSequenceClassification"),_tr=o(" (ELECTRA model)"),btr=l(),XF=a("li"),jFe=a("strong"),vtr=o("ernie"),Ftr=o(" \u2014 "),RU=a("a"),Ttr=o("ErnieForSequenceClassification"),Mtr=o(" (ERNIE model)"),Etr=l(),zF=a("li"),DFe=a("strong"),Ctr=o("esm"),wtr=o(" \u2014 "),PU=a("a"),Atr=o("EsmForSequenceClassification"),Ltr=o(" (ESM model)"),ytr=l(),QF=a("li"),GFe=a("strong"),xtr=o("flaubert"),$tr=o(" \u2014 "),BU=a("a"),ktr=o("FlaubertForSequenceClassification"),Str=o(" (FlauBERT model)"),Rtr=l(),WF=a("li"),OFe=a("strong"),Ptr=o("fnet"),Btr=o(" \u2014 "),IU=a("a"),Itr=o("FNetForSequenceClassification"),Ntr=o(" (FNet model)"),qtr=l(),UF=a("li"),VFe=a("strong"),jtr=o("funnel"),Dtr=o(" \u2014 "),NU=a("a"),Gtr=o("FunnelForSequenceClassification"),Otr=o(" (Funnel Transformer model)"),Vtr=l(),HF=a("li"),XFe=a("strong"),Xtr=o("gpt2"),ztr=o(" \u2014 "),qU=a("a"),Qtr=o("GPT2ForSequenceClassification"),Wtr=o(" (OpenAI GPT-2 model)"),Utr=l(),JF=a("li"),zFe=a("strong"),Htr=o("gpt_neo"),Jtr=o(" \u2014 "),jU=a("a"),Ytr=o("GPTNeoForSequenceClassification"),Ktr=o(" (GPT Neo model)"),Ztr=l(),YF=a("li"),QFe=a("strong"),ear=o("gptj"),oar=o(" \u2014 "),DU=a("a"),rar=o("GPTJForSequenceClassification"),tar=o(" (GPT-J model)"),aar=l(),KF=a("li"),WFe=a("strong"),nar=o("ibert"),sar=o(" \u2014 "),GU=a("a"),lar=o("IBertForSequenceClassification"),iar=o(" (I-BERT model)"),dar=l(),ZF=a("li"),UFe=a("strong"),mar=o("layoutlm"),car=o(" \u2014 "),OU=a("a"),far=o("LayoutLMForSequenceClassification"),gar=o(" (LayoutLM model)"),har=l(),eT=a("li"),HFe=a("strong"),uar=o("layoutlmv2"),par=o(" \u2014 "),VU=a("a"),_ar=o("LayoutLMv2ForSequenceClassification"),bar=o(" (LayoutLMv2 model)"),Far=l(),oT=a("li"),JFe=a("strong"),Tar=o("layoutlmv3"),Mar=o(" \u2014 "),XU=a("a"),Ear=o("LayoutLMv3ForSequenceClassification"),Car=o(" (LayoutLMv3 model)"),war=l(),rT=a("li"),YFe=a("strong"),Aar=o("led"),Lar=o(" \u2014 "),zU=a("a"),yar=o("LEDForSequenceClassification"),xar=o(" (LED model)"),$ar=l(),tT=a("li"),KFe=a("strong"),kar=o("longformer"),Sar=o(" \u2014 "),QU=a("a"),Rar=o("LongformerForSequenceClassification"),Par=o(" (Longformer model)"),Bar=l(),aT=a("li"),ZFe=a("strong"),Iar=o("luke"),Nar=o(" \u2014 "),WU=a("a"),qar=o("LukeForSequenceClassification"),jar=o(" (LUKE model)"),Dar=l(),nT=a("li"),eTe=a("strong"),Gar=o("markuplm"),Oar=o(" \u2014 "),UU=a("a"),Var=o("MarkupLMForSequenceClassification"),Xar=o(" (MarkupLM model)"),zar=l(),sT=a("li"),oTe=a("strong"),Qar=o("mbart"),War=o(" \u2014 "),HU=a("a"),Uar=o("MBartForSequenceClassification"),Har=o(" (mBART model)"),Jar=l(),lT=a("li"),rTe=a("strong"),Yar=o("megatron-bert"),Kar=o(" \u2014 "),JU=a("a"),Zar=o("MegatronBertForSequenceClassification"),enr=o(" (Megatron-BERT model)"),onr=l(),iT=a("li"),tTe=a("strong"),rnr=o("mobilebert"),tnr=o(" \u2014 "),YU=a("a"),anr=o("MobileBertForSequenceClassification"),nnr=o(" (MobileBERT model)"),snr=l(),dT=a("li"),aTe=a("strong"),lnr=o("mpnet"),inr=o(" \u2014 "),KU=a("a"),dnr=o("MPNetForSequenceClassification"),mnr=o(" (MPNet model)"),cnr=l(),mT=a("li"),nTe=a("strong"),fnr=o("mvp"),gnr=o(" \u2014 "),ZU=a("a"),hnr=o("MvpForSequenceClassification"),unr=o(" (MVP model)"),pnr=l(),cT=a("li"),sTe=a("strong"),_nr=o("nezha"),bnr=o(" \u2014 "),eH=a("a"),vnr=o("NezhaForSequenceClassification"),Fnr=o(" (Nezha model)"),Tnr=l(),fT=a("li"),lTe=a("strong"),Mnr=o("nystromformer"),Enr=o(" \u2014 "),oH=a("a"),Cnr=o("NystromformerForSequenceClassification"),wnr=o(" (Nystr\xF6mformer model)"),Anr=l(),gT=a("li"),iTe=a("strong"),Lnr=o("openai-gpt"),ynr=o(" \u2014 "),rH=a("a"),xnr=o("OpenAIGPTForSequenceClassification"),$nr=o(" (OpenAI GPT model)"),knr=l(),hT=a("li"),dTe=a("strong"),Snr=o("opt"),Rnr=o(" \u2014 "),tH=a("a"),Pnr=o("OPTForSequenceClassification"),Bnr=o(" (OPT model)"),Inr=l(),uT=a("li"),mTe=a("strong"),Nnr=o("perceiver"),qnr=o(" \u2014 "),aH=a("a"),jnr=o("PerceiverForSequenceClassification"),Dnr=o(" (Perceiver model)"),Gnr=l(),pT=a("li"),cTe=a("strong"),Onr=o("plbart"),Vnr=o(" \u2014 "),nH=a("a"),Xnr=o("PLBartForSequenceClassification"),znr=o(" (PLBart model)"),Qnr=l(),_T=a("li"),fTe=a("strong"),Wnr=o("qdqbert"),Unr=o(" \u2014 "),sH=a("a"),Hnr=o("QDQBertForSequenceClassification"),Jnr=o(" (QDQBert model)"),Ynr=l(),bT=a("li"),gTe=a("strong"),Knr=o("reformer"),Znr=o(" \u2014 "),lH=a("a"),esr=o("ReformerForSequenceClassification"),osr=o(" (Reformer model)"),rsr=l(),vT=a("li"),hTe=a("strong"),tsr=o("rembert"),asr=o(" \u2014 "),iH=a("a"),nsr=o("RemBertForSequenceClassification"),ssr=o(" (RemBERT model)"),lsr=l(),FT=a("li"),uTe=a("strong"),isr=o("roberta"),dsr=o(" \u2014 "),dH=a("a"),msr=o("RobertaForSequenceClassification"),csr=o(" (RoBERTa model)"),fsr=l(),TT=a("li"),pTe=a("strong"),gsr=o("roformer"),hsr=o(" \u2014 "),mH=a("a"),usr=o("RoFormerForSequenceClassification"),psr=o(" (RoFormer model)"),_sr=l(),MT=a("li"),_Te=a("strong"),bsr=o("squeezebert"),vsr=o(" \u2014 "),cH=a("a"),Fsr=o("SqueezeBertForSequenceClassification"),Tsr=o(" (SqueezeBERT model)"),Msr=l(),ET=a("li"),bTe=a("strong"),Esr=o("tapas"),Csr=o(" \u2014 "),fH=a("a"),wsr=o("TapasForSequenceClassification"),Asr=o(" (TAPAS model)"),Lsr=l(),CT=a("li"),vTe=a("strong"),ysr=o("transfo-xl"),xsr=o(" \u2014 "),gH=a("a"),$sr=o("TransfoXLForSequenceClassification"),ksr=o(" (Transformer-XL model)"),Ssr=l(),wT=a("li"),FTe=a("strong"),Rsr=o("xlm"),Psr=o(" \u2014 "),hH=a("a"),Bsr=o("XLMForSequenceClassification"),Isr=o(" (XLM model)"),Nsr=l(),AT=a("li"),TTe=a("strong"),qsr=o("xlm-roberta"),jsr=o(" \u2014 "),uH=a("a"),Dsr=o("XLMRobertaForSequenceClassification"),Gsr=o(" (XLM-RoBERTa model)"),Osr=l(),LT=a("li"),MTe=a("strong"),Vsr=o("xlm-roberta-xl"),Xsr=o(" \u2014 "),pH=a("a"),zsr=o("XLMRobertaXLForSequenceClassification"),Qsr=o(" (XLM-RoBERTa-XL model)"),Wsr=l(),yT=a("li"),ETe=a("strong"),Usr=o("xlnet"),Hsr=o(" \u2014 "),_H=a("a"),Jsr=o("XLNetForSequenceClassification"),Ysr=o(" (XLNet model)"),Ksr=l(),xT=a("li"),CTe=a("strong"),Zsr=o("yoso"),elr=o(" \u2014 "),bH=a("a"),olr=o("YosoForSequenceClassification"),rlr=o(" (YOSO model)"),tlr=l(),$T=a("p"),alr=o("The model is set in evaluation mode by default using "),wTe=a("code"),nlr=o("model.eval()"),slr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ATe=a("code"),llr=o("model.train()"),ilr=l(),F(kT.$$.fragment),ueo=l(),Bd=a("h2"),ST=a("a"),LTe=a("span"),F(t$.$$.fragment),dlr=l(),yTe=a("span"),mlr=o("AutoModelForMultipleChoice"),peo=l(),Do=a("div"),F(a$.$$.fragment),clr=l(),Id=a("p"),flr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vH=a("a"),glr=o("from_pretrained()"),hlr=o(" class method or the "),FH=a("a"),ulr=o("from_config()"),plr=o(` class
method.`),_lr=l(),n$=a("p"),blr=o("This class cannot be instantiated directly using "),xTe=a("code"),vlr=o("__init__()"),Flr=o(" (throws an error)."),Tlr=l(),Et=a("div"),F(s$.$$.fragment),Mlr=l(),$Te=a("p"),Elr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Clr=l(),Nd=a("p"),wlr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),Alr=o("not"),Llr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),ylr=o("from_pretrained()"),xlr=o(" to load the model weights."),$lr=l(),F(RT.$$.fragment),klr=l(),no=a("div"),F(l$.$$.fragment),Slr=l(),STe=a("p"),Rlr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Plr=l(),rn=a("p"),Blr=o("The model class to instantiate is selected based on the "),RTe=a("code"),Ilr=o("model_type"),Nlr=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),qlr=o("pretrained_model_name_or_path"),jlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),Dlr=o("pretrained_model_name_or_path"),Glr=o(":"),Olr=l(),Z=a("ul"),PT=a("li"),ITe=a("strong"),Vlr=o("albert"),Xlr=o(" \u2014 "),MH=a("a"),zlr=o("AlbertForMultipleChoice"),Qlr=o(" (ALBERT model)"),Wlr=l(),BT=a("li"),NTe=a("strong"),Ulr=o("bert"),Hlr=o(" \u2014 "),EH=a("a"),Jlr=o("BertForMultipleChoice"),Ylr=o(" (BERT model)"),Klr=l(),IT=a("li"),qTe=a("strong"),Zlr=o("big_bird"),eir=o(" \u2014 "),CH=a("a"),oir=o("BigBirdForMultipleChoice"),rir=o(" (BigBird model)"),tir=l(),NT=a("li"),jTe=a("strong"),air=o("camembert"),nir=o(" \u2014 "),wH=a("a"),sir=o("CamembertForMultipleChoice"),lir=o(" (CamemBERT model)"),iir=l(),qT=a("li"),DTe=a("strong"),dir=o("canine"),mir=o(" \u2014 "),AH=a("a"),cir=o("CanineForMultipleChoice"),fir=o(" (CANINE model)"),gir=l(),jT=a("li"),GTe=a("strong"),hir=o("convbert"),uir=o(" \u2014 "),LH=a("a"),pir=o("ConvBertForMultipleChoice"),_ir=o(" (ConvBERT model)"),bir=l(),DT=a("li"),OTe=a("strong"),vir=o("data2vec-text"),Fir=o(" \u2014 "),yH=a("a"),Tir=o("Data2VecTextForMultipleChoice"),Mir=o(" (Data2VecText model)"),Eir=l(),GT=a("li"),VTe=a("strong"),Cir=o("deberta-v2"),wir=o(" \u2014 "),xH=a("a"),Air=o("DebertaV2ForMultipleChoice"),Lir=o(" (DeBERTa-v2 model)"),yir=l(),OT=a("li"),XTe=a("strong"),xir=o("distilbert"),$ir=o(" \u2014 "),$H=a("a"),kir=o("DistilBertForMultipleChoice"),Sir=o(" (DistilBERT model)"),Rir=l(),VT=a("li"),zTe=a("strong"),Pir=o("electra"),Bir=o(" \u2014 "),kH=a("a"),Iir=o("ElectraForMultipleChoice"),Nir=o(" (ELECTRA model)"),qir=l(),XT=a("li"),QTe=a("strong"),jir=o("ernie"),Dir=o(" \u2014 "),SH=a("a"),Gir=o("ErnieForMultipleChoice"),Oir=o(" (ERNIE model)"),Vir=l(),zT=a("li"),WTe=a("strong"),Xir=o("flaubert"),zir=o(" \u2014 "),RH=a("a"),Qir=o("FlaubertForMultipleChoice"),Wir=o(" (FlauBERT model)"),Uir=l(),QT=a("li"),UTe=a("strong"),Hir=o("fnet"),Jir=o(" \u2014 "),PH=a("a"),Yir=o("FNetForMultipleChoice"),Kir=o(" (FNet model)"),Zir=l(),WT=a("li"),HTe=a("strong"),edr=o("funnel"),odr=o(" \u2014 "),BH=a("a"),rdr=o("FunnelForMultipleChoice"),tdr=o(" (Funnel Transformer model)"),adr=l(),UT=a("li"),JTe=a("strong"),ndr=o("ibert"),sdr=o(" \u2014 "),IH=a("a"),ldr=o("IBertForMultipleChoice"),idr=o(" (I-BERT model)"),ddr=l(),HT=a("li"),YTe=a("strong"),mdr=o("longformer"),cdr=o(" \u2014 "),NH=a("a"),fdr=o("LongformerForMultipleChoice"),gdr=o(" (Longformer model)"),hdr=l(),JT=a("li"),KTe=a("strong"),udr=o("luke"),pdr=o(" \u2014 "),qH=a("a"),_dr=o("LukeForMultipleChoice"),bdr=o(" (LUKE model)"),vdr=l(),YT=a("li"),ZTe=a("strong"),Fdr=o("megatron-bert"),Tdr=o(" \u2014 "),jH=a("a"),Mdr=o("MegatronBertForMultipleChoice"),Edr=o(" (Megatron-BERT model)"),Cdr=l(),KT=a("li"),eMe=a("strong"),wdr=o("mobilebert"),Adr=o(" \u2014 "),DH=a("a"),Ldr=o("MobileBertForMultipleChoice"),ydr=o(" (MobileBERT model)"),xdr=l(),ZT=a("li"),oMe=a("strong"),$dr=o("mpnet"),kdr=o(" \u2014 "),GH=a("a"),Sdr=o("MPNetForMultipleChoice"),Rdr=o(" (MPNet model)"),Pdr=l(),eM=a("li"),rMe=a("strong"),Bdr=o("nezha"),Idr=o(" \u2014 "),OH=a("a"),Ndr=o("NezhaForMultipleChoice"),qdr=o(" (Nezha model)"),jdr=l(),oM=a("li"),tMe=a("strong"),Ddr=o("nystromformer"),Gdr=o(" \u2014 "),VH=a("a"),Odr=o("NystromformerForMultipleChoice"),Vdr=o(" (Nystr\xF6mformer model)"),Xdr=l(),rM=a("li"),aMe=a("strong"),zdr=o("qdqbert"),Qdr=o(" \u2014 "),XH=a("a"),Wdr=o("QDQBertForMultipleChoice"),Udr=o(" (QDQBert model)"),Hdr=l(),tM=a("li"),nMe=a("strong"),Jdr=o("rembert"),Ydr=o(" \u2014 "),zH=a("a"),Kdr=o("RemBertForMultipleChoice"),Zdr=o(" (RemBERT model)"),emr=l(),aM=a("li"),sMe=a("strong"),omr=o("roberta"),rmr=o(" \u2014 "),QH=a("a"),tmr=o("RobertaForMultipleChoice"),amr=o(" (RoBERTa model)"),nmr=l(),nM=a("li"),lMe=a("strong"),smr=o("roformer"),lmr=o(" \u2014 "),WH=a("a"),imr=o("RoFormerForMultipleChoice"),dmr=o(" (RoFormer model)"),mmr=l(),sM=a("li"),iMe=a("strong"),cmr=o("squeezebert"),fmr=o(" \u2014 "),UH=a("a"),gmr=o("SqueezeBertForMultipleChoice"),hmr=o(" (SqueezeBERT model)"),umr=l(),lM=a("li"),dMe=a("strong"),pmr=o("xlm"),_mr=o(" \u2014 "),HH=a("a"),bmr=o("XLMForMultipleChoice"),vmr=o(" (XLM model)"),Fmr=l(),iM=a("li"),mMe=a("strong"),Tmr=o("xlm-roberta"),Mmr=o(" \u2014 "),JH=a("a"),Emr=o("XLMRobertaForMultipleChoice"),Cmr=o(" (XLM-RoBERTa model)"),wmr=l(),dM=a("li"),cMe=a("strong"),Amr=o("xlm-roberta-xl"),Lmr=o(" \u2014 "),YH=a("a"),ymr=o("XLMRobertaXLForMultipleChoice"),xmr=o(" (XLM-RoBERTa-XL model)"),$mr=l(),mM=a("li"),fMe=a("strong"),kmr=o("xlnet"),Smr=o(" \u2014 "),KH=a("a"),Rmr=o("XLNetForMultipleChoice"),Pmr=o(" (XLNet model)"),Bmr=l(),cM=a("li"),gMe=a("strong"),Imr=o("yoso"),Nmr=o(" \u2014 "),ZH=a("a"),qmr=o("YosoForMultipleChoice"),jmr=o(" (YOSO model)"),Dmr=l(),fM=a("p"),Gmr=o("The model is set in evaluation mode by default using "),hMe=a("code"),Omr=o("model.eval()"),Vmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uMe=a("code"),Xmr=o("model.train()"),zmr=l(),F(gM.$$.fragment),_eo=l(),qd=a("h2"),hM=a("a"),pMe=a("span"),F(i$.$$.fragment),Qmr=l(),_Me=a("span"),Wmr=o("AutoModelForNextSentencePrediction"),beo=l(),Go=a("div"),F(d$.$$.fragment),Umr=l(),jd=a("p"),Hmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=a("a"),Jmr=o("from_pretrained()"),Ymr=o(" class method or the "),oJ=a("a"),Kmr=o("from_config()"),Zmr=o(` class
method.`),ecr=l(),m$=a("p"),ocr=o("This class cannot be instantiated directly using "),bMe=a("code"),rcr=o("__init__()"),tcr=o(" (throws an error)."),acr=l(),Ct=a("div"),F(c$.$$.fragment),ncr=l(),vMe=a("p"),scr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lcr=l(),Dd=a("p"),icr=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),dcr=o("not"),mcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),ccr=o("from_pretrained()"),fcr=o(" to load the model weights."),gcr=l(),F(uM.$$.fragment),hcr=l(),so=a("div"),F(f$.$$.fragment),ucr=l(),TMe=a("p"),pcr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_cr=l(),tn=a("p"),bcr=o("The model class to instantiate is selected based on the "),MMe=a("code"),vcr=o("model_type"),Fcr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),Ecr=o("pretrained_model_name_or_path"),Ccr=o(":"),wcr=l(),Ue=a("ul"),pM=a("li"),wMe=a("strong"),Acr=o("bert"),Lcr=o(" \u2014 "),tJ=a("a"),ycr=o("BertForNextSentencePrediction"),xcr=o(" (BERT model)"),$cr=l(),_M=a("li"),AMe=a("strong"),kcr=o("ernie"),Scr=o(" \u2014 "),aJ=a("a"),Rcr=o("ErnieForNextSentencePrediction"),Pcr=o(" (ERNIE model)"),Bcr=l(),bM=a("li"),LMe=a("strong"),Icr=o("fnet"),Ncr=o(" \u2014 "),nJ=a("a"),qcr=o("FNetForNextSentencePrediction"),jcr=o(" (FNet model)"),Dcr=l(),vM=a("li"),yMe=a("strong"),Gcr=o("megatron-bert"),Ocr=o(" \u2014 "),sJ=a("a"),Vcr=o("MegatronBertForNextSentencePrediction"),Xcr=o(" (Megatron-BERT model)"),zcr=l(),FM=a("li"),xMe=a("strong"),Qcr=o("mobilebert"),Wcr=o(" \u2014 "),lJ=a("a"),Ucr=o("MobileBertForNextSentencePrediction"),Hcr=o(" (MobileBERT model)"),Jcr=l(),TM=a("li"),$Me=a("strong"),Ycr=o("nezha"),Kcr=o(" \u2014 "),iJ=a("a"),Zcr=o("NezhaForNextSentencePrediction"),efr=o(" (Nezha model)"),ofr=l(),MM=a("li"),kMe=a("strong"),rfr=o("qdqbert"),tfr=o(" \u2014 "),dJ=a("a"),afr=o("QDQBertForNextSentencePrediction"),nfr=o(" (QDQBert model)"),sfr=l(),EM=a("p"),lfr=o("The model is set in evaluation mode by default using "),SMe=a("code"),ifr=o("model.eval()"),dfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RMe=a("code"),mfr=o("model.train()"),cfr=l(),F(CM.$$.fragment),veo=l(),Gd=a("h2"),wM=a("a"),PMe=a("span"),F(g$.$$.fragment),ffr=l(),BMe=a("span"),gfr=o("AutoModelForTokenClassification"),Feo=l(),Oo=a("div"),F(h$.$$.fragment),hfr=l(),Od=a("p"),ufr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mJ=a("a"),pfr=o("from_pretrained()"),_fr=o(" class method or the "),cJ=a("a"),bfr=o("from_config()"),vfr=o(` class
method.`),Ffr=l(),u$=a("p"),Tfr=o("This class cannot be instantiated directly using "),IMe=a("code"),Mfr=o("__init__()"),Efr=o(" (throws an error)."),Cfr=l(),wt=a("div"),F(p$.$$.fragment),wfr=l(),NMe=a("p"),Afr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lfr=l(),Vd=a("p"),yfr=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),xfr=o("not"),$fr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),kfr=o("from_pretrained()"),Sfr=o(" to load the model weights."),Rfr=l(),F(AM.$$.fragment),Pfr=l(),lo=a("div"),F(_$.$$.fragment),Bfr=l(),jMe=a("p"),Ifr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nfr=l(),an=a("p"),qfr=o("The model class to instantiate is selected based on the "),DMe=a("code"),jfr=o("model_type"),Dfr=o(` property of the config object (either
passed as an argument or loaded from `),GMe=a("code"),Gfr=o("pretrained_model_name_or_path"),Ofr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=a("code"),Vfr=o("pretrained_model_name_or_path"),Xfr=o(":"),zfr=l(),H=a("ul"),LM=a("li"),VMe=a("strong"),Qfr=o("albert"),Wfr=o(" \u2014 "),gJ=a("a"),Ufr=o("AlbertForTokenClassification"),Hfr=o(" (ALBERT model)"),Jfr=l(),yM=a("li"),XMe=a("strong"),Yfr=o("bert"),Kfr=o(" \u2014 "),hJ=a("a"),Zfr=o("BertForTokenClassification"),egr=o(" (BERT model)"),ogr=l(),xM=a("li"),zMe=a("strong"),rgr=o("big_bird"),tgr=o(" \u2014 "),uJ=a("a"),agr=o("BigBirdForTokenClassification"),ngr=o(" (BigBird model)"),sgr=l(),$M=a("li"),QMe=a("strong"),lgr=o("bloom"),igr=o(" \u2014 "),pJ=a("a"),dgr=o("BloomForTokenClassification"),mgr=o(" (BLOOM model)"),cgr=l(),kM=a("li"),WMe=a("strong"),fgr=o("camembert"),ggr=o(" \u2014 "),_J=a("a"),hgr=o("CamembertForTokenClassification"),ugr=o(" (CamemBERT model)"),pgr=l(),SM=a("li"),UMe=a("strong"),_gr=o("canine"),bgr=o(" \u2014 "),bJ=a("a"),vgr=o("CanineForTokenClassification"),Fgr=o(" (CANINE model)"),Tgr=l(),RM=a("li"),HMe=a("strong"),Mgr=o("convbert"),Egr=o(" \u2014 "),vJ=a("a"),Cgr=o("ConvBertForTokenClassification"),wgr=o(" (ConvBERT model)"),Agr=l(),PM=a("li"),JMe=a("strong"),Lgr=o("data2vec-text"),ygr=o(" \u2014 "),FJ=a("a"),xgr=o("Data2VecTextForTokenClassification"),$gr=o(" (Data2VecText model)"),kgr=l(),BM=a("li"),YMe=a("strong"),Sgr=o("deberta"),Rgr=o(" \u2014 "),TJ=a("a"),Pgr=o("DebertaForTokenClassification"),Bgr=o(" (DeBERTa model)"),Igr=l(),IM=a("li"),KMe=a("strong"),Ngr=o("deberta-v2"),qgr=o(" \u2014 "),MJ=a("a"),jgr=o("DebertaV2ForTokenClassification"),Dgr=o(" (DeBERTa-v2 model)"),Ggr=l(),NM=a("li"),ZMe=a("strong"),Ogr=o("distilbert"),Vgr=o(" \u2014 "),EJ=a("a"),Xgr=o("DistilBertForTokenClassification"),zgr=o(" (DistilBERT model)"),Qgr=l(),qM=a("li"),eEe=a("strong"),Wgr=o("electra"),Ugr=o(" \u2014 "),CJ=a("a"),Hgr=o("ElectraForTokenClassification"),Jgr=o(" (ELECTRA model)"),Ygr=l(),jM=a("li"),oEe=a("strong"),Kgr=o("ernie"),Zgr=o(" \u2014 "),wJ=a("a"),ehr=o("ErnieForTokenClassification"),ohr=o(" (ERNIE model)"),rhr=l(),DM=a("li"),rEe=a("strong"),thr=o("esm"),ahr=o(" \u2014 "),AJ=a("a"),nhr=o("EsmForTokenClassification"),shr=o(" (ESM model)"),lhr=l(),GM=a("li"),tEe=a("strong"),ihr=o("flaubert"),dhr=o(" \u2014 "),LJ=a("a"),mhr=o("FlaubertForTokenClassification"),chr=o(" (FlauBERT model)"),fhr=l(),OM=a("li"),aEe=a("strong"),ghr=o("fnet"),hhr=o(" \u2014 "),yJ=a("a"),uhr=o("FNetForTokenClassification"),phr=o(" (FNet model)"),_hr=l(),VM=a("li"),nEe=a("strong"),bhr=o("funnel"),vhr=o(" \u2014 "),xJ=a("a"),Fhr=o("FunnelForTokenClassification"),Thr=o(" (Funnel Transformer model)"),Mhr=l(),XM=a("li"),sEe=a("strong"),Ehr=o("gpt2"),Chr=o(" \u2014 "),$J=a("a"),whr=o("GPT2ForTokenClassification"),Ahr=o(" (OpenAI GPT-2 model)"),Lhr=l(),zM=a("li"),lEe=a("strong"),yhr=o("ibert"),xhr=o(" \u2014 "),kJ=a("a"),$hr=o("IBertForTokenClassification"),khr=o(" (I-BERT model)"),Shr=l(),QM=a("li"),iEe=a("strong"),Rhr=o("layoutlm"),Phr=o(" \u2014 "),SJ=a("a"),Bhr=o("LayoutLMForTokenClassification"),Ihr=o(" (LayoutLM model)"),Nhr=l(),WM=a("li"),dEe=a("strong"),qhr=o("layoutlmv2"),jhr=o(" \u2014 "),RJ=a("a"),Dhr=o("LayoutLMv2ForTokenClassification"),Ghr=o(" (LayoutLMv2 model)"),Ohr=l(),UM=a("li"),mEe=a("strong"),Vhr=o("layoutlmv3"),Xhr=o(" \u2014 "),PJ=a("a"),zhr=o("LayoutLMv3ForTokenClassification"),Qhr=o(" (LayoutLMv3 model)"),Whr=l(),HM=a("li"),cEe=a("strong"),Uhr=o("longformer"),Hhr=o(" \u2014 "),BJ=a("a"),Jhr=o("LongformerForTokenClassification"),Yhr=o(" (Longformer model)"),Khr=l(),JM=a("li"),fEe=a("strong"),Zhr=o("luke"),eur=o(" \u2014 "),IJ=a("a"),our=o("LukeForTokenClassification"),rur=o(" (LUKE model)"),tur=l(),YM=a("li"),gEe=a("strong"),aur=o("markuplm"),nur=o(" \u2014 "),NJ=a("a"),sur=o("MarkupLMForTokenClassification"),lur=o(" (MarkupLM model)"),iur=l(),KM=a("li"),hEe=a("strong"),dur=o("megatron-bert"),mur=o(" \u2014 "),qJ=a("a"),cur=o("MegatronBertForTokenClassification"),fur=o(" (Megatron-BERT model)"),gur=l(),ZM=a("li"),uEe=a("strong"),hur=o("mobilebert"),uur=o(" \u2014 "),jJ=a("a"),pur=o("MobileBertForTokenClassification"),_ur=o(" (MobileBERT model)"),bur=l(),eE=a("li"),pEe=a("strong"),vur=o("mpnet"),Fur=o(" \u2014 "),DJ=a("a"),Tur=o("MPNetForTokenClassification"),Mur=o(" (MPNet model)"),Eur=l(),oE=a("li"),_Ee=a("strong"),Cur=o("nezha"),wur=o(" \u2014 "),GJ=a("a"),Aur=o("NezhaForTokenClassification"),Lur=o(" (Nezha model)"),yur=l(),rE=a("li"),bEe=a("strong"),xur=o("nystromformer"),$ur=o(" \u2014 "),OJ=a("a"),kur=o("NystromformerForTokenClassification"),Sur=o(" (Nystr\xF6mformer model)"),Rur=l(),tE=a("li"),vEe=a("strong"),Pur=o("qdqbert"),Bur=o(" \u2014 "),VJ=a("a"),Iur=o("QDQBertForTokenClassification"),Nur=o(" (QDQBert model)"),qur=l(),aE=a("li"),FEe=a("strong"),jur=o("rembert"),Dur=o(" \u2014 "),XJ=a("a"),Gur=o("RemBertForTokenClassification"),Our=o(" (RemBERT model)"),Vur=l(),nE=a("li"),TEe=a("strong"),Xur=o("roberta"),zur=o(" \u2014 "),zJ=a("a"),Qur=o("RobertaForTokenClassification"),Wur=o(" (RoBERTa model)"),Uur=l(),sE=a("li"),MEe=a("strong"),Hur=o("roformer"),Jur=o(" \u2014 "),QJ=a("a"),Yur=o("RoFormerForTokenClassification"),Kur=o(" (RoFormer model)"),Zur=l(),lE=a("li"),EEe=a("strong"),epr=o("squeezebert"),opr=o(" \u2014 "),WJ=a("a"),rpr=o("SqueezeBertForTokenClassification"),tpr=o(" (SqueezeBERT model)"),apr=l(),iE=a("li"),CEe=a("strong"),npr=o("xlm"),spr=o(" \u2014 "),UJ=a("a"),lpr=o("XLMForTokenClassification"),ipr=o(" (XLM model)"),dpr=l(),dE=a("li"),wEe=a("strong"),mpr=o("xlm-roberta"),cpr=o(" \u2014 "),HJ=a("a"),fpr=o("XLMRobertaForTokenClassification"),gpr=o(" (XLM-RoBERTa model)"),hpr=l(),mE=a("li"),AEe=a("strong"),upr=o("xlm-roberta-xl"),ppr=o(" \u2014 "),JJ=a("a"),_pr=o("XLMRobertaXLForTokenClassification"),bpr=o(" (XLM-RoBERTa-XL model)"),vpr=l(),cE=a("li"),LEe=a("strong"),Fpr=o("xlnet"),Tpr=o(" \u2014 "),YJ=a("a"),Mpr=o("XLNetForTokenClassification"),Epr=o(" (XLNet model)"),Cpr=l(),fE=a("li"),yEe=a("strong"),wpr=o("yoso"),Apr=o(" \u2014 "),KJ=a("a"),Lpr=o("YosoForTokenClassification"),ypr=o(" (YOSO model)"),xpr=l(),gE=a("p"),$pr=o("The model is set in evaluation mode by default using "),xEe=a("code"),kpr=o("model.eval()"),Spr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Ee=a("code"),Rpr=o("model.train()"),Ppr=l(),F(hE.$$.fragment),Teo=l(),Xd=a("h2"),uE=a("a"),kEe=a("span"),F(b$.$$.fragment),Bpr=l(),SEe=a("span"),Ipr=o("AutoModelForQuestionAnswering"),Meo=l(),Vo=a("div"),F(v$.$$.fragment),Npr=l(),zd=a("p"),qpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZJ=a("a"),jpr=o("from_pretrained()"),Dpr=o(" class method or the "),eY=a("a"),Gpr=o("from_config()"),Opr=o(` class
method.`),Vpr=l(),F$=a("p"),Xpr=o("This class cannot be instantiated directly using "),REe=a("code"),zpr=o("__init__()"),Qpr=o(" (throws an error)."),Wpr=l(),At=a("div"),F(T$.$$.fragment),Upr=l(),PEe=a("p"),Hpr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jpr=l(),Qd=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),BEe=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),e_r=o("from_pretrained()"),o_r=o(" to load the model weights."),r_r=l(),F(pE.$$.fragment),t_r=l(),io=a("div"),F(M$.$$.fragment),a_r=l(),IEe=a("p"),n_r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),s_r=l(),nn=a("p"),l_r=o("The model class to instantiate is selected based on the "),NEe=a("code"),i_r=o("model_type"),d_r=o(` property of the config object (either
passed as an argument or loaded from `),qEe=a("code"),m_r=o("pretrained_model_name_or_path"),c_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=a("code"),f_r=o("pretrained_model_name_or_path"),g_r=o(":"),h_r=l(),V=a("ul"),_E=a("li"),DEe=a("strong"),u_r=o("albert"),p_r=o(" \u2014 "),rY=a("a"),__r=o("AlbertForQuestionAnswering"),b_r=o(" (ALBERT model)"),v_r=l(),bE=a("li"),GEe=a("strong"),F_r=o("bart"),T_r=o(" \u2014 "),tY=a("a"),M_r=o("BartForQuestionAnswering"),E_r=o(" (BART model)"),C_r=l(),vE=a("li"),OEe=a("strong"),w_r=o("bert"),A_r=o(" \u2014 "),aY=a("a"),L_r=o("BertForQuestionAnswering"),y_r=o(" (BERT model)"),x_r=l(),FE=a("li"),VEe=a("strong"),$_r=o("big_bird"),k_r=o(" \u2014 "),nY=a("a"),S_r=o("BigBirdForQuestionAnswering"),R_r=o(" (BigBird model)"),P_r=l(),TE=a("li"),XEe=a("strong"),B_r=o("bigbird_pegasus"),I_r=o(" \u2014 "),sY=a("a"),N_r=o("BigBirdPegasusForQuestionAnswering"),q_r=o(" (BigBird-Pegasus model)"),j_r=l(),ME=a("li"),zEe=a("strong"),D_r=o("bloom"),G_r=o(" \u2014 "),lY=a("a"),O_r=o("BloomForQuestionAnswering"),V_r=o(" (BLOOM model)"),X_r=l(),EE=a("li"),QEe=a("strong"),z_r=o("camembert"),Q_r=o(" \u2014 "),iY=a("a"),W_r=o("CamembertForQuestionAnswering"),U_r=o(" (CamemBERT model)"),H_r=l(),CE=a("li"),WEe=a("strong"),J_r=o("canine"),Y_r=o(" \u2014 "),dY=a("a"),K_r=o("CanineForQuestionAnswering"),Z_r=o(" (CANINE model)"),e1r=l(),wE=a("li"),UEe=a("strong"),o1r=o("convbert"),r1r=o(" \u2014 "),mY=a("a"),t1r=o("ConvBertForQuestionAnswering"),a1r=o(" (ConvBERT model)"),n1r=l(),AE=a("li"),HEe=a("strong"),s1r=o("data2vec-text"),l1r=o(" \u2014 "),cY=a("a"),i1r=o("Data2VecTextForQuestionAnswering"),d1r=o(" (Data2VecText model)"),m1r=l(),LE=a("li"),JEe=a("strong"),c1r=o("deberta"),f1r=o(" \u2014 "),fY=a("a"),g1r=o("DebertaForQuestionAnswering"),h1r=o(" (DeBERTa model)"),u1r=l(),yE=a("li"),YEe=a("strong"),p1r=o("deberta-v2"),_1r=o(" \u2014 "),gY=a("a"),b1r=o("DebertaV2ForQuestionAnswering"),v1r=o(" (DeBERTa-v2 model)"),F1r=l(),xE=a("li"),KEe=a("strong"),T1r=o("distilbert"),M1r=o(" \u2014 "),hY=a("a"),E1r=o("DistilBertForQuestionAnswering"),C1r=o(" (DistilBERT model)"),w1r=l(),$E=a("li"),ZEe=a("strong"),A1r=o("electra"),L1r=o(" \u2014 "),uY=a("a"),y1r=o("ElectraForQuestionAnswering"),x1r=o(" (ELECTRA model)"),$1r=l(),kE=a("li"),e4e=a("strong"),k1r=o("ernie"),S1r=o(" \u2014 "),pY=a("a"),R1r=o("ErnieForQuestionAnswering"),P1r=o(" (ERNIE model)"),B1r=l(),SE=a("li"),o4e=a("strong"),I1r=o("flaubert"),N1r=o(" \u2014 "),_Y=a("a"),q1r=o("FlaubertForQuestionAnsweringSimple"),j1r=o(" (FlauBERT model)"),D1r=l(),RE=a("li"),r4e=a("strong"),G1r=o("fnet"),O1r=o(" \u2014 "),bY=a("a"),V1r=o("FNetForQuestionAnswering"),X1r=o(" (FNet model)"),z1r=l(),PE=a("li"),t4e=a("strong"),Q1r=o("funnel"),W1r=o(" \u2014 "),vY=a("a"),U1r=o("FunnelForQuestionAnswering"),H1r=o(" (Funnel Transformer model)"),J1r=l(),BE=a("li"),a4e=a("strong"),Y1r=o("gptj"),K1r=o(" \u2014 "),FY=a("a"),Z1r=o("GPTJForQuestionAnswering"),e2r=o(" (GPT-J model)"),o2r=l(),IE=a("li"),n4e=a("strong"),r2r=o("ibert"),t2r=o(" \u2014 "),TY=a("a"),a2r=o("IBertForQuestionAnswering"),n2r=o(" (I-BERT model)"),s2r=l(),NE=a("li"),s4e=a("strong"),l2r=o("layoutlmv2"),i2r=o(" \u2014 "),MY=a("a"),d2r=o("LayoutLMv2ForQuestionAnswering"),m2r=o(" (LayoutLMv2 model)"),c2r=l(),qE=a("li"),l4e=a("strong"),f2r=o("layoutlmv3"),g2r=o(" \u2014 "),EY=a("a"),h2r=o("LayoutLMv3ForQuestionAnswering"),u2r=o(" (LayoutLMv3 model)"),p2r=l(),jE=a("li"),i4e=a("strong"),_2r=o("led"),b2r=o(" \u2014 "),CY=a("a"),v2r=o("LEDForQuestionAnswering"),F2r=o(" (LED model)"),T2r=l(),DE=a("li"),d4e=a("strong"),M2r=o("longformer"),E2r=o(" \u2014 "),wY=a("a"),C2r=o("LongformerForQuestionAnswering"),w2r=o(" (Longformer model)"),A2r=l(),GE=a("li"),m4e=a("strong"),L2r=o("luke"),y2r=o(" \u2014 "),AY=a("a"),x2r=o("LukeForQuestionAnswering"),$2r=o(" (LUKE model)"),k2r=l(),OE=a("li"),c4e=a("strong"),S2r=o("lxmert"),R2r=o(" \u2014 "),LY=a("a"),P2r=o("LxmertForQuestionAnswering"),B2r=o(" (LXMERT model)"),I2r=l(),VE=a("li"),f4e=a("strong"),N2r=o("markuplm"),q2r=o(" \u2014 "),yY=a("a"),j2r=o("MarkupLMForQuestionAnswering"),D2r=o(" (MarkupLM model)"),G2r=l(),XE=a("li"),g4e=a("strong"),O2r=o("mbart"),V2r=o(" \u2014 "),xY=a("a"),X2r=o("MBartForQuestionAnswering"),z2r=o(" (mBART model)"),Q2r=l(),zE=a("li"),h4e=a("strong"),W2r=o("megatron-bert"),U2r=o(" \u2014 "),$Y=a("a"),H2r=o("MegatronBertForQuestionAnswering"),J2r=o(" (Megatron-BERT model)"),Y2r=l(),QE=a("li"),u4e=a("strong"),K2r=o("mobilebert"),Z2r=o(" \u2014 "),kY=a("a"),ebr=o("MobileBertForQuestionAnswering"),obr=o(" (MobileBERT model)"),rbr=l(),WE=a("li"),p4e=a("strong"),tbr=o("mpnet"),abr=o(" \u2014 "),SY=a("a"),nbr=o("MPNetForQuestionAnswering"),sbr=o(" (MPNet model)"),lbr=l(),UE=a("li"),_4e=a("strong"),ibr=o("mvp"),dbr=o(" \u2014 "),RY=a("a"),mbr=o("MvpForQuestionAnswering"),cbr=o(" (MVP model)"),fbr=l(),HE=a("li"),b4e=a("strong"),gbr=o("nezha"),hbr=o(" \u2014 "),PY=a("a"),ubr=o("NezhaForQuestionAnswering"),pbr=o(" (Nezha model)"),_br=l(),JE=a("li"),v4e=a("strong"),bbr=o("nystromformer"),vbr=o(" \u2014 "),BY=a("a"),Fbr=o("NystromformerForQuestionAnswering"),Tbr=o(" (Nystr\xF6mformer model)"),Mbr=l(),YE=a("li"),F4e=a("strong"),Ebr=o("qdqbert"),Cbr=o(" \u2014 "),IY=a("a"),wbr=o("QDQBertForQuestionAnswering"),Abr=o(" (QDQBert model)"),Lbr=l(),KE=a("li"),T4e=a("strong"),ybr=o("reformer"),xbr=o(" \u2014 "),NY=a("a"),$br=o("ReformerForQuestionAnswering"),kbr=o(" (Reformer model)"),Sbr=l(),ZE=a("li"),M4e=a("strong"),Rbr=o("rembert"),Pbr=o(" \u2014 "),qY=a("a"),Bbr=o("RemBertForQuestionAnswering"),Ibr=o(" (RemBERT model)"),Nbr=l(),e4=a("li"),E4e=a("strong"),qbr=o("roberta"),jbr=o(" \u2014 "),jY=a("a"),Dbr=o("RobertaForQuestionAnswering"),Gbr=o(" (RoBERTa model)"),Obr=l(),o4=a("li"),C4e=a("strong"),Vbr=o("roformer"),Xbr=o(" \u2014 "),DY=a("a"),zbr=o("RoFormerForQuestionAnswering"),Qbr=o(" (RoFormer model)"),Wbr=l(),r4=a("li"),w4e=a("strong"),Ubr=o("splinter"),Hbr=o(" \u2014 "),GY=a("a"),Jbr=o("SplinterForQuestionAnswering"),Ybr=o(" (Splinter model)"),Kbr=l(),t4=a("li"),A4e=a("strong"),Zbr=o("squeezebert"),evr=o(" \u2014 "),OY=a("a"),ovr=o("SqueezeBertForQuestionAnswering"),rvr=o(" (SqueezeBERT model)"),tvr=l(),a4=a("li"),L4e=a("strong"),avr=o("xlm"),nvr=o(" \u2014 "),VY=a("a"),svr=o("XLMForQuestionAnsweringSimple"),lvr=o(" (XLM model)"),ivr=l(),n4=a("li"),y4e=a("strong"),dvr=o("xlm-roberta"),mvr=o(" \u2014 "),XY=a("a"),cvr=o("XLMRobertaForQuestionAnswering"),fvr=o(" (XLM-RoBERTa model)"),gvr=l(),s4=a("li"),x4e=a("strong"),hvr=o("xlm-roberta-xl"),uvr=o(" \u2014 "),zY=a("a"),pvr=o("XLMRobertaXLForQuestionAnswering"),_vr=o(" (XLM-RoBERTa-XL model)"),bvr=l(),l4=a("li"),$4e=a("strong"),vvr=o("xlnet"),Fvr=o(" \u2014 "),QY=a("a"),Tvr=o("XLNetForQuestionAnsweringSimple"),Mvr=o(" (XLNet model)"),Evr=l(),i4=a("li"),k4e=a("strong"),Cvr=o("yoso"),wvr=o(" \u2014 "),WY=a("a"),Avr=o("YosoForQuestionAnswering"),Lvr=o(" (YOSO model)"),yvr=l(),d4=a("p"),xvr=o("The model is set in evaluation mode by default using "),S4e=a("code"),$vr=o("model.eval()"),kvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R4e=a("code"),Svr=o("model.train()"),Rvr=l(),F(m4.$$.fragment),Eeo=l(),Wd=a("h2"),c4=a("a"),P4e=a("span"),F(E$.$$.fragment),Pvr=l(),B4e=a("span"),Bvr=o("AutoModelForTableQuestionAnswering"),Ceo=l(),Xo=a("div"),F(C$.$$.fragment),Ivr=l(),Ud=a("p"),Nvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UY=a("a"),qvr=o("from_pretrained()"),jvr=o(" class method or the "),HY=a("a"),Dvr=o("from_config()"),Gvr=o(` class
method.`),Ovr=l(),w$=a("p"),Vvr=o("This class cannot be instantiated directly using "),I4e=a("code"),Xvr=o("__init__()"),zvr=o(" (throws an error)."),Qvr=l(),Lt=a("div"),F(A$.$$.fragment),Wvr=l(),N4e=a("p"),Uvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hvr=l(),Hd=a("p"),Jvr=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),Yvr=o("not"),Kvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),Zvr=o("from_pretrained()"),eFr=o(" to load the model weights."),oFr=l(),F(f4.$$.fragment),rFr=l(),mo=a("div"),F(L$.$$.fragment),tFr=l(),j4e=a("p"),aFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nFr=l(),sn=a("p"),sFr=o("The model class to instantiate is selected based on the "),D4e=a("code"),lFr=o("model_type"),iFr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),dFr=o("pretrained_model_name_or_path"),mFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),cFr=o("pretrained_model_name_or_path"),fFr=o(":"),gFr=l(),V4e=a("ul"),g4=a("li"),X4e=a("strong"),hFr=o("tapas"),uFr=o(" \u2014 "),YY=a("a"),pFr=o("TapasForQuestionAnswering"),_Fr=o(" (TAPAS model)"),bFr=l(),h4=a("p"),vFr=o("The model is set in evaluation mode by default using "),z4e=a("code"),FFr=o("model.eval()"),TFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q4e=a("code"),MFr=o("model.train()"),EFr=l(),F(u4.$$.fragment),weo=l(),Jd=a("h2"),p4=a("a"),W4e=a("span"),F(y$.$$.fragment),CFr=l(),U4e=a("span"),wFr=o("AutoModelForDocumentQuestionAnswering"),Aeo=l(),zo=a("div"),F(x$.$$.fragment),AFr=l(),Yd=a("p"),LFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),KY=a("a"),yFr=o("from_pretrained()"),xFr=o(" class method or the "),ZY=a("a"),$Fr=o("from_config()"),kFr=o(` class
method.`),SFr=l(),$$=a("p"),RFr=o("This class cannot be instantiated directly using "),H4e=a("code"),PFr=o("__init__()"),BFr=o(" (throws an error)."),IFr=l(),yt=a("div"),F(k$.$$.fragment),NFr=l(),J4e=a("p"),qFr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),jFr=l(),Kd=a("p"),DFr=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),GFr=o("not"),OFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),VFr=o("from_pretrained()"),XFr=o(" to load the model weights."),zFr=l(),F(_4.$$.fragment),QFr=l(),co=a("div"),F(S$.$$.fragment),WFr=l(),K4e=a("p"),UFr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),HFr=l(),ln=a("p"),JFr=o("The model class to instantiate is selected based on the "),Z4e=a("code"),YFr=o("model_type"),KFr=o(` property of the config object (either
passed as an argument or loaded from `),eCe=a("code"),ZFr=o("pretrained_model_name_or_path"),eTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=a("code"),oTr=o("pretrained_model_name_or_path"),rTr=o(":"),tTr=l(),Zd=a("ul"),b4=a("li"),rCe=a("strong"),aTr=o("layoutlm"),nTr=o(" \u2014 "),oK=a("a"),sTr=o("LayoutLMForQuestionAnswering"),lTr=o(" (LayoutLM model)"),iTr=l(),v4=a("li"),tCe=a("strong"),dTr=o("layoutlmv2"),mTr=o(" \u2014 "),rK=a("a"),cTr=o("LayoutLMv2ForQuestionAnswering"),fTr=o(" (LayoutLMv2 model)"),gTr=l(),F4=a("li"),aCe=a("strong"),hTr=o("layoutlmv3"),uTr=o(" \u2014 "),tK=a("a"),pTr=o("LayoutLMv3ForQuestionAnswering"),_Tr=o(" (LayoutLMv3 model)"),bTr=l(),T4=a("p"),vTr=o("The model is set in evaluation mode by default using "),nCe=a("code"),FTr=o("model.eval()"),TTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sCe=a("code"),MTr=o("model.train()"),ETr=l(),F(M4.$$.fragment),Leo=l(),em=a("h2"),E4=a("a"),lCe=a("span"),F(R$.$$.fragment),CTr=l(),iCe=a("span"),wTr=o("AutoModelForImageClassification"),yeo=l(),Qo=a("div"),F(P$.$$.fragment),ATr=l(),om=a("p"),LTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aK=a("a"),yTr=o("from_pretrained()"),xTr=o(" class method or the "),nK=a("a"),$Tr=o("from_config()"),kTr=o(` class
method.`),STr=l(),B$=a("p"),RTr=o("This class cannot be instantiated directly using "),dCe=a("code"),PTr=o("__init__()"),BTr=o(" (throws an error)."),ITr=l(),xt=a("div"),F(I$.$$.fragment),NTr=l(),mCe=a("p"),qTr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jTr=l(),rm=a("p"),DTr=o(`Note:
Loading a model from its configuration file does `),cCe=a("strong"),GTr=o("not"),OTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),VTr=o("from_pretrained()"),XTr=o(" to load the model weights."),zTr=l(),F(C4.$$.fragment),QTr=l(),fo=a("div"),F(N$.$$.fragment),WTr=l(),fCe=a("p"),UTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HTr=l(),dn=a("p"),JTr=o("The model class to instantiate is selected based on the "),gCe=a("code"),YTr=o("model_type"),KTr=o(` property of the config object (either
passed as an argument or loaded from `),hCe=a("code"),ZTr=o("pretrained_model_name_or_path"),eMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=a("code"),oMr=o("pretrained_model_name_or_path"),rMr=o(":"),tMr=l(),be=a("ul"),w4=a("li"),pCe=a("strong"),aMr=o("beit"),nMr=o(" \u2014 "),lK=a("a"),sMr=o("BeitForImageClassification"),lMr=o(" (BEiT model)"),iMr=l(),A4=a("li"),_Ce=a("strong"),dMr=o("convnext"),mMr=o(" \u2014 "),iK=a("a"),cMr=o("ConvNextForImageClassification"),fMr=o(" (ConvNeXT model)"),gMr=l(),L4=a("li"),bCe=a("strong"),hMr=o("cvt"),uMr=o(" \u2014 "),dK=a("a"),pMr=o("CvtForImageClassification"),_Mr=o(" (CvT model)"),bMr=l(),y4=a("li"),vCe=a("strong"),vMr=o("data2vec-vision"),FMr=o(" \u2014 "),mK=a("a"),TMr=o("Data2VecVisionForImageClassification"),MMr=o(" (Data2VecVision model)"),EMr=l(),bl=a("li"),FCe=a("strong"),CMr=o("deit"),wMr=o(" \u2014 "),cK=a("a"),AMr=o("DeiTForImageClassification"),LMr=o(" or "),fK=a("a"),yMr=o("DeiTForImageClassificationWithTeacher"),xMr=o(" (DeiT model)"),$Mr=l(),x4=a("li"),TCe=a("strong"),kMr=o("imagegpt"),SMr=o(" \u2014 "),gK=a("a"),RMr=o("ImageGPTForImageClassification"),PMr=o(" (ImageGPT model)"),BMr=l(),vl=a("li"),MCe=a("strong"),IMr=o("levit"),NMr=o(" \u2014 "),hK=a("a"),qMr=o("LevitForImageClassification"),jMr=o(" or "),uK=a("a"),DMr=o("LevitForImageClassificationWithTeacher"),GMr=o(" (LeViT model)"),OMr=l(),$4=a("li"),ECe=a("strong"),VMr=o("mobilevit"),XMr=o(" \u2014 "),pK=a("a"),zMr=o("MobileViTForImageClassification"),QMr=o(" (MobileViT model)"),WMr=l(),$t=a("li"),CCe=a("strong"),UMr=o("perceiver"),HMr=o(" \u2014 "),_K=a("a"),JMr=o("PerceiverForImageClassificationLearned"),YMr=o(" or "),bK=a("a"),KMr=o("PerceiverForImageClassificationFourier"),ZMr=o(" or "),vK=a("a"),eEr=o("PerceiverForImageClassificationConvProcessing"),oEr=o(" (Perceiver model)"),rEr=l(),k4=a("li"),wCe=a("strong"),tEr=o("poolformer"),aEr=o(" \u2014 "),FK=a("a"),nEr=o("PoolFormerForImageClassification"),sEr=o(" (PoolFormer model)"),lEr=l(),S4=a("li"),ACe=a("strong"),iEr=o("regnet"),dEr=o(" \u2014 "),TK=a("a"),mEr=o("RegNetForImageClassification"),cEr=o(" (RegNet model)"),fEr=l(),R4=a("li"),LCe=a("strong"),gEr=o("resnet"),hEr=o(" \u2014 "),MK=a("a"),uEr=o("ResNetForImageClassification"),pEr=o(" (ResNet model)"),_Er=l(),P4=a("li"),yCe=a("strong"),bEr=o("segformer"),vEr=o(" \u2014 "),EK=a("a"),FEr=o("SegformerForImageClassification"),TEr=o(" (SegFormer model)"),MEr=l(),B4=a("li"),xCe=a("strong"),EEr=o("swin"),CEr=o(" \u2014 "),CK=a("a"),wEr=o("SwinForImageClassification"),AEr=o(" (Swin Transformer model)"),LEr=l(),I4=a("li"),$Ce=a("strong"),yEr=o("swinv2"),xEr=o(" \u2014 "),wK=a("a"),$Er=o("Swinv2ForImageClassification"),kEr=o(" (Swin Transformer V2 model)"),SEr=l(),N4=a("li"),kCe=a("strong"),REr=o("van"),PEr=o(" \u2014 "),AK=a("a"),BEr=o("VanForImageClassification"),IEr=o(" (VAN model)"),NEr=l(),q4=a("li"),SCe=a("strong"),qEr=o("vit"),jEr=o(" \u2014 "),LK=a("a"),DEr=o("ViTForImageClassification"),GEr=o(" (ViT model)"),OEr=l(),j4=a("li"),RCe=a("strong"),VEr=o("vit_msn"),XEr=o(" \u2014 "),yK=a("a"),zEr=o("ViTMSNForImageClassification"),QEr=o(" (ViTMSN model)"),WEr=l(),D4=a("p"),UEr=o("The model is set in evaluation mode by default using "),PCe=a("code"),HEr=o("model.eval()"),JEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BCe=a("code"),YEr=o("model.train()"),KEr=l(),F(G4.$$.fragment),xeo=l(),tm=a("h2"),O4=a("a"),ICe=a("span"),F(q$.$$.fragment),ZEr=l(),NCe=a("span"),e4r=o("AutoModelForVideoClassification"),$eo=l(),Wo=a("div"),F(j$.$$.fragment),o4r=l(),am=a("p"),r4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),xK=a("a"),t4r=o("from_pretrained()"),a4r=o(" class method or the "),$K=a("a"),n4r=o("from_config()"),s4r=o(` class
method.`),l4r=l(),D$=a("p"),i4r=o("This class cannot be instantiated directly using "),qCe=a("code"),d4r=o("__init__()"),m4r=o(" (throws an error)."),c4r=l(),kt=a("div"),F(G$.$$.fragment),f4r=l(),jCe=a("p"),g4r=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),h4r=l(),nm=a("p"),u4r=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),p4r=o("not"),_4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),b4r=o("from_pretrained()"),v4r=o(" to load the model weights."),F4r=l(),F(V4.$$.fragment),T4r=l(),go=a("div"),F(O$.$$.fragment),M4r=l(),GCe=a("p"),E4r=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),C4r=l(),mn=a("p"),w4r=o("The model class to instantiate is selected based on the "),OCe=a("code"),A4r=o("model_type"),L4r=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),y4r=o("pretrained_model_name_or_path"),x4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),$4r=o("pretrained_model_name_or_path"),k4r=o(":"),S4r=l(),zCe=a("ul"),X4=a("li"),QCe=a("strong"),R4r=o("videomae"),P4r=o(" \u2014 "),SK=a("a"),B4r=o("VideoMAEForVideoClassification"),I4r=o(" (VideoMAE model)"),N4r=l(),z4=a("p"),q4r=o("The model is set in evaluation mode by default using "),WCe=a("code"),j4r=o("model.eval()"),D4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UCe=a("code"),G4r=o("model.train()"),O4r=l(),F(Q4.$$.fragment),keo=l(),sm=a("h2"),W4=a("a"),HCe=a("span"),F(V$.$$.fragment),V4r=l(),JCe=a("span"),X4r=o("AutoModelForVision2Seq"),Seo=l(),Uo=a("div"),F(X$.$$.fragment),z4r=l(),lm=a("p"),Q4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RK=a("a"),W4r=o("from_pretrained()"),U4r=o(" class method or the "),PK=a("a"),H4r=o("from_config()"),J4r=o(` class
method.`),Y4r=l(),z$=a("p"),K4r=o("This class cannot be instantiated directly using "),YCe=a("code"),Z4r=o("__init__()"),eCr=o(" (throws an error)."),oCr=l(),St=a("div"),F(Q$.$$.fragment),rCr=l(),KCe=a("p"),tCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aCr=l(),im=a("p"),nCr=o(`Note:
Loading a model from its configuration file does `),ZCe=a("strong"),sCr=o("not"),lCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),iCr=o("from_pretrained()"),dCr=o(" to load the model weights."),mCr=l(),F(U4.$$.fragment),cCr=l(),ho=a("div"),F(W$.$$.fragment),fCr=l(),e3e=a("p"),gCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hCr=l(),cn=a("p"),uCr=o("The model class to instantiate is selected based on the "),o3e=a("code"),pCr=o("model_type"),_Cr=o(` property of the config object (either
passed as an argument or loaded from `),r3e=a("code"),bCr=o("pretrained_model_name_or_path"),vCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=a("code"),FCr=o("pretrained_model_name_or_path"),TCr=o(":"),MCr=l(),a3e=a("ul"),H4=a("li"),n3e=a("strong"),ECr=o("vision-encoder-decoder"),CCr=o(" \u2014 "),IK=a("a"),wCr=o("VisionEncoderDecoderModel"),ACr=o(" (Vision Encoder decoder model)"),LCr=l(),J4=a("p"),yCr=o("The model is set in evaluation mode by default using "),s3e=a("code"),xCr=o("model.eval()"),$Cr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l3e=a("code"),kCr=o("model.train()"),SCr=l(),F(Y4.$$.fragment),Reo=l(),dm=a("h2"),K4=a("a"),i3e=a("span"),F(U$.$$.fragment),RCr=l(),d3e=a("span"),PCr=o("AutoModelForVisualQuestionAnswering"),Peo=l(),Ho=a("div"),F(H$.$$.fragment),BCr=l(),mm=a("p"),ICr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),NK=a("a"),NCr=o("from_pretrained()"),qCr=o(" class method or the "),qK=a("a"),jCr=o("from_config()"),DCr=o(` class
method.`),GCr=l(),J$=a("p"),OCr=o("This class cannot be instantiated directly using "),m3e=a("code"),VCr=o("__init__()"),XCr=o(" (throws an error)."),zCr=l(),Rt=a("div"),F(Y$.$$.fragment),QCr=l(),c3e=a("p"),WCr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),UCr=l(),cm=a("p"),HCr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),JCr=o("not"),YCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),KCr=o("from_pretrained()"),ZCr=o(" to load the model weights."),e3r=l(),F(Z4.$$.fragment),o3r=l(),uo=a("div"),F(K$.$$.fragment),r3r=l(),g3e=a("p"),t3r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),a3r=l(),fn=a("p"),n3r=o("The model class to instantiate is selected based on the "),h3e=a("code"),s3r=o("model_type"),l3r=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),m3r=o("pretrained_model_name_or_path"),c3r=o(":"),f3r=l(),_3e=a("ul"),eC=a("li"),b3e=a("strong"),g3r=o("vilt"),h3r=o(" \u2014 "),DK=a("a"),u3r=o("ViltForQuestionAnswering"),p3r=o(" (ViLT model)"),_3r=l(),oC=a("p"),b3r=o("The model is set in evaluation mode by default using "),v3e=a("code"),v3r=o("model.eval()"),F3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F3e=a("code"),T3r=o("model.train()"),M3r=l(),F(rC.$$.fragment),Beo=l(),fm=a("h2"),tC=a("a"),T3e=a("span"),F(Z$.$$.fragment),E3r=l(),M3e=a("span"),C3r=o("AutoModelForAudioClassification"),Ieo=l(),Jo=a("div"),F(ek.$$.fragment),w3r=l(),gm=a("p"),A3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GK=a("a"),L3r=o("from_pretrained()"),y3r=o(" class method or the "),OK=a("a"),x3r=o("from_config()"),$3r=o(` class
method.`),k3r=l(),ok=a("p"),S3r=o("This class cannot be instantiated directly using "),E3e=a("code"),R3r=o("__init__()"),P3r=o(" (throws an error)."),B3r=l(),Pt=a("div"),F(rk.$$.fragment),I3r=l(),C3e=a("p"),N3r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),q3r=l(),hm=a("p"),j3r=o(`Note:
Loading a model from its configuration file does `),w3e=a("strong"),D3r=o("not"),G3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),O3r=o("from_pretrained()"),V3r=o(" to load the model weights."),X3r=l(),F(aC.$$.fragment),z3r=l(),po=a("div"),F(tk.$$.fragment),Q3r=l(),A3e=a("p"),W3r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),U3r=l(),gn=a("p"),H3r=o("The model class to instantiate is selected based on the "),L3e=a("code"),J3r=o("model_type"),Y3r=o(` property of the config object (either
passed as an argument or loaded from `),y3e=a("code"),K3r=o("pretrained_model_name_or_path"),Z3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=a("code"),e5r=o("pretrained_model_name_or_path"),o5r=o(":"),r5r=l(),Pe=a("ul"),nC=a("li"),$3e=a("strong"),t5r=o("data2vec-audio"),a5r=o(" \u2014 "),XK=a("a"),n5r=o("Data2VecAudioForSequenceClassification"),s5r=o(" (Data2VecAudio model)"),l5r=l(),sC=a("li"),k3e=a("strong"),i5r=o("hubert"),d5r=o(" \u2014 "),zK=a("a"),m5r=o("HubertForSequenceClassification"),c5r=o(" (Hubert model)"),f5r=l(),lC=a("li"),S3e=a("strong"),g5r=o("sew"),h5r=o(" \u2014 "),QK=a("a"),u5r=o("SEWForSequenceClassification"),p5r=o(" (SEW model)"),_5r=l(),iC=a("li"),R3e=a("strong"),b5r=o("sew-d"),v5r=o(" \u2014 "),WK=a("a"),F5r=o("SEWDForSequenceClassification"),T5r=o(" (SEW-D model)"),M5r=l(),dC=a("li"),P3e=a("strong"),E5r=o("unispeech"),C5r=o(" \u2014 "),UK=a("a"),w5r=o("UniSpeechForSequenceClassification"),A5r=o(" (UniSpeech model)"),L5r=l(),mC=a("li"),B3e=a("strong"),y5r=o("unispeech-sat"),x5r=o(" \u2014 "),HK=a("a"),$5r=o("UniSpeechSatForSequenceClassification"),k5r=o(" (UniSpeechSat model)"),S5r=l(),cC=a("li"),I3e=a("strong"),R5r=o("wav2vec2"),P5r=o(" \u2014 "),JK=a("a"),B5r=o("Wav2Vec2ForSequenceClassification"),I5r=o(" (Wav2Vec2 model)"),N5r=l(),fC=a("li"),N3e=a("strong"),q5r=o("wav2vec2-conformer"),j5r=o(" \u2014 "),YK=a("a"),D5r=o("Wav2Vec2ConformerForSequenceClassification"),G5r=o(" (Wav2Vec2-Conformer model)"),O5r=l(),gC=a("li"),q3e=a("strong"),V5r=o("wavlm"),X5r=o(" \u2014 "),KK=a("a"),z5r=o("WavLMForSequenceClassification"),Q5r=o(" (WavLM model)"),W5r=l(),hC=a("p"),U5r=o("The model is set in evaluation mode by default using "),j3e=a("code"),H5r=o("model.eval()"),J5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D3e=a("code"),Y5r=o("model.train()"),K5r=l(),F(uC.$$.fragment),Neo=l(),um=a("h2"),pC=a("a"),G3e=a("span"),F(ak.$$.fragment),Z5r=l(),O3e=a("span"),e0r=o("AutoModelForAudioFrameClassification"),qeo=l(),Yo=a("div"),F(nk.$$.fragment),o0r=l(),pm=a("p"),r0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZK=a("a"),t0r=o("from_pretrained()"),a0r=o(" class method or the "),eZ=a("a"),n0r=o("from_config()"),s0r=o(` class
method.`),l0r=l(),sk=a("p"),i0r=o("This class cannot be instantiated directly using "),V3e=a("code"),d0r=o("__init__()"),m0r=o(" (throws an error)."),c0r=l(),Bt=a("div"),F(lk.$$.fragment),f0r=l(),X3e=a("p"),g0r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),h0r=l(),_m=a("p"),u0r=o(`Note:
Loading a model from its configuration file does `),z3e=a("strong"),p0r=o("not"),_0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=a("a"),b0r=o("from_pretrained()"),v0r=o(" to load the model weights."),F0r=l(),F(_C.$$.fragment),T0r=l(),_o=a("div"),F(ik.$$.fragment),M0r=l(),Q3e=a("p"),E0r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),C0r=l(),hn=a("p"),w0r=o("The model class to instantiate is selected based on the "),W3e=a("code"),A0r=o("model_type"),L0r=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),y0r=o("pretrained_model_name_or_path"),x0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=a("code"),$0r=o("pretrained_model_name_or_path"),k0r=o(":"),S0r=l(),ct=a("ul"),bC=a("li"),J3e=a("strong"),R0r=o("data2vec-audio"),P0r=o(" \u2014 "),rZ=a("a"),B0r=o("Data2VecAudioForAudioFrameClassification"),I0r=o(" (Data2VecAudio model)"),N0r=l(),vC=a("li"),Y3e=a("strong"),q0r=o("unispeech-sat"),j0r=o(" \u2014 "),tZ=a("a"),D0r=o("UniSpeechSatForAudioFrameClassification"),G0r=o(" (UniSpeechSat model)"),O0r=l(),FC=a("li"),K3e=a("strong"),V0r=o("wav2vec2"),X0r=o(" \u2014 "),aZ=a("a"),z0r=o("Wav2Vec2ForAudioFrameClassification"),Q0r=o(" (Wav2Vec2 model)"),W0r=l(),TC=a("li"),Z3e=a("strong"),U0r=o("wav2vec2-conformer"),H0r=o(" \u2014 "),nZ=a("a"),J0r=o("Wav2Vec2ConformerForAudioFrameClassification"),Y0r=o(" (Wav2Vec2-Conformer model)"),K0r=l(),MC=a("li"),e5e=a("strong"),Z0r=o("wavlm"),ewr=o(" \u2014 "),sZ=a("a"),owr=o("WavLMForAudioFrameClassification"),rwr=o(" (WavLM model)"),twr=l(),EC=a("p"),awr=o("The model is set in evaluation mode by default using "),o5e=a("code"),nwr=o("model.eval()"),swr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r5e=a("code"),lwr=o("model.train()"),iwr=l(),F(CC.$$.fragment),jeo=l(),bm=a("h2"),wC=a("a"),t5e=a("span"),F(dk.$$.fragment),dwr=l(),a5e=a("span"),mwr=o("AutoModelForCTC"),Deo=l(),Ko=a("div"),F(mk.$$.fragment),cwr=l(),vm=a("p"),fwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lZ=a("a"),gwr=o("from_pretrained()"),hwr=o(" class method or the "),iZ=a("a"),uwr=o("from_config()"),pwr=o(` class
method.`),_wr=l(),ck=a("p"),bwr=o("This class cannot be instantiated directly using "),n5e=a("code"),vwr=o("__init__()"),Fwr=o(" (throws an error)."),Twr=l(),It=a("div"),F(fk.$$.fragment),Mwr=l(),s5e=a("p"),Ewr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Cwr=l(),Fm=a("p"),wwr=o(`Note:
Loading a model from its configuration file does `),l5e=a("strong"),Awr=o("not"),Lwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),ywr=o("from_pretrained()"),xwr=o(" to load the model weights."),$wr=l(),F(AC.$$.fragment),kwr=l(),bo=a("div"),F(gk.$$.fragment),Swr=l(),i5e=a("p"),Rwr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Pwr=l(),un=a("p"),Bwr=o("The model class to instantiate is selected based on the "),d5e=a("code"),Iwr=o("model_type"),Nwr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),qwr=o("pretrained_model_name_or_path"),jwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),Dwr=o("pretrained_model_name_or_path"),Gwr=o(":"),Owr=l(),Le=a("ul"),LC=a("li"),f5e=a("strong"),Vwr=o("data2vec-audio"),Xwr=o(" \u2014 "),mZ=a("a"),zwr=o("Data2VecAudioForCTC"),Qwr=o(" (Data2VecAudio model)"),Wwr=l(),yC=a("li"),g5e=a("strong"),Uwr=o("hubert"),Hwr=o(" \u2014 "),cZ=a("a"),Jwr=o("HubertForCTC"),Ywr=o(" (Hubert model)"),Kwr=l(),xC=a("li"),h5e=a("strong"),Zwr=o("mctct"),eAr=o(" \u2014 "),fZ=a("a"),oAr=o("MCTCTForCTC"),rAr=o(" (M-CTC-T model)"),tAr=l(),$C=a("li"),u5e=a("strong"),aAr=o("sew"),nAr=o(" \u2014 "),gZ=a("a"),sAr=o("SEWForCTC"),lAr=o(" (SEW model)"),iAr=l(),kC=a("li"),p5e=a("strong"),dAr=o("sew-d"),mAr=o(" \u2014 "),hZ=a("a"),cAr=o("SEWDForCTC"),fAr=o(" (SEW-D model)"),gAr=l(),SC=a("li"),_5e=a("strong"),hAr=o("unispeech"),uAr=o(" \u2014 "),uZ=a("a"),pAr=o("UniSpeechForCTC"),_Ar=o(" (UniSpeech model)"),bAr=l(),RC=a("li"),b5e=a("strong"),vAr=o("unispeech-sat"),FAr=o(" \u2014 "),pZ=a("a"),TAr=o("UniSpeechSatForCTC"),MAr=o(" (UniSpeechSat model)"),EAr=l(),PC=a("li"),v5e=a("strong"),CAr=o("wav2vec2"),wAr=o(" \u2014 "),_Z=a("a"),AAr=o("Wav2Vec2ForCTC"),LAr=o(" (Wav2Vec2 model)"),yAr=l(),BC=a("li"),F5e=a("strong"),xAr=o("wav2vec2-conformer"),$Ar=o(" \u2014 "),bZ=a("a"),kAr=o("Wav2Vec2ConformerForCTC"),SAr=o(" (Wav2Vec2-Conformer model)"),RAr=l(),IC=a("li"),T5e=a("strong"),PAr=o("wavlm"),BAr=o(" \u2014 "),vZ=a("a"),IAr=o("WavLMForCTC"),NAr=o(" (WavLM model)"),qAr=l(),NC=a("p"),jAr=o("The model is set in evaluation mode by default using "),M5e=a("code"),DAr=o("model.eval()"),GAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E5e=a("code"),OAr=o("model.train()"),VAr=l(),F(qC.$$.fragment),Geo=l(),Tm=a("h2"),jC=a("a"),C5e=a("span"),F(hk.$$.fragment),XAr=l(),w5e=a("span"),zAr=o("AutoModelForSpeechSeq2Seq"),Oeo=l(),Zo=a("div"),F(uk.$$.fragment),QAr=l(),Mm=a("p"),WAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FZ=a("a"),UAr=o("from_pretrained()"),HAr=o(" class method or the "),TZ=a("a"),JAr=o("from_config()"),YAr=o(` class
method.`),KAr=l(),pk=a("p"),ZAr=o("This class cannot be instantiated directly using "),A5e=a("code"),e6r=o("__init__()"),o6r=o(" (throws an error)."),r6r=l(),Nt=a("div"),F(_k.$$.fragment),t6r=l(),L5e=a("p"),a6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),n6r=l(),Em=a("p"),s6r=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),l6r=o("not"),i6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),d6r=o("from_pretrained()"),m6r=o(" to load the model weights."),c6r=l(),F(DC.$$.fragment),f6r=l(),vo=a("div"),F(bk.$$.fragment),g6r=l(),x5e=a("p"),h6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),u6r=l(),pn=a("p"),p6r=o("The model class to instantiate is selected based on the "),$5e=a("code"),_6r=o("model_type"),b6r=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),v6r=o("pretrained_model_name_or_path"),F6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),T6r=o("pretrained_model_name_or_path"),M6r=o(":"),E6r=l(),vk=a("ul"),GC=a("li"),R5e=a("strong"),C6r=o("speech-encoder-decoder"),w6r=o(" \u2014 "),EZ=a("a"),A6r=o("SpeechEncoderDecoderModel"),L6r=o(" (Speech Encoder decoder model)"),y6r=l(),OC=a("li"),P5e=a("strong"),x6r=o("speech_to_text"),$6r=o(" \u2014 "),CZ=a("a"),k6r=o("Speech2TextForConditionalGeneration"),S6r=o(" (Speech2Text model)"),R6r=l(),VC=a("p"),P6r=o("The model is set in evaluation mode by default using "),B5e=a("code"),B6r=o("model.eval()"),I6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I5e=a("code"),N6r=o("model.train()"),q6r=l(),F(XC.$$.fragment),Veo=l(),Cm=a("h2"),zC=a("a"),N5e=a("span"),F(Fk.$$.fragment),j6r=l(),q5e=a("span"),D6r=o("AutoModelForAudioXVector"),Xeo=l(),er=a("div"),F(Tk.$$.fragment),G6r=l(),wm=a("p"),O6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wZ=a("a"),V6r=o("from_pretrained()"),X6r=o(" class method or the "),AZ=a("a"),z6r=o("from_config()"),Q6r=o(` class
method.`),W6r=l(),Mk=a("p"),U6r=o("This class cannot be instantiated directly using "),j5e=a("code"),H6r=o("__init__()"),J6r=o(" (throws an error)."),Y6r=l(),qt=a("div"),F(Ek.$$.fragment),K6r=l(),D5e=a("p"),Z6r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),e7r=l(),Am=a("p"),o7r=o(`Note:
Loading a model from its configuration file does `),G5e=a("strong"),r7r=o("not"),t7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),a7r=o("from_pretrained()"),n7r=o(" to load the model weights."),s7r=l(),F(QC.$$.fragment),l7r=l(),Fo=a("div"),F(Ck.$$.fragment),i7r=l(),O5e=a("p"),d7r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),m7r=l(),_n=a("p"),c7r=o("The model class to instantiate is selected based on the "),V5e=a("code"),f7r=o("model_type"),g7r=o(` property of the config object (either
passed as an argument or loaded from `),X5e=a("code"),h7r=o("pretrained_model_name_or_path"),u7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=a("code"),p7r=o("pretrained_model_name_or_path"),_7r=o(":"),b7r=l(),ft=a("ul"),WC=a("li"),Q5e=a("strong"),v7r=o("data2vec-audio"),F7r=o(" \u2014 "),yZ=a("a"),T7r=o("Data2VecAudioForXVector"),M7r=o(" (Data2VecAudio model)"),E7r=l(),UC=a("li"),W5e=a("strong"),C7r=o("unispeech-sat"),w7r=o(" \u2014 "),xZ=a("a"),A7r=o("UniSpeechSatForXVector"),L7r=o(" (UniSpeechSat model)"),y7r=l(),HC=a("li"),U5e=a("strong"),x7r=o("wav2vec2"),$7r=o(" \u2014 "),$Z=a("a"),k7r=o("Wav2Vec2ForXVector"),S7r=o(" (Wav2Vec2 model)"),R7r=l(),JC=a("li"),H5e=a("strong"),P7r=o("wav2vec2-conformer"),B7r=o(" \u2014 "),kZ=a("a"),I7r=o("Wav2Vec2ConformerForXVector"),N7r=o(" (Wav2Vec2-Conformer model)"),q7r=l(),YC=a("li"),J5e=a("strong"),j7r=o("wavlm"),D7r=o(" \u2014 "),SZ=a("a"),G7r=o("WavLMForXVector"),O7r=o(" (WavLM model)"),V7r=l(),KC=a("p"),X7r=o("The model is set in evaluation mode by default using "),Y5e=a("code"),z7r=o("model.eval()"),Q7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K5e=a("code"),W7r=o("model.train()"),U7r=l(),F(ZC.$$.fragment),zeo=l(),Lm=a("h2"),e3=a("a"),Z5e=a("span"),F(wk.$$.fragment),H7r=l(),e0e=a("span"),J7r=o("AutoModelForMaskedImageModeling"),Qeo=l(),or=a("div"),F(Ak.$$.fragment),Y7r=l(),ym=a("p"),K7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RZ=a("a"),Z7r=o("from_pretrained()"),eLr=o(" class method or the "),PZ=a("a"),oLr=o("from_config()"),rLr=o(` class
method.`),tLr=l(),Lk=a("p"),aLr=o("This class cannot be instantiated directly using "),o0e=a("code"),nLr=o("__init__()"),sLr=o(" (throws an error)."),lLr=l(),jt=a("div"),F(yk.$$.fragment),iLr=l(),r0e=a("p"),dLr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mLr=l(),xm=a("p"),cLr=o(`Note:
Loading a model from its configuration file does `),t0e=a("strong"),fLr=o("not"),gLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=a("a"),hLr=o("from_pretrained()"),uLr=o(" to load the model weights."),pLr=l(),F(o3.$$.fragment),_Lr=l(),To=a("div"),F(xk.$$.fragment),bLr=l(),a0e=a("p"),vLr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),FLr=l(),bn=a("p"),TLr=o("The model class to instantiate is selected based on the "),n0e=a("code"),MLr=o("model_type"),ELr=o(` property of the config object (either
passed as an argument or loaded from `),s0e=a("code"),CLr=o("pretrained_model_name_or_path"),wLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=a("code"),ALr=o("pretrained_model_name_or_path"),LLr=o(":"),yLr=l(),vn=a("ul"),r3=a("li"),i0e=a("strong"),xLr=o("deit"),$Lr=o(" \u2014 "),IZ=a("a"),kLr=o("DeiTForMaskedImageModeling"),SLr=o(" (DeiT model)"),RLr=l(),t3=a("li"),d0e=a("strong"),PLr=o("swin"),BLr=o(" \u2014 "),NZ=a("a"),ILr=o("SwinForMaskedImageModeling"),NLr=o(" (Swin Transformer model)"),qLr=l(),a3=a("li"),m0e=a("strong"),jLr=o("swinv2"),DLr=o(" \u2014 "),qZ=a("a"),GLr=o("Swinv2ForMaskedImageModeling"),OLr=o(" (Swin Transformer V2 model)"),VLr=l(),n3=a("li"),c0e=a("strong"),XLr=o("vit"),zLr=o(" \u2014 "),jZ=a("a"),QLr=o("ViTForMaskedImageModeling"),WLr=o(" (ViT model)"),ULr=l(),s3=a("p"),HLr=o("The model is set in evaluation mode by default using "),f0e=a("code"),JLr=o("model.eval()"),YLr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g0e=a("code"),KLr=o("model.train()"),ZLr=l(),F(l3.$$.fragment),Weo=l(),$m=a("h2"),i3=a("a"),h0e=a("span"),F($k.$$.fragment),eyr=l(),u0e=a("span"),oyr=o("AutoModelForObjectDetection"),Ueo=l(),rr=a("div"),F(kk.$$.fragment),ryr=l(),km=a("p"),tyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DZ=a("a"),ayr=o("from_pretrained()"),nyr=o(" class method or the "),GZ=a("a"),syr=o("from_config()"),lyr=o(` class
method.`),iyr=l(),Sk=a("p"),dyr=o("This class cannot be instantiated directly using "),p0e=a("code"),myr=o("__init__()"),cyr=o(" (throws an error)."),fyr=l(),Dt=a("div"),F(Rk.$$.fragment),gyr=l(),_0e=a("p"),hyr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),uyr=l(),Sm=a("p"),pyr=o(`Note:
Loading a model from its configuration file does `),b0e=a("strong"),_yr=o("not"),byr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),vyr=o("from_pretrained()"),Fyr=o(" to load the model weights."),Tyr=l(),F(d3.$$.fragment),Myr=l(),Mo=a("div"),F(Pk.$$.fragment),Eyr=l(),v0e=a("p"),Cyr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wyr=l(),Fn=a("p"),Ayr=o("The model class to instantiate is selected based on the "),F0e=a("code"),Lyr=o("model_type"),yyr=o(` property of the config object (either
passed as an argument or loaded from `),T0e=a("code"),xyr=o("pretrained_model_name_or_path"),$yr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=a("code"),kyr=o("pretrained_model_name_or_path"),Syr=o(":"),Ryr=l(),Tn=a("ul"),m3=a("li"),E0e=a("strong"),Pyr=o("conditional_detr"),Byr=o(" \u2014 "),VZ=a("a"),Iyr=o("ConditionalDetrForObjectDetection"),Nyr=o(" (Conditional DETR model)"),qyr=l(),c3=a("li"),C0e=a("strong"),jyr=o("deformable_detr"),Dyr=o(" \u2014 "),XZ=a("a"),Gyr=o("DeformableDetrForObjectDetection"),Oyr=o(" (Deformable DETR model)"),Vyr=l(),f3=a("li"),w0e=a("strong"),Xyr=o("detr"),zyr=o(" \u2014 "),zZ=a("a"),Qyr=o("DetrForObjectDetection"),Wyr=o(" (DETR model)"),Uyr=l(),g3=a("li"),A0e=a("strong"),Hyr=o("yolos"),Jyr=o(" \u2014 "),QZ=a("a"),Yyr=o("YolosForObjectDetection"),Kyr=o(" (YOLOS model)"),Zyr=l(),h3=a("p"),e8r=o("The model is set in evaluation mode by default using "),L0e=a("code"),o8r=o("model.eval()"),r8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y0e=a("code"),t8r=o("model.train()"),a8r=l(),F(u3.$$.fragment),Heo=l(),Rm=a("h2"),p3=a("a"),x0e=a("span"),F(Bk.$$.fragment),n8r=l(),$0e=a("span"),s8r=o("AutoModelForImageSegmentation"),Jeo=l(),tr=a("div"),F(Ik.$$.fragment),l8r=l(),Pm=a("p"),i8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WZ=a("a"),d8r=o("from_pretrained()"),m8r=o(" class method or the "),UZ=a("a"),c8r=o("from_config()"),f8r=o(` class
method.`),g8r=l(),Nk=a("p"),h8r=o("This class cannot be instantiated directly using "),k0e=a("code"),u8r=o("__init__()"),p8r=o(" (throws an error)."),_8r=l(),Gt=a("div"),F(qk.$$.fragment),b8r=l(),S0e=a("p"),v8r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),F8r=l(),Bm=a("p"),T8r=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),M8r=o("not"),E8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),C8r=o("from_pretrained()"),w8r=o(" to load the model weights."),A8r=l(),F(_3.$$.fragment),L8r=l(),Eo=a("div"),F(jk.$$.fragment),y8r=l(),P0e=a("p"),x8r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$8r=l(),Mn=a("p"),k8r=o("The model class to instantiate is selected based on the "),B0e=a("code"),S8r=o("model_type"),R8r=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),P8r=o("pretrained_model_name_or_path"),B8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=a("code"),I8r=o("pretrained_model_name_or_path"),N8r=o(":"),q8r=l(),q0e=a("ul"),b3=a("li"),j0e=a("strong"),j8r=o("detr"),D8r=o(" \u2014 "),JZ=a("a"),G8r=o("DetrForSegmentation"),O8r=o(" (DETR model)"),V8r=l(),v3=a("p"),X8r=o("The model is set in evaluation mode by default using "),D0e=a("code"),z8r=o("model.eval()"),Q8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G0e=a("code"),W8r=o("model.train()"),U8r=l(),F(F3.$$.fragment),Yeo=l(),Im=a("h2"),T3=a("a"),O0e=a("span"),F(Dk.$$.fragment),H8r=l(),V0e=a("span"),J8r=o("AutoModelForSemanticSegmentation"),Keo=l(),ar=a("div"),F(Gk.$$.fragment),Y8r=l(),Nm=a("p"),K8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YZ=a("a"),Z8r=o("from_pretrained()"),e9r=o(" class method or the "),KZ=a("a"),o9r=o("from_config()"),r9r=o(` class
method.`),t9r=l(),Ok=a("p"),a9r=o("This class cannot be instantiated directly using "),X0e=a("code"),n9r=o("__init__()"),s9r=o(" (throws an error)."),l9r=l(),Ot=a("div"),F(Vk.$$.fragment),i9r=l(),z0e=a("p"),d9r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),m9r=l(),qm=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),Q0e=a("strong"),f9r=o("not"),g9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),h9r=o("from_pretrained()"),u9r=o(" to load the model weights."),p9r=l(),F(M3.$$.fragment),_9r=l(),Co=a("div"),F(Xk.$$.fragment),b9r=l(),W0e=a("p"),v9r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),F9r=l(),En=a("p"),T9r=o("The model class to instantiate is selected based on the "),U0e=a("code"),M9r=o("model_type"),E9r=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),C9r=o("pretrained_model_name_or_path"),w9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),A9r=o("pretrained_model_name_or_path"),L9r=o(":"),y9r=l(),gt=a("ul"),E3=a("li"),Y0e=a("strong"),x9r=o("beit"),$9r=o(" \u2014 "),eee=a("a"),k9r=o("BeitForSemanticSegmentation"),S9r=o(" (BEiT model)"),R9r=l(),C3=a("li"),K0e=a("strong"),P9r=o("data2vec-vision"),B9r=o(" \u2014 "),oee=a("a"),I9r=o("Data2VecVisionForSemanticSegmentation"),N9r=o(" (Data2VecVision model)"),q9r=l(),w3=a("li"),Z0e=a("strong"),j9r=o("dpt"),D9r=o(" \u2014 "),ree=a("a"),G9r=o("DPTForSemanticSegmentation"),O9r=o(" (DPT model)"),V9r=l(),A3=a("li"),ewe=a("strong"),X9r=o("mobilevit"),z9r=o(" \u2014 "),tee=a("a"),Q9r=o("MobileViTForSemanticSegmentation"),W9r=o(" (MobileViT model)"),U9r=l(),L3=a("li"),owe=a("strong"),H9r=o("segformer"),J9r=o(" \u2014 "),aee=a("a"),Y9r=o("SegformerForSemanticSegmentation"),K9r=o(" (SegFormer model)"),Z9r=l(),y3=a("p"),exr=o("The model is set in evaluation mode by default using "),rwe=a("code"),oxr=o("model.eval()"),rxr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),twe=a("code"),txr=o("model.train()"),axr=l(),F(x3.$$.fragment),Zeo=l(),jm=a("h2"),$3=a("a"),awe=a("span"),F(zk.$$.fragment),nxr=l(),nwe=a("span"),sxr=o("AutoModelForInstanceSegmentation"),eoo=l(),nr=a("div"),F(Qk.$$.fragment),lxr=l(),Dm=a("p"),ixr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nee=a("a"),dxr=o("from_pretrained()"),mxr=o(" class method or the "),see=a("a"),cxr=o("from_config()"),fxr=o(` class
method.`),gxr=l(),Wk=a("p"),hxr=o("This class cannot be instantiated directly using "),swe=a("code"),uxr=o("__init__()"),pxr=o(" (throws an error)."),_xr=l(),Vt=a("div"),F(Uk.$$.fragment),bxr=l(),lwe=a("p"),vxr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Fxr=l(),Gm=a("p"),Txr=o(`Note:
Loading a model from its configuration file does `),iwe=a("strong"),Mxr=o("not"),Exr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=a("a"),Cxr=o("from_pretrained()"),wxr=o(" to load the model weights."),Axr=l(),F(k3.$$.fragment),Lxr=l(),wo=a("div"),F(Hk.$$.fragment),yxr=l(),dwe=a("p"),xxr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$xr=l(),Cn=a("p"),kxr=o("The model class to instantiate is selected based on the "),mwe=a("code"),Sxr=o("model_type"),Rxr=o(` property of the config object (either
passed as an argument or loaded from `),cwe=a("code"),Pxr=o("pretrained_model_name_or_path"),Bxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=a("code"),Ixr=o("pretrained_model_name_or_path"),Nxr=o(":"),qxr=l(),gwe=a("ul"),S3=a("li"),hwe=a("strong"),jxr=o("maskformer"),Dxr=o(" \u2014 "),iee=a("a"),Gxr=o("MaskFormerForInstanceSegmentation"),Oxr=o(" (MaskFormer model)"),Vxr=l(),R3=a("p"),Xxr=o("The model is set in evaluation mode by default using "),uwe=a("code"),zxr=o("model.eval()"),Qxr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pwe=a("code"),Wxr=o("model.train()"),Uxr=l(),F(P3.$$.fragment),ooo=l(),Om=a("h2"),B3=a("a"),_we=a("span"),F(Jk.$$.fragment),Hxr=l(),bwe=a("span"),Jxr=o("TFAutoModel"),roo=l(),sr=a("div"),F(Yk.$$.fragment),Yxr=l(),Vm=a("p"),Kxr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dee=a("a"),Zxr=o("from_pretrained()"),e$r=o(" class method or the "),mee=a("a"),o$r=o("from_config()"),r$r=o(` class
method.`),t$r=l(),Kk=a("p"),a$r=o("This class cannot be instantiated directly using "),vwe=a("code"),n$r=o("__init__()"),s$r=o(" (throws an error)."),l$r=l(),Xt=a("div"),F(Zk.$$.fragment),i$r=l(),Fwe=a("p"),d$r=o("Instantiates one of the base model classes of the library from a configuration."),m$r=l(),Xm=a("p"),c$r=o(`Note:
Loading a model from its configuration file does `),Twe=a("strong"),f$r=o("not"),g$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=a("a"),h$r=o("from_pretrained()"),u$r=o(" to load the model weights."),p$r=l(),F(I3.$$.fragment),_$r=l(),Ir=a("div"),F(eS.$$.fragment),b$r=l(),Mwe=a("p"),v$r=o("Instantiate one of the base model classes of the library from a pretrained model."),F$r=l(),wn=a("p"),T$r=o("The model class to instantiate is selected based on the "),Ewe=a("code"),M$r=o("model_type"),E$r=o(` property of the config object (either
passed as an argument or loaded from `),Cwe=a("code"),C$r=o("pretrained_model_name_or_path"),w$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wwe=a("code"),A$r=o("pretrained_model_name_or_path"),L$r=o(":"),y$r=l(),I=a("ul"),N3=a("li"),Awe=a("strong"),x$r=o("albert"),$$r=o(" \u2014 "),fee=a("a"),k$r=o("TFAlbertModel"),S$r=o(" (ALBERT model)"),R$r=l(),q3=a("li"),Lwe=a("strong"),P$r=o("bart"),B$r=o(" \u2014 "),gee=a("a"),I$r=o("TFBartModel"),N$r=o(" (BART model)"),q$r=l(),j3=a("li"),ywe=a("strong"),j$r=o("bert"),D$r=o(" \u2014 "),hee=a("a"),G$r=o("TFBertModel"),O$r=o(" (BERT model)"),V$r=l(),D3=a("li"),xwe=a("strong"),X$r=o("blenderbot"),z$r=o(" \u2014 "),uee=a("a"),Q$r=o("TFBlenderbotModel"),W$r=o(" (Blenderbot model)"),U$r=l(),G3=a("li"),$we=a("strong"),H$r=o("blenderbot-small"),J$r=o(" \u2014 "),pee=a("a"),Y$r=o("TFBlenderbotSmallModel"),K$r=o(" (BlenderbotSmall model)"),Z$r=l(),O3=a("li"),kwe=a("strong"),ekr=o("camembert"),okr=o(" \u2014 "),_ee=a("a"),rkr=o("TFCamembertModel"),tkr=o(" (CamemBERT model)"),akr=l(),V3=a("li"),Swe=a("strong"),nkr=o("clip"),skr=o(" \u2014 "),bee=a("a"),lkr=o("TFCLIPModel"),ikr=o(" (CLIP model)"),dkr=l(),X3=a("li"),Rwe=a("strong"),mkr=o("convbert"),ckr=o(" \u2014 "),vee=a("a"),fkr=o("TFConvBertModel"),gkr=o(" (ConvBERT model)"),hkr=l(),z3=a("li"),Pwe=a("strong"),ukr=o("convnext"),pkr=o(" \u2014 "),Fee=a("a"),_kr=o("TFConvNextModel"),bkr=o(" (ConvNeXT model)"),vkr=l(),Q3=a("li"),Bwe=a("strong"),Fkr=o("ctrl"),Tkr=o(" \u2014 "),Tee=a("a"),Mkr=o("TFCTRLModel"),Ekr=o(" (CTRL model)"),Ckr=l(),W3=a("li"),Iwe=a("strong"),wkr=o("data2vec-vision"),Akr=o(" \u2014 "),Mee=a("a"),Lkr=o("TFData2VecVisionModel"),ykr=o(" (Data2VecVision model)"),xkr=l(),U3=a("li"),Nwe=a("strong"),$kr=o("deberta"),kkr=o(" \u2014 "),Eee=a("a"),Skr=o("TFDebertaModel"),Rkr=o(" (DeBERTa model)"),Pkr=l(),H3=a("li"),qwe=a("strong"),Bkr=o("deberta-v2"),Ikr=o(" \u2014 "),Cee=a("a"),Nkr=o("TFDebertaV2Model"),qkr=o(" (DeBERTa-v2 model)"),jkr=l(),J3=a("li"),jwe=a("strong"),Dkr=o("deit"),Gkr=o(" \u2014 "),wee=a("a"),Okr=o("TFDeiTModel"),Vkr=o(" (DeiT model)"),Xkr=l(),Y3=a("li"),Dwe=a("strong"),zkr=o("distilbert"),Qkr=o(" \u2014 "),Aee=a("a"),Wkr=o("TFDistilBertModel"),Ukr=o(" (DistilBERT model)"),Hkr=l(),K3=a("li"),Gwe=a("strong"),Jkr=o("dpr"),Ykr=o(" \u2014 "),Lee=a("a"),Kkr=o("TFDPRQuestionEncoder"),Zkr=o(" (DPR model)"),eSr=l(),Z3=a("li"),Owe=a("strong"),oSr=o("electra"),rSr=o(" \u2014 "),yee=a("a"),tSr=o("TFElectraModel"),aSr=o(" (ELECTRA model)"),nSr=l(),e5=a("li"),Vwe=a("strong"),sSr=o("flaubert"),lSr=o(" \u2014 "),xee=a("a"),iSr=o("TFFlaubertModel"),dSr=o(" (FlauBERT model)"),mSr=l(),Fl=a("li"),Xwe=a("strong"),cSr=o("funnel"),fSr=o(" \u2014 "),$ee=a("a"),gSr=o("TFFunnelModel"),hSr=o(" or "),kee=a("a"),uSr=o("TFFunnelBaseModel"),pSr=o(" (Funnel Transformer model)"),_Sr=l(),o5=a("li"),zwe=a("strong"),bSr=o("gpt2"),vSr=o(" \u2014 "),See=a("a"),FSr=o("TFGPT2Model"),TSr=o(" (OpenAI GPT-2 model)"),MSr=l(),r5=a("li"),Qwe=a("strong"),ESr=o("gptj"),CSr=o(" \u2014 "),Ree=a("a"),wSr=o("TFGPTJModel"),ASr=o(" (GPT-J model)"),LSr=l(),t5=a("li"),Wwe=a("strong"),ySr=o("groupvit"),xSr=o(" \u2014 "),Pee=a("a"),$Sr=o("TFGroupViTModel"),kSr=o(" (GroupViT model)"),SSr=l(),a5=a("li"),Uwe=a("strong"),RSr=o("hubert"),PSr=o(" \u2014 "),Bee=a("a"),BSr=o("TFHubertModel"),ISr=o(" (Hubert model)"),NSr=l(),n5=a("li"),Hwe=a("strong"),qSr=o("layoutlm"),jSr=o(" \u2014 "),Iee=a("a"),DSr=o("TFLayoutLMModel"),GSr=o(" (LayoutLM model)"),OSr=l(),s5=a("li"),Jwe=a("strong"),VSr=o("layoutlmv3"),XSr=o(" \u2014 "),Nee=a("a"),zSr=o("TFLayoutLMv3Model"),QSr=o(" (LayoutLMv3 model)"),WSr=l(),l5=a("li"),Ywe=a("strong"),USr=o("led"),HSr=o(" \u2014 "),qee=a("a"),JSr=o("TFLEDModel"),YSr=o(" (LED model)"),KSr=l(),i5=a("li"),Kwe=a("strong"),ZSr=o("longformer"),eRr=o(" \u2014 "),jee=a("a"),oRr=o("TFLongformerModel"),rRr=o(" (Longformer model)"),tRr=l(),d5=a("li"),Zwe=a("strong"),aRr=o("lxmert"),nRr=o(" \u2014 "),Dee=a("a"),sRr=o("TFLxmertModel"),lRr=o(" (LXMERT model)"),iRr=l(),m5=a("li"),eAe=a("strong"),dRr=o("marian"),mRr=o(" \u2014 "),Gee=a("a"),cRr=o("TFMarianModel"),fRr=o(" (Marian model)"),gRr=l(),c5=a("li"),oAe=a("strong"),hRr=o("mbart"),uRr=o(" \u2014 "),Oee=a("a"),pRr=o("TFMBartModel"),_Rr=o(" (mBART model)"),bRr=l(),f5=a("li"),rAe=a("strong"),vRr=o("mobilebert"),FRr=o(" \u2014 "),Vee=a("a"),TRr=o("TFMobileBertModel"),MRr=o(" (MobileBERT model)"),ERr=l(),g5=a("li"),tAe=a("strong"),CRr=o("mobilevit"),wRr=o(" \u2014 "),Xee=a("a"),ARr=o("TFMobileViTModel"),LRr=o(" (MobileViT model)"),yRr=l(),h5=a("li"),aAe=a("strong"),xRr=o("mpnet"),$Rr=o(" \u2014 "),zee=a("a"),kRr=o("TFMPNetModel"),SRr=o(" (MPNet model)"),RRr=l(),u5=a("li"),nAe=a("strong"),PRr=o("mt5"),BRr=o(" \u2014 "),Qee=a("a"),IRr=o("TFMT5Model"),NRr=o(" (MT5 model)"),qRr=l(),p5=a("li"),sAe=a("strong"),jRr=o("openai-gpt"),DRr=o(" \u2014 "),Wee=a("a"),GRr=o("TFOpenAIGPTModel"),ORr=o(" (OpenAI GPT model)"),VRr=l(),_5=a("li"),lAe=a("strong"),XRr=o("opt"),zRr=o(" \u2014 "),Uee=a("a"),QRr=o("TFOPTModel"),WRr=o(" (OPT model)"),URr=l(),b5=a("li"),iAe=a("strong"),HRr=o("pegasus"),JRr=o(" \u2014 "),Hee=a("a"),YRr=o("TFPegasusModel"),KRr=o(" (Pegasus model)"),ZRr=l(),v5=a("li"),dAe=a("strong"),ePr=o("regnet"),oPr=o(" \u2014 "),Jee=a("a"),rPr=o("TFRegNetModel"),tPr=o(" (RegNet model)"),aPr=l(),F5=a("li"),mAe=a("strong"),nPr=o("rembert"),sPr=o(" \u2014 "),Yee=a("a"),lPr=o("TFRemBertModel"),iPr=o(" (RemBERT model)"),dPr=l(),T5=a("li"),cAe=a("strong"),mPr=o("resnet"),cPr=o(" \u2014 "),Kee=a("a"),fPr=o("TFResNetModel"),gPr=o(" (ResNet model)"),hPr=l(),M5=a("li"),fAe=a("strong"),uPr=o("roberta"),pPr=o(" \u2014 "),Zee=a("a"),_Pr=o("TFRobertaModel"),bPr=o(" (RoBERTa model)"),vPr=l(),E5=a("li"),gAe=a("strong"),FPr=o("roformer"),TPr=o(" \u2014 "),eoe=a("a"),MPr=o("TFRoFormerModel"),EPr=o(" (RoFormer model)"),CPr=l(),C5=a("li"),hAe=a("strong"),wPr=o("segformer"),APr=o(" \u2014 "),ooe=a("a"),LPr=o("TFSegformerModel"),yPr=o(" (SegFormer model)"),xPr=l(),w5=a("li"),uAe=a("strong"),$Pr=o("speech_to_text"),kPr=o(" \u2014 "),roe=a("a"),SPr=o("TFSpeech2TextModel"),RPr=o(" (Speech2Text model)"),PPr=l(),A5=a("li"),pAe=a("strong"),BPr=o("swin"),IPr=o(" \u2014 "),toe=a("a"),NPr=o("TFSwinModel"),qPr=o(" (Swin Transformer model)"),jPr=l(),L5=a("li"),_Ae=a("strong"),DPr=o("t5"),GPr=o(" \u2014 "),aoe=a("a"),OPr=o("TFT5Model"),VPr=o(" (T5 model)"),XPr=l(),y5=a("li"),bAe=a("strong"),zPr=o("tapas"),QPr=o(" \u2014 "),noe=a("a"),WPr=o("TFTapasModel"),UPr=o(" (TAPAS model)"),HPr=l(),x5=a("li"),vAe=a("strong"),JPr=o("transfo-xl"),YPr=o(" \u2014 "),soe=a("a"),KPr=o("TFTransfoXLModel"),ZPr=o(" (Transformer-XL model)"),eBr=l(),$5=a("li"),FAe=a("strong"),oBr=o("vit"),rBr=o(" \u2014 "),loe=a("a"),tBr=o("TFViTModel"),aBr=o(" (ViT model)"),nBr=l(),k5=a("li"),TAe=a("strong"),sBr=o("vit_mae"),lBr=o(" \u2014 "),ioe=a("a"),iBr=o("TFViTMAEModel"),dBr=o(" (ViTMAE model)"),mBr=l(),S5=a("li"),MAe=a("strong"),cBr=o("wav2vec2"),fBr=o(" \u2014 "),doe=a("a"),gBr=o("TFWav2Vec2Model"),hBr=o(" (Wav2Vec2 model)"),uBr=l(),R5=a("li"),EAe=a("strong"),pBr=o("xglm"),_Br=o(" \u2014 "),moe=a("a"),bBr=o("TFXGLMModel"),vBr=o(" (XGLM model)"),FBr=l(),P5=a("li"),CAe=a("strong"),TBr=o("xlm"),MBr=o(" \u2014 "),coe=a("a"),EBr=o("TFXLMModel"),CBr=o(" (XLM model)"),wBr=l(),B5=a("li"),wAe=a("strong"),ABr=o("xlm-roberta"),LBr=o(" \u2014 "),foe=a("a"),yBr=o("TFXLMRobertaModel"),xBr=o(" (XLM-RoBERTa model)"),$Br=l(),I5=a("li"),AAe=a("strong"),kBr=o("xlnet"),SBr=o(" \u2014 "),goe=a("a"),RBr=o("TFXLNetModel"),PBr=o(" (XLNet model)"),BBr=l(),F(N5.$$.fragment),too=l(),zm=a("h2"),q5=a("a"),LAe=a("span"),F(oS.$$.fragment),IBr=l(),yAe=a("span"),NBr=o("TFAutoModelForPreTraining"),aoo=l(),lr=a("div"),F(rS.$$.fragment),qBr=l(),Qm=a("p"),jBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hoe=a("a"),DBr=o("from_pretrained()"),GBr=o(" class method or the "),uoe=a("a"),OBr=o("from_config()"),VBr=o(` class
method.`),XBr=l(),tS=a("p"),zBr=o("This class cannot be instantiated directly using "),xAe=a("code"),QBr=o("__init__()"),WBr=o(" (throws an error)."),UBr=l(),zt=a("div"),F(aS.$$.fragment),HBr=l(),$Ae=a("p"),JBr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YBr=l(),Wm=a("p"),KBr=o(`Note:
Loading a model from its configuration file does `),kAe=a("strong"),ZBr=o("not"),eIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=a("a"),oIr=o("from_pretrained()"),rIr=o(" to load the model weights."),tIr=l(),F(j5.$$.fragment),aIr=l(),Nr=a("div"),F(nS.$$.fragment),nIr=l(),SAe=a("p"),sIr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lIr=l(),An=a("p"),iIr=o("The model class to instantiate is selected based on the "),RAe=a("code"),dIr=o("model_type"),mIr=o(` property of the config object (either
passed as an argument or loaded from `),PAe=a("code"),cIr=o("pretrained_model_name_or_path"),fIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BAe=a("code"),gIr=o("pretrained_model_name_or_path"),hIr=o(":"),uIr=l(),se=a("ul"),D5=a("li"),IAe=a("strong"),pIr=o("albert"),_Ir=o(" \u2014 "),_oe=a("a"),bIr=o("TFAlbertForPreTraining"),vIr=o(" (ALBERT model)"),FIr=l(),G5=a("li"),NAe=a("strong"),TIr=o("bart"),MIr=o(" \u2014 "),boe=a("a"),EIr=o("TFBartForConditionalGeneration"),CIr=o(" (BART model)"),wIr=l(),O5=a("li"),qAe=a("strong"),AIr=o("bert"),LIr=o(" \u2014 "),voe=a("a"),yIr=o("TFBertForPreTraining"),xIr=o(" (BERT model)"),$Ir=l(),V5=a("li"),jAe=a("strong"),kIr=o("camembert"),SIr=o(" \u2014 "),Foe=a("a"),RIr=o("TFCamembertForMaskedLM"),PIr=o(" (CamemBERT model)"),BIr=l(),X5=a("li"),DAe=a("strong"),IIr=o("ctrl"),NIr=o(" \u2014 "),Toe=a("a"),qIr=o("TFCTRLLMHeadModel"),jIr=o(" (CTRL model)"),DIr=l(),z5=a("li"),GAe=a("strong"),GIr=o("distilbert"),OIr=o(" \u2014 "),Moe=a("a"),VIr=o("TFDistilBertForMaskedLM"),XIr=o(" (DistilBERT model)"),zIr=l(),Q5=a("li"),OAe=a("strong"),QIr=o("electra"),WIr=o(" \u2014 "),Eoe=a("a"),UIr=o("TFElectraForPreTraining"),HIr=o(" (ELECTRA model)"),JIr=l(),W5=a("li"),VAe=a("strong"),YIr=o("flaubert"),KIr=o(" \u2014 "),Coe=a("a"),ZIr=o("TFFlaubertWithLMHeadModel"),eNr=o(" (FlauBERT model)"),oNr=l(),U5=a("li"),XAe=a("strong"),rNr=o("funnel"),tNr=o(" \u2014 "),woe=a("a"),aNr=o("TFFunnelForPreTraining"),nNr=o(" (Funnel Transformer model)"),sNr=l(),H5=a("li"),zAe=a("strong"),lNr=o("gpt2"),iNr=o(" \u2014 "),Aoe=a("a"),dNr=o("TFGPT2LMHeadModel"),mNr=o(" (OpenAI GPT-2 model)"),cNr=l(),J5=a("li"),QAe=a("strong"),fNr=o("layoutlm"),gNr=o(" \u2014 "),Loe=a("a"),hNr=o("TFLayoutLMForMaskedLM"),uNr=o(" (LayoutLM model)"),pNr=l(),Y5=a("li"),WAe=a("strong"),_Nr=o("lxmert"),bNr=o(" \u2014 "),yoe=a("a"),vNr=o("TFLxmertForPreTraining"),FNr=o(" (LXMERT model)"),TNr=l(),K5=a("li"),UAe=a("strong"),MNr=o("mobilebert"),ENr=o(" \u2014 "),xoe=a("a"),CNr=o("TFMobileBertForPreTraining"),wNr=o(" (MobileBERT model)"),ANr=l(),Z5=a("li"),HAe=a("strong"),LNr=o("mpnet"),yNr=o(" \u2014 "),$oe=a("a"),xNr=o("TFMPNetForMaskedLM"),$Nr=o(" (MPNet model)"),kNr=l(),e0=a("li"),JAe=a("strong"),SNr=o("openai-gpt"),RNr=o(" \u2014 "),koe=a("a"),PNr=o("TFOpenAIGPTLMHeadModel"),BNr=o(" (OpenAI GPT model)"),INr=l(),o0=a("li"),YAe=a("strong"),NNr=o("roberta"),qNr=o(" \u2014 "),Soe=a("a"),jNr=o("TFRobertaForMaskedLM"),DNr=o(" (RoBERTa model)"),GNr=l(),r0=a("li"),KAe=a("strong"),ONr=o("t5"),VNr=o(" \u2014 "),Roe=a("a"),XNr=o("TFT5ForConditionalGeneration"),zNr=o(" (T5 model)"),QNr=l(),t0=a("li"),ZAe=a("strong"),WNr=o("tapas"),UNr=o(" \u2014 "),Poe=a("a"),HNr=o("TFTapasForMaskedLM"),JNr=o(" (TAPAS model)"),YNr=l(),a0=a("li"),e6e=a("strong"),KNr=o("transfo-xl"),ZNr=o(" \u2014 "),Boe=a("a"),eqr=o("TFTransfoXLLMHeadModel"),oqr=o(" (Transformer-XL model)"),rqr=l(),n0=a("li"),o6e=a("strong"),tqr=o("vit_mae"),aqr=o(" \u2014 "),Ioe=a("a"),nqr=o("TFViTMAEForPreTraining"),sqr=o(" (ViTMAE model)"),lqr=l(),s0=a("li"),r6e=a("strong"),iqr=o("xlm"),dqr=o(" \u2014 "),Noe=a("a"),mqr=o("TFXLMWithLMHeadModel"),cqr=o(" (XLM model)"),fqr=l(),l0=a("li"),t6e=a("strong"),gqr=o("xlm-roberta"),hqr=o(" \u2014 "),qoe=a("a"),uqr=o("TFXLMRobertaForMaskedLM"),pqr=o(" (XLM-RoBERTa model)"),_qr=l(),i0=a("li"),a6e=a("strong"),bqr=o("xlnet"),vqr=o(" \u2014 "),joe=a("a"),Fqr=o("TFXLNetLMHeadModel"),Tqr=o(" (XLNet model)"),Mqr=l(),F(d0.$$.fragment),noo=l(),Um=a("h2"),m0=a("a"),n6e=a("span"),F(sS.$$.fragment),Eqr=l(),s6e=a("span"),Cqr=o("TFAutoModelForCausalLM"),soo=l(),ir=a("div"),F(lS.$$.fragment),wqr=l(),Hm=a("p"),Aqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Doe=a("a"),Lqr=o("from_pretrained()"),yqr=o(" class method or the "),Goe=a("a"),xqr=o("from_config()"),$qr=o(` class
method.`),kqr=l(),iS=a("p"),Sqr=o("This class cannot be instantiated directly using "),l6e=a("code"),Rqr=o("__init__()"),Pqr=o(" (throws an error)."),Bqr=l(),Qt=a("div"),F(dS.$$.fragment),Iqr=l(),i6e=a("p"),Nqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qqr=l(),Jm=a("p"),jqr=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),Dqr=o("not"),Gqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),Oqr=o("from_pretrained()"),Vqr=o(" to load the model weights."),Xqr=l(),F(c0.$$.fragment),zqr=l(),qr=a("div"),F(mS.$$.fragment),Qqr=l(),m6e=a("p"),Wqr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Uqr=l(),Ln=a("p"),Hqr=o("The model class to instantiate is selected based on the "),c6e=a("code"),Jqr=o("model_type"),Yqr=o(` property of the config object (either
passed as an argument or loaded from `),f6e=a("code"),Kqr=o("pretrained_model_name_or_path"),Zqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),ejr=o("pretrained_model_name_or_path"),ojr=o(":"),rjr=l(),Me=a("ul"),f0=a("li"),h6e=a("strong"),tjr=o("bert"),ajr=o(" \u2014 "),Voe=a("a"),njr=o("TFBertLMHeadModel"),sjr=o(" (BERT model)"),ljr=l(),g0=a("li"),u6e=a("strong"),ijr=o("camembert"),djr=o(" \u2014 "),Xoe=a("a"),mjr=o("TFCamembertForCausalLM"),cjr=o(" (CamemBERT model)"),fjr=l(),h0=a("li"),p6e=a("strong"),gjr=o("ctrl"),hjr=o(" \u2014 "),zoe=a("a"),ujr=o("TFCTRLLMHeadModel"),pjr=o(" (CTRL model)"),_jr=l(),u0=a("li"),_6e=a("strong"),bjr=o("gpt2"),vjr=o(" \u2014 "),Qoe=a("a"),Fjr=o("TFGPT2LMHeadModel"),Tjr=o(" (OpenAI GPT-2 model)"),Mjr=l(),p0=a("li"),b6e=a("strong"),Ejr=o("gptj"),Cjr=o(" \u2014 "),Woe=a("a"),wjr=o("TFGPTJForCausalLM"),Ajr=o(" (GPT-J model)"),Ljr=l(),_0=a("li"),v6e=a("strong"),yjr=o("openai-gpt"),xjr=o(" \u2014 "),Uoe=a("a"),$jr=o("TFOpenAIGPTLMHeadModel"),kjr=o(" (OpenAI GPT model)"),Sjr=l(),b0=a("li"),F6e=a("strong"),Rjr=o("opt"),Pjr=o(" \u2014 "),Hoe=a("a"),Bjr=o("TFOPTForCausalLM"),Ijr=o(" (OPT model)"),Njr=l(),v0=a("li"),T6e=a("strong"),qjr=o("rembert"),jjr=o(" \u2014 "),Joe=a("a"),Djr=o("TFRemBertForCausalLM"),Gjr=o(" (RemBERT model)"),Ojr=l(),F0=a("li"),M6e=a("strong"),Vjr=o("roberta"),Xjr=o(" \u2014 "),Yoe=a("a"),zjr=o("TFRobertaForCausalLM"),Qjr=o(" (RoBERTa model)"),Wjr=l(),T0=a("li"),E6e=a("strong"),Ujr=o("roformer"),Hjr=o(" \u2014 "),Koe=a("a"),Jjr=o("TFRoFormerForCausalLM"),Yjr=o(" (RoFormer model)"),Kjr=l(),M0=a("li"),C6e=a("strong"),Zjr=o("transfo-xl"),eDr=o(" \u2014 "),Zoe=a("a"),oDr=o("TFTransfoXLLMHeadModel"),rDr=o(" (Transformer-XL model)"),tDr=l(),E0=a("li"),w6e=a("strong"),aDr=o("xglm"),nDr=o(" \u2014 "),ere=a("a"),sDr=o("TFXGLMForCausalLM"),lDr=o(" (XGLM model)"),iDr=l(),C0=a("li"),A6e=a("strong"),dDr=o("xlm"),mDr=o(" \u2014 "),ore=a("a"),cDr=o("TFXLMWithLMHeadModel"),fDr=o(" (XLM model)"),gDr=l(),w0=a("li"),L6e=a("strong"),hDr=o("xlnet"),uDr=o(" \u2014 "),rre=a("a"),pDr=o("TFXLNetLMHeadModel"),_Dr=o(" (XLNet model)"),bDr=l(),F(A0.$$.fragment),loo=l(),Ym=a("h2"),L0=a("a"),y6e=a("span"),F(cS.$$.fragment),vDr=l(),x6e=a("span"),FDr=o("TFAutoModelForImageClassification"),ioo=l(),dr=a("div"),F(fS.$$.fragment),TDr=l(),Km=a("p"),MDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tre=a("a"),EDr=o("from_pretrained()"),CDr=o(" class method or the "),are=a("a"),wDr=o("from_config()"),ADr=o(` class
method.`),LDr=l(),gS=a("p"),yDr=o("This class cannot be instantiated directly using "),$6e=a("code"),xDr=o("__init__()"),$Dr=o(" (throws an error)."),kDr=l(),Wt=a("div"),F(hS.$$.fragment),SDr=l(),k6e=a("p"),RDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PDr=l(),Zm=a("p"),BDr=o(`Note:
Loading a model from its configuration file does `),S6e=a("strong"),IDr=o("not"),NDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("a"),qDr=o("from_pretrained()"),jDr=o(" to load the model weights."),DDr=l(),F(y0.$$.fragment),GDr=l(),jr=a("div"),F(uS.$$.fragment),ODr=l(),R6e=a("p"),VDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XDr=l(),yn=a("p"),zDr=o("The model class to instantiate is selected based on the "),P6e=a("code"),QDr=o("model_type"),WDr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),UDr=o("pretrained_model_name_or_path"),HDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=a("code"),JDr=o("pretrained_model_name_or_path"),YDr=o(":"),KDr=l(),Be=a("ul"),x0=a("li"),N6e=a("strong"),ZDr=o("convnext"),eGr=o(" \u2014 "),sre=a("a"),oGr=o("TFConvNextForImageClassification"),rGr=o(" (ConvNeXT model)"),tGr=l(),$0=a("li"),q6e=a("strong"),aGr=o("data2vec-vision"),nGr=o(" \u2014 "),lre=a("a"),sGr=o("TFData2VecVisionForImageClassification"),lGr=o(" (Data2VecVision model)"),iGr=l(),Tl=a("li"),j6e=a("strong"),dGr=o("deit"),mGr=o(" \u2014 "),ire=a("a"),cGr=o("TFDeiTForImageClassification"),fGr=o(" or "),dre=a("a"),gGr=o("TFDeiTForImageClassificationWithTeacher"),hGr=o(" (DeiT model)"),uGr=l(),k0=a("li"),D6e=a("strong"),pGr=o("mobilevit"),_Gr=o(" \u2014 "),mre=a("a"),bGr=o("TFMobileViTForImageClassification"),vGr=o(" (MobileViT model)"),FGr=l(),S0=a("li"),G6e=a("strong"),TGr=o("regnet"),MGr=o(" \u2014 "),cre=a("a"),EGr=o("TFRegNetForImageClassification"),CGr=o(" (RegNet model)"),wGr=l(),R0=a("li"),O6e=a("strong"),AGr=o("resnet"),LGr=o(" \u2014 "),fre=a("a"),yGr=o("TFResNetForImageClassification"),xGr=o(" (ResNet model)"),$Gr=l(),P0=a("li"),V6e=a("strong"),kGr=o("segformer"),SGr=o(" \u2014 "),gre=a("a"),RGr=o("TFSegformerForImageClassification"),PGr=o(" (SegFormer model)"),BGr=l(),B0=a("li"),X6e=a("strong"),IGr=o("swin"),NGr=o(" \u2014 "),hre=a("a"),qGr=o("TFSwinForImageClassification"),jGr=o(" (Swin Transformer model)"),DGr=l(),I0=a("li"),z6e=a("strong"),GGr=o("vit"),OGr=o(" \u2014 "),ure=a("a"),VGr=o("TFViTForImageClassification"),XGr=o(" (ViT model)"),zGr=l(),F(N0.$$.fragment),doo=l(),ec=a("h2"),q0=a("a"),Q6e=a("span"),F(pS.$$.fragment),QGr=l(),W6e=a("span"),WGr=o("TFAutoModelForSemanticSegmentation"),moo=l(),mr=a("div"),F(_S.$$.fragment),UGr=l(),oc=a("p"),HGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pre=a("a"),JGr=o("from_pretrained()"),YGr=o(" class method or the "),_re=a("a"),KGr=o("from_config()"),ZGr=o(` class
method.`),eOr=l(),bS=a("p"),oOr=o("This class cannot be instantiated directly using "),U6e=a("code"),rOr=o("__init__()"),tOr=o(" (throws an error)."),aOr=l(),Ut=a("div"),F(vS.$$.fragment),nOr=l(),H6e=a("p"),sOr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lOr=l(),rc=a("p"),iOr=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),dOr=o("not"),mOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=a("a"),cOr=o("from_pretrained()"),fOr=o(" to load the model weights."),gOr=l(),F(j0.$$.fragment),hOr=l(),Dr=a("div"),F(FS.$$.fragment),uOr=l(),Y6e=a("p"),pOr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_Or=l(),xn=a("p"),bOr=o("The model class to instantiate is selected based on the "),K6e=a("code"),vOr=o("model_type"),FOr=o(` property of the config object (either
passed as an argument or loaded from `),Z6e=a("code"),TOr=o("pretrained_model_name_or_path"),MOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=a("code"),EOr=o("pretrained_model_name_or_path"),COr=o(":"),wOr=l(),tc=a("ul"),D0=a("li"),o7e=a("strong"),AOr=o("data2vec-vision"),LOr=o(" \u2014 "),vre=a("a"),yOr=o("TFData2VecVisionForSemanticSegmentation"),xOr=o(" (Data2VecVision model)"),$Or=l(),G0=a("li"),r7e=a("strong"),kOr=o("mobilevit"),SOr=o(" \u2014 "),Fre=a("a"),ROr=o("TFMobileViTForSemanticSegmentation"),POr=o(" (MobileViT model)"),BOr=l(),O0=a("li"),t7e=a("strong"),IOr=o("segformer"),NOr=o(" \u2014 "),Tre=a("a"),qOr=o("TFSegformerForSemanticSegmentation"),jOr=o(" (SegFormer model)"),DOr=l(),F(V0.$$.fragment),coo=l(),ac=a("h2"),X0=a("a"),a7e=a("span"),F(TS.$$.fragment),GOr=l(),n7e=a("span"),OOr=o("TFAutoModelForMaskedLM"),foo=l(),cr=a("div"),F(MS.$$.fragment),VOr=l(),nc=a("p"),XOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mre=a("a"),zOr=o("from_pretrained()"),QOr=o(" class method or the "),Ere=a("a"),WOr=o("from_config()"),UOr=o(` class
method.`),HOr=l(),ES=a("p"),JOr=o("This class cannot be instantiated directly using "),s7e=a("code"),YOr=o("__init__()"),KOr=o(" (throws an error)."),ZOr=l(),Ht=a("div"),F(CS.$$.fragment),eVr=l(),l7e=a("p"),oVr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rVr=l(),sc=a("p"),tVr=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),aVr=o("not"),nVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("a"),sVr=o("from_pretrained()"),lVr=o(" to load the model weights."),iVr=l(),F(z0.$$.fragment),dVr=l(),Gr=a("div"),F(wS.$$.fragment),mVr=l(),d7e=a("p"),cVr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fVr=l(),$n=a("p"),gVr=o("The model class to instantiate is selected based on the "),m7e=a("code"),hVr=o("model_type"),uVr=o(` property of the config object (either
passed as an argument or loaded from `),c7e=a("code"),pVr=o("pretrained_model_name_or_path"),_Vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),bVr=o("pretrained_model_name_or_path"),vVr=o(":"),FVr=l(),ge=a("ul"),Q0=a("li"),g7e=a("strong"),TVr=o("albert"),MVr=o(" \u2014 "),wre=a("a"),EVr=o("TFAlbertForMaskedLM"),CVr=o(" (ALBERT model)"),wVr=l(),W0=a("li"),h7e=a("strong"),AVr=o("bert"),LVr=o(" \u2014 "),Are=a("a"),yVr=o("TFBertForMaskedLM"),xVr=o(" (BERT model)"),$Vr=l(),U0=a("li"),u7e=a("strong"),kVr=o("camembert"),SVr=o(" \u2014 "),Lre=a("a"),RVr=o("TFCamembertForMaskedLM"),PVr=o(" (CamemBERT model)"),BVr=l(),H0=a("li"),p7e=a("strong"),IVr=o("convbert"),NVr=o(" \u2014 "),yre=a("a"),qVr=o("TFConvBertForMaskedLM"),jVr=o(" (ConvBERT model)"),DVr=l(),J0=a("li"),_7e=a("strong"),GVr=o("deberta"),OVr=o(" \u2014 "),xre=a("a"),VVr=o("TFDebertaForMaskedLM"),XVr=o(" (DeBERTa model)"),zVr=l(),Y0=a("li"),b7e=a("strong"),QVr=o("deberta-v2"),WVr=o(" \u2014 "),$re=a("a"),UVr=o("TFDebertaV2ForMaskedLM"),HVr=o(" (DeBERTa-v2 model)"),JVr=l(),K0=a("li"),v7e=a("strong"),YVr=o("distilbert"),KVr=o(" \u2014 "),kre=a("a"),ZVr=o("TFDistilBertForMaskedLM"),eXr=o(" (DistilBERT model)"),oXr=l(),Z0=a("li"),F7e=a("strong"),rXr=o("electra"),tXr=o(" \u2014 "),Sre=a("a"),aXr=o("TFElectraForMaskedLM"),nXr=o(" (ELECTRA model)"),sXr=l(),ew=a("li"),T7e=a("strong"),lXr=o("flaubert"),iXr=o(" \u2014 "),Rre=a("a"),dXr=o("TFFlaubertWithLMHeadModel"),mXr=o(" (FlauBERT model)"),cXr=l(),ow=a("li"),M7e=a("strong"),fXr=o("funnel"),gXr=o(" \u2014 "),Pre=a("a"),hXr=o("TFFunnelForMaskedLM"),uXr=o(" (Funnel Transformer model)"),pXr=l(),rw=a("li"),E7e=a("strong"),_Xr=o("layoutlm"),bXr=o(" \u2014 "),Bre=a("a"),vXr=o("TFLayoutLMForMaskedLM"),FXr=o(" (LayoutLM model)"),TXr=l(),tw=a("li"),C7e=a("strong"),MXr=o("longformer"),EXr=o(" \u2014 "),Ire=a("a"),CXr=o("TFLongformerForMaskedLM"),wXr=o(" (Longformer model)"),AXr=l(),aw=a("li"),w7e=a("strong"),LXr=o("mobilebert"),yXr=o(" \u2014 "),Nre=a("a"),xXr=o("TFMobileBertForMaskedLM"),$Xr=o(" (MobileBERT model)"),kXr=l(),nw=a("li"),A7e=a("strong"),SXr=o("mpnet"),RXr=o(" \u2014 "),qre=a("a"),PXr=o("TFMPNetForMaskedLM"),BXr=o(" (MPNet model)"),IXr=l(),sw=a("li"),L7e=a("strong"),NXr=o("rembert"),qXr=o(" \u2014 "),jre=a("a"),jXr=o("TFRemBertForMaskedLM"),DXr=o(" (RemBERT model)"),GXr=l(),lw=a("li"),y7e=a("strong"),OXr=o("roberta"),VXr=o(" \u2014 "),Dre=a("a"),XXr=o("TFRobertaForMaskedLM"),zXr=o(" (RoBERTa model)"),QXr=l(),iw=a("li"),x7e=a("strong"),WXr=o("roformer"),UXr=o(" \u2014 "),Gre=a("a"),HXr=o("TFRoFormerForMaskedLM"),JXr=o(" (RoFormer model)"),YXr=l(),dw=a("li"),$7e=a("strong"),KXr=o("tapas"),ZXr=o(" \u2014 "),Ore=a("a"),ezr=o("TFTapasForMaskedLM"),ozr=o(" (TAPAS model)"),rzr=l(),mw=a("li"),k7e=a("strong"),tzr=o("xlm"),azr=o(" \u2014 "),Vre=a("a"),nzr=o("TFXLMWithLMHeadModel"),szr=o(" (XLM model)"),lzr=l(),cw=a("li"),S7e=a("strong"),izr=o("xlm-roberta"),dzr=o(" \u2014 "),Xre=a("a"),mzr=o("TFXLMRobertaForMaskedLM"),czr=o(" (XLM-RoBERTa model)"),fzr=l(),F(fw.$$.fragment),goo=l(),lc=a("h2"),gw=a("a"),R7e=a("span"),F(AS.$$.fragment),gzr=l(),P7e=a("span"),hzr=o("TFAutoModelForSeq2SeqLM"),hoo=l(),fr=a("div"),F(LS.$$.fragment),uzr=l(),ic=a("p"),pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zre=a("a"),_zr=o("from_pretrained()"),bzr=o(" class method or the "),Qre=a("a"),vzr=o("from_config()"),Fzr=o(` class
method.`),Tzr=l(),yS=a("p"),Mzr=o("This class cannot be instantiated directly using "),B7e=a("code"),Ezr=o("__init__()"),Czr=o(" (throws an error)."),wzr=l(),Jt=a("div"),F(xS.$$.fragment),Azr=l(),I7e=a("p"),Lzr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yzr=l(),dc=a("p"),xzr=o(`Note:
Loading a model from its configuration file does `),N7e=a("strong"),$zr=o("not"),kzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=a("a"),Szr=o("from_pretrained()"),Rzr=o(" to load the model weights."),Pzr=l(),F(hw.$$.fragment),Bzr=l(),Or=a("div"),F($S.$$.fragment),Izr=l(),q7e=a("p"),Nzr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qzr=l(),kn=a("p"),jzr=o("The model class to instantiate is selected based on the "),j7e=a("code"),Dzr=o("model_type"),Gzr=o(` property of the config object (either
passed as an argument or loaded from `),D7e=a("code"),Ozr=o("pretrained_model_name_or_path"),Vzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G7e=a("code"),Xzr=o("pretrained_model_name_or_path"),zzr=o(":"),Qzr=l(),ye=a("ul"),uw=a("li"),O7e=a("strong"),Wzr=o("bart"),Uzr=o(" \u2014 "),Ure=a("a"),Hzr=o("TFBartForConditionalGeneration"),Jzr=o(" (BART model)"),Yzr=l(),pw=a("li"),V7e=a("strong"),Kzr=o("blenderbot"),Zzr=o(" \u2014 "),Hre=a("a"),eQr=o("TFBlenderbotForConditionalGeneration"),oQr=o(" (Blenderbot model)"),rQr=l(),_w=a("li"),X7e=a("strong"),tQr=o("blenderbot-small"),aQr=o(" \u2014 "),Jre=a("a"),nQr=o("TFBlenderbotSmallForConditionalGeneration"),sQr=o(" (BlenderbotSmall model)"),lQr=l(),bw=a("li"),z7e=a("strong"),iQr=o("encoder-decoder"),dQr=o(" \u2014 "),Yre=a("a"),mQr=o("TFEncoderDecoderModel"),cQr=o(" (Encoder decoder model)"),fQr=l(),vw=a("li"),Q7e=a("strong"),gQr=o("led"),hQr=o(" \u2014 "),Kre=a("a"),uQr=o("TFLEDForConditionalGeneration"),pQr=o(" (LED model)"),_Qr=l(),Fw=a("li"),W7e=a("strong"),bQr=o("marian"),vQr=o(" \u2014 "),Zre=a("a"),FQr=o("TFMarianMTModel"),TQr=o(" (Marian model)"),MQr=l(),Tw=a("li"),U7e=a("strong"),EQr=o("mbart"),CQr=o(" \u2014 "),ete=a("a"),wQr=o("TFMBartForConditionalGeneration"),AQr=o(" (mBART model)"),LQr=l(),Mw=a("li"),H7e=a("strong"),yQr=o("mt5"),xQr=o(" \u2014 "),ote=a("a"),$Qr=o("TFMT5ForConditionalGeneration"),kQr=o(" (MT5 model)"),SQr=l(),Ew=a("li"),J7e=a("strong"),RQr=o("pegasus"),PQr=o(" \u2014 "),rte=a("a"),BQr=o("TFPegasusForConditionalGeneration"),IQr=o(" (Pegasus model)"),NQr=l(),Cw=a("li"),Y7e=a("strong"),qQr=o("t5"),jQr=o(" \u2014 "),tte=a("a"),DQr=o("TFT5ForConditionalGeneration"),GQr=o(" (T5 model)"),OQr=l(),F(ww.$$.fragment),uoo=l(),mc=a("h2"),Aw=a("a"),K7e=a("span"),F(kS.$$.fragment),VQr=l(),Z7e=a("span"),XQr=o("TFAutoModelForSequenceClassification"),poo=l(),gr=a("div"),F(SS.$$.fragment),zQr=l(),cc=a("p"),QQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ate=a("a"),WQr=o("from_pretrained()"),UQr=o(" class method or the "),nte=a("a"),HQr=o("from_config()"),JQr=o(` class
method.`),YQr=l(),RS=a("p"),KQr=o("This class cannot be instantiated directly using "),eLe=a("code"),ZQr=o("__init__()"),eWr=o(" (throws an error)."),oWr=l(),Yt=a("div"),F(PS.$$.fragment),rWr=l(),oLe=a("p"),tWr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aWr=l(),fc=a("p"),nWr=o(`Note:
Loading a model from its configuration file does `),rLe=a("strong"),sWr=o("not"),lWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=a("a"),iWr=o("from_pretrained()"),dWr=o(" to load the model weights."),mWr=l(),F(Lw.$$.fragment),cWr=l(),Vr=a("div"),F(BS.$$.fragment),fWr=l(),tLe=a("p"),gWr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hWr=l(),Sn=a("p"),uWr=o("The model class to instantiate is selected based on the "),aLe=a("code"),pWr=o("model_type"),_Wr=o(` property of the config object (either
passed as an argument or loaded from `),nLe=a("code"),bWr=o("pretrained_model_name_or_path"),vWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sLe=a("code"),FWr=o("pretrained_model_name_or_path"),TWr=o(":"),MWr=l(),re=a("ul"),yw=a("li"),lLe=a("strong"),EWr=o("albert"),CWr=o(" \u2014 "),lte=a("a"),wWr=o("TFAlbertForSequenceClassification"),AWr=o(" (ALBERT model)"),LWr=l(),xw=a("li"),iLe=a("strong"),yWr=o("bert"),xWr=o(" \u2014 "),ite=a("a"),$Wr=o("TFBertForSequenceClassification"),kWr=o(" (BERT model)"),SWr=l(),$w=a("li"),dLe=a("strong"),RWr=o("camembert"),PWr=o(" \u2014 "),dte=a("a"),BWr=o("TFCamembertForSequenceClassification"),IWr=o(" (CamemBERT model)"),NWr=l(),kw=a("li"),mLe=a("strong"),qWr=o("convbert"),jWr=o(" \u2014 "),mte=a("a"),DWr=o("TFConvBertForSequenceClassification"),GWr=o(" (ConvBERT model)"),OWr=l(),Sw=a("li"),cLe=a("strong"),VWr=o("ctrl"),XWr=o(" \u2014 "),cte=a("a"),zWr=o("TFCTRLForSequenceClassification"),QWr=o(" (CTRL model)"),WWr=l(),Rw=a("li"),fLe=a("strong"),UWr=o("deberta"),HWr=o(" \u2014 "),fte=a("a"),JWr=o("TFDebertaForSequenceClassification"),YWr=o(" (DeBERTa model)"),KWr=l(),Pw=a("li"),gLe=a("strong"),ZWr=o("deberta-v2"),eUr=o(" \u2014 "),gte=a("a"),oUr=o("TFDebertaV2ForSequenceClassification"),rUr=o(" (DeBERTa-v2 model)"),tUr=l(),Bw=a("li"),hLe=a("strong"),aUr=o("distilbert"),nUr=o(" \u2014 "),hte=a("a"),sUr=o("TFDistilBertForSequenceClassification"),lUr=o(" (DistilBERT model)"),iUr=l(),Iw=a("li"),uLe=a("strong"),dUr=o("electra"),mUr=o(" \u2014 "),ute=a("a"),cUr=o("TFElectraForSequenceClassification"),fUr=o(" (ELECTRA model)"),gUr=l(),Nw=a("li"),pLe=a("strong"),hUr=o("flaubert"),uUr=o(" \u2014 "),pte=a("a"),pUr=o("TFFlaubertForSequenceClassification"),_Ur=o(" (FlauBERT model)"),bUr=l(),qw=a("li"),_Le=a("strong"),vUr=o("funnel"),FUr=o(" \u2014 "),_te=a("a"),TUr=o("TFFunnelForSequenceClassification"),MUr=o(" (Funnel Transformer model)"),EUr=l(),jw=a("li"),bLe=a("strong"),CUr=o("gpt2"),wUr=o(" \u2014 "),bte=a("a"),AUr=o("TFGPT2ForSequenceClassification"),LUr=o(" (OpenAI GPT-2 model)"),yUr=l(),Dw=a("li"),vLe=a("strong"),xUr=o("gptj"),$Ur=o(" \u2014 "),vte=a("a"),kUr=o("TFGPTJForSequenceClassification"),SUr=o(" (GPT-J model)"),RUr=l(),Gw=a("li"),FLe=a("strong"),PUr=o("layoutlm"),BUr=o(" \u2014 "),Fte=a("a"),IUr=o("TFLayoutLMForSequenceClassification"),NUr=o(" (LayoutLM model)"),qUr=l(),Ow=a("li"),TLe=a("strong"),jUr=o("layoutlmv3"),DUr=o(" \u2014 "),Tte=a("a"),GUr=o("TFLayoutLMv3ForSequenceClassification"),OUr=o(" (LayoutLMv3 model)"),VUr=l(),Vw=a("li"),MLe=a("strong"),XUr=o("longformer"),zUr=o(" \u2014 "),Mte=a("a"),QUr=o("TFLongformerForSequenceClassification"),WUr=o(" (Longformer model)"),UUr=l(),Xw=a("li"),ELe=a("strong"),HUr=o("mobilebert"),JUr=o(" \u2014 "),Ete=a("a"),YUr=o("TFMobileBertForSequenceClassification"),KUr=o(" (MobileBERT model)"),ZUr=l(),zw=a("li"),CLe=a("strong"),eHr=o("mpnet"),oHr=o(" \u2014 "),Cte=a("a"),rHr=o("TFMPNetForSequenceClassification"),tHr=o(" (MPNet model)"),aHr=l(),Qw=a("li"),wLe=a("strong"),nHr=o("openai-gpt"),sHr=o(" \u2014 "),wte=a("a"),lHr=o("TFOpenAIGPTForSequenceClassification"),iHr=o(" (OpenAI GPT model)"),dHr=l(),Ww=a("li"),ALe=a("strong"),mHr=o("rembert"),cHr=o(" \u2014 "),Ate=a("a"),fHr=o("TFRemBertForSequenceClassification"),gHr=o(" (RemBERT model)"),hHr=l(),Uw=a("li"),LLe=a("strong"),uHr=o("roberta"),pHr=o(" \u2014 "),Lte=a("a"),_Hr=o("TFRobertaForSequenceClassification"),bHr=o(" (RoBERTa model)"),vHr=l(),Hw=a("li"),yLe=a("strong"),FHr=o("roformer"),THr=o(" \u2014 "),yte=a("a"),MHr=o("TFRoFormerForSequenceClassification"),EHr=o(" (RoFormer model)"),CHr=l(),Jw=a("li"),xLe=a("strong"),wHr=o("tapas"),AHr=o(" \u2014 "),xte=a("a"),LHr=o("TFTapasForSequenceClassification"),yHr=o(" (TAPAS model)"),xHr=l(),Yw=a("li"),$Le=a("strong"),$Hr=o("transfo-xl"),kHr=o(" \u2014 "),$te=a("a"),SHr=o("TFTransfoXLForSequenceClassification"),RHr=o(" (Transformer-XL model)"),PHr=l(),Kw=a("li"),kLe=a("strong"),BHr=o("xlm"),IHr=o(" \u2014 "),kte=a("a"),NHr=o("TFXLMForSequenceClassification"),qHr=o(" (XLM model)"),jHr=l(),Zw=a("li"),SLe=a("strong"),DHr=o("xlm-roberta"),GHr=o(" \u2014 "),Ste=a("a"),OHr=o("TFXLMRobertaForSequenceClassification"),VHr=o(" (XLM-RoBERTa model)"),XHr=l(),eA=a("li"),RLe=a("strong"),zHr=o("xlnet"),QHr=o(" \u2014 "),Rte=a("a"),WHr=o("TFXLNetForSequenceClassification"),UHr=o(" (XLNet model)"),HHr=l(),F(oA.$$.fragment),_oo=l(),gc=a("h2"),rA=a("a"),PLe=a("span"),F(IS.$$.fragment),JHr=l(),BLe=a("span"),YHr=o("TFAutoModelForMultipleChoice"),boo=l(),hr=a("div"),F(NS.$$.fragment),KHr=l(),hc=a("p"),ZHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pte=a("a"),eJr=o("from_pretrained()"),oJr=o(" class method or the "),Bte=a("a"),rJr=o("from_config()"),tJr=o(` class
method.`),aJr=l(),qS=a("p"),nJr=o("This class cannot be instantiated directly using "),ILe=a("code"),sJr=o("__init__()"),lJr=o(" (throws an error)."),iJr=l(),Kt=a("div"),F(jS.$$.fragment),dJr=l(),NLe=a("p"),mJr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cJr=l(),uc=a("p"),fJr=o(`Note:
Loading a model from its configuration file does `),qLe=a("strong"),gJr=o("not"),hJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ite=a("a"),uJr=o("from_pretrained()"),pJr=o(" to load the model weights."),_Jr=l(),F(tA.$$.fragment),bJr=l(),Xr=a("div"),F(DS.$$.fragment),vJr=l(),jLe=a("p"),FJr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TJr=l(),Rn=a("p"),MJr=o("The model class to instantiate is selected based on the "),DLe=a("code"),EJr=o("model_type"),CJr=o(` property of the config object (either
passed as an argument or loaded from `),GLe=a("code"),wJr=o("pretrained_model_name_or_path"),AJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OLe=a("code"),LJr=o("pretrained_model_name_or_path"),yJr=o(":"),xJr=l(),ve=a("ul"),aA=a("li"),VLe=a("strong"),$Jr=o("albert"),kJr=o(" \u2014 "),Nte=a("a"),SJr=o("TFAlbertForMultipleChoice"),RJr=o(" (ALBERT model)"),PJr=l(),nA=a("li"),XLe=a("strong"),BJr=o("bert"),IJr=o(" \u2014 "),qte=a("a"),NJr=o("TFBertForMultipleChoice"),qJr=o(" (BERT model)"),jJr=l(),sA=a("li"),zLe=a("strong"),DJr=o("camembert"),GJr=o(" \u2014 "),jte=a("a"),OJr=o("TFCamembertForMultipleChoice"),VJr=o(" (CamemBERT model)"),XJr=l(),lA=a("li"),QLe=a("strong"),zJr=o("convbert"),QJr=o(" \u2014 "),Dte=a("a"),WJr=o("TFConvBertForMultipleChoice"),UJr=o(" (ConvBERT model)"),HJr=l(),iA=a("li"),WLe=a("strong"),JJr=o("distilbert"),YJr=o(" \u2014 "),Gte=a("a"),KJr=o("TFDistilBertForMultipleChoice"),ZJr=o(" (DistilBERT model)"),eYr=l(),dA=a("li"),ULe=a("strong"),oYr=o("electra"),rYr=o(" \u2014 "),Ote=a("a"),tYr=o("TFElectraForMultipleChoice"),aYr=o(" (ELECTRA model)"),nYr=l(),mA=a("li"),HLe=a("strong"),sYr=o("flaubert"),lYr=o(" \u2014 "),Vte=a("a"),iYr=o("TFFlaubertForMultipleChoice"),dYr=o(" (FlauBERT model)"),mYr=l(),cA=a("li"),JLe=a("strong"),cYr=o("funnel"),fYr=o(" \u2014 "),Xte=a("a"),gYr=o("TFFunnelForMultipleChoice"),hYr=o(" (Funnel Transformer model)"),uYr=l(),fA=a("li"),YLe=a("strong"),pYr=o("longformer"),_Yr=o(" \u2014 "),zte=a("a"),bYr=o("TFLongformerForMultipleChoice"),vYr=o(" (Longformer model)"),FYr=l(),gA=a("li"),KLe=a("strong"),TYr=o("mobilebert"),MYr=o(" \u2014 "),Qte=a("a"),EYr=o("TFMobileBertForMultipleChoice"),CYr=o(" (MobileBERT model)"),wYr=l(),hA=a("li"),ZLe=a("strong"),AYr=o("mpnet"),LYr=o(" \u2014 "),Wte=a("a"),yYr=o("TFMPNetForMultipleChoice"),xYr=o(" (MPNet model)"),$Yr=l(),uA=a("li"),eye=a("strong"),kYr=o("rembert"),SYr=o(" \u2014 "),Ute=a("a"),RYr=o("TFRemBertForMultipleChoice"),PYr=o(" (RemBERT model)"),BYr=l(),pA=a("li"),oye=a("strong"),IYr=o("roberta"),NYr=o(" \u2014 "),Hte=a("a"),qYr=o("TFRobertaForMultipleChoice"),jYr=o(" (RoBERTa model)"),DYr=l(),_A=a("li"),rye=a("strong"),GYr=o("roformer"),OYr=o(" \u2014 "),Jte=a("a"),VYr=o("TFRoFormerForMultipleChoice"),XYr=o(" (RoFormer model)"),zYr=l(),bA=a("li"),tye=a("strong"),QYr=o("xlm"),WYr=o(" \u2014 "),Yte=a("a"),UYr=o("TFXLMForMultipleChoice"),HYr=o(" (XLM model)"),JYr=l(),vA=a("li"),aye=a("strong"),YYr=o("xlm-roberta"),KYr=o(" \u2014 "),Kte=a("a"),ZYr=o("TFXLMRobertaForMultipleChoice"),eKr=o(" (XLM-RoBERTa model)"),oKr=l(),FA=a("li"),nye=a("strong"),rKr=o("xlnet"),tKr=o(" \u2014 "),Zte=a("a"),aKr=o("TFXLNetForMultipleChoice"),nKr=o(" (XLNet model)"),sKr=l(),F(TA.$$.fragment),voo=l(),pc=a("h2"),MA=a("a"),sye=a("span"),F(GS.$$.fragment),lKr=l(),lye=a("span"),iKr=o("TFAutoModelForNextSentencePrediction"),Foo=l(),ur=a("div"),F(OS.$$.fragment),dKr=l(),_c=a("p"),mKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eae=a("a"),cKr=o("from_pretrained()"),fKr=o(" class method or the "),oae=a("a"),gKr=o("from_config()"),hKr=o(` class
method.`),uKr=l(),VS=a("p"),pKr=o("This class cannot be instantiated directly using "),iye=a("code"),_Kr=o("__init__()"),bKr=o(" (throws an error)."),vKr=l(),Zt=a("div"),F(XS.$$.fragment),FKr=l(),dye=a("p"),TKr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MKr=l(),bc=a("p"),EKr=o(`Note:
Loading a model from its configuration file does `),mye=a("strong"),CKr=o("not"),wKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rae=a("a"),AKr=o("from_pretrained()"),LKr=o(" to load the model weights."),yKr=l(),F(EA.$$.fragment),xKr=l(),zr=a("div"),F(zS.$$.fragment),$Kr=l(),cye=a("p"),kKr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SKr=l(),Pn=a("p"),RKr=o("The model class to instantiate is selected based on the "),fye=a("code"),PKr=o("model_type"),BKr=o(` property of the config object (either
passed as an argument or loaded from `),gye=a("code"),IKr=o("pretrained_model_name_or_path"),NKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hye=a("code"),qKr=o("pretrained_model_name_or_path"),jKr=o(":"),DKr=l(),QS=a("ul"),CA=a("li"),uye=a("strong"),GKr=o("bert"),OKr=o(" \u2014 "),tae=a("a"),VKr=o("TFBertForNextSentencePrediction"),XKr=o(" (BERT model)"),zKr=l(),wA=a("li"),pye=a("strong"),QKr=o("mobilebert"),WKr=o(" \u2014 "),aae=a("a"),UKr=o("TFMobileBertForNextSentencePrediction"),HKr=o(" (MobileBERT model)"),JKr=l(),F(AA.$$.fragment),Too=l(),vc=a("h2"),LA=a("a"),_ye=a("span"),F(WS.$$.fragment),YKr=l(),bye=a("span"),KKr=o("TFAutoModelForTableQuestionAnswering"),Moo=l(),pr=a("div"),F(US.$$.fragment),ZKr=l(),Fc=a("p"),eZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nae=a("a"),oZr=o("from_pretrained()"),rZr=o(" class method or the "),sae=a("a"),tZr=o("from_config()"),aZr=o(` class
method.`),nZr=l(),HS=a("p"),sZr=o("This class cannot be instantiated directly using "),vye=a("code"),lZr=o("__init__()"),iZr=o(" (throws an error)."),dZr=l(),ea=a("div"),F(JS.$$.fragment),mZr=l(),Fye=a("p"),cZr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fZr=l(),Tc=a("p"),gZr=o(`Note:
Loading a model from its configuration file does `),Tye=a("strong"),hZr=o("not"),uZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lae=a("a"),pZr=o("from_pretrained()"),_Zr=o(" to load the model weights."),bZr=l(),F(yA.$$.fragment),vZr=l(),Qr=a("div"),F(YS.$$.fragment),FZr=l(),Mye=a("p"),TZr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MZr=l(),Bn=a("p"),EZr=o("The model class to instantiate is selected based on the "),Eye=a("code"),CZr=o("model_type"),wZr=o(` property of the config object (either
passed as an argument or loaded from `),Cye=a("code"),AZr=o("pretrained_model_name_or_path"),LZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wye=a("code"),yZr=o("pretrained_model_name_or_path"),xZr=o(":"),$Zr=l(),Aye=a("ul"),xA=a("li"),Lye=a("strong"),kZr=o("tapas"),SZr=o(" \u2014 "),iae=a("a"),RZr=o("TFTapasForQuestionAnswering"),PZr=o(" (TAPAS model)"),BZr=l(),F($A.$$.fragment),Eoo=l(),Mc=a("h2"),kA=a("a"),yye=a("span"),F(KS.$$.fragment),IZr=l(),xye=a("span"),NZr=o("TFAutoModelForDocumentQuestionAnswering"),Coo=l(),_r=a("div"),F(ZS.$$.fragment),qZr=l(),Ec=a("p"),jZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),dae=a("a"),DZr=o("from_pretrained()"),GZr=o(" class method or the "),mae=a("a"),OZr=o("from_config()"),VZr=o(` class
method.`),XZr=l(),eR=a("p"),zZr=o("This class cannot be instantiated directly using "),$ye=a("code"),QZr=o("__init__()"),WZr=o(" (throws an error)."),UZr=l(),oa=a("div"),F(oR.$$.fragment),HZr=l(),kye=a("p"),JZr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),YZr=l(),Cc=a("p"),KZr=o(`Note:
Loading a model from its configuration file does `),Sye=a("strong"),ZZr=o("not"),eet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=a("a"),oet=o("from_pretrained()"),ret=o(" to load the model weights."),tet=l(),F(SA.$$.fragment),aet=l(),Wr=a("div"),F(rR.$$.fragment),net=l(),Rye=a("p"),set=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),iet=l(),In=a("p"),det=o("The model class to instantiate is selected based on the "),Pye=a("code"),met=o("model_type"),cet=o(` property of the config object (either
passed as an argument or loaded from `),Bye=a("code"),fet=o("pretrained_model_name_or_path"),get=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iye=a("code"),het=o("pretrained_model_name_or_path"),uet=o(":"),pet=l(),Nye=a("ul"),RA=a("li"),qye=a("strong"),_et=o("layoutlm"),bet=o(" \u2014 "),fae=a("a"),vet=o("TFLayoutLMForQuestionAnswering"),Fet=o(" (LayoutLM model)"),Tet=l(),F(PA.$$.fragment),woo=l(),wc=a("h2"),BA=a("a"),jye=a("span"),F(tR.$$.fragment),Met=l(),Dye=a("span"),Eet=o("TFAutoModelForTokenClassification"),Aoo=l(),br=a("div"),F(aR.$$.fragment),Cet=l(),Ac=a("p"),wet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gae=a("a"),Aet=o("from_pretrained()"),Let=o(" class method or the "),hae=a("a"),yet=o("from_config()"),xet=o(` class
method.`),$et=l(),nR=a("p"),ket=o("This class cannot be instantiated directly using "),Gye=a("code"),Set=o("__init__()"),Ret=o(" (throws an error)."),Pet=l(),ra=a("div"),F(sR.$$.fragment),Bet=l(),Oye=a("p"),Iet=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Net=l(),Lc=a("p"),qet=o(`Note:
Loading a model from its configuration file does `),Vye=a("strong"),jet=o("not"),Det=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=a("a"),Get=o("from_pretrained()"),Oet=o(" to load the model weights."),Vet=l(),F(IA.$$.fragment),Xet=l(),Ur=a("div"),F(lR.$$.fragment),zet=l(),Xye=a("p"),Qet=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wet=l(),Nn=a("p"),Uet=o("The model class to instantiate is selected based on the "),zye=a("code"),Het=o("model_type"),Jet=o(` property of the config object (either
passed as an argument or loaded from `),Qye=a("code"),Yet=o("pretrained_model_name_or_path"),Ket=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wye=a("code"),Zet=o("pretrained_model_name_or_path"),eot=o(":"),oot=l(),de=a("ul"),NA=a("li"),Uye=a("strong"),rot=o("albert"),tot=o(" \u2014 "),pae=a("a"),aot=o("TFAlbertForTokenClassification"),not=o(" (ALBERT model)"),sot=l(),qA=a("li"),Hye=a("strong"),lot=o("bert"),iot=o(" \u2014 "),_ae=a("a"),dot=o("TFBertForTokenClassification"),mot=o(" (BERT model)"),cot=l(),jA=a("li"),Jye=a("strong"),fot=o("camembert"),got=o(" \u2014 "),bae=a("a"),hot=o("TFCamembertForTokenClassification"),uot=o(" (CamemBERT model)"),pot=l(),DA=a("li"),Yye=a("strong"),_ot=o("convbert"),bot=o(" \u2014 "),vae=a("a"),vot=o("TFConvBertForTokenClassification"),Fot=o(" (ConvBERT model)"),Tot=l(),GA=a("li"),Kye=a("strong"),Mot=o("deberta"),Eot=o(" \u2014 "),Fae=a("a"),Cot=o("TFDebertaForTokenClassification"),wot=o(" (DeBERTa model)"),Aot=l(),OA=a("li"),Zye=a("strong"),Lot=o("deberta-v2"),yot=o(" \u2014 "),Tae=a("a"),xot=o("TFDebertaV2ForTokenClassification"),$ot=o(" (DeBERTa-v2 model)"),kot=l(),VA=a("li"),e8e=a("strong"),Sot=o("distilbert"),Rot=o(" \u2014 "),Mae=a("a"),Pot=o("TFDistilBertForTokenClassification"),Bot=o(" (DistilBERT model)"),Iot=l(),XA=a("li"),o8e=a("strong"),Not=o("electra"),qot=o(" \u2014 "),Eae=a("a"),jot=o("TFElectraForTokenClassification"),Dot=o(" (ELECTRA model)"),Got=l(),zA=a("li"),r8e=a("strong"),Oot=o("flaubert"),Vot=o(" \u2014 "),Cae=a("a"),Xot=o("TFFlaubertForTokenClassification"),zot=o(" (FlauBERT model)"),Qot=l(),QA=a("li"),t8e=a("strong"),Wot=o("funnel"),Uot=o(" \u2014 "),wae=a("a"),Hot=o("TFFunnelForTokenClassification"),Jot=o(" (Funnel Transformer model)"),Yot=l(),WA=a("li"),a8e=a("strong"),Kot=o("layoutlm"),Zot=o(" \u2014 "),Aae=a("a"),ert=o("TFLayoutLMForTokenClassification"),ort=o(" (LayoutLM model)"),rrt=l(),UA=a("li"),n8e=a("strong"),trt=o("layoutlmv3"),art=o(" \u2014 "),Lae=a("a"),nrt=o("TFLayoutLMv3ForTokenClassification"),srt=o(" (LayoutLMv3 model)"),lrt=l(),HA=a("li"),s8e=a("strong"),irt=o("longformer"),drt=o(" \u2014 "),yae=a("a"),mrt=o("TFLongformerForTokenClassification"),crt=o(" (Longformer model)"),frt=l(),JA=a("li"),l8e=a("strong"),grt=o("mobilebert"),hrt=o(" \u2014 "),xae=a("a"),urt=o("TFMobileBertForTokenClassification"),prt=o(" (MobileBERT model)"),_rt=l(),YA=a("li"),i8e=a("strong"),brt=o("mpnet"),vrt=o(" \u2014 "),$ae=a("a"),Frt=o("TFMPNetForTokenClassification"),Trt=o(" (MPNet model)"),Mrt=l(),KA=a("li"),d8e=a("strong"),Ert=o("rembert"),Crt=o(" \u2014 "),kae=a("a"),wrt=o("TFRemBertForTokenClassification"),Art=o(" (RemBERT model)"),Lrt=l(),ZA=a("li"),m8e=a("strong"),yrt=o("roberta"),xrt=o(" \u2014 "),Sae=a("a"),$rt=o("TFRobertaForTokenClassification"),krt=o(" (RoBERTa model)"),Srt=l(),e6=a("li"),c8e=a("strong"),Rrt=o("roformer"),Prt=o(" \u2014 "),Rae=a("a"),Brt=o("TFRoFormerForTokenClassification"),Irt=o(" (RoFormer model)"),Nrt=l(),o6=a("li"),f8e=a("strong"),qrt=o("xlm"),jrt=o(" \u2014 "),Pae=a("a"),Drt=o("TFXLMForTokenClassification"),Grt=o(" (XLM model)"),Ort=l(),r6=a("li"),g8e=a("strong"),Vrt=o("xlm-roberta"),Xrt=o(" \u2014 "),Bae=a("a"),zrt=o("TFXLMRobertaForTokenClassification"),Qrt=o(" (XLM-RoBERTa model)"),Wrt=l(),t6=a("li"),h8e=a("strong"),Urt=o("xlnet"),Hrt=o(" \u2014 "),Iae=a("a"),Jrt=o("TFXLNetForTokenClassification"),Yrt=o(" (XLNet model)"),Krt=l(),F(a6.$$.fragment),Loo=l(),yc=a("h2"),n6=a("a"),u8e=a("span"),F(iR.$$.fragment),Zrt=l(),p8e=a("span"),ett=o("TFAutoModelForQuestionAnswering"),yoo=l(),vr=a("div"),F(dR.$$.fragment),ott=l(),xc=a("p"),rtt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nae=a("a"),ttt=o("from_pretrained()"),att=o(" class method or the "),qae=a("a"),ntt=o("from_config()"),stt=o(` class
method.`),ltt=l(),mR=a("p"),itt=o("This class cannot be instantiated directly using "),_8e=a("code"),dtt=o("__init__()"),mtt=o(" (throws an error)."),ctt=l(),ta=a("div"),F(cR.$$.fragment),ftt=l(),b8e=a("p"),gtt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),htt=l(),$c=a("p"),utt=o(`Note:
Loading a model from its configuration file does `),v8e=a("strong"),ptt=o("not"),_tt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=a("a"),btt=o("from_pretrained()"),vtt=o(" to load the model weights."),Ftt=l(),F(s6.$$.fragment),Ttt=l(),Hr=a("div"),F(fR.$$.fragment),Mtt=l(),F8e=a("p"),Ett=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ctt=l(),qn=a("p"),wtt=o("The model class to instantiate is selected based on the "),T8e=a("code"),Att=o("model_type"),Ltt=o(` property of the config object (either
passed as an argument or loaded from `),M8e=a("code"),ytt=o("pretrained_model_name_or_path"),xtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E8e=a("code"),$tt=o("pretrained_model_name_or_path"),ktt=o(":"),Stt=l(),me=a("ul"),l6=a("li"),C8e=a("strong"),Rtt=o("albert"),Ptt=o(" \u2014 "),Dae=a("a"),Btt=o("TFAlbertForQuestionAnswering"),Itt=o(" (ALBERT model)"),Ntt=l(),i6=a("li"),w8e=a("strong"),qtt=o("bert"),jtt=o(" \u2014 "),Gae=a("a"),Dtt=o("TFBertForQuestionAnswering"),Gtt=o(" (BERT model)"),Ott=l(),d6=a("li"),A8e=a("strong"),Vtt=o("camembert"),Xtt=o(" \u2014 "),Oae=a("a"),ztt=o("TFCamembertForQuestionAnswering"),Qtt=o(" (CamemBERT model)"),Wtt=l(),m6=a("li"),L8e=a("strong"),Utt=o("convbert"),Htt=o(" \u2014 "),Vae=a("a"),Jtt=o("TFConvBertForQuestionAnswering"),Ytt=o(" (ConvBERT model)"),Ktt=l(),c6=a("li"),y8e=a("strong"),Ztt=o("deberta"),eat=o(" \u2014 "),Xae=a("a"),oat=o("TFDebertaForQuestionAnswering"),rat=o(" (DeBERTa model)"),tat=l(),f6=a("li"),x8e=a("strong"),aat=o("deberta-v2"),nat=o(" \u2014 "),zae=a("a"),sat=o("TFDebertaV2ForQuestionAnswering"),lat=o(" (DeBERTa-v2 model)"),iat=l(),g6=a("li"),$8e=a("strong"),dat=o("distilbert"),mat=o(" \u2014 "),Qae=a("a"),cat=o("TFDistilBertForQuestionAnswering"),fat=o(" (DistilBERT model)"),gat=l(),h6=a("li"),k8e=a("strong"),hat=o("electra"),uat=o(" \u2014 "),Wae=a("a"),pat=o("TFElectraForQuestionAnswering"),_at=o(" (ELECTRA model)"),bat=l(),u6=a("li"),S8e=a("strong"),vat=o("flaubert"),Fat=o(" \u2014 "),Uae=a("a"),Tat=o("TFFlaubertForQuestionAnsweringSimple"),Mat=o(" (FlauBERT model)"),Eat=l(),p6=a("li"),R8e=a("strong"),Cat=o("funnel"),wat=o(" \u2014 "),Hae=a("a"),Aat=o("TFFunnelForQuestionAnswering"),Lat=o(" (Funnel Transformer model)"),yat=l(),_6=a("li"),P8e=a("strong"),xat=o("gptj"),$at=o(" \u2014 "),Jae=a("a"),kat=o("TFGPTJForQuestionAnswering"),Sat=o(" (GPT-J model)"),Rat=l(),b6=a("li"),B8e=a("strong"),Pat=o("layoutlmv3"),Bat=o(" \u2014 "),Yae=a("a"),Iat=o("TFLayoutLMv3ForQuestionAnswering"),Nat=o(" (LayoutLMv3 model)"),qat=l(),v6=a("li"),I8e=a("strong"),jat=o("longformer"),Dat=o(" \u2014 "),Kae=a("a"),Gat=o("TFLongformerForQuestionAnswering"),Oat=o(" (Longformer model)"),Vat=l(),F6=a("li"),N8e=a("strong"),Xat=o("mobilebert"),zat=o(" \u2014 "),Zae=a("a"),Qat=o("TFMobileBertForQuestionAnswering"),Wat=o(" (MobileBERT model)"),Uat=l(),T6=a("li"),q8e=a("strong"),Hat=o("mpnet"),Jat=o(" \u2014 "),ene=a("a"),Yat=o("TFMPNetForQuestionAnswering"),Kat=o(" (MPNet model)"),Zat=l(),M6=a("li"),j8e=a("strong"),ent=o("rembert"),ont=o(" \u2014 "),one=a("a"),rnt=o("TFRemBertForQuestionAnswering"),tnt=o(" (RemBERT model)"),ant=l(),E6=a("li"),D8e=a("strong"),nnt=o("roberta"),snt=o(" \u2014 "),rne=a("a"),lnt=o("TFRobertaForQuestionAnswering"),int=o(" (RoBERTa model)"),dnt=l(),C6=a("li"),G8e=a("strong"),mnt=o("roformer"),cnt=o(" \u2014 "),tne=a("a"),fnt=o("TFRoFormerForQuestionAnswering"),gnt=o(" (RoFormer model)"),hnt=l(),w6=a("li"),O8e=a("strong"),unt=o("xlm"),pnt=o(" \u2014 "),ane=a("a"),_nt=o("TFXLMForQuestionAnsweringSimple"),bnt=o(" (XLM model)"),vnt=l(),A6=a("li"),V8e=a("strong"),Fnt=o("xlm-roberta"),Tnt=o(" \u2014 "),nne=a("a"),Mnt=o("TFXLMRobertaForQuestionAnswering"),Ent=o(" (XLM-RoBERTa model)"),Cnt=l(),L6=a("li"),X8e=a("strong"),wnt=o("xlnet"),Ant=o(" \u2014 "),sne=a("a"),Lnt=o("TFXLNetForQuestionAnsweringSimple"),ynt=o(" (XLNet model)"),xnt=l(),F(y6.$$.fragment),xoo=l(),kc=a("h2"),x6=a("a"),z8e=a("span"),F(gR.$$.fragment),$nt=l(),Q8e=a("span"),knt=o("TFAutoModelForVision2Seq"),$oo=l(),Fr=a("div"),F(hR.$$.fragment),Snt=l(),Sc=a("p"),Rnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lne=a("a"),Pnt=o("from_pretrained()"),Bnt=o(" class method or the "),ine=a("a"),Int=o("from_config()"),Nnt=o(` class
method.`),qnt=l(),uR=a("p"),jnt=o("This class cannot be instantiated directly using "),W8e=a("code"),Dnt=o("__init__()"),Gnt=o(" (throws an error)."),Ont=l(),aa=a("div"),F(pR.$$.fragment),Vnt=l(),U8e=a("p"),Xnt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),znt=l(),Rc=a("p"),Qnt=o(`Note:
Loading a model from its configuration file does `),H8e=a("strong"),Wnt=o("not"),Unt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dne=a("a"),Hnt=o("from_pretrained()"),Jnt=o(" to load the model weights."),Ynt=l(),F($6.$$.fragment),Knt=l(),Jr=a("div"),F(_R.$$.fragment),Znt=l(),J8e=a("p"),est=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ost=l(),jn=a("p"),rst=o("The model class to instantiate is selected based on the "),Y8e=a("code"),tst=o("model_type"),ast=o(` property of the config object (either
passed as an argument or loaded from `),K8e=a("code"),nst=o("pretrained_model_name_or_path"),sst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z8e=a("code"),lst=o("pretrained_model_name_or_path"),ist=o(":"),dst=l(),e9e=a("ul"),k6=a("li"),o9e=a("strong"),mst=o("vision-encoder-decoder"),cst=o(" \u2014 "),mne=a("a"),fst=o("TFVisionEncoderDecoderModel"),gst=o(" (Vision Encoder decoder model)"),hst=l(),F(S6.$$.fragment),koo=l(),Pc=a("h2"),R6=a("a"),r9e=a("span"),F(bR.$$.fragment),ust=l(),t9e=a("span"),pst=o("TFAutoModelForSpeechSeq2Seq"),Soo=l(),Tr=a("div"),F(vR.$$.fragment),_st=l(),Bc=a("p"),bst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cne=a("a"),vst=o("from_pretrained()"),Fst=o(" class method or the "),fne=a("a"),Tst=o("from_config()"),Mst=o(` class
method.`),Est=l(),FR=a("p"),Cst=o("This class cannot be instantiated directly using "),a9e=a("code"),wst=o("__init__()"),Ast=o(" (throws an error)."),Lst=l(),na=a("div"),F(TR.$$.fragment),yst=l(),n9e=a("p"),xst=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$st=l(),Ic=a("p"),kst=o(`Note:
Loading a model from its configuration file does `),s9e=a("strong"),Sst=o("not"),Rst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gne=a("a"),Pst=o("from_pretrained()"),Bst=o(" to load the model weights."),Ist=l(),F(P6.$$.fragment),Nst=l(),Yr=a("div"),F(MR.$$.fragment),qst=l(),l9e=a("p"),jst=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Dst=l(),Dn=a("p"),Gst=o("The model class to instantiate is selected based on the "),i9e=a("code"),Ost=o("model_type"),Vst=o(` property of the config object (either
passed as an argument or loaded from `),d9e=a("code"),Xst=o("pretrained_model_name_or_path"),zst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m9e=a("code"),Qst=o("pretrained_model_name_or_path"),Wst=o(":"),Ust=l(),c9e=a("ul"),B6=a("li"),f9e=a("strong"),Hst=o("speech_to_text"),Jst=o(" \u2014 "),hne=a("a"),Yst=o("TFSpeech2TextForConditionalGeneration"),Kst=o(" (Speech2Text model)"),Zst=l(),F(I6.$$.fragment),Roo=l(),Nc=a("h2"),N6=a("a"),g9e=a("span"),F(ER.$$.fragment),elt=l(),h9e=a("span"),olt=o("FlaxAutoModel"),Poo=l(),Mr=a("div"),F(CR.$$.fragment),rlt=l(),qc=a("p"),tlt=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),une=a("a"),alt=o("from_pretrained()"),nlt=o(" class method or the "),pne=a("a"),slt=o("from_config()"),llt=o(` class
method.`),ilt=l(),wR=a("p"),dlt=o("This class cannot be instantiated directly using "),u9e=a("code"),mlt=o("__init__()"),clt=o(" (throws an error)."),flt=l(),sa=a("div"),F(AR.$$.fragment),glt=l(),p9e=a("p"),hlt=o("Instantiates one of the base model classes of the library from a configuration."),ult=l(),jc=a("p"),plt=o(`Note:
Loading a model from its configuration file does `),_9e=a("strong"),_lt=o("not"),blt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ne=a("a"),vlt=o("from_pretrained()"),Flt=o(" to load the model weights."),Tlt=l(),F(q6.$$.fragment),Mlt=l(),Kr=a("div"),F(LR.$$.fragment),Elt=l(),b9e=a("p"),Clt=o("Instantiate one of the base model classes of the library from a pretrained model."),wlt=l(),Gn=a("p"),Alt=o("The model class to instantiate is selected based on the "),v9e=a("code"),Llt=o("model_type"),ylt=o(` property of the config object (either
passed as an argument or loaded from `),F9e=a("code"),xlt=o("pretrained_model_name_or_path"),$lt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=a("code"),klt=o("pretrained_model_name_or_path"),Slt=o(":"),Rlt=l(),te=a("ul"),j6=a("li"),M9e=a("strong"),Plt=o("albert"),Blt=o(" \u2014 "),bne=a("a"),Ilt=o("FlaxAlbertModel"),Nlt=o(" (ALBERT model)"),qlt=l(),D6=a("li"),E9e=a("strong"),jlt=o("bart"),Dlt=o(" \u2014 "),vne=a("a"),Glt=o("FlaxBartModel"),Olt=o(" (BART model)"),Vlt=l(),G6=a("li"),C9e=a("strong"),Xlt=o("beit"),zlt=o(" \u2014 "),Fne=a("a"),Qlt=o("FlaxBeitModel"),Wlt=o(" (BEiT model)"),Ult=l(),O6=a("li"),w9e=a("strong"),Hlt=o("bert"),Jlt=o(" \u2014 "),Tne=a("a"),Ylt=o("FlaxBertModel"),Klt=o(" (BERT model)"),Zlt=l(),V6=a("li"),A9e=a("strong"),eit=o("big_bird"),oit=o(" \u2014 "),Mne=a("a"),rit=o("FlaxBigBirdModel"),tit=o(" (BigBird model)"),ait=l(),X6=a("li"),L9e=a("strong"),nit=o("blenderbot"),sit=o(" \u2014 "),Ene=a("a"),lit=o("FlaxBlenderbotModel"),iit=o(" (Blenderbot model)"),dit=l(),z6=a("li"),y9e=a("strong"),mit=o("blenderbot-small"),cit=o(" \u2014 "),Cne=a("a"),fit=o("FlaxBlenderbotSmallModel"),git=o(" (BlenderbotSmall model)"),hit=l(),Q6=a("li"),x9e=a("strong"),uit=o("clip"),pit=o(" \u2014 "),wne=a("a"),_it=o("FlaxCLIPModel"),bit=o(" (CLIP model)"),vit=l(),W6=a("li"),$9e=a("strong"),Fit=o("distilbert"),Tit=o(" \u2014 "),Ane=a("a"),Mit=o("FlaxDistilBertModel"),Eit=o(" (DistilBERT model)"),Cit=l(),U6=a("li"),k9e=a("strong"),wit=o("electra"),Ait=o(" \u2014 "),Lne=a("a"),Lit=o("FlaxElectraModel"),yit=o(" (ELECTRA model)"),xit=l(),H6=a("li"),S9e=a("strong"),$it=o("gpt2"),kit=o(" \u2014 "),yne=a("a"),Sit=o("FlaxGPT2Model"),Rit=o(" (OpenAI GPT-2 model)"),Pit=l(),J6=a("li"),R9e=a("strong"),Bit=o("gpt_neo"),Iit=o(" \u2014 "),xne=a("a"),Nit=o("FlaxGPTNeoModel"),qit=o(" (GPT Neo model)"),jit=l(),Y6=a("li"),P9e=a("strong"),Dit=o("gptj"),Git=o(" \u2014 "),$ne=a("a"),Oit=o("FlaxGPTJModel"),Vit=o(" (GPT-J model)"),Xit=l(),K6=a("li"),B9e=a("strong"),zit=o("longt5"),Qit=o(" \u2014 "),kne=a("a"),Wit=o("FlaxLongT5Model"),Uit=o(" (LongT5 model)"),Hit=l(),Z6=a("li"),I9e=a("strong"),Jit=o("marian"),Yit=o(" \u2014 "),Sne=a("a"),Kit=o("FlaxMarianModel"),Zit=o(" (Marian model)"),edt=l(),e7=a("li"),N9e=a("strong"),odt=o("mbart"),rdt=o(" \u2014 "),Rne=a("a"),tdt=o("FlaxMBartModel"),adt=o(" (mBART model)"),ndt=l(),o7=a("li"),q9e=a("strong"),sdt=o("mt5"),ldt=o(" \u2014 "),Pne=a("a"),idt=o("FlaxMT5Model"),ddt=o(" (MT5 model)"),mdt=l(),r7=a("li"),j9e=a("strong"),cdt=o("opt"),fdt=o(" \u2014 "),Bne=a("a"),gdt=o("FlaxOPTModel"),hdt=o(" (OPT model)"),udt=l(),t7=a("li"),D9e=a("strong"),pdt=o("pegasus"),_dt=o(" \u2014 "),Ine=a("a"),bdt=o("FlaxPegasusModel"),vdt=o(" (Pegasus model)"),Fdt=l(),a7=a("li"),G9e=a("strong"),Tdt=o("roberta"),Mdt=o(" \u2014 "),Nne=a("a"),Edt=o("FlaxRobertaModel"),Cdt=o(" (RoBERTa model)"),wdt=l(),n7=a("li"),O9e=a("strong"),Adt=o("roformer"),Ldt=o(" \u2014 "),qne=a("a"),ydt=o("FlaxRoFormerModel"),xdt=o(" (RoFormer model)"),$dt=l(),s7=a("li"),V9e=a("strong"),kdt=o("t5"),Sdt=o(" \u2014 "),jne=a("a"),Rdt=o("FlaxT5Model"),Pdt=o(" (T5 model)"),Bdt=l(),l7=a("li"),X9e=a("strong"),Idt=o("vision-text-dual-encoder"),Ndt=o(" \u2014 "),Dne=a("a"),qdt=o("FlaxVisionTextDualEncoderModel"),jdt=o(" (VisionTextDualEncoder model)"),Ddt=l(),i7=a("li"),z9e=a("strong"),Gdt=o("vit"),Odt=o(" \u2014 "),Gne=a("a"),Vdt=o("FlaxViTModel"),Xdt=o(" (ViT model)"),zdt=l(),d7=a("li"),Q9e=a("strong"),Qdt=o("wav2vec2"),Wdt=o(" \u2014 "),One=a("a"),Udt=o("FlaxWav2Vec2Model"),Hdt=o(" (Wav2Vec2 model)"),Jdt=l(),m7=a("li"),W9e=a("strong"),Ydt=o("xglm"),Kdt=o(" \u2014 "),Vne=a("a"),Zdt=o("FlaxXGLMModel"),emt=o(" (XGLM model)"),omt=l(),c7=a("li"),U9e=a("strong"),rmt=o("xlm-roberta"),tmt=o(" \u2014 "),Xne=a("a"),amt=o("FlaxXLMRobertaModel"),nmt=o(" (XLM-RoBERTa model)"),smt=l(),F(f7.$$.fragment),Boo=l(),Dc=a("h2"),g7=a("a"),H9e=a("span"),F(yR.$$.fragment),lmt=l(),J9e=a("span"),imt=o("FlaxAutoModelForCausalLM"),Ioo=l(),Er=a("div"),F(xR.$$.fragment),dmt=l(),Gc=a("p"),mmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zne=a("a"),cmt=o("from_pretrained()"),fmt=o(" class method or the "),Qne=a("a"),gmt=o("from_config()"),hmt=o(` class
method.`),umt=l(),$R=a("p"),pmt=o("This class cannot be instantiated directly using "),Y9e=a("code"),_mt=o("__init__()"),bmt=o(" (throws an error)."),vmt=l(),la=a("div"),F(kR.$$.fragment),Fmt=l(),K9e=a("p"),Tmt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mmt=l(),Oc=a("p"),Emt=o(`Note:
Loading a model from its configuration file does `),Z9e=a("strong"),Cmt=o("not"),wmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=a("a"),Amt=o("from_pretrained()"),Lmt=o(" to load the model weights."),ymt=l(),F(h7.$$.fragment),xmt=l(),Zr=a("div"),F(SR.$$.fragment),$mt=l(),exe=a("p"),kmt=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Smt=l(),On=a("p"),Rmt=o("The model class to instantiate is selected based on the "),oxe=a("code"),Pmt=o("model_type"),Bmt=o(` property of the config object (either
passed as an argument or loaded from `),rxe=a("code"),Imt=o("pretrained_model_name_or_path"),Nmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),txe=a("code"),qmt=o("pretrained_model_name_or_path"),jmt=o(":"),Dmt=l(),xe=a("ul"),u7=a("li"),axe=a("strong"),Gmt=o("bart"),Omt=o(" \u2014 "),Une=a("a"),Vmt=o("FlaxBartForCausalLM"),Xmt=o(" (BART model)"),zmt=l(),p7=a("li"),nxe=a("strong"),Qmt=o("bert"),Wmt=o(" \u2014 "),Hne=a("a"),Umt=o("FlaxBertForCausalLM"),Hmt=o(" (BERT model)"),Jmt=l(),_7=a("li"),sxe=a("strong"),Ymt=o("big_bird"),Kmt=o(" \u2014 "),Jne=a("a"),Zmt=o("FlaxBigBirdForCausalLM"),ect=o(" (BigBird model)"),oct=l(),b7=a("li"),lxe=a("strong"),rct=o("electra"),tct=o(" \u2014 "),Yne=a("a"),act=o("FlaxElectraForCausalLM"),nct=o(" (ELECTRA model)"),sct=l(),v7=a("li"),ixe=a("strong"),lct=o("gpt2"),ict=o(" \u2014 "),Kne=a("a"),dct=o("FlaxGPT2LMHeadModel"),mct=o(" (OpenAI GPT-2 model)"),cct=l(),F7=a("li"),dxe=a("strong"),fct=o("gpt_neo"),gct=o(" \u2014 "),Zne=a("a"),hct=o("FlaxGPTNeoForCausalLM"),uct=o(" (GPT Neo model)"),pct=l(),T7=a("li"),mxe=a("strong"),_ct=o("gptj"),bct=o(" \u2014 "),ese=a("a"),vct=o("FlaxGPTJForCausalLM"),Fct=o(" (GPT-J model)"),Tct=l(),M7=a("li"),cxe=a("strong"),Mct=o("opt"),Ect=o(" \u2014 "),ose=a("a"),Cct=o("FlaxOPTForCausalLM"),wct=o(" (OPT model)"),Act=l(),E7=a("li"),fxe=a("strong"),Lct=o("roberta"),yct=o(" \u2014 "),rse=a("a"),xct=o("FlaxRobertaForCausalLM"),$ct=o(" (RoBERTa model)"),kct=l(),C7=a("li"),gxe=a("strong"),Sct=o("xglm"),Rct=o(" \u2014 "),tse=a("a"),Pct=o("FlaxXGLMForCausalLM"),Bct=o(" (XGLM model)"),Ict=l(),F(w7.$$.fragment),Noo=l(),Vc=a("h2"),A7=a("a"),hxe=a("span"),F(RR.$$.fragment),Nct=l(),uxe=a("span"),qct=o("FlaxAutoModelForPreTraining"),qoo=l(),Cr=a("div"),F(PR.$$.fragment),jct=l(),Xc=a("p"),Dct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ase=a("a"),Gct=o("from_pretrained()"),Oct=o(" class method or the "),nse=a("a"),Vct=o("from_config()"),Xct=o(` class
method.`),zct=l(),BR=a("p"),Qct=o("This class cannot be instantiated directly using "),pxe=a("code"),Wct=o("__init__()"),Uct=o(" (throws an error)."),Hct=l(),ia=a("div"),F(IR.$$.fragment),Jct=l(),_xe=a("p"),Yct=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kct=l(),zc=a("p"),Zct=o(`Note:
Loading a model from its configuration file does `),bxe=a("strong"),eft=o("not"),oft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sse=a("a"),rft=o("from_pretrained()"),tft=o(" to load the model weights."),aft=l(),F(L7.$$.fragment),nft=l(),et=a("div"),F(NR.$$.fragment),sft=l(),vxe=a("p"),lft=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ift=l(),Vn=a("p"),dft=o("The model class to instantiate is selected based on the "),Fxe=a("code"),mft=o("model_type"),cft=o(` property of the config object (either
passed as an argument or loaded from `),Txe=a("code"),fft=o("pretrained_model_name_or_path"),gft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mxe=a("code"),hft=o("pretrained_model_name_or_path"),uft=o(":"),pft=l(),Ee=a("ul"),y7=a("li"),Exe=a("strong"),_ft=o("albert"),bft=o(" \u2014 "),lse=a("a"),vft=o("FlaxAlbertForPreTraining"),Fft=o(" (ALBERT model)"),Tft=l(),x7=a("li"),Cxe=a("strong"),Mft=o("bart"),Eft=o(" \u2014 "),ise=a("a"),Cft=o("FlaxBartForConditionalGeneration"),wft=o(" (BART model)"),Aft=l(),$7=a("li"),wxe=a("strong"),Lft=o("bert"),yft=o(" \u2014 "),dse=a("a"),xft=o("FlaxBertForPreTraining"),$ft=o(" (BERT model)"),kft=l(),k7=a("li"),Axe=a("strong"),Sft=o("big_bird"),Rft=o(" \u2014 "),mse=a("a"),Pft=o("FlaxBigBirdForPreTraining"),Bft=o(" (BigBird model)"),Ift=l(),S7=a("li"),Lxe=a("strong"),Nft=o("electra"),qft=o(" \u2014 "),cse=a("a"),jft=o("FlaxElectraForPreTraining"),Dft=o(" (ELECTRA model)"),Gft=l(),R7=a("li"),yxe=a("strong"),Oft=o("longt5"),Vft=o(" \u2014 "),fse=a("a"),Xft=o("FlaxLongT5ForConditionalGeneration"),zft=o(" (LongT5 model)"),Qft=l(),P7=a("li"),xxe=a("strong"),Wft=o("mbart"),Uft=o(" \u2014 "),gse=a("a"),Hft=o("FlaxMBartForConditionalGeneration"),Jft=o(" (mBART model)"),Yft=l(),B7=a("li"),$xe=a("strong"),Kft=o("mt5"),Zft=o(" \u2014 "),hse=a("a"),egt=o("FlaxMT5ForConditionalGeneration"),ogt=o(" (MT5 model)"),rgt=l(),I7=a("li"),kxe=a("strong"),tgt=o("roberta"),agt=o(" \u2014 "),use=a("a"),ngt=o("FlaxRobertaForMaskedLM"),sgt=o(" (RoBERTa model)"),lgt=l(),N7=a("li"),Sxe=a("strong"),igt=o("roformer"),dgt=o(" \u2014 "),pse=a("a"),mgt=o("FlaxRoFormerForMaskedLM"),cgt=o(" (RoFormer model)"),fgt=l(),q7=a("li"),Rxe=a("strong"),ggt=o("t5"),hgt=o(" \u2014 "),_se=a("a"),ugt=o("FlaxT5ForConditionalGeneration"),pgt=o(" (T5 model)"),_gt=l(),j7=a("li"),Pxe=a("strong"),bgt=o("wav2vec2"),vgt=o(" \u2014 "),bse=a("a"),Fgt=o("FlaxWav2Vec2ForPreTraining"),Tgt=o(" (Wav2Vec2 model)"),Mgt=l(),D7=a("li"),Bxe=a("strong"),Egt=o("xlm-roberta"),Cgt=o(" \u2014 "),vse=a("a"),wgt=o("FlaxXLMRobertaForMaskedLM"),Agt=o(" (XLM-RoBERTa model)"),Lgt=l(),F(G7.$$.fragment),joo=l(),Qc=a("h2"),O7=a("a"),Ixe=a("span"),F(qR.$$.fragment),ygt=l(),Nxe=a("span"),xgt=o("FlaxAutoModelForMaskedLM"),Doo=l(),wr=a("div"),F(jR.$$.fragment),$gt=l(),Wc=a("p"),kgt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fse=a("a"),Sgt=o("from_pretrained()"),Rgt=o(" class method or the "),Tse=a("a"),Pgt=o("from_config()"),Bgt=o(` class
method.`),Igt=l(),DR=a("p"),Ngt=o("This class cannot be instantiated directly using "),qxe=a("code"),qgt=o("__init__()"),jgt=o(" (throws an error)."),Dgt=l(),da=a("div"),F(GR.$$.fragment),Ggt=l(),jxe=a("p"),Ogt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vgt=l(),Uc=a("p"),Xgt=o(`Note:
Loading a model from its configuration file does `),Dxe=a("strong"),zgt=o("not"),Qgt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=a("a"),Wgt=o("from_pretrained()"),Ugt=o(" to load the model weights."),Hgt=l(),F(V7.$$.fragment),Jgt=l(),ot=a("div"),F(OR.$$.fragment),Ygt=l(),Gxe=a("p"),Kgt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zgt=l(),Xn=a("p"),eht=o("The model class to instantiate is selected based on the "),Oxe=a("code"),oht=o("model_type"),rht=o(` property of the config object (either
passed as an argument or loaded from `),Vxe=a("code"),tht=o("pretrained_model_name_or_path"),aht=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xxe=a("code"),nht=o("pretrained_model_name_or_path"),sht=o(":"),lht=l(),$e=a("ul"),X7=a("li"),zxe=a("strong"),iht=o("albert"),dht=o(" \u2014 "),Ese=a("a"),mht=o("FlaxAlbertForMaskedLM"),cht=o(" (ALBERT model)"),fht=l(),z7=a("li"),Qxe=a("strong"),ght=o("bart"),hht=o(" \u2014 "),Cse=a("a"),uht=o("FlaxBartForConditionalGeneration"),pht=o(" (BART model)"),_ht=l(),Q7=a("li"),Wxe=a("strong"),bht=o("bert"),vht=o(" \u2014 "),wse=a("a"),Fht=o("FlaxBertForMaskedLM"),Tht=o(" (BERT model)"),Mht=l(),W7=a("li"),Uxe=a("strong"),Eht=o("big_bird"),Cht=o(" \u2014 "),Ase=a("a"),wht=o("FlaxBigBirdForMaskedLM"),Aht=o(" (BigBird model)"),Lht=l(),U7=a("li"),Hxe=a("strong"),yht=o("distilbert"),xht=o(" \u2014 "),Lse=a("a"),$ht=o("FlaxDistilBertForMaskedLM"),kht=o(" (DistilBERT model)"),Sht=l(),H7=a("li"),Jxe=a("strong"),Rht=o("electra"),Pht=o(" \u2014 "),yse=a("a"),Bht=o("FlaxElectraForMaskedLM"),Iht=o(" (ELECTRA model)"),Nht=l(),J7=a("li"),Yxe=a("strong"),qht=o("mbart"),jht=o(" \u2014 "),xse=a("a"),Dht=o("FlaxMBartForConditionalGeneration"),Ght=o(" (mBART model)"),Oht=l(),Y7=a("li"),Kxe=a("strong"),Vht=o("roberta"),Xht=o(" \u2014 "),$se=a("a"),zht=o("FlaxRobertaForMaskedLM"),Qht=o(" (RoBERTa model)"),Wht=l(),K7=a("li"),Zxe=a("strong"),Uht=o("roformer"),Hht=o(" \u2014 "),kse=a("a"),Jht=o("FlaxRoFormerForMaskedLM"),Yht=o(" (RoFormer model)"),Kht=l(),Z7=a("li"),e$e=a("strong"),Zht=o("xlm-roberta"),eut=o(" \u2014 "),Sse=a("a"),out=o("FlaxXLMRobertaForMaskedLM"),rut=o(" (XLM-RoBERTa model)"),tut=l(),F(eL.$$.fragment),Goo=l(),Hc=a("h2"),oL=a("a"),o$e=a("span"),F(VR.$$.fragment),aut=l(),r$e=a("span"),nut=o("FlaxAutoModelForSeq2SeqLM"),Ooo=l(),Ar=a("div"),F(XR.$$.fragment),sut=l(),Jc=a("p"),lut=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Rse=a("a"),iut=o("from_pretrained()"),dut=o(" class method or the "),Pse=a("a"),mut=o("from_config()"),cut=o(` class
method.`),fut=l(),zR=a("p"),gut=o("This class cannot be instantiated directly using "),t$e=a("code"),hut=o("__init__()"),uut=o(" (throws an error)."),put=l(),ma=a("div"),F(QR.$$.fragment),_ut=l(),a$e=a("p"),but=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vut=l(),Yc=a("p"),Fut=o(`Note:
Loading a model from its configuration file does `),n$e=a("strong"),Tut=o("not"),Mut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bse=a("a"),Eut=o("from_pretrained()"),Cut=o(" to load the model weights."),wut=l(),F(rL.$$.fragment),Aut=l(),rt=a("div"),F(WR.$$.fragment),Lut=l(),s$e=a("p"),yut=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xut=l(),zn=a("p"),$ut=o("The model class to instantiate is selected based on the "),l$e=a("code"),kut=o("model_type"),Sut=o(` property of the config object (either
passed as an argument or loaded from `),i$e=a("code"),Rut=o("pretrained_model_name_or_path"),Put=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d$e=a("code"),But=o("pretrained_model_name_or_path"),Iut=o(":"),Nut=l(),ke=a("ul"),tL=a("li"),m$e=a("strong"),qut=o("bart"),jut=o(" \u2014 "),Ise=a("a"),Dut=o("FlaxBartForConditionalGeneration"),Gut=o(" (BART model)"),Out=l(),aL=a("li"),c$e=a("strong"),Vut=o("blenderbot"),Xut=o(" \u2014 "),Nse=a("a"),zut=o("FlaxBlenderbotForConditionalGeneration"),Qut=o(" (Blenderbot model)"),Wut=l(),nL=a("li"),f$e=a("strong"),Uut=o("blenderbot-small"),Hut=o(" \u2014 "),qse=a("a"),Jut=o("FlaxBlenderbotSmallForConditionalGeneration"),Yut=o(" (BlenderbotSmall model)"),Kut=l(),sL=a("li"),g$e=a("strong"),Zut=o("encoder-decoder"),ept=o(" \u2014 "),jse=a("a"),opt=o("FlaxEncoderDecoderModel"),rpt=o(" (Encoder decoder model)"),tpt=l(),lL=a("li"),h$e=a("strong"),apt=o("longt5"),npt=o(" \u2014 "),Dse=a("a"),spt=o("FlaxLongT5ForConditionalGeneration"),lpt=o(" (LongT5 model)"),ipt=l(),iL=a("li"),u$e=a("strong"),dpt=o("marian"),mpt=o(" \u2014 "),Gse=a("a"),cpt=o("FlaxMarianMTModel"),fpt=o(" (Marian model)"),gpt=l(),dL=a("li"),p$e=a("strong"),hpt=o("mbart"),upt=o(" \u2014 "),Ose=a("a"),ppt=o("FlaxMBartForConditionalGeneration"),_pt=o(" (mBART model)"),bpt=l(),mL=a("li"),_$e=a("strong"),vpt=o("mt5"),Fpt=o(" \u2014 "),Vse=a("a"),Tpt=o("FlaxMT5ForConditionalGeneration"),Mpt=o(" (MT5 model)"),Ept=l(),cL=a("li"),b$e=a("strong"),Cpt=o("pegasus"),wpt=o(" \u2014 "),Xse=a("a"),Apt=o("FlaxPegasusForConditionalGeneration"),Lpt=o(" (Pegasus model)"),ypt=l(),fL=a("li"),v$e=a("strong"),xpt=o("t5"),$pt=o(" \u2014 "),zse=a("a"),kpt=o("FlaxT5ForConditionalGeneration"),Spt=o(" (T5 model)"),Rpt=l(),F(gL.$$.fragment),Voo=l(),Kc=a("h2"),hL=a("a"),F$e=a("span"),F(UR.$$.fragment),Ppt=l(),T$e=a("span"),Bpt=o("FlaxAutoModelForSequenceClassification"),Xoo=l(),Lr=a("div"),F(HR.$$.fragment),Ipt=l(),Zc=a("p"),Npt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Qse=a("a"),qpt=o("from_pretrained()"),jpt=o(" class method or the "),Wse=a("a"),Dpt=o("from_config()"),Gpt=o(` class
method.`),Opt=l(),JR=a("p"),Vpt=o("This class cannot be instantiated directly using "),M$e=a("code"),Xpt=o("__init__()"),zpt=o(" (throws an error)."),Qpt=l(),ca=a("div"),F(YR.$$.fragment),Wpt=l(),E$e=a("p"),Upt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Hpt=l(),ef=a("p"),Jpt=o(`Note:
Loading a model from its configuration file does `),C$e=a("strong"),Ypt=o("not"),Kpt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=a("a"),Zpt=o("from_pretrained()"),e_t=o(" to load the model weights."),o_t=l(),F(uL.$$.fragment),r_t=l(),tt=a("div"),F(KR.$$.fragment),t_t=l(),w$e=a("p"),a_t=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n_t=l(),Qn=a("p"),s_t=o("The model class to instantiate is selected based on the "),A$e=a("code"),l_t=o("model_type"),i_t=o(` property of the config object (either
passed as an argument or loaded from `),L$e=a("code"),d_t=o("pretrained_model_name_or_path"),m_t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y$e=a("code"),c_t=o("pretrained_model_name_or_path"),f_t=o(":"),g_t=l(),Se=a("ul"),pL=a("li"),x$e=a("strong"),h_t=o("albert"),u_t=o(" \u2014 "),Hse=a("a"),p_t=o("FlaxAlbertForSequenceClassification"),__t=o(" (ALBERT model)"),b_t=l(),_L=a("li"),$$e=a("strong"),v_t=o("bart"),F_t=o(" \u2014 "),Jse=a("a"),T_t=o("FlaxBartForSequenceClassification"),M_t=o(" (BART model)"),E_t=l(),bL=a("li"),k$e=a("strong"),C_t=o("bert"),w_t=o(" \u2014 "),Yse=a("a"),A_t=o("FlaxBertForSequenceClassification"),L_t=o(" (BERT model)"),y_t=l(),vL=a("li"),S$e=a("strong"),x_t=o("big_bird"),$_t=o(" \u2014 "),Kse=a("a"),k_t=o("FlaxBigBirdForSequenceClassification"),S_t=o(" (BigBird model)"),R_t=l(),FL=a("li"),R$e=a("strong"),P_t=o("distilbert"),B_t=o(" \u2014 "),Zse=a("a"),I_t=o("FlaxDistilBertForSequenceClassification"),N_t=o(" (DistilBERT model)"),q_t=l(),TL=a("li"),P$e=a("strong"),j_t=o("electra"),D_t=o(" \u2014 "),ele=a("a"),G_t=o("FlaxElectraForSequenceClassification"),O_t=o(" (ELECTRA model)"),V_t=l(),ML=a("li"),B$e=a("strong"),X_t=o("mbart"),z_t=o(" \u2014 "),ole=a("a"),Q_t=o("FlaxMBartForSequenceClassification"),W_t=o(" (mBART model)"),U_t=l(),EL=a("li"),I$e=a("strong"),H_t=o("roberta"),J_t=o(" \u2014 "),rle=a("a"),Y_t=o("FlaxRobertaForSequenceClassification"),K_t=o(" (RoBERTa model)"),Z_t=l(),CL=a("li"),N$e=a("strong"),e1t=o("roformer"),o1t=o(" \u2014 "),tle=a("a"),r1t=o("FlaxRoFormerForSequenceClassification"),t1t=o(" (RoFormer model)"),a1t=l(),wL=a("li"),q$e=a("strong"),n1t=o("xlm-roberta"),s1t=o(" \u2014 "),ale=a("a"),l1t=o("FlaxXLMRobertaForSequenceClassification"),i1t=o(" (XLM-RoBERTa model)"),d1t=l(),F(AL.$$.fragment),zoo=l(),of=a("h2"),LL=a("a"),j$e=a("span"),F(ZR.$$.fragment),m1t=l(),D$e=a("span"),c1t=o("FlaxAutoModelForQuestionAnswering"),Qoo=l(),yr=a("div"),F(eP.$$.fragment),f1t=l(),rf=a("p"),g1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nle=a("a"),h1t=o("from_pretrained()"),u1t=o(" class method or the "),sle=a("a"),p1t=o("from_config()"),_1t=o(` class
method.`),b1t=l(),oP=a("p"),v1t=o("This class cannot be instantiated directly using "),G$e=a("code"),F1t=o("__init__()"),T1t=o(" (throws an error)."),M1t=l(),fa=a("div"),F(rP.$$.fragment),E1t=l(),O$e=a("p"),C1t=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w1t=l(),tf=a("p"),A1t=o(`Note:
Loading a model from its configuration file does `),V$e=a("strong"),L1t=o("not"),y1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lle=a("a"),x1t=o("from_pretrained()"),$1t=o(" to load the model weights."),k1t=l(),F(yL.$$.fragment),S1t=l(),at=a("div"),F(tP.$$.fragment),R1t=l(),X$e=a("p"),P1t=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B1t=l(),Wn=a("p"),I1t=o("The model class to instantiate is selected based on the "),z$e=a("code"),N1t=o("model_type"),q1t=o(` property of the config object (either
passed as an argument or loaded from `),Q$e=a("code"),j1t=o("pretrained_model_name_or_path"),D1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W$e=a("code"),G1t=o("pretrained_model_name_or_path"),O1t=o(":"),V1t=l(),Re=a("ul"),xL=a("li"),U$e=a("strong"),X1t=o("albert"),z1t=o(" \u2014 "),ile=a("a"),Q1t=o("FlaxAlbertForQuestionAnswering"),W1t=o(" (ALBERT model)"),U1t=l(),$L=a("li"),H$e=a("strong"),H1t=o("bart"),J1t=o(" \u2014 "),dle=a("a"),Y1t=o("FlaxBartForQuestionAnswering"),K1t=o(" (BART model)"),Z1t=l(),kL=a("li"),J$e=a("strong"),e2t=o("bert"),o2t=o(" \u2014 "),mle=a("a"),r2t=o("FlaxBertForQuestionAnswering"),t2t=o(" (BERT model)"),a2t=l(),SL=a("li"),Y$e=a("strong"),n2t=o("big_bird"),s2t=o(" \u2014 "),cle=a("a"),l2t=o("FlaxBigBirdForQuestionAnswering"),i2t=o(" (BigBird model)"),d2t=l(),RL=a("li"),K$e=a("strong"),m2t=o("distilbert"),c2t=o(" \u2014 "),fle=a("a"),f2t=o("FlaxDistilBertForQuestionAnswering"),g2t=o(" (DistilBERT model)"),h2t=l(),PL=a("li"),Z$e=a("strong"),u2t=o("electra"),p2t=o(" \u2014 "),gle=a("a"),_2t=o("FlaxElectraForQuestionAnswering"),b2t=o(" (ELECTRA model)"),v2t=l(),BL=a("li"),eke=a("strong"),F2t=o("mbart"),T2t=o(" \u2014 "),hle=a("a"),M2t=o("FlaxMBartForQuestionAnswering"),E2t=o(" (mBART model)"),C2t=l(),IL=a("li"),oke=a("strong"),w2t=o("roberta"),A2t=o(" \u2014 "),ule=a("a"),L2t=o("FlaxRobertaForQuestionAnswering"),y2t=o(" (RoBERTa model)"),x2t=l(),NL=a("li"),rke=a("strong"),$2t=o("roformer"),k2t=o(" \u2014 "),ple=a("a"),S2t=o("FlaxRoFormerForQuestionAnswering"),R2t=o(" (RoFormer model)"),P2t=l(),qL=a("li"),tke=a("strong"),B2t=o("xlm-roberta"),I2t=o(" \u2014 "),_le=a("a"),N2t=o("FlaxXLMRobertaForQuestionAnswering"),q2t=o(" (XLM-RoBERTa model)"),j2t=l(),F(jL.$$.fragment),Woo=l(),af=a("h2"),DL=a("a"),ake=a("span"),F(aP.$$.fragment),D2t=l(),nke=a("span"),G2t=o("FlaxAutoModelForTokenClassification"),Uoo=l(),xr=a("div"),F(nP.$$.fragment),O2t=l(),nf=a("p"),V2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ble=a("a"),X2t=o("from_pretrained()"),z2t=o(" class method or the "),vle=a("a"),Q2t=o("from_config()"),W2t=o(` class
method.`),U2t=l(),sP=a("p"),H2t=o("This class cannot be instantiated directly using "),ske=a("code"),J2t=o("__init__()"),Y2t=o(" (throws an error)."),K2t=l(),ga=a("div"),F(lP.$$.fragment),Z2t=l(),lke=a("p"),ebt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),obt=l(),sf=a("p"),rbt=o(`Note:
Loading a model from its configuration file does `),ike=a("strong"),tbt=o("not"),abt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fle=a("a"),nbt=o("from_pretrained()"),sbt=o(" to load the model weights."),lbt=l(),F(GL.$$.fragment),ibt=l(),nt=a("div"),F(iP.$$.fragment),dbt=l(),dke=a("p"),mbt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cbt=l(),Un=a("p"),fbt=o("The model class to instantiate is selected based on the "),mke=a("code"),gbt=o("model_type"),hbt=o(` property of the config object (either
passed as an argument or loaded from `),cke=a("code"),ubt=o("pretrained_model_name_or_path"),pbt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fke=a("code"),_bt=o("pretrained_model_name_or_path"),bbt=o(":"),vbt=l(),Xe=a("ul"),OL=a("li"),gke=a("strong"),Fbt=o("albert"),Tbt=o(" \u2014 "),Tle=a("a"),Mbt=o("FlaxAlbertForTokenClassification"),Ebt=o(" (ALBERT model)"),Cbt=l(),VL=a("li"),hke=a("strong"),wbt=o("bert"),Abt=o(" \u2014 "),Mle=a("a"),Lbt=o("FlaxBertForTokenClassification"),ybt=o(" (BERT model)"),xbt=l(),XL=a("li"),uke=a("strong"),$bt=o("big_bird"),kbt=o(" \u2014 "),Ele=a("a"),Sbt=o("FlaxBigBirdForTokenClassification"),Rbt=o(" (BigBird model)"),Pbt=l(),zL=a("li"),pke=a("strong"),Bbt=o("distilbert"),Ibt=o(" \u2014 "),Cle=a("a"),Nbt=o("FlaxDistilBertForTokenClassification"),qbt=o(" (DistilBERT model)"),jbt=l(),QL=a("li"),_ke=a("strong"),Dbt=o("electra"),Gbt=o(" \u2014 "),wle=a("a"),Obt=o("FlaxElectraForTokenClassification"),Vbt=o(" (ELECTRA model)"),Xbt=l(),WL=a("li"),bke=a("strong"),zbt=o("roberta"),Qbt=o(" \u2014 "),Ale=a("a"),Wbt=o("FlaxRobertaForTokenClassification"),Ubt=o(" (RoBERTa model)"),Hbt=l(),UL=a("li"),vke=a("strong"),Jbt=o("roformer"),Ybt=o(" \u2014 "),Lle=a("a"),Kbt=o("FlaxRoFormerForTokenClassification"),Zbt=o(" (RoFormer model)"),evt=l(),HL=a("li"),Fke=a("strong"),ovt=o("xlm-roberta"),rvt=o(" \u2014 "),yle=a("a"),tvt=o("FlaxXLMRobertaForTokenClassification"),avt=o(" (XLM-RoBERTa model)"),nvt=l(),F(JL.$$.fragment),Hoo=l(),lf=a("h2"),YL=a("a"),Tke=a("span"),F(dP.$$.fragment),svt=l(),Mke=a("span"),lvt=o("FlaxAutoModelForMultipleChoice"),Joo=l(),$r=a("div"),F(mP.$$.fragment),ivt=l(),df=a("p"),dvt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xle=a("a"),mvt=o("from_pretrained()"),cvt=o(" class method or the "),$le=a("a"),fvt=o("from_config()"),gvt=o(` class
method.`),hvt=l(),cP=a("p"),uvt=o("This class cannot be instantiated directly using "),Eke=a("code"),pvt=o("__init__()"),_vt=o(" (throws an error)."),bvt=l(),ha=a("div"),F(fP.$$.fragment),vvt=l(),Cke=a("p"),Fvt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tvt=l(),mf=a("p"),Mvt=o(`Note:
Loading a model from its configuration file does `),wke=a("strong"),Evt=o("not"),Cvt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kle=a("a"),wvt=o("from_pretrained()"),Avt=o(" to load the model weights."),Lvt=l(),F(KL.$$.fragment),yvt=l(),st=a("div"),F(gP.$$.fragment),xvt=l(),Ake=a("p"),$vt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kvt=l(),Hn=a("p"),Svt=o("The model class to instantiate is selected based on the "),Lke=a("code"),Rvt=o("model_type"),Pvt=o(` property of the config object (either
passed as an argument or loaded from `),yke=a("code"),Bvt=o("pretrained_model_name_or_path"),Ivt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xke=a("code"),Nvt=o("pretrained_model_name_or_path"),qvt=o(":"),jvt=l(),ze=a("ul"),ZL=a("li"),$ke=a("strong"),Dvt=o("albert"),Gvt=o(" \u2014 "),Sle=a("a"),Ovt=o("FlaxAlbertForMultipleChoice"),Vvt=o(" (ALBERT model)"),Xvt=l(),ey=a("li"),kke=a("strong"),zvt=o("bert"),Qvt=o(" \u2014 "),Rle=a("a"),Wvt=o("FlaxBertForMultipleChoice"),Uvt=o(" (BERT model)"),Hvt=l(),oy=a("li"),Ske=a("strong"),Jvt=o("big_bird"),Yvt=o(" \u2014 "),Ple=a("a"),Kvt=o("FlaxBigBirdForMultipleChoice"),Zvt=o(" (BigBird model)"),eFt=l(),ry=a("li"),Rke=a("strong"),oFt=o("distilbert"),rFt=o(" \u2014 "),Ble=a("a"),tFt=o("FlaxDistilBertForMultipleChoice"),aFt=o(" (DistilBERT model)"),nFt=l(),ty=a("li"),Pke=a("strong"),sFt=o("electra"),lFt=o(" \u2014 "),Ile=a("a"),iFt=o("FlaxElectraForMultipleChoice"),dFt=o(" (ELECTRA model)"),mFt=l(),ay=a("li"),Bke=a("strong"),cFt=o("roberta"),fFt=o(" \u2014 "),Nle=a("a"),gFt=o("FlaxRobertaForMultipleChoice"),hFt=o(" (RoBERTa model)"),uFt=l(),ny=a("li"),Ike=a("strong"),pFt=o("roformer"),_Ft=o(" \u2014 "),qle=a("a"),bFt=o("FlaxRoFormerForMultipleChoice"),vFt=o(" (RoFormer model)"),FFt=l(),sy=a("li"),Nke=a("strong"),TFt=o("xlm-roberta"),MFt=o(" \u2014 "),jle=a("a"),EFt=o("FlaxXLMRobertaForMultipleChoice"),CFt=o(" (XLM-RoBERTa model)"),wFt=l(),F(ly.$$.fragment),Yoo=l(),cf=a("h2"),iy=a("a"),qke=a("span"),F(hP.$$.fragment),AFt=l(),jke=a("span"),LFt=o("FlaxAutoModelForNextSentencePrediction"),Koo=l(),kr=a("div"),F(uP.$$.fragment),yFt=l(),ff=a("p"),xFt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Dle=a("a"),$Ft=o("from_pretrained()"),kFt=o(" class method or the "),Gle=a("a"),SFt=o("from_config()"),RFt=o(` class
method.`),PFt=l(),pP=a("p"),BFt=o("This class cannot be instantiated directly using "),Dke=a("code"),IFt=o("__init__()"),NFt=o(" (throws an error)."),qFt=l(),ua=a("div"),F(_P.$$.fragment),jFt=l(),Gke=a("p"),DFt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GFt=l(),gf=a("p"),OFt=o(`Note:
Loading a model from its configuration file does `),Oke=a("strong"),VFt=o("not"),XFt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ole=a("a"),zFt=o("from_pretrained()"),QFt=o(" to load the model weights."),WFt=l(),F(dy.$$.fragment),UFt=l(),lt=a("div"),F(bP.$$.fragment),HFt=l(),Vke=a("p"),JFt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YFt=l(),Jn=a("p"),KFt=o("The model class to instantiate is selected based on the "),Xke=a("code"),ZFt=o("model_type"),eTt=o(` property of the config object (either
passed as an argument or loaded from `),zke=a("code"),oTt=o("pretrained_model_name_or_path"),rTt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qke=a("code"),tTt=o("pretrained_model_name_or_path"),aTt=o(":"),nTt=l(),Wke=a("ul"),my=a("li"),Uke=a("strong"),sTt=o("bert"),lTt=o(" \u2014 "),Vle=a("a"),iTt=o("FlaxBertForNextSentencePrediction"),dTt=o(" (BERT model)"),mTt=l(),F(cy.$$.fragment),Zoo=l(),hf=a("h2"),fy=a("a"),Hke=a("span"),F(vP.$$.fragment),cTt=l(),Jke=a("span"),fTt=o("FlaxAutoModelForImageClassification"),ero=l(),Sr=a("div"),F(FP.$$.fragment),gTt=l(),uf=a("p"),hTt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Xle=a("a"),uTt=o("from_pretrained()"),pTt=o(" class method or the "),zle=a("a"),_Tt=o("from_config()"),bTt=o(` class
method.`),vTt=l(),TP=a("p"),FTt=o("This class cannot be instantiated directly using "),Yke=a("code"),TTt=o("__init__()"),MTt=o(" (throws an error)."),ETt=l(),pa=a("div"),F(MP.$$.fragment),CTt=l(),Kke=a("p"),wTt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ATt=l(),pf=a("p"),LTt=o(`Note:
Loading a model from its configuration file does `),Zke=a("strong"),yTt=o("not"),xTt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qle=a("a"),$Tt=o("from_pretrained()"),kTt=o(" to load the model weights."),STt=l(),F(gy.$$.fragment),RTt=l(),it=a("div"),F(EP.$$.fragment),PTt=l(),eSe=a("p"),BTt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ITt=l(),Yn=a("p"),NTt=o("The model class to instantiate is selected based on the "),oSe=a("code"),qTt=o("model_type"),jTt=o(` property of the config object (either
passed as an argument or loaded from `),rSe=a("code"),DTt=o("pretrained_model_name_or_path"),GTt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tSe=a("code"),OTt=o("pretrained_model_name_or_path"),VTt=o(":"),XTt=l(),CP=a("ul"),hy=a("li"),aSe=a("strong"),zTt=o("beit"),QTt=o(" \u2014 "),Wle=a("a"),WTt=o("FlaxBeitForImageClassification"),UTt=o(" (BEiT model)"),HTt=l(),uy=a("li"),nSe=a("strong"),JTt=o("vit"),YTt=o(" \u2014 "),Ule=a("a"),KTt=o("FlaxViTForImageClassification"),ZTt=o(" (ViT model)"),eMt=l(),F(py.$$.fragment),oro=l(),_f=a("h2"),_y=a("a"),sSe=a("span"),F(wP.$$.fragment),oMt=l(),lSe=a("span"),rMt=o("FlaxAutoModelForVision2Seq"),rro=l(),Rr=a("div"),F(AP.$$.fragment),tMt=l(),bf=a("p"),aMt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hle=a("a"),nMt=o("from_pretrained()"),sMt=o(" class method or the "),Jle=a("a"),lMt=o("from_config()"),iMt=o(` class
method.`),dMt=l(),LP=a("p"),mMt=o("This class cannot be instantiated directly using "),iSe=a("code"),cMt=o("__init__()"),fMt=o(" (throws an error)."),gMt=l(),_a=a("div"),F(yP.$$.fragment),hMt=l(),dSe=a("p"),uMt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pMt=l(),vf=a("p"),_Mt=o(`Note:
Loading a model from its configuration file does `),mSe=a("strong"),bMt=o("not"),vMt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=a("a"),FMt=o("from_pretrained()"),TMt=o(" to load the model weights."),MMt=l(),F(by.$$.fragment),EMt=l(),dt=a("div"),F(xP.$$.fragment),CMt=l(),cSe=a("p"),wMt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),AMt=l(),Kn=a("p"),LMt=o("The model class to instantiate is selected based on the "),fSe=a("code"),yMt=o("model_type"),xMt=o(` property of the config object (either
passed as an argument or loaded from `),gSe=a("code"),$Mt=o("pretrained_model_name_or_path"),kMt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hSe=a("code"),SMt=o("pretrained_model_name_or_path"),RMt=o(":"),PMt=l(),uSe=a("ul"),vy=a("li"),pSe=a("strong"),BMt=o("vision-encoder-decoder"),IMt=o(" \u2014 "),Kle=a("a"),NMt=o("FlaxVisionEncoderDecoderModel"),qMt=o(" (Vision Encoder decoder model)"),jMt=l(),F(Fy.$$.fragment),this.h()},l(c){const _=z1a('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(c),u=n(c,"H1",{class:!0});var $P=s(u);f=n($P,"A",{id:!0,class:!0,href:!0});var _Se=s(f);p=n(_Se,"SPAN",{});var bSe=s(p);T(d.$$.fragment,bSe),bSe.forEach(t),_Se.forEach(t),h=i($P),yo=n($P,"SPAN",{});var vSe=s(yo);td=r(vSe,"Auto Classes"),vSe.forEach(t),$P.forEach(t),Ef=i(c),pt=n(c,"P",{});var kP=s(pt);ad=r(kP,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=n(kP,"CODE",{});var FSe=s(nd);Y9=r(FSe,"from_pretrained()"),FSe.forEach(t),Cf=r(kP,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),kP.forEach(t),Ve=i(c),He=n(c,"P",{});var Zn=s(He);sd=r(Zn,"Instantiating one of "),es=n(Zn,"A",{href:!0});var TSe=s(es);K9=r(TSe,"AutoConfig"),TSe.forEach(t),os=r(Zn,", "),rs=n(Zn,"A",{href:!0});var MSe=s(rs);Z9=r(MSe,"AutoModel"),MSe.forEach(t),ld=r(Zn,`, and
`),ts=n(Zn,"A",{href:!0});var ESe=s(ts);ex=r(ESe,"AutoTokenizer"),ESe.forEach(t),id=r(Zn," will directly create a class of the relevant architecture. For instance"),Zn.forEach(t),wf=i(c),T(Qa.$$.fragment,c),Je=i(c),Ae=n(c,"P",{});var SP=s(Ae);oI=r(SP,"will create a model that is an instance of "),dd=n(SP,"A",{href:!0});var CSe=s(dd);rI=r(CSe,"BertModel"),CSe.forEach(t),tI=r(SP,"."),SP.forEach(t),xo=i(c),Wa=n(c,"P",{});var RP=s(Wa);aI=r(RP,"There is one class of "),Af=n(RP,"CODE",{});var wSe=s(Af);nI=r(wSe,"AutoModel"),wSe.forEach(t),Fao=r(RP," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),RP.forEach(t),XZe=i(c),md=n(c,"H2",{class:!0});var PP=s(md);Lf=n(PP,"A",{id:!0,class:!0,href:!0});var ASe=s(Lf);rme=n(ASe,"SPAN",{});var LSe=s(rme);T(ox.$$.fragment,LSe),LSe.forEach(t),ASe.forEach(t),Tao=i(PP),tme=n(PP,"SPAN",{});var ySe=s(tme);Mao=r(ySe,"Extending the Auto Classes"),ySe.forEach(t),PP.forEach(t),zZe=i(c),as=n(c,"P",{});var Ff=s(as);Eao=r(Ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ame=n(Ff,"CODE",{});var xSe=s(ame);Cao=r(xSe,"NewModel"),xSe.forEach(t),wao=r(Ff,", make sure you have a "),nme=n(Ff,"CODE",{});var $Se=s(nme);Aao=r($Se,"NewModelConfig"),$Se.forEach(t),Lao=r(Ff,` then you can add those to the auto
classes like this:`),Ff.forEach(t),QZe=i(c),T(rx.$$.fragment,c),WZe=i(c),sI=n(c,"P",{});var kSe=s(sI);yao=r(kSe,"You will then be able to use the auto classes like you would usually do!"),kSe.forEach(t),UZe=i(c),T(yf.$$.fragment,c),HZe=i(c),cd=n(c,"H2",{class:!0});var BP=s(cd);xf=n(BP,"A",{id:!0,class:!0,href:!0});var SSe=s(xf);sme=n(SSe,"SPAN",{});var RSe=s(sme);T(tx.$$.fragment,RSe),RSe.forEach(t),SSe.forEach(t),xao=i(BP),lme=n(BP,"SPAN",{});var PSe=s(lme);$ao=r(PSe,"AutoConfig"),PSe.forEach(t),BP.forEach(t),JZe=i(c),$o=n(c,"DIV",{class:!0});var ht=s($o);T(ax.$$.fragment,ht),kao=i(ht),nx=n(ht,"P",{});var IP=s(nx);Sao=r(IP,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lI=n(IP,"A",{href:!0});var BSe=s(lI);Rao=r(BSe,"from_pretrained()"),BSe.forEach(t),Pao=r(IP," class method."),IP.forEach(t),Bao=i(ht),sx=n(ht,"P",{});var NP=s(sx);Iao=r(NP,"This class cannot be instantiated directly using "),ime=n(NP,"CODE",{});var ISe=s(ime);Nao=r(ISe,"__init__()"),ISe.forEach(t),qao=r(NP," (throws an error)."),NP.forEach(t),jao=i(ht),Pr=n(ht,"DIV",{class:!0});var ut=s(Pr);T(lx.$$.fragment,ut),Dao=i(ut),dme=n(ut,"P",{});var NSe=s(dme);Gao=r(NSe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),NSe.forEach(t),Oao=i(ut),fd=n(ut,"P",{});var Tf=s(fd);Vao=r(Tf,"The configuration class to instantiate is selected based on the "),mme=n(Tf,"CODE",{});var qSe=s(mme);Xao=r(qSe,"model_type"),qSe.forEach(t),zao=r(Tf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cme=n(Tf,"CODE",{});var jSe=s(cme);Qao=r(jSe,"pretrained_model_name_or_path"),jSe.forEach(t),Wao=r(Tf,":"),Tf.forEach(t),Uao=i(ut),A=n(ut,"UL",{});var L=s(A);$f=n(L,"LI",{});var Ty=s($f);fme=n(Ty,"STRONG",{});var DSe=s(fme);Hao=r(DSe,"albert"),DSe.forEach(t),Jao=r(Ty," \u2014 "),iI=n(Ty,"A",{href:!0});var GSe=s(iI);Yao=r(GSe,"AlbertConfig"),GSe.forEach(t),Kao=r(Ty," (ALBERT model)"),Ty.forEach(t),Zao=i(L),kf=n(L,"LI",{});var My=s(kf);gme=n(My,"STRONG",{});var OSe=s(gme);eno=r(OSe,"bart"),OSe.forEach(t),ono=r(My," \u2014 "),dI=n(My,"A",{href:!0});var VSe=s(dI);rno=r(VSe,"BartConfig"),VSe.forEach(t),tno=r(My," (BART model)"),My.forEach(t),ano=i(L),Sf=n(L,"LI",{});var Ey=s(Sf);hme=n(Ey,"STRONG",{});var XSe=s(hme);nno=r(XSe,"beit"),XSe.forEach(t),sno=r(Ey," \u2014 "),mI=n(Ey,"A",{href:!0});var zSe=s(mI);lno=r(zSe,"BeitConfig"),zSe.forEach(t),ino=r(Ey," (BEiT model)"),Ey.forEach(t),dno=i(L),Rf=n(L,"LI",{});var Cy=s(Rf);ume=n(Cy,"STRONG",{});var QSe=s(ume);mno=r(QSe,"bert"),QSe.forEach(t),cno=r(Cy," \u2014 "),cI=n(Cy,"A",{href:!0});var WSe=s(cI);fno=r(WSe,"BertConfig"),WSe.forEach(t),gno=r(Cy," (BERT model)"),Cy.forEach(t),hno=i(L),Pf=n(L,"LI",{});var wy=s(Pf);pme=n(wy,"STRONG",{});var USe=s(pme);uno=r(USe,"bert-generation"),USe.forEach(t),pno=r(wy," \u2014 "),fI=n(wy,"A",{href:!0});var HSe=s(fI);_no=r(HSe,"BertGenerationConfig"),HSe.forEach(t),bno=r(wy," (Bert Generation model)"),wy.forEach(t),vno=i(L),Bf=n(L,"LI",{});var Ay=s(Bf);_me=n(Ay,"STRONG",{});var JSe=s(_me);Fno=r(JSe,"big_bird"),JSe.forEach(t),Tno=r(Ay," \u2014 "),gI=n(Ay,"A",{href:!0});var YSe=s(gI);Mno=r(YSe,"BigBirdConfig"),YSe.forEach(t),Eno=r(Ay," (BigBird model)"),Ay.forEach(t),Cno=i(L),If=n(L,"LI",{});var Ly=s(If);bme=n(Ly,"STRONG",{});var KSe=s(bme);wno=r(KSe,"bigbird_pegasus"),KSe.forEach(t),Ano=r(Ly," \u2014 "),hI=n(Ly,"A",{href:!0});var ZSe=s(hI);Lno=r(ZSe,"BigBirdPegasusConfig"),ZSe.forEach(t),yno=r(Ly," (BigBird-Pegasus model)"),Ly.forEach(t),xno=i(L),Nf=n(L,"LI",{});var yy=s(Nf);vme=n(yy,"STRONG",{});var eRe=s(vme);$no=r(eRe,"blenderbot"),eRe.forEach(t),kno=r(yy," \u2014 "),uI=n(yy,"A",{href:!0});var oRe=s(uI);Sno=r(oRe,"BlenderbotConfig"),oRe.forEach(t),Rno=r(yy," (Blenderbot model)"),yy.forEach(t),Pno=i(L),qf=n(L,"LI",{});var xy=s(qf);Fme=n(xy,"STRONG",{});var rRe=s(Fme);Bno=r(rRe,"blenderbot-small"),rRe.forEach(t),Ino=r(xy," \u2014 "),pI=n(xy,"A",{href:!0});var tRe=s(pI);Nno=r(tRe,"BlenderbotSmallConfig"),tRe.forEach(t),qno=r(xy," (BlenderbotSmall model)"),xy.forEach(t),jno=i(L),jf=n(L,"LI",{});var $y=s(jf);Tme=n($y,"STRONG",{});var aRe=s(Tme);Dno=r(aRe,"bloom"),aRe.forEach(t),Gno=r($y," \u2014 "),_I=n($y,"A",{href:!0});var nRe=s(_I);Ono=r(nRe,"BloomConfig"),nRe.forEach(t),Vno=r($y," (BLOOM model)"),$y.forEach(t),Xno=i(L),Df=n(L,"LI",{});var ky=s(Df);Mme=n(ky,"STRONG",{});var sRe=s(Mme);zno=r(sRe,"camembert"),sRe.forEach(t),Qno=r(ky," \u2014 "),bI=n(ky,"A",{href:!0});var lRe=s(bI);Wno=r(lRe,"CamembertConfig"),lRe.forEach(t),Uno=r(ky," (CamemBERT model)"),ky.forEach(t),Hno=i(L),Gf=n(L,"LI",{});var Sy=s(Gf);Eme=n(Sy,"STRONG",{});var iRe=s(Eme);Jno=r(iRe,"canine"),iRe.forEach(t),Yno=r(Sy," \u2014 "),vI=n(Sy,"A",{href:!0});var dRe=s(vI);Kno=r(dRe,"CanineConfig"),dRe.forEach(t),Zno=r(Sy," (CANINE model)"),Sy.forEach(t),eso=i(L),Of=n(L,"LI",{});var Ry=s(Of);Cme=n(Ry,"STRONG",{});var mRe=s(Cme);oso=r(mRe,"clip"),mRe.forEach(t),rso=r(Ry," \u2014 "),FI=n(Ry,"A",{href:!0});var cRe=s(FI);tso=r(cRe,"CLIPConfig"),cRe.forEach(t),aso=r(Ry," (CLIP model)"),Ry.forEach(t),nso=i(L),Vf=n(L,"LI",{});var Py=s(Vf);wme=n(Py,"STRONG",{});var fRe=s(wme);sso=r(fRe,"codegen"),fRe.forEach(t),lso=r(Py," \u2014 "),TI=n(Py,"A",{href:!0});var gRe=s(TI);iso=r(gRe,"CodeGenConfig"),gRe.forEach(t),dso=r(Py," (CodeGen model)"),Py.forEach(t),mso=i(L),Xf=n(L,"LI",{});var By=s(Xf);Ame=n(By,"STRONG",{});var hRe=s(Ame);cso=r(hRe,"conditional_detr"),hRe.forEach(t),fso=r(By," \u2014 "),MI=n(By,"A",{href:!0});var uRe=s(MI);gso=r(uRe,"ConditionalDetrConfig"),uRe.forEach(t),hso=r(By," (Conditional DETR model)"),By.forEach(t),uso=i(L),zf=n(L,"LI",{});var Iy=s(zf);Lme=n(Iy,"STRONG",{});var pRe=s(Lme);pso=r(pRe,"convbert"),pRe.forEach(t),_so=r(Iy," \u2014 "),EI=n(Iy,"A",{href:!0});var _Re=s(EI);bso=r(_Re,"ConvBertConfig"),_Re.forEach(t),vso=r(Iy," (ConvBERT model)"),Iy.forEach(t),Fso=i(L),Qf=n(L,"LI",{});var Ny=s(Qf);yme=n(Ny,"STRONG",{});var bRe=s(yme);Tso=r(bRe,"convnext"),bRe.forEach(t),Mso=r(Ny," \u2014 "),CI=n(Ny,"A",{href:!0});var vRe=s(CI);Eso=r(vRe,"ConvNextConfig"),vRe.forEach(t),Cso=r(Ny," (ConvNeXT model)"),Ny.forEach(t),wso=i(L),Wf=n(L,"LI",{});var qy=s(Wf);xme=n(qy,"STRONG",{});var FRe=s(xme);Aso=r(FRe,"ctrl"),FRe.forEach(t),Lso=r(qy," \u2014 "),wI=n(qy,"A",{href:!0});var TRe=s(wI);yso=r(TRe,"CTRLConfig"),TRe.forEach(t),xso=r(qy," (CTRL model)"),qy.forEach(t),$so=i(L),Uf=n(L,"LI",{});var jy=s(Uf);$me=n(jy,"STRONG",{});var MRe=s($me);kso=r(MRe,"cvt"),MRe.forEach(t),Sso=r(jy," \u2014 "),AI=n(jy,"A",{href:!0});var ERe=s(AI);Rso=r(ERe,"CvtConfig"),ERe.forEach(t),Pso=r(jy," (CvT model)"),jy.forEach(t),Bso=i(L),Hf=n(L,"LI",{});var Dy=s(Hf);kme=n(Dy,"STRONG",{});var CRe=s(kme);Iso=r(CRe,"data2vec-audio"),CRe.forEach(t),Nso=r(Dy," \u2014 "),LI=n(Dy,"A",{href:!0});var wRe=s(LI);qso=r(wRe,"Data2VecAudioConfig"),wRe.forEach(t),jso=r(Dy," (Data2VecAudio model)"),Dy.forEach(t),Dso=i(L),Jf=n(L,"LI",{});var Gy=s(Jf);Sme=n(Gy,"STRONG",{});var ARe=s(Sme);Gso=r(ARe,"data2vec-text"),ARe.forEach(t),Oso=r(Gy," \u2014 "),yI=n(Gy,"A",{href:!0});var LRe=s(yI);Vso=r(LRe,"Data2VecTextConfig"),LRe.forEach(t),Xso=r(Gy," (Data2VecText model)"),Gy.forEach(t),zso=i(L),Yf=n(L,"LI",{});var Oy=s(Yf);Rme=n(Oy,"STRONG",{});var yRe=s(Rme);Qso=r(yRe,"data2vec-vision"),yRe.forEach(t),Wso=r(Oy," \u2014 "),xI=n(Oy,"A",{href:!0});var xRe=s(xI);Uso=r(xRe,"Data2VecVisionConfig"),xRe.forEach(t),Hso=r(Oy," (Data2VecVision model)"),Oy.forEach(t),Jso=i(L),Kf=n(L,"LI",{});var Vy=s(Kf);Pme=n(Vy,"STRONG",{});var $Re=s(Pme);Yso=r($Re,"deberta"),$Re.forEach(t),Kso=r(Vy," \u2014 "),$I=n(Vy,"A",{href:!0});var kRe=s($I);Zso=r(kRe,"DebertaConfig"),kRe.forEach(t),elo=r(Vy," (DeBERTa model)"),Vy.forEach(t),olo=i(L),Zf=n(L,"LI",{});var Xy=s(Zf);Bme=n(Xy,"STRONG",{});var SRe=s(Bme);rlo=r(SRe,"deberta-v2"),SRe.forEach(t),tlo=r(Xy," \u2014 "),kI=n(Xy,"A",{href:!0});var RRe=s(kI);alo=r(RRe,"DebertaV2Config"),RRe.forEach(t),nlo=r(Xy," (DeBERTa-v2 model)"),Xy.forEach(t),slo=i(L),eg=n(L,"LI",{});var zy=s(eg);Ime=n(zy,"STRONG",{});var PRe=s(Ime);llo=r(PRe,"decision_transformer"),PRe.forEach(t),ilo=r(zy," \u2014 "),SI=n(zy,"A",{href:!0});var BRe=s(SI);dlo=r(BRe,"DecisionTransformerConfig"),BRe.forEach(t),mlo=r(zy," (Decision Transformer model)"),zy.forEach(t),clo=i(L),og=n(L,"LI",{});var Qy=s(og);Nme=n(Qy,"STRONG",{});var IRe=s(Nme);flo=r(IRe,"deformable_detr"),IRe.forEach(t),glo=r(Qy," \u2014 "),RI=n(Qy,"A",{href:!0});var NRe=s(RI);hlo=r(NRe,"DeformableDetrConfig"),NRe.forEach(t),ulo=r(Qy," (Deformable DETR model)"),Qy.forEach(t),plo=i(L),rg=n(L,"LI",{});var qRe=s(rg);qme=n(qRe,"STRONG",{});var GMt=s(qme);_lo=r(GMt,"deit"),GMt.forEach(t),blo=r(qRe," \u2014 "),PI=n(qRe,"A",{href:!0});var OMt=s(PI);vlo=r(OMt,"DeiTConfig"),OMt.forEach(t),Flo=r(qRe," (DeiT model)"),qRe.forEach(t),Tlo=i(L),tg=n(L,"LI",{});var jRe=s(tg);jme=n(jRe,"STRONG",{});var VMt=s(jme);Mlo=r(VMt,"detr"),VMt.forEach(t),Elo=r(jRe," \u2014 "),BI=n(jRe,"A",{href:!0});var XMt=s(BI);Clo=r(XMt,"DetrConfig"),XMt.forEach(t),wlo=r(jRe," (DETR model)"),jRe.forEach(t),Alo=i(L),ag=n(L,"LI",{});var DRe=s(ag);Dme=n(DRe,"STRONG",{});var zMt=s(Dme);Llo=r(zMt,"distilbert"),zMt.forEach(t),ylo=r(DRe," \u2014 "),II=n(DRe,"A",{href:!0});var QMt=s(II);xlo=r(QMt,"DistilBertConfig"),QMt.forEach(t),$lo=r(DRe," (DistilBERT model)"),DRe.forEach(t),klo=i(L),ng=n(L,"LI",{});var GRe=s(ng);Gme=n(GRe,"STRONG",{});var WMt=s(Gme);Slo=r(WMt,"donut-swin"),WMt.forEach(t),Rlo=r(GRe," \u2014 "),NI=n(GRe,"A",{href:!0});var UMt=s(NI);Plo=r(UMt,"DonutSwinConfig"),UMt.forEach(t),Blo=r(GRe," (DonutSwin model)"),GRe.forEach(t),Ilo=i(L),sg=n(L,"LI",{});var ORe=s(sg);Ome=n(ORe,"STRONG",{});var HMt=s(Ome);Nlo=r(HMt,"dpr"),HMt.forEach(t),qlo=r(ORe," \u2014 "),qI=n(ORe,"A",{href:!0});var JMt=s(qI);jlo=r(JMt,"DPRConfig"),JMt.forEach(t),Dlo=r(ORe," (DPR model)"),ORe.forEach(t),Glo=i(L),lg=n(L,"LI",{});var VRe=s(lg);Vme=n(VRe,"STRONG",{});var YMt=s(Vme);Olo=r(YMt,"dpt"),YMt.forEach(t),Vlo=r(VRe," \u2014 "),jI=n(VRe,"A",{href:!0});var KMt=s(jI);Xlo=r(KMt,"DPTConfig"),KMt.forEach(t),zlo=r(VRe," (DPT model)"),VRe.forEach(t),Qlo=i(L),ig=n(L,"LI",{});var XRe=s(ig);Xme=n(XRe,"STRONG",{});var ZMt=s(Xme);Wlo=r(ZMt,"electra"),ZMt.forEach(t),Ulo=r(XRe," \u2014 "),DI=n(XRe,"A",{href:!0});var eEt=s(DI);Hlo=r(eEt,"ElectraConfig"),eEt.forEach(t),Jlo=r(XRe," (ELECTRA model)"),XRe.forEach(t),Ylo=i(L),dg=n(L,"LI",{});var zRe=s(dg);zme=n(zRe,"STRONG",{});var oEt=s(zme);Klo=r(oEt,"encoder-decoder"),oEt.forEach(t),Zlo=r(zRe," \u2014 "),GI=n(zRe,"A",{href:!0});var rEt=s(GI);eio=r(rEt,"EncoderDecoderConfig"),rEt.forEach(t),oio=r(zRe," (Encoder decoder model)"),zRe.forEach(t),rio=i(L),mg=n(L,"LI",{});var QRe=s(mg);Qme=n(QRe,"STRONG",{});var tEt=s(Qme);tio=r(tEt,"ernie"),tEt.forEach(t),aio=r(QRe," \u2014 "),OI=n(QRe,"A",{href:!0});var aEt=s(OI);nio=r(aEt,"ErnieConfig"),aEt.forEach(t),sio=r(QRe," (ERNIE model)"),QRe.forEach(t),lio=i(L),cg=n(L,"LI",{});var WRe=s(cg);Wme=n(WRe,"STRONG",{});var nEt=s(Wme);iio=r(nEt,"esm"),nEt.forEach(t),dio=r(WRe," \u2014 "),VI=n(WRe,"A",{href:!0});var sEt=s(VI);mio=r(sEt,"EsmConfig"),sEt.forEach(t),cio=r(WRe," (ESM model)"),WRe.forEach(t),fio=i(L),fg=n(L,"LI",{});var URe=s(fg);Ume=n(URe,"STRONG",{});var lEt=s(Ume);gio=r(lEt,"flaubert"),lEt.forEach(t),hio=r(URe," \u2014 "),XI=n(URe,"A",{href:!0});var iEt=s(XI);uio=r(iEt,"FlaubertConfig"),iEt.forEach(t),pio=r(URe," (FlauBERT model)"),URe.forEach(t),_io=i(L),gg=n(L,"LI",{});var HRe=s(gg);Hme=n(HRe,"STRONG",{});var dEt=s(Hme);bio=r(dEt,"flava"),dEt.forEach(t),vio=r(HRe," \u2014 "),zI=n(HRe,"A",{href:!0});var mEt=s(zI);Fio=r(mEt,"FlavaConfig"),mEt.forEach(t),Tio=r(HRe," (FLAVA model)"),HRe.forEach(t),Mio=i(L),hg=n(L,"LI",{});var JRe=s(hg);Jme=n(JRe,"STRONG",{});var cEt=s(Jme);Eio=r(cEt,"fnet"),cEt.forEach(t),Cio=r(JRe," \u2014 "),QI=n(JRe,"A",{href:!0});var fEt=s(QI);wio=r(fEt,"FNetConfig"),fEt.forEach(t),Aio=r(JRe," (FNet model)"),JRe.forEach(t),Lio=i(L),ug=n(L,"LI",{});var YRe=s(ug);Yme=n(YRe,"STRONG",{});var gEt=s(Yme);yio=r(gEt,"fsmt"),gEt.forEach(t),xio=r(YRe," \u2014 "),WI=n(YRe,"A",{href:!0});var hEt=s(WI);$io=r(hEt,"FSMTConfig"),hEt.forEach(t),kio=r(YRe," (FairSeq Machine-Translation model)"),YRe.forEach(t),Sio=i(L),pg=n(L,"LI",{});var KRe=s(pg);Kme=n(KRe,"STRONG",{});var uEt=s(Kme);Rio=r(uEt,"funnel"),uEt.forEach(t),Pio=r(KRe," \u2014 "),UI=n(KRe,"A",{href:!0});var pEt=s(UI);Bio=r(pEt,"FunnelConfig"),pEt.forEach(t),Iio=r(KRe," (Funnel Transformer model)"),KRe.forEach(t),Nio=i(L),_g=n(L,"LI",{});var ZRe=s(_g);Zme=n(ZRe,"STRONG",{});var _Et=s(Zme);qio=r(_Et,"glpn"),_Et.forEach(t),jio=r(ZRe," \u2014 "),HI=n(ZRe,"A",{href:!0});var bEt=s(HI);Dio=r(bEt,"GLPNConfig"),bEt.forEach(t),Gio=r(ZRe," (GLPN model)"),ZRe.forEach(t),Oio=i(L),bg=n(L,"LI",{});var ePe=s(bg);ece=n(ePe,"STRONG",{});var vEt=s(ece);Vio=r(vEt,"gpt2"),vEt.forEach(t),Xio=r(ePe," \u2014 "),JI=n(ePe,"A",{href:!0});var FEt=s(JI);zio=r(FEt,"GPT2Config"),FEt.forEach(t),Qio=r(ePe," (OpenAI GPT-2 model)"),ePe.forEach(t),Wio=i(L),vg=n(L,"LI",{});var oPe=s(vg);oce=n(oPe,"STRONG",{});var TEt=s(oce);Uio=r(TEt,"gpt_neo"),TEt.forEach(t),Hio=r(oPe," \u2014 "),YI=n(oPe,"A",{href:!0});var MEt=s(YI);Jio=r(MEt,"GPTNeoConfig"),MEt.forEach(t),Yio=r(oPe," (GPT Neo model)"),oPe.forEach(t),Kio=i(L),Fg=n(L,"LI",{});var rPe=s(Fg);rce=n(rPe,"STRONG",{});var EEt=s(rce);Zio=r(EEt,"gpt_neox"),EEt.forEach(t),edo=r(rPe," \u2014 "),KI=n(rPe,"A",{href:!0});var CEt=s(KI);odo=r(CEt,"GPTNeoXConfig"),CEt.forEach(t),rdo=r(rPe," (GPT NeoX model)"),rPe.forEach(t),tdo=i(L),Tg=n(L,"LI",{});var tPe=s(Tg);tce=n(tPe,"STRONG",{});var wEt=s(tce);ado=r(wEt,"gpt_neox_japanese"),wEt.forEach(t),ndo=r(tPe," \u2014 "),ZI=n(tPe,"A",{href:!0});var AEt=s(ZI);sdo=r(AEt,"GPTNeoXJapaneseConfig"),AEt.forEach(t),ldo=r(tPe," (GPT NeoX Japanese model)"),tPe.forEach(t),ido=i(L),Mg=n(L,"LI",{});var aPe=s(Mg);ace=n(aPe,"STRONG",{});var LEt=s(ace);ddo=r(LEt,"gptj"),LEt.forEach(t),mdo=r(aPe," \u2014 "),eN=n(aPe,"A",{href:!0});var yEt=s(eN);cdo=r(yEt,"GPTJConfig"),yEt.forEach(t),fdo=r(aPe," (GPT-J model)"),aPe.forEach(t),gdo=i(L),Eg=n(L,"LI",{});var nPe=s(Eg);nce=n(nPe,"STRONG",{});var xEt=s(nce);hdo=r(xEt,"groupvit"),xEt.forEach(t),udo=r(nPe," \u2014 "),oN=n(nPe,"A",{href:!0});var $Et=s(oN);pdo=r($Et,"GroupViTConfig"),$Et.forEach(t),_do=r(nPe," (GroupViT model)"),nPe.forEach(t),bdo=i(L),Cg=n(L,"LI",{});var sPe=s(Cg);sce=n(sPe,"STRONG",{});var kEt=s(sce);vdo=r(kEt,"hubert"),kEt.forEach(t),Fdo=r(sPe," \u2014 "),rN=n(sPe,"A",{href:!0});var SEt=s(rN);Tdo=r(SEt,"HubertConfig"),SEt.forEach(t),Mdo=r(sPe," (Hubert model)"),sPe.forEach(t),Edo=i(L),wg=n(L,"LI",{});var lPe=s(wg);lce=n(lPe,"STRONG",{});var REt=s(lce);Cdo=r(REt,"ibert"),REt.forEach(t),wdo=r(lPe," \u2014 "),tN=n(lPe,"A",{href:!0});var PEt=s(tN);Ado=r(PEt,"IBertConfig"),PEt.forEach(t),Ldo=r(lPe," (I-BERT model)"),lPe.forEach(t),ydo=i(L),Ag=n(L,"LI",{});var iPe=s(Ag);ice=n(iPe,"STRONG",{});var BEt=s(ice);xdo=r(BEt,"imagegpt"),BEt.forEach(t),$do=r(iPe," \u2014 "),aN=n(iPe,"A",{href:!0});var IEt=s(aN);kdo=r(IEt,"ImageGPTConfig"),IEt.forEach(t),Sdo=r(iPe," (ImageGPT model)"),iPe.forEach(t),Rdo=i(L),Lg=n(L,"LI",{});var dPe=s(Lg);dce=n(dPe,"STRONG",{});var NEt=s(dce);Pdo=r(NEt,"layoutlm"),NEt.forEach(t),Bdo=r(dPe," \u2014 "),nN=n(dPe,"A",{href:!0});var qEt=s(nN);Ido=r(qEt,"LayoutLMConfig"),qEt.forEach(t),Ndo=r(dPe," (LayoutLM model)"),dPe.forEach(t),qdo=i(L),yg=n(L,"LI",{});var mPe=s(yg);mce=n(mPe,"STRONG",{});var jEt=s(mce);jdo=r(jEt,"layoutlmv2"),jEt.forEach(t),Ddo=r(mPe," \u2014 "),sN=n(mPe,"A",{href:!0});var DEt=s(sN);Gdo=r(DEt,"LayoutLMv2Config"),DEt.forEach(t),Odo=r(mPe," (LayoutLMv2 model)"),mPe.forEach(t),Vdo=i(L),xg=n(L,"LI",{});var cPe=s(xg);cce=n(cPe,"STRONG",{});var GEt=s(cce);Xdo=r(GEt,"layoutlmv3"),GEt.forEach(t),zdo=r(cPe," \u2014 "),lN=n(cPe,"A",{href:!0});var OEt=s(lN);Qdo=r(OEt,"LayoutLMv3Config"),OEt.forEach(t),Wdo=r(cPe," (LayoutLMv3 model)"),cPe.forEach(t),Udo=i(L),$g=n(L,"LI",{});var fPe=s($g);fce=n(fPe,"STRONG",{});var VEt=s(fce);Hdo=r(VEt,"led"),VEt.forEach(t),Jdo=r(fPe," \u2014 "),iN=n(fPe,"A",{href:!0});var XEt=s(iN);Ydo=r(XEt,"LEDConfig"),XEt.forEach(t),Kdo=r(fPe," (LED model)"),fPe.forEach(t),Zdo=i(L),kg=n(L,"LI",{});var gPe=s(kg);gce=n(gPe,"STRONG",{});var zEt=s(gce);emo=r(zEt,"levit"),zEt.forEach(t),omo=r(gPe," \u2014 "),dN=n(gPe,"A",{href:!0});var QEt=s(dN);rmo=r(QEt,"LevitConfig"),QEt.forEach(t),tmo=r(gPe," (LeViT model)"),gPe.forEach(t),amo=i(L),Sg=n(L,"LI",{});var hPe=s(Sg);hce=n(hPe,"STRONG",{});var WEt=s(hce);nmo=r(WEt,"longformer"),WEt.forEach(t),smo=r(hPe," \u2014 "),mN=n(hPe,"A",{href:!0});var UEt=s(mN);lmo=r(UEt,"LongformerConfig"),UEt.forEach(t),imo=r(hPe," (Longformer model)"),hPe.forEach(t),dmo=i(L),Rg=n(L,"LI",{});var uPe=s(Rg);uce=n(uPe,"STRONG",{});var HEt=s(uce);mmo=r(HEt,"longt5"),HEt.forEach(t),cmo=r(uPe," \u2014 "),cN=n(uPe,"A",{href:!0});var JEt=s(cN);fmo=r(JEt,"LongT5Config"),JEt.forEach(t),gmo=r(uPe," (LongT5 model)"),uPe.forEach(t),hmo=i(L),Pg=n(L,"LI",{});var pPe=s(Pg);pce=n(pPe,"STRONG",{});var YEt=s(pce);umo=r(YEt,"luke"),YEt.forEach(t),pmo=r(pPe," \u2014 "),fN=n(pPe,"A",{href:!0});var KEt=s(fN);_mo=r(KEt,"LukeConfig"),KEt.forEach(t),bmo=r(pPe," (LUKE model)"),pPe.forEach(t),vmo=i(L),Bg=n(L,"LI",{});var _Pe=s(Bg);_ce=n(_Pe,"STRONG",{});var ZEt=s(_ce);Fmo=r(ZEt,"lxmert"),ZEt.forEach(t),Tmo=r(_Pe," \u2014 "),gN=n(_Pe,"A",{href:!0});var e4t=s(gN);Mmo=r(e4t,"LxmertConfig"),e4t.forEach(t),Emo=r(_Pe," (LXMERT model)"),_Pe.forEach(t),Cmo=i(L),Ig=n(L,"LI",{});var bPe=s(Ig);bce=n(bPe,"STRONG",{});var o4t=s(bce);wmo=r(o4t,"m2m_100"),o4t.forEach(t),Amo=r(bPe," \u2014 "),hN=n(bPe,"A",{href:!0});var r4t=s(hN);Lmo=r(r4t,"M2M100Config"),r4t.forEach(t),ymo=r(bPe," (M2M100 model)"),bPe.forEach(t),xmo=i(L),Ng=n(L,"LI",{});var vPe=s(Ng);vce=n(vPe,"STRONG",{});var t4t=s(vce);$mo=r(t4t,"marian"),t4t.forEach(t),kmo=r(vPe," \u2014 "),uN=n(vPe,"A",{href:!0});var a4t=s(uN);Smo=r(a4t,"MarianConfig"),a4t.forEach(t),Rmo=r(vPe," (Marian model)"),vPe.forEach(t),Pmo=i(L),qg=n(L,"LI",{});var FPe=s(qg);Fce=n(FPe,"STRONG",{});var n4t=s(Fce);Bmo=r(n4t,"markuplm"),n4t.forEach(t),Imo=r(FPe," \u2014 "),pN=n(FPe,"A",{href:!0});var s4t=s(pN);Nmo=r(s4t,"MarkupLMConfig"),s4t.forEach(t),qmo=r(FPe," (MarkupLM model)"),FPe.forEach(t),jmo=i(L),jg=n(L,"LI",{});var TPe=s(jg);Tce=n(TPe,"STRONG",{});var l4t=s(Tce);Dmo=r(l4t,"maskformer"),l4t.forEach(t),Gmo=r(TPe," \u2014 "),_N=n(TPe,"A",{href:!0});var i4t=s(_N);Omo=r(i4t,"MaskFormerConfig"),i4t.forEach(t),Vmo=r(TPe," (MaskFormer model)"),TPe.forEach(t),Xmo=i(L),Dg=n(L,"LI",{});var MPe=s(Dg);Mce=n(MPe,"STRONG",{});var d4t=s(Mce);zmo=r(d4t,"mbart"),d4t.forEach(t),Qmo=r(MPe," \u2014 "),bN=n(MPe,"A",{href:!0});var m4t=s(bN);Wmo=r(m4t,"MBartConfig"),m4t.forEach(t),Umo=r(MPe," (mBART model)"),MPe.forEach(t),Hmo=i(L),Gg=n(L,"LI",{});var EPe=s(Gg);Ece=n(EPe,"STRONG",{});var c4t=s(Ece);Jmo=r(c4t,"mctct"),c4t.forEach(t),Ymo=r(EPe," \u2014 "),vN=n(EPe,"A",{href:!0});var f4t=s(vN);Kmo=r(f4t,"MCTCTConfig"),f4t.forEach(t),Zmo=r(EPe," (M-CTC-T model)"),EPe.forEach(t),eco=i(L),Og=n(L,"LI",{});var CPe=s(Og);Cce=n(CPe,"STRONG",{});var g4t=s(Cce);oco=r(g4t,"megatron-bert"),g4t.forEach(t),rco=r(CPe," \u2014 "),FN=n(CPe,"A",{href:!0});var h4t=s(FN);tco=r(h4t,"MegatronBertConfig"),h4t.forEach(t),aco=r(CPe," (Megatron-BERT model)"),CPe.forEach(t),nco=i(L),Vg=n(L,"LI",{});var wPe=s(Vg);wce=n(wPe,"STRONG",{});var u4t=s(wce);sco=r(u4t,"mobilebert"),u4t.forEach(t),lco=r(wPe," \u2014 "),TN=n(wPe,"A",{href:!0});var p4t=s(TN);ico=r(p4t,"MobileBertConfig"),p4t.forEach(t),dco=r(wPe," (MobileBERT model)"),wPe.forEach(t),mco=i(L),Xg=n(L,"LI",{});var APe=s(Xg);Ace=n(APe,"STRONG",{});var _4t=s(Ace);cco=r(_4t,"mobilevit"),_4t.forEach(t),fco=r(APe," \u2014 "),MN=n(APe,"A",{href:!0});var b4t=s(MN);gco=r(b4t,"MobileViTConfig"),b4t.forEach(t),hco=r(APe," (MobileViT model)"),APe.forEach(t),uco=i(L),zg=n(L,"LI",{});var LPe=s(zg);Lce=n(LPe,"STRONG",{});var v4t=s(Lce);pco=r(v4t,"mpnet"),v4t.forEach(t),_co=r(LPe," \u2014 "),EN=n(LPe,"A",{href:!0});var F4t=s(EN);bco=r(F4t,"MPNetConfig"),F4t.forEach(t),vco=r(LPe," (MPNet model)"),LPe.forEach(t),Fco=i(L),Qg=n(L,"LI",{});var yPe=s(Qg);yce=n(yPe,"STRONG",{});var T4t=s(yce);Tco=r(T4t,"mt5"),T4t.forEach(t),Mco=r(yPe," \u2014 "),CN=n(yPe,"A",{href:!0});var M4t=s(CN);Eco=r(M4t,"MT5Config"),M4t.forEach(t),Cco=r(yPe," (MT5 model)"),yPe.forEach(t),wco=i(L),Wg=n(L,"LI",{});var xPe=s(Wg);xce=n(xPe,"STRONG",{});var E4t=s(xce);Aco=r(E4t,"mvp"),E4t.forEach(t),Lco=r(xPe," \u2014 "),wN=n(xPe,"A",{href:!0});var C4t=s(wN);yco=r(C4t,"MvpConfig"),C4t.forEach(t),xco=r(xPe," (MVP model)"),xPe.forEach(t),$co=i(L),Ug=n(L,"LI",{});var $Pe=s(Ug);$ce=n($Pe,"STRONG",{});var w4t=s($ce);kco=r(w4t,"nezha"),w4t.forEach(t),Sco=r($Pe," \u2014 "),AN=n($Pe,"A",{href:!0});var A4t=s(AN);Rco=r(A4t,"NezhaConfig"),A4t.forEach(t),Pco=r($Pe," (Nezha model)"),$Pe.forEach(t),Bco=i(L),Hg=n(L,"LI",{});var kPe=s(Hg);kce=n(kPe,"STRONG",{});var L4t=s(kce);Ico=r(L4t,"nystromformer"),L4t.forEach(t),Nco=r(kPe," \u2014 "),LN=n(kPe,"A",{href:!0});var y4t=s(LN);qco=r(y4t,"NystromformerConfig"),y4t.forEach(t),jco=r(kPe," (Nystr\xF6mformer model)"),kPe.forEach(t),Dco=i(L),Jg=n(L,"LI",{});var SPe=s(Jg);Sce=n(SPe,"STRONG",{});var x4t=s(Sce);Gco=r(x4t,"openai-gpt"),x4t.forEach(t),Oco=r(SPe," \u2014 "),yN=n(SPe,"A",{href:!0});var $4t=s(yN);Vco=r($4t,"OpenAIGPTConfig"),$4t.forEach(t),Xco=r(SPe," (OpenAI GPT model)"),SPe.forEach(t),zco=i(L),Yg=n(L,"LI",{});var RPe=s(Yg);Rce=n(RPe,"STRONG",{});var k4t=s(Rce);Qco=r(k4t,"opt"),k4t.forEach(t),Wco=r(RPe," \u2014 "),xN=n(RPe,"A",{href:!0});var S4t=s(xN);Uco=r(S4t,"OPTConfig"),S4t.forEach(t),Hco=r(RPe," (OPT model)"),RPe.forEach(t),Jco=i(L),Kg=n(L,"LI",{});var PPe=s(Kg);Pce=n(PPe,"STRONG",{});var R4t=s(Pce);Yco=r(R4t,"owlvit"),R4t.forEach(t),Kco=r(PPe," \u2014 "),$N=n(PPe,"A",{href:!0});var P4t=s($N);Zco=r(P4t,"OwlViTConfig"),P4t.forEach(t),efo=r(PPe," (OWL-ViT model)"),PPe.forEach(t),ofo=i(L),Zg=n(L,"LI",{});var BPe=s(Zg);Bce=n(BPe,"STRONG",{});var B4t=s(Bce);rfo=r(B4t,"pegasus"),B4t.forEach(t),tfo=r(BPe," \u2014 "),kN=n(BPe,"A",{href:!0});var I4t=s(kN);afo=r(I4t,"PegasusConfig"),I4t.forEach(t),nfo=r(BPe," (Pegasus model)"),BPe.forEach(t),sfo=i(L),eh=n(L,"LI",{});var IPe=s(eh);Ice=n(IPe,"STRONG",{});var N4t=s(Ice);lfo=r(N4t,"pegasus_x"),N4t.forEach(t),ifo=r(IPe," \u2014 "),SN=n(IPe,"A",{href:!0});var q4t=s(SN);dfo=r(q4t,"PegasusXConfig"),q4t.forEach(t),mfo=r(IPe," (PEGASUS-X model)"),IPe.forEach(t),cfo=i(L),oh=n(L,"LI",{});var NPe=s(oh);Nce=n(NPe,"STRONG",{});var j4t=s(Nce);ffo=r(j4t,"perceiver"),j4t.forEach(t),gfo=r(NPe," \u2014 "),RN=n(NPe,"A",{href:!0});var D4t=s(RN);hfo=r(D4t,"PerceiverConfig"),D4t.forEach(t),ufo=r(NPe," (Perceiver model)"),NPe.forEach(t),pfo=i(L),rh=n(L,"LI",{});var qPe=s(rh);qce=n(qPe,"STRONG",{});var G4t=s(qce);_fo=r(G4t,"plbart"),G4t.forEach(t),bfo=r(qPe," \u2014 "),PN=n(qPe,"A",{href:!0});var O4t=s(PN);vfo=r(O4t,"PLBartConfig"),O4t.forEach(t),Ffo=r(qPe," (PLBart model)"),qPe.forEach(t),Tfo=i(L),th=n(L,"LI",{});var jPe=s(th);jce=n(jPe,"STRONG",{});var V4t=s(jce);Mfo=r(V4t,"poolformer"),V4t.forEach(t),Efo=r(jPe," \u2014 "),BN=n(jPe,"A",{href:!0});var X4t=s(BN);Cfo=r(X4t,"PoolFormerConfig"),X4t.forEach(t),wfo=r(jPe," (PoolFormer model)"),jPe.forEach(t),Afo=i(L),ah=n(L,"LI",{});var DPe=s(ah);Dce=n(DPe,"STRONG",{});var z4t=s(Dce);Lfo=r(z4t,"prophetnet"),z4t.forEach(t),yfo=r(DPe," \u2014 "),IN=n(DPe,"A",{href:!0});var Q4t=s(IN);xfo=r(Q4t,"ProphetNetConfig"),Q4t.forEach(t),$fo=r(DPe," (ProphetNet model)"),DPe.forEach(t),kfo=i(L),nh=n(L,"LI",{});var GPe=s(nh);Gce=n(GPe,"STRONG",{});var W4t=s(Gce);Sfo=r(W4t,"qdqbert"),W4t.forEach(t),Rfo=r(GPe," \u2014 "),NN=n(GPe,"A",{href:!0});var U4t=s(NN);Pfo=r(U4t,"QDQBertConfig"),U4t.forEach(t),Bfo=r(GPe," (QDQBert model)"),GPe.forEach(t),Ifo=i(L),sh=n(L,"LI",{});var OPe=s(sh);Oce=n(OPe,"STRONG",{});var H4t=s(Oce);Nfo=r(H4t,"rag"),H4t.forEach(t),qfo=r(OPe," \u2014 "),qN=n(OPe,"A",{href:!0});var J4t=s(qN);jfo=r(J4t,"RagConfig"),J4t.forEach(t),Dfo=r(OPe," (RAG model)"),OPe.forEach(t),Gfo=i(L),lh=n(L,"LI",{});var VPe=s(lh);Vce=n(VPe,"STRONG",{});var Y4t=s(Vce);Ofo=r(Y4t,"realm"),Y4t.forEach(t),Vfo=r(VPe," \u2014 "),jN=n(VPe,"A",{href:!0});var K4t=s(jN);Xfo=r(K4t,"RealmConfig"),K4t.forEach(t),zfo=r(VPe," (REALM model)"),VPe.forEach(t),Qfo=i(L),ih=n(L,"LI",{});var XPe=s(ih);Xce=n(XPe,"STRONG",{});var Z4t=s(Xce);Wfo=r(Z4t,"reformer"),Z4t.forEach(t),Ufo=r(XPe," \u2014 "),DN=n(XPe,"A",{href:!0});var eCt=s(DN);Hfo=r(eCt,"ReformerConfig"),eCt.forEach(t),Jfo=r(XPe," (Reformer model)"),XPe.forEach(t),Yfo=i(L),dh=n(L,"LI",{});var zPe=s(dh);zce=n(zPe,"STRONG",{});var oCt=s(zce);Kfo=r(oCt,"regnet"),oCt.forEach(t),Zfo=r(zPe," \u2014 "),GN=n(zPe,"A",{href:!0});var rCt=s(GN);ego=r(rCt,"RegNetConfig"),rCt.forEach(t),ogo=r(zPe," (RegNet model)"),zPe.forEach(t),rgo=i(L),mh=n(L,"LI",{});var QPe=s(mh);Qce=n(QPe,"STRONG",{});var tCt=s(Qce);tgo=r(tCt,"rembert"),tCt.forEach(t),ago=r(QPe," \u2014 "),ON=n(QPe,"A",{href:!0});var aCt=s(ON);ngo=r(aCt,"RemBertConfig"),aCt.forEach(t),sgo=r(QPe," (RemBERT model)"),QPe.forEach(t),lgo=i(L),ch=n(L,"LI",{});var WPe=s(ch);Wce=n(WPe,"STRONG",{});var nCt=s(Wce);igo=r(nCt,"resnet"),nCt.forEach(t),dgo=r(WPe," \u2014 "),VN=n(WPe,"A",{href:!0});var sCt=s(VN);mgo=r(sCt,"ResNetConfig"),sCt.forEach(t),cgo=r(WPe," (ResNet model)"),WPe.forEach(t),fgo=i(L),fh=n(L,"LI",{});var UPe=s(fh);Uce=n(UPe,"STRONG",{});var lCt=s(Uce);ggo=r(lCt,"retribert"),lCt.forEach(t),hgo=r(UPe," \u2014 "),XN=n(UPe,"A",{href:!0});var iCt=s(XN);ugo=r(iCt,"RetriBertConfig"),iCt.forEach(t),pgo=r(UPe," (RetriBERT model)"),UPe.forEach(t),_go=i(L),gh=n(L,"LI",{});var HPe=s(gh);Hce=n(HPe,"STRONG",{});var dCt=s(Hce);bgo=r(dCt,"roberta"),dCt.forEach(t),vgo=r(HPe," \u2014 "),zN=n(HPe,"A",{href:!0});var mCt=s(zN);Fgo=r(mCt,"RobertaConfig"),mCt.forEach(t),Tgo=r(HPe," (RoBERTa model)"),HPe.forEach(t),Mgo=i(L),hh=n(L,"LI",{});var JPe=s(hh);Jce=n(JPe,"STRONG",{});var cCt=s(Jce);Ego=r(cCt,"roformer"),cCt.forEach(t),Cgo=r(JPe," \u2014 "),QN=n(JPe,"A",{href:!0});var fCt=s(QN);wgo=r(fCt,"RoFormerConfig"),fCt.forEach(t),Ago=r(JPe," (RoFormer model)"),JPe.forEach(t),Lgo=i(L),uh=n(L,"LI",{});var YPe=s(uh);Yce=n(YPe,"STRONG",{});var gCt=s(Yce);ygo=r(gCt,"segformer"),gCt.forEach(t),xgo=r(YPe," \u2014 "),WN=n(YPe,"A",{href:!0});var hCt=s(WN);$go=r(hCt,"SegformerConfig"),hCt.forEach(t),kgo=r(YPe," (SegFormer model)"),YPe.forEach(t),Sgo=i(L),ph=n(L,"LI",{});var KPe=s(ph);Kce=n(KPe,"STRONG",{});var uCt=s(Kce);Rgo=r(uCt,"sew"),uCt.forEach(t),Pgo=r(KPe," \u2014 "),UN=n(KPe,"A",{href:!0});var pCt=s(UN);Bgo=r(pCt,"SEWConfig"),pCt.forEach(t),Igo=r(KPe," (SEW model)"),KPe.forEach(t),Ngo=i(L),_h=n(L,"LI",{});var ZPe=s(_h);Zce=n(ZPe,"STRONG",{});var _Ct=s(Zce);qgo=r(_Ct,"sew-d"),_Ct.forEach(t),jgo=r(ZPe," \u2014 "),HN=n(ZPe,"A",{href:!0});var bCt=s(HN);Dgo=r(bCt,"SEWDConfig"),bCt.forEach(t),Ggo=r(ZPe," (SEW-D model)"),ZPe.forEach(t),Ogo=i(L),bh=n(L,"LI",{});var eBe=s(bh);efe=n(eBe,"STRONG",{});var vCt=s(efe);Vgo=r(vCt,"speech-encoder-decoder"),vCt.forEach(t),Xgo=r(eBe," \u2014 "),JN=n(eBe,"A",{href:!0});var FCt=s(JN);zgo=r(FCt,"SpeechEncoderDecoderConfig"),FCt.forEach(t),Qgo=r(eBe," (Speech Encoder decoder model)"),eBe.forEach(t),Wgo=i(L),vh=n(L,"LI",{});var oBe=s(vh);ofe=n(oBe,"STRONG",{});var TCt=s(ofe);Ugo=r(TCt,"speech_to_text"),TCt.forEach(t),Hgo=r(oBe," \u2014 "),YN=n(oBe,"A",{href:!0});var MCt=s(YN);Jgo=r(MCt,"Speech2TextConfig"),MCt.forEach(t),Ygo=r(oBe," (Speech2Text model)"),oBe.forEach(t),Kgo=i(L),Fh=n(L,"LI",{});var rBe=s(Fh);rfe=n(rBe,"STRONG",{});var ECt=s(rfe);Zgo=r(ECt,"speech_to_text_2"),ECt.forEach(t),eho=r(rBe," \u2014 "),KN=n(rBe,"A",{href:!0});var CCt=s(KN);oho=r(CCt,"Speech2Text2Config"),CCt.forEach(t),rho=r(rBe," (Speech2Text2 model)"),rBe.forEach(t),tho=i(L),Th=n(L,"LI",{});var tBe=s(Th);tfe=n(tBe,"STRONG",{});var wCt=s(tfe);aho=r(wCt,"splinter"),wCt.forEach(t),nho=r(tBe," \u2014 "),ZN=n(tBe,"A",{href:!0});var ACt=s(ZN);sho=r(ACt,"SplinterConfig"),ACt.forEach(t),lho=r(tBe," (Splinter model)"),tBe.forEach(t),iho=i(L),Mh=n(L,"LI",{});var aBe=s(Mh);afe=n(aBe,"STRONG",{});var LCt=s(afe);dho=r(LCt,"squeezebert"),LCt.forEach(t),mho=r(aBe," \u2014 "),eq=n(aBe,"A",{href:!0});var yCt=s(eq);cho=r(yCt,"SqueezeBertConfig"),yCt.forEach(t),fho=r(aBe," (SqueezeBERT model)"),aBe.forEach(t),gho=i(L),Eh=n(L,"LI",{});var nBe=s(Eh);nfe=n(nBe,"STRONG",{});var xCt=s(nfe);hho=r(xCt,"swin"),xCt.forEach(t),uho=r(nBe," \u2014 "),oq=n(nBe,"A",{href:!0});var $Ct=s(oq);pho=r($Ct,"SwinConfig"),$Ct.forEach(t),_ho=r(nBe," (Swin Transformer model)"),nBe.forEach(t),bho=i(L),Ch=n(L,"LI",{});var sBe=s(Ch);sfe=n(sBe,"STRONG",{});var kCt=s(sfe);vho=r(kCt,"swinv2"),kCt.forEach(t),Fho=r(sBe," \u2014 "),rq=n(sBe,"A",{href:!0});var SCt=s(rq);Tho=r(SCt,"Swinv2Config"),SCt.forEach(t),Mho=r(sBe," (Swin Transformer V2 model)"),sBe.forEach(t),Eho=i(L),wh=n(L,"LI",{});var lBe=s(wh);lfe=n(lBe,"STRONG",{});var RCt=s(lfe);Cho=r(RCt,"t5"),RCt.forEach(t),who=r(lBe," \u2014 "),tq=n(lBe,"A",{href:!0});var PCt=s(tq);Aho=r(PCt,"T5Config"),PCt.forEach(t),Lho=r(lBe," (T5 model)"),lBe.forEach(t),yho=i(L),Ah=n(L,"LI",{});var iBe=s(Ah);ife=n(iBe,"STRONG",{});var BCt=s(ife);xho=r(BCt,"tapas"),BCt.forEach(t),$ho=r(iBe," \u2014 "),aq=n(iBe,"A",{href:!0});var ICt=s(aq);kho=r(ICt,"TapasConfig"),ICt.forEach(t),Sho=r(iBe," (TAPAS model)"),iBe.forEach(t),Rho=i(L),Lh=n(L,"LI",{});var dBe=s(Lh);dfe=n(dBe,"STRONG",{});var NCt=s(dfe);Pho=r(NCt,"time_series_transformer"),NCt.forEach(t),Bho=r(dBe," \u2014 "),nq=n(dBe,"A",{href:!0});var qCt=s(nq);Iho=r(qCt,"TimeSeriesTransformerConfig"),qCt.forEach(t),Nho=r(dBe," (Time Series Transformer model)"),dBe.forEach(t),qho=i(L),yh=n(L,"LI",{});var mBe=s(yh);mfe=n(mBe,"STRONG",{});var jCt=s(mfe);jho=r(jCt,"trajectory_transformer"),jCt.forEach(t),Dho=r(mBe," \u2014 "),sq=n(mBe,"A",{href:!0});var DCt=s(sq);Gho=r(DCt,"TrajectoryTransformerConfig"),DCt.forEach(t),Oho=r(mBe," (Trajectory Transformer model)"),mBe.forEach(t),Vho=i(L),xh=n(L,"LI",{});var cBe=s(xh);cfe=n(cBe,"STRONG",{});var GCt=s(cfe);Xho=r(GCt,"transfo-xl"),GCt.forEach(t),zho=r(cBe," \u2014 "),lq=n(cBe,"A",{href:!0});var OCt=s(lq);Qho=r(OCt,"TransfoXLConfig"),OCt.forEach(t),Who=r(cBe," (Transformer-XL model)"),cBe.forEach(t),Uho=i(L),$h=n(L,"LI",{});var fBe=s($h);ffe=n(fBe,"STRONG",{});var VCt=s(ffe);Hho=r(VCt,"trocr"),VCt.forEach(t),Jho=r(fBe," \u2014 "),iq=n(fBe,"A",{href:!0});var XCt=s(iq);Yho=r(XCt,"TrOCRConfig"),XCt.forEach(t),Kho=r(fBe," (TrOCR model)"),fBe.forEach(t),Zho=i(L),kh=n(L,"LI",{});var gBe=s(kh);gfe=n(gBe,"STRONG",{});var zCt=s(gfe);euo=r(zCt,"unispeech"),zCt.forEach(t),ouo=r(gBe," \u2014 "),dq=n(gBe,"A",{href:!0});var QCt=s(dq);ruo=r(QCt,"UniSpeechConfig"),QCt.forEach(t),tuo=r(gBe," (UniSpeech model)"),gBe.forEach(t),auo=i(L),Sh=n(L,"LI",{});var hBe=s(Sh);hfe=n(hBe,"STRONG",{});var WCt=s(hfe);nuo=r(WCt,"unispeech-sat"),WCt.forEach(t),suo=r(hBe," \u2014 "),mq=n(hBe,"A",{href:!0});var UCt=s(mq);luo=r(UCt,"UniSpeechSatConfig"),UCt.forEach(t),iuo=r(hBe," (UniSpeechSat model)"),hBe.forEach(t),duo=i(L),Rh=n(L,"LI",{});var uBe=s(Rh);ufe=n(uBe,"STRONG",{});var HCt=s(ufe);muo=r(HCt,"van"),HCt.forEach(t),cuo=r(uBe," \u2014 "),cq=n(uBe,"A",{href:!0});var JCt=s(cq);fuo=r(JCt,"VanConfig"),JCt.forEach(t),guo=r(uBe," (VAN model)"),uBe.forEach(t),huo=i(L),Ph=n(L,"LI",{});var pBe=s(Ph);pfe=n(pBe,"STRONG",{});var YCt=s(pfe);uuo=r(YCt,"videomae"),YCt.forEach(t),puo=r(pBe," \u2014 "),fq=n(pBe,"A",{href:!0});var KCt=s(fq);_uo=r(KCt,"VideoMAEConfig"),KCt.forEach(t),buo=r(pBe," (VideoMAE model)"),pBe.forEach(t),vuo=i(L),Bh=n(L,"LI",{});var _Be=s(Bh);_fe=n(_Be,"STRONG",{});var ZCt=s(_fe);Fuo=r(ZCt,"vilt"),ZCt.forEach(t),Tuo=r(_Be," \u2014 "),gq=n(_Be,"A",{href:!0});var e3t=s(gq);Muo=r(e3t,"ViltConfig"),e3t.forEach(t),Euo=r(_Be," (ViLT model)"),_Be.forEach(t),Cuo=i(L),Ih=n(L,"LI",{});var bBe=s(Ih);bfe=n(bBe,"STRONG",{});var o3t=s(bfe);wuo=r(o3t,"vision-encoder-decoder"),o3t.forEach(t),Auo=r(bBe," \u2014 "),hq=n(bBe,"A",{href:!0});var r3t=s(hq);Luo=r(r3t,"VisionEncoderDecoderConfig"),r3t.forEach(t),yuo=r(bBe," (Vision Encoder decoder model)"),bBe.forEach(t),xuo=i(L),Nh=n(L,"LI",{});var vBe=s(Nh);vfe=n(vBe,"STRONG",{});var t3t=s(vfe);$uo=r(t3t,"vision-text-dual-encoder"),t3t.forEach(t),kuo=r(vBe," \u2014 "),uq=n(vBe,"A",{href:!0});var a3t=s(uq);Suo=r(a3t,"VisionTextDualEncoderConfig"),a3t.forEach(t),Ruo=r(vBe," (VisionTextDualEncoder model)"),vBe.forEach(t),Puo=i(L),qh=n(L,"LI",{});var FBe=s(qh);Ffe=n(FBe,"STRONG",{});var n3t=s(Ffe);Buo=r(n3t,"visual_bert"),n3t.forEach(t),Iuo=r(FBe," \u2014 "),pq=n(FBe,"A",{href:!0});var s3t=s(pq);Nuo=r(s3t,"VisualBertConfig"),s3t.forEach(t),quo=r(FBe," (VisualBERT model)"),FBe.forEach(t),juo=i(L),jh=n(L,"LI",{});var TBe=s(jh);Tfe=n(TBe,"STRONG",{});var l3t=s(Tfe);Duo=r(l3t,"vit"),l3t.forEach(t),Guo=r(TBe," \u2014 "),_q=n(TBe,"A",{href:!0});var i3t=s(_q);Ouo=r(i3t,"ViTConfig"),i3t.forEach(t),Vuo=r(TBe," (ViT model)"),TBe.forEach(t),Xuo=i(L),Dh=n(L,"LI",{});var MBe=s(Dh);Mfe=n(MBe,"STRONG",{});var d3t=s(Mfe);zuo=r(d3t,"vit_mae"),d3t.forEach(t),Quo=r(MBe," \u2014 "),bq=n(MBe,"A",{href:!0});var m3t=s(bq);Wuo=r(m3t,"ViTMAEConfig"),m3t.forEach(t),Uuo=r(MBe," (ViTMAE model)"),MBe.forEach(t),Huo=i(L),Gh=n(L,"LI",{});var EBe=s(Gh);Efe=n(EBe,"STRONG",{});var c3t=s(Efe);Juo=r(c3t,"vit_msn"),c3t.forEach(t),Yuo=r(EBe," \u2014 "),vq=n(EBe,"A",{href:!0});var f3t=s(vq);Kuo=r(f3t,"ViTMSNConfig"),f3t.forEach(t),Zuo=r(EBe," (ViTMSN model)"),EBe.forEach(t),epo=i(L),Oh=n(L,"LI",{});var CBe=s(Oh);Cfe=n(CBe,"STRONG",{});var g3t=s(Cfe);opo=r(g3t,"wav2vec2"),g3t.forEach(t),rpo=r(CBe," \u2014 "),Fq=n(CBe,"A",{href:!0});var h3t=s(Fq);tpo=r(h3t,"Wav2Vec2Config"),h3t.forEach(t),apo=r(CBe," (Wav2Vec2 model)"),CBe.forEach(t),npo=i(L),Vh=n(L,"LI",{});var wBe=s(Vh);wfe=n(wBe,"STRONG",{});var u3t=s(wfe);spo=r(u3t,"wav2vec2-conformer"),u3t.forEach(t),lpo=r(wBe," \u2014 "),Tq=n(wBe,"A",{href:!0});var p3t=s(Tq);ipo=r(p3t,"Wav2Vec2ConformerConfig"),p3t.forEach(t),dpo=r(wBe," (Wav2Vec2-Conformer model)"),wBe.forEach(t),mpo=i(L),Xh=n(L,"LI",{});var ABe=s(Xh);Afe=n(ABe,"STRONG",{});var _3t=s(Afe);cpo=r(_3t,"wavlm"),_3t.forEach(t),fpo=r(ABe," \u2014 "),Mq=n(ABe,"A",{href:!0});var b3t=s(Mq);gpo=r(b3t,"WavLMConfig"),b3t.forEach(t),hpo=r(ABe," (WavLM model)"),ABe.forEach(t),upo=i(L),zh=n(L,"LI",{});var LBe=s(zh);Lfe=n(LBe,"STRONG",{});var v3t=s(Lfe);ppo=r(v3t,"xclip"),v3t.forEach(t),_po=r(LBe," \u2014 "),Eq=n(LBe,"A",{href:!0});var F3t=s(Eq);bpo=r(F3t,"XCLIPConfig"),F3t.forEach(t),vpo=r(LBe," (X-CLIP model)"),LBe.forEach(t),Fpo=i(L),Qh=n(L,"LI",{});var yBe=s(Qh);yfe=n(yBe,"STRONG",{});var T3t=s(yfe);Tpo=r(T3t,"xglm"),T3t.forEach(t),Mpo=r(yBe," \u2014 "),Cq=n(yBe,"A",{href:!0});var M3t=s(Cq);Epo=r(M3t,"XGLMConfig"),M3t.forEach(t),Cpo=r(yBe," (XGLM model)"),yBe.forEach(t),wpo=i(L),Wh=n(L,"LI",{});var xBe=s(Wh);xfe=n(xBe,"STRONG",{});var E3t=s(xfe);Apo=r(E3t,"xlm"),E3t.forEach(t),Lpo=r(xBe," \u2014 "),wq=n(xBe,"A",{href:!0});var C3t=s(wq);ypo=r(C3t,"XLMConfig"),C3t.forEach(t),xpo=r(xBe," (XLM model)"),xBe.forEach(t),$po=i(L),Uh=n(L,"LI",{});var $Be=s(Uh);$fe=n($Be,"STRONG",{});var w3t=s($fe);kpo=r(w3t,"xlm-prophetnet"),w3t.forEach(t),Spo=r($Be," \u2014 "),Aq=n($Be,"A",{href:!0});var A3t=s(Aq);Rpo=r(A3t,"XLMProphetNetConfig"),A3t.forEach(t),Ppo=r($Be," (XLM-ProphetNet model)"),$Be.forEach(t),Bpo=i(L),Hh=n(L,"LI",{});var kBe=s(Hh);kfe=n(kBe,"STRONG",{});var L3t=s(kfe);Ipo=r(L3t,"xlm-roberta"),L3t.forEach(t),Npo=r(kBe," \u2014 "),Lq=n(kBe,"A",{href:!0});var y3t=s(Lq);qpo=r(y3t,"XLMRobertaConfig"),y3t.forEach(t),jpo=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),Dpo=i(L),Jh=n(L,"LI",{});var SBe=s(Jh);Sfe=n(SBe,"STRONG",{});var x3t=s(Sfe);Gpo=r(x3t,"xlm-roberta-xl"),x3t.forEach(t),Opo=r(SBe," \u2014 "),yq=n(SBe,"A",{href:!0});var $3t=s(yq);Vpo=r($3t,"XLMRobertaXLConfig"),$3t.forEach(t),Xpo=r(SBe," (XLM-RoBERTa-XL model)"),SBe.forEach(t),zpo=i(L),Yh=n(L,"LI",{});var RBe=s(Yh);Rfe=n(RBe,"STRONG",{});var k3t=s(Rfe);Qpo=r(k3t,"xlnet"),k3t.forEach(t),Wpo=r(RBe," \u2014 "),xq=n(RBe,"A",{href:!0});var S3t=s(xq);Upo=r(S3t,"XLNetConfig"),S3t.forEach(t),Hpo=r(RBe," (XLNet model)"),RBe.forEach(t),Jpo=i(L),Kh=n(L,"LI",{});var PBe=s(Kh);Pfe=n(PBe,"STRONG",{});var R3t=s(Pfe);Ypo=r(R3t,"yolos"),R3t.forEach(t),Kpo=r(PBe," \u2014 "),$q=n(PBe,"A",{href:!0});var P3t=s($q);Zpo=r(P3t,"YolosConfig"),P3t.forEach(t),e_o=r(PBe," (YOLOS model)"),PBe.forEach(t),o_o=i(L),Zh=n(L,"LI",{});var BBe=s(Zh);Bfe=n(BBe,"STRONG",{});var B3t=s(Bfe);r_o=r(B3t,"yoso"),B3t.forEach(t),t_o=r(BBe," \u2014 "),kq=n(BBe,"A",{href:!0});var I3t=s(kq);a_o=r(I3t,"YosoConfig"),I3t.forEach(t),n_o=r(BBe," (YOSO model)"),BBe.forEach(t),L.forEach(t),s_o=i(ut),T(eu.$$.fragment,ut),ut.forEach(t),l_o=i(ht),ou=n(ht,"DIV",{class:!0});var aro=s(ou);T(ix.$$.fragment,aro),i_o=i(aro),Ife=n(aro,"P",{});var N3t=s(Ife);d_o=r(N3t,"Register a new configuration for this class."),N3t.forEach(t),aro.forEach(t),ht.forEach(t),YZe=i(c),gd=n(c,"H2",{class:!0});var nro=s(gd);ru=n(nro,"A",{id:!0,class:!0,href:!0});var q3t=s(ru);Nfe=n(q3t,"SPAN",{});var j3t=s(Nfe);T(dx.$$.fragment,j3t),j3t.forEach(t),q3t.forEach(t),m_o=i(nro),qfe=n(nro,"SPAN",{});var D3t=s(qfe);c_o=r(D3t,"AutoTokenizer"),D3t.forEach(t),nro.forEach(t),KZe=i(c),ko=n(c,"DIV",{class:!0});var Ml=s(ko);T(mx.$$.fragment,Ml),f_o=i(Ml),cx=n(Ml,"P",{});var sro=s(cx);g_o=r(sro,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Sq=n(sro,"A",{href:!0});var G3t=s(Sq);h_o=r(G3t,"AutoTokenizer.from_pretrained()"),G3t.forEach(t),u_o=r(sro," class method."),sro.forEach(t),p_o=i(Ml),fx=n(Ml,"P",{});var lro=s(fx);__o=r(lro,"This class cannot be instantiated directly using "),jfe=n(lro,"CODE",{});var O3t=s(jfe);b_o=r(O3t,"__init__()"),O3t.forEach(t),v_o=r(lro," (throws an error)."),lro.forEach(t),F_o=i(Ml),Br=n(Ml,"DIV",{class:!0});var El=s(Br);T(gx.$$.fragment,El),T_o=i(El),Dfe=n(El,"P",{});var V3t=s(Dfe);M_o=r(V3t,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),V3t.forEach(t),E_o=i(El),Ua=n(El,"P",{});var Wy=s(Ua);C_o=r(Wy,"The tokenizer class to instantiate is selected based on the "),Gfe=n(Wy,"CODE",{});var X3t=s(Gfe);w_o=r(X3t,"model_type"),X3t.forEach(t),A_o=r(Wy,` property of the config object (either
passed as an argument or loaded from `),Ofe=n(Wy,"CODE",{});var z3t=s(Ofe);L_o=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),y_o=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=n(Wy,"CODE",{});var Q3t=s(Vfe);x_o=r(Q3t,"pretrained_model_name_or_path"),Q3t.forEach(t),$_o=r(Wy,":"),Wy.forEach(t),k_o=i(El),k=n(El,"UL",{});var S=s(k);ns=n(S,"LI",{});var qP=s(ns);Xfe=n(qP,"STRONG",{});var W3t=s(Xfe);S_o=r(W3t,"albert"),W3t.forEach(t),R_o=r(qP," \u2014 "),Rq=n(qP,"A",{href:!0});var U3t=s(Rq);P_o=r(U3t,"AlbertTokenizer"),U3t.forEach(t),B_o=r(qP," or "),Pq=n(qP,"A",{href:!0});var H3t=s(Pq);I_o=r(H3t,"AlbertTokenizerFast"),H3t.forEach(t),N_o=r(qP," (ALBERT model)"),qP.forEach(t),q_o=i(S),ss=n(S,"LI",{});var jP=s(ss);zfe=n(jP,"STRONG",{});var J3t=s(zfe);j_o=r(J3t,"bart"),J3t.forEach(t),D_o=r(jP," \u2014 "),Bq=n(jP,"A",{href:!0});var Y3t=s(Bq);G_o=r(Y3t,"BartTokenizer"),Y3t.forEach(t),O_o=r(jP," or "),Iq=n(jP,"A",{href:!0});var K3t=s(Iq);V_o=r(K3t,"BartTokenizerFast"),K3t.forEach(t),X_o=r(jP," (BART model)"),jP.forEach(t),z_o=i(S),ls=n(S,"LI",{});var DP=s(ls);Qfe=n(DP,"STRONG",{});var Z3t=s(Qfe);Q_o=r(Z3t,"barthez"),Z3t.forEach(t),W_o=r(DP," \u2014 "),Nq=n(DP,"A",{href:!0});var e5t=s(Nq);U_o=r(e5t,"BarthezTokenizer"),e5t.forEach(t),H_o=r(DP," or "),qq=n(DP,"A",{href:!0});var o5t=s(qq);J_o=r(o5t,"BarthezTokenizerFast"),o5t.forEach(t),Y_o=r(DP," (BARThez model)"),DP.forEach(t),K_o=i(S),tu=n(S,"LI",{});var IBe=s(tu);Wfe=n(IBe,"STRONG",{});var r5t=s(Wfe);Z_o=r(r5t,"bartpho"),r5t.forEach(t),e1o=r(IBe," \u2014 "),jq=n(IBe,"A",{href:!0});var t5t=s(jq);o1o=r(t5t,"BartphoTokenizer"),t5t.forEach(t),r1o=r(IBe," (BARTpho model)"),IBe.forEach(t),t1o=i(S),is=n(S,"LI",{});var GP=s(is);Ufe=n(GP,"STRONG",{});var a5t=s(Ufe);a1o=r(a5t,"bert"),a5t.forEach(t),n1o=r(GP," \u2014 "),Dq=n(GP,"A",{href:!0});var n5t=s(Dq);s1o=r(n5t,"BertTokenizer"),n5t.forEach(t),l1o=r(GP," or "),Gq=n(GP,"A",{href:!0});var s5t=s(Gq);i1o=r(s5t,"BertTokenizerFast"),s5t.forEach(t),d1o=r(GP," (BERT model)"),GP.forEach(t),m1o=i(S),au=n(S,"LI",{});var NBe=s(au);Hfe=n(NBe,"STRONG",{});var l5t=s(Hfe);c1o=r(l5t,"bert-generation"),l5t.forEach(t),f1o=r(NBe," \u2014 "),Oq=n(NBe,"A",{href:!0});var i5t=s(Oq);g1o=r(i5t,"BertGenerationTokenizer"),i5t.forEach(t),h1o=r(NBe," (Bert Generation model)"),NBe.forEach(t),u1o=i(S),nu=n(S,"LI",{});var qBe=s(nu);Jfe=n(qBe,"STRONG",{});var d5t=s(Jfe);p1o=r(d5t,"bert-japanese"),d5t.forEach(t),_1o=r(qBe," \u2014 "),Vq=n(qBe,"A",{href:!0});var m5t=s(Vq);b1o=r(m5t,"BertJapaneseTokenizer"),m5t.forEach(t),v1o=r(qBe," (BertJapanese model)"),qBe.forEach(t),F1o=i(S),su=n(S,"LI",{});var jBe=s(su);Yfe=n(jBe,"STRONG",{});var c5t=s(Yfe);T1o=r(c5t,"bertweet"),c5t.forEach(t),M1o=r(jBe," \u2014 "),Xq=n(jBe,"A",{href:!0});var f5t=s(Xq);E1o=r(f5t,"BertweetTokenizer"),f5t.forEach(t),C1o=r(jBe," (BERTweet model)"),jBe.forEach(t),w1o=i(S),ds=n(S,"LI",{});var OP=s(ds);Kfe=n(OP,"STRONG",{});var g5t=s(Kfe);A1o=r(g5t,"big_bird"),g5t.forEach(t),L1o=r(OP," \u2014 "),zq=n(OP,"A",{href:!0});var h5t=s(zq);y1o=r(h5t,"BigBirdTokenizer"),h5t.forEach(t),x1o=r(OP," or "),Qq=n(OP,"A",{href:!0});var u5t=s(Qq);$1o=r(u5t,"BigBirdTokenizerFast"),u5t.forEach(t),k1o=r(OP," (BigBird model)"),OP.forEach(t),S1o=i(S),ms=n(S,"LI",{});var VP=s(ms);Zfe=n(VP,"STRONG",{});var p5t=s(Zfe);R1o=r(p5t,"bigbird_pegasus"),p5t.forEach(t),P1o=r(VP," \u2014 "),Wq=n(VP,"A",{href:!0});var _5t=s(Wq);B1o=r(_5t,"PegasusTokenizer"),_5t.forEach(t),I1o=r(VP," or "),Uq=n(VP,"A",{href:!0});var b5t=s(Uq);N1o=r(b5t,"PegasusTokenizerFast"),b5t.forEach(t),q1o=r(VP," (BigBird-Pegasus model)"),VP.forEach(t),j1o=i(S),cs=n(S,"LI",{});var XP=s(cs);ege=n(XP,"STRONG",{});var v5t=s(ege);D1o=r(v5t,"blenderbot"),v5t.forEach(t),G1o=r(XP," \u2014 "),Hq=n(XP,"A",{href:!0});var F5t=s(Hq);O1o=r(F5t,"BlenderbotTokenizer"),F5t.forEach(t),V1o=r(XP," or "),Jq=n(XP,"A",{href:!0});var T5t=s(Jq);X1o=r(T5t,"BlenderbotTokenizerFast"),T5t.forEach(t),z1o=r(XP," (Blenderbot model)"),XP.forEach(t),Q1o=i(S),lu=n(S,"LI",{});var DBe=s(lu);oge=n(DBe,"STRONG",{});var M5t=s(oge);W1o=r(M5t,"blenderbot-small"),M5t.forEach(t),U1o=r(DBe," \u2014 "),Yq=n(DBe,"A",{href:!0});var E5t=s(Yq);H1o=r(E5t,"BlenderbotSmallTokenizer"),E5t.forEach(t),J1o=r(DBe," (BlenderbotSmall model)"),DBe.forEach(t),Y1o=i(S),iu=n(S,"LI",{});var GBe=s(iu);rge=n(GBe,"STRONG",{});var C5t=s(rge);K1o=r(C5t,"bloom"),C5t.forEach(t),Z1o=r(GBe," \u2014 "),Kq=n(GBe,"A",{href:!0});var w5t=s(Kq);e2o=r(w5t,"BloomTokenizerFast"),w5t.forEach(t),o2o=r(GBe," (BLOOM model)"),GBe.forEach(t),r2o=i(S),du=n(S,"LI",{});var OBe=s(du);tge=n(OBe,"STRONG",{});var A5t=s(tge);t2o=r(A5t,"byt5"),A5t.forEach(t),a2o=r(OBe," \u2014 "),Zq=n(OBe,"A",{href:!0});var L5t=s(Zq);n2o=r(L5t,"ByT5Tokenizer"),L5t.forEach(t),s2o=r(OBe," (ByT5 model)"),OBe.forEach(t),l2o=i(S),fs=n(S,"LI",{});var zP=s(fs);age=n(zP,"STRONG",{});var y5t=s(age);i2o=r(y5t,"camembert"),y5t.forEach(t),d2o=r(zP," \u2014 "),ej=n(zP,"A",{href:!0});var x5t=s(ej);m2o=r(x5t,"CamembertTokenizer"),x5t.forEach(t),c2o=r(zP," or "),oj=n(zP,"A",{href:!0});var $5t=s(oj);f2o=r($5t,"CamembertTokenizerFast"),$5t.forEach(t),g2o=r(zP," (CamemBERT model)"),zP.forEach(t),h2o=i(S),mu=n(S,"LI",{});var VBe=s(mu);nge=n(VBe,"STRONG",{});var k5t=s(nge);u2o=r(k5t,"canine"),k5t.forEach(t),p2o=r(VBe," \u2014 "),rj=n(VBe,"A",{href:!0});var S5t=s(rj);_2o=r(S5t,"CanineTokenizer"),S5t.forEach(t),b2o=r(VBe," (CANINE model)"),VBe.forEach(t),v2o=i(S),gs=n(S,"LI",{});var QP=s(gs);sge=n(QP,"STRONG",{});var R5t=s(sge);F2o=r(R5t,"clip"),R5t.forEach(t),T2o=r(QP," \u2014 "),tj=n(QP,"A",{href:!0});var P5t=s(tj);M2o=r(P5t,"CLIPTokenizer"),P5t.forEach(t),E2o=r(QP," or "),aj=n(QP,"A",{href:!0});var B5t=s(aj);C2o=r(B5t,"CLIPTokenizerFast"),B5t.forEach(t),w2o=r(QP," (CLIP model)"),QP.forEach(t),A2o=i(S),hs=n(S,"LI",{});var WP=s(hs);lge=n(WP,"STRONG",{});var I5t=s(lge);L2o=r(I5t,"codegen"),I5t.forEach(t),y2o=r(WP," \u2014 "),nj=n(WP,"A",{href:!0});var N5t=s(nj);x2o=r(N5t,"CodeGenTokenizer"),N5t.forEach(t),$2o=r(WP," or "),sj=n(WP,"A",{href:!0});var q5t=s(sj);k2o=r(q5t,"CodeGenTokenizerFast"),q5t.forEach(t),S2o=r(WP," (CodeGen model)"),WP.forEach(t),R2o=i(S),us=n(S,"LI",{});var UP=s(us);ige=n(UP,"STRONG",{});var j5t=s(ige);P2o=r(j5t,"convbert"),j5t.forEach(t),B2o=r(UP," \u2014 "),lj=n(UP,"A",{href:!0});var D5t=s(lj);I2o=r(D5t,"ConvBertTokenizer"),D5t.forEach(t),N2o=r(UP," or "),ij=n(UP,"A",{href:!0});var G5t=s(ij);q2o=r(G5t,"ConvBertTokenizerFast"),G5t.forEach(t),j2o=r(UP," (ConvBERT model)"),UP.forEach(t),D2o=i(S),ps=n(S,"LI",{});var HP=s(ps);dge=n(HP,"STRONG",{});var O5t=s(dge);G2o=r(O5t,"cpm"),O5t.forEach(t),O2o=r(HP," \u2014 "),dj=n(HP,"A",{href:!0});var V5t=s(dj);V2o=r(V5t,"CpmTokenizer"),V5t.forEach(t),X2o=r(HP," or "),mj=n(HP,"A",{href:!0});var X5t=s(mj);z2o=r(X5t,"CpmTokenizerFast"),X5t.forEach(t),Q2o=r(HP," (CPM model)"),HP.forEach(t),W2o=i(S),cu=n(S,"LI",{});var XBe=s(cu);mge=n(XBe,"STRONG",{});var z5t=s(mge);U2o=r(z5t,"ctrl"),z5t.forEach(t),H2o=r(XBe," \u2014 "),cj=n(XBe,"A",{href:!0});var Q5t=s(cj);J2o=r(Q5t,"CTRLTokenizer"),Q5t.forEach(t),Y2o=r(XBe," (CTRL model)"),XBe.forEach(t),K2o=i(S),_s=n(S,"LI",{});var JP=s(_s);cge=n(JP,"STRONG",{});var W5t=s(cge);Z2o=r(W5t,"data2vec-text"),W5t.forEach(t),ebo=r(JP," \u2014 "),fj=n(JP,"A",{href:!0});var U5t=s(fj);obo=r(U5t,"RobertaTokenizer"),U5t.forEach(t),rbo=r(JP," or "),gj=n(JP,"A",{href:!0});var H5t=s(gj);tbo=r(H5t,"RobertaTokenizerFast"),H5t.forEach(t),abo=r(JP," (Data2VecText model)"),JP.forEach(t),nbo=i(S),bs=n(S,"LI",{});var YP=s(bs);fge=n(YP,"STRONG",{});var J5t=s(fge);sbo=r(J5t,"deberta"),J5t.forEach(t),lbo=r(YP," \u2014 "),hj=n(YP,"A",{href:!0});var Y5t=s(hj);ibo=r(Y5t,"DebertaTokenizer"),Y5t.forEach(t),dbo=r(YP," or "),uj=n(YP,"A",{href:!0});var K5t=s(uj);mbo=r(K5t,"DebertaTokenizerFast"),K5t.forEach(t),cbo=r(YP," (DeBERTa model)"),YP.forEach(t),fbo=i(S),vs=n(S,"LI",{});var KP=s(vs);gge=n(KP,"STRONG",{});var Z5t=s(gge);gbo=r(Z5t,"deberta-v2"),Z5t.forEach(t),hbo=r(KP," \u2014 "),pj=n(KP,"A",{href:!0});var e0t=s(pj);ubo=r(e0t,"DebertaV2Tokenizer"),e0t.forEach(t),pbo=r(KP," or "),_j=n(KP,"A",{href:!0});var o0t=s(_j);_bo=r(o0t,"DebertaV2TokenizerFast"),o0t.forEach(t),bbo=r(KP," (DeBERTa-v2 model)"),KP.forEach(t),vbo=i(S),Fs=n(S,"LI",{});var ZP=s(Fs);hge=n(ZP,"STRONG",{});var r0t=s(hge);Fbo=r(r0t,"distilbert"),r0t.forEach(t),Tbo=r(ZP," \u2014 "),bj=n(ZP,"A",{href:!0});var t0t=s(bj);Mbo=r(t0t,"DistilBertTokenizer"),t0t.forEach(t),Ebo=r(ZP," or "),vj=n(ZP,"A",{href:!0});var a0t=s(vj);Cbo=r(a0t,"DistilBertTokenizerFast"),a0t.forEach(t),wbo=r(ZP," (DistilBERT model)"),ZP.forEach(t),Abo=i(S),Ts=n(S,"LI",{});var eB=s(Ts);uge=n(eB,"STRONG",{});var n0t=s(uge);Lbo=r(n0t,"dpr"),n0t.forEach(t),ybo=r(eB," \u2014 "),Fj=n(eB,"A",{href:!0});var s0t=s(Fj);xbo=r(s0t,"DPRQuestionEncoderTokenizer"),s0t.forEach(t),$bo=r(eB," or "),Tj=n(eB,"A",{href:!0});var l0t=s(Tj);kbo=r(l0t,"DPRQuestionEncoderTokenizerFast"),l0t.forEach(t),Sbo=r(eB," (DPR model)"),eB.forEach(t),Rbo=i(S),Ms=n(S,"LI",{});var oB=s(Ms);pge=n(oB,"STRONG",{});var i0t=s(pge);Pbo=r(i0t,"electra"),i0t.forEach(t),Bbo=r(oB," \u2014 "),Mj=n(oB,"A",{href:!0});var d0t=s(Mj);Ibo=r(d0t,"ElectraTokenizer"),d0t.forEach(t),Nbo=r(oB," or "),Ej=n(oB,"A",{href:!0});var m0t=s(Ej);qbo=r(m0t,"ElectraTokenizerFast"),m0t.forEach(t),jbo=r(oB," (ELECTRA model)"),oB.forEach(t),Dbo=i(S),Es=n(S,"LI",{});var rB=s(Es);_ge=n(rB,"STRONG",{});var c0t=s(_ge);Gbo=r(c0t,"ernie"),c0t.forEach(t),Obo=r(rB," \u2014 "),Cj=n(rB,"A",{href:!0});var f0t=s(Cj);Vbo=r(f0t,"BertTokenizer"),f0t.forEach(t),Xbo=r(rB," or "),wj=n(rB,"A",{href:!0});var g0t=s(wj);zbo=r(g0t,"BertTokenizerFast"),g0t.forEach(t),Qbo=r(rB," (ERNIE model)"),rB.forEach(t),Wbo=i(S),fu=n(S,"LI",{});var zBe=s(fu);bge=n(zBe,"STRONG",{});var h0t=s(bge);Ubo=r(h0t,"flaubert"),h0t.forEach(t),Hbo=r(zBe," \u2014 "),Aj=n(zBe,"A",{href:!0});var u0t=s(Aj);Jbo=r(u0t,"FlaubertTokenizer"),u0t.forEach(t),Ybo=r(zBe," (FlauBERT model)"),zBe.forEach(t),Kbo=i(S),Cs=n(S,"LI",{});var tB=s(Cs);vge=n(tB,"STRONG",{});var p0t=s(vge);Zbo=r(p0t,"fnet"),p0t.forEach(t),evo=r(tB," \u2014 "),Lj=n(tB,"A",{href:!0});var _0t=s(Lj);ovo=r(_0t,"FNetTokenizer"),_0t.forEach(t),rvo=r(tB," or "),yj=n(tB,"A",{href:!0});var b0t=s(yj);tvo=r(b0t,"FNetTokenizerFast"),b0t.forEach(t),avo=r(tB," (FNet model)"),tB.forEach(t),nvo=i(S),gu=n(S,"LI",{});var QBe=s(gu);Fge=n(QBe,"STRONG",{});var v0t=s(Fge);svo=r(v0t,"fsmt"),v0t.forEach(t),lvo=r(QBe," \u2014 "),xj=n(QBe,"A",{href:!0});var F0t=s(xj);ivo=r(F0t,"FSMTTokenizer"),F0t.forEach(t),dvo=r(QBe," (FairSeq Machine-Translation model)"),QBe.forEach(t),mvo=i(S),ws=n(S,"LI",{});var aB=s(ws);Tge=n(aB,"STRONG",{});var T0t=s(Tge);cvo=r(T0t,"funnel"),T0t.forEach(t),fvo=r(aB," \u2014 "),$j=n(aB,"A",{href:!0});var M0t=s($j);gvo=r(M0t,"FunnelTokenizer"),M0t.forEach(t),hvo=r(aB," or "),kj=n(aB,"A",{href:!0});var E0t=s(kj);uvo=r(E0t,"FunnelTokenizerFast"),E0t.forEach(t),pvo=r(aB," (Funnel Transformer model)"),aB.forEach(t),_vo=i(S),As=n(S,"LI",{});var nB=s(As);Mge=n(nB,"STRONG",{});var C0t=s(Mge);bvo=r(C0t,"gpt2"),C0t.forEach(t),vvo=r(nB," \u2014 "),Sj=n(nB,"A",{href:!0});var w0t=s(Sj);Fvo=r(w0t,"GPT2Tokenizer"),w0t.forEach(t),Tvo=r(nB," or "),Rj=n(nB,"A",{href:!0});var A0t=s(Rj);Mvo=r(A0t,"GPT2TokenizerFast"),A0t.forEach(t),Evo=r(nB," (OpenAI GPT-2 model)"),nB.forEach(t),Cvo=i(S),Ls=n(S,"LI",{});var sB=s(Ls);Ege=n(sB,"STRONG",{});var L0t=s(Ege);wvo=r(L0t,"gpt_neo"),L0t.forEach(t),Avo=r(sB," \u2014 "),Pj=n(sB,"A",{href:!0});var y0t=s(Pj);Lvo=r(y0t,"GPT2Tokenizer"),y0t.forEach(t),yvo=r(sB," or "),Bj=n(sB,"A",{href:!0});var x0t=s(Bj);xvo=r(x0t,"GPT2TokenizerFast"),x0t.forEach(t),$vo=r(sB," (GPT Neo model)"),sB.forEach(t),kvo=i(S),hu=n(S,"LI",{});var WBe=s(hu);Cge=n(WBe,"STRONG",{});var $0t=s(Cge);Svo=r($0t,"gpt_neox"),$0t.forEach(t),Rvo=r(WBe," \u2014 "),Ij=n(WBe,"A",{href:!0});var k0t=s(Ij);Pvo=r(k0t,"GPTNeoXTokenizerFast"),k0t.forEach(t),Bvo=r(WBe," (GPT NeoX model)"),WBe.forEach(t),Ivo=i(S),uu=n(S,"LI",{});var UBe=s(uu);wge=n(UBe,"STRONG",{});var S0t=s(wge);Nvo=r(S0t,"gpt_neox_japanese"),S0t.forEach(t),qvo=r(UBe," \u2014 "),Nj=n(UBe,"A",{href:!0});var R0t=s(Nj);jvo=r(R0t,"GPTNeoXJapaneseTokenizer"),R0t.forEach(t),Dvo=r(UBe," (GPT NeoX Japanese model)"),UBe.forEach(t),Gvo=i(S),ys=n(S,"LI",{});var lB=s(ys);Age=n(lB,"STRONG",{});var P0t=s(Age);Ovo=r(P0t,"gptj"),P0t.forEach(t),Vvo=r(lB," \u2014 "),qj=n(lB,"A",{href:!0});var B0t=s(qj);Xvo=r(B0t,"GPT2Tokenizer"),B0t.forEach(t),zvo=r(lB," or "),jj=n(lB,"A",{href:!0});var I0t=s(jj);Qvo=r(I0t,"GPT2TokenizerFast"),I0t.forEach(t),Wvo=r(lB," (GPT-J model)"),lB.forEach(t),Uvo=i(S),xs=n(S,"LI",{});var iB=s(xs);Lge=n(iB,"STRONG",{});var N0t=s(Lge);Hvo=r(N0t,"groupvit"),N0t.forEach(t),Jvo=r(iB," \u2014 "),Dj=n(iB,"A",{href:!0});var q0t=s(Dj);Yvo=r(q0t,"CLIPTokenizer"),q0t.forEach(t),Kvo=r(iB," or "),Gj=n(iB,"A",{href:!0});var j0t=s(Gj);Zvo=r(j0t,"CLIPTokenizerFast"),j0t.forEach(t),eFo=r(iB," (GroupViT model)"),iB.forEach(t),oFo=i(S),$s=n(S,"LI",{});var dB=s($s);yge=n(dB,"STRONG",{});var D0t=s(yge);rFo=r(D0t,"herbert"),D0t.forEach(t),tFo=r(dB," \u2014 "),Oj=n(dB,"A",{href:!0});var G0t=s(Oj);aFo=r(G0t,"HerbertTokenizer"),G0t.forEach(t),nFo=r(dB," or "),Vj=n(dB,"A",{href:!0});var O0t=s(Vj);sFo=r(O0t,"HerbertTokenizerFast"),O0t.forEach(t),lFo=r(dB," (HerBERT model)"),dB.forEach(t),iFo=i(S),pu=n(S,"LI",{});var HBe=s(pu);xge=n(HBe,"STRONG",{});var V0t=s(xge);dFo=r(V0t,"hubert"),V0t.forEach(t),mFo=r(HBe," \u2014 "),Xj=n(HBe,"A",{href:!0});var X0t=s(Xj);cFo=r(X0t,"Wav2Vec2CTCTokenizer"),X0t.forEach(t),fFo=r(HBe," (Hubert model)"),HBe.forEach(t),gFo=i(S),ks=n(S,"LI",{});var mB=s(ks);$ge=n(mB,"STRONG",{});var z0t=s($ge);hFo=r(z0t,"ibert"),z0t.forEach(t),uFo=r(mB," \u2014 "),zj=n(mB,"A",{href:!0});var Q0t=s(zj);pFo=r(Q0t,"RobertaTokenizer"),Q0t.forEach(t),_Fo=r(mB," or "),Qj=n(mB,"A",{href:!0});var W0t=s(Qj);bFo=r(W0t,"RobertaTokenizerFast"),W0t.forEach(t),vFo=r(mB," (I-BERT model)"),mB.forEach(t),FFo=i(S),Ss=n(S,"LI",{});var cB=s(Ss);kge=n(cB,"STRONG",{});var U0t=s(kge);TFo=r(U0t,"layoutlm"),U0t.forEach(t),MFo=r(cB," \u2014 "),Wj=n(cB,"A",{href:!0});var H0t=s(Wj);EFo=r(H0t,"LayoutLMTokenizer"),H0t.forEach(t),CFo=r(cB," or "),Uj=n(cB,"A",{href:!0});var J0t=s(Uj);wFo=r(J0t,"LayoutLMTokenizerFast"),J0t.forEach(t),AFo=r(cB," (LayoutLM model)"),cB.forEach(t),LFo=i(S),Rs=n(S,"LI",{});var fB=s(Rs);Sge=n(fB,"STRONG",{});var Y0t=s(Sge);yFo=r(Y0t,"layoutlmv2"),Y0t.forEach(t),xFo=r(fB," \u2014 "),Hj=n(fB,"A",{href:!0});var K0t=s(Hj);$Fo=r(K0t,"LayoutLMv2Tokenizer"),K0t.forEach(t),kFo=r(fB," or "),Jj=n(fB,"A",{href:!0});var Z0t=s(Jj);SFo=r(Z0t,"LayoutLMv2TokenizerFast"),Z0t.forEach(t),RFo=r(fB," (LayoutLMv2 model)"),fB.forEach(t),PFo=i(S),Ps=n(S,"LI",{});var gB=s(Ps);Rge=n(gB,"STRONG",{});var ewt=s(Rge);BFo=r(ewt,"layoutlmv3"),ewt.forEach(t),IFo=r(gB," \u2014 "),Yj=n(gB,"A",{href:!0});var owt=s(Yj);NFo=r(owt,"LayoutLMv3Tokenizer"),owt.forEach(t),qFo=r(gB," or "),Kj=n(gB,"A",{href:!0});var rwt=s(Kj);jFo=r(rwt,"LayoutLMv3TokenizerFast"),rwt.forEach(t),DFo=r(gB," (LayoutLMv3 model)"),gB.forEach(t),GFo=i(S),Bs=n(S,"LI",{});var hB=s(Bs);Pge=n(hB,"STRONG",{});var twt=s(Pge);OFo=r(twt,"layoutxlm"),twt.forEach(t),VFo=r(hB," \u2014 "),Zj=n(hB,"A",{href:!0});var awt=s(Zj);XFo=r(awt,"LayoutXLMTokenizer"),awt.forEach(t),zFo=r(hB," or "),eD=n(hB,"A",{href:!0});var nwt=s(eD);QFo=r(nwt,"LayoutXLMTokenizerFast"),nwt.forEach(t),WFo=r(hB," (LayoutXLM model)"),hB.forEach(t),UFo=i(S),Is=n(S,"LI",{});var uB=s(Is);Bge=n(uB,"STRONG",{});var swt=s(Bge);HFo=r(swt,"led"),swt.forEach(t),JFo=r(uB," \u2014 "),oD=n(uB,"A",{href:!0});var lwt=s(oD);YFo=r(lwt,"LEDTokenizer"),lwt.forEach(t),KFo=r(uB," or "),rD=n(uB,"A",{href:!0});var iwt=s(rD);ZFo=r(iwt,"LEDTokenizerFast"),iwt.forEach(t),eTo=r(uB," (LED model)"),uB.forEach(t),oTo=i(S),Ns=n(S,"LI",{});var pB=s(Ns);Ige=n(pB,"STRONG",{});var dwt=s(Ige);rTo=r(dwt,"longformer"),dwt.forEach(t),tTo=r(pB," \u2014 "),tD=n(pB,"A",{href:!0});var mwt=s(tD);aTo=r(mwt,"LongformerTokenizer"),mwt.forEach(t),nTo=r(pB," or "),aD=n(pB,"A",{href:!0});var cwt=s(aD);sTo=r(cwt,"LongformerTokenizerFast"),cwt.forEach(t),lTo=r(pB," (Longformer model)"),pB.forEach(t),iTo=i(S),qs=n(S,"LI",{});var _B=s(qs);Nge=n(_B,"STRONG",{});var fwt=s(Nge);dTo=r(fwt,"longt5"),fwt.forEach(t),mTo=r(_B," \u2014 "),nD=n(_B,"A",{href:!0});var gwt=s(nD);cTo=r(gwt,"T5Tokenizer"),gwt.forEach(t),fTo=r(_B," or "),sD=n(_B,"A",{href:!0});var hwt=s(sD);gTo=r(hwt,"T5TokenizerFast"),hwt.forEach(t),hTo=r(_B," (LongT5 model)"),_B.forEach(t),uTo=i(S),_u=n(S,"LI",{});var JBe=s(_u);qge=n(JBe,"STRONG",{});var uwt=s(qge);pTo=r(uwt,"luke"),uwt.forEach(t),_To=r(JBe," \u2014 "),lD=n(JBe,"A",{href:!0});var pwt=s(lD);bTo=r(pwt,"LukeTokenizer"),pwt.forEach(t),vTo=r(JBe," (LUKE model)"),JBe.forEach(t),FTo=i(S),js=n(S,"LI",{});var bB=s(js);jge=n(bB,"STRONG",{});var _wt=s(jge);TTo=r(_wt,"lxmert"),_wt.forEach(t),MTo=r(bB," \u2014 "),iD=n(bB,"A",{href:!0});var bwt=s(iD);ETo=r(bwt,"LxmertTokenizer"),bwt.forEach(t),CTo=r(bB," or "),dD=n(bB,"A",{href:!0});var vwt=s(dD);wTo=r(vwt,"LxmertTokenizerFast"),vwt.forEach(t),ATo=r(bB," (LXMERT model)"),bB.forEach(t),LTo=i(S),bu=n(S,"LI",{});var YBe=s(bu);Dge=n(YBe,"STRONG",{});var Fwt=s(Dge);yTo=r(Fwt,"m2m_100"),Fwt.forEach(t),xTo=r(YBe," \u2014 "),mD=n(YBe,"A",{href:!0});var Twt=s(mD);$To=r(Twt,"M2M100Tokenizer"),Twt.forEach(t),kTo=r(YBe," (M2M100 model)"),YBe.forEach(t),STo=i(S),vu=n(S,"LI",{});var KBe=s(vu);Gge=n(KBe,"STRONG",{});var Mwt=s(Gge);RTo=r(Mwt,"marian"),Mwt.forEach(t),PTo=r(KBe," \u2014 "),cD=n(KBe,"A",{href:!0});var Ewt=s(cD);BTo=r(Ewt,"MarianTokenizer"),Ewt.forEach(t),ITo=r(KBe," (Marian model)"),KBe.forEach(t),NTo=i(S),Ds=n(S,"LI",{});var vB=s(Ds);Oge=n(vB,"STRONG",{});var Cwt=s(Oge);qTo=r(Cwt,"mbart"),Cwt.forEach(t),jTo=r(vB," \u2014 "),fD=n(vB,"A",{href:!0});var wwt=s(fD);DTo=r(wwt,"MBartTokenizer"),wwt.forEach(t),GTo=r(vB," or "),gD=n(vB,"A",{href:!0});var Awt=s(gD);OTo=r(Awt,"MBartTokenizerFast"),Awt.forEach(t),VTo=r(vB," (mBART model)"),vB.forEach(t),XTo=i(S),Gs=n(S,"LI",{});var FB=s(Gs);Vge=n(FB,"STRONG",{});var Lwt=s(Vge);zTo=r(Lwt,"mbart50"),Lwt.forEach(t),QTo=r(FB," \u2014 "),hD=n(FB,"A",{href:!0});var ywt=s(hD);WTo=r(ywt,"MBart50Tokenizer"),ywt.forEach(t),UTo=r(FB," or "),uD=n(FB,"A",{href:!0});var xwt=s(uD);HTo=r(xwt,"MBart50TokenizerFast"),xwt.forEach(t),JTo=r(FB," (mBART-50 model)"),FB.forEach(t),YTo=i(S),Os=n(S,"LI",{});var TB=s(Os);Xge=n(TB,"STRONG",{});var $wt=s(Xge);KTo=r($wt,"megatron-bert"),$wt.forEach(t),ZTo=r(TB," \u2014 "),pD=n(TB,"A",{href:!0});var kwt=s(pD);eMo=r(kwt,"BertTokenizer"),kwt.forEach(t),oMo=r(TB," or "),_D=n(TB,"A",{href:!0});var Swt=s(_D);rMo=r(Swt,"BertTokenizerFast"),Swt.forEach(t),tMo=r(TB," (Megatron-BERT model)"),TB.forEach(t),aMo=i(S),Fu=n(S,"LI",{});var ZBe=s(Fu);zge=n(ZBe,"STRONG",{});var Rwt=s(zge);nMo=r(Rwt,"mluke"),Rwt.forEach(t),sMo=r(ZBe," \u2014 "),bD=n(ZBe,"A",{href:!0});var Pwt=s(bD);lMo=r(Pwt,"MLukeTokenizer"),Pwt.forEach(t),iMo=r(ZBe," (mLUKE model)"),ZBe.forEach(t),dMo=i(S),Vs=n(S,"LI",{});var MB=s(Vs);Qge=n(MB,"STRONG",{});var Bwt=s(Qge);mMo=r(Bwt,"mobilebert"),Bwt.forEach(t),cMo=r(MB," \u2014 "),vD=n(MB,"A",{href:!0});var Iwt=s(vD);fMo=r(Iwt,"MobileBertTokenizer"),Iwt.forEach(t),gMo=r(MB," or "),FD=n(MB,"A",{href:!0});var Nwt=s(FD);hMo=r(Nwt,"MobileBertTokenizerFast"),Nwt.forEach(t),uMo=r(MB," (MobileBERT model)"),MB.forEach(t),pMo=i(S),Xs=n(S,"LI",{});var EB=s(Xs);Wge=n(EB,"STRONG",{});var qwt=s(Wge);_Mo=r(qwt,"mpnet"),qwt.forEach(t),bMo=r(EB," \u2014 "),TD=n(EB,"A",{href:!0});var jwt=s(TD);vMo=r(jwt,"MPNetTokenizer"),jwt.forEach(t),FMo=r(EB," or "),MD=n(EB,"A",{href:!0});var Dwt=s(MD);TMo=r(Dwt,"MPNetTokenizerFast"),Dwt.forEach(t),MMo=r(EB," (MPNet model)"),EB.forEach(t),EMo=i(S),zs=n(S,"LI",{});var CB=s(zs);Uge=n(CB,"STRONG",{});var Gwt=s(Uge);CMo=r(Gwt,"mt5"),Gwt.forEach(t),wMo=r(CB," \u2014 "),ED=n(CB,"A",{href:!0});var Owt=s(ED);AMo=r(Owt,"MT5Tokenizer"),Owt.forEach(t),LMo=r(CB," or "),CD=n(CB,"A",{href:!0});var Vwt=s(CD);yMo=r(Vwt,"MT5TokenizerFast"),Vwt.forEach(t),xMo=r(CB," (MT5 model)"),CB.forEach(t),$Mo=i(S),Qs=n(S,"LI",{});var wB=s(Qs);Hge=n(wB,"STRONG",{});var Xwt=s(Hge);kMo=r(Xwt,"mvp"),Xwt.forEach(t),SMo=r(wB," \u2014 "),wD=n(wB,"A",{href:!0});var zwt=s(wD);RMo=r(zwt,"MvpTokenizer"),zwt.forEach(t),PMo=r(wB," or "),AD=n(wB,"A",{href:!0});var Qwt=s(AD);BMo=r(Qwt,"MvpTokenizerFast"),Qwt.forEach(t),IMo=r(wB," (MVP model)"),wB.forEach(t),NMo=i(S),Ws=n(S,"LI",{});var AB=s(Ws);Jge=n(AB,"STRONG",{});var Wwt=s(Jge);qMo=r(Wwt,"nezha"),Wwt.forEach(t),jMo=r(AB," \u2014 "),LD=n(AB,"A",{href:!0});var Uwt=s(LD);DMo=r(Uwt,"BertTokenizer"),Uwt.forEach(t),GMo=r(AB," or "),yD=n(AB,"A",{href:!0});var Hwt=s(yD);OMo=r(Hwt,"BertTokenizerFast"),Hwt.forEach(t),VMo=r(AB," (Nezha model)"),AB.forEach(t),XMo=i(S),Us=n(S,"LI",{});var LB=s(Us);Yge=n(LB,"STRONG",{});var Jwt=s(Yge);zMo=r(Jwt,"nllb"),Jwt.forEach(t),QMo=r(LB," \u2014 "),xD=n(LB,"A",{href:!0});var Ywt=s(xD);WMo=r(Ywt,"NllbTokenizer"),Ywt.forEach(t),UMo=r(LB," or "),$D=n(LB,"A",{href:!0});var Kwt=s($D);HMo=r(Kwt,"NllbTokenizerFast"),Kwt.forEach(t),JMo=r(LB," (NLLB model)"),LB.forEach(t),YMo=i(S),Hs=n(S,"LI",{});var yB=s(Hs);Kge=n(yB,"STRONG",{});var Zwt=s(Kge);KMo=r(Zwt,"nystromformer"),Zwt.forEach(t),ZMo=r(yB," \u2014 "),kD=n(yB,"A",{href:!0});var eAt=s(kD);eEo=r(eAt,"AlbertTokenizer"),eAt.forEach(t),oEo=r(yB," or "),SD=n(yB,"A",{href:!0});var oAt=s(SD);rEo=r(oAt,"AlbertTokenizerFast"),oAt.forEach(t),tEo=r(yB," (Nystr\xF6mformer model)"),yB.forEach(t),aEo=i(S),Js=n(S,"LI",{});var xB=s(Js);Zge=n(xB,"STRONG",{});var rAt=s(Zge);nEo=r(rAt,"openai-gpt"),rAt.forEach(t),sEo=r(xB," \u2014 "),RD=n(xB,"A",{href:!0});var tAt=s(RD);lEo=r(tAt,"OpenAIGPTTokenizer"),tAt.forEach(t),iEo=r(xB," or "),PD=n(xB,"A",{href:!0});var aAt=s(PD);dEo=r(aAt,"OpenAIGPTTokenizerFast"),aAt.forEach(t),mEo=r(xB," (OpenAI GPT model)"),xB.forEach(t),cEo=i(S),Tu=n(S,"LI",{});var eIe=s(Tu);ehe=n(eIe,"STRONG",{});var nAt=s(ehe);fEo=r(nAt,"opt"),nAt.forEach(t),gEo=r(eIe," \u2014 "),BD=n(eIe,"A",{href:!0});var sAt=s(BD);hEo=r(sAt,"GPT2Tokenizer"),sAt.forEach(t),uEo=r(eIe," (OPT model)"),eIe.forEach(t),pEo=i(S),Ys=n(S,"LI",{});var $B=s(Ys);ohe=n($B,"STRONG",{});var lAt=s(ohe);_Eo=r(lAt,"owlvit"),lAt.forEach(t),bEo=r($B," \u2014 "),ID=n($B,"A",{href:!0});var iAt=s(ID);vEo=r(iAt,"CLIPTokenizer"),iAt.forEach(t),FEo=r($B," or "),ND=n($B,"A",{href:!0});var dAt=s(ND);TEo=r(dAt,"CLIPTokenizerFast"),dAt.forEach(t),MEo=r($B," (OWL-ViT model)"),$B.forEach(t),EEo=i(S),Ks=n(S,"LI",{});var kB=s(Ks);rhe=n(kB,"STRONG",{});var mAt=s(rhe);CEo=r(mAt,"pegasus"),mAt.forEach(t),wEo=r(kB," \u2014 "),qD=n(kB,"A",{href:!0});var cAt=s(qD);AEo=r(cAt,"PegasusTokenizer"),cAt.forEach(t),LEo=r(kB," or "),jD=n(kB,"A",{href:!0});var fAt=s(jD);yEo=r(fAt,"PegasusTokenizerFast"),fAt.forEach(t),xEo=r(kB," (Pegasus model)"),kB.forEach(t),$Eo=i(S),Mu=n(S,"LI",{});var oIe=s(Mu);the=n(oIe,"STRONG",{});var gAt=s(the);kEo=r(gAt,"perceiver"),gAt.forEach(t),SEo=r(oIe," \u2014 "),DD=n(oIe,"A",{href:!0});var hAt=s(DD);REo=r(hAt,"PerceiverTokenizer"),hAt.forEach(t),PEo=r(oIe," (Perceiver model)"),oIe.forEach(t),BEo=i(S),Eu=n(S,"LI",{});var rIe=s(Eu);ahe=n(rIe,"STRONG",{});var uAt=s(ahe);IEo=r(uAt,"phobert"),uAt.forEach(t),NEo=r(rIe," \u2014 "),GD=n(rIe,"A",{href:!0});var pAt=s(GD);qEo=r(pAt,"PhobertTokenizer"),pAt.forEach(t),jEo=r(rIe," (PhoBERT model)"),rIe.forEach(t),DEo=i(S),Cu=n(S,"LI",{});var tIe=s(Cu);nhe=n(tIe,"STRONG",{});var _At=s(nhe);GEo=r(_At,"plbart"),_At.forEach(t),OEo=r(tIe," \u2014 "),OD=n(tIe,"A",{href:!0});var bAt=s(OD);VEo=r(bAt,"PLBartTokenizer"),bAt.forEach(t),XEo=r(tIe," (PLBart model)"),tIe.forEach(t),zEo=i(S),wu=n(S,"LI",{});var aIe=s(wu);she=n(aIe,"STRONG",{});var vAt=s(she);QEo=r(vAt,"prophetnet"),vAt.forEach(t),WEo=r(aIe," \u2014 "),VD=n(aIe,"A",{href:!0});var FAt=s(VD);UEo=r(FAt,"ProphetNetTokenizer"),FAt.forEach(t),HEo=r(aIe," (ProphetNet model)"),aIe.forEach(t),JEo=i(S),Zs=n(S,"LI",{});var SB=s(Zs);lhe=n(SB,"STRONG",{});var TAt=s(lhe);YEo=r(TAt,"qdqbert"),TAt.forEach(t),KEo=r(SB," \u2014 "),XD=n(SB,"A",{href:!0});var MAt=s(XD);ZEo=r(MAt,"BertTokenizer"),MAt.forEach(t),e4o=r(SB," or "),zD=n(SB,"A",{href:!0});var EAt=s(zD);o4o=r(EAt,"BertTokenizerFast"),EAt.forEach(t),r4o=r(SB," (QDQBert model)"),SB.forEach(t),t4o=i(S),Au=n(S,"LI",{});var nIe=s(Au);ihe=n(nIe,"STRONG",{});var CAt=s(ihe);a4o=r(CAt,"rag"),CAt.forEach(t),n4o=r(nIe," \u2014 "),QD=n(nIe,"A",{href:!0});var wAt=s(QD);s4o=r(wAt,"RagTokenizer"),wAt.forEach(t),l4o=r(nIe," (RAG model)"),nIe.forEach(t),i4o=i(S),el=n(S,"LI",{});var RB=s(el);dhe=n(RB,"STRONG",{});var AAt=s(dhe);d4o=r(AAt,"realm"),AAt.forEach(t),m4o=r(RB," \u2014 "),WD=n(RB,"A",{href:!0});var LAt=s(WD);c4o=r(LAt,"RealmTokenizer"),LAt.forEach(t),f4o=r(RB," or "),UD=n(RB,"A",{href:!0});var yAt=s(UD);g4o=r(yAt,"RealmTokenizerFast"),yAt.forEach(t),h4o=r(RB," (REALM model)"),RB.forEach(t),u4o=i(S),ol=n(S,"LI",{});var PB=s(ol);mhe=n(PB,"STRONG",{});var xAt=s(mhe);p4o=r(xAt,"reformer"),xAt.forEach(t),_4o=r(PB," \u2014 "),HD=n(PB,"A",{href:!0});var $At=s(HD);b4o=r($At,"ReformerTokenizer"),$At.forEach(t),v4o=r(PB," or "),JD=n(PB,"A",{href:!0});var kAt=s(JD);F4o=r(kAt,"ReformerTokenizerFast"),kAt.forEach(t),T4o=r(PB," (Reformer model)"),PB.forEach(t),M4o=i(S),rl=n(S,"LI",{});var BB=s(rl);che=n(BB,"STRONG",{});var SAt=s(che);E4o=r(SAt,"rembert"),SAt.forEach(t),C4o=r(BB," \u2014 "),YD=n(BB,"A",{href:!0});var RAt=s(YD);w4o=r(RAt,"RemBertTokenizer"),RAt.forEach(t),A4o=r(BB," or "),KD=n(BB,"A",{href:!0});var PAt=s(KD);L4o=r(PAt,"RemBertTokenizerFast"),PAt.forEach(t),y4o=r(BB," (RemBERT model)"),BB.forEach(t),x4o=i(S),tl=n(S,"LI",{});var IB=s(tl);fhe=n(IB,"STRONG",{});var BAt=s(fhe);$4o=r(BAt,"retribert"),BAt.forEach(t),k4o=r(IB," \u2014 "),ZD=n(IB,"A",{href:!0});var IAt=s(ZD);S4o=r(IAt,"RetriBertTokenizer"),IAt.forEach(t),R4o=r(IB," or "),eG=n(IB,"A",{href:!0});var NAt=s(eG);P4o=r(NAt,"RetriBertTokenizerFast"),NAt.forEach(t),B4o=r(IB," (RetriBERT model)"),IB.forEach(t),I4o=i(S),al=n(S,"LI",{});var NB=s(al);ghe=n(NB,"STRONG",{});var qAt=s(ghe);N4o=r(qAt,"roberta"),qAt.forEach(t),q4o=r(NB," \u2014 "),oG=n(NB,"A",{href:!0});var jAt=s(oG);j4o=r(jAt,"RobertaTokenizer"),jAt.forEach(t),D4o=r(NB," or "),rG=n(NB,"A",{href:!0});var DAt=s(rG);G4o=r(DAt,"RobertaTokenizerFast"),DAt.forEach(t),O4o=r(NB," (RoBERTa model)"),NB.forEach(t),V4o=i(S),nl=n(S,"LI",{});var qB=s(nl);hhe=n(qB,"STRONG",{});var GAt=s(hhe);X4o=r(GAt,"roformer"),GAt.forEach(t),z4o=r(qB," \u2014 "),tG=n(qB,"A",{href:!0});var OAt=s(tG);Q4o=r(OAt,"RoFormerTokenizer"),OAt.forEach(t),W4o=r(qB," or "),aG=n(qB,"A",{href:!0});var VAt=s(aG);U4o=r(VAt,"RoFormerTokenizerFast"),VAt.forEach(t),H4o=r(qB," (RoFormer model)"),qB.forEach(t),J4o=i(S),Lu=n(S,"LI",{});var sIe=s(Lu);uhe=n(sIe,"STRONG",{});var XAt=s(uhe);Y4o=r(XAt,"speech_to_text"),XAt.forEach(t),K4o=r(sIe," \u2014 "),nG=n(sIe,"A",{href:!0});var zAt=s(nG);Z4o=r(zAt,"Speech2TextTokenizer"),zAt.forEach(t),eCo=r(sIe," (Speech2Text model)"),sIe.forEach(t),oCo=i(S),yu=n(S,"LI",{});var lIe=s(yu);phe=n(lIe,"STRONG",{});var QAt=s(phe);rCo=r(QAt,"speech_to_text_2"),QAt.forEach(t),tCo=r(lIe," \u2014 "),sG=n(lIe,"A",{href:!0});var WAt=s(sG);aCo=r(WAt,"Speech2Text2Tokenizer"),WAt.forEach(t),nCo=r(lIe," (Speech2Text2 model)"),lIe.forEach(t),sCo=i(S),sl=n(S,"LI",{});var jB=s(sl);_he=n(jB,"STRONG",{});var UAt=s(_he);lCo=r(UAt,"splinter"),UAt.forEach(t),iCo=r(jB," \u2014 "),lG=n(jB,"A",{href:!0});var HAt=s(lG);dCo=r(HAt,"SplinterTokenizer"),HAt.forEach(t),mCo=r(jB," or "),iG=n(jB,"A",{href:!0});var JAt=s(iG);cCo=r(JAt,"SplinterTokenizerFast"),JAt.forEach(t),fCo=r(jB," (Splinter model)"),jB.forEach(t),gCo=i(S),ll=n(S,"LI",{});var DB=s(ll);bhe=n(DB,"STRONG",{});var YAt=s(bhe);hCo=r(YAt,"squeezebert"),YAt.forEach(t),uCo=r(DB," \u2014 "),dG=n(DB,"A",{href:!0});var KAt=s(dG);pCo=r(KAt,"SqueezeBertTokenizer"),KAt.forEach(t),_Co=r(DB," or "),mG=n(DB,"A",{href:!0});var ZAt=s(mG);bCo=r(ZAt,"SqueezeBertTokenizerFast"),ZAt.forEach(t),vCo=r(DB," (SqueezeBERT model)"),DB.forEach(t),FCo=i(S),il=n(S,"LI",{});var GB=s(il);vhe=n(GB,"STRONG",{});var e6t=s(vhe);TCo=r(e6t,"t5"),e6t.forEach(t),MCo=r(GB," \u2014 "),cG=n(GB,"A",{href:!0});var o6t=s(cG);ECo=r(o6t,"T5Tokenizer"),o6t.forEach(t),CCo=r(GB," or "),fG=n(GB,"A",{href:!0});var r6t=s(fG);wCo=r(r6t,"T5TokenizerFast"),r6t.forEach(t),ACo=r(GB," (T5 model)"),GB.forEach(t),LCo=i(S),xu=n(S,"LI",{});var iIe=s(xu);Fhe=n(iIe,"STRONG",{});var t6t=s(Fhe);yCo=r(t6t,"tapas"),t6t.forEach(t),xCo=r(iIe," \u2014 "),gG=n(iIe,"A",{href:!0});var a6t=s(gG);$Co=r(a6t,"TapasTokenizer"),a6t.forEach(t),kCo=r(iIe," (TAPAS model)"),iIe.forEach(t),SCo=i(S),$u=n(S,"LI",{});var dIe=s($u);The=n(dIe,"STRONG",{});var n6t=s(The);RCo=r(n6t,"tapex"),n6t.forEach(t),PCo=r(dIe," \u2014 "),hG=n(dIe,"A",{href:!0});var s6t=s(hG);BCo=r(s6t,"TapexTokenizer"),s6t.forEach(t),ICo=r(dIe," (TAPEX model)"),dIe.forEach(t),NCo=i(S),ku=n(S,"LI",{});var mIe=s(ku);Mhe=n(mIe,"STRONG",{});var l6t=s(Mhe);qCo=r(l6t,"transfo-xl"),l6t.forEach(t),jCo=r(mIe," \u2014 "),uG=n(mIe,"A",{href:!0});var i6t=s(uG);DCo=r(i6t,"TransfoXLTokenizer"),i6t.forEach(t),GCo=r(mIe," (Transformer-XL model)"),mIe.forEach(t),OCo=i(S),dl=n(S,"LI",{});var OB=s(dl);Ehe=n(OB,"STRONG",{});var d6t=s(Ehe);VCo=r(d6t,"vilt"),d6t.forEach(t),XCo=r(OB," \u2014 "),pG=n(OB,"A",{href:!0});var m6t=s(pG);zCo=r(m6t,"BertTokenizer"),m6t.forEach(t),QCo=r(OB," or "),_G=n(OB,"A",{href:!0});var c6t=s(_G);WCo=r(c6t,"BertTokenizerFast"),c6t.forEach(t),UCo=r(OB," (ViLT model)"),OB.forEach(t),HCo=i(S),ml=n(S,"LI",{});var VB=s(ml);Che=n(VB,"STRONG",{});var f6t=s(Che);JCo=r(f6t,"visual_bert"),f6t.forEach(t),YCo=r(VB," \u2014 "),bG=n(VB,"A",{href:!0});var g6t=s(bG);KCo=r(g6t,"BertTokenizer"),g6t.forEach(t),ZCo=r(VB," or "),vG=n(VB,"A",{href:!0});var h6t=s(vG);e3o=r(h6t,"BertTokenizerFast"),h6t.forEach(t),o3o=r(VB," (VisualBERT model)"),VB.forEach(t),r3o=i(S),Su=n(S,"LI",{});var cIe=s(Su);whe=n(cIe,"STRONG",{});var u6t=s(whe);t3o=r(u6t,"wav2vec2"),u6t.forEach(t),a3o=r(cIe," \u2014 "),FG=n(cIe,"A",{href:!0});var p6t=s(FG);n3o=r(p6t,"Wav2Vec2CTCTokenizer"),p6t.forEach(t),s3o=r(cIe," (Wav2Vec2 model)"),cIe.forEach(t),l3o=i(S),Ru=n(S,"LI",{});var fIe=s(Ru);Ahe=n(fIe,"STRONG",{});var _6t=s(Ahe);i3o=r(_6t,"wav2vec2-conformer"),_6t.forEach(t),d3o=r(fIe," \u2014 "),TG=n(fIe,"A",{href:!0});var b6t=s(TG);m3o=r(b6t,"Wav2Vec2CTCTokenizer"),b6t.forEach(t),c3o=r(fIe," (Wav2Vec2-Conformer model)"),fIe.forEach(t),f3o=i(S),Pu=n(S,"LI",{});var gIe=s(Pu);Lhe=n(gIe,"STRONG",{});var v6t=s(Lhe);g3o=r(v6t,"wav2vec2_phoneme"),v6t.forEach(t),h3o=r(gIe," \u2014 "),MG=n(gIe,"A",{href:!0});var F6t=s(MG);u3o=r(F6t,"Wav2Vec2PhonemeCTCTokenizer"),F6t.forEach(t),p3o=r(gIe," (Wav2Vec2Phoneme model)"),gIe.forEach(t),_3o=i(S),cl=n(S,"LI",{});var XB=s(cl);yhe=n(XB,"STRONG",{});var T6t=s(yhe);b3o=r(T6t,"xclip"),T6t.forEach(t),v3o=r(XB," \u2014 "),EG=n(XB,"A",{href:!0});var M6t=s(EG);F3o=r(M6t,"CLIPTokenizer"),M6t.forEach(t),T3o=r(XB," or "),CG=n(XB,"A",{href:!0});var E6t=s(CG);M3o=r(E6t,"CLIPTokenizerFast"),E6t.forEach(t),E3o=r(XB," (X-CLIP model)"),XB.forEach(t),C3o=i(S),fl=n(S,"LI",{});var zB=s(fl);xhe=n(zB,"STRONG",{});var C6t=s(xhe);w3o=r(C6t,"xglm"),C6t.forEach(t),A3o=r(zB," \u2014 "),wG=n(zB,"A",{href:!0});var w6t=s(wG);L3o=r(w6t,"XGLMTokenizer"),w6t.forEach(t),y3o=r(zB," or "),AG=n(zB,"A",{href:!0});var A6t=s(AG);x3o=r(A6t,"XGLMTokenizerFast"),A6t.forEach(t),$3o=r(zB," (XGLM model)"),zB.forEach(t),k3o=i(S),Bu=n(S,"LI",{});var hIe=s(Bu);$he=n(hIe,"STRONG",{});var L6t=s($he);S3o=r(L6t,"xlm"),L6t.forEach(t),R3o=r(hIe," \u2014 "),LG=n(hIe,"A",{href:!0});var y6t=s(LG);P3o=r(y6t,"XLMTokenizer"),y6t.forEach(t),B3o=r(hIe," (XLM model)"),hIe.forEach(t),I3o=i(S),Iu=n(S,"LI",{});var uIe=s(Iu);khe=n(uIe,"STRONG",{});var x6t=s(khe);N3o=r(x6t,"xlm-prophetnet"),x6t.forEach(t),q3o=r(uIe," \u2014 "),yG=n(uIe,"A",{href:!0});var $6t=s(yG);j3o=r($6t,"XLMProphetNetTokenizer"),$6t.forEach(t),D3o=r(uIe," (XLM-ProphetNet model)"),uIe.forEach(t),G3o=i(S),gl=n(S,"LI",{});var QB=s(gl);She=n(QB,"STRONG",{});var k6t=s(She);O3o=r(k6t,"xlm-roberta"),k6t.forEach(t),V3o=r(QB," \u2014 "),xG=n(QB,"A",{href:!0});var S6t=s(xG);X3o=r(S6t,"XLMRobertaTokenizer"),S6t.forEach(t),z3o=r(QB," or "),$G=n(QB,"A",{href:!0});var R6t=s($G);Q3o=r(R6t,"XLMRobertaTokenizerFast"),R6t.forEach(t),W3o=r(QB," (XLM-RoBERTa model)"),QB.forEach(t),U3o=i(S),hl=n(S,"LI",{});var WB=s(hl);Rhe=n(WB,"STRONG",{});var P6t=s(Rhe);H3o=r(P6t,"xlm-roberta-xl"),P6t.forEach(t),J3o=r(WB," \u2014 "),kG=n(WB,"A",{href:!0});var B6t=s(kG);Y3o=r(B6t,"XLMRobertaTokenizer"),B6t.forEach(t),K3o=r(WB," or "),SG=n(WB,"A",{href:!0});var I6t=s(SG);Z3o=r(I6t,"XLMRobertaTokenizerFast"),I6t.forEach(t),e5o=r(WB," (XLM-RoBERTa-XL model)"),WB.forEach(t),o5o=i(S),ul=n(S,"LI",{});var UB=s(ul);Phe=n(UB,"STRONG",{});var N6t=s(Phe);r5o=r(N6t,"xlnet"),N6t.forEach(t),t5o=r(UB," \u2014 "),RG=n(UB,"A",{href:!0});var q6t=s(RG);a5o=r(q6t,"XLNetTokenizer"),q6t.forEach(t),n5o=r(UB," or "),PG=n(UB,"A",{href:!0});var j6t=s(PG);s5o=r(j6t,"XLNetTokenizerFast"),j6t.forEach(t),l5o=r(UB," (XLNet model)"),UB.forEach(t),i5o=i(S),pl=n(S,"LI",{});var HB=s(pl);Bhe=n(HB,"STRONG",{});var D6t=s(Bhe);d5o=r(D6t,"yoso"),D6t.forEach(t),m5o=r(HB," \u2014 "),BG=n(HB,"A",{href:!0});var G6t=s(BG);c5o=r(G6t,"AlbertTokenizer"),G6t.forEach(t),f5o=r(HB," or "),IG=n(HB,"A",{href:!0});var O6t=s(IG);g5o=r(O6t,"AlbertTokenizerFast"),O6t.forEach(t),h5o=r(HB," (YOSO model)"),HB.forEach(t),S.forEach(t),u5o=i(El),T(Nu.$$.fragment,El),El.forEach(t),p5o=i(Ml),qu=n(Ml,"DIV",{class:!0});var iro=s(qu);T(hx.$$.fragment,iro),_5o=i(iro),Ihe=n(iro,"P",{});var V6t=s(Ihe);b5o=r(V6t,"Register a new tokenizer in this mapping."),V6t.forEach(t),iro.forEach(t),Ml.forEach(t),ZZe=i(c),hd=n(c,"H2",{class:!0});var dro=s(hd);ju=n(dro,"A",{id:!0,class:!0,href:!0});var X6t=s(ju);Nhe=n(X6t,"SPAN",{});var z6t=s(Nhe);T(ux.$$.fragment,z6t),z6t.forEach(t),X6t.forEach(t),v5o=i(dro),qhe=n(dro,"SPAN",{});var Q6t=s(qhe);F5o=r(Q6t,"AutoFeatureExtractor"),Q6t.forEach(t),dro.forEach(t),eeo=i(c),So=n(c,"DIV",{class:!0});var Cl=s(So);T(px.$$.fragment,Cl),T5o=i(Cl),_x=n(Cl,"P",{});var mro=s(_x);M5o=r(mro,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NG=n(mro,"A",{href:!0});var W6t=s(NG);E5o=r(W6t,"AutoFeatureExtractor.from_pretrained()"),W6t.forEach(t),C5o=r(mro," class method."),mro.forEach(t),w5o=i(Cl),bx=n(Cl,"P",{});var cro=s(bx);A5o=r(cro,"This class cannot be instantiated directly using "),jhe=n(cro,"CODE",{});var U6t=s(jhe);L5o=r(U6t,"__init__()"),U6t.forEach(t),y5o=r(cro," (throws an error)."),cro.forEach(t),x5o=i(Cl),Ye=n(Cl,"DIV",{class:!0});var ba=s(Ye);T(vx.$$.fragment,ba),$5o=i(ba),Dhe=n(ba,"P",{});var H6t=s(Dhe);k5o=r(H6t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),H6t.forEach(t),S5o=i(ba),Ha=n(ba,"P",{});var Uy=s(Ha);R5o=r(Uy,"The feature extractor class to instantiate is selected based on the "),Ghe=n(Uy,"CODE",{});var J6t=s(Ghe);P5o=r(J6t,"model_type"),J6t.forEach(t),B5o=r(Uy,` property of the config object
(either passed as an argument or loaded from `),Ohe=n(Uy,"CODE",{});var Y6t=s(Ohe);I5o=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),N5o=r(Uy,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vhe=n(Uy,"CODE",{});var K6t=s(Vhe);q5o=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),j5o=r(Uy,":"),Uy.forEach(t),D5o=i(ba),z=n(ba,"UL",{});var W=s(z);Du=n(W,"LI",{});var pIe=s(Du);Xhe=n(pIe,"STRONG",{});var Z6t=s(Xhe);G5o=r(Z6t,"beit"),Z6t.forEach(t),O5o=r(pIe," \u2014 "),qG=n(pIe,"A",{href:!0});var e7t=s(qG);V5o=r(e7t,"BeitFeatureExtractor"),e7t.forEach(t),X5o=r(pIe," (BEiT model)"),pIe.forEach(t),z5o=i(W),Gu=n(W,"LI",{});var _Ie=s(Gu);zhe=n(_Ie,"STRONG",{});var o7t=s(zhe);Q5o=r(o7t,"clip"),o7t.forEach(t),W5o=r(_Ie," \u2014 "),jG=n(_Ie,"A",{href:!0});var r7t=s(jG);U5o=r(r7t,"CLIPFeatureExtractor"),r7t.forEach(t),H5o=r(_Ie," (CLIP model)"),_Ie.forEach(t),J5o=i(W),Ou=n(W,"LI",{});var bIe=s(Ou);Qhe=n(bIe,"STRONG",{});var t7t=s(Qhe);Y5o=r(t7t,"conditional_detr"),t7t.forEach(t),K5o=r(bIe," \u2014 "),DG=n(bIe,"A",{href:!0});var a7t=s(DG);Z5o=r(a7t,"ConditionalDetrFeatureExtractor"),a7t.forEach(t),e0o=r(bIe," (Conditional DETR model)"),bIe.forEach(t),o0o=i(W),Vu=n(W,"LI",{});var vIe=s(Vu);Whe=n(vIe,"STRONG",{});var n7t=s(Whe);r0o=r(n7t,"convnext"),n7t.forEach(t),t0o=r(vIe," \u2014 "),GG=n(vIe,"A",{href:!0});var s7t=s(GG);a0o=r(s7t,"ConvNextFeatureExtractor"),s7t.forEach(t),n0o=r(vIe," (ConvNeXT model)"),vIe.forEach(t),s0o=i(W),Xu=n(W,"LI",{});var FIe=s(Xu);Uhe=n(FIe,"STRONG",{});var l7t=s(Uhe);l0o=r(l7t,"cvt"),l7t.forEach(t),i0o=r(FIe," \u2014 "),OG=n(FIe,"A",{href:!0});var i7t=s(OG);d0o=r(i7t,"ConvNextFeatureExtractor"),i7t.forEach(t),m0o=r(FIe," (CvT model)"),FIe.forEach(t),c0o=i(W),zu=n(W,"LI",{});var TIe=s(zu);Hhe=n(TIe,"STRONG",{});var d7t=s(Hhe);f0o=r(d7t,"data2vec-audio"),d7t.forEach(t),g0o=r(TIe," \u2014 "),VG=n(TIe,"A",{href:!0});var m7t=s(VG);h0o=r(m7t,"Wav2Vec2FeatureExtractor"),m7t.forEach(t),u0o=r(TIe," (Data2VecAudio model)"),TIe.forEach(t),p0o=i(W),Qu=n(W,"LI",{});var MIe=s(Qu);Jhe=n(MIe,"STRONG",{});var c7t=s(Jhe);_0o=r(c7t,"data2vec-vision"),c7t.forEach(t),b0o=r(MIe," \u2014 "),XG=n(MIe,"A",{href:!0});var f7t=s(XG);v0o=r(f7t,"BeitFeatureExtractor"),f7t.forEach(t),F0o=r(MIe," (Data2VecVision model)"),MIe.forEach(t),T0o=i(W),Wu=n(W,"LI",{});var EIe=s(Wu);Yhe=n(EIe,"STRONG",{});var g7t=s(Yhe);M0o=r(g7t,"deformable_detr"),g7t.forEach(t),E0o=r(EIe," \u2014 "),zG=n(EIe,"A",{href:!0});var h7t=s(zG);C0o=r(h7t,"DeformableDetrFeatureExtractor"),h7t.forEach(t),w0o=r(EIe," (Deformable DETR model)"),EIe.forEach(t),A0o=i(W),Uu=n(W,"LI",{});var CIe=s(Uu);Khe=n(CIe,"STRONG",{});var u7t=s(Khe);L0o=r(u7t,"deit"),u7t.forEach(t),y0o=r(CIe," \u2014 "),QG=n(CIe,"A",{href:!0});var p7t=s(QG);x0o=r(p7t,"DeiTFeatureExtractor"),p7t.forEach(t),$0o=r(CIe," (DeiT model)"),CIe.forEach(t),k0o=i(W),Hu=n(W,"LI",{});var wIe=s(Hu);Zhe=n(wIe,"STRONG",{});var _7t=s(Zhe);S0o=r(_7t,"detr"),_7t.forEach(t),R0o=r(wIe," \u2014 "),WG=n(wIe,"A",{href:!0});var b7t=s(WG);P0o=r(b7t,"DetrFeatureExtractor"),b7t.forEach(t),B0o=r(wIe," (DETR model)"),wIe.forEach(t),I0o=i(W),Ju=n(W,"LI",{});var AIe=s(Ju);eue=n(AIe,"STRONG",{});var v7t=s(eue);N0o=r(v7t,"donut"),v7t.forEach(t),q0o=r(AIe," \u2014 "),UG=n(AIe,"A",{href:!0});var F7t=s(UG);j0o=r(F7t,"DonutFeatureExtractor"),F7t.forEach(t),D0o=r(AIe," (Donut model)"),AIe.forEach(t),G0o=i(W),Yu=n(W,"LI",{});var LIe=s(Yu);oue=n(LIe,"STRONG",{});var T7t=s(oue);O0o=r(T7t,"dpt"),T7t.forEach(t),V0o=r(LIe," \u2014 "),HG=n(LIe,"A",{href:!0});var M7t=s(HG);X0o=r(M7t,"DPTFeatureExtractor"),M7t.forEach(t),z0o=r(LIe," (DPT model)"),LIe.forEach(t),Q0o=i(W),Ku=n(W,"LI",{});var yIe=s(Ku);rue=n(yIe,"STRONG",{});var E7t=s(rue);W0o=r(E7t,"flava"),E7t.forEach(t),U0o=r(yIe," \u2014 "),JG=n(yIe,"A",{href:!0});var C7t=s(JG);H0o=r(C7t,"FlavaFeatureExtractor"),C7t.forEach(t),J0o=r(yIe," (FLAVA model)"),yIe.forEach(t),Y0o=i(W),Zu=n(W,"LI",{});var xIe=s(Zu);tue=n(xIe,"STRONG",{});var w7t=s(tue);K0o=r(w7t,"glpn"),w7t.forEach(t),Z0o=r(xIe," \u2014 "),YG=n(xIe,"A",{href:!0});var A7t=s(YG);ewo=r(A7t,"GLPNFeatureExtractor"),A7t.forEach(t),owo=r(xIe," (GLPN model)"),xIe.forEach(t),rwo=i(W),ep=n(W,"LI",{});var $Ie=s(ep);aue=n($Ie,"STRONG",{});var L7t=s(aue);two=r(L7t,"groupvit"),L7t.forEach(t),awo=r($Ie," \u2014 "),KG=n($Ie,"A",{href:!0});var y7t=s(KG);nwo=r(y7t,"CLIPFeatureExtractor"),y7t.forEach(t),swo=r($Ie," (GroupViT model)"),$Ie.forEach(t),lwo=i(W),op=n(W,"LI",{});var kIe=s(op);nue=n(kIe,"STRONG",{});var x7t=s(nue);iwo=r(x7t,"hubert"),x7t.forEach(t),dwo=r(kIe," \u2014 "),ZG=n(kIe,"A",{href:!0});var $7t=s(ZG);mwo=r($7t,"Wav2Vec2FeatureExtractor"),$7t.forEach(t),cwo=r(kIe," (Hubert model)"),kIe.forEach(t),fwo=i(W),rp=n(W,"LI",{});var SIe=s(rp);sue=n(SIe,"STRONG",{});var k7t=s(sue);gwo=r(k7t,"imagegpt"),k7t.forEach(t),hwo=r(SIe," \u2014 "),eO=n(SIe,"A",{href:!0});var S7t=s(eO);uwo=r(S7t,"ImageGPTFeatureExtractor"),S7t.forEach(t),pwo=r(SIe," (ImageGPT model)"),SIe.forEach(t),_wo=i(W),tp=n(W,"LI",{});var RIe=s(tp);lue=n(RIe,"STRONG",{});var R7t=s(lue);bwo=r(R7t,"layoutlmv2"),R7t.forEach(t),vwo=r(RIe," \u2014 "),oO=n(RIe,"A",{href:!0});var P7t=s(oO);Fwo=r(P7t,"LayoutLMv2FeatureExtractor"),P7t.forEach(t),Two=r(RIe," (LayoutLMv2 model)"),RIe.forEach(t),Mwo=i(W),ap=n(W,"LI",{});var PIe=s(ap);iue=n(PIe,"STRONG",{});var B7t=s(iue);Ewo=r(B7t,"layoutlmv3"),B7t.forEach(t),Cwo=r(PIe," \u2014 "),rO=n(PIe,"A",{href:!0});var I7t=s(rO);wwo=r(I7t,"LayoutLMv3FeatureExtractor"),I7t.forEach(t),Awo=r(PIe," (LayoutLMv3 model)"),PIe.forEach(t),Lwo=i(W),np=n(W,"LI",{});var BIe=s(np);due=n(BIe,"STRONG",{});var N7t=s(due);ywo=r(N7t,"levit"),N7t.forEach(t),xwo=r(BIe," \u2014 "),tO=n(BIe,"A",{href:!0});var q7t=s(tO);$wo=r(q7t,"LevitFeatureExtractor"),q7t.forEach(t),kwo=r(BIe," (LeViT model)"),BIe.forEach(t),Swo=i(W),sp=n(W,"LI",{});var IIe=s(sp);mue=n(IIe,"STRONG",{});var j7t=s(mue);Rwo=r(j7t,"maskformer"),j7t.forEach(t),Pwo=r(IIe," \u2014 "),aO=n(IIe,"A",{href:!0});var D7t=s(aO);Bwo=r(D7t,"MaskFormerFeatureExtractor"),D7t.forEach(t),Iwo=r(IIe," (MaskFormer model)"),IIe.forEach(t),Nwo=i(W),lp=n(W,"LI",{});var NIe=s(lp);cue=n(NIe,"STRONG",{});var G7t=s(cue);qwo=r(G7t,"mctct"),G7t.forEach(t),jwo=r(NIe," \u2014 "),nO=n(NIe,"A",{href:!0});var O7t=s(nO);Dwo=r(O7t,"MCTCTFeatureExtractor"),O7t.forEach(t),Gwo=r(NIe," (M-CTC-T model)"),NIe.forEach(t),Owo=i(W),ip=n(W,"LI",{});var qIe=s(ip);fue=n(qIe,"STRONG",{});var V7t=s(fue);Vwo=r(V7t,"mobilevit"),V7t.forEach(t),Xwo=r(qIe," \u2014 "),sO=n(qIe,"A",{href:!0});var X7t=s(sO);zwo=r(X7t,"MobileViTFeatureExtractor"),X7t.forEach(t),Qwo=r(qIe," (MobileViT model)"),qIe.forEach(t),Wwo=i(W),dp=n(W,"LI",{});var jIe=s(dp);gue=n(jIe,"STRONG",{});var z7t=s(gue);Uwo=r(z7t,"owlvit"),z7t.forEach(t),Hwo=r(jIe," \u2014 "),lO=n(jIe,"A",{href:!0});var Q7t=s(lO);Jwo=r(Q7t,"OwlViTFeatureExtractor"),Q7t.forEach(t),Ywo=r(jIe," (OWL-ViT model)"),jIe.forEach(t),Kwo=i(W),mp=n(W,"LI",{});var DIe=s(mp);hue=n(DIe,"STRONG",{});var W7t=s(hue);Zwo=r(W7t,"perceiver"),W7t.forEach(t),eAo=r(DIe," \u2014 "),iO=n(DIe,"A",{href:!0});var U7t=s(iO);oAo=r(U7t,"PerceiverFeatureExtractor"),U7t.forEach(t),rAo=r(DIe," (Perceiver model)"),DIe.forEach(t),tAo=i(W),cp=n(W,"LI",{});var GIe=s(cp);uue=n(GIe,"STRONG",{});var H7t=s(uue);aAo=r(H7t,"poolformer"),H7t.forEach(t),nAo=r(GIe," \u2014 "),dO=n(GIe,"A",{href:!0});var J7t=s(dO);sAo=r(J7t,"PoolFormerFeatureExtractor"),J7t.forEach(t),lAo=r(GIe," (PoolFormer model)"),GIe.forEach(t),iAo=i(W),fp=n(W,"LI",{});var OIe=s(fp);pue=n(OIe,"STRONG",{});var Y7t=s(pue);dAo=r(Y7t,"regnet"),Y7t.forEach(t),mAo=r(OIe," \u2014 "),mO=n(OIe,"A",{href:!0});var K7t=s(mO);cAo=r(K7t,"ConvNextFeatureExtractor"),K7t.forEach(t),fAo=r(OIe," (RegNet model)"),OIe.forEach(t),gAo=i(W),gp=n(W,"LI",{});var VIe=s(gp);_ue=n(VIe,"STRONG",{});var Z7t=s(_ue);hAo=r(Z7t,"resnet"),Z7t.forEach(t),uAo=r(VIe," \u2014 "),cO=n(VIe,"A",{href:!0});var eLt=s(cO);pAo=r(eLt,"ConvNextFeatureExtractor"),eLt.forEach(t),_Ao=r(VIe," (ResNet model)"),VIe.forEach(t),bAo=i(W),hp=n(W,"LI",{});var XIe=s(hp);bue=n(XIe,"STRONG",{});var oLt=s(bue);vAo=r(oLt,"segformer"),oLt.forEach(t),FAo=r(XIe," \u2014 "),fO=n(XIe,"A",{href:!0});var rLt=s(fO);TAo=r(rLt,"SegformerFeatureExtractor"),rLt.forEach(t),MAo=r(XIe," (SegFormer model)"),XIe.forEach(t),EAo=i(W),up=n(W,"LI",{});var zIe=s(up);vue=n(zIe,"STRONG",{});var tLt=s(vue);CAo=r(tLt,"speech_to_text"),tLt.forEach(t),wAo=r(zIe," \u2014 "),gO=n(zIe,"A",{href:!0});var aLt=s(gO);AAo=r(aLt,"Speech2TextFeatureExtractor"),aLt.forEach(t),LAo=r(zIe," (Speech2Text model)"),zIe.forEach(t),yAo=i(W),pp=n(W,"LI",{});var QIe=s(pp);Fue=n(QIe,"STRONG",{});var nLt=s(Fue);xAo=r(nLt,"swin"),nLt.forEach(t),$Ao=r(QIe," \u2014 "),hO=n(QIe,"A",{href:!0});var sLt=s(hO);kAo=r(sLt,"ViTFeatureExtractor"),sLt.forEach(t),SAo=r(QIe," (Swin Transformer model)"),QIe.forEach(t),RAo=i(W),_p=n(W,"LI",{});var WIe=s(_p);Tue=n(WIe,"STRONG",{});var lLt=s(Tue);PAo=r(lLt,"swinv2"),lLt.forEach(t),BAo=r(WIe," \u2014 "),uO=n(WIe,"A",{href:!0});var iLt=s(uO);IAo=r(iLt,"ViTFeatureExtractor"),iLt.forEach(t),NAo=r(WIe," (Swin Transformer V2 model)"),WIe.forEach(t),qAo=i(W),bp=n(W,"LI",{});var UIe=s(bp);Mue=n(UIe,"STRONG",{});var dLt=s(Mue);jAo=r(dLt,"van"),dLt.forEach(t),DAo=r(UIe," \u2014 "),pO=n(UIe,"A",{href:!0});var mLt=s(pO);GAo=r(mLt,"ConvNextFeatureExtractor"),mLt.forEach(t),OAo=r(UIe," (VAN model)"),UIe.forEach(t),VAo=i(W),vp=n(W,"LI",{});var HIe=s(vp);Eue=n(HIe,"STRONG",{});var cLt=s(Eue);XAo=r(cLt,"videomae"),cLt.forEach(t),zAo=r(HIe," \u2014 "),_O=n(HIe,"A",{href:!0});var fLt=s(_O);QAo=r(fLt,"VideoMAEFeatureExtractor"),fLt.forEach(t),WAo=r(HIe," (VideoMAE model)"),HIe.forEach(t),UAo=i(W),Fp=n(W,"LI",{});var JIe=s(Fp);Cue=n(JIe,"STRONG",{});var gLt=s(Cue);HAo=r(gLt,"vilt"),gLt.forEach(t),JAo=r(JIe," \u2014 "),bO=n(JIe,"A",{href:!0});var hLt=s(bO);YAo=r(hLt,"ViltFeatureExtractor"),hLt.forEach(t),KAo=r(JIe," (ViLT model)"),JIe.forEach(t),ZAo=i(W),Tp=n(W,"LI",{});var YIe=s(Tp);wue=n(YIe,"STRONG",{});var uLt=s(wue);e6o=r(uLt,"vit"),uLt.forEach(t),o6o=r(YIe," \u2014 "),vO=n(YIe,"A",{href:!0});var pLt=s(vO);r6o=r(pLt,"ViTFeatureExtractor"),pLt.forEach(t),t6o=r(YIe," (ViT model)"),YIe.forEach(t),a6o=i(W),Mp=n(W,"LI",{});var KIe=s(Mp);Aue=n(KIe,"STRONG",{});var _Lt=s(Aue);n6o=r(_Lt,"vit_mae"),_Lt.forEach(t),s6o=r(KIe," \u2014 "),FO=n(KIe,"A",{href:!0});var bLt=s(FO);l6o=r(bLt,"ViTFeatureExtractor"),bLt.forEach(t),i6o=r(KIe," (ViTMAE model)"),KIe.forEach(t),d6o=i(W),Ep=n(W,"LI",{});var ZIe=s(Ep);Lue=n(ZIe,"STRONG",{});var vLt=s(Lue);m6o=r(vLt,"vit_msn"),vLt.forEach(t),c6o=r(ZIe," \u2014 "),TO=n(ZIe,"A",{href:!0});var FLt=s(TO);f6o=r(FLt,"ViTFeatureExtractor"),FLt.forEach(t),g6o=r(ZIe," (ViTMSN model)"),ZIe.forEach(t),h6o=i(W),Cp=n(W,"LI",{});var eNe=s(Cp);yue=n(eNe,"STRONG",{});var TLt=s(yue);u6o=r(TLt,"wav2vec2"),TLt.forEach(t),p6o=r(eNe," \u2014 "),MO=n(eNe,"A",{href:!0});var MLt=s(MO);_6o=r(MLt,"Wav2Vec2FeatureExtractor"),MLt.forEach(t),b6o=r(eNe," (Wav2Vec2 model)"),eNe.forEach(t),v6o=i(W),wp=n(W,"LI",{});var oNe=s(wp);xue=n(oNe,"STRONG",{});var ELt=s(xue);F6o=r(ELt,"wav2vec2-conformer"),ELt.forEach(t),T6o=r(oNe," \u2014 "),EO=n(oNe,"A",{href:!0});var CLt=s(EO);M6o=r(CLt,"Wav2Vec2FeatureExtractor"),CLt.forEach(t),E6o=r(oNe," (Wav2Vec2-Conformer model)"),oNe.forEach(t),C6o=i(W),Ap=n(W,"LI",{});var rNe=s(Ap);$ue=n(rNe,"STRONG",{});var wLt=s($ue);w6o=r(wLt,"xclip"),wLt.forEach(t),A6o=r(rNe," \u2014 "),CO=n(rNe,"A",{href:!0});var ALt=s(CO);L6o=r(ALt,"CLIPFeatureExtractor"),ALt.forEach(t),y6o=r(rNe," (X-CLIP model)"),rNe.forEach(t),x6o=i(W),Lp=n(W,"LI",{});var tNe=s(Lp);kue=n(tNe,"STRONG",{});var LLt=s(kue);$6o=r(LLt,"yolos"),LLt.forEach(t),k6o=r(tNe," \u2014 "),wO=n(tNe,"A",{href:!0});var yLt=s(wO);S6o=r(yLt,"YolosFeatureExtractor"),yLt.forEach(t),R6o=r(tNe," (YOLOS model)"),tNe.forEach(t),W.forEach(t),P6o=i(ba),T(yp.$$.fragment,ba),B6o=i(ba),T(xp.$$.fragment,ba),ba.forEach(t),I6o=i(Cl),$p=n(Cl,"DIV",{class:!0});var fro=s($p);T(Fx.$$.fragment,fro),N6o=i(fro),Sue=n(fro,"P",{});var xLt=s(Sue);q6o=r(xLt,"Register a new feature extractor for this class."),xLt.forEach(t),fro.forEach(t),Cl.forEach(t),oeo=i(c),ud=n(c,"H2",{class:!0});var gro=s(ud);kp=n(gro,"A",{id:!0,class:!0,href:!0});var $Lt=s(kp);Rue=n($Lt,"SPAN",{});var kLt=s(Rue);T(Tx.$$.fragment,kLt),kLt.forEach(t),$Lt.forEach(t),j6o=i(gro),Pue=n(gro,"SPAN",{});var SLt=s(Pue);D6o=r(SLt,"AutoProcessor"),SLt.forEach(t),gro.forEach(t),reo=i(c),Ro=n(c,"DIV",{class:!0});var wl=s(Ro);T(Mx.$$.fragment,wl),G6o=i(wl),Ex=n(wl,"P",{});var hro=s(Ex);O6o=r(hro,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AO=n(hro,"A",{href:!0});var RLt=s(AO);V6o=r(RLt,"AutoProcessor.from_pretrained()"),RLt.forEach(t),X6o=r(hro," class method."),hro.forEach(t),z6o=i(wl),Cx=n(wl,"P",{});var uro=s(Cx);Q6o=r(uro,"This class cannot be instantiated directly using "),Bue=n(uro,"CODE",{});var PLt=s(Bue);W6o=r(PLt,"__init__()"),PLt.forEach(t),U6o=r(uro," (throws an error)."),uro.forEach(t),H6o=i(wl),Ke=n(wl,"DIV",{class:!0});var va=s(Ke);T(wx.$$.fragment,va),J6o=i(va),Iue=n(va,"P",{});var BLt=s(Iue);Y6o=r(BLt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),BLt.forEach(t),K6o=i(va),pd=n(va,"P",{});var Zle=s(pd);Z6o=r(Zle,"The processor class to instantiate is selected based on the "),Nue=n(Zle,"CODE",{});var ILt=s(Nue);e7o=r(ILt,"model_type"),ILt.forEach(t),o7o=r(Zle,` property of the config object (either
passed as an argument or loaded from `),que=n(Zle,"CODE",{});var NLt=s(que);r7o=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),t7o=r(Zle," if possible):"),Zle.forEach(t),a7o=i(va),le=n(va,"UL",{});var ce=s(le);Sp=n(ce,"LI",{});var aNe=s(Sp);jue=n(aNe,"STRONG",{});var qLt=s(jue);n7o=r(qLt,"clip"),qLt.forEach(t),s7o=r(aNe," \u2014 "),LO=n(aNe,"A",{href:!0});var jLt=s(LO);l7o=r(jLt,"CLIPProcessor"),jLt.forEach(t),i7o=r(aNe," (CLIP model)"),aNe.forEach(t),d7o=i(ce),Rp=n(ce,"LI",{});var nNe=s(Rp);Due=n(nNe,"STRONG",{});var DLt=s(Due);m7o=r(DLt,"donut"),DLt.forEach(t),c7o=r(nNe," \u2014 "),yO=n(nNe,"A",{href:!0});var GLt=s(yO);f7o=r(GLt,"DonutProcessor"),GLt.forEach(t),g7o=r(nNe," (Donut model)"),nNe.forEach(t),h7o=i(ce),Pp=n(ce,"LI",{});var sNe=s(Pp);Gue=n(sNe,"STRONG",{});var OLt=s(Gue);u7o=r(OLt,"flava"),OLt.forEach(t),p7o=r(sNe," \u2014 "),xO=n(sNe,"A",{href:!0});var VLt=s(xO);_7o=r(VLt,"FlavaProcessor"),VLt.forEach(t),b7o=r(sNe," (FLAVA model)"),sNe.forEach(t),v7o=i(ce),Bp=n(ce,"LI",{});var lNe=s(Bp);Oue=n(lNe,"STRONG",{});var XLt=s(Oue);F7o=r(XLt,"groupvit"),XLt.forEach(t),T7o=r(lNe," \u2014 "),$O=n(lNe,"A",{href:!0});var zLt=s($O);M7o=r(zLt,"CLIPProcessor"),zLt.forEach(t),E7o=r(lNe," (GroupViT model)"),lNe.forEach(t),C7o=i(ce),Ip=n(ce,"LI",{});var iNe=s(Ip);Vue=n(iNe,"STRONG",{});var QLt=s(Vue);w7o=r(QLt,"layoutlmv2"),QLt.forEach(t),A7o=r(iNe," \u2014 "),kO=n(iNe,"A",{href:!0});var WLt=s(kO);L7o=r(WLt,"LayoutLMv2Processor"),WLt.forEach(t),y7o=r(iNe," (LayoutLMv2 model)"),iNe.forEach(t),x7o=i(ce),Np=n(ce,"LI",{});var dNe=s(Np);Xue=n(dNe,"STRONG",{});var ULt=s(Xue);$7o=r(ULt,"layoutlmv3"),ULt.forEach(t),k7o=r(dNe," \u2014 "),SO=n(dNe,"A",{href:!0});var HLt=s(SO);S7o=r(HLt,"LayoutLMv3Processor"),HLt.forEach(t),R7o=r(dNe," (LayoutLMv3 model)"),dNe.forEach(t),P7o=i(ce),qp=n(ce,"LI",{});var mNe=s(qp);zue=n(mNe,"STRONG",{});var JLt=s(zue);B7o=r(JLt,"layoutxlm"),JLt.forEach(t),I7o=r(mNe," \u2014 "),RO=n(mNe,"A",{href:!0});var YLt=s(RO);N7o=r(YLt,"LayoutXLMProcessor"),YLt.forEach(t),q7o=r(mNe," (LayoutXLM model)"),mNe.forEach(t),j7o=i(ce),jp=n(ce,"LI",{});var cNe=s(jp);Que=n(cNe,"STRONG",{});var KLt=s(Que);D7o=r(KLt,"markuplm"),KLt.forEach(t),G7o=r(cNe," \u2014 "),PO=n(cNe,"A",{href:!0});var ZLt=s(PO);O7o=r(ZLt,"MarkupLMProcessor"),ZLt.forEach(t),V7o=r(cNe," (MarkupLM model)"),cNe.forEach(t),X7o=i(ce),Dp=n(ce,"LI",{});var fNe=s(Dp);Wue=n(fNe,"STRONG",{});var eyt=s(Wue);z7o=r(eyt,"owlvit"),eyt.forEach(t),Q7o=r(fNe," \u2014 "),BO=n(fNe,"A",{href:!0});var oyt=s(BO);W7o=r(oyt,"OwlViTProcessor"),oyt.forEach(t),U7o=r(fNe," (OWL-ViT model)"),fNe.forEach(t),H7o=i(ce),Gp=n(ce,"LI",{});var gNe=s(Gp);Uue=n(gNe,"STRONG",{});var ryt=s(Uue);J7o=r(ryt,"sew"),ryt.forEach(t),Y7o=r(gNe," \u2014 "),IO=n(gNe,"A",{href:!0});var tyt=s(IO);K7o=r(tyt,"Wav2Vec2Processor"),tyt.forEach(t),Z7o=r(gNe," (SEW model)"),gNe.forEach(t),eLo=i(ce),Op=n(ce,"LI",{});var hNe=s(Op);Hue=n(hNe,"STRONG",{});var ayt=s(Hue);oLo=r(ayt,"sew-d"),ayt.forEach(t),rLo=r(hNe," \u2014 "),NO=n(hNe,"A",{href:!0});var nyt=s(NO);tLo=r(nyt,"Wav2Vec2Processor"),nyt.forEach(t),aLo=r(hNe," (SEW-D model)"),hNe.forEach(t),nLo=i(ce),Vp=n(ce,"LI",{});var uNe=s(Vp);Jue=n(uNe,"STRONG",{});var syt=s(Jue);sLo=r(syt,"speech_to_text"),syt.forEach(t),lLo=r(uNe," \u2014 "),qO=n(uNe,"A",{href:!0});var lyt=s(qO);iLo=r(lyt,"Speech2TextProcessor"),lyt.forEach(t),dLo=r(uNe," (Speech2Text model)"),uNe.forEach(t),mLo=i(ce),Xp=n(ce,"LI",{});var pNe=s(Xp);Yue=n(pNe,"STRONG",{});var iyt=s(Yue);cLo=r(iyt,"speech_to_text_2"),iyt.forEach(t),fLo=r(pNe," \u2014 "),jO=n(pNe,"A",{href:!0});var dyt=s(jO);gLo=r(dyt,"Speech2Text2Processor"),dyt.forEach(t),hLo=r(pNe," (Speech2Text2 model)"),pNe.forEach(t),uLo=i(ce),zp=n(ce,"LI",{});var _Ne=s(zp);Kue=n(_Ne,"STRONG",{});var myt=s(Kue);pLo=r(myt,"trocr"),myt.forEach(t),_Lo=r(_Ne," \u2014 "),DO=n(_Ne,"A",{href:!0});var cyt=s(DO);bLo=r(cyt,"TrOCRProcessor"),cyt.forEach(t),vLo=r(_Ne," (TrOCR model)"),_Ne.forEach(t),FLo=i(ce),Qp=n(ce,"LI",{});var bNe=s(Qp);Zue=n(bNe,"STRONG",{});var fyt=s(Zue);TLo=r(fyt,"unispeech"),fyt.forEach(t),MLo=r(bNe," \u2014 "),GO=n(bNe,"A",{href:!0});var gyt=s(GO);ELo=r(gyt,"Wav2Vec2Processor"),gyt.forEach(t),CLo=r(bNe," (UniSpeech model)"),bNe.forEach(t),wLo=i(ce),Wp=n(ce,"LI",{});var vNe=s(Wp);epe=n(vNe,"STRONG",{});var hyt=s(epe);ALo=r(hyt,"unispeech-sat"),hyt.forEach(t),LLo=r(vNe," \u2014 "),OO=n(vNe,"A",{href:!0});var uyt=s(OO);yLo=r(uyt,"Wav2Vec2Processor"),uyt.forEach(t),xLo=r(vNe," (UniSpeechSat model)"),vNe.forEach(t),$Lo=i(ce),Up=n(ce,"LI",{});var FNe=s(Up);ope=n(FNe,"STRONG",{});var pyt=s(ope);kLo=r(pyt,"vilt"),pyt.forEach(t),SLo=r(FNe," \u2014 "),VO=n(FNe,"A",{href:!0});var _yt=s(VO);RLo=r(_yt,"ViltProcessor"),_yt.forEach(t),PLo=r(FNe," (ViLT model)"),FNe.forEach(t),BLo=i(ce),Hp=n(ce,"LI",{});var TNe=s(Hp);rpe=n(TNe,"STRONG",{});var byt=s(rpe);ILo=r(byt,"vision-text-dual-encoder"),byt.forEach(t),NLo=r(TNe," \u2014 "),XO=n(TNe,"A",{href:!0});var vyt=s(XO);qLo=r(vyt,"VisionTextDualEncoderProcessor"),vyt.forEach(t),jLo=r(TNe," (VisionTextDualEncoder model)"),TNe.forEach(t),DLo=i(ce),Jp=n(ce,"LI",{});var MNe=s(Jp);tpe=n(MNe,"STRONG",{});var Fyt=s(tpe);GLo=r(Fyt,"wav2vec2"),Fyt.forEach(t),OLo=r(MNe," \u2014 "),zO=n(MNe,"A",{href:!0});var Tyt=s(zO);VLo=r(Tyt,"Wav2Vec2Processor"),Tyt.forEach(t),XLo=r(MNe," (Wav2Vec2 model)"),MNe.forEach(t),zLo=i(ce),Yp=n(ce,"LI",{});var ENe=s(Yp);ape=n(ENe,"STRONG",{});var Myt=s(ape);QLo=r(Myt,"wav2vec2-conformer"),Myt.forEach(t),WLo=r(ENe," \u2014 "),QO=n(ENe,"A",{href:!0});var Eyt=s(QO);ULo=r(Eyt,"Wav2Vec2Processor"),Eyt.forEach(t),HLo=r(ENe," (Wav2Vec2-Conformer model)"),ENe.forEach(t),JLo=i(ce),Kp=n(ce,"LI",{});var CNe=s(Kp);npe=n(CNe,"STRONG",{});var Cyt=s(npe);YLo=r(Cyt,"wavlm"),Cyt.forEach(t),KLo=r(CNe," \u2014 "),WO=n(CNe,"A",{href:!0});var wyt=s(WO);ZLo=r(wyt,"Wav2Vec2Processor"),wyt.forEach(t),eyo=r(CNe," (WavLM model)"),CNe.forEach(t),oyo=i(ce),Zp=n(ce,"LI",{});var wNe=s(Zp);spe=n(wNe,"STRONG",{});var Ayt=s(spe);ryo=r(Ayt,"xclip"),Ayt.forEach(t),tyo=r(wNe," \u2014 "),UO=n(wNe,"A",{href:!0});var Lyt=s(UO);ayo=r(Lyt,"CLIPProcessor"),Lyt.forEach(t),nyo=r(wNe," (X-CLIP model)"),wNe.forEach(t),ce.forEach(t),syo=i(va),T(e_.$$.fragment,va),lyo=i(va),T(o_.$$.fragment,va),va.forEach(t),iyo=i(wl),r_=n(wl,"DIV",{class:!0});var pro=s(r_);T(Ax.$$.fragment,pro),dyo=i(pro),lpe=n(pro,"P",{});var yyt=s(lpe);myo=r(yyt,"Register a new processor for this class."),yyt.forEach(t),pro.forEach(t),wl.forEach(t),teo=i(c),_d=n(c,"H2",{class:!0});var _ro=s(_d);t_=n(_ro,"A",{id:!0,class:!0,href:!0});var xyt=s(t_);ipe=n(xyt,"SPAN",{});var $yt=s(ipe);T(Lx.$$.fragment,$yt),$yt.forEach(t),xyt.forEach(t),cyo=i(_ro),dpe=n(_ro,"SPAN",{});var kyt=s(dpe);fyo=r(kyt,"AutoModel"),kyt.forEach(t),_ro.forEach(t),aeo=i(c),Po=n(c,"DIV",{class:!0});var Al=s(Po);T(yx.$$.fragment,Al),gyo=i(Al),bd=n(Al,"P",{});var eie=s(bd);hyo=r(eie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HO=n(eie,"A",{href:!0});var Syt=s(HO);uyo=r(Syt,"from_pretrained()"),Syt.forEach(t),pyo=r(eie," class method or the "),JO=n(eie,"A",{href:!0});var Ryt=s(JO);_yo=r(Ryt,"from_config()"),Ryt.forEach(t),byo=r(eie,` class
method.`),eie.forEach(t),vyo=i(Al),xx=n(Al,"P",{});var bro=s(xx);Fyo=r(bro,"This class cannot be instantiated directly using "),mpe=n(bro,"CODE",{});var Pyt=s(mpe);Tyo=r(Pyt,"__init__()"),Pyt.forEach(t),Myo=r(bro," (throws an error)."),bro.forEach(t),Eyo=i(Al),_t=n(Al,"DIV",{class:!0});var Hy=s(_t);T($x.$$.fragment,Hy),Cyo=i(Hy),cpe=n(Hy,"P",{});var Byt=s(cpe);wyo=r(Byt,"Instantiates one of the base model classes of the library from a configuration."),Byt.forEach(t),Ayo=i(Hy),vd=n(Hy,"P",{});var oie=s(vd);Lyo=r(oie,`Note:
Loading a model from its configuration file does `),fpe=n(oie,"STRONG",{});var Iyt=s(fpe);yyo=r(Iyt,"not"),Iyt.forEach(t),xyo=r(oie,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(oie,"A",{href:!0});var Nyt=s(YO);$yo=r(Nyt,"from_pretrained()"),Nyt.forEach(t),kyo=r(oie," to load the model weights."),oie.forEach(t),Syo=i(Hy),T(a_.$$.fragment,Hy),Hy.forEach(t),Ryo=i(Al),Ze=n(Al,"DIV",{class:!0});var Fa=s(Ze);T(kx.$$.fragment,Fa),Pyo=i(Fa),gpe=n(Fa,"P",{});var qyt=s(gpe);Byo=r(qyt,"Instantiate one of the base model classes of the library from a pretrained model."),qyt.forEach(t),Iyo=i(Fa),Ja=n(Fa,"P",{});var Jy=s(Ja);Nyo=r(Jy,"The model class to instantiate is selected based on the "),hpe=n(Jy,"CODE",{});var jyt=s(hpe);qyo=r(jyt,"model_type"),jyt.forEach(t),jyo=r(Jy,` property of the config object (either
passed as an argument or loaded from `),upe=n(Jy,"CODE",{});var Dyt=s(upe);Dyo=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),Gyo=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=n(Jy,"CODE",{});var Gyt=s(ppe);Oyo=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),Vyo=r(Jy,":"),Jy.forEach(t),Xyo=i(Fa),y=n(Fa,"UL",{});var x=s(y);n_=n(x,"LI",{});var ANe=s(n_);_pe=n(ANe,"STRONG",{});var Oyt=s(_pe);zyo=r(Oyt,"albert"),Oyt.forEach(t),Qyo=r(ANe," \u2014 "),KO=n(ANe,"A",{href:!0});var Vyt=s(KO);Wyo=r(Vyt,"AlbertModel"),Vyt.forEach(t),Uyo=r(ANe," (ALBERT model)"),ANe.forEach(t),Hyo=i(x),s_=n(x,"LI",{});var LNe=s(s_);bpe=n(LNe,"STRONG",{});var Xyt=s(bpe);Jyo=r(Xyt,"bart"),Xyt.forEach(t),Yyo=r(LNe," \u2014 "),ZO=n(LNe,"A",{href:!0});var zyt=s(ZO);Kyo=r(zyt,"BartModel"),zyt.forEach(t),Zyo=r(LNe," (BART model)"),LNe.forEach(t),e8o=i(x),l_=n(x,"LI",{});var yNe=s(l_);vpe=n(yNe,"STRONG",{});var Qyt=s(vpe);o8o=r(Qyt,"beit"),Qyt.forEach(t),r8o=r(yNe," \u2014 "),eV=n(yNe,"A",{href:!0});var Wyt=s(eV);t8o=r(Wyt,"BeitModel"),Wyt.forEach(t),a8o=r(yNe," (BEiT model)"),yNe.forEach(t),n8o=i(x),i_=n(x,"LI",{});var xNe=s(i_);Fpe=n(xNe,"STRONG",{});var Uyt=s(Fpe);s8o=r(Uyt,"bert"),Uyt.forEach(t),l8o=r(xNe," \u2014 "),oV=n(xNe,"A",{href:!0});var Hyt=s(oV);i8o=r(Hyt,"BertModel"),Hyt.forEach(t),d8o=r(xNe," (BERT model)"),xNe.forEach(t),m8o=i(x),d_=n(x,"LI",{});var $Ne=s(d_);Tpe=n($Ne,"STRONG",{});var Jyt=s(Tpe);c8o=r(Jyt,"bert-generation"),Jyt.forEach(t),f8o=r($Ne," \u2014 "),rV=n($Ne,"A",{href:!0});var Yyt=s(rV);g8o=r(Yyt,"BertGenerationEncoder"),Yyt.forEach(t),h8o=r($Ne," (Bert Generation model)"),$Ne.forEach(t),u8o=i(x),m_=n(x,"LI",{});var kNe=s(m_);Mpe=n(kNe,"STRONG",{});var Kyt=s(Mpe);p8o=r(Kyt,"big_bird"),Kyt.forEach(t),_8o=r(kNe," \u2014 "),tV=n(kNe,"A",{href:!0});var Zyt=s(tV);b8o=r(Zyt,"BigBirdModel"),Zyt.forEach(t),v8o=r(kNe," (BigBird model)"),kNe.forEach(t),F8o=i(x),c_=n(x,"LI",{});var SNe=s(c_);Epe=n(SNe,"STRONG",{});var e8t=s(Epe);T8o=r(e8t,"bigbird_pegasus"),e8t.forEach(t),M8o=r(SNe," \u2014 "),aV=n(SNe,"A",{href:!0});var o8t=s(aV);E8o=r(o8t,"BigBirdPegasusModel"),o8t.forEach(t),C8o=r(SNe," (BigBird-Pegasus model)"),SNe.forEach(t),w8o=i(x),f_=n(x,"LI",{});var RNe=s(f_);Cpe=n(RNe,"STRONG",{});var r8t=s(Cpe);A8o=r(r8t,"blenderbot"),r8t.forEach(t),L8o=r(RNe," \u2014 "),nV=n(RNe,"A",{href:!0});var t8t=s(nV);y8o=r(t8t,"BlenderbotModel"),t8t.forEach(t),x8o=r(RNe," (Blenderbot model)"),RNe.forEach(t),$8o=i(x),g_=n(x,"LI",{});var PNe=s(g_);wpe=n(PNe,"STRONG",{});var a8t=s(wpe);k8o=r(a8t,"blenderbot-small"),a8t.forEach(t),S8o=r(PNe," \u2014 "),sV=n(PNe,"A",{href:!0});var n8t=s(sV);R8o=r(n8t,"BlenderbotSmallModel"),n8t.forEach(t),P8o=r(PNe," (BlenderbotSmall model)"),PNe.forEach(t),B8o=i(x),h_=n(x,"LI",{});var BNe=s(h_);Ape=n(BNe,"STRONG",{});var s8t=s(Ape);I8o=r(s8t,"bloom"),s8t.forEach(t),N8o=r(BNe," \u2014 "),lV=n(BNe,"A",{href:!0});var l8t=s(lV);q8o=r(l8t,"BloomModel"),l8t.forEach(t),j8o=r(BNe," (BLOOM model)"),BNe.forEach(t),D8o=i(x),u_=n(x,"LI",{});var INe=s(u_);Lpe=n(INe,"STRONG",{});var i8t=s(Lpe);G8o=r(i8t,"camembert"),i8t.forEach(t),O8o=r(INe," \u2014 "),iV=n(INe,"A",{href:!0});var d8t=s(iV);V8o=r(d8t,"CamembertModel"),d8t.forEach(t),X8o=r(INe," (CamemBERT model)"),INe.forEach(t),z8o=i(x),p_=n(x,"LI",{});var NNe=s(p_);ype=n(NNe,"STRONG",{});var m8t=s(ype);Q8o=r(m8t,"canine"),m8t.forEach(t),W8o=r(NNe," \u2014 "),dV=n(NNe,"A",{href:!0});var c8t=s(dV);U8o=r(c8t,"CanineModel"),c8t.forEach(t),H8o=r(NNe," (CANINE model)"),NNe.forEach(t),J8o=i(x),__=n(x,"LI",{});var qNe=s(__);xpe=n(qNe,"STRONG",{});var f8t=s(xpe);Y8o=r(f8t,"clip"),f8t.forEach(t),K8o=r(qNe," \u2014 "),mV=n(qNe,"A",{href:!0});var g8t=s(mV);Z8o=r(g8t,"CLIPModel"),g8t.forEach(t),e9o=r(qNe," (CLIP model)"),qNe.forEach(t),o9o=i(x),b_=n(x,"LI",{});var jNe=s(b_);$pe=n(jNe,"STRONG",{});var h8t=s($pe);r9o=r(h8t,"codegen"),h8t.forEach(t),t9o=r(jNe," \u2014 "),cV=n(jNe,"A",{href:!0});var u8t=s(cV);a9o=r(u8t,"CodeGenModel"),u8t.forEach(t),n9o=r(jNe," (CodeGen model)"),jNe.forEach(t),s9o=i(x),v_=n(x,"LI",{});var DNe=s(v_);kpe=n(DNe,"STRONG",{});var p8t=s(kpe);l9o=r(p8t,"conditional_detr"),p8t.forEach(t),i9o=r(DNe," \u2014 "),fV=n(DNe,"A",{href:!0});var _8t=s(fV);d9o=r(_8t,"ConditionalDetrModel"),_8t.forEach(t),m9o=r(DNe," (Conditional DETR model)"),DNe.forEach(t),c9o=i(x),F_=n(x,"LI",{});var GNe=s(F_);Spe=n(GNe,"STRONG",{});var b8t=s(Spe);f9o=r(b8t,"convbert"),b8t.forEach(t),g9o=r(GNe," \u2014 "),gV=n(GNe,"A",{href:!0});var v8t=s(gV);h9o=r(v8t,"ConvBertModel"),v8t.forEach(t),u9o=r(GNe," (ConvBERT model)"),GNe.forEach(t),p9o=i(x),T_=n(x,"LI",{});var ONe=s(T_);Rpe=n(ONe,"STRONG",{});var F8t=s(Rpe);_9o=r(F8t,"convnext"),F8t.forEach(t),b9o=r(ONe," \u2014 "),hV=n(ONe,"A",{href:!0});var T8t=s(hV);v9o=r(T8t,"ConvNextModel"),T8t.forEach(t),F9o=r(ONe," (ConvNeXT model)"),ONe.forEach(t),T9o=i(x),M_=n(x,"LI",{});var VNe=s(M_);Ppe=n(VNe,"STRONG",{});var M8t=s(Ppe);M9o=r(M8t,"ctrl"),M8t.forEach(t),E9o=r(VNe," \u2014 "),uV=n(VNe,"A",{href:!0});var E8t=s(uV);C9o=r(E8t,"CTRLModel"),E8t.forEach(t),w9o=r(VNe," (CTRL model)"),VNe.forEach(t),A9o=i(x),E_=n(x,"LI",{});var XNe=s(E_);Bpe=n(XNe,"STRONG",{});var C8t=s(Bpe);L9o=r(C8t,"cvt"),C8t.forEach(t),y9o=r(XNe," \u2014 "),pV=n(XNe,"A",{href:!0});var w8t=s(pV);x9o=r(w8t,"CvtModel"),w8t.forEach(t),$9o=r(XNe," (CvT model)"),XNe.forEach(t),k9o=i(x),C_=n(x,"LI",{});var zNe=s(C_);Ipe=n(zNe,"STRONG",{});var A8t=s(Ipe);S9o=r(A8t,"data2vec-audio"),A8t.forEach(t),R9o=r(zNe," \u2014 "),_V=n(zNe,"A",{href:!0});var L8t=s(_V);P9o=r(L8t,"Data2VecAudioModel"),L8t.forEach(t),B9o=r(zNe," (Data2VecAudio model)"),zNe.forEach(t),I9o=i(x),w_=n(x,"LI",{});var QNe=s(w_);Npe=n(QNe,"STRONG",{});var y8t=s(Npe);N9o=r(y8t,"data2vec-text"),y8t.forEach(t),q9o=r(QNe," \u2014 "),bV=n(QNe,"A",{href:!0});var x8t=s(bV);j9o=r(x8t,"Data2VecTextModel"),x8t.forEach(t),D9o=r(QNe," (Data2VecText model)"),QNe.forEach(t),G9o=i(x),A_=n(x,"LI",{});var WNe=s(A_);qpe=n(WNe,"STRONG",{});var $8t=s(qpe);O9o=r($8t,"data2vec-vision"),$8t.forEach(t),V9o=r(WNe," \u2014 "),vV=n(WNe,"A",{href:!0});var k8t=s(vV);X9o=r(k8t,"Data2VecVisionModel"),k8t.forEach(t),z9o=r(WNe," (Data2VecVision model)"),WNe.forEach(t),Q9o=i(x),L_=n(x,"LI",{});var UNe=s(L_);jpe=n(UNe,"STRONG",{});var S8t=s(jpe);W9o=r(S8t,"deberta"),S8t.forEach(t),U9o=r(UNe," \u2014 "),FV=n(UNe,"A",{href:!0});var R8t=s(FV);H9o=r(R8t,"DebertaModel"),R8t.forEach(t),J9o=r(UNe," (DeBERTa model)"),UNe.forEach(t),Y9o=i(x),y_=n(x,"LI",{});var HNe=s(y_);Dpe=n(HNe,"STRONG",{});var P8t=s(Dpe);K9o=r(P8t,"deberta-v2"),P8t.forEach(t),Z9o=r(HNe," \u2014 "),TV=n(HNe,"A",{href:!0});var B8t=s(TV);exo=r(B8t,"DebertaV2Model"),B8t.forEach(t),oxo=r(HNe," (DeBERTa-v2 model)"),HNe.forEach(t),rxo=i(x),x_=n(x,"LI",{});var JNe=s(x_);Gpe=n(JNe,"STRONG",{});var I8t=s(Gpe);txo=r(I8t,"decision_transformer"),I8t.forEach(t),axo=r(JNe," \u2014 "),MV=n(JNe,"A",{href:!0});var N8t=s(MV);nxo=r(N8t,"DecisionTransformerModel"),N8t.forEach(t),sxo=r(JNe," (Decision Transformer model)"),JNe.forEach(t),lxo=i(x),$_=n(x,"LI",{});var YNe=s($_);Ope=n(YNe,"STRONG",{});var q8t=s(Ope);ixo=r(q8t,"deformable_detr"),q8t.forEach(t),dxo=r(YNe," \u2014 "),EV=n(YNe,"A",{href:!0});var j8t=s(EV);mxo=r(j8t,"DeformableDetrModel"),j8t.forEach(t),cxo=r(YNe," (Deformable DETR model)"),YNe.forEach(t),fxo=i(x),k_=n(x,"LI",{});var KNe=s(k_);Vpe=n(KNe,"STRONG",{});var D8t=s(Vpe);gxo=r(D8t,"deit"),D8t.forEach(t),hxo=r(KNe," \u2014 "),CV=n(KNe,"A",{href:!0});var G8t=s(CV);uxo=r(G8t,"DeiTModel"),G8t.forEach(t),pxo=r(KNe," (DeiT model)"),KNe.forEach(t),_xo=i(x),S_=n(x,"LI",{});var ZNe=s(S_);Xpe=n(ZNe,"STRONG",{});var O8t=s(Xpe);bxo=r(O8t,"detr"),O8t.forEach(t),vxo=r(ZNe," \u2014 "),wV=n(ZNe,"A",{href:!0});var V8t=s(wV);Fxo=r(V8t,"DetrModel"),V8t.forEach(t),Txo=r(ZNe," (DETR model)"),ZNe.forEach(t),Mxo=i(x),R_=n(x,"LI",{});var eqe=s(R_);zpe=n(eqe,"STRONG",{});var X8t=s(zpe);Exo=r(X8t,"distilbert"),X8t.forEach(t),Cxo=r(eqe," \u2014 "),AV=n(eqe,"A",{href:!0});var z8t=s(AV);wxo=r(z8t,"DistilBertModel"),z8t.forEach(t),Axo=r(eqe," (DistilBERT model)"),eqe.forEach(t),Lxo=i(x),P_=n(x,"LI",{});var oqe=s(P_);Qpe=n(oqe,"STRONG",{});var Q8t=s(Qpe);yxo=r(Q8t,"donut-swin"),Q8t.forEach(t),xxo=r(oqe," \u2014 "),LV=n(oqe,"A",{href:!0});var W8t=s(LV);$xo=r(W8t,"DonutSwinModel"),W8t.forEach(t),kxo=r(oqe," (DonutSwin model)"),oqe.forEach(t),Sxo=i(x),B_=n(x,"LI",{});var rqe=s(B_);Wpe=n(rqe,"STRONG",{});var U8t=s(Wpe);Rxo=r(U8t,"dpr"),U8t.forEach(t),Pxo=r(rqe," \u2014 "),yV=n(rqe,"A",{href:!0});var H8t=s(yV);Bxo=r(H8t,"DPRQuestionEncoder"),H8t.forEach(t),Ixo=r(rqe," (DPR model)"),rqe.forEach(t),Nxo=i(x),I_=n(x,"LI",{});var tqe=s(I_);Upe=n(tqe,"STRONG",{});var J8t=s(Upe);qxo=r(J8t,"dpt"),J8t.forEach(t),jxo=r(tqe," \u2014 "),xV=n(tqe,"A",{href:!0});var Y8t=s(xV);Dxo=r(Y8t,"DPTModel"),Y8t.forEach(t),Gxo=r(tqe," (DPT model)"),tqe.forEach(t),Oxo=i(x),N_=n(x,"LI",{});var aqe=s(N_);Hpe=n(aqe,"STRONG",{});var K8t=s(Hpe);Vxo=r(K8t,"electra"),K8t.forEach(t),Xxo=r(aqe," \u2014 "),$V=n(aqe,"A",{href:!0});var Z8t=s($V);zxo=r(Z8t,"ElectraModel"),Z8t.forEach(t),Qxo=r(aqe," (ELECTRA model)"),aqe.forEach(t),Wxo=i(x),q_=n(x,"LI",{});var nqe=s(q_);Jpe=n(nqe,"STRONG",{});var e9t=s(Jpe);Uxo=r(e9t,"ernie"),e9t.forEach(t),Hxo=r(nqe," \u2014 "),kV=n(nqe,"A",{href:!0});var o9t=s(kV);Jxo=r(o9t,"ErnieModel"),o9t.forEach(t),Yxo=r(nqe," (ERNIE model)"),nqe.forEach(t),Kxo=i(x),j_=n(x,"LI",{});var sqe=s(j_);Ype=n(sqe,"STRONG",{});var r9t=s(Ype);Zxo=r(r9t,"esm"),r9t.forEach(t),e$o=r(sqe," \u2014 "),SV=n(sqe,"A",{href:!0});var t9t=s(SV);o$o=r(t9t,"EsmModel"),t9t.forEach(t),r$o=r(sqe," (ESM model)"),sqe.forEach(t),t$o=i(x),D_=n(x,"LI",{});var lqe=s(D_);Kpe=n(lqe,"STRONG",{});var a9t=s(Kpe);a$o=r(a9t,"flaubert"),a9t.forEach(t),n$o=r(lqe," \u2014 "),RV=n(lqe,"A",{href:!0});var n9t=s(RV);s$o=r(n9t,"FlaubertModel"),n9t.forEach(t),l$o=r(lqe," (FlauBERT model)"),lqe.forEach(t),i$o=i(x),G_=n(x,"LI",{});var iqe=s(G_);Zpe=n(iqe,"STRONG",{});var s9t=s(Zpe);d$o=r(s9t,"flava"),s9t.forEach(t),m$o=r(iqe," \u2014 "),PV=n(iqe,"A",{href:!0});var l9t=s(PV);c$o=r(l9t,"FlavaModel"),l9t.forEach(t),f$o=r(iqe," (FLAVA model)"),iqe.forEach(t),g$o=i(x),O_=n(x,"LI",{});var dqe=s(O_);e_e=n(dqe,"STRONG",{});var i9t=s(e_e);h$o=r(i9t,"fnet"),i9t.forEach(t),u$o=r(dqe," \u2014 "),BV=n(dqe,"A",{href:!0});var d9t=s(BV);p$o=r(d9t,"FNetModel"),d9t.forEach(t),_$o=r(dqe," (FNet model)"),dqe.forEach(t),b$o=i(x),V_=n(x,"LI",{});var mqe=s(V_);o_e=n(mqe,"STRONG",{});var m9t=s(o_e);v$o=r(m9t,"fsmt"),m9t.forEach(t),F$o=r(mqe," \u2014 "),IV=n(mqe,"A",{href:!0});var c9t=s(IV);T$o=r(c9t,"FSMTModel"),c9t.forEach(t),M$o=r(mqe," (FairSeq Machine-Translation model)"),mqe.forEach(t),E$o=i(x),_l=n(x,"LI",{});var JB=s(_l);r_e=n(JB,"STRONG",{});var f9t=s(r_e);C$o=r(f9t,"funnel"),f9t.forEach(t),w$o=r(JB," \u2014 "),NV=n(JB,"A",{href:!0});var g9t=s(NV);A$o=r(g9t,"FunnelModel"),g9t.forEach(t),L$o=r(JB," or "),qV=n(JB,"A",{href:!0});var h9t=s(qV);y$o=r(h9t,"FunnelBaseModel"),h9t.forEach(t),x$o=r(JB," (Funnel Transformer model)"),JB.forEach(t),$$o=i(x),X_=n(x,"LI",{});var cqe=s(X_);t_e=n(cqe,"STRONG",{});var u9t=s(t_e);k$o=r(u9t,"glpn"),u9t.forEach(t),S$o=r(cqe," \u2014 "),jV=n(cqe,"A",{href:!0});var p9t=s(jV);R$o=r(p9t,"GLPNModel"),p9t.forEach(t),P$o=r(cqe," (GLPN model)"),cqe.forEach(t),B$o=i(x),z_=n(x,"LI",{});var fqe=s(z_);a_e=n(fqe,"STRONG",{});var _9t=s(a_e);I$o=r(_9t,"gpt2"),_9t.forEach(t),N$o=r(fqe," \u2014 "),DV=n(fqe,"A",{href:!0});var b9t=s(DV);q$o=r(b9t,"GPT2Model"),b9t.forEach(t),j$o=r(fqe," (OpenAI GPT-2 model)"),fqe.forEach(t),D$o=i(x),Q_=n(x,"LI",{});var gqe=s(Q_);n_e=n(gqe,"STRONG",{});var v9t=s(n_e);G$o=r(v9t,"gpt_neo"),v9t.forEach(t),O$o=r(gqe," \u2014 "),GV=n(gqe,"A",{href:!0});var F9t=s(GV);V$o=r(F9t,"GPTNeoModel"),F9t.forEach(t),X$o=r(gqe," (GPT Neo model)"),gqe.forEach(t),z$o=i(x),W_=n(x,"LI",{});var hqe=s(W_);s_e=n(hqe,"STRONG",{});var T9t=s(s_e);Q$o=r(T9t,"gpt_neox"),T9t.forEach(t),W$o=r(hqe," \u2014 "),OV=n(hqe,"A",{href:!0});var M9t=s(OV);U$o=r(M9t,"GPTNeoXModel"),M9t.forEach(t),H$o=r(hqe," (GPT NeoX model)"),hqe.forEach(t),J$o=i(x),U_=n(x,"LI",{});var uqe=s(U_);l_e=n(uqe,"STRONG",{});var E9t=s(l_e);Y$o=r(E9t,"gpt_neox_japanese"),E9t.forEach(t),K$o=r(uqe," \u2014 "),VV=n(uqe,"A",{href:!0});var C9t=s(VV);Z$o=r(C9t,"GPTNeoXJapaneseModel"),C9t.forEach(t),eko=r(uqe," (GPT NeoX Japanese model)"),uqe.forEach(t),oko=i(x),H_=n(x,"LI",{});var pqe=s(H_);i_e=n(pqe,"STRONG",{});var w9t=s(i_e);rko=r(w9t,"gptj"),w9t.forEach(t),tko=r(pqe," \u2014 "),XV=n(pqe,"A",{href:!0});var A9t=s(XV);ako=r(A9t,"GPTJModel"),A9t.forEach(t),nko=r(pqe," (GPT-J model)"),pqe.forEach(t),sko=i(x),J_=n(x,"LI",{});var _qe=s(J_);d_e=n(_qe,"STRONG",{});var L9t=s(d_e);lko=r(L9t,"groupvit"),L9t.forEach(t),iko=r(_qe," \u2014 "),zV=n(_qe,"A",{href:!0});var y9t=s(zV);dko=r(y9t,"GroupViTModel"),y9t.forEach(t),mko=r(_qe," (GroupViT model)"),_qe.forEach(t),cko=i(x),Y_=n(x,"LI",{});var bqe=s(Y_);m_e=n(bqe,"STRONG",{});var x9t=s(m_e);fko=r(x9t,"hubert"),x9t.forEach(t),gko=r(bqe," \u2014 "),QV=n(bqe,"A",{href:!0});var $9t=s(QV);hko=r($9t,"HubertModel"),$9t.forEach(t),uko=r(bqe," (Hubert model)"),bqe.forEach(t),pko=i(x),K_=n(x,"LI",{});var vqe=s(K_);c_e=n(vqe,"STRONG",{});var k9t=s(c_e);_ko=r(k9t,"ibert"),k9t.forEach(t),bko=r(vqe," \u2014 "),WV=n(vqe,"A",{href:!0});var S9t=s(WV);vko=r(S9t,"IBertModel"),S9t.forEach(t),Fko=r(vqe," (I-BERT model)"),vqe.forEach(t),Tko=i(x),Z_=n(x,"LI",{});var Fqe=s(Z_);f_e=n(Fqe,"STRONG",{});var R9t=s(f_e);Mko=r(R9t,"imagegpt"),R9t.forEach(t),Eko=r(Fqe," \u2014 "),UV=n(Fqe,"A",{href:!0});var P9t=s(UV);Cko=r(P9t,"ImageGPTModel"),P9t.forEach(t),wko=r(Fqe," (ImageGPT model)"),Fqe.forEach(t),Ako=i(x),e1=n(x,"LI",{});var Tqe=s(e1);g_e=n(Tqe,"STRONG",{});var B9t=s(g_e);Lko=r(B9t,"layoutlm"),B9t.forEach(t),yko=r(Tqe," \u2014 "),HV=n(Tqe,"A",{href:!0});var I9t=s(HV);xko=r(I9t,"LayoutLMModel"),I9t.forEach(t),$ko=r(Tqe," (LayoutLM model)"),Tqe.forEach(t),kko=i(x),o1=n(x,"LI",{});var Mqe=s(o1);h_e=n(Mqe,"STRONG",{});var N9t=s(h_e);Sko=r(N9t,"layoutlmv2"),N9t.forEach(t),Rko=r(Mqe," \u2014 "),JV=n(Mqe,"A",{href:!0});var q9t=s(JV);Pko=r(q9t,"LayoutLMv2Model"),q9t.forEach(t),Bko=r(Mqe," (LayoutLMv2 model)"),Mqe.forEach(t),Iko=i(x),r1=n(x,"LI",{});var Eqe=s(r1);u_e=n(Eqe,"STRONG",{});var j9t=s(u_e);Nko=r(j9t,"layoutlmv3"),j9t.forEach(t),qko=r(Eqe," \u2014 "),YV=n(Eqe,"A",{href:!0});var D9t=s(YV);jko=r(D9t,"LayoutLMv3Model"),D9t.forEach(t),Dko=r(Eqe," (LayoutLMv3 model)"),Eqe.forEach(t),Gko=i(x),t1=n(x,"LI",{});var Cqe=s(t1);p_e=n(Cqe,"STRONG",{});var G9t=s(p_e);Oko=r(G9t,"led"),G9t.forEach(t),Vko=r(Cqe," \u2014 "),KV=n(Cqe,"A",{href:!0});var O9t=s(KV);Xko=r(O9t,"LEDModel"),O9t.forEach(t),zko=r(Cqe," (LED model)"),Cqe.forEach(t),Qko=i(x),a1=n(x,"LI",{});var wqe=s(a1);__e=n(wqe,"STRONG",{});var V9t=s(__e);Wko=r(V9t,"levit"),V9t.forEach(t),Uko=r(wqe," \u2014 "),ZV=n(wqe,"A",{href:!0});var X9t=s(ZV);Hko=r(X9t,"LevitModel"),X9t.forEach(t),Jko=r(wqe," (LeViT model)"),wqe.forEach(t),Yko=i(x),n1=n(x,"LI",{});var Aqe=s(n1);b_e=n(Aqe,"STRONG",{});var z9t=s(b_e);Kko=r(z9t,"longformer"),z9t.forEach(t),Zko=r(Aqe," \u2014 "),eX=n(Aqe,"A",{href:!0});var Q9t=s(eX);eSo=r(Q9t,"LongformerModel"),Q9t.forEach(t),oSo=r(Aqe," (Longformer model)"),Aqe.forEach(t),rSo=i(x),s1=n(x,"LI",{});var Lqe=s(s1);v_e=n(Lqe,"STRONG",{});var W9t=s(v_e);tSo=r(W9t,"longt5"),W9t.forEach(t),aSo=r(Lqe," \u2014 "),oX=n(Lqe,"A",{href:!0});var U9t=s(oX);nSo=r(U9t,"LongT5Model"),U9t.forEach(t),sSo=r(Lqe," (LongT5 model)"),Lqe.forEach(t),lSo=i(x),l1=n(x,"LI",{});var yqe=s(l1);F_e=n(yqe,"STRONG",{});var H9t=s(F_e);iSo=r(H9t,"luke"),H9t.forEach(t),dSo=r(yqe," \u2014 "),rX=n(yqe,"A",{href:!0});var J9t=s(rX);mSo=r(J9t,"LukeModel"),J9t.forEach(t),cSo=r(yqe," (LUKE model)"),yqe.forEach(t),fSo=i(x),i1=n(x,"LI",{});var xqe=s(i1);T_e=n(xqe,"STRONG",{});var Y9t=s(T_e);gSo=r(Y9t,"lxmert"),Y9t.forEach(t),hSo=r(xqe," \u2014 "),tX=n(xqe,"A",{href:!0});var K9t=s(tX);uSo=r(K9t,"LxmertModel"),K9t.forEach(t),pSo=r(xqe," (LXMERT model)"),xqe.forEach(t),_So=i(x),d1=n(x,"LI",{});var $qe=s(d1);M_e=n($qe,"STRONG",{});var Z9t=s(M_e);bSo=r(Z9t,"m2m_100"),Z9t.forEach(t),vSo=r($qe," \u2014 "),aX=n($qe,"A",{href:!0});var ext=s(aX);FSo=r(ext,"M2M100Model"),ext.forEach(t),TSo=r($qe," (M2M100 model)"),$qe.forEach(t),MSo=i(x),m1=n(x,"LI",{});var kqe=s(m1);E_e=n(kqe,"STRONG",{});var oxt=s(E_e);ESo=r(oxt,"marian"),oxt.forEach(t),CSo=r(kqe," \u2014 "),nX=n(kqe,"A",{href:!0});var rxt=s(nX);wSo=r(rxt,"MarianModel"),rxt.forEach(t),ASo=r(kqe," (Marian model)"),kqe.forEach(t),LSo=i(x),c1=n(x,"LI",{});var Sqe=s(c1);C_e=n(Sqe,"STRONG",{});var txt=s(C_e);ySo=r(txt,"markuplm"),txt.forEach(t),xSo=r(Sqe," \u2014 "),sX=n(Sqe,"A",{href:!0});var axt=s(sX);$So=r(axt,"MarkupLMModel"),axt.forEach(t),kSo=r(Sqe," (MarkupLM model)"),Sqe.forEach(t),SSo=i(x),f1=n(x,"LI",{});var Rqe=s(f1);w_e=n(Rqe,"STRONG",{});var nxt=s(w_e);RSo=r(nxt,"maskformer"),nxt.forEach(t),PSo=r(Rqe," \u2014 "),lX=n(Rqe,"A",{href:!0});var sxt=s(lX);BSo=r(sxt,"MaskFormerModel"),sxt.forEach(t),ISo=r(Rqe," (MaskFormer model)"),Rqe.forEach(t),NSo=i(x),g1=n(x,"LI",{});var Pqe=s(g1);A_e=n(Pqe,"STRONG",{});var lxt=s(A_e);qSo=r(lxt,"mbart"),lxt.forEach(t),jSo=r(Pqe," \u2014 "),iX=n(Pqe,"A",{href:!0});var ixt=s(iX);DSo=r(ixt,"MBartModel"),ixt.forEach(t),GSo=r(Pqe," (mBART model)"),Pqe.forEach(t),OSo=i(x),h1=n(x,"LI",{});var Bqe=s(h1);L_e=n(Bqe,"STRONG",{});var dxt=s(L_e);VSo=r(dxt,"mctct"),dxt.forEach(t),XSo=r(Bqe," \u2014 "),dX=n(Bqe,"A",{href:!0});var mxt=s(dX);zSo=r(mxt,"MCTCTModel"),mxt.forEach(t),QSo=r(Bqe," (M-CTC-T model)"),Bqe.forEach(t),WSo=i(x),u1=n(x,"LI",{});var Iqe=s(u1);y_e=n(Iqe,"STRONG",{});var cxt=s(y_e);USo=r(cxt,"megatron-bert"),cxt.forEach(t),HSo=r(Iqe," \u2014 "),mX=n(Iqe,"A",{href:!0});var fxt=s(mX);JSo=r(fxt,"MegatronBertModel"),fxt.forEach(t),YSo=r(Iqe," (Megatron-BERT model)"),Iqe.forEach(t),KSo=i(x),p1=n(x,"LI",{});var Nqe=s(p1);x_e=n(Nqe,"STRONG",{});var gxt=s(x_e);ZSo=r(gxt,"mobilebert"),gxt.forEach(t),eRo=r(Nqe," \u2014 "),cX=n(Nqe,"A",{href:!0});var hxt=s(cX);oRo=r(hxt,"MobileBertModel"),hxt.forEach(t),rRo=r(Nqe," (MobileBERT model)"),Nqe.forEach(t),tRo=i(x),_1=n(x,"LI",{});var qqe=s(_1);$_e=n(qqe,"STRONG",{});var uxt=s($_e);aRo=r(uxt,"mobilevit"),uxt.forEach(t),nRo=r(qqe," \u2014 "),fX=n(qqe,"A",{href:!0});var pxt=s(fX);sRo=r(pxt,"MobileViTModel"),pxt.forEach(t),lRo=r(qqe," (MobileViT model)"),qqe.forEach(t),iRo=i(x),b1=n(x,"LI",{});var jqe=s(b1);k_e=n(jqe,"STRONG",{});var _xt=s(k_e);dRo=r(_xt,"mpnet"),_xt.forEach(t),mRo=r(jqe," \u2014 "),gX=n(jqe,"A",{href:!0});var bxt=s(gX);cRo=r(bxt,"MPNetModel"),bxt.forEach(t),fRo=r(jqe," (MPNet model)"),jqe.forEach(t),gRo=i(x),v1=n(x,"LI",{});var Dqe=s(v1);S_e=n(Dqe,"STRONG",{});var vxt=s(S_e);hRo=r(vxt,"mt5"),vxt.forEach(t),uRo=r(Dqe," \u2014 "),hX=n(Dqe,"A",{href:!0});var Fxt=s(hX);pRo=r(Fxt,"MT5Model"),Fxt.forEach(t),_Ro=r(Dqe," (MT5 model)"),Dqe.forEach(t),bRo=i(x),F1=n(x,"LI",{});var Gqe=s(F1);R_e=n(Gqe,"STRONG",{});var Txt=s(R_e);vRo=r(Txt,"mvp"),Txt.forEach(t),FRo=r(Gqe," \u2014 "),uX=n(Gqe,"A",{href:!0});var Mxt=s(uX);TRo=r(Mxt,"MvpModel"),Mxt.forEach(t),MRo=r(Gqe," (MVP model)"),Gqe.forEach(t),ERo=i(x),T1=n(x,"LI",{});var Oqe=s(T1);P_e=n(Oqe,"STRONG",{});var Ext=s(P_e);CRo=r(Ext,"nezha"),Ext.forEach(t),wRo=r(Oqe," \u2014 "),pX=n(Oqe,"A",{href:!0});var Cxt=s(pX);ARo=r(Cxt,"NezhaModel"),Cxt.forEach(t),LRo=r(Oqe," (Nezha model)"),Oqe.forEach(t),yRo=i(x),M1=n(x,"LI",{});var Vqe=s(M1);B_e=n(Vqe,"STRONG",{});var wxt=s(B_e);xRo=r(wxt,"nllb"),wxt.forEach(t),$Ro=r(Vqe," \u2014 "),_X=n(Vqe,"A",{href:!0});var Axt=s(_X);kRo=r(Axt,"M2M100Model"),Axt.forEach(t),SRo=r(Vqe," (NLLB model)"),Vqe.forEach(t),RRo=i(x),E1=n(x,"LI",{});var Xqe=s(E1);I_e=n(Xqe,"STRONG",{});var Lxt=s(I_e);PRo=r(Lxt,"nystromformer"),Lxt.forEach(t),BRo=r(Xqe," \u2014 "),bX=n(Xqe,"A",{href:!0});var yxt=s(bX);IRo=r(yxt,"NystromformerModel"),yxt.forEach(t),NRo=r(Xqe," (Nystr\xF6mformer model)"),Xqe.forEach(t),qRo=i(x),C1=n(x,"LI",{});var zqe=s(C1);N_e=n(zqe,"STRONG",{});var xxt=s(N_e);jRo=r(xxt,"openai-gpt"),xxt.forEach(t),DRo=r(zqe," \u2014 "),vX=n(zqe,"A",{href:!0});var $xt=s(vX);GRo=r($xt,"OpenAIGPTModel"),$xt.forEach(t),ORo=r(zqe," (OpenAI GPT model)"),zqe.forEach(t),VRo=i(x),w1=n(x,"LI",{});var Qqe=s(w1);q_e=n(Qqe,"STRONG",{});var kxt=s(q_e);XRo=r(kxt,"opt"),kxt.forEach(t),zRo=r(Qqe," \u2014 "),FX=n(Qqe,"A",{href:!0});var Sxt=s(FX);QRo=r(Sxt,"OPTModel"),Sxt.forEach(t),WRo=r(Qqe," (OPT model)"),Qqe.forEach(t),URo=i(x),A1=n(x,"LI",{});var Wqe=s(A1);j_e=n(Wqe,"STRONG",{});var Rxt=s(j_e);HRo=r(Rxt,"owlvit"),Rxt.forEach(t),JRo=r(Wqe," \u2014 "),TX=n(Wqe,"A",{href:!0});var Pxt=s(TX);YRo=r(Pxt,"OwlViTModel"),Pxt.forEach(t),KRo=r(Wqe," (OWL-ViT model)"),Wqe.forEach(t),ZRo=i(x),L1=n(x,"LI",{});var Uqe=s(L1);D_e=n(Uqe,"STRONG",{});var Bxt=s(D_e);ePo=r(Bxt,"pegasus"),Bxt.forEach(t),oPo=r(Uqe," \u2014 "),MX=n(Uqe,"A",{href:!0});var Ixt=s(MX);rPo=r(Ixt,"PegasusModel"),Ixt.forEach(t),tPo=r(Uqe," (Pegasus model)"),Uqe.forEach(t),aPo=i(x),y1=n(x,"LI",{});var Hqe=s(y1);G_e=n(Hqe,"STRONG",{});var Nxt=s(G_e);nPo=r(Nxt,"pegasus_x"),Nxt.forEach(t),sPo=r(Hqe," \u2014 "),EX=n(Hqe,"A",{href:!0});var qxt=s(EX);lPo=r(qxt,"PegasusXModel"),qxt.forEach(t),iPo=r(Hqe," (PEGASUS-X model)"),Hqe.forEach(t),dPo=i(x),x1=n(x,"LI",{});var Jqe=s(x1);O_e=n(Jqe,"STRONG",{});var jxt=s(O_e);mPo=r(jxt,"perceiver"),jxt.forEach(t),cPo=r(Jqe," \u2014 "),CX=n(Jqe,"A",{href:!0});var Dxt=s(CX);fPo=r(Dxt,"PerceiverModel"),Dxt.forEach(t),gPo=r(Jqe," (Perceiver model)"),Jqe.forEach(t),hPo=i(x),$1=n(x,"LI",{});var Yqe=s($1);V_e=n(Yqe,"STRONG",{});var Gxt=s(V_e);uPo=r(Gxt,"plbart"),Gxt.forEach(t),pPo=r(Yqe," \u2014 "),wX=n(Yqe,"A",{href:!0});var Oxt=s(wX);_Po=r(Oxt,"PLBartModel"),Oxt.forEach(t),bPo=r(Yqe," (PLBart model)"),Yqe.forEach(t),vPo=i(x),k1=n(x,"LI",{});var Kqe=s(k1);X_e=n(Kqe,"STRONG",{});var Vxt=s(X_e);FPo=r(Vxt,"poolformer"),Vxt.forEach(t),TPo=r(Kqe," \u2014 "),AX=n(Kqe,"A",{href:!0});var Xxt=s(AX);MPo=r(Xxt,"PoolFormerModel"),Xxt.forEach(t),EPo=r(Kqe," (PoolFormer model)"),Kqe.forEach(t),CPo=i(x),S1=n(x,"LI",{});var Zqe=s(S1);z_e=n(Zqe,"STRONG",{});var zxt=s(z_e);wPo=r(zxt,"prophetnet"),zxt.forEach(t),APo=r(Zqe," \u2014 "),LX=n(Zqe,"A",{href:!0});var Qxt=s(LX);LPo=r(Qxt,"ProphetNetModel"),Qxt.forEach(t),yPo=r(Zqe," (ProphetNet model)"),Zqe.forEach(t),xPo=i(x),R1=n(x,"LI",{});var eje=s(R1);Q_e=n(eje,"STRONG",{});var Wxt=s(Q_e);$Po=r(Wxt,"qdqbert"),Wxt.forEach(t),kPo=r(eje," \u2014 "),yX=n(eje,"A",{href:!0});var Uxt=s(yX);SPo=r(Uxt,"QDQBertModel"),Uxt.forEach(t),RPo=r(eje," (QDQBert model)"),eje.forEach(t),PPo=i(x),P1=n(x,"LI",{});var oje=s(P1);W_e=n(oje,"STRONG",{});var Hxt=s(W_e);BPo=r(Hxt,"reformer"),Hxt.forEach(t),IPo=r(oje," \u2014 "),xX=n(oje,"A",{href:!0});var Jxt=s(xX);NPo=r(Jxt,"ReformerModel"),Jxt.forEach(t),qPo=r(oje," (Reformer model)"),oje.forEach(t),jPo=i(x),B1=n(x,"LI",{});var rje=s(B1);U_e=n(rje,"STRONG",{});var Yxt=s(U_e);DPo=r(Yxt,"regnet"),Yxt.forEach(t),GPo=r(rje," \u2014 "),$X=n(rje,"A",{href:!0});var Kxt=s($X);OPo=r(Kxt,"RegNetModel"),Kxt.forEach(t),VPo=r(rje," (RegNet model)"),rje.forEach(t),XPo=i(x),I1=n(x,"LI",{});var tje=s(I1);H_e=n(tje,"STRONG",{});var Zxt=s(H_e);zPo=r(Zxt,"rembert"),Zxt.forEach(t),QPo=r(tje," \u2014 "),kX=n(tje,"A",{href:!0});var e$t=s(kX);WPo=r(e$t,"RemBertModel"),e$t.forEach(t),UPo=r(tje," (RemBERT model)"),tje.forEach(t),HPo=i(x),N1=n(x,"LI",{});var aje=s(N1);J_e=n(aje,"STRONG",{});var o$t=s(J_e);JPo=r(o$t,"resnet"),o$t.forEach(t),YPo=r(aje," \u2014 "),SX=n(aje,"A",{href:!0});var r$t=s(SX);KPo=r(r$t,"ResNetModel"),r$t.forEach(t),ZPo=r(aje," (ResNet model)"),aje.forEach(t),eBo=i(x),q1=n(x,"LI",{});var nje=s(q1);Y_e=n(nje,"STRONG",{});var t$t=s(Y_e);oBo=r(t$t,"retribert"),t$t.forEach(t),rBo=r(nje," \u2014 "),RX=n(nje,"A",{href:!0});var a$t=s(RX);tBo=r(a$t,"RetriBertModel"),a$t.forEach(t),aBo=r(nje," (RetriBERT model)"),nje.forEach(t),nBo=i(x),j1=n(x,"LI",{});var sje=s(j1);K_e=n(sje,"STRONG",{});var n$t=s(K_e);sBo=r(n$t,"roberta"),n$t.forEach(t),lBo=r(sje," \u2014 "),PX=n(sje,"A",{href:!0});var s$t=s(PX);iBo=r(s$t,"RobertaModel"),s$t.forEach(t),dBo=r(sje," (RoBERTa model)"),sje.forEach(t),mBo=i(x),D1=n(x,"LI",{});var lje=s(D1);Z_e=n(lje,"STRONG",{});var l$t=s(Z_e);cBo=r(l$t,"roformer"),l$t.forEach(t),fBo=r(lje," \u2014 "),BX=n(lje,"A",{href:!0});var i$t=s(BX);gBo=r(i$t,"RoFormerModel"),i$t.forEach(t),hBo=r(lje," (RoFormer model)"),lje.forEach(t),uBo=i(x),G1=n(x,"LI",{});var ije=s(G1);e1e=n(ije,"STRONG",{});var d$t=s(e1e);pBo=r(d$t,"segformer"),d$t.forEach(t),_Bo=r(ije," \u2014 "),IX=n(ije,"A",{href:!0});var m$t=s(IX);bBo=r(m$t,"SegformerModel"),m$t.forEach(t),vBo=r(ije," (SegFormer model)"),ije.forEach(t),FBo=i(x),O1=n(x,"LI",{});var dje=s(O1);o1e=n(dje,"STRONG",{});var c$t=s(o1e);TBo=r(c$t,"sew"),c$t.forEach(t),MBo=r(dje," \u2014 "),NX=n(dje,"A",{href:!0});var f$t=s(NX);EBo=r(f$t,"SEWModel"),f$t.forEach(t),CBo=r(dje," (SEW model)"),dje.forEach(t),wBo=i(x),V1=n(x,"LI",{});var mje=s(V1);r1e=n(mje,"STRONG",{});var g$t=s(r1e);ABo=r(g$t,"sew-d"),g$t.forEach(t),LBo=r(mje," \u2014 "),qX=n(mje,"A",{href:!0});var h$t=s(qX);yBo=r(h$t,"SEWDModel"),h$t.forEach(t),xBo=r(mje," (SEW-D model)"),mje.forEach(t),$Bo=i(x),X1=n(x,"LI",{});var cje=s(X1);t1e=n(cje,"STRONG",{});var u$t=s(t1e);kBo=r(u$t,"speech_to_text"),u$t.forEach(t),SBo=r(cje," \u2014 "),jX=n(cje,"A",{href:!0});var p$t=s(jX);RBo=r(p$t,"Speech2TextModel"),p$t.forEach(t),PBo=r(cje," (Speech2Text model)"),cje.forEach(t),BBo=i(x),z1=n(x,"LI",{});var fje=s(z1);a1e=n(fje,"STRONG",{});var _$t=s(a1e);IBo=r(_$t,"splinter"),_$t.forEach(t),NBo=r(fje," \u2014 "),DX=n(fje,"A",{href:!0});var b$t=s(DX);qBo=r(b$t,"SplinterModel"),b$t.forEach(t),jBo=r(fje," (Splinter model)"),fje.forEach(t),DBo=i(x),Q1=n(x,"LI",{});var gje=s(Q1);n1e=n(gje,"STRONG",{});var v$t=s(n1e);GBo=r(v$t,"squeezebert"),v$t.forEach(t),OBo=r(gje," \u2014 "),GX=n(gje,"A",{href:!0});var F$t=s(GX);VBo=r(F$t,"SqueezeBertModel"),F$t.forEach(t),XBo=r(gje," (SqueezeBERT model)"),gje.forEach(t),zBo=i(x),W1=n(x,"LI",{});var hje=s(W1);s1e=n(hje,"STRONG",{});var T$t=s(s1e);QBo=r(T$t,"swin"),T$t.forEach(t),WBo=r(hje," \u2014 "),OX=n(hje,"A",{href:!0});var M$t=s(OX);UBo=r(M$t,"SwinModel"),M$t.forEach(t),HBo=r(hje," (Swin Transformer model)"),hje.forEach(t),JBo=i(x),U1=n(x,"LI",{});var uje=s(U1);l1e=n(uje,"STRONG",{});var E$t=s(l1e);YBo=r(E$t,"swinv2"),E$t.forEach(t),KBo=r(uje," \u2014 "),VX=n(uje,"A",{href:!0});var C$t=s(VX);ZBo=r(C$t,"Swinv2Model"),C$t.forEach(t),eIo=r(uje," (Swin Transformer V2 model)"),uje.forEach(t),oIo=i(x),H1=n(x,"LI",{});var pje=s(H1);i1e=n(pje,"STRONG",{});var w$t=s(i1e);rIo=r(w$t,"t5"),w$t.forEach(t),tIo=r(pje," \u2014 "),XX=n(pje,"A",{href:!0});var A$t=s(XX);aIo=r(A$t,"T5Model"),A$t.forEach(t),nIo=r(pje," (T5 model)"),pje.forEach(t),sIo=i(x),J1=n(x,"LI",{});var _je=s(J1);d1e=n(_je,"STRONG",{});var L$t=s(d1e);lIo=r(L$t,"tapas"),L$t.forEach(t),iIo=r(_je," \u2014 "),zX=n(_je,"A",{href:!0});var y$t=s(zX);dIo=r(y$t,"TapasModel"),y$t.forEach(t),mIo=r(_je," (TAPAS model)"),_je.forEach(t),cIo=i(x),Y1=n(x,"LI",{});var bje=s(Y1);m1e=n(bje,"STRONG",{});var x$t=s(m1e);fIo=r(x$t,"time_series_transformer"),x$t.forEach(t),gIo=r(bje," \u2014 "),QX=n(bje,"A",{href:!0});var $$t=s(QX);hIo=r($$t,"TimeSeriesTransformerModel"),$$t.forEach(t),uIo=r(bje," (Time Series Transformer model)"),bje.forEach(t),pIo=i(x),K1=n(x,"LI",{});var vje=s(K1);c1e=n(vje,"STRONG",{});var k$t=s(c1e);_Io=r(k$t,"trajectory_transformer"),k$t.forEach(t),bIo=r(vje," \u2014 "),WX=n(vje,"A",{href:!0});var S$t=s(WX);vIo=r(S$t,"TrajectoryTransformerModel"),S$t.forEach(t),FIo=r(vje," (Trajectory Transformer model)"),vje.forEach(t),TIo=i(x),Z1=n(x,"LI",{});var Fje=s(Z1);f1e=n(Fje,"STRONG",{});var R$t=s(f1e);MIo=r(R$t,"transfo-xl"),R$t.forEach(t),EIo=r(Fje," \u2014 "),UX=n(Fje,"A",{href:!0});var P$t=s(UX);CIo=r(P$t,"TransfoXLModel"),P$t.forEach(t),wIo=r(Fje," (Transformer-XL model)"),Fje.forEach(t),AIo=i(x),e2=n(x,"LI",{});var Tje=s(e2);g1e=n(Tje,"STRONG",{});var B$t=s(g1e);LIo=r(B$t,"unispeech"),B$t.forEach(t),yIo=r(Tje," \u2014 "),HX=n(Tje,"A",{href:!0});var I$t=s(HX);xIo=r(I$t,"UniSpeechModel"),I$t.forEach(t),$Io=r(Tje," (UniSpeech model)"),Tje.forEach(t),kIo=i(x),o2=n(x,"LI",{});var Mje=s(o2);h1e=n(Mje,"STRONG",{});var N$t=s(h1e);SIo=r(N$t,"unispeech-sat"),N$t.forEach(t),RIo=r(Mje," \u2014 "),JX=n(Mje,"A",{href:!0});var q$t=s(JX);PIo=r(q$t,"UniSpeechSatModel"),q$t.forEach(t),BIo=r(Mje," (UniSpeechSat model)"),Mje.forEach(t),IIo=i(x),r2=n(x,"LI",{});var Eje=s(r2);u1e=n(Eje,"STRONG",{});var j$t=s(u1e);NIo=r(j$t,"van"),j$t.forEach(t),qIo=r(Eje," \u2014 "),YX=n(Eje,"A",{href:!0});var D$t=s(YX);jIo=r(D$t,"VanModel"),D$t.forEach(t),DIo=r(Eje," (VAN model)"),Eje.forEach(t),GIo=i(x),t2=n(x,"LI",{});var Cje=s(t2);p1e=n(Cje,"STRONG",{});var G$t=s(p1e);OIo=r(G$t,"videomae"),G$t.forEach(t),VIo=r(Cje," \u2014 "),KX=n(Cje,"A",{href:!0});var O$t=s(KX);XIo=r(O$t,"VideoMAEModel"),O$t.forEach(t),zIo=r(Cje," (VideoMAE model)"),Cje.forEach(t),QIo=i(x),a2=n(x,"LI",{});var wje=s(a2);_1e=n(wje,"STRONG",{});var V$t=s(_1e);WIo=r(V$t,"vilt"),V$t.forEach(t),UIo=r(wje," \u2014 "),ZX=n(wje,"A",{href:!0});var X$t=s(ZX);HIo=r(X$t,"ViltModel"),X$t.forEach(t),JIo=r(wje," (ViLT model)"),wje.forEach(t),YIo=i(x),n2=n(x,"LI",{});var Aje=s(n2);b1e=n(Aje,"STRONG",{});var z$t=s(b1e);KIo=r(z$t,"vision-text-dual-encoder"),z$t.forEach(t),ZIo=r(Aje," \u2014 "),ez=n(Aje,"A",{href:!0});var Q$t=s(ez);eNo=r(Q$t,"VisionTextDualEncoderModel"),Q$t.forEach(t),oNo=r(Aje," (VisionTextDualEncoder model)"),Aje.forEach(t),rNo=i(x),s2=n(x,"LI",{});var Lje=s(s2);v1e=n(Lje,"STRONG",{});var W$t=s(v1e);tNo=r(W$t,"visual_bert"),W$t.forEach(t),aNo=r(Lje," \u2014 "),oz=n(Lje,"A",{href:!0});var U$t=s(oz);nNo=r(U$t,"VisualBertModel"),U$t.forEach(t),sNo=r(Lje," (VisualBERT model)"),Lje.forEach(t),lNo=i(x),l2=n(x,"LI",{});var yje=s(l2);F1e=n(yje,"STRONG",{});var H$t=s(F1e);iNo=r(H$t,"vit"),H$t.forEach(t),dNo=r(yje," \u2014 "),rz=n(yje,"A",{href:!0});var J$t=s(rz);mNo=r(J$t,"ViTModel"),J$t.forEach(t),cNo=r(yje," (ViT model)"),yje.forEach(t),fNo=i(x),i2=n(x,"LI",{});var xje=s(i2);T1e=n(xje,"STRONG",{});var Y$t=s(T1e);gNo=r(Y$t,"vit_mae"),Y$t.forEach(t),hNo=r(xje," \u2014 "),tz=n(xje,"A",{href:!0});var K$t=s(tz);uNo=r(K$t,"ViTMAEModel"),K$t.forEach(t),pNo=r(xje," (ViTMAE model)"),xje.forEach(t),_No=i(x),d2=n(x,"LI",{});var $je=s(d2);M1e=n($je,"STRONG",{});var Z$t=s(M1e);bNo=r(Z$t,"vit_msn"),Z$t.forEach(t),vNo=r($je," \u2014 "),az=n($je,"A",{href:!0});var ekt=s(az);FNo=r(ekt,"ViTMSNModel"),ekt.forEach(t),TNo=r($je," (ViTMSN model)"),$je.forEach(t),MNo=i(x),m2=n(x,"LI",{});var kje=s(m2);E1e=n(kje,"STRONG",{});var okt=s(E1e);ENo=r(okt,"wav2vec2"),okt.forEach(t),CNo=r(kje," \u2014 "),nz=n(kje,"A",{href:!0});var rkt=s(nz);wNo=r(rkt,"Wav2Vec2Model"),rkt.forEach(t),ANo=r(kje," (Wav2Vec2 model)"),kje.forEach(t),LNo=i(x),c2=n(x,"LI",{});var Sje=s(c2);C1e=n(Sje,"STRONG",{});var tkt=s(C1e);yNo=r(tkt,"wav2vec2-conformer"),tkt.forEach(t),xNo=r(Sje," \u2014 "),sz=n(Sje,"A",{href:!0});var akt=s(sz);$No=r(akt,"Wav2Vec2ConformerModel"),akt.forEach(t),kNo=r(Sje," (Wav2Vec2-Conformer model)"),Sje.forEach(t),SNo=i(x),f2=n(x,"LI",{});var Rje=s(f2);w1e=n(Rje,"STRONG",{});var nkt=s(w1e);RNo=r(nkt,"wavlm"),nkt.forEach(t),PNo=r(Rje," \u2014 "),lz=n(Rje,"A",{href:!0});var skt=s(lz);BNo=r(skt,"WavLMModel"),skt.forEach(t),INo=r(Rje," (WavLM model)"),Rje.forEach(t),NNo=i(x),g2=n(x,"LI",{});var Pje=s(g2);A1e=n(Pje,"STRONG",{});var lkt=s(A1e);qNo=r(lkt,"xclip"),lkt.forEach(t),jNo=r(Pje," \u2014 "),iz=n(Pje,"A",{href:!0});var ikt=s(iz);DNo=r(ikt,"XCLIPModel"),ikt.forEach(t),GNo=r(Pje," (X-CLIP model)"),Pje.forEach(t),ONo=i(x),h2=n(x,"LI",{});var Bje=s(h2);L1e=n(Bje,"STRONG",{});var dkt=s(L1e);VNo=r(dkt,"xglm"),dkt.forEach(t),XNo=r(Bje," \u2014 "),dz=n(Bje,"A",{href:!0});var mkt=s(dz);zNo=r(mkt,"XGLMModel"),mkt.forEach(t),QNo=r(Bje," (XGLM model)"),Bje.forEach(t),WNo=i(x),u2=n(x,"LI",{});var Ije=s(u2);y1e=n(Ije,"STRONG",{});var ckt=s(y1e);UNo=r(ckt,"xlm"),ckt.forEach(t),HNo=r(Ije," \u2014 "),mz=n(Ije,"A",{href:!0});var fkt=s(mz);JNo=r(fkt,"XLMModel"),fkt.forEach(t),YNo=r(Ije," (XLM model)"),Ije.forEach(t),KNo=i(x),p2=n(x,"LI",{});var Nje=s(p2);x1e=n(Nje,"STRONG",{});var gkt=s(x1e);ZNo=r(gkt,"xlm-prophetnet"),gkt.forEach(t),eqo=r(Nje," \u2014 "),cz=n(Nje,"A",{href:!0});var hkt=s(cz);oqo=r(hkt,"XLMProphetNetModel"),hkt.forEach(t),rqo=r(Nje," (XLM-ProphetNet model)"),Nje.forEach(t),tqo=i(x),_2=n(x,"LI",{});var qje=s(_2);$1e=n(qje,"STRONG",{});var ukt=s($1e);aqo=r(ukt,"xlm-roberta"),ukt.forEach(t),nqo=r(qje," \u2014 "),fz=n(qje,"A",{href:!0});var pkt=s(fz);sqo=r(pkt,"XLMRobertaModel"),pkt.forEach(t),lqo=r(qje," (XLM-RoBERTa model)"),qje.forEach(t),iqo=i(x),b2=n(x,"LI",{});var jje=s(b2);k1e=n(jje,"STRONG",{});var _kt=s(k1e);dqo=r(_kt,"xlm-roberta-xl"),_kt.forEach(t),mqo=r(jje," \u2014 "),gz=n(jje,"A",{href:!0});var bkt=s(gz);cqo=r(bkt,"XLMRobertaXLModel"),bkt.forEach(t),fqo=r(jje," (XLM-RoBERTa-XL model)"),jje.forEach(t),gqo=i(x),v2=n(x,"LI",{});var Dje=s(v2);S1e=n(Dje,"STRONG",{});var vkt=s(S1e);hqo=r(vkt,"xlnet"),vkt.forEach(t),uqo=r(Dje," \u2014 "),hz=n(Dje,"A",{href:!0});var Fkt=s(hz);pqo=r(Fkt,"XLNetModel"),Fkt.forEach(t),_qo=r(Dje," (XLNet model)"),Dje.forEach(t),bqo=i(x),F2=n(x,"LI",{});var Gje=s(F2);R1e=n(Gje,"STRONG",{});var Tkt=s(R1e);vqo=r(Tkt,"yolos"),Tkt.forEach(t),Fqo=r(Gje," \u2014 "),uz=n(Gje,"A",{href:!0});var Mkt=s(uz);Tqo=r(Mkt,"YolosModel"),Mkt.forEach(t),Mqo=r(Gje," (YOLOS model)"),Gje.forEach(t),Eqo=i(x),T2=n(x,"LI",{});var Oje=s(T2);P1e=n(Oje,"STRONG",{});var Ekt=s(P1e);Cqo=r(Ekt,"yoso"),Ekt.forEach(t),wqo=r(Oje," \u2014 "),pz=n(Oje,"A",{href:!0});var Ckt=s(pz);Aqo=r(Ckt,"YosoModel"),Ckt.forEach(t),Lqo=r(Oje," (YOSO model)"),Oje.forEach(t),x.forEach(t),yqo=i(Fa),M2=n(Fa,"P",{});var Vje=s(M2);xqo=r(Vje,"The model is set in evaluation mode by default using "),B1e=n(Vje,"CODE",{});var wkt=s(B1e);$qo=r(wkt,"model.eval()"),wkt.forEach(t),kqo=r(Vje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=n(Vje,"CODE",{});var Akt=s(I1e);Sqo=r(Akt,"model.train()"),Akt.forEach(t),Vje.forEach(t),Rqo=i(Fa),T(E2.$$.fragment,Fa),Fa.forEach(t),Al.forEach(t),neo=i(c),Fd=n(c,"H2",{class:!0});var vro=s(Fd);C2=n(vro,"A",{id:!0,class:!0,href:!0});var Lkt=s(C2);N1e=n(Lkt,"SPAN",{});var ykt=s(N1e);T(Sx.$$.fragment,ykt),ykt.forEach(t),Lkt.forEach(t),Pqo=i(vro),q1e=n(vro,"SPAN",{});var xkt=s(q1e);Bqo=r(xkt,"AutoModelForPreTraining"),xkt.forEach(t),vro.forEach(t),seo=i(c),Bo=n(c,"DIV",{class:!0});var Ll=s(Bo);T(Rx.$$.fragment,Ll),Iqo=i(Ll),Td=n(Ll,"P",{});var rie=s(Td);Nqo=r(rie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_z=n(rie,"A",{href:!0});var $kt=s(_z);qqo=r($kt,"from_pretrained()"),$kt.forEach(t),jqo=r(rie," class method or the "),bz=n(rie,"A",{href:!0});var kkt=s(bz);Dqo=r(kkt,"from_config()"),kkt.forEach(t),Gqo=r(rie,` class
method.`),rie.forEach(t),Oqo=i(Ll),Px=n(Ll,"P",{});var Fro=s(Px);Vqo=r(Fro,"This class cannot be instantiated directly using "),j1e=n(Fro,"CODE",{});var Skt=s(j1e);Xqo=r(Skt,"__init__()"),Skt.forEach(t),zqo=r(Fro," (throws an error)."),Fro.forEach(t),Qqo=i(Ll),bt=n(Ll,"DIV",{class:!0});var Yy=s(bt);T(Bx.$$.fragment,Yy),Wqo=i(Yy),D1e=n(Yy,"P",{});var Rkt=s(D1e);Uqo=r(Rkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rkt.forEach(t),Hqo=i(Yy),Md=n(Yy,"P",{});var tie=s(Md);Jqo=r(tie,`Note:
Loading a model from its configuration file does `),G1e=n(tie,"STRONG",{});var Pkt=s(G1e);Yqo=r(Pkt,"not"),Pkt.forEach(t),Kqo=r(tie,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(tie,"A",{href:!0});var Bkt=s(vz);Zqo=r(Bkt,"from_pretrained()"),Bkt.forEach(t),ejo=r(tie," to load the model weights."),tie.forEach(t),ojo=i(Yy),T(w2.$$.fragment,Yy),Yy.forEach(t),rjo=i(Ll),eo=n(Ll,"DIV",{class:!0});var Ta=s(eo);T(Ix.$$.fragment,Ta),tjo=i(Ta),O1e=n(Ta,"P",{});var Ikt=s(O1e);ajo=r(Ikt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ikt.forEach(t),njo=i(Ta),Ya=n(Ta,"P",{});var Ky=s(Ya);sjo=r(Ky,"The model class to instantiate is selected based on the "),V1e=n(Ky,"CODE",{});var Nkt=s(V1e);ljo=r(Nkt,"model_type"),Nkt.forEach(t),ijo=r(Ky,` property of the config object (either
passed as an argument or loaded from `),X1e=n(Ky,"CODE",{});var qkt=s(X1e);djo=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),mjo=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(Ky,"CODE",{});var jkt=s(z1e);cjo=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),fjo=r(Ky,":"),Ky.forEach(t),gjo=i(Ta),G=n(Ta,"UL",{});var O=s(G);A2=n(O,"LI",{});var Xje=s(A2);Q1e=n(Xje,"STRONG",{});var Dkt=s(Q1e);hjo=r(Dkt,"albert"),Dkt.forEach(t),ujo=r(Xje," \u2014 "),Fz=n(Xje,"A",{href:!0});var Gkt=s(Fz);pjo=r(Gkt,"AlbertForPreTraining"),Gkt.forEach(t),_jo=r(Xje," (ALBERT model)"),Xje.forEach(t),bjo=i(O),L2=n(O,"LI",{});var zje=s(L2);W1e=n(zje,"STRONG",{});var Okt=s(W1e);vjo=r(Okt,"bart"),Okt.forEach(t),Fjo=r(zje," \u2014 "),Tz=n(zje,"A",{href:!0});var Vkt=s(Tz);Tjo=r(Vkt,"BartForConditionalGeneration"),Vkt.forEach(t),Mjo=r(zje," (BART model)"),zje.forEach(t),Ejo=i(O),y2=n(O,"LI",{});var Qje=s(y2);U1e=n(Qje,"STRONG",{});var Xkt=s(U1e);Cjo=r(Xkt,"bert"),Xkt.forEach(t),wjo=r(Qje," \u2014 "),Mz=n(Qje,"A",{href:!0});var zkt=s(Mz);Ajo=r(zkt,"BertForPreTraining"),zkt.forEach(t),Ljo=r(Qje," (BERT model)"),Qje.forEach(t),yjo=i(O),x2=n(O,"LI",{});var Wje=s(x2);H1e=n(Wje,"STRONG",{});var Qkt=s(H1e);xjo=r(Qkt,"big_bird"),Qkt.forEach(t),$jo=r(Wje," \u2014 "),Ez=n(Wje,"A",{href:!0});var Wkt=s(Ez);kjo=r(Wkt,"BigBirdForPreTraining"),Wkt.forEach(t),Sjo=r(Wje," (BigBird model)"),Wje.forEach(t),Rjo=i(O),$2=n(O,"LI",{});var Uje=s($2);J1e=n(Uje,"STRONG",{});var Ukt=s(J1e);Pjo=r(Ukt,"bloom"),Ukt.forEach(t),Bjo=r(Uje," \u2014 "),Cz=n(Uje,"A",{href:!0});var Hkt=s(Cz);Ijo=r(Hkt,"BloomForCausalLM"),Hkt.forEach(t),Njo=r(Uje," (BLOOM model)"),Uje.forEach(t),qjo=i(O),k2=n(O,"LI",{});var Hje=s(k2);Y1e=n(Hje,"STRONG",{});var Jkt=s(Y1e);jjo=r(Jkt,"camembert"),Jkt.forEach(t),Djo=r(Hje," \u2014 "),wz=n(Hje,"A",{href:!0});var Ykt=s(wz);Gjo=r(Ykt,"CamembertForMaskedLM"),Ykt.forEach(t),Ojo=r(Hje," (CamemBERT model)"),Hje.forEach(t),Vjo=i(O),S2=n(O,"LI",{});var Jje=s(S2);K1e=n(Jje,"STRONG",{});var Kkt=s(K1e);Xjo=r(Kkt,"ctrl"),Kkt.forEach(t),zjo=r(Jje," \u2014 "),Az=n(Jje,"A",{href:!0});var Zkt=s(Az);Qjo=r(Zkt,"CTRLLMHeadModel"),Zkt.forEach(t),Wjo=r(Jje," (CTRL model)"),Jje.forEach(t),Ujo=i(O),R2=n(O,"LI",{});var Yje=s(R2);Z1e=n(Yje,"STRONG",{});var eSt=s(Z1e);Hjo=r(eSt,"data2vec-text"),eSt.forEach(t),Jjo=r(Yje," \u2014 "),Lz=n(Yje,"A",{href:!0});var oSt=s(Lz);Yjo=r(oSt,"Data2VecTextForMaskedLM"),oSt.forEach(t),Kjo=r(Yje," (Data2VecText model)"),Yje.forEach(t),Zjo=i(O),P2=n(O,"LI",{});var Kje=s(P2);e2e=n(Kje,"STRONG",{});var rSt=s(e2e);eDo=r(rSt,"deberta"),rSt.forEach(t),oDo=r(Kje," \u2014 "),yz=n(Kje,"A",{href:!0});var tSt=s(yz);rDo=r(tSt,"DebertaForMaskedLM"),tSt.forEach(t),tDo=r(Kje," (DeBERTa model)"),Kje.forEach(t),aDo=i(O),B2=n(O,"LI",{});var Zje=s(B2);o2e=n(Zje,"STRONG",{});var aSt=s(o2e);nDo=r(aSt,"deberta-v2"),aSt.forEach(t),sDo=r(Zje," \u2014 "),xz=n(Zje,"A",{href:!0});var nSt=s(xz);lDo=r(nSt,"DebertaV2ForMaskedLM"),nSt.forEach(t),iDo=r(Zje," (DeBERTa-v2 model)"),Zje.forEach(t),dDo=i(O),I2=n(O,"LI",{});var eDe=s(I2);r2e=n(eDe,"STRONG",{});var sSt=s(r2e);mDo=r(sSt,"distilbert"),sSt.forEach(t),cDo=r(eDe," \u2014 "),$z=n(eDe,"A",{href:!0});var lSt=s($z);fDo=r(lSt,"DistilBertForMaskedLM"),lSt.forEach(t),gDo=r(eDe," (DistilBERT model)"),eDe.forEach(t),hDo=i(O),N2=n(O,"LI",{});var oDe=s(N2);t2e=n(oDe,"STRONG",{});var iSt=s(t2e);uDo=r(iSt,"electra"),iSt.forEach(t),pDo=r(oDe," \u2014 "),kz=n(oDe,"A",{href:!0});var dSt=s(kz);_Do=r(dSt,"ElectraForPreTraining"),dSt.forEach(t),bDo=r(oDe," (ELECTRA model)"),oDe.forEach(t),vDo=i(O),q2=n(O,"LI",{});var rDe=s(q2);a2e=n(rDe,"STRONG",{});var mSt=s(a2e);FDo=r(mSt,"ernie"),mSt.forEach(t),TDo=r(rDe," \u2014 "),Sz=n(rDe,"A",{href:!0});var cSt=s(Sz);MDo=r(cSt,"ErnieForPreTraining"),cSt.forEach(t),EDo=r(rDe," (ERNIE model)"),rDe.forEach(t),CDo=i(O),j2=n(O,"LI",{});var tDe=s(j2);n2e=n(tDe,"STRONG",{});var fSt=s(n2e);wDo=r(fSt,"flaubert"),fSt.forEach(t),ADo=r(tDe," \u2014 "),Rz=n(tDe,"A",{href:!0});var gSt=s(Rz);LDo=r(gSt,"FlaubertWithLMHeadModel"),gSt.forEach(t),yDo=r(tDe," (FlauBERT model)"),tDe.forEach(t),xDo=i(O),D2=n(O,"LI",{});var aDe=s(D2);s2e=n(aDe,"STRONG",{});var hSt=s(s2e);$Do=r(hSt,"flava"),hSt.forEach(t),kDo=r(aDe," \u2014 "),Pz=n(aDe,"A",{href:!0});var uSt=s(Pz);SDo=r(uSt,"FlavaForPreTraining"),uSt.forEach(t),RDo=r(aDe," (FLAVA model)"),aDe.forEach(t),PDo=i(O),G2=n(O,"LI",{});var nDe=s(G2);l2e=n(nDe,"STRONG",{});var pSt=s(l2e);BDo=r(pSt,"fnet"),pSt.forEach(t),IDo=r(nDe," \u2014 "),Bz=n(nDe,"A",{href:!0});var _St=s(Bz);NDo=r(_St,"FNetForPreTraining"),_St.forEach(t),qDo=r(nDe," (FNet model)"),nDe.forEach(t),jDo=i(O),O2=n(O,"LI",{});var sDe=s(O2);i2e=n(sDe,"STRONG",{});var bSt=s(i2e);DDo=r(bSt,"fsmt"),bSt.forEach(t),GDo=r(sDe," \u2014 "),Iz=n(sDe,"A",{href:!0});var vSt=s(Iz);ODo=r(vSt,"FSMTForConditionalGeneration"),vSt.forEach(t),VDo=r(sDe," (FairSeq Machine-Translation model)"),sDe.forEach(t),XDo=i(O),V2=n(O,"LI",{});var lDe=s(V2);d2e=n(lDe,"STRONG",{});var FSt=s(d2e);zDo=r(FSt,"funnel"),FSt.forEach(t),QDo=r(lDe," \u2014 "),Nz=n(lDe,"A",{href:!0});var TSt=s(Nz);WDo=r(TSt,"FunnelForPreTraining"),TSt.forEach(t),UDo=r(lDe," (Funnel Transformer model)"),lDe.forEach(t),HDo=i(O),X2=n(O,"LI",{});var iDe=s(X2);m2e=n(iDe,"STRONG",{});var MSt=s(m2e);JDo=r(MSt,"gpt2"),MSt.forEach(t),YDo=r(iDe," \u2014 "),qz=n(iDe,"A",{href:!0});var ESt=s(qz);KDo=r(ESt,"GPT2LMHeadModel"),ESt.forEach(t),ZDo=r(iDe," (OpenAI GPT-2 model)"),iDe.forEach(t),eGo=i(O),z2=n(O,"LI",{});var dDe=s(z2);c2e=n(dDe,"STRONG",{});var CSt=s(c2e);oGo=r(CSt,"ibert"),CSt.forEach(t),rGo=r(dDe," \u2014 "),jz=n(dDe,"A",{href:!0});var wSt=s(jz);tGo=r(wSt,"IBertForMaskedLM"),wSt.forEach(t),aGo=r(dDe," (I-BERT model)"),dDe.forEach(t),nGo=i(O),Q2=n(O,"LI",{});var mDe=s(Q2);f2e=n(mDe,"STRONG",{});var ASt=s(f2e);sGo=r(ASt,"layoutlm"),ASt.forEach(t),lGo=r(mDe," \u2014 "),Dz=n(mDe,"A",{href:!0});var LSt=s(Dz);iGo=r(LSt,"LayoutLMForMaskedLM"),LSt.forEach(t),dGo=r(mDe," (LayoutLM model)"),mDe.forEach(t),mGo=i(O),W2=n(O,"LI",{});var cDe=s(W2);g2e=n(cDe,"STRONG",{});var ySt=s(g2e);cGo=r(ySt,"longformer"),ySt.forEach(t),fGo=r(cDe," \u2014 "),Gz=n(cDe,"A",{href:!0});var xSt=s(Gz);gGo=r(xSt,"LongformerForMaskedLM"),xSt.forEach(t),hGo=r(cDe," (Longformer model)"),cDe.forEach(t),uGo=i(O),U2=n(O,"LI",{});var fDe=s(U2);h2e=n(fDe,"STRONG",{});var $St=s(h2e);pGo=r($St,"luke"),$St.forEach(t),_Go=r(fDe," \u2014 "),Oz=n(fDe,"A",{href:!0});var kSt=s(Oz);bGo=r(kSt,"LukeForMaskedLM"),kSt.forEach(t),vGo=r(fDe," (LUKE model)"),fDe.forEach(t),FGo=i(O),H2=n(O,"LI",{});var gDe=s(H2);u2e=n(gDe,"STRONG",{});var SSt=s(u2e);TGo=r(SSt,"lxmert"),SSt.forEach(t),MGo=r(gDe," \u2014 "),Vz=n(gDe,"A",{href:!0});var RSt=s(Vz);EGo=r(RSt,"LxmertForPreTraining"),RSt.forEach(t),CGo=r(gDe," (LXMERT model)"),gDe.forEach(t),wGo=i(O),J2=n(O,"LI",{});var hDe=s(J2);p2e=n(hDe,"STRONG",{});var PSt=s(p2e);AGo=r(PSt,"megatron-bert"),PSt.forEach(t),LGo=r(hDe," \u2014 "),Xz=n(hDe,"A",{href:!0});var BSt=s(Xz);yGo=r(BSt,"MegatronBertForPreTraining"),BSt.forEach(t),xGo=r(hDe," (Megatron-BERT model)"),hDe.forEach(t),$Go=i(O),Y2=n(O,"LI",{});var uDe=s(Y2);_2e=n(uDe,"STRONG",{});var ISt=s(_2e);kGo=r(ISt,"mobilebert"),ISt.forEach(t),SGo=r(uDe," \u2014 "),zz=n(uDe,"A",{href:!0});var NSt=s(zz);RGo=r(NSt,"MobileBertForPreTraining"),NSt.forEach(t),PGo=r(uDe," (MobileBERT model)"),uDe.forEach(t),BGo=i(O),K2=n(O,"LI",{});var pDe=s(K2);b2e=n(pDe,"STRONG",{});var qSt=s(b2e);IGo=r(qSt,"mpnet"),qSt.forEach(t),NGo=r(pDe," \u2014 "),Qz=n(pDe,"A",{href:!0});var jSt=s(Qz);qGo=r(jSt,"MPNetForMaskedLM"),jSt.forEach(t),jGo=r(pDe," (MPNet model)"),pDe.forEach(t),DGo=i(O),Z2=n(O,"LI",{});var _De=s(Z2);v2e=n(_De,"STRONG",{});var DSt=s(v2e);GGo=r(DSt,"mvp"),DSt.forEach(t),OGo=r(_De," \u2014 "),Wz=n(_De,"A",{href:!0});var GSt=s(Wz);VGo=r(GSt,"MvpForConditionalGeneration"),GSt.forEach(t),XGo=r(_De," (MVP model)"),_De.forEach(t),zGo=i(O),eb=n(O,"LI",{});var bDe=s(eb);F2e=n(bDe,"STRONG",{});var OSt=s(F2e);QGo=r(OSt,"nezha"),OSt.forEach(t),WGo=r(bDe," \u2014 "),Uz=n(bDe,"A",{href:!0});var VSt=s(Uz);UGo=r(VSt,"NezhaForPreTraining"),VSt.forEach(t),HGo=r(bDe," (Nezha model)"),bDe.forEach(t),JGo=i(O),ob=n(O,"LI",{});var vDe=s(ob);T2e=n(vDe,"STRONG",{});var XSt=s(T2e);YGo=r(XSt,"openai-gpt"),XSt.forEach(t),KGo=r(vDe," \u2014 "),Hz=n(vDe,"A",{href:!0});var zSt=s(Hz);ZGo=r(zSt,"OpenAIGPTLMHeadModel"),zSt.forEach(t),eOo=r(vDe," (OpenAI GPT model)"),vDe.forEach(t),oOo=i(O),rb=n(O,"LI",{});var FDe=s(rb);M2e=n(FDe,"STRONG",{});var QSt=s(M2e);rOo=r(QSt,"retribert"),QSt.forEach(t),tOo=r(FDe," \u2014 "),Jz=n(FDe,"A",{href:!0});var WSt=s(Jz);aOo=r(WSt,"RetriBertModel"),WSt.forEach(t),nOo=r(FDe," (RetriBERT model)"),FDe.forEach(t),sOo=i(O),tb=n(O,"LI",{});var TDe=s(tb);E2e=n(TDe,"STRONG",{});var USt=s(E2e);lOo=r(USt,"roberta"),USt.forEach(t),iOo=r(TDe," \u2014 "),Yz=n(TDe,"A",{href:!0});var HSt=s(Yz);dOo=r(HSt,"RobertaForMaskedLM"),HSt.forEach(t),mOo=r(TDe," (RoBERTa model)"),TDe.forEach(t),cOo=i(O),ab=n(O,"LI",{});var MDe=s(ab);C2e=n(MDe,"STRONG",{});var JSt=s(C2e);fOo=r(JSt,"splinter"),JSt.forEach(t),gOo=r(MDe," \u2014 "),Kz=n(MDe,"A",{href:!0});var YSt=s(Kz);hOo=r(YSt,"SplinterForPreTraining"),YSt.forEach(t),uOo=r(MDe," (Splinter model)"),MDe.forEach(t),pOo=i(O),nb=n(O,"LI",{});var EDe=s(nb);w2e=n(EDe,"STRONG",{});var KSt=s(w2e);_Oo=r(KSt,"squeezebert"),KSt.forEach(t),bOo=r(EDe," \u2014 "),Zz=n(EDe,"A",{href:!0});var ZSt=s(Zz);vOo=r(ZSt,"SqueezeBertForMaskedLM"),ZSt.forEach(t),FOo=r(EDe," (SqueezeBERT model)"),EDe.forEach(t),TOo=i(O),sb=n(O,"LI",{});var CDe=s(sb);A2e=n(CDe,"STRONG",{});var eRt=s(A2e);MOo=r(eRt,"t5"),eRt.forEach(t),EOo=r(CDe," \u2014 "),eQ=n(CDe,"A",{href:!0});var oRt=s(eQ);COo=r(oRt,"T5ForConditionalGeneration"),oRt.forEach(t),wOo=r(CDe," (T5 model)"),CDe.forEach(t),AOo=i(O),lb=n(O,"LI",{});var wDe=s(lb);L2e=n(wDe,"STRONG",{});var rRt=s(L2e);LOo=r(rRt,"tapas"),rRt.forEach(t),yOo=r(wDe," \u2014 "),oQ=n(wDe,"A",{href:!0});var tRt=s(oQ);xOo=r(tRt,"TapasForMaskedLM"),tRt.forEach(t),$Oo=r(wDe," (TAPAS model)"),wDe.forEach(t),kOo=i(O),ib=n(O,"LI",{});var ADe=s(ib);y2e=n(ADe,"STRONG",{});var aRt=s(y2e);SOo=r(aRt,"transfo-xl"),aRt.forEach(t),ROo=r(ADe," \u2014 "),rQ=n(ADe,"A",{href:!0});var nRt=s(rQ);POo=r(nRt,"TransfoXLLMHeadModel"),nRt.forEach(t),BOo=r(ADe," (Transformer-XL model)"),ADe.forEach(t),IOo=i(O),db=n(O,"LI",{});var LDe=s(db);x2e=n(LDe,"STRONG",{});var sRt=s(x2e);NOo=r(sRt,"unispeech"),sRt.forEach(t),qOo=r(LDe," \u2014 "),tQ=n(LDe,"A",{href:!0});var lRt=s(tQ);jOo=r(lRt,"UniSpeechForPreTraining"),lRt.forEach(t),DOo=r(LDe," (UniSpeech model)"),LDe.forEach(t),GOo=i(O),mb=n(O,"LI",{});var yDe=s(mb);$2e=n(yDe,"STRONG",{});var iRt=s($2e);OOo=r(iRt,"unispeech-sat"),iRt.forEach(t),VOo=r(yDe," \u2014 "),aQ=n(yDe,"A",{href:!0});var dRt=s(aQ);XOo=r(dRt,"UniSpeechSatForPreTraining"),dRt.forEach(t),zOo=r(yDe," (UniSpeechSat model)"),yDe.forEach(t),QOo=i(O),cb=n(O,"LI",{});var xDe=s(cb);k2e=n(xDe,"STRONG",{});var mRt=s(k2e);WOo=r(mRt,"videomae"),mRt.forEach(t),UOo=r(xDe," \u2014 "),nQ=n(xDe,"A",{href:!0});var cRt=s(nQ);HOo=r(cRt,"VideoMAEForPreTraining"),cRt.forEach(t),JOo=r(xDe," (VideoMAE model)"),xDe.forEach(t),YOo=i(O),fb=n(O,"LI",{});var $De=s(fb);S2e=n($De,"STRONG",{});var fRt=s(S2e);KOo=r(fRt,"visual_bert"),fRt.forEach(t),ZOo=r($De," \u2014 "),sQ=n($De,"A",{href:!0});var gRt=s(sQ);eVo=r(gRt,"VisualBertForPreTraining"),gRt.forEach(t),oVo=r($De," (VisualBERT model)"),$De.forEach(t),rVo=i(O),gb=n(O,"LI",{});var kDe=s(gb);R2e=n(kDe,"STRONG",{});var hRt=s(R2e);tVo=r(hRt,"vit_mae"),hRt.forEach(t),aVo=r(kDe," \u2014 "),lQ=n(kDe,"A",{href:!0});var uRt=s(lQ);nVo=r(uRt,"ViTMAEForPreTraining"),uRt.forEach(t),sVo=r(kDe," (ViTMAE model)"),kDe.forEach(t),lVo=i(O),hb=n(O,"LI",{});var SDe=s(hb);P2e=n(SDe,"STRONG",{});var pRt=s(P2e);iVo=r(pRt,"wav2vec2"),pRt.forEach(t),dVo=r(SDe," \u2014 "),iQ=n(SDe,"A",{href:!0});var _Rt=s(iQ);mVo=r(_Rt,"Wav2Vec2ForPreTraining"),_Rt.forEach(t),cVo=r(SDe," (Wav2Vec2 model)"),SDe.forEach(t),fVo=i(O),ub=n(O,"LI",{});var RDe=s(ub);B2e=n(RDe,"STRONG",{});var bRt=s(B2e);gVo=r(bRt,"wav2vec2-conformer"),bRt.forEach(t),hVo=r(RDe," \u2014 "),dQ=n(RDe,"A",{href:!0});var vRt=s(dQ);uVo=r(vRt,"Wav2Vec2ConformerForPreTraining"),vRt.forEach(t),pVo=r(RDe," (Wav2Vec2-Conformer model)"),RDe.forEach(t),_Vo=i(O),pb=n(O,"LI",{});var PDe=s(pb);I2e=n(PDe,"STRONG",{});var FRt=s(I2e);bVo=r(FRt,"xlm"),FRt.forEach(t),vVo=r(PDe," \u2014 "),mQ=n(PDe,"A",{href:!0});var TRt=s(mQ);FVo=r(TRt,"XLMWithLMHeadModel"),TRt.forEach(t),TVo=r(PDe," (XLM model)"),PDe.forEach(t),MVo=i(O),_b=n(O,"LI",{});var BDe=s(_b);N2e=n(BDe,"STRONG",{});var MRt=s(N2e);EVo=r(MRt,"xlm-roberta"),MRt.forEach(t),CVo=r(BDe," \u2014 "),cQ=n(BDe,"A",{href:!0});var ERt=s(cQ);wVo=r(ERt,"XLMRobertaForMaskedLM"),ERt.forEach(t),AVo=r(BDe," (XLM-RoBERTa model)"),BDe.forEach(t),LVo=i(O),bb=n(O,"LI",{});var IDe=s(bb);q2e=n(IDe,"STRONG",{});var CRt=s(q2e);yVo=r(CRt,"xlm-roberta-xl"),CRt.forEach(t),xVo=r(IDe," \u2014 "),fQ=n(IDe,"A",{href:!0});var wRt=s(fQ);$Vo=r(wRt,"XLMRobertaXLForMaskedLM"),wRt.forEach(t),kVo=r(IDe," (XLM-RoBERTa-XL model)"),IDe.forEach(t),SVo=i(O),vb=n(O,"LI",{});var NDe=s(vb);j2e=n(NDe,"STRONG",{});var ARt=s(j2e);RVo=r(ARt,"xlnet"),ARt.forEach(t),PVo=r(NDe," \u2014 "),gQ=n(NDe,"A",{href:!0});var LRt=s(gQ);BVo=r(LRt,"XLNetLMHeadModel"),LRt.forEach(t),IVo=r(NDe," (XLNet model)"),NDe.forEach(t),O.forEach(t),NVo=i(Ta),Fb=n(Ta,"P",{});var qDe=s(Fb);qVo=r(qDe,"The model is set in evaluation mode by default using "),D2e=n(qDe,"CODE",{});var yRt=s(D2e);jVo=r(yRt,"model.eval()"),yRt.forEach(t),DVo=r(qDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=n(qDe,"CODE",{});var xRt=s(G2e);GVo=r(xRt,"model.train()"),xRt.forEach(t),qDe.forEach(t),OVo=i(Ta),T(Tb.$$.fragment,Ta),Ta.forEach(t),Ll.forEach(t),leo=i(c),Ed=n(c,"H2",{class:!0});var Tro=s(Ed);Mb=n(Tro,"A",{id:!0,class:!0,href:!0});var $Rt=s(Mb);O2e=n($Rt,"SPAN",{});var kRt=s(O2e);T(Nx.$$.fragment,kRt),kRt.forEach(t),$Rt.forEach(t),VVo=i(Tro),V2e=n(Tro,"SPAN",{});var SRt=s(V2e);XVo=r(SRt,"AutoModelForCausalLM"),SRt.forEach(t),Tro.forEach(t),ieo=i(c),Io=n(c,"DIV",{class:!0});var yl=s(Io);T(qx.$$.fragment,yl),zVo=i(yl),Cd=n(yl,"P",{});var aie=s(Cd);QVo=r(aie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hQ=n(aie,"A",{href:!0});var RRt=s(hQ);WVo=r(RRt,"from_pretrained()"),RRt.forEach(t),UVo=r(aie," class method or the "),uQ=n(aie,"A",{href:!0});var PRt=s(uQ);HVo=r(PRt,"from_config()"),PRt.forEach(t),JVo=r(aie,` class
method.`),aie.forEach(t),YVo=i(yl),jx=n(yl,"P",{});var Mro=s(jx);KVo=r(Mro,"This class cannot be instantiated directly using "),X2e=n(Mro,"CODE",{});var BRt=s(X2e);ZVo=r(BRt,"__init__()"),BRt.forEach(t),eXo=r(Mro," (throws an error)."),Mro.forEach(t),oXo=i(yl),vt=n(yl,"DIV",{class:!0});var Zy=s(vt);T(Dx.$$.fragment,Zy),rXo=i(Zy),z2e=n(Zy,"P",{});var IRt=s(z2e);tXo=r(IRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IRt.forEach(t),aXo=i(Zy),wd=n(Zy,"P",{});var nie=s(wd);nXo=r(nie,`Note:
Loading a model from its configuration file does `),Q2e=n(nie,"STRONG",{});var NRt=s(Q2e);sXo=r(NRt,"not"),NRt.forEach(t),lXo=r(nie,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(nie,"A",{href:!0});var qRt=s(pQ);iXo=r(qRt,"from_pretrained()"),qRt.forEach(t),dXo=r(nie," to load the model weights."),nie.forEach(t),mXo=i(Zy),T(Eb.$$.fragment,Zy),Zy.forEach(t),cXo=i(yl),oo=n(yl,"DIV",{class:!0});var Ma=s(oo);T(Gx.$$.fragment,Ma),fXo=i(Ma),W2e=n(Ma,"P",{});var jRt=s(W2e);gXo=r(jRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jRt.forEach(t),hXo=i(Ma),Ka=n(Ma,"P",{});var e8=s(Ka);uXo=r(e8,"The model class to instantiate is selected based on the "),U2e=n(e8,"CODE",{});var DRt=s(U2e);pXo=r(DRt,"model_type"),DRt.forEach(t),_Xo=r(e8,` property of the config object (either
passed as an argument or loaded from `),H2e=n(e8,"CODE",{});var GRt=s(H2e);bXo=r(GRt,"pretrained_model_name_or_path"),GRt.forEach(t),vXo=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(e8,"CODE",{});var ORt=s(J2e);FXo=r(ORt,"pretrained_model_name_or_path"),ORt.forEach(t),TXo=r(e8,":"),e8.forEach(t),MXo=i(Ma),Q=n(Ma,"UL",{});var U=s(Q);Cb=n(U,"LI",{});var jDe=s(Cb);Y2e=n(jDe,"STRONG",{});var VRt=s(Y2e);EXo=r(VRt,"bart"),VRt.forEach(t),CXo=r(jDe," \u2014 "),_Q=n(jDe,"A",{href:!0});var XRt=s(_Q);wXo=r(XRt,"BartForCausalLM"),XRt.forEach(t),AXo=r(jDe," (BART model)"),jDe.forEach(t),LXo=i(U),wb=n(U,"LI",{});var DDe=s(wb);K2e=n(DDe,"STRONG",{});var zRt=s(K2e);yXo=r(zRt,"bert"),zRt.forEach(t),xXo=r(DDe," \u2014 "),bQ=n(DDe,"A",{href:!0});var QRt=s(bQ);$Xo=r(QRt,"BertLMHeadModel"),QRt.forEach(t),kXo=r(DDe," (BERT model)"),DDe.forEach(t),SXo=i(U),Ab=n(U,"LI",{});var GDe=s(Ab);Z2e=n(GDe,"STRONG",{});var WRt=s(Z2e);RXo=r(WRt,"bert-generation"),WRt.forEach(t),PXo=r(GDe," \u2014 "),vQ=n(GDe,"A",{href:!0});var URt=s(vQ);BXo=r(URt,"BertGenerationDecoder"),URt.forEach(t),IXo=r(GDe," (Bert Generation model)"),GDe.forEach(t),NXo=i(U),Lb=n(U,"LI",{});var ODe=s(Lb);ebe=n(ODe,"STRONG",{});var HRt=s(ebe);qXo=r(HRt,"big_bird"),HRt.forEach(t),jXo=r(ODe," \u2014 "),FQ=n(ODe,"A",{href:!0});var JRt=s(FQ);DXo=r(JRt,"BigBirdForCausalLM"),JRt.forEach(t),GXo=r(ODe," (BigBird model)"),ODe.forEach(t),OXo=i(U),yb=n(U,"LI",{});var VDe=s(yb);obe=n(VDe,"STRONG",{});var YRt=s(obe);VXo=r(YRt,"bigbird_pegasus"),YRt.forEach(t),XXo=r(VDe," \u2014 "),TQ=n(VDe,"A",{href:!0});var KRt=s(TQ);zXo=r(KRt,"BigBirdPegasusForCausalLM"),KRt.forEach(t),QXo=r(VDe," (BigBird-Pegasus model)"),VDe.forEach(t),WXo=i(U),xb=n(U,"LI",{});var XDe=s(xb);rbe=n(XDe,"STRONG",{});var ZRt=s(rbe);UXo=r(ZRt,"blenderbot"),ZRt.forEach(t),HXo=r(XDe," \u2014 "),MQ=n(XDe,"A",{href:!0});var ePt=s(MQ);JXo=r(ePt,"BlenderbotForCausalLM"),ePt.forEach(t),YXo=r(XDe," (Blenderbot model)"),XDe.forEach(t),KXo=i(U),$b=n(U,"LI",{});var zDe=s($b);tbe=n(zDe,"STRONG",{});var oPt=s(tbe);ZXo=r(oPt,"blenderbot-small"),oPt.forEach(t),ezo=r(zDe," \u2014 "),EQ=n(zDe,"A",{href:!0});var rPt=s(EQ);ozo=r(rPt,"BlenderbotSmallForCausalLM"),rPt.forEach(t),rzo=r(zDe," (BlenderbotSmall model)"),zDe.forEach(t),tzo=i(U),kb=n(U,"LI",{});var QDe=s(kb);abe=n(QDe,"STRONG",{});var tPt=s(abe);azo=r(tPt,"bloom"),tPt.forEach(t),nzo=r(QDe," \u2014 "),CQ=n(QDe,"A",{href:!0});var aPt=s(CQ);szo=r(aPt,"BloomForCausalLM"),aPt.forEach(t),lzo=r(QDe," (BLOOM model)"),QDe.forEach(t),izo=i(U),Sb=n(U,"LI",{});var WDe=s(Sb);nbe=n(WDe,"STRONG",{});var nPt=s(nbe);dzo=r(nPt,"camembert"),nPt.forEach(t),mzo=r(WDe," \u2014 "),wQ=n(WDe,"A",{href:!0});var sPt=s(wQ);czo=r(sPt,"CamembertForCausalLM"),sPt.forEach(t),fzo=r(WDe," (CamemBERT model)"),WDe.forEach(t),gzo=i(U),Rb=n(U,"LI",{});var UDe=s(Rb);sbe=n(UDe,"STRONG",{});var lPt=s(sbe);hzo=r(lPt,"codegen"),lPt.forEach(t),uzo=r(UDe," \u2014 "),AQ=n(UDe,"A",{href:!0});var iPt=s(AQ);pzo=r(iPt,"CodeGenForCausalLM"),iPt.forEach(t),_zo=r(UDe," (CodeGen model)"),UDe.forEach(t),bzo=i(U),Pb=n(U,"LI",{});var HDe=s(Pb);lbe=n(HDe,"STRONG",{});var dPt=s(lbe);vzo=r(dPt,"ctrl"),dPt.forEach(t),Fzo=r(HDe," \u2014 "),LQ=n(HDe,"A",{href:!0});var mPt=s(LQ);Tzo=r(mPt,"CTRLLMHeadModel"),mPt.forEach(t),Mzo=r(HDe," (CTRL model)"),HDe.forEach(t),Ezo=i(U),Bb=n(U,"LI",{});var JDe=s(Bb);ibe=n(JDe,"STRONG",{});var cPt=s(ibe);Czo=r(cPt,"data2vec-text"),cPt.forEach(t),wzo=r(JDe," \u2014 "),yQ=n(JDe,"A",{href:!0});var fPt=s(yQ);Azo=r(fPt,"Data2VecTextForCausalLM"),fPt.forEach(t),Lzo=r(JDe," (Data2VecText model)"),JDe.forEach(t),yzo=i(U),Ib=n(U,"LI",{});var YDe=s(Ib);dbe=n(YDe,"STRONG",{});var gPt=s(dbe);xzo=r(gPt,"electra"),gPt.forEach(t),$zo=r(YDe," \u2014 "),xQ=n(YDe,"A",{href:!0});var hPt=s(xQ);kzo=r(hPt,"ElectraForCausalLM"),hPt.forEach(t),Szo=r(YDe," (ELECTRA model)"),YDe.forEach(t),Rzo=i(U),Nb=n(U,"LI",{});var KDe=s(Nb);mbe=n(KDe,"STRONG",{});var uPt=s(mbe);Pzo=r(uPt,"ernie"),uPt.forEach(t),Bzo=r(KDe," \u2014 "),$Q=n(KDe,"A",{href:!0});var pPt=s($Q);Izo=r(pPt,"ErnieForCausalLM"),pPt.forEach(t),Nzo=r(KDe," (ERNIE model)"),KDe.forEach(t),qzo=i(U),qb=n(U,"LI",{});var ZDe=s(qb);cbe=n(ZDe,"STRONG",{});var _Pt=s(cbe);jzo=r(_Pt,"gpt2"),_Pt.forEach(t),Dzo=r(ZDe," \u2014 "),kQ=n(ZDe,"A",{href:!0});var bPt=s(kQ);Gzo=r(bPt,"GPT2LMHeadModel"),bPt.forEach(t),Ozo=r(ZDe," (OpenAI GPT-2 model)"),ZDe.forEach(t),Vzo=i(U),jb=n(U,"LI",{});var eGe=s(jb);fbe=n(eGe,"STRONG",{});var vPt=s(fbe);Xzo=r(vPt,"gpt_neo"),vPt.forEach(t),zzo=r(eGe," \u2014 "),SQ=n(eGe,"A",{href:!0});var FPt=s(SQ);Qzo=r(FPt,"GPTNeoForCausalLM"),FPt.forEach(t),Wzo=r(eGe," (GPT Neo model)"),eGe.forEach(t),Uzo=i(U),Db=n(U,"LI",{});var oGe=s(Db);gbe=n(oGe,"STRONG",{});var TPt=s(gbe);Hzo=r(TPt,"gpt_neox"),TPt.forEach(t),Jzo=r(oGe," \u2014 "),RQ=n(oGe,"A",{href:!0});var MPt=s(RQ);Yzo=r(MPt,"GPTNeoXForCausalLM"),MPt.forEach(t),Kzo=r(oGe," (GPT NeoX model)"),oGe.forEach(t),Zzo=i(U),Gb=n(U,"LI",{});var rGe=s(Gb);hbe=n(rGe,"STRONG",{});var EPt=s(hbe);eQo=r(EPt,"gpt_neox_japanese"),EPt.forEach(t),oQo=r(rGe," \u2014 "),PQ=n(rGe,"A",{href:!0});var CPt=s(PQ);rQo=r(CPt,"GPTNeoXJapaneseForCausalLM"),CPt.forEach(t),tQo=r(rGe," (GPT NeoX Japanese model)"),rGe.forEach(t),aQo=i(U),Ob=n(U,"LI",{});var tGe=s(Ob);ube=n(tGe,"STRONG",{});var wPt=s(ube);nQo=r(wPt,"gptj"),wPt.forEach(t),sQo=r(tGe," \u2014 "),BQ=n(tGe,"A",{href:!0});var APt=s(BQ);lQo=r(APt,"GPTJForCausalLM"),APt.forEach(t),iQo=r(tGe," (GPT-J model)"),tGe.forEach(t),dQo=i(U),Vb=n(U,"LI",{});var aGe=s(Vb);pbe=n(aGe,"STRONG",{});var LPt=s(pbe);mQo=r(LPt,"marian"),LPt.forEach(t),cQo=r(aGe," \u2014 "),IQ=n(aGe,"A",{href:!0});var yPt=s(IQ);fQo=r(yPt,"MarianForCausalLM"),yPt.forEach(t),gQo=r(aGe," (Marian model)"),aGe.forEach(t),hQo=i(U),Xb=n(U,"LI",{});var nGe=s(Xb);_be=n(nGe,"STRONG",{});var xPt=s(_be);uQo=r(xPt,"mbart"),xPt.forEach(t),pQo=r(nGe," \u2014 "),NQ=n(nGe,"A",{href:!0});var $Pt=s(NQ);_Qo=r($Pt,"MBartForCausalLM"),$Pt.forEach(t),bQo=r(nGe," (mBART model)"),nGe.forEach(t),vQo=i(U),zb=n(U,"LI",{});var sGe=s(zb);bbe=n(sGe,"STRONG",{});var kPt=s(bbe);FQo=r(kPt,"megatron-bert"),kPt.forEach(t),TQo=r(sGe," \u2014 "),qQ=n(sGe,"A",{href:!0});var SPt=s(qQ);MQo=r(SPt,"MegatronBertForCausalLM"),SPt.forEach(t),EQo=r(sGe," (Megatron-BERT model)"),sGe.forEach(t),CQo=i(U),Qb=n(U,"LI",{});var lGe=s(Qb);vbe=n(lGe,"STRONG",{});var RPt=s(vbe);wQo=r(RPt,"mvp"),RPt.forEach(t),AQo=r(lGe," \u2014 "),jQ=n(lGe,"A",{href:!0});var PPt=s(jQ);LQo=r(PPt,"MvpForCausalLM"),PPt.forEach(t),yQo=r(lGe," (MVP model)"),lGe.forEach(t),xQo=i(U),Wb=n(U,"LI",{});var iGe=s(Wb);Fbe=n(iGe,"STRONG",{});var BPt=s(Fbe);$Qo=r(BPt,"openai-gpt"),BPt.forEach(t),kQo=r(iGe," \u2014 "),DQ=n(iGe,"A",{href:!0});var IPt=s(DQ);SQo=r(IPt,"OpenAIGPTLMHeadModel"),IPt.forEach(t),RQo=r(iGe," (OpenAI GPT model)"),iGe.forEach(t),PQo=i(U),Ub=n(U,"LI",{});var dGe=s(Ub);Tbe=n(dGe,"STRONG",{});var NPt=s(Tbe);BQo=r(NPt,"opt"),NPt.forEach(t),IQo=r(dGe," \u2014 "),GQ=n(dGe,"A",{href:!0});var qPt=s(GQ);NQo=r(qPt,"OPTForCausalLM"),qPt.forEach(t),qQo=r(dGe," (OPT model)"),dGe.forEach(t),jQo=i(U),Hb=n(U,"LI",{});var mGe=s(Hb);Mbe=n(mGe,"STRONG",{});var jPt=s(Mbe);DQo=r(jPt,"pegasus"),jPt.forEach(t),GQo=r(mGe," \u2014 "),OQ=n(mGe,"A",{href:!0});var DPt=s(OQ);OQo=r(DPt,"PegasusForCausalLM"),DPt.forEach(t),VQo=r(mGe," (Pegasus model)"),mGe.forEach(t),XQo=i(U),Jb=n(U,"LI",{});var cGe=s(Jb);Ebe=n(cGe,"STRONG",{});var GPt=s(Ebe);zQo=r(GPt,"plbart"),GPt.forEach(t),QQo=r(cGe," \u2014 "),VQ=n(cGe,"A",{href:!0});var OPt=s(VQ);WQo=r(OPt,"PLBartForCausalLM"),OPt.forEach(t),UQo=r(cGe," (PLBart model)"),cGe.forEach(t),HQo=i(U),Yb=n(U,"LI",{});var fGe=s(Yb);Cbe=n(fGe,"STRONG",{});var VPt=s(Cbe);JQo=r(VPt,"prophetnet"),VPt.forEach(t),YQo=r(fGe," \u2014 "),XQ=n(fGe,"A",{href:!0});var XPt=s(XQ);KQo=r(XPt,"ProphetNetForCausalLM"),XPt.forEach(t),ZQo=r(fGe," (ProphetNet model)"),fGe.forEach(t),eWo=i(U),Kb=n(U,"LI",{});var gGe=s(Kb);wbe=n(gGe,"STRONG",{});var zPt=s(wbe);oWo=r(zPt,"qdqbert"),zPt.forEach(t),rWo=r(gGe," \u2014 "),zQ=n(gGe,"A",{href:!0});var QPt=s(zQ);tWo=r(QPt,"QDQBertLMHeadModel"),QPt.forEach(t),aWo=r(gGe," (QDQBert model)"),gGe.forEach(t),nWo=i(U),Zb=n(U,"LI",{});var hGe=s(Zb);Abe=n(hGe,"STRONG",{});var WPt=s(Abe);sWo=r(WPt,"reformer"),WPt.forEach(t),lWo=r(hGe," \u2014 "),QQ=n(hGe,"A",{href:!0});var UPt=s(QQ);iWo=r(UPt,"ReformerModelWithLMHead"),UPt.forEach(t),dWo=r(hGe," (Reformer model)"),hGe.forEach(t),mWo=i(U),ev=n(U,"LI",{});var uGe=s(ev);Lbe=n(uGe,"STRONG",{});var HPt=s(Lbe);cWo=r(HPt,"rembert"),HPt.forEach(t),fWo=r(uGe," \u2014 "),WQ=n(uGe,"A",{href:!0});var JPt=s(WQ);gWo=r(JPt,"RemBertForCausalLM"),JPt.forEach(t),hWo=r(uGe," (RemBERT model)"),uGe.forEach(t),uWo=i(U),ov=n(U,"LI",{});var pGe=s(ov);ybe=n(pGe,"STRONG",{});var YPt=s(ybe);pWo=r(YPt,"roberta"),YPt.forEach(t),_Wo=r(pGe," \u2014 "),UQ=n(pGe,"A",{href:!0});var KPt=s(UQ);bWo=r(KPt,"RobertaForCausalLM"),KPt.forEach(t),vWo=r(pGe," (RoBERTa model)"),pGe.forEach(t),FWo=i(U),rv=n(U,"LI",{});var _Ge=s(rv);xbe=n(_Ge,"STRONG",{});var ZPt=s(xbe);TWo=r(ZPt,"roformer"),ZPt.forEach(t),MWo=r(_Ge," \u2014 "),HQ=n(_Ge,"A",{href:!0});var eBt=s(HQ);EWo=r(eBt,"RoFormerForCausalLM"),eBt.forEach(t),CWo=r(_Ge," (RoFormer model)"),_Ge.forEach(t),wWo=i(U),tv=n(U,"LI",{});var bGe=s(tv);$be=n(bGe,"STRONG",{});var oBt=s($be);AWo=r(oBt,"speech_to_text_2"),oBt.forEach(t),LWo=r(bGe," \u2014 "),JQ=n(bGe,"A",{href:!0});var rBt=s(JQ);yWo=r(rBt,"Speech2Text2ForCausalLM"),rBt.forEach(t),xWo=r(bGe," (Speech2Text2 model)"),bGe.forEach(t),$Wo=i(U),av=n(U,"LI",{});var vGe=s(av);kbe=n(vGe,"STRONG",{});var tBt=s(kbe);kWo=r(tBt,"transfo-xl"),tBt.forEach(t),SWo=r(vGe," \u2014 "),YQ=n(vGe,"A",{href:!0});var aBt=s(YQ);RWo=r(aBt,"TransfoXLLMHeadModel"),aBt.forEach(t),PWo=r(vGe," (Transformer-XL model)"),vGe.forEach(t),BWo=i(U),nv=n(U,"LI",{});var FGe=s(nv);Sbe=n(FGe,"STRONG",{});var nBt=s(Sbe);IWo=r(nBt,"trocr"),nBt.forEach(t),NWo=r(FGe," \u2014 "),KQ=n(FGe,"A",{href:!0});var sBt=s(KQ);qWo=r(sBt,"TrOCRForCausalLM"),sBt.forEach(t),jWo=r(FGe," (TrOCR model)"),FGe.forEach(t),DWo=i(U),sv=n(U,"LI",{});var TGe=s(sv);Rbe=n(TGe,"STRONG",{});var lBt=s(Rbe);GWo=r(lBt,"xglm"),lBt.forEach(t),OWo=r(TGe," \u2014 "),ZQ=n(TGe,"A",{href:!0});var iBt=s(ZQ);VWo=r(iBt,"XGLMForCausalLM"),iBt.forEach(t),XWo=r(TGe," (XGLM model)"),TGe.forEach(t),zWo=i(U),lv=n(U,"LI",{});var MGe=s(lv);Pbe=n(MGe,"STRONG",{});var dBt=s(Pbe);QWo=r(dBt,"xlm"),dBt.forEach(t),WWo=r(MGe," \u2014 "),eW=n(MGe,"A",{href:!0});var mBt=s(eW);UWo=r(mBt,"XLMWithLMHeadModel"),mBt.forEach(t),HWo=r(MGe," (XLM model)"),MGe.forEach(t),JWo=i(U),iv=n(U,"LI",{});var EGe=s(iv);Bbe=n(EGe,"STRONG",{});var cBt=s(Bbe);YWo=r(cBt,"xlm-prophetnet"),cBt.forEach(t),KWo=r(EGe," \u2014 "),oW=n(EGe,"A",{href:!0});var fBt=s(oW);ZWo=r(fBt,"XLMProphetNetForCausalLM"),fBt.forEach(t),eUo=r(EGe," (XLM-ProphetNet model)"),EGe.forEach(t),oUo=i(U),dv=n(U,"LI",{});var CGe=s(dv);Ibe=n(CGe,"STRONG",{});var gBt=s(Ibe);rUo=r(gBt,"xlm-roberta"),gBt.forEach(t),tUo=r(CGe," \u2014 "),rW=n(CGe,"A",{href:!0});var hBt=s(rW);aUo=r(hBt,"XLMRobertaForCausalLM"),hBt.forEach(t),nUo=r(CGe," (XLM-RoBERTa model)"),CGe.forEach(t),sUo=i(U),mv=n(U,"LI",{});var wGe=s(mv);Nbe=n(wGe,"STRONG",{});var uBt=s(Nbe);lUo=r(uBt,"xlm-roberta-xl"),uBt.forEach(t),iUo=r(wGe," \u2014 "),tW=n(wGe,"A",{href:!0});var pBt=s(tW);dUo=r(pBt,"XLMRobertaXLForCausalLM"),pBt.forEach(t),mUo=r(wGe," (XLM-RoBERTa-XL model)"),wGe.forEach(t),cUo=i(U),cv=n(U,"LI",{});var AGe=s(cv);qbe=n(AGe,"STRONG",{});var _Bt=s(qbe);fUo=r(_Bt,"xlnet"),_Bt.forEach(t),gUo=r(AGe," \u2014 "),aW=n(AGe,"A",{href:!0});var bBt=s(aW);hUo=r(bBt,"XLNetLMHeadModel"),bBt.forEach(t),uUo=r(AGe," (XLNet model)"),AGe.forEach(t),U.forEach(t),pUo=i(Ma),fv=n(Ma,"P",{});var LGe=s(fv);_Uo=r(LGe,"The model is set in evaluation mode by default using "),jbe=n(LGe,"CODE",{});var vBt=s(jbe);bUo=r(vBt,"model.eval()"),vBt.forEach(t),vUo=r(LGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=n(LGe,"CODE",{});var FBt=s(Dbe);FUo=r(FBt,"model.train()"),FBt.forEach(t),LGe.forEach(t),TUo=i(Ma),T(gv.$$.fragment,Ma),Ma.forEach(t),yl.forEach(t),deo=i(c),Ad=n(c,"H2",{class:!0});var Ero=s(Ad);hv=n(Ero,"A",{id:!0,class:!0,href:!0});var TBt=s(hv);Gbe=n(TBt,"SPAN",{});var MBt=s(Gbe);T(Ox.$$.fragment,MBt),MBt.forEach(t),TBt.forEach(t),MUo=i(Ero),Obe=n(Ero,"SPAN",{});var EBt=s(Obe);EUo=r(EBt,"AutoModelForMaskedLM"),EBt.forEach(t),Ero.forEach(t),meo=i(c),No=n(c,"DIV",{class:!0});var xl=s(No);T(Vx.$$.fragment,xl),CUo=i(xl),Ld=n(xl,"P",{});var sie=s(Ld);wUo=r(sie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nW=n(sie,"A",{href:!0});var CBt=s(nW);AUo=r(CBt,"from_pretrained()"),CBt.forEach(t),LUo=r(sie," class method or the "),sW=n(sie,"A",{href:!0});var wBt=s(sW);yUo=r(wBt,"from_config()"),wBt.forEach(t),xUo=r(sie,` class
method.`),sie.forEach(t),$Uo=i(xl),Xx=n(xl,"P",{});var Cro=s(Xx);kUo=r(Cro,"This class cannot be instantiated directly using "),Vbe=n(Cro,"CODE",{});var ABt=s(Vbe);SUo=r(ABt,"__init__()"),ABt.forEach(t),RUo=r(Cro," (throws an error)."),Cro.forEach(t),PUo=i(xl),Ft=n(xl,"DIV",{class:!0});var o8=s(Ft);T(zx.$$.fragment,o8),BUo=i(o8),Xbe=n(o8,"P",{});var LBt=s(Xbe);IUo=r(LBt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LBt.forEach(t),NUo=i(o8),yd=n(o8,"P",{});var lie=s(yd);qUo=r(lie,`Note:
Loading a model from its configuration file does `),zbe=n(lie,"STRONG",{});var yBt=s(zbe);jUo=r(yBt,"not"),yBt.forEach(t),DUo=r(lie,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(lie,"A",{href:!0});var xBt=s(lW);GUo=r(xBt,"from_pretrained()"),xBt.forEach(t),OUo=r(lie," to load the model weights."),lie.forEach(t),VUo=i(o8),T(uv.$$.fragment,o8),o8.forEach(t),XUo=i(xl),ro=n(xl,"DIV",{class:!0});var Ea=s(ro);T(Qx.$$.fragment,Ea),zUo=i(Ea),Qbe=n(Ea,"P",{});var $Bt=s(Qbe);QUo=r($Bt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Bt.forEach(t),WUo=i(Ea),Za=n(Ea,"P",{});var r8=s(Za);UUo=r(r8,"The model class to instantiate is selected based on the "),Wbe=n(r8,"CODE",{});var kBt=s(Wbe);HUo=r(kBt,"model_type"),kBt.forEach(t),JUo=r(r8,` property of the config object (either
passed as an argument or loaded from `),Ube=n(r8,"CODE",{});var SBt=s(Ube);YUo=r(SBt,"pretrained_model_name_or_path"),SBt.forEach(t),KUo=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(r8,"CODE",{});var RBt=s(Hbe);ZUo=r(RBt,"pretrained_model_name_or_path"),RBt.forEach(t),eHo=r(r8,":"),r8.forEach(t),oHo=i(Ea),J=n(Ea,"UL",{});var K=s(J);pv=n(K,"LI",{});var yGe=s(pv);Jbe=n(yGe,"STRONG",{});var PBt=s(Jbe);rHo=r(PBt,"albert"),PBt.forEach(t),tHo=r(yGe," \u2014 "),iW=n(yGe,"A",{href:!0});var BBt=s(iW);aHo=r(BBt,"AlbertForMaskedLM"),BBt.forEach(t),nHo=r(yGe," (ALBERT model)"),yGe.forEach(t),sHo=i(K),_v=n(K,"LI",{});var xGe=s(_v);Ybe=n(xGe,"STRONG",{});var IBt=s(Ybe);lHo=r(IBt,"bart"),IBt.forEach(t),iHo=r(xGe," \u2014 "),dW=n(xGe,"A",{href:!0});var NBt=s(dW);dHo=r(NBt,"BartForConditionalGeneration"),NBt.forEach(t),mHo=r(xGe," (BART model)"),xGe.forEach(t),cHo=i(K),bv=n(K,"LI",{});var $Ge=s(bv);Kbe=n($Ge,"STRONG",{});var qBt=s(Kbe);fHo=r(qBt,"bert"),qBt.forEach(t),gHo=r($Ge," \u2014 "),mW=n($Ge,"A",{href:!0});var jBt=s(mW);hHo=r(jBt,"BertForMaskedLM"),jBt.forEach(t),uHo=r($Ge," (BERT model)"),$Ge.forEach(t),pHo=i(K),vv=n(K,"LI",{});var kGe=s(vv);Zbe=n(kGe,"STRONG",{});var DBt=s(Zbe);_Ho=r(DBt,"big_bird"),DBt.forEach(t),bHo=r(kGe," \u2014 "),cW=n(kGe,"A",{href:!0});var GBt=s(cW);vHo=r(GBt,"BigBirdForMaskedLM"),GBt.forEach(t),FHo=r(kGe," (BigBird model)"),kGe.forEach(t),THo=i(K),Fv=n(K,"LI",{});var SGe=s(Fv);eve=n(SGe,"STRONG",{});var OBt=s(eve);MHo=r(OBt,"camembert"),OBt.forEach(t),EHo=r(SGe," \u2014 "),fW=n(SGe,"A",{href:!0});var VBt=s(fW);CHo=r(VBt,"CamembertForMaskedLM"),VBt.forEach(t),wHo=r(SGe," (CamemBERT model)"),SGe.forEach(t),AHo=i(K),Tv=n(K,"LI",{});var RGe=s(Tv);ove=n(RGe,"STRONG",{});var XBt=s(ove);LHo=r(XBt,"convbert"),XBt.forEach(t),yHo=r(RGe," \u2014 "),gW=n(RGe,"A",{href:!0});var zBt=s(gW);xHo=r(zBt,"ConvBertForMaskedLM"),zBt.forEach(t),$Ho=r(RGe," (ConvBERT model)"),RGe.forEach(t),kHo=i(K),Mv=n(K,"LI",{});var PGe=s(Mv);rve=n(PGe,"STRONG",{});var QBt=s(rve);SHo=r(QBt,"data2vec-text"),QBt.forEach(t),RHo=r(PGe," \u2014 "),hW=n(PGe,"A",{href:!0});var WBt=s(hW);PHo=r(WBt,"Data2VecTextForMaskedLM"),WBt.forEach(t),BHo=r(PGe," (Data2VecText model)"),PGe.forEach(t),IHo=i(K),Ev=n(K,"LI",{});var BGe=s(Ev);tve=n(BGe,"STRONG",{});var UBt=s(tve);NHo=r(UBt,"deberta"),UBt.forEach(t),qHo=r(BGe," \u2014 "),uW=n(BGe,"A",{href:!0});var HBt=s(uW);jHo=r(HBt,"DebertaForMaskedLM"),HBt.forEach(t),DHo=r(BGe," (DeBERTa model)"),BGe.forEach(t),GHo=i(K),Cv=n(K,"LI",{});var IGe=s(Cv);ave=n(IGe,"STRONG",{});var JBt=s(ave);OHo=r(JBt,"deberta-v2"),JBt.forEach(t),VHo=r(IGe," \u2014 "),pW=n(IGe,"A",{href:!0});var YBt=s(pW);XHo=r(YBt,"DebertaV2ForMaskedLM"),YBt.forEach(t),zHo=r(IGe," (DeBERTa-v2 model)"),IGe.forEach(t),QHo=i(K),wv=n(K,"LI",{});var NGe=s(wv);nve=n(NGe,"STRONG",{});var KBt=s(nve);WHo=r(KBt,"distilbert"),KBt.forEach(t),UHo=r(NGe," \u2014 "),_W=n(NGe,"A",{href:!0});var ZBt=s(_W);HHo=r(ZBt,"DistilBertForMaskedLM"),ZBt.forEach(t),JHo=r(NGe," (DistilBERT model)"),NGe.forEach(t),YHo=i(K),Av=n(K,"LI",{});var qGe=s(Av);sve=n(qGe,"STRONG",{});var eIt=s(sve);KHo=r(eIt,"electra"),eIt.forEach(t),ZHo=r(qGe," \u2014 "),bW=n(qGe,"A",{href:!0});var oIt=s(bW);eJo=r(oIt,"ElectraForMaskedLM"),oIt.forEach(t),oJo=r(qGe," (ELECTRA model)"),qGe.forEach(t),rJo=i(K),Lv=n(K,"LI",{});var jGe=s(Lv);lve=n(jGe,"STRONG",{});var rIt=s(lve);tJo=r(rIt,"ernie"),rIt.forEach(t),aJo=r(jGe," \u2014 "),vW=n(jGe,"A",{href:!0});var tIt=s(vW);nJo=r(tIt,"ErnieForMaskedLM"),tIt.forEach(t),sJo=r(jGe," (ERNIE model)"),jGe.forEach(t),lJo=i(K),yv=n(K,"LI",{});var DGe=s(yv);ive=n(DGe,"STRONG",{});var aIt=s(ive);iJo=r(aIt,"flaubert"),aIt.forEach(t),dJo=r(DGe," \u2014 "),FW=n(DGe,"A",{href:!0});var nIt=s(FW);mJo=r(nIt,"FlaubertWithLMHeadModel"),nIt.forEach(t),cJo=r(DGe," (FlauBERT model)"),DGe.forEach(t),fJo=i(K),xv=n(K,"LI",{});var GGe=s(xv);dve=n(GGe,"STRONG",{});var sIt=s(dve);gJo=r(sIt,"fnet"),sIt.forEach(t),hJo=r(GGe," \u2014 "),TW=n(GGe,"A",{href:!0});var lIt=s(TW);uJo=r(lIt,"FNetForMaskedLM"),lIt.forEach(t),pJo=r(GGe," (FNet model)"),GGe.forEach(t),_Jo=i(K),$v=n(K,"LI",{});var OGe=s($v);mve=n(OGe,"STRONG",{});var iIt=s(mve);bJo=r(iIt,"funnel"),iIt.forEach(t),vJo=r(OGe," \u2014 "),MW=n(OGe,"A",{href:!0});var dIt=s(MW);FJo=r(dIt,"FunnelForMaskedLM"),dIt.forEach(t),TJo=r(OGe," (Funnel Transformer model)"),OGe.forEach(t),MJo=i(K),kv=n(K,"LI",{});var VGe=s(kv);cve=n(VGe,"STRONG",{});var mIt=s(cve);EJo=r(mIt,"ibert"),mIt.forEach(t),CJo=r(VGe," \u2014 "),EW=n(VGe,"A",{href:!0});var cIt=s(EW);wJo=r(cIt,"IBertForMaskedLM"),cIt.forEach(t),AJo=r(VGe," (I-BERT model)"),VGe.forEach(t),LJo=i(K),Sv=n(K,"LI",{});var XGe=s(Sv);fve=n(XGe,"STRONG",{});var fIt=s(fve);yJo=r(fIt,"layoutlm"),fIt.forEach(t),xJo=r(XGe," \u2014 "),CW=n(XGe,"A",{href:!0});var gIt=s(CW);$Jo=r(gIt,"LayoutLMForMaskedLM"),gIt.forEach(t),kJo=r(XGe," (LayoutLM model)"),XGe.forEach(t),SJo=i(K),Rv=n(K,"LI",{});var zGe=s(Rv);gve=n(zGe,"STRONG",{});var hIt=s(gve);RJo=r(hIt,"longformer"),hIt.forEach(t),PJo=r(zGe," \u2014 "),wW=n(zGe,"A",{href:!0});var uIt=s(wW);BJo=r(uIt,"LongformerForMaskedLM"),uIt.forEach(t),IJo=r(zGe," (Longformer model)"),zGe.forEach(t),NJo=i(K),Pv=n(K,"LI",{});var QGe=s(Pv);hve=n(QGe,"STRONG",{});var pIt=s(hve);qJo=r(pIt,"luke"),pIt.forEach(t),jJo=r(QGe," \u2014 "),AW=n(QGe,"A",{href:!0});var _It=s(AW);DJo=r(_It,"LukeForMaskedLM"),_It.forEach(t),GJo=r(QGe," (LUKE model)"),QGe.forEach(t),OJo=i(K),Bv=n(K,"LI",{});var WGe=s(Bv);uve=n(WGe,"STRONG",{});var bIt=s(uve);VJo=r(bIt,"mbart"),bIt.forEach(t),XJo=r(WGe," \u2014 "),LW=n(WGe,"A",{href:!0});var vIt=s(LW);zJo=r(vIt,"MBartForConditionalGeneration"),vIt.forEach(t),QJo=r(WGe," (mBART model)"),WGe.forEach(t),WJo=i(K),Iv=n(K,"LI",{});var UGe=s(Iv);pve=n(UGe,"STRONG",{});var FIt=s(pve);UJo=r(FIt,"megatron-bert"),FIt.forEach(t),HJo=r(UGe," \u2014 "),yW=n(UGe,"A",{href:!0});var TIt=s(yW);JJo=r(TIt,"MegatronBertForMaskedLM"),TIt.forEach(t),YJo=r(UGe," (Megatron-BERT model)"),UGe.forEach(t),KJo=i(K),Nv=n(K,"LI",{});var HGe=s(Nv);_ve=n(HGe,"STRONG",{});var MIt=s(_ve);ZJo=r(MIt,"mobilebert"),MIt.forEach(t),eYo=r(HGe," \u2014 "),xW=n(HGe,"A",{href:!0});var EIt=s(xW);oYo=r(EIt,"MobileBertForMaskedLM"),EIt.forEach(t),rYo=r(HGe," (MobileBERT model)"),HGe.forEach(t),tYo=i(K),qv=n(K,"LI",{});var JGe=s(qv);bve=n(JGe,"STRONG",{});var CIt=s(bve);aYo=r(CIt,"mpnet"),CIt.forEach(t),nYo=r(JGe," \u2014 "),$W=n(JGe,"A",{href:!0});var wIt=s($W);sYo=r(wIt,"MPNetForMaskedLM"),wIt.forEach(t),lYo=r(JGe," (MPNet model)"),JGe.forEach(t),iYo=i(K),jv=n(K,"LI",{});var YGe=s(jv);vve=n(YGe,"STRONG",{});var AIt=s(vve);dYo=r(AIt,"mvp"),AIt.forEach(t),mYo=r(YGe," \u2014 "),kW=n(YGe,"A",{href:!0});var LIt=s(kW);cYo=r(LIt,"MvpForConditionalGeneration"),LIt.forEach(t),fYo=r(YGe," (MVP model)"),YGe.forEach(t),gYo=i(K),Dv=n(K,"LI",{});var KGe=s(Dv);Fve=n(KGe,"STRONG",{});var yIt=s(Fve);hYo=r(yIt,"nezha"),yIt.forEach(t),uYo=r(KGe," \u2014 "),SW=n(KGe,"A",{href:!0});var xIt=s(SW);pYo=r(xIt,"NezhaForMaskedLM"),xIt.forEach(t),_Yo=r(KGe," (Nezha model)"),KGe.forEach(t),bYo=i(K),Gv=n(K,"LI",{});var ZGe=s(Gv);Tve=n(ZGe,"STRONG",{});var $It=s(Tve);vYo=r($It,"nystromformer"),$It.forEach(t),FYo=r(ZGe," \u2014 "),RW=n(ZGe,"A",{href:!0});var kIt=s(RW);TYo=r(kIt,"NystromformerForMaskedLM"),kIt.forEach(t),MYo=r(ZGe," (Nystr\xF6mformer model)"),ZGe.forEach(t),EYo=i(K),Ov=n(K,"LI",{});var eOe=s(Ov);Mve=n(eOe,"STRONG",{});var SIt=s(Mve);CYo=r(SIt,"perceiver"),SIt.forEach(t),wYo=r(eOe," \u2014 "),PW=n(eOe,"A",{href:!0});var RIt=s(PW);AYo=r(RIt,"PerceiverForMaskedLM"),RIt.forEach(t),LYo=r(eOe," (Perceiver model)"),eOe.forEach(t),yYo=i(K),Vv=n(K,"LI",{});var oOe=s(Vv);Eve=n(oOe,"STRONG",{});var PIt=s(Eve);xYo=r(PIt,"qdqbert"),PIt.forEach(t),$Yo=r(oOe," \u2014 "),BW=n(oOe,"A",{href:!0});var BIt=s(BW);kYo=r(BIt,"QDQBertForMaskedLM"),BIt.forEach(t),SYo=r(oOe," (QDQBert model)"),oOe.forEach(t),RYo=i(K),Xv=n(K,"LI",{});var rOe=s(Xv);Cve=n(rOe,"STRONG",{});var IIt=s(Cve);PYo=r(IIt,"reformer"),IIt.forEach(t),BYo=r(rOe," \u2014 "),IW=n(rOe,"A",{href:!0});var NIt=s(IW);IYo=r(NIt,"ReformerForMaskedLM"),NIt.forEach(t),NYo=r(rOe," (Reformer model)"),rOe.forEach(t),qYo=i(K),zv=n(K,"LI",{});var tOe=s(zv);wve=n(tOe,"STRONG",{});var qIt=s(wve);jYo=r(qIt,"rembert"),qIt.forEach(t),DYo=r(tOe," \u2014 "),NW=n(tOe,"A",{href:!0});var jIt=s(NW);GYo=r(jIt,"RemBertForMaskedLM"),jIt.forEach(t),OYo=r(tOe," (RemBERT model)"),tOe.forEach(t),VYo=i(K),Qv=n(K,"LI",{});var aOe=s(Qv);Ave=n(aOe,"STRONG",{});var DIt=s(Ave);XYo=r(DIt,"roberta"),DIt.forEach(t),zYo=r(aOe," \u2014 "),qW=n(aOe,"A",{href:!0});var GIt=s(qW);QYo=r(GIt,"RobertaForMaskedLM"),GIt.forEach(t),WYo=r(aOe," (RoBERTa model)"),aOe.forEach(t),UYo=i(K),Wv=n(K,"LI",{});var nOe=s(Wv);Lve=n(nOe,"STRONG",{});var OIt=s(Lve);HYo=r(OIt,"roformer"),OIt.forEach(t),JYo=r(nOe," \u2014 "),jW=n(nOe,"A",{href:!0});var VIt=s(jW);YYo=r(VIt,"RoFormerForMaskedLM"),VIt.forEach(t),KYo=r(nOe," (RoFormer model)"),nOe.forEach(t),ZYo=i(K),Uv=n(K,"LI",{});var sOe=s(Uv);yve=n(sOe,"STRONG",{});var XIt=s(yve);eKo=r(XIt,"squeezebert"),XIt.forEach(t),oKo=r(sOe," \u2014 "),DW=n(sOe,"A",{href:!0});var zIt=s(DW);rKo=r(zIt,"SqueezeBertForMaskedLM"),zIt.forEach(t),tKo=r(sOe," (SqueezeBERT model)"),sOe.forEach(t),aKo=i(K),Hv=n(K,"LI",{});var lOe=s(Hv);xve=n(lOe,"STRONG",{});var QIt=s(xve);nKo=r(QIt,"tapas"),QIt.forEach(t),sKo=r(lOe," \u2014 "),GW=n(lOe,"A",{href:!0});var WIt=s(GW);lKo=r(WIt,"TapasForMaskedLM"),WIt.forEach(t),iKo=r(lOe," (TAPAS model)"),lOe.forEach(t),dKo=i(K),Jv=n(K,"LI",{});var iOe=s(Jv);$ve=n(iOe,"STRONG",{});var UIt=s($ve);mKo=r(UIt,"wav2vec2"),UIt.forEach(t),cKo=r(iOe," \u2014 "),kve=n(iOe,"CODE",{});var HIt=s(kve);fKo=r(HIt,"Wav2Vec2ForMaskedLM"),HIt.forEach(t),gKo=r(iOe," (Wav2Vec2 model)"),iOe.forEach(t),hKo=i(K),Yv=n(K,"LI",{});var dOe=s(Yv);Sve=n(dOe,"STRONG",{});var JIt=s(Sve);uKo=r(JIt,"xlm"),JIt.forEach(t),pKo=r(dOe," \u2014 "),OW=n(dOe,"A",{href:!0});var YIt=s(OW);_Ko=r(YIt,"XLMWithLMHeadModel"),YIt.forEach(t),bKo=r(dOe," (XLM model)"),dOe.forEach(t),vKo=i(K),Kv=n(K,"LI",{});var mOe=s(Kv);Rve=n(mOe,"STRONG",{});var KIt=s(Rve);FKo=r(KIt,"xlm-roberta"),KIt.forEach(t),TKo=r(mOe," \u2014 "),VW=n(mOe,"A",{href:!0});var ZIt=s(VW);MKo=r(ZIt,"XLMRobertaForMaskedLM"),ZIt.forEach(t),EKo=r(mOe," (XLM-RoBERTa model)"),mOe.forEach(t),CKo=i(K),Zv=n(K,"LI",{});var cOe=s(Zv);Pve=n(cOe,"STRONG",{});var eNt=s(Pve);wKo=r(eNt,"xlm-roberta-xl"),eNt.forEach(t),AKo=r(cOe," \u2014 "),XW=n(cOe,"A",{href:!0});var oNt=s(XW);LKo=r(oNt,"XLMRobertaXLForMaskedLM"),oNt.forEach(t),yKo=r(cOe," (XLM-RoBERTa-XL model)"),cOe.forEach(t),xKo=i(K),eF=n(K,"LI",{});var fOe=s(eF);Bve=n(fOe,"STRONG",{});var rNt=s(Bve);$Ko=r(rNt,"yoso"),rNt.forEach(t),kKo=r(fOe," \u2014 "),zW=n(fOe,"A",{href:!0});var tNt=s(zW);SKo=r(tNt,"YosoForMaskedLM"),tNt.forEach(t),RKo=r(fOe," (YOSO model)"),fOe.forEach(t),K.forEach(t),PKo=i(Ea),oF=n(Ea,"P",{});var gOe=s(oF);BKo=r(gOe,"The model is set in evaluation mode by default using "),Ive=n(gOe,"CODE",{});var aNt=s(Ive);IKo=r(aNt,"model.eval()"),aNt.forEach(t),NKo=r(gOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=n(gOe,"CODE",{});var nNt=s(Nve);qKo=r(nNt,"model.train()"),nNt.forEach(t),gOe.forEach(t),jKo=i(Ea),T(rF.$$.fragment,Ea),Ea.forEach(t),xl.forEach(t),ceo=i(c),xd=n(c,"H2",{class:!0});var wro=s(xd);tF=n(wro,"A",{id:!0,class:!0,href:!0});var sNt=s(tF);qve=n(sNt,"SPAN",{});var lNt=s(qve);T(Wx.$$.fragment,lNt),lNt.forEach(t),sNt.forEach(t),DKo=i(wro),jve=n(wro,"SPAN",{});var iNt=s(jve);GKo=r(iNt,"AutoModelForSeq2SeqLM"),iNt.forEach(t),wro.forEach(t),feo=i(c),qo=n(c,"DIV",{class:!0});var $l=s(qo);T(Ux.$$.fragment,$l),OKo=i($l),$d=n($l,"P",{});var iie=s($d);VKo=r(iie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QW=n(iie,"A",{href:!0});var dNt=s(QW);XKo=r(dNt,"from_pretrained()"),dNt.forEach(t),zKo=r(iie," class method or the "),WW=n(iie,"A",{href:!0});var mNt=s(WW);QKo=r(mNt,"from_config()"),mNt.forEach(t),WKo=r(iie,` class
method.`),iie.forEach(t),UKo=i($l),Hx=n($l,"P",{});var Aro=s(Hx);HKo=r(Aro,"This class cannot be instantiated directly using "),Dve=n(Aro,"CODE",{});var cNt=s(Dve);JKo=r(cNt,"__init__()"),cNt.forEach(t),YKo=r(Aro," (throws an error)."),Aro.forEach(t),KKo=i($l),Tt=n($l,"DIV",{class:!0});var t8=s(Tt);T(Jx.$$.fragment,t8),ZKo=i(t8),Gve=n(t8,"P",{});var fNt=s(Gve);eZo=r(fNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fNt.forEach(t),oZo=i(t8),kd=n(t8,"P",{});var die=s(kd);rZo=r(die,`Note:
Loading a model from its configuration file does `),Ove=n(die,"STRONG",{});var gNt=s(Ove);tZo=r(gNt,"not"),gNt.forEach(t),aZo=r(die,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(die,"A",{href:!0});var hNt=s(UW);nZo=r(hNt,"from_pretrained()"),hNt.forEach(t),sZo=r(die," to load the model weights."),die.forEach(t),lZo=i(t8),T(aF.$$.fragment,t8),t8.forEach(t),iZo=i($l),to=n($l,"DIV",{class:!0});var Ca=s(to);T(Yx.$$.fragment,Ca),dZo=i(Ca),Vve=n(Ca,"P",{});var uNt=s(Vve);mZo=r(uNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uNt.forEach(t),cZo=i(Ca),en=n(Ca,"P",{});var a8=s(en);fZo=r(a8,"The model class to instantiate is selected based on the "),Xve=n(a8,"CODE",{});var pNt=s(Xve);gZo=r(pNt,"model_type"),pNt.forEach(t),hZo=r(a8,` property of the config object (either
passed as an argument or loaded from `),zve=n(a8,"CODE",{});var _Nt=s(zve);uZo=r(_Nt,"pretrained_model_name_or_path"),_Nt.forEach(t),pZo=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(a8,"CODE",{});var bNt=s(Qve);_Zo=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),bZo=r(a8,":"),a8.forEach(t),vZo=i(Ca),fe=n(Ca,"UL",{});var pe=s(fe);nF=n(pe,"LI",{});var hOe=s(nF);Wve=n(hOe,"STRONG",{});var vNt=s(Wve);FZo=r(vNt,"bart"),vNt.forEach(t),TZo=r(hOe," \u2014 "),HW=n(hOe,"A",{href:!0});var FNt=s(HW);MZo=r(FNt,"BartForConditionalGeneration"),FNt.forEach(t),EZo=r(hOe," (BART model)"),hOe.forEach(t),CZo=i(pe),sF=n(pe,"LI",{});var uOe=s(sF);Uve=n(uOe,"STRONG",{});var TNt=s(Uve);wZo=r(TNt,"bigbird_pegasus"),TNt.forEach(t),AZo=r(uOe," \u2014 "),JW=n(uOe,"A",{href:!0});var MNt=s(JW);LZo=r(MNt,"BigBirdPegasusForConditionalGeneration"),MNt.forEach(t),yZo=r(uOe," (BigBird-Pegasus model)"),uOe.forEach(t),xZo=i(pe),lF=n(pe,"LI",{});var pOe=s(lF);Hve=n(pOe,"STRONG",{});var ENt=s(Hve);$Zo=r(ENt,"blenderbot"),ENt.forEach(t),kZo=r(pOe," \u2014 "),YW=n(pOe,"A",{href:!0});var CNt=s(YW);SZo=r(CNt,"BlenderbotForConditionalGeneration"),CNt.forEach(t),RZo=r(pOe," (Blenderbot model)"),pOe.forEach(t),PZo=i(pe),iF=n(pe,"LI",{});var _Oe=s(iF);Jve=n(_Oe,"STRONG",{});var wNt=s(Jve);BZo=r(wNt,"blenderbot-small"),wNt.forEach(t),IZo=r(_Oe," \u2014 "),KW=n(_Oe,"A",{href:!0});var ANt=s(KW);NZo=r(ANt,"BlenderbotSmallForConditionalGeneration"),ANt.forEach(t),qZo=r(_Oe," (BlenderbotSmall model)"),_Oe.forEach(t),jZo=i(pe),dF=n(pe,"LI",{});var bOe=s(dF);Yve=n(bOe,"STRONG",{});var LNt=s(Yve);DZo=r(LNt,"encoder-decoder"),LNt.forEach(t),GZo=r(bOe," \u2014 "),ZW=n(bOe,"A",{href:!0});var yNt=s(ZW);OZo=r(yNt,"EncoderDecoderModel"),yNt.forEach(t),VZo=r(bOe," (Encoder decoder model)"),bOe.forEach(t),XZo=i(pe),mF=n(pe,"LI",{});var vOe=s(mF);Kve=n(vOe,"STRONG",{});var xNt=s(Kve);zZo=r(xNt,"fsmt"),xNt.forEach(t),QZo=r(vOe," \u2014 "),eU=n(vOe,"A",{href:!0});var $Nt=s(eU);WZo=r($Nt,"FSMTForConditionalGeneration"),$Nt.forEach(t),UZo=r(vOe," (FairSeq Machine-Translation model)"),vOe.forEach(t),HZo=i(pe),cF=n(pe,"LI",{});var FOe=s(cF);Zve=n(FOe,"STRONG",{});var kNt=s(Zve);JZo=r(kNt,"led"),kNt.forEach(t),YZo=r(FOe," \u2014 "),oU=n(FOe,"A",{href:!0});var SNt=s(oU);KZo=r(SNt,"LEDForConditionalGeneration"),SNt.forEach(t),ZZo=r(FOe," (LED model)"),FOe.forEach(t),eer=i(pe),fF=n(pe,"LI",{});var TOe=s(fF);eFe=n(TOe,"STRONG",{});var RNt=s(eFe);oer=r(RNt,"longt5"),RNt.forEach(t),rer=r(TOe," \u2014 "),rU=n(TOe,"A",{href:!0});var PNt=s(rU);ter=r(PNt,"LongT5ForConditionalGeneration"),PNt.forEach(t),aer=r(TOe," (LongT5 model)"),TOe.forEach(t),ner=i(pe),gF=n(pe,"LI",{});var MOe=s(gF);oFe=n(MOe,"STRONG",{});var BNt=s(oFe);ser=r(BNt,"m2m_100"),BNt.forEach(t),ler=r(MOe," \u2014 "),tU=n(MOe,"A",{href:!0});var INt=s(tU);ier=r(INt,"M2M100ForConditionalGeneration"),INt.forEach(t),der=r(MOe," (M2M100 model)"),MOe.forEach(t),mer=i(pe),hF=n(pe,"LI",{});var EOe=s(hF);rFe=n(EOe,"STRONG",{});var NNt=s(rFe);cer=r(NNt,"marian"),NNt.forEach(t),fer=r(EOe," \u2014 "),aU=n(EOe,"A",{href:!0});var qNt=s(aU);ger=r(qNt,"MarianMTModel"),qNt.forEach(t),her=r(EOe," (Marian model)"),EOe.forEach(t),uer=i(pe),uF=n(pe,"LI",{});var COe=s(uF);tFe=n(COe,"STRONG",{});var jNt=s(tFe);per=r(jNt,"mbart"),jNt.forEach(t),_er=r(COe," \u2014 "),nU=n(COe,"A",{href:!0});var DNt=s(nU);ber=r(DNt,"MBartForConditionalGeneration"),DNt.forEach(t),ver=r(COe," (mBART model)"),COe.forEach(t),Fer=i(pe),pF=n(pe,"LI",{});var wOe=s(pF);aFe=n(wOe,"STRONG",{});var GNt=s(aFe);Ter=r(GNt,"mt5"),GNt.forEach(t),Mer=r(wOe," \u2014 "),sU=n(wOe,"A",{href:!0});var ONt=s(sU);Eer=r(ONt,"MT5ForConditionalGeneration"),ONt.forEach(t),Cer=r(wOe," (MT5 model)"),wOe.forEach(t),wer=i(pe),_F=n(pe,"LI",{});var AOe=s(_F);nFe=n(AOe,"STRONG",{});var VNt=s(nFe);Aer=r(VNt,"mvp"),VNt.forEach(t),Ler=r(AOe," \u2014 "),lU=n(AOe,"A",{href:!0});var XNt=s(lU);yer=r(XNt,"MvpForConditionalGeneration"),XNt.forEach(t),xer=r(AOe," (MVP model)"),AOe.forEach(t),$er=i(pe),bF=n(pe,"LI",{});var LOe=s(bF);sFe=n(LOe,"STRONG",{});var zNt=s(sFe);ker=r(zNt,"nllb"),zNt.forEach(t),Ser=r(LOe," \u2014 "),iU=n(LOe,"A",{href:!0});var QNt=s(iU);Rer=r(QNt,"M2M100ForConditionalGeneration"),QNt.forEach(t),Per=r(LOe," (NLLB model)"),LOe.forEach(t),Ber=i(pe),vF=n(pe,"LI",{});var yOe=s(vF);lFe=n(yOe,"STRONG",{});var WNt=s(lFe);Ier=r(WNt,"pegasus"),WNt.forEach(t),Ner=r(yOe," \u2014 "),dU=n(yOe,"A",{href:!0});var UNt=s(dU);qer=r(UNt,"PegasusForConditionalGeneration"),UNt.forEach(t),jer=r(yOe," (Pegasus model)"),yOe.forEach(t),Der=i(pe),FF=n(pe,"LI",{});var xOe=s(FF);iFe=n(xOe,"STRONG",{});var HNt=s(iFe);Ger=r(HNt,"pegasus_x"),HNt.forEach(t),Oer=r(xOe," \u2014 "),mU=n(xOe,"A",{href:!0});var JNt=s(mU);Ver=r(JNt,"PegasusXForConditionalGeneration"),JNt.forEach(t),Xer=r(xOe," (PEGASUS-X model)"),xOe.forEach(t),zer=i(pe),TF=n(pe,"LI",{});var $Oe=s(TF);dFe=n($Oe,"STRONG",{});var YNt=s(dFe);Qer=r(YNt,"plbart"),YNt.forEach(t),Wer=r($Oe," \u2014 "),cU=n($Oe,"A",{href:!0});var KNt=s(cU);Uer=r(KNt,"PLBartForConditionalGeneration"),KNt.forEach(t),Her=r($Oe," (PLBart model)"),$Oe.forEach(t),Jer=i(pe),MF=n(pe,"LI",{});var kOe=s(MF);mFe=n(kOe,"STRONG",{});var ZNt=s(mFe);Yer=r(ZNt,"prophetnet"),ZNt.forEach(t),Ker=r(kOe," \u2014 "),fU=n(kOe,"A",{href:!0});var eqt=s(fU);Zer=r(eqt,"ProphetNetForConditionalGeneration"),eqt.forEach(t),eor=r(kOe," (ProphetNet model)"),kOe.forEach(t),oor=i(pe),EF=n(pe,"LI",{});var SOe=s(EF);cFe=n(SOe,"STRONG",{});var oqt=s(cFe);ror=r(oqt,"t5"),oqt.forEach(t),tor=r(SOe," \u2014 "),gU=n(SOe,"A",{href:!0});var rqt=s(gU);aor=r(rqt,"T5ForConditionalGeneration"),rqt.forEach(t),nor=r(SOe," (T5 model)"),SOe.forEach(t),sor=i(pe),CF=n(pe,"LI",{});var ROe=s(CF);fFe=n(ROe,"STRONG",{});var tqt=s(fFe);lor=r(tqt,"xlm-prophetnet"),tqt.forEach(t),ior=r(ROe," \u2014 "),hU=n(ROe,"A",{href:!0});var aqt=s(hU);dor=r(aqt,"XLMProphetNetForConditionalGeneration"),aqt.forEach(t),mor=r(ROe," (XLM-ProphetNet model)"),ROe.forEach(t),pe.forEach(t),cor=i(Ca),wF=n(Ca,"P",{});var POe=s(wF);gor=r(POe,"The model is set in evaluation mode by default using "),gFe=n(POe,"CODE",{});var nqt=s(gFe);hor=r(nqt,"model.eval()"),nqt.forEach(t),uor=r(POe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=n(POe,"CODE",{});var sqt=s(hFe);por=r(sqt,"model.train()"),sqt.forEach(t),POe.forEach(t),_or=i(Ca),T(AF.$$.fragment,Ca),Ca.forEach(t),$l.forEach(t),geo=i(c),Sd=n(c,"H2",{class:!0});var Lro=s(Sd);LF=n(Lro,"A",{id:!0,class:!0,href:!0});var lqt=s(LF);uFe=n(lqt,"SPAN",{});var iqt=s(uFe);T(Kx.$$.fragment,iqt),iqt.forEach(t),lqt.forEach(t),bor=i(Lro),pFe=n(Lro,"SPAN",{});var dqt=s(pFe);vor=r(dqt,"AutoModelForSequenceClassification"),dqt.forEach(t),Lro.forEach(t),heo=i(c),jo=n(c,"DIV",{class:!0});var kl=s(jo);T(Zx.$$.fragment,kl),For=i(kl),Rd=n(kl,"P",{});var mie=s(Rd);Tor=r(mie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uU=n(mie,"A",{href:!0});var mqt=s(uU);Mor=r(mqt,"from_pretrained()"),mqt.forEach(t),Eor=r(mie," class method or the "),pU=n(mie,"A",{href:!0});var cqt=s(pU);Cor=r(cqt,"from_config()"),cqt.forEach(t),wor=r(mie,` class
method.`),mie.forEach(t),Aor=i(kl),e$=n(kl,"P",{});var yro=s(e$);Lor=r(yro,"This class cannot be instantiated directly using "),_Fe=n(yro,"CODE",{});var fqt=s(_Fe);yor=r(fqt,"__init__()"),fqt.forEach(t),xor=r(yro," (throws an error)."),yro.forEach(t),$or=i(kl),Mt=n(kl,"DIV",{class:!0});var n8=s(Mt);T(o$.$$.fragment,n8),kor=i(n8),bFe=n(n8,"P",{});var gqt=s(bFe);Sor=r(gqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gqt.forEach(t),Ror=i(n8),Pd=n(n8,"P",{});var cie=s(Pd);Por=r(cie,`Note:
Loading a model from its configuration file does `),vFe=n(cie,"STRONG",{});var hqt=s(vFe);Bor=r(hqt,"not"),hqt.forEach(t),Ior=r(cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(cie,"A",{href:!0});var uqt=s(_U);Nor=r(uqt,"from_pretrained()"),uqt.forEach(t),qor=r(cie," to load the model weights."),cie.forEach(t),jor=i(n8),T(yF.$$.fragment,n8),n8.forEach(t),Dor=i(kl),ao=n(kl,"DIV",{class:!0});var wa=s(ao);T(r$.$$.fragment,wa),Gor=i(wa),FFe=n(wa,"P",{});var pqt=s(FFe);Oor=r(pqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pqt.forEach(t),Vor=i(wa),on=n(wa,"P",{});var s8=s(on);Xor=r(s8,"The model class to instantiate is selected based on the "),TFe=n(s8,"CODE",{});var _qt=s(TFe);zor=r(_qt,"model_type"),_qt.forEach(t),Qor=r(s8,` property of the config object (either
passed as an argument or loaded from `),MFe=n(s8,"CODE",{});var bqt=s(MFe);Wor=r(bqt,"pretrained_model_name_or_path"),bqt.forEach(t),Uor=r(s8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(s8,"CODE",{});var vqt=s(EFe);Hor=r(vqt,"pretrained_model_name_or_path"),vqt.forEach(t),Jor=r(s8,":"),s8.forEach(t),Yor=i(wa),B=n(wa,"UL",{});var j=s(B);xF=n(j,"LI",{});var BOe=s(xF);CFe=n(BOe,"STRONG",{});var Fqt=s(CFe);Kor=r(Fqt,"albert"),Fqt.forEach(t),Zor=r(BOe," \u2014 "),bU=n(BOe,"A",{href:!0});var Tqt=s(bU);err=r(Tqt,"AlbertForSequenceClassification"),Tqt.forEach(t),orr=r(BOe," (ALBERT model)"),BOe.forEach(t),rrr=i(j),$F=n(j,"LI",{});var IOe=s($F);wFe=n(IOe,"STRONG",{});var Mqt=s(wFe);trr=r(Mqt,"bart"),Mqt.forEach(t),arr=r(IOe," \u2014 "),vU=n(IOe,"A",{href:!0});var Eqt=s(vU);nrr=r(Eqt,"BartForSequenceClassification"),Eqt.forEach(t),srr=r(IOe," (BART model)"),IOe.forEach(t),lrr=i(j),kF=n(j,"LI",{});var NOe=s(kF);AFe=n(NOe,"STRONG",{});var Cqt=s(AFe);irr=r(Cqt,"bert"),Cqt.forEach(t),drr=r(NOe," \u2014 "),FU=n(NOe,"A",{href:!0});var wqt=s(FU);mrr=r(wqt,"BertForSequenceClassification"),wqt.forEach(t),crr=r(NOe," (BERT model)"),NOe.forEach(t),frr=i(j),SF=n(j,"LI",{});var qOe=s(SF);LFe=n(qOe,"STRONG",{});var Aqt=s(LFe);grr=r(Aqt,"big_bird"),Aqt.forEach(t),hrr=r(qOe," \u2014 "),TU=n(qOe,"A",{href:!0});var Lqt=s(TU);urr=r(Lqt,"BigBirdForSequenceClassification"),Lqt.forEach(t),prr=r(qOe," (BigBird model)"),qOe.forEach(t),_rr=i(j),RF=n(j,"LI",{});var jOe=s(RF);yFe=n(jOe,"STRONG",{});var yqt=s(yFe);brr=r(yqt,"bigbird_pegasus"),yqt.forEach(t),vrr=r(jOe," \u2014 "),MU=n(jOe,"A",{href:!0});var xqt=s(MU);Frr=r(xqt,"BigBirdPegasusForSequenceClassification"),xqt.forEach(t),Trr=r(jOe," (BigBird-Pegasus model)"),jOe.forEach(t),Mrr=i(j),PF=n(j,"LI",{});var DOe=s(PF);xFe=n(DOe,"STRONG",{});var $qt=s(xFe);Err=r($qt,"bloom"),$qt.forEach(t),Crr=r(DOe," \u2014 "),EU=n(DOe,"A",{href:!0});var kqt=s(EU);wrr=r(kqt,"BloomForSequenceClassification"),kqt.forEach(t),Arr=r(DOe," (BLOOM model)"),DOe.forEach(t),Lrr=i(j),BF=n(j,"LI",{});var GOe=s(BF);$Fe=n(GOe,"STRONG",{});var Sqt=s($Fe);yrr=r(Sqt,"camembert"),Sqt.forEach(t),xrr=r(GOe," \u2014 "),CU=n(GOe,"A",{href:!0});var Rqt=s(CU);$rr=r(Rqt,"CamembertForSequenceClassification"),Rqt.forEach(t),krr=r(GOe," (CamemBERT model)"),GOe.forEach(t),Srr=i(j),IF=n(j,"LI",{});var OOe=s(IF);kFe=n(OOe,"STRONG",{});var Pqt=s(kFe);Rrr=r(Pqt,"canine"),Pqt.forEach(t),Prr=r(OOe," \u2014 "),wU=n(OOe,"A",{href:!0});var Bqt=s(wU);Brr=r(Bqt,"CanineForSequenceClassification"),Bqt.forEach(t),Irr=r(OOe," (CANINE model)"),OOe.forEach(t),Nrr=i(j),NF=n(j,"LI",{});var VOe=s(NF);SFe=n(VOe,"STRONG",{});var Iqt=s(SFe);qrr=r(Iqt,"convbert"),Iqt.forEach(t),jrr=r(VOe," \u2014 "),AU=n(VOe,"A",{href:!0});var Nqt=s(AU);Drr=r(Nqt,"ConvBertForSequenceClassification"),Nqt.forEach(t),Grr=r(VOe," (ConvBERT model)"),VOe.forEach(t),Orr=i(j),qF=n(j,"LI",{});var XOe=s(qF);RFe=n(XOe,"STRONG",{});var qqt=s(RFe);Vrr=r(qqt,"ctrl"),qqt.forEach(t),Xrr=r(XOe," \u2014 "),LU=n(XOe,"A",{href:!0});var jqt=s(LU);zrr=r(jqt,"CTRLForSequenceClassification"),jqt.forEach(t),Qrr=r(XOe," (CTRL model)"),XOe.forEach(t),Wrr=i(j),jF=n(j,"LI",{});var zOe=s(jF);PFe=n(zOe,"STRONG",{});var Dqt=s(PFe);Urr=r(Dqt,"data2vec-text"),Dqt.forEach(t),Hrr=r(zOe," \u2014 "),yU=n(zOe,"A",{href:!0});var Gqt=s(yU);Jrr=r(Gqt,"Data2VecTextForSequenceClassification"),Gqt.forEach(t),Yrr=r(zOe," (Data2VecText model)"),zOe.forEach(t),Krr=i(j),DF=n(j,"LI",{});var QOe=s(DF);BFe=n(QOe,"STRONG",{});var Oqt=s(BFe);Zrr=r(Oqt,"deberta"),Oqt.forEach(t),etr=r(QOe," \u2014 "),xU=n(QOe,"A",{href:!0});var Vqt=s(xU);otr=r(Vqt,"DebertaForSequenceClassification"),Vqt.forEach(t),rtr=r(QOe," (DeBERTa model)"),QOe.forEach(t),ttr=i(j),GF=n(j,"LI",{});var WOe=s(GF);IFe=n(WOe,"STRONG",{});var Xqt=s(IFe);atr=r(Xqt,"deberta-v2"),Xqt.forEach(t),ntr=r(WOe," \u2014 "),$U=n(WOe,"A",{href:!0});var zqt=s($U);str=r(zqt,"DebertaV2ForSequenceClassification"),zqt.forEach(t),ltr=r(WOe," (DeBERTa-v2 model)"),WOe.forEach(t),itr=i(j),OF=n(j,"LI",{});var UOe=s(OF);NFe=n(UOe,"STRONG",{});var Qqt=s(NFe);dtr=r(Qqt,"distilbert"),Qqt.forEach(t),mtr=r(UOe," \u2014 "),kU=n(UOe,"A",{href:!0});var Wqt=s(kU);ctr=r(Wqt,"DistilBertForSequenceClassification"),Wqt.forEach(t),ftr=r(UOe," (DistilBERT model)"),UOe.forEach(t),gtr=i(j),VF=n(j,"LI",{});var HOe=s(VF);qFe=n(HOe,"STRONG",{});var Uqt=s(qFe);htr=r(Uqt,"electra"),Uqt.forEach(t),utr=r(HOe," \u2014 "),SU=n(HOe,"A",{href:!0});var Hqt=s(SU);ptr=r(Hqt,"ElectraForSequenceClassification"),Hqt.forEach(t),_tr=r(HOe," (ELECTRA model)"),HOe.forEach(t),btr=i(j),XF=n(j,"LI",{});var JOe=s(XF);jFe=n(JOe,"STRONG",{});var Jqt=s(jFe);vtr=r(Jqt,"ernie"),Jqt.forEach(t),Ftr=r(JOe," \u2014 "),RU=n(JOe,"A",{href:!0});var Yqt=s(RU);Ttr=r(Yqt,"ErnieForSequenceClassification"),Yqt.forEach(t),Mtr=r(JOe," (ERNIE model)"),JOe.forEach(t),Etr=i(j),zF=n(j,"LI",{});var YOe=s(zF);DFe=n(YOe,"STRONG",{});var Kqt=s(DFe);Ctr=r(Kqt,"esm"),Kqt.forEach(t),wtr=r(YOe," \u2014 "),PU=n(YOe,"A",{href:!0});var Zqt=s(PU);Atr=r(Zqt,"EsmForSequenceClassification"),Zqt.forEach(t),Ltr=r(YOe," (ESM model)"),YOe.forEach(t),ytr=i(j),QF=n(j,"LI",{});var KOe=s(QF);GFe=n(KOe,"STRONG",{});var ejt=s(GFe);xtr=r(ejt,"flaubert"),ejt.forEach(t),$tr=r(KOe," \u2014 "),BU=n(KOe,"A",{href:!0});var ojt=s(BU);ktr=r(ojt,"FlaubertForSequenceClassification"),ojt.forEach(t),Str=r(KOe," (FlauBERT model)"),KOe.forEach(t),Rtr=i(j),WF=n(j,"LI",{});var ZOe=s(WF);OFe=n(ZOe,"STRONG",{});var rjt=s(OFe);Ptr=r(rjt,"fnet"),rjt.forEach(t),Btr=r(ZOe," \u2014 "),IU=n(ZOe,"A",{href:!0});var tjt=s(IU);Itr=r(tjt,"FNetForSequenceClassification"),tjt.forEach(t),Ntr=r(ZOe," (FNet model)"),ZOe.forEach(t),qtr=i(j),UF=n(j,"LI",{});var eVe=s(UF);VFe=n(eVe,"STRONG",{});var ajt=s(VFe);jtr=r(ajt,"funnel"),ajt.forEach(t),Dtr=r(eVe," \u2014 "),NU=n(eVe,"A",{href:!0});var njt=s(NU);Gtr=r(njt,"FunnelForSequenceClassification"),njt.forEach(t),Otr=r(eVe," (Funnel Transformer model)"),eVe.forEach(t),Vtr=i(j),HF=n(j,"LI",{});var oVe=s(HF);XFe=n(oVe,"STRONG",{});var sjt=s(XFe);Xtr=r(sjt,"gpt2"),sjt.forEach(t),ztr=r(oVe," \u2014 "),qU=n(oVe,"A",{href:!0});var ljt=s(qU);Qtr=r(ljt,"GPT2ForSequenceClassification"),ljt.forEach(t),Wtr=r(oVe," (OpenAI GPT-2 model)"),oVe.forEach(t),Utr=i(j),JF=n(j,"LI",{});var rVe=s(JF);zFe=n(rVe,"STRONG",{});var ijt=s(zFe);Htr=r(ijt,"gpt_neo"),ijt.forEach(t),Jtr=r(rVe," \u2014 "),jU=n(rVe,"A",{href:!0});var djt=s(jU);Ytr=r(djt,"GPTNeoForSequenceClassification"),djt.forEach(t),Ktr=r(rVe," (GPT Neo model)"),rVe.forEach(t),Ztr=i(j),YF=n(j,"LI",{});var tVe=s(YF);QFe=n(tVe,"STRONG",{});var mjt=s(QFe);ear=r(mjt,"gptj"),mjt.forEach(t),oar=r(tVe," \u2014 "),DU=n(tVe,"A",{href:!0});var cjt=s(DU);rar=r(cjt,"GPTJForSequenceClassification"),cjt.forEach(t),tar=r(tVe," (GPT-J model)"),tVe.forEach(t),aar=i(j),KF=n(j,"LI",{});var aVe=s(KF);WFe=n(aVe,"STRONG",{});var fjt=s(WFe);nar=r(fjt,"ibert"),fjt.forEach(t),sar=r(aVe," \u2014 "),GU=n(aVe,"A",{href:!0});var gjt=s(GU);lar=r(gjt,"IBertForSequenceClassification"),gjt.forEach(t),iar=r(aVe," (I-BERT model)"),aVe.forEach(t),dar=i(j),ZF=n(j,"LI",{});var nVe=s(ZF);UFe=n(nVe,"STRONG",{});var hjt=s(UFe);mar=r(hjt,"layoutlm"),hjt.forEach(t),car=r(nVe," \u2014 "),OU=n(nVe,"A",{href:!0});var ujt=s(OU);far=r(ujt,"LayoutLMForSequenceClassification"),ujt.forEach(t),gar=r(nVe," (LayoutLM model)"),nVe.forEach(t),har=i(j),eT=n(j,"LI",{});var sVe=s(eT);HFe=n(sVe,"STRONG",{});var pjt=s(HFe);uar=r(pjt,"layoutlmv2"),pjt.forEach(t),par=r(sVe," \u2014 "),VU=n(sVe,"A",{href:!0});var _jt=s(VU);_ar=r(_jt,"LayoutLMv2ForSequenceClassification"),_jt.forEach(t),bar=r(sVe," (LayoutLMv2 model)"),sVe.forEach(t),Far=i(j),oT=n(j,"LI",{});var lVe=s(oT);JFe=n(lVe,"STRONG",{});var bjt=s(JFe);Tar=r(bjt,"layoutlmv3"),bjt.forEach(t),Mar=r(lVe," \u2014 "),XU=n(lVe,"A",{href:!0});var vjt=s(XU);Ear=r(vjt,"LayoutLMv3ForSequenceClassification"),vjt.forEach(t),Car=r(lVe," (LayoutLMv3 model)"),lVe.forEach(t),war=i(j),rT=n(j,"LI",{});var iVe=s(rT);YFe=n(iVe,"STRONG",{});var Fjt=s(YFe);Aar=r(Fjt,"led"),Fjt.forEach(t),Lar=r(iVe," \u2014 "),zU=n(iVe,"A",{href:!0});var Tjt=s(zU);yar=r(Tjt,"LEDForSequenceClassification"),Tjt.forEach(t),xar=r(iVe," (LED model)"),iVe.forEach(t),$ar=i(j),tT=n(j,"LI",{});var dVe=s(tT);KFe=n(dVe,"STRONG",{});var Mjt=s(KFe);kar=r(Mjt,"longformer"),Mjt.forEach(t),Sar=r(dVe," \u2014 "),QU=n(dVe,"A",{href:!0});var Ejt=s(QU);Rar=r(Ejt,"LongformerForSequenceClassification"),Ejt.forEach(t),Par=r(dVe," (Longformer model)"),dVe.forEach(t),Bar=i(j),aT=n(j,"LI",{});var mVe=s(aT);ZFe=n(mVe,"STRONG",{});var Cjt=s(ZFe);Iar=r(Cjt,"luke"),Cjt.forEach(t),Nar=r(mVe," \u2014 "),WU=n(mVe,"A",{href:!0});var wjt=s(WU);qar=r(wjt,"LukeForSequenceClassification"),wjt.forEach(t),jar=r(mVe," (LUKE model)"),mVe.forEach(t),Dar=i(j),nT=n(j,"LI",{});var cVe=s(nT);eTe=n(cVe,"STRONG",{});var Ajt=s(eTe);Gar=r(Ajt,"markuplm"),Ajt.forEach(t),Oar=r(cVe," \u2014 "),UU=n(cVe,"A",{href:!0});var Ljt=s(UU);Var=r(Ljt,"MarkupLMForSequenceClassification"),Ljt.forEach(t),Xar=r(cVe," (MarkupLM model)"),cVe.forEach(t),zar=i(j),sT=n(j,"LI",{});var fVe=s(sT);oTe=n(fVe,"STRONG",{});var yjt=s(oTe);Qar=r(yjt,"mbart"),yjt.forEach(t),War=r(fVe," \u2014 "),HU=n(fVe,"A",{href:!0});var xjt=s(HU);Uar=r(xjt,"MBartForSequenceClassification"),xjt.forEach(t),Har=r(fVe," (mBART model)"),fVe.forEach(t),Jar=i(j),lT=n(j,"LI",{});var gVe=s(lT);rTe=n(gVe,"STRONG",{});var $jt=s(rTe);Yar=r($jt,"megatron-bert"),$jt.forEach(t),Kar=r(gVe," \u2014 "),JU=n(gVe,"A",{href:!0});var kjt=s(JU);Zar=r(kjt,"MegatronBertForSequenceClassification"),kjt.forEach(t),enr=r(gVe," (Megatron-BERT model)"),gVe.forEach(t),onr=i(j),iT=n(j,"LI",{});var hVe=s(iT);tTe=n(hVe,"STRONG",{});var Sjt=s(tTe);rnr=r(Sjt,"mobilebert"),Sjt.forEach(t),tnr=r(hVe," \u2014 "),YU=n(hVe,"A",{href:!0});var Rjt=s(YU);anr=r(Rjt,"MobileBertForSequenceClassification"),Rjt.forEach(t),nnr=r(hVe," (MobileBERT model)"),hVe.forEach(t),snr=i(j),dT=n(j,"LI",{});var uVe=s(dT);aTe=n(uVe,"STRONG",{});var Pjt=s(aTe);lnr=r(Pjt,"mpnet"),Pjt.forEach(t),inr=r(uVe," \u2014 "),KU=n(uVe,"A",{href:!0});var Bjt=s(KU);dnr=r(Bjt,"MPNetForSequenceClassification"),Bjt.forEach(t),mnr=r(uVe," (MPNet model)"),uVe.forEach(t),cnr=i(j),mT=n(j,"LI",{});var pVe=s(mT);nTe=n(pVe,"STRONG",{});var Ijt=s(nTe);fnr=r(Ijt,"mvp"),Ijt.forEach(t),gnr=r(pVe," \u2014 "),ZU=n(pVe,"A",{href:!0});var Njt=s(ZU);hnr=r(Njt,"MvpForSequenceClassification"),Njt.forEach(t),unr=r(pVe," (MVP model)"),pVe.forEach(t),pnr=i(j),cT=n(j,"LI",{});var _Ve=s(cT);sTe=n(_Ve,"STRONG",{});var qjt=s(sTe);_nr=r(qjt,"nezha"),qjt.forEach(t),bnr=r(_Ve," \u2014 "),eH=n(_Ve,"A",{href:!0});var jjt=s(eH);vnr=r(jjt,"NezhaForSequenceClassification"),jjt.forEach(t),Fnr=r(_Ve," (Nezha model)"),_Ve.forEach(t),Tnr=i(j),fT=n(j,"LI",{});var bVe=s(fT);lTe=n(bVe,"STRONG",{});var Djt=s(lTe);Mnr=r(Djt,"nystromformer"),Djt.forEach(t),Enr=r(bVe," \u2014 "),oH=n(bVe,"A",{href:!0});var Gjt=s(oH);Cnr=r(Gjt,"NystromformerForSequenceClassification"),Gjt.forEach(t),wnr=r(bVe," (Nystr\xF6mformer model)"),bVe.forEach(t),Anr=i(j),gT=n(j,"LI",{});var vVe=s(gT);iTe=n(vVe,"STRONG",{});var Ojt=s(iTe);Lnr=r(Ojt,"openai-gpt"),Ojt.forEach(t),ynr=r(vVe," \u2014 "),rH=n(vVe,"A",{href:!0});var Vjt=s(rH);xnr=r(Vjt,"OpenAIGPTForSequenceClassification"),Vjt.forEach(t),$nr=r(vVe," (OpenAI GPT model)"),vVe.forEach(t),knr=i(j),hT=n(j,"LI",{});var FVe=s(hT);dTe=n(FVe,"STRONG",{});var Xjt=s(dTe);Snr=r(Xjt,"opt"),Xjt.forEach(t),Rnr=r(FVe," \u2014 "),tH=n(FVe,"A",{href:!0});var zjt=s(tH);Pnr=r(zjt,"OPTForSequenceClassification"),zjt.forEach(t),Bnr=r(FVe," (OPT model)"),FVe.forEach(t),Inr=i(j),uT=n(j,"LI",{});var TVe=s(uT);mTe=n(TVe,"STRONG",{});var Qjt=s(mTe);Nnr=r(Qjt,"perceiver"),Qjt.forEach(t),qnr=r(TVe," \u2014 "),aH=n(TVe,"A",{href:!0});var Wjt=s(aH);jnr=r(Wjt,"PerceiverForSequenceClassification"),Wjt.forEach(t),Dnr=r(TVe," (Perceiver model)"),TVe.forEach(t),Gnr=i(j),pT=n(j,"LI",{});var MVe=s(pT);cTe=n(MVe,"STRONG",{});var Ujt=s(cTe);Onr=r(Ujt,"plbart"),Ujt.forEach(t),Vnr=r(MVe," \u2014 "),nH=n(MVe,"A",{href:!0});var Hjt=s(nH);Xnr=r(Hjt,"PLBartForSequenceClassification"),Hjt.forEach(t),znr=r(MVe," (PLBart model)"),MVe.forEach(t),Qnr=i(j),_T=n(j,"LI",{});var EVe=s(_T);fTe=n(EVe,"STRONG",{});var Jjt=s(fTe);Wnr=r(Jjt,"qdqbert"),Jjt.forEach(t),Unr=r(EVe," \u2014 "),sH=n(EVe,"A",{href:!0});var Yjt=s(sH);Hnr=r(Yjt,"QDQBertForSequenceClassification"),Yjt.forEach(t),Jnr=r(EVe," (QDQBert model)"),EVe.forEach(t),Ynr=i(j),bT=n(j,"LI",{});var CVe=s(bT);gTe=n(CVe,"STRONG",{});var Kjt=s(gTe);Knr=r(Kjt,"reformer"),Kjt.forEach(t),Znr=r(CVe," \u2014 "),lH=n(CVe,"A",{href:!0});var Zjt=s(lH);esr=r(Zjt,"ReformerForSequenceClassification"),Zjt.forEach(t),osr=r(CVe," (Reformer model)"),CVe.forEach(t),rsr=i(j),vT=n(j,"LI",{});var wVe=s(vT);hTe=n(wVe,"STRONG",{});var eDt=s(hTe);tsr=r(eDt,"rembert"),eDt.forEach(t),asr=r(wVe," \u2014 "),iH=n(wVe,"A",{href:!0});var oDt=s(iH);nsr=r(oDt,"RemBertForSequenceClassification"),oDt.forEach(t),ssr=r(wVe," (RemBERT model)"),wVe.forEach(t),lsr=i(j),FT=n(j,"LI",{});var AVe=s(FT);uTe=n(AVe,"STRONG",{});var rDt=s(uTe);isr=r(rDt,"roberta"),rDt.forEach(t),dsr=r(AVe," \u2014 "),dH=n(AVe,"A",{href:!0});var tDt=s(dH);msr=r(tDt,"RobertaForSequenceClassification"),tDt.forEach(t),csr=r(AVe," (RoBERTa model)"),AVe.forEach(t),fsr=i(j),TT=n(j,"LI",{});var LVe=s(TT);pTe=n(LVe,"STRONG",{});var aDt=s(pTe);gsr=r(aDt,"roformer"),aDt.forEach(t),hsr=r(LVe," \u2014 "),mH=n(LVe,"A",{href:!0});var nDt=s(mH);usr=r(nDt,"RoFormerForSequenceClassification"),nDt.forEach(t),psr=r(LVe," (RoFormer model)"),LVe.forEach(t),_sr=i(j),MT=n(j,"LI",{});var yVe=s(MT);_Te=n(yVe,"STRONG",{});var sDt=s(_Te);bsr=r(sDt,"squeezebert"),sDt.forEach(t),vsr=r(yVe," \u2014 "),cH=n(yVe,"A",{href:!0});var lDt=s(cH);Fsr=r(lDt,"SqueezeBertForSequenceClassification"),lDt.forEach(t),Tsr=r(yVe," (SqueezeBERT model)"),yVe.forEach(t),Msr=i(j),ET=n(j,"LI",{});var xVe=s(ET);bTe=n(xVe,"STRONG",{});var iDt=s(bTe);Esr=r(iDt,"tapas"),iDt.forEach(t),Csr=r(xVe," \u2014 "),fH=n(xVe,"A",{href:!0});var dDt=s(fH);wsr=r(dDt,"TapasForSequenceClassification"),dDt.forEach(t),Asr=r(xVe," (TAPAS model)"),xVe.forEach(t),Lsr=i(j),CT=n(j,"LI",{});var $Ve=s(CT);vTe=n($Ve,"STRONG",{});var mDt=s(vTe);ysr=r(mDt,"transfo-xl"),mDt.forEach(t),xsr=r($Ve," \u2014 "),gH=n($Ve,"A",{href:!0});var cDt=s(gH);$sr=r(cDt,"TransfoXLForSequenceClassification"),cDt.forEach(t),ksr=r($Ve," (Transformer-XL model)"),$Ve.forEach(t),Ssr=i(j),wT=n(j,"LI",{});var kVe=s(wT);FTe=n(kVe,"STRONG",{});var fDt=s(FTe);Rsr=r(fDt,"xlm"),fDt.forEach(t),Psr=r(kVe," \u2014 "),hH=n(kVe,"A",{href:!0});var gDt=s(hH);Bsr=r(gDt,"XLMForSequenceClassification"),gDt.forEach(t),Isr=r(kVe," (XLM model)"),kVe.forEach(t),Nsr=i(j),AT=n(j,"LI",{});var SVe=s(AT);TTe=n(SVe,"STRONG",{});var hDt=s(TTe);qsr=r(hDt,"xlm-roberta"),hDt.forEach(t),jsr=r(SVe," \u2014 "),uH=n(SVe,"A",{href:!0});var uDt=s(uH);Dsr=r(uDt,"XLMRobertaForSequenceClassification"),uDt.forEach(t),Gsr=r(SVe," (XLM-RoBERTa model)"),SVe.forEach(t),Osr=i(j),LT=n(j,"LI",{});var RVe=s(LT);MTe=n(RVe,"STRONG",{});var pDt=s(MTe);Vsr=r(pDt,"xlm-roberta-xl"),pDt.forEach(t),Xsr=r(RVe," \u2014 "),pH=n(RVe,"A",{href:!0});var _Dt=s(pH);zsr=r(_Dt,"XLMRobertaXLForSequenceClassification"),_Dt.forEach(t),Qsr=r(RVe," (XLM-RoBERTa-XL model)"),RVe.forEach(t),Wsr=i(j),yT=n(j,"LI",{});var PVe=s(yT);ETe=n(PVe,"STRONG",{});var bDt=s(ETe);Usr=r(bDt,"xlnet"),bDt.forEach(t),Hsr=r(PVe," \u2014 "),_H=n(PVe,"A",{href:!0});var vDt=s(_H);Jsr=r(vDt,"XLNetForSequenceClassification"),vDt.forEach(t),Ysr=r(PVe," (XLNet model)"),PVe.forEach(t),Ksr=i(j),xT=n(j,"LI",{});var BVe=s(xT);CTe=n(BVe,"STRONG",{});var FDt=s(CTe);Zsr=r(FDt,"yoso"),FDt.forEach(t),elr=r(BVe," \u2014 "),bH=n(BVe,"A",{href:!0});var TDt=s(bH);olr=r(TDt,"YosoForSequenceClassification"),TDt.forEach(t),rlr=r(BVe," (YOSO model)"),BVe.forEach(t),j.forEach(t),tlr=i(wa),$T=n(wa,"P",{});var IVe=s($T);alr=r(IVe,"The model is set in evaluation mode by default using "),wTe=n(IVe,"CODE",{});var MDt=s(wTe);nlr=r(MDt,"model.eval()"),MDt.forEach(t),slr=r(IVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ATe=n(IVe,"CODE",{});var EDt=s(ATe);llr=r(EDt,"model.train()"),EDt.forEach(t),IVe.forEach(t),ilr=i(wa),T(kT.$$.fragment,wa),wa.forEach(t),kl.forEach(t),ueo=i(c),Bd=n(c,"H2",{class:!0});var xro=s(Bd);ST=n(xro,"A",{id:!0,class:!0,href:!0});var CDt=s(ST);LTe=n(CDt,"SPAN",{});var wDt=s(LTe);T(t$.$$.fragment,wDt),wDt.forEach(t),CDt.forEach(t),dlr=i(xro),yTe=n(xro,"SPAN",{});var ADt=s(yTe);mlr=r(ADt,"AutoModelForMultipleChoice"),ADt.forEach(t),xro.forEach(t),peo=i(c),Do=n(c,"DIV",{class:!0});var Sl=s(Do);T(a$.$$.fragment,Sl),clr=i(Sl),Id=n(Sl,"P",{});var fie=s(Id);flr=r(fie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vH=n(fie,"A",{href:!0});var LDt=s(vH);glr=r(LDt,"from_pretrained()"),LDt.forEach(t),hlr=r(fie," class method or the "),FH=n(fie,"A",{href:!0});var yDt=s(FH);ulr=r(yDt,"from_config()"),yDt.forEach(t),plr=r(fie,` class
method.`),fie.forEach(t),_lr=i(Sl),n$=n(Sl,"P",{});var $ro=s(n$);blr=r($ro,"This class cannot be instantiated directly using "),xTe=n($ro,"CODE",{});var xDt=s(xTe);vlr=r(xDt,"__init__()"),xDt.forEach(t),Flr=r($ro," (throws an error)."),$ro.forEach(t),Tlr=i(Sl),Et=n(Sl,"DIV",{class:!0});var l8=s(Et);T(s$.$$.fragment,l8),Mlr=i(l8),$Te=n(l8,"P",{});var $Dt=s($Te);Elr=r($Dt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Dt.forEach(t),Clr=i(l8),Nd=n(l8,"P",{});var gie=s(Nd);wlr=r(gie,`Note:
Loading a model from its configuration file does `),kTe=n(gie,"STRONG",{});var kDt=s(kTe);Alr=r(kDt,"not"),kDt.forEach(t),Llr=r(gie,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(gie,"A",{href:!0});var SDt=s(TH);ylr=r(SDt,"from_pretrained()"),SDt.forEach(t),xlr=r(gie," to load the model weights."),gie.forEach(t),$lr=i(l8),T(RT.$$.fragment,l8),l8.forEach(t),klr=i(Sl),no=n(Sl,"DIV",{class:!0});var Aa=s(no);T(l$.$$.fragment,Aa),Slr=i(Aa),STe=n(Aa,"P",{});var RDt=s(STe);Rlr=r(RDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),RDt.forEach(t),Plr=i(Aa),rn=n(Aa,"P",{});var i8=s(rn);Blr=r(i8,"The model class to instantiate is selected based on the "),RTe=n(i8,"CODE",{});var PDt=s(RTe);Ilr=r(PDt,"model_type"),PDt.forEach(t),Nlr=r(i8,` property of the config object (either
passed as an argument or loaded from `),PTe=n(i8,"CODE",{});var BDt=s(PTe);qlr=r(BDt,"pretrained_model_name_or_path"),BDt.forEach(t),jlr=r(i8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(i8,"CODE",{});var IDt=s(BTe);Dlr=r(IDt,"pretrained_model_name_or_path"),IDt.forEach(t),Glr=r(i8,":"),i8.forEach(t),Olr=i(Aa),Z=n(Aa,"UL",{});var ee=s(Z);PT=n(ee,"LI",{});var NVe=s(PT);ITe=n(NVe,"STRONG",{});var NDt=s(ITe);Vlr=r(NDt,"albert"),NDt.forEach(t),Xlr=r(NVe," \u2014 "),MH=n(NVe,"A",{href:!0});var qDt=s(MH);zlr=r(qDt,"AlbertForMultipleChoice"),qDt.forEach(t),Qlr=r(NVe," (ALBERT model)"),NVe.forEach(t),Wlr=i(ee),BT=n(ee,"LI",{});var qVe=s(BT);NTe=n(qVe,"STRONG",{});var jDt=s(NTe);Ulr=r(jDt,"bert"),jDt.forEach(t),Hlr=r(qVe," \u2014 "),EH=n(qVe,"A",{href:!0});var DDt=s(EH);Jlr=r(DDt,"BertForMultipleChoice"),DDt.forEach(t),Ylr=r(qVe," (BERT model)"),qVe.forEach(t),Klr=i(ee),IT=n(ee,"LI",{});var jVe=s(IT);qTe=n(jVe,"STRONG",{});var GDt=s(qTe);Zlr=r(GDt,"big_bird"),GDt.forEach(t),eir=r(jVe," \u2014 "),CH=n(jVe,"A",{href:!0});var ODt=s(CH);oir=r(ODt,"BigBirdForMultipleChoice"),ODt.forEach(t),rir=r(jVe," (BigBird model)"),jVe.forEach(t),tir=i(ee),NT=n(ee,"LI",{});var DVe=s(NT);jTe=n(DVe,"STRONG",{});var VDt=s(jTe);air=r(VDt,"camembert"),VDt.forEach(t),nir=r(DVe," \u2014 "),wH=n(DVe,"A",{href:!0});var XDt=s(wH);sir=r(XDt,"CamembertForMultipleChoice"),XDt.forEach(t),lir=r(DVe," (CamemBERT model)"),DVe.forEach(t),iir=i(ee),qT=n(ee,"LI",{});var GVe=s(qT);DTe=n(GVe,"STRONG",{});var zDt=s(DTe);dir=r(zDt,"canine"),zDt.forEach(t),mir=r(GVe," \u2014 "),AH=n(GVe,"A",{href:!0});var QDt=s(AH);cir=r(QDt,"CanineForMultipleChoice"),QDt.forEach(t),fir=r(GVe," (CANINE model)"),GVe.forEach(t),gir=i(ee),jT=n(ee,"LI",{});var OVe=s(jT);GTe=n(OVe,"STRONG",{});var WDt=s(GTe);hir=r(WDt,"convbert"),WDt.forEach(t),uir=r(OVe," \u2014 "),LH=n(OVe,"A",{href:!0});var UDt=s(LH);pir=r(UDt,"ConvBertForMultipleChoice"),UDt.forEach(t),_ir=r(OVe," (ConvBERT model)"),OVe.forEach(t),bir=i(ee),DT=n(ee,"LI",{});var VVe=s(DT);OTe=n(VVe,"STRONG",{});var HDt=s(OTe);vir=r(HDt,"data2vec-text"),HDt.forEach(t),Fir=r(VVe," \u2014 "),yH=n(VVe,"A",{href:!0});var JDt=s(yH);Tir=r(JDt,"Data2VecTextForMultipleChoice"),JDt.forEach(t),Mir=r(VVe," (Data2VecText model)"),VVe.forEach(t),Eir=i(ee),GT=n(ee,"LI",{});var XVe=s(GT);VTe=n(XVe,"STRONG",{});var YDt=s(VTe);Cir=r(YDt,"deberta-v2"),YDt.forEach(t),wir=r(XVe," \u2014 "),xH=n(XVe,"A",{href:!0});var KDt=s(xH);Air=r(KDt,"DebertaV2ForMultipleChoice"),KDt.forEach(t),Lir=r(XVe," (DeBERTa-v2 model)"),XVe.forEach(t),yir=i(ee),OT=n(ee,"LI",{});var zVe=s(OT);XTe=n(zVe,"STRONG",{});var ZDt=s(XTe);xir=r(ZDt,"distilbert"),ZDt.forEach(t),$ir=r(zVe," \u2014 "),$H=n(zVe,"A",{href:!0});var eGt=s($H);kir=r(eGt,"DistilBertForMultipleChoice"),eGt.forEach(t),Sir=r(zVe," (DistilBERT model)"),zVe.forEach(t),Rir=i(ee),VT=n(ee,"LI",{});var QVe=s(VT);zTe=n(QVe,"STRONG",{});var oGt=s(zTe);Pir=r(oGt,"electra"),oGt.forEach(t),Bir=r(QVe," \u2014 "),kH=n(QVe,"A",{href:!0});var rGt=s(kH);Iir=r(rGt,"ElectraForMultipleChoice"),rGt.forEach(t),Nir=r(QVe," (ELECTRA model)"),QVe.forEach(t),qir=i(ee),XT=n(ee,"LI",{});var WVe=s(XT);QTe=n(WVe,"STRONG",{});var tGt=s(QTe);jir=r(tGt,"ernie"),tGt.forEach(t),Dir=r(WVe," \u2014 "),SH=n(WVe,"A",{href:!0});var aGt=s(SH);Gir=r(aGt,"ErnieForMultipleChoice"),aGt.forEach(t),Oir=r(WVe," (ERNIE model)"),WVe.forEach(t),Vir=i(ee),zT=n(ee,"LI",{});var UVe=s(zT);WTe=n(UVe,"STRONG",{});var nGt=s(WTe);Xir=r(nGt,"flaubert"),nGt.forEach(t),zir=r(UVe," \u2014 "),RH=n(UVe,"A",{href:!0});var sGt=s(RH);Qir=r(sGt,"FlaubertForMultipleChoice"),sGt.forEach(t),Wir=r(UVe," (FlauBERT model)"),UVe.forEach(t),Uir=i(ee),QT=n(ee,"LI",{});var HVe=s(QT);UTe=n(HVe,"STRONG",{});var lGt=s(UTe);Hir=r(lGt,"fnet"),lGt.forEach(t),Jir=r(HVe," \u2014 "),PH=n(HVe,"A",{href:!0});var iGt=s(PH);Yir=r(iGt,"FNetForMultipleChoice"),iGt.forEach(t),Kir=r(HVe," (FNet model)"),HVe.forEach(t),Zir=i(ee),WT=n(ee,"LI",{});var JVe=s(WT);HTe=n(JVe,"STRONG",{});var dGt=s(HTe);edr=r(dGt,"funnel"),dGt.forEach(t),odr=r(JVe," \u2014 "),BH=n(JVe,"A",{href:!0});var mGt=s(BH);rdr=r(mGt,"FunnelForMultipleChoice"),mGt.forEach(t),tdr=r(JVe," (Funnel Transformer model)"),JVe.forEach(t),adr=i(ee),UT=n(ee,"LI",{});var YVe=s(UT);JTe=n(YVe,"STRONG",{});var cGt=s(JTe);ndr=r(cGt,"ibert"),cGt.forEach(t),sdr=r(YVe," \u2014 "),IH=n(YVe,"A",{href:!0});var fGt=s(IH);ldr=r(fGt,"IBertForMultipleChoice"),fGt.forEach(t),idr=r(YVe," (I-BERT model)"),YVe.forEach(t),ddr=i(ee),HT=n(ee,"LI",{});var KVe=s(HT);YTe=n(KVe,"STRONG",{});var gGt=s(YTe);mdr=r(gGt,"longformer"),gGt.forEach(t),cdr=r(KVe," \u2014 "),NH=n(KVe,"A",{href:!0});var hGt=s(NH);fdr=r(hGt,"LongformerForMultipleChoice"),hGt.forEach(t),gdr=r(KVe," (Longformer model)"),KVe.forEach(t),hdr=i(ee),JT=n(ee,"LI",{});var ZVe=s(JT);KTe=n(ZVe,"STRONG",{});var uGt=s(KTe);udr=r(uGt,"luke"),uGt.forEach(t),pdr=r(ZVe," \u2014 "),qH=n(ZVe,"A",{href:!0});var pGt=s(qH);_dr=r(pGt,"LukeForMultipleChoice"),pGt.forEach(t),bdr=r(ZVe," (LUKE model)"),ZVe.forEach(t),vdr=i(ee),YT=n(ee,"LI",{});var eXe=s(YT);ZTe=n(eXe,"STRONG",{});var _Gt=s(ZTe);Fdr=r(_Gt,"megatron-bert"),_Gt.forEach(t),Tdr=r(eXe," \u2014 "),jH=n(eXe,"A",{href:!0});var bGt=s(jH);Mdr=r(bGt,"MegatronBertForMultipleChoice"),bGt.forEach(t),Edr=r(eXe," (Megatron-BERT model)"),eXe.forEach(t),Cdr=i(ee),KT=n(ee,"LI",{});var oXe=s(KT);eMe=n(oXe,"STRONG",{});var vGt=s(eMe);wdr=r(vGt,"mobilebert"),vGt.forEach(t),Adr=r(oXe," \u2014 "),DH=n(oXe,"A",{href:!0});var FGt=s(DH);Ldr=r(FGt,"MobileBertForMultipleChoice"),FGt.forEach(t),ydr=r(oXe," (MobileBERT model)"),oXe.forEach(t),xdr=i(ee),ZT=n(ee,"LI",{});var rXe=s(ZT);oMe=n(rXe,"STRONG",{});var TGt=s(oMe);$dr=r(TGt,"mpnet"),TGt.forEach(t),kdr=r(rXe," \u2014 "),GH=n(rXe,"A",{href:!0});var MGt=s(GH);Sdr=r(MGt,"MPNetForMultipleChoice"),MGt.forEach(t),Rdr=r(rXe," (MPNet model)"),rXe.forEach(t),Pdr=i(ee),eM=n(ee,"LI",{});var tXe=s(eM);rMe=n(tXe,"STRONG",{});var EGt=s(rMe);Bdr=r(EGt,"nezha"),EGt.forEach(t),Idr=r(tXe," \u2014 "),OH=n(tXe,"A",{href:!0});var CGt=s(OH);Ndr=r(CGt,"NezhaForMultipleChoice"),CGt.forEach(t),qdr=r(tXe," (Nezha model)"),tXe.forEach(t),jdr=i(ee),oM=n(ee,"LI",{});var aXe=s(oM);tMe=n(aXe,"STRONG",{});var wGt=s(tMe);Ddr=r(wGt,"nystromformer"),wGt.forEach(t),Gdr=r(aXe," \u2014 "),VH=n(aXe,"A",{href:!0});var AGt=s(VH);Odr=r(AGt,"NystromformerForMultipleChoice"),AGt.forEach(t),Vdr=r(aXe," (Nystr\xF6mformer model)"),aXe.forEach(t),Xdr=i(ee),rM=n(ee,"LI",{});var nXe=s(rM);aMe=n(nXe,"STRONG",{});var LGt=s(aMe);zdr=r(LGt,"qdqbert"),LGt.forEach(t),Qdr=r(nXe," \u2014 "),XH=n(nXe,"A",{href:!0});var yGt=s(XH);Wdr=r(yGt,"QDQBertForMultipleChoice"),yGt.forEach(t),Udr=r(nXe," (QDQBert model)"),nXe.forEach(t),Hdr=i(ee),tM=n(ee,"LI",{});var sXe=s(tM);nMe=n(sXe,"STRONG",{});var xGt=s(nMe);Jdr=r(xGt,"rembert"),xGt.forEach(t),Ydr=r(sXe," \u2014 "),zH=n(sXe,"A",{href:!0});var $Gt=s(zH);Kdr=r($Gt,"RemBertForMultipleChoice"),$Gt.forEach(t),Zdr=r(sXe," (RemBERT model)"),sXe.forEach(t),emr=i(ee),aM=n(ee,"LI",{});var lXe=s(aM);sMe=n(lXe,"STRONG",{});var kGt=s(sMe);omr=r(kGt,"roberta"),kGt.forEach(t),rmr=r(lXe," \u2014 "),QH=n(lXe,"A",{href:!0});var SGt=s(QH);tmr=r(SGt,"RobertaForMultipleChoice"),SGt.forEach(t),amr=r(lXe," (RoBERTa model)"),lXe.forEach(t),nmr=i(ee),nM=n(ee,"LI",{});var iXe=s(nM);lMe=n(iXe,"STRONG",{});var RGt=s(lMe);smr=r(RGt,"roformer"),RGt.forEach(t),lmr=r(iXe," \u2014 "),WH=n(iXe,"A",{href:!0});var PGt=s(WH);imr=r(PGt,"RoFormerForMultipleChoice"),PGt.forEach(t),dmr=r(iXe," (RoFormer model)"),iXe.forEach(t),mmr=i(ee),sM=n(ee,"LI",{});var dXe=s(sM);iMe=n(dXe,"STRONG",{});var BGt=s(iMe);cmr=r(BGt,"squeezebert"),BGt.forEach(t),fmr=r(dXe," \u2014 "),UH=n(dXe,"A",{href:!0});var IGt=s(UH);gmr=r(IGt,"SqueezeBertForMultipleChoice"),IGt.forEach(t),hmr=r(dXe," (SqueezeBERT model)"),dXe.forEach(t),umr=i(ee),lM=n(ee,"LI",{});var mXe=s(lM);dMe=n(mXe,"STRONG",{});var NGt=s(dMe);pmr=r(NGt,"xlm"),NGt.forEach(t),_mr=r(mXe," \u2014 "),HH=n(mXe,"A",{href:!0});var qGt=s(HH);bmr=r(qGt,"XLMForMultipleChoice"),qGt.forEach(t),vmr=r(mXe," (XLM model)"),mXe.forEach(t),Fmr=i(ee),iM=n(ee,"LI",{});var cXe=s(iM);mMe=n(cXe,"STRONG",{});var jGt=s(mMe);Tmr=r(jGt,"xlm-roberta"),jGt.forEach(t),Mmr=r(cXe," \u2014 "),JH=n(cXe,"A",{href:!0});var DGt=s(JH);Emr=r(DGt,"XLMRobertaForMultipleChoice"),DGt.forEach(t),Cmr=r(cXe," (XLM-RoBERTa model)"),cXe.forEach(t),wmr=i(ee),dM=n(ee,"LI",{});var fXe=s(dM);cMe=n(fXe,"STRONG",{});var GGt=s(cMe);Amr=r(GGt,"xlm-roberta-xl"),GGt.forEach(t),Lmr=r(fXe," \u2014 "),YH=n(fXe,"A",{href:!0});var OGt=s(YH);ymr=r(OGt,"XLMRobertaXLForMultipleChoice"),OGt.forEach(t),xmr=r(fXe," (XLM-RoBERTa-XL model)"),fXe.forEach(t),$mr=i(ee),mM=n(ee,"LI",{});var gXe=s(mM);fMe=n(gXe,"STRONG",{});var VGt=s(fMe);kmr=r(VGt,"xlnet"),VGt.forEach(t),Smr=r(gXe," \u2014 "),KH=n(gXe,"A",{href:!0});var XGt=s(KH);Rmr=r(XGt,"XLNetForMultipleChoice"),XGt.forEach(t),Pmr=r(gXe," (XLNet model)"),gXe.forEach(t),Bmr=i(ee),cM=n(ee,"LI",{});var hXe=s(cM);gMe=n(hXe,"STRONG",{});var zGt=s(gMe);Imr=r(zGt,"yoso"),zGt.forEach(t),Nmr=r(hXe," \u2014 "),ZH=n(hXe,"A",{href:!0});var QGt=s(ZH);qmr=r(QGt,"YosoForMultipleChoice"),QGt.forEach(t),jmr=r(hXe," (YOSO model)"),hXe.forEach(t),ee.forEach(t),Dmr=i(Aa),fM=n(Aa,"P",{});var uXe=s(fM);Gmr=r(uXe,"The model is set in evaluation mode by default using "),hMe=n(uXe,"CODE",{});var WGt=s(hMe);Omr=r(WGt,"model.eval()"),WGt.forEach(t),Vmr=r(uXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uMe=n(uXe,"CODE",{});var UGt=s(uMe);Xmr=r(UGt,"model.train()"),UGt.forEach(t),uXe.forEach(t),zmr=i(Aa),T(gM.$$.fragment,Aa),Aa.forEach(t),Sl.forEach(t),_eo=i(c),qd=n(c,"H2",{class:!0});var kro=s(qd);hM=n(kro,"A",{id:!0,class:!0,href:!0});var HGt=s(hM);pMe=n(HGt,"SPAN",{});var JGt=s(pMe);T(i$.$$.fragment,JGt),JGt.forEach(t),HGt.forEach(t),Qmr=i(kro),_Me=n(kro,"SPAN",{});var YGt=s(_Me);Wmr=r(YGt,"AutoModelForNextSentencePrediction"),YGt.forEach(t),kro.forEach(t),beo=i(c),Go=n(c,"DIV",{class:!0});var Rl=s(Go);T(d$.$$.fragment,Rl),Umr=i(Rl),jd=n(Rl,"P",{});var hie=s(jd);Hmr=r(hie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=n(hie,"A",{href:!0});var KGt=s(eJ);Jmr=r(KGt,"from_pretrained()"),KGt.forEach(t),Ymr=r(hie," class method or the "),oJ=n(hie,"A",{href:!0});var ZGt=s(oJ);Kmr=r(ZGt,"from_config()"),ZGt.forEach(t),Zmr=r(hie,` class
method.`),hie.forEach(t),ecr=i(Rl),m$=n(Rl,"P",{});var Sro=s(m$);ocr=r(Sro,"This class cannot be instantiated directly using "),bMe=n(Sro,"CODE",{});var eOt=s(bMe);rcr=r(eOt,"__init__()"),eOt.forEach(t),tcr=r(Sro," (throws an error)."),Sro.forEach(t),acr=i(Rl),Ct=n(Rl,"DIV",{class:!0});var d8=s(Ct);T(c$.$$.fragment,d8),ncr=i(d8),vMe=n(d8,"P",{});var oOt=s(vMe);scr=r(oOt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oOt.forEach(t),lcr=i(d8),Dd=n(d8,"P",{});var uie=s(Dd);icr=r(uie,`Note:
Loading a model from its configuration file does `),FMe=n(uie,"STRONG",{});var rOt=s(FMe);dcr=r(rOt,"not"),rOt.forEach(t),mcr=r(uie,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(uie,"A",{href:!0});var tOt=s(rJ);ccr=r(tOt,"from_pretrained()"),tOt.forEach(t),fcr=r(uie," to load the model weights."),uie.forEach(t),gcr=i(d8),T(uM.$$.fragment,d8),d8.forEach(t),hcr=i(Rl),so=n(Rl,"DIV",{class:!0});var La=s(so);T(f$.$$.fragment,La),ucr=i(La),TMe=n(La,"P",{});var aOt=s(TMe);pcr=r(aOt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aOt.forEach(t),_cr=i(La),tn=n(La,"P",{});var m8=s(tn);bcr=r(m8,"The model class to instantiate is selected based on the "),MMe=n(m8,"CODE",{});var nOt=s(MMe);vcr=r(nOt,"model_type"),nOt.forEach(t),Fcr=r(m8,` property of the config object (either
passed as an argument or loaded from `),EMe=n(m8,"CODE",{});var sOt=s(EMe);Tcr=r(sOt,"pretrained_model_name_or_path"),sOt.forEach(t),Mcr=r(m8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(m8,"CODE",{});var lOt=s(CMe);Ecr=r(lOt,"pretrained_model_name_or_path"),lOt.forEach(t),Ccr=r(m8,":"),m8.forEach(t),wcr=i(La),Ue=n(La,"UL",{});var mt=s(Ue);pM=n(mt,"LI",{});var pXe=s(pM);wMe=n(pXe,"STRONG",{});var iOt=s(wMe);Acr=r(iOt,"bert"),iOt.forEach(t),Lcr=r(pXe," \u2014 "),tJ=n(pXe,"A",{href:!0});var dOt=s(tJ);ycr=r(dOt,"BertForNextSentencePrediction"),dOt.forEach(t),xcr=r(pXe," (BERT model)"),pXe.forEach(t),$cr=i(mt),_M=n(mt,"LI",{});var _Xe=s(_M);AMe=n(_Xe,"STRONG",{});var mOt=s(AMe);kcr=r(mOt,"ernie"),mOt.forEach(t),Scr=r(_Xe," \u2014 "),aJ=n(_Xe,"A",{href:!0});var cOt=s(aJ);Rcr=r(cOt,"ErnieForNextSentencePrediction"),cOt.forEach(t),Pcr=r(_Xe," (ERNIE model)"),_Xe.forEach(t),Bcr=i(mt),bM=n(mt,"LI",{});var bXe=s(bM);LMe=n(bXe,"STRONG",{});var fOt=s(LMe);Icr=r(fOt,"fnet"),fOt.forEach(t),Ncr=r(bXe," \u2014 "),nJ=n(bXe,"A",{href:!0});var gOt=s(nJ);qcr=r(gOt,"FNetForNextSentencePrediction"),gOt.forEach(t),jcr=r(bXe," (FNet model)"),bXe.forEach(t),Dcr=i(mt),vM=n(mt,"LI",{});var vXe=s(vM);yMe=n(vXe,"STRONG",{});var hOt=s(yMe);Gcr=r(hOt,"megatron-bert"),hOt.forEach(t),Ocr=r(vXe," \u2014 "),sJ=n(vXe,"A",{href:!0});var uOt=s(sJ);Vcr=r(uOt,"MegatronBertForNextSentencePrediction"),uOt.forEach(t),Xcr=r(vXe," (Megatron-BERT model)"),vXe.forEach(t),zcr=i(mt),FM=n(mt,"LI",{});var FXe=s(FM);xMe=n(FXe,"STRONG",{});var pOt=s(xMe);Qcr=r(pOt,"mobilebert"),pOt.forEach(t),Wcr=r(FXe," \u2014 "),lJ=n(FXe,"A",{href:!0});var _Ot=s(lJ);Ucr=r(_Ot,"MobileBertForNextSentencePrediction"),_Ot.forEach(t),Hcr=r(FXe," (MobileBERT model)"),FXe.forEach(t),Jcr=i(mt),TM=n(mt,"LI",{});var TXe=s(TM);$Me=n(TXe,"STRONG",{});var bOt=s($Me);Ycr=r(bOt,"nezha"),bOt.forEach(t),Kcr=r(TXe," \u2014 "),iJ=n(TXe,"A",{href:!0});var vOt=s(iJ);Zcr=r(vOt,"NezhaForNextSentencePrediction"),vOt.forEach(t),efr=r(TXe," (Nezha model)"),TXe.forEach(t),ofr=i(mt),MM=n(mt,"LI",{});var MXe=s(MM);kMe=n(MXe,"STRONG",{});var FOt=s(kMe);rfr=r(FOt,"qdqbert"),FOt.forEach(t),tfr=r(MXe," \u2014 "),dJ=n(MXe,"A",{href:!0});var TOt=s(dJ);afr=r(TOt,"QDQBertForNextSentencePrediction"),TOt.forEach(t),nfr=r(MXe," (QDQBert model)"),MXe.forEach(t),mt.forEach(t),sfr=i(La),EM=n(La,"P",{});var EXe=s(EM);lfr=r(EXe,"The model is set in evaluation mode by default using "),SMe=n(EXe,"CODE",{});var MOt=s(SMe);ifr=r(MOt,"model.eval()"),MOt.forEach(t),dfr=r(EXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RMe=n(EXe,"CODE",{});var EOt=s(RMe);mfr=r(EOt,"model.train()"),EOt.forEach(t),EXe.forEach(t),cfr=i(La),T(CM.$$.fragment,La),La.forEach(t),Rl.forEach(t),veo=i(c),Gd=n(c,"H2",{class:!0});var Rro=s(Gd);wM=n(Rro,"A",{id:!0,class:!0,href:!0});var COt=s(wM);PMe=n(COt,"SPAN",{});var wOt=s(PMe);T(g$.$$.fragment,wOt),wOt.forEach(t),COt.forEach(t),ffr=i(Rro),BMe=n(Rro,"SPAN",{});var AOt=s(BMe);gfr=r(AOt,"AutoModelForTokenClassification"),AOt.forEach(t),Rro.forEach(t),Feo=i(c),Oo=n(c,"DIV",{class:!0});var Pl=s(Oo);T(h$.$$.fragment,Pl),hfr=i(Pl),Od=n(Pl,"P",{});var pie=s(Od);ufr=r(pie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mJ=n(pie,"A",{href:!0});var LOt=s(mJ);pfr=r(LOt,"from_pretrained()"),LOt.forEach(t),_fr=r(pie," class method or the "),cJ=n(pie,"A",{href:!0});var yOt=s(cJ);bfr=r(yOt,"from_config()"),yOt.forEach(t),vfr=r(pie,` class
method.`),pie.forEach(t),Ffr=i(Pl),u$=n(Pl,"P",{});var Pro=s(u$);Tfr=r(Pro,"This class cannot be instantiated directly using "),IMe=n(Pro,"CODE",{});var xOt=s(IMe);Mfr=r(xOt,"__init__()"),xOt.forEach(t),Efr=r(Pro," (throws an error)."),Pro.forEach(t),Cfr=i(Pl),wt=n(Pl,"DIV",{class:!0});var c8=s(wt);T(p$.$$.fragment,c8),wfr=i(c8),NMe=n(c8,"P",{});var $Ot=s(NMe);Afr=r($Ot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$Ot.forEach(t),Lfr=i(c8),Vd=n(c8,"P",{});var _ie=s(Vd);yfr=r(_ie,`Note:
Loading a model from its configuration file does `),qMe=n(_ie,"STRONG",{});var kOt=s(qMe);xfr=r(kOt,"not"),kOt.forEach(t),$fr=r(_ie,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(_ie,"A",{href:!0});var SOt=s(fJ);kfr=r(SOt,"from_pretrained()"),SOt.forEach(t),Sfr=r(_ie," to load the model weights."),_ie.forEach(t),Rfr=i(c8),T(AM.$$.fragment,c8),c8.forEach(t),Pfr=i(Pl),lo=n(Pl,"DIV",{class:!0});var ya=s(lo);T(_$.$$.fragment,ya),Bfr=i(ya),jMe=n(ya,"P",{});var ROt=s(jMe);Ifr=r(ROt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ROt.forEach(t),Nfr=i(ya),an=n(ya,"P",{});var f8=s(an);qfr=r(f8,"The model class to instantiate is selected based on the "),DMe=n(f8,"CODE",{});var POt=s(DMe);jfr=r(POt,"model_type"),POt.forEach(t),Dfr=r(f8,` property of the config object (either
passed as an argument or loaded from `),GMe=n(f8,"CODE",{});var BOt=s(GMe);Gfr=r(BOt,"pretrained_model_name_or_path"),BOt.forEach(t),Ofr=r(f8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=n(f8,"CODE",{});var IOt=s(OMe);Vfr=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),Xfr=r(f8,":"),f8.forEach(t),zfr=i(ya),H=n(ya,"UL",{});var Y=s(H);LM=n(Y,"LI",{});var CXe=s(LM);VMe=n(CXe,"STRONG",{});var NOt=s(VMe);Qfr=r(NOt,"albert"),NOt.forEach(t),Wfr=r(CXe," \u2014 "),gJ=n(CXe,"A",{href:!0});var qOt=s(gJ);Ufr=r(qOt,"AlbertForTokenClassification"),qOt.forEach(t),Hfr=r(CXe," (ALBERT model)"),CXe.forEach(t),Jfr=i(Y),yM=n(Y,"LI",{});var wXe=s(yM);XMe=n(wXe,"STRONG",{});var jOt=s(XMe);Yfr=r(jOt,"bert"),jOt.forEach(t),Kfr=r(wXe," \u2014 "),hJ=n(wXe,"A",{href:!0});var DOt=s(hJ);Zfr=r(DOt,"BertForTokenClassification"),DOt.forEach(t),egr=r(wXe," (BERT model)"),wXe.forEach(t),ogr=i(Y),xM=n(Y,"LI",{});var AXe=s(xM);zMe=n(AXe,"STRONG",{});var GOt=s(zMe);rgr=r(GOt,"big_bird"),GOt.forEach(t),tgr=r(AXe," \u2014 "),uJ=n(AXe,"A",{href:!0});var OOt=s(uJ);agr=r(OOt,"BigBirdForTokenClassification"),OOt.forEach(t),ngr=r(AXe," (BigBird model)"),AXe.forEach(t),sgr=i(Y),$M=n(Y,"LI",{});var LXe=s($M);QMe=n(LXe,"STRONG",{});var VOt=s(QMe);lgr=r(VOt,"bloom"),VOt.forEach(t),igr=r(LXe," \u2014 "),pJ=n(LXe,"A",{href:!0});var XOt=s(pJ);dgr=r(XOt,"BloomForTokenClassification"),XOt.forEach(t),mgr=r(LXe," (BLOOM model)"),LXe.forEach(t),cgr=i(Y),kM=n(Y,"LI",{});var yXe=s(kM);WMe=n(yXe,"STRONG",{});var zOt=s(WMe);fgr=r(zOt,"camembert"),zOt.forEach(t),ggr=r(yXe," \u2014 "),_J=n(yXe,"A",{href:!0});var QOt=s(_J);hgr=r(QOt,"CamembertForTokenClassification"),QOt.forEach(t),ugr=r(yXe," (CamemBERT model)"),yXe.forEach(t),pgr=i(Y),SM=n(Y,"LI",{});var xXe=s(SM);UMe=n(xXe,"STRONG",{});var WOt=s(UMe);_gr=r(WOt,"canine"),WOt.forEach(t),bgr=r(xXe," \u2014 "),bJ=n(xXe,"A",{href:!0});var UOt=s(bJ);vgr=r(UOt,"CanineForTokenClassification"),UOt.forEach(t),Fgr=r(xXe," (CANINE model)"),xXe.forEach(t),Tgr=i(Y),RM=n(Y,"LI",{});var $Xe=s(RM);HMe=n($Xe,"STRONG",{});var HOt=s(HMe);Mgr=r(HOt,"convbert"),HOt.forEach(t),Egr=r($Xe," \u2014 "),vJ=n($Xe,"A",{href:!0});var JOt=s(vJ);Cgr=r(JOt,"ConvBertForTokenClassification"),JOt.forEach(t),wgr=r($Xe," (ConvBERT model)"),$Xe.forEach(t),Agr=i(Y),PM=n(Y,"LI",{});var kXe=s(PM);JMe=n(kXe,"STRONG",{});var YOt=s(JMe);Lgr=r(YOt,"data2vec-text"),YOt.forEach(t),ygr=r(kXe," \u2014 "),FJ=n(kXe,"A",{href:!0});var KOt=s(FJ);xgr=r(KOt,"Data2VecTextForTokenClassification"),KOt.forEach(t),$gr=r(kXe," (Data2VecText model)"),kXe.forEach(t),kgr=i(Y),BM=n(Y,"LI",{});var SXe=s(BM);YMe=n(SXe,"STRONG",{});var ZOt=s(YMe);Sgr=r(ZOt,"deberta"),ZOt.forEach(t),Rgr=r(SXe," \u2014 "),TJ=n(SXe,"A",{href:!0});var eVt=s(TJ);Pgr=r(eVt,"DebertaForTokenClassification"),eVt.forEach(t),Bgr=r(SXe," (DeBERTa model)"),SXe.forEach(t),Igr=i(Y),IM=n(Y,"LI",{});var RXe=s(IM);KMe=n(RXe,"STRONG",{});var oVt=s(KMe);Ngr=r(oVt,"deberta-v2"),oVt.forEach(t),qgr=r(RXe," \u2014 "),MJ=n(RXe,"A",{href:!0});var rVt=s(MJ);jgr=r(rVt,"DebertaV2ForTokenClassification"),rVt.forEach(t),Dgr=r(RXe," (DeBERTa-v2 model)"),RXe.forEach(t),Ggr=i(Y),NM=n(Y,"LI",{});var PXe=s(NM);ZMe=n(PXe,"STRONG",{});var tVt=s(ZMe);Ogr=r(tVt,"distilbert"),tVt.forEach(t),Vgr=r(PXe," \u2014 "),EJ=n(PXe,"A",{href:!0});var aVt=s(EJ);Xgr=r(aVt,"DistilBertForTokenClassification"),aVt.forEach(t),zgr=r(PXe," (DistilBERT model)"),PXe.forEach(t),Qgr=i(Y),qM=n(Y,"LI",{});var BXe=s(qM);eEe=n(BXe,"STRONG",{});var nVt=s(eEe);Wgr=r(nVt,"electra"),nVt.forEach(t),Ugr=r(BXe," \u2014 "),CJ=n(BXe,"A",{href:!0});var sVt=s(CJ);Hgr=r(sVt,"ElectraForTokenClassification"),sVt.forEach(t),Jgr=r(BXe," (ELECTRA model)"),BXe.forEach(t),Ygr=i(Y),jM=n(Y,"LI",{});var IXe=s(jM);oEe=n(IXe,"STRONG",{});var lVt=s(oEe);Kgr=r(lVt,"ernie"),lVt.forEach(t),Zgr=r(IXe," \u2014 "),wJ=n(IXe,"A",{href:!0});var iVt=s(wJ);ehr=r(iVt,"ErnieForTokenClassification"),iVt.forEach(t),ohr=r(IXe," (ERNIE model)"),IXe.forEach(t),rhr=i(Y),DM=n(Y,"LI",{});var NXe=s(DM);rEe=n(NXe,"STRONG",{});var dVt=s(rEe);thr=r(dVt,"esm"),dVt.forEach(t),ahr=r(NXe," \u2014 "),AJ=n(NXe,"A",{href:!0});var mVt=s(AJ);nhr=r(mVt,"EsmForTokenClassification"),mVt.forEach(t),shr=r(NXe," (ESM model)"),NXe.forEach(t),lhr=i(Y),GM=n(Y,"LI",{});var qXe=s(GM);tEe=n(qXe,"STRONG",{});var cVt=s(tEe);ihr=r(cVt,"flaubert"),cVt.forEach(t),dhr=r(qXe," \u2014 "),LJ=n(qXe,"A",{href:!0});var fVt=s(LJ);mhr=r(fVt,"FlaubertForTokenClassification"),fVt.forEach(t),chr=r(qXe," (FlauBERT model)"),qXe.forEach(t),fhr=i(Y),OM=n(Y,"LI",{});var jXe=s(OM);aEe=n(jXe,"STRONG",{});var gVt=s(aEe);ghr=r(gVt,"fnet"),gVt.forEach(t),hhr=r(jXe," \u2014 "),yJ=n(jXe,"A",{href:!0});var hVt=s(yJ);uhr=r(hVt,"FNetForTokenClassification"),hVt.forEach(t),phr=r(jXe," (FNet model)"),jXe.forEach(t),_hr=i(Y),VM=n(Y,"LI",{});var DXe=s(VM);nEe=n(DXe,"STRONG",{});var uVt=s(nEe);bhr=r(uVt,"funnel"),uVt.forEach(t),vhr=r(DXe," \u2014 "),xJ=n(DXe,"A",{href:!0});var pVt=s(xJ);Fhr=r(pVt,"FunnelForTokenClassification"),pVt.forEach(t),Thr=r(DXe," (Funnel Transformer model)"),DXe.forEach(t),Mhr=i(Y),XM=n(Y,"LI",{});var GXe=s(XM);sEe=n(GXe,"STRONG",{});var _Vt=s(sEe);Ehr=r(_Vt,"gpt2"),_Vt.forEach(t),Chr=r(GXe," \u2014 "),$J=n(GXe,"A",{href:!0});var bVt=s($J);whr=r(bVt,"GPT2ForTokenClassification"),bVt.forEach(t),Ahr=r(GXe," (OpenAI GPT-2 model)"),GXe.forEach(t),Lhr=i(Y),zM=n(Y,"LI",{});var OXe=s(zM);lEe=n(OXe,"STRONG",{});var vVt=s(lEe);yhr=r(vVt,"ibert"),vVt.forEach(t),xhr=r(OXe," \u2014 "),kJ=n(OXe,"A",{href:!0});var FVt=s(kJ);$hr=r(FVt,"IBertForTokenClassification"),FVt.forEach(t),khr=r(OXe," (I-BERT model)"),OXe.forEach(t),Shr=i(Y),QM=n(Y,"LI",{});var VXe=s(QM);iEe=n(VXe,"STRONG",{});var TVt=s(iEe);Rhr=r(TVt,"layoutlm"),TVt.forEach(t),Phr=r(VXe," \u2014 "),SJ=n(VXe,"A",{href:!0});var MVt=s(SJ);Bhr=r(MVt,"LayoutLMForTokenClassification"),MVt.forEach(t),Ihr=r(VXe," (LayoutLM model)"),VXe.forEach(t),Nhr=i(Y),WM=n(Y,"LI",{});var XXe=s(WM);dEe=n(XXe,"STRONG",{});var EVt=s(dEe);qhr=r(EVt,"layoutlmv2"),EVt.forEach(t),jhr=r(XXe," \u2014 "),RJ=n(XXe,"A",{href:!0});var CVt=s(RJ);Dhr=r(CVt,"LayoutLMv2ForTokenClassification"),CVt.forEach(t),Ghr=r(XXe," (LayoutLMv2 model)"),XXe.forEach(t),Ohr=i(Y),UM=n(Y,"LI",{});var zXe=s(UM);mEe=n(zXe,"STRONG",{});var wVt=s(mEe);Vhr=r(wVt,"layoutlmv3"),wVt.forEach(t),Xhr=r(zXe," \u2014 "),PJ=n(zXe,"A",{href:!0});var AVt=s(PJ);zhr=r(AVt,"LayoutLMv3ForTokenClassification"),AVt.forEach(t),Qhr=r(zXe," (LayoutLMv3 model)"),zXe.forEach(t),Whr=i(Y),HM=n(Y,"LI",{});var QXe=s(HM);cEe=n(QXe,"STRONG",{});var LVt=s(cEe);Uhr=r(LVt,"longformer"),LVt.forEach(t),Hhr=r(QXe," \u2014 "),BJ=n(QXe,"A",{href:!0});var yVt=s(BJ);Jhr=r(yVt,"LongformerForTokenClassification"),yVt.forEach(t),Yhr=r(QXe," (Longformer model)"),QXe.forEach(t),Khr=i(Y),JM=n(Y,"LI",{});var WXe=s(JM);fEe=n(WXe,"STRONG",{});var xVt=s(fEe);Zhr=r(xVt,"luke"),xVt.forEach(t),eur=r(WXe," \u2014 "),IJ=n(WXe,"A",{href:!0});var $Vt=s(IJ);our=r($Vt,"LukeForTokenClassification"),$Vt.forEach(t),rur=r(WXe," (LUKE model)"),WXe.forEach(t),tur=i(Y),YM=n(Y,"LI",{});var UXe=s(YM);gEe=n(UXe,"STRONG",{});var kVt=s(gEe);aur=r(kVt,"markuplm"),kVt.forEach(t),nur=r(UXe," \u2014 "),NJ=n(UXe,"A",{href:!0});var SVt=s(NJ);sur=r(SVt,"MarkupLMForTokenClassification"),SVt.forEach(t),lur=r(UXe," (MarkupLM model)"),UXe.forEach(t),iur=i(Y),KM=n(Y,"LI",{});var HXe=s(KM);hEe=n(HXe,"STRONG",{});var RVt=s(hEe);dur=r(RVt,"megatron-bert"),RVt.forEach(t),mur=r(HXe," \u2014 "),qJ=n(HXe,"A",{href:!0});var PVt=s(qJ);cur=r(PVt,"MegatronBertForTokenClassification"),PVt.forEach(t),fur=r(HXe," (Megatron-BERT model)"),HXe.forEach(t),gur=i(Y),ZM=n(Y,"LI",{});var JXe=s(ZM);uEe=n(JXe,"STRONG",{});var BVt=s(uEe);hur=r(BVt,"mobilebert"),BVt.forEach(t),uur=r(JXe," \u2014 "),jJ=n(JXe,"A",{href:!0});var IVt=s(jJ);pur=r(IVt,"MobileBertForTokenClassification"),IVt.forEach(t),_ur=r(JXe," (MobileBERT model)"),JXe.forEach(t),bur=i(Y),eE=n(Y,"LI",{});var YXe=s(eE);pEe=n(YXe,"STRONG",{});var NVt=s(pEe);vur=r(NVt,"mpnet"),NVt.forEach(t),Fur=r(YXe," \u2014 "),DJ=n(YXe,"A",{href:!0});var qVt=s(DJ);Tur=r(qVt,"MPNetForTokenClassification"),qVt.forEach(t),Mur=r(YXe," (MPNet model)"),YXe.forEach(t),Eur=i(Y),oE=n(Y,"LI",{});var KXe=s(oE);_Ee=n(KXe,"STRONG",{});var jVt=s(_Ee);Cur=r(jVt,"nezha"),jVt.forEach(t),wur=r(KXe," \u2014 "),GJ=n(KXe,"A",{href:!0});var DVt=s(GJ);Aur=r(DVt,"NezhaForTokenClassification"),DVt.forEach(t),Lur=r(KXe," (Nezha model)"),KXe.forEach(t),yur=i(Y),rE=n(Y,"LI",{});var ZXe=s(rE);bEe=n(ZXe,"STRONG",{});var GVt=s(bEe);xur=r(GVt,"nystromformer"),GVt.forEach(t),$ur=r(ZXe," \u2014 "),OJ=n(ZXe,"A",{href:!0});var OVt=s(OJ);kur=r(OVt,"NystromformerForTokenClassification"),OVt.forEach(t),Sur=r(ZXe," (Nystr\xF6mformer model)"),ZXe.forEach(t),Rur=i(Y),tE=n(Y,"LI",{});var eze=s(tE);vEe=n(eze,"STRONG",{});var VVt=s(vEe);Pur=r(VVt,"qdqbert"),VVt.forEach(t),Bur=r(eze," \u2014 "),VJ=n(eze,"A",{href:!0});var XVt=s(VJ);Iur=r(XVt,"QDQBertForTokenClassification"),XVt.forEach(t),Nur=r(eze," (QDQBert model)"),eze.forEach(t),qur=i(Y),aE=n(Y,"LI",{});var oze=s(aE);FEe=n(oze,"STRONG",{});var zVt=s(FEe);jur=r(zVt,"rembert"),zVt.forEach(t),Dur=r(oze," \u2014 "),XJ=n(oze,"A",{href:!0});var QVt=s(XJ);Gur=r(QVt,"RemBertForTokenClassification"),QVt.forEach(t),Our=r(oze," (RemBERT model)"),oze.forEach(t),Vur=i(Y),nE=n(Y,"LI",{});var rze=s(nE);TEe=n(rze,"STRONG",{});var WVt=s(TEe);Xur=r(WVt,"roberta"),WVt.forEach(t),zur=r(rze," \u2014 "),zJ=n(rze,"A",{href:!0});var UVt=s(zJ);Qur=r(UVt,"RobertaForTokenClassification"),UVt.forEach(t),Wur=r(rze," (RoBERTa model)"),rze.forEach(t),Uur=i(Y),sE=n(Y,"LI",{});var tze=s(sE);MEe=n(tze,"STRONG",{});var HVt=s(MEe);Hur=r(HVt,"roformer"),HVt.forEach(t),Jur=r(tze," \u2014 "),QJ=n(tze,"A",{href:!0});var JVt=s(QJ);Yur=r(JVt,"RoFormerForTokenClassification"),JVt.forEach(t),Kur=r(tze," (RoFormer model)"),tze.forEach(t),Zur=i(Y),lE=n(Y,"LI",{});var aze=s(lE);EEe=n(aze,"STRONG",{});var YVt=s(EEe);epr=r(YVt,"squeezebert"),YVt.forEach(t),opr=r(aze," \u2014 "),WJ=n(aze,"A",{href:!0});var KVt=s(WJ);rpr=r(KVt,"SqueezeBertForTokenClassification"),KVt.forEach(t),tpr=r(aze," (SqueezeBERT model)"),aze.forEach(t),apr=i(Y),iE=n(Y,"LI",{});var nze=s(iE);CEe=n(nze,"STRONG",{});var ZVt=s(CEe);npr=r(ZVt,"xlm"),ZVt.forEach(t),spr=r(nze," \u2014 "),UJ=n(nze,"A",{href:!0});var eXt=s(UJ);lpr=r(eXt,"XLMForTokenClassification"),eXt.forEach(t),ipr=r(nze," (XLM model)"),nze.forEach(t),dpr=i(Y),dE=n(Y,"LI",{});var sze=s(dE);wEe=n(sze,"STRONG",{});var oXt=s(wEe);mpr=r(oXt,"xlm-roberta"),oXt.forEach(t),cpr=r(sze," \u2014 "),HJ=n(sze,"A",{href:!0});var rXt=s(HJ);fpr=r(rXt,"XLMRobertaForTokenClassification"),rXt.forEach(t),gpr=r(sze," (XLM-RoBERTa model)"),sze.forEach(t),hpr=i(Y),mE=n(Y,"LI",{});var lze=s(mE);AEe=n(lze,"STRONG",{});var tXt=s(AEe);upr=r(tXt,"xlm-roberta-xl"),tXt.forEach(t),ppr=r(lze," \u2014 "),JJ=n(lze,"A",{href:!0});var aXt=s(JJ);_pr=r(aXt,"XLMRobertaXLForTokenClassification"),aXt.forEach(t),bpr=r(lze," (XLM-RoBERTa-XL model)"),lze.forEach(t),vpr=i(Y),cE=n(Y,"LI",{});var ize=s(cE);LEe=n(ize,"STRONG",{});var nXt=s(LEe);Fpr=r(nXt,"xlnet"),nXt.forEach(t),Tpr=r(ize," \u2014 "),YJ=n(ize,"A",{href:!0});var sXt=s(YJ);Mpr=r(sXt,"XLNetForTokenClassification"),sXt.forEach(t),Epr=r(ize," (XLNet model)"),ize.forEach(t),Cpr=i(Y),fE=n(Y,"LI",{});var dze=s(fE);yEe=n(dze,"STRONG",{});var lXt=s(yEe);wpr=r(lXt,"yoso"),lXt.forEach(t),Apr=r(dze," \u2014 "),KJ=n(dze,"A",{href:!0});var iXt=s(KJ);Lpr=r(iXt,"YosoForTokenClassification"),iXt.forEach(t),ypr=r(dze," (YOSO model)"),dze.forEach(t),Y.forEach(t),xpr=i(ya),gE=n(ya,"P",{});var mze=s(gE);$pr=r(mze,"The model is set in evaluation mode by default using "),xEe=n(mze,"CODE",{});var dXt=s(xEe);kpr=r(dXt,"model.eval()"),dXt.forEach(t),Spr=r(mze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Ee=n(mze,"CODE",{});var mXt=s($Ee);Rpr=r(mXt,"model.train()"),mXt.forEach(t),mze.forEach(t),Ppr=i(ya),T(hE.$$.fragment,ya),ya.forEach(t),Pl.forEach(t),Teo=i(c),Xd=n(c,"H2",{class:!0});var Bro=s(Xd);uE=n(Bro,"A",{id:!0,class:!0,href:!0});var cXt=s(uE);kEe=n(cXt,"SPAN",{});var fXt=s(kEe);T(b$.$$.fragment,fXt),fXt.forEach(t),cXt.forEach(t),Bpr=i(Bro),SEe=n(Bro,"SPAN",{});var gXt=s(SEe);Ipr=r(gXt,"AutoModelForQuestionAnswering"),gXt.forEach(t),Bro.forEach(t),Meo=i(c),Vo=n(c,"DIV",{class:!0});var Bl=s(Vo);T(v$.$$.fragment,Bl),Npr=i(Bl),zd=n(Bl,"P",{});var bie=s(zd);qpr=r(bie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZJ=n(bie,"A",{href:!0});var hXt=s(ZJ);jpr=r(hXt,"from_pretrained()"),hXt.forEach(t),Dpr=r(bie," class method or the "),eY=n(bie,"A",{href:!0});var uXt=s(eY);Gpr=r(uXt,"from_config()"),uXt.forEach(t),Opr=r(bie,` class
method.`),bie.forEach(t),Vpr=i(Bl),F$=n(Bl,"P",{});var Iro=s(F$);Xpr=r(Iro,"This class cannot be instantiated directly using "),REe=n(Iro,"CODE",{});var pXt=s(REe);zpr=r(pXt,"__init__()"),pXt.forEach(t),Qpr=r(Iro," (throws an error)."),Iro.forEach(t),Wpr=i(Bl),At=n(Bl,"DIV",{class:!0});var g8=s(At);T(T$.$$.fragment,g8),Upr=i(g8),PEe=n(g8,"P",{});var _Xt=s(PEe);Hpr=r(_Xt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Xt.forEach(t),Jpr=i(g8),Qd=n(g8,"P",{});var vie=s(Qd);Ypr=r(vie,`Note:
Loading a model from its configuration file does `),BEe=n(vie,"STRONG",{});var bXt=s(BEe);Kpr=r(bXt,"not"),bXt.forEach(t),Zpr=r(vie,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(vie,"A",{href:!0});var vXt=s(oY);e_r=r(vXt,"from_pretrained()"),vXt.forEach(t),o_r=r(vie," to load the model weights."),vie.forEach(t),r_r=i(g8),T(pE.$$.fragment,g8),g8.forEach(t),t_r=i(Bl),io=n(Bl,"DIV",{class:!0});var xa=s(io);T(M$.$$.fragment,xa),a_r=i(xa),IEe=n(xa,"P",{});var FXt=s(IEe);n_r=r(FXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FXt.forEach(t),s_r=i(xa),nn=n(xa,"P",{});var h8=s(nn);l_r=r(h8,"The model class to instantiate is selected based on the "),NEe=n(h8,"CODE",{});var TXt=s(NEe);i_r=r(TXt,"model_type"),TXt.forEach(t),d_r=r(h8,` property of the config object (either
passed as an argument or loaded from `),qEe=n(h8,"CODE",{});var MXt=s(qEe);m_r=r(MXt,"pretrained_model_name_or_path"),MXt.forEach(t),c_r=r(h8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=n(h8,"CODE",{});var EXt=s(jEe);f_r=r(EXt,"pretrained_model_name_or_path"),EXt.forEach(t),g_r=r(h8,":"),h8.forEach(t),h_r=i(xa),V=n(xa,"UL",{});var X=s(V);_E=n(X,"LI",{});var cze=s(_E);DEe=n(cze,"STRONG",{});var CXt=s(DEe);u_r=r(CXt,"albert"),CXt.forEach(t),p_r=r(cze," \u2014 "),rY=n(cze,"A",{href:!0});var wXt=s(rY);__r=r(wXt,"AlbertForQuestionAnswering"),wXt.forEach(t),b_r=r(cze," (ALBERT model)"),cze.forEach(t),v_r=i(X),bE=n(X,"LI",{});var fze=s(bE);GEe=n(fze,"STRONG",{});var AXt=s(GEe);F_r=r(AXt,"bart"),AXt.forEach(t),T_r=r(fze," \u2014 "),tY=n(fze,"A",{href:!0});var LXt=s(tY);M_r=r(LXt,"BartForQuestionAnswering"),LXt.forEach(t),E_r=r(fze," (BART model)"),fze.forEach(t),C_r=i(X),vE=n(X,"LI",{});var gze=s(vE);OEe=n(gze,"STRONG",{});var yXt=s(OEe);w_r=r(yXt,"bert"),yXt.forEach(t),A_r=r(gze," \u2014 "),aY=n(gze,"A",{href:!0});var xXt=s(aY);L_r=r(xXt,"BertForQuestionAnswering"),xXt.forEach(t),y_r=r(gze," (BERT model)"),gze.forEach(t),x_r=i(X),FE=n(X,"LI",{});var hze=s(FE);VEe=n(hze,"STRONG",{});var $Xt=s(VEe);$_r=r($Xt,"big_bird"),$Xt.forEach(t),k_r=r(hze," \u2014 "),nY=n(hze,"A",{href:!0});var kXt=s(nY);S_r=r(kXt,"BigBirdForQuestionAnswering"),kXt.forEach(t),R_r=r(hze," (BigBird model)"),hze.forEach(t),P_r=i(X),TE=n(X,"LI",{});var uze=s(TE);XEe=n(uze,"STRONG",{});var SXt=s(XEe);B_r=r(SXt,"bigbird_pegasus"),SXt.forEach(t),I_r=r(uze," \u2014 "),sY=n(uze,"A",{href:!0});var RXt=s(sY);N_r=r(RXt,"BigBirdPegasusForQuestionAnswering"),RXt.forEach(t),q_r=r(uze," (BigBird-Pegasus model)"),uze.forEach(t),j_r=i(X),ME=n(X,"LI",{});var pze=s(ME);zEe=n(pze,"STRONG",{});var PXt=s(zEe);D_r=r(PXt,"bloom"),PXt.forEach(t),G_r=r(pze," \u2014 "),lY=n(pze,"A",{href:!0});var BXt=s(lY);O_r=r(BXt,"BloomForQuestionAnswering"),BXt.forEach(t),V_r=r(pze," (BLOOM model)"),pze.forEach(t),X_r=i(X),EE=n(X,"LI",{});var _ze=s(EE);QEe=n(_ze,"STRONG",{});var IXt=s(QEe);z_r=r(IXt,"camembert"),IXt.forEach(t),Q_r=r(_ze," \u2014 "),iY=n(_ze,"A",{href:!0});var NXt=s(iY);W_r=r(NXt,"CamembertForQuestionAnswering"),NXt.forEach(t),U_r=r(_ze," (CamemBERT model)"),_ze.forEach(t),H_r=i(X),CE=n(X,"LI",{});var bze=s(CE);WEe=n(bze,"STRONG",{});var qXt=s(WEe);J_r=r(qXt,"canine"),qXt.forEach(t),Y_r=r(bze," \u2014 "),dY=n(bze,"A",{href:!0});var jXt=s(dY);K_r=r(jXt,"CanineForQuestionAnswering"),jXt.forEach(t),Z_r=r(bze," (CANINE model)"),bze.forEach(t),e1r=i(X),wE=n(X,"LI",{});var vze=s(wE);UEe=n(vze,"STRONG",{});var DXt=s(UEe);o1r=r(DXt,"convbert"),DXt.forEach(t),r1r=r(vze," \u2014 "),mY=n(vze,"A",{href:!0});var GXt=s(mY);t1r=r(GXt,"ConvBertForQuestionAnswering"),GXt.forEach(t),a1r=r(vze," (ConvBERT model)"),vze.forEach(t),n1r=i(X),AE=n(X,"LI",{});var Fze=s(AE);HEe=n(Fze,"STRONG",{});var OXt=s(HEe);s1r=r(OXt,"data2vec-text"),OXt.forEach(t),l1r=r(Fze," \u2014 "),cY=n(Fze,"A",{href:!0});var VXt=s(cY);i1r=r(VXt,"Data2VecTextForQuestionAnswering"),VXt.forEach(t),d1r=r(Fze," (Data2VecText model)"),Fze.forEach(t),m1r=i(X),LE=n(X,"LI",{});var Tze=s(LE);JEe=n(Tze,"STRONG",{});var XXt=s(JEe);c1r=r(XXt,"deberta"),XXt.forEach(t),f1r=r(Tze," \u2014 "),fY=n(Tze,"A",{href:!0});var zXt=s(fY);g1r=r(zXt,"DebertaForQuestionAnswering"),zXt.forEach(t),h1r=r(Tze," (DeBERTa model)"),Tze.forEach(t),u1r=i(X),yE=n(X,"LI",{});var Mze=s(yE);YEe=n(Mze,"STRONG",{});var QXt=s(YEe);p1r=r(QXt,"deberta-v2"),QXt.forEach(t),_1r=r(Mze," \u2014 "),gY=n(Mze,"A",{href:!0});var WXt=s(gY);b1r=r(WXt,"DebertaV2ForQuestionAnswering"),WXt.forEach(t),v1r=r(Mze," (DeBERTa-v2 model)"),Mze.forEach(t),F1r=i(X),xE=n(X,"LI",{});var Eze=s(xE);KEe=n(Eze,"STRONG",{});var UXt=s(KEe);T1r=r(UXt,"distilbert"),UXt.forEach(t),M1r=r(Eze," \u2014 "),hY=n(Eze,"A",{href:!0});var HXt=s(hY);E1r=r(HXt,"DistilBertForQuestionAnswering"),HXt.forEach(t),C1r=r(Eze," (DistilBERT model)"),Eze.forEach(t),w1r=i(X),$E=n(X,"LI",{});var Cze=s($E);ZEe=n(Cze,"STRONG",{});var JXt=s(ZEe);A1r=r(JXt,"electra"),JXt.forEach(t),L1r=r(Cze," \u2014 "),uY=n(Cze,"A",{href:!0});var YXt=s(uY);y1r=r(YXt,"ElectraForQuestionAnswering"),YXt.forEach(t),x1r=r(Cze," (ELECTRA model)"),Cze.forEach(t),$1r=i(X),kE=n(X,"LI",{});var wze=s(kE);e4e=n(wze,"STRONG",{});var KXt=s(e4e);k1r=r(KXt,"ernie"),KXt.forEach(t),S1r=r(wze," \u2014 "),pY=n(wze,"A",{href:!0});var ZXt=s(pY);R1r=r(ZXt,"ErnieForQuestionAnswering"),ZXt.forEach(t),P1r=r(wze," (ERNIE model)"),wze.forEach(t),B1r=i(X),SE=n(X,"LI",{});var Aze=s(SE);o4e=n(Aze,"STRONG",{});var ezt=s(o4e);I1r=r(ezt,"flaubert"),ezt.forEach(t),N1r=r(Aze," \u2014 "),_Y=n(Aze,"A",{href:!0});var ozt=s(_Y);q1r=r(ozt,"FlaubertForQuestionAnsweringSimple"),ozt.forEach(t),j1r=r(Aze," (FlauBERT model)"),Aze.forEach(t),D1r=i(X),RE=n(X,"LI",{});var Lze=s(RE);r4e=n(Lze,"STRONG",{});var rzt=s(r4e);G1r=r(rzt,"fnet"),rzt.forEach(t),O1r=r(Lze," \u2014 "),bY=n(Lze,"A",{href:!0});var tzt=s(bY);V1r=r(tzt,"FNetForQuestionAnswering"),tzt.forEach(t),X1r=r(Lze," (FNet model)"),Lze.forEach(t),z1r=i(X),PE=n(X,"LI",{});var yze=s(PE);t4e=n(yze,"STRONG",{});var azt=s(t4e);Q1r=r(azt,"funnel"),azt.forEach(t),W1r=r(yze," \u2014 "),vY=n(yze,"A",{href:!0});var nzt=s(vY);U1r=r(nzt,"FunnelForQuestionAnswering"),nzt.forEach(t),H1r=r(yze," (Funnel Transformer model)"),yze.forEach(t),J1r=i(X),BE=n(X,"LI",{});var xze=s(BE);a4e=n(xze,"STRONG",{});var szt=s(a4e);Y1r=r(szt,"gptj"),szt.forEach(t),K1r=r(xze," \u2014 "),FY=n(xze,"A",{href:!0});var lzt=s(FY);Z1r=r(lzt,"GPTJForQuestionAnswering"),lzt.forEach(t),e2r=r(xze," (GPT-J model)"),xze.forEach(t),o2r=i(X),IE=n(X,"LI",{});var $ze=s(IE);n4e=n($ze,"STRONG",{});var izt=s(n4e);r2r=r(izt,"ibert"),izt.forEach(t),t2r=r($ze," \u2014 "),TY=n($ze,"A",{href:!0});var dzt=s(TY);a2r=r(dzt,"IBertForQuestionAnswering"),dzt.forEach(t),n2r=r($ze," (I-BERT model)"),$ze.forEach(t),s2r=i(X),NE=n(X,"LI",{});var kze=s(NE);s4e=n(kze,"STRONG",{});var mzt=s(s4e);l2r=r(mzt,"layoutlmv2"),mzt.forEach(t),i2r=r(kze," \u2014 "),MY=n(kze,"A",{href:!0});var czt=s(MY);d2r=r(czt,"LayoutLMv2ForQuestionAnswering"),czt.forEach(t),m2r=r(kze," (LayoutLMv2 model)"),kze.forEach(t),c2r=i(X),qE=n(X,"LI",{});var Sze=s(qE);l4e=n(Sze,"STRONG",{});var fzt=s(l4e);f2r=r(fzt,"layoutlmv3"),fzt.forEach(t),g2r=r(Sze," \u2014 "),EY=n(Sze,"A",{href:!0});var gzt=s(EY);h2r=r(gzt,"LayoutLMv3ForQuestionAnswering"),gzt.forEach(t),u2r=r(Sze," (LayoutLMv3 model)"),Sze.forEach(t),p2r=i(X),jE=n(X,"LI",{});var Rze=s(jE);i4e=n(Rze,"STRONG",{});var hzt=s(i4e);_2r=r(hzt,"led"),hzt.forEach(t),b2r=r(Rze," \u2014 "),CY=n(Rze,"A",{href:!0});var uzt=s(CY);v2r=r(uzt,"LEDForQuestionAnswering"),uzt.forEach(t),F2r=r(Rze," (LED model)"),Rze.forEach(t),T2r=i(X),DE=n(X,"LI",{});var Pze=s(DE);d4e=n(Pze,"STRONG",{});var pzt=s(d4e);M2r=r(pzt,"longformer"),pzt.forEach(t),E2r=r(Pze," \u2014 "),wY=n(Pze,"A",{href:!0});var _zt=s(wY);C2r=r(_zt,"LongformerForQuestionAnswering"),_zt.forEach(t),w2r=r(Pze," (Longformer model)"),Pze.forEach(t),A2r=i(X),GE=n(X,"LI",{});var Bze=s(GE);m4e=n(Bze,"STRONG",{});var bzt=s(m4e);L2r=r(bzt,"luke"),bzt.forEach(t),y2r=r(Bze," \u2014 "),AY=n(Bze,"A",{href:!0});var vzt=s(AY);x2r=r(vzt,"LukeForQuestionAnswering"),vzt.forEach(t),$2r=r(Bze," (LUKE model)"),Bze.forEach(t),k2r=i(X),OE=n(X,"LI",{});var Ize=s(OE);c4e=n(Ize,"STRONG",{});var Fzt=s(c4e);S2r=r(Fzt,"lxmert"),Fzt.forEach(t),R2r=r(Ize," \u2014 "),LY=n(Ize,"A",{href:!0});var Tzt=s(LY);P2r=r(Tzt,"LxmertForQuestionAnswering"),Tzt.forEach(t),B2r=r(Ize," (LXMERT model)"),Ize.forEach(t),I2r=i(X),VE=n(X,"LI",{});var Nze=s(VE);f4e=n(Nze,"STRONG",{});var Mzt=s(f4e);N2r=r(Mzt,"markuplm"),Mzt.forEach(t),q2r=r(Nze," \u2014 "),yY=n(Nze,"A",{href:!0});var Ezt=s(yY);j2r=r(Ezt,"MarkupLMForQuestionAnswering"),Ezt.forEach(t),D2r=r(Nze," (MarkupLM model)"),Nze.forEach(t),G2r=i(X),XE=n(X,"LI",{});var qze=s(XE);g4e=n(qze,"STRONG",{});var Czt=s(g4e);O2r=r(Czt,"mbart"),Czt.forEach(t),V2r=r(qze," \u2014 "),xY=n(qze,"A",{href:!0});var wzt=s(xY);X2r=r(wzt,"MBartForQuestionAnswering"),wzt.forEach(t),z2r=r(qze," (mBART model)"),qze.forEach(t),Q2r=i(X),zE=n(X,"LI",{});var jze=s(zE);h4e=n(jze,"STRONG",{});var Azt=s(h4e);W2r=r(Azt,"megatron-bert"),Azt.forEach(t),U2r=r(jze," \u2014 "),$Y=n(jze,"A",{href:!0});var Lzt=s($Y);H2r=r(Lzt,"MegatronBertForQuestionAnswering"),Lzt.forEach(t),J2r=r(jze," (Megatron-BERT model)"),jze.forEach(t),Y2r=i(X),QE=n(X,"LI",{});var Dze=s(QE);u4e=n(Dze,"STRONG",{});var yzt=s(u4e);K2r=r(yzt,"mobilebert"),yzt.forEach(t),Z2r=r(Dze," \u2014 "),kY=n(Dze,"A",{href:!0});var xzt=s(kY);ebr=r(xzt,"MobileBertForQuestionAnswering"),xzt.forEach(t),obr=r(Dze," (MobileBERT model)"),Dze.forEach(t),rbr=i(X),WE=n(X,"LI",{});var Gze=s(WE);p4e=n(Gze,"STRONG",{});var $zt=s(p4e);tbr=r($zt,"mpnet"),$zt.forEach(t),abr=r(Gze," \u2014 "),SY=n(Gze,"A",{href:!0});var kzt=s(SY);nbr=r(kzt,"MPNetForQuestionAnswering"),kzt.forEach(t),sbr=r(Gze," (MPNet model)"),Gze.forEach(t),lbr=i(X),UE=n(X,"LI",{});var Oze=s(UE);_4e=n(Oze,"STRONG",{});var Szt=s(_4e);ibr=r(Szt,"mvp"),Szt.forEach(t),dbr=r(Oze," \u2014 "),RY=n(Oze,"A",{href:!0});var Rzt=s(RY);mbr=r(Rzt,"MvpForQuestionAnswering"),Rzt.forEach(t),cbr=r(Oze," (MVP model)"),Oze.forEach(t),fbr=i(X),HE=n(X,"LI",{});var Vze=s(HE);b4e=n(Vze,"STRONG",{});var Pzt=s(b4e);gbr=r(Pzt,"nezha"),Pzt.forEach(t),hbr=r(Vze," \u2014 "),PY=n(Vze,"A",{href:!0});var Bzt=s(PY);ubr=r(Bzt,"NezhaForQuestionAnswering"),Bzt.forEach(t),pbr=r(Vze," (Nezha model)"),Vze.forEach(t),_br=i(X),JE=n(X,"LI",{});var Xze=s(JE);v4e=n(Xze,"STRONG",{});var Izt=s(v4e);bbr=r(Izt,"nystromformer"),Izt.forEach(t),vbr=r(Xze," \u2014 "),BY=n(Xze,"A",{href:!0});var Nzt=s(BY);Fbr=r(Nzt,"NystromformerForQuestionAnswering"),Nzt.forEach(t),Tbr=r(Xze," (Nystr\xF6mformer model)"),Xze.forEach(t),Mbr=i(X),YE=n(X,"LI",{});var zze=s(YE);F4e=n(zze,"STRONG",{});var qzt=s(F4e);Ebr=r(qzt,"qdqbert"),qzt.forEach(t),Cbr=r(zze," \u2014 "),IY=n(zze,"A",{href:!0});var jzt=s(IY);wbr=r(jzt,"QDQBertForQuestionAnswering"),jzt.forEach(t),Abr=r(zze," (QDQBert model)"),zze.forEach(t),Lbr=i(X),KE=n(X,"LI",{});var Qze=s(KE);T4e=n(Qze,"STRONG",{});var Dzt=s(T4e);ybr=r(Dzt,"reformer"),Dzt.forEach(t),xbr=r(Qze," \u2014 "),NY=n(Qze,"A",{href:!0});var Gzt=s(NY);$br=r(Gzt,"ReformerForQuestionAnswering"),Gzt.forEach(t),kbr=r(Qze," (Reformer model)"),Qze.forEach(t),Sbr=i(X),ZE=n(X,"LI",{});var Wze=s(ZE);M4e=n(Wze,"STRONG",{});var Ozt=s(M4e);Rbr=r(Ozt,"rembert"),Ozt.forEach(t),Pbr=r(Wze," \u2014 "),qY=n(Wze,"A",{href:!0});var Vzt=s(qY);Bbr=r(Vzt,"RemBertForQuestionAnswering"),Vzt.forEach(t),Ibr=r(Wze," (RemBERT model)"),Wze.forEach(t),Nbr=i(X),e4=n(X,"LI",{});var Uze=s(e4);E4e=n(Uze,"STRONG",{});var Xzt=s(E4e);qbr=r(Xzt,"roberta"),Xzt.forEach(t),jbr=r(Uze," \u2014 "),jY=n(Uze,"A",{href:!0});var zzt=s(jY);Dbr=r(zzt,"RobertaForQuestionAnswering"),zzt.forEach(t),Gbr=r(Uze," (RoBERTa model)"),Uze.forEach(t),Obr=i(X),o4=n(X,"LI",{});var Hze=s(o4);C4e=n(Hze,"STRONG",{});var Qzt=s(C4e);Vbr=r(Qzt,"roformer"),Qzt.forEach(t),Xbr=r(Hze," \u2014 "),DY=n(Hze,"A",{href:!0});var Wzt=s(DY);zbr=r(Wzt,"RoFormerForQuestionAnswering"),Wzt.forEach(t),Qbr=r(Hze," (RoFormer model)"),Hze.forEach(t),Wbr=i(X),r4=n(X,"LI",{});var Jze=s(r4);w4e=n(Jze,"STRONG",{});var Uzt=s(w4e);Ubr=r(Uzt,"splinter"),Uzt.forEach(t),Hbr=r(Jze," \u2014 "),GY=n(Jze,"A",{href:!0});var Hzt=s(GY);Jbr=r(Hzt,"SplinterForQuestionAnswering"),Hzt.forEach(t),Ybr=r(Jze," (Splinter model)"),Jze.forEach(t),Kbr=i(X),t4=n(X,"LI",{});var Yze=s(t4);A4e=n(Yze,"STRONG",{});var Jzt=s(A4e);Zbr=r(Jzt,"squeezebert"),Jzt.forEach(t),evr=r(Yze," \u2014 "),OY=n(Yze,"A",{href:!0});var Yzt=s(OY);ovr=r(Yzt,"SqueezeBertForQuestionAnswering"),Yzt.forEach(t),rvr=r(Yze," (SqueezeBERT model)"),Yze.forEach(t),tvr=i(X),a4=n(X,"LI",{});var Kze=s(a4);L4e=n(Kze,"STRONG",{});var Kzt=s(L4e);avr=r(Kzt,"xlm"),Kzt.forEach(t),nvr=r(Kze," \u2014 "),VY=n(Kze,"A",{href:!0});var Zzt=s(VY);svr=r(Zzt,"XLMForQuestionAnsweringSimple"),Zzt.forEach(t),lvr=r(Kze," (XLM model)"),Kze.forEach(t),ivr=i(X),n4=n(X,"LI",{});var Zze=s(n4);y4e=n(Zze,"STRONG",{});var eQt=s(y4e);dvr=r(eQt,"xlm-roberta"),eQt.forEach(t),mvr=r(Zze," \u2014 "),XY=n(Zze,"A",{href:!0});var oQt=s(XY);cvr=r(oQt,"XLMRobertaForQuestionAnswering"),oQt.forEach(t),fvr=r(Zze," (XLM-RoBERTa model)"),Zze.forEach(t),gvr=i(X),s4=n(X,"LI",{});var eQe=s(s4);x4e=n(eQe,"STRONG",{});var rQt=s(x4e);hvr=r(rQt,"xlm-roberta-xl"),rQt.forEach(t),uvr=r(eQe," \u2014 "),zY=n(eQe,"A",{href:!0});var tQt=s(zY);pvr=r(tQt,"XLMRobertaXLForQuestionAnswering"),tQt.forEach(t),_vr=r(eQe," (XLM-RoBERTa-XL model)"),eQe.forEach(t),bvr=i(X),l4=n(X,"LI",{});var oQe=s(l4);$4e=n(oQe,"STRONG",{});var aQt=s($4e);vvr=r(aQt,"xlnet"),aQt.forEach(t),Fvr=r(oQe," \u2014 "),QY=n(oQe,"A",{href:!0});var nQt=s(QY);Tvr=r(nQt,"XLNetForQuestionAnsweringSimple"),nQt.forEach(t),Mvr=r(oQe," (XLNet model)"),oQe.forEach(t),Evr=i(X),i4=n(X,"LI",{});var rQe=s(i4);k4e=n(rQe,"STRONG",{});var sQt=s(k4e);Cvr=r(sQt,"yoso"),sQt.forEach(t),wvr=r(rQe," \u2014 "),WY=n(rQe,"A",{href:!0});var lQt=s(WY);Avr=r(lQt,"YosoForQuestionAnswering"),lQt.forEach(t),Lvr=r(rQe," (YOSO model)"),rQe.forEach(t),X.forEach(t),yvr=i(xa),d4=n(xa,"P",{});var tQe=s(d4);xvr=r(tQe,"The model is set in evaluation mode by default using "),S4e=n(tQe,"CODE",{});var iQt=s(S4e);$vr=r(iQt,"model.eval()"),iQt.forEach(t),kvr=r(tQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R4e=n(tQe,"CODE",{});var dQt=s(R4e);Svr=r(dQt,"model.train()"),dQt.forEach(t),tQe.forEach(t),Rvr=i(xa),T(m4.$$.fragment,xa),xa.forEach(t),Bl.forEach(t),Eeo=i(c),Wd=n(c,"H2",{class:!0});var Nro=s(Wd);c4=n(Nro,"A",{id:!0,class:!0,href:!0});var mQt=s(c4);P4e=n(mQt,"SPAN",{});var cQt=s(P4e);T(E$.$$.fragment,cQt),cQt.forEach(t),mQt.forEach(t),Pvr=i(Nro),B4e=n(Nro,"SPAN",{});var fQt=s(B4e);Bvr=r(fQt,"AutoModelForTableQuestionAnswering"),fQt.forEach(t),Nro.forEach(t),Ceo=i(c),Xo=n(c,"DIV",{class:!0});var Il=s(Xo);T(C$.$$.fragment,Il),Ivr=i(Il),Ud=n(Il,"P",{});var Fie=s(Ud);Nvr=r(Fie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UY=n(Fie,"A",{href:!0});var gQt=s(UY);qvr=r(gQt,"from_pretrained()"),gQt.forEach(t),jvr=r(Fie," class method or the "),HY=n(Fie,"A",{href:!0});var hQt=s(HY);Dvr=r(hQt,"from_config()"),hQt.forEach(t),Gvr=r(Fie,` class
method.`),Fie.forEach(t),Ovr=i(Il),w$=n(Il,"P",{});var qro=s(w$);Vvr=r(qro,"This class cannot be instantiated directly using "),I4e=n(qro,"CODE",{});var uQt=s(I4e);Xvr=r(uQt,"__init__()"),uQt.forEach(t),zvr=r(qro," (throws an error)."),qro.forEach(t),Qvr=i(Il),Lt=n(Il,"DIV",{class:!0});var u8=s(Lt);T(A$.$$.fragment,u8),Wvr=i(u8),N4e=n(u8,"P",{});var pQt=s(N4e);Uvr=r(pQt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pQt.forEach(t),Hvr=i(u8),Hd=n(u8,"P",{});var Tie=s(Hd);Jvr=r(Tie,`Note:
Loading a model from its configuration file does `),q4e=n(Tie,"STRONG",{});var _Qt=s(q4e);Yvr=r(_Qt,"not"),_Qt.forEach(t),Kvr=r(Tie,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(Tie,"A",{href:!0});var bQt=s(JY);Zvr=r(bQt,"from_pretrained()"),bQt.forEach(t),eFr=r(Tie," to load the model weights."),Tie.forEach(t),oFr=i(u8),T(f4.$$.fragment,u8),u8.forEach(t),rFr=i(Il),mo=n(Il,"DIV",{class:!0});var $a=s(mo);T(L$.$$.fragment,$a),tFr=i($a),j4e=n($a,"P",{});var vQt=s(j4e);aFr=r(vQt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vQt.forEach(t),nFr=i($a),sn=n($a,"P",{});var p8=s(sn);sFr=r(p8,"The model class to instantiate is selected based on the "),D4e=n(p8,"CODE",{});var FQt=s(D4e);lFr=r(FQt,"model_type"),FQt.forEach(t),iFr=r(p8,` property of the config object (either
passed as an argument or loaded from `),G4e=n(p8,"CODE",{});var TQt=s(G4e);dFr=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),mFr=r(p8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(p8,"CODE",{});var MQt=s(O4e);cFr=r(MQt,"pretrained_model_name_or_path"),MQt.forEach(t),fFr=r(p8,":"),p8.forEach(t),gFr=i($a),V4e=n($a,"UL",{});var EQt=s(V4e);g4=n(EQt,"LI",{});var aQe=s(g4);X4e=n(aQe,"STRONG",{});var CQt=s(X4e);hFr=r(CQt,"tapas"),CQt.forEach(t),uFr=r(aQe," \u2014 "),YY=n(aQe,"A",{href:!0});var wQt=s(YY);pFr=r(wQt,"TapasForQuestionAnswering"),wQt.forEach(t),_Fr=r(aQe," (TAPAS model)"),aQe.forEach(t),EQt.forEach(t),bFr=i($a),h4=n($a,"P",{});var nQe=s(h4);vFr=r(nQe,"The model is set in evaluation mode by default using "),z4e=n(nQe,"CODE",{});var AQt=s(z4e);FFr=r(AQt,"model.eval()"),AQt.forEach(t),TFr=r(nQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q4e=n(nQe,"CODE",{});var LQt=s(Q4e);MFr=r(LQt,"model.train()"),LQt.forEach(t),nQe.forEach(t),EFr=i($a),T(u4.$$.fragment,$a),$a.forEach(t),Il.forEach(t),weo=i(c),Jd=n(c,"H2",{class:!0});var jro=s(Jd);p4=n(jro,"A",{id:!0,class:!0,href:!0});var yQt=s(p4);W4e=n(yQt,"SPAN",{});var xQt=s(W4e);T(y$.$$.fragment,xQt),xQt.forEach(t),yQt.forEach(t),CFr=i(jro),U4e=n(jro,"SPAN",{});var $Qt=s(U4e);wFr=r($Qt,"AutoModelForDocumentQuestionAnswering"),$Qt.forEach(t),jro.forEach(t),Aeo=i(c),zo=n(c,"DIV",{class:!0});var Nl=s(zo);T(x$.$$.fragment,Nl),AFr=i(Nl),Yd=n(Nl,"P",{});var Mie=s(Yd);LFr=r(Mie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),KY=n(Mie,"A",{href:!0});var kQt=s(KY);yFr=r(kQt,"from_pretrained()"),kQt.forEach(t),xFr=r(Mie," class method or the "),ZY=n(Mie,"A",{href:!0});var SQt=s(ZY);$Fr=r(SQt,"from_config()"),SQt.forEach(t),kFr=r(Mie,` class
method.`),Mie.forEach(t),SFr=i(Nl),$$=n(Nl,"P",{});var Dro=s($$);RFr=r(Dro,"This class cannot be instantiated directly using "),H4e=n(Dro,"CODE",{});var RQt=s(H4e);PFr=r(RQt,"__init__()"),RQt.forEach(t),BFr=r(Dro," (throws an error)."),Dro.forEach(t),IFr=i(Nl),yt=n(Nl,"DIV",{class:!0});var _8=s(yt);T(k$.$$.fragment,_8),NFr=i(_8),J4e=n(_8,"P",{});var PQt=s(J4e);qFr=r(PQt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),PQt.forEach(t),jFr=i(_8),Kd=n(_8,"P",{});var Eie=s(Kd);DFr=r(Eie,`Note:
Loading a model from its configuration file does `),Y4e=n(Eie,"STRONG",{});var BQt=s(Y4e);GFr=r(BQt,"not"),BQt.forEach(t),OFr=r(Eie,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(Eie,"A",{href:!0});var IQt=s(eK);VFr=r(IQt,"from_pretrained()"),IQt.forEach(t),XFr=r(Eie," to load the model weights."),Eie.forEach(t),zFr=i(_8),T(_4.$$.fragment,_8),_8.forEach(t),QFr=i(Nl),co=n(Nl,"DIV",{class:!0});var ka=s(co);T(S$.$$.fragment,ka),WFr=i(ka),K4e=n(ka,"P",{});var NQt=s(K4e);UFr=r(NQt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),NQt.forEach(t),HFr=i(ka),ln=n(ka,"P",{});var b8=s(ln);JFr=r(b8,"The model class to instantiate is selected based on the "),Z4e=n(b8,"CODE",{});var qQt=s(Z4e);YFr=r(qQt,"model_type"),qQt.forEach(t),KFr=r(b8,` property of the config object (either
passed as an argument or loaded from `),eCe=n(b8,"CODE",{});var jQt=s(eCe);ZFr=r(jQt,"pretrained_model_name_or_path"),jQt.forEach(t),eTr=r(b8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=n(b8,"CODE",{});var DQt=s(oCe);oTr=r(DQt,"pretrained_model_name_or_path"),DQt.forEach(t),rTr=r(b8,":"),b8.forEach(t),tTr=i(ka),Zd=n(ka,"UL",{});var Cie=s(Zd);b4=n(Cie,"LI",{});var sQe=s(b4);rCe=n(sQe,"STRONG",{});var GQt=s(rCe);aTr=r(GQt,"layoutlm"),GQt.forEach(t),nTr=r(sQe," \u2014 "),oK=n(sQe,"A",{href:!0});var OQt=s(oK);sTr=r(OQt,"LayoutLMForQuestionAnswering"),OQt.forEach(t),lTr=r(sQe," (LayoutLM model)"),sQe.forEach(t),iTr=i(Cie),v4=n(Cie,"LI",{});var lQe=s(v4);tCe=n(lQe,"STRONG",{});var VQt=s(tCe);dTr=r(VQt,"layoutlmv2"),VQt.forEach(t),mTr=r(lQe," \u2014 "),rK=n(lQe,"A",{href:!0});var XQt=s(rK);cTr=r(XQt,"LayoutLMv2ForQuestionAnswering"),XQt.forEach(t),fTr=r(lQe," (LayoutLMv2 model)"),lQe.forEach(t),gTr=i(Cie),F4=n(Cie,"LI",{});var iQe=s(F4);aCe=n(iQe,"STRONG",{});var zQt=s(aCe);hTr=r(zQt,"layoutlmv3"),zQt.forEach(t),uTr=r(iQe," \u2014 "),tK=n(iQe,"A",{href:!0});var QQt=s(tK);pTr=r(QQt,"LayoutLMv3ForQuestionAnswering"),QQt.forEach(t),_Tr=r(iQe," (LayoutLMv3 model)"),iQe.forEach(t),Cie.forEach(t),bTr=i(ka),T4=n(ka,"P",{});var dQe=s(T4);vTr=r(dQe,"The model is set in evaluation mode by default using "),nCe=n(dQe,"CODE",{});var WQt=s(nCe);FTr=r(WQt,"model.eval()"),WQt.forEach(t),TTr=r(dQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sCe=n(dQe,"CODE",{});var UQt=s(sCe);MTr=r(UQt,"model.train()"),UQt.forEach(t),dQe.forEach(t),ETr=i(ka),T(M4.$$.fragment,ka),ka.forEach(t),Nl.forEach(t),Leo=i(c),em=n(c,"H2",{class:!0});var Gro=s(em);E4=n(Gro,"A",{id:!0,class:!0,href:!0});var HQt=s(E4);lCe=n(HQt,"SPAN",{});var JQt=s(lCe);T(R$.$$.fragment,JQt),JQt.forEach(t),HQt.forEach(t),CTr=i(Gro),iCe=n(Gro,"SPAN",{});var YQt=s(iCe);wTr=r(YQt,"AutoModelForImageClassification"),YQt.forEach(t),Gro.forEach(t),yeo=i(c),Qo=n(c,"DIV",{class:!0});var ql=s(Qo);T(P$.$$.fragment,ql),ATr=i(ql),om=n(ql,"P",{});var wie=s(om);LTr=r(wie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aK=n(wie,"A",{href:!0});var KQt=s(aK);yTr=r(KQt,"from_pretrained()"),KQt.forEach(t),xTr=r(wie," class method or the "),nK=n(wie,"A",{href:!0});var ZQt=s(nK);$Tr=r(ZQt,"from_config()"),ZQt.forEach(t),kTr=r(wie,` class
method.`),wie.forEach(t),STr=i(ql),B$=n(ql,"P",{});var Oro=s(B$);RTr=r(Oro,"This class cannot be instantiated directly using "),dCe=n(Oro,"CODE",{});var eWt=s(dCe);PTr=r(eWt,"__init__()"),eWt.forEach(t),BTr=r(Oro," (throws an error)."),Oro.forEach(t),ITr=i(ql),xt=n(ql,"DIV",{class:!0});var v8=s(xt);T(I$.$$.fragment,v8),NTr=i(v8),mCe=n(v8,"P",{});var oWt=s(mCe);qTr=r(oWt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oWt.forEach(t),jTr=i(v8),rm=n(v8,"P",{});var Aie=s(rm);DTr=r(Aie,`Note:
Loading a model from its configuration file does `),cCe=n(Aie,"STRONG",{});var rWt=s(cCe);GTr=r(rWt,"not"),rWt.forEach(t),OTr=r(Aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(Aie,"A",{href:!0});var tWt=s(sK);VTr=r(tWt,"from_pretrained()"),tWt.forEach(t),XTr=r(Aie," to load the model weights."),Aie.forEach(t),zTr=i(v8),T(C4.$$.fragment,v8),v8.forEach(t),QTr=i(ql),fo=n(ql,"DIV",{class:!0});var Sa=s(fo);T(N$.$$.fragment,Sa),WTr=i(Sa),fCe=n(Sa,"P",{});var aWt=s(fCe);UTr=r(aWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aWt.forEach(t),HTr=i(Sa),dn=n(Sa,"P",{});var F8=s(dn);JTr=r(F8,"The model class to instantiate is selected based on the "),gCe=n(F8,"CODE",{});var nWt=s(gCe);YTr=r(nWt,"model_type"),nWt.forEach(t),KTr=r(F8,` property of the config object (either
passed as an argument or loaded from `),hCe=n(F8,"CODE",{});var sWt=s(hCe);ZTr=r(sWt,"pretrained_model_name_or_path"),sWt.forEach(t),eMr=r(F8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=n(F8,"CODE",{});var lWt=s(uCe);oMr=r(lWt,"pretrained_model_name_or_path"),lWt.forEach(t),rMr=r(F8,":"),F8.forEach(t),tMr=i(Sa),be=n(Sa,"UL",{});var Fe=s(be);w4=n(Fe,"LI",{});var mQe=s(w4);pCe=n(mQe,"STRONG",{});var iWt=s(pCe);aMr=r(iWt,"beit"),iWt.forEach(t),nMr=r(mQe," \u2014 "),lK=n(mQe,"A",{href:!0});var dWt=s(lK);sMr=r(dWt,"BeitForImageClassification"),dWt.forEach(t),lMr=r(mQe," (BEiT model)"),mQe.forEach(t),iMr=i(Fe),A4=n(Fe,"LI",{});var cQe=s(A4);_Ce=n(cQe,"STRONG",{});var mWt=s(_Ce);dMr=r(mWt,"convnext"),mWt.forEach(t),mMr=r(cQe," \u2014 "),iK=n(cQe,"A",{href:!0});var cWt=s(iK);cMr=r(cWt,"ConvNextForImageClassification"),cWt.forEach(t),fMr=r(cQe," (ConvNeXT model)"),cQe.forEach(t),gMr=i(Fe),L4=n(Fe,"LI",{});var fQe=s(L4);bCe=n(fQe,"STRONG",{});var fWt=s(bCe);hMr=r(fWt,"cvt"),fWt.forEach(t),uMr=r(fQe," \u2014 "),dK=n(fQe,"A",{href:!0});var gWt=s(dK);pMr=r(gWt,"CvtForImageClassification"),gWt.forEach(t),_Mr=r(fQe," (CvT model)"),fQe.forEach(t),bMr=i(Fe),y4=n(Fe,"LI",{});var gQe=s(y4);vCe=n(gQe,"STRONG",{});var hWt=s(vCe);vMr=r(hWt,"data2vec-vision"),hWt.forEach(t),FMr=r(gQe," \u2014 "),mK=n(gQe,"A",{href:!0});var uWt=s(mK);TMr=r(uWt,"Data2VecVisionForImageClassification"),uWt.forEach(t),MMr=r(gQe," (Data2VecVision model)"),gQe.forEach(t),EMr=i(Fe),bl=n(Fe,"LI",{});var YB=s(bl);FCe=n(YB,"STRONG",{});var pWt=s(FCe);CMr=r(pWt,"deit"),pWt.forEach(t),wMr=r(YB," \u2014 "),cK=n(YB,"A",{href:!0});var _Wt=s(cK);AMr=r(_Wt,"DeiTForImageClassification"),_Wt.forEach(t),LMr=r(YB," or "),fK=n(YB,"A",{href:!0});var bWt=s(fK);yMr=r(bWt,"DeiTForImageClassificationWithTeacher"),bWt.forEach(t),xMr=r(YB," (DeiT model)"),YB.forEach(t),$Mr=i(Fe),x4=n(Fe,"LI",{});var hQe=s(x4);TCe=n(hQe,"STRONG",{});var vWt=s(TCe);kMr=r(vWt,"imagegpt"),vWt.forEach(t),SMr=r(hQe," \u2014 "),gK=n(hQe,"A",{href:!0});var FWt=s(gK);RMr=r(FWt,"ImageGPTForImageClassification"),FWt.forEach(t),PMr=r(hQe," (ImageGPT model)"),hQe.forEach(t),BMr=i(Fe),vl=n(Fe,"LI",{});var KB=s(vl);MCe=n(KB,"STRONG",{});var TWt=s(MCe);IMr=r(TWt,"levit"),TWt.forEach(t),NMr=r(KB," \u2014 "),hK=n(KB,"A",{href:!0});var MWt=s(hK);qMr=r(MWt,"LevitForImageClassification"),MWt.forEach(t),jMr=r(KB," or "),uK=n(KB,"A",{href:!0});var EWt=s(uK);DMr=r(EWt,"LevitForImageClassificationWithTeacher"),EWt.forEach(t),GMr=r(KB," (LeViT model)"),KB.forEach(t),OMr=i(Fe),$4=n(Fe,"LI",{});var uQe=s($4);ECe=n(uQe,"STRONG",{});var CWt=s(ECe);VMr=r(CWt,"mobilevit"),CWt.forEach(t),XMr=r(uQe," \u2014 "),pK=n(uQe,"A",{href:!0});var wWt=s(pK);zMr=r(wWt,"MobileViTForImageClassification"),wWt.forEach(t),QMr=r(uQe," (MobileViT model)"),uQe.forEach(t),WMr=i(Fe),$t=n(Fe,"LI",{});var Mf=s($t);CCe=n(Mf,"STRONG",{});var AWt=s(CCe);UMr=r(AWt,"perceiver"),AWt.forEach(t),HMr=r(Mf," \u2014 "),_K=n(Mf,"A",{href:!0});var LWt=s(_K);JMr=r(LWt,"PerceiverForImageClassificationLearned"),LWt.forEach(t),YMr=r(Mf," or "),bK=n(Mf,"A",{href:!0});var yWt=s(bK);KMr=r(yWt,"PerceiverForImageClassificationFourier"),yWt.forEach(t),ZMr=r(Mf," or "),vK=n(Mf,"A",{href:!0});var xWt=s(vK);eEr=r(xWt,"PerceiverForImageClassificationConvProcessing"),xWt.forEach(t),oEr=r(Mf," (Perceiver model)"),Mf.forEach(t),rEr=i(Fe),k4=n(Fe,"LI",{});var pQe=s(k4);wCe=n(pQe,"STRONG",{});var $Wt=s(wCe);tEr=r($Wt,"poolformer"),$Wt.forEach(t),aEr=r(pQe," \u2014 "),FK=n(pQe,"A",{href:!0});var kWt=s(FK);nEr=r(kWt,"PoolFormerForImageClassification"),kWt.forEach(t),sEr=r(pQe," (PoolFormer model)"),pQe.forEach(t),lEr=i(Fe),S4=n(Fe,"LI",{});var _Qe=s(S4);ACe=n(_Qe,"STRONG",{});var SWt=s(ACe);iEr=r(SWt,"regnet"),SWt.forEach(t),dEr=r(_Qe," \u2014 "),TK=n(_Qe,"A",{href:!0});var RWt=s(TK);mEr=r(RWt,"RegNetForImageClassification"),RWt.forEach(t),cEr=r(_Qe," (RegNet model)"),_Qe.forEach(t),fEr=i(Fe),R4=n(Fe,"LI",{});var bQe=s(R4);LCe=n(bQe,"STRONG",{});var PWt=s(LCe);gEr=r(PWt,"resnet"),PWt.forEach(t),hEr=r(bQe," \u2014 "),MK=n(bQe,"A",{href:!0});var BWt=s(MK);uEr=r(BWt,"ResNetForImageClassification"),BWt.forEach(t),pEr=r(bQe," (ResNet model)"),bQe.forEach(t),_Er=i(Fe),P4=n(Fe,"LI",{});var vQe=s(P4);yCe=n(vQe,"STRONG",{});var IWt=s(yCe);bEr=r(IWt,"segformer"),IWt.forEach(t),vEr=r(vQe," \u2014 "),EK=n(vQe,"A",{href:!0});var NWt=s(EK);FEr=r(NWt,"SegformerForImageClassification"),NWt.forEach(t),TEr=r(vQe," (SegFormer model)"),vQe.forEach(t),MEr=i(Fe),B4=n(Fe,"LI",{});var FQe=s(B4);xCe=n(FQe,"STRONG",{});var qWt=s(xCe);EEr=r(qWt,"swin"),qWt.forEach(t),CEr=r(FQe," \u2014 "),CK=n(FQe,"A",{href:!0});var jWt=s(CK);wEr=r(jWt,"SwinForImageClassification"),jWt.forEach(t),AEr=r(FQe," (Swin Transformer model)"),FQe.forEach(t),LEr=i(Fe),I4=n(Fe,"LI",{});var TQe=s(I4);$Ce=n(TQe,"STRONG",{});var DWt=s($Ce);yEr=r(DWt,"swinv2"),DWt.forEach(t),xEr=r(TQe," \u2014 "),wK=n(TQe,"A",{href:!0});var GWt=s(wK);$Er=r(GWt,"Swinv2ForImageClassification"),GWt.forEach(t),kEr=r(TQe," (Swin Transformer V2 model)"),TQe.forEach(t),SEr=i(Fe),N4=n(Fe,"LI",{});var MQe=s(N4);kCe=n(MQe,"STRONG",{});var OWt=s(kCe);REr=r(OWt,"van"),OWt.forEach(t),PEr=r(MQe," \u2014 "),AK=n(MQe,"A",{href:!0});var VWt=s(AK);BEr=r(VWt,"VanForImageClassification"),VWt.forEach(t),IEr=r(MQe," (VAN model)"),MQe.forEach(t),NEr=i(Fe),q4=n(Fe,"LI",{});var EQe=s(q4);SCe=n(EQe,"STRONG",{});var XWt=s(SCe);qEr=r(XWt,"vit"),XWt.forEach(t),jEr=r(EQe," \u2014 "),LK=n(EQe,"A",{href:!0});var zWt=s(LK);DEr=r(zWt,"ViTForImageClassification"),zWt.forEach(t),GEr=r(EQe," (ViT model)"),EQe.forEach(t),OEr=i(Fe),j4=n(Fe,"LI",{});var CQe=s(j4);RCe=n(CQe,"STRONG",{});var QWt=s(RCe);VEr=r(QWt,"vit_msn"),QWt.forEach(t),XEr=r(CQe," \u2014 "),yK=n(CQe,"A",{href:!0});var WWt=s(yK);zEr=r(WWt,"ViTMSNForImageClassification"),WWt.forEach(t),QEr=r(CQe," (ViTMSN model)"),CQe.forEach(t),Fe.forEach(t),WEr=i(Sa),D4=n(Sa,"P",{});var wQe=s(D4);UEr=r(wQe,"The model is set in evaluation mode by default using "),PCe=n(wQe,"CODE",{});var UWt=s(PCe);HEr=r(UWt,"model.eval()"),UWt.forEach(t),JEr=r(wQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BCe=n(wQe,"CODE",{});var HWt=s(BCe);YEr=r(HWt,"model.train()"),HWt.forEach(t),wQe.forEach(t),KEr=i(Sa),T(G4.$$.fragment,Sa),Sa.forEach(t),ql.forEach(t),xeo=i(c),tm=n(c,"H2",{class:!0});var Vro=s(tm);O4=n(Vro,"A",{id:!0,class:!0,href:!0});var JWt=s(O4);ICe=n(JWt,"SPAN",{});var YWt=s(ICe);T(q$.$$.fragment,YWt),YWt.forEach(t),JWt.forEach(t),ZEr=i(Vro),NCe=n(Vro,"SPAN",{});var KWt=s(NCe);e4r=r(KWt,"AutoModelForVideoClassification"),KWt.forEach(t),Vro.forEach(t),$eo=i(c),Wo=n(c,"DIV",{class:!0});var jl=s(Wo);T(j$.$$.fragment,jl),o4r=i(jl),am=n(jl,"P",{});var Lie=s(am);r4r=r(Lie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),xK=n(Lie,"A",{href:!0});var ZWt=s(xK);t4r=r(ZWt,"from_pretrained()"),ZWt.forEach(t),a4r=r(Lie," class method or the "),$K=n(Lie,"A",{href:!0});var eUt=s($K);n4r=r(eUt,"from_config()"),eUt.forEach(t),s4r=r(Lie,` class
method.`),Lie.forEach(t),l4r=i(jl),D$=n(jl,"P",{});var Xro=s(D$);i4r=r(Xro,"This class cannot be instantiated directly using "),qCe=n(Xro,"CODE",{});var oUt=s(qCe);d4r=r(oUt,"__init__()"),oUt.forEach(t),m4r=r(Xro," (throws an error)."),Xro.forEach(t),c4r=i(jl),kt=n(jl,"DIV",{class:!0});var T8=s(kt);T(G$.$$.fragment,T8),f4r=i(T8),jCe=n(T8,"P",{});var rUt=s(jCe);g4r=r(rUt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),rUt.forEach(t),h4r=i(T8),nm=n(T8,"P",{});var yie=s(nm);u4r=r(yie,`Note:
Loading a model from its configuration file does `),DCe=n(yie,"STRONG",{});var tUt=s(DCe);p4r=r(tUt,"not"),tUt.forEach(t),_4r=r(yie,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(yie,"A",{href:!0});var aUt=s(kK);b4r=r(aUt,"from_pretrained()"),aUt.forEach(t),v4r=r(yie," to load the model weights."),yie.forEach(t),F4r=i(T8),T(V4.$$.fragment,T8),T8.forEach(t),T4r=i(jl),go=n(jl,"DIV",{class:!0});var Ra=s(go);T(O$.$$.fragment,Ra),M4r=i(Ra),GCe=n(Ra,"P",{});var nUt=s(GCe);E4r=r(nUt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),nUt.forEach(t),C4r=i(Ra),mn=n(Ra,"P",{});var M8=s(mn);w4r=r(M8,"The model class to instantiate is selected based on the "),OCe=n(M8,"CODE",{});var sUt=s(OCe);A4r=r(sUt,"model_type"),sUt.forEach(t),L4r=r(M8,` property of the config object (either
passed as an argument or loaded from `),VCe=n(M8,"CODE",{});var lUt=s(VCe);y4r=r(lUt,"pretrained_model_name_or_path"),lUt.forEach(t),x4r=r(M8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n(M8,"CODE",{});var iUt=s(XCe);$4r=r(iUt,"pretrained_model_name_or_path"),iUt.forEach(t),k4r=r(M8,":"),M8.forEach(t),S4r=i(Ra),zCe=n(Ra,"UL",{});var dUt=s(zCe);X4=n(dUt,"LI",{});var AQe=s(X4);QCe=n(AQe,"STRONG",{});var mUt=s(QCe);R4r=r(mUt,"videomae"),mUt.forEach(t),P4r=r(AQe," \u2014 "),SK=n(AQe,"A",{href:!0});var cUt=s(SK);B4r=r(cUt,"VideoMAEForVideoClassification"),cUt.forEach(t),I4r=r(AQe," (VideoMAE model)"),AQe.forEach(t),dUt.forEach(t),N4r=i(Ra),z4=n(Ra,"P",{});var LQe=s(z4);q4r=r(LQe,"The model is set in evaluation mode by default using "),WCe=n(LQe,"CODE",{});var fUt=s(WCe);j4r=r(fUt,"model.eval()"),fUt.forEach(t),D4r=r(LQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UCe=n(LQe,"CODE",{});var gUt=s(UCe);G4r=r(gUt,"model.train()"),gUt.forEach(t),LQe.forEach(t),O4r=i(Ra),T(Q4.$$.fragment,Ra),Ra.forEach(t),jl.forEach(t),keo=i(c),sm=n(c,"H2",{class:!0});var zro=s(sm);W4=n(zro,"A",{id:!0,class:!0,href:!0});var hUt=s(W4);HCe=n(hUt,"SPAN",{});var uUt=s(HCe);T(V$.$$.fragment,uUt),uUt.forEach(t),hUt.forEach(t),V4r=i(zro),JCe=n(zro,"SPAN",{});var pUt=s(JCe);X4r=r(pUt,"AutoModelForVision2Seq"),pUt.forEach(t),zro.forEach(t),Seo=i(c),Uo=n(c,"DIV",{class:!0});var Dl=s(Uo);T(X$.$$.fragment,Dl),z4r=i(Dl),lm=n(Dl,"P",{});var xie=s(lm);Q4r=r(xie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RK=n(xie,"A",{href:!0});var _Ut=s(RK);W4r=r(_Ut,"from_pretrained()"),_Ut.forEach(t),U4r=r(xie," class method or the "),PK=n(xie,"A",{href:!0});var bUt=s(PK);H4r=r(bUt,"from_config()"),bUt.forEach(t),J4r=r(xie,` class
method.`),xie.forEach(t),Y4r=i(Dl),z$=n(Dl,"P",{});var Qro=s(z$);K4r=r(Qro,"This class cannot be instantiated directly using "),YCe=n(Qro,"CODE",{});var vUt=s(YCe);Z4r=r(vUt,"__init__()"),vUt.forEach(t),eCr=r(Qro," (throws an error)."),Qro.forEach(t),oCr=i(Dl),St=n(Dl,"DIV",{class:!0});var E8=s(St);T(Q$.$$.fragment,E8),rCr=i(E8),KCe=n(E8,"P",{});var FUt=s(KCe);tCr=r(FUt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FUt.forEach(t),aCr=i(E8),im=n(E8,"P",{});var $ie=s(im);nCr=r($ie,`Note:
Loading a model from its configuration file does `),ZCe=n($ie,"STRONG",{});var TUt=s(ZCe);sCr=r(TUt,"not"),TUt.forEach(t),lCr=r($ie,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n($ie,"A",{href:!0});var MUt=s(BK);iCr=r(MUt,"from_pretrained()"),MUt.forEach(t),dCr=r($ie," to load the model weights."),$ie.forEach(t),mCr=i(E8),T(U4.$$.fragment,E8),E8.forEach(t),cCr=i(Dl),ho=n(Dl,"DIV",{class:!0});var Pa=s(ho);T(W$.$$.fragment,Pa),fCr=i(Pa),e3e=n(Pa,"P",{});var EUt=s(e3e);gCr=r(EUt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EUt.forEach(t),hCr=i(Pa),cn=n(Pa,"P",{});var C8=s(cn);uCr=r(C8,"The model class to instantiate is selected based on the "),o3e=n(C8,"CODE",{});var CUt=s(o3e);pCr=r(CUt,"model_type"),CUt.forEach(t),_Cr=r(C8,` property of the config object (either
passed as an argument or loaded from `),r3e=n(C8,"CODE",{});var wUt=s(r3e);bCr=r(wUt,"pretrained_model_name_or_path"),wUt.forEach(t),vCr=r(C8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=n(C8,"CODE",{});var AUt=s(t3e);FCr=r(AUt,"pretrained_model_name_or_path"),AUt.forEach(t),TCr=r(C8,":"),C8.forEach(t),MCr=i(Pa),a3e=n(Pa,"UL",{});var LUt=s(a3e);H4=n(LUt,"LI",{});var yQe=s(H4);n3e=n(yQe,"STRONG",{});var yUt=s(n3e);ECr=r(yUt,"vision-encoder-decoder"),yUt.forEach(t),CCr=r(yQe," \u2014 "),IK=n(yQe,"A",{href:!0});var xUt=s(IK);wCr=r(xUt,"VisionEncoderDecoderModel"),xUt.forEach(t),ACr=r(yQe," (Vision Encoder decoder model)"),yQe.forEach(t),LUt.forEach(t),LCr=i(Pa),J4=n(Pa,"P",{});var xQe=s(J4);yCr=r(xQe,"The model is set in evaluation mode by default using "),s3e=n(xQe,"CODE",{});var $Ut=s(s3e);xCr=r($Ut,"model.eval()"),$Ut.forEach(t),$Cr=r(xQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l3e=n(xQe,"CODE",{});var kUt=s(l3e);kCr=r(kUt,"model.train()"),kUt.forEach(t),xQe.forEach(t),SCr=i(Pa),T(Y4.$$.fragment,Pa),Pa.forEach(t),Dl.forEach(t),Reo=i(c),dm=n(c,"H2",{class:!0});var Wro=s(dm);K4=n(Wro,"A",{id:!0,class:!0,href:!0});var SUt=s(K4);i3e=n(SUt,"SPAN",{});var RUt=s(i3e);T(U$.$$.fragment,RUt),RUt.forEach(t),SUt.forEach(t),RCr=i(Wro),d3e=n(Wro,"SPAN",{});var PUt=s(d3e);PCr=r(PUt,"AutoModelForVisualQuestionAnswering"),PUt.forEach(t),Wro.forEach(t),Peo=i(c),Ho=n(c,"DIV",{class:!0});var Gl=s(Ho);T(H$.$$.fragment,Gl),BCr=i(Gl),mm=n(Gl,"P",{});var kie=s(mm);ICr=r(kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),NK=n(kie,"A",{href:!0});var BUt=s(NK);NCr=r(BUt,"from_pretrained()"),BUt.forEach(t),qCr=r(kie," class method or the "),qK=n(kie,"A",{href:!0});var IUt=s(qK);jCr=r(IUt,"from_config()"),IUt.forEach(t),DCr=r(kie,` class
method.`),kie.forEach(t),GCr=i(Gl),J$=n(Gl,"P",{});var Uro=s(J$);OCr=r(Uro,"This class cannot be instantiated directly using "),m3e=n(Uro,"CODE",{});var NUt=s(m3e);VCr=r(NUt,"__init__()"),NUt.forEach(t),XCr=r(Uro," (throws an error)."),Uro.forEach(t),zCr=i(Gl),Rt=n(Gl,"DIV",{class:!0});var w8=s(Rt);T(Y$.$$.fragment,w8),QCr=i(w8),c3e=n(w8,"P",{});var qUt=s(c3e);WCr=r(qUt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),qUt.forEach(t),UCr=i(w8),cm=n(w8,"P",{});var Sie=s(cm);HCr=r(Sie,`Note:
Loading a model from its configuration file does `),f3e=n(Sie,"STRONG",{});var jUt=s(f3e);JCr=r(jUt,"not"),jUt.forEach(t),YCr=r(Sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Sie,"A",{href:!0});var DUt=s(jK);KCr=r(DUt,"from_pretrained()"),DUt.forEach(t),ZCr=r(Sie," to load the model weights."),Sie.forEach(t),e3r=i(w8),T(Z4.$$.fragment,w8),w8.forEach(t),o3r=i(Gl),uo=n(Gl,"DIV",{class:!0});var Ba=s(uo);T(K$.$$.fragment,Ba),r3r=i(Ba),g3e=n(Ba,"P",{});var GUt=s(g3e);t3r=r(GUt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),GUt.forEach(t),a3r=i(Ba),fn=n(Ba,"P",{});var A8=s(fn);n3r=r(A8,"The model class to instantiate is selected based on the "),h3e=n(A8,"CODE",{});var OUt=s(h3e);s3r=r(OUt,"model_type"),OUt.forEach(t),l3r=r(A8,` property of the config object (either
passed as an argument or loaded from `),u3e=n(A8,"CODE",{});var VUt=s(u3e);i3r=r(VUt,"pretrained_model_name_or_path"),VUt.forEach(t),d3r=r(A8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(A8,"CODE",{});var XUt=s(p3e);m3r=r(XUt,"pretrained_model_name_or_path"),XUt.forEach(t),c3r=r(A8,":"),A8.forEach(t),f3r=i(Ba),_3e=n(Ba,"UL",{});var zUt=s(_3e);eC=n(zUt,"LI",{});var $Qe=s(eC);b3e=n($Qe,"STRONG",{});var QUt=s(b3e);g3r=r(QUt,"vilt"),QUt.forEach(t),h3r=r($Qe," \u2014 "),DK=n($Qe,"A",{href:!0});var WUt=s(DK);u3r=r(WUt,"ViltForQuestionAnswering"),WUt.forEach(t),p3r=r($Qe," (ViLT model)"),$Qe.forEach(t),zUt.forEach(t),_3r=i(Ba),oC=n(Ba,"P",{});var kQe=s(oC);b3r=r(kQe,"The model is set in evaluation mode by default using "),v3e=n(kQe,"CODE",{});var UUt=s(v3e);v3r=r(UUt,"model.eval()"),UUt.forEach(t),F3r=r(kQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F3e=n(kQe,"CODE",{});var HUt=s(F3e);T3r=r(HUt,"model.train()"),HUt.forEach(t),kQe.forEach(t),M3r=i(Ba),T(rC.$$.fragment,Ba),Ba.forEach(t),Gl.forEach(t),Beo=i(c),fm=n(c,"H2",{class:!0});var Hro=s(fm);tC=n(Hro,"A",{id:!0,class:!0,href:!0});var JUt=s(tC);T3e=n(JUt,"SPAN",{});var YUt=s(T3e);T(Z$.$$.fragment,YUt),YUt.forEach(t),JUt.forEach(t),E3r=i(Hro),M3e=n(Hro,"SPAN",{});var KUt=s(M3e);C3r=r(KUt,"AutoModelForAudioClassification"),KUt.forEach(t),Hro.forEach(t),Ieo=i(c),Jo=n(c,"DIV",{class:!0});var Ol=s(Jo);T(ek.$$.fragment,Ol),w3r=i(Ol),gm=n(Ol,"P",{});var Rie=s(gm);A3r=r(Rie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GK=n(Rie,"A",{href:!0});var ZUt=s(GK);L3r=r(ZUt,"from_pretrained()"),ZUt.forEach(t),y3r=r(Rie," class method or the "),OK=n(Rie,"A",{href:!0});var eHt=s(OK);x3r=r(eHt,"from_config()"),eHt.forEach(t),$3r=r(Rie,` class
method.`),Rie.forEach(t),k3r=i(Ol),ok=n(Ol,"P",{});var Jro=s(ok);S3r=r(Jro,"This class cannot be instantiated directly using "),E3e=n(Jro,"CODE",{});var oHt=s(E3e);R3r=r(oHt,"__init__()"),oHt.forEach(t),P3r=r(Jro," (throws an error)."),Jro.forEach(t),B3r=i(Ol),Pt=n(Ol,"DIV",{class:!0});var L8=s(Pt);T(rk.$$.fragment,L8),I3r=i(L8),C3e=n(L8,"P",{});var rHt=s(C3e);N3r=r(rHt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rHt.forEach(t),q3r=i(L8),hm=n(L8,"P",{});var Pie=s(hm);j3r=r(Pie,`Note:
Loading a model from its configuration file does `),w3e=n(Pie,"STRONG",{});var tHt=s(w3e);D3r=r(tHt,"not"),tHt.forEach(t),G3r=r(Pie,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(Pie,"A",{href:!0});var aHt=s(VK);O3r=r(aHt,"from_pretrained()"),aHt.forEach(t),V3r=r(Pie," to load the model weights."),Pie.forEach(t),X3r=i(L8),T(aC.$$.fragment,L8),L8.forEach(t),z3r=i(Ol),po=n(Ol,"DIV",{class:!0});var Ia=s(po);T(tk.$$.fragment,Ia),Q3r=i(Ia),A3e=n(Ia,"P",{});var nHt=s(A3e);W3r=r(nHt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),nHt.forEach(t),U3r=i(Ia),gn=n(Ia,"P",{});var y8=s(gn);H3r=r(y8,"The model class to instantiate is selected based on the "),L3e=n(y8,"CODE",{});var sHt=s(L3e);J3r=r(sHt,"model_type"),sHt.forEach(t),Y3r=r(y8,` property of the config object (either
passed as an argument or loaded from `),y3e=n(y8,"CODE",{});var lHt=s(y3e);K3r=r(lHt,"pretrained_model_name_or_path"),lHt.forEach(t),Z3r=r(y8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=n(y8,"CODE",{});var iHt=s(x3e);e5r=r(iHt,"pretrained_model_name_or_path"),iHt.forEach(t),o5r=r(y8,":"),y8.forEach(t),r5r=i(Ia),Pe=n(Ia,"UL",{});var Qe=s(Pe);nC=n(Qe,"LI",{});var SQe=s(nC);$3e=n(SQe,"STRONG",{});var dHt=s($3e);t5r=r(dHt,"data2vec-audio"),dHt.forEach(t),a5r=r(SQe," \u2014 "),XK=n(SQe,"A",{href:!0});var mHt=s(XK);n5r=r(mHt,"Data2VecAudioForSequenceClassification"),mHt.forEach(t),s5r=r(SQe," (Data2VecAudio model)"),SQe.forEach(t),l5r=i(Qe),sC=n(Qe,"LI",{});var RQe=s(sC);k3e=n(RQe,"STRONG",{});var cHt=s(k3e);i5r=r(cHt,"hubert"),cHt.forEach(t),d5r=r(RQe," \u2014 "),zK=n(RQe,"A",{href:!0});var fHt=s(zK);m5r=r(fHt,"HubertForSequenceClassification"),fHt.forEach(t),c5r=r(RQe," (Hubert model)"),RQe.forEach(t),f5r=i(Qe),lC=n(Qe,"LI",{});var PQe=s(lC);S3e=n(PQe,"STRONG",{});var gHt=s(S3e);g5r=r(gHt,"sew"),gHt.forEach(t),h5r=r(PQe," \u2014 "),QK=n(PQe,"A",{href:!0});var hHt=s(QK);u5r=r(hHt,"SEWForSequenceClassification"),hHt.forEach(t),p5r=r(PQe," (SEW model)"),PQe.forEach(t),_5r=i(Qe),iC=n(Qe,"LI",{});var BQe=s(iC);R3e=n(BQe,"STRONG",{});var uHt=s(R3e);b5r=r(uHt,"sew-d"),uHt.forEach(t),v5r=r(BQe," \u2014 "),WK=n(BQe,"A",{href:!0});var pHt=s(WK);F5r=r(pHt,"SEWDForSequenceClassification"),pHt.forEach(t),T5r=r(BQe," (SEW-D model)"),BQe.forEach(t),M5r=i(Qe),dC=n(Qe,"LI",{});var IQe=s(dC);P3e=n(IQe,"STRONG",{});var _Ht=s(P3e);E5r=r(_Ht,"unispeech"),_Ht.forEach(t),C5r=r(IQe," \u2014 "),UK=n(IQe,"A",{href:!0});var bHt=s(UK);w5r=r(bHt,"UniSpeechForSequenceClassification"),bHt.forEach(t),A5r=r(IQe," (UniSpeech model)"),IQe.forEach(t),L5r=i(Qe),mC=n(Qe,"LI",{});var NQe=s(mC);B3e=n(NQe,"STRONG",{});var vHt=s(B3e);y5r=r(vHt,"unispeech-sat"),vHt.forEach(t),x5r=r(NQe," \u2014 "),HK=n(NQe,"A",{href:!0});var FHt=s(HK);$5r=r(FHt,"UniSpeechSatForSequenceClassification"),FHt.forEach(t),k5r=r(NQe," (UniSpeechSat model)"),NQe.forEach(t),S5r=i(Qe),cC=n(Qe,"LI",{});var qQe=s(cC);I3e=n(qQe,"STRONG",{});var THt=s(I3e);R5r=r(THt,"wav2vec2"),THt.forEach(t),P5r=r(qQe," \u2014 "),JK=n(qQe,"A",{href:!0});var MHt=s(JK);B5r=r(MHt,"Wav2Vec2ForSequenceClassification"),MHt.forEach(t),I5r=r(qQe," (Wav2Vec2 model)"),qQe.forEach(t),N5r=i(Qe),fC=n(Qe,"LI",{});var jQe=s(fC);N3e=n(jQe,"STRONG",{});var EHt=s(N3e);q5r=r(EHt,"wav2vec2-conformer"),EHt.forEach(t),j5r=r(jQe," \u2014 "),YK=n(jQe,"A",{href:!0});var CHt=s(YK);D5r=r(CHt,"Wav2Vec2ConformerForSequenceClassification"),CHt.forEach(t),G5r=r(jQe," (Wav2Vec2-Conformer model)"),jQe.forEach(t),O5r=i(Qe),gC=n(Qe,"LI",{});var DQe=s(gC);q3e=n(DQe,"STRONG",{});var wHt=s(q3e);V5r=r(wHt,"wavlm"),wHt.forEach(t),X5r=r(DQe," \u2014 "),KK=n(DQe,"A",{href:!0});var AHt=s(KK);z5r=r(AHt,"WavLMForSequenceClassification"),AHt.forEach(t),Q5r=r(DQe," (WavLM model)"),DQe.forEach(t),Qe.forEach(t),W5r=i(Ia),hC=n(Ia,"P",{});var GQe=s(hC);U5r=r(GQe,"The model is set in evaluation mode by default using "),j3e=n(GQe,"CODE",{});var LHt=s(j3e);H5r=r(LHt,"model.eval()"),LHt.forEach(t),J5r=r(GQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D3e=n(GQe,"CODE",{});var yHt=s(D3e);Y5r=r(yHt,"model.train()"),yHt.forEach(t),GQe.forEach(t),K5r=i(Ia),T(uC.$$.fragment,Ia),Ia.forEach(t),Ol.forEach(t),Neo=i(c),um=n(c,"H2",{class:!0});var Yro=s(um);pC=n(Yro,"A",{id:!0,class:!0,href:!0});var xHt=s(pC);G3e=n(xHt,"SPAN",{});var $Ht=s(G3e);T(ak.$$.fragment,$Ht),$Ht.forEach(t),xHt.forEach(t),Z5r=i(Yro),O3e=n(Yro,"SPAN",{});var kHt=s(O3e);e0r=r(kHt,"AutoModelForAudioFrameClassification"),kHt.forEach(t),Yro.forEach(t),qeo=i(c),Yo=n(c,"DIV",{class:!0});var Vl=s(Yo);T(nk.$$.fragment,Vl),o0r=i(Vl),pm=n(Vl,"P",{});var Bie=s(pm);r0r=r(Bie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZK=n(Bie,"A",{href:!0});var SHt=s(ZK);t0r=r(SHt,"from_pretrained()"),SHt.forEach(t),a0r=r(Bie," class method or the "),eZ=n(Bie,"A",{href:!0});var RHt=s(eZ);n0r=r(RHt,"from_config()"),RHt.forEach(t),s0r=r(Bie,` class
method.`),Bie.forEach(t),l0r=i(Vl),sk=n(Vl,"P",{});var Kro=s(sk);i0r=r(Kro,"This class cannot be instantiated directly using "),V3e=n(Kro,"CODE",{});var PHt=s(V3e);d0r=r(PHt,"__init__()"),PHt.forEach(t),m0r=r(Kro," (throws an error)."),Kro.forEach(t),c0r=i(Vl),Bt=n(Vl,"DIV",{class:!0});var x8=s(Bt);T(lk.$$.fragment,x8),f0r=i(x8),X3e=n(x8,"P",{});var BHt=s(X3e);g0r=r(BHt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),BHt.forEach(t),h0r=i(x8),_m=n(x8,"P",{});var Iie=s(_m);u0r=r(Iie,`Note:
Loading a model from its configuration file does `),z3e=n(Iie,"STRONG",{});var IHt=s(z3e);p0r=r(IHt,"not"),IHt.forEach(t),_0r=r(Iie,` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=n(Iie,"A",{href:!0});var NHt=s(oZ);b0r=r(NHt,"from_pretrained()"),NHt.forEach(t),v0r=r(Iie," to load the model weights."),Iie.forEach(t),F0r=i(x8),T(_C.$$.fragment,x8),x8.forEach(t),T0r=i(Vl),_o=n(Vl,"DIV",{class:!0});var Na=s(_o);T(ik.$$.fragment,Na),M0r=i(Na),Q3e=n(Na,"P",{});var qHt=s(Q3e);E0r=r(qHt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),qHt.forEach(t),C0r=i(Na),hn=n(Na,"P",{});var $8=s(hn);w0r=r($8,"The model class to instantiate is selected based on the "),W3e=n($8,"CODE",{});var jHt=s(W3e);A0r=r(jHt,"model_type"),jHt.forEach(t),L0r=r($8,` property of the config object (either
passed as an argument or loaded from `),U3e=n($8,"CODE",{});var DHt=s(U3e);y0r=r(DHt,"pretrained_model_name_or_path"),DHt.forEach(t),x0r=r($8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=n($8,"CODE",{});var GHt=s(H3e);$0r=r(GHt,"pretrained_model_name_or_path"),GHt.forEach(t),k0r=r($8,":"),$8.forEach(t),S0r=i(Na),ct=n(Na,"UL",{});var Xl=s(ct);bC=n(Xl,"LI",{});var OQe=s(bC);J3e=n(OQe,"STRONG",{});var OHt=s(J3e);R0r=r(OHt,"data2vec-audio"),OHt.forEach(t),P0r=r(OQe," \u2014 "),rZ=n(OQe,"A",{href:!0});var VHt=s(rZ);B0r=r(VHt,"Data2VecAudioForAudioFrameClassification"),VHt.forEach(t),I0r=r(OQe," (Data2VecAudio model)"),OQe.forEach(t),N0r=i(Xl),vC=n(Xl,"LI",{});var VQe=s(vC);Y3e=n(VQe,"STRONG",{});var XHt=s(Y3e);q0r=r(XHt,"unispeech-sat"),XHt.forEach(t),j0r=r(VQe," \u2014 "),tZ=n(VQe,"A",{href:!0});var zHt=s(tZ);D0r=r(zHt,"UniSpeechSatForAudioFrameClassification"),zHt.forEach(t),G0r=r(VQe," (UniSpeechSat model)"),VQe.forEach(t),O0r=i(Xl),FC=n(Xl,"LI",{});var XQe=s(FC);K3e=n(XQe,"STRONG",{});var QHt=s(K3e);V0r=r(QHt,"wav2vec2"),QHt.forEach(t),X0r=r(XQe," \u2014 "),aZ=n(XQe,"A",{href:!0});var WHt=s(aZ);z0r=r(WHt,"Wav2Vec2ForAudioFrameClassification"),WHt.forEach(t),Q0r=r(XQe," (Wav2Vec2 model)"),XQe.forEach(t),W0r=i(Xl),TC=n(Xl,"LI",{});var zQe=s(TC);Z3e=n(zQe,"STRONG",{});var UHt=s(Z3e);U0r=r(UHt,"wav2vec2-conformer"),UHt.forEach(t),H0r=r(zQe," \u2014 "),nZ=n(zQe,"A",{href:!0});var HHt=s(nZ);J0r=r(HHt,"Wav2Vec2ConformerForAudioFrameClassification"),HHt.forEach(t),Y0r=r(zQe," (Wav2Vec2-Conformer model)"),zQe.forEach(t),K0r=i(Xl),MC=n(Xl,"LI",{});var QQe=s(MC);e5e=n(QQe,"STRONG",{});var JHt=s(e5e);Z0r=r(JHt,"wavlm"),JHt.forEach(t),ewr=r(QQe," \u2014 "),sZ=n(QQe,"A",{href:!0});var YHt=s(sZ);owr=r(YHt,"WavLMForAudioFrameClassification"),YHt.forEach(t),rwr=r(QQe," (WavLM model)"),QQe.forEach(t),Xl.forEach(t),twr=i(Na),EC=n(Na,"P",{});var WQe=s(EC);awr=r(WQe,"The model is set in evaluation mode by default using "),o5e=n(WQe,"CODE",{});var KHt=s(o5e);nwr=r(KHt,"model.eval()"),KHt.forEach(t),swr=r(WQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r5e=n(WQe,"CODE",{});var ZHt=s(r5e);lwr=r(ZHt,"model.train()"),ZHt.forEach(t),WQe.forEach(t),iwr=i(Na),T(CC.$$.fragment,Na),Na.forEach(t),Vl.forEach(t),jeo=i(c),bm=n(c,"H2",{class:!0});var Zro=s(bm);wC=n(Zro,"A",{id:!0,class:!0,href:!0});var eJt=s(wC);t5e=n(eJt,"SPAN",{});var oJt=s(t5e);T(dk.$$.fragment,oJt),oJt.forEach(t),eJt.forEach(t),dwr=i(Zro),a5e=n(Zro,"SPAN",{});var rJt=s(a5e);mwr=r(rJt,"AutoModelForCTC"),rJt.forEach(t),Zro.forEach(t),Deo=i(c),Ko=n(c,"DIV",{class:!0});var zl=s(Ko);T(mk.$$.fragment,zl),cwr=i(zl),vm=n(zl,"P",{});var Nie=s(vm);fwr=r(Nie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lZ=n(Nie,"A",{href:!0});var tJt=s(lZ);gwr=r(tJt,"from_pretrained()"),tJt.forEach(t),hwr=r(Nie," class method or the "),iZ=n(Nie,"A",{href:!0});var aJt=s(iZ);uwr=r(aJt,"from_config()"),aJt.forEach(t),pwr=r(Nie,` class
method.`),Nie.forEach(t),_wr=i(zl),ck=n(zl,"P",{});var eto=s(ck);bwr=r(eto,"This class cannot be instantiated directly using "),n5e=n(eto,"CODE",{});var nJt=s(n5e);vwr=r(nJt,"__init__()"),nJt.forEach(t),Fwr=r(eto," (throws an error)."),eto.forEach(t),Twr=i(zl),It=n(zl,"DIV",{class:!0});var k8=s(It);T(fk.$$.fragment,k8),Mwr=i(k8),s5e=n(k8,"P",{});var sJt=s(s5e);Ewr=r(sJt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),sJt.forEach(t),Cwr=i(k8),Fm=n(k8,"P",{});var qie=s(Fm);wwr=r(qie,`Note:
Loading a model from its configuration file does `),l5e=n(qie,"STRONG",{});var lJt=s(l5e);Awr=r(lJt,"not"),lJt.forEach(t),Lwr=r(qie,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(qie,"A",{href:!0});var iJt=s(dZ);ywr=r(iJt,"from_pretrained()"),iJt.forEach(t),xwr=r(qie," to load the model weights."),qie.forEach(t),$wr=i(k8),T(AC.$$.fragment,k8),k8.forEach(t),kwr=i(zl),bo=n(zl,"DIV",{class:!0});var qa=s(bo);T(gk.$$.fragment,qa),Swr=i(qa),i5e=n(qa,"P",{});var dJt=s(i5e);Rwr=r(dJt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),dJt.forEach(t),Pwr=i(qa),un=n(qa,"P",{});var S8=s(un);Bwr=r(S8,"The model class to instantiate is selected based on the "),d5e=n(S8,"CODE",{});var mJt=s(d5e);Iwr=r(mJt,"model_type"),mJt.forEach(t),Nwr=r(S8,` property of the config object (either
passed as an argument or loaded from `),m5e=n(S8,"CODE",{});var cJt=s(m5e);qwr=r(cJt,"pretrained_model_name_or_path"),cJt.forEach(t),jwr=r(S8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(S8,"CODE",{});var fJt=s(c5e);Dwr=r(fJt,"pretrained_model_name_or_path"),fJt.forEach(t),Gwr=r(S8,":"),S8.forEach(t),Owr=i(qa),Le=n(qa,"UL",{});var Ie=s(Le);LC=n(Ie,"LI",{});var UQe=s(LC);f5e=n(UQe,"STRONG",{});var gJt=s(f5e);Vwr=r(gJt,"data2vec-audio"),gJt.forEach(t),Xwr=r(UQe," \u2014 "),mZ=n(UQe,"A",{href:!0});var hJt=s(mZ);zwr=r(hJt,"Data2VecAudioForCTC"),hJt.forEach(t),Qwr=r(UQe," (Data2VecAudio model)"),UQe.forEach(t),Wwr=i(Ie),yC=n(Ie,"LI",{});var HQe=s(yC);g5e=n(HQe,"STRONG",{});var uJt=s(g5e);Uwr=r(uJt,"hubert"),uJt.forEach(t),Hwr=r(HQe," \u2014 "),cZ=n(HQe,"A",{href:!0});var pJt=s(cZ);Jwr=r(pJt,"HubertForCTC"),pJt.forEach(t),Ywr=r(HQe," (Hubert model)"),HQe.forEach(t),Kwr=i(Ie),xC=n(Ie,"LI",{});var JQe=s(xC);h5e=n(JQe,"STRONG",{});var _Jt=s(h5e);Zwr=r(_Jt,"mctct"),_Jt.forEach(t),eAr=r(JQe," \u2014 "),fZ=n(JQe,"A",{href:!0});var bJt=s(fZ);oAr=r(bJt,"MCTCTForCTC"),bJt.forEach(t),rAr=r(JQe," (M-CTC-T model)"),JQe.forEach(t),tAr=i(Ie),$C=n(Ie,"LI",{});var YQe=s($C);u5e=n(YQe,"STRONG",{});var vJt=s(u5e);aAr=r(vJt,"sew"),vJt.forEach(t),nAr=r(YQe," \u2014 "),gZ=n(YQe,"A",{href:!0});var FJt=s(gZ);sAr=r(FJt,"SEWForCTC"),FJt.forEach(t),lAr=r(YQe," (SEW model)"),YQe.forEach(t),iAr=i(Ie),kC=n(Ie,"LI",{});var KQe=s(kC);p5e=n(KQe,"STRONG",{});var TJt=s(p5e);dAr=r(TJt,"sew-d"),TJt.forEach(t),mAr=r(KQe," \u2014 "),hZ=n(KQe,"A",{href:!0});var MJt=s(hZ);cAr=r(MJt,"SEWDForCTC"),MJt.forEach(t),fAr=r(KQe," (SEW-D model)"),KQe.forEach(t),gAr=i(Ie),SC=n(Ie,"LI",{});var ZQe=s(SC);_5e=n(ZQe,"STRONG",{});var EJt=s(_5e);hAr=r(EJt,"unispeech"),EJt.forEach(t),uAr=r(ZQe," \u2014 "),uZ=n(ZQe,"A",{href:!0});var CJt=s(uZ);pAr=r(CJt,"UniSpeechForCTC"),CJt.forEach(t),_Ar=r(ZQe," (UniSpeech model)"),ZQe.forEach(t),bAr=i(Ie),RC=n(Ie,"LI",{});var eWe=s(RC);b5e=n(eWe,"STRONG",{});var wJt=s(b5e);vAr=r(wJt,"unispeech-sat"),wJt.forEach(t),FAr=r(eWe," \u2014 "),pZ=n(eWe,"A",{href:!0});var AJt=s(pZ);TAr=r(AJt,"UniSpeechSatForCTC"),AJt.forEach(t),MAr=r(eWe," (UniSpeechSat model)"),eWe.forEach(t),EAr=i(Ie),PC=n(Ie,"LI",{});var oWe=s(PC);v5e=n(oWe,"STRONG",{});var LJt=s(v5e);CAr=r(LJt,"wav2vec2"),LJt.forEach(t),wAr=r(oWe," \u2014 "),_Z=n(oWe,"A",{href:!0});var yJt=s(_Z);AAr=r(yJt,"Wav2Vec2ForCTC"),yJt.forEach(t),LAr=r(oWe," (Wav2Vec2 model)"),oWe.forEach(t),yAr=i(Ie),BC=n(Ie,"LI",{});var rWe=s(BC);F5e=n(rWe,"STRONG",{});var xJt=s(F5e);xAr=r(xJt,"wav2vec2-conformer"),xJt.forEach(t),$Ar=r(rWe," \u2014 "),bZ=n(rWe,"A",{href:!0});var $Jt=s(bZ);kAr=r($Jt,"Wav2Vec2ConformerForCTC"),$Jt.forEach(t),SAr=r(rWe," (Wav2Vec2-Conformer model)"),rWe.forEach(t),RAr=i(Ie),IC=n(Ie,"LI",{});var tWe=s(IC);T5e=n(tWe,"STRONG",{});var kJt=s(T5e);PAr=r(kJt,"wavlm"),kJt.forEach(t),BAr=r(tWe," \u2014 "),vZ=n(tWe,"A",{href:!0});var SJt=s(vZ);IAr=r(SJt,"WavLMForCTC"),SJt.forEach(t),NAr=r(tWe," (WavLM model)"),tWe.forEach(t),Ie.forEach(t),qAr=i(qa),NC=n(qa,"P",{});var aWe=s(NC);jAr=r(aWe,"The model is set in evaluation mode by default using "),M5e=n(aWe,"CODE",{});var RJt=s(M5e);DAr=r(RJt,"model.eval()"),RJt.forEach(t),GAr=r(aWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E5e=n(aWe,"CODE",{});var PJt=s(E5e);OAr=r(PJt,"model.train()"),PJt.forEach(t),aWe.forEach(t),VAr=i(qa),T(qC.$$.fragment,qa),qa.forEach(t),zl.forEach(t),Geo=i(c),Tm=n(c,"H2",{class:!0});var oto=s(Tm);jC=n(oto,"A",{id:!0,class:!0,href:!0});var BJt=s(jC);C5e=n(BJt,"SPAN",{});var IJt=s(C5e);T(hk.$$.fragment,IJt),IJt.forEach(t),BJt.forEach(t),XAr=i(oto),w5e=n(oto,"SPAN",{});var NJt=s(w5e);zAr=r(NJt,"AutoModelForSpeechSeq2Seq"),NJt.forEach(t),oto.forEach(t),Oeo=i(c),Zo=n(c,"DIV",{class:!0});var Ql=s(Zo);T(uk.$$.fragment,Ql),QAr=i(Ql),Mm=n(Ql,"P",{});var jie=s(Mm);WAr=r(jie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FZ=n(jie,"A",{href:!0});var qJt=s(FZ);UAr=r(qJt,"from_pretrained()"),qJt.forEach(t),HAr=r(jie," class method or the "),TZ=n(jie,"A",{href:!0});var jJt=s(TZ);JAr=r(jJt,"from_config()"),jJt.forEach(t),YAr=r(jie,` class
method.`),jie.forEach(t),KAr=i(Ql),pk=n(Ql,"P",{});var rto=s(pk);ZAr=r(rto,"This class cannot be instantiated directly using "),A5e=n(rto,"CODE",{});var DJt=s(A5e);e6r=r(DJt,"__init__()"),DJt.forEach(t),o6r=r(rto," (throws an error)."),rto.forEach(t),r6r=i(Ql),Nt=n(Ql,"DIV",{class:!0});var R8=s(Nt);T(_k.$$.fragment,R8),t6r=i(R8),L5e=n(R8,"P",{});var GJt=s(L5e);a6r=r(GJt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GJt.forEach(t),n6r=i(R8),Em=n(R8,"P",{});var Die=s(Em);s6r=r(Die,`Note:
Loading a model from its configuration file does `),y5e=n(Die,"STRONG",{});var OJt=s(y5e);l6r=r(OJt,"not"),OJt.forEach(t),i6r=r(Die,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(Die,"A",{href:!0});var VJt=s(MZ);d6r=r(VJt,"from_pretrained()"),VJt.forEach(t),m6r=r(Die," to load the model weights."),Die.forEach(t),c6r=i(R8),T(DC.$$.fragment,R8),R8.forEach(t),f6r=i(Ql),vo=n(Ql,"DIV",{class:!0});var ja=s(vo);T(bk.$$.fragment,ja),g6r=i(ja),x5e=n(ja,"P",{});var XJt=s(x5e);h6r=r(XJt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),XJt.forEach(t),u6r=i(ja),pn=n(ja,"P",{});var P8=s(pn);p6r=r(P8,"The model class to instantiate is selected based on the "),$5e=n(P8,"CODE",{});var zJt=s($5e);_6r=r(zJt,"model_type"),zJt.forEach(t),b6r=r(P8,` property of the config object (either
passed as an argument or loaded from `),k5e=n(P8,"CODE",{});var QJt=s(k5e);v6r=r(QJt,"pretrained_model_name_or_path"),QJt.forEach(t),F6r=r(P8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(P8,"CODE",{});var WJt=s(S5e);T6r=r(WJt,"pretrained_model_name_or_path"),WJt.forEach(t),M6r=r(P8,":"),P8.forEach(t),E6r=i(ja),vk=n(ja,"UL",{});var tto=s(vk);GC=n(tto,"LI",{});var nWe=s(GC);R5e=n(nWe,"STRONG",{});var UJt=s(R5e);C6r=r(UJt,"speech-encoder-decoder"),UJt.forEach(t),w6r=r(nWe," \u2014 "),EZ=n(nWe,"A",{href:!0});var HJt=s(EZ);A6r=r(HJt,"SpeechEncoderDecoderModel"),HJt.forEach(t),L6r=r(nWe," (Speech Encoder decoder model)"),nWe.forEach(t),y6r=i(tto),OC=n(tto,"LI",{});var sWe=s(OC);P5e=n(sWe,"STRONG",{});var JJt=s(P5e);x6r=r(JJt,"speech_to_text"),JJt.forEach(t),$6r=r(sWe," \u2014 "),CZ=n(sWe,"A",{href:!0});var YJt=s(CZ);k6r=r(YJt,"Speech2TextForConditionalGeneration"),YJt.forEach(t),S6r=r(sWe," (Speech2Text model)"),sWe.forEach(t),tto.forEach(t),R6r=i(ja),VC=n(ja,"P",{});var lWe=s(VC);P6r=r(lWe,"The model is set in evaluation mode by default using "),B5e=n(lWe,"CODE",{});var KJt=s(B5e);B6r=r(KJt,"model.eval()"),KJt.forEach(t),I6r=r(lWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I5e=n(lWe,"CODE",{});var ZJt=s(I5e);N6r=r(ZJt,"model.train()"),ZJt.forEach(t),lWe.forEach(t),q6r=i(ja),T(XC.$$.fragment,ja),ja.forEach(t),Ql.forEach(t),Veo=i(c),Cm=n(c,"H2",{class:!0});var ato=s(Cm);zC=n(ato,"A",{id:!0,class:!0,href:!0});var eYt=s(zC);N5e=n(eYt,"SPAN",{});var oYt=s(N5e);T(Fk.$$.fragment,oYt),oYt.forEach(t),eYt.forEach(t),j6r=i(ato),q5e=n(ato,"SPAN",{});var rYt=s(q5e);D6r=r(rYt,"AutoModelForAudioXVector"),rYt.forEach(t),ato.forEach(t),Xeo=i(c),er=n(c,"DIV",{class:!0});var Wl=s(er);T(Tk.$$.fragment,Wl),G6r=i(Wl),wm=n(Wl,"P",{});var Gie=s(wm);O6r=r(Gie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wZ=n(Gie,"A",{href:!0});var tYt=s(wZ);V6r=r(tYt,"from_pretrained()"),tYt.forEach(t),X6r=r(Gie," class method or the "),AZ=n(Gie,"A",{href:!0});var aYt=s(AZ);z6r=r(aYt,"from_config()"),aYt.forEach(t),Q6r=r(Gie,` class
method.`),Gie.forEach(t),W6r=i(Wl),Mk=n(Wl,"P",{});var nto=s(Mk);U6r=r(nto,"This class cannot be instantiated directly using "),j5e=n(nto,"CODE",{});var nYt=s(j5e);H6r=r(nYt,"__init__()"),nYt.forEach(t),J6r=r(nto," (throws an error)."),nto.forEach(t),Y6r=i(Wl),qt=n(Wl,"DIV",{class:!0});var B8=s(qt);T(Ek.$$.fragment,B8),K6r=i(B8),D5e=n(B8,"P",{});var sYt=s(D5e);Z6r=r(sYt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),sYt.forEach(t),e7r=i(B8),Am=n(B8,"P",{});var Oie=s(Am);o7r=r(Oie,`Note:
Loading a model from its configuration file does `),G5e=n(Oie,"STRONG",{});var lYt=s(G5e);r7r=r(lYt,"not"),lYt.forEach(t),t7r=r(Oie,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(Oie,"A",{href:!0});var iYt=s(LZ);a7r=r(iYt,"from_pretrained()"),iYt.forEach(t),n7r=r(Oie," to load the model weights."),Oie.forEach(t),s7r=i(B8),T(QC.$$.fragment,B8),B8.forEach(t),l7r=i(Wl),Fo=n(Wl,"DIV",{class:!0});var Da=s(Fo);T(Ck.$$.fragment,Da),i7r=i(Da),O5e=n(Da,"P",{});var dYt=s(O5e);d7r=r(dYt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),dYt.forEach(t),m7r=i(Da),_n=n(Da,"P",{});var I8=s(_n);c7r=r(I8,"The model class to instantiate is selected based on the "),V5e=n(I8,"CODE",{});var mYt=s(V5e);f7r=r(mYt,"model_type"),mYt.forEach(t),g7r=r(I8,` property of the config object (either
passed as an argument or loaded from `),X5e=n(I8,"CODE",{});var cYt=s(X5e);h7r=r(cYt,"pretrained_model_name_or_path"),cYt.forEach(t),u7r=r(I8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=n(I8,"CODE",{});var fYt=s(z5e);p7r=r(fYt,"pretrained_model_name_or_path"),fYt.forEach(t),_7r=r(I8,":"),I8.forEach(t),b7r=i(Da),ft=n(Da,"UL",{});var Ul=s(ft);WC=n(Ul,"LI",{});var iWe=s(WC);Q5e=n(iWe,"STRONG",{});var gYt=s(Q5e);v7r=r(gYt,"data2vec-audio"),gYt.forEach(t),F7r=r(iWe," \u2014 "),yZ=n(iWe,"A",{href:!0});var hYt=s(yZ);T7r=r(hYt,"Data2VecAudioForXVector"),hYt.forEach(t),M7r=r(iWe," (Data2VecAudio model)"),iWe.forEach(t),E7r=i(Ul),UC=n(Ul,"LI",{});var dWe=s(UC);W5e=n(dWe,"STRONG",{});var uYt=s(W5e);C7r=r(uYt,"unispeech-sat"),uYt.forEach(t),w7r=r(dWe," \u2014 "),xZ=n(dWe,"A",{href:!0});var pYt=s(xZ);A7r=r(pYt,"UniSpeechSatForXVector"),pYt.forEach(t),L7r=r(dWe," (UniSpeechSat model)"),dWe.forEach(t),y7r=i(Ul),HC=n(Ul,"LI",{});var mWe=s(HC);U5e=n(mWe,"STRONG",{});var _Yt=s(U5e);x7r=r(_Yt,"wav2vec2"),_Yt.forEach(t),$7r=r(mWe," \u2014 "),$Z=n(mWe,"A",{href:!0});var bYt=s($Z);k7r=r(bYt,"Wav2Vec2ForXVector"),bYt.forEach(t),S7r=r(mWe," (Wav2Vec2 model)"),mWe.forEach(t),R7r=i(Ul),JC=n(Ul,"LI",{});var cWe=s(JC);H5e=n(cWe,"STRONG",{});var vYt=s(H5e);P7r=r(vYt,"wav2vec2-conformer"),vYt.forEach(t),B7r=r(cWe," \u2014 "),kZ=n(cWe,"A",{href:!0});var FYt=s(kZ);I7r=r(FYt,"Wav2Vec2ConformerForXVector"),FYt.forEach(t),N7r=r(cWe," (Wav2Vec2-Conformer model)"),cWe.forEach(t),q7r=i(Ul),YC=n(Ul,"LI",{});var fWe=s(YC);J5e=n(fWe,"STRONG",{});var TYt=s(J5e);j7r=r(TYt,"wavlm"),TYt.forEach(t),D7r=r(fWe," \u2014 "),SZ=n(fWe,"A",{href:!0});var MYt=s(SZ);G7r=r(MYt,"WavLMForXVector"),MYt.forEach(t),O7r=r(fWe," (WavLM model)"),fWe.forEach(t),Ul.forEach(t),V7r=i(Da),KC=n(Da,"P",{});var gWe=s(KC);X7r=r(gWe,"The model is set in evaluation mode by default using "),Y5e=n(gWe,"CODE",{});var EYt=s(Y5e);z7r=r(EYt,"model.eval()"),EYt.forEach(t),Q7r=r(gWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K5e=n(gWe,"CODE",{});var CYt=s(K5e);W7r=r(CYt,"model.train()"),CYt.forEach(t),gWe.forEach(t),U7r=i(Da),T(ZC.$$.fragment,Da),Da.forEach(t),Wl.forEach(t),zeo=i(c),Lm=n(c,"H2",{class:!0});var sto=s(Lm);e3=n(sto,"A",{id:!0,class:!0,href:!0});var wYt=s(e3);Z5e=n(wYt,"SPAN",{});var AYt=s(Z5e);T(wk.$$.fragment,AYt),AYt.forEach(t),wYt.forEach(t),H7r=i(sto),e0e=n(sto,"SPAN",{});var LYt=s(e0e);J7r=r(LYt,"AutoModelForMaskedImageModeling"),LYt.forEach(t),sto.forEach(t),Qeo=i(c),or=n(c,"DIV",{class:!0});var Hl=s(or);T(Ak.$$.fragment,Hl),Y7r=i(Hl),ym=n(Hl,"P",{});var Vie=s(ym);K7r=r(Vie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RZ=n(Vie,"A",{href:!0});var yYt=s(RZ);Z7r=r(yYt,"from_pretrained()"),yYt.forEach(t),eLr=r(Vie," class method or the "),PZ=n(Vie,"A",{href:!0});var xYt=s(PZ);oLr=r(xYt,"from_config()"),xYt.forEach(t),rLr=r(Vie,` class
method.`),Vie.forEach(t),tLr=i(Hl),Lk=n(Hl,"P",{});var lto=s(Lk);aLr=r(lto,"This class cannot be instantiated directly using "),o0e=n(lto,"CODE",{});var $Yt=s(o0e);nLr=r($Yt,"__init__()"),$Yt.forEach(t),sLr=r(lto," (throws an error)."),lto.forEach(t),lLr=i(Hl),jt=n(Hl,"DIV",{class:!0});var N8=s(jt);T(yk.$$.fragment,N8),iLr=i(N8),r0e=n(N8,"P",{});var kYt=s(r0e);dLr=r(kYt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),kYt.forEach(t),mLr=i(N8),xm=n(N8,"P",{});var Xie=s(xm);cLr=r(Xie,`Note:
Loading a model from its configuration file does `),t0e=n(Xie,"STRONG",{});var SYt=s(t0e);fLr=r(SYt,"not"),SYt.forEach(t),gLr=r(Xie,` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=n(Xie,"A",{href:!0});var RYt=s(BZ);hLr=r(RYt,"from_pretrained()"),RYt.forEach(t),uLr=r(Xie," to load the model weights."),Xie.forEach(t),pLr=i(N8),T(o3.$$.fragment,N8),N8.forEach(t),_Lr=i(Hl),To=n(Hl,"DIV",{class:!0});var Ga=s(To);T(xk.$$.fragment,Ga),bLr=i(Ga),a0e=n(Ga,"P",{});var PYt=s(a0e);vLr=r(PYt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),PYt.forEach(t),FLr=i(Ga),bn=n(Ga,"P",{});var q8=s(bn);TLr=r(q8,"The model class to instantiate is selected based on the "),n0e=n(q8,"CODE",{});var BYt=s(n0e);MLr=r(BYt,"model_type"),BYt.forEach(t),ELr=r(q8,` property of the config object (either
passed as an argument or loaded from `),s0e=n(q8,"CODE",{});var IYt=s(s0e);CLr=r(IYt,"pretrained_model_name_or_path"),IYt.forEach(t),wLr=r(q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=n(q8,"CODE",{});var NYt=s(l0e);ALr=r(NYt,"pretrained_model_name_or_path"),NYt.forEach(t),LLr=r(q8,":"),q8.forEach(t),yLr=i(Ga),vn=n(Ga,"UL",{});var j8=s(vn);r3=n(j8,"LI",{});var hWe=s(r3);i0e=n(hWe,"STRONG",{});var qYt=s(i0e);xLr=r(qYt,"deit"),qYt.forEach(t),$Lr=r(hWe," \u2014 "),IZ=n(hWe,"A",{href:!0});var jYt=s(IZ);kLr=r(jYt,"DeiTForMaskedImageModeling"),jYt.forEach(t),SLr=r(hWe," (DeiT model)"),hWe.forEach(t),RLr=i(j8),t3=n(j8,"LI",{});var uWe=s(t3);d0e=n(uWe,"STRONG",{});var DYt=s(d0e);PLr=r(DYt,"swin"),DYt.forEach(t),BLr=r(uWe," \u2014 "),NZ=n(uWe,"A",{href:!0});var GYt=s(NZ);ILr=r(GYt,"SwinForMaskedImageModeling"),GYt.forEach(t),NLr=r(uWe," (Swin Transformer model)"),uWe.forEach(t),qLr=i(j8),a3=n(j8,"LI",{});var pWe=s(a3);m0e=n(pWe,"STRONG",{});var OYt=s(m0e);jLr=r(OYt,"swinv2"),OYt.forEach(t),DLr=r(pWe," \u2014 "),qZ=n(pWe,"A",{href:!0});var VYt=s(qZ);GLr=r(VYt,"Swinv2ForMaskedImageModeling"),VYt.forEach(t),OLr=r(pWe," (Swin Transformer V2 model)"),pWe.forEach(t),VLr=i(j8),n3=n(j8,"LI",{});var _We=s(n3);c0e=n(_We,"STRONG",{});var XYt=s(c0e);XLr=r(XYt,"vit"),XYt.forEach(t),zLr=r(_We," \u2014 "),jZ=n(_We,"A",{href:!0});var zYt=s(jZ);QLr=r(zYt,"ViTForMaskedImageModeling"),zYt.forEach(t),WLr=r(_We," (ViT model)"),_We.forEach(t),j8.forEach(t),ULr=i(Ga),s3=n(Ga,"P",{});var bWe=s(s3);HLr=r(bWe,"The model is set in evaluation mode by default using "),f0e=n(bWe,"CODE",{});var QYt=s(f0e);JLr=r(QYt,"model.eval()"),QYt.forEach(t),YLr=r(bWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g0e=n(bWe,"CODE",{});var WYt=s(g0e);KLr=r(WYt,"model.train()"),WYt.forEach(t),bWe.forEach(t),ZLr=i(Ga),T(l3.$$.fragment,Ga),Ga.forEach(t),Hl.forEach(t),Weo=i(c),$m=n(c,"H2",{class:!0});var ito=s($m);i3=n(ito,"A",{id:!0,class:!0,href:!0});var UYt=s(i3);h0e=n(UYt,"SPAN",{});var HYt=s(h0e);T($k.$$.fragment,HYt),HYt.forEach(t),UYt.forEach(t),eyr=i(ito),u0e=n(ito,"SPAN",{});var JYt=s(u0e);oyr=r(JYt,"AutoModelForObjectDetection"),JYt.forEach(t),ito.forEach(t),Ueo=i(c),rr=n(c,"DIV",{class:!0});var Jl=s(rr);T(kk.$$.fragment,Jl),ryr=i(Jl),km=n(Jl,"P",{});var zie=s(km);tyr=r(zie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DZ=n(zie,"A",{href:!0});var YYt=s(DZ);ayr=r(YYt,"from_pretrained()"),YYt.forEach(t),nyr=r(zie," class method or the "),GZ=n(zie,"A",{href:!0});var KYt=s(GZ);syr=r(KYt,"from_config()"),KYt.forEach(t),lyr=r(zie,` class
method.`),zie.forEach(t),iyr=i(Jl),Sk=n(Jl,"P",{});var dto=s(Sk);dyr=r(dto,"This class cannot be instantiated directly using "),p0e=n(dto,"CODE",{});var ZYt=s(p0e);myr=r(ZYt,"__init__()"),ZYt.forEach(t),cyr=r(dto," (throws an error)."),dto.forEach(t),fyr=i(Jl),Dt=n(Jl,"DIV",{class:!0});var D8=s(Dt);T(Rk.$$.fragment,D8),gyr=i(D8),_0e=n(D8,"P",{});var eKt=s(_0e);hyr=r(eKt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),eKt.forEach(t),uyr=i(D8),Sm=n(D8,"P",{});var Qie=s(Sm);pyr=r(Qie,`Note:
Loading a model from its configuration file does `),b0e=n(Qie,"STRONG",{});var oKt=s(b0e);_yr=r(oKt,"not"),oKt.forEach(t),byr=r(Qie,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Qie,"A",{href:!0});var rKt=s(OZ);vyr=r(rKt,"from_pretrained()"),rKt.forEach(t),Fyr=r(Qie," to load the model weights."),Qie.forEach(t),Tyr=i(D8),T(d3.$$.fragment,D8),D8.forEach(t),Myr=i(Jl),Mo=n(Jl,"DIV",{class:!0});var Oa=s(Mo);T(Pk.$$.fragment,Oa),Eyr=i(Oa),v0e=n(Oa,"P",{});var tKt=s(v0e);Cyr=r(tKt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tKt.forEach(t),wyr=i(Oa),Fn=n(Oa,"P",{});var G8=s(Fn);Ayr=r(G8,"The model class to instantiate is selected based on the "),F0e=n(G8,"CODE",{});var aKt=s(F0e);Lyr=r(aKt,"model_type"),aKt.forEach(t),yyr=r(G8,` property of the config object (either
passed as an argument or loaded from `),T0e=n(G8,"CODE",{});var nKt=s(T0e);xyr=r(nKt,"pretrained_model_name_or_path"),nKt.forEach(t),$yr=r(G8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=n(G8,"CODE",{});var sKt=s(M0e);kyr=r(sKt,"pretrained_model_name_or_path"),sKt.forEach(t),Syr=r(G8,":"),G8.forEach(t),Ryr=i(Oa),Tn=n(Oa,"UL",{});var O8=s(Tn);m3=n(O8,"LI",{});var vWe=s(m3);E0e=n(vWe,"STRONG",{});var lKt=s(E0e);Pyr=r(lKt,"conditional_detr"),lKt.forEach(t),Byr=r(vWe," \u2014 "),VZ=n(vWe,"A",{href:!0});var iKt=s(VZ);Iyr=r(iKt,"ConditionalDetrForObjectDetection"),iKt.forEach(t),Nyr=r(vWe," (Conditional DETR model)"),vWe.forEach(t),qyr=i(O8),c3=n(O8,"LI",{});var FWe=s(c3);C0e=n(FWe,"STRONG",{});var dKt=s(C0e);jyr=r(dKt,"deformable_detr"),dKt.forEach(t),Dyr=r(FWe," \u2014 "),XZ=n(FWe,"A",{href:!0});var mKt=s(XZ);Gyr=r(mKt,"DeformableDetrForObjectDetection"),mKt.forEach(t),Oyr=r(FWe," (Deformable DETR model)"),FWe.forEach(t),Vyr=i(O8),f3=n(O8,"LI",{});var TWe=s(f3);w0e=n(TWe,"STRONG",{});var cKt=s(w0e);Xyr=r(cKt,"detr"),cKt.forEach(t),zyr=r(TWe," \u2014 "),zZ=n(TWe,"A",{href:!0});var fKt=s(zZ);Qyr=r(fKt,"DetrForObjectDetection"),fKt.forEach(t),Wyr=r(TWe," (DETR model)"),TWe.forEach(t),Uyr=i(O8),g3=n(O8,"LI",{});var MWe=s(g3);A0e=n(MWe,"STRONG",{});var gKt=s(A0e);Hyr=r(gKt,"yolos"),gKt.forEach(t),Jyr=r(MWe," \u2014 "),QZ=n(MWe,"A",{href:!0});var hKt=s(QZ);Yyr=r(hKt,"YolosForObjectDetection"),hKt.forEach(t),Kyr=r(MWe," (YOLOS model)"),MWe.forEach(t),O8.forEach(t),Zyr=i(Oa),h3=n(Oa,"P",{});var EWe=s(h3);e8r=r(EWe,"The model is set in evaluation mode by default using "),L0e=n(EWe,"CODE",{});var uKt=s(L0e);o8r=r(uKt,"model.eval()"),uKt.forEach(t),r8r=r(EWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y0e=n(EWe,"CODE",{});var pKt=s(y0e);t8r=r(pKt,"model.train()"),pKt.forEach(t),EWe.forEach(t),a8r=i(Oa),T(u3.$$.fragment,Oa),Oa.forEach(t),Jl.forEach(t),Heo=i(c),Rm=n(c,"H2",{class:!0});var mto=s(Rm);p3=n(mto,"A",{id:!0,class:!0,href:!0});var _Kt=s(p3);x0e=n(_Kt,"SPAN",{});var bKt=s(x0e);T(Bk.$$.fragment,bKt),bKt.forEach(t),_Kt.forEach(t),n8r=i(mto),$0e=n(mto,"SPAN",{});var vKt=s($0e);s8r=r(vKt,"AutoModelForImageSegmentation"),vKt.forEach(t),mto.forEach(t),Jeo=i(c),tr=n(c,"DIV",{class:!0});var Yl=s(tr);T(Ik.$$.fragment,Yl),l8r=i(Yl),Pm=n(Yl,"P",{});var Wie=s(Pm);i8r=r(Wie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WZ=n(Wie,"A",{href:!0});var FKt=s(WZ);d8r=r(FKt,"from_pretrained()"),FKt.forEach(t),m8r=r(Wie," class method or the "),UZ=n(Wie,"A",{href:!0});var TKt=s(UZ);c8r=r(TKt,"from_config()"),TKt.forEach(t),f8r=r(Wie,` class
method.`),Wie.forEach(t),g8r=i(Yl),Nk=n(Yl,"P",{});var cto=s(Nk);h8r=r(cto,"This class cannot be instantiated directly using "),k0e=n(cto,"CODE",{});var MKt=s(k0e);u8r=r(MKt,"__init__()"),MKt.forEach(t),p8r=r(cto," (throws an error)."),cto.forEach(t),_8r=i(Yl),Gt=n(Yl,"DIV",{class:!0});var V8=s(Gt);T(qk.$$.fragment,V8),b8r=i(V8),S0e=n(V8,"P",{});var EKt=s(S0e);v8r=r(EKt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),EKt.forEach(t),F8r=i(V8),Bm=n(V8,"P",{});var Uie=s(Bm);T8r=r(Uie,`Note:
Loading a model from its configuration file does `),R0e=n(Uie,"STRONG",{});var CKt=s(R0e);M8r=r(CKt,"not"),CKt.forEach(t),E8r=r(Uie,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(Uie,"A",{href:!0});var wKt=s(HZ);C8r=r(wKt,"from_pretrained()"),wKt.forEach(t),w8r=r(Uie," to load the model weights."),Uie.forEach(t),A8r=i(V8),T(_3.$$.fragment,V8),V8.forEach(t),L8r=i(Yl),Eo=n(Yl,"DIV",{class:!0});var Va=s(Eo);T(jk.$$.fragment,Va),y8r=i(Va),P0e=n(Va,"P",{});var AKt=s(P0e);x8r=r(AKt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),AKt.forEach(t),$8r=i(Va),Mn=n(Va,"P",{});var X8=s(Mn);k8r=r(X8,"The model class to instantiate is selected based on the "),B0e=n(X8,"CODE",{});var LKt=s(B0e);S8r=r(LKt,"model_type"),LKt.forEach(t),R8r=r(X8,` property of the config object (either
passed as an argument or loaded from `),I0e=n(X8,"CODE",{});var yKt=s(I0e);P8r=r(yKt,"pretrained_model_name_or_path"),yKt.forEach(t),B8r=r(X8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=n(X8,"CODE",{});var xKt=s(N0e);I8r=r(xKt,"pretrained_model_name_or_path"),xKt.forEach(t),N8r=r(X8,":"),X8.forEach(t),q8r=i(Va),q0e=n(Va,"UL",{});var $Kt=s(q0e);b3=n($Kt,"LI",{});var CWe=s(b3);j0e=n(CWe,"STRONG",{});var kKt=s(j0e);j8r=r(kKt,"detr"),kKt.forEach(t),D8r=r(CWe," \u2014 "),JZ=n(CWe,"A",{href:!0});var SKt=s(JZ);G8r=r(SKt,"DetrForSegmentation"),SKt.forEach(t),O8r=r(CWe," (DETR model)"),CWe.forEach(t),$Kt.forEach(t),V8r=i(Va),v3=n(Va,"P",{});var wWe=s(v3);X8r=r(wWe,"The model is set in evaluation mode by default using "),D0e=n(wWe,"CODE",{});var RKt=s(D0e);z8r=r(RKt,"model.eval()"),RKt.forEach(t),Q8r=r(wWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G0e=n(wWe,"CODE",{});var PKt=s(G0e);W8r=r(PKt,"model.train()"),PKt.forEach(t),wWe.forEach(t),U8r=i(Va),T(F3.$$.fragment,Va),Va.forEach(t),Yl.forEach(t),Yeo=i(c),Im=n(c,"H2",{class:!0});var fto=s(Im);T3=n(fto,"A",{id:!0,class:!0,href:!0});var BKt=s(T3);O0e=n(BKt,"SPAN",{});var IKt=s(O0e);T(Dk.$$.fragment,IKt),IKt.forEach(t),BKt.forEach(t),H8r=i(fto),V0e=n(fto,"SPAN",{});var NKt=s(V0e);J8r=r(NKt,"AutoModelForSemanticSegmentation"),NKt.forEach(t),fto.forEach(t),Keo=i(c),ar=n(c,"DIV",{class:!0});var Kl=s(ar);T(Gk.$$.fragment,Kl),Y8r=i(Kl),Nm=n(Kl,"P",{});var Hie=s(Nm);K8r=r(Hie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YZ=n(Hie,"A",{href:!0});var qKt=s(YZ);Z8r=r(qKt,"from_pretrained()"),qKt.forEach(t),e9r=r(Hie," class method or the "),KZ=n(Hie,"A",{href:!0});var jKt=s(KZ);o9r=r(jKt,"from_config()"),jKt.forEach(t),r9r=r(Hie,` class
method.`),Hie.forEach(t),t9r=i(Kl),Ok=n(Kl,"P",{});var gto=s(Ok);a9r=r(gto,"This class cannot be instantiated directly using "),X0e=n(gto,"CODE",{});var DKt=s(X0e);n9r=r(DKt,"__init__()"),DKt.forEach(t),s9r=r(gto," (throws an error)."),gto.forEach(t),l9r=i(Kl),Ot=n(Kl,"DIV",{class:!0});var z8=s(Ot);T(Vk.$$.fragment,z8),i9r=i(z8),z0e=n(z8,"P",{});var GKt=s(z0e);d9r=r(GKt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GKt.forEach(t),m9r=i(z8),qm=n(z8,"P",{});var Jie=s(qm);c9r=r(Jie,`Note:
Loading a model from its configuration file does `),Q0e=n(Jie,"STRONG",{});var OKt=s(Q0e);f9r=r(OKt,"not"),OKt.forEach(t),g9r=r(Jie,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(Jie,"A",{href:!0});var VKt=s(ZZ);h9r=r(VKt,"from_pretrained()"),VKt.forEach(t),u9r=r(Jie," to load the model weights."),Jie.forEach(t),p9r=i(z8),T(M3.$$.fragment,z8),z8.forEach(t),_9r=i(Kl),Co=n(Kl,"DIV",{class:!0});var Xa=s(Co);T(Xk.$$.fragment,Xa),b9r=i(Xa),W0e=n(Xa,"P",{});var XKt=s(W0e);v9r=r(XKt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XKt.forEach(t),F9r=i(Xa),En=n(Xa,"P",{});var Q8=s(En);T9r=r(Q8,"The model class to instantiate is selected based on the "),U0e=n(Q8,"CODE",{});var zKt=s(U0e);M9r=r(zKt,"model_type"),zKt.forEach(t),E9r=r(Q8,` property of the config object (either
passed as an argument or loaded from `),H0e=n(Q8,"CODE",{});var QKt=s(H0e);C9r=r(QKt,"pretrained_model_name_or_path"),QKt.forEach(t),w9r=r(Q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(Q8,"CODE",{});var WKt=s(J0e);A9r=r(WKt,"pretrained_model_name_or_path"),WKt.forEach(t),L9r=r(Q8,":"),Q8.forEach(t),y9r=i(Xa),gt=n(Xa,"UL",{});var Zl=s(gt);E3=n(Zl,"LI",{});var AWe=s(E3);Y0e=n(AWe,"STRONG",{});var UKt=s(Y0e);x9r=r(UKt,"beit"),UKt.forEach(t),$9r=r(AWe," \u2014 "),eee=n(AWe,"A",{href:!0});var HKt=s(eee);k9r=r(HKt,"BeitForSemanticSegmentation"),HKt.forEach(t),S9r=r(AWe," (BEiT model)"),AWe.forEach(t),R9r=i(Zl),C3=n(Zl,"LI",{});var LWe=s(C3);K0e=n(LWe,"STRONG",{});var JKt=s(K0e);P9r=r(JKt,"data2vec-vision"),JKt.forEach(t),B9r=r(LWe," \u2014 "),oee=n(LWe,"A",{href:!0});var YKt=s(oee);I9r=r(YKt,"Data2VecVisionForSemanticSegmentation"),YKt.forEach(t),N9r=r(LWe," (Data2VecVision model)"),LWe.forEach(t),q9r=i(Zl),w3=n(Zl,"LI",{});var yWe=s(w3);Z0e=n(yWe,"STRONG",{});var KKt=s(Z0e);j9r=r(KKt,"dpt"),KKt.forEach(t),D9r=r(yWe," \u2014 "),ree=n(yWe,"A",{href:!0});var ZKt=s(ree);G9r=r(ZKt,"DPTForSemanticSegmentation"),ZKt.forEach(t),O9r=r(yWe," (DPT model)"),yWe.forEach(t),V9r=i(Zl),A3=n(Zl,"LI",{});var xWe=s(A3);ewe=n(xWe,"STRONG",{});var eZt=s(ewe);X9r=r(eZt,"mobilevit"),eZt.forEach(t),z9r=r(xWe," \u2014 "),tee=n(xWe,"A",{href:!0});var oZt=s(tee);Q9r=r(oZt,"MobileViTForSemanticSegmentation"),oZt.forEach(t),W9r=r(xWe," (MobileViT model)"),xWe.forEach(t),U9r=i(Zl),L3=n(Zl,"LI",{});var $We=s(L3);owe=n($We,"STRONG",{});var rZt=s(owe);H9r=r(rZt,"segformer"),rZt.forEach(t),J9r=r($We," \u2014 "),aee=n($We,"A",{href:!0});var tZt=s(aee);Y9r=r(tZt,"SegformerForSemanticSegmentation"),tZt.forEach(t),K9r=r($We," (SegFormer model)"),$We.forEach(t),Zl.forEach(t),Z9r=i(Xa),y3=n(Xa,"P",{});var kWe=s(y3);exr=r(kWe,"The model is set in evaluation mode by default using "),rwe=n(kWe,"CODE",{});var aZt=s(rwe);oxr=r(aZt,"model.eval()"),aZt.forEach(t),rxr=r(kWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),twe=n(kWe,"CODE",{});var nZt=s(twe);txr=r(nZt,"model.train()"),nZt.forEach(t),kWe.forEach(t),axr=i(Xa),T(x3.$$.fragment,Xa),Xa.forEach(t),Kl.forEach(t),Zeo=i(c),jm=n(c,"H2",{class:!0});var hto=s(jm);$3=n(hto,"A",{id:!0,class:!0,href:!0});var sZt=s($3);awe=n(sZt,"SPAN",{});var lZt=s(awe);T(zk.$$.fragment,lZt),lZt.forEach(t),sZt.forEach(t),nxr=i(hto),nwe=n(hto,"SPAN",{});var iZt=s(nwe);sxr=r(iZt,"AutoModelForInstanceSegmentation"),iZt.forEach(t),hto.forEach(t),eoo=i(c),nr=n(c,"DIV",{class:!0});var ei=s(nr);T(Qk.$$.fragment,ei),lxr=i(ei),Dm=n(ei,"P",{});var Yie=s(Dm);ixr=r(Yie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nee=n(Yie,"A",{href:!0});var dZt=s(nee);dxr=r(dZt,"from_pretrained()"),dZt.forEach(t),mxr=r(Yie," class method or the "),see=n(Yie,"A",{href:!0});var mZt=s(see);cxr=r(mZt,"from_config()"),mZt.forEach(t),fxr=r(Yie,` class
method.`),Yie.forEach(t),gxr=i(ei),Wk=n(ei,"P",{});var uto=s(Wk);hxr=r(uto,"This class cannot be instantiated directly using "),swe=n(uto,"CODE",{});var cZt=s(swe);uxr=r(cZt,"__init__()"),cZt.forEach(t),pxr=r(uto," (throws an error)."),uto.forEach(t),_xr=i(ei),Vt=n(ei,"DIV",{class:!0});var W8=s(Vt);T(Uk.$$.fragment,W8),bxr=i(W8),lwe=n(W8,"P",{});var fZt=s(lwe);vxr=r(fZt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fZt.forEach(t),Fxr=i(W8),Gm=n(W8,"P",{});var Kie=s(Gm);Txr=r(Kie,`Note:
Loading a model from its configuration file does `),iwe=n(Kie,"STRONG",{});var gZt=s(iwe);Mxr=r(gZt,"not"),gZt.forEach(t),Exr=r(Kie,` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=n(Kie,"A",{href:!0});var hZt=s(lee);Cxr=r(hZt,"from_pretrained()"),hZt.forEach(t),wxr=r(Kie," to load the model weights."),Kie.forEach(t),Axr=i(W8),T(k3.$$.fragment,W8),W8.forEach(t),Lxr=i(ei),wo=n(ei,"DIV",{class:!0});var za=s(wo);T(Hk.$$.fragment,za),yxr=i(za),dwe=n(za,"P",{});var uZt=s(dwe);xxr=r(uZt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),uZt.forEach(t),$xr=i(za),Cn=n(za,"P",{});var U8=s(Cn);kxr=r(U8,"The model class to instantiate is selected based on the "),mwe=n(U8,"CODE",{});var pZt=s(mwe);Sxr=r(pZt,"model_type"),pZt.forEach(t),Rxr=r(U8,` property of the config object (either
passed as an argument or loaded from `),cwe=n(U8,"CODE",{});var _Zt=s(cwe);Pxr=r(_Zt,"pretrained_model_name_or_path"),_Zt.forEach(t),Bxr=r(U8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=n(U8,"CODE",{});var bZt=s(fwe);Ixr=r(bZt,"pretrained_model_name_or_path"),bZt.forEach(t),Nxr=r(U8,":"),U8.forEach(t),qxr=i(za),gwe=n(za,"UL",{});var vZt=s(gwe);S3=n(vZt,"LI",{});var SWe=s(S3);hwe=n(SWe,"STRONG",{});var FZt=s(hwe);jxr=r(FZt,"maskformer"),FZt.forEach(t),Dxr=r(SWe," \u2014 "),iee=n(SWe,"A",{href:!0});var TZt=s(iee);Gxr=r(TZt,"MaskFormerForInstanceSegmentation"),TZt.forEach(t),Oxr=r(SWe," (MaskFormer model)"),SWe.forEach(t),vZt.forEach(t),Vxr=i(za),R3=n(za,"P",{});var RWe=s(R3);Xxr=r(RWe,"The model is set in evaluation mode by default using "),uwe=n(RWe,"CODE",{});var MZt=s(uwe);zxr=r(MZt,"model.eval()"),MZt.forEach(t),Qxr=r(RWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pwe=n(RWe,"CODE",{});var EZt=s(pwe);Wxr=r(EZt,"model.train()"),EZt.forEach(t),RWe.forEach(t),Uxr=i(za),T(P3.$$.fragment,za),za.forEach(t),ei.forEach(t),ooo=i(c),Om=n(c,"H2",{class:!0});var pto=s(Om);B3=n(pto,"A",{id:!0,class:!0,href:!0});var CZt=s(B3);_we=n(CZt,"SPAN",{});var wZt=s(_we);T(Jk.$$.fragment,wZt),wZt.forEach(t),CZt.forEach(t),Hxr=i(pto),bwe=n(pto,"SPAN",{});var AZt=s(bwe);Jxr=r(AZt,"TFAutoModel"),AZt.forEach(t),pto.forEach(t),roo=i(c),sr=n(c,"DIV",{class:!0});var oi=s(sr);T(Yk.$$.fragment,oi),Yxr=i(oi),Vm=n(oi,"P",{});var Zie=s(Vm);Kxr=r(Zie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dee=n(Zie,"A",{href:!0});var LZt=s(dee);Zxr=r(LZt,"from_pretrained()"),LZt.forEach(t),e$r=r(Zie," class method or the "),mee=n(Zie,"A",{href:!0});var yZt=s(mee);o$r=r(yZt,"from_config()"),yZt.forEach(t),r$r=r(Zie,` class
method.`),Zie.forEach(t),t$r=i(oi),Kk=n(oi,"P",{});var _to=s(Kk);a$r=r(_to,"This class cannot be instantiated directly using "),vwe=n(_to,"CODE",{});var xZt=s(vwe);n$r=r(xZt,"__init__()"),xZt.forEach(t),s$r=r(_to," (throws an error)."),_to.forEach(t),l$r=i(oi),Xt=n(oi,"DIV",{class:!0});var H8=s(Xt);T(Zk.$$.fragment,H8),i$r=i(H8),Fwe=n(H8,"P",{});var $Zt=s(Fwe);d$r=r($Zt,"Instantiates one of the base model classes of the library from a configuration."),$Zt.forEach(t),m$r=i(H8),Xm=n(H8,"P",{});var ede=s(Xm);c$r=r(ede,`Note:
Loading a model from its configuration file does `),Twe=n(ede,"STRONG",{});var kZt=s(Twe);f$r=r(kZt,"not"),kZt.forEach(t),g$r=r(ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=n(ede,"A",{href:!0});var SZt=s(cee);h$r=r(SZt,"from_pretrained()"),SZt.forEach(t),u$r=r(ede," to load the model weights."),ede.forEach(t),p$r=i(H8),T(I3.$$.fragment,H8),H8.forEach(t),_$r=i(oi),Ir=n(oi,"DIV",{class:!0});var ri=s(Ir);T(eS.$$.fragment,ri),b$r=i(ri),Mwe=n(ri,"P",{});var RZt=s(Mwe);v$r=r(RZt,"Instantiate one of the base model classes of the library from a pretrained model."),RZt.forEach(t),F$r=i(ri),wn=n(ri,"P",{});var J8=s(wn);T$r=r(J8,"The model class to instantiate is selected based on the "),Ewe=n(J8,"CODE",{});var PZt=s(Ewe);M$r=r(PZt,"model_type"),PZt.forEach(t),E$r=r(J8,` property of the config object (either
passed as an argument or loaded from `),Cwe=n(J8,"CODE",{});var BZt=s(Cwe);C$r=r(BZt,"pretrained_model_name_or_path"),BZt.forEach(t),w$r=r(J8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wwe=n(J8,"CODE",{});var IZt=s(wwe);A$r=r(IZt,"pretrained_model_name_or_path"),IZt.forEach(t),L$r=r(J8,":"),J8.forEach(t),y$r=i(ri),I=n(ri,"UL",{});var D=s(I);N3=n(D,"LI",{});var PWe=s(N3);Awe=n(PWe,"STRONG",{});var NZt=s(Awe);x$r=r(NZt,"albert"),NZt.forEach(t),$$r=r(PWe," \u2014 "),fee=n(PWe,"A",{href:!0});var qZt=s(fee);k$r=r(qZt,"TFAlbertModel"),qZt.forEach(t),S$r=r(PWe," (ALBERT model)"),PWe.forEach(t),R$r=i(D),q3=n(D,"LI",{});var BWe=s(q3);Lwe=n(BWe,"STRONG",{});var jZt=s(Lwe);P$r=r(jZt,"bart"),jZt.forEach(t),B$r=r(BWe," \u2014 "),gee=n(BWe,"A",{href:!0});var DZt=s(gee);I$r=r(DZt,"TFBartModel"),DZt.forEach(t),N$r=r(BWe," (BART model)"),BWe.forEach(t),q$r=i(D),j3=n(D,"LI",{});var IWe=s(j3);ywe=n(IWe,"STRONG",{});var GZt=s(ywe);j$r=r(GZt,"bert"),GZt.forEach(t),D$r=r(IWe," \u2014 "),hee=n(IWe,"A",{href:!0});var OZt=s(hee);G$r=r(OZt,"TFBertModel"),OZt.forEach(t),O$r=r(IWe," (BERT model)"),IWe.forEach(t),V$r=i(D),D3=n(D,"LI",{});var NWe=s(D3);xwe=n(NWe,"STRONG",{});var VZt=s(xwe);X$r=r(VZt,"blenderbot"),VZt.forEach(t),z$r=r(NWe," \u2014 "),uee=n(NWe,"A",{href:!0});var XZt=s(uee);Q$r=r(XZt,"TFBlenderbotModel"),XZt.forEach(t),W$r=r(NWe," (Blenderbot model)"),NWe.forEach(t),U$r=i(D),G3=n(D,"LI",{});var qWe=s(G3);$we=n(qWe,"STRONG",{});var zZt=s($we);H$r=r(zZt,"blenderbot-small"),zZt.forEach(t),J$r=r(qWe," \u2014 "),pee=n(qWe,"A",{href:!0});var QZt=s(pee);Y$r=r(QZt,"TFBlenderbotSmallModel"),QZt.forEach(t),K$r=r(qWe," (BlenderbotSmall model)"),qWe.forEach(t),Z$r=i(D),O3=n(D,"LI",{});var jWe=s(O3);kwe=n(jWe,"STRONG",{});var WZt=s(kwe);ekr=r(WZt,"camembert"),WZt.forEach(t),okr=r(jWe," \u2014 "),_ee=n(jWe,"A",{href:!0});var UZt=s(_ee);rkr=r(UZt,"TFCamembertModel"),UZt.forEach(t),tkr=r(jWe," (CamemBERT model)"),jWe.forEach(t),akr=i(D),V3=n(D,"LI",{});var DWe=s(V3);Swe=n(DWe,"STRONG",{});var HZt=s(Swe);nkr=r(HZt,"clip"),HZt.forEach(t),skr=r(DWe," \u2014 "),bee=n(DWe,"A",{href:!0});var JZt=s(bee);lkr=r(JZt,"TFCLIPModel"),JZt.forEach(t),ikr=r(DWe," (CLIP model)"),DWe.forEach(t),dkr=i(D),X3=n(D,"LI",{});var GWe=s(X3);Rwe=n(GWe,"STRONG",{});var YZt=s(Rwe);mkr=r(YZt,"convbert"),YZt.forEach(t),ckr=r(GWe," \u2014 "),vee=n(GWe,"A",{href:!0});var KZt=s(vee);fkr=r(KZt,"TFConvBertModel"),KZt.forEach(t),gkr=r(GWe," (ConvBERT model)"),GWe.forEach(t),hkr=i(D),z3=n(D,"LI",{});var OWe=s(z3);Pwe=n(OWe,"STRONG",{});var ZZt=s(Pwe);ukr=r(ZZt,"convnext"),ZZt.forEach(t),pkr=r(OWe," \u2014 "),Fee=n(OWe,"A",{href:!0});var eea=s(Fee);_kr=r(eea,"TFConvNextModel"),eea.forEach(t),bkr=r(OWe," (ConvNeXT model)"),OWe.forEach(t),vkr=i(D),Q3=n(D,"LI",{});var VWe=s(Q3);Bwe=n(VWe,"STRONG",{});var oea=s(Bwe);Fkr=r(oea,"ctrl"),oea.forEach(t),Tkr=r(VWe," \u2014 "),Tee=n(VWe,"A",{href:!0});var rea=s(Tee);Mkr=r(rea,"TFCTRLModel"),rea.forEach(t),Ekr=r(VWe," (CTRL model)"),VWe.forEach(t),Ckr=i(D),W3=n(D,"LI",{});var XWe=s(W3);Iwe=n(XWe,"STRONG",{});var tea=s(Iwe);wkr=r(tea,"data2vec-vision"),tea.forEach(t),Akr=r(XWe," \u2014 "),Mee=n(XWe,"A",{href:!0});var aea=s(Mee);Lkr=r(aea,"TFData2VecVisionModel"),aea.forEach(t),ykr=r(XWe," (Data2VecVision model)"),XWe.forEach(t),xkr=i(D),U3=n(D,"LI",{});var zWe=s(U3);Nwe=n(zWe,"STRONG",{});var nea=s(Nwe);$kr=r(nea,"deberta"),nea.forEach(t),kkr=r(zWe," \u2014 "),Eee=n(zWe,"A",{href:!0});var sea=s(Eee);Skr=r(sea,"TFDebertaModel"),sea.forEach(t),Rkr=r(zWe," (DeBERTa model)"),zWe.forEach(t),Pkr=i(D),H3=n(D,"LI",{});var QWe=s(H3);qwe=n(QWe,"STRONG",{});var lea=s(qwe);Bkr=r(lea,"deberta-v2"),lea.forEach(t),Ikr=r(QWe," \u2014 "),Cee=n(QWe,"A",{href:!0});var iea=s(Cee);Nkr=r(iea,"TFDebertaV2Model"),iea.forEach(t),qkr=r(QWe," (DeBERTa-v2 model)"),QWe.forEach(t),jkr=i(D),J3=n(D,"LI",{});var WWe=s(J3);jwe=n(WWe,"STRONG",{});var dea=s(jwe);Dkr=r(dea,"deit"),dea.forEach(t),Gkr=r(WWe," \u2014 "),wee=n(WWe,"A",{href:!0});var mea=s(wee);Okr=r(mea,"TFDeiTModel"),mea.forEach(t),Vkr=r(WWe," (DeiT model)"),WWe.forEach(t),Xkr=i(D),Y3=n(D,"LI",{});var UWe=s(Y3);Dwe=n(UWe,"STRONG",{});var cea=s(Dwe);zkr=r(cea,"distilbert"),cea.forEach(t),Qkr=r(UWe," \u2014 "),Aee=n(UWe,"A",{href:!0});var fea=s(Aee);Wkr=r(fea,"TFDistilBertModel"),fea.forEach(t),Ukr=r(UWe," (DistilBERT model)"),UWe.forEach(t),Hkr=i(D),K3=n(D,"LI",{});var HWe=s(K3);Gwe=n(HWe,"STRONG",{});var gea=s(Gwe);Jkr=r(gea,"dpr"),gea.forEach(t),Ykr=r(HWe," \u2014 "),Lee=n(HWe,"A",{href:!0});var hea=s(Lee);Kkr=r(hea,"TFDPRQuestionEncoder"),hea.forEach(t),Zkr=r(HWe," (DPR model)"),HWe.forEach(t),eSr=i(D),Z3=n(D,"LI",{});var JWe=s(Z3);Owe=n(JWe,"STRONG",{});var uea=s(Owe);oSr=r(uea,"electra"),uea.forEach(t),rSr=r(JWe," \u2014 "),yee=n(JWe,"A",{href:!0});var pea=s(yee);tSr=r(pea,"TFElectraModel"),pea.forEach(t),aSr=r(JWe," (ELECTRA model)"),JWe.forEach(t),nSr=i(D),e5=n(D,"LI",{});var YWe=s(e5);Vwe=n(YWe,"STRONG",{});var _ea=s(Vwe);sSr=r(_ea,"flaubert"),_ea.forEach(t),lSr=r(YWe," \u2014 "),xee=n(YWe,"A",{href:!0});var bea=s(xee);iSr=r(bea,"TFFlaubertModel"),bea.forEach(t),dSr=r(YWe," (FlauBERT model)"),YWe.forEach(t),mSr=i(D),Fl=n(D,"LI",{});var ZB=s(Fl);Xwe=n(ZB,"STRONG",{});var vea=s(Xwe);cSr=r(vea,"funnel"),vea.forEach(t),fSr=r(ZB," \u2014 "),$ee=n(ZB,"A",{href:!0});var Fea=s($ee);gSr=r(Fea,"TFFunnelModel"),Fea.forEach(t),hSr=r(ZB," or "),kee=n(ZB,"A",{href:!0});var Tea=s(kee);uSr=r(Tea,"TFFunnelBaseModel"),Tea.forEach(t),pSr=r(ZB," (Funnel Transformer model)"),ZB.forEach(t),_Sr=i(D),o5=n(D,"LI",{});var KWe=s(o5);zwe=n(KWe,"STRONG",{});var Mea=s(zwe);bSr=r(Mea,"gpt2"),Mea.forEach(t),vSr=r(KWe," \u2014 "),See=n(KWe,"A",{href:!0});var Eea=s(See);FSr=r(Eea,"TFGPT2Model"),Eea.forEach(t),TSr=r(KWe," (OpenAI GPT-2 model)"),KWe.forEach(t),MSr=i(D),r5=n(D,"LI",{});var ZWe=s(r5);Qwe=n(ZWe,"STRONG",{});var Cea=s(Qwe);ESr=r(Cea,"gptj"),Cea.forEach(t),CSr=r(ZWe," \u2014 "),Ree=n(ZWe,"A",{href:!0});var wea=s(Ree);wSr=r(wea,"TFGPTJModel"),wea.forEach(t),ASr=r(ZWe," (GPT-J model)"),ZWe.forEach(t),LSr=i(D),t5=n(D,"LI",{});var eUe=s(t5);Wwe=n(eUe,"STRONG",{});var Aea=s(Wwe);ySr=r(Aea,"groupvit"),Aea.forEach(t),xSr=r(eUe," \u2014 "),Pee=n(eUe,"A",{href:!0});var Lea=s(Pee);$Sr=r(Lea,"TFGroupViTModel"),Lea.forEach(t),kSr=r(eUe," (GroupViT model)"),eUe.forEach(t),SSr=i(D),a5=n(D,"LI",{});var oUe=s(a5);Uwe=n(oUe,"STRONG",{});var yea=s(Uwe);RSr=r(yea,"hubert"),yea.forEach(t),PSr=r(oUe," \u2014 "),Bee=n(oUe,"A",{href:!0});var xea=s(Bee);BSr=r(xea,"TFHubertModel"),xea.forEach(t),ISr=r(oUe," (Hubert model)"),oUe.forEach(t),NSr=i(D),n5=n(D,"LI",{});var rUe=s(n5);Hwe=n(rUe,"STRONG",{});var $ea=s(Hwe);qSr=r($ea,"layoutlm"),$ea.forEach(t),jSr=r(rUe," \u2014 "),Iee=n(rUe,"A",{href:!0});var kea=s(Iee);DSr=r(kea,"TFLayoutLMModel"),kea.forEach(t),GSr=r(rUe," (LayoutLM model)"),rUe.forEach(t),OSr=i(D),s5=n(D,"LI",{});var tUe=s(s5);Jwe=n(tUe,"STRONG",{});var Sea=s(Jwe);VSr=r(Sea,"layoutlmv3"),Sea.forEach(t),XSr=r(tUe," \u2014 "),Nee=n(tUe,"A",{href:!0});var Rea=s(Nee);zSr=r(Rea,"TFLayoutLMv3Model"),Rea.forEach(t),QSr=r(tUe," (LayoutLMv3 model)"),tUe.forEach(t),WSr=i(D),l5=n(D,"LI",{});var aUe=s(l5);Ywe=n(aUe,"STRONG",{});var Pea=s(Ywe);USr=r(Pea,"led"),Pea.forEach(t),HSr=r(aUe," \u2014 "),qee=n(aUe,"A",{href:!0});var Bea=s(qee);JSr=r(Bea,"TFLEDModel"),Bea.forEach(t),YSr=r(aUe," (LED model)"),aUe.forEach(t),KSr=i(D),i5=n(D,"LI",{});var nUe=s(i5);Kwe=n(nUe,"STRONG",{});var Iea=s(Kwe);ZSr=r(Iea,"longformer"),Iea.forEach(t),eRr=r(nUe," \u2014 "),jee=n(nUe,"A",{href:!0});var Nea=s(jee);oRr=r(Nea,"TFLongformerModel"),Nea.forEach(t),rRr=r(nUe," (Longformer model)"),nUe.forEach(t),tRr=i(D),d5=n(D,"LI",{});var sUe=s(d5);Zwe=n(sUe,"STRONG",{});var qea=s(Zwe);aRr=r(qea,"lxmert"),qea.forEach(t),nRr=r(sUe," \u2014 "),Dee=n(sUe,"A",{href:!0});var jea=s(Dee);sRr=r(jea,"TFLxmertModel"),jea.forEach(t),lRr=r(sUe," (LXMERT model)"),sUe.forEach(t),iRr=i(D),m5=n(D,"LI",{});var lUe=s(m5);eAe=n(lUe,"STRONG",{});var Dea=s(eAe);dRr=r(Dea,"marian"),Dea.forEach(t),mRr=r(lUe," \u2014 "),Gee=n(lUe,"A",{href:!0});var Gea=s(Gee);cRr=r(Gea,"TFMarianModel"),Gea.forEach(t),fRr=r(lUe," (Marian model)"),lUe.forEach(t),gRr=i(D),c5=n(D,"LI",{});var iUe=s(c5);oAe=n(iUe,"STRONG",{});var Oea=s(oAe);hRr=r(Oea,"mbart"),Oea.forEach(t),uRr=r(iUe," \u2014 "),Oee=n(iUe,"A",{href:!0});var Vea=s(Oee);pRr=r(Vea,"TFMBartModel"),Vea.forEach(t),_Rr=r(iUe," (mBART model)"),iUe.forEach(t),bRr=i(D),f5=n(D,"LI",{});var dUe=s(f5);rAe=n(dUe,"STRONG",{});var Xea=s(rAe);vRr=r(Xea,"mobilebert"),Xea.forEach(t),FRr=r(dUe," \u2014 "),Vee=n(dUe,"A",{href:!0});var zea=s(Vee);TRr=r(zea,"TFMobileBertModel"),zea.forEach(t),MRr=r(dUe," (MobileBERT model)"),dUe.forEach(t),ERr=i(D),g5=n(D,"LI",{});var mUe=s(g5);tAe=n(mUe,"STRONG",{});var Qea=s(tAe);CRr=r(Qea,"mobilevit"),Qea.forEach(t),wRr=r(mUe," \u2014 "),Xee=n(mUe,"A",{href:!0});var Wea=s(Xee);ARr=r(Wea,"TFMobileViTModel"),Wea.forEach(t),LRr=r(mUe," (MobileViT model)"),mUe.forEach(t),yRr=i(D),h5=n(D,"LI",{});var cUe=s(h5);aAe=n(cUe,"STRONG",{});var Uea=s(aAe);xRr=r(Uea,"mpnet"),Uea.forEach(t),$Rr=r(cUe," \u2014 "),zee=n(cUe,"A",{href:!0});var Hea=s(zee);kRr=r(Hea,"TFMPNetModel"),Hea.forEach(t),SRr=r(cUe," (MPNet model)"),cUe.forEach(t),RRr=i(D),u5=n(D,"LI",{});var fUe=s(u5);nAe=n(fUe,"STRONG",{});var Jea=s(nAe);PRr=r(Jea,"mt5"),Jea.forEach(t),BRr=r(fUe," \u2014 "),Qee=n(fUe,"A",{href:!0});var Yea=s(Qee);IRr=r(Yea,"TFMT5Model"),Yea.forEach(t),NRr=r(fUe," (MT5 model)"),fUe.forEach(t),qRr=i(D),p5=n(D,"LI",{});var gUe=s(p5);sAe=n(gUe,"STRONG",{});var Kea=s(sAe);jRr=r(Kea,"openai-gpt"),Kea.forEach(t),DRr=r(gUe," \u2014 "),Wee=n(gUe,"A",{href:!0});var Zea=s(Wee);GRr=r(Zea,"TFOpenAIGPTModel"),Zea.forEach(t),ORr=r(gUe," (OpenAI GPT model)"),gUe.forEach(t),VRr=i(D),_5=n(D,"LI",{});var hUe=s(_5);lAe=n(hUe,"STRONG",{});var eoa=s(lAe);XRr=r(eoa,"opt"),eoa.forEach(t),zRr=r(hUe," \u2014 "),Uee=n(hUe,"A",{href:!0});var ooa=s(Uee);QRr=r(ooa,"TFOPTModel"),ooa.forEach(t),WRr=r(hUe," (OPT model)"),hUe.forEach(t),URr=i(D),b5=n(D,"LI",{});var uUe=s(b5);iAe=n(uUe,"STRONG",{});var roa=s(iAe);HRr=r(roa,"pegasus"),roa.forEach(t),JRr=r(uUe," \u2014 "),Hee=n(uUe,"A",{href:!0});var toa=s(Hee);YRr=r(toa,"TFPegasusModel"),toa.forEach(t),KRr=r(uUe," (Pegasus model)"),uUe.forEach(t),ZRr=i(D),v5=n(D,"LI",{});var pUe=s(v5);dAe=n(pUe,"STRONG",{});var aoa=s(dAe);ePr=r(aoa,"regnet"),aoa.forEach(t),oPr=r(pUe," \u2014 "),Jee=n(pUe,"A",{href:!0});var noa=s(Jee);rPr=r(noa,"TFRegNetModel"),noa.forEach(t),tPr=r(pUe," (RegNet model)"),pUe.forEach(t),aPr=i(D),F5=n(D,"LI",{});var _Ue=s(F5);mAe=n(_Ue,"STRONG",{});var soa=s(mAe);nPr=r(soa,"rembert"),soa.forEach(t),sPr=r(_Ue," \u2014 "),Yee=n(_Ue,"A",{href:!0});var loa=s(Yee);lPr=r(loa,"TFRemBertModel"),loa.forEach(t),iPr=r(_Ue," (RemBERT model)"),_Ue.forEach(t),dPr=i(D),T5=n(D,"LI",{});var bUe=s(T5);cAe=n(bUe,"STRONG",{});var ioa=s(cAe);mPr=r(ioa,"resnet"),ioa.forEach(t),cPr=r(bUe," \u2014 "),Kee=n(bUe,"A",{href:!0});var doa=s(Kee);fPr=r(doa,"TFResNetModel"),doa.forEach(t),gPr=r(bUe," (ResNet model)"),bUe.forEach(t),hPr=i(D),M5=n(D,"LI",{});var vUe=s(M5);fAe=n(vUe,"STRONG",{});var moa=s(fAe);uPr=r(moa,"roberta"),moa.forEach(t),pPr=r(vUe," \u2014 "),Zee=n(vUe,"A",{href:!0});var coa=s(Zee);_Pr=r(coa,"TFRobertaModel"),coa.forEach(t),bPr=r(vUe," (RoBERTa model)"),vUe.forEach(t),vPr=i(D),E5=n(D,"LI",{});var FUe=s(E5);gAe=n(FUe,"STRONG",{});var foa=s(gAe);FPr=r(foa,"roformer"),foa.forEach(t),TPr=r(FUe," \u2014 "),eoe=n(FUe,"A",{href:!0});var goa=s(eoe);MPr=r(goa,"TFRoFormerModel"),goa.forEach(t),EPr=r(FUe," (RoFormer model)"),FUe.forEach(t),CPr=i(D),C5=n(D,"LI",{});var TUe=s(C5);hAe=n(TUe,"STRONG",{});var hoa=s(hAe);wPr=r(hoa,"segformer"),hoa.forEach(t),APr=r(TUe," \u2014 "),ooe=n(TUe,"A",{href:!0});var uoa=s(ooe);LPr=r(uoa,"TFSegformerModel"),uoa.forEach(t),yPr=r(TUe," (SegFormer model)"),TUe.forEach(t),xPr=i(D),w5=n(D,"LI",{});var MUe=s(w5);uAe=n(MUe,"STRONG",{});var poa=s(uAe);$Pr=r(poa,"speech_to_text"),poa.forEach(t),kPr=r(MUe," \u2014 "),roe=n(MUe,"A",{href:!0});var _oa=s(roe);SPr=r(_oa,"TFSpeech2TextModel"),_oa.forEach(t),RPr=r(MUe," (Speech2Text model)"),MUe.forEach(t),PPr=i(D),A5=n(D,"LI",{});var EUe=s(A5);pAe=n(EUe,"STRONG",{});var boa=s(pAe);BPr=r(boa,"swin"),boa.forEach(t),IPr=r(EUe," \u2014 "),toe=n(EUe,"A",{href:!0});var voa=s(toe);NPr=r(voa,"TFSwinModel"),voa.forEach(t),qPr=r(EUe," (Swin Transformer model)"),EUe.forEach(t),jPr=i(D),L5=n(D,"LI",{});var CUe=s(L5);_Ae=n(CUe,"STRONG",{});var Foa=s(_Ae);DPr=r(Foa,"t5"),Foa.forEach(t),GPr=r(CUe," \u2014 "),aoe=n(CUe,"A",{href:!0});var Toa=s(aoe);OPr=r(Toa,"TFT5Model"),Toa.forEach(t),VPr=r(CUe," (T5 model)"),CUe.forEach(t),XPr=i(D),y5=n(D,"LI",{});var wUe=s(y5);bAe=n(wUe,"STRONG",{});var Moa=s(bAe);zPr=r(Moa,"tapas"),Moa.forEach(t),QPr=r(wUe," \u2014 "),noe=n(wUe,"A",{href:!0});var Eoa=s(noe);WPr=r(Eoa,"TFTapasModel"),Eoa.forEach(t),UPr=r(wUe," (TAPAS model)"),wUe.forEach(t),HPr=i(D),x5=n(D,"LI",{});var AUe=s(x5);vAe=n(AUe,"STRONG",{});var Coa=s(vAe);JPr=r(Coa,"transfo-xl"),Coa.forEach(t),YPr=r(AUe," \u2014 "),soe=n(AUe,"A",{href:!0});var woa=s(soe);KPr=r(woa,"TFTransfoXLModel"),woa.forEach(t),ZPr=r(AUe," (Transformer-XL model)"),AUe.forEach(t),eBr=i(D),$5=n(D,"LI",{});var LUe=s($5);FAe=n(LUe,"STRONG",{});var Aoa=s(FAe);oBr=r(Aoa,"vit"),Aoa.forEach(t),rBr=r(LUe," \u2014 "),loe=n(LUe,"A",{href:!0});var Loa=s(loe);tBr=r(Loa,"TFViTModel"),Loa.forEach(t),aBr=r(LUe," (ViT model)"),LUe.forEach(t),nBr=i(D),k5=n(D,"LI",{});var yUe=s(k5);TAe=n(yUe,"STRONG",{});var yoa=s(TAe);sBr=r(yoa,"vit_mae"),yoa.forEach(t),lBr=r(yUe," \u2014 "),ioe=n(yUe,"A",{href:!0});var xoa=s(ioe);iBr=r(xoa,"TFViTMAEModel"),xoa.forEach(t),dBr=r(yUe," (ViTMAE model)"),yUe.forEach(t),mBr=i(D),S5=n(D,"LI",{});var xUe=s(S5);MAe=n(xUe,"STRONG",{});var $oa=s(MAe);cBr=r($oa,"wav2vec2"),$oa.forEach(t),fBr=r(xUe," \u2014 "),doe=n(xUe,"A",{href:!0});var koa=s(doe);gBr=r(koa,"TFWav2Vec2Model"),koa.forEach(t),hBr=r(xUe," (Wav2Vec2 model)"),xUe.forEach(t),uBr=i(D),R5=n(D,"LI",{});var $Ue=s(R5);EAe=n($Ue,"STRONG",{});var Soa=s(EAe);pBr=r(Soa,"xglm"),Soa.forEach(t),_Br=r($Ue," \u2014 "),moe=n($Ue,"A",{href:!0});var Roa=s(moe);bBr=r(Roa,"TFXGLMModel"),Roa.forEach(t),vBr=r($Ue," (XGLM model)"),$Ue.forEach(t),FBr=i(D),P5=n(D,"LI",{});var kUe=s(P5);CAe=n(kUe,"STRONG",{});var Poa=s(CAe);TBr=r(Poa,"xlm"),Poa.forEach(t),MBr=r(kUe," \u2014 "),coe=n(kUe,"A",{href:!0});var Boa=s(coe);EBr=r(Boa,"TFXLMModel"),Boa.forEach(t),CBr=r(kUe," (XLM model)"),kUe.forEach(t),wBr=i(D),B5=n(D,"LI",{});var SUe=s(B5);wAe=n(SUe,"STRONG",{});var Ioa=s(wAe);ABr=r(Ioa,"xlm-roberta"),Ioa.forEach(t),LBr=r(SUe," \u2014 "),foe=n(SUe,"A",{href:!0});var Noa=s(foe);yBr=r(Noa,"TFXLMRobertaModel"),Noa.forEach(t),xBr=r(SUe," (XLM-RoBERTa model)"),SUe.forEach(t),$Br=i(D),I5=n(D,"LI",{});var RUe=s(I5);AAe=n(RUe,"STRONG",{});var qoa=s(AAe);kBr=r(qoa,"xlnet"),qoa.forEach(t),SBr=r(RUe," \u2014 "),goe=n(RUe,"A",{href:!0});var joa=s(goe);RBr=r(joa,"TFXLNetModel"),joa.forEach(t),PBr=r(RUe," (XLNet model)"),RUe.forEach(t),D.forEach(t),BBr=i(ri),T(N5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),too=i(c),zm=n(c,"H2",{class:!0});var bto=s(zm);q5=n(bto,"A",{id:!0,class:!0,href:!0});var Doa=s(q5);LAe=n(Doa,"SPAN",{});var Goa=s(LAe);T(oS.$$.fragment,Goa),Goa.forEach(t),Doa.forEach(t),IBr=i(bto),yAe=n(bto,"SPAN",{});var Ooa=s(yAe);NBr=r(Ooa,"TFAutoModelForPreTraining"),Ooa.forEach(t),bto.forEach(t),aoo=i(c),lr=n(c,"DIV",{class:!0});var ti=s(lr);T(rS.$$.fragment,ti),qBr=i(ti),Qm=n(ti,"P",{});var ode=s(Qm);jBr=r(ode,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hoe=n(ode,"A",{href:!0});var Voa=s(hoe);DBr=r(Voa,"from_pretrained()"),Voa.forEach(t),GBr=r(ode," class method or the "),uoe=n(ode,"A",{href:!0});var Xoa=s(uoe);OBr=r(Xoa,"from_config()"),Xoa.forEach(t),VBr=r(ode,` class
method.`),ode.forEach(t),XBr=i(ti),tS=n(ti,"P",{});var vto=s(tS);zBr=r(vto,"This class cannot be instantiated directly using "),xAe=n(vto,"CODE",{});var zoa=s(xAe);QBr=r(zoa,"__init__()"),zoa.forEach(t),WBr=r(vto," (throws an error)."),vto.forEach(t),UBr=i(ti),zt=n(ti,"DIV",{class:!0});var Y8=s(zt);T(aS.$$.fragment,Y8),HBr=i(Y8),$Ae=n(Y8,"P",{});var Qoa=s($Ae);JBr=r(Qoa,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qoa.forEach(t),YBr=i(Y8),Wm=n(Y8,"P",{});var rde=s(Wm);KBr=r(rde,`Note:
Loading a model from its configuration file does `),kAe=n(rde,"STRONG",{});var Woa=s(kAe);ZBr=r(Woa,"not"),Woa.forEach(t),eIr=r(rde,` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=n(rde,"A",{href:!0});var Uoa=s(poe);oIr=r(Uoa,"from_pretrained()"),Uoa.forEach(t),rIr=r(rde," to load the model weights."),rde.forEach(t),tIr=i(Y8),T(j5.$$.fragment,Y8),Y8.forEach(t),aIr=i(ti),Nr=n(ti,"DIV",{class:!0});var ai=s(Nr);T(nS.$$.fragment,ai),nIr=i(ai),SAe=n(ai,"P",{});var Hoa=s(SAe);sIr=r(Hoa,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Hoa.forEach(t),lIr=i(ai),An=n(ai,"P",{});var K8=s(An);iIr=r(K8,"The model class to instantiate is selected based on the "),RAe=n(K8,"CODE",{});var Joa=s(RAe);dIr=r(Joa,"model_type"),Joa.forEach(t),mIr=r(K8,` property of the config object (either
passed as an argument or loaded from `),PAe=n(K8,"CODE",{});var Yoa=s(PAe);cIr=r(Yoa,"pretrained_model_name_or_path"),Yoa.forEach(t),fIr=r(K8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BAe=n(K8,"CODE",{});var Koa=s(BAe);gIr=r(Koa,"pretrained_model_name_or_path"),Koa.forEach(t),hIr=r(K8,":"),K8.forEach(t),uIr=i(ai),se=n(ai,"UL",{});var ie=s(se);D5=n(ie,"LI",{});var PUe=s(D5);IAe=n(PUe,"STRONG",{});var Zoa=s(IAe);pIr=r(Zoa,"albert"),Zoa.forEach(t),_Ir=r(PUe," \u2014 "),_oe=n(PUe,"A",{href:!0});var era=s(_oe);bIr=r(era,"TFAlbertForPreTraining"),era.forEach(t),vIr=r(PUe," (ALBERT model)"),PUe.forEach(t),FIr=i(ie),G5=n(ie,"LI",{});var BUe=s(G5);NAe=n(BUe,"STRONG",{});var ora=s(NAe);TIr=r(ora,"bart"),ora.forEach(t),MIr=r(BUe," \u2014 "),boe=n(BUe,"A",{href:!0});var rra=s(boe);EIr=r(rra,"TFBartForConditionalGeneration"),rra.forEach(t),CIr=r(BUe," (BART model)"),BUe.forEach(t),wIr=i(ie),O5=n(ie,"LI",{});var IUe=s(O5);qAe=n(IUe,"STRONG",{});var tra=s(qAe);AIr=r(tra,"bert"),tra.forEach(t),LIr=r(IUe," \u2014 "),voe=n(IUe,"A",{href:!0});var ara=s(voe);yIr=r(ara,"TFBertForPreTraining"),ara.forEach(t),xIr=r(IUe," (BERT model)"),IUe.forEach(t),$Ir=i(ie),V5=n(ie,"LI",{});var NUe=s(V5);jAe=n(NUe,"STRONG",{});var nra=s(jAe);kIr=r(nra,"camembert"),nra.forEach(t),SIr=r(NUe," \u2014 "),Foe=n(NUe,"A",{href:!0});var sra=s(Foe);RIr=r(sra,"TFCamembertForMaskedLM"),sra.forEach(t),PIr=r(NUe," (CamemBERT model)"),NUe.forEach(t),BIr=i(ie),X5=n(ie,"LI",{});var qUe=s(X5);DAe=n(qUe,"STRONG",{});var lra=s(DAe);IIr=r(lra,"ctrl"),lra.forEach(t),NIr=r(qUe," \u2014 "),Toe=n(qUe,"A",{href:!0});var ira=s(Toe);qIr=r(ira,"TFCTRLLMHeadModel"),ira.forEach(t),jIr=r(qUe," (CTRL model)"),qUe.forEach(t),DIr=i(ie),z5=n(ie,"LI",{});var jUe=s(z5);GAe=n(jUe,"STRONG",{});var dra=s(GAe);GIr=r(dra,"distilbert"),dra.forEach(t),OIr=r(jUe," \u2014 "),Moe=n(jUe,"A",{href:!0});var mra=s(Moe);VIr=r(mra,"TFDistilBertForMaskedLM"),mra.forEach(t),XIr=r(jUe," (DistilBERT model)"),jUe.forEach(t),zIr=i(ie),Q5=n(ie,"LI",{});var DUe=s(Q5);OAe=n(DUe,"STRONG",{});var cra=s(OAe);QIr=r(cra,"electra"),cra.forEach(t),WIr=r(DUe," \u2014 "),Eoe=n(DUe,"A",{href:!0});var fra=s(Eoe);UIr=r(fra,"TFElectraForPreTraining"),fra.forEach(t),HIr=r(DUe," (ELECTRA model)"),DUe.forEach(t),JIr=i(ie),W5=n(ie,"LI",{});var GUe=s(W5);VAe=n(GUe,"STRONG",{});var gra=s(VAe);YIr=r(gra,"flaubert"),gra.forEach(t),KIr=r(GUe," \u2014 "),Coe=n(GUe,"A",{href:!0});var hra=s(Coe);ZIr=r(hra,"TFFlaubertWithLMHeadModel"),hra.forEach(t),eNr=r(GUe," (FlauBERT model)"),GUe.forEach(t),oNr=i(ie),U5=n(ie,"LI",{});var OUe=s(U5);XAe=n(OUe,"STRONG",{});var ura=s(XAe);rNr=r(ura,"funnel"),ura.forEach(t),tNr=r(OUe," \u2014 "),woe=n(OUe,"A",{href:!0});var pra=s(woe);aNr=r(pra,"TFFunnelForPreTraining"),pra.forEach(t),nNr=r(OUe," (Funnel Transformer model)"),OUe.forEach(t),sNr=i(ie),H5=n(ie,"LI",{});var VUe=s(H5);zAe=n(VUe,"STRONG",{});var _ra=s(zAe);lNr=r(_ra,"gpt2"),_ra.forEach(t),iNr=r(VUe," \u2014 "),Aoe=n(VUe,"A",{href:!0});var bra=s(Aoe);dNr=r(bra,"TFGPT2LMHeadModel"),bra.forEach(t),mNr=r(VUe," (OpenAI GPT-2 model)"),VUe.forEach(t),cNr=i(ie),J5=n(ie,"LI",{});var XUe=s(J5);QAe=n(XUe,"STRONG",{});var vra=s(QAe);fNr=r(vra,"layoutlm"),vra.forEach(t),gNr=r(XUe," \u2014 "),Loe=n(XUe,"A",{href:!0});var Fra=s(Loe);hNr=r(Fra,"TFLayoutLMForMaskedLM"),Fra.forEach(t),uNr=r(XUe," (LayoutLM model)"),XUe.forEach(t),pNr=i(ie),Y5=n(ie,"LI",{});var zUe=s(Y5);WAe=n(zUe,"STRONG",{});var Tra=s(WAe);_Nr=r(Tra,"lxmert"),Tra.forEach(t),bNr=r(zUe," \u2014 "),yoe=n(zUe,"A",{href:!0});var Mra=s(yoe);vNr=r(Mra,"TFLxmertForPreTraining"),Mra.forEach(t),FNr=r(zUe," (LXMERT model)"),zUe.forEach(t),TNr=i(ie),K5=n(ie,"LI",{});var QUe=s(K5);UAe=n(QUe,"STRONG",{});var Era=s(UAe);MNr=r(Era,"mobilebert"),Era.forEach(t),ENr=r(QUe," \u2014 "),xoe=n(QUe,"A",{href:!0});var Cra=s(xoe);CNr=r(Cra,"TFMobileBertForPreTraining"),Cra.forEach(t),wNr=r(QUe," (MobileBERT model)"),QUe.forEach(t),ANr=i(ie),Z5=n(ie,"LI",{});var WUe=s(Z5);HAe=n(WUe,"STRONG",{});var wra=s(HAe);LNr=r(wra,"mpnet"),wra.forEach(t),yNr=r(WUe," \u2014 "),$oe=n(WUe,"A",{href:!0});var Ara=s($oe);xNr=r(Ara,"TFMPNetForMaskedLM"),Ara.forEach(t),$Nr=r(WUe," (MPNet model)"),WUe.forEach(t),kNr=i(ie),e0=n(ie,"LI",{});var UUe=s(e0);JAe=n(UUe,"STRONG",{});var Lra=s(JAe);SNr=r(Lra,"openai-gpt"),Lra.forEach(t),RNr=r(UUe," \u2014 "),koe=n(UUe,"A",{href:!0});var yra=s(koe);PNr=r(yra,"TFOpenAIGPTLMHeadModel"),yra.forEach(t),BNr=r(UUe," (OpenAI GPT model)"),UUe.forEach(t),INr=i(ie),o0=n(ie,"LI",{});var HUe=s(o0);YAe=n(HUe,"STRONG",{});var xra=s(YAe);NNr=r(xra,"roberta"),xra.forEach(t),qNr=r(HUe," \u2014 "),Soe=n(HUe,"A",{href:!0});var $ra=s(Soe);jNr=r($ra,"TFRobertaForMaskedLM"),$ra.forEach(t),DNr=r(HUe," (RoBERTa model)"),HUe.forEach(t),GNr=i(ie),r0=n(ie,"LI",{});var JUe=s(r0);KAe=n(JUe,"STRONG",{});var kra=s(KAe);ONr=r(kra,"t5"),kra.forEach(t),VNr=r(JUe," \u2014 "),Roe=n(JUe,"A",{href:!0});var Sra=s(Roe);XNr=r(Sra,"TFT5ForConditionalGeneration"),Sra.forEach(t),zNr=r(JUe," (T5 model)"),JUe.forEach(t),QNr=i(ie),t0=n(ie,"LI",{});var YUe=s(t0);ZAe=n(YUe,"STRONG",{});var Rra=s(ZAe);WNr=r(Rra,"tapas"),Rra.forEach(t),UNr=r(YUe," \u2014 "),Poe=n(YUe,"A",{href:!0});var Pra=s(Poe);HNr=r(Pra,"TFTapasForMaskedLM"),Pra.forEach(t),JNr=r(YUe," (TAPAS model)"),YUe.forEach(t),YNr=i(ie),a0=n(ie,"LI",{});var KUe=s(a0);e6e=n(KUe,"STRONG",{});var Bra=s(e6e);KNr=r(Bra,"transfo-xl"),Bra.forEach(t),ZNr=r(KUe," \u2014 "),Boe=n(KUe,"A",{href:!0});var Ira=s(Boe);eqr=r(Ira,"TFTransfoXLLMHeadModel"),Ira.forEach(t),oqr=r(KUe," (Transformer-XL model)"),KUe.forEach(t),rqr=i(ie),n0=n(ie,"LI",{});var ZUe=s(n0);o6e=n(ZUe,"STRONG",{});var Nra=s(o6e);tqr=r(Nra,"vit_mae"),Nra.forEach(t),aqr=r(ZUe," \u2014 "),Ioe=n(ZUe,"A",{href:!0});var qra=s(Ioe);nqr=r(qra,"TFViTMAEForPreTraining"),qra.forEach(t),sqr=r(ZUe," (ViTMAE model)"),ZUe.forEach(t),lqr=i(ie),s0=n(ie,"LI",{});var eHe=s(s0);r6e=n(eHe,"STRONG",{});var jra=s(r6e);iqr=r(jra,"xlm"),jra.forEach(t),dqr=r(eHe," \u2014 "),Noe=n(eHe,"A",{href:!0});var Dra=s(Noe);mqr=r(Dra,"TFXLMWithLMHeadModel"),Dra.forEach(t),cqr=r(eHe," (XLM model)"),eHe.forEach(t),fqr=i(ie),l0=n(ie,"LI",{});var oHe=s(l0);t6e=n(oHe,"STRONG",{});var Gra=s(t6e);gqr=r(Gra,"xlm-roberta"),Gra.forEach(t),hqr=r(oHe," \u2014 "),qoe=n(oHe,"A",{href:!0});var Ora=s(qoe);uqr=r(Ora,"TFXLMRobertaForMaskedLM"),Ora.forEach(t),pqr=r(oHe," (XLM-RoBERTa model)"),oHe.forEach(t),_qr=i(ie),i0=n(ie,"LI",{});var rHe=s(i0);a6e=n(rHe,"STRONG",{});var Vra=s(a6e);bqr=r(Vra,"xlnet"),Vra.forEach(t),vqr=r(rHe," \u2014 "),joe=n(rHe,"A",{href:!0});var Xra=s(joe);Fqr=r(Xra,"TFXLNetLMHeadModel"),Xra.forEach(t),Tqr=r(rHe," (XLNet model)"),rHe.forEach(t),ie.forEach(t),Mqr=i(ai),T(d0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),noo=i(c),Um=n(c,"H2",{class:!0});var Fto=s(Um);m0=n(Fto,"A",{id:!0,class:!0,href:!0});var zra=s(m0);n6e=n(zra,"SPAN",{});var Qra=s(n6e);T(sS.$$.fragment,Qra),Qra.forEach(t),zra.forEach(t),Eqr=i(Fto),s6e=n(Fto,"SPAN",{});var Wra=s(s6e);Cqr=r(Wra,"TFAutoModelForCausalLM"),Wra.forEach(t),Fto.forEach(t),soo=i(c),ir=n(c,"DIV",{class:!0});var ni=s(ir);T(lS.$$.fragment,ni),wqr=i(ni),Hm=n(ni,"P",{});var tde=s(Hm);Aqr=r(tde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Doe=n(tde,"A",{href:!0});var Ura=s(Doe);Lqr=r(Ura,"from_pretrained()"),Ura.forEach(t),yqr=r(tde," class method or the "),Goe=n(tde,"A",{href:!0});var Hra=s(Goe);xqr=r(Hra,"from_config()"),Hra.forEach(t),$qr=r(tde,` class
method.`),tde.forEach(t),kqr=i(ni),iS=n(ni,"P",{});var Tto=s(iS);Sqr=r(Tto,"This class cannot be instantiated directly using "),l6e=n(Tto,"CODE",{});var Jra=s(l6e);Rqr=r(Jra,"__init__()"),Jra.forEach(t),Pqr=r(Tto," (throws an error)."),Tto.forEach(t),Bqr=i(ni),Qt=n(ni,"DIV",{class:!0});var Z8=s(Qt);T(dS.$$.fragment,Z8),Iqr=i(Z8),i6e=n(Z8,"P",{});var Yra=s(i6e);Nqr=r(Yra,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Yra.forEach(t),qqr=i(Z8),Jm=n(Z8,"P",{});var ade=s(Jm);jqr=r(ade,`Note:
Loading a model from its configuration file does `),d6e=n(ade,"STRONG",{});var Kra=s(d6e);Dqr=r(Kra,"not"),Kra.forEach(t),Gqr=r(ade,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(ade,"A",{href:!0});var Zra=s(Ooe);Oqr=r(Zra,"from_pretrained()"),Zra.forEach(t),Vqr=r(ade," to load the model weights."),ade.forEach(t),Xqr=i(Z8),T(c0.$$.fragment,Z8),Z8.forEach(t),zqr=i(ni),qr=n(ni,"DIV",{class:!0});var si=s(qr);T(mS.$$.fragment,si),Qqr=i(si),m6e=n(si,"P",{});var eta=s(m6e);Wqr=r(eta,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eta.forEach(t),Uqr=i(si),Ln=n(si,"P",{});var e9=s(Ln);Hqr=r(e9,"The model class to instantiate is selected based on the "),c6e=n(e9,"CODE",{});var ota=s(c6e);Jqr=r(ota,"model_type"),ota.forEach(t),Yqr=r(e9,` property of the config object (either
passed as an argument or loaded from `),f6e=n(e9,"CODE",{});var rta=s(f6e);Kqr=r(rta,"pretrained_model_name_or_path"),rta.forEach(t),Zqr=r(e9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(e9,"CODE",{});var tta=s(g6e);ejr=r(tta,"pretrained_model_name_or_path"),tta.forEach(t),ojr=r(e9,":"),e9.forEach(t),rjr=i(si),Me=n(si,"UL",{});var Ce=s(Me);f0=n(Ce,"LI",{});var tHe=s(f0);h6e=n(tHe,"STRONG",{});var ata=s(h6e);tjr=r(ata,"bert"),ata.forEach(t),ajr=r(tHe," \u2014 "),Voe=n(tHe,"A",{href:!0});var nta=s(Voe);njr=r(nta,"TFBertLMHeadModel"),nta.forEach(t),sjr=r(tHe," (BERT model)"),tHe.forEach(t),ljr=i(Ce),g0=n(Ce,"LI",{});var aHe=s(g0);u6e=n(aHe,"STRONG",{});var sta=s(u6e);ijr=r(sta,"camembert"),sta.forEach(t),djr=r(aHe," \u2014 "),Xoe=n(aHe,"A",{href:!0});var lta=s(Xoe);mjr=r(lta,"TFCamembertForCausalLM"),lta.forEach(t),cjr=r(aHe," (CamemBERT model)"),aHe.forEach(t),fjr=i(Ce),h0=n(Ce,"LI",{});var nHe=s(h0);p6e=n(nHe,"STRONG",{});var ita=s(p6e);gjr=r(ita,"ctrl"),ita.forEach(t),hjr=r(nHe," \u2014 "),zoe=n(nHe,"A",{href:!0});var dta=s(zoe);ujr=r(dta,"TFCTRLLMHeadModel"),dta.forEach(t),pjr=r(nHe," (CTRL model)"),nHe.forEach(t),_jr=i(Ce),u0=n(Ce,"LI",{});var sHe=s(u0);_6e=n(sHe,"STRONG",{});var mta=s(_6e);bjr=r(mta,"gpt2"),mta.forEach(t),vjr=r(sHe," \u2014 "),Qoe=n(sHe,"A",{href:!0});var cta=s(Qoe);Fjr=r(cta,"TFGPT2LMHeadModel"),cta.forEach(t),Tjr=r(sHe," (OpenAI GPT-2 model)"),sHe.forEach(t),Mjr=i(Ce),p0=n(Ce,"LI",{});var lHe=s(p0);b6e=n(lHe,"STRONG",{});var fta=s(b6e);Ejr=r(fta,"gptj"),fta.forEach(t),Cjr=r(lHe," \u2014 "),Woe=n(lHe,"A",{href:!0});var gta=s(Woe);wjr=r(gta,"TFGPTJForCausalLM"),gta.forEach(t),Ajr=r(lHe," (GPT-J model)"),lHe.forEach(t),Ljr=i(Ce),_0=n(Ce,"LI",{});var iHe=s(_0);v6e=n(iHe,"STRONG",{});var hta=s(v6e);yjr=r(hta,"openai-gpt"),hta.forEach(t),xjr=r(iHe," \u2014 "),Uoe=n(iHe,"A",{href:!0});var uta=s(Uoe);$jr=r(uta,"TFOpenAIGPTLMHeadModel"),uta.forEach(t),kjr=r(iHe," (OpenAI GPT model)"),iHe.forEach(t),Sjr=i(Ce),b0=n(Ce,"LI",{});var dHe=s(b0);F6e=n(dHe,"STRONG",{});var pta=s(F6e);Rjr=r(pta,"opt"),pta.forEach(t),Pjr=r(dHe," \u2014 "),Hoe=n(dHe,"A",{href:!0});var _ta=s(Hoe);Bjr=r(_ta,"TFOPTForCausalLM"),_ta.forEach(t),Ijr=r(dHe," (OPT model)"),dHe.forEach(t),Njr=i(Ce),v0=n(Ce,"LI",{});var mHe=s(v0);T6e=n(mHe,"STRONG",{});var bta=s(T6e);qjr=r(bta,"rembert"),bta.forEach(t),jjr=r(mHe," \u2014 "),Joe=n(mHe,"A",{href:!0});var vta=s(Joe);Djr=r(vta,"TFRemBertForCausalLM"),vta.forEach(t),Gjr=r(mHe," (RemBERT model)"),mHe.forEach(t),Ojr=i(Ce),F0=n(Ce,"LI",{});var cHe=s(F0);M6e=n(cHe,"STRONG",{});var Fta=s(M6e);Vjr=r(Fta,"roberta"),Fta.forEach(t),Xjr=r(cHe," \u2014 "),Yoe=n(cHe,"A",{href:!0});var Tta=s(Yoe);zjr=r(Tta,"TFRobertaForCausalLM"),Tta.forEach(t),Qjr=r(cHe," (RoBERTa model)"),cHe.forEach(t),Wjr=i(Ce),T0=n(Ce,"LI",{});var fHe=s(T0);E6e=n(fHe,"STRONG",{});var Mta=s(E6e);Ujr=r(Mta,"roformer"),Mta.forEach(t),Hjr=r(fHe," \u2014 "),Koe=n(fHe,"A",{href:!0});var Eta=s(Koe);Jjr=r(Eta,"TFRoFormerForCausalLM"),Eta.forEach(t),Yjr=r(fHe," (RoFormer model)"),fHe.forEach(t),Kjr=i(Ce),M0=n(Ce,"LI",{});var gHe=s(M0);C6e=n(gHe,"STRONG",{});var Cta=s(C6e);Zjr=r(Cta,"transfo-xl"),Cta.forEach(t),eDr=r(gHe," \u2014 "),Zoe=n(gHe,"A",{href:!0});var wta=s(Zoe);oDr=r(wta,"TFTransfoXLLMHeadModel"),wta.forEach(t),rDr=r(gHe," (Transformer-XL model)"),gHe.forEach(t),tDr=i(Ce),E0=n(Ce,"LI",{});var hHe=s(E0);w6e=n(hHe,"STRONG",{});var Ata=s(w6e);aDr=r(Ata,"xglm"),Ata.forEach(t),nDr=r(hHe," \u2014 "),ere=n(hHe,"A",{href:!0});var Lta=s(ere);sDr=r(Lta,"TFXGLMForCausalLM"),Lta.forEach(t),lDr=r(hHe," (XGLM model)"),hHe.forEach(t),iDr=i(Ce),C0=n(Ce,"LI",{});var uHe=s(C0);A6e=n(uHe,"STRONG",{});var yta=s(A6e);dDr=r(yta,"xlm"),yta.forEach(t),mDr=r(uHe," \u2014 "),ore=n(uHe,"A",{href:!0});var xta=s(ore);cDr=r(xta,"TFXLMWithLMHeadModel"),xta.forEach(t),fDr=r(uHe," (XLM model)"),uHe.forEach(t),gDr=i(Ce),w0=n(Ce,"LI",{});var pHe=s(w0);L6e=n(pHe,"STRONG",{});var $ta=s(L6e);hDr=r($ta,"xlnet"),$ta.forEach(t),uDr=r(pHe," \u2014 "),rre=n(pHe,"A",{href:!0});var kta=s(rre);pDr=r(kta,"TFXLNetLMHeadModel"),kta.forEach(t),_Dr=r(pHe," (XLNet model)"),pHe.forEach(t),Ce.forEach(t),bDr=i(si),T(A0.$$.fragment,si),si.forEach(t),ni.forEach(t),loo=i(c),Ym=n(c,"H2",{class:!0});var Mto=s(Ym);L0=n(Mto,"A",{id:!0,class:!0,href:!0});var Sta=s(L0);y6e=n(Sta,"SPAN",{});var Rta=s(y6e);T(cS.$$.fragment,Rta),Rta.forEach(t),Sta.forEach(t),vDr=i(Mto),x6e=n(Mto,"SPAN",{});var Pta=s(x6e);FDr=r(Pta,"TFAutoModelForImageClassification"),Pta.forEach(t),Mto.forEach(t),ioo=i(c),dr=n(c,"DIV",{class:!0});var li=s(dr);T(fS.$$.fragment,li),TDr=i(li),Km=n(li,"P",{});var nde=s(Km);MDr=r(nde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tre=n(nde,"A",{href:!0});var Bta=s(tre);EDr=r(Bta,"from_pretrained()"),Bta.forEach(t),CDr=r(nde," class method or the "),are=n(nde,"A",{href:!0});var Ita=s(are);wDr=r(Ita,"from_config()"),Ita.forEach(t),ADr=r(nde,` class
method.`),nde.forEach(t),LDr=i(li),gS=n(li,"P",{});var Eto=s(gS);yDr=r(Eto,"This class cannot be instantiated directly using "),$6e=n(Eto,"CODE",{});var Nta=s($6e);xDr=r(Nta,"__init__()"),Nta.forEach(t),$Dr=r(Eto," (throws an error)."),Eto.forEach(t),kDr=i(li),Wt=n(li,"DIV",{class:!0});var o9=s(Wt);T(hS.$$.fragment,o9),SDr=i(o9),k6e=n(o9,"P",{});var qta=s(k6e);RDr=r(qta,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qta.forEach(t),PDr=i(o9),Zm=n(o9,"P",{});var sde=s(Zm);BDr=r(sde,`Note:
Loading a model from its configuration file does `),S6e=n(sde,"STRONG",{});var jta=s(S6e);IDr=r(jta,"not"),jta.forEach(t),NDr=r(sde,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(sde,"A",{href:!0});var Dta=s(nre);qDr=r(Dta,"from_pretrained()"),Dta.forEach(t),jDr=r(sde," to load the model weights."),sde.forEach(t),DDr=i(o9),T(y0.$$.fragment,o9),o9.forEach(t),GDr=i(li),jr=n(li,"DIV",{class:!0});var ii=s(jr);T(uS.$$.fragment,ii),ODr=i(ii),R6e=n(ii,"P",{});var Gta=s(R6e);VDr=r(Gta,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gta.forEach(t),XDr=i(ii),yn=n(ii,"P",{});var r9=s(yn);zDr=r(r9,"The model class to instantiate is selected based on the "),P6e=n(r9,"CODE",{});var Ota=s(P6e);QDr=r(Ota,"model_type"),Ota.forEach(t),WDr=r(r9,` property of the config object (either
passed as an argument or loaded from `),B6e=n(r9,"CODE",{});var Vta=s(B6e);UDr=r(Vta,"pretrained_model_name_or_path"),Vta.forEach(t),HDr=r(r9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=n(r9,"CODE",{});var Xta=s(I6e);JDr=r(Xta,"pretrained_model_name_or_path"),Xta.forEach(t),YDr=r(r9,":"),r9.forEach(t),KDr=i(ii),Be=n(ii,"UL",{});var We=s(Be);x0=n(We,"LI",{});var _He=s(x0);N6e=n(_He,"STRONG",{});var zta=s(N6e);ZDr=r(zta,"convnext"),zta.forEach(t),eGr=r(_He," \u2014 "),sre=n(_He,"A",{href:!0});var Qta=s(sre);oGr=r(Qta,"TFConvNextForImageClassification"),Qta.forEach(t),rGr=r(_He," (ConvNeXT model)"),_He.forEach(t),tGr=i(We),$0=n(We,"LI",{});var bHe=s($0);q6e=n(bHe,"STRONG",{});var Wta=s(q6e);aGr=r(Wta,"data2vec-vision"),Wta.forEach(t),nGr=r(bHe," \u2014 "),lre=n(bHe,"A",{href:!0});var Uta=s(lre);sGr=r(Uta,"TFData2VecVisionForImageClassification"),Uta.forEach(t),lGr=r(bHe," (Data2VecVision model)"),bHe.forEach(t),iGr=i(We),Tl=n(We,"LI",{});var eI=s(Tl);j6e=n(eI,"STRONG",{});var Hta=s(j6e);dGr=r(Hta,"deit"),Hta.forEach(t),mGr=r(eI," \u2014 "),ire=n(eI,"A",{href:!0});var Jta=s(ire);cGr=r(Jta,"TFDeiTForImageClassification"),Jta.forEach(t),fGr=r(eI," or "),dre=n(eI,"A",{href:!0});var Yta=s(dre);gGr=r(Yta,"TFDeiTForImageClassificationWithTeacher"),Yta.forEach(t),hGr=r(eI," (DeiT model)"),eI.forEach(t),uGr=i(We),k0=n(We,"LI",{});var vHe=s(k0);D6e=n(vHe,"STRONG",{});var Kta=s(D6e);pGr=r(Kta,"mobilevit"),Kta.forEach(t),_Gr=r(vHe," \u2014 "),mre=n(vHe,"A",{href:!0});var Zta=s(mre);bGr=r(Zta,"TFMobileViTForImageClassification"),Zta.forEach(t),vGr=r(vHe," (MobileViT model)"),vHe.forEach(t),FGr=i(We),S0=n(We,"LI",{});var FHe=s(S0);G6e=n(FHe,"STRONG",{});var eaa=s(G6e);TGr=r(eaa,"regnet"),eaa.forEach(t),MGr=r(FHe," \u2014 "),cre=n(FHe,"A",{href:!0});var oaa=s(cre);EGr=r(oaa,"TFRegNetForImageClassification"),oaa.forEach(t),CGr=r(FHe," (RegNet model)"),FHe.forEach(t),wGr=i(We),R0=n(We,"LI",{});var THe=s(R0);O6e=n(THe,"STRONG",{});var raa=s(O6e);AGr=r(raa,"resnet"),raa.forEach(t),LGr=r(THe," \u2014 "),fre=n(THe,"A",{href:!0});var taa=s(fre);yGr=r(taa,"TFResNetForImageClassification"),taa.forEach(t),xGr=r(THe," (ResNet model)"),THe.forEach(t),$Gr=i(We),P0=n(We,"LI",{});var MHe=s(P0);V6e=n(MHe,"STRONG",{});var aaa=s(V6e);kGr=r(aaa,"segformer"),aaa.forEach(t),SGr=r(MHe," \u2014 "),gre=n(MHe,"A",{href:!0});var naa=s(gre);RGr=r(naa,"TFSegformerForImageClassification"),naa.forEach(t),PGr=r(MHe," (SegFormer model)"),MHe.forEach(t),BGr=i(We),B0=n(We,"LI",{});var EHe=s(B0);X6e=n(EHe,"STRONG",{});var saa=s(X6e);IGr=r(saa,"swin"),saa.forEach(t),NGr=r(EHe," \u2014 "),hre=n(EHe,"A",{href:!0});var laa=s(hre);qGr=r(laa,"TFSwinForImageClassification"),laa.forEach(t),jGr=r(EHe," (Swin Transformer model)"),EHe.forEach(t),DGr=i(We),I0=n(We,"LI",{});var CHe=s(I0);z6e=n(CHe,"STRONG",{});var iaa=s(z6e);GGr=r(iaa,"vit"),iaa.forEach(t),OGr=r(CHe," \u2014 "),ure=n(CHe,"A",{href:!0});var daa=s(ure);VGr=r(daa,"TFViTForImageClassification"),daa.forEach(t),XGr=r(CHe," (ViT model)"),CHe.forEach(t),We.forEach(t),zGr=i(ii),T(N0.$$.fragment,ii),ii.forEach(t),li.forEach(t),doo=i(c),ec=n(c,"H2",{class:!0});var Cto=s(ec);q0=n(Cto,"A",{id:!0,class:!0,href:!0});var maa=s(q0);Q6e=n(maa,"SPAN",{});var caa=s(Q6e);T(pS.$$.fragment,caa),caa.forEach(t),maa.forEach(t),QGr=i(Cto),W6e=n(Cto,"SPAN",{});var faa=s(W6e);WGr=r(faa,"TFAutoModelForSemanticSegmentation"),faa.forEach(t),Cto.forEach(t),moo=i(c),mr=n(c,"DIV",{class:!0});var di=s(mr);T(_S.$$.fragment,di),UGr=i(di),oc=n(di,"P",{});var lde=s(oc);HGr=r(lde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pre=n(lde,"A",{href:!0});var gaa=s(pre);JGr=r(gaa,"from_pretrained()"),gaa.forEach(t),YGr=r(lde," class method or the "),_re=n(lde,"A",{href:!0});var haa=s(_re);KGr=r(haa,"from_config()"),haa.forEach(t),ZGr=r(lde,` class
method.`),lde.forEach(t),eOr=i(di),bS=n(di,"P",{});var wto=s(bS);oOr=r(wto,"This class cannot be instantiated directly using "),U6e=n(wto,"CODE",{});var uaa=s(U6e);rOr=r(uaa,"__init__()"),uaa.forEach(t),tOr=r(wto," (throws an error)."),wto.forEach(t),aOr=i(di),Ut=n(di,"DIV",{class:!0});var t9=s(Ut);T(vS.$$.fragment,t9),nOr=i(t9),H6e=n(t9,"P",{});var paa=s(H6e);sOr=r(paa,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),paa.forEach(t),lOr=i(t9),rc=n(t9,"P",{});var ide=s(rc);iOr=r(ide,`Note:
Loading a model from its configuration file does `),J6e=n(ide,"STRONG",{});var _aa=s(J6e);dOr=r(_aa,"not"),_aa.forEach(t),mOr=r(ide,` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=n(ide,"A",{href:!0});var baa=s(bre);cOr=r(baa,"from_pretrained()"),baa.forEach(t),fOr=r(ide," to load the model weights."),ide.forEach(t),gOr=i(t9),T(j0.$$.fragment,t9),t9.forEach(t),hOr=i(di),Dr=n(di,"DIV",{class:!0});var mi=s(Dr);T(FS.$$.fragment,mi),uOr=i(mi),Y6e=n(mi,"P",{});var vaa=s(Y6e);pOr=r(vaa,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vaa.forEach(t),_Or=i(mi),xn=n(mi,"P",{});var a9=s(xn);bOr=r(a9,"The model class to instantiate is selected based on the "),K6e=n(a9,"CODE",{});var Faa=s(K6e);vOr=r(Faa,"model_type"),Faa.forEach(t),FOr=r(a9,` property of the config object (either
passed as an argument or loaded from `),Z6e=n(a9,"CODE",{});var Taa=s(Z6e);TOr=r(Taa,"pretrained_model_name_or_path"),Taa.forEach(t),MOr=r(a9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=n(a9,"CODE",{});var Maa=s(e7e);EOr=r(Maa,"pretrained_model_name_or_path"),Maa.forEach(t),COr=r(a9,":"),a9.forEach(t),wOr=i(mi),tc=n(mi,"UL",{});var dde=s(tc);D0=n(dde,"LI",{});var wHe=s(D0);o7e=n(wHe,"STRONG",{});var Eaa=s(o7e);AOr=r(Eaa,"data2vec-vision"),Eaa.forEach(t),LOr=r(wHe," \u2014 "),vre=n(wHe,"A",{href:!0});var Caa=s(vre);yOr=r(Caa,"TFData2VecVisionForSemanticSegmentation"),Caa.forEach(t),xOr=r(wHe," (Data2VecVision model)"),wHe.forEach(t),$Or=i(dde),G0=n(dde,"LI",{});var AHe=s(G0);r7e=n(AHe,"STRONG",{});var waa=s(r7e);kOr=r(waa,"mobilevit"),waa.forEach(t),SOr=r(AHe," \u2014 "),Fre=n(AHe,"A",{href:!0});var Aaa=s(Fre);ROr=r(Aaa,"TFMobileViTForSemanticSegmentation"),Aaa.forEach(t),POr=r(AHe," (MobileViT model)"),AHe.forEach(t),BOr=i(dde),O0=n(dde,"LI",{});var LHe=s(O0);t7e=n(LHe,"STRONG",{});var Laa=s(t7e);IOr=r(Laa,"segformer"),Laa.forEach(t),NOr=r(LHe," \u2014 "),Tre=n(LHe,"A",{href:!0});var yaa=s(Tre);qOr=r(yaa,"TFSegformerForSemanticSegmentation"),yaa.forEach(t),jOr=r(LHe," (SegFormer model)"),LHe.forEach(t),dde.forEach(t),DOr=i(mi),T(V0.$$.fragment,mi),mi.forEach(t),di.forEach(t),coo=i(c),ac=n(c,"H2",{class:!0});var Ato=s(ac);X0=n(Ato,"A",{id:!0,class:!0,href:!0});var xaa=s(X0);a7e=n(xaa,"SPAN",{});var $aa=s(a7e);T(TS.$$.fragment,$aa),$aa.forEach(t),xaa.forEach(t),GOr=i(Ato),n7e=n(Ato,"SPAN",{});var kaa=s(n7e);OOr=r(kaa,"TFAutoModelForMaskedLM"),kaa.forEach(t),Ato.forEach(t),foo=i(c),cr=n(c,"DIV",{class:!0});var ci=s(cr);T(MS.$$.fragment,ci),VOr=i(ci),nc=n(ci,"P",{});var mde=s(nc);XOr=r(mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mre=n(mde,"A",{href:!0});var Saa=s(Mre);zOr=r(Saa,"from_pretrained()"),Saa.forEach(t),QOr=r(mde," class method or the "),Ere=n(mde,"A",{href:!0});var Raa=s(Ere);WOr=r(Raa,"from_config()"),Raa.forEach(t),UOr=r(mde,` class
method.`),mde.forEach(t),HOr=i(ci),ES=n(ci,"P",{});var Lto=s(ES);JOr=r(Lto,"This class cannot be instantiated directly using "),s7e=n(Lto,"CODE",{});var Paa=s(s7e);YOr=r(Paa,"__init__()"),Paa.forEach(t),KOr=r(Lto," (throws an error)."),Lto.forEach(t),ZOr=i(ci),Ht=n(ci,"DIV",{class:!0});var n9=s(Ht);T(CS.$$.fragment,n9),eVr=i(n9),l7e=n(n9,"P",{});var Baa=s(l7e);oVr=r(Baa,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Baa.forEach(t),rVr=i(n9),sc=n(n9,"P",{});var cde=s(sc);tVr=r(cde,`Note:
Loading a model from its configuration file does `),i7e=n(cde,"STRONG",{});var Iaa=s(i7e);aVr=r(Iaa,"not"),Iaa.forEach(t),nVr=r(cde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(cde,"A",{href:!0});var Naa=s(Cre);sVr=r(Naa,"from_pretrained()"),Naa.forEach(t),lVr=r(cde," to load the model weights."),cde.forEach(t),iVr=i(n9),T(z0.$$.fragment,n9),n9.forEach(t),dVr=i(ci),Gr=n(ci,"DIV",{class:!0});var fi=s(Gr);T(wS.$$.fragment,fi),mVr=i(fi),d7e=n(fi,"P",{});var qaa=s(d7e);cVr=r(qaa,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qaa.forEach(t),fVr=i(fi),$n=n(fi,"P",{});var s9=s($n);gVr=r(s9,"The model class to instantiate is selected based on the "),m7e=n(s9,"CODE",{});var jaa=s(m7e);hVr=r(jaa,"model_type"),jaa.forEach(t),uVr=r(s9,` property of the config object (either
passed as an argument or loaded from `),c7e=n(s9,"CODE",{});var Daa=s(c7e);pVr=r(Daa,"pretrained_model_name_or_path"),Daa.forEach(t),_Vr=r(s9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(s9,"CODE",{});var Gaa=s(f7e);bVr=r(Gaa,"pretrained_model_name_or_path"),Gaa.forEach(t),vVr=r(s9,":"),s9.forEach(t),FVr=i(fi),ge=n(fi,"UL",{});var _e=s(ge);Q0=n(_e,"LI",{});var yHe=s(Q0);g7e=n(yHe,"STRONG",{});var Oaa=s(g7e);TVr=r(Oaa,"albert"),Oaa.forEach(t),MVr=r(yHe," \u2014 "),wre=n(yHe,"A",{href:!0});var Vaa=s(wre);EVr=r(Vaa,"TFAlbertForMaskedLM"),Vaa.forEach(t),CVr=r(yHe," (ALBERT model)"),yHe.forEach(t),wVr=i(_e),W0=n(_e,"LI",{});var xHe=s(W0);h7e=n(xHe,"STRONG",{});var Xaa=s(h7e);AVr=r(Xaa,"bert"),Xaa.forEach(t),LVr=r(xHe," \u2014 "),Are=n(xHe,"A",{href:!0});var zaa=s(Are);yVr=r(zaa,"TFBertForMaskedLM"),zaa.forEach(t),xVr=r(xHe," (BERT model)"),xHe.forEach(t),$Vr=i(_e),U0=n(_e,"LI",{});var $He=s(U0);u7e=n($He,"STRONG",{});var Qaa=s(u7e);kVr=r(Qaa,"camembert"),Qaa.forEach(t),SVr=r($He," \u2014 "),Lre=n($He,"A",{href:!0});var Waa=s(Lre);RVr=r(Waa,"TFCamembertForMaskedLM"),Waa.forEach(t),PVr=r($He," (CamemBERT model)"),$He.forEach(t),BVr=i(_e),H0=n(_e,"LI",{});var kHe=s(H0);p7e=n(kHe,"STRONG",{});var Uaa=s(p7e);IVr=r(Uaa,"convbert"),Uaa.forEach(t),NVr=r(kHe," \u2014 "),yre=n(kHe,"A",{href:!0});var Haa=s(yre);qVr=r(Haa,"TFConvBertForMaskedLM"),Haa.forEach(t),jVr=r(kHe," (ConvBERT model)"),kHe.forEach(t),DVr=i(_e),J0=n(_e,"LI",{});var SHe=s(J0);_7e=n(SHe,"STRONG",{});var Jaa=s(_7e);GVr=r(Jaa,"deberta"),Jaa.forEach(t),OVr=r(SHe," \u2014 "),xre=n(SHe,"A",{href:!0});var Yaa=s(xre);VVr=r(Yaa,"TFDebertaForMaskedLM"),Yaa.forEach(t),XVr=r(SHe," (DeBERTa model)"),SHe.forEach(t),zVr=i(_e),Y0=n(_e,"LI",{});var RHe=s(Y0);b7e=n(RHe,"STRONG",{});var Kaa=s(b7e);QVr=r(Kaa,"deberta-v2"),Kaa.forEach(t),WVr=r(RHe," \u2014 "),$re=n(RHe,"A",{href:!0});var Zaa=s($re);UVr=r(Zaa,"TFDebertaV2ForMaskedLM"),Zaa.forEach(t),HVr=r(RHe," (DeBERTa-v2 model)"),RHe.forEach(t),JVr=i(_e),K0=n(_e,"LI",{});var PHe=s(K0);v7e=n(PHe,"STRONG",{});var ena=s(v7e);YVr=r(ena,"distilbert"),ena.forEach(t),KVr=r(PHe," \u2014 "),kre=n(PHe,"A",{href:!0});var ona=s(kre);ZVr=r(ona,"TFDistilBertForMaskedLM"),ona.forEach(t),eXr=r(PHe," (DistilBERT model)"),PHe.forEach(t),oXr=i(_e),Z0=n(_e,"LI",{});var BHe=s(Z0);F7e=n(BHe,"STRONG",{});var rna=s(F7e);rXr=r(rna,"electra"),rna.forEach(t),tXr=r(BHe," \u2014 "),Sre=n(BHe,"A",{href:!0});var tna=s(Sre);aXr=r(tna,"TFElectraForMaskedLM"),tna.forEach(t),nXr=r(BHe," (ELECTRA model)"),BHe.forEach(t),sXr=i(_e),ew=n(_e,"LI",{});var IHe=s(ew);T7e=n(IHe,"STRONG",{});var ana=s(T7e);lXr=r(ana,"flaubert"),ana.forEach(t),iXr=r(IHe," \u2014 "),Rre=n(IHe,"A",{href:!0});var nna=s(Rre);dXr=r(nna,"TFFlaubertWithLMHeadModel"),nna.forEach(t),mXr=r(IHe," (FlauBERT model)"),IHe.forEach(t),cXr=i(_e),ow=n(_e,"LI",{});var NHe=s(ow);M7e=n(NHe,"STRONG",{});var sna=s(M7e);fXr=r(sna,"funnel"),sna.forEach(t),gXr=r(NHe," \u2014 "),Pre=n(NHe,"A",{href:!0});var lna=s(Pre);hXr=r(lna,"TFFunnelForMaskedLM"),lna.forEach(t),uXr=r(NHe," (Funnel Transformer model)"),NHe.forEach(t),pXr=i(_e),rw=n(_e,"LI",{});var qHe=s(rw);E7e=n(qHe,"STRONG",{});var ina=s(E7e);_Xr=r(ina,"layoutlm"),ina.forEach(t),bXr=r(qHe," \u2014 "),Bre=n(qHe,"A",{href:!0});var dna=s(Bre);vXr=r(dna,"TFLayoutLMForMaskedLM"),dna.forEach(t),FXr=r(qHe," (LayoutLM model)"),qHe.forEach(t),TXr=i(_e),tw=n(_e,"LI",{});var jHe=s(tw);C7e=n(jHe,"STRONG",{});var mna=s(C7e);MXr=r(mna,"longformer"),mna.forEach(t),EXr=r(jHe," \u2014 "),Ire=n(jHe,"A",{href:!0});var cna=s(Ire);CXr=r(cna,"TFLongformerForMaskedLM"),cna.forEach(t),wXr=r(jHe," (Longformer model)"),jHe.forEach(t),AXr=i(_e),aw=n(_e,"LI",{});var DHe=s(aw);w7e=n(DHe,"STRONG",{});var fna=s(w7e);LXr=r(fna,"mobilebert"),fna.forEach(t),yXr=r(DHe," \u2014 "),Nre=n(DHe,"A",{href:!0});var gna=s(Nre);xXr=r(gna,"TFMobileBertForMaskedLM"),gna.forEach(t),$Xr=r(DHe," (MobileBERT model)"),DHe.forEach(t),kXr=i(_e),nw=n(_e,"LI",{});var GHe=s(nw);A7e=n(GHe,"STRONG",{});var hna=s(A7e);SXr=r(hna,"mpnet"),hna.forEach(t),RXr=r(GHe," \u2014 "),qre=n(GHe,"A",{href:!0});var una=s(qre);PXr=r(una,"TFMPNetForMaskedLM"),una.forEach(t),BXr=r(GHe," (MPNet model)"),GHe.forEach(t),IXr=i(_e),sw=n(_e,"LI",{});var OHe=s(sw);L7e=n(OHe,"STRONG",{});var pna=s(L7e);NXr=r(pna,"rembert"),pna.forEach(t),qXr=r(OHe," \u2014 "),jre=n(OHe,"A",{href:!0});var _na=s(jre);jXr=r(_na,"TFRemBertForMaskedLM"),_na.forEach(t),DXr=r(OHe," (RemBERT model)"),OHe.forEach(t),GXr=i(_e),lw=n(_e,"LI",{});var VHe=s(lw);y7e=n(VHe,"STRONG",{});var bna=s(y7e);OXr=r(bna,"roberta"),bna.forEach(t),VXr=r(VHe," \u2014 "),Dre=n(VHe,"A",{href:!0});var vna=s(Dre);XXr=r(vna,"TFRobertaForMaskedLM"),vna.forEach(t),zXr=r(VHe," (RoBERTa model)"),VHe.forEach(t),QXr=i(_e),iw=n(_e,"LI",{});var XHe=s(iw);x7e=n(XHe,"STRONG",{});var Fna=s(x7e);WXr=r(Fna,"roformer"),Fna.forEach(t),UXr=r(XHe," \u2014 "),Gre=n(XHe,"A",{href:!0});var Tna=s(Gre);HXr=r(Tna,"TFRoFormerForMaskedLM"),Tna.forEach(t),JXr=r(XHe," (RoFormer model)"),XHe.forEach(t),YXr=i(_e),dw=n(_e,"LI",{});var zHe=s(dw);$7e=n(zHe,"STRONG",{});var Mna=s($7e);KXr=r(Mna,"tapas"),Mna.forEach(t),ZXr=r(zHe," \u2014 "),Ore=n(zHe,"A",{href:!0});var Ena=s(Ore);ezr=r(Ena,"TFTapasForMaskedLM"),Ena.forEach(t),ozr=r(zHe," (TAPAS model)"),zHe.forEach(t),rzr=i(_e),mw=n(_e,"LI",{});var QHe=s(mw);k7e=n(QHe,"STRONG",{});var Cna=s(k7e);tzr=r(Cna,"xlm"),Cna.forEach(t),azr=r(QHe," \u2014 "),Vre=n(QHe,"A",{href:!0});var wna=s(Vre);nzr=r(wna,"TFXLMWithLMHeadModel"),wna.forEach(t),szr=r(QHe," (XLM model)"),QHe.forEach(t),lzr=i(_e),cw=n(_e,"LI",{});var WHe=s(cw);S7e=n(WHe,"STRONG",{});var Ana=s(S7e);izr=r(Ana,"xlm-roberta"),Ana.forEach(t),dzr=r(WHe," \u2014 "),Xre=n(WHe,"A",{href:!0});var Lna=s(Xre);mzr=r(Lna,"TFXLMRobertaForMaskedLM"),Lna.forEach(t),czr=r(WHe," (XLM-RoBERTa model)"),WHe.forEach(t),_e.forEach(t),fzr=i(fi),T(fw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),goo=i(c),lc=n(c,"H2",{class:!0});var yto=s(lc);gw=n(yto,"A",{id:!0,class:!0,href:!0});var yna=s(gw);R7e=n(yna,"SPAN",{});var xna=s(R7e);T(AS.$$.fragment,xna),xna.forEach(t),yna.forEach(t),gzr=i(yto),P7e=n(yto,"SPAN",{});var $na=s(P7e);hzr=r($na,"TFAutoModelForSeq2SeqLM"),$na.forEach(t),yto.forEach(t),hoo=i(c),fr=n(c,"DIV",{class:!0});var gi=s(fr);T(LS.$$.fragment,gi),uzr=i(gi),ic=n(gi,"P",{});var fde=s(ic);pzr=r(fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zre=n(fde,"A",{href:!0});var kna=s(zre);_zr=r(kna,"from_pretrained()"),kna.forEach(t),bzr=r(fde," class method or the "),Qre=n(fde,"A",{href:!0});var Sna=s(Qre);vzr=r(Sna,"from_config()"),Sna.forEach(t),Fzr=r(fde,` class
method.`),fde.forEach(t),Tzr=i(gi),yS=n(gi,"P",{});var xto=s(yS);Mzr=r(xto,"This class cannot be instantiated directly using "),B7e=n(xto,"CODE",{});var Rna=s(B7e);Ezr=r(Rna,"__init__()"),Rna.forEach(t),Czr=r(xto," (throws an error)."),xto.forEach(t),wzr=i(gi),Jt=n(gi,"DIV",{class:!0});var l9=s(Jt);T(xS.$$.fragment,l9),Azr=i(l9),I7e=n(l9,"P",{});var Pna=s(I7e);Lzr=r(Pna,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pna.forEach(t),yzr=i(l9),dc=n(l9,"P",{});var gde=s(dc);xzr=r(gde,`Note:
Loading a model from its configuration file does `),N7e=n(gde,"STRONG",{});var Bna=s(N7e);$zr=r(Bna,"not"),Bna.forEach(t),kzr=r(gde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=n(gde,"A",{href:!0});var Ina=s(Wre);Szr=r(Ina,"from_pretrained()"),Ina.forEach(t),Rzr=r(gde," to load the model weights."),gde.forEach(t),Pzr=i(l9),T(hw.$$.fragment,l9),l9.forEach(t),Bzr=i(gi),Or=n(gi,"DIV",{class:!0});var hi=s(Or);T($S.$$.fragment,hi),Izr=i(hi),q7e=n(hi,"P",{});var Nna=s(q7e);Nzr=r(Nna,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nna.forEach(t),qzr=i(hi),kn=n(hi,"P",{});var i9=s(kn);jzr=r(i9,"The model class to instantiate is selected based on the "),j7e=n(i9,"CODE",{});var qna=s(j7e);Dzr=r(qna,"model_type"),qna.forEach(t),Gzr=r(i9,` property of the config object (either
passed as an argument or loaded from `),D7e=n(i9,"CODE",{});var jna=s(D7e);Ozr=r(jna,"pretrained_model_name_or_path"),jna.forEach(t),Vzr=r(i9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G7e=n(i9,"CODE",{});var Dna=s(G7e);Xzr=r(Dna,"pretrained_model_name_or_path"),Dna.forEach(t),zzr=r(i9,":"),i9.forEach(t),Qzr=i(hi),ye=n(hi,"UL",{});var Ne=s(ye);uw=n(Ne,"LI",{});var UHe=s(uw);O7e=n(UHe,"STRONG",{});var Gna=s(O7e);Wzr=r(Gna,"bart"),Gna.forEach(t),Uzr=r(UHe," \u2014 "),Ure=n(UHe,"A",{href:!0});var Ona=s(Ure);Hzr=r(Ona,"TFBartForConditionalGeneration"),Ona.forEach(t),Jzr=r(UHe," (BART model)"),UHe.forEach(t),Yzr=i(Ne),pw=n(Ne,"LI",{});var HHe=s(pw);V7e=n(HHe,"STRONG",{});var Vna=s(V7e);Kzr=r(Vna,"blenderbot"),Vna.forEach(t),Zzr=r(HHe," \u2014 "),Hre=n(HHe,"A",{href:!0});var Xna=s(Hre);eQr=r(Xna,"TFBlenderbotForConditionalGeneration"),Xna.forEach(t),oQr=r(HHe," (Blenderbot model)"),HHe.forEach(t),rQr=i(Ne),_w=n(Ne,"LI",{});var JHe=s(_w);X7e=n(JHe,"STRONG",{});var zna=s(X7e);tQr=r(zna,"blenderbot-small"),zna.forEach(t),aQr=r(JHe," \u2014 "),Jre=n(JHe,"A",{href:!0});var Qna=s(Jre);nQr=r(Qna,"TFBlenderbotSmallForConditionalGeneration"),Qna.forEach(t),sQr=r(JHe," (BlenderbotSmall model)"),JHe.forEach(t),lQr=i(Ne),bw=n(Ne,"LI",{});var YHe=s(bw);z7e=n(YHe,"STRONG",{});var Wna=s(z7e);iQr=r(Wna,"encoder-decoder"),Wna.forEach(t),dQr=r(YHe," \u2014 "),Yre=n(YHe,"A",{href:!0});var Una=s(Yre);mQr=r(Una,"TFEncoderDecoderModel"),Una.forEach(t),cQr=r(YHe," (Encoder decoder model)"),YHe.forEach(t),fQr=i(Ne),vw=n(Ne,"LI",{});var KHe=s(vw);Q7e=n(KHe,"STRONG",{});var Hna=s(Q7e);gQr=r(Hna,"led"),Hna.forEach(t),hQr=r(KHe," \u2014 "),Kre=n(KHe,"A",{href:!0});var Jna=s(Kre);uQr=r(Jna,"TFLEDForConditionalGeneration"),Jna.forEach(t),pQr=r(KHe," (LED model)"),KHe.forEach(t),_Qr=i(Ne),Fw=n(Ne,"LI",{});var ZHe=s(Fw);W7e=n(ZHe,"STRONG",{});var Yna=s(W7e);bQr=r(Yna,"marian"),Yna.forEach(t),vQr=r(ZHe," \u2014 "),Zre=n(ZHe,"A",{href:!0});var Kna=s(Zre);FQr=r(Kna,"TFMarianMTModel"),Kna.forEach(t),TQr=r(ZHe," (Marian model)"),ZHe.forEach(t),MQr=i(Ne),Tw=n(Ne,"LI",{});var eJe=s(Tw);U7e=n(eJe,"STRONG",{});var Zna=s(U7e);EQr=r(Zna,"mbart"),Zna.forEach(t),CQr=r(eJe," \u2014 "),ete=n(eJe,"A",{href:!0});var esa=s(ete);wQr=r(esa,"TFMBartForConditionalGeneration"),esa.forEach(t),AQr=r(eJe," (mBART model)"),eJe.forEach(t),LQr=i(Ne),Mw=n(Ne,"LI",{});var oJe=s(Mw);H7e=n(oJe,"STRONG",{});var osa=s(H7e);yQr=r(osa,"mt5"),osa.forEach(t),xQr=r(oJe," \u2014 "),ote=n(oJe,"A",{href:!0});var rsa=s(ote);$Qr=r(rsa,"TFMT5ForConditionalGeneration"),rsa.forEach(t),kQr=r(oJe," (MT5 model)"),oJe.forEach(t),SQr=i(Ne),Ew=n(Ne,"LI",{});var rJe=s(Ew);J7e=n(rJe,"STRONG",{});var tsa=s(J7e);RQr=r(tsa,"pegasus"),tsa.forEach(t),PQr=r(rJe," \u2014 "),rte=n(rJe,"A",{href:!0});var asa=s(rte);BQr=r(asa,"TFPegasusForConditionalGeneration"),asa.forEach(t),IQr=r(rJe," (Pegasus model)"),rJe.forEach(t),NQr=i(Ne),Cw=n(Ne,"LI",{});var tJe=s(Cw);Y7e=n(tJe,"STRONG",{});var nsa=s(Y7e);qQr=r(nsa,"t5"),nsa.forEach(t),jQr=r(tJe," \u2014 "),tte=n(tJe,"A",{href:!0});var ssa=s(tte);DQr=r(ssa,"TFT5ForConditionalGeneration"),ssa.forEach(t),GQr=r(tJe," (T5 model)"),tJe.forEach(t),Ne.forEach(t),OQr=i(hi),T(ww.$$.fragment,hi),hi.forEach(t),gi.forEach(t),uoo=i(c),mc=n(c,"H2",{class:!0});var $to=s(mc);Aw=n($to,"A",{id:!0,class:!0,href:!0});var lsa=s(Aw);K7e=n(lsa,"SPAN",{});var isa=s(K7e);T(kS.$$.fragment,isa),isa.forEach(t),lsa.forEach(t),VQr=i($to),Z7e=n($to,"SPAN",{});var dsa=s(Z7e);XQr=r(dsa,"TFAutoModelForSequenceClassification"),dsa.forEach(t),$to.forEach(t),poo=i(c),gr=n(c,"DIV",{class:!0});var ui=s(gr);T(SS.$$.fragment,ui),zQr=i(ui),cc=n(ui,"P",{});var hde=s(cc);QQr=r(hde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ate=n(hde,"A",{href:!0});var msa=s(ate);WQr=r(msa,"from_pretrained()"),msa.forEach(t),UQr=r(hde," class method or the "),nte=n(hde,"A",{href:!0});var csa=s(nte);HQr=r(csa,"from_config()"),csa.forEach(t),JQr=r(hde,` class
method.`),hde.forEach(t),YQr=i(ui),RS=n(ui,"P",{});var kto=s(RS);KQr=r(kto,"This class cannot be instantiated directly using "),eLe=n(kto,"CODE",{});var fsa=s(eLe);ZQr=r(fsa,"__init__()"),fsa.forEach(t),eWr=r(kto," (throws an error)."),kto.forEach(t),oWr=i(ui),Yt=n(ui,"DIV",{class:!0});var d9=s(Yt);T(PS.$$.fragment,d9),rWr=i(d9),oLe=n(d9,"P",{});var gsa=s(oLe);tWr=r(gsa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gsa.forEach(t),aWr=i(d9),fc=n(d9,"P",{});var ude=s(fc);nWr=r(ude,`Note:
Loading a model from its configuration file does `),rLe=n(ude,"STRONG",{});var hsa=s(rLe);sWr=r(hsa,"not"),hsa.forEach(t),lWr=r(ude,` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=n(ude,"A",{href:!0});var usa=s(ste);iWr=r(usa,"from_pretrained()"),usa.forEach(t),dWr=r(ude," to load the model weights."),ude.forEach(t),mWr=i(d9),T(Lw.$$.fragment,d9),d9.forEach(t),cWr=i(ui),Vr=n(ui,"DIV",{class:!0});var pi=s(Vr);T(BS.$$.fragment,pi),fWr=i(pi),tLe=n(pi,"P",{});var psa=s(tLe);gWr=r(psa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),psa.forEach(t),hWr=i(pi),Sn=n(pi,"P",{});var m9=s(Sn);uWr=r(m9,"The model class to instantiate is selected based on the "),aLe=n(m9,"CODE",{});var _sa=s(aLe);pWr=r(_sa,"model_type"),_sa.forEach(t),_Wr=r(m9,` property of the config object (either
passed as an argument or loaded from `),nLe=n(m9,"CODE",{});var bsa=s(nLe);bWr=r(bsa,"pretrained_model_name_or_path"),bsa.forEach(t),vWr=r(m9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sLe=n(m9,"CODE",{});var vsa=s(sLe);FWr=r(vsa,"pretrained_model_name_or_path"),vsa.forEach(t),TWr=r(m9,":"),m9.forEach(t),MWr=i(pi),re=n(pi,"UL",{});var ae=s(re);yw=n(ae,"LI",{});var aJe=s(yw);lLe=n(aJe,"STRONG",{});var Fsa=s(lLe);EWr=r(Fsa,"albert"),Fsa.forEach(t),CWr=r(aJe," \u2014 "),lte=n(aJe,"A",{href:!0});var Tsa=s(lte);wWr=r(Tsa,"TFAlbertForSequenceClassification"),Tsa.forEach(t),AWr=r(aJe," (ALBERT model)"),aJe.forEach(t),LWr=i(ae),xw=n(ae,"LI",{});var nJe=s(xw);iLe=n(nJe,"STRONG",{});var Msa=s(iLe);yWr=r(Msa,"bert"),Msa.forEach(t),xWr=r(nJe," \u2014 "),ite=n(nJe,"A",{href:!0});var Esa=s(ite);$Wr=r(Esa,"TFBertForSequenceClassification"),Esa.forEach(t),kWr=r(nJe," (BERT model)"),nJe.forEach(t),SWr=i(ae),$w=n(ae,"LI",{});var sJe=s($w);dLe=n(sJe,"STRONG",{});var Csa=s(dLe);RWr=r(Csa,"camembert"),Csa.forEach(t),PWr=r(sJe," \u2014 "),dte=n(sJe,"A",{href:!0});var wsa=s(dte);BWr=r(wsa,"TFCamembertForSequenceClassification"),wsa.forEach(t),IWr=r(sJe," (CamemBERT model)"),sJe.forEach(t),NWr=i(ae),kw=n(ae,"LI",{});var lJe=s(kw);mLe=n(lJe,"STRONG",{});var Asa=s(mLe);qWr=r(Asa,"convbert"),Asa.forEach(t),jWr=r(lJe," \u2014 "),mte=n(lJe,"A",{href:!0});var Lsa=s(mte);DWr=r(Lsa,"TFConvBertForSequenceClassification"),Lsa.forEach(t),GWr=r(lJe," (ConvBERT model)"),lJe.forEach(t),OWr=i(ae),Sw=n(ae,"LI",{});var iJe=s(Sw);cLe=n(iJe,"STRONG",{});var ysa=s(cLe);VWr=r(ysa,"ctrl"),ysa.forEach(t),XWr=r(iJe," \u2014 "),cte=n(iJe,"A",{href:!0});var xsa=s(cte);zWr=r(xsa,"TFCTRLForSequenceClassification"),xsa.forEach(t),QWr=r(iJe," (CTRL model)"),iJe.forEach(t),WWr=i(ae),Rw=n(ae,"LI",{});var dJe=s(Rw);fLe=n(dJe,"STRONG",{});var $sa=s(fLe);UWr=r($sa,"deberta"),$sa.forEach(t),HWr=r(dJe," \u2014 "),fte=n(dJe,"A",{href:!0});var ksa=s(fte);JWr=r(ksa,"TFDebertaForSequenceClassification"),ksa.forEach(t),YWr=r(dJe," (DeBERTa model)"),dJe.forEach(t),KWr=i(ae),Pw=n(ae,"LI",{});var mJe=s(Pw);gLe=n(mJe,"STRONG",{});var Ssa=s(gLe);ZWr=r(Ssa,"deberta-v2"),Ssa.forEach(t),eUr=r(mJe," \u2014 "),gte=n(mJe,"A",{href:!0});var Rsa=s(gte);oUr=r(Rsa,"TFDebertaV2ForSequenceClassification"),Rsa.forEach(t),rUr=r(mJe," (DeBERTa-v2 model)"),mJe.forEach(t),tUr=i(ae),Bw=n(ae,"LI",{});var cJe=s(Bw);hLe=n(cJe,"STRONG",{});var Psa=s(hLe);aUr=r(Psa,"distilbert"),Psa.forEach(t),nUr=r(cJe," \u2014 "),hte=n(cJe,"A",{href:!0});var Bsa=s(hte);sUr=r(Bsa,"TFDistilBertForSequenceClassification"),Bsa.forEach(t),lUr=r(cJe," (DistilBERT model)"),cJe.forEach(t),iUr=i(ae),Iw=n(ae,"LI",{});var fJe=s(Iw);uLe=n(fJe,"STRONG",{});var Isa=s(uLe);dUr=r(Isa,"electra"),Isa.forEach(t),mUr=r(fJe," \u2014 "),ute=n(fJe,"A",{href:!0});var Nsa=s(ute);cUr=r(Nsa,"TFElectraForSequenceClassification"),Nsa.forEach(t),fUr=r(fJe," (ELECTRA model)"),fJe.forEach(t),gUr=i(ae),Nw=n(ae,"LI",{});var gJe=s(Nw);pLe=n(gJe,"STRONG",{});var qsa=s(pLe);hUr=r(qsa,"flaubert"),qsa.forEach(t),uUr=r(gJe," \u2014 "),pte=n(gJe,"A",{href:!0});var jsa=s(pte);pUr=r(jsa,"TFFlaubertForSequenceClassification"),jsa.forEach(t),_Ur=r(gJe," (FlauBERT model)"),gJe.forEach(t),bUr=i(ae),qw=n(ae,"LI",{});var hJe=s(qw);_Le=n(hJe,"STRONG",{});var Dsa=s(_Le);vUr=r(Dsa,"funnel"),Dsa.forEach(t),FUr=r(hJe," \u2014 "),_te=n(hJe,"A",{href:!0});var Gsa=s(_te);TUr=r(Gsa,"TFFunnelForSequenceClassification"),Gsa.forEach(t),MUr=r(hJe," (Funnel Transformer model)"),hJe.forEach(t),EUr=i(ae),jw=n(ae,"LI",{});var uJe=s(jw);bLe=n(uJe,"STRONG",{});var Osa=s(bLe);CUr=r(Osa,"gpt2"),Osa.forEach(t),wUr=r(uJe," \u2014 "),bte=n(uJe,"A",{href:!0});var Vsa=s(bte);AUr=r(Vsa,"TFGPT2ForSequenceClassification"),Vsa.forEach(t),LUr=r(uJe," (OpenAI GPT-2 model)"),uJe.forEach(t),yUr=i(ae),Dw=n(ae,"LI",{});var pJe=s(Dw);vLe=n(pJe,"STRONG",{});var Xsa=s(vLe);xUr=r(Xsa,"gptj"),Xsa.forEach(t),$Ur=r(pJe," \u2014 "),vte=n(pJe,"A",{href:!0});var zsa=s(vte);kUr=r(zsa,"TFGPTJForSequenceClassification"),zsa.forEach(t),SUr=r(pJe," (GPT-J model)"),pJe.forEach(t),RUr=i(ae),Gw=n(ae,"LI",{});var _Je=s(Gw);FLe=n(_Je,"STRONG",{});var Qsa=s(FLe);PUr=r(Qsa,"layoutlm"),Qsa.forEach(t),BUr=r(_Je," \u2014 "),Fte=n(_Je,"A",{href:!0});var Wsa=s(Fte);IUr=r(Wsa,"TFLayoutLMForSequenceClassification"),Wsa.forEach(t),NUr=r(_Je," (LayoutLM model)"),_Je.forEach(t),qUr=i(ae),Ow=n(ae,"LI",{});var bJe=s(Ow);TLe=n(bJe,"STRONG",{});var Usa=s(TLe);jUr=r(Usa,"layoutlmv3"),Usa.forEach(t),DUr=r(bJe," \u2014 "),Tte=n(bJe,"A",{href:!0});var Hsa=s(Tte);GUr=r(Hsa,"TFLayoutLMv3ForSequenceClassification"),Hsa.forEach(t),OUr=r(bJe," (LayoutLMv3 model)"),bJe.forEach(t),VUr=i(ae),Vw=n(ae,"LI",{});var vJe=s(Vw);MLe=n(vJe,"STRONG",{});var Jsa=s(MLe);XUr=r(Jsa,"longformer"),Jsa.forEach(t),zUr=r(vJe," \u2014 "),Mte=n(vJe,"A",{href:!0});var Ysa=s(Mte);QUr=r(Ysa,"TFLongformerForSequenceClassification"),Ysa.forEach(t),WUr=r(vJe," (Longformer model)"),vJe.forEach(t),UUr=i(ae),Xw=n(ae,"LI",{});var FJe=s(Xw);ELe=n(FJe,"STRONG",{});var Ksa=s(ELe);HUr=r(Ksa,"mobilebert"),Ksa.forEach(t),JUr=r(FJe," \u2014 "),Ete=n(FJe,"A",{href:!0});var Zsa=s(Ete);YUr=r(Zsa,"TFMobileBertForSequenceClassification"),Zsa.forEach(t),KUr=r(FJe," (MobileBERT model)"),FJe.forEach(t),ZUr=i(ae),zw=n(ae,"LI",{});var TJe=s(zw);CLe=n(TJe,"STRONG",{});var ela=s(CLe);eHr=r(ela,"mpnet"),ela.forEach(t),oHr=r(TJe," \u2014 "),Cte=n(TJe,"A",{href:!0});var ola=s(Cte);rHr=r(ola,"TFMPNetForSequenceClassification"),ola.forEach(t),tHr=r(TJe," (MPNet model)"),TJe.forEach(t),aHr=i(ae),Qw=n(ae,"LI",{});var MJe=s(Qw);wLe=n(MJe,"STRONG",{});var rla=s(wLe);nHr=r(rla,"openai-gpt"),rla.forEach(t),sHr=r(MJe," \u2014 "),wte=n(MJe,"A",{href:!0});var tla=s(wte);lHr=r(tla,"TFOpenAIGPTForSequenceClassification"),tla.forEach(t),iHr=r(MJe," (OpenAI GPT model)"),MJe.forEach(t),dHr=i(ae),Ww=n(ae,"LI",{});var EJe=s(Ww);ALe=n(EJe,"STRONG",{});var ala=s(ALe);mHr=r(ala,"rembert"),ala.forEach(t),cHr=r(EJe," \u2014 "),Ate=n(EJe,"A",{href:!0});var nla=s(Ate);fHr=r(nla,"TFRemBertForSequenceClassification"),nla.forEach(t),gHr=r(EJe," (RemBERT model)"),EJe.forEach(t),hHr=i(ae),Uw=n(ae,"LI",{});var CJe=s(Uw);LLe=n(CJe,"STRONG",{});var sla=s(LLe);uHr=r(sla,"roberta"),sla.forEach(t),pHr=r(CJe," \u2014 "),Lte=n(CJe,"A",{href:!0});var lla=s(Lte);_Hr=r(lla,"TFRobertaForSequenceClassification"),lla.forEach(t),bHr=r(CJe," (RoBERTa model)"),CJe.forEach(t),vHr=i(ae),Hw=n(ae,"LI",{});var wJe=s(Hw);yLe=n(wJe,"STRONG",{});var ila=s(yLe);FHr=r(ila,"roformer"),ila.forEach(t),THr=r(wJe," \u2014 "),yte=n(wJe,"A",{href:!0});var dla=s(yte);MHr=r(dla,"TFRoFormerForSequenceClassification"),dla.forEach(t),EHr=r(wJe," (RoFormer model)"),wJe.forEach(t),CHr=i(ae),Jw=n(ae,"LI",{});var AJe=s(Jw);xLe=n(AJe,"STRONG",{});var mla=s(xLe);wHr=r(mla,"tapas"),mla.forEach(t),AHr=r(AJe," \u2014 "),xte=n(AJe,"A",{href:!0});var cla=s(xte);LHr=r(cla,"TFTapasForSequenceClassification"),cla.forEach(t),yHr=r(AJe," (TAPAS model)"),AJe.forEach(t),xHr=i(ae),Yw=n(ae,"LI",{});var LJe=s(Yw);$Le=n(LJe,"STRONG",{});var fla=s($Le);$Hr=r(fla,"transfo-xl"),fla.forEach(t),kHr=r(LJe," \u2014 "),$te=n(LJe,"A",{href:!0});var gla=s($te);SHr=r(gla,"TFTransfoXLForSequenceClassification"),gla.forEach(t),RHr=r(LJe," (Transformer-XL model)"),LJe.forEach(t),PHr=i(ae),Kw=n(ae,"LI",{});var yJe=s(Kw);kLe=n(yJe,"STRONG",{});var hla=s(kLe);BHr=r(hla,"xlm"),hla.forEach(t),IHr=r(yJe," \u2014 "),kte=n(yJe,"A",{href:!0});var ula=s(kte);NHr=r(ula,"TFXLMForSequenceClassification"),ula.forEach(t),qHr=r(yJe," (XLM model)"),yJe.forEach(t),jHr=i(ae),Zw=n(ae,"LI",{});var xJe=s(Zw);SLe=n(xJe,"STRONG",{});var pla=s(SLe);DHr=r(pla,"xlm-roberta"),pla.forEach(t),GHr=r(xJe," \u2014 "),Ste=n(xJe,"A",{href:!0});var _la=s(Ste);OHr=r(_la,"TFXLMRobertaForSequenceClassification"),_la.forEach(t),VHr=r(xJe," (XLM-RoBERTa model)"),xJe.forEach(t),XHr=i(ae),eA=n(ae,"LI",{});var $Je=s(eA);RLe=n($Je,"STRONG",{});var bla=s(RLe);zHr=r(bla,"xlnet"),bla.forEach(t),QHr=r($Je," \u2014 "),Rte=n($Je,"A",{href:!0});var vla=s(Rte);WHr=r(vla,"TFXLNetForSequenceClassification"),vla.forEach(t),UHr=r($Je," (XLNet model)"),$Je.forEach(t),ae.forEach(t),HHr=i(pi),T(oA.$$.fragment,pi),pi.forEach(t),ui.forEach(t),_oo=i(c),gc=n(c,"H2",{class:!0});var Sto=s(gc);rA=n(Sto,"A",{id:!0,class:!0,href:!0});var Fla=s(rA);PLe=n(Fla,"SPAN",{});var Tla=s(PLe);T(IS.$$.fragment,Tla),Tla.forEach(t),Fla.forEach(t),JHr=i(Sto),BLe=n(Sto,"SPAN",{});var Mla=s(BLe);YHr=r(Mla,"TFAutoModelForMultipleChoice"),Mla.forEach(t),Sto.forEach(t),boo=i(c),hr=n(c,"DIV",{class:!0});var _i=s(hr);T(NS.$$.fragment,_i),KHr=i(_i),hc=n(_i,"P",{});var pde=s(hc);ZHr=r(pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pte=n(pde,"A",{href:!0});var Ela=s(Pte);eJr=r(Ela,"from_pretrained()"),Ela.forEach(t),oJr=r(pde," class method or the "),Bte=n(pde,"A",{href:!0});var Cla=s(Bte);rJr=r(Cla,"from_config()"),Cla.forEach(t),tJr=r(pde,` class
method.`),pde.forEach(t),aJr=i(_i),qS=n(_i,"P",{});var Rto=s(qS);nJr=r(Rto,"This class cannot be instantiated directly using "),ILe=n(Rto,"CODE",{});var wla=s(ILe);sJr=r(wla,"__init__()"),wla.forEach(t),lJr=r(Rto," (throws an error)."),Rto.forEach(t),iJr=i(_i),Kt=n(_i,"DIV",{class:!0});var c9=s(Kt);T(jS.$$.fragment,c9),dJr=i(c9),NLe=n(c9,"P",{});var Ala=s(NLe);mJr=r(Ala,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ala.forEach(t),cJr=i(c9),uc=n(c9,"P",{});var _de=s(uc);fJr=r(_de,`Note:
Loading a model from its configuration file does `),qLe=n(_de,"STRONG",{});var Lla=s(qLe);gJr=r(Lla,"not"),Lla.forEach(t),hJr=r(_de,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ite=n(_de,"A",{href:!0});var yla=s(Ite);uJr=r(yla,"from_pretrained()"),yla.forEach(t),pJr=r(_de," to load the model weights."),_de.forEach(t),_Jr=i(c9),T(tA.$$.fragment,c9),c9.forEach(t),bJr=i(_i),Xr=n(_i,"DIV",{class:!0});var bi=s(Xr);T(DS.$$.fragment,bi),vJr=i(bi),jLe=n(bi,"P",{});var xla=s(jLe);FJr=r(xla,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xla.forEach(t),TJr=i(bi),Rn=n(bi,"P",{});var f9=s(Rn);MJr=r(f9,"The model class to instantiate is selected based on the "),DLe=n(f9,"CODE",{});var $la=s(DLe);EJr=r($la,"model_type"),$la.forEach(t),CJr=r(f9,` property of the config object (either
passed as an argument or loaded from `),GLe=n(f9,"CODE",{});var kla=s(GLe);wJr=r(kla,"pretrained_model_name_or_path"),kla.forEach(t),AJr=r(f9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OLe=n(f9,"CODE",{});var Sla=s(OLe);LJr=r(Sla,"pretrained_model_name_or_path"),Sla.forEach(t),yJr=r(f9,":"),f9.forEach(t),xJr=i(bi),ve=n(bi,"UL",{});var Te=s(ve);aA=n(Te,"LI",{});var kJe=s(aA);VLe=n(kJe,"STRONG",{});var Rla=s(VLe);$Jr=r(Rla,"albert"),Rla.forEach(t),kJr=r(kJe," \u2014 "),Nte=n(kJe,"A",{href:!0});var Pla=s(Nte);SJr=r(Pla,"TFAlbertForMultipleChoice"),Pla.forEach(t),RJr=r(kJe," (ALBERT model)"),kJe.forEach(t),PJr=i(Te),nA=n(Te,"LI",{});var SJe=s(nA);XLe=n(SJe,"STRONG",{});var Bla=s(XLe);BJr=r(Bla,"bert"),Bla.forEach(t),IJr=r(SJe," \u2014 "),qte=n(SJe,"A",{href:!0});var Ila=s(qte);NJr=r(Ila,"TFBertForMultipleChoice"),Ila.forEach(t),qJr=r(SJe," (BERT model)"),SJe.forEach(t),jJr=i(Te),sA=n(Te,"LI",{});var RJe=s(sA);zLe=n(RJe,"STRONG",{});var Nla=s(zLe);DJr=r(Nla,"camembert"),Nla.forEach(t),GJr=r(RJe," \u2014 "),jte=n(RJe,"A",{href:!0});var qla=s(jte);OJr=r(qla,"TFCamembertForMultipleChoice"),qla.forEach(t),VJr=r(RJe," (CamemBERT model)"),RJe.forEach(t),XJr=i(Te),lA=n(Te,"LI",{});var PJe=s(lA);QLe=n(PJe,"STRONG",{});var jla=s(QLe);zJr=r(jla,"convbert"),jla.forEach(t),QJr=r(PJe," \u2014 "),Dte=n(PJe,"A",{href:!0});var Dla=s(Dte);WJr=r(Dla,"TFConvBertForMultipleChoice"),Dla.forEach(t),UJr=r(PJe," (ConvBERT model)"),PJe.forEach(t),HJr=i(Te),iA=n(Te,"LI",{});var BJe=s(iA);WLe=n(BJe,"STRONG",{});var Gla=s(WLe);JJr=r(Gla,"distilbert"),Gla.forEach(t),YJr=r(BJe," \u2014 "),Gte=n(BJe,"A",{href:!0});var Ola=s(Gte);KJr=r(Ola,"TFDistilBertForMultipleChoice"),Ola.forEach(t),ZJr=r(BJe," (DistilBERT model)"),BJe.forEach(t),eYr=i(Te),dA=n(Te,"LI",{});var IJe=s(dA);ULe=n(IJe,"STRONG",{});var Vla=s(ULe);oYr=r(Vla,"electra"),Vla.forEach(t),rYr=r(IJe," \u2014 "),Ote=n(IJe,"A",{href:!0});var Xla=s(Ote);tYr=r(Xla,"TFElectraForMultipleChoice"),Xla.forEach(t),aYr=r(IJe," (ELECTRA model)"),IJe.forEach(t),nYr=i(Te),mA=n(Te,"LI",{});var NJe=s(mA);HLe=n(NJe,"STRONG",{});var zla=s(HLe);sYr=r(zla,"flaubert"),zla.forEach(t),lYr=r(NJe," \u2014 "),Vte=n(NJe,"A",{href:!0});var Qla=s(Vte);iYr=r(Qla,"TFFlaubertForMultipleChoice"),Qla.forEach(t),dYr=r(NJe," (FlauBERT model)"),NJe.forEach(t),mYr=i(Te),cA=n(Te,"LI",{});var qJe=s(cA);JLe=n(qJe,"STRONG",{});var Wla=s(JLe);cYr=r(Wla,"funnel"),Wla.forEach(t),fYr=r(qJe," \u2014 "),Xte=n(qJe,"A",{href:!0});var Ula=s(Xte);gYr=r(Ula,"TFFunnelForMultipleChoice"),Ula.forEach(t),hYr=r(qJe," (Funnel Transformer model)"),qJe.forEach(t),uYr=i(Te),fA=n(Te,"LI",{});var jJe=s(fA);YLe=n(jJe,"STRONG",{});var Hla=s(YLe);pYr=r(Hla,"longformer"),Hla.forEach(t),_Yr=r(jJe," \u2014 "),zte=n(jJe,"A",{href:!0});var Jla=s(zte);bYr=r(Jla,"TFLongformerForMultipleChoice"),Jla.forEach(t),vYr=r(jJe," (Longformer model)"),jJe.forEach(t),FYr=i(Te),gA=n(Te,"LI",{});var DJe=s(gA);KLe=n(DJe,"STRONG",{});var Yla=s(KLe);TYr=r(Yla,"mobilebert"),Yla.forEach(t),MYr=r(DJe," \u2014 "),Qte=n(DJe,"A",{href:!0});var Kla=s(Qte);EYr=r(Kla,"TFMobileBertForMultipleChoice"),Kla.forEach(t),CYr=r(DJe," (MobileBERT model)"),DJe.forEach(t),wYr=i(Te),hA=n(Te,"LI",{});var GJe=s(hA);ZLe=n(GJe,"STRONG",{});var Zla=s(ZLe);AYr=r(Zla,"mpnet"),Zla.forEach(t),LYr=r(GJe," \u2014 "),Wte=n(GJe,"A",{href:!0});var eia=s(Wte);yYr=r(eia,"TFMPNetForMultipleChoice"),eia.forEach(t),xYr=r(GJe," (MPNet model)"),GJe.forEach(t),$Yr=i(Te),uA=n(Te,"LI",{});var OJe=s(uA);eye=n(OJe,"STRONG",{});var oia=s(eye);kYr=r(oia,"rembert"),oia.forEach(t),SYr=r(OJe," \u2014 "),Ute=n(OJe,"A",{href:!0});var ria=s(Ute);RYr=r(ria,"TFRemBertForMultipleChoice"),ria.forEach(t),PYr=r(OJe," (RemBERT model)"),OJe.forEach(t),BYr=i(Te),pA=n(Te,"LI",{});var VJe=s(pA);oye=n(VJe,"STRONG",{});var tia=s(oye);IYr=r(tia,"roberta"),tia.forEach(t),NYr=r(VJe," \u2014 "),Hte=n(VJe,"A",{href:!0});var aia=s(Hte);qYr=r(aia,"TFRobertaForMultipleChoice"),aia.forEach(t),jYr=r(VJe," (RoBERTa model)"),VJe.forEach(t),DYr=i(Te),_A=n(Te,"LI",{});var XJe=s(_A);rye=n(XJe,"STRONG",{});var nia=s(rye);GYr=r(nia,"roformer"),nia.forEach(t),OYr=r(XJe," \u2014 "),Jte=n(XJe,"A",{href:!0});var sia=s(Jte);VYr=r(sia,"TFRoFormerForMultipleChoice"),sia.forEach(t),XYr=r(XJe," (RoFormer model)"),XJe.forEach(t),zYr=i(Te),bA=n(Te,"LI",{});var zJe=s(bA);tye=n(zJe,"STRONG",{});var lia=s(tye);QYr=r(lia,"xlm"),lia.forEach(t),WYr=r(zJe," \u2014 "),Yte=n(zJe,"A",{href:!0});var iia=s(Yte);UYr=r(iia,"TFXLMForMultipleChoice"),iia.forEach(t),HYr=r(zJe," (XLM model)"),zJe.forEach(t),JYr=i(Te),vA=n(Te,"LI",{});var QJe=s(vA);aye=n(QJe,"STRONG",{});var dia=s(aye);YYr=r(dia,"xlm-roberta"),dia.forEach(t),KYr=r(QJe," \u2014 "),Kte=n(QJe,"A",{href:!0});var mia=s(Kte);ZYr=r(mia,"TFXLMRobertaForMultipleChoice"),mia.forEach(t),eKr=r(QJe," (XLM-RoBERTa model)"),QJe.forEach(t),oKr=i(Te),FA=n(Te,"LI",{});var WJe=s(FA);nye=n(WJe,"STRONG",{});var cia=s(nye);rKr=r(cia,"xlnet"),cia.forEach(t),tKr=r(WJe," \u2014 "),Zte=n(WJe,"A",{href:!0});var fia=s(Zte);aKr=r(fia,"TFXLNetForMultipleChoice"),fia.forEach(t),nKr=r(WJe," (XLNet model)"),WJe.forEach(t),Te.forEach(t),sKr=i(bi),T(TA.$$.fragment,bi),bi.forEach(t),_i.forEach(t),voo=i(c),pc=n(c,"H2",{class:!0});var Pto=s(pc);MA=n(Pto,"A",{id:!0,class:!0,href:!0});var gia=s(MA);sye=n(gia,"SPAN",{});var hia=s(sye);T(GS.$$.fragment,hia),hia.forEach(t),gia.forEach(t),lKr=i(Pto),lye=n(Pto,"SPAN",{});var uia=s(lye);iKr=r(uia,"TFAutoModelForNextSentencePrediction"),uia.forEach(t),Pto.forEach(t),Foo=i(c),ur=n(c,"DIV",{class:!0});var vi=s(ur);T(OS.$$.fragment,vi),dKr=i(vi),_c=n(vi,"P",{});var bde=s(_c);mKr=r(bde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eae=n(bde,"A",{href:!0});var pia=s(eae);cKr=r(pia,"from_pretrained()"),pia.forEach(t),fKr=r(bde," class method or the "),oae=n(bde,"A",{href:!0});var _ia=s(oae);gKr=r(_ia,"from_config()"),_ia.forEach(t),hKr=r(bde,` class
method.`),bde.forEach(t),uKr=i(vi),VS=n(vi,"P",{});var Bto=s(VS);pKr=r(Bto,"This class cannot be instantiated directly using "),iye=n(Bto,"CODE",{});var bia=s(iye);_Kr=r(bia,"__init__()"),bia.forEach(t),bKr=r(Bto," (throws an error)."),Bto.forEach(t),vKr=i(vi),Zt=n(vi,"DIV",{class:!0});var g9=s(Zt);T(XS.$$.fragment,g9),FKr=i(g9),dye=n(g9,"P",{});var via=s(dye);TKr=r(via,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),via.forEach(t),MKr=i(g9),bc=n(g9,"P",{});var vde=s(bc);EKr=r(vde,`Note:
Loading a model from its configuration file does `),mye=n(vde,"STRONG",{});var Fia=s(mye);CKr=r(Fia,"not"),Fia.forEach(t),wKr=r(vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),rae=n(vde,"A",{href:!0});var Tia=s(rae);AKr=r(Tia,"from_pretrained()"),Tia.forEach(t),LKr=r(vde," to load the model weights."),vde.forEach(t),yKr=i(g9),T(EA.$$.fragment,g9),g9.forEach(t),xKr=i(vi),zr=n(vi,"DIV",{class:!0});var Fi=s(zr);T(zS.$$.fragment,Fi),$Kr=i(Fi),cye=n(Fi,"P",{});var Mia=s(cye);kKr=r(Mia,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mia.forEach(t),SKr=i(Fi),Pn=n(Fi,"P",{});var h9=s(Pn);RKr=r(h9,"The model class to instantiate is selected based on the "),fye=n(h9,"CODE",{});var Eia=s(fye);PKr=r(Eia,"model_type"),Eia.forEach(t),BKr=r(h9,` property of the config object (either
passed as an argument or loaded from `),gye=n(h9,"CODE",{});var Cia=s(gye);IKr=r(Cia,"pretrained_model_name_or_path"),Cia.forEach(t),NKr=r(h9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hye=n(h9,"CODE",{});var wia=s(hye);qKr=r(wia,"pretrained_model_name_or_path"),wia.forEach(t),jKr=r(h9,":"),h9.forEach(t),DKr=i(Fi),QS=n(Fi,"UL",{});var Ito=s(QS);CA=n(Ito,"LI",{});var UJe=s(CA);uye=n(UJe,"STRONG",{});var Aia=s(uye);GKr=r(Aia,"bert"),Aia.forEach(t),OKr=r(UJe," \u2014 "),tae=n(UJe,"A",{href:!0});var Lia=s(tae);VKr=r(Lia,"TFBertForNextSentencePrediction"),Lia.forEach(t),XKr=r(UJe," (BERT model)"),UJe.forEach(t),zKr=i(Ito),wA=n(Ito,"LI",{});var HJe=s(wA);pye=n(HJe,"STRONG",{});var yia=s(pye);QKr=r(yia,"mobilebert"),yia.forEach(t),WKr=r(HJe," \u2014 "),aae=n(HJe,"A",{href:!0});var xia=s(aae);UKr=r(xia,"TFMobileBertForNextSentencePrediction"),xia.forEach(t),HKr=r(HJe," (MobileBERT model)"),HJe.forEach(t),Ito.forEach(t),JKr=i(Fi),T(AA.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),Too=i(c),vc=n(c,"H2",{class:!0});var Nto=s(vc);LA=n(Nto,"A",{id:!0,class:!0,href:!0});var $ia=s(LA);_ye=n($ia,"SPAN",{});var kia=s(_ye);T(WS.$$.fragment,kia),kia.forEach(t),$ia.forEach(t),YKr=i(Nto),bye=n(Nto,"SPAN",{});var Sia=s(bye);KKr=r(Sia,"TFAutoModelForTableQuestionAnswering"),Sia.forEach(t),Nto.forEach(t),Moo=i(c),pr=n(c,"DIV",{class:!0});var Ti=s(pr);T(US.$$.fragment,Ti),ZKr=i(Ti),Fc=n(Ti,"P",{});var Fde=s(Fc);eZr=r(Fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nae=n(Fde,"A",{href:!0});var Ria=s(nae);oZr=r(Ria,"from_pretrained()"),Ria.forEach(t),rZr=r(Fde," class method or the "),sae=n(Fde,"A",{href:!0});var Pia=s(sae);tZr=r(Pia,"from_config()"),Pia.forEach(t),aZr=r(Fde,` class
method.`),Fde.forEach(t),nZr=i(Ti),HS=n(Ti,"P",{});var qto=s(HS);sZr=r(qto,"This class cannot be instantiated directly using "),vye=n(qto,"CODE",{});var Bia=s(vye);lZr=r(Bia,"__init__()"),Bia.forEach(t),iZr=r(qto," (throws an error)."),qto.forEach(t),dZr=i(Ti),ea=n(Ti,"DIV",{class:!0});var u9=s(ea);T(JS.$$.fragment,u9),mZr=i(u9),Fye=n(u9,"P",{});var Iia=s(Fye);cZr=r(Iia,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Iia.forEach(t),fZr=i(u9),Tc=n(u9,"P",{});var Tde=s(Tc);gZr=r(Tde,`Note:
Loading a model from its configuration file does `),Tye=n(Tde,"STRONG",{});var Nia=s(Tye);hZr=r(Nia,"not"),Nia.forEach(t),uZr=r(Tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),lae=n(Tde,"A",{href:!0});var qia=s(lae);pZr=r(qia,"from_pretrained()"),qia.forEach(t),_Zr=r(Tde," to load the model weights."),Tde.forEach(t),bZr=i(u9),T(yA.$$.fragment,u9),u9.forEach(t),vZr=i(Ti),Qr=n(Ti,"DIV",{class:!0});var Mi=s(Qr);T(YS.$$.fragment,Mi),FZr=i(Mi),Mye=n(Mi,"P",{});var jia=s(Mye);TZr=r(jia,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jia.forEach(t),MZr=i(Mi),Bn=n(Mi,"P",{});var p9=s(Bn);EZr=r(p9,"The model class to instantiate is selected based on the "),Eye=n(p9,"CODE",{});var Dia=s(Eye);CZr=r(Dia,"model_type"),Dia.forEach(t),wZr=r(p9,` property of the config object (either
passed as an argument or loaded from `),Cye=n(p9,"CODE",{});var Gia=s(Cye);AZr=r(Gia,"pretrained_model_name_or_path"),Gia.forEach(t),LZr=r(p9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wye=n(p9,"CODE",{});var Oia=s(wye);yZr=r(Oia,"pretrained_model_name_or_path"),Oia.forEach(t),xZr=r(p9,":"),p9.forEach(t),$Zr=i(Mi),Aye=n(Mi,"UL",{});var Via=s(Aye);xA=n(Via,"LI",{});var JJe=s(xA);Lye=n(JJe,"STRONG",{});var Xia=s(Lye);kZr=r(Xia,"tapas"),Xia.forEach(t),SZr=r(JJe," \u2014 "),iae=n(JJe,"A",{href:!0});var zia=s(iae);RZr=r(zia,"TFTapasForQuestionAnswering"),zia.forEach(t),PZr=r(JJe," (TAPAS model)"),JJe.forEach(t),Via.forEach(t),BZr=i(Mi),T($A.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),Eoo=i(c),Mc=n(c,"H2",{class:!0});var jto=s(Mc);kA=n(jto,"A",{id:!0,class:!0,href:!0});var Qia=s(kA);yye=n(Qia,"SPAN",{});var Wia=s(yye);T(KS.$$.fragment,Wia),Wia.forEach(t),Qia.forEach(t),IZr=i(jto),xye=n(jto,"SPAN",{});var Uia=s(xye);NZr=r(Uia,"TFAutoModelForDocumentQuestionAnswering"),Uia.forEach(t),jto.forEach(t),Coo=i(c),_r=n(c,"DIV",{class:!0});var Ei=s(_r);T(ZS.$$.fragment,Ei),qZr=i(Ei),Ec=n(Ei,"P",{});var Mde=s(Ec);jZr=r(Mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),dae=n(Mde,"A",{href:!0});var Hia=s(dae);DZr=r(Hia,"from_pretrained()"),Hia.forEach(t),GZr=r(Mde," class method or the "),mae=n(Mde,"A",{href:!0});var Jia=s(mae);OZr=r(Jia,"from_config()"),Jia.forEach(t),VZr=r(Mde,` class
method.`),Mde.forEach(t),XZr=i(Ei),eR=n(Ei,"P",{});var Dto=s(eR);zZr=r(Dto,"This class cannot be instantiated directly using "),$ye=n(Dto,"CODE",{});var Yia=s($ye);QZr=r(Yia,"__init__()"),Yia.forEach(t),WZr=r(Dto," (throws an error)."),Dto.forEach(t),UZr=i(Ei),oa=n(Ei,"DIV",{class:!0});var _9=s(oa);T(oR.$$.fragment,_9),HZr=i(_9),kye=n(_9,"P",{});var Kia=s(kye);JZr=r(Kia,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Kia.forEach(t),YZr=i(_9),Cc=n(_9,"P",{});var Ede=s(Cc);KZr=r(Ede,`Note:
Loading a model from its configuration file does `),Sye=n(Ede,"STRONG",{});var Zia=s(Sye);ZZr=r(Zia,"not"),Zia.forEach(t),eet=r(Ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=n(Ede,"A",{href:!0});var eda=s(cae);oet=r(eda,"from_pretrained()"),eda.forEach(t),ret=r(Ede," to load the model weights."),Ede.forEach(t),tet=i(_9),T(SA.$$.fragment,_9),_9.forEach(t),aet=i(Ei),Wr=n(Ei,"DIV",{class:!0});var Ci=s(Wr);T(rR.$$.fragment,Ci),net=i(Ci),Rye=n(Ci,"P",{});var oda=s(Rye);set=r(oda,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),oda.forEach(t),iet=i(Ci),In=n(Ci,"P",{});var b9=s(In);det=r(b9,"The model class to instantiate is selected based on the "),Pye=n(b9,"CODE",{});var rda=s(Pye);met=r(rda,"model_type"),rda.forEach(t),cet=r(b9,` property of the config object (either
passed as an argument or loaded from `),Bye=n(b9,"CODE",{});var tda=s(Bye);fet=r(tda,"pretrained_model_name_or_path"),tda.forEach(t),get=r(b9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iye=n(b9,"CODE",{});var ada=s(Iye);het=r(ada,"pretrained_model_name_or_path"),ada.forEach(t),uet=r(b9,":"),b9.forEach(t),pet=i(Ci),Nye=n(Ci,"UL",{});var nda=s(Nye);RA=n(nda,"LI",{});var YJe=s(RA);qye=n(YJe,"STRONG",{});var sda=s(qye);_et=r(sda,"layoutlm"),sda.forEach(t),bet=r(YJe," \u2014 "),fae=n(YJe,"A",{href:!0});var lda=s(fae);vet=r(lda,"TFLayoutLMForQuestionAnswering"),lda.forEach(t),Fet=r(YJe," (LayoutLM model)"),YJe.forEach(t),nda.forEach(t),Tet=i(Ci),T(PA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),woo=i(c),wc=n(c,"H2",{class:!0});var Gto=s(wc);BA=n(Gto,"A",{id:!0,class:!0,href:!0});var ida=s(BA);jye=n(ida,"SPAN",{});var dda=s(jye);T(tR.$$.fragment,dda),dda.forEach(t),ida.forEach(t),Met=i(Gto),Dye=n(Gto,"SPAN",{});var mda=s(Dye);Eet=r(mda,"TFAutoModelForTokenClassification"),mda.forEach(t),Gto.forEach(t),Aoo=i(c),br=n(c,"DIV",{class:!0});var wi=s(br);T(aR.$$.fragment,wi),Cet=i(wi),Ac=n(wi,"P",{});var Cde=s(Ac);wet=r(Cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gae=n(Cde,"A",{href:!0});var cda=s(gae);Aet=r(cda,"from_pretrained()"),cda.forEach(t),Let=r(Cde," class method or the "),hae=n(Cde,"A",{href:!0});var fda=s(hae);yet=r(fda,"from_config()"),fda.forEach(t),xet=r(Cde,` class
method.`),Cde.forEach(t),$et=i(wi),nR=n(wi,"P",{});var Oto=s(nR);ket=r(Oto,"This class cannot be instantiated directly using "),Gye=n(Oto,"CODE",{});var gda=s(Gye);Set=r(gda,"__init__()"),gda.forEach(t),Ret=r(Oto," (throws an error)."),Oto.forEach(t),Pet=i(wi),ra=n(wi,"DIV",{class:!0});var v9=s(ra);T(sR.$$.fragment,v9),Bet=i(v9),Oye=n(v9,"P",{});var hda=s(Oye);Iet=r(hda,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hda.forEach(t),Net=i(v9),Lc=n(v9,"P",{});var wde=s(Lc);qet=r(wde,`Note:
Loading a model from its configuration file does `),Vye=n(wde,"STRONG",{});var uda=s(Vye);jet=r(uda,"not"),uda.forEach(t),Det=r(wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=n(wde,"A",{href:!0});var pda=s(uae);Get=r(pda,"from_pretrained()"),pda.forEach(t),Oet=r(wde," to load the model weights."),wde.forEach(t),Vet=i(v9),T(IA.$$.fragment,v9),v9.forEach(t),Xet=i(wi),Ur=n(wi,"DIV",{class:!0});var Ai=s(Ur);T(lR.$$.fragment,Ai),zet=i(Ai),Xye=n(Ai,"P",{});var _da=s(Xye);Qet=r(_da,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_da.forEach(t),Wet=i(Ai),Nn=n(Ai,"P",{});var F9=s(Nn);Uet=r(F9,"The model class to instantiate is selected based on the "),zye=n(F9,"CODE",{});var bda=s(zye);Het=r(bda,"model_type"),bda.forEach(t),Jet=r(F9,` property of the config object (either
passed as an argument or loaded from `),Qye=n(F9,"CODE",{});var vda=s(Qye);Yet=r(vda,"pretrained_model_name_or_path"),vda.forEach(t),Ket=r(F9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wye=n(F9,"CODE",{});var Fda=s(Wye);Zet=r(Fda,"pretrained_model_name_or_path"),Fda.forEach(t),eot=r(F9,":"),F9.forEach(t),oot=i(Ai),de=n(Ai,"UL",{});var he=s(de);NA=n(he,"LI",{});var KJe=s(NA);Uye=n(KJe,"STRONG",{});var Tda=s(Uye);rot=r(Tda,"albert"),Tda.forEach(t),tot=r(KJe," \u2014 "),pae=n(KJe,"A",{href:!0});var Mda=s(pae);aot=r(Mda,"TFAlbertForTokenClassification"),Mda.forEach(t),not=r(KJe," (ALBERT model)"),KJe.forEach(t),sot=i(he),qA=n(he,"LI",{});var ZJe=s(qA);Hye=n(ZJe,"STRONG",{});var Eda=s(Hye);lot=r(Eda,"bert"),Eda.forEach(t),iot=r(ZJe," \u2014 "),_ae=n(ZJe,"A",{href:!0});var Cda=s(_ae);dot=r(Cda,"TFBertForTokenClassification"),Cda.forEach(t),mot=r(ZJe," (BERT model)"),ZJe.forEach(t),cot=i(he),jA=n(he,"LI",{});var eYe=s(jA);Jye=n(eYe,"STRONG",{});var wda=s(Jye);fot=r(wda,"camembert"),wda.forEach(t),got=r(eYe," \u2014 "),bae=n(eYe,"A",{href:!0});var Ada=s(bae);hot=r(Ada,"TFCamembertForTokenClassification"),Ada.forEach(t),uot=r(eYe," (CamemBERT model)"),eYe.forEach(t),pot=i(he),DA=n(he,"LI",{});var oYe=s(DA);Yye=n(oYe,"STRONG",{});var Lda=s(Yye);_ot=r(Lda,"convbert"),Lda.forEach(t),bot=r(oYe," \u2014 "),vae=n(oYe,"A",{href:!0});var yda=s(vae);vot=r(yda,"TFConvBertForTokenClassification"),yda.forEach(t),Fot=r(oYe," (ConvBERT model)"),oYe.forEach(t),Tot=i(he),GA=n(he,"LI",{});var rYe=s(GA);Kye=n(rYe,"STRONG",{});var xda=s(Kye);Mot=r(xda,"deberta"),xda.forEach(t),Eot=r(rYe," \u2014 "),Fae=n(rYe,"A",{href:!0});var $da=s(Fae);Cot=r($da,"TFDebertaForTokenClassification"),$da.forEach(t),wot=r(rYe," (DeBERTa model)"),rYe.forEach(t),Aot=i(he),OA=n(he,"LI",{});var tYe=s(OA);Zye=n(tYe,"STRONG",{});var kda=s(Zye);Lot=r(kda,"deberta-v2"),kda.forEach(t),yot=r(tYe," \u2014 "),Tae=n(tYe,"A",{href:!0});var Sda=s(Tae);xot=r(Sda,"TFDebertaV2ForTokenClassification"),Sda.forEach(t),$ot=r(tYe," (DeBERTa-v2 model)"),tYe.forEach(t),kot=i(he),VA=n(he,"LI",{});var aYe=s(VA);e8e=n(aYe,"STRONG",{});var Rda=s(e8e);Sot=r(Rda,"distilbert"),Rda.forEach(t),Rot=r(aYe," \u2014 "),Mae=n(aYe,"A",{href:!0});var Pda=s(Mae);Pot=r(Pda,"TFDistilBertForTokenClassification"),Pda.forEach(t),Bot=r(aYe," (DistilBERT model)"),aYe.forEach(t),Iot=i(he),XA=n(he,"LI",{});var nYe=s(XA);o8e=n(nYe,"STRONG",{});var Bda=s(o8e);Not=r(Bda,"electra"),Bda.forEach(t),qot=r(nYe," \u2014 "),Eae=n(nYe,"A",{href:!0});var Ida=s(Eae);jot=r(Ida,"TFElectraForTokenClassification"),Ida.forEach(t),Dot=r(nYe," (ELECTRA model)"),nYe.forEach(t),Got=i(he),zA=n(he,"LI",{});var sYe=s(zA);r8e=n(sYe,"STRONG",{});var Nda=s(r8e);Oot=r(Nda,"flaubert"),Nda.forEach(t),Vot=r(sYe," \u2014 "),Cae=n(sYe,"A",{href:!0});var qda=s(Cae);Xot=r(qda,"TFFlaubertForTokenClassification"),qda.forEach(t),zot=r(sYe," (FlauBERT model)"),sYe.forEach(t),Qot=i(he),QA=n(he,"LI",{});var lYe=s(QA);t8e=n(lYe,"STRONG",{});var jda=s(t8e);Wot=r(jda,"funnel"),jda.forEach(t),Uot=r(lYe," \u2014 "),wae=n(lYe,"A",{href:!0});var Dda=s(wae);Hot=r(Dda,"TFFunnelForTokenClassification"),Dda.forEach(t),Jot=r(lYe," (Funnel Transformer model)"),lYe.forEach(t),Yot=i(he),WA=n(he,"LI",{});var iYe=s(WA);a8e=n(iYe,"STRONG",{});var Gda=s(a8e);Kot=r(Gda,"layoutlm"),Gda.forEach(t),Zot=r(iYe," \u2014 "),Aae=n(iYe,"A",{href:!0});var Oda=s(Aae);ert=r(Oda,"TFLayoutLMForTokenClassification"),Oda.forEach(t),ort=r(iYe," (LayoutLM model)"),iYe.forEach(t),rrt=i(he),UA=n(he,"LI",{});var dYe=s(UA);n8e=n(dYe,"STRONG",{});var Vda=s(n8e);trt=r(Vda,"layoutlmv3"),Vda.forEach(t),art=r(dYe," \u2014 "),Lae=n(dYe,"A",{href:!0});var Xda=s(Lae);nrt=r(Xda,"TFLayoutLMv3ForTokenClassification"),Xda.forEach(t),srt=r(dYe," (LayoutLMv3 model)"),dYe.forEach(t),lrt=i(he),HA=n(he,"LI",{});var mYe=s(HA);s8e=n(mYe,"STRONG",{});var zda=s(s8e);irt=r(zda,"longformer"),zda.forEach(t),drt=r(mYe," \u2014 "),yae=n(mYe,"A",{href:!0});var Qda=s(yae);mrt=r(Qda,"TFLongformerForTokenClassification"),Qda.forEach(t),crt=r(mYe," (Longformer model)"),mYe.forEach(t),frt=i(he),JA=n(he,"LI",{});var cYe=s(JA);l8e=n(cYe,"STRONG",{});var Wda=s(l8e);grt=r(Wda,"mobilebert"),Wda.forEach(t),hrt=r(cYe," \u2014 "),xae=n(cYe,"A",{href:!0});var Uda=s(xae);urt=r(Uda,"TFMobileBertForTokenClassification"),Uda.forEach(t),prt=r(cYe," (MobileBERT model)"),cYe.forEach(t),_rt=i(he),YA=n(he,"LI",{});var fYe=s(YA);i8e=n(fYe,"STRONG",{});var Hda=s(i8e);brt=r(Hda,"mpnet"),Hda.forEach(t),vrt=r(fYe," \u2014 "),$ae=n(fYe,"A",{href:!0});var Jda=s($ae);Frt=r(Jda,"TFMPNetForTokenClassification"),Jda.forEach(t),Trt=r(fYe," (MPNet model)"),fYe.forEach(t),Mrt=i(he),KA=n(he,"LI",{});var gYe=s(KA);d8e=n(gYe,"STRONG",{});var Yda=s(d8e);Ert=r(Yda,"rembert"),Yda.forEach(t),Crt=r(gYe," \u2014 "),kae=n(gYe,"A",{href:!0});var Kda=s(kae);wrt=r(Kda,"TFRemBertForTokenClassification"),Kda.forEach(t),Art=r(gYe," (RemBERT model)"),gYe.forEach(t),Lrt=i(he),ZA=n(he,"LI",{});var hYe=s(ZA);m8e=n(hYe,"STRONG",{});var Zda=s(m8e);yrt=r(Zda,"roberta"),Zda.forEach(t),xrt=r(hYe," \u2014 "),Sae=n(hYe,"A",{href:!0});var ema=s(Sae);$rt=r(ema,"TFRobertaForTokenClassification"),ema.forEach(t),krt=r(hYe," (RoBERTa model)"),hYe.forEach(t),Srt=i(he),e6=n(he,"LI",{});var uYe=s(e6);c8e=n(uYe,"STRONG",{});var oma=s(c8e);Rrt=r(oma,"roformer"),oma.forEach(t),Prt=r(uYe," \u2014 "),Rae=n(uYe,"A",{href:!0});var rma=s(Rae);Brt=r(rma,"TFRoFormerForTokenClassification"),rma.forEach(t),Irt=r(uYe," (RoFormer model)"),uYe.forEach(t),Nrt=i(he),o6=n(he,"LI",{});var pYe=s(o6);f8e=n(pYe,"STRONG",{});var tma=s(f8e);qrt=r(tma,"xlm"),tma.forEach(t),jrt=r(pYe," \u2014 "),Pae=n(pYe,"A",{href:!0});var ama=s(Pae);Drt=r(ama,"TFXLMForTokenClassification"),ama.forEach(t),Grt=r(pYe," (XLM model)"),pYe.forEach(t),Ort=i(he),r6=n(he,"LI",{});var _Ye=s(r6);g8e=n(_Ye,"STRONG",{});var nma=s(g8e);Vrt=r(nma,"xlm-roberta"),nma.forEach(t),Xrt=r(_Ye," \u2014 "),Bae=n(_Ye,"A",{href:!0});var sma=s(Bae);zrt=r(sma,"TFXLMRobertaForTokenClassification"),sma.forEach(t),Qrt=r(_Ye," (XLM-RoBERTa model)"),_Ye.forEach(t),Wrt=i(he),t6=n(he,"LI",{});var bYe=s(t6);h8e=n(bYe,"STRONG",{});var lma=s(h8e);Urt=r(lma,"xlnet"),lma.forEach(t),Hrt=r(bYe," \u2014 "),Iae=n(bYe,"A",{href:!0});var ima=s(Iae);Jrt=r(ima,"TFXLNetForTokenClassification"),ima.forEach(t),Yrt=r(bYe," (XLNet model)"),bYe.forEach(t),he.forEach(t),Krt=i(Ai),T(a6.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),Loo=i(c),yc=n(c,"H2",{class:!0});var Vto=s(yc);n6=n(Vto,"A",{id:!0,class:!0,href:!0});var dma=s(n6);u8e=n(dma,"SPAN",{});var mma=s(u8e);T(iR.$$.fragment,mma),mma.forEach(t),dma.forEach(t),Zrt=i(Vto),p8e=n(Vto,"SPAN",{});var cma=s(p8e);ett=r(cma,"TFAutoModelForQuestionAnswering"),cma.forEach(t),Vto.forEach(t),yoo=i(c),vr=n(c,"DIV",{class:!0});var Li=s(vr);T(dR.$$.fragment,Li),ott=i(Li),xc=n(Li,"P",{});var Ade=s(xc);rtt=r(Ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nae=n(Ade,"A",{href:!0});var fma=s(Nae);ttt=r(fma,"from_pretrained()"),fma.forEach(t),att=r(Ade," class method or the "),qae=n(Ade,"A",{href:!0});var gma=s(qae);ntt=r(gma,"from_config()"),gma.forEach(t),stt=r(Ade,` class
method.`),Ade.forEach(t),ltt=i(Li),mR=n(Li,"P",{});var Xto=s(mR);itt=r(Xto,"This class cannot be instantiated directly using "),_8e=n(Xto,"CODE",{});var hma=s(_8e);dtt=r(hma,"__init__()"),hma.forEach(t),mtt=r(Xto," (throws an error)."),Xto.forEach(t),ctt=i(Li),ta=n(Li,"DIV",{class:!0});var T9=s(ta);T(cR.$$.fragment,T9),ftt=i(T9),b8e=n(T9,"P",{});var uma=s(b8e);gtt=r(uma,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uma.forEach(t),htt=i(T9),$c=n(T9,"P",{});var Lde=s($c);utt=r(Lde,`Note:
Loading a model from its configuration file does `),v8e=n(Lde,"STRONG",{});var pma=s(v8e);ptt=r(pma,"not"),pma.forEach(t),_tt=r(Lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=n(Lde,"A",{href:!0});var _ma=s(jae);btt=r(_ma,"from_pretrained()"),_ma.forEach(t),vtt=r(Lde," to load the model weights."),Lde.forEach(t),Ftt=i(T9),T(s6.$$.fragment,T9),T9.forEach(t),Ttt=i(Li),Hr=n(Li,"DIV",{class:!0});var yi=s(Hr);T(fR.$$.fragment,yi),Mtt=i(yi),F8e=n(yi,"P",{});var bma=s(F8e);Ett=r(bma,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bma.forEach(t),Ctt=i(yi),qn=n(yi,"P",{});var M9=s(qn);wtt=r(M9,"The model class to instantiate is selected based on the "),T8e=n(M9,"CODE",{});var vma=s(T8e);Att=r(vma,"model_type"),vma.forEach(t),Ltt=r(M9,` property of the config object (either
passed as an argument or loaded from `),M8e=n(M9,"CODE",{});var Fma=s(M8e);ytt=r(Fma,"pretrained_model_name_or_path"),Fma.forEach(t),xtt=r(M9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E8e=n(M9,"CODE",{});var Tma=s(E8e);$tt=r(Tma,"pretrained_model_name_or_path"),Tma.forEach(t),ktt=r(M9,":"),M9.forEach(t),Stt=i(yi),me=n(yi,"UL",{});var ue=s(me);l6=n(ue,"LI",{});var vYe=s(l6);C8e=n(vYe,"STRONG",{});var Mma=s(C8e);Rtt=r(Mma,"albert"),Mma.forEach(t),Ptt=r(vYe," \u2014 "),Dae=n(vYe,"A",{href:!0});var Ema=s(Dae);Btt=r(Ema,"TFAlbertForQuestionAnswering"),Ema.forEach(t),Itt=r(vYe," (ALBERT model)"),vYe.forEach(t),Ntt=i(ue),i6=n(ue,"LI",{});var FYe=s(i6);w8e=n(FYe,"STRONG",{});var Cma=s(w8e);qtt=r(Cma,"bert"),Cma.forEach(t),jtt=r(FYe," \u2014 "),Gae=n(FYe,"A",{href:!0});var wma=s(Gae);Dtt=r(wma,"TFBertForQuestionAnswering"),wma.forEach(t),Gtt=r(FYe," (BERT model)"),FYe.forEach(t),Ott=i(ue),d6=n(ue,"LI",{});var TYe=s(d6);A8e=n(TYe,"STRONG",{});var Ama=s(A8e);Vtt=r(Ama,"camembert"),Ama.forEach(t),Xtt=r(TYe," \u2014 "),Oae=n(TYe,"A",{href:!0});var Lma=s(Oae);ztt=r(Lma,"TFCamembertForQuestionAnswering"),Lma.forEach(t),Qtt=r(TYe," (CamemBERT model)"),TYe.forEach(t),Wtt=i(ue),m6=n(ue,"LI",{});var MYe=s(m6);L8e=n(MYe,"STRONG",{});var yma=s(L8e);Utt=r(yma,"convbert"),yma.forEach(t),Htt=r(MYe," \u2014 "),Vae=n(MYe,"A",{href:!0});var xma=s(Vae);Jtt=r(xma,"TFConvBertForQuestionAnswering"),xma.forEach(t),Ytt=r(MYe," (ConvBERT model)"),MYe.forEach(t),Ktt=i(ue),c6=n(ue,"LI",{});var EYe=s(c6);y8e=n(EYe,"STRONG",{});var $ma=s(y8e);Ztt=r($ma,"deberta"),$ma.forEach(t),eat=r(EYe," \u2014 "),Xae=n(EYe,"A",{href:!0});var kma=s(Xae);oat=r(kma,"TFDebertaForQuestionAnswering"),kma.forEach(t),rat=r(EYe," (DeBERTa model)"),EYe.forEach(t),tat=i(ue),f6=n(ue,"LI",{});var CYe=s(f6);x8e=n(CYe,"STRONG",{});var Sma=s(x8e);aat=r(Sma,"deberta-v2"),Sma.forEach(t),nat=r(CYe," \u2014 "),zae=n(CYe,"A",{href:!0});var Rma=s(zae);sat=r(Rma,"TFDebertaV2ForQuestionAnswering"),Rma.forEach(t),lat=r(CYe," (DeBERTa-v2 model)"),CYe.forEach(t),iat=i(ue),g6=n(ue,"LI",{});var wYe=s(g6);$8e=n(wYe,"STRONG",{});var Pma=s($8e);dat=r(Pma,"distilbert"),Pma.forEach(t),mat=r(wYe," \u2014 "),Qae=n(wYe,"A",{href:!0});var Bma=s(Qae);cat=r(Bma,"TFDistilBertForQuestionAnswering"),Bma.forEach(t),fat=r(wYe," (DistilBERT model)"),wYe.forEach(t),gat=i(ue),h6=n(ue,"LI",{});var AYe=s(h6);k8e=n(AYe,"STRONG",{});var Ima=s(k8e);hat=r(Ima,"electra"),Ima.forEach(t),uat=r(AYe," \u2014 "),Wae=n(AYe,"A",{href:!0});var Nma=s(Wae);pat=r(Nma,"TFElectraForQuestionAnswering"),Nma.forEach(t),_at=r(AYe," (ELECTRA model)"),AYe.forEach(t),bat=i(ue),u6=n(ue,"LI",{});var LYe=s(u6);S8e=n(LYe,"STRONG",{});var qma=s(S8e);vat=r(qma,"flaubert"),qma.forEach(t),Fat=r(LYe," \u2014 "),Uae=n(LYe,"A",{href:!0});var jma=s(Uae);Tat=r(jma,"TFFlaubertForQuestionAnsweringSimple"),jma.forEach(t),Mat=r(LYe," (FlauBERT model)"),LYe.forEach(t),Eat=i(ue),p6=n(ue,"LI",{});var yYe=s(p6);R8e=n(yYe,"STRONG",{});var Dma=s(R8e);Cat=r(Dma,"funnel"),Dma.forEach(t),wat=r(yYe," \u2014 "),Hae=n(yYe,"A",{href:!0});var Gma=s(Hae);Aat=r(Gma,"TFFunnelForQuestionAnswering"),Gma.forEach(t),Lat=r(yYe," (Funnel Transformer model)"),yYe.forEach(t),yat=i(ue),_6=n(ue,"LI",{});var xYe=s(_6);P8e=n(xYe,"STRONG",{});var Oma=s(P8e);xat=r(Oma,"gptj"),Oma.forEach(t),$at=r(xYe," \u2014 "),Jae=n(xYe,"A",{href:!0});var Vma=s(Jae);kat=r(Vma,"TFGPTJForQuestionAnswering"),Vma.forEach(t),Sat=r(xYe," (GPT-J model)"),xYe.forEach(t),Rat=i(ue),b6=n(ue,"LI",{});var $Ye=s(b6);B8e=n($Ye,"STRONG",{});var Xma=s(B8e);Pat=r(Xma,"layoutlmv3"),Xma.forEach(t),Bat=r($Ye," \u2014 "),Yae=n($Ye,"A",{href:!0});var zma=s(Yae);Iat=r(zma,"TFLayoutLMv3ForQuestionAnswering"),zma.forEach(t),Nat=r($Ye," (LayoutLMv3 model)"),$Ye.forEach(t),qat=i(ue),v6=n(ue,"LI",{});var kYe=s(v6);I8e=n(kYe,"STRONG",{});var Qma=s(I8e);jat=r(Qma,"longformer"),Qma.forEach(t),Dat=r(kYe," \u2014 "),Kae=n(kYe,"A",{href:!0});var Wma=s(Kae);Gat=r(Wma,"TFLongformerForQuestionAnswering"),Wma.forEach(t),Oat=r(kYe," (Longformer model)"),kYe.forEach(t),Vat=i(ue),F6=n(ue,"LI",{});var SYe=s(F6);N8e=n(SYe,"STRONG",{});var Uma=s(N8e);Xat=r(Uma,"mobilebert"),Uma.forEach(t),zat=r(SYe," \u2014 "),Zae=n(SYe,"A",{href:!0});var Hma=s(Zae);Qat=r(Hma,"TFMobileBertForQuestionAnswering"),Hma.forEach(t),Wat=r(SYe," (MobileBERT model)"),SYe.forEach(t),Uat=i(ue),T6=n(ue,"LI",{});var RYe=s(T6);q8e=n(RYe,"STRONG",{});var Jma=s(q8e);Hat=r(Jma,"mpnet"),Jma.forEach(t),Jat=r(RYe," \u2014 "),ene=n(RYe,"A",{href:!0});var Yma=s(ene);Yat=r(Yma,"TFMPNetForQuestionAnswering"),Yma.forEach(t),Kat=r(RYe," (MPNet model)"),RYe.forEach(t),Zat=i(ue),M6=n(ue,"LI",{});var PYe=s(M6);j8e=n(PYe,"STRONG",{});var Kma=s(j8e);ent=r(Kma,"rembert"),Kma.forEach(t),ont=r(PYe," \u2014 "),one=n(PYe,"A",{href:!0});var Zma=s(one);rnt=r(Zma,"TFRemBertForQuestionAnswering"),Zma.forEach(t),tnt=r(PYe," (RemBERT model)"),PYe.forEach(t),ant=i(ue),E6=n(ue,"LI",{});var BYe=s(E6);D8e=n(BYe,"STRONG",{});var eca=s(D8e);nnt=r(eca,"roberta"),eca.forEach(t),snt=r(BYe," \u2014 "),rne=n(BYe,"A",{href:!0});var oca=s(rne);lnt=r(oca,"TFRobertaForQuestionAnswering"),oca.forEach(t),int=r(BYe," (RoBERTa model)"),BYe.forEach(t),dnt=i(ue),C6=n(ue,"LI",{});var IYe=s(C6);G8e=n(IYe,"STRONG",{});var rca=s(G8e);mnt=r(rca,"roformer"),rca.forEach(t),cnt=r(IYe," \u2014 "),tne=n(IYe,"A",{href:!0});var tca=s(tne);fnt=r(tca,"TFRoFormerForQuestionAnswering"),tca.forEach(t),gnt=r(IYe," (RoFormer model)"),IYe.forEach(t),hnt=i(ue),w6=n(ue,"LI",{});var NYe=s(w6);O8e=n(NYe,"STRONG",{});var aca=s(O8e);unt=r(aca,"xlm"),aca.forEach(t),pnt=r(NYe," \u2014 "),ane=n(NYe,"A",{href:!0});var nca=s(ane);_nt=r(nca,"TFXLMForQuestionAnsweringSimple"),nca.forEach(t),bnt=r(NYe," (XLM model)"),NYe.forEach(t),vnt=i(ue),A6=n(ue,"LI",{});var qYe=s(A6);V8e=n(qYe,"STRONG",{});var sca=s(V8e);Fnt=r(sca,"xlm-roberta"),sca.forEach(t),Tnt=r(qYe," \u2014 "),nne=n(qYe,"A",{href:!0});var lca=s(nne);Mnt=r(lca,"TFXLMRobertaForQuestionAnswering"),lca.forEach(t),Ent=r(qYe," (XLM-RoBERTa model)"),qYe.forEach(t),Cnt=i(ue),L6=n(ue,"LI",{});var jYe=s(L6);X8e=n(jYe,"STRONG",{});var ica=s(X8e);wnt=r(ica,"xlnet"),ica.forEach(t),Ant=r(jYe," \u2014 "),sne=n(jYe,"A",{href:!0});var dca=s(sne);Lnt=r(dca,"TFXLNetForQuestionAnsweringSimple"),dca.forEach(t),ynt=r(jYe," (XLNet model)"),jYe.forEach(t),ue.forEach(t),xnt=i(yi),T(y6.$$.fragment,yi),yi.forEach(t),Li.forEach(t),xoo=i(c),kc=n(c,"H2",{class:!0});var zto=s(kc);x6=n(zto,"A",{id:!0,class:!0,href:!0});var mca=s(x6);z8e=n(mca,"SPAN",{});var cca=s(z8e);T(gR.$$.fragment,cca),cca.forEach(t),mca.forEach(t),$nt=i(zto),Q8e=n(zto,"SPAN",{});var fca=s(Q8e);knt=r(fca,"TFAutoModelForVision2Seq"),fca.forEach(t),zto.forEach(t),$oo=i(c),Fr=n(c,"DIV",{class:!0});var xi=s(Fr);T(hR.$$.fragment,xi),Snt=i(xi),Sc=n(xi,"P",{});var yde=s(Sc);Rnt=r(yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lne=n(yde,"A",{href:!0});var gca=s(lne);Pnt=r(gca,"from_pretrained()"),gca.forEach(t),Bnt=r(yde," class method or the "),ine=n(yde,"A",{href:!0});var hca=s(ine);Int=r(hca,"from_config()"),hca.forEach(t),Nnt=r(yde,` class
method.`),yde.forEach(t),qnt=i(xi),uR=n(xi,"P",{});var Qto=s(uR);jnt=r(Qto,"This class cannot be instantiated directly using "),W8e=n(Qto,"CODE",{});var uca=s(W8e);Dnt=r(uca,"__init__()"),uca.forEach(t),Gnt=r(Qto," (throws an error)."),Qto.forEach(t),Ont=i(xi),aa=n(xi,"DIV",{class:!0});var E9=s(aa);T(pR.$$.fragment,E9),Vnt=i(E9),U8e=n(E9,"P",{});var pca=s(U8e);Xnt=r(pca,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pca.forEach(t),znt=i(E9),Rc=n(E9,"P",{});var xde=s(Rc);Qnt=r(xde,`Note:
Loading a model from its configuration file does `),H8e=n(xde,"STRONG",{});var _ca=s(H8e);Wnt=r(_ca,"not"),_ca.forEach(t),Unt=r(xde,` load the model weights. It only affects the
model\u2019s configuration. Use `),dne=n(xde,"A",{href:!0});var bca=s(dne);Hnt=r(bca,"from_pretrained()"),bca.forEach(t),Jnt=r(xde," to load the model weights."),xde.forEach(t),Ynt=i(E9),T($6.$$.fragment,E9),E9.forEach(t),Knt=i(xi),Jr=n(xi,"DIV",{class:!0});var $i=s(Jr);T(_R.$$.fragment,$i),Znt=i($i),J8e=n($i,"P",{});var vca=s(J8e);est=r(vca,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vca.forEach(t),ost=i($i),jn=n($i,"P",{});var C9=s(jn);rst=r(C9,"The model class to instantiate is selected based on the "),Y8e=n(C9,"CODE",{});var Fca=s(Y8e);tst=r(Fca,"model_type"),Fca.forEach(t),ast=r(C9,` property of the config object (either
passed as an argument or loaded from `),K8e=n(C9,"CODE",{});var Tca=s(K8e);nst=r(Tca,"pretrained_model_name_or_path"),Tca.forEach(t),sst=r(C9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z8e=n(C9,"CODE",{});var Mca=s(Z8e);lst=r(Mca,"pretrained_model_name_or_path"),Mca.forEach(t),ist=r(C9,":"),C9.forEach(t),dst=i($i),e9e=n($i,"UL",{});var Eca=s(e9e);k6=n(Eca,"LI",{});var DYe=s(k6);o9e=n(DYe,"STRONG",{});var Cca=s(o9e);mst=r(Cca,"vision-encoder-decoder"),Cca.forEach(t),cst=r(DYe," \u2014 "),mne=n(DYe,"A",{href:!0});var wca=s(mne);fst=r(wca,"TFVisionEncoderDecoderModel"),wca.forEach(t),gst=r(DYe," (Vision Encoder decoder model)"),DYe.forEach(t),Eca.forEach(t),hst=i($i),T(S6.$$.fragment,$i),$i.forEach(t),xi.forEach(t),koo=i(c),Pc=n(c,"H2",{class:!0});var Wto=s(Pc);R6=n(Wto,"A",{id:!0,class:!0,href:!0});var Aca=s(R6);r9e=n(Aca,"SPAN",{});var Lca=s(r9e);T(bR.$$.fragment,Lca),Lca.forEach(t),Aca.forEach(t),ust=i(Wto),t9e=n(Wto,"SPAN",{});var yca=s(t9e);pst=r(yca,"TFAutoModelForSpeechSeq2Seq"),yca.forEach(t),Wto.forEach(t),Soo=i(c),Tr=n(c,"DIV",{class:!0});var ki=s(Tr);T(vR.$$.fragment,ki),_st=i(ki),Bc=n(ki,"P",{});var $de=s(Bc);bst=r($de,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cne=n($de,"A",{href:!0});var xca=s(cne);vst=r(xca,"from_pretrained()"),xca.forEach(t),Fst=r($de," class method or the "),fne=n($de,"A",{href:!0});var $ca=s(fne);Tst=r($ca,"from_config()"),$ca.forEach(t),Mst=r($de,` class
method.`),$de.forEach(t),Est=i(ki),FR=n(ki,"P",{});var Uto=s(FR);Cst=r(Uto,"This class cannot be instantiated directly using "),a9e=n(Uto,"CODE",{});var kca=s(a9e);wst=r(kca,"__init__()"),kca.forEach(t),Ast=r(Uto," (throws an error)."),Uto.forEach(t),Lst=i(ki),na=n(ki,"DIV",{class:!0});var w9=s(na);T(TR.$$.fragment,w9),yst=i(w9),n9e=n(w9,"P",{});var Sca=s(n9e);xst=r(Sca,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Sca.forEach(t),$st=i(w9),Ic=n(w9,"P",{});var kde=s(Ic);kst=r(kde,`Note:
Loading a model from its configuration file does `),s9e=n(kde,"STRONG",{});var Rca=s(s9e);Sst=r(Rca,"not"),Rca.forEach(t),Rst=r(kde,` load the model weights. It only affects the
model\u2019s configuration. Use `),gne=n(kde,"A",{href:!0});var Pca=s(gne);Pst=r(Pca,"from_pretrained()"),Pca.forEach(t),Bst=r(kde," to load the model weights."),kde.forEach(t),Ist=i(w9),T(P6.$$.fragment,w9),w9.forEach(t),Nst=i(ki),Yr=n(ki,"DIV",{class:!0});var Si=s(Yr);T(MR.$$.fragment,Si),qst=i(Si),l9e=n(Si,"P",{});var Bca=s(l9e);jst=r(Bca,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bca.forEach(t),Dst=i(Si),Dn=n(Si,"P",{});var A9=s(Dn);Gst=r(A9,"The model class to instantiate is selected based on the "),i9e=n(A9,"CODE",{});var Ica=s(i9e);Ost=r(Ica,"model_type"),Ica.forEach(t),Vst=r(A9,` property of the config object (either
passed as an argument or loaded from `),d9e=n(A9,"CODE",{});var Nca=s(d9e);Xst=r(Nca,"pretrained_model_name_or_path"),Nca.forEach(t),zst=r(A9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m9e=n(A9,"CODE",{});var qca=s(m9e);Qst=r(qca,"pretrained_model_name_or_path"),qca.forEach(t),Wst=r(A9,":"),A9.forEach(t),Ust=i(Si),c9e=n(Si,"UL",{});var jca=s(c9e);B6=n(jca,"LI",{});var GYe=s(B6);f9e=n(GYe,"STRONG",{});var Dca=s(f9e);Hst=r(Dca,"speech_to_text"),Dca.forEach(t),Jst=r(GYe," \u2014 "),hne=n(GYe,"A",{href:!0});var Gca=s(hne);Yst=r(Gca,"TFSpeech2TextForConditionalGeneration"),Gca.forEach(t),Kst=r(GYe," (Speech2Text model)"),GYe.forEach(t),jca.forEach(t),Zst=i(Si),T(I6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),Roo=i(c),Nc=n(c,"H2",{class:!0});var Hto=s(Nc);N6=n(Hto,"A",{id:!0,class:!0,href:!0});var Oca=s(N6);g9e=n(Oca,"SPAN",{});var Vca=s(g9e);T(ER.$$.fragment,Vca),Vca.forEach(t),Oca.forEach(t),elt=i(Hto),h9e=n(Hto,"SPAN",{});var Xca=s(h9e);olt=r(Xca,"FlaxAutoModel"),Xca.forEach(t),Hto.forEach(t),Poo=i(c),Mr=n(c,"DIV",{class:!0});var Ri=s(Mr);T(CR.$$.fragment,Ri),rlt=i(Ri),qc=n(Ri,"P",{});var Sde=s(qc);tlt=r(Sde,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),une=n(Sde,"A",{href:!0});var zca=s(une);alt=r(zca,"from_pretrained()"),zca.forEach(t),nlt=r(Sde," class method or the "),pne=n(Sde,"A",{href:!0});var Qca=s(pne);slt=r(Qca,"from_config()"),Qca.forEach(t),llt=r(Sde,` class
method.`),Sde.forEach(t),ilt=i(Ri),wR=n(Ri,"P",{});var Jto=s(wR);dlt=r(Jto,"This class cannot be instantiated directly using "),u9e=n(Jto,"CODE",{});var Wca=s(u9e);mlt=r(Wca,"__init__()"),Wca.forEach(t),clt=r(Jto," (throws an error)."),Jto.forEach(t),flt=i(Ri),sa=n(Ri,"DIV",{class:!0});var L9=s(sa);T(AR.$$.fragment,L9),glt=i(L9),p9e=n(L9,"P",{});var Uca=s(p9e);hlt=r(Uca,"Instantiates one of the base model classes of the library from a configuration."),Uca.forEach(t),ult=i(L9),jc=n(L9,"P",{});var Rde=s(jc);plt=r(Rde,`Note:
Loading a model from its configuration file does `),_9e=n(Rde,"STRONG",{});var Hca=s(_9e);_lt=r(Hca,"not"),Hca.forEach(t),blt=r(Rde,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ne=n(Rde,"A",{href:!0});var Jca=s(_ne);vlt=r(Jca,"from_pretrained()"),Jca.forEach(t),Flt=r(Rde," to load the model weights."),Rde.forEach(t),Tlt=i(L9),T(q6.$$.fragment,L9),L9.forEach(t),Mlt=i(Ri),Kr=n(Ri,"DIV",{class:!0});var Pi=s(Kr);T(LR.$$.fragment,Pi),Elt=i(Pi),b9e=n(Pi,"P",{});var Yca=s(b9e);Clt=r(Yca,"Instantiate one of the base model classes of the library from a pretrained model."),Yca.forEach(t),wlt=i(Pi),Gn=n(Pi,"P",{});var y9=s(Gn);Alt=r(y9,"The model class to instantiate is selected based on the "),v9e=n(y9,"CODE",{});var Kca=s(v9e);Llt=r(Kca,"model_type"),Kca.forEach(t),ylt=r(y9,` property of the config object (either
passed as an argument or loaded from `),F9e=n(y9,"CODE",{});var Zca=s(F9e);xlt=r(Zca,"pretrained_model_name_or_path"),Zca.forEach(t),$lt=r(y9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=n(y9,"CODE",{});var efa=s(T9e);klt=r(efa,"pretrained_model_name_or_path"),efa.forEach(t),Slt=r(y9,":"),y9.forEach(t),Rlt=i(Pi),te=n(Pi,"UL",{});var ne=s(te);j6=n(ne,"LI",{});var OYe=s(j6);M9e=n(OYe,"STRONG",{});var ofa=s(M9e);Plt=r(ofa,"albert"),ofa.forEach(t),Blt=r(OYe," \u2014 "),bne=n(OYe,"A",{href:!0});var rfa=s(bne);Ilt=r(rfa,"FlaxAlbertModel"),rfa.forEach(t),Nlt=r(OYe," (ALBERT model)"),OYe.forEach(t),qlt=i(ne),D6=n(ne,"LI",{});var VYe=s(D6);E9e=n(VYe,"STRONG",{});var tfa=s(E9e);jlt=r(tfa,"bart"),tfa.forEach(t),Dlt=r(VYe," \u2014 "),vne=n(VYe,"A",{href:!0});var afa=s(vne);Glt=r(afa,"FlaxBartModel"),afa.forEach(t),Olt=r(VYe," (BART model)"),VYe.forEach(t),Vlt=i(ne),G6=n(ne,"LI",{});var XYe=s(G6);C9e=n(XYe,"STRONG",{});var nfa=s(C9e);Xlt=r(nfa,"beit"),nfa.forEach(t),zlt=r(XYe," \u2014 "),Fne=n(XYe,"A",{href:!0});var sfa=s(Fne);Qlt=r(sfa,"FlaxBeitModel"),sfa.forEach(t),Wlt=r(XYe," (BEiT model)"),XYe.forEach(t),Ult=i(ne),O6=n(ne,"LI",{});var zYe=s(O6);w9e=n(zYe,"STRONG",{});var lfa=s(w9e);Hlt=r(lfa,"bert"),lfa.forEach(t),Jlt=r(zYe," \u2014 "),Tne=n(zYe,"A",{href:!0});var ifa=s(Tne);Ylt=r(ifa,"FlaxBertModel"),ifa.forEach(t),Klt=r(zYe," (BERT model)"),zYe.forEach(t),Zlt=i(ne),V6=n(ne,"LI",{});var QYe=s(V6);A9e=n(QYe,"STRONG",{});var dfa=s(A9e);eit=r(dfa,"big_bird"),dfa.forEach(t),oit=r(QYe," \u2014 "),Mne=n(QYe,"A",{href:!0});var mfa=s(Mne);rit=r(mfa,"FlaxBigBirdModel"),mfa.forEach(t),tit=r(QYe," (BigBird model)"),QYe.forEach(t),ait=i(ne),X6=n(ne,"LI",{});var WYe=s(X6);L9e=n(WYe,"STRONG",{});var cfa=s(L9e);nit=r(cfa,"blenderbot"),cfa.forEach(t),sit=r(WYe," \u2014 "),Ene=n(WYe,"A",{href:!0});var ffa=s(Ene);lit=r(ffa,"FlaxBlenderbotModel"),ffa.forEach(t),iit=r(WYe," (Blenderbot model)"),WYe.forEach(t),dit=i(ne),z6=n(ne,"LI",{});var UYe=s(z6);y9e=n(UYe,"STRONG",{});var gfa=s(y9e);mit=r(gfa,"blenderbot-small"),gfa.forEach(t),cit=r(UYe," \u2014 "),Cne=n(UYe,"A",{href:!0});var hfa=s(Cne);fit=r(hfa,"FlaxBlenderbotSmallModel"),hfa.forEach(t),git=r(UYe," (BlenderbotSmall model)"),UYe.forEach(t),hit=i(ne),Q6=n(ne,"LI",{});var HYe=s(Q6);x9e=n(HYe,"STRONG",{});var ufa=s(x9e);uit=r(ufa,"clip"),ufa.forEach(t),pit=r(HYe," \u2014 "),wne=n(HYe,"A",{href:!0});var pfa=s(wne);_it=r(pfa,"FlaxCLIPModel"),pfa.forEach(t),bit=r(HYe," (CLIP model)"),HYe.forEach(t),vit=i(ne),W6=n(ne,"LI",{});var JYe=s(W6);$9e=n(JYe,"STRONG",{});var _fa=s($9e);Fit=r(_fa,"distilbert"),_fa.forEach(t),Tit=r(JYe," \u2014 "),Ane=n(JYe,"A",{href:!0});var bfa=s(Ane);Mit=r(bfa,"FlaxDistilBertModel"),bfa.forEach(t),Eit=r(JYe," (DistilBERT model)"),JYe.forEach(t),Cit=i(ne),U6=n(ne,"LI",{});var YYe=s(U6);k9e=n(YYe,"STRONG",{});var vfa=s(k9e);wit=r(vfa,"electra"),vfa.forEach(t),Ait=r(YYe," \u2014 "),Lne=n(YYe,"A",{href:!0});var Ffa=s(Lne);Lit=r(Ffa,"FlaxElectraModel"),Ffa.forEach(t),yit=r(YYe," (ELECTRA model)"),YYe.forEach(t),xit=i(ne),H6=n(ne,"LI",{});var KYe=s(H6);S9e=n(KYe,"STRONG",{});var Tfa=s(S9e);$it=r(Tfa,"gpt2"),Tfa.forEach(t),kit=r(KYe," \u2014 "),yne=n(KYe,"A",{href:!0});var Mfa=s(yne);Sit=r(Mfa,"FlaxGPT2Model"),Mfa.forEach(t),Rit=r(KYe," (OpenAI GPT-2 model)"),KYe.forEach(t),Pit=i(ne),J6=n(ne,"LI",{});var ZYe=s(J6);R9e=n(ZYe,"STRONG",{});var Efa=s(R9e);Bit=r(Efa,"gpt_neo"),Efa.forEach(t),Iit=r(ZYe," \u2014 "),xne=n(ZYe,"A",{href:!0});var Cfa=s(xne);Nit=r(Cfa,"FlaxGPTNeoModel"),Cfa.forEach(t),qit=r(ZYe," (GPT Neo model)"),ZYe.forEach(t),jit=i(ne),Y6=n(ne,"LI",{});var eKe=s(Y6);P9e=n(eKe,"STRONG",{});var wfa=s(P9e);Dit=r(wfa,"gptj"),wfa.forEach(t),Git=r(eKe," \u2014 "),$ne=n(eKe,"A",{href:!0});var Afa=s($ne);Oit=r(Afa,"FlaxGPTJModel"),Afa.forEach(t),Vit=r(eKe," (GPT-J model)"),eKe.forEach(t),Xit=i(ne),K6=n(ne,"LI",{});var oKe=s(K6);B9e=n(oKe,"STRONG",{});var Lfa=s(B9e);zit=r(Lfa,"longt5"),Lfa.forEach(t),Qit=r(oKe," \u2014 "),kne=n(oKe,"A",{href:!0});var yfa=s(kne);Wit=r(yfa,"FlaxLongT5Model"),yfa.forEach(t),Uit=r(oKe," (LongT5 model)"),oKe.forEach(t),Hit=i(ne),Z6=n(ne,"LI",{});var rKe=s(Z6);I9e=n(rKe,"STRONG",{});var xfa=s(I9e);Jit=r(xfa,"marian"),xfa.forEach(t),Yit=r(rKe," \u2014 "),Sne=n(rKe,"A",{href:!0});var $fa=s(Sne);Kit=r($fa,"FlaxMarianModel"),$fa.forEach(t),Zit=r(rKe," (Marian model)"),rKe.forEach(t),edt=i(ne),e7=n(ne,"LI",{});var tKe=s(e7);N9e=n(tKe,"STRONG",{});var kfa=s(N9e);odt=r(kfa,"mbart"),kfa.forEach(t),rdt=r(tKe," \u2014 "),Rne=n(tKe,"A",{href:!0});var Sfa=s(Rne);tdt=r(Sfa,"FlaxMBartModel"),Sfa.forEach(t),adt=r(tKe," (mBART model)"),tKe.forEach(t),ndt=i(ne),o7=n(ne,"LI",{});var aKe=s(o7);q9e=n(aKe,"STRONG",{});var Rfa=s(q9e);sdt=r(Rfa,"mt5"),Rfa.forEach(t),ldt=r(aKe," \u2014 "),Pne=n(aKe,"A",{href:!0});var Pfa=s(Pne);idt=r(Pfa,"FlaxMT5Model"),Pfa.forEach(t),ddt=r(aKe," (MT5 model)"),aKe.forEach(t),mdt=i(ne),r7=n(ne,"LI",{});var nKe=s(r7);j9e=n(nKe,"STRONG",{});var Bfa=s(j9e);cdt=r(Bfa,"opt"),Bfa.forEach(t),fdt=r(nKe," \u2014 "),Bne=n(nKe,"A",{href:!0});var Ifa=s(Bne);gdt=r(Ifa,"FlaxOPTModel"),Ifa.forEach(t),hdt=r(nKe," (OPT model)"),nKe.forEach(t),udt=i(ne),t7=n(ne,"LI",{});var sKe=s(t7);D9e=n(sKe,"STRONG",{});var Nfa=s(D9e);pdt=r(Nfa,"pegasus"),Nfa.forEach(t),_dt=r(sKe," \u2014 "),Ine=n(sKe,"A",{href:!0});var qfa=s(Ine);bdt=r(qfa,"FlaxPegasusModel"),qfa.forEach(t),vdt=r(sKe," (Pegasus model)"),sKe.forEach(t),Fdt=i(ne),a7=n(ne,"LI",{});var lKe=s(a7);G9e=n(lKe,"STRONG",{});var jfa=s(G9e);Tdt=r(jfa,"roberta"),jfa.forEach(t),Mdt=r(lKe," \u2014 "),Nne=n(lKe,"A",{href:!0});var Dfa=s(Nne);Edt=r(Dfa,"FlaxRobertaModel"),Dfa.forEach(t),Cdt=r(lKe," (RoBERTa model)"),lKe.forEach(t),wdt=i(ne),n7=n(ne,"LI",{});var iKe=s(n7);O9e=n(iKe,"STRONG",{});var Gfa=s(O9e);Adt=r(Gfa,"roformer"),Gfa.forEach(t),Ldt=r(iKe," \u2014 "),qne=n(iKe,"A",{href:!0});var Ofa=s(qne);ydt=r(Ofa,"FlaxRoFormerModel"),Ofa.forEach(t),xdt=r(iKe," (RoFormer model)"),iKe.forEach(t),$dt=i(ne),s7=n(ne,"LI",{});var dKe=s(s7);V9e=n(dKe,"STRONG",{});var Vfa=s(V9e);kdt=r(Vfa,"t5"),Vfa.forEach(t),Sdt=r(dKe," \u2014 "),jne=n(dKe,"A",{href:!0});var Xfa=s(jne);Rdt=r(Xfa,"FlaxT5Model"),Xfa.forEach(t),Pdt=r(dKe," (T5 model)"),dKe.forEach(t),Bdt=i(ne),l7=n(ne,"LI",{});var mKe=s(l7);X9e=n(mKe,"STRONG",{});var zfa=s(X9e);Idt=r(zfa,"vision-text-dual-encoder"),zfa.forEach(t),Ndt=r(mKe," \u2014 "),Dne=n(mKe,"A",{href:!0});var Qfa=s(Dne);qdt=r(Qfa,"FlaxVisionTextDualEncoderModel"),Qfa.forEach(t),jdt=r(mKe," (VisionTextDualEncoder model)"),mKe.forEach(t),Ddt=i(ne),i7=n(ne,"LI",{});var cKe=s(i7);z9e=n(cKe,"STRONG",{});var Wfa=s(z9e);Gdt=r(Wfa,"vit"),Wfa.forEach(t),Odt=r(cKe," \u2014 "),Gne=n(cKe,"A",{href:!0});var Ufa=s(Gne);Vdt=r(Ufa,"FlaxViTModel"),Ufa.forEach(t),Xdt=r(cKe," (ViT model)"),cKe.forEach(t),zdt=i(ne),d7=n(ne,"LI",{});var fKe=s(d7);Q9e=n(fKe,"STRONG",{});var Hfa=s(Q9e);Qdt=r(Hfa,"wav2vec2"),Hfa.forEach(t),Wdt=r(fKe," \u2014 "),One=n(fKe,"A",{href:!0});var Jfa=s(One);Udt=r(Jfa,"FlaxWav2Vec2Model"),Jfa.forEach(t),Hdt=r(fKe," (Wav2Vec2 model)"),fKe.forEach(t),Jdt=i(ne),m7=n(ne,"LI",{});var gKe=s(m7);W9e=n(gKe,"STRONG",{});var Yfa=s(W9e);Ydt=r(Yfa,"xglm"),Yfa.forEach(t),Kdt=r(gKe," \u2014 "),Vne=n(gKe,"A",{href:!0});var Kfa=s(Vne);Zdt=r(Kfa,"FlaxXGLMModel"),Kfa.forEach(t),emt=r(gKe," (XGLM model)"),gKe.forEach(t),omt=i(ne),c7=n(ne,"LI",{});var hKe=s(c7);U9e=n(hKe,"STRONG",{});var Zfa=s(U9e);rmt=r(Zfa,"xlm-roberta"),Zfa.forEach(t),tmt=r(hKe," \u2014 "),Xne=n(hKe,"A",{href:!0});var ega=s(Xne);amt=r(ega,"FlaxXLMRobertaModel"),ega.forEach(t),nmt=r(hKe," (XLM-RoBERTa model)"),hKe.forEach(t),ne.forEach(t),smt=i(Pi),T(f7.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),Boo=i(c),Dc=n(c,"H2",{class:!0});var Yto=s(Dc);g7=n(Yto,"A",{id:!0,class:!0,href:!0});var oga=s(g7);H9e=n(oga,"SPAN",{});var rga=s(H9e);T(yR.$$.fragment,rga),rga.forEach(t),oga.forEach(t),lmt=i(Yto),J9e=n(Yto,"SPAN",{});var tga=s(J9e);imt=r(tga,"FlaxAutoModelForCausalLM"),tga.forEach(t),Yto.forEach(t),Ioo=i(c),Er=n(c,"DIV",{class:!0});var Bi=s(Er);T(xR.$$.fragment,Bi),dmt=i(Bi),Gc=n(Bi,"P",{});var Pde=s(Gc);mmt=r(Pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zne=n(Pde,"A",{href:!0});var aga=s(zne);cmt=r(aga,"from_pretrained()"),aga.forEach(t),fmt=r(Pde," class method or the "),Qne=n(Pde,"A",{href:!0});var nga=s(Qne);gmt=r(nga,"from_config()"),nga.forEach(t),hmt=r(Pde,` class
method.`),Pde.forEach(t),umt=i(Bi),$R=n(Bi,"P",{});var Kto=s($R);pmt=r(Kto,"This class cannot be instantiated directly using "),Y9e=n(Kto,"CODE",{});var sga=s(Y9e);_mt=r(sga,"__init__()"),sga.forEach(t),bmt=r(Kto," (throws an error)."),Kto.forEach(t),vmt=i(Bi),la=n(Bi,"DIV",{class:!0});var x9=s(la);T(kR.$$.fragment,x9),Fmt=i(x9),K9e=n(x9,"P",{});var lga=s(K9e);Tmt=r(lga,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lga.forEach(t),Mmt=i(x9),Oc=n(x9,"P",{});var Bde=s(Oc);Emt=r(Bde,`Note:
Loading a model from its configuration file does `),Z9e=n(Bde,"STRONG",{});var iga=s(Z9e);Cmt=r(iga,"not"),iga.forEach(t),wmt=r(Bde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=n(Bde,"A",{href:!0});var dga=s(Wne);Amt=r(dga,"from_pretrained()"),dga.forEach(t),Lmt=r(Bde," to load the model weights."),Bde.forEach(t),ymt=i(x9),T(h7.$$.fragment,x9),x9.forEach(t),xmt=i(Bi),Zr=n(Bi,"DIV",{class:!0});var Ii=s(Zr);T(SR.$$.fragment,Ii),$mt=i(Ii),exe=n(Ii,"P",{});var mga=s(exe);kmt=r(mga,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mga.forEach(t),Smt=i(Ii),On=n(Ii,"P",{});var $9=s(On);Rmt=r($9,"The model class to instantiate is selected based on the "),oxe=n($9,"CODE",{});var cga=s(oxe);Pmt=r(cga,"model_type"),cga.forEach(t),Bmt=r($9,` property of the config object (either
passed as an argument or loaded from `),rxe=n($9,"CODE",{});var fga=s(rxe);Imt=r(fga,"pretrained_model_name_or_path"),fga.forEach(t),Nmt=r($9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),txe=n($9,"CODE",{});var gga=s(txe);qmt=r(gga,"pretrained_model_name_or_path"),gga.forEach(t),jmt=r($9,":"),$9.forEach(t),Dmt=i(Ii),xe=n(Ii,"UL",{});var qe=s(xe);u7=n(qe,"LI",{});var uKe=s(u7);axe=n(uKe,"STRONG",{});var hga=s(axe);Gmt=r(hga,"bart"),hga.forEach(t),Omt=r(uKe," \u2014 "),Une=n(uKe,"A",{href:!0});var uga=s(Une);Vmt=r(uga,"FlaxBartForCausalLM"),uga.forEach(t),Xmt=r(uKe," (BART model)"),uKe.forEach(t),zmt=i(qe),p7=n(qe,"LI",{});var pKe=s(p7);nxe=n(pKe,"STRONG",{});var pga=s(nxe);Qmt=r(pga,"bert"),pga.forEach(t),Wmt=r(pKe," \u2014 "),Hne=n(pKe,"A",{href:!0});var _ga=s(Hne);Umt=r(_ga,"FlaxBertForCausalLM"),_ga.forEach(t),Hmt=r(pKe," (BERT model)"),pKe.forEach(t),Jmt=i(qe),_7=n(qe,"LI",{});var _Ke=s(_7);sxe=n(_Ke,"STRONG",{});var bga=s(sxe);Ymt=r(bga,"big_bird"),bga.forEach(t),Kmt=r(_Ke," \u2014 "),Jne=n(_Ke,"A",{href:!0});var vga=s(Jne);Zmt=r(vga,"FlaxBigBirdForCausalLM"),vga.forEach(t),ect=r(_Ke," (BigBird model)"),_Ke.forEach(t),oct=i(qe),b7=n(qe,"LI",{});var bKe=s(b7);lxe=n(bKe,"STRONG",{});var Fga=s(lxe);rct=r(Fga,"electra"),Fga.forEach(t),tct=r(bKe," \u2014 "),Yne=n(bKe,"A",{href:!0});var Tga=s(Yne);act=r(Tga,"FlaxElectraForCausalLM"),Tga.forEach(t),nct=r(bKe," (ELECTRA model)"),bKe.forEach(t),sct=i(qe),v7=n(qe,"LI",{});var vKe=s(v7);ixe=n(vKe,"STRONG",{});var Mga=s(ixe);lct=r(Mga,"gpt2"),Mga.forEach(t),ict=r(vKe," \u2014 "),Kne=n(vKe,"A",{href:!0});var Ega=s(Kne);dct=r(Ega,"FlaxGPT2LMHeadModel"),Ega.forEach(t),mct=r(vKe," (OpenAI GPT-2 model)"),vKe.forEach(t),cct=i(qe),F7=n(qe,"LI",{});var FKe=s(F7);dxe=n(FKe,"STRONG",{});var Cga=s(dxe);fct=r(Cga,"gpt_neo"),Cga.forEach(t),gct=r(FKe," \u2014 "),Zne=n(FKe,"A",{href:!0});var wga=s(Zne);hct=r(wga,"FlaxGPTNeoForCausalLM"),wga.forEach(t),uct=r(FKe," (GPT Neo model)"),FKe.forEach(t),pct=i(qe),T7=n(qe,"LI",{});var TKe=s(T7);mxe=n(TKe,"STRONG",{});var Aga=s(mxe);_ct=r(Aga,"gptj"),Aga.forEach(t),bct=r(TKe," \u2014 "),ese=n(TKe,"A",{href:!0});var Lga=s(ese);vct=r(Lga,"FlaxGPTJForCausalLM"),Lga.forEach(t),Fct=r(TKe," (GPT-J model)"),TKe.forEach(t),Tct=i(qe),M7=n(qe,"LI",{});var MKe=s(M7);cxe=n(MKe,"STRONG",{});var yga=s(cxe);Mct=r(yga,"opt"),yga.forEach(t),Ect=r(MKe," \u2014 "),ose=n(MKe,"A",{href:!0});var xga=s(ose);Cct=r(xga,"FlaxOPTForCausalLM"),xga.forEach(t),wct=r(MKe," (OPT model)"),MKe.forEach(t),Act=i(qe),E7=n(qe,"LI",{});var EKe=s(E7);fxe=n(EKe,"STRONG",{});var $ga=s(fxe);Lct=r($ga,"roberta"),$ga.forEach(t),yct=r(EKe," \u2014 "),rse=n(EKe,"A",{href:!0});var kga=s(rse);xct=r(kga,"FlaxRobertaForCausalLM"),kga.forEach(t),$ct=r(EKe," (RoBERTa model)"),EKe.forEach(t),kct=i(qe),C7=n(qe,"LI",{});var CKe=s(C7);gxe=n(CKe,"STRONG",{});var Sga=s(gxe);Sct=r(Sga,"xglm"),Sga.forEach(t),Rct=r(CKe," \u2014 "),tse=n(CKe,"A",{href:!0});var Rga=s(tse);Pct=r(Rga,"FlaxXGLMForCausalLM"),Rga.forEach(t),Bct=r(CKe," (XGLM model)"),CKe.forEach(t),qe.forEach(t),Ict=i(Ii),T(w7.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),Noo=i(c),Vc=n(c,"H2",{class:!0});var Zto=s(Vc);A7=n(Zto,"A",{id:!0,class:!0,href:!0});var Pga=s(A7);hxe=n(Pga,"SPAN",{});var Bga=s(hxe);T(RR.$$.fragment,Bga),Bga.forEach(t),Pga.forEach(t),Nct=i(Zto),uxe=n(Zto,"SPAN",{});var Iga=s(uxe);qct=r(Iga,"FlaxAutoModelForPreTraining"),Iga.forEach(t),Zto.forEach(t),qoo=i(c),Cr=n(c,"DIV",{class:!0});var Ni=s(Cr);T(PR.$$.fragment,Ni),jct=i(Ni),Xc=n(Ni,"P",{});var Ide=s(Xc);Dct=r(Ide,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ase=n(Ide,"A",{href:!0});var Nga=s(ase);Gct=r(Nga,"from_pretrained()"),Nga.forEach(t),Oct=r(Ide," class method or the "),nse=n(Ide,"A",{href:!0});var qga=s(nse);Vct=r(qga,"from_config()"),qga.forEach(t),Xct=r(Ide,` class
method.`),Ide.forEach(t),zct=i(Ni),BR=n(Ni,"P",{});var eao=s(BR);Qct=r(eao,"This class cannot be instantiated directly using "),pxe=n(eao,"CODE",{});var jga=s(pxe);Wct=r(jga,"__init__()"),jga.forEach(t),Uct=r(eao," (throws an error)."),eao.forEach(t),Hct=i(Ni),ia=n(Ni,"DIV",{class:!0});var k9=s(ia);T(IR.$$.fragment,k9),Jct=i(k9),_xe=n(k9,"P",{});var Dga=s(_xe);Yct=r(Dga,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Dga.forEach(t),Kct=i(k9),zc=n(k9,"P",{});var Nde=s(zc);Zct=r(Nde,`Note:
Loading a model from its configuration file does `),bxe=n(Nde,"STRONG",{});var Gga=s(bxe);eft=r(Gga,"not"),Gga.forEach(t),oft=r(Nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),sse=n(Nde,"A",{href:!0});var Oga=s(sse);rft=r(Oga,"from_pretrained()"),Oga.forEach(t),tft=r(Nde," to load the model weights."),Nde.forEach(t),aft=i(k9),T(L7.$$.fragment,k9),k9.forEach(t),nft=i(Ni),et=n(Ni,"DIV",{class:!0});var qi=s(et);T(NR.$$.fragment,qi),sft=i(qi),vxe=n(qi,"P",{});var Vga=s(vxe);lft=r(Vga,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vga.forEach(t),ift=i(qi),Vn=n(qi,"P",{});var S9=s(Vn);dft=r(S9,"The model class to instantiate is selected based on the "),Fxe=n(S9,"CODE",{});var Xga=s(Fxe);mft=r(Xga,"model_type"),Xga.forEach(t),cft=r(S9,` property of the config object (either
passed as an argument or loaded from `),Txe=n(S9,"CODE",{});var zga=s(Txe);fft=r(zga,"pretrained_model_name_or_path"),zga.forEach(t),gft=r(S9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mxe=n(S9,"CODE",{});var Qga=s(Mxe);hft=r(Qga,"pretrained_model_name_or_path"),Qga.forEach(t),uft=r(S9,":"),S9.forEach(t),pft=i(qi),Ee=n(qi,"UL",{});var we=s(Ee);y7=n(we,"LI",{});var wKe=s(y7);Exe=n(wKe,"STRONG",{});var Wga=s(Exe);_ft=r(Wga,"albert"),Wga.forEach(t),bft=r(wKe," \u2014 "),lse=n(wKe,"A",{href:!0});var Uga=s(lse);vft=r(Uga,"FlaxAlbertForPreTraining"),Uga.forEach(t),Fft=r(wKe," (ALBERT model)"),wKe.forEach(t),Tft=i(we),x7=n(we,"LI",{});var AKe=s(x7);Cxe=n(AKe,"STRONG",{});var Hga=s(Cxe);Mft=r(Hga,"bart"),Hga.forEach(t),Eft=r(AKe," \u2014 "),ise=n(AKe,"A",{href:!0});var Jga=s(ise);Cft=r(Jga,"FlaxBartForConditionalGeneration"),Jga.forEach(t),wft=r(AKe," (BART model)"),AKe.forEach(t),Aft=i(we),$7=n(we,"LI",{});var LKe=s($7);wxe=n(LKe,"STRONG",{});var Yga=s(wxe);Lft=r(Yga,"bert"),Yga.forEach(t),yft=r(LKe," \u2014 "),dse=n(LKe,"A",{href:!0});var Kga=s(dse);xft=r(Kga,"FlaxBertForPreTraining"),Kga.forEach(t),$ft=r(LKe," (BERT model)"),LKe.forEach(t),kft=i(we),k7=n(we,"LI",{});var yKe=s(k7);Axe=n(yKe,"STRONG",{});var Zga=s(Axe);Sft=r(Zga,"big_bird"),Zga.forEach(t),Rft=r(yKe," \u2014 "),mse=n(yKe,"A",{href:!0});var eha=s(mse);Pft=r(eha,"FlaxBigBirdForPreTraining"),eha.forEach(t),Bft=r(yKe," (BigBird model)"),yKe.forEach(t),Ift=i(we),S7=n(we,"LI",{});var xKe=s(S7);Lxe=n(xKe,"STRONG",{});var oha=s(Lxe);Nft=r(oha,"electra"),oha.forEach(t),qft=r(xKe," \u2014 "),cse=n(xKe,"A",{href:!0});var rha=s(cse);jft=r(rha,"FlaxElectraForPreTraining"),rha.forEach(t),Dft=r(xKe," (ELECTRA model)"),xKe.forEach(t),Gft=i(we),R7=n(we,"LI",{});var $Ke=s(R7);yxe=n($Ke,"STRONG",{});var tha=s(yxe);Oft=r(tha,"longt5"),tha.forEach(t),Vft=r($Ke," \u2014 "),fse=n($Ke,"A",{href:!0});var aha=s(fse);Xft=r(aha,"FlaxLongT5ForConditionalGeneration"),aha.forEach(t),zft=r($Ke," (LongT5 model)"),$Ke.forEach(t),Qft=i(we),P7=n(we,"LI",{});var kKe=s(P7);xxe=n(kKe,"STRONG",{});var nha=s(xxe);Wft=r(nha,"mbart"),nha.forEach(t),Uft=r(kKe," \u2014 "),gse=n(kKe,"A",{href:!0});var sha=s(gse);Hft=r(sha,"FlaxMBartForConditionalGeneration"),sha.forEach(t),Jft=r(kKe," (mBART model)"),kKe.forEach(t),Yft=i(we),B7=n(we,"LI",{});var SKe=s(B7);$xe=n(SKe,"STRONG",{});var lha=s($xe);Kft=r(lha,"mt5"),lha.forEach(t),Zft=r(SKe," \u2014 "),hse=n(SKe,"A",{href:!0});var iha=s(hse);egt=r(iha,"FlaxMT5ForConditionalGeneration"),iha.forEach(t),ogt=r(SKe," (MT5 model)"),SKe.forEach(t),rgt=i(we),I7=n(we,"LI",{});var RKe=s(I7);kxe=n(RKe,"STRONG",{});var dha=s(kxe);tgt=r(dha,"roberta"),dha.forEach(t),agt=r(RKe," \u2014 "),use=n(RKe,"A",{href:!0});var mha=s(use);ngt=r(mha,"FlaxRobertaForMaskedLM"),mha.forEach(t),sgt=r(RKe," (RoBERTa model)"),RKe.forEach(t),lgt=i(we),N7=n(we,"LI",{});var PKe=s(N7);Sxe=n(PKe,"STRONG",{});var cha=s(Sxe);igt=r(cha,"roformer"),cha.forEach(t),dgt=r(PKe," \u2014 "),pse=n(PKe,"A",{href:!0});var fha=s(pse);mgt=r(fha,"FlaxRoFormerForMaskedLM"),fha.forEach(t),cgt=r(PKe," (RoFormer model)"),PKe.forEach(t),fgt=i(we),q7=n(we,"LI",{});var BKe=s(q7);Rxe=n(BKe,"STRONG",{});var gha=s(Rxe);ggt=r(gha,"t5"),gha.forEach(t),hgt=r(BKe," \u2014 "),_se=n(BKe,"A",{href:!0});var hha=s(_se);ugt=r(hha,"FlaxT5ForConditionalGeneration"),hha.forEach(t),pgt=r(BKe," (T5 model)"),BKe.forEach(t),_gt=i(we),j7=n(we,"LI",{});var IKe=s(j7);Pxe=n(IKe,"STRONG",{});var uha=s(Pxe);bgt=r(uha,"wav2vec2"),uha.forEach(t),vgt=r(IKe," \u2014 "),bse=n(IKe,"A",{href:!0});var pha=s(bse);Fgt=r(pha,"FlaxWav2Vec2ForPreTraining"),pha.forEach(t),Tgt=r(IKe," (Wav2Vec2 model)"),IKe.forEach(t),Mgt=i(we),D7=n(we,"LI",{});var NKe=s(D7);Bxe=n(NKe,"STRONG",{});var _ha=s(Bxe);Egt=r(_ha,"xlm-roberta"),_ha.forEach(t),Cgt=r(NKe," \u2014 "),vse=n(NKe,"A",{href:!0});var bha=s(vse);wgt=r(bha,"FlaxXLMRobertaForMaskedLM"),bha.forEach(t),Agt=r(NKe," (XLM-RoBERTa model)"),NKe.forEach(t),we.forEach(t),Lgt=i(qi),T(G7.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),joo=i(c),Qc=n(c,"H2",{class:!0});var oao=s(Qc);O7=n(oao,"A",{id:!0,class:!0,href:!0});var vha=s(O7);Ixe=n(vha,"SPAN",{});var Fha=s(Ixe);T(qR.$$.fragment,Fha),Fha.forEach(t),vha.forEach(t),ygt=i(oao),Nxe=n(oao,"SPAN",{});var Tha=s(Nxe);xgt=r(Tha,"FlaxAutoModelForMaskedLM"),Tha.forEach(t),oao.forEach(t),Doo=i(c),wr=n(c,"DIV",{class:!0});var ji=s(wr);T(jR.$$.fragment,ji),$gt=i(ji),Wc=n(ji,"P",{});var qde=s(Wc);kgt=r(qde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fse=n(qde,"A",{href:!0});var Mha=s(Fse);Sgt=r(Mha,"from_pretrained()"),Mha.forEach(t),Rgt=r(qde," class method or the "),Tse=n(qde,"A",{href:!0});var Eha=s(Tse);Pgt=r(Eha,"from_config()"),Eha.forEach(t),Bgt=r(qde,` class
method.`),qde.forEach(t),Igt=i(ji),DR=n(ji,"P",{});var rao=s(DR);Ngt=r(rao,"This class cannot be instantiated directly using "),qxe=n(rao,"CODE",{});var Cha=s(qxe);qgt=r(Cha,"__init__()"),Cha.forEach(t),jgt=r(rao," (throws an error)."),rao.forEach(t),Dgt=i(ji),da=n(ji,"DIV",{class:!0});var R9=s(da);T(GR.$$.fragment,R9),Ggt=i(R9),jxe=n(R9,"P",{});var wha=s(jxe);Ogt=r(wha,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wha.forEach(t),Vgt=i(R9),Uc=n(R9,"P",{});var jde=s(Uc);Xgt=r(jde,`Note:
Loading a model from its configuration file does `),Dxe=n(jde,"STRONG",{});var Aha=s(Dxe);zgt=r(Aha,"not"),Aha.forEach(t),Qgt=r(jde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=n(jde,"A",{href:!0});var Lha=s(Mse);Wgt=r(Lha,"from_pretrained()"),Lha.forEach(t),Ugt=r(jde," to load the model weights."),jde.forEach(t),Hgt=i(R9),T(V7.$$.fragment,R9),R9.forEach(t),Jgt=i(ji),ot=n(ji,"DIV",{class:!0});var Di=s(ot);T(OR.$$.fragment,Di),Ygt=i(Di),Gxe=n(Di,"P",{});var yha=s(Gxe);Kgt=r(yha,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yha.forEach(t),Zgt=i(Di),Xn=n(Di,"P",{});var P9=s(Xn);eht=r(P9,"The model class to instantiate is selected based on the "),Oxe=n(P9,"CODE",{});var xha=s(Oxe);oht=r(xha,"model_type"),xha.forEach(t),rht=r(P9,` property of the config object (either
passed as an argument or loaded from `),Vxe=n(P9,"CODE",{});var $ha=s(Vxe);tht=r($ha,"pretrained_model_name_or_path"),$ha.forEach(t),aht=r(P9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xxe=n(P9,"CODE",{});var kha=s(Xxe);nht=r(kha,"pretrained_model_name_or_path"),kha.forEach(t),sht=r(P9,":"),P9.forEach(t),lht=i(Di),$e=n(Di,"UL",{});var je=s($e);X7=n(je,"LI",{});var qKe=s(X7);zxe=n(qKe,"STRONG",{});var Sha=s(zxe);iht=r(Sha,"albert"),Sha.forEach(t),dht=r(qKe," \u2014 "),Ese=n(qKe,"A",{href:!0});var Rha=s(Ese);mht=r(Rha,"FlaxAlbertForMaskedLM"),Rha.forEach(t),cht=r(qKe," (ALBERT model)"),qKe.forEach(t),fht=i(je),z7=n(je,"LI",{});var jKe=s(z7);Qxe=n(jKe,"STRONG",{});var Pha=s(Qxe);ght=r(Pha,"bart"),Pha.forEach(t),hht=r(jKe," \u2014 "),Cse=n(jKe,"A",{href:!0});var Bha=s(Cse);uht=r(Bha,"FlaxBartForConditionalGeneration"),Bha.forEach(t),pht=r(jKe," (BART model)"),jKe.forEach(t),_ht=i(je),Q7=n(je,"LI",{});var DKe=s(Q7);Wxe=n(DKe,"STRONG",{});var Iha=s(Wxe);bht=r(Iha,"bert"),Iha.forEach(t),vht=r(DKe," \u2014 "),wse=n(DKe,"A",{href:!0});var Nha=s(wse);Fht=r(Nha,"FlaxBertForMaskedLM"),Nha.forEach(t),Tht=r(DKe," (BERT model)"),DKe.forEach(t),Mht=i(je),W7=n(je,"LI",{});var GKe=s(W7);Uxe=n(GKe,"STRONG",{});var qha=s(Uxe);Eht=r(qha,"big_bird"),qha.forEach(t),Cht=r(GKe," \u2014 "),Ase=n(GKe,"A",{href:!0});var jha=s(Ase);wht=r(jha,"FlaxBigBirdForMaskedLM"),jha.forEach(t),Aht=r(GKe," (BigBird model)"),GKe.forEach(t),Lht=i(je),U7=n(je,"LI",{});var OKe=s(U7);Hxe=n(OKe,"STRONG",{});var Dha=s(Hxe);yht=r(Dha,"distilbert"),Dha.forEach(t),xht=r(OKe," \u2014 "),Lse=n(OKe,"A",{href:!0});var Gha=s(Lse);$ht=r(Gha,"FlaxDistilBertForMaskedLM"),Gha.forEach(t),kht=r(OKe," (DistilBERT model)"),OKe.forEach(t),Sht=i(je),H7=n(je,"LI",{});var VKe=s(H7);Jxe=n(VKe,"STRONG",{});var Oha=s(Jxe);Rht=r(Oha,"electra"),Oha.forEach(t),Pht=r(VKe," \u2014 "),yse=n(VKe,"A",{href:!0});var Vha=s(yse);Bht=r(Vha,"FlaxElectraForMaskedLM"),Vha.forEach(t),Iht=r(VKe," (ELECTRA model)"),VKe.forEach(t),Nht=i(je),J7=n(je,"LI",{});var XKe=s(J7);Yxe=n(XKe,"STRONG",{});var Xha=s(Yxe);qht=r(Xha,"mbart"),Xha.forEach(t),jht=r(XKe," \u2014 "),xse=n(XKe,"A",{href:!0});var zha=s(xse);Dht=r(zha,"FlaxMBartForConditionalGeneration"),zha.forEach(t),Ght=r(XKe," (mBART model)"),XKe.forEach(t),Oht=i(je),Y7=n(je,"LI",{});var zKe=s(Y7);Kxe=n(zKe,"STRONG",{});var Qha=s(Kxe);Vht=r(Qha,"roberta"),Qha.forEach(t),Xht=r(zKe," \u2014 "),$se=n(zKe,"A",{href:!0});var Wha=s($se);zht=r(Wha,"FlaxRobertaForMaskedLM"),Wha.forEach(t),Qht=r(zKe," (RoBERTa model)"),zKe.forEach(t),Wht=i(je),K7=n(je,"LI",{});var QKe=s(K7);Zxe=n(QKe,"STRONG",{});var Uha=s(Zxe);Uht=r(Uha,"roformer"),Uha.forEach(t),Hht=r(QKe," \u2014 "),kse=n(QKe,"A",{href:!0});var Hha=s(kse);Jht=r(Hha,"FlaxRoFormerForMaskedLM"),Hha.forEach(t),Yht=r(QKe," (RoFormer model)"),QKe.forEach(t),Kht=i(je),Z7=n(je,"LI",{});var WKe=s(Z7);e$e=n(WKe,"STRONG",{});var Jha=s(e$e);Zht=r(Jha,"xlm-roberta"),Jha.forEach(t),eut=r(WKe," \u2014 "),Sse=n(WKe,"A",{href:!0});var Yha=s(Sse);out=r(Yha,"FlaxXLMRobertaForMaskedLM"),Yha.forEach(t),rut=r(WKe," (XLM-RoBERTa model)"),WKe.forEach(t),je.forEach(t),tut=i(Di),T(eL.$$.fragment,Di),Di.forEach(t),ji.forEach(t),Goo=i(c),Hc=n(c,"H2",{class:!0});var tao=s(Hc);oL=n(tao,"A",{id:!0,class:!0,href:!0});var Kha=s(oL);o$e=n(Kha,"SPAN",{});var Zha=s(o$e);T(VR.$$.fragment,Zha),Zha.forEach(t),Kha.forEach(t),aut=i(tao),r$e=n(tao,"SPAN",{});var eua=s(r$e);nut=r(eua,"FlaxAutoModelForSeq2SeqLM"),eua.forEach(t),tao.forEach(t),Ooo=i(c),Ar=n(c,"DIV",{class:!0});var Gi=s(Ar);T(XR.$$.fragment,Gi),sut=i(Gi),Jc=n(Gi,"P",{});var Dde=s(Jc);lut=r(Dde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Rse=n(Dde,"A",{href:!0});var oua=s(Rse);iut=r(oua,"from_pretrained()"),oua.forEach(t),dut=r(Dde," class method or the "),Pse=n(Dde,"A",{href:!0});var rua=s(Pse);mut=r(rua,"from_config()"),rua.forEach(t),cut=r(Dde,` class
method.`),Dde.forEach(t),fut=i(Gi),zR=n(Gi,"P",{});var aao=s(zR);gut=r(aao,"This class cannot be instantiated directly using "),t$e=n(aao,"CODE",{});var tua=s(t$e);hut=r(tua,"__init__()"),tua.forEach(t),uut=r(aao," (throws an error)."),aao.forEach(t),put=i(Gi),ma=n(Gi,"DIV",{class:!0});var B9=s(ma);T(QR.$$.fragment,B9),_ut=i(B9),a$e=n(B9,"P",{});var aua=s(a$e);but=r(aua,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aua.forEach(t),vut=i(B9),Yc=n(B9,"P",{});var Gde=s(Yc);Fut=r(Gde,`Note:
Loading a model from its configuration file does `),n$e=n(Gde,"STRONG",{});var nua=s(n$e);Tut=r(nua,"not"),nua.forEach(t),Mut=r(Gde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bse=n(Gde,"A",{href:!0});var sua=s(Bse);Eut=r(sua,"from_pretrained()"),sua.forEach(t),Cut=r(Gde," to load the model weights."),Gde.forEach(t),wut=i(B9),T(rL.$$.fragment,B9),B9.forEach(t),Aut=i(Gi),rt=n(Gi,"DIV",{class:!0});var Oi=s(rt);T(WR.$$.fragment,Oi),Lut=i(Oi),s$e=n(Oi,"P",{});var lua=s(s$e);yut=r(lua,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lua.forEach(t),xut=i(Oi),zn=n(Oi,"P",{});var I9=s(zn);$ut=r(I9,"The model class to instantiate is selected based on the "),l$e=n(I9,"CODE",{});var iua=s(l$e);kut=r(iua,"model_type"),iua.forEach(t),Sut=r(I9,` property of the config object (either
passed as an argument or loaded from `),i$e=n(I9,"CODE",{});var dua=s(i$e);Rut=r(dua,"pretrained_model_name_or_path"),dua.forEach(t),Put=r(I9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d$e=n(I9,"CODE",{});var mua=s(d$e);But=r(mua,"pretrained_model_name_or_path"),mua.forEach(t),Iut=r(I9,":"),I9.forEach(t),Nut=i(Oi),ke=n(Oi,"UL",{});var De=s(ke);tL=n(De,"LI",{});var UKe=s(tL);m$e=n(UKe,"STRONG",{});var cua=s(m$e);qut=r(cua,"bart"),cua.forEach(t),jut=r(UKe," \u2014 "),Ise=n(UKe,"A",{href:!0});var fua=s(Ise);Dut=r(fua,"FlaxBartForConditionalGeneration"),fua.forEach(t),Gut=r(UKe," (BART model)"),UKe.forEach(t),Out=i(De),aL=n(De,"LI",{});var HKe=s(aL);c$e=n(HKe,"STRONG",{});var gua=s(c$e);Vut=r(gua,"blenderbot"),gua.forEach(t),Xut=r(HKe," \u2014 "),Nse=n(HKe,"A",{href:!0});var hua=s(Nse);zut=r(hua,"FlaxBlenderbotForConditionalGeneration"),hua.forEach(t),Qut=r(HKe," (Blenderbot model)"),HKe.forEach(t),Wut=i(De),nL=n(De,"LI",{});var JKe=s(nL);f$e=n(JKe,"STRONG",{});var uua=s(f$e);Uut=r(uua,"blenderbot-small"),uua.forEach(t),Hut=r(JKe," \u2014 "),qse=n(JKe,"A",{href:!0});var pua=s(qse);Jut=r(pua,"FlaxBlenderbotSmallForConditionalGeneration"),pua.forEach(t),Yut=r(JKe," (BlenderbotSmall model)"),JKe.forEach(t),Kut=i(De),sL=n(De,"LI",{});var YKe=s(sL);g$e=n(YKe,"STRONG",{});var _ua=s(g$e);Zut=r(_ua,"encoder-decoder"),_ua.forEach(t),ept=r(YKe," \u2014 "),jse=n(YKe,"A",{href:!0});var bua=s(jse);opt=r(bua,"FlaxEncoderDecoderModel"),bua.forEach(t),rpt=r(YKe," (Encoder decoder model)"),YKe.forEach(t),tpt=i(De),lL=n(De,"LI",{});var KKe=s(lL);h$e=n(KKe,"STRONG",{});var vua=s(h$e);apt=r(vua,"longt5"),vua.forEach(t),npt=r(KKe," \u2014 "),Dse=n(KKe,"A",{href:!0});var Fua=s(Dse);spt=r(Fua,"FlaxLongT5ForConditionalGeneration"),Fua.forEach(t),lpt=r(KKe," (LongT5 model)"),KKe.forEach(t),ipt=i(De),iL=n(De,"LI",{});var ZKe=s(iL);u$e=n(ZKe,"STRONG",{});var Tua=s(u$e);dpt=r(Tua,"marian"),Tua.forEach(t),mpt=r(ZKe," \u2014 "),Gse=n(ZKe,"A",{href:!0});var Mua=s(Gse);cpt=r(Mua,"FlaxMarianMTModel"),Mua.forEach(t),fpt=r(ZKe," (Marian model)"),ZKe.forEach(t),gpt=i(De),dL=n(De,"LI",{});var eZe=s(dL);p$e=n(eZe,"STRONG",{});var Eua=s(p$e);hpt=r(Eua,"mbart"),Eua.forEach(t),upt=r(eZe," \u2014 "),Ose=n(eZe,"A",{href:!0});var Cua=s(Ose);ppt=r(Cua,"FlaxMBartForConditionalGeneration"),Cua.forEach(t),_pt=r(eZe," (mBART model)"),eZe.forEach(t),bpt=i(De),mL=n(De,"LI",{});var oZe=s(mL);_$e=n(oZe,"STRONG",{});var wua=s(_$e);vpt=r(wua,"mt5"),wua.forEach(t),Fpt=r(oZe," \u2014 "),Vse=n(oZe,"A",{href:!0});var Aua=s(Vse);Tpt=r(Aua,"FlaxMT5ForConditionalGeneration"),Aua.forEach(t),Mpt=r(oZe," (MT5 model)"),oZe.forEach(t),Ept=i(De),cL=n(De,"LI",{});var rZe=s(cL);b$e=n(rZe,"STRONG",{});var Lua=s(b$e);Cpt=r(Lua,"pegasus"),Lua.forEach(t),wpt=r(rZe," \u2014 "),Xse=n(rZe,"A",{href:!0});var yua=s(Xse);Apt=r(yua,"FlaxPegasusForConditionalGeneration"),yua.forEach(t),Lpt=r(rZe," (Pegasus model)"),rZe.forEach(t),ypt=i(De),fL=n(De,"LI",{});var tZe=s(fL);v$e=n(tZe,"STRONG",{});var xua=s(v$e);xpt=r(xua,"t5"),xua.forEach(t),$pt=r(tZe," \u2014 "),zse=n(tZe,"A",{href:!0});var $ua=s(zse);kpt=r($ua,"FlaxT5ForConditionalGeneration"),$ua.forEach(t),Spt=r(tZe," (T5 model)"),tZe.forEach(t),De.forEach(t),Rpt=i(Oi),T(gL.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),Voo=i(c),Kc=n(c,"H2",{class:!0});var nao=s(Kc);hL=n(nao,"A",{id:!0,class:!0,href:!0});var kua=s(hL);F$e=n(kua,"SPAN",{});var Sua=s(F$e);T(UR.$$.fragment,Sua),Sua.forEach(t),kua.forEach(t),Ppt=i(nao),T$e=n(nao,"SPAN",{});var Rua=s(T$e);Bpt=r(Rua,"FlaxAutoModelForSequenceClassification"),Rua.forEach(t),nao.forEach(t),Xoo=i(c),Lr=n(c,"DIV",{class:!0});var Vi=s(Lr);T(HR.$$.fragment,Vi),Ipt=i(Vi),Zc=n(Vi,"P",{});var Ode=s(Zc);Npt=r(Ode,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Qse=n(Ode,"A",{href:!0});var Pua=s(Qse);qpt=r(Pua,"from_pretrained()"),Pua.forEach(t),jpt=r(Ode," class method or the "),Wse=n(Ode,"A",{href:!0});var Bua=s(Wse);Dpt=r(Bua,"from_config()"),Bua.forEach(t),Gpt=r(Ode,` class
method.`),Ode.forEach(t),Opt=i(Vi),JR=n(Vi,"P",{});var sao=s(JR);Vpt=r(sao,"This class cannot be instantiated directly using "),M$e=n(sao,"CODE",{});var Iua=s(M$e);Xpt=r(Iua,"__init__()"),Iua.forEach(t),zpt=r(sao," (throws an error)."),sao.forEach(t),Qpt=i(Vi),ca=n(Vi,"DIV",{class:!0});var N9=s(ca);T(YR.$$.fragment,N9),Wpt=i(N9),E$e=n(N9,"P",{});var Nua=s(E$e);Upt=r(Nua,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Nua.forEach(t),Hpt=i(N9),ef=n(N9,"P",{});var Vde=s(ef);Jpt=r(Vde,`Note:
Loading a model from its configuration file does `),C$e=n(Vde,"STRONG",{});var qua=s(C$e);Ypt=r(qua,"not"),qua.forEach(t),Kpt=r(Vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=n(Vde,"A",{href:!0});var jua=s(Use);Zpt=r(jua,"from_pretrained()"),jua.forEach(t),e_t=r(Vde," to load the model weights."),Vde.forEach(t),o_t=i(N9),T(uL.$$.fragment,N9),N9.forEach(t),r_t=i(Vi),tt=n(Vi,"DIV",{class:!0});var Xi=s(tt);T(KR.$$.fragment,Xi),t_t=i(Xi),w$e=n(Xi,"P",{});var Dua=s(w$e);a_t=r(Dua,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dua.forEach(t),n_t=i(Xi),Qn=n(Xi,"P",{});var q9=s(Qn);s_t=r(q9,"The model class to instantiate is selected based on the "),A$e=n(q9,"CODE",{});var Gua=s(A$e);l_t=r(Gua,"model_type"),Gua.forEach(t),i_t=r(q9,` property of the config object (either
passed as an argument or loaded from `),L$e=n(q9,"CODE",{});var Oua=s(L$e);d_t=r(Oua,"pretrained_model_name_or_path"),Oua.forEach(t),m_t=r(q9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y$e=n(q9,"CODE",{});var Vua=s(y$e);c_t=r(Vua,"pretrained_model_name_or_path"),Vua.forEach(t),f_t=r(q9,":"),q9.forEach(t),g_t=i(Xi),Se=n(Xi,"UL",{});var Ge=s(Se);pL=n(Ge,"LI",{});var aZe=s(pL);x$e=n(aZe,"STRONG",{});var Xua=s(x$e);h_t=r(Xua,"albert"),Xua.forEach(t),u_t=r(aZe," \u2014 "),Hse=n(aZe,"A",{href:!0});var zua=s(Hse);p_t=r(zua,"FlaxAlbertForSequenceClassification"),zua.forEach(t),__t=r(aZe," (ALBERT model)"),aZe.forEach(t),b_t=i(Ge),_L=n(Ge,"LI",{});var nZe=s(_L);$$e=n(nZe,"STRONG",{});var Qua=s($$e);v_t=r(Qua,"bart"),Qua.forEach(t),F_t=r(nZe," \u2014 "),Jse=n(nZe,"A",{href:!0});var Wua=s(Jse);T_t=r(Wua,"FlaxBartForSequenceClassification"),Wua.forEach(t),M_t=r(nZe," (BART model)"),nZe.forEach(t),E_t=i(Ge),bL=n(Ge,"LI",{});var sZe=s(bL);k$e=n(sZe,"STRONG",{});var Uua=s(k$e);C_t=r(Uua,"bert"),Uua.forEach(t),w_t=r(sZe," \u2014 "),Yse=n(sZe,"A",{href:!0});var Hua=s(Yse);A_t=r(Hua,"FlaxBertForSequenceClassification"),Hua.forEach(t),L_t=r(sZe," (BERT model)"),sZe.forEach(t),y_t=i(Ge),vL=n(Ge,"LI",{});var lZe=s(vL);S$e=n(lZe,"STRONG",{});var Jua=s(S$e);x_t=r(Jua,"big_bird"),Jua.forEach(t),$_t=r(lZe," \u2014 "),Kse=n(lZe,"A",{href:!0});var Yua=s(Kse);k_t=r(Yua,"FlaxBigBirdForSequenceClassification"),Yua.forEach(t),S_t=r(lZe," (BigBird model)"),lZe.forEach(t),R_t=i(Ge),FL=n(Ge,"LI",{});var iZe=s(FL);R$e=n(iZe,"STRONG",{});var Kua=s(R$e);P_t=r(Kua,"distilbert"),Kua.forEach(t),B_t=r(iZe," \u2014 "),Zse=n(iZe,"A",{href:!0});var Zua=s(Zse);I_t=r(Zua,"FlaxDistilBertForSequenceClassification"),Zua.forEach(t),N_t=r(iZe," (DistilBERT model)"),iZe.forEach(t),q_t=i(Ge),TL=n(Ge,"LI",{});var dZe=s(TL);P$e=n(dZe,"STRONG",{});var epa=s(P$e);j_t=r(epa,"electra"),epa.forEach(t),D_t=r(dZe," \u2014 "),ele=n(dZe,"A",{href:!0});var opa=s(ele);G_t=r(opa,"FlaxElectraForSequenceClassification"),opa.forEach(t),O_t=r(dZe," (ELECTRA model)"),dZe.forEach(t),V_t=i(Ge),ML=n(Ge,"LI",{});var mZe=s(ML);B$e=n(mZe,"STRONG",{});var rpa=s(B$e);X_t=r(rpa,"mbart"),rpa.forEach(t),z_t=r(mZe," \u2014 "),ole=n(mZe,"A",{href:!0});var tpa=s(ole);Q_t=r(tpa,"FlaxMBartForSequenceClassification"),tpa.forEach(t),W_t=r(mZe," (mBART model)"),mZe.forEach(t),U_t=i(Ge),EL=n(Ge,"LI",{});var cZe=s(EL);I$e=n(cZe,"STRONG",{});var apa=s(I$e);H_t=r(apa,"roberta"),apa.forEach(t),J_t=r(cZe," \u2014 "),rle=n(cZe,"A",{href:!0});var npa=s(rle);Y_t=r(npa,"FlaxRobertaForSequenceClassification"),npa.forEach(t),K_t=r(cZe," (RoBERTa model)"),cZe.forEach(t),Z_t=i(Ge),CL=n(Ge,"LI",{});var fZe=s(CL);N$e=n(fZe,"STRONG",{});var spa=s(N$e);e1t=r(spa,"roformer"),spa.forEach(t),o1t=r(fZe," \u2014 "),tle=n(fZe,"A",{href:!0});var lpa=s(tle);r1t=r(lpa,"FlaxRoFormerForSequenceClassification"),lpa.forEach(t),t1t=r(fZe," (RoFormer model)"),fZe.forEach(t),a1t=i(Ge),wL=n(Ge,"LI",{});var gZe=s(wL);q$e=n(gZe,"STRONG",{});var ipa=s(q$e);n1t=r(ipa,"xlm-roberta"),ipa.forEach(t),s1t=r(gZe," \u2014 "),ale=n(gZe,"A",{href:!0});var dpa=s(ale);l1t=r(dpa,"FlaxXLMRobertaForSequenceClassification"),dpa.forEach(t),i1t=r(gZe," (XLM-RoBERTa model)"),gZe.forEach(t),Ge.forEach(t),d1t=i(Xi),T(AL.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),zoo=i(c),of=n(c,"H2",{class:!0});var lao=s(of);LL=n(lao,"A",{id:!0,class:!0,href:!0});var mpa=s(LL);j$e=n(mpa,"SPAN",{});var cpa=s(j$e);T(ZR.$$.fragment,cpa),cpa.forEach(t),mpa.forEach(t),m1t=i(lao),D$e=n(lao,"SPAN",{});var fpa=s(D$e);c1t=r(fpa,"FlaxAutoModelForQuestionAnswering"),fpa.forEach(t),lao.forEach(t),Qoo=i(c),yr=n(c,"DIV",{class:!0});var zi=s(yr);T(eP.$$.fragment,zi),f1t=i(zi),rf=n(zi,"P",{});var Xde=s(rf);g1t=r(Xde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nle=n(Xde,"A",{href:!0});var gpa=s(nle);h1t=r(gpa,"from_pretrained()"),gpa.forEach(t),u1t=r(Xde," class method or the "),sle=n(Xde,"A",{href:!0});var hpa=s(sle);p1t=r(hpa,"from_config()"),hpa.forEach(t),_1t=r(Xde,` class
method.`),Xde.forEach(t),b1t=i(zi),oP=n(zi,"P",{});var iao=s(oP);v1t=r(iao,"This class cannot be instantiated directly using "),G$e=n(iao,"CODE",{});var upa=s(G$e);F1t=r(upa,"__init__()"),upa.forEach(t),T1t=r(iao," (throws an error)."),iao.forEach(t),M1t=i(zi),fa=n(zi,"DIV",{class:!0});var j9=s(fa);T(rP.$$.fragment,j9),E1t=i(j9),O$e=n(j9,"P",{});var ppa=s(O$e);C1t=r(ppa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ppa.forEach(t),w1t=i(j9),tf=n(j9,"P",{});var zde=s(tf);A1t=r(zde,`Note:
Loading a model from its configuration file does `),V$e=n(zde,"STRONG",{});var _pa=s(V$e);L1t=r(_pa,"not"),_pa.forEach(t),y1t=r(zde,` load the model weights. It only affects the
model\u2019s configuration. Use `),lle=n(zde,"A",{href:!0});var bpa=s(lle);x1t=r(bpa,"from_pretrained()"),bpa.forEach(t),$1t=r(zde," to load the model weights."),zde.forEach(t),k1t=i(j9),T(yL.$$.fragment,j9),j9.forEach(t),S1t=i(zi),at=n(zi,"DIV",{class:!0});var Qi=s(at);T(tP.$$.fragment,Qi),R1t=i(Qi),X$e=n(Qi,"P",{});var vpa=s(X$e);P1t=r(vpa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vpa.forEach(t),B1t=i(Qi),Wn=n(Qi,"P",{});var D9=s(Wn);I1t=r(D9,"The model class to instantiate is selected based on the "),z$e=n(D9,"CODE",{});var Fpa=s(z$e);N1t=r(Fpa,"model_type"),Fpa.forEach(t),q1t=r(D9,` property of the config object (either
passed as an argument or loaded from `),Q$e=n(D9,"CODE",{});var Tpa=s(Q$e);j1t=r(Tpa,"pretrained_model_name_or_path"),Tpa.forEach(t),D1t=r(D9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W$e=n(D9,"CODE",{});var Mpa=s(W$e);G1t=r(Mpa,"pretrained_model_name_or_path"),Mpa.forEach(t),O1t=r(D9,":"),D9.forEach(t),V1t=i(Qi),Re=n(Qi,"UL",{});var Oe=s(Re);xL=n(Oe,"LI",{});var hZe=s(xL);U$e=n(hZe,"STRONG",{});var Epa=s(U$e);X1t=r(Epa,"albert"),Epa.forEach(t),z1t=r(hZe," \u2014 "),ile=n(hZe,"A",{href:!0});var Cpa=s(ile);Q1t=r(Cpa,"FlaxAlbertForQuestionAnswering"),Cpa.forEach(t),W1t=r(hZe," (ALBERT model)"),hZe.forEach(t),U1t=i(Oe),$L=n(Oe,"LI",{});var uZe=s($L);H$e=n(uZe,"STRONG",{});var wpa=s(H$e);H1t=r(wpa,"bart"),wpa.forEach(t),J1t=r(uZe," \u2014 "),dle=n(uZe,"A",{href:!0});var Apa=s(dle);Y1t=r(Apa,"FlaxBartForQuestionAnswering"),Apa.forEach(t),K1t=r(uZe," (BART model)"),uZe.forEach(t),Z1t=i(Oe),kL=n(Oe,"LI",{});var pZe=s(kL);J$e=n(pZe,"STRONG",{});var Lpa=s(J$e);e2t=r(Lpa,"bert"),Lpa.forEach(t),o2t=r(pZe," \u2014 "),mle=n(pZe,"A",{href:!0});var ypa=s(mle);r2t=r(ypa,"FlaxBertForQuestionAnswering"),ypa.forEach(t),t2t=r(pZe," (BERT model)"),pZe.forEach(t),a2t=i(Oe),SL=n(Oe,"LI",{});var _Ze=s(SL);Y$e=n(_Ze,"STRONG",{});var xpa=s(Y$e);n2t=r(xpa,"big_bird"),xpa.forEach(t),s2t=r(_Ze," \u2014 "),cle=n(_Ze,"A",{href:!0});var $pa=s(cle);l2t=r($pa,"FlaxBigBirdForQuestionAnswering"),$pa.forEach(t),i2t=r(_Ze," (BigBird model)"),_Ze.forEach(t),d2t=i(Oe),RL=n(Oe,"LI",{});var bZe=s(RL);K$e=n(bZe,"STRONG",{});var kpa=s(K$e);m2t=r(kpa,"distilbert"),kpa.forEach(t),c2t=r(bZe," \u2014 "),fle=n(bZe,"A",{href:!0});var Spa=s(fle);f2t=r(Spa,"FlaxDistilBertForQuestionAnswering"),Spa.forEach(t),g2t=r(bZe," (DistilBERT model)"),bZe.forEach(t),h2t=i(Oe),PL=n(Oe,"LI",{});var vZe=s(PL);Z$e=n(vZe,"STRONG",{});var Rpa=s(Z$e);u2t=r(Rpa,"electra"),Rpa.forEach(t),p2t=r(vZe," \u2014 "),gle=n(vZe,"A",{href:!0});var Ppa=s(gle);_2t=r(Ppa,"FlaxElectraForQuestionAnswering"),Ppa.forEach(t),b2t=r(vZe," (ELECTRA model)"),vZe.forEach(t),v2t=i(Oe),BL=n(Oe,"LI",{});var FZe=s(BL);eke=n(FZe,"STRONG",{});var Bpa=s(eke);F2t=r(Bpa,"mbart"),Bpa.forEach(t),T2t=r(FZe," \u2014 "),hle=n(FZe,"A",{href:!0});var Ipa=s(hle);M2t=r(Ipa,"FlaxMBartForQuestionAnswering"),Ipa.forEach(t),E2t=r(FZe," (mBART model)"),FZe.forEach(t),C2t=i(Oe),IL=n(Oe,"LI",{});var TZe=s(IL);oke=n(TZe,"STRONG",{});var Npa=s(oke);w2t=r(Npa,"roberta"),Npa.forEach(t),A2t=r(TZe," \u2014 "),ule=n(TZe,"A",{href:!0});var qpa=s(ule);L2t=r(qpa,"FlaxRobertaForQuestionAnswering"),qpa.forEach(t),y2t=r(TZe," (RoBERTa model)"),TZe.forEach(t),x2t=i(Oe),NL=n(Oe,"LI",{});var MZe=s(NL);rke=n(MZe,"STRONG",{});var jpa=s(rke);$2t=r(jpa,"roformer"),jpa.forEach(t),k2t=r(MZe," \u2014 "),ple=n(MZe,"A",{href:!0});var Dpa=s(ple);S2t=r(Dpa,"FlaxRoFormerForQuestionAnswering"),Dpa.forEach(t),R2t=r(MZe," (RoFormer model)"),MZe.forEach(t),P2t=i(Oe),qL=n(Oe,"LI",{});var EZe=s(qL);tke=n(EZe,"STRONG",{});var Gpa=s(tke);B2t=r(Gpa,"xlm-roberta"),Gpa.forEach(t),I2t=r(EZe," \u2014 "),_le=n(EZe,"A",{href:!0});var Opa=s(_le);N2t=r(Opa,"FlaxXLMRobertaForQuestionAnswering"),Opa.forEach(t),q2t=r(EZe," (XLM-RoBERTa model)"),EZe.forEach(t),Oe.forEach(t),j2t=i(Qi),T(jL.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),Woo=i(c),af=n(c,"H2",{class:!0});var dao=s(af);DL=n(dao,"A",{id:!0,class:!0,href:!0});var Vpa=s(DL);ake=n(Vpa,"SPAN",{});var Xpa=s(ake);T(aP.$$.fragment,Xpa),Xpa.forEach(t),Vpa.forEach(t),D2t=i(dao),nke=n(dao,"SPAN",{});var zpa=s(nke);G2t=r(zpa,"FlaxAutoModelForTokenClassification"),zpa.forEach(t),dao.forEach(t),Uoo=i(c),xr=n(c,"DIV",{class:!0});var Wi=s(xr);T(nP.$$.fragment,Wi),O2t=i(Wi),nf=n(Wi,"P",{});var Qde=s(nf);V2t=r(Qde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ble=n(Qde,"A",{href:!0});var Qpa=s(ble);X2t=r(Qpa,"from_pretrained()"),Qpa.forEach(t),z2t=r(Qde," class method or the "),vle=n(Qde,"A",{href:!0});var Wpa=s(vle);Q2t=r(Wpa,"from_config()"),Wpa.forEach(t),W2t=r(Qde,` class
method.`),Qde.forEach(t),U2t=i(Wi),sP=n(Wi,"P",{});var mao=s(sP);H2t=r(mao,"This class cannot be instantiated directly using "),ske=n(mao,"CODE",{});var Upa=s(ske);J2t=r(Upa,"__init__()"),Upa.forEach(t),Y2t=r(mao," (throws an error)."),mao.forEach(t),K2t=i(Wi),ga=n(Wi,"DIV",{class:!0});var G9=s(ga);T(lP.$$.fragment,G9),Z2t=i(G9),lke=n(G9,"P",{});var Hpa=s(lke);ebt=r(Hpa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hpa.forEach(t),obt=i(G9),sf=n(G9,"P",{});var Wde=s(sf);rbt=r(Wde,`Note:
Loading a model from its configuration file does `),ike=n(Wde,"STRONG",{});var Jpa=s(ike);tbt=r(Jpa,"not"),Jpa.forEach(t),abt=r(Wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fle=n(Wde,"A",{href:!0});var Ypa=s(Fle);nbt=r(Ypa,"from_pretrained()"),Ypa.forEach(t),sbt=r(Wde," to load the model weights."),Wde.forEach(t),lbt=i(G9),T(GL.$$.fragment,G9),G9.forEach(t),ibt=i(Wi),nt=n(Wi,"DIV",{class:!0});var Ui=s(nt);T(iP.$$.fragment,Ui),dbt=i(Ui),dke=n(Ui,"P",{});var Kpa=s(dke);mbt=r(Kpa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Kpa.forEach(t),cbt=i(Ui),Un=n(Ui,"P",{});var O9=s(Un);fbt=r(O9,"The model class to instantiate is selected based on the "),mke=n(O9,"CODE",{});var Zpa=s(mke);gbt=r(Zpa,"model_type"),Zpa.forEach(t),hbt=r(O9,` property of the config object (either
passed as an argument or loaded from `),cke=n(O9,"CODE",{});var e_a=s(cke);ubt=r(e_a,"pretrained_model_name_or_path"),e_a.forEach(t),pbt=r(O9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fke=n(O9,"CODE",{});var o_a=s(fke);_bt=r(o_a,"pretrained_model_name_or_path"),o_a.forEach(t),bbt=r(O9,":"),O9.forEach(t),vbt=i(Ui),Xe=n(Ui,"UL",{});var Ao=s(Xe);OL=n(Ao,"LI",{});var CZe=s(OL);gke=n(CZe,"STRONG",{});var r_a=s(gke);Fbt=r(r_a,"albert"),r_a.forEach(t),Tbt=r(CZe," \u2014 "),Tle=n(CZe,"A",{href:!0});var t_a=s(Tle);Mbt=r(t_a,"FlaxAlbertForTokenClassification"),t_a.forEach(t),Ebt=r(CZe," (ALBERT model)"),CZe.forEach(t),Cbt=i(Ao),VL=n(Ao,"LI",{});var wZe=s(VL);hke=n(wZe,"STRONG",{});var a_a=s(hke);wbt=r(a_a,"bert"),a_a.forEach(t),Abt=r(wZe," \u2014 "),Mle=n(wZe,"A",{href:!0});var n_a=s(Mle);Lbt=r(n_a,"FlaxBertForTokenClassification"),n_a.forEach(t),ybt=r(wZe," (BERT model)"),wZe.forEach(t),xbt=i(Ao),XL=n(Ao,"LI",{});var AZe=s(XL);uke=n(AZe,"STRONG",{});var s_a=s(uke);$bt=r(s_a,"big_bird"),s_a.forEach(t),kbt=r(AZe," \u2014 "),Ele=n(AZe,"A",{href:!0});var l_a=s(Ele);Sbt=r(l_a,"FlaxBigBirdForTokenClassification"),l_a.forEach(t),Rbt=r(AZe," (BigBird model)"),AZe.forEach(t),Pbt=i(Ao),zL=n(Ao,"LI",{});var LZe=s(zL);pke=n(LZe,"STRONG",{});var i_a=s(pke);Bbt=r(i_a,"distilbert"),i_a.forEach(t),Ibt=r(LZe," \u2014 "),Cle=n(LZe,"A",{href:!0});var d_a=s(Cle);Nbt=r(d_a,"FlaxDistilBertForTokenClassification"),d_a.forEach(t),qbt=r(LZe," (DistilBERT model)"),LZe.forEach(t),jbt=i(Ao),QL=n(Ao,"LI",{});var yZe=s(QL);_ke=n(yZe,"STRONG",{});var m_a=s(_ke);Dbt=r(m_a,"electra"),m_a.forEach(t),Gbt=r(yZe," \u2014 "),wle=n(yZe,"A",{href:!0});var c_a=s(wle);Obt=r(c_a,"FlaxElectraForTokenClassification"),c_a.forEach(t),Vbt=r(yZe," (ELECTRA model)"),yZe.forEach(t),Xbt=i(Ao),WL=n(Ao,"LI",{});var xZe=s(WL);bke=n(xZe,"STRONG",{});var f_a=s(bke);zbt=r(f_a,"roberta"),f_a.forEach(t),Qbt=r(xZe," \u2014 "),Ale=n(xZe,"A",{href:!0});var g_a=s(Ale);Wbt=r(g_a,"FlaxRobertaForTokenClassification"),g_a.forEach(t),Ubt=r(xZe," (RoBERTa model)"),xZe.forEach(t),Hbt=i(Ao),UL=n(Ao,"LI",{});var $Ze=s(UL);vke=n($Ze,"STRONG",{});var h_a=s(vke);Jbt=r(h_a,"roformer"),h_a.forEach(t),Ybt=r($Ze," \u2014 "),Lle=n($Ze,"A",{href:!0});var u_a=s(Lle);Kbt=r(u_a,"FlaxRoFormerForTokenClassification"),u_a.forEach(t),Zbt=r($Ze," (RoFormer model)"),$Ze.forEach(t),evt=i(Ao),HL=n(Ao,"LI",{});var kZe=s(HL);Fke=n(kZe,"STRONG",{});var p_a=s(Fke);ovt=r(p_a,"xlm-roberta"),p_a.forEach(t),rvt=r(kZe," \u2014 "),yle=n(kZe,"A",{href:!0});var __a=s(yle);tvt=r(__a,"FlaxXLMRobertaForTokenClassification"),__a.forEach(t),avt=r(kZe," (XLM-RoBERTa model)"),kZe.forEach(t),Ao.forEach(t),nvt=i(Ui),T(JL.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),Hoo=i(c),lf=n(c,"H2",{class:!0});var cao=s(lf);YL=n(cao,"A",{id:!0,class:!0,href:!0});var b_a=s(YL);Tke=n(b_a,"SPAN",{});var v_a=s(Tke);T(dP.$$.fragment,v_a),v_a.forEach(t),b_a.forEach(t),svt=i(cao),Mke=n(cao,"SPAN",{});var F_a=s(Mke);lvt=r(F_a,"FlaxAutoModelForMultipleChoice"),F_a.forEach(t),cao.forEach(t),Joo=i(c),$r=n(c,"DIV",{class:!0});var Hi=s($r);T(mP.$$.fragment,Hi),ivt=i(Hi),df=n(Hi,"P",{});var Ude=s(df);dvt=r(Ude,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xle=n(Ude,"A",{href:!0});var T_a=s(xle);mvt=r(T_a,"from_pretrained()"),T_a.forEach(t),cvt=r(Ude," class method or the "),$le=n(Ude,"A",{href:!0});var M_a=s($le);fvt=r(M_a,"from_config()"),M_a.forEach(t),gvt=r(Ude,` class
method.`),Ude.forEach(t),hvt=i(Hi),cP=n(Hi,"P",{});var fao=s(cP);uvt=r(fao,"This class cannot be instantiated directly using "),Eke=n(fao,"CODE",{});var E_a=s(Eke);pvt=r(E_a,"__init__()"),E_a.forEach(t),_vt=r(fao," (throws an error)."),fao.forEach(t),bvt=i(Hi),ha=n(Hi,"DIV",{class:!0});var V9=s(ha);T(fP.$$.fragment,V9),vvt=i(V9),Cke=n(V9,"P",{});var C_a=s(Cke);Fvt=r(C_a,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),C_a.forEach(t),Tvt=i(V9),mf=n(V9,"P",{});var Hde=s(mf);Mvt=r(Hde,`Note:
Loading a model from its configuration file does `),wke=n(Hde,"STRONG",{});var w_a=s(wke);Evt=r(w_a,"not"),w_a.forEach(t),Cvt=r(Hde,` load the model weights. It only affects the
model\u2019s configuration. Use `),kle=n(Hde,"A",{href:!0});var A_a=s(kle);wvt=r(A_a,"from_pretrained()"),A_a.forEach(t),Avt=r(Hde," to load the model weights."),Hde.forEach(t),Lvt=i(V9),T(KL.$$.fragment,V9),V9.forEach(t),yvt=i(Hi),st=n(Hi,"DIV",{class:!0});var Ji=s(st);T(gP.$$.fragment,Ji),xvt=i(Ji),Ake=n(Ji,"P",{});var L_a=s(Ake);$vt=r(L_a,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L_a.forEach(t),kvt=i(Ji),Hn=n(Ji,"P",{});var X9=s(Hn);Svt=r(X9,"The model class to instantiate is selected based on the "),Lke=n(X9,"CODE",{});var y_a=s(Lke);Rvt=r(y_a,"model_type"),y_a.forEach(t),Pvt=r(X9,` property of the config object (either
passed as an argument or loaded from `),yke=n(X9,"CODE",{});var x_a=s(yke);Bvt=r(x_a,"pretrained_model_name_or_path"),x_a.forEach(t),Ivt=r(X9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xke=n(X9,"CODE",{});var $_a=s(xke);Nvt=r($_a,"pretrained_model_name_or_path"),$_a.forEach(t),qvt=r(X9,":"),X9.forEach(t),jvt=i(Ji),ze=n(Ji,"UL",{});var Lo=s(ze);ZL=n(Lo,"LI",{});var SZe=s(ZL);$ke=n(SZe,"STRONG",{});var k_a=s($ke);Dvt=r(k_a,"albert"),k_a.forEach(t),Gvt=r(SZe," \u2014 "),Sle=n(SZe,"A",{href:!0});var S_a=s(Sle);Ovt=r(S_a,"FlaxAlbertForMultipleChoice"),S_a.forEach(t),Vvt=r(SZe," (ALBERT model)"),SZe.forEach(t),Xvt=i(Lo),ey=n(Lo,"LI",{});var RZe=s(ey);kke=n(RZe,"STRONG",{});var R_a=s(kke);zvt=r(R_a,"bert"),R_a.forEach(t),Qvt=r(RZe," \u2014 "),Rle=n(RZe,"A",{href:!0});var P_a=s(Rle);Wvt=r(P_a,"FlaxBertForMultipleChoice"),P_a.forEach(t),Uvt=r(RZe," (BERT model)"),RZe.forEach(t),Hvt=i(Lo),oy=n(Lo,"LI",{});var PZe=s(oy);Ske=n(PZe,"STRONG",{});var B_a=s(Ske);Jvt=r(B_a,"big_bird"),B_a.forEach(t),Yvt=r(PZe," \u2014 "),Ple=n(PZe,"A",{href:!0});var I_a=s(Ple);Kvt=r(I_a,"FlaxBigBirdForMultipleChoice"),I_a.forEach(t),Zvt=r(PZe," (BigBird model)"),PZe.forEach(t),eFt=i(Lo),ry=n(Lo,"LI",{});var BZe=s(ry);Rke=n(BZe,"STRONG",{});var N_a=s(Rke);oFt=r(N_a,"distilbert"),N_a.forEach(t),rFt=r(BZe," \u2014 "),Ble=n(BZe,"A",{href:!0});var q_a=s(Ble);tFt=r(q_a,"FlaxDistilBertForMultipleChoice"),q_a.forEach(t),aFt=r(BZe," (DistilBERT model)"),BZe.forEach(t),nFt=i(Lo),ty=n(Lo,"LI",{});var IZe=s(ty);Pke=n(IZe,"STRONG",{});var j_a=s(Pke);sFt=r(j_a,"electra"),j_a.forEach(t),lFt=r(IZe," \u2014 "),Ile=n(IZe,"A",{href:!0});var D_a=s(Ile);iFt=r(D_a,"FlaxElectraForMultipleChoice"),D_a.forEach(t),dFt=r(IZe," (ELECTRA model)"),IZe.forEach(t),mFt=i(Lo),ay=n(Lo,"LI",{});var NZe=s(ay);Bke=n(NZe,"STRONG",{});var G_a=s(Bke);cFt=r(G_a,"roberta"),G_a.forEach(t),fFt=r(NZe," \u2014 "),Nle=n(NZe,"A",{href:!0});var O_a=s(Nle);gFt=r(O_a,"FlaxRobertaForMultipleChoice"),O_a.forEach(t),hFt=r(NZe," (RoBERTa model)"),NZe.forEach(t),uFt=i(Lo),ny=n(Lo,"LI",{});var qZe=s(ny);Ike=n(qZe,"STRONG",{});var V_a=s(Ike);pFt=r(V_a,"roformer"),V_a.forEach(t),_Ft=r(qZe," \u2014 "),qle=n(qZe,"A",{href:!0});var X_a=s(qle);bFt=r(X_a,"FlaxRoFormerForMultipleChoice"),X_a.forEach(t),vFt=r(qZe," (RoFormer model)"),qZe.forEach(t),FFt=i(Lo),sy=n(Lo,"LI",{});var jZe=s(sy);Nke=n(jZe,"STRONG",{});var z_a=s(Nke);TFt=r(z_a,"xlm-roberta"),z_a.forEach(t),MFt=r(jZe," \u2014 "),jle=n(jZe,"A",{href:!0});var Q_a=s(jle);EFt=r(Q_a,"FlaxXLMRobertaForMultipleChoice"),Q_a.forEach(t),CFt=r(jZe," (XLM-RoBERTa model)"),jZe.forEach(t),Lo.forEach(t),wFt=i(Ji),T(ly.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),Yoo=i(c),cf=n(c,"H2",{class:!0});var gao=s(cf);iy=n(gao,"A",{id:!0,class:!0,href:!0});var W_a=s(iy);qke=n(W_a,"SPAN",{});var U_a=s(qke);T(hP.$$.fragment,U_a),U_a.forEach(t),W_a.forEach(t),AFt=i(gao),jke=n(gao,"SPAN",{});var H_a=s(jke);LFt=r(H_a,"FlaxAutoModelForNextSentencePrediction"),H_a.forEach(t),gao.forEach(t),Koo=i(c),kr=n(c,"DIV",{class:!0});var Yi=s(kr);T(uP.$$.fragment,Yi),yFt=i(Yi),ff=n(Yi,"P",{});var Jde=s(ff);xFt=r(Jde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Dle=n(Jde,"A",{href:!0});var J_a=s(Dle);$Ft=r(J_a,"from_pretrained()"),J_a.forEach(t),kFt=r(Jde," class method or the "),Gle=n(Jde,"A",{href:!0});var Y_a=s(Gle);SFt=r(Y_a,"from_config()"),Y_a.forEach(t),RFt=r(Jde,` class
method.`),Jde.forEach(t),PFt=i(Yi),pP=n(Yi,"P",{});var hao=s(pP);BFt=r(hao,"This class cannot be instantiated directly using "),Dke=n(hao,"CODE",{});var K_a=s(Dke);IFt=r(K_a,"__init__()"),K_a.forEach(t),NFt=r(hao," (throws an error)."),hao.forEach(t),qFt=i(Yi),ua=n(Yi,"DIV",{class:!0});var z9=s(ua);T(_P.$$.fragment,z9),jFt=i(z9),Gke=n(z9,"P",{});var Z_a=s(Gke);DFt=r(Z_a,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Z_a.forEach(t),GFt=i(z9),gf=n(z9,"P",{});var Yde=s(gf);OFt=r(Yde,`Note:
Loading a model from its configuration file does `),Oke=n(Yde,"STRONG",{});var e1a=s(Oke);VFt=r(e1a,"not"),e1a.forEach(t),XFt=r(Yde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ole=n(Yde,"A",{href:!0});var o1a=s(Ole);zFt=r(o1a,"from_pretrained()"),o1a.forEach(t),QFt=r(Yde," to load the model weights."),Yde.forEach(t),WFt=i(z9),T(dy.$$.fragment,z9),z9.forEach(t),UFt=i(Yi),lt=n(Yi,"DIV",{class:!0});var Ki=s(lt);T(bP.$$.fragment,Ki),HFt=i(Ki),Vke=n(Ki,"P",{});var r1a=s(Vke);JFt=r(r1a,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),r1a.forEach(t),YFt=i(Ki),Jn=n(Ki,"P",{});var Q9=s(Jn);KFt=r(Q9,"The model class to instantiate is selected based on the "),Xke=n(Q9,"CODE",{});var t1a=s(Xke);ZFt=r(t1a,"model_type"),t1a.forEach(t),eTt=r(Q9,` property of the config object (either
passed as an argument or loaded from `),zke=n(Q9,"CODE",{});var a1a=s(zke);oTt=r(a1a,"pretrained_model_name_or_path"),a1a.forEach(t),rTt=r(Q9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qke=n(Q9,"CODE",{});var n1a=s(Qke);tTt=r(n1a,"pretrained_model_name_or_path"),n1a.forEach(t),aTt=r(Q9,":"),Q9.forEach(t),nTt=i(Ki),Wke=n(Ki,"UL",{});var s1a=s(Wke);my=n(s1a,"LI",{});var DZe=s(my);Uke=n(DZe,"STRONG",{});var l1a=s(Uke);sTt=r(l1a,"bert"),l1a.forEach(t),lTt=r(DZe," \u2014 "),Vle=n(DZe,"A",{href:!0});var i1a=s(Vle);iTt=r(i1a,"FlaxBertForNextSentencePrediction"),i1a.forEach(t),dTt=r(DZe," (BERT model)"),DZe.forEach(t),s1a.forEach(t),mTt=i(Ki),T(cy.$$.fragment,Ki),Ki.forEach(t),Yi.forEach(t),Zoo=i(c),hf=n(c,"H2",{class:!0});var uao=s(hf);fy=n(uao,"A",{id:!0,class:!0,href:!0});var d1a=s(fy);Hke=n(d1a,"SPAN",{});var m1a=s(Hke);T(vP.$$.fragment,m1a),m1a.forEach(t),d1a.forEach(t),cTt=i(uao),Jke=n(uao,"SPAN",{});var c1a=s(Jke);fTt=r(c1a,"FlaxAutoModelForImageClassification"),c1a.forEach(t),uao.forEach(t),ero=i(c),Sr=n(c,"DIV",{class:!0});var Zi=s(Sr);T(FP.$$.fragment,Zi),gTt=i(Zi),uf=n(Zi,"P",{});var Kde=s(uf);hTt=r(Kde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Xle=n(Kde,"A",{href:!0});var f1a=s(Xle);uTt=r(f1a,"from_pretrained()"),f1a.forEach(t),pTt=r(Kde," class method or the "),zle=n(Kde,"A",{href:!0});var g1a=s(zle);_Tt=r(g1a,"from_config()"),g1a.forEach(t),bTt=r(Kde,` class
method.`),Kde.forEach(t),vTt=i(Zi),TP=n(Zi,"P",{});var pao=s(TP);FTt=r(pao,"This class cannot be instantiated directly using "),Yke=n(pao,"CODE",{});var h1a=s(Yke);TTt=r(h1a,"__init__()"),h1a.forEach(t),MTt=r(pao," (throws an error)."),pao.forEach(t),ETt=i(Zi),pa=n(Zi,"DIV",{class:!0});var W9=s(pa);T(MP.$$.fragment,W9),CTt=i(W9),Kke=n(W9,"P",{});var u1a=s(Kke);wTt=r(u1a,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),u1a.forEach(t),ATt=i(W9),pf=n(W9,"P",{});var Zde=s(pf);LTt=r(Zde,`Note:
Loading a model from its configuration file does `),Zke=n(Zde,"STRONG",{});var p1a=s(Zke);yTt=r(p1a,"not"),p1a.forEach(t),xTt=r(Zde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qle=n(Zde,"A",{href:!0});var _1a=s(Qle);$Tt=r(_1a,"from_pretrained()"),_1a.forEach(t),kTt=r(Zde," to load the model weights."),Zde.forEach(t),STt=i(W9),T(gy.$$.fragment,W9),W9.forEach(t),RTt=i(Zi),it=n(Zi,"DIV",{class:!0});var ed=s(it);T(EP.$$.fragment,ed),PTt=i(ed),eSe=n(ed,"P",{});var b1a=s(eSe);BTt=r(b1a,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),b1a.forEach(t),ITt=i(ed),Yn=n(ed,"P",{});var U9=s(Yn);NTt=r(U9,"The model class to instantiate is selected based on the "),oSe=n(U9,"CODE",{});var v1a=s(oSe);qTt=r(v1a,"model_type"),v1a.forEach(t),jTt=r(U9,` property of the config object (either
passed as an argument or loaded from `),rSe=n(U9,"CODE",{});var F1a=s(rSe);DTt=r(F1a,"pretrained_model_name_or_path"),F1a.forEach(t),GTt=r(U9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tSe=n(U9,"CODE",{});var T1a=s(tSe);OTt=r(T1a,"pretrained_model_name_or_path"),T1a.forEach(t),VTt=r(U9,":"),U9.forEach(t),XTt=i(ed),CP=n(ed,"UL",{});var _ao=s(CP);hy=n(_ao,"LI",{});var GZe=s(hy);aSe=n(GZe,"STRONG",{});var M1a=s(aSe);zTt=r(M1a,"beit"),M1a.forEach(t),QTt=r(GZe," \u2014 "),Wle=n(GZe,"A",{href:!0});var E1a=s(Wle);WTt=r(E1a,"FlaxBeitForImageClassification"),E1a.forEach(t),UTt=r(GZe," (BEiT model)"),GZe.forEach(t),HTt=i(_ao),uy=n(_ao,"LI",{});var OZe=s(uy);nSe=n(OZe,"STRONG",{});var C1a=s(nSe);JTt=r(C1a,"vit"),C1a.forEach(t),YTt=r(OZe," \u2014 "),Ule=n(OZe,"A",{href:!0});var w1a=s(Ule);KTt=r(w1a,"FlaxViTForImageClassification"),w1a.forEach(t),ZTt=r(OZe," (ViT model)"),OZe.forEach(t),_ao.forEach(t),eMt=i(ed),T(py.$$.fragment,ed),ed.forEach(t),Zi.forEach(t),oro=i(c),_f=n(c,"H2",{class:!0});var bao=s(_f);_y=n(bao,"A",{id:!0,class:!0,href:!0});var A1a=s(_y);sSe=n(A1a,"SPAN",{});var L1a=s(sSe);T(wP.$$.fragment,L1a),L1a.forEach(t),A1a.forEach(t),oMt=i(bao),lSe=n(bao,"SPAN",{});var y1a=s(lSe);rMt=r(y1a,"FlaxAutoModelForVision2Seq"),y1a.forEach(t),bao.forEach(t),rro=i(c),Rr=n(c,"DIV",{class:!0});var od=s(Rr);T(AP.$$.fragment,od),tMt=i(od),bf=n(od,"P",{});var eme=s(bf);aMt=r(eme,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hle=n(eme,"A",{href:!0});var x1a=s(Hle);nMt=r(x1a,"from_pretrained()"),x1a.forEach(t),sMt=r(eme," class method or the "),Jle=n(eme,"A",{href:!0});var $1a=s(Jle);lMt=r($1a,"from_config()"),$1a.forEach(t),iMt=r(eme,` class
method.`),eme.forEach(t),dMt=i(od),LP=n(od,"P",{});var vao=s(LP);mMt=r(vao,"This class cannot be instantiated directly using "),iSe=n(vao,"CODE",{});var k1a=s(iSe);cMt=r(k1a,"__init__()"),k1a.forEach(t),fMt=r(vao," (throws an error)."),vao.forEach(t),gMt=i(od),_a=n(od,"DIV",{class:!0});var H9=s(_a);T(yP.$$.fragment,H9),hMt=i(H9),dSe=n(H9,"P",{});var S1a=s(dSe);uMt=r(S1a,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),S1a.forEach(t),pMt=i(H9),vf=n(H9,"P",{});var ome=s(vf);_Mt=r(ome,`Note:
Loading a model from its configuration file does `),mSe=n(ome,"STRONG",{});var R1a=s(mSe);bMt=r(R1a,"not"),R1a.forEach(t),vMt=r(ome,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=n(ome,"A",{href:!0});var P1a=s(Yle);FMt=r(P1a,"from_pretrained()"),P1a.forEach(t),TMt=r(ome," to load the model weights."),ome.forEach(t),MMt=i(H9),T(by.$$.fragment,H9),H9.forEach(t),EMt=i(od),dt=n(od,"DIV",{class:!0});var rd=s(dt);T(xP.$$.fragment,rd),CMt=i(rd),cSe=n(rd,"P",{});var B1a=s(cSe);wMt=r(B1a,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),B1a.forEach(t),AMt=i(rd),Kn=n(rd,"P",{});var J9=s(Kn);LMt=r(J9,"The model class to instantiate is selected based on the "),fSe=n(J9,"CODE",{});var I1a=s(fSe);yMt=r(I1a,"model_type"),I1a.forEach(t),xMt=r(J9,` property of the config object (either
passed as an argument or loaded from `),gSe=n(J9,"CODE",{});var N1a=s(gSe);$Mt=r(N1a,"pretrained_model_name_or_path"),N1a.forEach(t),kMt=r(J9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hSe=n(J9,"CODE",{});var q1a=s(hSe);SMt=r(q1a,"pretrained_model_name_or_path"),q1a.forEach(t),RMt=r(J9,":"),J9.forEach(t),PMt=i(rd),uSe=n(rd,"UL",{});var j1a=s(uSe);vy=n(j1a,"LI",{});var VZe=s(vy);pSe=n(VZe,"STRONG",{});var D1a=s(pSe);BMt=r(D1a,"vision-encoder-decoder"),D1a.forEach(t),IMt=r(VZe," \u2014 "),Kle=n(VZe,"A",{href:!0});var G1a=s(Kle);NMt=r(G1a,"FlaxVisionEncoderDecoderModel"),G1a.forEach(t),qMt=r(VZe," (Vision Encoder decoder model)"),VZe.forEach(t),j1a.forEach(t),jMt=i(rd),T(Fy.$$.fragment,rd),rd.forEach(t),od.forEach(t),this.h()},h(){m(g,"name","hf:doc:metadata"),m(g,"content",JSON.stringify(ova)),m(f,"id","auto-classes"),m(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(f,"href","#auto-classes"),m(u,"class","relative group"),m(es,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),m(rs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),m(ts,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),m(dd,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),m(Lf,"id","extending-the-auto-classes"),m(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Lf,"href","#extending-the-auto-classes"),m(md,"class","relative group"),m(xf,"id","transformers.AutoConfig"),m(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(xf,"href","#transformers.AutoConfig"),m(cd,"class","relative group"),m(lI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),m(iI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),m(dI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),m(mI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),m(cI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),m(fI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),m(gI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),m(hI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),m(uI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),m(pI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),m(_I,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),m(bI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),m(vI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),m(FI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),m(TI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),m(MI,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),m(EI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),m(CI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),m(wI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),m(AI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),m(LI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),m(yI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),m(xI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),m($I,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),m(kI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),m(SI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),m(RI,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),m(PI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),m(BI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),m(II,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),m(NI,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),m(qI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),m(jI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),m(DI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),m(GI,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),m(OI,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),m(VI,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig"),m(XI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),m(zI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),m(QI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),m(WI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),m(UI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),m(HI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),m(JI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),m(YI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),m(KI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),m(ZI,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),m(eN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),m(oN,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),m(rN,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),m(tN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),m(aN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),m(nN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),m(sN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),m(lN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),m(iN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),m(dN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),m(mN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),m(cN,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),m(fN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),m(gN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),m(hN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),m(uN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),m(pN,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig"),m(_N,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),m(bN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),m(vN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),m(FN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),m(TN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),m(MN,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),m(EN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),m(CN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),m(wN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),m(AN,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),m(LN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),m(yN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),m(xN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),m($N,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),m(kN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),m(SN,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),m(RN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),m(PN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),m(BN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),m(IN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),m(NN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),m(qN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),m(jN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),m(DN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),m(GN,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),m(ON,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),m(VN,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),m(XN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),m(zN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),m(QN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),m(WN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),m(UN,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),m(HN,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),m(JN,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),m(YN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),m(KN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),m(ZN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),m(eq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),m(oq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),m(rq,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),m(tq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),m(aq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),m(nq,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig"),m(sq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),m(lq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),m(iq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),m(dq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),m(mq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),m(cq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),m(fq,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),m(gq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),m(hq,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),m(uq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),m(pq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),m(_q,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),m(bq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),m(vq,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig"),m(Fq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),m(Tq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),m(Mq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),m(Eq,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),m(Cq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),m(wq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),m(Aq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),m(Lq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),m(yq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),m(xq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),m($q,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),m(kq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),m(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ou,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ru,"id","transformers.AutoTokenizer"),m(ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ru,"href","#transformers.AutoTokenizer"),m(gd,"class","relative group"),m(Sq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),m(Rq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),m(Pq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),m(Bq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),m(Iq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),m(Nq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),m(qq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),m(jq,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),m(Dq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),m(Gq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),m(Oq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),m(Vq,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),m(Xq,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),m(zq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),m(Qq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),m(Wq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),m(Uq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),m(Hq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),m(Jq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),m(Yq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),m(Kq,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),m(Zq,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),m(ej,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),m(oj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),m(rj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),m(tj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),m(aj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),m(nj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),m(sj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),m(lj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),m(ij,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),m(dj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),m(mj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),m(cj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),m(fj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),m(gj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),m(hj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),m(uj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),m(pj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),m(_j,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),m(bj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),m(vj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),m(Fj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),m(Tj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),m(Mj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),m(Ej,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),m(Cj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),m(wj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),m(Aj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),m(Lj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),m(yj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),m(xj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),m($j,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),m(kj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),m(Sj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),m(Rj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),m(Pj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),m(Bj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),m(Ij,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),m(Nj,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),m(qj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),m(jj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),m(Dj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),m(Gj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),m(Oj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),m(Vj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),m(Xj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),m(zj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),m(Qj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),m(Wj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),m(Uj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),m(Hj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),m(Jj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),m(Yj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),m(Kj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),m(Zj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),m(eD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),m(oD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),m(rD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),m(tD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),m(aD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),m(nD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),m(sD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),m(lD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),m(iD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),m(dD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),m(mD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),m(cD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),m(fD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),m(gD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),m(hD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),m(uD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),m(pD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),m(_D,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),m(bD,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),m(vD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),m(FD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),m(TD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),m(MD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),m(ED,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),m(CD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),m(wD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),m(AD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),m(LD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),m(yD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),m(xD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),m($D,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),m(kD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),m(SD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),m(RD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),m(PD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),m(BD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),m(ID,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),m(ND,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),m(qD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),m(jD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),m(DD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),m(GD,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),m(OD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),m(VD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),m(XD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),m(zD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),m(QD,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),m(WD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),m(UD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),m(HD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),m(JD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),m(YD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),m(KD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),m(ZD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),m(eG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),m(oG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),m(rG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),m(tG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),m(aG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),m(nG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),m(sG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),m(lG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),m(iG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),m(dG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),m(mG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),m(cG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),m(fG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),m(gG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),m(hG,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),m(uG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),m(pG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),m(_G,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),m(bG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),m(vG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),m(FG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),m(TG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),m(MG,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),m(EG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),m(CG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),m(wG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),m(AG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),m(LG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),m(yG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),m(xG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),m($G,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),m(kG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),m(SG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),m(RG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),m(PG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),m(BG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),m(IG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),m(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(qu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ju,"id","transformers.AutoFeatureExtractor"),m(ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ju,"href","#transformers.AutoFeatureExtractor"),m(hd,"class","relative group"),m(NG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),m(qG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),m(jG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),m(DG,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),m(GG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),m(OG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),m(VG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),m(XG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),m(zG,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),m(QG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),m(WG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),m(UG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),m(HG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),m(JG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),m(YG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),m(KG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),m(ZG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),m(eO,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),m(oO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),m(rO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),m(tO,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),m(aO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),m(nO,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),m(sO,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),m(lO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),m(iO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),m(dO,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),m(mO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),m(cO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),m(fO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),m(gO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),m(hO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),m(uO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),m(pO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),m(_O,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),m(bO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),m(vO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),m(FO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),m(TO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),m(MO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),m(EO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),m(CO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),m(wO,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),m(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($p,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(kp,"id","transformers.AutoProcessor"),m(kp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(kp,"href","#transformers.AutoProcessor"),m(ud,"class","relative group"),m(AO,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),m(LO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),m(yO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),m(xO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),m($O,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),m(kO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),m(SO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),m(RO,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),m(PO,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMProcessor"),m(BO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),m(IO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),m(NO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),m(qO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),m(jO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),m(DO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),m(GO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),m(OO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),m(VO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),m(XO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),m(zO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),m(QO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),m(WO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),m(UO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),m(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(r_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(t_,"id","transformers.AutoModel"),m(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(t_,"href","#transformers.AutoModel"),m(_d,"class","relative group"),m(HO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(JO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(YO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(KO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),m(ZO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),m(eV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),m(oV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),m(rV,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),m(tV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),m(aV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),m(nV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),m(sV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),m(lV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),m(iV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),m(dV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),m(mV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),m(cV,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),m(fV,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),m(gV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),m(hV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),m(uV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),m(pV,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),m(_V,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),m(bV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),m(vV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),m(FV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),m(TV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),m(MV,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),m(EV,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),m(CV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),m(wV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),m(AV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),m(LV,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),m(yV,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),m(xV,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),m($V,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),m(kV,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),m(SV,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmModel"),m(RV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),m(PV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),m(BV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),m(IV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),m(NV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),m(qV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),m(jV,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),m(DV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),m(GV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),m(OV,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),m(VV,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),m(XV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),m(zV,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),m(QV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),m(WV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),m(UV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),m(HV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),m(JV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),m(YV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),m(KV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),m(ZV,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),m(eX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),m(oX,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),m(rX,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),m(tX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),m(aX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),m(nX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),m(sX,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel"),m(lX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),m(iX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),m(dX,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),m(mX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),m(cX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),m(fX,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),m(gX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),m(hX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),m(uX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),m(pX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),m(_X,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),m(bX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),m(vX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),m(FX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),m(TX,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),m(MX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),m(EX,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),m(CX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),m(wX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),m(AX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),m(LX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),m(yX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),m(xX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),m($X,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),m(kX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),m(SX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),m(RX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),m(PX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),m(BX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),m(IX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),m(NX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),m(qX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),m(jX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),m(DX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),m(GX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),m(OX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),m(VX,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),m(XX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),m(zX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),m(QX,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel"),m(WX,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),m(UX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),m(HX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),m(JX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),m(YX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),m(KX,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),m(ZX,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),m(ez,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),m(oz,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),m(rz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),m(tz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),m(az,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel"),m(nz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),m(sz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),m(lz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),m(iz,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),m(dz,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),m(mz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),m(cz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),m(fz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),m(gz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),m(hz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),m(uz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),m(pz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),m(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(C2,"id","transformers.AutoModelForPreTraining"),m(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(C2,"href","#transformers.AutoModelForPreTraining"),m(Fd,"class","relative group"),m(_z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Fz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),m(Tz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),m(Mz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),m(Ez,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),m(Cz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),m(wz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),m(Az,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),m(Lz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),m(yz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),m(xz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),m($z,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),m(kz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),m(Sz,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),m(Rz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),m(Pz,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),m(Bz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),m(Iz,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),m(Nz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),m(qz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),m(jz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),m(Dz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),m(Gz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),m(Oz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),m(Vz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),m(Xz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),m(zz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),m(Qz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),m(Wz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),m(Uz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),m(Hz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),m(Jz,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),m(Yz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),m(Kz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),m(Zz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),m(eQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),m(oQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),m(rQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),m(tQ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),m(aQ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),m(nQ,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),m(sQ,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),m(lQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),m(iQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),m(dQ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),m(mQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),m(cQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),m(fQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),m(gQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),m(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Mb,"id","transformers.AutoModelForCausalLM"),m(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Mb,"href","#transformers.AutoModelForCausalLM"),m(Ed,"class","relative group"),m(hQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(pQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_Q,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),m(bQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),m(vQ,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),m(FQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),m(TQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),m(MQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),m(EQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),m(CQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),m(wQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),m(AQ,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),m(LQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),m(yQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),m(xQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),m($Q,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),m(kQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),m(SQ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),m(RQ,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),m(PQ,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),m(BQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),m(IQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),m(NQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),m(qQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),m(jQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),m(DQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),m(GQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),m(OQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),m(VQ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),m(XQ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),m(zQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),m(QQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),m(WQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),m(UQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),m(HQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),m(JQ,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),m(YQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),m(KQ,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),m(ZQ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),m(eW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),m(oW,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),m(rW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),m(tW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),m(aW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),m(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(hv,"id","transformers.AutoModelForMaskedLM"),m(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(hv,"href","#transformers.AutoModelForMaskedLM"),m(Ad,"class","relative group"),m(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(iW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),m(dW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),m(mW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),m(cW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),m(fW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),m(gW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),m(hW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),m(uW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),m(pW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),m(_W,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),m(bW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),m(vW,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),m(FW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),m(TW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),m(MW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),m(EW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),m(CW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),m(wW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),m(AW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),m(LW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),m(yW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),m(xW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),m($W,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),m(kW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),m(SW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),m(RW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),m(PW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),m(BW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),m(IW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),m(NW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),m(qW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),m(jW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),m(DW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),m(GW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),m(OW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),m(VW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),m(XW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),m(zW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),m(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(tF,"id","transformers.AutoModelForSeq2SeqLM"),m(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(tF,"href","#transformers.AutoModelForSeq2SeqLM"),m(xd,"class","relative group"),m(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(UW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(HW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),m(JW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),m(YW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),m(KW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),m(ZW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),m(eU,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),m(oU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),m(rU,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),m(tU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),m(aU,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),m(nU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),m(sU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),m(lU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),m(iU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),m(dU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),m(mU,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),m(cU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),m(fU,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),m(gU,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),m(hU,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),m(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(LF,"id","transformers.AutoModelForSequenceClassification"),m(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(LF,"href","#transformers.AutoModelForSequenceClassification"),m(Sd,"class","relative group"),m(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(bU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),m(vU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),m(FU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),m(TU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),m(MU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),m(EU,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),m(CU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),m(wU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),m(AU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),m(LU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),m(yU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),m(xU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),m($U,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),m(kU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),m(SU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),m(RU,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),m(PU,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification"),m(BU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),m(IU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),m(NU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),m(qU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),m(jU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),m(DU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),m(GU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),m(OU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),m(VU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),m(XU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),m(zU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),m(QU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),m(WU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),m(UU,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification"),m(HU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),m(JU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),m(YU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),m(KU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),m(ZU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),m(eH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),m(oH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),m(rH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),m(tH,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),m(aH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),m(nH,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),m(sH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),m(lH,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),m(iH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),m(dH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),m(mH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),m(cH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),m(fH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),m(gH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),m(hH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),m(uH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),m(pH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),m(_H,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),m(bH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),m(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ST,"id","transformers.AutoModelForMultipleChoice"),m(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ST,"href","#transformers.AutoModelForMultipleChoice"),m(Bd,"class","relative group"),m(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(MH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),m(EH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),m(CH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),m(wH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),m(AH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),m(LH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),m(yH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),m(xH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),m($H,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),m(kH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),m(SH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),m(RH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),m(PH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),m(BH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),m(IH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),m(NH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),m(qH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),m(jH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),m(DH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),m(GH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),m(OH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),m(VH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),m(XH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),m(zH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),m(QH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),m(WH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),m(UH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),m(HH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),m(JH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),m(YH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),m(KH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),m(ZH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),m(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(hM,"id","transformers.AutoModelForNextSentencePrediction"),m(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(hM,"href","#transformers.AutoModelForNextSentencePrediction"),m(qd,"class","relative group"),m(eJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(oJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(rJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(tJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),m(aJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),m(nJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),m(sJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),m(lJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),m(iJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),m(dJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),m(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(wM,"id","transformers.AutoModelForTokenClassification"),m(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(wM,"href","#transformers.AutoModelForTokenClassification"),m(Gd,"class","relative group"),m(mJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(fJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(gJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),m(hJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),m(uJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),m(pJ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),m(_J,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),m(bJ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),m(vJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),m(FJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),m(TJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),m(MJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),m(EJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),m(CJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),m(wJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),m(AJ,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification"),m(LJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),m(yJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),m(xJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),m($J,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),m(kJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),m(SJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),m(RJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),m(PJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),m(BJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),m(IJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),m(NJ,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification"),m(qJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),m(jJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),m(DJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),m(GJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),m(OJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),m(VJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),m(XJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),m(zJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),m(QJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),m(WJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),m(UJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),m(HJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),m(JJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),m(YJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),m(KJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),m(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(uE,"id","transformers.AutoModelForQuestionAnswering"),m(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(uE,"href","#transformers.AutoModelForQuestionAnswering"),m(Xd,"class","relative group"),m(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(rY,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),m(tY,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),m(aY,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),m(nY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),m(sY,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),m(lY,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering"),m(iY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),m(dY,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),m(mY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),m(cY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),m(fY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),m(gY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),m(hY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),m(uY,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),m(pY,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),m(_Y,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),m(bY,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),m(vY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),m(FY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),m(TY,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),m(MY,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),m(EY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),m(CY,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),m(wY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),m(AY,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),m(LY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),m(yY,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering"),m(xY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),m($Y,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),m(kY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),m(SY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),m(RY,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),m(PY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),m(BY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),m(IY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),m(NY,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),m(qY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),m(jY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),m(DY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),m(GY,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),m(OY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),m(VY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),m(XY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),m(zY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),m(QY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),m(WY,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),m(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(c4,"id","transformers.AutoModelForTableQuestionAnswering"),m(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(c4,"href","#transformers.AutoModelForTableQuestionAnswering"),m(Wd,"class","relative group"),m(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(JY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(YY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),m(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(p4,"id","transformers.AutoModelForDocumentQuestionAnswering"),m(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(p4,"href","#transformers.AutoModelForDocumentQuestionAnswering"),m(Jd,"class","relative group"),m(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(oK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),m(rK,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),m(tK,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),m(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(E4,"id","transformers.AutoModelForImageClassification"),m(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(E4,"href","#transformers.AutoModelForImageClassification"),m(em,"class","relative group"),m(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(lK,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),m(iK,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),m(dK,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),m(mK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),m(cK,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),m(fK,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),m(gK,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),m(hK,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),m(uK,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),m(pK,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),m(_K,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),m(bK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),m(vK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),m(FK,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),m(TK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),m(MK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),m(EK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),m(CK,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),m(wK,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),m(AK,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),m(LK,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),m(yK,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),m(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(O4,"id","transformers.AutoModelForVideoClassification"),m(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(O4,"href","#transformers.AutoModelForVideoClassification"),m(tm,"class","relative group"),m(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m($K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(kK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(SK,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),m(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(W4,"id","transformers.AutoModelForVision2Seq"),m(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(W4,"href","#transformers.AutoModelForVision2Seq"),m(sm,"class","relative group"),m(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(IK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),m(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(K4,"id","transformers.AutoModelForVisualQuestionAnswering"),m(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(K4,"href","#transformers.AutoModelForVisualQuestionAnswering"),m(dm,"class","relative group"),m(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(jK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(DK,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),m(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(tC,"id","transformers.AutoModelForAudioClassification"),m(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(tC,"href","#transformers.AutoModelForAudioClassification"),m(fm,"class","relative group"),m(GK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(OK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(VK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(XK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),m(zK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),m(QK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),m(WK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),m(UK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),m(HK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),m(JK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),m(YK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),m(KK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),m(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(pC,"id","transformers.AutoModelForAudioFrameClassification"),m(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(pC,"href","#transformers.AutoModelForAudioFrameClassification"),m(um,"class","relative group"),m(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(oZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(rZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),m(tZ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),m(aZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),m(nZ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),m(sZ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),m(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(wC,"id","transformers.AutoModelForCTC"),m(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(wC,"href","#transformers.AutoModelForCTC"),m(bm,"class","relative group"),m(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(iZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(dZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(mZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),m(cZ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),m(fZ,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),m(gZ,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),m(hZ,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),m(uZ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),m(pZ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),m(_Z,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),m(bZ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),m(vZ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),m(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(jC,"id","transformers.AutoModelForSpeechSeq2Seq"),m(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(jC,"href","#transformers.AutoModelForSpeechSeq2Seq"),m(Tm,"class","relative group"),m(FZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(MZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(EZ,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),m(CZ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),m(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(zC,"id","transformers.AutoModelForAudioXVector"),m(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(zC,"href","#transformers.AutoModelForAudioXVector"),m(Cm,"class","relative group"),m(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(LZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(yZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),m(xZ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),m($Z,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),m(kZ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),m(SZ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),m(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(e3,"id","transformers.AutoModelForMaskedImageModeling"),m(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(e3,"href","#transformers.AutoModelForMaskedImageModeling"),m(Lm,"class","relative group"),m(RZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(PZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(BZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(IZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),m(NZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),m(qZ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),m(jZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),m(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(i3,"id","transformers.AutoModelForObjectDetection"),m(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(i3,"href","#transformers.AutoModelForObjectDetection"),m($m,"class","relative group"),m(DZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(GZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(OZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(VZ,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),m(XZ,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),m(zZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),m(QZ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),m(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(p3,"id","transformers.AutoModelForImageSegmentation"),m(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(p3,"href","#transformers.AutoModelForImageSegmentation"),m(Rm,"class","relative group"),m(WZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(UZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(HZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(JZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),m(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(T3,"id","transformers.AutoModelForSemanticSegmentation"),m(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(T3,"href","#transformers.AutoModelForSemanticSegmentation"),m(Im,"class","relative group"),m(YZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(KZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(ZZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(eee,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),m(oee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),m(ree,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),m(tee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),m(aee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),m(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($3,"id","transformers.AutoModelForInstanceSegmentation"),m($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m($3,"href","#transformers.AutoModelForInstanceSegmentation"),m(jm,"class","relative group"),m(nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(see,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(iee,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),m(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(B3,"id","transformers.TFAutoModel"),m(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(B3,"href","#transformers.TFAutoModel"),m(Om,"class","relative group"),m(dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(fee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),m(gee,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),m(hee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),m(uee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),m(pee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),m(_ee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),m(bee,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),m(vee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),m(Fee,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),m(Tee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),m(Mee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),m(Eee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),m(Cee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),m(wee,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),m(Aee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),m(Lee,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),m(yee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),m(xee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),m($ee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),m(kee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),m(See,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),m(Ree,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),m(Pee,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel"),m(Bee,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),m(Iee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),m(Nee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),m(qee,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),m(jee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),m(Dee,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),m(Gee,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),m(Oee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),m(Vee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),m(Xee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),m(zee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),m(Qee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),m(Wee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),m(Uee,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),m(Hee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),m(Jee,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),m(Yee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),m(Kee,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),m(Zee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),m(eoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),m(ooe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),m(roe,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),m(toe,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),m(aoe,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),m(noe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),m(soe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),m(loe,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),m(ioe,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),m(doe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),m(moe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),m(coe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),m(foe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),m(goe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),m(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(q5,"id","transformers.TFAutoModelForPreTraining"),m(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(q5,"href","#transformers.TFAutoModelForPreTraining"),m(zm,"class","relative group"),m(hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_oe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),m(boe,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),m(voe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),m(Foe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),m(Toe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),m(Moe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),m(Eoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),m(Coe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),m(woe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),m(Aoe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),m(Loe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),m(yoe,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),m(xoe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),m($oe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),m(koe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),m(Soe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),m(Roe,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),m(Poe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),m(Boe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),m(Ioe,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),m(Noe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),m(qoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),m(joe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),m(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(m0,"id","transformers.TFAutoModelForCausalLM"),m(m0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(m0,"href","#transformers.TFAutoModelForCausalLM"),m(Um,"class","relative group"),m(Doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Ooe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Voe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),m(Xoe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),m(zoe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),m(Qoe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),m(Woe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),m(Uoe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),m(Hoe,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),m(Joe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),m(Yoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),m(Koe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),m(Zoe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),m(ere,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),m(ore,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),m(rre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),m(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(L0,"id","transformers.TFAutoModelForImageClassification"),m(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(L0,"href","#transformers.TFAutoModelForImageClassification"),m(Ym,"class","relative group"),m(tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(sre,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),m(lre,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),m(ire,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),m(dre,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),m(mre,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),m(cre,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),m(fre,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),m(gre,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),m(hre,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),m(ure,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),m(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(q0,"id","transformers.TFAutoModelForSemanticSegmentation"),m(q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(q0,"href","#transformers.TFAutoModelForSemanticSegmentation"),m(ec,"class","relative group"),m(pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(vre,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),m(Fre,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),m(Tre,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),m(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(X0,"id","transformers.TFAutoModelForMaskedLM"),m(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(X0,"href","#transformers.TFAutoModelForMaskedLM"),m(ac,"class","relative group"),m(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(wre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),m(Are,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),m(Lre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),m(yre,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),m(xre,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),m($re,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),m(kre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),m(Sre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),m(Rre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),m(Pre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),m(Bre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),m(Ire,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),m(Nre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),m(qre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),m(jre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),m(Dre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),m(Gre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),m(Ore,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),m(Vre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),m(Xre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),m(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(gw,"id","transformers.TFAutoModelForSeq2SeqLM"),m(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(gw,"href","#transformers.TFAutoModelForSeq2SeqLM"),m(lc,"class","relative group"),m(zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Qre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ure,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),m(Hre,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),m(Jre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),m(Yre,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),m(Kre,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),m(Zre,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),m(ete,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),m(ote,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),m(rte,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),m(tte,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),m(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Aw,"id","transformers.TFAutoModelForSequenceClassification"),m(Aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Aw,"href","#transformers.TFAutoModelForSequenceClassification"),m(mc,"class","relative group"),m(ate,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(nte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(lte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),m(ite,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),m(dte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),m(mte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),m(cte,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),m(fte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),m(gte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),m(hte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),m(ute,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),m(pte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),m(_te,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),m(bte,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),m(vte,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),m(Fte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),m(Tte,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),m(Mte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),m(Ete,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),m(Cte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),m(wte,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),m(Ate,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),m(Lte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),m(yte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),m(xte,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),m($te,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),m(kte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),m(Ste,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),m(Rte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),m(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(rA,"id","transformers.TFAutoModelForMultipleChoice"),m(rA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(rA,"href","#transformers.TFAutoModelForMultipleChoice"),m(gc,"class","relative group"),m(Pte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Nte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),m(qte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),m(jte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),m(Dte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),m(Gte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),m(Ote,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),m(Vte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),m(Xte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),m(zte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),m(Qte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),m(Wte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),m(Ute,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),m(Hte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),m(Jte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),m(Yte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),m(Kte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),m(Zte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),m(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(MA,"id","transformers.TFAutoModelForNextSentencePrediction"),m(MA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(MA,"href","#transformers.TFAutoModelForNextSentencePrediction"),m(pc,"class","relative group"),m(eae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(oae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(tae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),m(aae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),m(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(LA,"id","transformers.TFAutoModelForTableQuestionAnswering"),m(LA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(LA,"href","#transformers.TFAutoModelForTableQuestionAnswering"),m(vc,"class","relative group"),m(nae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(sae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(lae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(iae,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),m(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(kA,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),m(kA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(kA,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),m(Mc,"class","relative group"),m(dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(cae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(fae,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),m(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(BA,"id","transformers.TFAutoModelForTokenClassification"),m(BA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(BA,"href","#transformers.TFAutoModelForTokenClassification"),m(wc,"class","relative group"),m(gae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(hae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(uae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(pae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),m(_ae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),m(bae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),m(vae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),m(Fae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),m(Tae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),m(Mae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),m(Eae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),m(Cae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),m(wae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),m(Aae,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),m(Lae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),m(yae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),m(xae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),m($ae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),m(kae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),m(Sae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),m(Rae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),m(Pae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),m(Bae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),m(Iae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),m(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(n6,"id","transformers.TFAutoModelForQuestionAnswering"),m(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(n6,"href","#transformers.TFAutoModelForQuestionAnswering"),m(yc,"class","relative group"),m(Nae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(qae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Dae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),m(Gae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),m(Oae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),m(Vae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),m(Xae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),m(zae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),m(Qae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),m(Wae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),m(Uae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),m(Hae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),m(Jae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),m(Yae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),m(Kae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),m(Zae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),m(ene,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),m(one,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),m(rne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),m(tne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),m(ane,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),m(nne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),m(sne,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),m(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(x6,"id","transformers.TFAutoModelForVision2Seq"),m(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(x6,"href","#transformers.TFAutoModelForVision2Seq"),m(kc,"class","relative group"),m(lne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ine,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(dne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(mne,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),m(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(R6,"id","transformers.TFAutoModelForSpeechSeq2Seq"),m(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(R6,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),m(Pc,"class","relative group"),m(cne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(fne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(gne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(hne,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),m(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(N6,"id","transformers.FlaxAutoModel"),m(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(N6,"href","#transformers.FlaxAutoModel"),m(Nc,"class","relative group"),m(une,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(pne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(_ne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(bne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),m(vne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),m(Fne,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),m(Tne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),m(Mne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),m(Ene,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),m(Cne,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),m(wne,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),m(Ane,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),m(Lne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),m(yne,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),m(xne,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),m($ne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),m(kne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),m(Sne,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),m(Rne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),m(Pne,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),m(Bne,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),m(Ine,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),m(Nne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),m(qne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),m(jne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),m(Dne,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),m(Gne,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),m(One,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),m(Vne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),m(Xne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),m(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(g7,"id","transformers.FlaxAutoModelForCausalLM"),m(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(g7,"href","#transformers.FlaxAutoModelForCausalLM"),m(Dc,"class","relative group"),m(zne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Qne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Wne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Une,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),m(Hne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),m(Jne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),m(Yne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),m(Kne,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),m(Zne,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),m(ese,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),m(ose,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),m(rse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),m(tse,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),m(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(A7,"id","transformers.FlaxAutoModelForPreTraining"),m(A7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(A7,"href","#transformers.FlaxAutoModelForPreTraining"),m(Vc,"class","relative group"),m(ase,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(nse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(sse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(lse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),m(ise,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),m(dse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),m(mse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),m(cse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),m(fse,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),m(gse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),m(hse,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),m(use,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),m(pse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),m(_se,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),m(bse,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),m(vse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),m(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(O7,"id","transformers.FlaxAutoModelForMaskedLM"),m(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(O7,"href","#transformers.FlaxAutoModelForMaskedLM"),m(Qc,"class","relative group"),m(Fse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Tse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Mse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ese,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),m(Cse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),m(wse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),m(Ase,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),m(Lse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),m(yse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),m(xse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),m($se,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),m(kse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),m(Sse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),m(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(oL,"id","transformers.FlaxAutoModelForSeq2SeqLM"),m(oL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(oL,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),m(Hc,"class","relative group"),m(Rse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Pse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Bse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ise,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),m(Nse,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),m(qse,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),m(jse,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),m(Dse,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),m(Gse,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),m(Ose,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),m(Vse,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),m(Xse,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),m(zse,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),m(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(hL,"id","transformers.FlaxAutoModelForSequenceClassification"),m(hL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(hL,"href","#transformers.FlaxAutoModelForSequenceClassification"),m(Kc,"class","relative group"),m(Qse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Wse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Use,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Hse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),m(Jse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),m(Yse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),m(Kse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),m(Zse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),m(ele,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),m(ole,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),m(rle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),m(tle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),m(ale,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),m(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(LL,"id","transformers.FlaxAutoModelForQuestionAnswering"),m(LL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(LL,"href","#transformers.FlaxAutoModelForQuestionAnswering"),m(of,"class","relative group"),m(nle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(sle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(lle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ile,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),m(dle,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),m(mle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),m(cle,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),m(fle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),m(gle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),m(hle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),m(ule,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),m(ple,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),m(_le,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),m(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(DL,"id","transformers.FlaxAutoModelForTokenClassification"),m(DL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(DL,"href","#transformers.FlaxAutoModelForTokenClassification"),m(af,"class","relative group"),m(ble,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(vle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Fle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Tle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),m(Mle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),m(Ele,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),m(Cle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),m(wle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),m(Ale,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),m(Lle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),m(yle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),m(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(YL,"id","transformers.FlaxAutoModelForMultipleChoice"),m(YL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(YL,"href","#transformers.FlaxAutoModelForMultipleChoice"),m(lf,"class","relative group"),m(xle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m($le,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(kle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Sle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),m(Rle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),m(Ple,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),m(Ble,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),m(Ile,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),m(Nle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),m(qle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),m(jle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),m(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(iy,"id","transformers.FlaxAutoModelForNextSentencePrediction"),m(iy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(iy,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),m(cf,"class","relative group"),m(Dle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Gle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Ole,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Vle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),m(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(fy,"id","transformers.FlaxAutoModelForImageClassification"),m(fy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(fy,"href","#transformers.FlaxAutoModelForImageClassification"),m(hf,"class","relative group"),m(Xle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(zle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Qle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Wle,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),m(Ule,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),m(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_y,"id","transformers.FlaxAutoModelForVision2Seq"),m(_y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(_y,"href","#transformers.FlaxAutoModelForVision2Seq"),m(_f,"class","relative group"),m(Hle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(Jle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),m(Yle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),m(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Kle,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),m(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,_){e(document.head,g),b(c,v,_),b(c,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,yo),e(yo,td),b(c,Ef,_),b(c,pt,_),e(pt,ad),e(pt,nd),e(nd,Y9),e(pt,Cf),b(c,Ve,_),b(c,He,_),e(He,sd),e(He,es),e(es,K9),e(He,os),e(He,rs),e(rs,Z9),e(He,ld),e(He,ts),e(ts,ex),e(He,id),b(c,wf,_),M(Qa,c,_),b(c,Je,_),b(c,Ae,_),e(Ae,oI),e(Ae,dd),e(dd,rI),e(Ae,tI),b(c,xo,_),b(c,Wa,_),e(Wa,aI),e(Wa,Af),e(Af,nI),e(Wa,Fao),b(c,XZe,_),b(c,md,_),e(md,Lf),e(Lf,rme),M(ox,rme,null),e(md,Tao),e(md,tme),e(tme,Mao),b(c,zZe,_),b(c,as,_),e(as,Eao),e(as,ame),e(ame,Cao),e(as,wao),e(as,nme),e(nme,Aao),e(as,Lao),b(c,QZe,_),M(rx,c,_),b(c,WZe,_),b(c,sI,_),e(sI,yao),b(c,UZe,_),M(yf,c,_),b(c,HZe,_),b(c,cd,_),e(cd,xf),e(xf,sme),M(tx,sme,null),e(cd,xao),e(cd,lme),e(lme,$ao),b(c,JZe,_),b(c,$o,_),M(ax,$o,null),e($o,kao),e($o,nx),e(nx,Sao),e(nx,lI),e(lI,Rao),e(nx,Pao),e($o,Bao),e($o,sx),e(sx,Iao),e(sx,ime),e(ime,Nao),e(sx,qao),e($o,jao),e($o,Pr),M(lx,Pr,null),e(Pr,Dao),e(Pr,dme),e(dme,Gao),e(Pr,Oao),e(Pr,fd),e(fd,Vao),e(fd,mme),e(mme,Xao),e(fd,zao),e(fd,cme),e(cme,Qao),e(fd,Wao),e(Pr,Uao),e(Pr,A),e(A,$f),e($f,fme),e(fme,Hao),e($f,Jao),e($f,iI),e(iI,Yao),e($f,Kao),e(A,Zao),e(A,kf),e(kf,gme),e(gme,eno),e(kf,ono),e(kf,dI),e(dI,rno),e(kf,tno),e(A,ano),e(A,Sf),e(Sf,hme),e(hme,nno),e(Sf,sno),e(Sf,mI),e(mI,lno),e(Sf,ino),e(A,dno),e(A,Rf),e(Rf,ume),e(ume,mno),e(Rf,cno),e(Rf,cI),e(cI,fno),e(Rf,gno),e(A,hno),e(A,Pf),e(Pf,pme),e(pme,uno),e(Pf,pno),e(Pf,fI),e(fI,_no),e(Pf,bno),e(A,vno),e(A,Bf),e(Bf,_me),e(_me,Fno),e(Bf,Tno),e(Bf,gI),e(gI,Mno),e(Bf,Eno),e(A,Cno),e(A,If),e(If,bme),e(bme,wno),e(If,Ano),e(If,hI),e(hI,Lno),e(If,yno),e(A,xno),e(A,Nf),e(Nf,vme),e(vme,$no),e(Nf,kno),e(Nf,uI),e(uI,Sno),e(Nf,Rno),e(A,Pno),e(A,qf),e(qf,Fme),e(Fme,Bno),e(qf,Ino),e(qf,pI),e(pI,Nno),e(qf,qno),e(A,jno),e(A,jf),e(jf,Tme),e(Tme,Dno),e(jf,Gno),e(jf,_I),e(_I,Ono),e(jf,Vno),e(A,Xno),e(A,Df),e(Df,Mme),e(Mme,zno),e(Df,Qno),e(Df,bI),e(bI,Wno),e(Df,Uno),e(A,Hno),e(A,Gf),e(Gf,Eme),e(Eme,Jno),e(Gf,Yno),e(Gf,vI),e(vI,Kno),e(Gf,Zno),e(A,eso),e(A,Of),e(Of,Cme),e(Cme,oso),e(Of,rso),e(Of,FI),e(FI,tso),e(Of,aso),e(A,nso),e(A,Vf),e(Vf,wme),e(wme,sso),e(Vf,lso),e(Vf,TI),e(TI,iso),e(Vf,dso),e(A,mso),e(A,Xf),e(Xf,Ame),e(Ame,cso),e(Xf,fso),e(Xf,MI),e(MI,gso),e(Xf,hso),e(A,uso),e(A,zf),e(zf,Lme),e(Lme,pso),e(zf,_so),e(zf,EI),e(EI,bso),e(zf,vso),e(A,Fso),e(A,Qf),e(Qf,yme),e(yme,Tso),e(Qf,Mso),e(Qf,CI),e(CI,Eso),e(Qf,Cso),e(A,wso),e(A,Wf),e(Wf,xme),e(xme,Aso),e(Wf,Lso),e(Wf,wI),e(wI,yso),e(Wf,xso),e(A,$so),e(A,Uf),e(Uf,$me),e($me,kso),e(Uf,Sso),e(Uf,AI),e(AI,Rso),e(Uf,Pso),e(A,Bso),e(A,Hf),e(Hf,kme),e(kme,Iso),e(Hf,Nso),e(Hf,LI),e(LI,qso),e(Hf,jso),e(A,Dso),e(A,Jf),e(Jf,Sme),e(Sme,Gso),e(Jf,Oso),e(Jf,yI),e(yI,Vso),e(Jf,Xso),e(A,zso),e(A,Yf),e(Yf,Rme),e(Rme,Qso),e(Yf,Wso),e(Yf,xI),e(xI,Uso),e(Yf,Hso),e(A,Jso),e(A,Kf),e(Kf,Pme),e(Pme,Yso),e(Kf,Kso),e(Kf,$I),e($I,Zso),e(Kf,elo),e(A,olo),e(A,Zf),e(Zf,Bme),e(Bme,rlo),e(Zf,tlo),e(Zf,kI),e(kI,alo),e(Zf,nlo),e(A,slo),e(A,eg),e(eg,Ime),e(Ime,llo),e(eg,ilo),e(eg,SI),e(SI,dlo),e(eg,mlo),e(A,clo),e(A,og),e(og,Nme),e(Nme,flo),e(og,glo),e(og,RI),e(RI,hlo),e(og,ulo),e(A,plo),e(A,rg),e(rg,qme),e(qme,_lo),e(rg,blo),e(rg,PI),e(PI,vlo),e(rg,Flo),e(A,Tlo),e(A,tg),e(tg,jme),e(jme,Mlo),e(tg,Elo),e(tg,BI),e(BI,Clo),e(tg,wlo),e(A,Alo),e(A,ag),e(ag,Dme),e(Dme,Llo),e(ag,ylo),e(ag,II),e(II,xlo),e(ag,$lo),e(A,klo),e(A,ng),e(ng,Gme),e(Gme,Slo),e(ng,Rlo),e(ng,NI),e(NI,Plo),e(ng,Blo),e(A,Ilo),e(A,sg),e(sg,Ome),e(Ome,Nlo),e(sg,qlo),e(sg,qI),e(qI,jlo),e(sg,Dlo),e(A,Glo),e(A,lg),e(lg,Vme),e(Vme,Olo),e(lg,Vlo),e(lg,jI),e(jI,Xlo),e(lg,zlo),e(A,Qlo),e(A,ig),e(ig,Xme),e(Xme,Wlo),e(ig,Ulo),e(ig,DI),e(DI,Hlo),e(ig,Jlo),e(A,Ylo),e(A,dg),e(dg,zme),e(zme,Klo),e(dg,Zlo),e(dg,GI),e(GI,eio),e(dg,oio),e(A,rio),e(A,mg),e(mg,Qme),e(Qme,tio),e(mg,aio),e(mg,OI),e(OI,nio),e(mg,sio),e(A,lio),e(A,cg),e(cg,Wme),e(Wme,iio),e(cg,dio),e(cg,VI),e(VI,mio),e(cg,cio),e(A,fio),e(A,fg),e(fg,Ume),e(Ume,gio),e(fg,hio),e(fg,XI),e(XI,uio),e(fg,pio),e(A,_io),e(A,gg),e(gg,Hme),e(Hme,bio),e(gg,vio),e(gg,zI),e(zI,Fio),e(gg,Tio),e(A,Mio),e(A,hg),e(hg,Jme),e(Jme,Eio),e(hg,Cio),e(hg,QI),e(QI,wio),e(hg,Aio),e(A,Lio),e(A,ug),e(ug,Yme),e(Yme,yio),e(ug,xio),e(ug,WI),e(WI,$io),e(ug,kio),e(A,Sio),e(A,pg),e(pg,Kme),e(Kme,Rio),e(pg,Pio),e(pg,UI),e(UI,Bio),e(pg,Iio),e(A,Nio),e(A,_g),e(_g,Zme),e(Zme,qio),e(_g,jio),e(_g,HI),e(HI,Dio),e(_g,Gio),e(A,Oio),e(A,bg),e(bg,ece),e(ece,Vio),e(bg,Xio),e(bg,JI),e(JI,zio),e(bg,Qio),e(A,Wio),e(A,vg),e(vg,oce),e(oce,Uio),e(vg,Hio),e(vg,YI),e(YI,Jio),e(vg,Yio),e(A,Kio),e(A,Fg),e(Fg,rce),e(rce,Zio),e(Fg,edo),e(Fg,KI),e(KI,odo),e(Fg,rdo),e(A,tdo),e(A,Tg),e(Tg,tce),e(tce,ado),e(Tg,ndo),e(Tg,ZI),e(ZI,sdo),e(Tg,ldo),e(A,ido),e(A,Mg),e(Mg,ace),e(ace,ddo),e(Mg,mdo),e(Mg,eN),e(eN,cdo),e(Mg,fdo),e(A,gdo),e(A,Eg),e(Eg,nce),e(nce,hdo),e(Eg,udo),e(Eg,oN),e(oN,pdo),e(Eg,_do),e(A,bdo),e(A,Cg),e(Cg,sce),e(sce,vdo),e(Cg,Fdo),e(Cg,rN),e(rN,Tdo),e(Cg,Mdo),e(A,Edo),e(A,wg),e(wg,lce),e(lce,Cdo),e(wg,wdo),e(wg,tN),e(tN,Ado),e(wg,Ldo),e(A,ydo),e(A,Ag),e(Ag,ice),e(ice,xdo),e(Ag,$do),e(Ag,aN),e(aN,kdo),e(Ag,Sdo),e(A,Rdo),e(A,Lg),e(Lg,dce),e(dce,Pdo),e(Lg,Bdo),e(Lg,nN),e(nN,Ido),e(Lg,Ndo),e(A,qdo),e(A,yg),e(yg,mce),e(mce,jdo),e(yg,Ddo),e(yg,sN),e(sN,Gdo),e(yg,Odo),e(A,Vdo),e(A,xg),e(xg,cce),e(cce,Xdo),e(xg,zdo),e(xg,lN),e(lN,Qdo),e(xg,Wdo),e(A,Udo),e(A,$g),e($g,fce),e(fce,Hdo),e($g,Jdo),e($g,iN),e(iN,Ydo),e($g,Kdo),e(A,Zdo),e(A,kg),e(kg,gce),e(gce,emo),e(kg,omo),e(kg,dN),e(dN,rmo),e(kg,tmo),e(A,amo),e(A,Sg),e(Sg,hce),e(hce,nmo),e(Sg,smo),e(Sg,mN),e(mN,lmo),e(Sg,imo),e(A,dmo),e(A,Rg),e(Rg,uce),e(uce,mmo),e(Rg,cmo),e(Rg,cN),e(cN,fmo),e(Rg,gmo),e(A,hmo),e(A,Pg),e(Pg,pce),e(pce,umo),e(Pg,pmo),e(Pg,fN),e(fN,_mo),e(Pg,bmo),e(A,vmo),e(A,Bg),e(Bg,_ce),e(_ce,Fmo),e(Bg,Tmo),e(Bg,gN),e(gN,Mmo),e(Bg,Emo),e(A,Cmo),e(A,Ig),e(Ig,bce),e(bce,wmo),e(Ig,Amo),e(Ig,hN),e(hN,Lmo),e(Ig,ymo),e(A,xmo),e(A,Ng),e(Ng,vce),e(vce,$mo),e(Ng,kmo),e(Ng,uN),e(uN,Smo),e(Ng,Rmo),e(A,Pmo),e(A,qg),e(qg,Fce),e(Fce,Bmo),e(qg,Imo),e(qg,pN),e(pN,Nmo),e(qg,qmo),e(A,jmo),e(A,jg),e(jg,Tce),e(Tce,Dmo),e(jg,Gmo),e(jg,_N),e(_N,Omo),e(jg,Vmo),e(A,Xmo),e(A,Dg),e(Dg,Mce),e(Mce,zmo),e(Dg,Qmo),e(Dg,bN),e(bN,Wmo),e(Dg,Umo),e(A,Hmo),e(A,Gg),e(Gg,Ece),e(Ece,Jmo),e(Gg,Ymo),e(Gg,vN),e(vN,Kmo),e(Gg,Zmo),e(A,eco),e(A,Og),e(Og,Cce),e(Cce,oco),e(Og,rco),e(Og,FN),e(FN,tco),e(Og,aco),e(A,nco),e(A,Vg),e(Vg,wce),e(wce,sco),e(Vg,lco),e(Vg,TN),e(TN,ico),e(Vg,dco),e(A,mco),e(A,Xg),e(Xg,Ace),e(Ace,cco),e(Xg,fco),e(Xg,MN),e(MN,gco),e(Xg,hco),e(A,uco),e(A,zg),e(zg,Lce),e(Lce,pco),e(zg,_co),e(zg,EN),e(EN,bco),e(zg,vco),e(A,Fco),e(A,Qg),e(Qg,yce),e(yce,Tco),e(Qg,Mco),e(Qg,CN),e(CN,Eco),e(Qg,Cco),e(A,wco),e(A,Wg),e(Wg,xce),e(xce,Aco),e(Wg,Lco),e(Wg,wN),e(wN,yco),e(Wg,xco),e(A,$co),e(A,Ug),e(Ug,$ce),e($ce,kco),e(Ug,Sco),e(Ug,AN),e(AN,Rco),e(Ug,Pco),e(A,Bco),e(A,Hg),e(Hg,kce),e(kce,Ico),e(Hg,Nco),e(Hg,LN),e(LN,qco),e(Hg,jco),e(A,Dco),e(A,Jg),e(Jg,Sce),e(Sce,Gco),e(Jg,Oco),e(Jg,yN),e(yN,Vco),e(Jg,Xco),e(A,zco),e(A,Yg),e(Yg,Rce),e(Rce,Qco),e(Yg,Wco),e(Yg,xN),e(xN,Uco),e(Yg,Hco),e(A,Jco),e(A,Kg),e(Kg,Pce),e(Pce,Yco),e(Kg,Kco),e(Kg,$N),e($N,Zco),e(Kg,efo),e(A,ofo),e(A,Zg),e(Zg,Bce),e(Bce,rfo),e(Zg,tfo),e(Zg,kN),e(kN,afo),e(Zg,nfo),e(A,sfo),e(A,eh),e(eh,Ice),e(Ice,lfo),e(eh,ifo),e(eh,SN),e(SN,dfo),e(eh,mfo),e(A,cfo),e(A,oh),e(oh,Nce),e(Nce,ffo),e(oh,gfo),e(oh,RN),e(RN,hfo),e(oh,ufo),e(A,pfo),e(A,rh),e(rh,qce),e(qce,_fo),e(rh,bfo),e(rh,PN),e(PN,vfo),e(rh,Ffo),e(A,Tfo),e(A,th),e(th,jce),e(jce,Mfo),e(th,Efo),e(th,BN),e(BN,Cfo),e(th,wfo),e(A,Afo),e(A,ah),e(ah,Dce),e(Dce,Lfo),e(ah,yfo),e(ah,IN),e(IN,xfo),e(ah,$fo),e(A,kfo),e(A,nh),e(nh,Gce),e(Gce,Sfo),e(nh,Rfo),e(nh,NN),e(NN,Pfo),e(nh,Bfo),e(A,Ifo),e(A,sh),e(sh,Oce),e(Oce,Nfo),e(sh,qfo),e(sh,qN),e(qN,jfo),e(sh,Dfo),e(A,Gfo),e(A,lh),e(lh,Vce),e(Vce,Ofo),e(lh,Vfo),e(lh,jN),e(jN,Xfo),e(lh,zfo),e(A,Qfo),e(A,ih),e(ih,Xce),e(Xce,Wfo),e(ih,Ufo),e(ih,DN),e(DN,Hfo),e(ih,Jfo),e(A,Yfo),e(A,dh),e(dh,zce),e(zce,Kfo),e(dh,Zfo),e(dh,GN),e(GN,ego),e(dh,ogo),e(A,rgo),e(A,mh),e(mh,Qce),e(Qce,tgo),e(mh,ago),e(mh,ON),e(ON,ngo),e(mh,sgo),e(A,lgo),e(A,ch),e(ch,Wce),e(Wce,igo),e(ch,dgo),e(ch,VN),e(VN,mgo),e(ch,cgo),e(A,fgo),e(A,fh),e(fh,Uce),e(Uce,ggo),e(fh,hgo),e(fh,XN),e(XN,ugo),e(fh,pgo),e(A,_go),e(A,gh),e(gh,Hce),e(Hce,bgo),e(gh,vgo),e(gh,zN),e(zN,Fgo),e(gh,Tgo),e(A,Mgo),e(A,hh),e(hh,Jce),e(Jce,Ego),e(hh,Cgo),e(hh,QN),e(QN,wgo),e(hh,Ago),e(A,Lgo),e(A,uh),e(uh,Yce),e(Yce,ygo),e(uh,xgo),e(uh,WN),e(WN,$go),e(uh,kgo),e(A,Sgo),e(A,ph),e(ph,Kce),e(Kce,Rgo),e(ph,Pgo),e(ph,UN),e(UN,Bgo),e(ph,Igo),e(A,Ngo),e(A,_h),e(_h,Zce),e(Zce,qgo),e(_h,jgo),e(_h,HN),e(HN,Dgo),e(_h,Ggo),e(A,Ogo),e(A,bh),e(bh,efe),e(efe,Vgo),e(bh,Xgo),e(bh,JN),e(JN,zgo),e(bh,Qgo),e(A,Wgo),e(A,vh),e(vh,ofe),e(ofe,Ugo),e(vh,Hgo),e(vh,YN),e(YN,Jgo),e(vh,Ygo),e(A,Kgo),e(A,Fh),e(Fh,rfe),e(rfe,Zgo),e(Fh,eho),e(Fh,KN),e(KN,oho),e(Fh,rho),e(A,tho),e(A,Th),e(Th,tfe),e(tfe,aho),e(Th,nho),e(Th,ZN),e(ZN,sho),e(Th,lho),e(A,iho),e(A,Mh),e(Mh,afe),e(afe,dho),e(Mh,mho),e(Mh,eq),e(eq,cho),e(Mh,fho),e(A,gho),e(A,Eh),e(Eh,nfe),e(nfe,hho),e(Eh,uho),e(Eh,oq),e(oq,pho),e(Eh,_ho),e(A,bho),e(A,Ch),e(Ch,sfe),e(sfe,vho),e(Ch,Fho),e(Ch,rq),e(rq,Tho),e(Ch,Mho),e(A,Eho),e(A,wh),e(wh,lfe),e(lfe,Cho),e(wh,who),e(wh,tq),e(tq,Aho),e(wh,Lho),e(A,yho),e(A,Ah),e(Ah,ife),e(ife,xho),e(Ah,$ho),e(Ah,aq),e(aq,kho),e(Ah,Sho),e(A,Rho),e(A,Lh),e(Lh,dfe),e(dfe,Pho),e(Lh,Bho),e(Lh,nq),e(nq,Iho),e(Lh,Nho),e(A,qho),e(A,yh),e(yh,mfe),e(mfe,jho),e(yh,Dho),e(yh,sq),e(sq,Gho),e(yh,Oho),e(A,Vho),e(A,xh),e(xh,cfe),e(cfe,Xho),e(xh,zho),e(xh,lq),e(lq,Qho),e(xh,Who),e(A,Uho),e(A,$h),e($h,ffe),e(ffe,Hho),e($h,Jho),e($h,iq),e(iq,Yho),e($h,Kho),e(A,Zho),e(A,kh),e(kh,gfe),e(gfe,euo),e(kh,ouo),e(kh,dq),e(dq,ruo),e(kh,tuo),e(A,auo),e(A,Sh),e(Sh,hfe),e(hfe,nuo),e(Sh,suo),e(Sh,mq),e(mq,luo),e(Sh,iuo),e(A,duo),e(A,Rh),e(Rh,ufe),e(ufe,muo),e(Rh,cuo),e(Rh,cq),e(cq,fuo),e(Rh,guo),e(A,huo),e(A,Ph),e(Ph,pfe),e(pfe,uuo),e(Ph,puo),e(Ph,fq),e(fq,_uo),e(Ph,buo),e(A,vuo),e(A,Bh),e(Bh,_fe),e(_fe,Fuo),e(Bh,Tuo),e(Bh,gq),e(gq,Muo),e(Bh,Euo),e(A,Cuo),e(A,Ih),e(Ih,bfe),e(bfe,wuo),e(Ih,Auo),e(Ih,hq),e(hq,Luo),e(Ih,yuo),e(A,xuo),e(A,Nh),e(Nh,vfe),e(vfe,$uo),e(Nh,kuo),e(Nh,uq),e(uq,Suo),e(Nh,Ruo),e(A,Puo),e(A,qh),e(qh,Ffe),e(Ffe,Buo),e(qh,Iuo),e(qh,pq),e(pq,Nuo),e(qh,quo),e(A,juo),e(A,jh),e(jh,Tfe),e(Tfe,Duo),e(jh,Guo),e(jh,_q),e(_q,Ouo),e(jh,Vuo),e(A,Xuo),e(A,Dh),e(Dh,Mfe),e(Mfe,zuo),e(Dh,Quo),e(Dh,bq),e(bq,Wuo),e(Dh,Uuo),e(A,Huo),e(A,Gh),e(Gh,Efe),e(Efe,Juo),e(Gh,Yuo),e(Gh,vq),e(vq,Kuo),e(Gh,Zuo),e(A,epo),e(A,Oh),e(Oh,Cfe),e(Cfe,opo),e(Oh,rpo),e(Oh,Fq),e(Fq,tpo),e(Oh,apo),e(A,npo),e(A,Vh),e(Vh,wfe),e(wfe,spo),e(Vh,lpo),e(Vh,Tq),e(Tq,ipo),e(Vh,dpo),e(A,mpo),e(A,Xh),e(Xh,Afe),e(Afe,cpo),e(Xh,fpo),e(Xh,Mq),e(Mq,gpo),e(Xh,hpo),e(A,upo),e(A,zh),e(zh,Lfe),e(Lfe,ppo),e(zh,_po),e(zh,Eq),e(Eq,bpo),e(zh,vpo),e(A,Fpo),e(A,Qh),e(Qh,yfe),e(yfe,Tpo),e(Qh,Mpo),e(Qh,Cq),e(Cq,Epo),e(Qh,Cpo),e(A,wpo),e(A,Wh),e(Wh,xfe),e(xfe,Apo),e(Wh,Lpo),e(Wh,wq),e(wq,ypo),e(Wh,xpo),e(A,$po),e(A,Uh),e(Uh,$fe),e($fe,kpo),e(Uh,Spo),e(Uh,Aq),e(Aq,Rpo),e(Uh,Ppo),e(A,Bpo),e(A,Hh),e(Hh,kfe),e(kfe,Ipo),e(Hh,Npo),e(Hh,Lq),e(Lq,qpo),e(Hh,jpo),e(A,Dpo),e(A,Jh),e(Jh,Sfe),e(Sfe,Gpo),e(Jh,Opo),e(Jh,yq),e(yq,Vpo),e(Jh,Xpo),e(A,zpo),e(A,Yh),e(Yh,Rfe),e(Rfe,Qpo),e(Yh,Wpo),e(Yh,xq),e(xq,Upo),e(Yh,Hpo),e(A,Jpo),e(A,Kh),e(Kh,Pfe),e(Pfe,Ypo),e(Kh,Kpo),e(Kh,$q),e($q,Zpo),e(Kh,e_o),e(A,o_o),e(A,Zh),e(Zh,Bfe),e(Bfe,r_o),e(Zh,t_o),e(Zh,kq),e(kq,a_o),e(Zh,n_o),e(Pr,s_o),M(eu,Pr,null),e($o,l_o),e($o,ou),M(ix,ou,null),e(ou,i_o),e(ou,Ife),e(Ife,d_o),b(c,YZe,_),b(c,gd,_),e(gd,ru),e(ru,Nfe),M(dx,Nfe,null),e(gd,m_o),e(gd,qfe),e(qfe,c_o),b(c,KZe,_),b(c,ko,_),M(mx,ko,null),e(ko,f_o),e(ko,cx),e(cx,g_o),e(cx,Sq),e(Sq,h_o),e(cx,u_o),e(ko,p_o),e(ko,fx),e(fx,__o),e(fx,jfe),e(jfe,b_o),e(fx,v_o),e(ko,F_o),e(ko,Br),M(gx,Br,null),e(Br,T_o),e(Br,Dfe),e(Dfe,M_o),e(Br,E_o),e(Br,Ua),e(Ua,C_o),e(Ua,Gfe),e(Gfe,w_o),e(Ua,A_o),e(Ua,Ofe),e(Ofe,L_o),e(Ua,y_o),e(Ua,Vfe),e(Vfe,x_o),e(Ua,$_o),e(Br,k_o),e(Br,k),e(k,ns),e(ns,Xfe),e(Xfe,S_o),e(ns,R_o),e(ns,Rq),e(Rq,P_o),e(ns,B_o),e(ns,Pq),e(Pq,I_o),e(ns,N_o),e(k,q_o),e(k,ss),e(ss,zfe),e(zfe,j_o),e(ss,D_o),e(ss,Bq),e(Bq,G_o),e(ss,O_o),e(ss,Iq),e(Iq,V_o),e(ss,X_o),e(k,z_o),e(k,ls),e(ls,Qfe),e(Qfe,Q_o),e(ls,W_o),e(ls,Nq),e(Nq,U_o),e(ls,H_o),e(ls,qq),e(qq,J_o),e(ls,Y_o),e(k,K_o),e(k,tu),e(tu,Wfe),e(Wfe,Z_o),e(tu,e1o),e(tu,jq),e(jq,o1o),e(tu,r1o),e(k,t1o),e(k,is),e(is,Ufe),e(Ufe,a1o),e(is,n1o),e(is,Dq),e(Dq,s1o),e(is,l1o),e(is,Gq),e(Gq,i1o),e(is,d1o),e(k,m1o),e(k,au),e(au,Hfe),e(Hfe,c1o),e(au,f1o),e(au,Oq),e(Oq,g1o),e(au,h1o),e(k,u1o),e(k,nu),e(nu,Jfe),e(Jfe,p1o),e(nu,_1o),e(nu,Vq),e(Vq,b1o),e(nu,v1o),e(k,F1o),e(k,su),e(su,Yfe),e(Yfe,T1o),e(su,M1o),e(su,Xq),e(Xq,E1o),e(su,C1o),e(k,w1o),e(k,ds),e(ds,Kfe),e(Kfe,A1o),e(ds,L1o),e(ds,zq),e(zq,y1o),e(ds,x1o),e(ds,Qq),e(Qq,$1o),e(ds,k1o),e(k,S1o),e(k,ms),e(ms,Zfe),e(Zfe,R1o),e(ms,P1o),e(ms,Wq),e(Wq,B1o),e(ms,I1o),e(ms,Uq),e(Uq,N1o),e(ms,q1o),e(k,j1o),e(k,cs),e(cs,ege),e(ege,D1o),e(cs,G1o),e(cs,Hq),e(Hq,O1o),e(cs,V1o),e(cs,Jq),e(Jq,X1o),e(cs,z1o),e(k,Q1o),e(k,lu),e(lu,oge),e(oge,W1o),e(lu,U1o),e(lu,Yq),e(Yq,H1o),e(lu,J1o),e(k,Y1o),e(k,iu),e(iu,rge),e(rge,K1o),e(iu,Z1o),e(iu,Kq),e(Kq,e2o),e(iu,o2o),e(k,r2o),e(k,du),e(du,tge),e(tge,t2o),e(du,a2o),e(du,Zq),e(Zq,n2o),e(du,s2o),e(k,l2o),e(k,fs),e(fs,age),e(age,i2o),e(fs,d2o),e(fs,ej),e(ej,m2o),e(fs,c2o),e(fs,oj),e(oj,f2o),e(fs,g2o),e(k,h2o),e(k,mu),e(mu,nge),e(nge,u2o),e(mu,p2o),e(mu,rj),e(rj,_2o),e(mu,b2o),e(k,v2o),e(k,gs),e(gs,sge),e(sge,F2o),e(gs,T2o),e(gs,tj),e(tj,M2o),e(gs,E2o),e(gs,aj),e(aj,C2o),e(gs,w2o),e(k,A2o),e(k,hs),e(hs,lge),e(lge,L2o),e(hs,y2o),e(hs,nj),e(nj,x2o),e(hs,$2o),e(hs,sj),e(sj,k2o),e(hs,S2o),e(k,R2o),e(k,us),e(us,ige),e(ige,P2o),e(us,B2o),e(us,lj),e(lj,I2o),e(us,N2o),e(us,ij),e(ij,q2o),e(us,j2o),e(k,D2o),e(k,ps),e(ps,dge),e(dge,G2o),e(ps,O2o),e(ps,dj),e(dj,V2o),e(ps,X2o),e(ps,mj),e(mj,z2o),e(ps,Q2o),e(k,W2o),e(k,cu),e(cu,mge),e(mge,U2o),e(cu,H2o),e(cu,cj),e(cj,J2o),e(cu,Y2o),e(k,K2o),e(k,_s),e(_s,cge),e(cge,Z2o),e(_s,ebo),e(_s,fj),e(fj,obo),e(_s,rbo),e(_s,gj),e(gj,tbo),e(_s,abo),e(k,nbo),e(k,bs),e(bs,fge),e(fge,sbo),e(bs,lbo),e(bs,hj),e(hj,ibo),e(bs,dbo),e(bs,uj),e(uj,mbo),e(bs,cbo),e(k,fbo),e(k,vs),e(vs,gge),e(gge,gbo),e(vs,hbo),e(vs,pj),e(pj,ubo),e(vs,pbo),e(vs,_j),e(_j,_bo),e(vs,bbo),e(k,vbo),e(k,Fs),e(Fs,hge),e(hge,Fbo),e(Fs,Tbo),e(Fs,bj),e(bj,Mbo),e(Fs,Ebo),e(Fs,vj),e(vj,Cbo),e(Fs,wbo),e(k,Abo),e(k,Ts),e(Ts,uge),e(uge,Lbo),e(Ts,ybo),e(Ts,Fj),e(Fj,xbo),e(Ts,$bo),e(Ts,Tj),e(Tj,kbo),e(Ts,Sbo),e(k,Rbo),e(k,Ms),e(Ms,pge),e(pge,Pbo),e(Ms,Bbo),e(Ms,Mj),e(Mj,Ibo),e(Ms,Nbo),e(Ms,Ej),e(Ej,qbo),e(Ms,jbo),e(k,Dbo),e(k,Es),e(Es,_ge),e(_ge,Gbo),e(Es,Obo),e(Es,Cj),e(Cj,Vbo),e(Es,Xbo),e(Es,wj),e(wj,zbo),e(Es,Qbo),e(k,Wbo),e(k,fu),e(fu,bge),e(bge,Ubo),e(fu,Hbo),e(fu,Aj),e(Aj,Jbo),e(fu,Ybo),e(k,Kbo),e(k,Cs),e(Cs,vge),e(vge,Zbo),e(Cs,evo),e(Cs,Lj),e(Lj,ovo),e(Cs,rvo),e(Cs,yj),e(yj,tvo),e(Cs,avo),e(k,nvo),e(k,gu),e(gu,Fge),e(Fge,svo),e(gu,lvo),e(gu,xj),e(xj,ivo),e(gu,dvo),e(k,mvo),e(k,ws),e(ws,Tge),e(Tge,cvo),e(ws,fvo),e(ws,$j),e($j,gvo),e(ws,hvo),e(ws,kj),e(kj,uvo),e(ws,pvo),e(k,_vo),e(k,As),e(As,Mge),e(Mge,bvo),e(As,vvo),e(As,Sj),e(Sj,Fvo),e(As,Tvo),e(As,Rj),e(Rj,Mvo),e(As,Evo),e(k,Cvo),e(k,Ls),e(Ls,Ege),e(Ege,wvo),e(Ls,Avo),e(Ls,Pj),e(Pj,Lvo),e(Ls,yvo),e(Ls,Bj),e(Bj,xvo),e(Ls,$vo),e(k,kvo),e(k,hu),e(hu,Cge),e(Cge,Svo),e(hu,Rvo),e(hu,Ij),e(Ij,Pvo),e(hu,Bvo),e(k,Ivo),e(k,uu),e(uu,wge),e(wge,Nvo),e(uu,qvo),e(uu,Nj),e(Nj,jvo),e(uu,Dvo),e(k,Gvo),e(k,ys),e(ys,Age),e(Age,Ovo),e(ys,Vvo),e(ys,qj),e(qj,Xvo),e(ys,zvo),e(ys,jj),e(jj,Qvo),e(ys,Wvo),e(k,Uvo),e(k,xs),e(xs,Lge),e(Lge,Hvo),e(xs,Jvo),e(xs,Dj),e(Dj,Yvo),e(xs,Kvo),e(xs,Gj),e(Gj,Zvo),e(xs,eFo),e(k,oFo),e(k,$s),e($s,yge),e(yge,rFo),e($s,tFo),e($s,Oj),e(Oj,aFo),e($s,nFo),e($s,Vj),e(Vj,sFo),e($s,lFo),e(k,iFo),e(k,pu),e(pu,xge),e(xge,dFo),e(pu,mFo),e(pu,Xj),e(Xj,cFo),e(pu,fFo),e(k,gFo),e(k,ks),e(ks,$ge),e($ge,hFo),e(ks,uFo),e(ks,zj),e(zj,pFo),e(ks,_Fo),e(ks,Qj),e(Qj,bFo),e(ks,vFo),e(k,FFo),e(k,Ss),e(Ss,kge),e(kge,TFo),e(Ss,MFo),e(Ss,Wj),e(Wj,EFo),e(Ss,CFo),e(Ss,Uj),e(Uj,wFo),e(Ss,AFo),e(k,LFo),e(k,Rs),e(Rs,Sge),e(Sge,yFo),e(Rs,xFo),e(Rs,Hj),e(Hj,$Fo),e(Rs,kFo),e(Rs,Jj),e(Jj,SFo),e(Rs,RFo),e(k,PFo),e(k,Ps),e(Ps,Rge),e(Rge,BFo),e(Ps,IFo),e(Ps,Yj),e(Yj,NFo),e(Ps,qFo),e(Ps,Kj),e(Kj,jFo),e(Ps,DFo),e(k,GFo),e(k,Bs),e(Bs,Pge),e(Pge,OFo),e(Bs,VFo),e(Bs,Zj),e(Zj,XFo),e(Bs,zFo),e(Bs,eD),e(eD,QFo),e(Bs,WFo),e(k,UFo),e(k,Is),e(Is,Bge),e(Bge,HFo),e(Is,JFo),e(Is,oD),e(oD,YFo),e(Is,KFo),e(Is,rD),e(rD,ZFo),e(Is,eTo),e(k,oTo),e(k,Ns),e(Ns,Ige),e(Ige,rTo),e(Ns,tTo),e(Ns,tD),e(tD,aTo),e(Ns,nTo),e(Ns,aD),e(aD,sTo),e(Ns,lTo),e(k,iTo),e(k,qs),e(qs,Nge),e(Nge,dTo),e(qs,mTo),e(qs,nD),e(nD,cTo),e(qs,fTo),e(qs,sD),e(sD,gTo),e(qs,hTo),e(k,uTo),e(k,_u),e(_u,qge),e(qge,pTo),e(_u,_To),e(_u,lD),e(lD,bTo),e(_u,vTo),e(k,FTo),e(k,js),e(js,jge),e(jge,TTo),e(js,MTo),e(js,iD),e(iD,ETo),e(js,CTo),e(js,dD),e(dD,wTo),e(js,ATo),e(k,LTo),e(k,bu),e(bu,Dge),e(Dge,yTo),e(bu,xTo),e(bu,mD),e(mD,$To),e(bu,kTo),e(k,STo),e(k,vu),e(vu,Gge),e(Gge,RTo),e(vu,PTo),e(vu,cD),e(cD,BTo),e(vu,ITo),e(k,NTo),e(k,Ds),e(Ds,Oge),e(Oge,qTo),e(Ds,jTo),e(Ds,fD),e(fD,DTo),e(Ds,GTo),e(Ds,gD),e(gD,OTo),e(Ds,VTo),e(k,XTo),e(k,Gs),e(Gs,Vge),e(Vge,zTo),e(Gs,QTo),e(Gs,hD),e(hD,WTo),e(Gs,UTo),e(Gs,uD),e(uD,HTo),e(Gs,JTo),e(k,YTo),e(k,Os),e(Os,Xge),e(Xge,KTo),e(Os,ZTo),e(Os,pD),e(pD,eMo),e(Os,oMo),e(Os,_D),e(_D,rMo),e(Os,tMo),e(k,aMo),e(k,Fu),e(Fu,zge),e(zge,nMo),e(Fu,sMo),e(Fu,bD),e(bD,lMo),e(Fu,iMo),e(k,dMo),e(k,Vs),e(Vs,Qge),e(Qge,mMo),e(Vs,cMo),e(Vs,vD),e(vD,fMo),e(Vs,gMo),e(Vs,FD),e(FD,hMo),e(Vs,uMo),e(k,pMo),e(k,Xs),e(Xs,Wge),e(Wge,_Mo),e(Xs,bMo),e(Xs,TD),e(TD,vMo),e(Xs,FMo),e(Xs,MD),e(MD,TMo),e(Xs,MMo),e(k,EMo),e(k,zs),e(zs,Uge),e(Uge,CMo),e(zs,wMo),e(zs,ED),e(ED,AMo),e(zs,LMo),e(zs,CD),e(CD,yMo),e(zs,xMo),e(k,$Mo),e(k,Qs),e(Qs,Hge),e(Hge,kMo),e(Qs,SMo),e(Qs,wD),e(wD,RMo),e(Qs,PMo),e(Qs,AD),e(AD,BMo),e(Qs,IMo),e(k,NMo),e(k,Ws),e(Ws,Jge),e(Jge,qMo),e(Ws,jMo),e(Ws,LD),e(LD,DMo),e(Ws,GMo),e(Ws,yD),e(yD,OMo),e(Ws,VMo),e(k,XMo),e(k,Us),e(Us,Yge),e(Yge,zMo),e(Us,QMo),e(Us,xD),e(xD,WMo),e(Us,UMo),e(Us,$D),e($D,HMo),e(Us,JMo),e(k,YMo),e(k,Hs),e(Hs,Kge),e(Kge,KMo),e(Hs,ZMo),e(Hs,kD),e(kD,eEo),e(Hs,oEo),e(Hs,SD),e(SD,rEo),e(Hs,tEo),e(k,aEo),e(k,Js),e(Js,Zge),e(Zge,nEo),e(Js,sEo),e(Js,RD),e(RD,lEo),e(Js,iEo),e(Js,PD),e(PD,dEo),e(Js,mEo),e(k,cEo),e(k,Tu),e(Tu,ehe),e(ehe,fEo),e(Tu,gEo),e(Tu,BD),e(BD,hEo),e(Tu,uEo),e(k,pEo),e(k,Ys),e(Ys,ohe),e(ohe,_Eo),e(Ys,bEo),e(Ys,ID),e(ID,vEo),e(Ys,FEo),e(Ys,ND),e(ND,TEo),e(Ys,MEo),e(k,EEo),e(k,Ks),e(Ks,rhe),e(rhe,CEo),e(Ks,wEo),e(Ks,qD),e(qD,AEo),e(Ks,LEo),e(Ks,jD),e(jD,yEo),e(Ks,xEo),e(k,$Eo),e(k,Mu),e(Mu,the),e(the,kEo),e(Mu,SEo),e(Mu,DD),e(DD,REo),e(Mu,PEo),e(k,BEo),e(k,Eu),e(Eu,ahe),e(ahe,IEo),e(Eu,NEo),e(Eu,GD),e(GD,qEo),e(Eu,jEo),e(k,DEo),e(k,Cu),e(Cu,nhe),e(nhe,GEo),e(Cu,OEo),e(Cu,OD),e(OD,VEo),e(Cu,XEo),e(k,zEo),e(k,wu),e(wu,she),e(she,QEo),e(wu,WEo),e(wu,VD),e(VD,UEo),e(wu,HEo),e(k,JEo),e(k,Zs),e(Zs,lhe),e(lhe,YEo),e(Zs,KEo),e(Zs,XD),e(XD,ZEo),e(Zs,e4o),e(Zs,zD),e(zD,o4o),e(Zs,r4o),e(k,t4o),e(k,Au),e(Au,ihe),e(ihe,a4o),e(Au,n4o),e(Au,QD),e(QD,s4o),e(Au,l4o),e(k,i4o),e(k,el),e(el,dhe),e(dhe,d4o),e(el,m4o),e(el,WD),e(WD,c4o),e(el,f4o),e(el,UD),e(UD,g4o),e(el,h4o),e(k,u4o),e(k,ol),e(ol,mhe),e(mhe,p4o),e(ol,_4o),e(ol,HD),e(HD,b4o),e(ol,v4o),e(ol,JD),e(JD,F4o),e(ol,T4o),e(k,M4o),e(k,rl),e(rl,che),e(che,E4o),e(rl,C4o),e(rl,YD),e(YD,w4o),e(rl,A4o),e(rl,KD),e(KD,L4o),e(rl,y4o),e(k,x4o),e(k,tl),e(tl,fhe),e(fhe,$4o),e(tl,k4o),e(tl,ZD),e(ZD,S4o),e(tl,R4o),e(tl,eG),e(eG,P4o),e(tl,B4o),e(k,I4o),e(k,al),e(al,ghe),e(ghe,N4o),e(al,q4o),e(al,oG),e(oG,j4o),e(al,D4o),e(al,rG),e(rG,G4o),e(al,O4o),e(k,V4o),e(k,nl),e(nl,hhe),e(hhe,X4o),e(nl,z4o),e(nl,tG),e(tG,Q4o),e(nl,W4o),e(nl,aG),e(aG,U4o),e(nl,H4o),e(k,J4o),e(k,Lu),e(Lu,uhe),e(uhe,Y4o),e(Lu,K4o),e(Lu,nG),e(nG,Z4o),e(Lu,eCo),e(k,oCo),e(k,yu),e(yu,phe),e(phe,rCo),e(yu,tCo),e(yu,sG),e(sG,aCo),e(yu,nCo),e(k,sCo),e(k,sl),e(sl,_he),e(_he,lCo),e(sl,iCo),e(sl,lG),e(lG,dCo),e(sl,mCo),e(sl,iG),e(iG,cCo),e(sl,fCo),e(k,gCo),e(k,ll),e(ll,bhe),e(bhe,hCo),e(ll,uCo),e(ll,dG),e(dG,pCo),e(ll,_Co),e(ll,mG),e(mG,bCo),e(ll,vCo),e(k,FCo),e(k,il),e(il,vhe),e(vhe,TCo),e(il,MCo),e(il,cG),e(cG,ECo),e(il,CCo),e(il,fG),e(fG,wCo),e(il,ACo),e(k,LCo),e(k,xu),e(xu,Fhe),e(Fhe,yCo),e(xu,xCo),e(xu,gG),e(gG,$Co),e(xu,kCo),e(k,SCo),e(k,$u),e($u,The),e(The,RCo),e($u,PCo),e($u,hG),e(hG,BCo),e($u,ICo),e(k,NCo),e(k,ku),e(ku,Mhe),e(Mhe,qCo),e(ku,jCo),e(ku,uG),e(uG,DCo),e(ku,GCo),e(k,OCo),e(k,dl),e(dl,Ehe),e(Ehe,VCo),e(dl,XCo),e(dl,pG),e(pG,zCo),e(dl,QCo),e(dl,_G),e(_G,WCo),e(dl,UCo),e(k,HCo),e(k,ml),e(ml,Che),e(Che,JCo),e(ml,YCo),e(ml,bG),e(bG,KCo),e(ml,ZCo),e(ml,vG),e(vG,e3o),e(ml,o3o),e(k,r3o),e(k,Su),e(Su,whe),e(whe,t3o),e(Su,a3o),e(Su,FG),e(FG,n3o),e(Su,s3o),e(k,l3o),e(k,Ru),e(Ru,Ahe),e(Ahe,i3o),e(Ru,d3o),e(Ru,TG),e(TG,m3o),e(Ru,c3o),e(k,f3o),e(k,Pu),e(Pu,Lhe),e(Lhe,g3o),e(Pu,h3o),e(Pu,MG),e(MG,u3o),e(Pu,p3o),e(k,_3o),e(k,cl),e(cl,yhe),e(yhe,b3o),e(cl,v3o),e(cl,EG),e(EG,F3o),e(cl,T3o),e(cl,CG),e(CG,M3o),e(cl,E3o),e(k,C3o),e(k,fl),e(fl,xhe),e(xhe,w3o),e(fl,A3o),e(fl,wG),e(wG,L3o),e(fl,y3o),e(fl,AG),e(AG,x3o),e(fl,$3o),e(k,k3o),e(k,Bu),e(Bu,$he),e($he,S3o),e(Bu,R3o),e(Bu,LG),e(LG,P3o),e(Bu,B3o),e(k,I3o),e(k,Iu),e(Iu,khe),e(khe,N3o),e(Iu,q3o),e(Iu,yG),e(yG,j3o),e(Iu,D3o),e(k,G3o),e(k,gl),e(gl,She),e(She,O3o),e(gl,V3o),e(gl,xG),e(xG,X3o),e(gl,z3o),e(gl,$G),e($G,Q3o),e(gl,W3o),e(k,U3o),e(k,hl),e(hl,Rhe),e(Rhe,H3o),e(hl,J3o),e(hl,kG),e(kG,Y3o),e(hl,K3o),e(hl,SG),e(SG,Z3o),e(hl,e5o),e(k,o5o),e(k,ul),e(ul,Phe),e(Phe,r5o),e(ul,t5o),e(ul,RG),e(RG,a5o),e(ul,n5o),e(ul,PG),e(PG,s5o),e(ul,l5o),e(k,i5o),e(k,pl),e(pl,Bhe),e(Bhe,d5o),e(pl,m5o),e(pl,BG),e(BG,c5o),e(pl,f5o),e(pl,IG),e(IG,g5o),e(pl,h5o),e(Br,u5o),M(Nu,Br,null),e(ko,p5o),e(ko,qu),M(hx,qu,null),e(qu,_5o),e(qu,Ihe),e(Ihe,b5o),b(c,ZZe,_),b(c,hd,_),e(hd,ju),e(ju,Nhe),M(ux,Nhe,null),e(hd,v5o),e(hd,qhe),e(qhe,F5o),b(c,eeo,_),b(c,So,_),M(px,So,null),e(So,T5o),e(So,_x),e(_x,M5o),e(_x,NG),e(NG,E5o),e(_x,C5o),e(So,w5o),e(So,bx),e(bx,A5o),e(bx,jhe),e(jhe,L5o),e(bx,y5o),e(So,x5o),e(So,Ye),M(vx,Ye,null),e(Ye,$5o),e(Ye,Dhe),e(Dhe,k5o),e(Ye,S5o),e(Ye,Ha),e(Ha,R5o),e(Ha,Ghe),e(Ghe,P5o),e(Ha,B5o),e(Ha,Ohe),e(Ohe,I5o),e(Ha,N5o),e(Ha,Vhe),e(Vhe,q5o),e(Ha,j5o),e(Ye,D5o),e(Ye,z),e(z,Du),e(Du,Xhe),e(Xhe,G5o),e(Du,O5o),e(Du,qG),e(qG,V5o),e(Du,X5o),e(z,z5o),e(z,Gu),e(Gu,zhe),e(zhe,Q5o),e(Gu,W5o),e(Gu,jG),e(jG,U5o),e(Gu,H5o),e(z,J5o),e(z,Ou),e(Ou,Qhe),e(Qhe,Y5o),e(Ou,K5o),e(Ou,DG),e(DG,Z5o),e(Ou,e0o),e(z,o0o),e(z,Vu),e(Vu,Whe),e(Whe,r0o),e(Vu,t0o),e(Vu,GG),e(GG,a0o),e(Vu,n0o),e(z,s0o),e(z,Xu),e(Xu,Uhe),e(Uhe,l0o),e(Xu,i0o),e(Xu,OG),e(OG,d0o),e(Xu,m0o),e(z,c0o),e(z,zu),e(zu,Hhe),e(Hhe,f0o),e(zu,g0o),e(zu,VG),e(VG,h0o),e(zu,u0o),e(z,p0o),e(z,Qu),e(Qu,Jhe),e(Jhe,_0o),e(Qu,b0o),e(Qu,XG),e(XG,v0o),e(Qu,F0o),e(z,T0o),e(z,Wu),e(Wu,Yhe),e(Yhe,M0o),e(Wu,E0o),e(Wu,zG),e(zG,C0o),e(Wu,w0o),e(z,A0o),e(z,Uu),e(Uu,Khe),e(Khe,L0o),e(Uu,y0o),e(Uu,QG),e(QG,x0o),e(Uu,$0o),e(z,k0o),e(z,Hu),e(Hu,Zhe),e(Zhe,S0o),e(Hu,R0o),e(Hu,WG),e(WG,P0o),e(Hu,B0o),e(z,I0o),e(z,Ju),e(Ju,eue),e(eue,N0o),e(Ju,q0o),e(Ju,UG),e(UG,j0o),e(Ju,D0o),e(z,G0o),e(z,Yu),e(Yu,oue),e(oue,O0o),e(Yu,V0o),e(Yu,HG),e(HG,X0o),e(Yu,z0o),e(z,Q0o),e(z,Ku),e(Ku,rue),e(rue,W0o),e(Ku,U0o),e(Ku,JG),e(JG,H0o),e(Ku,J0o),e(z,Y0o),e(z,Zu),e(Zu,tue),e(tue,K0o),e(Zu,Z0o),e(Zu,YG),e(YG,ewo),e(Zu,owo),e(z,rwo),e(z,ep),e(ep,aue),e(aue,two),e(ep,awo),e(ep,KG),e(KG,nwo),e(ep,swo),e(z,lwo),e(z,op),e(op,nue),e(nue,iwo),e(op,dwo),e(op,ZG),e(ZG,mwo),e(op,cwo),e(z,fwo),e(z,rp),e(rp,sue),e(sue,gwo),e(rp,hwo),e(rp,eO),e(eO,uwo),e(rp,pwo),e(z,_wo),e(z,tp),e(tp,lue),e(lue,bwo),e(tp,vwo),e(tp,oO),e(oO,Fwo),e(tp,Two),e(z,Mwo),e(z,ap),e(ap,iue),e(iue,Ewo),e(ap,Cwo),e(ap,rO),e(rO,wwo),e(ap,Awo),e(z,Lwo),e(z,np),e(np,due),e(due,ywo),e(np,xwo),e(np,tO),e(tO,$wo),e(np,kwo),e(z,Swo),e(z,sp),e(sp,mue),e(mue,Rwo),e(sp,Pwo),e(sp,aO),e(aO,Bwo),e(sp,Iwo),e(z,Nwo),e(z,lp),e(lp,cue),e(cue,qwo),e(lp,jwo),e(lp,nO),e(nO,Dwo),e(lp,Gwo),e(z,Owo),e(z,ip),e(ip,fue),e(fue,Vwo),e(ip,Xwo),e(ip,sO),e(sO,zwo),e(ip,Qwo),e(z,Wwo),e(z,dp),e(dp,gue),e(gue,Uwo),e(dp,Hwo),e(dp,lO),e(lO,Jwo),e(dp,Ywo),e(z,Kwo),e(z,mp),e(mp,hue),e(hue,Zwo),e(mp,eAo),e(mp,iO),e(iO,oAo),e(mp,rAo),e(z,tAo),e(z,cp),e(cp,uue),e(uue,aAo),e(cp,nAo),e(cp,dO),e(dO,sAo),e(cp,lAo),e(z,iAo),e(z,fp),e(fp,pue),e(pue,dAo),e(fp,mAo),e(fp,mO),e(mO,cAo),e(fp,fAo),e(z,gAo),e(z,gp),e(gp,_ue),e(_ue,hAo),e(gp,uAo),e(gp,cO),e(cO,pAo),e(gp,_Ao),e(z,bAo),e(z,hp),e(hp,bue),e(bue,vAo),e(hp,FAo),e(hp,fO),e(fO,TAo),e(hp,MAo),e(z,EAo),e(z,up),e(up,vue),e(vue,CAo),e(up,wAo),e(up,gO),e(gO,AAo),e(up,LAo),e(z,yAo),e(z,pp),e(pp,Fue),e(Fue,xAo),e(pp,$Ao),e(pp,hO),e(hO,kAo),e(pp,SAo),e(z,RAo),e(z,_p),e(_p,Tue),e(Tue,PAo),e(_p,BAo),e(_p,uO),e(uO,IAo),e(_p,NAo),e(z,qAo),e(z,bp),e(bp,Mue),e(Mue,jAo),e(bp,DAo),e(bp,pO),e(pO,GAo),e(bp,OAo),e(z,VAo),e(z,vp),e(vp,Eue),e(Eue,XAo),e(vp,zAo),e(vp,_O),e(_O,QAo),e(vp,WAo),e(z,UAo),e(z,Fp),e(Fp,Cue),e(Cue,HAo),e(Fp,JAo),e(Fp,bO),e(bO,YAo),e(Fp,KAo),e(z,ZAo),e(z,Tp),e(Tp,wue),e(wue,e6o),e(Tp,o6o),e(Tp,vO),e(vO,r6o),e(Tp,t6o),e(z,a6o),e(z,Mp),e(Mp,Aue),e(Aue,n6o),e(Mp,s6o),e(Mp,FO),e(FO,l6o),e(Mp,i6o),e(z,d6o),e(z,Ep),e(Ep,Lue),e(Lue,m6o),e(Ep,c6o),e(Ep,TO),e(TO,f6o),e(Ep,g6o),e(z,h6o),e(z,Cp),e(Cp,yue),e(yue,u6o),e(Cp,p6o),e(Cp,MO),e(MO,_6o),e(Cp,b6o),e(z,v6o),e(z,wp),e(wp,xue),e(xue,F6o),e(wp,T6o),e(wp,EO),e(EO,M6o),e(wp,E6o),e(z,C6o),e(z,Ap),e(Ap,$ue),e($ue,w6o),e(Ap,A6o),e(Ap,CO),e(CO,L6o),e(Ap,y6o),e(z,x6o),e(z,Lp),e(Lp,kue),e(kue,$6o),e(Lp,k6o),e(Lp,wO),e(wO,S6o),e(Lp,R6o),e(Ye,P6o),M(yp,Ye,null),e(Ye,B6o),M(xp,Ye,null),e(So,I6o),e(So,$p),M(Fx,$p,null),e($p,N6o),e($p,Sue),e(Sue,q6o),b(c,oeo,_),b(c,ud,_),e(ud,kp),e(kp,Rue),M(Tx,Rue,null),e(ud,j6o),e(ud,Pue),e(Pue,D6o),b(c,reo,_),b(c,Ro,_),M(Mx,Ro,null),e(Ro,G6o),e(Ro,Ex),e(Ex,O6o),e(Ex,AO),e(AO,V6o),e(Ex,X6o),e(Ro,z6o),e(Ro,Cx),e(Cx,Q6o),e(Cx,Bue),e(Bue,W6o),e(Cx,U6o),e(Ro,H6o),e(Ro,Ke),M(wx,Ke,null),e(Ke,J6o),e(Ke,Iue),e(Iue,Y6o),e(Ke,K6o),e(Ke,pd),e(pd,Z6o),e(pd,Nue),e(Nue,e7o),e(pd,o7o),e(pd,que),e(que,r7o),e(pd,t7o),e(Ke,a7o),e(Ke,le),e(le,Sp),e(Sp,jue),e(jue,n7o),e(Sp,s7o),e(Sp,LO),e(LO,l7o),e(Sp,i7o),e(le,d7o),e(le,Rp),e(Rp,Due),e(Due,m7o),e(Rp,c7o),e(Rp,yO),e(yO,f7o),e(Rp,g7o),e(le,h7o),e(le,Pp),e(Pp,Gue),e(Gue,u7o),e(Pp,p7o),e(Pp,xO),e(xO,_7o),e(Pp,b7o),e(le,v7o),e(le,Bp),e(Bp,Oue),e(Oue,F7o),e(Bp,T7o),e(Bp,$O),e($O,M7o),e(Bp,E7o),e(le,C7o),e(le,Ip),e(Ip,Vue),e(Vue,w7o),e(Ip,A7o),e(Ip,kO),e(kO,L7o),e(Ip,y7o),e(le,x7o),e(le,Np),e(Np,Xue),e(Xue,$7o),e(Np,k7o),e(Np,SO),e(SO,S7o),e(Np,R7o),e(le,P7o),e(le,qp),e(qp,zue),e(zue,B7o),e(qp,I7o),e(qp,RO),e(RO,N7o),e(qp,q7o),e(le,j7o),e(le,jp),e(jp,Que),e(Que,D7o),e(jp,G7o),e(jp,PO),e(PO,O7o),e(jp,V7o),e(le,X7o),e(le,Dp),e(Dp,Wue),e(Wue,z7o),e(Dp,Q7o),e(Dp,BO),e(BO,W7o),e(Dp,U7o),e(le,H7o),e(le,Gp),e(Gp,Uue),e(Uue,J7o),e(Gp,Y7o),e(Gp,IO),e(IO,K7o),e(Gp,Z7o),e(le,eLo),e(le,Op),e(Op,Hue),e(Hue,oLo),e(Op,rLo),e(Op,NO),e(NO,tLo),e(Op,aLo),e(le,nLo),e(le,Vp),e(Vp,Jue),e(Jue,sLo),e(Vp,lLo),e(Vp,qO),e(qO,iLo),e(Vp,dLo),e(le,mLo),e(le,Xp),e(Xp,Yue),e(Yue,cLo),e(Xp,fLo),e(Xp,jO),e(jO,gLo),e(Xp,hLo),e(le,uLo),e(le,zp),e(zp,Kue),e(Kue,pLo),e(zp,_Lo),e(zp,DO),e(DO,bLo),e(zp,vLo),e(le,FLo),e(le,Qp),e(Qp,Zue),e(Zue,TLo),e(Qp,MLo),e(Qp,GO),e(GO,ELo),e(Qp,CLo),e(le,wLo),e(le,Wp),e(Wp,epe),e(epe,ALo),e(Wp,LLo),e(Wp,OO),e(OO,yLo),e(Wp,xLo),e(le,$Lo),e(le,Up),e(Up,ope),e(ope,kLo),e(Up,SLo),e(Up,VO),e(VO,RLo),e(Up,PLo),e(le,BLo),e(le,Hp),e(Hp,rpe),e(rpe,ILo),e(Hp,NLo),e(Hp,XO),e(XO,qLo),e(Hp,jLo),e(le,DLo),e(le,Jp),e(Jp,tpe),e(tpe,GLo),e(Jp,OLo),e(Jp,zO),e(zO,VLo),e(Jp,XLo),e(le,zLo),e(le,Yp),e(Yp,ape),e(ape,QLo),e(Yp,WLo),e(Yp,QO),e(QO,ULo),e(Yp,HLo),e(le,JLo),e(le,Kp),e(Kp,npe),e(npe,YLo),e(Kp,KLo),e(Kp,WO),e(WO,ZLo),e(Kp,eyo),e(le,oyo),e(le,Zp),e(Zp,spe),e(spe,ryo),e(Zp,tyo),e(Zp,UO),e(UO,ayo),e(Zp,nyo),e(Ke,syo),M(e_,Ke,null),e(Ke,lyo),M(o_,Ke,null),e(Ro,iyo),e(Ro,r_),M(Ax,r_,null),e(r_,dyo),e(r_,lpe),e(lpe,myo),b(c,teo,_),b(c,_d,_),e(_d,t_),e(t_,ipe),M(Lx,ipe,null),e(_d,cyo),e(_d,dpe),e(dpe,fyo),b(c,aeo,_),b(c,Po,_),M(yx,Po,null),e(Po,gyo),e(Po,bd),e(bd,hyo),e(bd,HO),e(HO,uyo),e(bd,pyo),e(bd,JO),e(JO,_yo),e(bd,byo),e(Po,vyo),e(Po,xx),e(xx,Fyo),e(xx,mpe),e(mpe,Tyo),e(xx,Myo),e(Po,Eyo),e(Po,_t),M($x,_t,null),e(_t,Cyo),e(_t,cpe),e(cpe,wyo),e(_t,Ayo),e(_t,vd),e(vd,Lyo),e(vd,fpe),e(fpe,yyo),e(vd,xyo),e(vd,YO),e(YO,$yo),e(vd,kyo),e(_t,Syo),M(a_,_t,null),e(Po,Ryo),e(Po,Ze),M(kx,Ze,null),e(Ze,Pyo),e(Ze,gpe),e(gpe,Byo),e(Ze,Iyo),e(Ze,Ja),e(Ja,Nyo),e(Ja,hpe),e(hpe,qyo),e(Ja,jyo),e(Ja,upe),e(upe,Dyo),e(Ja,Gyo),e(Ja,ppe),e(ppe,Oyo),e(Ja,Vyo),e(Ze,Xyo),e(Ze,y),e(y,n_),e(n_,_pe),e(_pe,zyo),e(n_,Qyo),e(n_,KO),e(KO,Wyo),e(n_,Uyo),e(y,Hyo),e(y,s_),e(s_,bpe),e(bpe,Jyo),e(s_,Yyo),e(s_,ZO),e(ZO,Kyo),e(s_,Zyo),e(y,e8o),e(y,l_),e(l_,vpe),e(vpe,o8o),e(l_,r8o),e(l_,eV),e(eV,t8o),e(l_,a8o),e(y,n8o),e(y,i_),e(i_,Fpe),e(Fpe,s8o),e(i_,l8o),e(i_,oV),e(oV,i8o),e(i_,d8o),e(y,m8o),e(y,d_),e(d_,Tpe),e(Tpe,c8o),e(d_,f8o),e(d_,rV),e(rV,g8o),e(d_,h8o),e(y,u8o),e(y,m_),e(m_,Mpe),e(Mpe,p8o),e(m_,_8o),e(m_,tV),e(tV,b8o),e(m_,v8o),e(y,F8o),e(y,c_),e(c_,Epe),e(Epe,T8o),e(c_,M8o),e(c_,aV),e(aV,E8o),e(c_,C8o),e(y,w8o),e(y,f_),e(f_,Cpe),e(Cpe,A8o),e(f_,L8o),e(f_,nV),e(nV,y8o),e(f_,x8o),e(y,$8o),e(y,g_),e(g_,wpe),e(wpe,k8o),e(g_,S8o),e(g_,sV),e(sV,R8o),e(g_,P8o),e(y,B8o),e(y,h_),e(h_,Ape),e(Ape,I8o),e(h_,N8o),e(h_,lV),e(lV,q8o),e(h_,j8o),e(y,D8o),e(y,u_),e(u_,Lpe),e(Lpe,G8o),e(u_,O8o),e(u_,iV),e(iV,V8o),e(u_,X8o),e(y,z8o),e(y,p_),e(p_,ype),e(ype,Q8o),e(p_,W8o),e(p_,dV),e(dV,U8o),e(p_,H8o),e(y,J8o),e(y,__),e(__,xpe),e(xpe,Y8o),e(__,K8o),e(__,mV),e(mV,Z8o),e(__,e9o),e(y,o9o),e(y,b_),e(b_,$pe),e($pe,r9o),e(b_,t9o),e(b_,cV),e(cV,a9o),e(b_,n9o),e(y,s9o),e(y,v_),e(v_,kpe),e(kpe,l9o),e(v_,i9o),e(v_,fV),e(fV,d9o),e(v_,m9o),e(y,c9o),e(y,F_),e(F_,Spe),e(Spe,f9o),e(F_,g9o),e(F_,gV),e(gV,h9o),e(F_,u9o),e(y,p9o),e(y,T_),e(T_,Rpe),e(Rpe,_9o),e(T_,b9o),e(T_,hV),e(hV,v9o),e(T_,F9o),e(y,T9o),e(y,M_),e(M_,Ppe),e(Ppe,M9o),e(M_,E9o),e(M_,uV),e(uV,C9o),e(M_,w9o),e(y,A9o),e(y,E_),e(E_,Bpe),e(Bpe,L9o),e(E_,y9o),e(E_,pV),e(pV,x9o),e(E_,$9o),e(y,k9o),e(y,C_),e(C_,Ipe),e(Ipe,S9o),e(C_,R9o),e(C_,_V),e(_V,P9o),e(C_,B9o),e(y,I9o),e(y,w_),e(w_,Npe),e(Npe,N9o),e(w_,q9o),e(w_,bV),e(bV,j9o),e(w_,D9o),e(y,G9o),e(y,A_),e(A_,qpe),e(qpe,O9o),e(A_,V9o),e(A_,vV),e(vV,X9o),e(A_,z9o),e(y,Q9o),e(y,L_),e(L_,jpe),e(jpe,W9o),e(L_,U9o),e(L_,FV),e(FV,H9o),e(L_,J9o),e(y,Y9o),e(y,y_),e(y_,Dpe),e(Dpe,K9o),e(y_,Z9o),e(y_,TV),e(TV,exo),e(y_,oxo),e(y,rxo),e(y,x_),e(x_,Gpe),e(Gpe,txo),e(x_,axo),e(x_,MV),e(MV,nxo),e(x_,sxo),e(y,lxo),e(y,$_),e($_,Ope),e(Ope,ixo),e($_,dxo),e($_,EV),e(EV,mxo),e($_,cxo),e(y,fxo),e(y,k_),e(k_,Vpe),e(Vpe,gxo),e(k_,hxo),e(k_,CV),e(CV,uxo),e(k_,pxo),e(y,_xo),e(y,S_),e(S_,Xpe),e(Xpe,bxo),e(S_,vxo),e(S_,wV),e(wV,Fxo),e(S_,Txo),e(y,Mxo),e(y,R_),e(R_,zpe),e(zpe,Exo),e(R_,Cxo),e(R_,AV),e(AV,wxo),e(R_,Axo),e(y,Lxo),e(y,P_),e(P_,Qpe),e(Qpe,yxo),e(P_,xxo),e(P_,LV),e(LV,$xo),e(P_,kxo),e(y,Sxo),e(y,B_),e(B_,Wpe),e(Wpe,Rxo),e(B_,Pxo),e(B_,yV),e(yV,Bxo),e(B_,Ixo),e(y,Nxo),e(y,I_),e(I_,Upe),e(Upe,qxo),e(I_,jxo),e(I_,xV),e(xV,Dxo),e(I_,Gxo),e(y,Oxo),e(y,N_),e(N_,Hpe),e(Hpe,Vxo),e(N_,Xxo),e(N_,$V),e($V,zxo),e(N_,Qxo),e(y,Wxo),e(y,q_),e(q_,Jpe),e(Jpe,Uxo),e(q_,Hxo),e(q_,kV),e(kV,Jxo),e(q_,Yxo),e(y,Kxo),e(y,j_),e(j_,Ype),e(Ype,Zxo),e(j_,e$o),e(j_,SV),e(SV,o$o),e(j_,r$o),e(y,t$o),e(y,D_),e(D_,Kpe),e(Kpe,a$o),e(D_,n$o),e(D_,RV),e(RV,s$o),e(D_,l$o),e(y,i$o),e(y,G_),e(G_,Zpe),e(Zpe,d$o),e(G_,m$o),e(G_,PV),e(PV,c$o),e(G_,f$o),e(y,g$o),e(y,O_),e(O_,e_e),e(e_e,h$o),e(O_,u$o),e(O_,BV),e(BV,p$o),e(O_,_$o),e(y,b$o),e(y,V_),e(V_,o_e),e(o_e,v$o),e(V_,F$o),e(V_,IV),e(IV,T$o),e(V_,M$o),e(y,E$o),e(y,_l),e(_l,r_e),e(r_e,C$o),e(_l,w$o),e(_l,NV),e(NV,A$o),e(_l,L$o),e(_l,qV),e(qV,y$o),e(_l,x$o),e(y,$$o),e(y,X_),e(X_,t_e),e(t_e,k$o),e(X_,S$o),e(X_,jV),e(jV,R$o),e(X_,P$o),e(y,B$o),e(y,z_),e(z_,a_e),e(a_e,I$o),e(z_,N$o),e(z_,DV),e(DV,q$o),e(z_,j$o),e(y,D$o),e(y,Q_),e(Q_,n_e),e(n_e,G$o),e(Q_,O$o),e(Q_,GV),e(GV,V$o),e(Q_,X$o),e(y,z$o),e(y,W_),e(W_,s_e),e(s_e,Q$o),e(W_,W$o),e(W_,OV),e(OV,U$o),e(W_,H$o),e(y,J$o),e(y,U_),e(U_,l_e),e(l_e,Y$o),e(U_,K$o),e(U_,VV),e(VV,Z$o),e(U_,eko),e(y,oko),e(y,H_),e(H_,i_e),e(i_e,rko),e(H_,tko),e(H_,XV),e(XV,ako),e(H_,nko),e(y,sko),e(y,J_),e(J_,d_e),e(d_e,lko),e(J_,iko),e(J_,zV),e(zV,dko),e(J_,mko),e(y,cko),e(y,Y_),e(Y_,m_e),e(m_e,fko),e(Y_,gko),e(Y_,QV),e(QV,hko),e(Y_,uko),e(y,pko),e(y,K_),e(K_,c_e),e(c_e,_ko),e(K_,bko),e(K_,WV),e(WV,vko),e(K_,Fko),e(y,Tko),e(y,Z_),e(Z_,f_e),e(f_e,Mko),e(Z_,Eko),e(Z_,UV),e(UV,Cko),e(Z_,wko),e(y,Ako),e(y,e1),e(e1,g_e),e(g_e,Lko),e(e1,yko),e(e1,HV),e(HV,xko),e(e1,$ko),e(y,kko),e(y,o1),e(o1,h_e),e(h_e,Sko),e(o1,Rko),e(o1,JV),e(JV,Pko),e(o1,Bko),e(y,Iko),e(y,r1),e(r1,u_e),e(u_e,Nko),e(r1,qko),e(r1,YV),e(YV,jko),e(r1,Dko),e(y,Gko),e(y,t1),e(t1,p_e),e(p_e,Oko),e(t1,Vko),e(t1,KV),e(KV,Xko),e(t1,zko),e(y,Qko),e(y,a1),e(a1,__e),e(__e,Wko),e(a1,Uko),e(a1,ZV),e(ZV,Hko),e(a1,Jko),e(y,Yko),e(y,n1),e(n1,b_e),e(b_e,Kko),e(n1,Zko),e(n1,eX),e(eX,eSo),e(n1,oSo),e(y,rSo),e(y,s1),e(s1,v_e),e(v_e,tSo),e(s1,aSo),e(s1,oX),e(oX,nSo),e(s1,sSo),e(y,lSo),e(y,l1),e(l1,F_e),e(F_e,iSo),e(l1,dSo),e(l1,rX),e(rX,mSo),e(l1,cSo),e(y,fSo),e(y,i1),e(i1,T_e),e(T_e,gSo),e(i1,hSo),e(i1,tX),e(tX,uSo),e(i1,pSo),e(y,_So),e(y,d1),e(d1,M_e),e(M_e,bSo),e(d1,vSo),e(d1,aX),e(aX,FSo),e(d1,TSo),e(y,MSo),e(y,m1),e(m1,E_e),e(E_e,ESo),e(m1,CSo),e(m1,nX),e(nX,wSo),e(m1,ASo),e(y,LSo),e(y,c1),e(c1,C_e),e(C_e,ySo),e(c1,xSo),e(c1,sX),e(sX,$So),e(c1,kSo),e(y,SSo),e(y,f1),e(f1,w_e),e(w_e,RSo),e(f1,PSo),e(f1,lX),e(lX,BSo),e(f1,ISo),e(y,NSo),e(y,g1),e(g1,A_e),e(A_e,qSo),e(g1,jSo),e(g1,iX),e(iX,DSo),e(g1,GSo),e(y,OSo),e(y,h1),e(h1,L_e),e(L_e,VSo),e(h1,XSo),e(h1,dX),e(dX,zSo),e(h1,QSo),e(y,WSo),e(y,u1),e(u1,y_e),e(y_e,USo),e(u1,HSo),e(u1,mX),e(mX,JSo),e(u1,YSo),e(y,KSo),e(y,p1),e(p1,x_e),e(x_e,ZSo),e(p1,eRo),e(p1,cX),e(cX,oRo),e(p1,rRo),e(y,tRo),e(y,_1),e(_1,$_e),e($_e,aRo),e(_1,nRo),e(_1,fX),e(fX,sRo),e(_1,lRo),e(y,iRo),e(y,b1),e(b1,k_e),e(k_e,dRo),e(b1,mRo),e(b1,gX),e(gX,cRo),e(b1,fRo),e(y,gRo),e(y,v1),e(v1,S_e),e(S_e,hRo),e(v1,uRo),e(v1,hX),e(hX,pRo),e(v1,_Ro),e(y,bRo),e(y,F1),e(F1,R_e),e(R_e,vRo),e(F1,FRo),e(F1,uX),e(uX,TRo),e(F1,MRo),e(y,ERo),e(y,T1),e(T1,P_e),e(P_e,CRo),e(T1,wRo),e(T1,pX),e(pX,ARo),e(T1,LRo),e(y,yRo),e(y,M1),e(M1,B_e),e(B_e,xRo),e(M1,$Ro),e(M1,_X),e(_X,kRo),e(M1,SRo),e(y,RRo),e(y,E1),e(E1,I_e),e(I_e,PRo),e(E1,BRo),e(E1,bX),e(bX,IRo),e(E1,NRo),e(y,qRo),e(y,C1),e(C1,N_e),e(N_e,jRo),e(C1,DRo),e(C1,vX),e(vX,GRo),e(C1,ORo),e(y,VRo),e(y,w1),e(w1,q_e),e(q_e,XRo),e(w1,zRo),e(w1,FX),e(FX,QRo),e(w1,WRo),e(y,URo),e(y,A1),e(A1,j_e),e(j_e,HRo),e(A1,JRo),e(A1,TX),e(TX,YRo),e(A1,KRo),e(y,ZRo),e(y,L1),e(L1,D_e),e(D_e,ePo),e(L1,oPo),e(L1,MX),e(MX,rPo),e(L1,tPo),e(y,aPo),e(y,y1),e(y1,G_e),e(G_e,nPo),e(y1,sPo),e(y1,EX),e(EX,lPo),e(y1,iPo),e(y,dPo),e(y,x1),e(x1,O_e),e(O_e,mPo),e(x1,cPo),e(x1,CX),e(CX,fPo),e(x1,gPo),e(y,hPo),e(y,$1),e($1,V_e),e(V_e,uPo),e($1,pPo),e($1,wX),e(wX,_Po),e($1,bPo),e(y,vPo),e(y,k1),e(k1,X_e),e(X_e,FPo),e(k1,TPo),e(k1,AX),e(AX,MPo),e(k1,EPo),e(y,CPo),e(y,S1),e(S1,z_e),e(z_e,wPo),e(S1,APo),e(S1,LX),e(LX,LPo),e(S1,yPo),e(y,xPo),e(y,R1),e(R1,Q_e),e(Q_e,$Po),e(R1,kPo),e(R1,yX),e(yX,SPo),e(R1,RPo),e(y,PPo),e(y,P1),e(P1,W_e),e(W_e,BPo),e(P1,IPo),e(P1,xX),e(xX,NPo),e(P1,qPo),e(y,jPo),e(y,B1),e(B1,U_e),e(U_e,DPo),e(B1,GPo),e(B1,$X),e($X,OPo),e(B1,VPo),e(y,XPo),e(y,I1),e(I1,H_e),e(H_e,zPo),e(I1,QPo),e(I1,kX),e(kX,WPo),e(I1,UPo),e(y,HPo),e(y,N1),e(N1,J_e),e(J_e,JPo),e(N1,YPo),e(N1,SX),e(SX,KPo),e(N1,ZPo),e(y,eBo),e(y,q1),e(q1,Y_e),e(Y_e,oBo),e(q1,rBo),e(q1,RX),e(RX,tBo),e(q1,aBo),e(y,nBo),e(y,j1),e(j1,K_e),e(K_e,sBo),e(j1,lBo),e(j1,PX),e(PX,iBo),e(j1,dBo),e(y,mBo),e(y,D1),e(D1,Z_e),e(Z_e,cBo),e(D1,fBo),e(D1,BX),e(BX,gBo),e(D1,hBo),e(y,uBo),e(y,G1),e(G1,e1e),e(e1e,pBo),e(G1,_Bo),e(G1,IX),e(IX,bBo),e(G1,vBo),e(y,FBo),e(y,O1),e(O1,o1e),e(o1e,TBo),e(O1,MBo),e(O1,NX),e(NX,EBo),e(O1,CBo),e(y,wBo),e(y,V1),e(V1,r1e),e(r1e,ABo),e(V1,LBo),e(V1,qX),e(qX,yBo),e(V1,xBo),e(y,$Bo),e(y,X1),e(X1,t1e),e(t1e,kBo),e(X1,SBo),e(X1,jX),e(jX,RBo),e(X1,PBo),e(y,BBo),e(y,z1),e(z1,a1e),e(a1e,IBo),e(z1,NBo),e(z1,DX),e(DX,qBo),e(z1,jBo),e(y,DBo),e(y,Q1),e(Q1,n1e),e(n1e,GBo),e(Q1,OBo),e(Q1,GX),e(GX,VBo),e(Q1,XBo),e(y,zBo),e(y,W1),e(W1,s1e),e(s1e,QBo),e(W1,WBo),e(W1,OX),e(OX,UBo),e(W1,HBo),e(y,JBo),e(y,U1),e(U1,l1e),e(l1e,YBo),e(U1,KBo),e(U1,VX),e(VX,ZBo),e(U1,eIo),e(y,oIo),e(y,H1),e(H1,i1e),e(i1e,rIo),e(H1,tIo),e(H1,XX),e(XX,aIo),e(H1,nIo),e(y,sIo),e(y,J1),e(J1,d1e),e(d1e,lIo),e(J1,iIo),e(J1,zX),e(zX,dIo),e(J1,mIo),e(y,cIo),e(y,Y1),e(Y1,m1e),e(m1e,fIo),e(Y1,gIo),e(Y1,QX),e(QX,hIo),e(Y1,uIo),e(y,pIo),e(y,K1),e(K1,c1e),e(c1e,_Io),e(K1,bIo),e(K1,WX),e(WX,vIo),e(K1,FIo),e(y,TIo),e(y,Z1),e(Z1,f1e),e(f1e,MIo),e(Z1,EIo),e(Z1,UX),e(UX,CIo),e(Z1,wIo),e(y,AIo),e(y,e2),e(e2,g1e),e(g1e,LIo),e(e2,yIo),e(e2,HX),e(HX,xIo),e(e2,$Io),e(y,kIo),e(y,o2),e(o2,h1e),e(h1e,SIo),e(o2,RIo),e(o2,JX),e(JX,PIo),e(o2,BIo),e(y,IIo),e(y,r2),e(r2,u1e),e(u1e,NIo),e(r2,qIo),e(r2,YX),e(YX,jIo),e(r2,DIo),e(y,GIo),e(y,t2),e(t2,p1e),e(p1e,OIo),e(t2,VIo),e(t2,KX),e(KX,XIo),e(t2,zIo),e(y,QIo),e(y,a2),e(a2,_1e),e(_1e,WIo),e(a2,UIo),e(a2,ZX),e(ZX,HIo),e(a2,JIo),e(y,YIo),e(y,n2),e(n2,b1e),e(b1e,KIo),e(n2,ZIo),e(n2,ez),e(ez,eNo),e(n2,oNo),e(y,rNo),e(y,s2),e(s2,v1e),e(v1e,tNo),e(s2,aNo),e(s2,oz),e(oz,nNo),e(s2,sNo),e(y,lNo),e(y,l2),e(l2,F1e),e(F1e,iNo),e(l2,dNo),e(l2,rz),e(rz,mNo),e(l2,cNo),e(y,fNo),e(y,i2),e(i2,T1e),e(T1e,gNo),e(i2,hNo),e(i2,tz),e(tz,uNo),e(i2,pNo),e(y,_No),e(y,d2),e(d2,M1e),e(M1e,bNo),e(d2,vNo),e(d2,az),e(az,FNo),e(d2,TNo),e(y,MNo),e(y,m2),e(m2,E1e),e(E1e,ENo),e(m2,CNo),e(m2,nz),e(nz,wNo),e(m2,ANo),e(y,LNo),e(y,c2),e(c2,C1e),e(C1e,yNo),e(c2,xNo),e(c2,sz),e(sz,$No),e(c2,kNo),e(y,SNo),e(y,f2),e(f2,w1e),e(w1e,RNo),e(f2,PNo),e(f2,lz),e(lz,BNo),e(f2,INo),e(y,NNo),e(y,g2),e(g2,A1e),e(A1e,qNo),e(g2,jNo),e(g2,iz),e(iz,DNo),e(g2,GNo),e(y,ONo),e(y,h2),e(h2,L1e),e(L1e,VNo),e(h2,XNo),e(h2,dz),e(dz,zNo),e(h2,QNo),e(y,WNo),e(y,u2),e(u2,y1e),e(y1e,UNo),e(u2,HNo),e(u2,mz),e(mz,JNo),e(u2,YNo),e(y,KNo),e(y,p2),e(p2,x1e),e(x1e,ZNo),e(p2,eqo),e(p2,cz),e(cz,oqo),e(p2,rqo),e(y,tqo),e(y,_2),e(_2,$1e),e($1e,aqo),e(_2,nqo),e(_2,fz),e(fz,sqo),e(_2,lqo),e(y,iqo),e(y,b2),e(b2,k1e),e(k1e,dqo),e(b2,mqo),e(b2,gz),e(gz,cqo),e(b2,fqo),e(y,gqo),e(y,v2),e(v2,S1e),e(S1e,hqo),e(v2,uqo),e(v2,hz),e(hz,pqo),e(v2,_qo),e(y,bqo),e(y,F2),e(F2,R1e),e(R1e,vqo),e(F2,Fqo),e(F2,uz),e(uz,Tqo),e(F2,Mqo),e(y,Eqo),e(y,T2),e(T2,P1e),e(P1e,Cqo),e(T2,wqo),e(T2,pz),e(pz,Aqo),e(T2,Lqo),e(Ze,yqo),e(Ze,M2),e(M2,xqo),e(M2,B1e),e(B1e,$qo),e(M2,kqo),e(M2,I1e),e(I1e,Sqo),e(Ze,Rqo),M(E2,Ze,null),b(c,neo,_),b(c,Fd,_),e(Fd,C2),e(C2,N1e),M(Sx,N1e,null),e(Fd,Pqo),e(Fd,q1e),e(q1e,Bqo),b(c,seo,_),b(c,Bo,_),M(Rx,Bo,null),e(Bo,Iqo),e(Bo,Td),e(Td,Nqo),e(Td,_z),e(_z,qqo),e(Td,jqo),e(Td,bz),e(bz,Dqo),e(Td,Gqo),e(Bo,Oqo),e(Bo,Px),e(Px,Vqo),e(Px,j1e),e(j1e,Xqo),e(Px,zqo),e(Bo,Qqo),e(Bo,bt),M(Bx,bt,null),e(bt,Wqo),e(bt,D1e),e(D1e,Uqo),e(bt,Hqo),e(bt,Md),e(Md,Jqo),e(Md,G1e),e(G1e,Yqo),e(Md,Kqo),e(Md,vz),e(vz,Zqo),e(Md,ejo),e(bt,ojo),M(w2,bt,null),e(Bo,rjo),e(Bo,eo),M(Ix,eo,null),e(eo,tjo),e(eo,O1e),e(O1e,ajo),e(eo,njo),e(eo,Ya),e(Ya,sjo),e(Ya,V1e),e(V1e,ljo),e(Ya,ijo),e(Ya,X1e),e(X1e,djo),e(Ya,mjo),e(Ya,z1e),e(z1e,cjo),e(Ya,fjo),e(eo,gjo),e(eo,G),e(G,A2),e(A2,Q1e),e(Q1e,hjo),e(A2,ujo),e(A2,Fz),e(Fz,pjo),e(A2,_jo),e(G,bjo),e(G,L2),e(L2,W1e),e(W1e,vjo),e(L2,Fjo),e(L2,Tz),e(Tz,Tjo),e(L2,Mjo),e(G,Ejo),e(G,y2),e(y2,U1e),e(U1e,Cjo),e(y2,wjo),e(y2,Mz),e(Mz,Ajo),e(y2,Ljo),e(G,yjo),e(G,x2),e(x2,H1e),e(H1e,xjo),e(x2,$jo),e(x2,Ez),e(Ez,kjo),e(x2,Sjo),e(G,Rjo),e(G,$2),e($2,J1e),e(J1e,Pjo),e($2,Bjo),e($2,Cz),e(Cz,Ijo),e($2,Njo),e(G,qjo),e(G,k2),e(k2,Y1e),e(Y1e,jjo),e(k2,Djo),e(k2,wz),e(wz,Gjo),e(k2,Ojo),e(G,Vjo),e(G,S2),e(S2,K1e),e(K1e,Xjo),e(S2,zjo),e(S2,Az),e(Az,Qjo),e(S2,Wjo),e(G,Ujo),e(G,R2),e(R2,Z1e),e(Z1e,Hjo),e(R2,Jjo),e(R2,Lz),e(Lz,Yjo),e(R2,Kjo),e(G,Zjo),e(G,P2),e(P2,e2e),e(e2e,eDo),e(P2,oDo),e(P2,yz),e(yz,rDo),e(P2,tDo),e(G,aDo),e(G,B2),e(B2,o2e),e(o2e,nDo),e(B2,sDo),e(B2,xz),e(xz,lDo),e(B2,iDo),e(G,dDo),e(G,I2),e(I2,r2e),e(r2e,mDo),e(I2,cDo),e(I2,$z),e($z,fDo),e(I2,gDo),e(G,hDo),e(G,N2),e(N2,t2e),e(t2e,uDo),e(N2,pDo),e(N2,kz),e(kz,_Do),e(N2,bDo),e(G,vDo),e(G,q2),e(q2,a2e),e(a2e,FDo),e(q2,TDo),e(q2,Sz),e(Sz,MDo),e(q2,EDo),e(G,CDo),e(G,j2),e(j2,n2e),e(n2e,wDo),e(j2,ADo),e(j2,Rz),e(Rz,LDo),e(j2,yDo),e(G,xDo),e(G,D2),e(D2,s2e),e(s2e,$Do),e(D2,kDo),e(D2,Pz),e(Pz,SDo),e(D2,RDo),e(G,PDo),e(G,G2),e(G2,l2e),e(l2e,BDo),e(G2,IDo),e(G2,Bz),e(Bz,NDo),e(G2,qDo),e(G,jDo),e(G,O2),e(O2,i2e),e(i2e,DDo),e(O2,GDo),e(O2,Iz),e(Iz,ODo),e(O2,VDo),e(G,XDo),e(G,V2),e(V2,d2e),e(d2e,zDo),e(V2,QDo),e(V2,Nz),e(Nz,WDo),e(V2,UDo),e(G,HDo),e(G,X2),e(X2,m2e),e(m2e,JDo),e(X2,YDo),e(X2,qz),e(qz,KDo),e(X2,ZDo),e(G,eGo),e(G,z2),e(z2,c2e),e(c2e,oGo),e(z2,rGo),e(z2,jz),e(jz,tGo),e(z2,aGo),e(G,nGo),e(G,Q2),e(Q2,f2e),e(f2e,sGo),e(Q2,lGo),e(Q2,Dz),e(Dz,iGo),e(Q2,dGo),e(G,mGo),e(G,W2),e(W2,g2e),e(g2e,cGo),e(W2,fGo),e(W2,Gz),e(Gz,gGo),e(W2,hGo),e(G,uGo),e(G,U2),e(U2,h2e),e(h2e,pGo),e(U2,_Go),e(U2,Oz),e(Oz,bGo),e(U2,vGo),e(G,FGo),e(G,H2),e(H2,u2e),e(u2e,TGo),e(H2,MGo),e(H2,Vz),e(Vz,EGo),e(H2,CGo),e(G,wGo),e(G,J2),e(J2,p2e),e(p2e,AGo),e(J2,LGo),e(J2,Xz),e(Xz,yGo),e(J2,xGo),e(G,$Go),e(G,Y2),e(Y2,_2e),e(_2e,kGo),e(Y2,SGo),e(Y2,zz),e(zz,RGo),e(Y2,PGo),e(G,BGo),e(G,K2),e(K2,b2e),e(b2e,IGo),e(K2,NGo),e(K2,Qz),e(Qz,qGo),e(K2,jGo),e(G,DGo),e(G,Z2),e(Z2,v2e),e(v2e,GGo),e(Z2,OGo),e(Z2,Wz),e(Wz,VGo),e(Z2,XGo),e(G,zGo),e(G,eb),e(eb,F2e),e(F2e,QGo),e(eb,WGo),e(eb,Uz),e(Uz,UGo),e(eb,HGo),e(G,JGo),e(G,ob),e(ob,T2e),e(T2e,YGo),e(ob,KGo),e(ob,Hz),e(Hz,ZGo),e(ob,eOo),e(G,oOo),e(G,rb),e(rb,M2e),e(M2e,rOo),e(rb,tOo),e(rb,Jz),e(Jz,aOo),e(rb,nOo),e(G,sOo),e(G,tb),e(tb,E2e),e(E2e,lOo),e(tb,iOo),e(tb,Yz),e(Yz,dOo),e(tb,mOo),e(G,cOo),e(G,ab),e(ab,C2e),e(C2e,fOo),e(ab,gOo),e(ab,Kz),e(Kz,hOo),e(ab,uOo),e(G,pOo),e(G,nb),e(nb,w2e),e(w2e,_Oo),e(nb,bOo),e(nb,Zz),e(Zz,vOo),e(nb,FOo),e(G,TOo),e(G,sb),e(sb,A2e),e(A2e,MOo),e(sb,EOo),e(sb,eQ),e(eQ,COo),e(sb,wOo),e(G,AOo),e(G,lb),e(lb,L2e),e(L2e,LOo),e(lb,yOo),e(lb,oQ),e(oQ,xOo),e(lb,$Oo),e(G,kOo),e(G,ib),e(ib,y2e),e(y2e,SOo),e(ib,ROo),e(ib,rQ),e(rQ,POo),e(ib,BOo),e(G,IOo),e(G,db),e(db,x2e),e(x2e,NOo),e(db,qOo),e(db,tQ),e(tQ,jOo),e(db,DOo),e(G,GOo),e(G,mb),e(mb,$2e),e($2e,OOo),e(mb,VOo),e(mb,aQ),e(aQ,XOo),e(mb,zOo),e(G,QOo),e(G,cb),e(cb,k2e),e(k2e,WOo),e(cb,UOo),e(cb,nQ),e(nQ,HOo),e(cb,JOo),e(G,YOo),e(G,fb),e(fb,S2e),e(S2e,KOo),e(fb,ZOo),e(fb,sQ),e(sQ,eVo),e(fb,oVo),e(G,rVo),e(G,gb),e(gb,R2e),e(R2e,tVo),e(gb,aVo),e(gb,lQ),e(lQ,nVo),e(gb,sVo),e(G,lVo),e(G,hb),e(hb,P2e),e(P2e,iVo),e(hb,dVo),e(hb,iQ),e(iQ,mVo),e(hb,cVo),e(G,fVo),e(G,ub),e(ub,B2e),e(B2e,gVo),e(ub,hVo),e(ub,dQ),e(dQ,uVo),e(ub,pVo),e(G,_Vo),e(G,pb),e(pb,I2e),e(I2e,bVo),e(pb,vVo),e(pb,mQ),e(mQ,FVo),e(pb,TVo),e(G,MVo),e(G,_b),e(_b,N2e),e(N2e,EVo),e(_b,CVo),e(_b,cQ),e(cQ,wVo),e(_b,AVo),e(G,LVo),e(G,bb),e(bb,q2e),e(q2e,yVo),e(bb,xVo),e(bb,fQ),e(fQ,$Vo),e(bb,kVo),e(G,SVo),e(G,vb),e(vb,j2e),e(j2e,RVo),e(vb,PVo),e(vb,gQ),e(gQ,BVo),e(vb,IVo),e(eo,NVo),e(eo,Fb),e(Fb,qVo),e(Fb,D2e),e(D2e,jVo),e(Fb,DVo),e(Fb,G2e),e(G2e,GVo),e(eo,OVo),M(Tb,eo,null),b(c,leo,_),b(c,Ed,_),e(Ed,Mb),e(Mb,O2e),M(Nx,O2e,null),e(Ed,VVo),e(Ed,V2e),e(V2e,XVo),b(c,ieo,_),b(c,Io,_),M(qx,Io,null),e(Io,zVo),e(Io,Cd),e(Cd,QVo),e(Cd,hQ),e(hQ,WVo),e(Cd,UVo),e(Cd,uQ),e(uQ,HVo),e(Cd,JVo),e(Io,YVo),e(Io,jx),e(jx,KVo),e(jx,X2e),e(X2e,ZVo),e(jx,eXo),e(Io,oXo),e(Io,vt),M(Dx,vt,null),e(vt,rXo),e(vt,z2e),e(z2e,tXo),e(vt,aXo),e(vt,wd),e(wd,nXo),e(wd,Q2e),e(Q2e,sXo),e(wd,lXo),e(wd,pQ),e(pQ,iXo),e(wd,dXo),e(vt,mXo),M(Eb,vt,null),e(Io,cXo),e(Io,oo),M(Gx,oo,null),e(oo,fXo),e(oo,W2e),e(W2e,gXo),e(oo,hXo),e(oo,Ka),e(Ka,uXo),e(Ka,U2e),e(U2e,pXo),e(Ka,_Xo),e(Ka,H2e),e(H2e,bXo),e(Ka,vXo),e(Ka,J2e),e(J2e,FXo),e(Ka,TXo),e(oo,MXo),e(oo,Q),e(Q,Cb),e(Cb,Y2e),e(Y2e,EXo),e(Cb,CXo),e(Cb,_Q),e(_Q,wXo),e(Cb,AXo),e(Q,LXo),e(Q,wb),e(wb,K2e),e(K2e,yXo),e(wb,xXo),e(wb,bQ),e(bQ,$Xo),e(wb,kXo),e(Q,SXo),e(Q,Ab),e(Ab,Z2e),e(Z2e,RXo),e(Ab,PXo),e(Ab,vQ),e(vQ,BXo),e(Ab,IXo),e(Q,NXo),e(Q,Lb),e(Lb,ebe),e(ebe,qXo),e(Lb,jXo),e(Lb,FQ),e(FQ,DXo),e(Lb,GXo),e(Q,OXo),e(Q,yb),e(yb,obe),e(obe,VXo),e(yb,XXo),e(yb,TQ),e(TQ,zXo),e(yb,QXo),e(Q,WXo),e(Q,xb),e(xb,rbe),e(rbe,UXo),e(xb,HXo),e(xb,MQ),e(MQ,JXo),e(xb,YXo),e(Q,KXo),e(Q,$b),e($b,tbe),e(tbe,ZXo),e($b,ezo),e($b,EQ),e(EQ,ozo),e($b,rzo),e(Q,tzo),e(Q,kb),e(kb,abe),e(abe,azo),e(kb,nzo),e(kb,CQ),e(CQ,szo),e(kb,lzo),e(Q,izo),e(Q,Sb),e(Sb,nbe),e(nbe,dzo),e(Sb,mzo),e(Sb,wQ),e(wQ,czo),e(Sb,fzo),e(Q,gzo),e(Q,Rb),e(Rb,sbe),e(sbe,hzo),e(Rb,uzo),e(Rb,AQ),e(AQ,pzo),e(Rb,_zo),e(Q,bzo),e(Q,Pb),e(Pb,lbe),e(lbe,vzo),e(Pb,Fzo),e(Pb,LQ),e(LQ,Tzo),e(Pb,Mzo),e(Q,Ezo),e(Q,Bb),e(Bb,ibe),e(ibe,Czo),e(Bb,wzo),e(Bb,yQ),e(yQ,Azo),e(Bb,Lzo),e(Q,yzo),e(Q,Ib),e(Ib,dbe),e(dbe,xzo),e(Ib,$zo),e(Ib,xQ),e(xQ,kzo),e(Ib,Szo),e(Q,Rzo),e(Q,Nb),e(Nb,mbe),e(mbe,Pzo),e(Nb,Bzo),e(Nb,$Q),e($Q,Izo),e(Nb,Nzo),e(Q,qzo),e(Q,qb),e(qb,cbe),e(cbe,jzo),e(qb,Dzo),e(qb,kQ),e(kQ,Gzo),e(qb,Ozo),e(Q,Vzo),e(Q,jb),e(jb,fbe),e(fbe,Xzo),e(jb,zzo),e(jb,SQ),e(SQ,Qzo),e(jb,Wzo),e(Q,Uzo),e(Q,Db),e(Db,gbe),e(gbe,Hzo),e(Db,Jzo),e(Db,RQ),e(RQ,Yzo),e(Db,Kzo),e(Q,Zzo),e(Q,Gb),e(Gb,hbe),e(hbe,eQo),e(Gb,oQo),e(Gb,PQ),e(PQ,rQo),e(Gb,tQo),e(Q,aQo),e(Q,Ob),e(Ob,ube),e(ube,nQo),e(Ob,sQo),e(Ob,BQ),e(BQ,lQo),e(Ob,iQo),e(Q,dQo),e(Q,Vb),e(Vb,pbe),e(pbe,mQo),e(Vb,cQo),e(Vb,IQ),e(IQ,fQo),e(Vb,gQo),e(Q,hQo),e(Q,Xb),e(Xb,_be),e(_be,uQo),e(Xb,pQo),e(Xb,NQ),e(NQ,_Qo),e(Xb,bQo),e(Q,vQo),e(Q,zb),e(zb,bbe),e(bbe,FQo),e(zb,TQo),e(zb,qQ),e(qQ,MQo),e(zb,EQo),e(Q,CQo),e(Q,Qb),e(Qb,vbe),e(vbe,wQo),e(Qb,AQo),e(Qb,jQ),e(jQ,LQo),e(Qb,yQo),e(Q,xQo),e(Q,Wb),e(Wb,Fbe),e(Fbe,$Qo),e(Wb,kQo),e(Wb,DQ),e(DQ,SQo),e(Wb,RQo),e(Q,PQo),e(Q,Ub),e(Ub,Tbe),e(Tbe,BQo),e(Ub,IQo),e(Ub,GQ),e(GQ,NQo),e(Ub,qQo),e(Q,jQo),e(Q,Hb),e(Hb,Mbe),e(Mbe,DQo),e(Hb,GQo),e(Hb,OQ),e(OQ,OQo),e(Hb,VQo),e(Q,XQo),e(Q,Jb),e(Jb,Ebe),e(Ebe,zQo),e(Jb,QQo),e(Jb,VQ),e(VQ,WQo),e(Jb,UQo),e(Q,HQo),e(Q,Yb),e(Yb,Cbe),e(Cbe,JQo),e(Yb,YQo),e(Yb,XQ),e(XQ,KQo),e(Yb,ZQo),e(Q,eWo),e(Q,Kb),e(Kb,wbe),e(wbe,oWo),e(Kb,rWo),e(Kb,zQ),e(zQ,tWo),e(Kb,aWo),e(Q,nWo),e(Q,Zb),e(Zb,Abe),e(Abe,sWo),e(Zb,lWo),e(Zb,QQ),e(QQ,iWo),e(Zb,dWo),e(Q,mWo),e(Q,ev),e(ev,Lbe),e(Lbe,cWo),e(ev,fWo),e(ev,WQ),e(WQ,gWo),e(ev,hWo),e(Q,uWo),e(Q,ov),e(ov,ybe),e(ybe,pWo),e(ov,_Wo),e(ov,UQ),e(UQ,bWo),e(ov,vWo),e(Q,FWo),e(Q,rv),e(rv,xbe),e(xbe,TWo),e(rv,MWo),e(rv,HQ),e(HQ,EWo),e(rv,CWo),e(Q,wWo),e(Q,tv),e(tv,$be),e($be,AWo),e(tv,LWo),e(tv,JQ),e(JQ,yWo),e(tv,xWo),e(Q,$Wo),e(Q,av),e(av,kbe),e(kbe,kWo),e(av,SWo),e(av,YQ),e(YQ,RWo),e(av,PWo),e(Q,BWo),e(Q,nv),e(nv,Sbe),e(Sbe,IWo),e(nv,NWo),e(nv,KQ),e(KQ,qWo),e(nv,jWo),e(Q,DWo),e(Q,sv),e(sv,Rbe),e(Rbe,GWo),e(sv,OWo),e(sv,ZQ),e(ZQ,VWo),e(sv,XWo),e(Q,zWo),e(Q,lv),e(lv,Pbe),e(Pbe,QWo),e(lv,WWo),e(lv,eW),e(eW,UWo),e(lv,HWo),e(Q,JWo),e(Q,iv),e(iv,Bbe),e(Bbe,YWo),e(iv,KWo),e(iv,oW),e(oW,ZWo),e(iv,eUo),e(Q,oUo),e(Q,dv),e(dv,Ibe),e(Ibe,rUo),e(dv,tUo),e(dv,rW),e(rW,aUo),e(dv,nUo),e(Q,sUo),e(Q,mv),e(mv,Nbe),e(Nbe,lUo),e(mv,iUo),e(mv,tW),e(tW,dUo),e(mv,mUo),e(Q,cUo),e(Q,cv),e(cv,qbe),e(qbe,fUo),e(cv,gUo),e(cv,aW),e(aW,hUo),e(cv,uUo),e(oo,pUo),e(oo,fv),e(fv,_Uo),e(fv,jbe),e(jbe,bUo),e(fv,vUo),e(fv,Dbe),e(Dbe,FUo),e(oo,TUo),M(gv,oo,null),b(c,deo,_),b(c,Ad,_),e(Ad,hv),e(hv,Gbe),M(Ox,Gbe,null),e(Ad,MUo),e(Ad,Obe),e(Obe,EUo),b(c,meo,_),b(c,No,_),M(Vx,No,null),e(No,CUo),e(No,Ld),e(Ld,wUo),e(Ld,nW),e(nW,AUo),e(Ld,LUo),e(Ld,sW),e(sW,yUo),e(Ld,xUo),e(No,$Uo),e(No,Xx),e(Xx,kUo),e(Xx,Vbe),e(Vbe,SUo),e(Xx,RUo),e(No,PUo),e(No,Ft),M(zx,Ft,null),e(Ft,BUo),e(Ft,Xbe),e(Xbe,IUo),e(Ft,NUo),e(Ft,yd),e(yd,qUo),e(yd,zbe),e(zbe,jUo),e(yd,DUo),e(yd,lW),e(lW,GUo),e(yd,OUo),e(Ft,VUo),M(uv,Ft,null),e(No,XUo),e(No,ro),M(Qx,ro,null),e(ro,zUo),e(ro,Qbe),e(Qbe,QUo),e(ro,WUo),e(ro,Za),e(Za,UUo),e(Za,Wbe),e(Wbe,HUo),e(Za,JUo),e(Za,Ube),e(Ube,YUo),e(Za,KUo),e(Za,Hbe),e(Hbe,ZUo),e(Za,eHo),e(ro,oHo),e(ro,J),e(J,pv),e(pv,Jbe),e(Jbe,rHo),e(pv,tHo),e(pv,iW),e(iW,aHo),e(pv,nHo),e(J,sHo),e(J,_v),e(_v,Ybe),e(Ybe,lHo),e(_v,iHo),e(_v,dW),e(dW,dHo),e(_v,mHo),e(J,cHo),e(J,bv),e(bv,Kbe),e(Kbe,fHo),e(bv,gHo),e(bv,mW),e(mW,hHo),e(bv,uHo),e(J,pHo),e(J,vv),e(vv,Zbe),e(Zbe,_Ho),e(vv,bHo),e(vv,cW),e(cW,vHo),e(vv,FHo),e(J,THo),e(J,Fv),e(Fv,eve),e(eve,MHo),e(Fv,EHo),e(Fv,fW),e(fW,CHo),e(Fv,wHo),e(J,AHo),e(J,Tv),e(Tv,ove),e(ove,LHo),e(Tv,yHo),e(Tv,gW),e(gW,xHo),e(Tv,$Ho),e(J,kHo),e(J,Mv),e(Mv,rve),e(rve,SHo),e(Mv,RHo),e(Mv,hW),e(hW,PHo),e(Mv,BHo),e(J,IHo),e(J,Ev),e(Ev,tve),e(tve,NHo),e(Ev,qHo),e(Ev,uW),e(uW,jHo),e(Ev,DHo),e(J,GHo),e(J,Cv),e(Cv,ave),e(ave,OHo),e(Cv,VHo),e(Cv,pW),e(pW,XHo),e(Cv,zHo),e(J,QHo),e(J,wv),e(wv,nve),e(nve,WHo),e(wv,UHo),e(wv,_W),e(_W,HHo),e(wv,JHo),e(J,YHo),e(J,Av),e(Av,sve),e(sve,KHo),e(Av,ZHo),e(Av,bW),e(bW,eJo),e(Av,oJo),e(J,rJo),e(J,Lv),e(Lv,lve),e(lve,tJo),e(Lv,aJo),e(Lv,vW),e(vW,nJo),e(Lv,sJo),e(J,lJo),e(J,yv),e(yv,ive),e(ive,iJo),e(yv,dJo),e(yv,FW),e(FW,mJo),e(yv,cJo),e(J,fJo),e(J,xv),e(xv,dve),e(dve,gJo),e(xv,hJo),e(xv,TW),e(TW,uJo),e(xv,pJo),e(J,_Jo),e(J,$v),e($v,mve),e(mve,bJo),e($v,vJo),e($v,MW),e(MW,FJo),e($v,TJo),e(J,MJo),e(J,kv),e(kv,cve),e(cve,EJo),e(kv,CJo),e(kv,EW),e(EW,wJo),e(kv,AJo),e(J,LJo),e(J,Sv),e(Sv,fve),e(fve,yJo),e(Sv,xJo),e(Sv,CW),e(CW,$Jo),e(Sv,kJo),e(J,SJo),e(J,Rv),e(Rv,gve),e(gve,RJo),e(Rv,PJo),e(Rv,wW),e(wW,BJo),e(Rv,IJo),e(J,NJo),e(J,Pv),e(Pv,hve),e(hve,qJo),e(Pv,jJo),e(Pv,AW),e(AW,DJo),e(Pv,GJo),e(J,OJo),e(J,Bv),e(Bv,uve),e(uve,VJo),e(Bv,XJo),e(Bv,LW),e(LW,zJo),e(Bv,QJo),e(J,WJo),e(J,Iv),e(Iv,pve),e(pve,UJo),e(Iv,HJo),e(Iv,yW),e(yW,JJo),e(Iv,YJo),e(J,KJo),e(J,Nv),e(Nv,_ve),e(_ve,ZJo),e(Nv,eYo),e(Nv,xW),e(xW,oYo),e(Nv,rYo),e(J,tYo),e(J,qv),e(qv,bve),e(bve,aYo),e(qv,nYo),e(qv,$W),e($W,sYo),e(qv,lYo),e(J,iYo),e(J,jv),e(jv,vve),e(vve,dYo),e(jv,mYo),e(jv,kW),e(kW,cYo),e(jv,fYo),e(J,gYo),e(J,Dv),e(Dv,Fve),e(Fve,hYo),e(Dv,uYo),e(Dv,SW),e(SW,pYo),e(Dv,_Yo),e(J,bYo),e(J,Gv),e(Gv,Tve),e(Tve,vYo),e(Gv,FYo),e(Gv,RW),e(RW,TYo),e(Gv,MYo),e(J,EYo),e(J,Ov),e(Ov,Mve),e(Mve,CYo),e(Ov,wYo),e(Ov,PW),e(PW,AYo),e(Ov,LYo),e(J,yYo),e(J,Vv),e(Vv,Eve),e(Eve,xYo),e(Vv,$Yo),e(Vv,BW),e(BW,kYo),e(Vv,SYo),e(J,RYo),e(J,Xv),e(Xv,Cve),e(Cve,PYo),e(Xv,BYo),e(Xv,IW),e(IW,IYo),e(Xv,NYo),e(J,qYo),e(J,zv),e(zv,wve),e(wve,jYo),e(zv,DYo),e(zv,NW),e(NW,GYo),e(zv,OYo),e(J,VYo),e(J,Qv),e(Qv,Ave),e(Ave,XYo),e(Qv,zYo),e(Qv,qW),e(qW,QYo),e(Qv,WYo),e(J,UYo),e(J,Wv),e(Wv,Lve),e(Lve,HYo),e(Wv,JYo),e(Wv,jW),e(jW,YYo),e(Wv,KYo),e(J,ZYo),e(J,Uv),e(Uv,yve),e(yve,eKo),e(Uv,oKo),e(Uv,DW),e(DW,rKo),e(Uv,tKo),e(J,aKo),e(J,Hv),e(Hv,xve),e(xve,nKo),e(Hv,sKo),e(Hv,GW),e(GW,lKo),e(Hv,iKo),e(J,dKo),e(J,Jv),e(Jv,$ve),e($ve,mKo),e(Jv,cKo),e(Jv,kve),e(kve,fKo),e(Jv,gKo),e(J,hKo),e(J,Yv),e(Yv,Sve),e(Sve,uKo),e(Yv,pKo),e(Yv,OW),e(OW,_Ko),e(Yv,bKo),e(J,vKo),e(J,Kv),e(Kv,Rve),e(Rve,FKo),e(Kv,TKo),e(Kv,VW),e(VW,MKo),e(Kv,EKo),e(J,CKo),e(J,Zv),e(Zv,Pve),e(Pve,wKo),e(Zv,AKo),e(Zv,XW),e(XW,LKo),e(Zv,yKo),e(J,xKo),e(J,eF),e(eF,Bve),e(Bve,$Ko),e(eF,kKo),e(eF,zW),e(zW,SKo),e(eF,RKo),e(ro,PKo),e(ro,oF),e(oF,BKo),e(oF,Ive),e(Ive,IKo),e(oF,NKo),e(oF,Nve),e(Nve,qKo),e(ro,jKo),M(rF,ro,null),b(c,ceo,_),b(c,xd,_),e(xd,tF),e(tF,qve),M(Wx,qve,null),e(xd,DKo),e(xd,jve),e(jve,GKo),b(c,feo,_),b(c,qo,_),M(Ux,qo,null),e(qo,OKo),e(qo,$d),e($d,VKo),e($d,QW),e(QW,XKo),e($d,zKo),e($d,WW),e(WW,QKo),e($d,WKo),e(qo,UKo),e(qo,Hx),e(Hx,HKo),e(Hx,Dve),e(Dve,JKo),e(Hx,YKo),e(qo,KKo),e(qo,Tt),M(Jx,Tt,null),e(Tt,ZKo),e(Tt,Gve),e(Gve,eZo),e(Tt,oZo),e(Tt,kd),e(kd,rZo),e(kd,Ove),e(Ove,tZo),e(kd,aZo),e(kd,UW),e(UW,nZo),e(kd,sZo),e(Tt,lZo),M(aF,Tt,null),e(qo,iZo),e(qo,to),M(Yx,to,null),e(to,dZo),e(to,Vve),e(Vve,mZo),e(to,cZo),e(to,en),e(en,fZo),e(en,Xve),e(Xve,gZo),e(en,hZo),e(en,zve),e(zve,uZo),e(en,pZo),e(en,Qve),e(Qve,_Zo),e(en,bZo),e(to,vZo),e(to,fe),e(fe,nF),e(nF,Wve),e(Wve,FZo),e(nF,TZo),e(nF,HW),e(HW,MZo),e(nF,EZo),e(fe,CZo),e(fe,sF),e(sF,Uve),e(Uve,wZo),e(sF,AZo),e(sF,JW),e(JW,LZo),e(sF,yZo),e(fe,xZo),e(fe,lF),e(lF,Hve),e(Hve,$Zo),e(lF,kZo),e(lF,YW),e(YW,SZo),e(lF,RZo),e(fe,PZo),e(fe,iF),e(iF,Jve),e(Jve,BZo),e(iF,IZo),e(iF,KW),e(KW,NZo),e(iF,qZo),e(fe,jZo),e(fe,dF),e(dF,Yve),e(Yve,DZo),e(dF,GZo),e(dF,ZW),e(ZW,OZo),e(dF,VZo),e(fe,XZo),e(fe,mF),e(mF,Kve),e(Kve,zZo),e(mF,QZo),e(mF,eU),e(eU,WZo),e(mF,UZo),e(fe,HZo),e(fe,cF),e(cF,Zve),e(Zve,JZo),e(cF,YZo),e(cF,oU),e(oU,KZo),e(cF,ZZo),e(fe,eer),e(fe,fF),e(fF,eFe),e(eFe,oer),e(fF,rer),e(fF,rU),e(rU,ter),e(fF,aer),e(fe,ner),e(fe,gF),e(gF,oFe),e(oFe,ser),e(gF,ler),e(gF,tU),e(tU,ier),e(gF,der),e(fe,mer),e(fe,hF),e(hF,rFe),e(rFe,cer),e(hF,fer),e(hF,aU),e(aU,ger),e(hF,her),e(fe,uer),e(fe,uF),e(uF,tFe),e(tFe,per),e(uF,_er),e(uF,nU),e(nU,ber),e(uF,ver),e(fe,Fer),e(fe,pF),e(pF,aFe),e(aFe,Ter),e(pF,Mer),e(pF,sU),e(sU,Eer),e(pF,Cer),e(fe,wer),e(fe,_F),e(_F,nFe),e(nFe,Aer),e(_F,Ler),e(_F,lU),e(lU,yer),e(_F,xer),e(fe,$er),e(fe,bF),e(bF,sFe),e(sFe,ker),e(bF,Ser),e(bF,iU),e(iU,Rer),e(bF,Per),e(fe,Ber),e(fe,vF),e(vF,lFe),e(lFe,Ier),e(vF,Ner),e(vF,dU),e(dU,qer),e(vF,jer),e(fe,Der),e(fe,FF),e(FF,iFe),e(iFe,Ger),e(FF,Oer),e(FF,mU),e(mU,Ver),e(FF,Xer),e(fe,zer),e(fe,TF),e(TF,dFe),e(dFe,Qer),e(TF,Wer),e(TF,cU),e(cU,Uer),e(TF,Her),e(fe,Jer),e(fe,MF),e(MF,mFe),e(mFe,Yer),e(MF,Ker),e(MF,fU),e(fU,Zer),e(MF,eor),e(fe,oor),e(fe,EF),e(EF,cFe),e(cFe,ror),e(EF,tor),e(EF,gU),e(gU,aor),e(EF,nor),e(fe,sor),e(fe,CF),e(CF,fFe),e(fFe,lor),e(CF,ior),e(CF,hU),e(hU,dor),e(CF,mor),e(to,cor),e(to,wF),e(wF,gor),e(wF,gFe),e(gFe,hor),e(wF,uor),e(wF,hFe),e(hFe,por),e(to,_or),M(AF,to,null),b(c,geo,_),b(c,Sd,_),e(Sd,LF),e(LF,uFe),M(Kx,uFe,null),e(Sd,bor),e(Sd,pFe),e(pFe,vor),b(c,heo,_),b(c,jo,_),M(Zx,jo,null),e(jo,For),e(jo,Rd),e(Rd,Tor),e(Rd,uU),e(uU,Mor),e(Rd,Eor),e(Rd,pU),e(pU,Cor),e(Rd,wor),e(jo,Aor),e(jo,e$),e(e$,Lor),e(e$,_Fe),e(_Fe,yor),e(e$,xor),e(jo,$or),e(jo,Mt),M(o$,Mt,null),e(Mt,kor),e(Mt,bFe),e(bFe,Sor),e(Mt,Ror),e(Mt,Pd),e(Pd,Por),e(Pd,vFe),e(vFe,Bor),e(Pd,Ior),e(Pd,_U),e(_U,Nor),e(Pd,qor),e(Mt,jor),M(yF,Mt,null),e(jo,Dor),e(jo,ao),M(r$,ao,null),e(ao,Gor),e(ao,FFe),e(FFe,Oor),e(ao,Vor),e(ao,on),e(on,Xor),e(on,TFe),e(TFe,zor),e(on,Qor),e(on,MFe),e(MFe,Wor),e(on,Uor),e(on,EFe),e(EFe,Hor),e(on,Jor),e(ao,Yor),e(ao,B),e(B,xF),e(xF,CFe),e(CFe,Kor),e(xF,Zor),e(xF,bU),e(bU,err),e(xF,orr),e(B,rrr),e(B,$F),e($F,wFe),e(wFe,trr),e($F,arr),e($F,vU),e(vU,nrr),e($F,srr),e(B,lrr),e(B,kF),e(kF,AFe),e(AFe,irr),e(kF,drr),e(kF,FU),e(FU,mrr),e(kF,crr),e(B,frr),e(B,SF),e(SF,LFe),e(LFe,grr),e(SF,hrr),e(SF,TU),e(TU,urr),e(SF,prr),e(B,_rr),e(B,RF),e(RF,yFe),e(yFe,brr),e(RF,vrr),e(RF,MU),e(MU,Frr),e(RF,Trr),e(B,Mrr),e(B,PF),e(PF,xFe),e(xFe,Err),e(PF,Crr),e(PF,EU),e(EU,wrr),e(PF,Arr),e(B,Lrr),e(B,BF),e(BF,$Fe),e($Fe,yrr),e(BF,xrr),e(BF,CU),e(CU,$rr),e(BF,krr),e(B,Srr),e(B,IF),e(IF,kFe),e(kFe,Rrr),e(IF,Prr),e(IF,wU),e(wU,Brr),e(IF,Irr),e(B,Nrr),e(B,NF),e(NF,SFe),e(SFe,qrr),e(NF,jrr),e(NF,AU),e(AU,Drr),e(NF,Grr),e(B,Orr),e(B,qF),e(qF,RFe),e(RFe,Vrr),e(qF,Xrr),e(qF,LU),e(LU,zrr),e(qF,Qrr),e(B,Wrr),e(B,jF),e(jF,PFe),e(PFe,Urr),e(jF,Hrr),e(jF,yU),e(yU,Jrr),e(jF,Yrr),e(B,Krr),e(B,DF),e(DF,BFe),e(BFe,Zrr),e(DF,etr),e(DF,xU),e(xU,otr),e(DF,rtr),e(B,ttr),e(B,GF),e(GF,IFe),e(IFe,atr),e(GF,ntr),e(GF,$U),e($U,str),e(GF,ltr),e(B,itr),e(B,OF),e(OF,NFe),e(NFe,dtr),e(OF,mtr),e(OF,kU),e(kU,ctr),e(OF,ftr),e(B,gtr),e(B,VF),e(VF,qFe),e(qFe,htr),e(VF,utr),e(VF,SU),e(SU,ptr),e(VF,_tr),e(B,btr),e(B,XF),e(XF,jFe),e(jFe,vtr),e(XF,Ftr),e(XF,RU),e(RU,Ttr),e(XF,Mtr),e(B,Etr),e(B,zF),e(zF,DFe),e(DFe,Ctr),e(zF,wtr),e(zF,PU),e(PU,Atr),e(zF,Ltr),e(B,ytr),e(B,QF),e(QF,GFe),e(GFe,xtr),e(QF,$tr),e(QF,BU),e(BU,ktr),e(QF,Str),e(B,Rtr),e(B,WF),e(WF,OFe),e(OFe,Ptr),e(WF,Btr),e(WF,IU),e(IU,Itr),e(WF,Ntr),e(B,qtr),e(B,UF),e(UF,VFe),e(VFe,jtr),e(UF,Dtr),e(UF,NU),e(NU,Gtr),e(UF,Otr),e(B,Vtr),e(B,HF),e(HF,XFe),e(XFe,Xtr),e(HF,ztr),e(HF,qU),e(qU,Qtr),e(HF,Wtr),e(B,Utr),e(B,JF),e(JF,zFe),e(zFe,Htr),e(JF,Jtr),e(JF,jU),e(jU,Ytr),e(JF,Ktr),e(B,Ztr),e(B,YF),e(YF,QFe),e(QFe,ear),e(YF,oar),e(YF,DU),e(DU,rar),e(YF,tar),e(B,aar),e(B,KF),e(KF,WFe),e(WFe,nar),e(KF,sar),e(KF,GU),e(GU,lar),e(KF,iar),e(B,dar),e(B,ZF),e(ZF,UFe),e(UFe,mar),e(ZF,car),e(ZF,OU),e(OU,far),e(ZF,gar),e(B,har),e(B,eT),e(eT,HFe),e(HFe,uar),e(eT,par),e(eT,VU),e(VU,_ar),e(eT,bar),e(B,Far),e(B,oT),e(oT,JFe),e(JFe,Tar),e(oT,Mar),e(oT,XU),e(XU,Ear),e(oT,Car),e(B,war),e(B,rT),e(rT,YFe),e(YFe,Aar),e(rT,Lar),e(rT,zU),e(zU,yar),e(rT,xar),e(B,$ar),e(B,tT),e(tT,KFe),e(KFe,kar),e(tT,Sar),e(tT,QU),e(QU,Rar),e(tT,Par),e(B,Bar),e(B,aT),e(aT,ZFe),e(ZFe,Iar),e(aT,Nar),e(aT,WU),e(WU,qar),e(aT,jar),e(B,Dar),e(B,nT),e(nT,eTe),e(eTe,Gar),e(nT,Oar),e(nT,UU),e(UU,Var),e(nT,Xar),e(B,zar),e(B,sT),e(sT,oTe),e(oTe,Qar),e(sT,War),e(sT,HU),e(HU,Uar),e(sT,Har),e(B,Jar),e(B,lT),e(lT,rTe),e(rTe,Yar),e(lT,Kar),e(lT,JU),e(JU,Zar),e(lT,enr),e(B,onr),e(B,iT),e(iT,tTe),e(tTe,rnr),e(iT,tnr),e(iT,YU),e(YU,anr),e(iT,nnr),e(B,snr),e(B,dT),e(dT,aTe),e(aTe,lnr),e(dT,inr),e(dT,KU),e(KU,dnr),e(dT,mnr),e(B,cnr),e(B,mT),e(mT,nTe),e(nTe,fnr),e(mT,gnr),e(mT,ZU),e(ZU,hnr),e(mT,unr),e(B,pnr),e(B,cT),e(cT,sTe),e(sTe,_nr),e(cT,bnr),e(cT,eH),e(eH,vnr),e(cT,Fnr),e(B,Tnr),e(B,fT),e(fT,lTe),e(lTe,Mnr),e(fT,Enr),e(fT,oH),e(oH,Cnr),e(fT,wnr),e(B,Anr),e(B,gT),e(gT,iTe),e(iTe,Lnr),e(gT,ynr),e(gT,rH),e(rH,xnr),e(gT,$nr),e(B,knr),e(B,hT),e(hT,dTe),e(dTe,Snr),e(hT,Rnr),e(hT,tH),e(tH,Pnr),e(hT,Bnr),e(B,Inr),e(B,uT),e(uT,mTe),e(mTe,Nnr),e(uT,qnr),e(uT,aH),e(aH,jnr),e(uT,Dnr),e(B,Gnr),e(B,pT),e(pT,cTe),e(cTe,Onr),e(pT,Vnr),e(pT,nH),e(nH,Xnr),e(pT,znr),e(B,Qnr),e(B,_T),e(_T,fTe),e(fTe,Wnr),e(_T,Unr),e(_T,sH),e(sH,Hnr),e(_T,Jnr),e(B,Ynr),e(B,bT),e(bT,gTe),e(gTe,Knr),e(bT,Znr),e(bT,lH),e(lH,esr),e(bT,osr),e(B,rsr),e(B,vT),e(vT,hTe),e(hTe,tsr),e(vT,asr),e(vT,iH),e(iH,nsr),e(vT,ssr),e(B,lsr),e(B,FT),e(FT,uTe),e(uTe,isr),e(FT,dsr),e(FT,dH),e(dH,msr),e(FT,csr),e(B,fsr),e(B,TT),e(TT,pTe),e(pTe,gsr),e(TT,hsr),e(TT,mH),e(mH,usr),e(TT,psr),e(B,_sr),e(B,MT),e(MT,_Te),e(_Te,bsr),e(MT,vsr),e(MT,cH),e(cH,Fsr),e(MT,Tsr),e(B,Msr),e(B,ET),e(ET,bTe),e(bTe,Esr),e(ET,Csr),e(ET,fH),e(fH,wsr),e(ET,Asr),e(B,Lsr),e(B,CT),e(CT,vTe),e(vTe,ysr),e(CT,xsr),e(CT,gH),e(gH,$sr),e(CT,ksr),e(B,Ssr),e(B,wT),e(wT,FTe),e(FTe,Rsr),e(wT,Psr),e(wT,hH),e(hH,Bsr),e(wT,Isr),e(B,Nsr),e(B,AT),e(AT,TTe),e(TTe,qsr),e(AT,jsr),e(AT,uH),e(uH,Dsr),e(AT,Gsr),e(B,Osr),e(B,LT),e(LT,MTe),e(MTe,Vsr),e(LT,Xsr),e(LT,pH),e(pH,zsr),e(LT,Qsr),e(B,Wsr),e(B,yT),e(yT,ETe),e(ETe,Usr),e(yT,Hsr),e(yT,_H),e(_H,Jsr),e(yT,Ysr),e(B,Ksr),e(B,xT),e(xT,CTe),e(CTe,Zsr),e(xT,elr),e(xT,bH),e(bH,olr),e(xT,rlr),e(ao,tlr),e(ao,$T),e($T,alr),e($T,wTe),e(wTe,nlr),e($T,slr),e($T,ATe),e(ATe,llr),e(ao,ilr),M(kT,ao,null),b(c,ueo,_),b(c,Bd,_),e(Bd,ST),e(ST,LTe),M(t$,LTe,null),e(Bd,dlr),e(Bd,yTe),e(yTe,mlr),b(c,peo,_),b(c,Do,_),M(a$,Do,null),e(Do,clr),e(Do,Id),e(Id,flr),e(Id,vH),e(vH,glr),e(Id,hlr),e(Id,FH),e(FH,ulr),e(Id,plr),e(Do,_lr),e(Do,n$),e(n$,blr),e(n$,xTe),e(xTe,vlr),e(n$,Flr),e(Do,Tlr),e(Do,Et),M(s$,Et,null),e(Et,Mlr),e(Et,$Te),e($Te,Elr),e(Et,Clr),e(Et,Nd),e(Nd,wlr),e(Nd,kTe),e(kTe,Alr),e(Nd,Llr),e(Nd,TH),e(TH,ylr),e(Nd,xlr),e(Et,$lr),M(RT,Et,null),e(Do,klr),e(Do,no),M(l$,no,null),e(no,Slr),e(no,STe),e(STe,Rlr),e(no,Plr),e(no,rn),e(rn,Blr),e(rn,RTe),e(RTe,Ilr),e(rn,Nlr),e(rn,PTe),e(PTe,qlr),e(rn,jlr),e(rn,BTe),e(BTe,Dlr),e(rn,Glr),e(no,Olr),e(no,Z),e(Z,PT),e(PT,ITe),e(ITe,Vlr),e(PT,Xlr),e(PT,MH),e(MH,zlr),e(PT,Qlr),e(Z,Wlr),e(Z,BT),e(BT,NTe),e(NTe,Ulr),e(BT,Hlr),e(BT,EH),e(EH,Jlr),e(BT,Ylr),e(Z,Klr),e(Z,IT),e(IT,qTe),e(qTe,Zlr),e(IT,eir),e(IT,CH),e(CH,oir),e(IT,rir),e(Z,tir),e(Z,NT),e(NT,jTe),e(jTe,air),e(NT,nir),e(NT,wH),e(wH,sir),e(NT,lir),e(Z,iir),e(Z,qT),e(qT,DTe),e(DTe,dir),e(qT,mir),e(qT,AH),e(AH,cir),e(qT,fir),e(Z,gir),e(Z,jT),e(jT,GTe),e(GTe,hir),e(jT,uir),e(jT,LH),e(LH,pir),e(jT,_ir),e(Z,bir),e(Z,DT),e(DT,OTe),e(OTe,vir),e(DT,Fir),e(DT,yH),e(yH,Tir),e(DT,Mir),e(Z,Eir),e(Z,GT),e(GT,VTe),e(VTe,Cir),e(GT,wir),e(GT,xH),e(xH,Air),e(GT,Lir),e(Z,yir),e(Z,OT),e(OT,XTe),e(XTe,xir),e(OT,$ir),e(OT,$H),e($H,kir),e(OT,Sir),e(Z,Rir),e(Z,VT),e(VT,zTe),e(zTe,Pir),e(VT,Bir),e(VT,kH),e(kH,Iir),e(VT,Nir),e(Z,qir),e(Z,XT),e(XT,QTe),e(QTe,jir),e(XT,Dir),e(XT,SH),e(SH,Gir),e(XT,Oir),e(Z,Vir),e(Z,zT),e(zT,WTe),e(WTe,Xir),e(zT,zir),e(zT,RH),e(RH,Qir),e(zT,Wir),e(Z,Uir),e(Z,QT),e(QT,UTe),e(UTe,Hir),e(QT,Jir),e(QT,PH),e(PH,Yir),e(QT,Kir),e(Z,Zir),e(Z,WT),e(WT,HTe),e(HTe,edr),e(WT,odr),e(WT,BH),e(BH,rdr),e(WT,tdr),e(Z,adr),e(Z,UT),e(UT,JTe),e(JTe,ndr),e(UT,sdr),e(UT,IH),e(IH,ldr),e(UT,idr),e(Z,ddr),e(Z,HT),e(HT,YTe),e(YTe,mdr),e(HT,cdr),e(HT,NH),e(NH,fdr),e(HT,gdr),e(Z,hdr),e(Z,JT),e(JT,KTe),e(KTe,udr),e(JT,pdr),e(JT,qH),e(qH,_dr),e(JT,bdr),e(Z,vdr),e(Z,YT),e(YT,ZTe),e(ZTe,Fdr),e(YT,Tdr),e(YT,jH),e(jH,Mdr),e(YT,Edr),e(Z,Cdr),e(Z,KT),e(KT,eMe),e(eMe,wdr),e(KT,Adr),e(KT,DH),e(DH,Ldr),e(KT,ydr),e(Z,xdr),e(Z,ZT),e(ZT,oMe),e(oMe,$dr),e(ZT,kdr),e(ZT,GH),e(GH,Sdr),e(ZT,Rdr),e(Z,Pdr),e(Z,eM),e(eM,rMe),e(rMe,Bdr),e(eM,Idr),e(eM,OH),e(OH,Ndr),e(eM,qdr),e(Z,jdr),e(Z,oM),e(oM,tMe),e(tMe,Ddr),e(oM,Gdr),e(oM,VH),e(VH,Odr),e(oM,Vdr),e(Z,Xdr),e(Z,rM),e(rM,aMe),e(aMe,zdr),e(rM,Qdr),e(rM,XH),e(XH,Wdr),e(rM,Udr),e(Z,Hdr),e(Z,tM),e(tM,nMe),e(nMe,Jdr),e(tM,Ydr),e(tM,zH),e(zH,Kdr),e(tM,Zdr),e(Z,emr),e(Z,aM),e(aM,sMe),e(sMe,omr),e(aM,rmr),e(aM,QH),e(QH,tmr),e(aM,amr),e(Z,nmr),e(Z,nM),e(nM,lMe),e(lMe,smr),e(nM,lmr),e(nM,WH),e(WH,imr),e(nM,dmr),e(Z,mmr),e(Z,sM),e(sM,iMe),e(iMe,cmr),e(sM,fmr),e(sM,UH),e(UH,gmr),e(sM,hmr),e(Z,umr),e(Z,lM),e(lM,dMe),e(dMe,pmr),e(lM,_mr),e(lM,HH),e(HH,bmr),e(lM,vmr),e(Z,Fmr),e(Z,iM),e(iM,mMe),e(mMe,Tmr),e(iM,Mmr),e(iM,JH),e(JH,Emr),e(iM,Cmr),e(Z,wmr),e(Z,dM),e(dM,cMe),e(cMe,Amr),e(dM,Lmr),e(dM,YH),e(YH,ymr),e(dM,xmr),e(Z,$mr),e(Z,mM),e(mM,fMe),e(fMe,kmr),e(mM,Smr),e(mM,KH),e(KH,Rmr),e(mM,Pmr),e(Z,Bmr),e(Z,cM),e(cM,gMe),e(gMe,Imr),e(cM,Nmr),e(cM,ZH),e(ZH,qmr),e(cM,jmr),e(no,Dmr),e(no,fM),e(fM,Gmr),e(fM,hMe),e(hMe,Omr),e(fM,Vmr),e(fM,uMe),e(uMe,Xmr),e(no,zmr),M(gM,no,null),b(c,_eo,_),b(c,qd,_),e(qd,hM),e(hM,pMe),M(i$,pMe,null),e(qd,Qmr),e(qd,_Me),e(_Me,Wmr),b(c,beo,_),b(c,Go,_),M(d$,Go,null),e(Go,Umr),e(Go,jd),e(jd,Hmr),e(jd,eJ),e(eJ,Jmr),e(jd,Ymr),e(jd,oJ),e(oJ,Kmr),e(jd,Zmr),e(Go,ecr),e(Go,m$),e(m$,ocr),e(m$,bMe),e(bMe,rcr),e(m$,tcr),e(Go,acr),e(Go,Ct),M(c$,Ct,null),e(Ct,ncr),e(Ct,vMe),e(vMe,scr),e(Ct,lcr),e(Ct,Dd),e(Dd,icr),e(Dd,FMe),e(FMe,dcr),e(Dd,mcr),e(Dd,rJ),e(rJ,ccr),e(Dd,fcr),e(Ct,gcr),M(uM,Ct,null),e(Go,hcr),e(Go,so),M(f$,so,null),e(so,ucr),e(so,TMe),e(TMe,pcr),e(so,_cr),e(so,tn),e(tn,bcr),e(tn,MMe),e(MMe,vcr),e(tn,Fcr),e(tn,EMe),e(EMe,Tcr),e(tn,Mcr),e(tn,CMe),e(CMe,Ecr),e(tn,Ccr),e(so,wcr),e(so,Ue),e(Ue,pM),e(pM,wMe),e(wMe,Acr),e(pM,Lcr),e(pM,tJ),e(tJ,ycr),e(pM,xcr),e(Ue,$cr),e(Ue,_M),e(_M,AMe),e(AMe,kcr),e(_M,Scr),e(_M,aJ),e(aJ,Rcr),e(_M,Pcr),e(Ue,Bcr),e(Ue,bM),e(bM,LMe),e(LMe,Icr),e(bM,Ncr),e(bM,nJ),e(nJ,qcr),e(bM,jcr),e(Ue,Dcr),e(Ue,vM),e(vM,yMe),e(yMe,Gcr),e(vM,Ocr),e(vM,sJ),e(sJ,Vcr),e(vM,Xcr),e(Ue,zcr),e(Ue,FM),e(FM,xMe),e(xMe,Qcr),e(FM,Wcr),e(FM,lJ),e(lJ,Ucr),e(FM,Hcr),e(Ue,Jcr),e(Ue,TM),e(TM,$Me),e($Me,Ycr),e(TM,Kcr),e(TM,iJ),e(iJ,Zcr),e(TM,efr),e(Ue,ofr),e(Ue,MM),e(MM,kMe),e(kMe,rfr),e(MM,tfr),e(MM,dJ),e(dJ,afr),e(MM,nfr),e(so,sfr),e(so,EM),e(EM,lfr),e(EM,SMe),e(SMe,ifr),e(EM,dfr),e(EM,RMe),e(RMe,mfr),e(so,cfr),M(CM,so,null),b(c,veo,_),b(c,Gd,_),e(Gd,wM),e(wM,PMe),M(g$,PMe,null),e(Gd,ffr),e(Gd,BMe),e(BMe,gfr),b(c,Feo,_),b(c,Oo,_),M(h$,Oo,null),e(Oo,hfr),e(Oo,Od),e(Od,ufr),e(Od,mJ),e(mJ,pfr),e(Od,_fr),e(Od,cJ),e(cJ,bfr),e(Od,vfr),e(Oo,Ffr),e(Oo,u$),e(u$,Tfr),e(u$,IMe),e(IMe,Mfr),e(u$,Efr),e(Oo,Cfr),e(Oo,wt),M(p$,wt,null),e(wt,wfr),e(wt,NMe),e(NMe,Afr),e(wt,Lfr),e(wt,Vd),e(Vd,yfr),e(Vd,qMe),e(qMe,xfr),e(Vd,$fr),e(Vd,fJ),e(fJ,kfr),e(Vd,Sfr),e(wt,Rfr),M(AM,wt,null),e(Oo,Pfr),e(Oo,lo),M(_$,lo,null),e(lo,Bfr),e(lo,jMe),e(jMe,Ifr),e(lo,Nfr),e(lo,an),e(an,qfr),e(an,DMe),e(DMe,jfr),e(an,Dfr),e(an,GMe),e(GMe,Gfr),e(an,Ofr),e(an,OMe),e(OMe,Vfr),e(an,Xfr),e(lo,zfr),e(lo,H),e(H,LM),e(LM,VMe),e(VMe,Qfr),e(LM,Wfr),e(LM,gJ),e(gJ,Ufr),e(LM,Hfr),e(H,Jfr),e(H,yM),e(yM,XMe),e(XMe,Yfr),e(yM,Kfr),e(yM,hJ),e(hJ,Zfr),e(yM,egr),e(H,ogr),e(H,xM),e(xM,zMe),e(zMe,rgr),e(xM,tgr),e(xM,uJ),e(uJ,agr),e(xM,ngr),e(H,sgr),e(H,$M),e($M,QMe),e(QMe,lgr),e($M,igr),e($M,pJ),e(pJ,dgr),e($M,mgr),e(H,cgr),e(H,kM),e(kM,WMe),e(WMe,fgr),e(kM,ggr),e(kM,_J),e(_J,hgr),e(kM,ugr),e(H,pgr),e(H,SM),e(SM,UMe),e(UMe,_gr),e(SM,bgr),e(SM,bJ),e(bJ,vgr),e(SM,Fgr),e(H,Tgr),e(H,RM),e(RM,HMe),e(HMe,Mgr),e(RM,Egr),e(RM,vJ),e(vJ,Cgr),e(RM,wgr),e(H,Agr),e(H,PM),e(PM,JMe),e(JMe,Lgr),e(PM,ygr),e(PM,FJ),e(FJ,xgr),e(PM,$gr),e(H,kgr),e(H,BM),e(BM,YMe),e(YMe,Sgr),e(BM,Rgr),e(BM,TJ),e(TJ,Pgr),e(BM,Bgr),e(H,Igr),e(H,IM),e(IM,KMe),e(KMe,Ngr),e(IM,qgr),e(IM,MJ),e(MJ,jgr),e(IM,Dgr),e(H,Ggr),e(H,NM),e(NM,ZMe),e(ZMe,Ogr),e(NM,Vgr),e(NM,EJ),e(EJ,Xgr),e(NM,zgr),e(H,Qgr),e(H,qM),e(qM,eEe),e(eEe,Wgr),e(qM,Ugr),e(qM,CJ),e(CJ,Hgr),e(qM,Jgr),e(H,Ygr),e(H,jM),e(jM,oEe),e(oEe,Kgr),e(jM,Zgr),e(jM,wJ),e(wJ,ehr),e(jM,ohr),e(H,rhr),e(H,DM),e(DM,rEe),e(rEe,thr),e(DM,ahr),e(DM,AJ),e(AJ,nhr),e(DM,shr),e(H,lhr),e(H,GM),e(GM,tEe),e(tEe,ihr),e(GM,dhr),e(GM,LJ),e(LJ,mhr),e(GM,chr),e(H,fhr),e(H,OM),e(OM,aEe),e(aEe,ghr),e(OM,hhr),e(OM,yJ),e(yJ,uhr),e(OM,phr),e(H,_hr),e(H,VM),e(VM,nEe),e(nEe,bhr),e(VM,vhr),e(VM,xJ),e(xJ,Fhr),e(VM,Thr),e(H,Mhr),e(H,XM),e(XM,sEe),e(sEe,Ehr),e(XM,Chr),e(XM,$J),e($J,whr),e(XM,Ahr),e(H,Lhr),e(H,zM),e(zM,lEe),e(lEe,yhr),e(zM,xhr),e(zM,kJ),e(kJ,$hr),e(zM,khr),e(H,Shr),e(H,QM),e(QM,iEe),e(iEe,Rhr),e(QM,Phr),e(QM,SJ),e(SJ,Bhr),e(QM,Ihr),e(H,Nhr),e(H,WM),e(WM,dEe),e(dEe,qhr),e(WM,jhr),e(WM,RJ),e(RJ,Dhr),e(WM,Ghr),e(H,Ohr),e(H,UM),e(UM,mEe),e(mEe,Vhr),e(UM,Xhr),e(UM,PJ),e(PJ,zhr),e(UM,Qhr),e(H,Whr),e(H,HM),e(HM,cEe),e(cEe,Uhr),e(HM,Hhr),e(HM,BJ),e(BJ,Jhr),e(HM,Yhr),e(H,Khr),e(H,JM),e(JM,fEe),e(fEe,Zhr),e(JM,eur),e(JM,IJ),e(IJ,our),e(JM,rur),e(H,tur),e(H,YM),e(YM,gEe),e(gEe,aur),e(YM,nur),e(YM,NJ),e(NJ,sur),e(YM,lur),e(H,iur),e(H,KM),e(KM,hEe),e(hEe,dur),e(KM,mur),e(KM,qJ),e(qJ,cur),e(KM,fur),e(H,gur),e(H,ZM),e(ZM,uEe),e(uEe,hur),e(ZM,uur),e(ZM,jJ),e(jJ,pur),e(ZM,_ur),e(H,bur),e(H,eE),e(eE,pEe),e(pEe,vur),e(eE,Fur),e(eE,DJ),e(DJ,Tur),e(eE,Mur),e(H,Eur),e(H,oE),e(oE,_Ee),e(_Ee,Cur),e(oE,wur),e(oE,GJ),e(GJ,Aur),e(oE,Lur),e(H,yur),e(H,rE),e(rE,bEe),e(bEe,xur),e(rE,$ur),e(rE,OJ),e(OJ,kur),e(rE,Sur),e(H,Rur),e(H,tE),e(tE,vEe),e(vEe,Pur),e(tE,Bur),e(tE,VJ),e(VJ,Iur),e(tE,Nur),e(H,qur),e(H,aE),e(aE,FEe),e(FEe,jur),e(aE,Dur),e(aE,XJ),e(XJ,Gur),e(aE,Our),e(H,Vur),e(H,nE),e(nE,TEe),e(TEe,Xur),e(nE,zur),e(nE,zJ),e(zJ,Qur),e(nE,Wur),e(H,Uur),e(H,sE),e(sE,MEe),e(MEe,Hur),e(sE,Jur),e(sE,QJ),e(QJ,Yur),e(sE,Kur),e(H,Zur),e(H,lE),e(lE,EEe),e(EEe,epr),e(lE,opr),e(lE,WJ),e(WJ,rpr),e(lE,tpr),e(H,apr),e(H,iE),e(iE,CEe),e(CEe,npr),e(iE,spr),e(iE,UJ),e(UJ,lpr),e(iE,ipr),e(H,dpr),e(H,dE),e(dE,wEe),e(wEe,mpr),e(dE,cpr),e(dE,HJ),e(HJ,fpr),e(dE,gpr),e(H,hpr),e(H,mE),e(mE,AEe),e(AEe,upr),e(mE,ppr),e(mE,JJ),e(JJ,_pr),e(mE,bpr),e(H,vpr),e(H,cE),e(cE,LEe),e(LEe,Fpr),e(cE,Tpr),e(cE,YJ),e(YJ,Mpr),e(cE,Epr),e(H,Cpr),e(H,fE),e(fE,yEe),e(yEe,wpr),e(fE,Apr),e(fE,KJ),e(KJ,Lpr),e(fE,ypr),e(lo,xpr),e(lo,gE),e(gE,$pr),e(gE,xEe),e(xEe,kpr),e(gE,Spr),e(gE,$Ee),e($Ee,Rpr),e(lo,Ppr),M(hE,lo,null),b(c,Teo,_),b(c,Xd,_),e(Xd,uE),e(uE,kEe),M(b$,kEe,null),e(Xd,Bpr),e(Xd,SEe),e(SEe,Ipr),b(c,Meo,_),b(c,Vo,_),M(v$,Vo,null),e(Vo,Npr),e(Vo,zd),e(zd,qpr),e(zd,ZJ),e(ZJ,jpr),e(zd,Dpr),e(zd,eY),e(eY,Gpr),e(zd,Opr),e(Vo,Vpr),e(Vo,F$),e(F$,Xpr),e(F$,REe),e(REe,zpr),e(F$,Qpr),e(Vo,Wpr),e(Vo,At),M(T$,At,null),e(At,Upr),e(At,PEe),e(PEe,Hpr),e(At,Jpr),e(At,Qd),e(Qd,Ypr),e(Qd,BEe),e(BEe,Kpr),e(Qd,Zpr),e(Qd,oY),e(oY,e_r),e(Qd,o_r),e(At,r_r),M(pE,At,null),e(Vo,t_r),e(Vo,io),M(M$,io,null),e(io,a_r),e(io,IEe),e(IEe,n_r),e(io,s_r),e(io,nn),e(nn,l_r),e(nn,NEe),e(NEe,i_r),e(nn,d_r),e(nn,qEe),e(qEe,m_r),e(nn,c_r),e(nn,jEe),e(jEe,f_r),e(nn,g_r),e(io,h_r),e(io,V),e(V,_E),e(_E,DEe),e(DEe,u_r),e(_E,p_r),e(_E,rY),e(rY,__r),e(_E,b_r),e(V,v_r),e(V,bE),e(bE,GEe),e(GEe,F_r),e(bE,T_r),e(bE,tY),e(tY,M_r),e(bE,E_r),e(V,C_r),e(V,vE),e(vE,OEe),e(OEe,w_r),e(vE,A_r),e(vE,aY),e(aY,L_r),e(vE,y_r),e(V,x_r),e(V,FE),e(FE,VEe),e(VEe,$_r),e(FE,k_r),e(FE,nY),e(nY,S_r),e(FE,R_r),e(V,P_r),e(V,TE),e(TE,XEe),e(XEe,B_r),e(TE,I_r),e(TE,sY),e(sY,N_r),e(TE,q_r),e(V,j_r),e(V,ME),e(ME,zEe),e(zEe,D_r),e(ME,G_r),e(ME,lY),e(lY,O_r),e(ME,V_r),e(V,X_r),e(V,EE),e(EE,QEe),e(QEe,z_r),e(EE,Q_r),e(EE,iY),e(iY,W_r),e(EE,U_r),e(V,H_r),e(V,CE),e(CE,WEe),e(WEe,J_r),e(CE,Y_r),e(CE,dY),e(dY,K_r),e(CE,Z_r),e(V,e1r),e(V,wE),e(wE,UEe),e(UEe,o1r),e(wE,r1r),e(wE,mY),e(mY,t1r),e(wE,a1r),e(V,n1r),e(V,AE),e(AE,HEe),e(HEe,s1r),e(AE,l1r),e(AE,cY),e(cY,i1r),e(AE,d1r),e(V,m1r),e(V,LE),e(LE,JEe),e(JEe,c1r),e(LE,f1r),e(LE,fY),e(fY,g1r),e(LE,h1r),e(V,u1r),e(V,yE),e(yE,YEe),e(YEe,p1r),e(yE,_1r),e(yE,gY),e(gY,b1r),e(yE,v1r),e(V,F1r),e(V,xE),e(xE,KEe),e(KEe,T1r),e(xE,M1r),e(xE,hY),e(hY,E1r),e(xE,C1r),e(V,w1r),e(V,$E),e($E,ZEe),e(ZEe,A1r),e($E,L1r),e($E,uY),e(uY,y1r),e($E,x1r),e(V,$1r),e(V,kE),e(kE,e4e),e(e4e,k1r),e(kE,S1r),e(kE,pY),e(pY,R1r),e(kE,P1r),e(V,B1r),e(V,SE),e(SE,o4e),e(o4e,I1r),e(SE,N1r),e(SE,_Y),e(_Y,q1r),e(SE,j1r),e(V,D1r),e(V,RE),e(RE,r4e),e(r4e,G1r),e(RE,O1r),e(RE,bY),e(bY,V1r),e(RE,X1r),e(V,z1r),e(V,PE),e(PE,t4e),e(t4e,Q1r),e(PE,W1r),e(PE,vY),e(vY,U1r),e(PE,H1r),e(V,J1r),e(V,BE),e(BE,a4e),e(a4e,Y1r),e(BE,K1r),e(BE,FY),e(FY,Z1r),e(BE,e2r),e(V,o2r),e(V,IE),e(IE,n4e),e(n4e,r2r),e(IE,t2r),e(IE,TY),e(TY,a2r),e(IE,n2r),e(V,s2r),e(V,NE),e(NE,s4e),e(s4e,l2r),e(NE,i2r),e(NE,MY),e(MY,d2r),e(NE,m2r),e(V,c2r),e(V,qE),e(qE,l4e),e(l4e,f2r),e(qE,g2r),e(qE,EY),e(EY,h2r),e(qE,u2r),e(V,p2r),e(V,jE),e(jE,i4e),e(i4e,_2r),e(jE,b2r),e(jE,CY),e(CY,v2r),e(jE,F2r),e(V,T2r),e(V,DE),e(DE,d4e),e(d4e,M2r),e(DE,E2r),e(DE,wY),e(wY,C2r),e(DE,w2r),e(V,A2r),e(V,GE),e(GE,m4e),e(m4e,L2r),e(GE,y2r),e(GE,AY),e(AY,x2r),e(GE,$2r),e(V,k2r),e(V,OE),e(OE,c4e),e(c4e,S2r),e(OE,R2r),e(OE,LY),e(LY,P2r),e(OE,B2r),e(V,I2r),e(V,VE),e(VE,f4e),e(f4e,N2r),e(VE,q2r),e(VE,yY),e(yY,j2r),e(VE,D2r),e(V,G2r),e(V,XE),e(XE,g4e),e(g4e,O2r),e(XE,V2r),e(XE,xY),e(xY,X2r),e(XE,z2r),e(V,Q2r),e(V,zE),e(zE,h4e),e(h4e,W2r),e(zE,U2r),e(zE,$Y),e($Y,H2r),e(zE,J2r),e(V,Y2r),e(V,QE),e(QE,u4e),e(u4e,K2r),e(QE,Z2r),e(QE,kY),e(kY,ebr),e(QE,obr),e(V,rbr),e(V,WE),e(WE,p4e),e(p4e,tbr),e(WE,abr),e(WE,SY),e(SY,nbr),e(WE,sbr),e(V,lbr),e(V,UE),e(UE,_4e),e(_4e,ibr),e(UE,dbr),e(UE,RY),e(RY,mbr),e(UE,cbr),e(V,fbr),e(V,HE),e(HE,b4e),e(b4e,gbr),e(HE,hbr),e(HE,PY),e(PY,ubr),e(HE,pbr),e(V,_br),e(V,JE),e(JE,v4e),e(v4e,bbr),e(JE,vbr),e(JE,BY),e(BY,Fbr),e(JE,Tbr),e(V,Mbr),e(V,YE),e(YE,F4e),e(F4e,Ebr),e(YE,Cbr),e(YE,IY),e(IY,wbr),e(YE,Abr),e(V,Lbr),e(V,KE),e(KE,T4e),e(T4e,ybr),e(KE,xbr),e(KE,NY),e(NY,$br),e(KE,kbr),e(V,Sbr),e(V,ZE),e(ZE,M4e),e(M4e,Rbr),e(ZE,Pbr),e(ZE,qY),e(qY,Bbr),e(ZE,Ibr),e(V,Nbr),e(V,e4),e(e4,E4e),e(E4e,qbr),e(e4,jbr),e(e4,jY),e(jY,Dbr),e(e4,Gbr),e(V,Obr),e(V,o4),e(o4,C4e),e(C4e,Vbr),e(o4,Xbr),e(o4,DY),e(DY,zbr),e(o4,Qbr),e(V,Wbr),e(V,r4),e(r4,w4e),e(w4e,Ubr),e(r4,Hbr),e(r4,GY),e(GY,Jbr),e(r4,Ybr),e(V,Kbr),e(V,t4),e(t4,A4e),e(A4e,Zbr),e(t4,evr),e(t4,OY),e(OY,ovr),e(t4,rvr),e(V,tvr),e(V,a4),e(a4,L4e),e(L4e,avr),e(a4,nvr),e(a4,VY),e(VY,svr),e(a4,lvr),e(V,ivr),e(V,n4),e(n4,y4e),e(y4e,dvr),e(n4,mvr),e(n4,XY),e(XY,cvr),e(n4,fvr),e(V,gvr),e(V,s4),e(s4,x4e),e(x4e,hvr),e(s4,uvr),e(s4,zY),e(zY,pvr),e(s4,_vr),e(V,bvr),e(V,l4),e(l4,$4e),e($4e,vvr),e(l4,Fvr),e(l4,QY),e(QY,Tvr),e(l4,Mvr),e(V,Evr),e(V,i4),e(i4,k4e),e(k4e,Cvr),e(i4,wvr),e(i4,WY),e(WY,Avr),e(i4,Lvr),e(io,yvr),e(io,d4),e(d4,xvr),e(d4,S4e),e(S4e,$vr),e(d4,kvr),e(d4,R4e),e(R4e,Svr),e(io,Rvr),M(m4,io,null),b(c,Eeo,_),b(c,Wd,_),e(Wd,c4),e(c4,P4e),M(E$,P4e,null),e(Wd,Pvr),e(Wd,B4e),e(B4e,Bvr),b(c,Ceo,_),b(c,Xo,_),M(C$,Xo,null),e(Xo,Ivr),e(Xo,Ud),e(Ud,Nvr),e(Ud,UY),e(UY,qvr),e(Ud,jvr),e(Ud,HY),e(HY,Dvr),e(Ud,Gvr),e(Xo,Ovr),e(Xo,w$),e(w$,Vvr),e(w$,I4e),e(I4e,Xvr),e(w$,zvr),e(Xo,Qvr),e(Xo,Lt),M(A$,Lt,null),e(Lt,Wvr),e(Lt,N4e),e(N4e,Uvr),e(Lt,Hvr),e(Lt,Hd),e(Hd,Jvr),e(Hd,q4e),e(q4e,Yvr),e(Hd,Kvr),e(Hd,JY),e(JY,Zvr),e(Hd,eFr),e(Lt,oFr),M(f4,Lt,null),e(Xo,rFr),e(Xo,mo),M(L$,mo,null),e(mo,tFr),e(mo,j4e),e(j4e,aFr),e(mo,nFr),e(mo,sn),e(sn,sFr),e(sn,D4e),e(D4e,lFr),e(sn,iFr),e(sn,G4e),e(G4e,dFr),e(sn,mFr),e(sn,O4e),e(O4e,cFr),e(sn,fFr),e(mo,gFr),e(mo,V4e),e(V4e,g4),e(g4,X4e),e(X4e,hFr),e(g4,uFr),e(g4,YY),e(YY,pFr),e(g4,_Fr),e(mo,bFr),e(mo,h4),e(h4,vFr),e(h4,z4e),e(z4e,FFr),e(h4,TFr),e(h4,Q4e),e(Q4e,MFr),e(mo,EFr),M(u4,mo,null),b(c,weo,_),b(c,Jd,_),e(Jd,p4),e(p4,W4e),M(y$,W4e,null),e(Jd,CFr),e(Jd,U4e),e(U4e,wFr),b(c,Aeo,_),b(c,zo,_),M(x$,zo,null),e(zo,AFr),e(zo,Yd),e(Yd,LFr),e(Yd,KY),e(KY,yFr),e(Yd,xFr),e(Yd,ZY),e(ZY,$Fr),e(Yd,kFr),e(zo,SFr),e(zo,$$),e($$,RFr),e($$,H4e),e(H4e,PFr),e($$,BFr),e(zo,IFr),e(zo,yt),M(k$,yt,null),e(yt,NFr),e(yt,J4e),e(J4e,qFr),e(yt,jFr),e(yt,Kd),e(Kd,DFr),e(Kd,Y4e),e(Y4e,GFr),e(Kd,OFr),e(Kd,eK),e(eK,VFr),e(Kd,XFr),e(yt,zFr),M(_4,yt,null),e(zo,QFr),e(zo,co),M(S$,co,null),e(co,WFr),e(co,K4e),e(K4e,UFr),e(co,HFr),e(co,ln),e(ln,JFr),e(ln,Z4e),e(Z4e,YFr),e(ln,KFr),e(ln,eCe),e(eCe,ZFr),e(ln,eTr),e(ln,oCe),e(oCe,oTr),e(ln,rTr),e(co,tTr),e(co,Zd),e(Zd,b4),e(b4,rCe),e(rCe,aTr),e(b4,nTr),e(b4,oK),e(oK,sTr),e(b4,lTr),e(Zd,iTr),e(Zd,v4),e(v4,tCe),e(tCe,dTr),e(v4,mTr),e(v4,rK),e(rK,cTr),e(v4,fTr),e(Zd,gTr),e(Zd,F4),e(F4,aCe),e(aCe,hTr),e(F4,uTr),e(F4,tK),e(tK,pTr),e(F4,_Tr),e(co,bTr),e(co,T4),e(T4,vTr),e(T4,nCe),e(nCe,FTr),e(T4,TTr),e(T4,sCe),e(sCe,MTr),e(co,ETr),M(M4,co,null),b(c,Leo,_),b(c,em,_),e(em,E4),e(E4,lCe),M(R$,lCe,null),e(em,CTr),e(em,iCe),e(iCe,wTr),b(c,yeo,_),b(c,Qo,_),M(P$,Qo,null),e(Qo,ATr),e(Qo,om),e(om,LTr),e(om,aK),e(aK,yTr),e(om,xTr),e(om,nK),e(nK,$Tr),e(om,kTr),e(Qo,STr),e(Qo,B$),e(B$,RTr),e(B$,dCe),e(dCe,PTr),e(B$,BTr),e(Qo,ITr),e(Qo,xt),M(I$,xt,null),e(xt,NTr),e(xt,mCe),e(mCe,qTr),e(xt,jTr),e(xt,rm),e(rm,DTr),e(rm,cCe),e(cCe,GTr),e(rm,OTr),e(rm,sK),e(sK,VTr),e(rm,XTr),e(xt,zTr),M(C4,xt,null),e(Qo,QTr),e(Qo,fo),M(N$,fo,null),e(fo,WTr),e(fo,fCe),e(fCe,UTr),e(fo,HTr),e(fo,dn),e(dn,JTr),e(dn,gCe),e(gCe,YTr),e(dn,KTr),e(dn,hCe),e(hCe,ZTr),e(dn,eMr),e(dn,uCe),e(uCe,oMr),e(dn,rMr),e(fo,tMr),e(fo,be),e(be,w4),e(w4,pCe),e(pCe,aMr),e(w4,nMr),e(w4,lK),e(lK,sMr),e(w4,lMr),e(be,iMr),e(be,A4),e(A4,_Ce),e(_Ce,dMr),e(A4,mMr),e(A4,iK),e(iK,cMr),e(A4,fMr),e(be,gMr),e(be,L4),e(L4,bCe),e(bCe,hMr),e(L4,uMr),e(L4,dK),e(dK,pMr),e(L4,_Mr),e(be,bMr),e(be,y4),e(y4,vCe),e(vCe,vMr),e(y4,FMr),e(y4,mK),e(mK,TMr),e(y4,MMr),e(be,EMr),e(be,bl),e(bl,FCe),e(FCe,CMr),e(bl,wMr),e(bl,cK),e(cK,AMr),e(bl,LMr),e(bl,fK),e(fK,yMr),e(bl,xMr),e(be,$Mr),e(be,x4),e(x4,TCe),e(TCe,kMr),e(x4,SMr),e(x4,gK),e(gK,RMr),e(x4,PMr),e(be,BMr),e(be,vl),e(vl,MCe),e(MCe,IMr),e(vl,NMr),e(vl,hK),e(hK,qMr),e(vl,jMr),e(vl,uK),e(uK,DMr),e(vl,GMr),e(be,OMr),e(be,$4),e($4,ECe),e(ECe,VMr),e($4,XMr),e($4,pK),e(pK,zMr),e($4,QMr),e(be,WMr),e(be,$t),e($t,CCe),e(CCe,UMr),e($t,HMr),e($t,_K),e(_K,JMr),e($t,YMr),e($t,bK),e(bK,KMr),e($t,ZMr),e($t,vK),e(vK,eEr),e($t,oEr),e(be,rEr),e(be,k4),e(k4,wCe),e(wCe,tEr),e(k4,aEr),e(k4,FK),e(FK,nEr),e(k4,sEr),e(be,lEr),e(be,S4),e(S4,ACe),e(ACe,iEr),e(S4,dEr),e(S4,TK),e(TK,mEr),e(S4,cEr),e(be,fEr),e(be,R4),e(R4,LCe),e(LCe,gEr),e(R4,hEr),e(R4,MK),e(MK,uEr),e(R4,pEr),e(be,_Er),e(be,P4),e(P4,yCe),e(yCe,bEr),e(P4,vEr),e(P4,EK),e(EK,FEr),e(P4,TEr),e(be,MEr),e(be,B4),e(B4,xCe),e(xCe,EEr),e(B4,CEr),e(B4,CK),e(CK,wEr),e(B4,AEr),e(be,LEr),e(be,I4),e(I4,$Ce),e($Ce,yEr),e(I4,xEr),e(I4,wK),e(wK,$Er),e(I4,kEr),e(be,SEr),e(be,N4),e(N4,kCe),e(kCe,REr),e(N4,PEr),e(N4,AK),e(AK,BEr),e(N4,IEr),e(be,NEr),e(be,q4),e(q4,SCe),e(SCe,qEr),e(q4,jEr),e(q4,LK),e(LK,DEr),e(q4,GEr),e(be,OEr),e(be,j4),e(j4,RCe),e(RCe,VEr),e(j4,XEr),e(j4,yK),e(yK,zEr),e(j4,QEr),e(fo,WEr),e(fo,D4),e(D4,UEr),e(D4,PCe),e(PCe,HEr),e(D4,JEr),e(D4,BCe),e(BCe,YEr),e(fo,KEr),M(G4,fo,null),b(c,xeo,_),b(c,tm,_),e(tm,O4),e(O4,ICe),M(q$,ICe,null),e(tm,ZEr),e(tm,NCe),e(NCe,e4r),b(c,$eo,_),b(c,Wo,_),M(j$,Wo,null),e(Wo,o4r),e(Wo,am),e(am,r4r),e(am,xK),e(xK,t4r),e(am,a4r),e(am,$K),e($K,n4r),e(am,s4r),e(Wo,l4r),e(Wo,D$),e(D$,i4r),e(D$,qCe),e(qCe,d4r),e(D$,m4r),e(Wo,c4r),e(Wo,kt),M(G$,kt,null),e(kt,f4r),e(kt,jCe),e(jCe,g4r),e(kt,h4r),e(kt,nm),e(nm,u4r),e(nm,DCe),e(DCe,p4r),e(nm,_4r),e(nm,kK),e(kK,b4r),e(nm,v4r),e(kt,F4r),M(V4,kt,null),e(Wo,T4r),e(Wo,go),M(O$,go,null),e(go,M4r),e(go,GCe),e(GCe,E4r),e(go,C4r),e(go,mn),e(mn,w4r),e(mn,OCe),e(OCe,A4r),e(mn,L4r),e(mn,VCe),e(VCe,y4r),e(mn,x4r),e(mn,XCe),e(XCe,$4r),e(mn,k4r),e(go,S4r),e(go,zCe),e(zCe,X4),e(X4,QCe),e(QCe,R4r),e(X4,P4r),e(X4,SK),e(SK,B4r),e(X4,I4r),e(go,N4r),e(go,z4),e(z4,q4r),e(z4,WCe),e(WCe,j4r),e(z4,D4r),e(z4,UCe),e(UCe,G4r),e(go,O4r),M(Q4,go,null),b(c,keo,_),b(c,sm,_),e(sm,W4),e(W4,HCe),M(V$,HCe,null),e(sm,V4r),e(sm,JCe),e(JCe,X4r),b(c,Seo,_),b(c,Uo,_),M(X$,Uo,null),e(Uo,z4r),e(Uo,lm),e(lm,Q4r),e(lm,RK),e(RK,W4r),e(lm,U4r),e(lm,PK),e(PK,H4r),e(lm,J4r),e(Uo,Y4r),e(Uo,z$),e(z$,K4r),e(z$,YCe),e(YCe,Z4r),e(z$,eCr),e(Uo,oCr),e(Uo,St),M(Q$,St,null),e(St,rCr),e(St,KCe),e(KCe,tCr),e(St,aCr),e(St,im),e(im,nCr),e(im,ZCe),e(ZCe,sCr),e(im,lCr),e(im,BK),e(BK,iCr),e(im,dCr),e(St,mCr),M(U4,St,null),e(Uo,cCr),e(Uo,ho),M(W$,ho,null),e(ho,fCr),e(ho,e3e),e(e3e,gCr),e(ho,hCr),e(ho,cn),e(cn,uCr),e(cn,o3e),e(o3e,pCr),e(cn,_Cr),e(cn,r3e),e(r3e,bCr),e(cn,vCr),e(cn,t3e),e(t3e,FCr),e(cn,TCr),e(ho,MCr),e(ho,a3e),e(a3e,H4),e(H4,n3e),e(n3e,ECr),e(H4,CCr),e(H4,IK),e(IK,wCr),e(H4,ACr),e(ho,LCr),e(ho,J4),e(J4,yCr),e(J4,s3e),e(s3e,xCr),e(J4,$Cr),e(J4,l3e),e(l3e,kCr),e(ho,SCr),M(Y4,ho,null),b(c,Reo,_),b(c,dm,_),e(dm,K4),e(K4,i3e),M(U$,i3e,null),e(dm,RCr),e(dm,d3e),e(d3e,PCr),b(c,Peo,_),b(c,Ho,_),M(H$,Ho,null),e(Ho,BCr),e(Ho,mm),e(mm,ICr),e(mm,NK),e(NK,NCr),e(mm,qCr),e(mm,qK),e(qK,jCr),e(mm,DCr),e(Ho,GCr),e(Ho,J$),e(J$,OCr),e(J$,m3e),e(m3e,VCr),e(J$,XCr),e(Ho,zCr),e(Ho,Rt),M(Y$,Rt,null),e(Rt,QCr),e(Rt,c3e),e(c3e,WCr),e(Rt,UCr),e(Rt,cm),e(cm,HCr),e(cm,f3e),e(f3e,JCr),e(cm,YCr),e(cm,jK),e(jK,KCr),e(cm,ZCr),e(Rt,e3r),M(Z4,Rt,null),e(Ho,o3r),e(Ho,uo),M(K$,uo,null),e(uo,r3r),e(uo,g3e),e(g3e,t3r),e(uo,a3r),e(uo,fn),e(fn,n3r),e(fn,h3e),e(h3e,s3r),e(fn,l3r),e(fn,u3e),e(u3e,i3r),e(fn,d3r),e(fn,p3e),e(p3e,m3r),e(fn,c3r),e(uo,f3r),e(uo,_3e),e(_3e,eC),e(eC,b3e),e(b3e,g3r),e(eC,h3r),e(eC,DK),e(DK,u3r),e(eC,p3r),e(uo,_3r),e(uo,oC),e(oC,b3r),e(oC,v3e),e(v3e,v3r),e(oC,F3r),e(oC,F3e),e(F3e,T3r),e(uo,M3r),M(rC,uo,null),b(c,Beo,_),b(c,fm,_),e(fm,tC),e(tC,T3e),M(Z$,T3e,null),e(fm,E3r),e(fm,M3e),e(M3e,C3r),b(c,Ieo,_),b(c,Jo,_),M(ek,Jo,null),e(Jo,w3r),e(Jo,gm),e(gm,A3r),e(gm,GK),e(GK,L3r),e(gm,y3r),e(gm,OK),e(OK,x3r),e(gm,$3r),e(Jo,k3r),e(Jo,ok),e(ok,S3r),e(ok,E3e),e(E3e,R3r),e(ok,P3r),e(Jo,B3r),e(Jo,Pt),M(rk,Pt,null),e(Pt,I3r),e(Pt,C3e),e(C3e,N3r),e(Pt,q3r),e(Pt,hm),e(hm,j3r),e(hm,w3e),e(w3e,D3r),e(hm,G3r),e(hm,VK),e(VK,O3r),e(hm,V3r),e(Pt,X3r),M(aC,Pt,null),e(Jo,z3r),e(Jo,po),M(tk,po,null),e(po,Q3r),e(po,A3e),e(A3e,W3r),e(po,U3r),e(po,gn),e(gn,H3r),e(gn,L3e),e(L3e,J3r),e(gn,Y3r),e(gn,y3e),e(y3e,K3r),e(gn,Z3r),e(gn,x3e),e(x3e,e5r),e(gn,o5r),e(po,r5r),e(po,Pe),e(Pe,nC),e(nC,$3e),e($3e,t5r),e(nC,a5r),e(nC,XK),e(XK,n5r),e(nC,s5r),e(Pe,l5r),e(Pe,sC),e(sC,k3e),e(k3e,i5r),e(sC,d5r),e(sC,zK),e(zK,m5r),e(sC,c5r),e(Pe,f5r),e(Pe,lC),e(lC,S3e),e(S3e,g5r),e(lC,h5r),e(lC,QK),e(QK,u5r),e(lC,p5r),e(Pe,_5r),e(Pe,iC),e(iC,R3e),e(R3e,b5r),e(iC,v5r),e(iC,WK),e(WK,F5r),e(iC,T5r),e(Pe,M5r),e(Pe,dC),e(dC,P3e),e(P3e,E5r),e(dC,C5r),e(dC,UK),e(UK,w5r),e(dC,A5r),e(Pe,L5r),e(Pe,mC),e(mC,B3e),e(B3e,y5r),e(mC,x5r),e(mC,HK),e(HK,$5r),e(mC,k5r),e(Pe,S5r),e(Pe,cC),e(cC,I3e),e(I3e,R5r),e(cC,P5r),e(cC,JK),e(JK,B5r),e(cC,I5r),e(Pe,N5r),e(Pe,fC),e(fC,N3e),e(N3e,q5r),e(fC,j5r),e(fC,YK),e(YK,D5r),e(fC,G5r),e(Pe,O5r),e(Pe,gC),e(gC,q3e),e(q3e,V5r),e(gC,X5r),e(gC,KK),e(KK,z5r),e(gC,Q5r),e(po,W5r),e(po,hC),e(hC,U5r),e(hC,j3e),e(j3e,H5r),e(hC,J5r),e(hC,D3e),e(D3e,Y5r),e(po,K5r),M(uC,po,null),b(c,Neo,_),b(c,um,_),e(um,pC),e(pC,G3e),M(ak,G3e,null),e(um,Z5r),e(um,O3e),e(O3e,e0r),b(c,qeo,_),b(c,Yo,_),M(nk,Yo,null),e(Yo,o0r),e(Yo,pm),e(pm,r0r),e(pm,ZK),e(ZK,t0r),e(pm,a0r),e(pm,eZ),e(eZ,n0r),e(pm,s0r),e(Yo,l0r),e(Yo,sk),e(sk,i0r),e(sk,V3e),e(V3e,d0r),e(sk,m0r),e(Yo,c0r),e(Yo,Bt),M(lk,Bt,null),e(Bt,f0r),e(Bt,X3e),e(X3e,g0r),e(Bt,h0r),e(Bt,_m),e(_m,u0r),e(_m,z3e),e(z3e,p0r),e(_m,_0r),e(_m,oZ),e(oZ,b0r),e(_m,v0r),e(Bt,F0r),M(_C,Bt,null),e(Yo,T0r),e(Yo,_o),M(ik,_o,null),e(_o,M0r),e(_o,Q3e),e(Q3e,E0r),e(_o,C0r),e(_o,hn),e(hn,w0r),e(hn,W3e),e(W3e,A0r),e(hn,L0r),e(hn,U3e),e(U3e,y0r),e(hn,x0r),e(hn,H3e),e(H3e,$0r),e(hn,k0r),e(_o,S0r),e(_o,ct),e(ct,bC),e(bC,J3e),e(J3e,R0r),e(bC,P0r),e(bC,rZ),e(rZ,B0r),e(bC,I0r),e(ct,N0r),e(ct,vC),e(vC,Y3e),e(Y3e,q0r),e(vC,j0r),e(vC,tZ),e(tZ,D0r),e(vC,G0r),e(ct,O0r),e(ct,FC),e(FC,K3e),e(K3e,V0r),e(FC,X0r),e(FC,aZ),e(aZ,z0r),e(FC,Q0r),e(ct,W0r),e(ct,TC),e(TC,Z3e),e(Z3e,U0r),e(TC,H0r),e(TC,nZ),e(nZ,J0r),e(TC,Y0r),e(ct,K0r),e(ct,MC),e(MC,e5e),e(e5e,Z0r),e(MC,ewr),e(MC,sZ),e(sZ,owr),e(MC,rwr),e(_o,twr),e(_o,EC),e(EC,awr),e(EC,o5e),e(o5e,nwr),e(EC,swr),e(EC,r5e),e(r5e,lwr),e(_o,iwr),M(CC,_o,null),b(c,jeo,_),b(c,bm,_),e(bm,wC),e(wC,t5e),M(dk,t5e,null),e(bm,dwr),e(bm,a5e),e(a5e,mwr),b(c,Deo,_),b(c,Ko,_),M(mk,Ko,null),e(Ko,cwr),e(Ko,vm),e(vm,fwr),e(vm,lZ),e(lZ,gwr),e(vm,hwr),e(vm,iZ),e(iZ,uwr),e(vm,pwr),e(Ko,_wr),e(Ko,ck),e(ck,bwr),e(ck,n5e),e(n5e,vwr),e(ck,Fwr),e(Ko,Twr),e(Ko,It),M(fk,It,null),e(It,Mwr),e(It,s5e),e(s5e,Ewr),e(It,Cwr),e(It,Fm),e(Fm,wwr),e(Fm,l5e),e(l5e,Awr),e(Fm,Lwr),e(Fm,dZ),e(dZ,ywr),e(Fm,xwr),e(It,$wr),M(AC,It,null),e(Ko,kwr),e(Ko,bo),M(gk,bo,null),e(bo,Swr),e(bo,i5e),e(i5e,Rwr),e(bo,Pwr),e(bo,un),e(un,Bwr),e(un,d5e),e(d5e,Iwr),e(un,Nwr),e(un,m5e),e(m5e,qwr),e(un,jwr),e(un,c5e),e(c5e,Dwr),e(un,Gwr),e(bo,Owr),e(bo,Le),e(Le,LC),e(LC,f5e),e(f5e,Vwr),e(LC,Xwr),e(LC,mZ),e(mZ,zwr),e(LC,Qwr),e(Le,Wwr),e(Le,yC),e(yC,g5e),e(g5e,Uwr),e(yC,Hwr),e(yC,cZ),e(cZ,Jwr),e(yC,Ywr),e(Le,Kwr),e(Le,xC),e(xC,h5e),e(h5e,Zwr),e(xC,eAr),e(xC,fZ),e(fZ,oAr),e(xC,rAr),e(Le,tAr),e(Le,$C),e($C,u5e),e(u5e,aAr),e($C,nAr),e($C,gZ),e(gZ,sAr),e($C,lAr),e(Le,iAr),e(Le,kC),e(kC,p5e),e(p5e,dAr),e(kC,mAr),e(kC,hZ),e(hZ,cAr),e(kC,fAr),e(Le,gAr),e(Le,SC),e(SC,_5e),e(_5e,hAr),e(SC,uAr),e(SC,uZ),e(uZ,pAr),e(SC,_Ar),e(Le,bAr),e(Le,RC),e(RC,b5e),e(b5e,vAr),e(RC,FAr),e(RC,pZ),e(pZ,TAr),e(RC,MAr),e(Le,EAr),e(Le,PC),e(PC,v5e),e(v5e,CAr),e(PC,wAr),e(PC,_Z),e(_Z,AAr),e(PC,LAr),e(Le,yAr),e(Le,BC),e(BC,F5e),e(F5e,xAr),e(BC,$Ar),e(BC,bZ),e(bZ,kAr),e(BC,SAr),e(Le,RAr),e(Le,IC),e(IC,T5e),e(T5e,PAr),e(IC,BAr),e(IC,vZ),e(vZ,IAr),e(IC,NAr),e(bo,qAr),e(bo,NC),e(NC,jAr),e(NC,M5e),e(M5e,DAr),e(NC,GAr),e(NC,E5e),e(E5e,OAr),e(bo,VAr),M(qC,bo,null),b(c,Geo,_),b(c,Tm,_),e(Tm,jC),e(jC,C5e),M(hk,C5e,null),e(Tm,XAr),e(Tm,w5e),e(w5e,zAr),b(c,Oeo,_),b(c,Zo,_),M(uk,Zo,null),e(Zo,QAr),e(Zo,Mm),e(Mm,WAr),e(Mm,FZ),e(FZ,UAr),e(Mm,HAr),e(Mm,TZ),e(TZ,JAr),e(Mm,YAr),e(Zo,KAr),e(Zo,pk),e(pk,ZAr),e(pk,A5e),e(A5e,e6r),e(pk,o6r),e(Zo,r6r),e(Zo,Nt),M(_k,Nt,null),e(Nt,t6r),e(Nt,L5e),e(L5e,a6r),e(Nt,n6r),e(Nt,Em),e(Em,s6r),e(Em,y5e),e(y5e,l6r),e(Em,i6r),e(Em,MZ),e(MZ,d6r),e(Em,m6r),e(Nt,c6r),M(DC,Nt,null),e(Zo,f6r),e(Zo,vo),M(bk,vo,null),e(vo,g6r),e(vo,x5e),e(x5e,h6r),e(vo,u6r),e(vo,pn),e(pn,p6r),e(pn,$5e),e($5e,_6r),e(pn,b6r),e(pn,k5e),e(k5e,v6r),e(pn,F6r),e(pn,S5e),e(S5e,T6r),e(pn,M6r),e(vo,E6r),e(vo,vk),e(vk,GC),e(GC,R5e),e(R5e,C6r),e(GC,w6r),e(GC,EZ),e(EZ,A6r),e(GC,L6r),e(vk,y6r),e(vk,OC),e(OC,P5e),e(P5e,x6r),e(OC,$6r),e(OC,CZ),e(CZ,k6r),e(OC,S6r),e(vo,R6r),e(vo,VC),e(VC,P6r),e(VC,B5e),e(B5e,B6r),e(VC,I6r),e(VC,I5e),e(I5e,N6r),e(vo,q6r),M(XC,vo,null),b(c,Veo,_),b(c,Cm,_),e(Cm,zC),e(zC,N5e),M(Fk,N5e,null),e(Cm,j6r),e(Cm,q5e),e(q5e,D6r),b(c,Xeo,_),b(c,er,_),M(Tk,er,null),e(er,G6r),e(er,wm),e(wm,O6r),e(wm,wZ),e(wZ,V6r),e(wm,X6r),e(wm,AZ),e(AZ,z6r),e(wm,Q6r),e(er,W6r),e(er,Mk),e(Mk,U6r),e(Mk,j5e),e(j5e,H6r),e(Mk,J6r),e(er,Y6r),e(er,qt),M(Ek,qt,null),e(qt,K6r),e(qt,D5e),e(D5e,Z6r),e(qt,e7r),e(qt,Am),e(Am,o7r),e(Am,G5e),e(G5e,r7r),e(Am,t7r),e(Am,LZ),e(LZ,a7r),e(Am,n7r),e(qt,s7r),M(QC,qt,null),e(er,l7r),e(er,Fo),M(Ck,Fo,null),e(Fo,i7r),e(Fo,O5e),e(O5e,d7r),e(Fo,m7r),e(Fo,_n),e(_n,c7r),e(_n,V5e),e(V5e,f7r),e(_n,g7r),e(_n,X5e),e(X5e,h7r),e(_n,u7r),e(_n,z5e),e(z5e,p7r),e(_n,_7r),e(Fo,b7r),e(Fo,ft),e(ft,WC),e(WC,Q5e),e(Q5e,v7r),e(WC,F7r),e(WC,yZ),e(yZ,T7r),e(WC,M7r),e(ft,E7r),e(ft,UC),e(UC,W5e),e(W5e,C7r),e(UC,w7r),e(UC,xZ),e(xZ,A7r),e(UC,L7r),e(ft,y7r),e(ft,HC),e(HC,U5e),e(U5e,x7r),e(HC,$7r),e(HC,$Z),e($Z,k7r),e(HC,S7r),e(ft,R7r),e(ft,JC),e(JC,H5e),e(H5e,P7r),e(JC,B7r),e(JC,kZ),e(kZ,I7r),e(JC,N7r),e(ft,q7r),e(ft,YC),e(YC,J5e),e(J5e,j7r),e(YC,D7r),e(YC,SZ),e(SZ,G7r),e(YC,O7r),e(Fo,V7r),e(Fo,KC),e(KC,X7r),e(KC,Y5e),e(Y5e,z7r),e(KC,Q7r),e(KC,K5e),e(K5e,W7r),e(Fo,U7r),M(ZC,Fo,null),b(c,zeo,_),b(c,Lm,_),e(Lm,e3),e(e3,Z5e),M(wk,Z5e,null),e(Lm,H7r),e(Lm,e0e),e(e0e,J7r),b(c,Qeo,_),b(c,or,_),M(Ak,or,null),e(or,Y7r),e(or,ym),e(ym,K7r),e(ym,RZ),e(RZ,Z7r),e(ym,eLr),e(ym,PZ),e(PZ,oLr),e(ym,rLr),e(or,tLr),e(or,Lk),e(Lk,aLr),e(Lk,o0e),e(o0e,nLr),e(Lk,sLr),e(or,lLr),e(or,jt),M(yk,jt,null),e(jt,iLr),e(jt,r0e),e(r0e,dLr),e(jt,mLr),e(jt,xm),e(xm,cLr),e(xm,t0e),e(t0e,fLr),e(xm,gLr),e(xm,BZ),e(BZ,hLr),e(xm,uLr),e(jt,pLr),M(o3,jt,null),e(or,_Lr),e(or,To),M(xk,To,null),e(To,bLr),e(To,a0e),e(a0e,vLr),e(To,FLr),e(To,bn),e(bn,TLr),e(bn,n0e),e(n0e,MLr),e(bn,ELr),e(bn,s0e),e(s0e,CLr),e(bn,wLr),e(bn,l0e),e(l0e,ALr),e(bn,LLr),e(To,yLr),e(To,vn),e(vn,r3),e(r3,i0e),e(i0e,xLr),e(r3,$Lr),e(r3,IZ),e(IZ,kLr),e(r3,SLr),e(vn,RLr),e(vn,t3),e(t3,d0e),e(d0e,PLr),e(t3,BLr),e(t3,NZ),e(NZ,ILr),e(t3,NLr),e(vn,qLr),e(vn,a3),e(a3,m0e),e(m0e,jLr),e(a3,DLr),e(a3,qZ),e(qZ,GLr),e(a3,OLr),e(vn,VLr),e(vn,n3),e(n3,c0e),e(c0e,XLr),e(n3,zLr),e(n3,jZ),e(jZ,QLr),e(n3,WLr),e(To,ULr),e(To,s3),e(s3,HLr),e(s3,f0e),e(f0e,JLr),e(s3,YLr),e(s3,g0e),e(g0e,KLr),e(To,ZLr),M(l3,To,null),b(c,Weo,_),b(c,$m,_),e($m,i3),e(i3,h0e),M($k,h0e,null),e($m,eyr),e($m,u0e),e(u0e,oyr),b(c,Ueo,_),b(c,rr,_),M(kk,rr,null),e(rr,ryr),e(rr,km),e(km,tyr),e(km,DZ),e(DZ,ayr),e(km,nyr),e(km,GZ),e(GZ,syr),e(km,lyr),e(rr,iyr),e(rr,Sk),e(Sk,dyr),e(Sk,p0e),e(p0e,myr),e(Sk,cyr),e(rr,fyr),e(rr,Dt),M(Rk,Dt,null),e(Dt,gyr),e(Dt,_0e),e(_0e,hyr),e(Dt,uyr),e(Dt,Sm),e(Sm,pyr),e(Sm,b0e),e(b0e,_yr),e(Sm,byr),e(Sm,OZ),e(OZ,vyr),e(Sm,Fyr),e(Dt,Tyr),M(d3,Dt,null),e(rr,Myr),e(rr,Mo),M(Pk,Mo,null),e(Mo,Eyr),e(Mo,v0e),e(v0e,Cyr),e(Mo,wyr),e(Mo,Fn),e(Fn,Ayr),e(Fn,F0e),e(F0e,Lyr),e(Fn,yyr),e(Fn,T0e),e(T0e,xyr),e(Fn,$yr),e(Fn,M0e),e(M0e,kyr),e(Fn,Syr),e(Mo,Ryr),e(Mo,Tn),e(Tn,m3),e(m3,E0e),e(E0e,Pyr),e(m3,Byr),e(m3,VZ),e(VZ,Iyr),e(m3,Nyr),e(Tn,qyr),e(Tn,c3),e(c3,C0e),e(C0e,jyr),e(c3,Dyr),e(c3,XZ),e(XZ,Gyr),e(c3,Oyr),e(Tn,Vyr),e(Tn,f3),e(f3,w0e),e(w0e,Xyr),e(f3,zyr),e(f3,zZ),e(zZ,Qyr),e(f3,Wyr),e(Tn,Uyr),e(Tn,g3),e(g3,A0e),e(A0e,Hyr),e(g3,Jyr),e(g3,QZ),e(QZ,Yyr),e(g3,Kyr),e(Mo,Zyr),e(Mo,h3),e(h3,e8r),e(h3,L0e),e(L0e,o8r),e(h3,r8r),e(h3,y0e),e(y0e,t8r),e(Mo,a8r),M(u3,Mo,null),b(c,Heo,_),b(c,Rm,_),e(Rm,p3),e(p3,x0e),M(Bk,x0e,null),e(Rm,n8r),e(Rm,$0e),e($0e,s8r),b(c,Jeo,_),b(c,tr,_),M(Ik,tr,null),e(tr,l8r),e(tr,Pm),e(Pm,i8r),e(Pm,WZ),e(WZ,d8r),e(Pm,m8r),e(Pm,UZ),e(UZ,c8r),e(Pm,f8r),e(tr,g8r),e(tr,Nk),e(Nk,h8r),e(Nk,k0e),e(k0e,u8r),e(Nk,p8r),e(tr,_8r),e(tr,Gt),M(qk,Gt,null),e(Gt,b8r),e(Gt,S0e),e(S0e,v8r),e(Gt,F8r),e(Gt,Bm),e(Bm,T8r),e(Bm,R0e),e(R0e,M8r),e(Bm,E8r),e(Bm,HZ),e(HZ,C8r),e(Bm,w8r),e(Gt,A8r),M(_3,Gt,null),e(tr,L8r),e(tr,Eo),M(jk,Eo,null),e(Eo,y8r),e(Eo,P0e),e(P0e,x8r),e(Eo,$8r),e(Eo,Mn),e(Mn,k8r),e(Mn,B0e),e(B0e,S8r),e(Mn,R8r),e(Mn,I0e),e(I0e,P8r),e(Mn,B8r),e(Mn,N0e),e(N0e,I8r),e(Mn,N8r),e(Eo,q8r),e(Eo,q0e),e(q0e,b3),e(b3,j0e),e(j0e,j8r),e(b3,D8r),e(b3,JZ),e(JZ,G8r),e(b3,O8r),e(Eo,V8r),e(Eo,v3),e(v3,X8r),e(v3,D0e),e(D0e,z8r),e(v3,Q8r),e(v3,G0e),e(G0e,W8r),e(Eo,U8r),M(F3,Eo,null),b(c,Yeo,_),b(c,Im,_),e(Im,T3),e(T3,O0e),M(Dk,O0e,null),e(Im,H8r),e(Im,V0e),e(V0e,J8r),b(c,Keo,_),b(c,ar,_),M(Gk,ar,null),e(ar,Y8r),e(ar,Nm),e(Nm,K8r),e(Nm,YZ),e(YZ,Z8r),e(Nm,e9r),e(Nm,KZ),e(KZ,o9r),e(Nm,r9r),e(ar,t9r),e(ar,Ok),e(Ok,a9r),e(Ok,X0e),e(X0e,n9r),e(Ok,s9r),e(ar,l9r),e(ar,Ot),M(Vk,Ot,null),e(Ot,i9r),e(Ot,z0e),e(z0e,d9r),e(Ot,m9r),e(Ot,qm),e(qm,c9r),e(qm,Q0e),e(Q0e,f9r),e(qm,g9r),e(qm,ZZ),e(ZZ,h9r),e(qm,u9r),e(Ot,p9r),M(M3,Ot,null),e(ar,_9r),e(ar,Co),M(Xk,Co,null),e(Co,b9r),e(Co,W0e),e(W0e,v9r),e(Co,F9r),e(Co,En),e(En,T9r),e(En,U0e),e(U0e,M9r),e(En,E9r),e(En,H0e),e(H0e,C9r),e(En,w9r),e(En,J0e),e(J0e,A9r),e(En,L9r),e(Co,y9r),e(Co,gt),e(gt,E3),e(E3,Y0e),e(Y0e,x9r),e(E3,$9r),e(E3,eee),e(eee,k9r),e(E3,S9r),e(gt,R9r),e(gt,C3),e(C3,K0e),e(K0e,P9r),e(C3,B9r),e(C3,oee),e(oee,I9r),e(C3,N9r),e(gt,q9r),e(gt,w3),e(w3,Z0e),e(Z0e,j9r),e(w3,D9r),e(w3,ree),e(ree,G9r),e(w3,O9r),e(gt,V9r),e(gt,A3),e(A3,ewe),e(ewe,X9r),e(A3,z9r),e(A3,tee),e(tee,Q9r),e(A3,W9r),e(gt,U9r),e(gt,L3),e(L3,owe),e(owe,H9r),e(L3,J9r),e(L3,aee),e(aee,Y9r),e(L3,K9r),e(Co,Z9r),e(Co,y3),e(y3,exr),e(y3,rwe),e(rwe,oxr),e(y3,rxr),e(y3,twe),e(twe,txr),e(Co,axr),M(x3,Co,null),b(c,Zeo,_),b(c,jm,_),e(jm,$3),e($3,awe),M(zk,awe,null),e(jm,nxr),e(jm,nwe),e(nwe,sxr),b(c,eoo,_),b(c,nr,_),M(Qk,nr,null),e(nr,lxr),e(nr,Dm),e(Dm,ixr),e(Dm,nee),e(nee,dxr),e(Dm,mxr),e(Dm,see),e(see,cxr),e(Dm,fxr),e(nr,gxr),e(nr,Wk),e(Wk,hxr),e(Wk,swe),e(swe,uxr),e(Wk,pxr),e(nr,_xr),e(nr,Vt),M(Uk,Vt,null),e(Vt,bxr),e(Vt,lwe),e(lwe,vxr),e(Vt,Fxr),e(Vt,Gm),e(Gm,Txr),e(Gm,iwe),e(iwe,Mxr),e(Gm,Exr),e(Gm,lee),e(lee,Cxr),e(Gm,wxr),e(Vt,Axr),M(k3,Vt,null),e(nr,Lxr),e(nr,wo),M(Hk,wo,null),e(wo,yxr),e(wo,dwe),e(dwe,xxr),e(wo,$xr),e(wo,Cn),e(Cn,kxr),e(Cn,mwe),e(mwe,Sxr),e(Cn,Rxr),e(Cn,cwe),e(cwe,Pxr),e(Cn,Bxr),e(Cn,fwe),e(fwe,Ixr),e(Cn,Nxr),e(wo,qxr),e(wo,gwe),e(gwe,S3),e(S3,hwe),e(hwe,jxr),e(S3,Dxr),e(S3,iee),e(iee,Gxr),e(S3,Oxr),e(wo,Vxr),e(wo,R3),e(R3,Xxr),e(R3,uwe),e(uwe,zxr),e(R3,Qxr),e(R3,pwe),e(pwe,Wxr),e(wo,Uxr),M(P3,wo,null),b(c,ooo,_),b(c,Om,_),e(Om,B3),e(B3,_we),M(Jk,_we,null),e(Om,Hxr),e(Om,bwe),e(bwe,Jxr),b(c,roo,_),b(c,sr,_),M(Yk,sr,null),e(sr,Yxr),e(sr,Vm),e(Vm,Kxr),e(Vm,dee),e(dee,Zxr),e(Vm,e$r),e(Vm,mee),e(mee,o$r),e(Vm,r$r),e(sr,t$r),e(sr,Kk),e(Kk,a$r),e(Kk,vwe),e(vwe,n$r),e(Kk,s$r),e(sr,l$r),e(sr,Xt),M(Zk,Xt,null),e(Xt,i$r),e(Xt,Fwe),e(Fwe,d$r),e(Xt,m$r),e(Xt,Xm),e(Xm,c$r),e(Xm,Twe),e(Twe,f$r),e(Xm,g$r),e(Xm,cee),e(cee,h$r),e(Xm,u$r),e(Xt,p$r),M(I3,Xt,null),e(sr,_$r),e(sr,Ir),M(eS,Ir,null),e(Ir,b$r),e(Ir,Mwe),e(Mwe,v$r),e(Ir,F$r),e(Ir,wn),e(wn,T$r),e(wn,Ewe),e(Ewe,M$r),e(wn,E$r),e(wn,Cwe),e(Cwe,C$r),e(wn,w$r),e(wn,wwe),e(wwe,A$r),e(wn,L$r),e(Ir,y$r),e(Ir,I),e(I,N3),e(N3,Awe),e(Awe,x$r),e(N3,$$r),e(N3,fee),e(fee,k$r),e(N3,S$r),e(I,R$r),e(I,q3),e(q3,Lwe),e(Lwe,P$r),e(q3,B$r),e(q3,gee),e(gee,I$r),e(q3,N$r),e(I,q$r),e(I,j3),e(j3,ywe),e(ywe,j$r),e(j3,D$r),e(j3,hee),e(hee,G$r),e(j3,O$r),e(I,V$r),e(I,D3),e(D3,xwe),e(xwe,X$r),e(D3,z$r),e(D3,uee),e(uee,Q$r),e(D3,W$r),e(I,U$r),e(I,G3),e(G3,$we),e($we,H$r),e(G3,J$r),e(G3,pee),e(pee,Y$r),e(G3,K$r),e(I,Z$r),e(I,O3),e(O3,kwe),e(kwe,ekr),e(O3,okr),e(O3,_ee),e(_ee,rkr),e(O3,tkr),e(I,akr),e(I,V3),e(V3,Swe),e(Swe,nkr),e(V3,skr),e(V3,bee),e(bee,lkr),e(V3,ikr),e(I,dkr),e(I,X3),e(X3,Rwe),e(Rwe,mkr),e(X3,ckr),e(X3,vee),e(vee,fkr),e(X3,gkr),e(I,hkr),e(I,z3),e(z3,Pwe),e(Pwe,ukr),e(z3,pkr),e(z3,Fee),e(Fee,_kr),e(z3,bkr),e(I,vkr),e(I,Q3),e(Q3,Bwe),e(Bwe,Fkr),e(Q3,Tkr),e(Q3,Tee),e(Tee,Mkr),e(Q3,Ekr),e(I,Ckr),e(I,W3),e(W3,Iwe),e(Iwe,wkr),e(W3,Akr),e(W3,Mee),e(Mee,Lkr),e(W3,ykr),e(I,xkr),e(I,U3),e(U3,Nwe),e(Nwe,$kr),e(U3,kkr),e(U3,Eee),e(Eee,Skr),e(U3,Rkr),e(I,Pkr),e(I,H3),e(H3,qwe),e(qwe,Bkr),e(H3,Ikr),e(H3,Cee),e(Cee,Nkr),e(H3,qkr),e(I,jkr),e(I,J3),e(J3,jwe),e(jwe,Dkr),e(J3,Gkr),e(J3,wee),e(wee,Okr),e(J3,Vkr),e(I,Xkr),e(I,Y3),e(Y3,Dwe),e(Dwe,zkr),e(Y3,Qkr),e(Y3,Aee),e(Aee,Wkr),e(Y3,Ukr),e(I,Hkr),e(I,K3),e(K3,Gwe),e(Gwe,Jkr),e(K3,Ykr),e(K3,Lee),e(Lee,Kkr),e(K3,Zkr),e(I,eSr),e(I,Z3),e(Z3,Owe),e(Owe,oSr),e(Z3,rSr),e(Z3,yee),e(yee,tSr),e(Z3,aSr),e(I,nSr),e(I,e5),e(e5,Vwe),e(Vwe,sSr),e(e5,lSr),e(e5,xee),e(xee,iSr),e(e5,dSr),e(I,mSr),e(I,Fl),e(Fl,Xwe),e(Xwe,cSr),e(Fl,fSr),e(Fl,$ee),e($ee,gSr),e(Fl,hSr),e(Fl,kee),e(kee,uSr),e(Fl,pSr),e(I,_Sr),e(I,o5),e(o5,zwe),e(zwe,bSr),e(o5,vSr),e(o5,See),e(See,FSr),e(o5,TSr),e(I,MSr),e(I,r5),e(r5,Qwe),e(Qwe,ESr),e(r5,CSr),e(r5,Ree),e(Ree,wSr),e(r5,ASr),e(I,LSr),e(I,t5),e(t5,Wwe),e(Wwe,ySr),e(t5,xSr),e(t5,Pee),e(Pee,$Sr),e(t5,kSr),e(I,SSr),e(I,a5),e(a5,Uwe),e(Uwe,RSr),e(a5,PSr),e(a5,Bee),e(Bee,BSr),e(a5,ISr),e(I,NSr),e(I,n5),e(n5,Hwe),e(Hwe,qSr),e(n5,jSr),e(n5,Iee),e(Iee,DSr),e(n5,GSr),e(I,OSr),e(I,s5),e(s5,Jwe),e(Jwe,VSr),e(s5,XSr),e(s5,Nee),e(Nee,zSr),e(s5,QSr),e(I,WSr),e(I,l5),e(l5,Ywe),e(Ywe,USr),e(l5,HSr),e(l5,qee),e(qee,JSr),e(l5,YSr),e(I,KSr),e(I,i5),e(i5,Kwe),e(Kwe,ZSr),e(i5,eRr),e(i5,jee),e(jee,oRr),e(i5,rRr),e(I,tRr),e(I,d5),e(d5,Zwe),e(Zwe,aRr),e(d5,nRr),e(d5,Dee),e(Dee,sRr),e(d5,lRr),e(I,iRr),e(I,m5),e(m5,eAe),e(eAe,dRr),e(m5,mRr),e(m5,Gee),e(Gee,cRr),e(m5,fRr),e(I,gRr),e(I,c5),e(c5,oAe),e(oAe,hRr),e(c5,uRr),e(c5,Oee),e(Oee,pRr),e(c5,_Rr),e(I,bRr),e(I,f5),e(f5,rAe),e(rAe,vRr),e(f5,FRr),e(f5,Vee),e(Vee,TRr),e(f5,MRr),e(I,ERr),e(I,g5),e(g5,tAe),e(tAe,CRr),e(g5,wRr),e(g5,Xee),e(Xee,ARr),e(g5,LRr),e(I,yRr),e(I,h5),e(h5,aAe),e(aAe,xRr),e(h5,$Rr),e(h5,zee),e(zee,kRr),e(h5,SRr),e(I,RRr),e(I,u5),e(u5,nAe),e(nAe,PRr),e(u5,BRr),e(u5,Qee),e(Qee,IRr),e(u5,NRr),e(I,qRr),e(I,p5),e(p5,sAe),e(sAe,jRr),e(p5,DRr),e(p5,Wee),e(Wee,GRr),e(p5,ORr),e(I,VRr),e(I,_5),e(_5,lAe),e(lAe,XRr),e(_5,zRr),e(_5,Uee),e(Uee,QRr),e(_5,WRr),e(I,URr),e(I,b5),e(b5,iAe),e(iAe,HRr),e(b5,JRr),e(b5,Hee),e(Hee,YRr),e(b5,KRr),e(I,ZRr),e(I,v5),e(v5,dAe),e(dAe,ePr),e(v5,oPr),e(v5,Jee),e(Jee,rPr),e(v5,tPr),e(I,aPr),e(I,F5),e(F5,mAe),e(mAe,nPr),e(F5,sPr),e(F5,Yee),e(Yee,lPr),e(F5,iPr),e(I,dPr),e(I,T5),e(T5,cAe),e(cAe,mPr),e(T5,cPr),e(T5,Kee),e(Kee,fPr),e(T5,gPr),e(I,hPr),e(I,M5),e(M5,fAe),e(fAe,uPr),e(M5,pPr),e(M5,Zee),e(Zee,_Pr),e(M5,bPr),e(I,vPr),e(I,E5),e(E5,gAe),e(gAe,FPr),e(E5,TPr),e(E5,eoe),e(eoe,MPr),e(E5,EPr),e(I,CPr),e(I,C5),e(C5,hAe),e(hAe,wPr),e(C5,APr),e(C5,ooe),e(ooe,LPr),e(C5,yPr),e(I,xPr),e(I,w5),e(w5,uAe),e(uAe,$Pr),e(w5,kPr),e(w5,roe),e(roe,SPr),e(w5,RPr),e(I,PPr),e(I,A5),e(A5,pAe),e(pAe,BPr),e(A5,IPr),e(A5,toe),e(toe,NPr),e(A5,qPr),e(I,jPr),e(I,L5),e(L5,_Ae),e(_Ae,DPr),e(L5,GPr),e(L5,aoe),e(aoe,OPr),e(L5,VPr),e(I,XPr),e(I,y5),e(y5,bAe),e(bAe,zPr),e(y5,QPr),e(y5,noe),e(noe,WPr),e(y5,UPr),e(I,HPr),e(I,x5),e(x5,vAe),e(vAe,JPr),e(x5,YPr),e(x5,soe),e(soe,KPr),e(x5,ZPr),e(I,eBr),e(I,$5),e($5,FAe),e(FAe,oBr),e($5,rBr),e($5,loe),e(loe,tBr),e($5,aBr),e(I,nBr),e(I,k5),e(k5,TAe),e(TAe,sBr),e(k5,lBr),e(k5,ioe),e(ioe,iBr),e(k5,dBr),e(I,mBr),e(I,S5),e(S5,MAe),e(MAe,cBr),e(S5,fBr),e(S5,doe),e(doe,gBr),e(S5,hBr),e(I,uBr),e(I,R5),e(R5,EAe),e(EAe,pBr),e(R5,_Br),e(R5,moe),e(moe,bBr),e(R5,vBr),e(I,FBr),e(I,P5),e(P5,CAe),e(CAe,TBr),e(P5,MBr),e(P5,coe),e(coe,EBr),e(P5,CBr),e(I,wBr),e(I,B5),e(B5,wAe),e(wAe,ABr),e(B5,LBr),e(B5,foe),e(foe,yBr),e(B5,xBr),e(I,$Br),e(I,I5),e(I5,AAe),e(AAe,kBr),e(I5,SBr),e(I5,goe),e(goe,RBr),e(I5,PBr),e(Ir,BBr),M(N5,Ir,null),b(c,too,_),b(c,zm,_),e(zm,q5),e(q5,LAe),M(oS,LAe,null),e(zm,IBr),e(zm,yAe),e(yAe,NBr),b(c,aoo,_),b(c,lr,_),M(rS,lr,null),e(lr,qBr),e(lr,Qm),e(Qm,jBr),e(Qm,hoe),e(hoe,DBr),e(Qm,GBr),e(Qm,uoe),e(uoe,OBr),e(Qm,VBr),e(lr,XBr),e(lr,tS),e(tS,zBr),e(tS,xAe),e(xAe,QBr),e(tS,WBr),e(lr,UBr),e(lr,zt),M(aS,zt,null),e(zt,HBr),e(zt,$Ae),e($Ae,JBr),e(zt,YBr),e(zt,Wm),e(Wm,KBr),e(Wm,kAe),e(kAe,ZBr),e(Wm,eIr),e(Wm,poe),e(poe,oIr),e(Wm,rIr),e(zt,tIr),M(j5,zt,null),e(lr,aIr),e(lr,Nr),M(nS,Nr,null),e(Nr,nIr),e(Nr,SAe),e(SAe,sIr),e(Nr,lIr),e(Nr,An),e(An,iIr),e(An,RAe),e(RAe,dIr),e(An,mIr),e(An,PAe),e(PAe,cIr),e(An,fIr),e(An,BAe),e(BAe,gIr),e(An,hIr),e(Nr,uIr),e(Nr,se),e(se,D5),e(D5,IAe),e(IAe,pIr),e(D5,_Ir),e(D5,_oe),e(_oe,bIr),e(D5,vIr),e(se,FIr),e(se,G5),e(G5,NAe),e(NAe,TIr),e(G5,MIr),e(G5,boe),e(boe,EIr),e(G5,CIr),e(se,wIr),e(se,O5),e(O5,qAe),e(qAe,AIr),e(O5,LIr),e(O5,voe),e(voe,yIr),e(O5,xIr),e(se,$Ir),e(se,V5),e(V5,jAe),e(jAe,kIr),e(V5,SIr),e(V5,Foe),e(Foe,RIr),e(V5,PIr),e(se,BIr),e(se,X5),e(X5,DAe),e(DAe,IIr),e(X5,NIr),e(X5,Toe),e(Toe,qIr),e(X5,jIr),e(se,DIr),e(se,z5),e(z5,GAe),e(GAe,GIr),e(z5,OIr),e(z5,Moe),e(Moe,VIr),e(z5,XIr),e(se,zIr),e(se,Q5),e(Q5,OAe),e(OAe,QIr),e(Q5,WIr),e(Q5,Eoe),e(Eoe,UIr),e(Q5,HIr),e(se,JIr),e(se,W5),e(W5,VAe),e(VAe,YIr),e(W5,KIr),e(W5,Coe),e(Coe,ZIr),e(W5,eNr),e(se,oNr),e(se,U5),e(U5,XAe),e(XAe,rNr),e(U5,tNr),e(U5,woe),e(woe,aNr),e(U5,nNr),e(se,sNr),e(se,H5),e(H5,zAe),e(zAe,lNr),e(H5,iNr),e(H5,Aoe),e(Aoe,dNr),e(H5,mNr),e(se,cNr),e(se,J5),e(J5,QAe),e(QAe,fNr),e(J5,gNr),e(J5,Loe),e(Loe,hNr),e(J5,uNr),e(se,pNr),e(se,Y5),e(Y5,WAe),e(WAe,_Nr),e(Y5,bNr),e(Y5,yoe),e(yoe,vNr),e(Y5,FNr),e(se,TNr),e(se,K5),e(K5,UAe),e(UAe,MNr),e(K5,ENr),e(K5,xoe),e(xoe,CNr),e(K5,wNr),e(se,ANr),e(se,Z5),e(Z5,HAe),e(HAe,LNr),e(Z5,yNr),e(Z5,$oe),e($oe,xNr),e(Z5,$Nr),e(se,kNr),e(se,e0),e(e0,JAe),e(JAe,SNr),e(e0,RNr),e(e0,koe),e(koe,PNr),e(e0,BNr),e(se,INr),e(se,o0),e(o0,YAe),e(YAe,NNr),e(o0,qNr),e(o0,Soe),e(Soe,jNr),e(o0,DNr),e(se,GNr),e(se,r0),e(r0,KAe),e(KAe,ONr),e(r0,VNr),e(r0,Roe),e(Roe,XNr),e(r0,zNr),e(se,QNr),e(se,t0),e(t0,ZAe),e(ZAe,WNr),e(t0,UNr),e(t0,Poe),e(Poe,HNr),e(t0,JNr),e(se,YNr),e(se,a0),e(a0,e6e),e(e6e,KNr),e(a0,ZNr),e(a0,Boe),e(Boe,eqr),e(a0,oqr),e(se,rqr),e(se,n0),e(n0,o6e),e(o6e,tqr),e(n0,aqr),e(n0,Ioe),e(Ioe,nqr),e(n0,sqr),e(se,lqr),e(se,s0),e(s0,r6e),e(r6e,iqr),e(s0,dqr),e(s0,Noe),e(Noe,mqr),e(s0,cqr),e(se,fqr),e(se,l0),e(l0,t6e),e(t6e,gqr),e(l0,hqr),e(l0,qoe),e(qoe,uqr),e(l0,pqr),e(se,_qr),e(se,i0),e(i0,a6e),e(a6e,bqr),e(i0,vqr),e(i0,joe),e(joe,Fqr),e(i0,Tqr),e(Nr,Mqr),M(d0,Nr,null),b(c,noo,_),b(c,Um,_),e(Um,m0),e(m0,n6e),M(sS,n6e,null),e(Um,Eqr),e(Um,s6e),e(s6e,Cqr),b(c,soo,_),b(c,ir,_),M(lS,ir,null),e(ir,wqr),e(ir,Hm),e(Hm,Aqr),e(Hm,Doe),e(Doe,Lqr),e(Hm,yqr),e(Hm,Goe),e(Goe,xqr),e(Hm,$qr),e(ir,kqr),e(ir,iS),e(iS,Sqr),e(iS,l6e),e(l6e,Rqr),e(iS,Pqr),e(ir,Bqr),e(ir,Qt),M(dS,Qt,null),e(Qt,Iqr),e(Qt,i6e),e(i6e,Nqr),e(Qt,qqr),e(Qt,Jm),e(Jm,jqr),e(Jm,d6e),e(d6e,Dqr),e(Jm,Gqr),e(Jm,Ooe),e(Ooe,Oqr),e(Jm,Vqr),e(Qt,Xqr),M(c0,Qt,null),e(ir,zqr),e(ir,qr),M(mS,qr,null),e(qr,Qqr),e(qr,m6e),e(m6e,Wqr),e(qr,Uqr),e(qr,Ln),e(Ln,Hqr),e(Ln,c6e),e(c6e,Jqr),e(Ln,Yqr),e(Ln,f6e),e(f6e,Kqr),e(Ln,Zqr),e(Ln,g6e),e(g6e,ejr),e(Ln,ojr),e(qr,rjr),e(qr,Me),e(Me,f0),e(f0,h6e),e(h6e,tjr),e(f0,ajr),e(f0,Voe),e(Voe,njr),e(f0,sjr),e(Me,ljr),e(Me,g0),e(g0,u6e),e(u6e,ijr),e(g0,djr),e(g0,Xoe),e(Xoe,mjr),e(g0,cjr),e(Me,fjr),e(Me,h0),e(h0,p6e),e(p6e,gjr),e(h0,hjr),e(h0,zoe),e(zoe,ujr),e(h0,pjr),e(Me,_jr),e(Me,u0),e(u0,_6e),e(_6e,bjr),e(u0,vjr),e(u0,Qoe),e(Qoe,Fjr),e(u0,Tjr),e(Me,Mjr),e(Me,p0),e(p0,b6e),e(b6e,Ejr),e(p0,Cjr),e(p0,Woe),e(Woe,wjr),e(p0,Ajr),e(Me,Ljr),e(Me,_0),e(_0,v6e),e(v6e,yjr),e(_0,xjr),e(_0,Uoe),e(Uoe,$jr),e(_0,kjr),e(Me,Sjr),e(Me,b0),e(b0,F6e),e(F6e,Rjr),e(b0,Pjr),e(b0,Hoe),e(Hoe,Bjr),e(b0,Ijr),e(Me,Njr),e(Me,v0),e(v0,T6e),e(T6e,qjr),e(v0,jjr),e(v0,Joe),e(Joe,Djr),e(v0,Gjr),e(Me,Ojr),e(Me,F0),e(F0,M6e),e(M6e,Vjr),e(F0,Xjr),e(F0,Yoe),e(Yoe,zjr),e(F0,Qjr),e(Me,Wjr),e(Me,T0),e(T0,E6e),e(E6e,Ujr),e(T0,Hjr),e(T0,Koe),e(Koe,Jjr),e(T0,Yjr),e(Me,Kjr),e(Me,M0),e(M0,C6e),e(C6e,Zjr),e(M0,eDr),e(M0,Zoe),e(Zoe,oDr),e(M0,rDr),e(Me,tDr),e(Me,E0),e(E0,w6e),e(w6e,aDr),e(E0,nDr),e(E0,ere),e(ere,sDr),e(E0,lDr),e(Me,iDr),e(Me,C0),e(C0,A6e),e(A6e,dDr),e(C0,mDr),e(C0,ore),e(ore,cDr),e(C0,fDr),e(Me,gDr),e(Me,w0),e(w0,L6e),e(L6e,hDr),e(w0,uDr),e(w0,rre),e(rre,pDr),e(w0,_Dr),e(qr,bDr),M(A0,qr,null),b(c,loo,_),b(c,Ym,_),e(Ym,L0),e(L0,y6e),M(cS,y6e,null),e(Ym,vDr),e(Ym,x6e),e(x6e,FDr),b(c,ioo,_),b(c,dr,_),M(fS,dr,null),e(dr,TDr),e(dr,Km),e(Km,MDr),e(Km,tre),e(tre,EDr),e(Km,CDr),e(Km,are),e(are,wDr),e(Km,ADr),e(dr,LDr),e(dr,gS),e(gS,yDr),e(gS,$6e),e($6e,xDr),e(gS,$Dr),e(dr,kDr),e(dr,Wt),M(hS,Wt,null),e(Wt,SDr),e(Wt,k6e),e(k6e,RDr),e(Wt,PDr),e(Wt,Zm),e(Zm,BDr),e(Zm,S6e),e(S6e,IDr),e(Zm,NDr),e(Zm,nre),e(nre,qDr),e(Zm,jDr),e(Wt,DDr),M(y0,Wt,null),e(dr,GDr),e(dr,jr),M(uS,jr,null),e(jr,ODr),e(jr,R6e),e(R6e,VDr),e(jr,XDr),e(jr,yn),e(yn,zDr),e(yn,P6e),e(P6e,QDr),e(yn,WDr),e(yn,B6e),e(B6e,UDr),e(yn,HDr),e(yn,I6e),e(I6e,JDr),e(yn,YDr),e(jr,KDr),e(jr,Be),e(Be,x0),e(x0,N6e),e(N6e,ZDr),e(x0,eGr),e(x0,sre),e(sre,oGr),e(x0,rGr),e(Be,tGr),e(Be,$0),e($0,q6e),e(q6e,aGr),e($0,nGr),e($0,lre),e(lre,sGr),e($0,lGr),e(Be,iGr),e(Be,Tl),e(Tl,j6e),e(j6e,dGr),e(Tl,mGr),e(Tl,ire),e(ire,cGr),e(Tl,fGr),e(Tl,dre),e(dre,gGr),e(Tl,hGr),e(Be,uGr),e(Be,k0),e(k0,D6e),e(D6e,pGr),e(k0,_Gr),e(k0,mre),e(mre,bGr),e(k0,vGr),e(Be,FGr),e(Be,S0),e(S0,G6e),e(G6e,TGr),e(S0,MGr),e(S0,cre),e(cre,EGr),e(S0,CGr),e(Be,wGr),e(Be,R0),e(R0,O6e),e(O6e,AGr),e(R0,LGr),e(R0,fre),e(fre,yGr),e(R0,xGr),e(Be,$Gr),e(Be,P0),e(P0,V6e),e(V6e,kGr),e(P0,SGr),e(P0,gre),e(gre,RGr),e(P0,PGr),e(Be,BGr),e(Be,B0),e(B0,X6e),e(X6e,IGr),e(B0,NGr),e(B0,hre),e(hre,qGr),e(B0,jGr),e(Be,DGr),e(Be,I0),e(I0,z6e),e(z6e,GGr),e(I0,OGr),e(I0,ure),e(ure,VGr),e(I0,XGr),e(jr,zGr),M(N0,jr,null),b(c,doo,_),b(c,ec,_),e(ec,q0),e(q0,Q6e),M(pS,Q6e,null),e(ec,QGr),e(ec,W6e),e(W6e,WGr),b(c,moo,_),b(c,mr,_),M(_S,mr,null),e(mr,UGr),e(mr,oc),e(oc,HGr),e(oc,pre),e(pre,JGr),e(oc,YGr),e(oc,_re),e(_re,KGr),e(oc,ZGr),e(mr,eOr),e(mr,bS),e(bS,oOr),e(bS,U6e),e(U6e,rOr),e(bS,tOr),e(mr,aOr),e(mr,Ut),M(vS,Ut,null),e(Ut,nOr),e(Ut,H6e),e(H6e,sOr),e(Ut,lOr),e(Ut,rc),e(rc,iOr),e(rc,J6e),e(J6e,dOr),e(rc,mOr),e(rc,bre),e(bre,cOr),e(rc,fOr),e(Ut,gOr),M(j0,Ut,null),e(mr,hOr),e(mr,Dr),M(FS,Dr,null),e(Dr,uOr),e(Dr,Y6e),e(Y6e,pOr),e(Dr,_Or),e(Dr,xn),e(xn,bOr),e(xn,K6e),e(K6e,vOr),e(xn,FOr),e(xn,Z6e),e(Z6e,TOr),e(xn,MOr),e(xn,e7e),e(e7e,EOr),e(xn,COr),e(Dr,wOr),e(Dr,tc),e(tc,D0),e(D0,o7e),e(o7e,AOr),e(D0,LOr),e(D0,vre),e(vre,yOr),e(D0,xOr),e(tc,$Or),e(tc,G0),e(G0,r7e),e(r7e,kOr),e(G0,SOr),e(G0,Fre),e(Fre,ROr),e(G0,POr),e(tc,BOr),e(tc,O0),e(O0,t7e),e(t7e,IOr),e(O0,NOr),e(O0,Tre),e(Tre,qOr),e(O0,jOr),e(Dr,DOr),M(V0,Dr,null),b(c,coo,_),b(c,ac,_),e(ac,X0),e(X0,a7e),M(TS,a7e,null),e(ac,GOr),e(ac,n7e),e(n7e,OOr),b(c,foo,_),b(c,cr,_),M(MS,cr,null),e(cr,VOr),e(cr,nc),e(nc,XOr),e(nc,Mre),e(Mre,zOr),e(nc,QOr),e(nc,Ere),e(Ere,WOr),e(nc,UOr),e(cr,HOr),e(cr,ES),e(ES,JOr),e(ES,s7e),e(s7e,YOr),e(ES,KOr),e(cr,ZOr),e(cr,Ht),M(CS,Ht,null),e(Ht,eVr),e(Ht,l7e),e(l7e,oVr),e(Ht,rVr),e(Ht,sc),e(sc,tVr),e(sc,i7e),e(i7e,aVr),e(sc,nVr),e(sc,Cre),e(Cre,sVr),e(sc,lVr),e(Ht,iVr),M(z0,Ht,null),e(cr,dVr),e(cr,Gr),M(wS,Gr,null),e(Gr,mVr),e(Gr,d7e),e(d7e,cVr),e(Gr,fVr),e(Gr,$n),e($n,gVr),e($n,m7e),e(m7e,hVr),e($n,uVr),e($n,c7e),e(c7e,pVr),e($n,_Vr),e($n,f7e),e(f7e,bVr),e($n,vVr),e(Gr,FVr),e(Gr,ge),e(ge,Q0),e(Q0,g7e),e(g7e,TVr),e(Q0,MVr),e(Q0,wre),e(wre,EVr),e(Q0,CVr),e(ge,wVr),e(ge,W0),e(W0,h7e),e(h7e,AVr),e(W0,LVr),e(W0,Are),e(Are,yVr),e(W0,xVr),e(ge,$Vr),e(ge,U0),e(U0,u7e),e(u7e,kVr),e(U0,SVr),e(U0,Lre),e(Lre,RVr),e(U0,PVr),e(ge,BVr),e(ge,H0),e(H0,p7e),e(p7e,IVr),e(H0,NVr),e(H0,yre),e(yre,qVr),e(H0,jVr),e(ge,DVr),e(ge,J0),e(J0,_7e),e(_7e,GVr),e(J0,OVr),e(J0,xre),e(xre,VVr),e(J0,XVr),e(ge,zVr),e(ge,Y0),e(Y0,b7e),e(b7e,QVr),e(Y0,WVr),e(Y0,$re),e($re,UVr),e(Y0,HVr),e(ge,JVr),e(ge,K0),e(K0,v7e),e(v7e,YVr),e(K0,KVr),e(K0,kre),e(kre,ZVr),e(K0,eXr),e(ge,oXr),e(ge,Z0),e(Z0,F7e),e(F7e,rXr),e(Z0,tXr),e(Z0,Sre),e(Sre,aXr),e(Z0,nXr),e(ge,sXr),e(ge,ew),e(ew,T7e),e(T7e,lXr),e(ew,iXr),e(ew,Rre),e(Rre,dXr),e(ew,mXr),e(ge,cXr),e(ge,ow),e(ow,M7e),e(M7e,fXr),e(ow,gXr),e(ow,Pre),e(Pre,hXr),e(ow,uXr),e(ge,pXr),e(ge,rw),e(rw,E7e),e(E7e,_Xr),e(rw,bXr),e(rw,Bre),e(Bre,vXr),e(rw,FXr),e(ge,TXr),e(ge,tw),e(tw,C7e),e(C7e,MXr),e(tw,EXr),e(tw,Ire),e(Ire,CXr),e(tw,wXr),e(ge,AXr),e(ge,aw),e(aw,w7e),e(w7e,LXr),e(aw,yXr),e(aw,Nre),e(Nre,xXr),e(aw,$Xr),e(ge,kXr),e(ge,nw),e(nw,A7e),e(A7e,SXr),e(nw,RXr),e(nw,qre),e(qre,PXr),e(nw,BXr),e(ge,IXr),e(ge,sw),e(sw,L7e),e(L7e,NXr),e(sw,qXr),e(sw,jre),e(jre,jXr),e(sw,DXr),e(ge,GXr),e(ge,lw),e(lw,y7e),e(y7e,OXr),e(lw,VXr),e(lw,Dre),e(Dre,XXr),e(lw,zXr),e(ge,QXr),e(ge,iw),e(iw,x7e),e(x7e,WXr),e(iw,UXr),e(iw,Gre),e(Gre,HXr),e(iw,JXr),e(ge,YXr),e(ge,dw),e(dw,$7e),e($7e,KXr),e(dw,ZXr),e(dw,Ore),e(Ore,ezr),e(dw,ozr),e(ge,rzr),e(ge,mw),e(mw,k7e),e(k7e,tzr),e(mw,azr),e(mw,Vre),e(Vre,nzr),e(mw,szr),e(ge,lzr),e(ge,cw),e(cw,S7e),e(S7e,izr),e(cw,dzr),e(cw,Xre),e(Xre,mzr),e(cw,czr),e(Gr,fzr),M(fw,Gr,null),b(c,goo,_),b(c,lc,_),e(lc,gw),e(gw,R7e),M(AS,R7e,null),e(lc,gzr),e(lc,P7e),e(P7e,hzr),b(c,hoo,_),b(c,fr,_),M(LS,fr,null),e(fr,uzr),e(fr,ic),e(ic,pzr),e(ic,zre),e(zre,_zr),e(ic,bzr),e(ic,Qre),e(Qre,vzr),e(ic,Fzr),e(fr,Tzr),e(fr,yS),e(yS,Mzr),e(yS,B7e),e(B7e,Ezr),e(yS,Czr),e(fr,wzr),e(fr,Jt),M(xS,Jt,null),e(Jt,Azr),e(Jt,I7e),e(I7e,Lzr),e(Jt,yzr),e(Jt,dc),e(dc,xzr),e(dc,N7e),e(N7e,$zr),e(dc,kzr),e(dc,Wre),e(Wre,Szr),e(dc,Rzr),e(Jt,Pzr),M(hw,Jt,null),e(fr,Bzr),e(fr,Or),M($S,Or,null),e(Or,Izr),e(Or,q7e),e(q7e,Nzr),e(Or,qzr),e(Or,kn),e(kn,jzr),e(kn,j7e),e(j7e,Dzr),e(kn,Gzr),e(kn,D7e),e(D7e,Ozr),e(kn,Vzr),e(kn,G7e),e(G7e,Xzr),e(kn,zzr),e(Or,Qzr),e(Or,ye),e(ye,uw),e(uw,O7e),e(O7e,Wzr),e(uw,Uzr),e(uw,Ure),e(Ure,Hzr),e(uw,Jzr),e(ye,Yzr),e(ye,pw),e(pw,V7e),e(V7e,Kzr),e(pw,Zzr),e(pw,Hre),e(Hre,eQr),e(pw,oQr),e(ye,rQr),e(ye,_w),e(_w,X7e),e(X7e,tQr),e(_w,aQr),e(_w,Jre),e(Jre,nQr),e(_w,sQr),e(ye,lQr),e(ye,bw),e(bw,z7e),e(z7e,iQr),e(bw,dQr),e(bw,Yre),e(Yre,mQr),e(bw,cQr),e(ye,fQr),e(ye,vw),e(vw,Q7e),e(Q7e,gQr),e(vw,hQr),e(vw,Kre),e(Kre,uQr),e(vw,pQr),e(ye,_Qr),e(ye,Fw),e(Fw,W7e),e(W7e,bQr),e(Fw,vQr),e(Fw,Zre),e(Zre,FQr),e(Fw,TQr),e(ye,MQr),e(ye,Tw),e(Tw,U7e),e(U7e,EQr),e(Tw,CQr),e(Tw,ete),e(ete,wQr),e(Tw,AQr),e(ye,LQr),e(ye,Mw),e(Mw,H7e),e(H7e,yQr),e(Mw,xQr),e(Mw,ote),e(ote,$Qr),e(Mw,kQr),e(ye,SQr),e(ye,Ew),e(Ew,J7e),e(J7e,RQr),e(Ew,PQr),e(Ew,rte),e(rte,BQr),e(Ew,IQr),e(ye,NQr),e(ye,Cw),e(Cw,Y7e),e(Y7e,qQr),e(Cw,jQr),e(Cw,tte),e(tte,DQr),e(Cw,GQr),e(Or,OQr),M(ww,Or,null),b(c,uoo,_),b(c,mc,_),e(mc,Aw),e(Aw,K7e),M(kS,K7e,null),e(mc,VQr),e(mc,Z7e),e(Z7e,XQr),b(c,poo,_),b(c,gr,_),M(SS,gr,null),e(gr,zQr),e(gr,cc),e(cc,QQr),e(cc,ate),e(ate,WQr),e(cc,UQr),e(cc,nte),e(nte,HQr),e(cc,JQr),e(gr,YQr),e(gr,RS),e(RS,KQr),e(RS,eLe),e(eLe,ZQr),e(RS,eWr),e(gr,oWr),e(gr,Yt),M(PS,Yt,null),e(Yt,rWr),e(Yt,oLe),e(oLe,tWr),e(Yt,aWr),e(Yt,fc),e(fc,nWr),e(fc,rLe),e(rLe,sWr),e(fc,lWr),e(fc,ste),e(ste,iWr),e(fc,dWr),e(Yt,mWr),M(Lw,Yt,null),e(gr,cWr),e(gr,Vr),M(BS,Vr,null),e(Vr,fWr),e(Vr,tLe),e(tLe,gWr),e(Vr,hWr),e(Vr,Sn),e(Sn,uWr),e(Sn,aLe),e(aLe,pWr),e(Sn,_Wr),e(Sn,nLe),e(nLe,bWr),e(Sn,vWr),e(Sn,sLe),e(sLe,FWr),e(Sn,TWr),e(Vr,MWr),e(Vr,re),e(re,yw),e(yw,lLe),e(lLe,EWr),e(yw,CWr),e(yw,lte),e(lte,wWr),e(yw,AWr),e(re,LWr),e(re,xw),e(xw,iLe),e(iLe,yWr),e(xw,xWr),e(xw,ite),e(ite,$Wr),e(xw,kWr),e(re,SWr),e(re,$w),e($w,dLe),e(dLe,RWr),e($w,PWr),e($w,dte),e(dte,BWr),e($w,IWr),e(re,NWr),e(re,kw),e(kw,mLe),e(mLe,qWr),e(kw,jWr),e(kw,mte),e(mte,DWr),e(kw,GWr),e(re,OWr),e(re,Sw),e(Sw,cLe),e(cLe,VWr),e(Sw,XWr),e(Sw,cte),e(cte,zWr),e(Sw,QWr),e(re,WWr),e(re,Rw),e(Rw,fLe),e(fLe,UWr),e(Rw,HWr),e(Rw,fte),e(fte,JWr),e(Rw,YWr),e(re,KWr),e(re,Pw),e(Pw,gLe),e(gLe,ZWr),e(Pw,eUr),e(Pw,gte),e(gte,oUr),e(Pw,rUr),e(re,tUr),e(re,Bw),e(Bw,hLe),e(hLe,aUr),e(Bw,nUr),e(Bw,hte),e(hte,sUr),e(Bw,lUr),e(re,iUr),e(re,Iw),e(Iw,uLe),e(uLe,dUr),e(Iw,mUr),e(Iw,ute),e(ute,cUr),e(Iw,fUr),e(re,gUr),e(re,Nw),e(Nw,pLe),e(pLe,hUr),e(Nw,uUr),e(Nw,pte),e(pte,pUr),e(Nw,_Ur),e(re,bUr),e(re,qw),e(qw,_Le),e(_Le,vUr),e(qw,FUr),e(qw,_te),e(_te,TUr),e(qw,MUr),e(re,EUr),e(re,jw),e(jw,bLe),e(bLe,CUr),e(jw,wUr),e(jw,bte),e(bte,AUr),e(jw,LUr),e(re,yUr),e(re,Dw),e(Dw,vLe),e(vLe,xUr),e(Dw,$Ur),e(Dw,vte),e(vte,kUr),e(Dw,SUr),e(re,RUr),e(re,Gw),e(Gw,FLe),e(FLe,PUr),e(Gw,BUr),e(Gw,Fte),e(Fte,IUr),e(Gw,NUr),e(re,qUr),e(re,Ow),e(Ow,TLe),e(TLe,jUr),e(Ow,DUr),e(Ow,Tte),e(Tte,GUr),e(Ow,OUr),e(re,VUr),e(re,Vw),e(Vw,MLe),e(MLe,XUr),e(Vw,zUr),e(Vw,Mte),e(Mte,QUr),e(Vw,WUr),e(re,UUr),e(re,Xw),e(Xw,ELe),e(ELe,HUr),e(Xw,JUr),e(Xw,Ete),e(Ete,YUr),e(Xw,KUr),e(re,ZUr),e(re,zw),e(zw,CLe),e(CLe,eHr),e(zw,oHr),e(zw,Cte),e(Cte,rHr),e(zw,tHr),e(re,aHr),e(re,Qw),e(Qw,wLe),e(wLe,nHr),e(Qw,sHr),e(Qw,wte),e(wte,lHr),e(Qw,iHr),e(re,dHr),e(re,Ww),e(Ww,ALe),e(ALe,mHr),e(Ww,cHr),e(Ww,Ate),e(Ate,fHr),e(Ww,gHr),e(re,hHr),e(re,Uw),e(Uw,LLe),e(LLe,uHr),e(Uw,pHr),e(Uw,Lte),e(Lte,_Hr),e(Uw,bHr),e(re,vHr),e(re,Hw),e(Hw,yLe),e(yLe,FHr),e(Hw,THr),e(Hw,yte),e(yte,MHr),e(Hw,EHr),e(re,CHr),e(re,Jw),e(Jw,xLe),e(xLe,wHr),e(Jw,AHr),e(Jw,xte),e(xte,LHr),e(Jw,yHr),e(re,xHr),e(re,Yw),e(Yw,$Le),e($Le,$Hr),e(Yw,kHr),e(Yw,$te),e($te,SHr),e(Yw,RHr),e(re,PHr),e(re,Kw),e(Kw,kLe),e(kLe,BHr),e(Kw,IHr),e(Kw,kte),e(kte,NHr),e(Kw,qHr),e(re,jHr),e(re,Zw),e(Zw,SLe),e(SLe,DHr),e(Zw,GHr),e(Zw,Ste),e(Ste,OHr),e(Zw,VHr),e(re,XHr),e(re,eA),e(eA,RLe),e(RLe,zHr),e(eA,QHr),e(eA,Rte),e(Rte,WHr),e(eA,UHr),e(Vr,HHr),M(oA,Vr,null),b(c,_oo,_),b(c,gc,_),e(gc,rA),e(rA,PLe),M(IS,PLe,null),e(gc,JHr),e(gc,BLe),e(BLe,YHr),b(c,boo,_),b(c,hr,_),M(NS,hr,null),e(hr,KHr),e(hr,hc),e(hc,ZHr),e(hc,Pte),e(Pte,eJr),e(hc,oJr),e(hc,Bte),e(Bte,rJr),e(hc,tJr),e(hr,aJr),e(hr,qS),e(qS,nJr),e(qS,ILe),e(ILe,sJr),e(qS,lJr),e(hr,iJr),e(hr,Kt),M(jS,Kt,null),e(Kt,dJr),e(Kt,NLe),e(NLe,mJr),e(Kt,cJr),e(Kt,uc),e(uc,fJr),e(uc,qLe),e(qLe,gJr),e(uc,hJr),e(uc,Ite),e(Ite,uJr),e(uc,pJr),e(Kt,_Jr),M(tA,Kt,null),e(hr,bJr),e(hr,Xr),M(DS,Xr,null),e(Xr,vJr),e(Xr,jLe),e(jLe,FJr),e(Xr,TJr),e(Xr,Rn),e(Rn,MJr),e(Rn,DLe),e(DLe,EJr),e(Rn,CJr),e(Rn,GLe),e(GLe,wJr),e(Rn,AJr),e(Rn,OLe),e(OLe,LJr),e(Rn,yJr),e(Xr,xJr),e(Xr,ve),e(ve,aA),e(aA,VLe),e(VLe,$Jr),e(aA,kJr),e(aA,Nte),e(Nte,SJr),e(aA,RJr),e(ve,PJr),e(ve,nA),e(nA,XLe),e(XLe,BJr),e(nA,IJr),e(nA,qte),e(qte,NJr),e(nA,qJr),e(ve,jJr),e(ve,sA),e(sA,zLe),e(zLe,DJr),e(sA,GJr),e(sA,jte),e(jte,OJr),e(sA,VJr),e(ve,XJr),e(ve,lA),e(lA,QLe),e(QLe,zJr),e(lA,QJr),e(lA,Dte),e(Dte,WJr),e(lA,UJr),e(ve,HJr),e(ve,iA),e(iA,WLe),e(WLe,JJr),e(iA,YJr),e(iA,Gte),e(Gte,KJr),e(iA,ZJr),e(ve,eYr),e(ve,dA),e(dA,ULe),e(ULe,oYr),e(dA,rYr),e(dA,Ote),e(Ote,tYr),e(dA,aYr),e(ve,nYr),e(ve,mA),e(mA,HLe),e(HLe,sYr),e(mA,lYr),e(mA,Vte),e(Vte,iYr),e(mA,dYr),e(ve,mYr),e(ve,cA),e(cA,JLe),e(JLe,cYr),e(cA,fYr),e(cA,Xte),e(Xte,gYr),e(cA,hYr),e(ve,uYr),e(ve,fA),e(fA,YLe),e(YLe,pYr),e(fA,_Yr),e(fA,zte),e(zte,bYr),e(fA,vYr),e(ve,FYr),e(ve,gA),e(gA,KLe),e(KLe,TYr),e(gA,MYr),e(gA,Qte),e(Qte,EYr),e(gA,CYr),e(ve,wYr),e(ve,hA),e(hA,ZLe),e(ZLe,AYr),e(hA,LYr),e(hA,Wte),e(Wte,yYr),e(hA,xYr),e(ve,$Yr),e(ve,uA),e(uA,eye),e(eye,kYr),e(uA,SYr),e(uA,Ute),e(Ute,RYr),e(uA,PYr),e(ve,BYr),e(ve,pA),e(pA,oye),e(oye,IYr),e(pA,NYr),e(pA,Hte),e(Hte,qYr),e(pA,jYr),e(ve,DYr),e(ve,_A),e(_A,rye),e(rye,GYr),e(_A,OYr),e(_A,Jte),e(Jte,VYr),e(_A,XYr),e(ve,zYr),e(ve,bA),e(bA,tye),e(tye,QYr),e(bA,WYr),e(bA,Yte),e(Yte,UYr),e(bA,HYr),e(ve,JYr),e(ve,vA),e(vA,aye),e(aye,YYr),e(vA,KYr),e(vA,Kte),e(Kte,ZYr),e(vA,eKr),e(ve,oKr),e(ve,FA),e(FA,nye),e(nye,rKr),e(FA,tKr),e(FA,Zte),e(Zte,aKr),e(FA,nKr),e(Xr,sKr),M(TA,Xr,null),b(c,voo,_),b(c,pc,_),e(pc,MA),e(MA,sye),M(GS,sye,null),e(pc,lKr),e(pc,lye),e(lye,iKr),b(c,Foo,_),b(c,ur,_),M(OS,ur,null),e(ur,dKr),e(ur,_c),e(_c,mKr),e(_c,eae),e(eae,cKr),e(_c,fKr),e(_c,oae),e(oae,gKr),e(_c,hKr),e(ur,uKr),e(ur,VS),e(VS,pKr),e(VS,iye),e(iye,_Kr),e(VS,bKr),e(ur,vKr),e(ur,Zt),M(XS,Zt,null),e(Zt,FKr),e(Zt,dye),e(dye,TKr),e(Zt,MKr),e(Zt,bc),e(bc,EKr),e(bc,mye),e(mye,CKr),e(bc,wKr),e(bc,rae),e(rae,AKr),e(bc,LKr),e(Zt,yKr),M(EA,Zt,null),e(ur,xKr),e(ur,zr),M(zS,zr,null),e(zr,$Kr),e(zr,cye),e(cye,kKr),e(zr,SKr),e(zr,Pn),e(Pn,RKr),e(Pn,fye),e(fye,PKr),e(Pn,BKr),e(Pn,gye),e(gye,IKr),e(Pn,NKr),e(Pn,hye),e(hye,qKr),e(Pn,jKr),e(zr,DKr),e(zr,QS),e(QS,CA),e(CA,uye),e(uye,GKr),e(CA,OKr),e(CA,tae),e(tae,VKr),e(CA,XKr),e(QS,zKr),e(QS,wA),e(wA,pye),e(pye,QKr),e(wA,WKr),e(wA,aae),e(aae,UKr),e(wA,HKr),e(zr,JKr),M(AA,zr,null),b(c,Too,_),b(c,vc,_),e(vc,LA),e(LA,_ye),M(WS,_ye,null),e(vc,YKr),e(vc,bye),e(bye,KKr),b(c,Moo,_),b(c,pr,_),M(US,pr,null),e(pr,ZKr),e(pr,Fc),e(Fc,eZr),e(Fc,nae),e(nae,oZr),e(Fc,rZr),e(Fc,sae),e(sae,tZr),e(Fc,aZr),e(pr,nZr),e(pr,HS),e(HS,sZr),e(HS,vye),e(vye,lZr),e(HS,iZr),e(pr,dZr),e(pr,ea),M(JS,ea,null),e(ea,mZr),e(ea,Fye),e(Fye,cZr),e(ea,fZr),e(ea,Tc),e(Tc,gZr),e(Tc,Tye),e(Tye,hZr),e(Tc,uZr),e(Tc,lae),e(lae,pZr),e(Tc,_Zr),e(ea,bZr),M(yA,ea,null),e(pr,vZr),e(pr,Qr),M(YS,Qr,null),e(Qr,FZr),e(Qr,Mye),e(Mye,TZr),e(Qr,MZr),e(Qr,Bn),e(Bn,EZr),e(Bn,Eye),e(Eye,CZr),e(Bn,wZr),e(Bn,Cye),e(Cye,AZr),e(Bn,LZr),e(Bn,wye),e(wye,yZr),e(Bn,xZr),e(Qr,$Zr),e(Qr,Aye),e(Aye,xA),e(xA,Lye),e(Lye,kZr),e(xA,SZr),e(xA,iae),e(iae,RZr),e(xA,PZr),e(Qr,BZr),M($A,Qr,null),b(c,Eoo,_),b(c,Mc,_),e(Mc,kA),e(kA,yye),M(KS,yye,null),e(Mc,IZr),e(Mc,xye),e(xye,NZr),b(c,Coo,_),b(c,_r,_),M(ZS,_r,null),e(_r,qZr),e(_r,Ec),e(Ec,jZr),e(Ec,dae),e(dae,DZr),e(Ec,GZr),e(Ec,mae),e(mae,OZr),e(Ec,VZr),e(_r,XZr),e(_r,eR),e(eR,zZr),e(eR,$ye),e($ye,QZr),e(eR,WZr),e(_r,UZr),e(_r,oa),M(oR,oa,null),e(oa,HZr),e(oa,kye),e(kye,JZr),e(oa,YZr),e(oa,Cc),e(Cc,KZr),e(Cc,Sye),e(Sye,ZZr),e(Cc,eet),e(Cc,cae),e(cae,oet),e(Cc,ret),e(oa,tet),M(SA,oa,null),e(_r,aet),e(_r,Wr),M(rR,Wr,null),e(Wr,net),e(Wr,Rye),e(Rye,set),e(Wr,iet),e(Wr,In),e(In,det),e(In,Pye),e(Pye,met),e(In,cet),e(In,Bye),e(Bye,fet),e(In,get),e(In,Iye),e(Iye,het),e(In,uet),e(Wr,pet),e(Wr,Nye),e(Nye,RA),e(RA,qye),e(qye,_et),e(RA,bet),e(RA,fae),e(fae,vet),e(RA,Fet),e(Wr,Tet),M(PA,Wr,null),b(c,woo,_),b(c,wc,_),e(wc,BA),e(BA,jye),M(tR,jye,null),e(wc,Met),e(wc,Dye),e(Dye,Eet),b(c,Aoo,_),b(c,br,_),M(aR,br,null),e(br,Cet),e(br,Ac),e(Ac,wet),e(Ac,gae),e(gae,Aet),e(Ac,Let),e(Ac,hae),e(hae,yet),e(Ac,xet),e(br,$et),e(br,nR),e(nR,ket),e(nR,Gye),e(Gye,Set),e(nR,Ret),e(br,Pet),e(br,ra),M(sR,ra,null),e(ra,Bet),e(ra,Oye),e(Oye,Iet),e(ra,Net),e(ra,Lc),e(Lc,qet),e(Lc,Vye),e(Vye,jet),e(Lc,Det),e(Lc,uae),e(uae,Get),e(Lc,Oet),e(ra,Vet),M(IA,ra,null),e(br,Xet),e(br,Ur),M(lR,Ur,null),e(Ur,zet),e(Ur,Xye),e(Xye,Qet),e(Ur,Wet),e(Ur,Nn),e(Nn,Uet),e(Nn,zye),e(zye,Het),e(Nn,Jet),e(Nn,Qye),e(Qye,Yet),e(Nn,Ket),e(Nn,Wye),e(Wye,Zet),e(Nn,eot),e(Ur,oot),e(Ur,de),e(de,NA),e(NA,Uye),e(Uye,rot),e(NA,tot),e(NA,pae),e(pae,aot),e(NA,not),e(de,sot),e(de,qA),e(qA,Hye),e(Hye,lot),e(qA,iot),e(qA,_ae),e(_ae,dot),e(qA,mot),e(de,cot),e(de,jA),e(jA,Jye),e(Jye,fot),e(jA,got),e(jA,bae),e(bae,hot),e(jA,uot),e(de,pot),e(de,DA),e(DA,Yye),e(Yye,_ot),e(DA,bot),e(DA,vae),e(vae,vot),e(DA,Fot),e(de,Tot),e(de,GA),e(GA,Kye),e(Kye,Mot),e(GA,Eot),e(GA,Fae),e(Fae,Cot),e(GA,wot),e(de,Aot),e(de,OA),e(OA,Zye),e(Zye,Lot),e(OA,yot),e(OA,Tae),e(Tae,xot),e(OA,$ot),e(de,kot),e(de,VA),e(VA,e8e),e(e8e,Sot),e(VA,Rot),e(VA,Mae),e(Mae,Pot),e(VA,Bot),e(de,Iot),e(de,XA),e(XA,o8e),e(o8e,Not),e(XA,qot),e(XA,Eae),e(Eae,jot),e(XA,Dot),e(de,Got),e(de,zA),e(zA,r8e),e(r8e,Oot),e(zA,Vot),e(zA,Cae),e(Cae,Xot),e(zA,zot),e(de,Qot),e(de,QA),e(QA,t8e),e(t8e,Wot),e(QA,Uot),e(QA,wae),e(wae,Hot),e(QA,Jot),e(de,Yot),e(de,WA),e(WA,a8e),e(a8e,Kot),e(WA,Zot),e(WA,Aae),e(Aae,ert),e(WA,ort),e(de,rrt),e(de,UA),e(UA,n8e),e(n8e,trt),e(UA,art),e(UA,Lae),e(Lae,nrt),e(UA,srt),e(de,lrt),e(de,HA),e(HA,s8e),e(s8e,irt),e(HA,drt),e(HA,yae),e(yae,mrt),e(HA,crt),e(de,frt),e(de,JA),e(JA,l8e),e(l8e,grt),e(JA,hrt),e(JA,xae),e(xae,urt),e(JA,prt),e(de,_rt),e(de,YA),e(YA,i8e),e(i8e,brt),e(YA,vrt),e(YA,$ae),e($ae,Frt),e(YA,Trt),e(de,Mrt),e(de,KA),e(KA,d8e),e(d8e,Ert),e(KA,Crt),e(KA,kae),e(kae,wrt),e(KA,Art),e(de,Lrt),e(de,ZA),e(ZA,m8e),e(m8e,yrt),e(ZA,xrt),e(ZA,Sae),e(Sae,$rt),e(ZA,krt),e(de,Srt),e(de,e6),e(e6,c8e),e(c8e,Rrt),e(e6,Prt),e(e6,Rae),e(Rae,Brt),e(e6,Irt),e(de,Nrt),e(de,o6),e(o6,f8e),e(f8e,qrt),e(o6,jrt),e(o6,Pae),e(Pae,Drt),e(o6,Grt),e(de,Ort),e(de,r6),e(r6,g8e),e(g8e,Vrt),e(r6,Xrt),e(r6,Bae),e(Bae,zrt),e(r6,Qrt),e(de,Wrt),e(de,t6),e(t6,h8e),e(h8e,Urt),e(t6,Hrt),e(t6,Iae),e(Iae,Jrt),e(t6,Yrt),e(Ur,Krt),M(a6,Ur,null),b(c,Loo,_),b(c,yc,_),e(yc,n6),e(n6,u8e),M(iR,u8e,null),e(yc,Zrt),e(yc,p8e),e(p8e,ett),b(c,yoo,_),b(c,vr,_),M(dR,vr,null),e(vr,ott),e(vr,xc),e(xc,rtt),e(xc,Nae),e(Nae,ttt),e(xc,att),e(xc,qae),e(qae,ntt),e(xc,stt),e(vr,ltt),e(vr,mR),e(mR,itt),e(mR,_8e),e(_8e,dtt),e(mR,mtt),e(vr,ctt),e(vr,ta),M(cR,ta,null),e(ta,ftt),e(ta,b8e),e(b8e,gtt),e(ta,htt),e(ta,$c),e($c,utt),e($c,v8e),e(v8e,ptt),e($c,_tt),e($c,jae),e(jae,btt),e($c,vtt),e(ta,Ftt),M(s6,ta,null),e(vr,Ttt),e(vr,Hr),M(fR,Hr,null),e(Hr,Mtt),e(Hr,F8e),e(F8e,Ett),e(Hr,Ctt),e(Hr,qn),e(qn,wtt),e(qn,T8e),e(T8e,Att),e(qn,Ltt),e(qn,M8e),e(M8e,ytt),e(qn,xtt),e(qn,E8e),e(E8e,$tt),e(qn,ktt),e(Hr,Stt),e(Hr,me),e(me,l6),e(l6,C8e),e(C8e,Rtt),e(l6,Ptt),e(l6,Dae),e(Dae,Btt),e(l6,Itt),e(me,Ntt),e(me,i6),e(i6,w8e),e(w8e,qtt),e(i6,jtt),e(i6,Gae),e(Gae,Dtt),e(i6,Gtt),e(me,Ott),e(me,d6),e(d6,A8e),e(A8e,Vtt),e(d6,Xtt),e(d6,Oae),e(Oae,ztt),e(d6,Qtt),e(me,Wtt),e(me,m6),e(m6,L8e),e(L8e,Utt),e(m6,Htt),e(m6,Vae),e(Vae,Jtt),e(m6,Ytt),e(me,Ktt),e(me,c6),e(c6,y8e),e(y8e,Ztt),e(c6,eat),e(c6,Xae),e(Xae,oat),e(c6,rat),e(me,tat),e(me,f6),e(f6,x8e),e(x8e,aat),e(f6,nat),e(f6,zae),e(zae,sat),e(f6,lat),e(me,iat),e(me,g6),e(g6,$8e),e($8e,dat),e(g6,mat),e(g6,Qae),e(Qae,cat),e(g6,fat),e(me,gat),e(me,h6),e(h6,k8e),e(k8e,hat),e(h6,uat),e(h6,Wae),e(Wae,pat),e(h6,_at),e(me,bat),e(me,u6),e(u6,S8e),e(S8e,vat),e(u6,Fat),e(u6,Uae),e(Uae,Tat),e(u6,Mat),e(me,Eat),e(me,p6),e(p6,R8e),e(R8e,Cat),e(p6,wat),e(p6,Hae),e(Hae,Aat),e(p6,Lat),e(me,yat),e(me,_6),e(_6,P8e),e(P8e,xat),e(_6,$at),e(_6,Jae),e(Jae,kat),e(_6,Sat),e(me,Rat),e(me,b6),e(b6,B8e),e(B8e,Pat),e(b6,Bat),e(b6,Yae),e(Yae,Iat),e(b6,Nat),e(me,qat),e(me,v6),e(v6,I8e),e(I8e,jat),e(v6,Dat),e(v6,Kae),e(Kae,Gat),e(v6,Oat),e(me,Vat),e(me,F6),e(F6,N8e),e(N8e,Xat),e(F6,zat),e(F6,Zae),e(Zae,Qat),e(F6,Wat),e(me,Uat),e(me,T6),e(T6,q8e),e(q8e,Hat),e(T6,Jat),e(T6,ene),e(ene,Yat),e(T6,Kat),e(me,Zat),e(me,M6),e(M6,j8e),e(j8e,ent),e(M6,ont),e(M6,one),e(one,rnt),e(M6,tnt),e(me,ant),e(me,E6),e(E6,D8e),e(D8e,nnt),e(E6,snt),e(E6,rne),e(rne,lnt),e(E6,int),e(me,dnt),e(me,C6),e(C6,G8e),e(G8e,mnt),e(C6,cnt),e(C6,tne),e(tne,fnt),e(C6,gnt),e(me,hnt),e(me,w6),e(w6,O8e),e(O8e,unt),e(w6,pnt),e(w6,ane),e(ane,_nt),e(w6,bnt),e(me,vnt),e(me,A6),e(A6,V8e),e(V8e,Fnt),e(A6,Tnt),e(A6,nne),e(nne,Mnt),e(A6,Ent),e(me,Cnt),e(me,L6),e(L6,X8e),e(X8e,wnt),e(L6,Ant),e(L6,sne),e(sne,Lnt),e(L6,ynt),e(Hr,xnt),M(y6,Hr,null),b(c,xoo,_),b(c,kc,_),e(kc,x6),e(x6,z8e),M(gR,z8e,null),e(kc,$nt),e(kc,Q8e),e(Q8e,knt),b(c,$oo,_),b(c,Fr,_),M(hR,Fr,null),e(Fr,Snt),e(Fr,Sc),e(Sc,Rnt),e(Sc,lne),e(lne,Pnt),e(Sc,Bnt),e(Sc,ine),e(ine,Int),e(Sc,Nnt),e(Fr,qnt),e(Fr,uR),e(uR,jnt),e(uR,W8e),e(W8e,Dnt),e(uR,Gnt),e(Fr,Ont),e(Fr,aa),M(pR,aa,null),e(aa,Vnt),e(aa,U8e),e(U8e,Xnt),e(aa,znt),e(aa,Rc),e(Rc,Qnt),e(Rc,H8e),e(H8e,Wnt),e(Rc,Unt),e(Rc,dne),e(dne,Hnt),e(Rc,Jnt),e(aa,Ynt),M($6,aa,null),e(Fr,Knt),e(Fr,Jr),M(_R,Jr,null),e(Jr,Znt),e(Jr,J8e),e(J8e,est),e(Jr,ost),e(Jr,jn),e(jn,rst),e(jn,Y8e),e(Y8e,tst),e(jn,ast),e(jn,K8e),e(K8e,nst),e(jn,sst),e(jn,Z8e),e(Z8e,lst),e(jn,ist),e(Jr,dst),e(Jr,e9e),e(e9e,k6),e(k6,o9e),e(o9e,mst),e(k6,cst),e(k6,mne),e(mne,fst),e(k6,gst),e(Jr,hst),M(S6,Jr,null),b(c,koo,_),b(c,Pc,_),e(Pc,R6),e(R6,r9e),M(bR,r9e,null),e(Pc,ust),e(Pc,t9e),e(t9e,pst),b(c,Soo,_),b(c,Tr,_),M(vR,Tr,null),e(Tr,_st),e(Tr,Bc),e(Bc,bst),e(Bc,cne),e(cne,vst),e(Bc,Fst),e(Bc,fne),e(fne,Tst),e(Bc,Mst),e(Tr,Est),e(Tr,FR),e(FR,Cst),e(FR,a9e),e(a9e,wst),e(FR,Ast),e(Tr,Lst),e(Tr,na),M(TR,na,null),e(na,yst),e(na,n9e),e(n9e,xst),e(na,$st),e(na,Ic),e(Ic,kst),e(Ic,s9e),e(s9e,Sst),e(Ic,Rst),e(Ic,gne),e(gne,Pst),e(Ic,Bst),e(na,Ist),M(P6,na,null),e(Tr,Nst),e(Tr,Yr),M(MR,Yr,null),e(Yr,qst),e(Yr,l9e),e(l9e,jst),e(Yr,Dst),e(Yr,Dn),e(Dn,Gst),e(Dn,i9e),e(i9e,Ost),e(Dn,Vst),e(Dn,d9e),e(d9e,Xst),e(Dn,zst),e(Dn,m9e),e(m9e,Qst),e(Dn,Wst),e(Yr,Ust),e(Yr,c9e),e(c9e,B6),e(B6,f9e),e(f9e,Hst),e(B6,Jst),e(B6,hne),e(hne,Yst),e(B6,Kst),e(Yr,Zst),M(I6,Yr,null),b(c,Roo,_),b(c,Nc,_),e(Nc,N6),e(N6,g9e),M(ER,g9e,null),e(Nc,elt),e(Nc,h9e),e(h9e,olt),b(c,Poo,_),b(c,Mr,_),M(CR,Mr,null),e(Mr,rlt),e(Mr,qc),e(qc,tlt),e(qc,une),e(une,alt),e(qc,nlt),e(qc,pne),e(pne,slt),e(qc,llt),e(Mr,ilt),e(Mr,wR),e(wR,dlt),e(wR,u9e),e(u9e,mlt),e(wR,clt),e(Mr,flt),e(Mr,sa),M(AR,sa,null),e(sa,glt),e(sa,p9e),e(p9e,hlt),e(sa,ult),e(sa,jc),e(jc,plt),e(jc,_9e),e(_9e,_lt),e(jc,blt),e(jc,_ne),e(_ne,vlt),e(jc,Flt),e(sa,Tlt),M(q6,sa,null),e(Mr,Mlt),e(Mr,Kr),M(LR,Kr,null),e(Kr,Elt),e(Kr,b9e),e(b9e,Clt),e(Kr,wlt),e(Kr,Gn),e(Gn,Alt),e(Gn,v9e),e(v9e,Llt),e(Gn,ylt),e(Gn,F9e),e(F9e,xlt),e(Gn,$lt),e(Gn,T9e),e(T9e,klt),e(Gn,Slt),e(Kr,Rlt),e(Kr,te),e(te,j6),e(j6,M9e),e(M9e,Plt),e(j6,Blt),e(j6,bne),e(bne,Ilt),e(j6,Nlt),e(te,qlt),e(te,D6),e(D6,E9e),e(E9e,jlt),e(D6,Dlt),e(D6,vne),e(vne,Glt),e(D6,Olt),e(te,Vlt),e(te,G6),e(G6,C9e),e(C9e,Xlt),e(G6,zlt),e(G6,Fne),e(Fne,Qlt),e(G6,Wlt),e(te,Ult),e(te,O6),e(O6,w9e),e(w9e,Hlt),e(O6,Jlt),e(O6,Tne),e(Tne,Ylt),e(O6,Klt),e(te,Zlt),e(te,V6),e(V6,A9e),e(A9e,eit),e(V6,oit),e(V6,Mne),e(Mne,rit),e(V6,tit),e(te,ait),e(te,X6),e(X6,L9e),e(L9e,nit),e(X6,sit),e(X6,Ene),e(Ene,lit),e(X6,iit),e(te,dit),e(te,z6),e(z6,y9e),e(y9e,mit),e(z6,cit),e(z6,Cne),e(Cne,fit),e(z6,git),e(te,hit),e(te,Q6),e(Q6,x9e),e(x9e,uit),e(Q6,pit),e(Q6,wne),e(wne,_it),e(Q6,bit),e(te,vit),e(te,W6),e(W6,$9e),e($9e,Fit),e(W6,Tit),e(W6,Ane),e(Ane,Mit),e(W6,Eit),e(te,Cit),e(te,U6),e(U6,k9e),e(k9e,wit),e(U6,Ait),e(U6,Lne),e(Lne,Lit),e(U6,yit),e(te,xit),e(te,H6),e(H6,S9e),e(S9e,$it),e(H6,kit),e(H6,yne),e(yne,Sit),e(H6,Rit),e(te,Pit),e(te,J6),e(J6,R9e),e(R9e,Bit),e(J6,Iit),e(J6,xne),e(xne,Nit),e(J6,qit),e(te,jit),e(te,Y6),e(Y6,P9e),e(P9e,Dit),e(Y6,Git),e(Y6,$ne),e($ne,Oit),e(Y6,Vit),e(te,Xit),e(te,K6),e(K6,B9e),e(B9e,zit),e(K6,Qit),e(K6,kne),e(kne,Wit),e(K6,Uit),e(te,Hit),e(te,Z6),e(Z6,I9e),e(I9e,Jit),e(Z6,Yit),e(Z6,Sne),e(Sne,Kit),e(Z6,Zit),e(te,edt),e(te,e7),e(e7,N9e),e(N9e,odt),e(e7,rdt),e(e7,Rne),e(Rne,tdt),e(e7,adt),e(te,ndt),e(te,o7),e(o7,q9e),e(q9e,sdt),e(o7,ldt),e(o7,Pne),e(Pne,idt),e(o7,ddt),e(te,mdt),e(te,r7),e(r7,j9e),e(j9e,cdt),e(r7,fdt),e(r7,Bne),e(Bne,gdt),e(r7,hdt),e(te,udt),e(te,t7),e(t7,D9e),e(D9e,pdt),e(t7,_dt),e(t7,Ine),e(Ine,bdt),e(t7,vdt),e(te,Fdt),e(te,a7),e(a7,G9e),e(G9e,Tdt),e(a7,Mdt),e(a7,Nne),e(Nne,Edt),e(a7,Cdt),e(te,wdt),e(te,n7),e(n7,O9e),e(O9e,Adt),e(n7,Ldt),e(n7,qne),e(qne,ydt),e(n7,xdt),e(te,$dt),e(te,s7),e(s7,V9e),e(V9e,kdt),e(s7,Sdt),e(s7,jne),e(jne,Rdt),e(s7,Pdt),e(te,Bdt),e(te,l7),e(l7,X9e),e(X9e,Idt),e(l7,Ndt),e(l7,Dne),e(Dne,qdt),e(l7,jdt),e(te,Ddt),e(te,i7),e(i7,z9e),e(z9e,Gdt),e(i7,Odt),e(i7,Gne),e(Gne,Vdt),e(i7,Xdt),e(te,zdt),e(te,d7),e(d7,Q9e),e(Q9e,Qdt),e(d7,Wdt),e(d7,One),e(One,Udt),e(d7,Hdt),e(te,Jdt),e(te,m7),e(m7,W9e),e(W9e,Ydt),e(m7,Kdt),e(m7,Vne),e(Vne,Zdt),e(m7,emt),e(te,omt),e(te,c7),e(c7,U9e),e(U9e,rmt),e(c7,tmt),e(c7,Xne),e(Xne,amt),e(c7,nmt),e(Kr,smt),M(f7,Kr,null),b(c,Boo,_),b(c,Dc,_),e(Dc,g7),e(g7,H9e),M(yR,H9e,null),e(Dc,lmt),e(Dc,J9e),e(J9e,imt),b(c,Ioo,_),b(c,Er,_),M(xR,Er,null),e(Er,dmt),e(Er,Gc),e(Gc,mmt),e(Gc,zne),e(zne,cmt),e(Gc,fmt),e(Gc,Qne),e(Qne,gmt),e(Gc,hmt),e(Er,umt),e(Er,$R),e($R,pmt),e($R,Y9e),e(Y9e,_mt),e($R,bmt),e(Er,vmt),e(Er,la),M(kR,la,null),e(la,Fmt),e(la,K9e),e(K9e,Tmt),e(la,Mmt),e(la,Oc),e(Oc,Emt),e(Oc,Z9e),e(Z9e,Cmt),e(Oc,wmt),e(Oc,Wne),e(Wne,Amt),e(Oc,Lmt),e(la,ymt),M(h7,la,null),e(Er,xmt),e(Er,Zr),M(SR,Zr,null),e(Zr,$mt),e(Zr,exe),e(exe,kmt),e(Zr,Smt),e(Zr,On),e(On,Rmt),e(On,oxe),e(oxe,Pmt),e(On,Bmt),e(On,rxe),e(rxe,Imt),e(On,Nmt),e(On,txe),e(txe,qmt),e(On,jmt),e(Zr,Dmt),e(Zr,xe),e(xe,u7),e(u7,axe),e(axe,Gmt),e(u7,Omt),e(u7,Une),e(Une,Vmt),e(u7,Xmt),e(xe,zmt),e(xe,p7),e(p7,nxe),e(nxe,Qmt),e(p7,Wmt),e(p7,Hne),e(Hne,Umt),e(p7,Hmt),e(xe,Jmt),e(xe,_7),e(_7,sxe),e(sxe,Ymt),e(_7,Kmt),e(_7,Jne),e(Jne,Zmt),e(_7,ect),e(xe,oct),e(xe,b7),e(b7,lxe),e(lxe,rct),e(b7,tct),e(b7,Yne),e(Yne,act),e(b7,nct),e(xe,sct),e(xe,v7),e(v7,ixe),e(ixe,lct),e(v7,ict),e(v7,Kne),e(Kne,dct),e(v7,mct),e(xe,cct),e(xe,F7),e(F7,dxe),e(dxe,fct),e(F7,gct),e(F7,Zne),e(Zne,hct),e(F7,uct),e(xe,pct),e(xe,T7),e(T7,mxe),e(mxe,_ct),e(T7,bct),e(T7,ese),e(ese,vct),e(T7,Fct),e(xe,Tct),e(xe,M7),e(M7,cxe),e(cxe,Mct),e(M7,Ect),e(M7,ose),e(ose,Cct),e(M7,wct),e(xe,Act),e(xe,E7),e(E7,fxe),e(fxe,Lct),e(E7,yct),e(E7,rse),e(rse,xct),e(E7,$ct),e(xe,kct),e(xe,C7),e(C7,gxe),e(gxe,Sct),e(C7,Rct),e(C7,tse),e(tse,Pct),e(C7,Bct),e(Zr,Ict),M(w7,Zr,null),b(c,Noo,_),b(c,Vc,_),e(Vc,A7),e(A7,hxe),M(RR,hxe,null),e(Vc,Nct),e(Vc,uxe),e(uxe,qct),b(c,qoo,_),b(c,Cr,_),M(PR,Cr,null),e(Cr,jct),e(Cr,Xc),e(Xc,Dct),e(Xc,ase),e(ase,Gct),e(Xc,Oct),e(Xc,nse),e(nse,Vct),e(Xc,Xct),e(Cr,zct),e(Cr,BR),e(BR,Qct),e(BR,pxe),e(pxe,Wct),e(BR,Uct),e(Cr,Hct),e(Cr,ia),M(IR,ia,null),e(ia,Jct),e(ia,_xe),e(_xe,Yct),e(ia,Kct),e(ia,zc),e(zc,Zct),e(zc,bxe),e(bxe,eft),e(zc,oft),e(zc,sse),e(sse,rft),e(zc,tft),e(ia,aft),M(L7,ia,null),e(Cr,nft),e(Cr,et),M(NR,et,null),e(et,sft),e(et,vxe),e(vxe,lft),e(et,ift),e(et,Vn),e(Vn,dft),e(Vn,Fxe),e(Fxe,mft),e(Vn,cft),e(Vn,Txe),e(Txe,fft),e(Vn,gft),e(Vn,Mxe),e(Mxe,hft),e(Vn,uft),e(et,pft),e(et,Ee),e(Ee,y7),e(y7,Exe),e(Exe,_ft),e(y7,bft),e(y7,lse),e(lse,vft),e(y7,Fft),e(Ee,Tft),e(Ee,x7),e(x7,Cxe),e(Cxe,Mft),e(x7,Eft),e(x7,ise),e(ise,Cft),e(x7,wft),e(Ee,Aft),e(Ee,$7),e($7,wxe),e(wxe,Lft),e($7,yft),e($7,dse),e(dse,xft),e($7,$ft),e(Ee,kft),e(Ee,k7),e(k7,Axe),e(Axe,Sft),e(k7,Rft),e(k7,mse),e(mse,Pft),e(k7,Bft),e(Ee,Ift),e(Ee,S7),e(S7,Lxe),e(Lxe,Nft),e(S7,qft),e(S7,cse),e(cse,jft),e(S7,Dft),e(Ee,Gft),e(Ee,R7),e(R7,yxe),e(yxe,Oft),e(R7,Vft),e(R7,fse),e(fse,Xft),e(R7,zft),e(Ee,Qft),e(Ee,P7),e(P7,xxe),e(xxe,Wft),e(P7,Uft),e(P7,gse),e(gse,Hft),e(P7,Jft),e(Ee,Yft),e(Ee,B7),e(B7,$xe),e($xe,Kft),e(B7,Zft),e(B7,hse),e(hse,egt),e(B7,ogt),e(Ee,rgt),e(Ee,I7),e(I7,kxe),e(kxe,tgt),e(I7,agt),e(I7,use),e(use,ngt),e(I7,sgt),e(Ee,lgt),e(Ee,N7),e(N7,Sxe),e(Sxe,igt),e(N7,dgt),e(N7,pse),e(pse,mgt),e(N7,cgt),e(Ee,fgt),e(Ee,q7),e(q7,Rxe),e(Rxe,ggt),e(q7,hgt),e(q7,_se),e(_se,ugt),e(q7,pgt),e(Ee,_gt),e(Ee,j7),e(j7,Pxe),e(Pxe,bgt),e(j7,vgt),e(j7,bse),e(bse,Fgt),e(j7,Tgt),e(Ee,Mgt),e(Ee,D7),e(D7,Bxe),e(Bxe,Egt),e(D7,Cgt),e(D7,vse),e(vse,wgt),e(D7,Agt),e(et,Lgt),M(G7,et,null),b(c,joo,_),b(c,Qc,_),e(Qc,O7),e(O7,Ixe),M(qR,Ixe,null),e(Qc,ygt),e(Qc,Nxe),e(Nxe,xgt),b(c,Doo,_),b(c,wr,_),M(jR,wr,null),e(wr,$gt),e(wr,Wc),e(Wc,kgt),e(Wc,Fse),e(Fse,Sgt),e(Wc,Rgt),e(Wc,Tse),e(Tse,Pgt),e(Wc,Bgt),e(wr,Igt),e(wr,DR),e(DR,Ngt),e(DR,qxe),e(qxe,qgt),e(DR,jgt),e(wr,Dgt),e(wr,da),M(GR,da,null),e(da,Ggt),e(da,jxe),e(jxe,Ogt),e(da,Vgt),e(da,Uc),e(Uc,Xgt),e(Uc,Dxe),e(Dxe,zgt),e(Uc,Qgt),e(Uc,Mse),e(Mse,Wgt),e(Uc,Ugt),e(da,Hgt),M(V7,da,null),e(wr,Jgt),e(wr,ot),M(OR,ot,null),e(ot,Ygt),e(ot,Gxe),e(Gxe,Kgt),e(ot,Zgt),e(ot,Xn),e(Xn,eht),e(Xn,Oxe),e(Oxe,oht),e(Xn,rht),e(Xn,Vxe),e(Vxe,tht),e(Xn,aht),e(Xn,Xxe),e(Xxe,nht),e(Xn,sht),e(ot,lht),e(ot,$e),e($e,X7),e(X7,zxe),e(zxe,iht),e(X7,dht),e(X7,Ese),e(Ese,mht),e(X7,cht),e($e,fht),e($e,z7),e(z7,Qxe),e(Qxe,ght),e(z7,hht),e(z7,Cse),e(Cse,uht),e(z7,pht),e($e,_ht),e($e,Q7),e(Q7,Wxe),e(Wxe,bht),e(Q7,vht),e(Q7,wse),e(wse,Fht),e(Q7,Tht),e($e,Mht),e($e,W7),e(W7,Uxe),e(Uxe,Eht),e(W7,Cht),e(W7,Ase),e(Ase,wht),e(W7,Aht),e($e,Lht),e($e,U7),e(U7,Hxe),e(Hxe,yht),e(U7,xht),e(U7,Lse),e(Lse,$ht),e(U7,kht),e($e,Sht),e($e,H7),e(H7,Jxe),e(Jxe,Rht),e(H7,Pht),e(H7,yse),e(yse,Bht),e(H7,Iht),e($e,Nht),e($e,J7),e(J7,Yxe),e(Yxe,qht),e(J7,jht),e(J7,xse),e(xse,Dht),e(J7,Ght),e($e,Oht),e($e,Y7),e(Y7,Kxe),e(Kxe,Vht),e(Y7,Xht),e(Y7,$se),e($se,zht),e(Y7,Qht),e($e,Wht),e($e,K7),e(K7,Zxe),e(Zxe,Uht),e(K7,Hht),e(K7,kse),e(kse,Jht),e(K7,Yht),e($e,Kht),e($e,Z7),e(Z7,e$e),e(e$e,Zht),e(Z7,eut),e(Z7,Sse),e(Sse,out),e(Z7,rut),e(ot,tut),M(eL,ot,null),b(c,Goo,_),b(c,Hc,_),e(Hc,oL),e(oL,o$e),M(VR,o$e,null),e(Hc,aut),e(Hc,r$e),e(r$e,nut),b(c,Ooo,_),b(c,Ar,_),M(XR,Ar,null),e(Ar,sut),e(Ar,Jc),e(Jc,lut),e(Jc,Rse),e(Rse,iut),e(Jc,dut),e(Jc,Pse),e(Pse,mut),e(Jc,cut),e(Ar,fut),e(Ar,zR),e(zR,gut),e(zR,t$e),e(t$e,hut),e(zR,uut),e(Ar,put),e(Ar,ma),M(QR,ma,null),e(ma,_ut),e(ma,a$e),e(a$e,but),e(ma,vut),e(ma,Yc),e(Yc,Fut),e(Yc,n$e),e(n$e,Tut),e(Yc,Mut),e(Yc,Bse),e(Bse,Eut),e(Yc,Cut),e(ma,wut),M(rL,ma,null),e(Ar,Aut),e(Ar,rt),M(WR,rt,null),e(rt,Lut),e(rt,s$e),e(s$e,yut),e(rt,xut),e(rt,zn),e(zn,$ut),e(zn,l$e),e(l$e,kut),e(zn,Sut),e(zn,i$e),e(i$e,Rut),e(zn,Put),e(zn,d$e),e(d$e,But),e(zn,Iut),e(rt,Nut),e(rt,ke),e(ke,tL),e(tL,m$e),e(m$e,qut),e(tL,jut),e(tL,Ise),e(Ise,Dut),e(tL,Gut),e(ke,Out),e(ke,aL),e(aL,c$e),e(c$e,Vut),e(aL,Xut),e(aL,Nse),e(Nse,zut),e(aL,Qut),e(ke,Wut),e(ke,nL),e(nL,f$e),e(f$e,Uut),e(nL,Hut),e(nL,qse),e(qse,Jut),e(nL,Yut),e(ke,Kut),e(ke,sL),e(sL,g$e),e(g$e,Zut),e(sL,ept),e(sL,jse),e(jse,opt),e(sL,rpt),e(ke,tpt),e(ke,lL),e(lL,h$e),e(h$e,apt),e(lL,npt),e(lL,Dse),e(Dse,spt),e(lL,lpt),e(ke,ipt),e(ke,iL),e(iL,u$e),e(u$e,dpt),e(iL,mpt),e(iL,Gse),e(Gse,cpt),e(iL,fpt),e(ke,gpt),e(ke,dL),e(dL,p$e),e(p$e,hpt),e(dL,upt),e(dL,Ose),e(Ose,ppt),e(dL,_pt),e(ke,bpt),e(ke,mL),e(mL,_$e),e(_$e,vpt),e(mL,Fpt),e(mL,Vse),e(Vse,Tpt),e(mL,Mpt),e(ke,Ept),e(ke,cL),e(cL,b$e),e(b$e,Cpt),e(cL,wpt),e(cL,Xse),e(Xse,Apt),e(cL,Lpt),e(ke,ypt),e(ke,fL),e(fL,v$e),e(v$e,xpt),e(fL,$pt),e(fL,zse),e(zse,kpt),e(fL,Spt),e(rt,Rpt),M(gL,rt,null),b(c,Voo,_),b(c,Kc,_),e(Kc,hL),e(hL,F$e),M(UR,F$e,null),e(Kc,Ppt),e(Kc,T$e),e(T$e,Bpt),b(c,Xoo,_),b(c,Lr,_),M(HR,Lr,null),e(Lr,Ipt),e(Lr,Zc),e(Zc,Npt),e(Zc,Qse),e(Qse,qpt),e(Zc,jpt),e(Zc,Wse),e(Wse,Dpt),e(Zc,Gpt),e(Lr,Opt),e(Lr,JR),e(JR,Vpt),e(JR,M$e),e(M$e,Xpt),e(JR,zpt),e(Lr,Qpt),e(Lr,ca),M(YR,ca,null),e(ca,Wpt),e(ca,E$e),e(E$e,Upt),e(ca,Hpt),e(ca,ef),e(ef,Jpt),e(ef,C$e),e(C$e,Ypt),e(ef,Kpt),e(ef,Use),e(Use,Zpt),e(ef,e_t),e(ca,o_t),M(uL,ca,null),e(Lr,r_t),e(Lr,tt),M(KR,tt,null),e(tt,t_t),e(tt,w$e),e(w$e,a_t),e(tt,n_t),e(tt,Qn),e(Qn,s_t),e(Qn,A$e),e(A$e,l_t),e(Qn,i_t),e(Qn,L$e),e(L$e,d_t),e(Qn,m_t),e(Qn,y$e),e(y$e,c_t),e(Qn,f_t),e(tt,g_t),e(tt,Se),e(Se,pL),e(pL,x$e),e(x$e,h_t),e(pL,u_t),e(pL,Hse),e(Hse,p_t),e(pL,__t),e(Se,b_t),e(Se,_L),e(_L,$$e),e($$e,v_t),e(_L,F_t),e(_L,Jse),e(Jse,T_t),e(_L,M_t),e(Se,E_t),e(Se,bL),e(bL,k$e),e(k$e,C_t),e(bL,w_t),e(bL,Yse),e(Yse,A_t),e(bL,L_t),e(Se,y_t),e(Se,vL),e(vL,S$e),e(S$e,x_t),e(vL,$_t),e(vL,Kse),e(Kse,k_t),e(vL,S_t),e(Se,R_t),e(Se,FL),e(FL,R$e),e(R$e,P_t),e(FL,B_t),e(FL,Zse),e(Zse,I_t),e(FL,N_t),e(Se,q_t),e(Se,TL),e(TL,P$e),e(P$e,j_t),e(TL,D_t),e(TL,ele),e(ele,G_t),e(TL,O_t),e(Se,V_t),e(Se,ML),e(ML,B$e),e(B$e,X_t),e(ML,z_t),e(ML,ole),e(ole,Q_t),e(ML,W_t),e(Se,U_t),e(Se,EL),e(EL,I$e),e(I$e,H_t),e(EL,J_t),e(EL,rle),e(rle,Y_t),e(EL,K_t),e(Se,Z_t),e(Se,CL),e(CL,N$e),e(N$e,e1t),e(CL,o1t),e(CL,tle),e(tle,r1t),e(CL,t1t),e(Se,a1t),e(Se,wL),e(wL,q$e),e(q$e,n1t),e(wL,s1t),e(wL,ale),e(ale,l1t),e(wL,i1t),e(tt,d1t),M(AL,tt,null),b(c,zoo,_),b(c,of,_),e(of,LL),e(LL,j$e),M(ZR,j$e,null),e(of,m1t),e(of,D$e),e(D$e,c1t),b(c,Qoo,_),b(c,yr,_),M(eP,yr,null),e(yr,f1t),e(yr,rf),e(rf,g1t),e(rf,nle),e(nle,h1t),e(rf,u1t),e(rf,sle),e(sle,p1t),e(rf,_1t),e(yr,b1t),e(yr,oP),e(oP,v1t),e(oP,G$e),e(G$e,F1t),e(oP,T1t),e(yr,M1t),e(yr,fa),M(rP,fa,null),e(fa,E1t),e(fa,O$e),e(O$e,C1t),e(fa,w1t),e(fa,tf),e(tf,A1t),e(tf,V$e),e(V$e,L1t),e(tf,y1t),e(tf,lle),e(lle,x1t),e(tf,$1t),e(fa,k1t),M(yL,fa,null),e(yr,S1t),e(yr,at),M(tP,at,null),e(at,R1t),e(at,X$e),e(X$e,P1t),e(at,B1t),e(at,Wn),e(Wn,I1t),e(Wn,z$e),e(z$e,N1t),e(Wn,q1t),e(Wn,Q$e),e(Q$e,j1t),e(Wn,D1t),e(Wn,W$e),e(W$e,G1t),e(Wn,O1t),e(at,V1t),e(at,Re),e(Re,xL),e(xL,U$e),e(U$e,X1t),e(xL,z1t),e(xL,ile),e(ile,Q1t),e(xL,W1t),e(Re,U1t),e(Re,$L),e($L,H$e),e(H$e,H1t),e($L,J1t),e($L,dle),e(dle,Y1t),e($L,K1t),e(Re,Z1t),e(Re,kL),e(kL,J$e),e(J$e,e2t),e(kL,o2t),e(kL,mle),e(mle,r2t),e(kL,t2t),e(Re,a2t),e(Re,SL),e(SL,Y$e),e(Y$e,n2t),e(SL,s2t),e(SL,cle),e(cle,l2t),e(SL,i2t),e(Re,d2t),e(Re,RL),e(RL,K$e),e(K$e,m2t),e(RL,c2t),e(RL,fle),e(fle,f2t),e(RL,g2t),e(Re,h2t),e(Re,PL),e(PL,Z$e),e(Z$e,u2t),e(PL,p2t),e(PL,gle),e(gle,_2t),e(PL,b2t),e(Re,v2t),e(Re,BL),e(BL,eke),e(eke,F2t),e(BL,T2t),e(BL,hle),e(hle,M2t),e(BL,E2t),e(Re,C2t),e(Re,IL),e(IL,oke),e(oke,w2t),e(IL,A2t),e(IL,ule),e(ule,L2t),e(IL,y2t),e(Re,x2t),e(Re,NL),e(NL,rke),e(rke,$2t),e(NL,k2t),e(NL,ple),e(ple,S2t),e(NL,R2t),e(Re,P2t),e(Re,qL),e(qL,tke),e(tke,B2t),e(qL,I2t),e(qL,_le),e(_le,N2t),e(qL,q2t),e(at,j2t),M(jL,at,null),b(c,Woo,_),b(c,af,_),e(af,DL),e(DL,ake),M(aP,ake,null),e(af,D2t),e(af,nke),e(nke,G2t),b(c,Uoo,_),b(c,xr,_),M(nP,xr,null),e(xr,O2t),e(xr,nf),e(nf,V2t),e(nf,ble),e(ble,X2t),e(nf,z2t),e(nf,vle),e(vle,Q2t),e(nf,W2t),e(xr,U2t),e(xr,sP),e(sP,H2t),e(sP,ske),e(ske,J2t),e(sP,Y2t),e(xr,K2t),e(xr,ga),M(lP,ga,null),e(ga,Z2t),e(ga,lke),e(lke,ebt),e(ga,obt),e(ga,sf),e(sf,rbt),e(sf,ike),e(ike,tbt),e(sf,abt),e(sf,Fle),e(Fle,nbt),e(sf,sbt),e(ga,lbt),M(GL,ga,null),e(xr,ibt),e(xr,nt),M(iP,nt,null),e(nt,dbt),e(nt,dke),e(dke,mbt),e(nt,cbt),e(nt,Un),e(Un,fbt),e(Un,mke),e(mke,gbt),e(Un,hbt),e(Un,cke),e(cke,ubt),e(Un,pbt),e(Un,fke),e(fke,_bt),e(Un,bbt),e(nt,vbt),e(nt,Xe),e(Xe,OL),e(OL,gke),e(gke,Fbt),e(OL,Tbt),e(OL,Tle),e(Tle,Mbt),e(OL,Ebt),e(Xe,Cbt),e(Xe,VL),e(VL,hke),e(hke,wbt),e(VL,Abt),e(VL,Mle),e(Mle,Lbt),e(VL,ybt),e(Xe,xbt),e(Xe,XL),e(XL,uke),e(uke,$bt),e(XL,kbt),e(XL,Ele),e(Ele,Sbt),e(XL,Rbt),e(Xe,Pbt),e(Xe,zL),e(zL,pke),e(pke,Bbt),e(zL,Ibt),e(zL,Cle),e(Cle,Nbt),e(zL,qbt),e(Xe,jbt),e(Xe,QL),e(QL,_ke),e(_ke,Dbt),e(QL,Gbt),e(QL,wle),e(wle,Obt),e(QL,Vbt),e(Xe,Xbt),e(Xe,WL),e(WL,bke),e(bke,zbt),e(WL,Qbt),e(WL,Ale),e(Ale,Wbt),e(WL,Ubt),e(Xe,Hbt),e(Xe,UL),e(UL,vke),e(vke,Jbt),e(UL,Ybt),e(UL,Lle),e(Lle,Kbt),e(UL,Zbt),e(Xe,evt),e(Xe,HL),e(HL,Fke),e(Fke,ovt),e(HL,rvt),e(HL,yle),e(yle,tvt),e(HL,avt),e(nt,nvt),M(JL,nt,null),b(c,Hoo,_),b(c,lf,_),e(lf,YL),e(YL,Tke),M(dP,Tke,null),e(lf,svt),e(lf,Mke),e(Mke,lvt),b(c,Joo,_),b(c,$r,_),M(mP,$r,null),e($r,ivt),e($r,df),e(df,dvt),e(df,xle),e(xle,mvt),e(df,cvt),e(df,$le),e($le,fvt),e(df,gvt),e($r,hvt),e($r,cP),e(cP,uvt),e(cP,Eke),e(Eke,pvt),e(cP,_vt),e($r,bvt),e($r,ha),M(fP,ha,null),e(ha,vvt),e(ha,Cke),e(Cke,Fvt),e(ha,Tvt),e(ha,mf),e(mf,Mvt),e(mf,wke),e(wke,Evt),e(mf,Cvt),e(mf,kle),e(kle,wvt),e(mf,Avt),e(ha,Lvt),M(KL,ha,null),e($r,yvt),e($r,st),M(gP,st,null),e(st,xvt),e(st,Ake),e(Ake,$vt),e(st,kvt),e(st,Hn),e(Hn,Svt),e(Hn,Lke),e(Lke,Rvt),e(Hn,Pvt),e(Hn,yke),e(yke,Bvt),e(Hn,Ivt),e(Hn,xke),e(xke,Nvt),e(Hn,qvt),e(st,jvt),e(st,ze),e(ze,ZL),e(ZL,$ke),e($ke,Dvt),e(ZL,Gvt),e(ZL,Sle),e(Sle,Ovt),e(ZL,Vvt),e(ze,Xvt),e(ze,ey),e(ey,kke),e(kke,zvt),e(ey,Qvt),e(ey,Rle),e(Rle,Wvt),e(ey,Uvt),e(ze,Hvt),e(ze,oy),e(oy,Ske),e(Ske,Jvt),e(oy,Yvt),e(oy,Ple),e(Ple,Kvt),e(oy,Zvt),e(ze,eFt),e(ze,ry),e(ry,Rke),e(Rke,oFt),e(ry,rFt),e(ry,Ble),e(Ble,tFt),e(ry,aFt),e(ze,nFt),e(ze,ty),e(ty,Pke),e(Pke,sFt),e(ty,lFt),e(ty,Ile),e(Ile,iFt),e(ty,dFt),e(ze,mFt),e(ze,ay),e(ay,Bke),e(Bke,cFt),e(ay,fFt),e(ay,Nle),e(Nle,gFt),e(ay,hFt),e(ze,uFt),e(ze,ny),e(ny,Ike),e(Ike,pFt),e(ny,_Ft),e(ny,qle),e(qle,bFt),e(ny,vFt),e(ze,FFt),e(ze,sy),e(sy,Nke),e(Nke,TFt),e(sy,MFt),e(sy,jle),e(jle,EFt),e(sy,CFt),e(st,wFt),M(ly,st,null),b(c,Yoo,_),b(c,cf,_),e(cf,iy),e(iy,qke),M(hP,qke,null),e(cf,AFt),e(cf,jke),e(jke,LFt),b(c,Koo,_),b(c,kr,_),M(uP,kr,null),e(kr,yFt),e(kr,ff),e(ff,xFt),e(ff,Dle),e(Dle,$Ft),e(ff,kFt),e(ff,Gle),e(Gle,SFt),e(ff,RFt),e(kr,PFt),e(kr,pP),e(pP,BFt),e(pP,Dke),e(Dke,IFt),e(pP,NFt),e(kr,qFt),e(kr,ua),M(_P,ua,null),e(ua,jFt),e(ua,Gke),e(Gke,DFt),e(ua,GFt),e(ua,gf),e(gf,OFt),e(gf,Oke),e(Oke,VFt),e(gf,XFt),e(gf,Ole),e(Ole,zFt),e(gf,QFt),e(ua,WFt),M(dy,ua,null),e(kr,UFt),e(kr,lt),M(bP,lt,null),e(lt,HFt),e(lt,Vke),e(Vke,JFt),e(lt,YFt),e(lt,Jn),e(Jn,KFt),e(Jn,Xke),e(Xke,ZFt),e(Jn,eTt),e(Jn,zke),e(zke,oTt),e(Jn,rTt),e(Jn,Qke),e(Qke,tTt),e(Jn,aTt),e(lt,nTt),e(lt,Wke),e(Wke,my),e(my,Uke),e(Uke,sTt),e(my,lTt),e(my,Vle),e(Vle,iTt),e(my,dTt),e(lt,mTt),M(cy,lt,null),b(c,Zoo,_),b(c,hf,_),e(hf,fy),e(fy,Hke),M(vP,Hke,null),e(hf,cTt),e(hf,Jke),e(Jke,fTt),b(c,ero,_),b(c,Sr,_),M(FP,Sr,null),e(Sr,gTt),e(Sr,uf),e(uf,hTt),e(uf,Xle),e(Xle,uTt),e(uf,pTt),e(uf,zle),e(zle,_Tt),e(uf,bTt),e(Sr,vTt),e(Sr,TP),e(TP,FTt),e(TP,Yke),e(Yke,TTt),e(TP,MTt),e(Sr,ETt),e(Sr,pa),M(MP,pa,null),e(pa,CTt),e(pa,Kke),e(Kke,wTt),e(pa,ATt),e(pa,pf),e(pf,LTt),e(pf,Zke),e(Zke,yTt),e(pf,xTt),e(pf,Qle),e(Qle,$Tt),e(pf,kTt),e(pa,STt),M(gy,pa,null),e(Sr,RTt),e(Sr,it),M(EP,it,null),e(it,PTt),e(it,eSe),e(eSe,BTt),e(it,ITt),e(it,Yn),e(Yn,NTt),e(Yn,oSe),e(oSe,qTt),e(Yn,jTt),e(Yn,rSe),e(rSe,DTt),e(Yn,GTt),e(Yn,tSe),e(tSe,OTt),e(Yn,VTt),e(it,XTt),e(it,CP),e(CP,hy),e(hy,aSe),e(aSe,zTt),e(hy,QTt),e(hy,Wle),e(Wle,WTt),e(hy,UTt),e(CP,HTt),e(CP,uy),e(uy,nSe),e(nSe,JTt),e(uy,YTt),e(uy,Ule),e(Ule,KTt),e(uy,ZTt),e(it,eMt),M(py,it,null),b(c,oro,_),b(c,_f,_),e(_f,_y),e(_y,sSe),M(wP,sSe,null),e(_f,oMt),e(_f,lSe),e(lSe,rMt),b(c,rro,_),b(c,Rr,_),M(AP,Rr,null),e(Rr,tMt),e(Rr,bf),e(bf,aMt),e(bf,Hle),e(Hle,nMt),e(bf,sMt),e(bf,Jle),e(Jle,lMt),e(bf,iMt),e(Rr,dMt),e(Rr,LP),e(LP,mMt),e(LP,iSe),e(iSe,cMt),e(LP,fMt),e(Rr,gMt),e(Rr,_a),M(yP,_a,null),e(_a,hMt),e(_a,dSe),e(dSe,uMt),e(_a,pMt),e(_a,vf),e(vf,_Mt),e(vf,mSe),e(mSe,bMt),e(vf,vMt),e(vf,Yle),e(Yle,FMt),e(vf,TMt),e(_a,MMt),M(by,_a,null),e(Rr,EMt),e(Rr,dt),M(xP,dt,null),e(dt,CMt),e(dt,cSe),e(cSe,wMt),e(dt,AMt),e(dt,Kn),e(Kn,LMt),e(Kn,fSe),e(fSe,yMt),e(Kn,xMt),e(Kn,gSe),e(gSe,$Mt),e(Kn,kMt),e(Kn,hSe),e(hSe,SMt),e(Kn,RMt),e(dt,PMt),e(dt,uSe),e(uSe,vy),e(vy,pSe),e(pSe,BMt),e(vy,IMt),e(vy,Kle),e(Kle,NMt),e(vy,qMt),e(dt,jMt),M(Fy,dt,null),tro=!0},p(c,[_]){const $P={};_&2&&($P.$$scope={dirty:_,ctx:c}),yf.$set($P);const _Se={};_&2&&(_Se.$$scope={dirty:_,ctx:c}),eu.$set(_Se);const bSe={};_&2&&(bSe.$$scope={dirty:_,ctx:c}),Nu.$set(bSe);const vSe={};_&2&&(vSe.$$scope={dirty:_,ctx:c}),yp.$set(vSe);const kP={};_&2&&(kP.$$scope={dirty:_,ctx:c}),xp.$set(kP);const FSe={};_&2&&(FSe.$$scope={dirty:_,ctx:c}),e_.$set(FSe);const Zn={};_&2&&(Zn.$$scope={dirty:_,ctx:c}),o_.$set(Zn);const TSe={};_&2&&(TSe.$$scope={dirty:_,ctx:c}),a_.$set(TSe);const MSe={};_&2&&(MSe.$$scope={dirty:_,ctx:c}),E2.$set(MSe);const ESe={};_&2&&(ESe.$$scope={dirty:_,ctx:c}),w2.$set(ESe);const SP={};_&2&&(SP.$$scope={dirty:_,ctx:c}),Tb.$set(SP);const CSe={};_&2&&(CSe.$$scope={dirty:_,ctx:c}),Eb.$set(CSe);const RP={};_&2&&(RP.$$scope={dirty:_,ctx:c}),gv.$set(RP);const wSe={};_&2&&(wSe.$$scope={dirty:_,ctx:c}),uv.$set(wSe);const PP={};_&2&&(PP.$$scope={dirty:_,ctx:c}),rF.$set(PP);const ASe={};_&2&&(ASe.$$scope={dirty:_,ctx:c}),aF.$set(ASe);const LSe={};_&2&&(LSe.$$scope={dirty:_,ctx:c}),AF.$set(LSe);const ySe={};_&2&&(ySe.$$scope={dirty:_,ctx:c}),yF.$set(ySe);const Ff={};_&2&&(Ff.$$scope={dirty:_,ctx:c}),kT.$set(Ff);const xSe={};_&2&&(xSe.$$scope={dirty:_,ctx:c}),RT.$set(xSe);const $Se={};_&2&&($Se.$$scope={dirty:_,ctx:c}),gM.$set($Se);const kSe={};_&2&&(kSe.$$scope={dirty:_,ctx:c}),uM.$set(kSe);const BP={};_&2&&(BP.$$scope={dirty:_,ctx:c}),CM.$set(BP);const SSe={};_&2&&(SSe.$$scope={dirty:_,ctx:c}),AM.$set(SSe);const RSe={};_&2&&(RSe.$$scope={dirty:_,ctx:c}),hE.$set(RSe);const PSe={};_&2&&(PSe.$$scope={dirty:_,ctx:c}),pE.$set(PSe);const ht={};_&2&&(ht.$$scope={dirty:_,ctx:c}),m4.$set(ht);const IP={};_&2&&(IP.$$scope={dirty:_,ctx:c}),f4.$set(IP);const BSe={};_&2&&(BSe.$$scope={dirty:_,ctx:c}),u4.$set(BSe);const NP={};_&2&&(NP.$$scope={dirty:_,ctx:c}),_4.$set(NP);const ISe={};_&2&&(ISe.$$scope={dirty:_,ctx:c}),M4.$set(ISe);const ut={};_&2&&(ut.$$scope={dirty:_,ctx:c}),C4.$set(ut);const NSe={};_&2&&(NSe.$$scope={dirty:_,ctx:c}),G4.$set(NSe);const Tf={};_&2&&(Tf.$$scope={dirty:_,ctx:c}),V4.$set(Tf);const qSe={};_&2&&(qSe.$$scope={dirty:_,ctx:c}),Q4.$set(qSe);const jSe={};_&2&&(jSe.$$scope={dirty:_,ctx:c}),U4.$set(jSe);const L={};_&2&&(L.$$scope={dirty:_,ctx:c}),Y4.$set(L);const Ty={};_&2&&(Ty.$$scope={dirty:_,ctx:c}),Z4.$set(Ty);const DSe={};_&2&&(DSe.$$scope={dirty:_,ctx:c}),rC.$set(DSe);const GSe={};_&2&&(GSe.$$scope={dirty:_,ctx:c}),aC.$set(GSe);const My={};_&2&&(My.$$scope={dirty:_,ctx:c}),uC.$set(My);const OSe={};_&2&&(OSe.$$scope={dirty:_,ctx:c}),_C.$set(OSe);const VSe={};_&2&&(VSe.$$scope={dirty:_,ctx:c}),CC.$set(VSe);const Ey={};_&2&&(Ey.$$scope={dirty:_,ctx:c}),AC.$set(Ey);const XSe={};_&2&&(XSe.$$scope={dirty:_,ctx:c}),qC.$set(XSe);const zSe={};_&2&&(zSe.$$scope={dirty:_,ctx:c}),DC.$set(zSe);const Cy={};_&2&&(Cy.$$scope={dirty:_,ctx:c}),XC.$set(Cy);const QSe={};_&2&&(QSe.$$scope={dirty:_,ctx:c}),QC.$set(QSe);const WSe={};_&2&&(WSe.$$scope={dirty:_,ctx:c}),ZC.$set(WSe);const wy={};_&2&&(wy.$$scope={dirty:_,ctx:c}),o3.$set(wy);const USe={};_&2&&(USe.$$scope={dirty:_,ctx:c}),l3.$set(USe);const HSe={};_&2&&(HSe.$$scope={dirty:_,ctx:c}),d3.$set(HSe);const Ay={};_&2&&(Ay.$$scope={dirty:_,ctx:c}),u3.$set(Ay);const JSe={};_&2&&(JSe.$$scope={dirty:_,ctx:c}),_3.$set(JSe);const YSe={};_&2&&(YSe.$$scope={dirty:_,ctx:c}),F3.$set(YSe);const Ly={};_&2&&(Ly.$$scope={dirty:_,ctx:c}),M3.$set(Ly);const KSe={};_&2&&(KSe.$$scope={dirty:_,ctx:c}),x3.$set(KSe);const ZSe={};_&2&&(ZSe.$$scope={dirty:_,ctx:c}),k3.$set(ZSe);const yy={};_&2&&(yy.$$scope={dirty:_,ctx:c}),P3.$set(yy);const eRe={};_&2&&(eRe.$$scope={dirty:_,ctx:c}),I3.$set(eRe);const oRe={};_&2&&(oRe.$$scope={dirty:_,ctx:c}),N5.$set(oRe);const xy={};_&2&&(xy.$$scope={dirty:_,ctx:c}),j5.$set(xy);const rRe={};_&2&&(rRe.$$scope={dirty:_,ctx:c}),d0.$set(rRe);const tRe={};_&2&&(tRe.$$scope={dirty:_,ctx:c}),c0.$set(tRe);const $y={};_&2&&($y.$$scope={dirty:_,ctx:c}),A0.$set($y);const aRe={};_&2&&(aRe.$$scope={dirty:_,ctx:c}),y0.$set(aRe);const nRe={};_&2&&(nRe.$$scope={dirty:_,ctx:c}),N0.$set(nRe);const ky={};_&2&&(ky.$$scope={dirty:_,ctx:c}),j0.$set(ky);const sRe={};_&2&&(sRe.$$scope={dirty:_,ctx:c}),V0.$set(sRe);const lRe={};_&2&&(lRe.$$scope={dirty:_,ctx:c}),z0.$set(lRe);const Sy={};_&2&&(Sy.$$scope={dirty:_,ctx:c}),fw.$set(Sy);const iRe={};_&2&&(iRe.$$scope={dirty:_,ctx:c}),hw.$set(iRe);const dRe={};_&2&&(dRe.$$scope={dirty:_,ctx:c}),ww.$set(dRe);const Ry={};_&2&&(Ry.$$scope={dirty:_,ctx:c}),Lw.$set(Ry);const mRe={};_&2&&(mRe.$$scope={dirty:_,ctx:c}),oA.$set(mRe);const cRe={};_&2&&(cRe.$$scope={dirty:_,ctx:c}),tA.$set(cRe);const Py={};_&2&&(Py.$$scope={dirty:_,ctx:c}),TA.$set(Py);const fRe={};_&2&&(fRe.$$scope={dirty:_,ctx:c}),EA.$set(fRe);const gRe={};_&2&&(gRe.$$scope={dirty:_,ctx:c}),AA.$set(gRe);const By={};_&2&&(By.$$scope={dirty:_,ctx:c}),yA.$set(By);const hRe={};_&2&&(hRe.$$scope={dirty:_,ctx:c}),$A.$set(hRe);const uRe={};_&2&&(uRe.$$scope={dirty:_,ctx:c}),SA.$set(uRe);const Iy={};_&2&&(Iy.$$scope={dirty:_,ctx:c}),PA.$set(Iy);const pRe={};_&2&&(pRe.$$scope={dirty:_,ctx:c}),IA.$set(pRe);const _Re={};_&2&&(_Re.$$scope={dirty:_,ctx:c}),a6.$set(_Re);const Ny={};_&2&&(Ny.$$scope={dirty:_,ctx:c}),s6.$set(Ny);const bRe={};_&2&&(bRe.$$scope={dirty:_,ctx:c}),y6.$set(bRe);const vRe={};_&2&&(vRe.$$scope={dirty:_,ctx:c}),$6.$set(vRe);const qy={};_&2&&(qy.$$scope={dirty:_,ctx:c}),S6.$set(qy);const FRe={};_&2&&(FRe.$$scope={dirty:_,ctx:c}),P6.$set(FRe);const TRe={};_&2&&(TRe.$$scope={dirty:_,ctx:c}),I6.$set(TRe);const jy={};_&2&&(jy.$$scope={dirty:_,ctx:c}),q6.$set(jy);const MRe={};_&2&&(MRe.$$scope={dirty:_,ctx:c}),f7.$set(MRe);const ERe={};_&2&&(ERe.$$scope={dirty:_,ctx:c}),h7.$set(ERe);const Dy={};_&2&&(Dy.$$scope={dirty:_,ctx:c}),w7.$set(Dy);const CRe={};_&2&&(CRe.$$scope={dirty:_,ctx:c}),L7.$set(CRe);const wRe={};_&2&&(wRe.$$scope={dirty:_,ctx:c}),G7.$set(wRe);const Gy={};_&2&&(Gy.$$scope={dirty:_,ctx:c}),V7.$set(Gy);const ARe={};_&2&&(ARe.$$scope={dirty:_,ctx:c}),eL.$set(ARe);const LRe={};_&2&&(LRe.$$scope={dirty:_,ctx:c}),rL.$set(LRe);const Oy={};_&2&&(Oy.$$scope={dirty:_,ctx:c}),gL.$set(Oy);const yRe={};_&2&&(yRe.$$scope={dirty:_,ctx:c}),uL.$set(yRe);const xRe={};_&2&&(xRe.$$scope={dirty:_,ctx:c}),AL.$set(xRe);const Vy={};_&2&&(Vy.$$scope={dirty:_,ctx:c}),yL.$set(Vy);const $Re={};_&2&&($Re.$$scope={dirty:_,ctx:c}),jL.$set($Re);const kRe={};_&2&&(kRe.$$scope={dirty:_,ctx:c}),GL.$set(kRe);const Xy={};_&2&&(Xy.$$scope={dirty:_,ctx:c}),JL.$set(Xy);const SRe={};_&2&&(SRe.$$scope={dirty:_,ctx:c}),KL.$set(SRe);const RRe={};_&2&&(RRe.$$scope={dirty:_,ctx:c}),ly.$set(RRe);const zy={};_&2&&(zy.$$scope={dirty:_,ctx:c}),dy.$set(zy);const PRe={};_&2&&(PRe.$$scope={dirty:_,ctx:c}),cy.$set(PRe);const BRe={};_&2&&(BRe.$$scope={dirty:_,ctx:c}),gy.$set(BRe);const Qy={};_&2&&(Qy.$$scope={dirty:_,ctx:c}),py.$set(Qy);const IRe={};_&2&&(IRe.$$scope={dirty:_,ctx:c}),by.$set(IRe);const NRe={};_&2&&(NRe.$$scope={dirty:_,ctx:c}),Fy.$set(NRe)},i(c){tro||(E(d.$$.fragment,c),E(Qa.$$.fragment,c),E(ox.$$.fragment,c),E(rx.$$.fragment,c),E(yf.$$.fragment,c),E(tx.$$.fragment,c),E(ax.$$.fragment,c),E(lx.$$.fragment,c),E(eu.$$.fragment,c),E(ix.$$.fragment,c),E(dx.$$.fragment,c),E(mx.$$.fragment,c),E(gx.$$.fragment,c),E(Nu.$$.fragment,c),E(hx.$$.fragment,c),E(ux.$$.fragment,c),E(px.$$.fragment,c),E(vx.$$.fragment,c),E(yp.$$.fragment,c),E(xp.$$.fragment,c),E(Fx.$$.fragment,c),E(Tx.$$.fragment,c),E(Mx.$$.fragment,c),E(wx.$$.fragment,c),E(e_.$$.fragment,c),E(o_.$$.fragment,c),E(Ax.$$.fragment,c),E(Lx.$$.fragment,c),E(yx.$$.fragment,c),E($x.$$.fragment,c),E(a_.$$.fragment,c),E(kx.$$.fragment,c),E(E2.$$.fragment,c),E(Sx.$$.fragment,c),E(Rx.$$.fragment,c),E(Bx.$$.fragment,c),E(w2.$$.fragment,c),E(Ix.$$.fragment,c),E(Tb.$$.fragment,c),E(Nx.$$.fragment,c),E(qx.$$.fragment,c),E(Dx.$$.fragment,c),E(Eb.$$.fragment,c),E(Gx.$$.fragment,c),E(gv.$$.fragment,c),E(Ox.$$.fragment,c),E(Vx.$$.fragment,c),E(zx.$$.fragment,c),E(uv.$$.fragment,c),E(Qx.$$.fragment,c),E(rF.$$.fragment,c),E(Wx.$$.fragment,c),E(Ux.$$.fragment,c),E(Jx.$$.fragment,c),E(aF.$$.fragment,c),E(Yx.$$.fragment,c),E(AF.$$.fragment,c),E(Kx.$$.fragment,c),E(Zx.$$.fragment,c),E(o$.$$.fragment,c),E(yF.$$.fragment,c),E(r$.$$.fragment,c),E(kT.$$.fragment,c),E(t$.$$.fragment,c),E(a$.$$.fragment,c),E(s$.$$.fragment,c),E(RT.$$.fragment,c),E(l$.$$.fragment,c),E(gM.$$.fragment,c),E(i$.$$.fragment,c),E(d$.$$.fragment,c),E(c$.$$.fragment,c),E(uM.$$.fragment,c),E(f$.$$.fragment,c),E(CM.$$.fragment,c),E(g$.$$.fragment,c),E(h$.$$.fragment,c),E(p$.$$.fragment,c),E(AM.$$.fragment,c),E(_$.$$.fragment,c),E(hE.$$.fragment,c),E(b$.$$.fragment,c),E(v$.$$.fragment,c),E(T$.$$.fragment,c),E(pE.$$.fragment,c),E(M$.$$.fragment,c),E(m4.$$.fragment,c),E(E$.$$.fragment,c),E(C$.$$.fragment,c),E(A$.$$.fragment,c),E(f4.$$.fragment,c),E(L$.$$.fragment,c),E(u4.$$.fragment,c),E(y$.$$.fragment,c),E(x$.$$.fragment,c),E(k$.$$.fragment,c),E(_4.$$.fragment,c),E(S$.$$.fragment,c),E(M4.$$.fragment,c),E(R$.$$.fragment,c),E(P$.$$.fragment,c),E(I$.$$.fragment,c),E(C4.$$.fragment,c),E(N$.$$.fragment,c),E(G4.$$.fragment,c),E(q$.$$.fragment,c),E(j$.$$.fragment,c),E(G$.$$.fragment,c),E(V4.$$.fragment,c),E(O$.$$.fragment,c),E(Q4.$$.fragment,c),E(V$.$$.fragment,c),E(X$.$$.fragment,c),E(Q$.$$.fragment,c),E(U4.$$.fragment,c),E(W$.$$.fragment,c),E(Y4.$$.fragment,c),E(U$.$$.fragment,c),E(H$.$$.fragment,c),E(Y$.$$.fragment,c),E(Z4.$$.fragment,c),E(K$.$$.fragment,c),E(rC.$$.fragment,c),E(Z$.$$.fragment,c),E(ek.$$.fragment,c),E(rk.$$.fragment,c),E(aC.$$.fragment,c),E(tk.$$.fragment,c),E(uC.$$.fragment,c),E(ak.$$.fragment,c),E(nk.$$.fragment,c),E(lk.$$.fragment,c),E(_C.$$.fragment,c),E(ik.$$.fragment,c),E(CC.$$.fragment,c),E(dk.$$.fragment,c),E(mk.$$.fragment,c),E(fk.$$.fragment,c),E(AC.$$.fragment,c),E(gk.$$.fragment,c),E(qC.$$.fragment,c),E(hk.$$.fragment,c),E(uk.$$.fragment,c),E(_k.$$.fragment,c),E(DC.$$.fragment,c),E(bk.$$.fragment,c),E(XC.$$.fragment,c),E(Fk.$$.fragment,c),E(Tk.$$.fragment,c),E(Ek.$$.fragment,c),E(QC.$$.fragment,c),E(Ck.$$.fragment,c),E(ZC.$$.fragment,c),E(wk.$$.fragment,c),E(Ak.$$.fragment,c),E(yk.$$.fragment,c),E(o3.$$.fragment,c),E(xk.$$.fragment,c),E(l3.$$.fragment,c),E($k.$$.fragment,c),E(kk.$$.fragment,c),E(Rk.$$.fragment,c),E(d3.$$.fragment,c),E(Pk.$$.fragment,c),E(u3.$$.fragment,c),E(Bk.$$.fragment,c),E(Ik.$$.fragment,c),E(qk.$$.fragment,c),E(_3.$$.fragment,c),E(jk.$$.fragment,c),E(F3.$$.fragment,c),E(Dk.$$.fragment,c),E(Gk.$$.fragment,c),E(Vk.$$.fragment,c),E(M3.$$.fragment,c),E(Xk.$$.fragment,c),E(x3.$$.fragment,c),E(zk.$$.fragment,c),E(Qk.$$.fragment,c),E(Uk.$$.fragment,c),E(k3.$$.fragment,c),E(Hk.$$.fragment,c),E(P3.$$.fragment,c),E(Jk.$$.fragment,c),E(Yk.$$.fragment,c),E(Zk.$$.fragment,c),E(I3.$$.fragment,c),E(eS.$$.fragment,c),E(N5.$$.fragment,c),E(oS.$$.fragment,c),E(rS.$$.fragment,c),E(aS.$$.fragment,c),E(j5.$$.fragment,c),E(nS.$$.fragment,c),E(d0.$$.fragment,c),E(sS.$$.fragment,c),E(lS.$$.fragment,c),E(dS.$$.fragment,c),E(c0.$$.fragment,c),E(mS.$$.fragment,c),E(A0.$$.fragment,c),E(cS.$$.fragment,c),E(fS.$$.fragment,c),E(hS.$$.fragment,c),E(y0.$$.fragment,c),E(uS.$$.fragment,c),E(N0.$$.fragment,c),E(pS.$$.fragment,c),E(_S.$$.fragment,c),E(vS.$$.fragment,c),E(j0.$$.fragment,c),E(FS.$$.fragment,c),E(V0.$$.fragment,c),E(TS.$$.fragment,c),E(MS.$$.fragment,c),E(CS.$$.fragment,c),E(z0.$$.fragment,c),E(wS.$$.fragment,c),E(fw.$$.fragment,c),E(AS.$$.fragment,c),E(LS.$$.fragment,c),E(xS.$$.fragment,c),E(hw.$$.fragment,c),E($S.$$.fragment,c),E(ww.$$.fragment,c),E(kS.$$.fragment,c),E(SS.$$.fragment,c),E(PS.$$.fragment,c),E(Lw.$$.fragment,c),E(BS.$$.fragment,c),E(oA.$$.fragment,c),E(IS.$$.fragment,c),E(NS.$$.fragment,c),E(jS.$$.fragment,c),E(tA.$$.fragment,c),E(DS.$$.fragment,c),E(TA.$$.fragment,c),E(GS.$$.fragment,c),E(OS.$$.fragment,c),E(XS.$$.fragment,c),E(EA.$$.fragment,c),E(zS.$$.fragment,c),E(AA.$$.fragment,c),E(WS.$$.fragment,c),E(US.$$.fragment,c),E(JS.$$.fragment,c),E(yA.$$.fragment,c),E(YS.$$.fragment,c),E($A.$$.fragment,c),E(KS.$$.fragment,c),E(ZS.$$.fragment,c),E(oR.$$.fragment,c),E(SA.$$.fragment,c),E(rR.$$.fragment,c),E(PA.$$.fragment,c),E(tR.$$.fragment,c),E(aR.$$.fragment,c),E(sR.$$.fragment,c),E(IA.$$.fragment,c),E(lR.$$.fragment,c),E(a6.$$.fragment,c),E(iR.$$.fragment,c),E(dR.$$.fragment,c),E(cR.$$.fragment,c),E(s6.$$.fragment,c),E(fR.$$.fragment,c),E(y6.$$.fragment,c),E(gR.$$.fragment,c),E(hR.$$.fragment,c),E(pR.$$.fragment,c),E($6.$$.fragment,c),E(_R.$$.fragment,c),E(S6.$$.fragment,c),E(bR.$$.fragment,c),E(vR.$$.fragment,c),E(TR.$$.fragment,c),E(P6.$$.fragment,c),E(MR.$$.fragment,c),E(I6.$$.fragment,c),E(ER.$$.fragment,c),E(CR.$$.fragment,c),E(AR.$$.fragment,c),E(q6.$$.fragment,c),E(LR.$$.fragment,c),E(f7.$$.fragment,c),E(yR.$$.fragment,c),E(xR.$$.fragment,c),E(kR.$$.fragment,c),E(h7.$$.fragment,c),E(SR.$$.fragment,c),E(w7.$$.fragment,c),E(RR.$$.fragment,c),E(PR.$$.fragment,c),E(IR.$$.fragment,c),E(L7.$$.fragment,c),E(NR.$$.fragment,c),E(G7.$$.fragment,c),E(qR.$$.fragment,c),E(jR.$$.fragment,c),E(GR.$$.fragment,c),E(V7.$$.fragment,c),E(OR.$$.fragment,c),E(eL.$$.fragment,c),E(VR.$$.fragment,c),E(XR.$$.fragment,c),E(QR.$$.fragment,c),E(rL.$$.fragment,c),E(WR.$$.fragment,c),E(gL.$$.fragment,c),E(UR.$$.fragment,c),E(HR.$$.fragment,c),E(YR.$$.fragment,c),E(uL.$$.fragment,c),E(KR.$$.fragment,c),E(AL.$$.fragment,c),E(ZR.$$.fragment,c),E(eP.$$.fragment,c),E(rP.$$.fragment,c),E(yL.$$.fragment,c),E(tP.$$.fragment,c),E(jL.$$.fragment,c),E(aP.$$.fragment,c),E(nP.$$.fragment,c),E(lP.$$.fragment,c),E(GL.$$.fragment,c),E(iP.$$.fragment,c),E(JL.$$.fragment,c),E(dP.$$.fragment,c),E(mP.$$.fragment,c),E(fP.$$.fragment,c),E(KL.$$.fragment,c),E(gP.$$.fragment,c),E(ly.$$.fragment,c),E(hP.$$.fragment,c),E(uP.$$.fragment,c),E(_P.$$.fragment,c),E(dy.$$.fragment,c),E(bP.$$.fragment,c),E(cy.$$.fragment,c),E(vP.$$.fragment,c),E(FP.$$.fragment,c),E(MP.$$.fragment,c),E(gy.$$.fragment,c),E(EP.$$.fragment,c),E(py.$$.fragment,c),E(wP.$$.fragment,c),E(AP.$$.fragment,c),E(yP.$$.fragment,c),E(by.$$.fragment,c),E(xP.$$.fragment,c),E(Fy.$$.fragment,c),tro=!0)},o(c){C(d.$$.fragment,c),C(Qa.$$.fragment,c),C(ox.$$.fragment,c),C(rx.$$.fragment,c),C(yf.$$.fragment,c),C(tx.$$.fragment,c),C(ax.$$.fragment,c),C(lx.$$.fragment,c),C(eu.$$.fragment,c),C(ix.$$.fragment,c),C(dx.$$.fragment,c),C(mx.$$.fragment,c),C(gx.$$.fragment,c),C(Nu.$$.fragment,c),C(hx.$$.fragment,c),C(ux.$$.fragment,c),C(px.$$.fragment,c),C(vx.$$.fragment,c),C(yp.$$.fragment,c),C(xp.$$.fragment,c),C(Fx.$$.fragment,c),C(Tx.$$.fragment,c),C(Mx.$$.fragment,c),C(wx.$$.fragment,c),C(e_.$$.fragment,c),C(o_.$$.fragment,c),C(Ax.$$.fragment,c),C(Lx.$$.fragment,c),C(yx.$$.fragment,c),C($x.$$.fragment,c),C(a_.$$.fragment,c),C(kx.$$.fragment,c),C(E2.$$.fragment,c),C(Sx.$$.fragment,c),C(Rx.$$.fragment,c),C(Bx.$$.fragment,c),C(w2.$$.fragment,c),C(Ix.$$.fragment,c),C(Tb.$$.fragment,c),C(Nx.$$.fragment,c),C(qx.$$.fragment,c),C(Dx.$$.fragment,c),C(Eb.$$.fragment,c),C(Gx.$$.fragment,c),C(gv.$$.fragment,c),C(Ox.$$.fragment,c),C(Vx.$$.fragment,c),C(zx.$$.fragment,c),C(uv.$$.fragment,c),C(Qx.$$.fragment,c),C(rF.$$.fragment,c),C(Wx.$$.fragment,c),C(Ux.$$.fragment,c),C(Jx.$$.fragment,c),C(aF.$$.fragment,c),C(Yx.$$.fragment,c),C(AF.$$.fragment,c),C(Kx.$$.fragment,c),C(Zx.$$.fragment,c),C(o$.$$.fragment,c),C(yF.$$.fragment,c),C(r$.$$.fragment,c),C(kT.$$.fragment,c),C(t$.$$.fragment,c),C(a$.$$.fragment,c),C(s$.$$.fragment,c),C(RT.$$.fragment,c),C(l$.$$.fragment,c),C(gM.$$.fragment,c),C(i$.$$.fragment,c),C(d$.$$.fragment,c),C(c$.$$.fragment,c),C(uM.$$.fragment,c),C(f$.$$.fragment,c),C(CM.$$.fragment,c),C(g$.$$.fragment,c),C(h$.$$.fragment,c),C(p$.$$.fragment,c),C(AM.$$.fragment,c),C(_$.$$.fragment,c),C(hE.$$.fragment,c),C(b$.$$.fragment,c),C(v$.$$.fragment,c),C(T$.$$.fragment,c),C(pE.$$.fragment,c),C(M$.$$.fragment,c),C(m4.$$.fragment,c),C(E$.$$.fragment,c),C(C$.$$.fragment,c),C(A$.$$.fragment,c),C(f4.$$.fragment,c),C(L$.$$.fragment,c),C(u4.$$.fragment,c),C(y$.$$.fragment,c),C(x$.$$.fragment,c),C(k$.$$.fragment,c),C(_4.$$.fragment,c),C(S$.$$.fragment,c),C(M4.$$.fragment,c),C(R$.$$.fragment,c),C(P$.$$.fragment,c),C(I$.$$.fragment,c),C(C4.$$.fragment,c),C(N$.$$.fragment,c),C(G4.$$.fragment,c),C(q$.$$.fragment,c),C(j$.$$.fragment,c),C(G$.$$.fragment,c),C(V4.$$.fragment,c),C(O$.$$.fragment,c),C(Q4.$$.fragment,c),C(V$.$$.fragment,c),C(X$.$$.fragment,c),C(Q$.$$.fragment,c),C(U4.$$.fragment,c),C(W$.$$.fragment,c),C(Y4.$$.fragment,c),C(U$.$$.fragment,c),C(H$.$$.fragment,c),C(Y$.$$.fragment,c),C(Z4.$$.fragment,c),C(K$.$$.fragment,c),C(rC.$$.fragment,c),C(Z$.$$.fragment,c),C(ek.$$.fragment,c),C(rk.$$.fragment,c),C(aC.$$.fragment,c),C(tk.$$.fragment,c),C(uC.$$.fragment,c),C(ak.$$.fragment,c),C(nk.$$.fragment,c),C(lk.$$.fragment,c),C(_C.$$.fragment,c),C(ik.$$.fragment,c),C(CC.$$.fragment,c),C(dk.$$.fragment,c),C(mk.$$.fragment,c),C(fk.$$.fragment,c),C(AC.$$.fragment,c),C(gk.$$.fragment,c),C(qC.$$.fragment,c),C(hk.$$.fragment,c),C(uk.$$.fragment,c),C(_k.$$.fragment,c),C(DC.$$.fragment,c),C(bk.$$.fragment,c),C(XC.$$.fragment,c),C(Fk.$$.fragment,c),C(Tk.$$.fragment,c),C(Ek.$$.fragment,c),C(QC.$$.fragment,c),C(Ck.$$.fragment,c),C(ZC.$$.fragment,c),C(wk.$$.fragment,c),C(Ak.$$.fragment,c),C(yk.$$.fragment,c),C(o3.$$.fragment,c),C(xk.$$.fragment,c),C(l3.$$.fragment,c),C($k.$$.fragment,c),C(kk.$$.fragment,c),C(Rk.$$.fragment,c),C(d3.$$.fragment,c),C(Pk.$$.fragment,c),C(u3.$$.fragment,c),C(Bk.$$.fragment,c),C(Ik.$$.fragment,c),C(qk.$$.fragment,c),C(_3.$$.fragment,c),C(jk.$$.fragment,c),C(F3.$$.fragment,c),C(Dk.$$.fragment,c),C(Gk.$$.fragment,c),C(Vk.$$.fragment,c),C(M3.$$.fragment,c),C(Xk.$$.fragment,c),C(x3.$$.fragment,c),C(zk.$$.fragment,c),C(Qk.$$.fragment,c),C(Uk.$$.fragment,c),C(k3.$$.fragment,c),C(Hk.$$.fragment,c),C(P3.$$.fragment,c),C(Jk.$$.fragment,c),C(Yk.$$.fragment,c),C(Zk.$$.fragment,c),C(I3.$$.fragment,c),C(eS.$$.fragment,c),C(N5.$$.fragment,c),C(oS.$$.fragment,c),C(rS.$$.fragment,c),C(aS.$$.fragment,c),C(j5.$$.fragment,c),C(nS.$$.fragment,c),C(d0.$$.fragment,c),C(sS.$$.fragment,c),C(lS.$$.fragment,c),C(dS.$$.fragment,c),C(c0.$$.fragment,c),C(mS.$$.fragment,c),C(A0.$$.fragment,c),C(cS.$$.fragment,c),C(fS.$$.fragment,c),C(hS.$$.fragment,c),C(y0.$$.fragment,c),C(uS.$$.fragment,c),C(N0.$$.fragment,c),C(pS.$$.fragment,c),C(_S.$$.fragment,c),C(vS.$$.fragment,c),C(j0.$$.fragment,c),C(FS.$$.fragment,c),C(V0.$$.fragment,c),C(TS.$$.fragment,c),C(MS.$$.fragment,c),C(CS.$$.fragment,c),C(z0.$$.fragment,c),C(wS.$$.fragment,c),C(fw.$$.fragment,c),C(AS.$$.fragment,c),C(LS.$$.fragment,c),C(xS.$$.fragment,c),C(hw.$$.fragment,c),C($S.$$.fragment,c),C(ww.$$.fragment,c),C(kS.$$.fragment,c),C(SS.$$.fragment,c),C(PS.$$.fragment,c),C(Lw.$$.fragment,c),C(BS.$$.fragment,c),C(oA.$$.fragment,c),C(IS.$$.fragment,c),C(NS.$$.fragment,c),C(jS.$$.fragment,c),C(tA.$$.fragment,c),C(DS.$$.fragment,c),C(TA.$$.fragment,c),C(GS.$$.fragment,c),C(OS.$$.fragment,c),C(XS.$$.fragment,c),C(EA.$$.fragment,c),C(zS.$$.fragment,c),C(AA.$$.fragment,c),C(WS.$$.fragment,c),C(US.$$.fragment,c),C(JS.$$.fragment,c),C(yA.$$.fragment,c),C(YS.$$.fragment,c),C($A.$$.fragment,c),C(KS.$$.fragment,c),C(ZS.$$.fragment,c),C(oR.$$.fragment,c),C(SA.$$.fragment,c),C(rR.$$.fragment,c),C(PA.$$.fragment,c),C(tR.$$.fragment,c),C(aR.$$.fragment,c),C(sR.$$.fragment,c),C(IA.$$.fragment,c),C(lR.$$.fragment,c),C(a6.$$.fragment,c),C(iR.$$.fragment,c),C(dR.$$.fragment,c),C(cR.$$.fragment,c),C(s6.$$.fragment,c),C(fR.$$.fragment,c),C(y6.$$.fragment,c),C(gR.$$.fragment,c),C(hR.$$.fragment,c),C(pR.$$.fragment,c),C($6.$$.fragment,c),C(_R.$$.fragment,c),C(S6.$$.fragment,c),C(bR.$$.fragment,c),C(vR.$$.fragment,c),C(TR.$$.fragment,c),C(P6.$$.fragment,c),C(MR.$$.fragment,c),C(I6.$$.fragment,c),C(ER.$$.fragment,c),C(CR.$$.fragment,c),C(AR.$$.fragment,c),C(q6.$$.fragment,c),C(LR.$$.fragment,c),C(f7.$$.fragment,c),C(yR.$$.fragment,c),C(xR.$$.fragment,c),C(kR.$$.fragment,c),C(h7.$$.fragment,c),C(SR.$$.fragment,c),C(w7.$$.fragment,c),C(RR.$$.fragment,c),C(PR.$$.fragment,c),C(IR.$$.fragment,c),C(L7.$$.fragment,c),C(NR.$$.fragment,c),C(G7.$$.fragment,c),C(qR.$$.fragment,c),C(jR.$$.fragment,c),C(GR.$$.fragment,c),C(V7.$$.fragment,c),C(OR.$$.fragment,c),C(eL.$$.fragment,c),C(VR.$$.fragment,c),C(XR.$$.fragment,c),C(QR.$$.fragment,c),C(rL.$$.fragment,c),C(WR.$$.fragment,c),C(gL.$$.fragment,c),C(UR.$$.fragment,c),C(HR.$$.fragment,c),C(YR.$$.fragment,c),C(uL.$$.fragment,c),C(KR.$$.fragment,c),C(AL.$$.fragment,c),C(ZR.$$.fragment,c),C(eP.$$.fragment,c),C(rP.$$.fragment,c),C(yL.$$.fragment,c),C(tP.$$.fragment,c),C(jL.$$.fragment,c),C(aP.$$.fragment,c),C(nP.$$.fragment,c),C(lP.$$.fragment,c),C(GL.$$.fragment,c),C(iP.$$.fragment,c),C(JL.$$.fragment,c),C(dP.$$.fragment,c),C(mP.$$.fragment,c),C(fP.$$.fragment,c),C(KL.$$.fragment,c),C(gP.$$.fragment,c),C(ly.$$.fragment,c),C(hP.$$.fragment,c),C(uP.$$.fragment,c),C(_P.$$.fragment,c),C(dy.$$.fragment,c),C(bP.$$.fragment,c),C(cy.$$.fragment,c),C(vP.$$.fragment,c),C(FP.$$.fragment,c),C(MP.$$.fragment,c),C(gy.$$.fragment,c),C(EP.$$.fragment,c),C(py.$$.fragment,c),C(wP.$$.fragment,c),C(AP.$$.fragment,c),C(yP.$$.fragment,c),C(by.$$.fragment,c),C(xP.$$.fragment,c),C(Fy.$$.fragment,c),tro=!1},d(c){t(g),c&&t(v),c&&t(u),w(d),c&&t(Ef),c&&t(pt),c&&t(Ve),c&&t(He),c&&t(wf),w(Qa,c),c&&t(Je),c&&t(Ae),c&&t(xo),c&&t(Wa),c&&t(XZe),c&&t(md),w(ox),c&&t(zZe),c&&t(as),c&&t(QZe),w(rx,c),c&&t(WZe),c&&t(sI),c&&t(UZe),w(yf,c),c&&t(HZe),c&&t(cd),w(tx),c&&t(JZe),c&&t($o),w(ax),w(lx),w(eu),w(ix),c&&t(YZe),c&&t(gd),w(dx),c&&t(KZe),c&&t(ko),w(mx),w(gx),w(Nu),w(hx),c&&t(ZZe),c&&t(hd),w(ux),c&&t(eeo),c&&t(So),w(px),w(vx),w(yp),w(xp),w(Fx),c&&t(oeo),c&&t(ud),w(Tx),c&&t(reo),c&&t(Ro),w(Mx),w(wx),w(e_),w(o_),w(Ax),c&&t(teo),c&&t(_d),w(Lx),c&&t(aeo),c&&t(Po),w(yx),w($x),w(a_),w(kx),w(E2),c&&t(neo),c&&t(Fd),w(Sx),c&&t(seo),c&&t(Bo),w(Rx),w(Bx),w(w2),w(Ix),w(Tb),c&&t(leo),c&&t(Ed),w(Nx),c&&t(ieo),c&&t(Io),w(qx),w(Dx),w(Eb),w(Gx),w(gv),c&&t(deo),c&&t(Ad),w(Ox),c&&t(meo),c&&t(No),w(Vx),w(zx),w(uv),w(Qx),w(rF),c&&t(ceo),c&&t(xd),w(Wx),c&&t(feo),c&&t(qo),w(Ux),w(Jx),w(aF),w(Yx),w(AF),c&&t(geo),c&&t(Sd),w(Kx),c&&t(heo),c&&t(jo),w(Zx),w(o$),w(yF),w(r$),w(kT),c&&t(ueo),c&&t(Bd),w(t$),c&&t(peo),c&&t(Do),w(a$),w(s$),w(RT),w(l$),w(gM),c&&t(_eo),c&&t(qd),w(i$),c&&t(beo),c&&t(Go),w(d$),w(c$),w(uM),w(f$),w(CM),c&&t(veo),c&&t(Gd),w(g$),c&&t(Feo),c&&t(Oo),w(h$),w(p$),w(AM),w(_$),w(hE),c&&t(Teo),c&&t(Xd),w(b$),c&&t(Meo),c&&t(Vo),w(v$),w(T$),w(pE),w(M$),w(m4),c&&t(Eeo),c&&t(Wd),w(E$),c&&t(Ceo),c&&t(Xo),w(C$),w(A$),w(f4),w(L$),w(u4),c&&t(weo),c&&t(Jd),w(y$),c&&t(Aeo),c&&t(zo),w(x$),w(k$),w(_4),w(S$),w(M4),c&&t(Leo),c&&t(em),w(R$),c&&t(yeo),c&&t(Qo),w(P$),w(I$),w(C4),w(N$),w(G4),c&&t(xeo),c&&t(tm),w(q$),c&&t($eo),c&&t(Wo),w(j$),w(G$),w(V4),w(O$),w(Q4),c&&t(keo),c&&t(sm),w(V$),c&&t(Seo),c&&t(Uo),w(X$),w(Q$),w(U4),w(W$),w(Y4),c&&t(Reo),c&&t(dm),w(U$),c&&t(Peo),c&&t(Ho),w(H$),w(Y$),w(Z4),w(K$),w(rC),c&&t(Beo),c&&t(fm),w(Z$),c&&t(Ieo),c&&t(Jo),w(ek),w(rk),w(aC),w(tk),w(uC),c&&t(Neo),c&&t(um),w(ak),c&&t(qeo),c&&t(Yo),w(nk),w(lk),w(_C),w(ik),w(CC),c&&t(jeo),c&&t(bm),w(dk),c&&t(Deo),c&&t(Ko),w(mk),w(fk),w(AC),w(gk),w(qC),c&&t(Geo),c&&t(Tm),w(hk),c&&t(Oeo),c&&t(Zo),w(uk),w(_k),w(DC),w(bk),w(XC),c&&t(Veo),c&&t(Cm),w(Fk),c&&t(Xeo),c&&t(er),w(Tk),w(Ek),w(QC),w(Ck),w(ZC),c&&t(zeo),c&&t(Lm),w(wk),c&&t(Qeo),c&&t(or),w(Ak),w(yk),w(o3),w(xk),w(l3),c&&t(Weo),c&&t($m),w($k),c&&t(Ueo),c&&t(rr),w(kk),w(Rk),w(d3),w(Pk),w(u3),c&&t(Heo),c&&t(Rm),w(Bk),c&&t(Jeo),c&&t(tr),w(Ik),w(qk),w(_3),w(jk),w(F3),c&&t(Yeo),c&&t(Im),w(Dk),c&&t(Keo),c&&t(ar),w(Gk),w(Vk),w(M3),w(Xk),w(x3),c&&t(Zeo),c&&t(jm),w(zk),c&&t(eoo),c&&t(nr),w(Qk),w(Uk),w(k3),w(Hk),w(P3),c&&t(ooo),c&&t(Om),w(Jk),c&&t(roo),c&&t(sr),w(Yk),w(Zk),w(I3),w(eS),w(N5),c&&t(too),c&&t(zm),w(oS),c&&t(aoo),c&&t(lr),w(rS),w(aS),w(j5),w(nS),w(d0),c&&t(noo),c&&t(Um),w(sS),c&&t(soo),c&&t(ir),w(lS),w(dS),w(c0),w(mS),w(A0),c&&t(loo),c&&t(Ym),w(cS),c&&t(ioo),c&&t(dr),w(fS),w(hS),w(y0),w(uS),w(N0),c&&t(doo),c&&t(ec),w(pS),c&&t(moo),c&&t(mr),w(_S),w(vS),w(j0),w(FS),w(V0),c&&t(coo),c&&t(ac),w(TS),c&&t(foo),c&&t(cr),w(MS),w(CS),w(z0),w(wS),w(fw),c&&t(goo),c&&t(lc),w(AS),c&&t(hoo),c&&t(fr),w(LS),w(xS),w(hw),w($S),w(ww),c&&t(uoo),c&&t(mc),w(kS),c&&t(poo),c&&t(gr),w(SS),w(PS),w(Lw),w(BS),w(oA),c&&t(_oo),c&&t(gc),w(IS),c&&t(boo),c&&t(hr),w(NS),w(jS),w(tA),w(DS),w(TA),c&&t(voo),c&&t(pc),w(GS),c&&t(Foo),c&&t(ur),w(OS),w(XS),w(EA),w(zS),w(AA),c&&t(Too),c&&t(vc),w(WS),c&&t(Moo),c&&t(pr),w(US),w(JS),w(yA),w(YS),w($A),c&&t(Eoo),c&&t(Mc),w(KS),c&&t(Coo),c&&t(_r),w(ZS),w(oR),w(SA),w(rR),w(PA),c&&t(woo),c&&t(wc),w(tR),c&&t(Aoo),c&&t(br),w(aR),w(sR),w(IA),w(lR),w(a6),c&&t(Loo),c&&t(yc),w(iR),c&&t(yoo),c&&t(vr),w(dR),w(cR),w(s6),w(fR),w(y6),c&&t(xoo),c&&t(kc),w(gR),c&&t($oo),c&&t(Fr),w(hR),w(pR),w($6),w(_R),w(S6),c&&t(koo),c&&t(Pc),w(bR),c&&t(Soo),c&&t(Tr),w(vR),w(TR),w(P6),w(MR),w(I6),c&&t(Roo),c&&t(Nc),w(ER),c&&t(Poo),c&&t(Mr),w(CR),w(AR),w(q6),w(LR),w(f7),c&&t(Boo),c&&t(Dc),w(yR),c&&t(Ioo),c&&t(Er),w(xR),w(kR),w(h7),w(SR),w(w7),c&&t(Noo),c&&t(Vc),w(RR),c&&t(qoo),c&&t(Cr),w(PR),w(IR),w(L7),w(NR),w(G7),c&&t(joo),c&&t(Qc),w(qR),c&&t(Doo),c&&t(wr),w(jR),w(GR),w(V7),w(OR),w(eL),c&&t(Goo),c&&t(Hc),w(VR),c&&t(Ooo),c&&t(Ar),w(XR),w(QR),w(rL),w(WR),w(gL),c&&t(Voo),c&&t(Kc),w(UR),c&&t(Xoo),c&&t(Lr),w(HR),w(YR),w(uL),w(KR),w(AL),c&&t(zoo),c&&t(of),w(ZR),c&&t(Qoo),c&&t(yr),w(eP),w(rP),w(yL),w(tP),w(jL),c&&t(Woo),c&&t(af),w(aP),c&&t(Uoo),c&&t(xr),w(nP),w(lP),w(GL),w(iP),w(JL),c&&t(Hoo),c&&t(lf),w(dP),c&&t(Joo),c&&t($r),w(mP),w(fP),w(KL),w(gP),w(ly),c&&t(Yoo),c&&t(cf),w(hP),c&&t(Koo),c&&t(kr),w(uP),w(_P),w(dy),w(bP),w(cy),c&&t(Zoo),c&&t(hf),w(vP),c&&t(ero),c&&t(Sr),w(FP),w(MP),w(gy),w(EP),w(py),c&&t(oro),c&&t(_f),w(wP),c&&t(rro),c&&t(Rr),w(AP),w(yP),w(by),w(xP),w(Fy)}}}const ova={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function rva($){return Q1a(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dva extends O1a{constructor(g){super();V1a(this,g,rva,eva,X1a,{})}}export{dva as default,ova as metadata};
