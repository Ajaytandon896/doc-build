import{S as tna,i as ana,s as nna,e as a,k as l,w as F,t as o,M as sna,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as lna,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as Tgt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function ina($){let g,v,u,f,p,d,h,Ao,Oi,ef,mt,Vi,Xi,M8,of,Ve,Ue,zi,Xn,E8,zn,Wn,C8,Wi,Qn,w8,Qi,rf,ja;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),ef=o("model_type"),mt=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),M8=o(")."),of=l(),Ve=a("p"),Ue=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),E8=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),C8=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),w8=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rf=o("NewModelConfig"),ja=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var uP=s(u);f=r(uP,"NewModelConfig"),uP.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var pP=s(Oi);ef=r(pP,"model_type"),pP.forEach(t),mt=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var _P=s(Vi);Xi=r(_P,'"new-model"'),_P.forEach(t),M8=r(Ae,")."),Ae.forEach(t),of=i(He),Ve=n(He,"P",{});var Lo=s(Ve);Ue=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),E8=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var bP=s(zn);Wn=r(bP,"PreTrainedModel"),bP.forEach(t),C8=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tf=s(Wi);Qn=r(tf,"config_class"),tf.forEach(t),w8=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var vP=s(Qi);rf=r(vP,"NewModelConfig"),vP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,ef),e(g,mt),e(g,Vi),e(Vi,Xi),e(g,M8),b(He,of,Ae),b(He,Ve,Ae),e(Ve,Ue),e(Ve,zi),e(zi,Xn),e(Ve,E8),e(Ve,zn),e(zn,Wn),e(Ve,C8),e(Ve,Wi),e(Wi,Qn),e(Ve,w8),e(Ve,Qi),e(Qi,rf),e(Ve,ja)},d(He){He&&t(g),He&&t(of),He&&t(Ve)}}}function dna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mna($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function fna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gna($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function hna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function una($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _na($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ena($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ana($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $na($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ina($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ona($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Una($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zna($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function esa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function osa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function asa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ssa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function isa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function csa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function msa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function usa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function psa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _sa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Msa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Esa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Csa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Asa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ysa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $sa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ksa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ssa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Psa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Isa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Osa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Usa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ysa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ksa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zsa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ela($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ola($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rla($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tla($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ala($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nla($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sla($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lla($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ila($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dla($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cla($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mla($){let g,v,u,f,p,d,h,Ao,Oi,ef,mt,Vi,Xi,M8,of,Ve,Ue,zi,Xn,E8,zn,Wn,C8,Wi,Qn,w8,Qi,rf,ja,He,Ae,uP,Ui,pP,_P,Lo,Da,bP,tf,vP,aZe,BUe,Hi,af,lle,A8,nZe,ile,sZe,IUe,Un,lZe,dle,iZe,dZe,cle,cZe,mZe,NUe,L8,qUe,FP,fZe,jUe,nf,DUe,Ji,sf,mle,y8,gZe,fle,hZe,GUe,yo,x8,uZe,$8,pZe,TP,_Ze,bZe,vZe,k8,FZe,gle,TZe,MZe,EZe,kr,S8,CZe,hle,wZe,AZe,Yi,LZe,ule,yZe,xZe,ple,$Ze,kZe,SZe,A,lf,_le,RZe,PZe,MP,BZe,IZe,NZe,df,ble,qZe,jZe,EP,DZe,GZe,OZe,cf,vle,VZe,XZe,CP,zZe,WZe,QZe,mf,Fle,UZe,HZe,wP,JZe,YZe,KZe,ff,Tle,ZZe,eeo,AP,oeo,reo,teo,gf,Mle,aeo,neo,LP,seo,leo,ieo,hf,Ele,deo,ceo,yP,meo,feo,geo,uf,Cle,heo,ueo,xP,peo,_eo,beo,pf,wle,veo,Feo,$P,Teo,Meo,Eeo,_f,Ale,Ceo,weo,kP,Aeo,Leo,yeo,bf,Lle,xeo,$eo,SP,keo,Seo,Reo,vf,yle,Peo,Beo,RP,Ieo,Neo,qeo,Ff,xle,jeo,Deo,PP,Geo,Oeo,Veo,Tf,$le,Xeo,zeo,BP,Weo,Qeo,Ueo,Mf,kle,Heo,Jeo,IP,Yeo,Keo,Zeo,Ef,Sle,eoo,ooo,NP,roo,too,aoo,Cf,Rle,noo,soo,qP,loo,ioo,doo,wf,Ple,coo,moo,jP,foo,goo,hoo,Af,Ble,uoo,poo,DP,_oo,boo,voo,Lf,Ile,Foo,Too,GP,Moo,Eoo,Coo,yf,Nle,woo,Aoo,OP,Loo,yoo,xoo,xf,qle,$oo,koo,VP,Soo,Roo,Poo,$f,jle,Boo,Ioo,XP,Noo,qoo,joo,kf,Dle,Doo,Goo,zP,Ooo,Voo,Xoo,Sf,Gle,zoo,Woo,WP,Qoo,Uoo,Hoo,Rf,Ole,Joo,Yoo,QP,Koo,Zoo,ero,Pf,Vle,oro,rro,UP,tro,aro,nro,Bf,Xle,sro,lro,HP,iro,dro,cro,If,zle,mro,fro,JP,gro,hro,uro,Nf,Wle,pro,_ro,YP,bro,vro,Fro,qf,Qle,Tro,Mro,KP,Ero,Cro,wro,jf,Ule,Aro,Lro,ZP,yro,xro,$ro,Df,Hle,kro,Sro,eB,Rro,Pro,Bro,Gf,Jle,Iro,Nro,oB,qro,jro,Dro,Of,Yle,Gro,Oro,rB,Vro,Xro,zro,Vf,Kle,Wro,Qro,tB,Uro,Hro,Jro,Xf,Zle,Yro,Kro,aB,Zro,eto,oto,zf,eie,rto,tto,nB,ato,nto,sto,Wf,oie,lto,ito,sB,dto,cto,mto,Qf,rie,fto,gto,lB,hto,uto,pto,Uf,tie,_to,bto,iB,vto,Fto,Tto,Hf,aie,Mto,Eto,dB,Cto,wto,Ato,Jf,nie,Lto,yto,cB,xto,$to,kto,Yf,sie,Sto,Rto,mB,Pto,Bto,Ito,Kf,lie,Nto,qto,fB,jto,Dto,Gto,Zf,iie,Oto,Vto,gB,Xto,zto,Wto,eg,die,Qto,Uto,hB,Hto,Jto,Yto,og,cie,Kto,Zto,uB,eao,oao,rao,rg,mie,tao,aao,pB,nao,sao,lao,tg,fie,iao,dao,_B,cao,mao,fao,ag,gie,gao,hao,bB,uao,pao,_ao,ng,hie,bao,vao,vB,Fao,Tao,Mao,sg,uie,Eao,Cao,FB,wao,Aao,Lao,lg,pie,yao,xao,TB,$ao,kao,Sao,ig,_ie,Rao,Pao,MB,Bao,Iao,Nao,dg,bie,qao,jao,EB,Dao,Gao,Oao,cg,vie,Vao,Xao,CB,zao,Wao,Qao,mg,Fie,Uao,Hao,wB,Jao,Yao,Kao,fg,Tie,Zao,eno,AB,ono,rno,tno,gg,Mie,ano,nno,LB,sno,lno,ino,hg,Eie,dno,cno,yB,mno,fno,gno,ug,Cie,hno,uno,xB,pno,_no,bno,pg,wie,vno,Fno,$B,Tno,Mno,Eno,_g,Aie,Cno,wno,kB,Ano,Lno,yno,bg,Lie,xno,$no,SB,kno,Sno,Rno,vg,yie,Pno,Bno,RB,Ino,Nno,qno,Fg,xie,jno,Dno,PB,Gno,Ono,Vno,Tg,$ie,Xno,zno,BB,Wno,Qno,Uno,Mg,kie,Hno,Jno,IB,Yno,Kno,Zno,Eg,Sie,eso,oso,NB,rso,tso,aso,Cg,Rie,nso,sso,qB,lso,iso,dso,wg,Pie,cso,mso,jB,fso,gso,hso,Ag,Bie,uso,pso,DB,_so,bso,vso,Lg,Iie,Fso,Tso,GB,Mso,Eso,Cso,yg,Nie,wso,Aso,OB,Lso,yso,xso,xg,qie,$so,kso,VB,Sso,Rso,Pso,$g,jie,Bso,Iso,XB,Nso,qso,jso,kg,Die,Dso,Gso,zB,Oso,Vso,Xso,Sg,Gie,zso,Wso,WB,Qso,Uso,Hso,Rg,Oie,Jso,Yso,QB,Kso,Zso,elo,Pg,Vie,olo,rlo,UB,tlo,alo,nlo,Bg,Xie,slo,llo,HB,ilo,dlo,clo,Ig,zie,mlo,flo,JB,glo,hlo,ulo,Ng,Wie,plo,_lo,YB,blo,vlo,Flo,qg,Qie,Tlo,Mlo,KB,Elo,Clo,wlo,jg,Uie,Alo,Llo,ZB,ylo,xlo,$lo,Dg,Hie,klo,Slo,eI,Rlo,Plo,Blo,Gg,Jie,Ilo,Nlo,oI,qlo,jlo,Dlo,Og,Yie,Glo,Olo,rI,Vlo,Xlo,zlo,Vg,Kie,Wlo,Qlo,tI,Ulo,Hlo,Jlo,Xg,Zie,Ylo,Klo,aI,Zlo,eio,oio,zg,ede,rio,tio,nI,aio,nio,sio,Wg,ode,lio,iio,sI,dio,cio,mio,Qg,rde,fio,gio,lI,hio,uio,pio,Ug,tde,_io,bio,iI,vio,Fio,Tio,Hg,ade,Mio,Eio,dI,Cio,wio,Aio,Jg,nde,Lio,yio,cI,xio,$io,kio,Yg,sde,Sio,Rio,mI,Pio,Bio,Iio,Kg,lde,Nio,qio,fI,jio,Dio,Gio,Zg,ide,Oio,Vio,gI,Xio,zio,Wio,eh,dde,Qio,Uio,hI,Hio,Jio,Yio,oh,cde,Kio,Zio,uI,edo,odo,rdo,rh,mde,tdo,ado,pI,ndo,sdo,ldo,th,fde,ido,ddo,_I,cdo,mdo,fdo,ah,gde,gdo,hdo,bI,udo,pdo,_do,nh,hde,bdo,vdo,vI,Fdo,Tdo,Mdo,sh,ude,Edo,Cdo,FI,wdo,Ado,Ldo,lh,pde,ydo,xdo,TI,$do,kdo,Sdo,ih,_de,Rdo,Pdo,MI,Bdo,Ido,Ndo,dh,bde,qdo,jdo,EI,Ddo,Gdo,Odo,ch,vde,Vdo,Xdo,CI,zdo,Wdo,Qdo,mh,Fde,Udo,Hdo,wI,Jdo,Ydo,Kdo,fh,Tde,Zdo,eco,AI,oco,rco,tco,gh,Mde,aco,nco,LI,sco,lco,ico,hh,Ede,dco,cco,yI,mco,fco,gco,uh,Cde,hco,uco,xI,pco,_co,bco,ph,wde,vco,Fco,$I,Tco,Mco,Eco,_h,Ade,Cco,wco,kI,Aco,Lco,yco,bh,Lde,xco,$co,SI,kco,Sco,Rco,vh,yde,Pco,Bco,RI,Ico,Nco,qco,Fh,xde,jco,Dco,PI,Gco,Oco,Vco,Th,$de,Xco,zco,BI,Wco,Qco,Uco,Mh,kde,Hco,Jco,II,Yco,Kco,Zco,Eh,emo,Ch,R8,omo,Sde,rmo,OUe,Ki,wh,Rde,P8,tmo,Pde,amo,VUe,xo,B8,nmo,I8,smo,NI,lmo,imo,dmo,N8,cmo,Bde,mmo,fmo,gmo,Sr,q8,hmo,Ide,umo,pmo,Ga,_mo,Nde,bmo,vmo,qde,Fmo,Tmo,jde,Mmo,Emo,Cmo,k,Hn,Dde,wmo,Amo,qI,Lmo,ymo,jI,xmo,$mo,kmo,Jn,Gde,Smo,Rmo,DI,Pmo,Bmo,GI,Imo,Nmo,qmo,Yn,Ode,jmo,Dmo,OI,Gmo,Omo,VI,Vmo,Xmo,zmo,Ah,Vde,Wmo,Qmo,XI,Umo,Hmo,Jmo,Kn,Xde,Ymo,Kmo,zI,Zmo,efo,WI,ofo,rfo,tfo,Lh,zde,afo,nfo,QI,sfo,lfo,ifo,yh,Wde,dfo,cfo,UI,mfo,ffo,gfo,xh,Qde,hfo,ufo,HI,pfo,_fo,bfo,Zn,Ude,vfo,Ffo,JI,Tfo,Mfo,YI,Efo,Cfo,wfo,es,Hde,Afo,Lfo,KI,yfo,xfo,ZI,$fo,kfo,Sfo,os,Jde,Rfo,Pfo,eN,Bfo,Ifo,oN,Nfo,qfo,jfo,$h,Yde,Dfo,Gfo,rN,Ofo,Vfo,Xfo,kh,Kde,zfo,Wfo,tN,Qfo,Ufo,Hfo,Sh,Zde,Jfo,Yfo,aN,Kfo,Zfo,ego,rs,ece,ogo,rgo,nN,tgo,ago,sN,ngo,sgo,lgo,Rh,oce,igo,dgo,lN,cgo,mgo,fgo,ts,rce,ggo,hgo,iN,ugo,pgo,dN,_go,bgo,vgo,as,tce,Fgo,Tgo,cN,Mgo,Ego,mN,Cgo,wgo,Ago,ns,ace,Lgo,ygo,fN,xgo,$go,gN,kgo,Sgo,Rgo,ss,nce,Pgo,Bgo,hN,Igo,Ngo,uN,qgo,jgo,Dgo,Ph,sce,Ggo,Ogo,pN,Vgo,Xgo,zgo,ls,lce,Wgo,Qgo,_N,Ugo,Hgo,bN,Jgo,Ygo,Kgo,is,ice,Zgo,eho,vN,oho,rho,FN,tho,aho,nho,ds,dce,sho,lho,TN,iho,dho,MN,cho,mho,fho,cs,cce,gho,hho,EN,uho,pho,CN,_ho,bho,vho,ms,mce,Fho,Tho,wN,Mho,Eho,AN,Cho,who,Aho,fs,fce,Lho,yho,LN,xho,$ho,yN,kho,Sho,Rho,Bh,gce,Pho,Bho,xN,Iho,Nho,qho,gs,hce,jho,Dho,$N,Gho,Oho,kN,Vho,Xho,zho,Ih,uce,Who,Qho,SN,Uho,Hho,Jho,hs,pce,Yho,Kho,RN,Zho,euo,PN,ouo,ruo,tuo,us,_ce,auo,nuo,BN,suo,luo,IN,iuo,duo,cuo,ps,bce,muo,fuo,NN,guo,huo,qN,uuo,puo,_uo,Nh,vce,buo,vuo,jN,Fuo,Tuo,Muo,_s,Fce,Euo,Cuo,DN,wuo,Auo,GN,Luo,yuo,xuo,bs,Tce,$uo,kuo,ON,Suo,Ruo,VN,Puo,Buo,Iuo,vs,Mce,Nuo,quo,XN,juo,Duo,zN,Guo,Ouo,Vuo,qh,Ece,Xuo,zuo,WN,Wuo,Quo,Uuo,Fs,Cce,Huo,Juo,QN,Yuo,Kuo,UN,Zuo,epo,opo,Ts,wce,rpo,tpo,HN,apo,npo,JN,spo,lpo,ipo,Ms,Ace,dpo,cpo,YN,mpo,fpo,KN,gpo,hpo,upo,Es,Lce,ppo,_po,ZN,bpo,vpo,eq,Fpo,Tpo,Mpo,Cs,yce,Epo,Cpo,oq,wpo,Apo,rq,Lpo,ypo,xpo,ws,xce,$po,kpo,tq,Spo,Rpo,aq,Ppo,Bpo,Ipo,As,$ce,Npo,qpo,nq,jpo,Dpo,sq,Gpo,Opo,Vpo,Ls,kce,Xpo,zpo,lq,Wpo,Qpo,iq,Upo,Hpo,Jpo,jh,Sce,Ypo,Kpo,dq,Zpo,e_o,o_o,ys,Rce,r_o,t_o,cq,a_o,n_o,mq,s_o,l_o,i_o,Dh,Pce,d_o,c_o,fq,m_o,f_o,g_o,Gh,Bce,h_o,u_o,gq,p_o,__o,b_o,xs,Ice,v_o,F_o,hq,T_o,M_o,uq,E_o,C_o,w_o,$s,Nce,A_o,L_o,pq,y_o,x_o,_q,$_o,k_o,S_o,ks,qce,R_o,P_o,bq,B_o,I_o,vq,N_o,q_o,j_o,Oh,jce,D_o,G_o,Fq,O_o,V_o,X_o,Ss,Dce,z_o,W_o,Tq,Q_o,U_o,Mq,H_o,J_o,Y_o,Rs,Gce,K_o,Z_o,Eq,e2o,o2o,Cq,r2o,t2o,a2o,Ps,Oce,n2o,s2o,wq,l2o,i2o,Aq,d2o,c2o,m2o,Bs,Vce,f2o,g2o,Lq,h2o,u2o,yq,p2o,_2o,b2o,Is,Xce,v2o,F2o,xq,T2o,M2o,$q,E2o,C2o,w2o,Ns,zce,A2o,L2o,kq,y2o,x2o,Sq,$2o,k2o,S2o,qs,Wce,R2o,P2o,Rq,B2o,I2o,Pq,N2o,q2o,j2o,js,Qce,D2o,G2o,Bq,O2o,V2o,Iq,X2o,z2o,W2o,Vh,Uce,Q2o,U2o,Nq,H2o,J2o,Y2o,Ds,Hce,K2o,Z2o,qq,ebo,obo,jq,rbo,tbo,abo,Gs,Jce,nbo,sbo,Dq,lbo,ibo,Gq,dbo,cbo,mbo,Xh,Yce,fbo,gbo,Oq,hbo,ubo,pbo,zh,Kce,_bo,bbo,Vq,vbo,Fbo,Tbo,Wh,Zce,Mbo,Ebo,Xq,Cbo,wbo,Abo,Qh,eme,Lbo,ybo,zq,xbo,$bo,kbo,Os,ome,Sbo,Rbo,Wq,Pbo,Bbo,Qq,Ibo,Nbo,qbo,Uh,rme,jbo,Dbo,Uq,Gbo,Obo,Vbo,Vs,tme,Xbo,zbo,Hq,Wbo,Qbo,Jq,Ubo,Hbo,Jbo,Xs,ame,Ybo,Kbo,Yq,Zbo,evo,Kq,ovo,rvo,tvo,zs,nme,avo,nvo,Zq,svo,lvo,ej,ivo,dvo,cvo,Ws,sme,mvo,fvo,oj,gvo,hvo,rj,uvo,pvo,_vo,Qs,lme,bvo,vvo,tj,Fvo,Tvo,aj,Mvo,Evo,Cvo,Us,ime,wvo,Avo,nj,Lvo,yvo,sj,xvo,$vo,kvo,Hh,dme,Svo,Rvo,lj,Pvo,Bvo,Ivo,Jh,cme,Nvo,qvo,ij,jvo,Dvo,Gvo,Hs,mme,Ovo,Vvo,dj,Xvo,zvo,cj,Wvo,Qvo,Uvo,Js,fme,Hvo,Jvo,mj,Yvo,Kvo,fj,Zvo,e1o,o1o,Ys,gme,r1o,t1o,gj,a1o,n1o,hj,s1o,l1o,i1o,Yh,hme,d1o,c1o,uj,m1o,f1o,g1o,Kh,ume,h1o,u1o,pj,p1o,_1o,b1o,Zh,pme,v1o,F1o,_j,T1o,M1o,E1o,Ks,_me,C1o,w1o,bj,A1o,L1o,vj,y1o,x1o,$1o,Zs,bme,k1o,S1o,Fj,R1o,P1o,Tj,B1o,I1o,N1o,eu,vme,q1o,j1o,Mj,D1o,G1o,O1o,ou,Fme,V1o,X1o,Ej,z1o,W1o,Q1o,ru,Tme,U1o,H1o,Cj,J1o,Y1o,K1o,el,Mme,Z1o,eFo,wj,oFo,rFo,Aj,tFo,aFo,nFo,tu,Eme,sFo,lFo,Lj,iFo,dFo,cFo,au,Cme,mFo,fFo,yj,gFo,hFo,uFo,ol,wme,pFo,_Fo,xj,bFo,vFo,$j,FFo,TFo,MFo,rl,Ame,EFo,CFo,kj,wFo,AFo,Sj,LFo,yFo,xFo,tl,Lme,$Fo,kFo,Rj,SFo,RFo,Pj,PFo,BFo,IFo,al,yme,NFo,qFo,Bj,jFo,DFo,Ij,GFo,OFo,VFo,nu,XFo,su,j8,zFo,xme,WFo,XUe,Zi,lu,$me,D8,QFo,kme,UFo,zUe,$o,G8,HFo,O8,JFo,Nj,YFo,KFo,ZFo,V8,eTo,Sme,oTo,rTo,tTo,Je,X8,aTo,Rme,nTo,sTo,Oa,lTo,Pme,iTo,dTo,Bme,cTo,mTo,Ime,fTo,gTo,hTo,Q,iu,Nme,uTo,pTo,qj,_To,bTo,vTo,du,qme,FTo,TTo,jj,MTo,ETo,CTo,cu,jme,wTo,ATo,Dj,LTo,yTo,xTo,mu,Dme,$To,kTo,Gj,STo,RTo,PTo,fu,Gme,BTo,ITo,Oj,NTo,qTo,jTo,gu,Ome,DTo,GTo,Vj,OTo,VTo,XTo,hu,Vme,zTo,WTo,Xj,QTo,UTo,HTo,uu,Xme,JTo,YTo,zj,KTo,ZTo,eMo,pu,zme,oMo,rMo,Wj,tMo,aMo,nMo,_u,Wme,sMo,lMo,Qj,iMo,dMo,cMo,bu,Qme,mMo,fMo,Uj,gMo,hMo,uMo,vu,Ume,pMo,_Mo,Hj,bMo,vMo,FMo,Fu,Hme,TMo,MMo,Jj,EMo,CMo,wMo,Tu,Jme,AMo,LMo,Yj,yMo,xMo,$Mo,Mu,Yme,kMo,SMo,Kj,RMo,PMo,BMo,Eu,Kme,IMo,NMo,Zj,qMo,jMo,DMo,Cu,Zme,GMo,OMo,eD,VMo,XMo,zMo,wu,efe,WMo,QMo,oD,UMo,HMo,JMo,Au,ofe,YMo,KMo,rD,ZMo,eEo,oEo,Lu,rfe,rEo,tEo,tD,aEo,nEo,sEo,yu,tfe,lEo,iEo,aD,dEo,cEo,mEo,xu,afe,fEo,gEo,nD,hEo,uEo,pEo,$u,nfe,_Eo,bEo,sD,vEo,FEo,TEo,ku,sfe,MEo,EEo,lD,CEo,wEo,AEo,Su,lfe,LEo,yEo,iD,xEo,$Eo,kEo,Ru,ife,SEo,REo,dD,PEo,BEo,IEo,Pu,dfe,NEo,qEo,cD,jEo,DEo,GEo,Bu,cfe,OEo,VEo,mD,XEo,zEo,WEo,Iu,mfe,QEo,UEo,fD,HEo,JEo,YEo,Nu,ffe,KEo,ZEo,gD,e4o,o4o,r4o,qu,gfe,t4o,a4o,hD,n4o,s4o,l4o,ju,hfe,i4o,d4o,uD,c4o,m4o,f4o,Du,ufe,g4o,h4o,pD,u4o,p4o,_4o,Gu,pfe,b4o,v4o,_D,F4o,T4o,M4o,Ou,_fe,E4o,C4o,bD,w4o,A4o,L4o,Vu,bfe,y4o,x4o,vD,$4o,k4o,S4o,Xu,vfe,R4o,P4o,FD,B4o,I4o,N4o,zu,Ffe,q4o,j4o,TD,D4o,G4o,O4o,Wu,V4o,Qu,X4o,Uu,z8,z4o,Tfe,W4o,WUe,ed,Hu,Mfe,W8,Q4o,Efe,U4o,QUe,ko,Q8,H4o,U8,J4o,MD,Y4o,K4o,Z4o,H8,eCo,Cfe,oCo,rCo,tCo,Ye,J8,aCo,wfe,nCo,sCo,od,lCo,Afe,iCo,dCo,Lfe,cCo,mCo,fCo,ce,Ju,yfe,gCo,hCo,ED,uCo,pCo,_Co,Yu,xfe,bCo,vCo,CD,FCo,TCo,MCo,Ku,$fe,ECo,CCo,wD,wCo,ACo,LCo,Zu,kfe,yCo,xCo,AD,$Co,kCo,SCo,ep,Sfe,RCo,PCo,LD,BCo,ICo,NCo,op,Rfe,qCo,jCo,yD,DCo,GCo,OCo,rp,Pfe,VCo,XCo,xD,zCo,WCo,QCo,tp,Bfe,UCo,HCo,$D,JCo,YCo,KCo,ap,Ife,ZCo,e3o,kD,o3o,r3o,t3o,np,Nfe,a3o,n3o,SD,s3o,l3o,i3o,sp,qfe,d3o,c3o,RD,m3o,f3o,g3o,lp,jfe,h3o,u3o,PD,p3o,_3o,b3o,ip,Dfe,v3o,F3o,BD,T3o,M3o,E3o,dp,Gfe,C3o,w3o,ID,A3o,L3o,y3o,cp,Ofe,x3o,$3o,ND,k3o,S3o,R3o,mp,Vfe,P3o,B3o,qD,I3o,N3o,q3o,fp,Xfe,j3o,D3o,jD,G3o,O3o,V3o,gp,zfe,X3o,z3o,DD,W3o,Q3o,U3o,hp,Wfe,H3o,J3o,GD,Y3o,K3o,Z3o,up,Qfe,e5o,o5o,OD,r5o,t5o,a5o,pp,n5o,_p,s5o,bp,Y8,l5o,Ufe,i5o,UUe,rd,vp,Hfe,K8,d5o,Jfe,c5o,HUe,So,Z8,m5o,td,f5o,VD,g5o,h5o,XD,u5o,p5o,_5o,e9,b5o,Yfe,v5o,F5o,T5o,ft,o9,M5o,Kfe,E5o,C5o,ad,w5o,Zfe,A5o,L5o,zD,y5o,x5o,$5o,Fp,k5o,Ke,r9,S5o,ege,R5o,P5o,Va,B5o,oge,I5o,N5o,rge,q5o,j5o,tge,D5o,G5o,O5o,y,Tp,age,V5o,X5o,WD,z5o,W5o,Q5o,Mp,nge,U5o,H5o,QD,J5o,Y5o,K5o,Ep,sge,Z5o,e0o,UD,o0o,r0o,t0o,Cp,lge,a0o,n0o,HD,s0o,l0o,i0o,wp,ige,d0o,c0o,JD,m0o,f0o,g0o,Ap,dge,h0o,u0o,YD,p0o,_0o,b0o,Lp,cge,v0o,F0o,KD,T0o,M0o,E0o,yp,mge,C0o,w0o,ZD,A0o,L0o,y0o,xp,fge,x0o,$0o,eG,k0o,S0o,R0o,$p,gge,P0o,B0o,oG,I0o,N0o,q0o,kp,hge,j0o,D0o,rG,G0o,O0o,V0o,Sp,uge,X0o,z0o,tG,W0o,Q0o,U0o,Rp,pge,H0o,J0o,aG,Y0o,K0o,Z0o,Pp,_ge,ewo,owo,nG,rwo,two,awo,Bp,bge,nwo,swo,sG,lwo,iwo,dwo,Ip,vge,cwo,mwo,lG,fwo,gwo,hwo,Np,Fge,uwo,pwo,iG,_wo,bwo,vwo,qp,Tge,Fwo,Two,dG,Mwo,Ewo,Cwo,jp,Mge,wwo,Awo,cG,Lwo,ywo,xwo,Dp,Ege,$wo,kwo,mG,Swo,Rwo,Pwo,Gp,Cge,Bwo,Iwo,fG,Nwo,qwo,jwo,Op,wge,Dwo,Gwo,gG,Owo,Vwo,Xwo,Vp,Age,zwo,Wwo,hG,Qwo,Uwo,Hwo,Xp,Lge,Jwo,Ywo,uG,Kwo,Zwo,e6o,zp,yge,o6o,r6o,pG,t6o,a6o,n6o,Wp,xge,s6o,l6o,_G,i6o,d6o,c6o,Qp,$ge,m6o,f6o,bG,g6o,h6o,u6o,Up,kge,p6o,_6o,vG,b6o,v6o,F6o,Hp,Sge,T6o,M6o,FG,E6o,C6o,w6o,Jp,Rge,A6o,L6o,TG,y6o,x6o,$6o,Yp,Pge,k6o,S6o,MG,R6o,P6o,B6o,Kp,Bge,I6o,N6o,EG,q6o,j6o,D6o,Zp,Ige,G6o,O6o,CG,V6o,X6o,z6o,e_,Nge,W6o,Q6o,wG,U6o,H6o,J6o,o_,qge,Y6o,K6o,AG,Z6o,eAo,oAo,nl,jge,rAo,tAo,LG,aAo,nAo,yG,sAo,lAo,iAo,r_,Dge,dAo,cAo,xG,mAo,fAo,gAo,t_,Gge,hAo,uAo,$G,pAo,_Ao,bAo,a_,Oge,vAo,FAo,kG,TAo,MAo,EAo,n_,Vge,CAo,wAo,SG,AAo,LAo,yAo,s_,Xge,xAo,$Ao,RG,kAo,SAo,RAo,l_,zge,PAo,BAo,PG,IAo,NAo,qAo,i_,Wge,jAo,DAo,BG,GAo,OAo,VAo,d_,Qge,XAo,zAo,IG,WAo,QAo,UAo,c_,Uge,HAo,JAo,NG,YAo,KAo,ZAo,m_,Hge,e7o,o7o,qG,r7o,t7o,a7o,f_,Jge,n7o,s7o,jG,l7o,i7o,d7o,g_,Yge,c7o,m7o,DG,f7o,g7o,h7o,h_,Kge,u7o,p7o,GG,_7o,b7o,v7o,u_,Zge,F7o,T7o,OG,M7o,E7o,C7o,p_,ehe,w7o,A7o,VG,L7o,y7o,x7o,__,ohe,$7o,k7o,XG,S7o,R7o,P7o,b_,rhe,B7o,I7o,zG,N7o,q7o,j7o,v_,the,D7o,G7o,WG,O7o,V7o,X7o,F_,ahe,z7o,W7o,QG,Q7o,U7o,H7o,T_,nhe,J7o,Y7o,UG,K7o,Z7o,eLo,M_,she,oLo,rLo,HG,tLo,aLo,nLo,E_,lhe,sLo,lLo,JG,iLo,dLo,cLo,C_,ihe,mLo,fLo,YG,gLo,hLo,uLo,w_,dhe,pLo,_Lo,KG,bLo,vLo,FLo,A_,che,TLo,MLo,ZG,ELo,CLo,wLo,L_,mhe,ALo,LLo,eO,yLo,xLo,$Lo,y_,fhe,kLo,SLo,oO,RLo,PLo,BLo,x_,ghe,ILo,NLo,rO,qLo,jLo,DLo,$_,hhe,GLo,OLo,tO,VLo,XLo,zLo,k_,uhe,WLo,QLo,aO,ULo,HLo,JLo,S_,phe,YLo,KLo,nO,ZLo,eyo,oyo,R_,_he,ryo,tyo,sO,ayo,nyo,syo,P_,bhe,lyo,iyo,lO,dyo,cyo,myo,B_,vhe,fyo,gyo,iO,hyo,uyo,pyo,I_,Fhe,_yo,byo,dO,vyo,Fyo,Tyo,N_,The,Myo,Eyo,cO,Cyo,wyo,Ayo,q_,Mhe,Lyo,yyo,mO,xyo,$yo,kyo,j_,Ehe,Syo,Ryo,fO,Pyo,Byo,Iyo,D_,Che,Nyo,qyo,gO,jyo,Dyo,Gyo,G_,whe,Oyo,Vyo,hO,Xyo,zyo,Wyo,O_,Ahe,Qyo,Uyo,uO,Hyo,Jyo,Yyo,V_,Lhe,Kyo,Zyo,pO,e8o,o8o,r8o,X_,yhe,t8o,a8o,_O,n8o,s8o,l8o,z_,xhe,i8o,d8o,bO,c8o,m8o,f8o,W_,$he,g8o,h8o,vO,u8o,p8o,_8o,Q_,khe,b8o,v8o,FO,F8o,T8o,M8o,U_,She,E8o,C8o,TO,w8o,A8o,L8o,H_,Rhe,y8o,x8o,MO,$8o,k8o,S8o,J_,Phe,R8o,P8o,EO,B8o,I8o,N8o,Y_,Bhe,q8o,j8o,CO,D8o,G8o,O8o,K_,Ihe,V8o,X8o,wO,z8o,W8o,Q8o,Z_,Nhe,U8o,H8o,AO,J8o,Y8o,K8o,e2,qhe,Z8o,e9o,LO,o9o,r9o,t9o,o2,jhe,a9o,n9o,yO,s9o,l9o,i9o,r2,Dhe,d9o,c9o,xO,m9o,f9o,g9o,t2,Ghe,h9o,u9o,$O,p9o,_9o,b9o,a2,Ohe,v9o,F9o,kO,T9o,M9o,E9o,n2,Vhe,C9o,w9o,SO,A9o,L9o,y9o,s2,Xhe,x9o,$9o,RO,k9o,S9o,R9o,l2,zhe,P9o,B9o,PO,I9o,N9o,q9o,i2,Whe,j9o,D9o,BO,G9o,O9o,V9o,d2,Qhe,X9o,z9o,IO,W9o,Q9o,U9o,c2,Uhe,H9o,J9o,NO,Y9o,K9o,Z9o,m2,Hhe,exo,oxo,qO,rxo,txo,axo,f2,Jhe,nxo,sxo,jO,lxo,ixo,dxo,g2,Yhe,cxo,mxo,DO,fxo,gxo,hxo,h2,Khe,uxo,pxo,GO,_xo,bxo,vxo,u2,Zhe,Fxo,Txo,OO,Mxo,Exo,Cxo,p2,eue,wxo,Axo,VO,Lxo,yxo,xxo,_2,oue,$xo,kxo,XO,Sxo,Rxo,Pxo,b2,rue,Bxo,Ixo,zO,Nxo,qxo,jxo,v2,tue,Dxo,Gxo,WO,Oxo,Vxo,Xxo,F2,aue,zxo,Wxo,QO,Qxo,Uxo,Hxo,T2,nue,Jxo,Yxo,UO,Kxo,Zxo,e$o,M2,sue,o$o,r$o,HO,t$o,a$o,n$o,E2,lue,s$o,l$o,JO,i$o,d$o,c$o,C2,iue,m$o,f$o,YO,g$o,h$o,u$o,w2,due,p$o,_$o,KO,b$o,v$o,F$o,A2,cue,T$o,M$o,ZO,E$o,C$o,w$o,L2,mue,A$o,L$o,eV,y$o,x$o,$$o,y2,fue,k$o,S$o,oV,R$o,P$o,B$o,x2,I$o,gue,N$o,q$o,hue,j$o,D$o,$2,JUe,nd,k2,uue,t9,G$o,pue,O$o,YUe,Ro,a9,V$o,sd,X$o,rV,z$o,W$o,tV,Q$o,U$o,H$o,n9,J$o,_ue,Y$o,K$o,Z$o,gt,s9,eko,bue,oko,rko,ld,tko,vue,ako,nko,aV,sko,lko,iko,S2,dko,Ze,l9,cko,Fue,mko,fko,Xa,gko,Tue,hko,uko,Mue,pko,_ko,Eue,bko,vko,Fko,G,R2,Cue,Tko,Mko,nV,Eko,Cko,wko,P2,wue,Ako,Lko,sV,yko,xko,$ko,B2,Aue,kko,Sko,lV,Rko,Pko,Bko,I2,Lue,Iko,Nko,iV,qko,jko,Dko,N2,yue,Gko,Oko,dV,Vko,Xko,zko,q2,xue,Wko,Qko,cV,Uko,Hko,Jko,j2,$ue,Yko,Kko,mV,Zko,eSo,oSo,D2,kue,rSo,tSo,fV,aSo,nSo,sSo,G2,Sue,lSo,iSo,gV,dSo,cSo,mSo,O2,Rue,fSo,gSo,hV,hSo,uSo,pSo,V2,Pue,_So,bSo,uV,vSo,FSo,TSo,X2,Bue,MSo,ESo,pV,CSo,wSo,ASo,z2,Iue,LSo,ySo,_V,xSo,$So,kSo,W2,Nue,SSo,RSo,bV,PSo,BSo,ISo,Q2,que,NSo,qSo,vV,jSo,DSo,GSo,U2,jue,OSo,VSo,FV,XSo,zSo,WSo,H2,Due,QSo,USo,TV,HSo,JSo,YSo,J2,Gue,KSo,ZSo,MV,eRo,oRo,rRo,Y2,Oue,tRo,aRo,EV,nRo,sRo,lRo,K2,Vue,iRo,dRo,CV,cRo,mRo,fRo,Z2,Xue,gRo,hRo,wV,uRo,pRo,_Ro,eb,zue,bRo,vRo,AV,FRo,TRo,MRo,ob,Wue,ERo,CRo,LV,wRo,ARo,LRo,rb,Que,yRo,xRo,yV,$Ro,kRo,SRo,tb,Uue,RRo,PRo,xV,BRo,IRo,NRo,ab,Hue,qRo,jRo,$V,DRo,GRo,ORo,nb,Jue,VRo,XRo,kV,zRo,WRo,QRo,sb,Yue,URo,HRo,SV,JRo,YRo,KRo,lb,Kue,ZRo,ePo,RV,oPo,rPo,tPo,ib,Zue,aPo,nPo,PV,sPo,lPo,iPo,db,epe,dPo,cPo,BV,mPo,fPo,gPo,cb,ope,hPo,uPo,IV,pPo,_Po,bPo,mb,rpe,vPo,FPo,NV,TPo,MPo,EPo,fb,tpe,CPo,wPo,qV,APo,LPo,yPo,gb,ape,xPo,$Po,jV,kPo,SPo,RPo,hb,npe,PPo,BPo,DV,IPo,NPo,qPo,ub,spe,jPo,DPo,GV,GPo,OPo,VPo,pb,lpe,XPo,zPo,OV,WPo,QPo,UPo,_b,ipe,HPo,JPo,VV,YPo,KPo,ZPo,bb,dpe,eBo,oBo,XV,rBo,tBo,aBo,vb,cpe,nBo,sBo,zV,lBo,iBo,dBo,Fb,mpe,cBo,mBo,WV,fBo,gBo,hBo,Tb,fpe,uBo,pBo,QV,_Bo,bBo,vBo,Mb,gpe,FBo,TBo,UV,MBo,EBo,CBo,Eb,hpe,wBo,ABo,HV,LBo,yBo,xBo,Cb,upe,$Bo,kBo,JV,SBo,RBo,PBo,wb,ppe,BBo,IBo,YV,NBo,qBo,jBo,Ab,DBo,_pe,GBo,OBo,bpe,VBo,XBo,Lb,KUe,id,yb,vpe,i9,zBo,Fpe,WBo,ZUe,Po,d9,QBo,dd,UBo,KV,HBo,JBo,ZV,YBo,KBo,ZBo,c9,eIo,Tpe,oIo,rIo,tIo,ht,m9,aIo,Mpe,nIo,sIo,cd,lIo,Epe,iIo,dIo,eX,cIo,mIo,fIo,xb,gIo,eo,f9,hIo,Cpe,uIo,pIo,za,_Io,wpe,bIo,vIo,Ape,FIo,TIo,Lpe,MIo,EIo,CIo,z,$b,ype,wIo,AIo,oX,LIo,yIo,xIo,kb,xpe,$Io,kIo,rX,SIo,RIo,PIo,Sb,$pe,BIo,IIo,tX,NIo,qIo,jIo,Rb,kpe,DIo,GIo,aX,OIo,VIo,XIo,Pb,Spe,zIo,WIo,nX,QIo,UIo,HIo,Bb,Rpe,JIo,YIo,sX,KIo,ZIo,eNo,Ib,Ppe,oNo,rNo,lX,tNo,aNo,nNo,Nb,Bpe,sNo,lNo,iX,iNo,dNo,cNo,qb,Ipe,mNo,fNo,dX,gNo,hNo,uNo,jb,Npe,pNo,_No,cX,bNo,vNo,FNo,Db,qpe,TNo,MNo,mX,ENo,CNo,wNo,Gb,jpe,ANo,LNo,fX,yNo,xNo,$No,Ob,Dpe,kNo,SNo,gX,RNo,PNo,BNo,Vb,Gpe,INo,NNo,hX,qNo,jNo,DNo,Xb,Ope,GNo,ONo,uX,VNo,XNo,zNo,zb,Vpe,WNo,QNo,pX,UNo,HNo,JNo,Wb,Xpe,YNo,KNo,_X,ZNo,eqo,oqo,Qb,zpe,rqo,tqo,bX,aqo,nqo,sqo,Ub,Wpe,lqo,iqo,vX,dqo,cqo,mqo,Hb,Qpe,fqo,gqo,FX,hqo,uqo,pqo,Jb,Upe,_qo,bqo,TX,vqo,Fqo,Tqo,Yb,Hpe,Mqo,Eqo,MX,Cqo,wqo,Aqo,Kb,Jpe,Lqo,yqo,EX,xqo,$qo,kqo,Zb,Ype,Sqo,Rqo,CX,Pqo,Bqo,Iqo,ev,Kpe,Nqo,qqo,wX,jqo,Dqo,Gqo,ov,Zpe,Oqo,Vqo,AX,Xqo,zqo,Wqo,rv,e_e,Qqo,Uqo,LX,Hqo,Jqo,Yqo,tv,o_e,Kqo,Zqo,yX,ejo,ojo,rjo,av,r_e,tjo,ajo,xX,njo,sjo,ljo,nv,t_e,ijo,djo,$X,cjo,mjo,fjo,sv,a_e,gjo,hjo,kX,ujo,pjo,_jo,lv,n_e,bjo,vjo,SX,Fjo,Tjo,Mjo,iv,s_e,Ejo,Cjo,RX,wjo,Ajo,Ljo,dv,l_e,yjo,xjo,PX,$jo,kjo,Sjo,cv,i_e,Rjo,Pjo,BX,Bjo,Ijo,Njo,mv,d_e,qjo,jjo,IX,Djo,Gjo,Ojo,fv,c_e,Vjo,Xjo,NX,zjo,Wjo,Qjo,gv,m_e,Ujo,Hjo,qX,Jjo,Yjo,Kjo,hv,f_e,Zjo,eDo,jX,oDo,rDo,tDo,uv,g_e,aDo,nDo,DX,sDo,lDo,iDo,pv,dDo,h_e,cDo,mDo,u_e,fDo,gDo,_v,eHe,md,bv,p_e,g9,hDo,__e,uDo,oHe,Bo,h9,pDo,fd,_Do,GX,bDo,vDo,OX,FDo,TDo,MDo,u9,EDo,b_e,CDo,wDo,ADo,ut,p9,LDo,v_e,yDo,xDo,gd,$Do,F_e,kDo,SDo,VX,RDo,PDo,BDo,vv,IDo,oo,_9,NDo,T_e,qDo,jDo,Wa,DDo,M_e,GDo,ODo,E_e,VDo,XDo,C_e,zDo,WDo,QDo,U,Fv,w_e,UDo,HDo,XX,JDo,YDo,KDo,Tv,A_e,ZDo,eGo,zX,oGo,rGo,tGo,Mv,L_e,aGo,nGo,WX,sGo,lGo,iGo,Ev,y_e,dGo,cGo,QX,mGo,fGo,gGo,Cv,x_e,hGo,uGo,UX,pGo,_Go,bGo,wv,$_e,vGo,FGo,HX,TGo,MGo,EGo,Av,k_e,CGo,wGo,JX,AGo,LGo,yGo,Lv,S_e,xGo,$Go,YX,kGo,SGo,RGo,yv,R_e,PGo,BGo,KX,IGo,NGo,qGo,xv,P_e,jGo,DGo,ZX,GGo,OGo,VGo,$v,B_e,XGo,zGo,ez,WGo,QGo,UGo,kv,I_e,HGo,JGo,oz,YGo,KGo,ZGo,Sv,N_e,eOo,oOo,rz,rOo,tOo,aOo,Rv,q_e,nOo,sOo,tz,lOo,iOo,dOo,Pv,j_e,cOo,mOo,az,fOo,gOo,hOo,Bv,D_e,uOo,pOo,nz,_Oo,bOo,vOo,Iv,G_e,FOo,TOo,sz,MOo,EOo,COo,Nv,O_e,wOo,AOo,lz,LOo,yOo,xOo,qv,V_e,$Oo,kOo,iz,SOo,ROo,POo,jv,X_e,BOo,IOo,dz,NOo,qOo,jOo,Dv,z_e,DOo,GOo,cz,OOo,VOo,XOo,Gv,W_e,zOo,WOo,mz,QOo,UOo,HOo,Ov,Q_e,JOo,YOo,fz,KOo,ZOo,eVo,Vv,U_e,oVo,rVo,gz,tVo,aVo,nVo,Xv,H_e,sVo,lVo,hz,iVo,dVo,cVo,zv,J_e,mVo,fVo,uz,gVo,hVo,uVo,Wv,Y_e,pVo,_Vo,pz,bVo,vVo,FVo,Qv,K_e,TVo,MVo,_z,EVo,CVo,wVo,Uv,Z_e,AVo,LVo,bz,yVo,xVo,$Vo,Hv,e2e,kVo,SVo,vz,RVo,PVo,BVo,Jv,o2e,IVo,NVo,Fz,qVo,jVo,DVo,Yv,r2e,GVo,OVo,Tz,VVo,XVo,zVo,Kv,t2e,WVo,QVo,Mz,UVo,HVo,JVo,Zv,a2e,YVo,KVo,n2e,ZVo,eXo,oXo,e1,s2e,rXo,tXo,Ez,aXo,nXo,sXo,o1,l2e,lXo,iXo,Cz,dXo,cXo,mXo,r1,i2e,fXo,gXo,wz,hXo,uXo,pXo,t1,d2e,_Xo,bXo,Az,vXo,FXo,TXo,a1,MXo,c2e,EXo,CXo,m2e,wXo,AXo,n1,rHe,hd,s1,f2e,b9,LXo,g2e,yXo,tHe,Io,v9,xXo,ud,$Xo,Lz,kXo,SXo,yz,RXo,PXo,BXo,F9,IXo,h2e,NXo,qXo,jXo,pt,T9,DXo,u2e,GXo,OXo,pd,VXo,p2e,XXo,zXo,xz,WXo,QXo,UXo,l1,HXo,ro,M9,JXo,_2e,YXo,KXo,Qa,ZXo,b2e,ezo,ozo,v2e,rzo,tzo,F2e,azo,nzo,szo,me,i1,T2e,lzo,izo,$z,dzo,czo,mzo,d1,M2e,fzo,gzo,kz,hzo,uzo,pzo,c1,E2e,_zo,bzo,Sz,vzo,Fzo,Tzo,m1,C2e,Mzo,Ezo,Rz,Czo,wzo,Azo,f1,w2e,Lzo,yzo,Pz,xzo,$zo,kzo,g1,A2e,Szo,Rzo,Bz,Pzo,Bzo,Izo,h1,L2e,Nzo,qzo,Iz,jzo,Dzo,Gzo,u1,y2e,Ozo,Vzo,Nz,Xzo,zzo,Wzo,p1,x2e,Qzo,Uzo,qz,Hzo,Jzo,Yzo,_1,$2e,Kzo,Zzo,jz,eWo,oWo,rWo,b1,k2e,tWo,aWo,Dz,nWo,sWo,lWo,v1,S2e,iWo,dWo,Gz,cWo,mWo,fWo,F1,R2e,gWo,hWo,Oz,uWo,pWo,_Wo,T1,P2e,bWo,vWo,Vz,FWo,TWo,MWo,M1,B2e,EWo,CWo,Xz,wWo,AWo,LWo,E1,I2e,yWo,xWo,zz,$Wo,kWo,SWo,C1,N2e,RWo,PWo,Wz,BWo,IWo,NWo,w1,q2e,qWo,jWo,Qz,DWo,GWo,OWo,A1,j2e,VWo,XWo,Uz,zWo,WWo,QWo,L1,D2e,UWo,HWo,Hz,JWo,YWo,KWo,y1,ZWo,G2e,eQo,oQo,O2e,rQo,tQo,x1,aHe,_d,$1,V2e,E9,aQo,X2e,nQo,nHe,No,C9,sQo,bd,lQo,Jz,iQo,dQo,Yz,cQo,mQo,fQo,w9,gQo,z2e,hQo,uQo,pQo,_t,A9,_Qo,W2e,bQo,vQo,vd,FQo,Q2e,TQo,MQo,Kz,EQo,CQo,wQo,k1,AQo,to,L9,LQo,U2e,yQo,xQo,Ua,$Qo,H2e,kQo,SQo,J2e,RQo,PQo,Y2e,BQo,IQo,NQo,j,S1,K2e,qQo,jQo,Zz,DQo,GQo,OQo,R1,Z2e,VQo,XQo,eW,zQo,WQo,QQo,P1,ebe,UQo,HQo,oW,JQo,YQo,KQo,B1,obe,ZQo,eUo,rW,oUo,rUo,tUo,I1,rbe,aUo,nUo,tW,sUo,lUo,iUo,N1,tbe,dUo,cUo,aW,mUo,fUo,gUo,q1,abe,hUo,uUo,nW,pUo,_Uo,bUo,j1,nbe,vUo,FUo,sW,TUo,MUo,EUo,D1,sbe,CUo,wUo,lW,AUo,LUo,yUo,G1,lbe,xUo,$Uo,iW,kUo,SUo,RUo,O1,ibe,PUo,BUo,dW,IUo,NUo,qUo,V1,dbe,jUo,DUo,cW,GUo,OUo,VUo,X1,cbe,XUo,zUo,mW,WUo,QUo,UUo,z1,mbe,HUo,JUo,fW,YUo,KUo,ZUo,W1,fbe,eHo,oHo,gW,rHo,tHo,aHo,Q1,gbe,nHo,sHo,hW,lHo,iHo,dHo,U1,hbe,cHo,mHo,uW,fHo,gHo,hHo,H1,ube,uHo,pHo,pW,_Ho,bHo,vHo,J1,pbe,FHo,THo,_W,MHo,EHo,CHo,Y1,_be,wHo,AHo,bW,LHo,yHo,xHo,K1,bbe,$Ho,kHo,vW,SHo,RHo,PHo,Z1,vbe,BHo,IHo,FW,NHo,qHo,jHo,eF,Fbe,DHo,GHo,TW,OHo,VHo,XHo,oF,Tbe,zHo,WHo,MW,QHo,UHo,HHo,rF,Mbe,JHo,YHo,EW,KHo,ZHo,eJo,tF,Ebe,oJo,rJo,CW,tJo,aJo,nJo,aF,Cbe,sJo,lJo,wW,iJo,dJo,cJo,nF,wbe,mJo,fJo,AW,gJo,hJo,uJo,sF,Abe,pJo,_Jo,LW,bJo,vJo,FJo,lF,Lbe,TJo,MJo,yW,EJo,CJo,wJo,iF,ybe,AJo,LJo,xW,yJo,xJo,$Jo,dF,xbe,kJo,SJo,$W,RJo,PJo,BJo,cF,$be,IJo,NJo,kW,qJo,jJo,DJo,mF,kbe,GJo,OJo,SW,VJo,XJo,zJo,fF,Sbe,WJo,QJo,RW,UJo,HJo,JJo,gF,Rbe,YJo,KJo,PW,ZJo,eYo,oYo,hF,Pbe,rYo,tYo,BW,aYo,nYo,sYo,uF,Bbe,lYo,iYo,IW,dYo,cYo,mYo,pF,Ibe,fYo,gYo,NW,hYo,uYo,pYo,_F,Nbe,_Yo,bYo,qW,vYo,FYo,TYo,bF,qbe,MYo,EYo,jW,CYo,wYo,AYo,vF,jbe,LYo,yYo,DW,xYo,$Yo,kYo,FF,Dbe,SYo,RYo,GW,PYo,BYo,IYo,TF,Gbe,NYo,qYo,OW,jYo,DYo,GYo,MF,Obe,OYo,VYo,VW,XYo,zYo,WYo,EF,Vbe,QYo,UYo,XW,HYo,JYo,YYo,CF,Xbe,KYo,ZYo,zW,eKo,oKo,rKo,wF,zbe,tKo,aKo,WW,nKo,sKo,lKo,AF,Wbe,iKo,dKo,QW,cKo,mKo,fKo,LF,Qbe,gKo,hKo,UW,uKo,pKo,_Ko,yF,Ube,bKo,vKo,HW,FKo,TKo,MKo,xF,Hbe,EKo,CKo,JW,wKo,AKo,LKo,$F,yKo,Jbe,xKo,$Ko,Ybe,kKo,SKo,kF,sHe,Fd,SF,Kbe,y9,RKo,Zbe,PKo,lHe,qo,x9,BKo,Td,IKo,YW,NKo,qKo,KW,jKo,DKo,GKo,$9,OKo,eve,VKo,XKo,zKo,bt,k9,WKo,ove,QKo,UKo,Md,HKo,rve,JKo,YKo,ZW,KKo,ZKo,eZo,RF,oZo,ao,S9,rZo,tve,tZo,aZo,Ha,nZo,ave,sZo,lZo,nve,iZo,dZo,sve,cZo,mZo,fZo,Z,PF,lve,gZo,hZo,eQ,uZo,pZo,_Zo,BF,ive,bZo,vZo,oQ,FZo,TZo,MZo,IF,dve,EZo,CZo,rQ,wZo,AZo,LZo,NF,cve,yZo,xZo,tQ,$Zo,kZo,SZo,qF,mve,RZo,PZo,aQ,BZo,IZo,NZo,jF,fve,qZo,jZo,nQ,DZo,GZo,OZo,DF,gve,VZo,XZo,sQ,zZo,WZo,QZo,GF,hve,UZo,HZo,lQ,JZo,YZo,KZo,OF,uve,ZZo,eer,iQ,oer,rer,ter,VF,pve,aer,ner,dQ,ser,ler,ier,XF,_ve,der,cer,cQ,mer,fer,ger,zF,bve,her,uer,mQ,per,_er,ber,WF,vve,ver,Fer,fQ,Ter,Mer,Eer,QF,Fve,Cer,wer,gQ,Aer,Ler,yer,UF,Tve,xer,$er,hQ,ker,Ser,Rer,HF,Mve,Per,Ber,uQ,Ier,Ner,qer,JF,Eve,jer,Der,pQ,Ger,Oer,Ver,YF,Cve,Xer,zer,_Q,Wer,Qer,Uer,KF,wve,Her,Jer,bQ,Yer,Ker,Zer,ZF,Ave,eor,oor,vQ,ror,tor,aor,eT,Lve,nor,sor,FQ,lor,ior,dor,oT,yve,cor,mor,TQ,gor,hor,uor,rT,xve,por,_or,MQ,bor,vor,For,tT,$ve,Tor,Mor,EQ,Eor,Cor,wor,aT,kve,Aor,Lor,CQ,yor,xor,$or,nT,Sve,kor,Sor,wQ,Ror,Por,Bor,sT,Rve,Ior,Nor,AQ,qor,jor,Dor,lT,Pve,Gor,Oor,LQ,Vor,Xor,zor,iT,Bve,Wor,Qor,yQ,Uor,Hor,Jor,dT,Ive,Yor,Kor,xQ,Zor,err,orr,cT,Nve,rrr,trr,$Q,arr,nrr,srr,mT,lrr,qve,irr,drr,jve,crr,mrr,fT,iHe,Ed,gT,Dve,R9,frr,Gve,grr,dHe,jo,P9,hrr,Cd,urr,kQ,prr,_rr,SQ,brr,vrr,Frr,B9,Trr,Ove,Mrr,Err,Crr,vt,I9,wrr,Vve,Arr,Lrr,wd,yrr,Xve,xrr,$rr,RQ,krr,Srr,Rrr,hT,Prr,no,N9,Brr,zve,Irr,Nrr,Ja,qrr,Wve,jrr,Drr,Qve,Grr,Orr,Uve,Vrr,Xrr,zrr,Do,uT,Hve,Wrr,Qrr,PQ,Urr,Hrr,Jrr,pT,Jve,Yrr,Krr,BQ,Zrr,etr,otr,_T,Yve,rtr,ttr,IQ,atr,ntr,str,bT,Kve,ltr,itr,NQ,dtr,ctr,mtr,vT,Zve,ftr,gtr,qQ,htr,utr,ptr,FT,e1e,_tr,btr,jQ,vtr,Ftr,Ttr,TT,Mtr,o1e,Etr,Ctr,r1e,wtr,Atr,MT,cHe,Ad,ET,t1e,q9,Ltr,a1e,ytr,mHe,Go,j9,xtr,Ld,$tr,DQ,ktr,Str,GQ,Rtr,Ptr,Btr,D9,Itr,n1e,Ntr,qtr,jtr,Ft,G9,Dtr,s1e,Gtr,Otr,yd,Vtr,l1e,Xtr,ztr,OQ,Wtr,Qtr,Utr,CT,Htr,so,O9,Jtr,i1e,Ytr,Ktr,Ya,Ztr,d1e,ear,oar,c1e,rar,tar,m1e,aar,nar,sar,H,wT,f1e,lar,iar,VQ,dar,car,mar,AT,g1e,far,gar,XQ,har,uar,par,LT,h1e,_ar,bar,zQ,Far,Tar,Mar,yT,u1e,Ear,Car,WQ,war,Aar,Lar,xT,p1e,yar,xar,QQ,$ar,kar,Sar,$T,_1e,Rar,Par,UQ,Bar,Iar,Nar,kT,b1e,qar,jar,HQ,Dar,Gar,Oar,ST,v1e,Var,Xar,JQ,zar,War,Qar,RT,F1e,Uar,Har,YQ,Jar,Yar,Kar,PT,T1e,Zar,enr,KQ,onr,rnr,tnr,BT,M1e,anr,nnr,ZQ,snr,lnr,inr,IT,E1e,dnr,cnr,eU,mnr,fnr,gnr,NT,C1e,hnr,unr,oU,pnr,_nr,bnr,qT,w1e,vnr,Fnr,rU,Tnr,Mnr,Enr,jT,A1e,Cnr,wnr,tU,Anr,Lnr,ynr,DT,L1e,xnr,$nr,aU,knr,Snr,Rnr,GT,y1e,Pnr,Bnr,nU,Inr,Nnr,qnr,OT,x1e,jnr,Dnr,sU,Gnr,Onr,Vnr,VT,$1e,Xnr,znr,lU,Wnr,Qnr,Unr,XT,k1e,Hnr,Jnr,iU,Ynr,Knr,Znr,zT,S1e,esr,osr,dU,rsr,tsr,asr,WT,R1e,nsr,ssr,cU,lsr,isr,dsr,QT,P1e,csr,msr,mU,fsr,gsr,hsr,UT,B1e,usr,psr,fU,_sr,bsr,vsr,HT,I1e,Fsr,Tsr,gU,Msr,Esr,Csr,JT,N1e,wsr,Asr,hU,Lsr,ysr,xsr,YT,q1e,$sr,ksr,uU,Ssr,Rsr,Psr,KT,j1e,Bsr,Isr,pU,Nsr,qsr,jsr,ZT,D1e,Dsr,Gsr,_U,Osr,Vsr,Xsr,eM,G1e,zsr,Wsr,bU,Qsr,Usr,Hsr,oM,O1e,Jsr,Ysr,vU,Ksr,Zsr,elr,rM,V1e,olr,rlr,FU,tlr,alr,nlr,tM,X1e,slr,llr,TU,ilr,dlr,clr,aM,z1e,mlr,flr,MU,glr,hlr,ulr,nM,W1e,plr,_lr,EU,blr,vlr,Flr,sM,Q1e,Tlr,Mlr,CU,Elr,Clr,wlr,lM,U1e,Alr,Llr,wU,ylr,xlr,$lr,iM,klr,H1e,Slr,Rlr,J1e,Plr,Blr,dM,fHe,xd,cM,Y1e,V9,Ilr,K1e,Nlr,gHe,Oo,X9,qlr,$d,jlr,AU,Dlr,Glr,LU,Olr,Vlr,Xlr,z9,zlr,Z1e,Wlr,Qlr,Ulr,Tt,W9,Hlr,eFe,Jlr,Ylr,kd,Klr,oFe,Zlr,eir,yU,oir,rir,tir,mM,air,lo,Q9,nir,rFe,sir,lir,Ka,iir,tFe,dir,cir,aFe,mir,fir,nFe,gir,hir,uir,V,fM,sFe,pir,_ir,xU,bir,vir,Fir,gM,lFe,Tir,Mir,$U,Eir,Cir,wir,hM,iFe,Air,Lir,kU,yir,xir,$ir,uM,dFe,kir,Sir,SU,Rir,Pir,Bir,pM,cFe,Iir,Nir,RU,qir,jir,Dir,_M,mFe,Gir,Oir,PU,Vir,Xir,zir,bM,fFe,Wir,Qir,BU,Uir,Hir,Jir,vM,gFe,Yir,Kir,IU,Zir,edr,odr,FM,hFe,rdr,tdr,NU,adr,ndr,sdr,TM,uFe,ldr,idr,qU,ddr,cdr,mdr,MM,pFe,fdr,gdr,jU,hdr,udr,pdr,EM,_Fe,_dr,bdr,DU,vdr,Fdr,Tdr,CM,bFe,Mdr,Edr,GU,Cdr,wdr,Adr,wM,vFe,Ldr,ydr,OU,xdr,$dr,kdr,AM,FFe,Sdr,Rdr,VU,Pdr,Bdr,Idr,LM,TFe,Ndr,qdr,XU,jdr,Ddr,Gdr,yM,MFe,Odr,Vdr,zU,Xdr,zdr,Wdr,xM,EFe,Qdr,Udr,WU,Hdr,Jdr,Ydr,$M,CFe,Kdr,Zdr,QU,ecr,ocr,rcr,kM,wFe,tcr,acr,UU,ncr,scr,lcr,SM,AFe,icr,dcr,HU,ccr,mcr,fcr,RM,LFe,gcr,hcr,JU,ucr,pcr,_cr,PM,yFe,bcr,vcr,YU,Fcr,Tcr,Mcr,BM,xFe,Ecr,Ccr,KU,wcr,Acr,Lcr,IM,$Fe,ycr,xcr,ZU,$cr,kcr,Scr,NM,kFe,Rcr,Pcr,eH,Bcr,Icr,Ncr,qM,SFe,qcr,jcr,oH,Dcr,Gcr,Ocr,jM,RFe,Vcr,Xcr,rH,zcr,Wcr,Qcr,DM,PFe,Ucr,Hcr,tH,Jcr,Ycr,Kcr,GM,BFe,Zcr,emr,aH,omr,rmr,tmr,OM,IFe,amr,nmr,nH,smr,lmr,imr,VM,NFe,dmr,cmr,sH,mmr,fmr,gmr,XM,qFe,hmr,umr,lH,pmr,_mr,bmr,zM,jFe,vmr,Fmr,iH,Tmr,Mmr,Emr,WM,DFe,Cmr,wmr,dH,Amr,Lmr,ymr,QM,GFe,xmr,$mr,cH,kmr,Smr,Rmr,UM,OFe,Pmr,Bmr,mH,Imr,Nmr,qmr,HM,VFe,jmr,Dmr,fH,Gmr,Omr,Vmr,JM,XFe,Xmr,zmr,gH,Wmr,Qmr,Umr,YM,zFe,Hmr,Jmr,hH,Ymr,Kmr,Zmr,KM,WFe,efr,ofr,uH,rfr,tfr,afr,ZM,QFe,nfr,sfr,pH,lfr,ifr,dfr,eE,UFe,cfr,mfr,_H,ffr,gfr,hfr,oE,ufr,HFe,pfr,_fr,JFe,bfr,vfr,rE,hHe,Sd,tE,YFe,U9,Ffr,KFe,Tfr,uHe,Vo,H9,Mfr,Rd,Efr,bH,Cfr,wfr,vH,Afr,Lfr,yfr,J9,xfr,ZFe,$fr,kfr,Sfr,Mt,Y9,Rfr,eTe,Pfr,Bfr,Pd,Ifr,oTe,Nfr,qfr,FH,jfr,Dfr,Gfr,aE,Ofr,io,K9,Vfr,rTe,Xfr,zfr,Za,Wfr,tTe,Qfr,Ufr,aTe,Hfr,Jfr,nTe,Yfr,Kfr,Zfr,sTe,nE,lTe,egr,ogr,TH,rgr,tgr,agr,sE,ngr,iTe,sgr,lgr,dTe,igr,dgr,lE,pHe,Bd,iE,cTe,Z9,cgr,mTe,mgr,_He,Xo,ex,fgr,Id,ggr,MH,hgr,ugr,EH,pgr,_gr,bgr,ox,vgr,fTe,Fgr,Tgr,Mgr,Et,rx,Egr,gTe,Cgr,wgr,Nd,Agr,hTe,Lgr,ygr,CH,xgr,$gr,kgr,dE,Sgr,co,tx,Rgr,uTe,Pgr,Bgr,en,Igr,pTe,Ngr,qgr,_Te,jgr,Dgr,bTe,Ggr,Ogr,Vgr,be,cE,vTe,Xgr,zgr,wH,Wgr,Qgr,Ugr,mE,FTe,Hgr,Jgr,AH,Ygr,Kgr,Zgr,fE,TTe,ehr,ohr,LH,rhr,thr,ahr,gE,MTe,nhr,shr,yH,lhr,ihr,dhr,sl,ETe,chr,mhr,xH,fhr,ghr,$H,hhr,uhr,phr,hE,CTe,_hr,bhr,kH,vhr,Fhr,Thr,ll,wTe,Mhr,Ehr,SH,Chr,whr,RH,Ahr,Lhr,yhr,uE,ATe,xhr,$hr,PH,khr,Shr,Rhr,Ct,LTe,Phr,Bhr,BH,Ihr,Nhr,IH,qhr,jhr,NH,Dhr,Ghr,Ohr,pE,yTe,Vhr,Xhr,qH,zhr,Whr,Qhr,_E,xTe,Uhr,Hhr,jH,Jhr,Yhr,Khr,bE,$Te,Zhr,eur,DH,our,rur,tur,vE,kTe,aur,nur,GH,sur,lur,iur,FE,STe,dur,cur,OH,mur,fur,gur,TE,RTe,hur,uur,VH,pur,_ur,bur,ME,PTe,vur,Fur,XH,Tur,Mur,Eur,EE,BTe,Cur,wur,zH,Aur,Lur,yur,CE,xur,ITe,$ur,kur,NTe,Sur,Rur,wE,bHe,qd,AE,qTe,ax,Pur,jTe,Bur,vHe,zo,nx,Iur,jd,Nur,WH,qur,jur,QH,Dur,Gur,Our,sx,Vur,DTe,Xur,zur,Wur,wt,lx,Qur,GTe,Uur,Hur,Dd,Jur,OTe,Yur,Kur,UH,Zur,epr,opr,LE,rpr,mo,ix,tpr,VTe,apr,npr,on,spr,XTe,lpr,ipr,zTe,dpr,cpr,WTe,mpr,fpr,gpr,QTe,yE,UTe,hpr,upr,HH,ppr,_pr,bpr,xE,vpr,HTe,Fpr,Tpr,JTe,Mpr,Epr,$E,FHe,Gd,kE,YTe,dx,Cpr,KTe,wpr,THe,Wo,cx,Apr,Od,Lpr,JH,ypr,xpr,YH,$pr,kpr,Spr,mx,Rpr,ZTe,Ppr,Bpr,Ipr,At,fx,Npr,eMe,qpr,jpr,Vd,Dpr,oMe,Gpr,Opr,KH,Vpr,Xpr,zpr,SE,Wpr,fo,gx,Qpr,rMe,Upr,Hpr,rn,Jpr,tMe,Ypr,Kpr,aMe,Zpr,e_r,nMe,o_r,r_r,t_r,sMe,RE,lMe,a_r,n_r,ZH,s_r,l_r,i_r,PE,d_r,iMe,c_r,m_r,dMe,f_r,g_r,BE,MHe,Xd,IE,cMe,hx,h_r,mMe,u_r,EHe,Qo,ux,p_r,zd,__r,eJ,b_r,v_r,oJ,F_r,T_r,M_r,px,E_r,fMe,C_r,w_r,A_r,Lt,_x,L_r,gMe,y_r,x_r,Wd,$_r,hMe,k_r,S_r,rJ,R_r,P_r,B_r,NE,I_r,go,bx,N_r,uMe,q_r,j_r,tn,D_r,pMe,G_r,O_r,_Me,V_r,X_r,bMe,z_r,W_r,Q_r,vMe,qE,FMe,U_r,H_r,tJ,J_r,Y_r,K_r,jE,Z_r,TMe,e2r,o2r,MMe,r2r,t2r,DE,CHe,Qd,GE,EMe,vx,a2r,CMe,n2r,wHe,Uo,Fx,s2r,Ud,l2r,aJ,i2r,d2r,nJ,c2r,m2r,f2r,Tx,g2r,wMe,h2r,u2r,p2r,yt,Mx,_2r,AMe,b2r,v2r,Hd,F2r,LMe,T2r,M2r,sJ,E2r,C2r,w2r,OE,A2r,ho,Ex,L2r,yMe,y2r,x2r,an,$2r,xMe,k2r,S2r,$Me,R2r,P2r,kMe,B2r,I2r,N2r,Pe,VE,SMe,q2r,j2r,lJ,D2r,G2r,O2r,XE,RMe,V2r,X2r,iJ,z2r,W2r,Q2r,zE,PMe,U2r,H2r,dJ,J2r,Y2r,K2r,WE,BMe,Z2r,ebr,cJ,obr,rbr,tbr,QE,IMe,abr,nbr,mJ,sbr,lbr,ibr,UE,NMe,dbr,cbr,fJ,mbr,fbr,gbr,HE,qMe,hbr,ubr,gJ,pbr,_br,bbr,JE,jMe,vbr,Fbr,hJ,Tbr,Mbr,Ebr,YE,DMe,Cbr,wbr,uJ,Abr,Lbr,ybr,KE,xbr,GMe,$br,kbr,OMe,Sbr,Rbr,ZE,AHe,Jd,e4,VMe,Cx,Pbr,XMe,Bbr,LHe,Ho,wx,Ibr,Yd,Nbr,pJ,qbr,jbr,_J,Dbr,Gbr,Obr,Ax,Vbr,zMe,Xbr,zbr,Wbr,xt,Lx,Qbr,WMe,Ubr,Hbr,Kd,Jbr,QMe,Ybr,Kbr,bJ,Zbr,evr,ovr,o4,rvr,uo,yx,tvr,UMe,avr,nvr,nn,svr,HMe,lvr,ivr,JMe,dvr,cvr,YMe,mvr,fvr,gvr,st,r4,KMe,hvr,uvr,vJ,pvr,_vr,bvr,t4,ZMe,vvr,Fvr,FJ,Tvr,Mvr,Evr,a4,eEe,Cvr,wvr,TJ,Avr,Lvr,yvr,n4,oEe,xvr,$vr,MJ,kvr,Svr,Rvr,s4,rEe,Pvr,Bvr,EJ,Ivr,Nvr,qvr,l4,jvr,tEe,Dvr,Gvr,aEe,Ovr,Vvr,i4,yHe,Zd,d4,nEe,xx,Xvr,sEe,zvr,xHe,Jo,$x,Wvr,ec,Qvr,CJ,Uvr,Hvr,wJ,Jvr,Yvr,Kvr,kx,Zvr,lEe,e1r,o1r,r1r,$t,Sx,t1r,iEe,a1r,n1r,oc,s1r,dEe,l1r,i1r,AJ,d1r,c1r,m1r,c4,f1r,po,Rx,g1r,cEe,h1r,u1r,sn,p1r,mEe,_1r,b1r,fEe,v1r,F1r,gEe,T1r,M1r,E1r,Le,m4,hEe,C1r,w1r,LJ,A1r,L1r,y1r,f4,uEe,x1r,$1r,yJ,k1r,S1r,R1r,g4,pEe,P1r,B1r,xJ,I1r,N1r,q1r,h4,_Ee,j1r,D1r,$J,G1r,O1r,V1r,u4,bEe,X1r,z1r,kJ,W1r,Q1r,U1r,p4,vEe,H1r,J1r,SJ,Y1r,K1r,Z1r,_4,FEe,eFr,oFr,RJ,rFr,tFr,aFr,b4,TEe,nFr,sFr,PJ,lFr,iFr,dFr,v4,MEe,cFr,mFr,BJ,fFr,gFr,hFr,F4,EEe,uFr,pFr,IJ,_Fr,bFr,vFr,T4,FFr,CEe,TFr,MFr,wEe,EFr,CFr,M4,$He,rc,E4,AEe,Px,wFr,LEe,AFr,kHe,Yo,Bx,LFr,tc,yFr,NJ,xFr,$Fr,qJ,kFr,SFr,RFr,Ix,PFr,yEe,BFr,IFr,NFr,kt,Nx,qFr,xEe,jFr,DFr,ac,GFr,$Ee,OFr,VFr,jJ,XFr,zFr,WFr,C4,QFr,_o,qx,UFr,kEe,HFr,JFr,ln,YFr,SEe,KFr,ZFr,REe,eTr,oTr,PEe,rTr,tTr,aTr,jx,w4,BEe,nTr,sTr,DJ,lTr,iTr,dTr,A4,IEe,cTr,mTr,GJ,fTr,gTr,hTr,L4,uTr,NEe,pTr,_Tr,qEe,bTr,vTr,y4,SHe,nc,x4,jEe,Dx,FTr,DEe,TTr,RHe,Ko,Gx,MTr,sc,ETr,OJ,CTr,wTr,VJ,ATr,LTr,yTr,Ox,xTr,GEe,$Tr,kTr,STr,St,Vx,RTr,OEe,PTr,BTr,lc,ITr,VEe,NTr,qTr,XJ,jTr,DTr,GTr,$4,OTr,bo,Xx,VTr,XEe,XTr,zTr,dn,WTr,zEe,QTr,UTr,WEe,HTr,JTr,QEe,YTr,KTr,ZTr,lt,k4,UEe,eMr,oMr,zJ,rMr,tMr,aMr,S4,HEe,nMr,sMr,WJ,lMr,iMr,dMr,R4,JEe,cMr,mMr,QJ,fMr,gMr,hMr,P4,YEe,uMr,pMr,UJ,_Mr,bMr,vMr,B4,KEe,FMr,TMr,HJ,MMr,EMr,CMr,I4,wMr,ZEe,AMr,LMr,e4e,yMr,xMr,N4,PHe,ic,q4,o4e,zx,$Mr,r4e,kMr,BHe,Zo,Wx,SMr,dc,RMr,JJ,PMr,BMr,YJ,IMr,NMr,qMr,Qx,jMr,t4e,DMr,GMr,OMr,Rt,Ux,VMr,a4e,XMr,zMr,cc,WMr,n4e,QMr,UMr,KJ,HMr,JMr,YMr,j4,KMr,vo,Hx,ZMr,s4e,eEr,oEr,cn,rEr,l4e,tEr,aEr,i4e,nEr,sEr,d4e,lEr,iEr,dEr,mn,D4,c4e,cEr,mEr,ZJ,fEr,gEr,hEr,G4,m4e,uEr,pEr,eY,_Er,bEr,vEr,O4,f4e,FEr,TEr,oY,MEr,EEr,CEr,V4,g4e,wEr,AEr,rY,LEr,yEr,xEr,X4,$Er,h4e,kEr,SEr,u4e,REr,PEr,z4,IHe,mc,W4,p4e,Jx,BEr,_4e,IEr,NHe,er,Yx,NEr,fc,qEr,tY,jEr,DEr,aY,GEr,OEr,VEr,Kx,XEr,b4e,zEr,WEr,QEr,Pt,Zx,UEr,v4e,HEr,JEr,gc,YEr,F4e,KEr,ZEr,nY,e4r,o4r,r4r,Q4,t4r,Fo,e$,a4r,T4e,n4r,s4r,fn,l4r,M4e,i4r,d4r,E4e,c4r,m4r,C4e,f4r,g4r,h4r,o$,U4,w4e,u4r,p4r,sY,_4r,b4r,v4r,H4,A4e,F4r,T4r,lY,M4r,E4r,C4r,J4,w4r,L4e,A4r,L4r,y4e,y4r,x4r,Y4,qHe,hc,K4,x4e,r$,$4r,$4e,k4r,jHe,or,t$,S4r,uc,R4r,iY,P4r,B4r,dY,I4r,N4r,q4r,a$,j4r,k4e,D4r,G4r,O4r,Bt,n$,V4r,S4e,X4r,z4r,pc,W4r,R4e,Q4r,U4r,cY,H4r,J4r,Y4r,Z4,K4r,To,s$,Z4r,P4e,eCr,oCr,gn,rCr,B4e,tCr,aCr,I4e,nCr,sCr,N4e,lCr,iCr,dCr,q4e,eC,j4e,cCr,mCr,mY,fCr,gCr,hCr,oC,uCr,D4e,pCr,_Cr,G4e,bCr,vCr,rC,DHe,_c,tC,O4e,l$,FCr,V4e,TCr,GHe,rr,i$,MCr,bc,ECr,fY,CCr,wCr,gY,ACr,LCr,yCr,d$,xCr,X4e,$Cr,kCr,SCr,It,c$,RCr,z4e,PCr,BCr,vc,ICr,W4e,NCr,qCr,hY,jCr,DCr,GCr,aC,OCr,Mo,m$,VCr,Q4e,XCr,zCr,hn,WCr,U4e,QCr,UCr,H4e,HCr,JCr,J4e,YCr,KCr,ZCr,it,nC,Y4e,e3r,o3r,uY,r3r,t3r,a3r,sC,K4e,n3r,s3r,pY,l3r,i3r,d3r,lC,Z4e,c3r,m3r,_Y,f3r,g3r,h3r,iC,eCe,u3r,p3r,bY,_3r,b3r,v3r,dC,oCe,F3r,T3r,vY,M3r,E3r,C3r,cC,w3r,rCe,A3r,L3r,tCe,y3r,x3r,mC,OHe,Fc,fC,aCe,f$,$3r,nCe,k3r,VHe,tr,g$,S3r,Tc,R3r,FY,P3r,B3r,TY,I3r,N3r,q3r,h$,j3r,sCe,D3r,G3r,O3r,Nt,u$,V3r,lCe,X3r,z3r,Mc,W3r,iCe,Q3r,U3r,MY,H3r,J3r,Y3r,gC,K3r,Eo,p$,Z3r,dCe,e5r,o5r,un,r5r,cCe,t5r,a5r,mCe,n5r,s5r,fCe,l5r,i5r,d5r,gCe,hC,hCe,c5r,m5r,EY,f5r,g5r,h5r,uC,u5r,uCe,p5r,_5r,pCe,b5r,v5r,pC,XHe,Ec,_C,_Ce,_$,F5r,bCe,T5r,zHe,ar,b$,M5r,Cc,E5r,CY,C5r,w5r,wY,A5r,L5r,y5r,v$,x5r,vCe,$5r,k5r,S5r,qt,F$,R5r,FCe,P5r,B5r,wc,I5r,TCe,N5r,q5r,AY,j5r,D5r,G5r,bC,O5r,Rr,T$,V5r,MCe,X5r,z5r,pn,W5r,ECe,Q5r,U5r,CCe,H5r,J5r,wCe,Y5r,K5r,Z5r,P,vC,ACe,e0r,o0r,LY,r0r,t0r,a0r,FC,LCe,n0r,s0r,yY,l0r,i0r,d0r,TC,yCe,c0r,m0r,xY,f0r,g0r,h0r,MC,xCe,u0r,p0r,$Y,_0r,b0r,v0r,EC,$Ce,F0r,T0r,kY,M0r,E0r,C0r,CC,kCe,w0r,A0r,SY,L0r,y0r,x0r,wC,SCe,$0r,k0r,RY,S0r,R0r,P0r,AC,RCe,B0r,I0r,PY,N0r,q0r,j0r,LC,PCe,D0r,G0r,BY,O0r,V0r,X0r,yC,BCe,z0r,W0r,IY,Q0r,U0r,H0r,xC,ICe,J0r,Y0r,NY,K0r,Z0r,ewr,$C,NCe,owr,rwr,qY,twr,awr,nwr,kC,qCe,swr,lwr,jY,iwr,dwr,cwr,SC,jCe,mwr,fwr,DY,gwr,hwr,uwr,RC,DCe,pwr,_wr,GY,bwr,vwr,Fwr,PC,GCe,Twr,Mwr,OY,Ewr,Cwr,wwr,BC,OCe,Awr,Lwr,VY,ywr,xwr,$wr,IC,VCe,kwr,Swr,XY,Rwr,Pwr,Bwr,il,XCe,Iwr,Nwr,zY,qwr,jwr,WY,Dwr,Gwr,Owr,NC,zCe,Vwr,Xwr,QY,zwr,Wwr,Qwr,qC,WCe,Uwr,Hwr,UY,Jwr,Ywr,Kwr,jC,QCe,Zwr,e6r,HY,o6r,r6r,t6r,DC,UCe,a6r,n6r,JY,s6r,l6r,i6r,GC,HCe,d6r,c6r,YY,m6r,f6r,g6r,OC,JCe,h6r,u6r,KY,p6r,_6r,b6r,VC,YCe,v6r,F6r,ZY,T6r,M6r,E6r,XC,KCe,C6r,w6r,eK,A6r,L6r,y6r,zC,ZCe,x6r,$6r,oK,k6r,S6r,R6r,WC,e3e,P6r,B6r,rK,I6r,N6r,q6r,QC,o3e,j6r,D6r,tK,G6r,O6r,V6r,UC,r3e,X6r,z6r,aK,W6r,Q6r,U6r,HC,t3e,H6r,J6r,nK,Y6r,K6r,Z6r,JC,a3e,eAr,oAr,sK,rAr,tAr,aAr,YC,n3e,nAr,sAr,lK,lAr,iAr,dAr,KC,s3e,cAr,mAr,iK,fAr,gAr,hAr,ZC,l3e,uAr,pAr,dK,_Ar,bAr,vAr,e3,i3e,FAr,TAr,cK,MAr,EAr,CAr,o3,d3e,wAr,AAr,mK,LAr,yAr,xAr,r3,c3e,$Ar,kAr,fK,SAr,RAr,PAr,t3,m3e,BAr,IAr,gK,NAr,qAr,jAr,a3,f3e,DAr,GAr,hK,OAr,VAr,XAr,n3,g3e,zAr,WAr,uK,QAr,UAr,HAr,s3,h3e,JAr,YAr,pK,KAr,ZAr,e7r,l3,u3e,o7r,r7r,_K,t7r,a7r,n7r,i3,p3e,s7r,l7r,bK,i7r,d7r,c7r,d3,_3e,m7r,f7r,vK,g7r,h7r,u7r,c3,b3e,p7r,_7r,FK,b7r,v7r,F7r,m3,v3e,T7r,M7r,TK,E7r,C7r,w7r,f3,F3e,A7r,L7r,MK,y7r,x7r,$7r,g3,T3e,k7r,S7r,EK,R7r,P7r,B7r,h3,M3e,I7r,N7r,CK,q7r,j7r,D7r,u3,E3e,G7r,O7r,wK,V7r,X7r,z7r,p3,C3e,W7r,Q7r,AK,U7r,H7r,J7r,_3,w3e,Y7r,K7r,LK,Z7r,eLr,oLr,b3,WHe,Ac,v3,A3e,M$,rLr,L3e,tLr,QHe,nr,E$,aLr,Lc,nLr,yK,sLr,lLr,xK,iLr,dLr,cLr,C$,mLr,y3e,fLr,gLr,hLr,jt,w$,uLr,x3e,pLr,_Lr,yc,bLr,$3e,vLr,FLr,$K,TLr,MLr,ELr,F3,CLr,Pr,A$,wLr,k3e,ALr,LLr,_n,yLr,S3e,xLr,$Lr,R3e,kLr,SLr,P3e,RLr,PLr,BLr,se,T3,B3e,ILr,NLr,kK,qLr,jLr,DLr,M3,I3e,GLr,OLr,SK,VLr,XLr,zLr,E3,N3e,WLr,QLr,RK,ULr,HLr,JLr,C3,q3e,YLr,KLr,PK,ZLr,eyr,oyr,w3,j3e,ryr,tyr,BK,ayr,nyr,syr,A3,D3e,lyr,iyr,IK,dyr,cyr,myr,L3,G3e,fyr,gyr,NK,hyr,uyr,pyr,y3,O3e,_yr,byr,qK,vyr,Fyr,Tyr,x3,V3e,Myr,Eyr,jK,Cyr,wyr,Ayr,$3,X3e,Lyr,yyr,DK,xyr,$yr,kyr,k3,z3e,Syr,Ryr,GK,Pyr,Byr,Iyr,S3,W3e,Nyr,qyr,OK,jyr,Dyr,Gyr,R3,Q3e,Oyr,Vyr,VK,Xyr,zyr,Wyr,P3,U3e,Qyr,Uyr,XK,Hyr,Jyr,Yyr,B3,H3e,Kyr,Zyr,zK,e8r,o8r,r8r,I3,J3e,t8r,a8r,WK,n8r,s8r,l8r,N3,Y3e,i8r,d8r,QK,c8r,m8r,f8r,q3,K3e,g8r,h8r,UK,u8r,p8r,_8r,j3,Z3e,b8r,v8r,HK,F8r,T8r,M8r,D3,e5e,E8r,C8r,JK,w8r,A8r,L8r,G3,o5e,y8r,x8r,YK,$8r,k8r,S8r,O3,r5e,R8r,P8r,KK,B8r,I8r,N8r,V3,t5e,q8r,j8r,ZK,D8r,G8r,O8r,X3,UHe,xc,z3,a5e,L$,V8r,n5e,X8r,HHe,sr,y$,z8r,$c,W8r,eZ,Q8r,U8r,oZ,H8r,J8r,Y8r,x$,K8r,s5e,Z8r,e9r,o9r,Dt,$$,r9r,l5e,t9r,a9r,kc,n9r,i5e,s9r,l9r,rZ,i9r,d9r,c9r,W3,m9r,Br,k$,f9r,d5e,g9r,h9r,bn,u9r,c5e,p9r,_9r,m5e,b9r,v9r,f5e,F9r,T9r,M9r,Me,Q3,g5e,E9r,C9r,tZ,w9r,A9r,L9r,U3,h5e,y9r,x9r,aZ,$9r,k9r,S9r,H3,u5e,R9r,P9r,nZ,B9r,I9r,N9r,J3,p5e,q9r,j9r,sZ,D9r,G9r,O9r,Y3,_5e,V9r,X9r,lZ,z9r,W9r,Q9r,K3,b5e,U9r,H9r,iZ,J9r,Y9r,K9r,Z3,v5e,Z9r,exr,dZ,oxr,rxr,txr,e5,F5e,axr,nxr,cZ,sxr,lxr,ixr,o5,T5e,dxr,cxr,mZ,mxr,fxr,gxr,r5,M5e,hxr,uxr,fZ,pxr,_xr,bxr,t5,E5e,vxr,Fxr,gZ,Txr,Mxr,Exr,a5,C5e,Cxr,wxr,hZ,Axr,Lxr,yxr,n5,w5e,xxr,$xr,uZ,kxr,Sxr,Rxr,s5,A5e,Pxr,Bxr,pZ,Ixr,Nxr,qxr,l5,JHe,Sc,i5,L5e,S$,jxr,y5e,Dxr,YHe,lr,R$,Gxr,Rc,Oxr,_Z,Vxr,Xxr,bZ,zxr,Wxr,Qxr,P$,Uxr,x5e,Hxr,Jxr,Yxr,Gt,B$,Kxr,$5e,Zxr,e$r,Pc,o$r,k5e,r$r,t$r,vZ,a$r,n$r,s$r,d5,l$r,Ir,I$,i$r,S5e,d$r,c$r,vn,m$r,R5e,f$r,g$r,P5e,h$r,u$r,B5e,p$r,_$r,b$r,Be,c5,I5e,v$r,F$r,FZ,T$r,M$r,E$r,m5,N5e,C$r,w$r,TZ,A$r,L$r,y$r,dl,q5e,x$r,$$r,MZ,k$r,S$r,EZ,R$r,P$r,B$r,f5,j5e,I$r,N$r,CZ,q$r,j$r,D$r,g5,D5e,G$r,O$r,wZ,V$r,X$r,z$r,h5,G5e,W$r,Q$r,AZ,U$r,H$r,J$r,u5,O5e,Y$r,K$r,LZ,Z$r,ekr,okr,p5,V5e,rkr,tkr,yZ,akr,nkr,skr,_5,X5e,lkr,ikr,xZ,dkr,ckr,mkr,b5,KHe,Bc,v5,z5e,N$,fkr,W5e,gkr,ZHe,ir,q$,hkr,Ic,ukr,$Z,pkr,_kr,kZ,bkr,vkr,Fkr,j$,Tkr,Q5e,Mkr,Ekr,Ckr,Ot,D$,wkr,U5e,Akr,Lkr,Nc,ykr,H5e,xkr,$kr,SZ,kkr,Skr,Rkr,F5,Pkr,Nr,G$,Bkr,J5e,Ikr,Nkr,Fn,qkr,Y5e,jkr,Dkr,K5e,Gkr,Okr,Z5e,Vkr,Xkr,zkr,qc,T5,e0e,Wkr,Qkr,RZ,Ukr,Hkr,Jkr,M5,o0e,Ykr,Kkr,PZ,Zkr,eSr,oSr,E5,r0e,rSr,tSr,BZ,aSr,nSr,sSr,C5,eJe,jc,w5,t0e,O$,lSr,a0e,iSr,oJe,dr,V$,dSr,Dc,cSr,IZ,mSr,fSr,NZ,gSr,hSr,uSr,X$,pSr,n0e,_Sr,bSr,vSr,Vt,z$,FSr,s0e,TSr,MSr,Gc,ESr,l0e,CSr,wSr,qZ,ASr,LSr,ySr,A5,xSr,qr,W$,$Sr,i0e,kSr,SSr,Tn,RSr,d0e,PSr,BSr,c0e,ISr,NSr,m0e,qSr,jSr,DSr,fe,L5,f0e,GSr,OSr,jZ,VSr,XSr,zSr,y5,g0e,WSr,QSr,DZ,USr,HSr,JSr,x5,h0e,YSr,KSr,GZ,ZSr,eRr,oRr,$5,u0e,rRr,tRr,OZ,aRr,nRr,sRr,k5,p0e,lRr,iRr,VZ,dRr,cRr,mRr,S5,_0e,fRr,gRr,XZ,hRr,uRr,pRr,R5,b0e,_Rr,bRr,zZ,vRr,FRr,TRr,P5,v0e,MRr,ERr,WZ,CRr,wRr,ARr,B5,F0e,LRr,yRr,QZ,xRr,$Rr,kRr,I5,T0e,SRr,RRr,UZ,PRr,BRr,IRr,N5,M0e,NRr,qRr,HZ,jRr,DRr,GRr,q5,E0e,ORr,VRr,JZ,XRr,zRr,WRr,j5,C0e,QRr,URr,YZ,HRr,JRr,YRr,D5,w0e,KRr,ZRr,KZ,ePr,oPr,rPr,G5,A0e,tPr,aPr,ZZ,nPr,sPr,lPr,O5,L0e,iPr,dPr,eee,cPr,mPr,fPr,V5,y0e,gPr,hPr,oee,uPr,pPr,_Pr,X5,x0e,bPr,vPr,ree,FPr,TPr,MPr,z5,$0e,EPr,CPr,tee,wPr,APr,LPr,W5,k0e,yPr,xPr,aee,$Pr,kPr,SPr,Q5,rJe,Oc,U5,S0e,Q$,RPr,R0e,PPr,tJe,cr,U$,BPr,Vc,IPr,nee,NPr,qPr,see,jPr,DPr,GPr,H$,OPr,P0e,VPr,XPr,zPr,Xt,J$,WPr,B0e,QPr,UPr,Xc,HPr,I0e,JPr,YPr,lee,KPr,ZPr,eBr,H5,oBr,jr,Y$,rBr,N0e,tBr,aBr,Mn,nBr,q0e,sBr,lBr,j0e,iBr,dBr,D0e,cBr,mBr,fBr,ye,J5,G0e,gBr,hBr,iee,uBr,pBr,_Br,Y5,O0e,bBr,vBr,dee,FBr,TBr,MBr,K5,V0e,EBr,CBr,cee,wBr,ABr,LBr,Z5,X0e,yBr,xBr,mee,$Br,kBr,SBr,e0,z0e,RBr,PBr,fee,BBr,IBr,NBr,o0,W0e,qBr,jBr,gee,DBr,GBr,OBr,r0,Q0e,VBr,XBr,hee,zBr,WBr,QBr,t0,U0e,UBr,HBr,uee,JBr,YBr,KBr,a0,H0e,ZBr,eIr,pee,oIr,rIr,tIr,n0,J0e,aIr,nIr,_ee,sIr,lIr,iIr,s0,aJe,zc,l0,Y0e,K$,dIr,K0e,cIr,nJe,mr,Z$,mIr,Wc,fIr,bee,gIr,hIr,vee,uIr,pIr,_Ir,ek,bIr,Z0e,vIr,FIr,TIr,zt,ok,MIr,ewe,EIr,CIr,Qc,wIr,owe,AIr,LIr,Fee,yIr,xIr,$Ir,i0,kIr,Dr,rk,SIr,rwe,RIr,PIr,En,BIr,twe,IIr,NIr,awe,qIr,jIr,nwe,DIr,GIr,OIr,re,d0,swe,VIr,XIr,Tee,zIr,WIr,QIr,c0,lwe,UIr,HIr,Mee,JIr,YIr,KIr,m0,iwe,ZIr,eNr,Eee,oNr,rNr,tNr,f0,dwe,aNr,nNr,Cee,sNr,lNr,iNr,g0,cwe,dNr,cNr,wee,mNr,fNr,gNr,h0,mwe,hNr,uNr,Aee,pNr,_Nr,bNr,u0,fwe,vNr,FNr,Lee,TNr,MNr,ENr,p0,gwe,CNr,wNr,yee,ANr,LNr,yNr,_0,hwe,xNr,$Nr,xee,kNr,SNr,RNr,b0,uwe,PNr,BNr,$ee,INr,NNr,qNr,v0,pwe,jNr,DNr,kee,GNr,ONr,VNr,F0,_we,XNr,zNr,See,WNr,QNr,UNr,T0,bwe,HNr,JNr,Ree,YNr,KNr,ZNr,M0,vwe,eqr,oqr,Pee,rqr,tqr,aqr,E0,Fwe,nqr,sqr,Bee,lqr,iqr,dqr,C0,Twe,cqr,mqr,Iee,fqr,gqr,hqr,w0,Mwe,uqr,pqr,Nee,_qr,bqr,vqr,A0,Ewe,Fqr,Tqr,qee,Mqr,Eqr,Cqr,L0,Cwe,wqr,Aqr,jee,Lqr,yqr,xqr,y0,wwe,$qr,kqr,Dee,Sqr,Rqr,Pqr,x0,Awe,Bqr,Iqr,Gee,Nqr,qqr,jqr,$0,Lwe,Dqr,Gqr,Oee,Oqr,Vqr,Xqr,k0,ywe,zqr,Wqr,Vee,Qqr,Uqr,Hqr,S0,xwe,Jqr,Yqr,Xee,Kqr,Zqr,ejr,R0,$we,ojr,rjr,zee,tjr,ajr,njr,P0,kwe,sjr,ljr,Wee,ijr,djr,cjr,B0,Swe,mjr,fjr,Qee,gjr,hjr,ujr,I0,sJe,Uc,N0,Rwe,tk,pjr,Pwe,_jr,lJe,fr,ak,bjr,Hc,vjr,Uee,Fjr,Tjr,Hee,Mjr,Ejr,Cjr,nk,wjr,Bwe,Ajr,Ljr,yjr,Wt,sk,xjr,Iwe,$jr,kjr,Jc,Sjr,Nwe,Rjr,Pjr,Jee,Bjr,Ijr,Njr,q0,qjr,Gr,lk,jjr,qwe,Djr,Gjr,Cn,Ojr,jwe,Vjr,Xjr,Dwe,zjr,Wjr,Gwe,Qjr,Ujr,Hjr,ve,j0,Owe,Jjr,Yjr,Yee,Kjr,Zjr,eDr,D0,Vwe,oDr,rDr,Kee,tDr,aDr,nDr,G0,Xwe,sDr,lDr,Zee,iDr,dDr,cDr,O0,zwe,mDr,fDr,eoe,gDr,hDr,uDr,V0,Wwe,pDr,_Dr,ooe,bDr,vDr,FDr,X0,Qwe,TDr,MDr,roe,EDr,CDr,wDr,z0,Uwe,ADr,LDr,toe,yDr,xDr,$Dr,W0,Hwe,kDr,SDr,aoe,RDr,PDr,BDr,Q0,Jwe,IDr,NDr,noe,qDr,jDr,DDr,U0,Ywe,GDr,ODr,soe,VDr,XDr,zDr,H0,Kwe,WDr,QDr,loe,UDr,HDr,JDr,J0,Zwe,YDr,KDr,ioe,ZDr,eGr,oGr,Y0,e6e,rGr,tGr,doe,aGr,nGr,sGr,K0,o6e,lGr,iGr,coe,dGr,cGr,mGr,Z0,r6e,fGr,gGr,moe,hGr,uGr,pGr,ew,t6e,_Gr,bGr,foe,vGr,FGr,TGr,ow,a6e,MGr,EGr,goe,CGr,wGr,AGr,rw,iJe,Yc,tw,n6e,ik,LGr,s6e,yGr,dJe,gr,dk,xGr,Kc,$Gr,hoe,kGr,SGr,uoe,RGr,PGr,BGr,ck,IGr,l6e,NGr,qGr,jGr,Qt,mk,DGr,i6e,GGr,OGr,Zc,VGr,d6e,XGr,zGr,poe,WGr,QGr,UGr,aw,HGr,Or,fk,JGr,c6e,YGr,KGr,wn,ZGr,m6e,eOr,oOr,f6e,rOr,tOr,g6e,aOr,nOr,sOr,gk,nw,h6e,lOr,iOr,_oe,dOr,cOr,mOr,sw,u6e,fOr,gOr,boe,hOr,uOr,pOr,lw,cJe,em,iw,p6e,hk,_Or,_6e,bOr,mJe,hr,uk,vOr,om,FOr,voe,TOr,MOr,Foe,EOr,COr,wOr,pk,AOr,b6e,LOr,yOr,xOr,Ut,_k,$Or,v6e,kOr,SOr,rm,ROr,F6e,POr,BOr,Toe,IOr,NOr,qOr,dw,jOr,Vr,bk,DOr,T6e,GOr,OOr,An,VOr,M6e,XOr,zOr,E6e,WOr,QOr,C6e,UOr,HOr,JOr,w6e,cw,A6e,YOr,KOr,Moe,ZOr,eVr,oVr,mw,fJe,tm,fw,L6e,vk,rVr,y6e,tVr,gJe,ur,Fk,aVr,am,nVr,Eoe,sVr,lVr,Coe,iVr,dVr,cVr,Tk,mVr,x6e,fVr,gVr,hVr,Ht,Mk,uVr,$6e,pVr,_Vr,nm,bVr,k6e,vVr,FVr,woe,TVr,MVr,EVr,gw,CVr,Xr,Ek,wVr,S6e,AVr,LVr,Ln,yVr,R6e,xVr,$Vr,P6e,kVr,SVr,B6e,RVr,PVr,BVr,ie,hw,I6e,IVr,NVr,Aoe,qVr,jVr,DVr,uw,N6e,GVr,OVr,Loe,VVr,XVr,zVr,pw,q6e,WVr,QVr,yoe,UVr,HVr,JVr,_w,j6e,YVr,KVr,xoe,ZVr,eXr,oXr,bw,D6e,rXr,tXr,$oe,aXr,nXr,sXr,vw,G6e,lXr,iXr,koe,dXr,cXr,mXr,Fw,O6e,fXr,gXr,Soe,hXr,uXr,pXr,Tw,V6e,_Xr,bXr,Roe,vXr,FXr,TXr,Mw,X6e,MXr,EXr,Poe,CXr,wXr,AXr,Ew,z6e,LXr,yXr,Boe,xXr,$Xr,kXr,Cw,W6e,SXr,RXr,Ioe,PXr,BXr,IXr,ww,Q6e,NXr,qXr,Noe,jXr,DXr,GXr,Aw,U6e,OXr,VXr,qoe,XXr,zXr,WXr,Lw,H6e,QXr,UXr,joe,HXr,JXr,YXr,yw,J6e,KXr,ZXr,Doe,ezr,ozr,rzr,xw,Y6e,tzr,azr,Goe,nzr,szr,lzr,$w,K6e,izr,dzr,Ooe,czr,mzr,fzr,kw,Z6e,gzr,hzr,Voe,uzr,pzr,_zr,Sw,eAe,bzr,vzr,Xoe,Fzr,Tzr,Mzr,Rw,oAe,Ezr,Czr,zoe,wzr,Azr,Lzr,Pw,rAe,yzr,xzr,Woe,$zr,kzr,Szr,Bw,hJe,sm,Iw,tAe,Ck,Rzr,aAe,Pzr,uJe,pr,wk,Bzr,lm,Izr,Qoe,Nzr,qzr,Uoe,jzr,Dzr,Gzr,Ak,Ozr,nAe,Vzr,Xzr,zzr,Jt,Lk,Wzr,sAe,Qzr,Uzr,im,Hzr,lAe,Jzr,Yzr,Hoe,Kzr,Zzr,eWr,Nw,oWr,zr,yk,rWr,iAe,tWr,aWr,yn,nWr,dAe,sWr,lWr,cAe,iWr,dWr,mAe,cWr,mWr,fWr,de,qw,fAe,gWr,hWr,Joe,uWr,pWr,_Wr,jw,gAe,bWr,vWr,Yoe,FWr,TWr,MWr,Dw,hAe,EWr,CWr,Koe,wWr,AWr,LWr,Gw,uAe,yWr,xWr,Zoe,$Wr,kWr,SWr,Ow,pAe,RWr,PWr,ere,BWr,IWr,NWr,Vw,_Ae,qWr,jWr,ore,DWr,GWr,OWr,Xw,bAe,VWr,XWr,rre,zWr,WWr,QWr,zw,vAe,UWr,HWr,tre,JWr,YWr,KWr,Ww,FAe,ZWr,eQr,are,oQr,rQr,tQr,Qw,TAe,aQr,nQr,nre,sQr,lQr,iQr,Uw,MAe,dQr,cQr,sre,mQr,fQr,gQr,Hw,EAe,hQr,uQr,lre,pQr,_Qr,bQr,Jw,CAe,vQr,FQr,ire,TQr,MQr,EQr,Yw,wAe,CQr,wQr,dre,AQr,LQr,yQr,Kw,AAe,xQr,$Qr,cre,kQr,SQr,RQr,Zw,LAe,PQr,BQr,mre,IQr,NQr,qQr,e6,yAe,jQr,DQr,fre,GQr,OQr,VQr,o6,xAe,XQr,zQr,gre,WQr,QQr,UQr,r6,$Ae,HQr,JQr,hre,YQr,KQr,ZQr,t6,kAe,eUr,oUr,ure,rUr,tUr,aUr,a6,SAe,nUr,sUr,pre,lUr,iUr,dUr,n6,pJe,dm,s6,RAe,xk,cUr,PAe,mUr,_Je,_r,$k,fUr,cm,gUr,_re,hUr,uUr,bre,pUr,_Ur,bUr,kk,vUr,BAe,FUr,TUr,MUr,Yt,Sk,EUr,IAe,CUr,wUr,mm,AUr,NAe,LUr,yUr,vre,xUr,$Ur,kUr,l6,SUr,Wr,Rk,RUr,qAe,PUr,BUr,xn,IUr,jAe,NUr,qUr,DAe,jUr,DUr,GAe,GUr,OUr,VUr,OAe,i6,VAe,XUr,zUr,Fre,WUr,QUr,UUr,d6,bJe,fm,c6,XAe,Pk,HUr,zAe,JUr,vJe,br,Bk,YUr,gm,KUr,Tre,ZUr,eHr,Mre,oHr,rHr,tHr,Ik,aHr,WAe,nHr,sHr,lHr,Kt,Nk,iHr,QAe,dHr,cHr,hm,mHr,UAe,fHr,gHr,Ere,hHr,uHr,pHr,m6,_Hr,Qr,qk,bHr,HAe,vHr,FHr,$n,THr,JAe,MHr,EHr,YAe,CHr,wHr,KAe,AHr,LHr,yHr,ZAe,f6,e7e,xHr,$Hr,Cre,kHr,SHr,RHr,g6,FJe,um,h6,o7e,jk,PHr,r7e,BHr,TJe,vr,Dk,IHr,pm,NHr,wre,qHr,jHr,Are,DHr,GHr,OHr,Gk,VHr,t7e,XHr,zHr,WHr,Zt,Ok,QHr,a7e,UHr,HHr,_m,JHr,n7e,YHr,KHr,Lre,ZHr,eJr,oJr,u6,rJr,Ur,Vk,tJr,s7e,aJr,nJr,kn,sJr,l7e,lJr,iJr,i7e,dJr,cJr,d7e,mJr,fJr,gJr,te,p6,c7e,hJr,uJr,yre,pJr,_Jr,bJr,_6,m7e,vJr,FJr,xre,TJr,MJr,EJr,b6,f7e,CJr,wJr,$re,AJr,LJr,yJr,v6,g7e,xJr,$Jr,kre,kJr,SJr,RJr,F6,h7e,PJr,BJr,Sre,IJr,NJr,qJr,T6,u7e,jJr,DJr,Rre,GJr,OJr,VJr,M6,p7e,XJr,zJr,Pre,WJr,QJr,UJr,E6,_7e,HJr,JJr,Bre,YJr,KJr,ZJr,C6,b7e,eYr,oYr,Ire,rYr,tYr,aYr,w6,v7e,nYr,sYr,Nre,lYr,iYr,dYr,A6,F7e,cYr,mYr,qre,fYr,gYr,hYr,L6,T7e,uYr,pYr,jre,_Yr,bYr,vYr,y6,M7e,FYr,TYr,Dre,MYr,EYr,CYr,x6,E7e,wYr,AYr,Gre,LYr,yYr,xYr,$6,C7e,$Yr,kYr,Ore,SYr,RYr,PYr,k6,w7e,BYr,IYr,Vre,NYr,qYr,jYr,S6,A7e,DYr,GYr,Xre,OYr,VYr,XYr,R6,L7e,zYr,WYr,zre,QYr,UYr,HYr,P6,y7e,JYr,YYr,Wre,KYr,ZYr,eKr,B6,x7e,oKr,rKr,Qre,tKr,aKr,nKr,I6,$7e,sKr,lKr,Ure,iKr,dKr,cKr,N6,k7e,mKr,fKr,Hre,gKr,hKr,uKr,q6,S7e,pKr,_Kr,Jre,bKr,vKr,FKr,j6,R7e,TKr,MKr,Yre,EKr,CKr,wKr,D6,P7e,AKr,LKr,Kre,yKr,xKr,$Kr,G6,B7e,kKr,SKr,Zre,RKr,PKr,BKr,O6,I7e,IKr,NKr,ete,qKr,jKr,DKr,V6,MJe,bm,X6,N7e,Xk,GKr,q7e,OKr,EJe,Fr,zk,VKr,vm,XKr,ote,zKr,WKr,rte,QKr,UKr,HKr,Wk,JKr,j7e,YKr,KKr,ZKr,ea,Qk,eZr,D7e,oZr,rZr,Fm,tZr,G7e,aZr,nZr,tte,sZr,lZr,iZr,z6,dZr,Hr,Uk,cZr,O7e,mZr,fZr,Sn,gZr,V7e,hZr,uZr,X7e,pZr,_Zr,z7e,bZr,vZr,FZr,xe,W6,W7e,TZr,MZr,ate,EZr,CZr,wZr,Q6,Q7e,AZr,LZr,nte,yZr,xZr,$Zr,U6,U7e,kZr,SZr,ste,RZr,PZr,BZr,H6,H7e,IZr,NZr,lte,qZr,jZr,DZr,J6,J7e,GZr,OZr,ite,VZr,XZr,zZr,Y6,Y7e,WZr,QZr,dte,UZr,HZr,JZr,K6,K7e,YZr,KZr,cte,ZZr,eet,oet,Z6,Z7e,ret,tet,mte,aet,net,set,eA,eLe,iet,det,fte,cet,met,fet,oA,oLe,get,het,gte,uet,pet,_et,rA,CJe,Tm,tA,rLe,Hk,bet,tLe,vet,wJe,Tr,Jk,Fet,Mm,Tet,hte,Met,Eet,ute,Cet,wet,Aet,Yk,Let,aLe,yet,xet,$et,oa,Kk,ket,nLe,Set,Ret,Em,Pet,sLe,Bet,Iet,pte,Net,qet,jet,aA,Det,Jr,Zk,Get,lLe,Oet,Vet,Rn,Xet,iLe,zet,Wet,dLe,Qet,Uet,cLe,Het,Jet,Yet,Ee,nA,mLe,Ket,Zet,_te,eot,oot,rot,sA,fLe,tot,aot,bte,not,sot,lot,lA,gLe,iot,dot,vte,cot,mot,fot,iA,hLe,got,hot,Fte,uot,pot,_ot,dA,uLe,bot,vot,Tte,Fot,Tot,Mot,cA,pLe,Eot,Cot,Mte,wot,Aot,Lot,mA,_Le,yot,xot,Ete,$ot,kot,Sot,fA,bLe,Rot,Pot,Cte,Bot,Iot,Not,gA,vLe,qot,jot,wte,Dot,Got,Oot,hA,FLe,Vot,Xot,Ate,zot,Wot,Qot,uA,TLe,Uot,Hot,Lte,Jot,Yot,Kot,pA,MLe,Zot,ert,yte,ort,rrt,trt,_A,ELe,art,nrt,xte,srt,lrt,irt,bA,AJe,Cm,vA,CLe,eS,drt,wLe,crt,LJe,Mr,oS,mrt,wm,frt,$te,grt,hrt,kte,urt,prt,_rt,rS,brt,ALe,vrt,Frt,Trt,ra,tS,Mrt,LLe,Ert,Crt,Am,wrt,yLe,Art,Lrt,Ste,yrt,xrt,$rt,FA,krt,Yr,aS,Srt,xLe,Rrt,Prt,Pn,Brt,$Le,Irt,Nrt,kLe,qrt,jrt,SLe,Drt,Grt,Ort,$e,TA,RLe,Vrt,Xrt,Rte,zrt,Wrt,Qrt,MA,PLe,Urt,Hrt,Pte,Jrt,Yrt,Krt,EA,BLe,Zrt,ett,Bte,ott,rtt,ttt,CA,ILe,att,ntt,Ite,stt,ltt,itt,wA,NLe,dtt,ctt,Nte,mtt,ftt,gtt,AA,qLe,htt,utt,qte,ptt,_tt,btt,LA,jLe,vtt,Ftt,jte,Ttt,Mtt,Ett,yA,DLe,Ctt,wtt,Dte,Att,Ltt,ytt,xA,GLe,xtt,$tt,Gte,ktt,Stt,Rtt,$A,OLe,Ptt,Btt,Ote,Itt,Ntt,qtt,kA,yJe,Lm,SA,VLe,nS,jtt,XLe,Dtt,xJe,Er,sS,Gtt,ym,Ott,Vte,Vtt,Xtt,Xte,ztt,Wtt,Qtt,lS,Utt,zLe,Htt,Jtt,Ytt,ta,iS,Ktt,WLe,Ztt,eat,xm,oat,QLe,rat,tat,zte,aat,nat,sat,RA,lat,Kr,dS,iat,ULe,dat,cat,Bn,mat,HLe,fat,gat,JLe,hat,uat,YLe,pat,_at,bat,ke,PA,KLe,vat,Fat,Wte,Tat,Mat,Eat,BA,ZLe,Cat,wat,Qte,Aat,Lat,yat,IA,eye,xat,$at,Ute,kat,Sat,Rat,NA,oye,Pat,Bat,Hte,Iat,Nat,qat,qA,rye,jat,Dat,Jte,Gat,Oat,Vat,jA,tye,Xat,zat,Yte,Wat,Qat,Uat,DA,aye,Hat,Jat,Kte,Yat,Kat,Zat,GA,nye,ent,ont,Zte,rnt,tnt,ant,OA,sye,nnt,snt,eae,lnt,int,dnt,VA,lye,cnt,mnt,oae,fnt,gnt,hnt,XA,$Je,$m,zA,iye,cS,unt,dye,pnt,kJe,Cr,mS,_nt,km,bnt,rae,vnt,Fnt,tae,Tnt,Mnt,Ent,fS,Cnt,cye,wnt,Ant,Lnt,aa,gS,ynt,mye,xnt,$nt,Sm,knt,fye,Snt,Rnt,aae,Pnt,Bnt,Int,WA,Nnt,Zr,hS,qnt,gye,jnt,Dnt,In,Gnt,hye,Ont,Vnt,uye,Xnt,znt,pye,Wnt,Qnt,Unt,Se,QA,_ye,Hnt,Jnt,nae,Ynt,Knt,Znt,UA,bye,est,ost,sae,rst,tst,ast,HA,vye,nst,sst,lae,lst,ist,dst,JA,Fye,cst,mst,iae,fst,gst,hst,YA,Tye,ust,pst,dae,_st,bst,vst,KA,Mye,Fst,Tst,cae,Mst,Est,Cst,ZA,Eye,wst,Ast,mae,Lst,yst,xst,e7,Cye,$st,kst,fae,Sst,Rst,Pst,o7,wye,Bst,Ist,gae,Nst,qst,jst,r7,Aye,Dst,Gst,hae,Ost,Vst,Xst,t7,SJe,Rm,a7,Lye,uS,zst,yye,Wst,RJe,wr,pS,Qst,Pm,Ust,uae,Hst,Jst,pae,Yst,Kst,Zst,_S,elt,xye,olt,rlt,tlt,na,bS,alt,$ye,nlt,slt,Bm,llt,kye,ilt,dlt,_ae,clt,mlt,flt,n7,glt,et,vS,hlt,Sye,ult,plt,Nn,_lt,Rye,blt,vlt,Pye,Flt,Tlt,Bye,Mlt,Elt,Clt,Re,s7,Iye,wlt,Alt,bae,Llt,ylt,xlt,l7,Nye,$lt,klt,vae,Slt,Rlt,Plt,i7,qye,Blt,Ilt,Fae,Nlt,qlt,jlt,d7,jye,Dlt,Glt,Tae,Olt,Vlt,Xlt,c7,Dye,zlt,Wlt,Mae,Qlt,Ult,Hlt,m7,Gye,Jlt,Ylt,Eae,Klt,Zlt,eit,f7,Oye,oit,rit,Cae,tit,ait,nit,g7,Vye,sit,lit,wae,iit,dit,cit,h7,Xye,mit,fit,Aae,git,hit,uit,u7,zye,pit,_it,Lae,bit,vit,Fit,p7,PJe,Im,_7,Wye,FS,Tit,Qye,Mit,BJe,Ar,TS,Eit,Nm,Cit,yae,wit,Ait,xae,Lit,yit,xit,MS,$it,Uye,kit,Sit,Rit,sa,ES,Pit,Hye,Bit,Iit,qm,Nit,Jye,qit,jit,$ae,Dit,Git,Oit,b7,Vit,ot,CS,Xit,Yye,zit,Wit,qn,Qit,Kye,Uit,Hit,Zye,Jit,Yit,e8e,Kit,Zit,edt,Xe,v7,o8e,odt,rdt,kae,tdt,adt,ndt,F7,r8e,sdt,ldt,Sae,idt,ddt,cdt,T7,t8e,mdt,fdt,Rae,gdt,hdt,udt,M7,a8e,pdt,_dt,Pae,bdt,vdt,Fdt,E7,n8e,Tdt,Mdt,Bae,Edt,Cdt,wdt,C7,s8e,Adt,Ldt,Iae,ydt,xdt,$dt,w7,l8e,kdt,Sdt,Nae,Rdt,Pdt,Bdt,A7,i8e,Idt,Ndt,qae,qdt,jdt,Ddt,L7,IJe,jm,y7,d8e,wS,Gdt,c8e,Odt,NJe,Lr,AS,Vdt,Dm,Xdt,jae,zdt,Wdt,Dae,Qdt,Udt,Hdt,LS,Jdt,m8e,Ydt,Kdt,Zdt,la,yS,ect,f8e,oct,rct,Gm,tct,g8e,act,nct,Gae,sct,lct,ict,x7,dct,rt,xS,cct,h8e,mct,fct,jn,gct,u8e,hct,uct,p8e,pct,_ct,_8e,bct,vct,Fct,ze,$7,b8e,Tct,Mct,Oae,Ect,Cct,wct,k7,v8e,Act,Lct,Vae,yct,xct,$ct,S7,F8e,kct,Sct,Xae,Rct,Pct,Bct,R7,T8e,Ict,Nct,zae,qct,jct,Dct,P7,M8e,Gct,Oct,Wae,Vct,Xct,zct,B7,E8e,Wct,Qct,Qae,Uct,Hct,Jct,I7,C8e,Yct,Kct,Uae,Zct,emt,omt,N7,w8e,rmt,tmt,Hae,amt,nmt,smt,q7,qJe,Om,j7,A8e,$S,lmt,L8e,imt,jJe,yr,kS,dmt,Vm,cmt,Jae,mmt,fmt,Yae,gmt,hmt,umt,SS,pmt,y8e,_mt,bmt,vmt,ia,RS,Fmt,x8e,Tmt,Mmt,Xm,Emt,$8e,Cmt,wmt,Kae,Amt,Lmt,ymt,D7,xmt,tt,PS,$mt,k8e,kmt,Smt,Dn,Rmt,S8e,Pmt,Bmt,R8e,Imt,Nmt,P8e,qmt,jmt,Dmt,B8e,G7,I8e,Gmt,Omt,Zae,Vmt,Xmt,zmt,O7,DJe,zm,V7,N8e,BS,Wmt,q8e,Qmt,GJe,xr,IS,Umt,Wm,Hmt,ene,Jmt,Ymt,one,Kmt,Zmt,eft,NS,oft,j8e,rft,tft,aft,da,qS,nft,D8e,sft,lft,Qm,ift,G8e,dft,cft,rne,mft,fft,gft,X7,hft,at,jS,uft,O8e,pft,_ft,Gn,bft,V8e,vft,Fft,X8e,Tft,Mft,z8e,Eft,Cft,wft,DS,z7,W8e,Aft,Lft,tne,yft,xft,$ft,W7,Q8e,kft,Sft,ane,Rft,Pft,Bft,Q7,OJe,Um,U7,U8e,GS,Ift,H8e,Nft,VJe,$r,OS,qft,Hm,jft,nne,Dft,Gft,sne,Oft,Vft,Xft,VS,zft,J8e,Wft,Qft,Uft,ca,XS,Hft,Y8e,Jft,Yft,Jm,Kft,K8e,Zft,egt,lne,ogt,rgt,tgt,H7,agt,nt,zS,ngt,Z8e,sgt,lgt,On,igt,e9e,dgt,cgt,o9e,mgt,fgt,r9e,ggt,hgt,ugt,t9e,J7,a9e,pgt,_gt,ine,bgt,vgt,Fgt,Y7,XJe;return d=new oe({}),ja=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),A8=new oe({}),L8=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nf=new Tgt({props:{warning:!0,$$slots:{default:[ina]},$$scope:{ctx:$}}}),y8=new oe({}),x8=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L628"}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L651"}}),Eh=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[dna]},$$scope:{ctx:$}}}),R8=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L774"}}),P8=new oe({}),B8=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L418"}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L432"}}),nu=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[cna]},$$scope:{ctx:$}}}),j8=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L633"}}),D8=new oe({}),G8=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Wu=new Tgt({props:{$$slots:{default:[mna]},$$scope:{ctx:$}}}),Qu=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[fna]},$$scope:{ctx:$}}}),z8=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),W8=new oe({}),Q8=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L91"}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L105"}}),pp=new Tgt({props:{$$slots:{default:[gna]},$$scope:{ctx:$}}}),_p=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[hna]},$$scope:{ctx:$}}}),Y8=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L258"}}),K8=new oe({}),Z8=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L811"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Fp=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[una]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[pna]},$$scope:{ctx:$}}}),t9=new oe({}),a9=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L818"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[_na]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Lb=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bna]},$$scope:{ctx:$}}}),i9=new oe({}),d9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L833"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xb=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[vna]},$$scope:{ctx:$}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_v=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Fna]},$$scope:{ctx:$}}}),g9=new oe({}),h9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L840"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vv=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Tna]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n1=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Mna]},$$scope:{ctx:$}}}),b9=new oe({}),v9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L847"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l1=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ena]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Cna]},$$scope:{ctx:$}}}),E9=new oe({}),C9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L856"}}),A9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[wna]},$$scope:{ctx:$}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ana]},$$scope:{ctx:$}}}),y9=new oe({}),x9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L901"}}),k9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Lna]},$$scope:{ctx:$}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yna]},$$scope:{ctx:$}}}),R9=new oe({}),P9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L908"}}),I9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xna]},$$scope:{ctx:$}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$na]},$$scope:{ctx:$}}}),q9=new oe({}),j9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),G9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[kna]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Sna]},$$scope:{ctx:$}}}),V9=new oe({}),X9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L865"}}),W9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Rna]},$$scope:{ctx:$}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Pna]},$$scope:{ctx:$}}}),U9=new oe({}),H9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L872"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Bna]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Ina]},$$scope:{ctx:$}}}),Z9=new oe({}),ex=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L917"}}),rx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Nna]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qna]},$$scope:{ctx:$}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L956"}}),lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[jna]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Dna]},$$scope:{ctx:$}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L963"}}),fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Gna]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Ona]},$$scope:{ctx:$}}}),hx=new oe({}),ux=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L883"}}),_x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Vna]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Xna]},$$scope:{ctx:$}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L970"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[zna]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Wna]},$$scope:{ctx:$}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L993"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Qna]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Una]},$$scope:{ctx:$}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L977"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Hna]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Jna]},$$scope:{ctx:$}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L984"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Yna]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Kna]},$$scope:{ctx:$}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1002"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Zna]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[esa]},$$scope:{ctx:$}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1009"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[osa]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[rsa]},$$scope:{ctx:$}}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L949"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tsa]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[asa]},$$scope:{ctx:$}}}),r$=new oe({}),t$=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L924"}}),n$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nsa]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ssa]},$$scope:{ctx:$}}}),l$=new oe({}),i$=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L931"}}),c$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lsa]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[isa]},$$scope:{ctx:$}}}),f$=new oe({}),g$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L940"}}),u$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dsa]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[csa]},$$scope:{ctx:$}}}),_$=new oe({}),b$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),F$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[msa]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fsa]},$$scope:{ctx:$}}}),M$=new oe({}),E$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),w$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gsa]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hsa]},$$scope:{ctx:$}}}),L$=new oe({}),y$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L445"}}),$$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[usa]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[psa]},$$scope:{ctx:$}}}),S$=new oe({}),R$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L461"}}),B$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[_sa]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bsa]},$$scope:{ctx:$}}}),N$=new oe({}),q$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L470"}}),D$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[vsa]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Fsa]},$$scope:{ctx:$}}}),O$=new oe({}),V$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),z$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Tsa]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Msa]},$$scope:{ctx:$}}}),Q$=new oe({}),U$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),J$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Esa]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Csa]},$$scope:{ctx:$}}}),K$=new oe({}),Z$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),ok=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wsa]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Asa]},$$scope:{ctx:$}}}),tk=new oe({}),ak=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),sk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Lsa]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ysa]},$$scope:{ctx:$}}}),ik=new oe({}),dk=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L545"}}),mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xsa]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$sa]},$$scope:{ctx:$}}}),hk=new oe({}),uk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),_k=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ksa]},$$scope:{ctx:$}}}),bk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Ssa]},$$scope:{ctx:$}}}),vk=new oe({}),Fk=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L529"}}),Mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Rsa]},$$scope:{ctx:$}}}),Ek=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Psa]},$$scope:{ctx:$}}}),Ck=new oe({}),wk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),Lk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Bsa]},$$scope:{ctx:$}}}),yk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Isa]},$$scope:{ctx:$}}}),xk=new oe({}),$k=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),Sk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Nsa]},$$scope:{ctx:$}}}),Rk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qsa]},$$scope:{ctx:$}}}),Pk=new oe({}),Bk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L554"}}),Nk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[jsa]},$$scope:{ctx:$}}}),qk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g6=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Dsa]},$$scope:{ctx:$}}}),jk=new oe({}),Dk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u6=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Gsa]},$$scope:{ctx:$}}}),Vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V6=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Osa]},$$scope:{ctx:$}}}),Xk=new oe({}),zk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Qk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z6=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Vsa]},$$scope:{ctx:$}}}),Uk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Xsa]},$$scope:{ctx:$}}}),Hk=new oe({}),Jk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Kk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aA=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[zsa]},$$scope:{ctx:$}}}),Zk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Wsa]},$$scope:{ctx:$}}}),eS=new oe({}),oS=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),tS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Qsa]},$$scope:{ctx:$}}}),aS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Usa]},$$scope:{ctx:$}}}),nS=new oe({}),sS=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),iS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Hsa]},$$scope:{ctx:$}}}),dS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Jsa]},$$scope:{ctx:$}}}),cS=new oe({}),mS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),gS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WA=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Ysa]},$$scope:{ctx:$}}}),hS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ksa]},$$scope:{ctx:$}}}),uS=new oe({}),pS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),bS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Zsa]},$$scope:{ctx:$}}}),vS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ela]},$$scope:{ctx:$}}}),FS=new oe({}),TS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),ES=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b7=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ola]},$$scope:{ctx:$}}}),CS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rla]},$$scope:{ctx:$}}}),wS=new oe({}),AS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),yS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[tla]},$$scope:{ctx:$}}}),xS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ala]},$$scope:{ctx:$}}}),$S=new oe({}),kS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),RS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nla]},$$scope:{ctx:$}}}),PS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O7=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sla]},$$scope:{ctx:$}}}),BS=new oe({}),IS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),qS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X7=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[lla]},$$scope:{ctx:$}}}),jS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ila]},$$scope:{ctx:$}}}),GS=new oe({}),OS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),XS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[dla]},$$scope:{ctx:$}}}),zS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cla]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),ef=l(),mt=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),M8=o("from_pretrained()"),of=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),Ue=a("p"),zi=o("Instantiating one of "),Xn=a("a"),E8=o("AutoConfig"),zn=o(", "),Wn=a("a"),C8=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),w8=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rf=l(),F(ja.$$.fragment),He=l(),Ae=a("p"),uP=o("will create a model that is an instance of "),Ui=a("a"),pP=o("BertModel"),_P=o("."),Lo=l(),Da=a("p"),bP=o("There is one class of "),tf=a("code"),vP=o("AutoModel"),aZe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BUe=l(),Hi=a("h2"),af=a("a"),lle=a("span"),F(A8.$$.fragment),nZe=l(),ile=a("span"),sZe=o("Extending the Auto Classes"),IUe=l(),Un=a("p"),lZe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dle=a("code"),iZe=o("NewModel"),dZe=o(", make sure you have a "),cle=a("code"),cZe=o("NewModelConfig"),mZe=o(` then you can add those to the auto
classes like this:`),NUe=l(),F(L8.$$.fragment),qUe=l(),FP=a("p"),fZe=o("You will then be able to use the auto classes like you would usually do!"),jUe=l(),F(nf.$$.fragment),DUe=l(),Ji=a("h2"),sf=a("a"),mle=a("span"),F(y8.$$.fragment),gZe=l(),fle=a("span"),hZe=o("AutoConfig"),GUe=l(),yo=a("div"),F(x8.$$.fragment),uZe=l(),$8=a("p"),pZe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),TP=a("a"),_Ze=o("from_pretrained()"),bZe=o(" class method."),vZe=l(),k8=a("p"),FZe=o("This class cannot be instantiated directly using "),gle=a("code"),TZe=o("__init__()"),MZe=o(" (throws an error)."),EZe=l(),kr=a("div"),F(S8.$$.fragment),CZe=l(),hle=a("p"),wZe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),AZe=l(),Yi=a("p"),LZe=o("The configuration class to instantiate is selected based on the "),ule=a("code"),yZe=o("model_type"),xZe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ple=a("code"),$Ze=o("pretrained_model_name_or_path"),kZe=o(":"),SZe=l(),A=a("ul"),lf=a("li"),_le=a("strong"),RZe=o("albert"),PZe=o(" \u2014 "),MP=a("a"),BZe=o("AlbertConfig"),IZe=o(" (ALBERT model)"),NZe=l(),df=a("li"),ble=a("strong"),qZe=o("bart"),jZe=o(" \u2014 "),EP=a("a"),DZe=o("BartConfig"),GZe=o(" (BART model)"),OZe=l(),cf=a("li"),vle=a("strong"),VZe=o("beit"),XZe=o(" \u2014 "),CP=a("a"),zZe=o("BeitConfig"),WZe=o(" (BEiT model)"),QZe=l(),mf=a("li"),Fle=a("strong"),UZe=o("bert"),HZe=o(" \u2014 "),wP=a("a"),JZe=o("BertConfig"),YZe=o(" (BERT model)"),KZe=l(),ff=a("li"),Tle=a("strong"),ZZe=o("bert-generation"),eeo=o(" \u2014 "),AP=a("a"),oeo=o("BertGenerationConfig"),reo=o(" (Bert Generation model)"),teo=l(),gf=a("li"),Mle=a("strong"),aeo=o("big_bird"),neo=o(" \u2014 "),LP=a("a"),seo=o("BigBirdConfig"),leo=o(" (BigBird model)"),ieo=l(),hf=a("li"),Ele=a("strong"),deo=o("bigbird_pegasus"),ceo=o(" \u2014 "),yP=a("a"),meo=o("BigBirdPegasusConfig"),feo=o(" (BigBird-Pegasus model)"),geo=l(),uf=a("li"),Cle=a("strong"),heo=o("blenderbot"),ueo=o(" \u2014 "),xP=a("a"),peo=o("BlenderbotConfig"),_eo=o(" (Blenderbot model)"),beo=l(),pf=a("li"),wle=a("strong"),veo=o("blenderbot-small"),Feo=o(" \u2014 "),$P=a("a"),Teo=o("BlenderbotSmallConfig"),Meo=o(" (BlenderbotSmall model)"),Eeo=l(),_f=a("li"),Ale=a("strong"),Ceo=o("bloom"),weo=o(" \u2014 "),kP=a("a"),Aeo=o("BloomConfig"),Leo=o(" (BLOOM model)"),yeo=l(),bf=a("li"),Lle=a("strong"),xeo=o("camembert"),$eo=o(" \u2014 "),SP=a("a"),keo=o("CamembertConfig"),Seo=o(" (CamemBERT model)"),Reo=l(),vf=a("li"),yle=a("strong"),Peo=o("canine"),Beo=o(" \u2014 "),RP=a("a"),Ieo=o("CanineConfig"),Neo=o(" (CANINE model)"),qeo=l(),Ff=a("li"),xle=a("strong"),jeo=o("clip"),Deo=o(" \u2014 "),PP=a("a"),Geo=o("CLIPConfig"),Oeo=o(" (CLIP model)"),Veo=l(),Tf=a("li"),$le=a("strong"),Xeo=o("codegen"),zeo=o(" \u2014 "),BP=a("a"),Weo=o("CodeGenConfig"),Qeo=o(" (CodeGen model)"),Ueo=l(),Mf=a("li"),kle=a("strong"),Heo=o("convbert"),Jeo=o(" \u2014 "),IP=a("a"),Yeo=o("ConvBertConfig"),Keo=o(" (ConvBERT model)"),Zeo=l(),Ef=a("li"),Sle=a("strong"),eoo=o("convnext"),ooo=o(" \u2014 "),NP=a("a"),roo=o("ConvNextConfig"),too=o(" (ConvNeXT model)"),aoo=l(),Cf=a("li"),Rle=a("strong"),noo=o("ctrl"),soo=o(" \u2014 "),qP=a("a"),loo=o("CTRLConfig"),ioo=o(" (CTRL model)"),doo=l(),wf=a("li"),Ple=a("strong"),coo=o("cvt"),moo=o(" \u2014 "),jP=a("a"),foo=o("CvtConfig"),goo=o(" (CvT model)"),hoo=l(),Af=a("li"),Ble=a("strong"),uoo=o("data2vec-audio"),poo=o(" \u2014 "),DP=a("a"),_oo=o("Data2VecAudioConfig"),boo=o(" (Data2VecAudio model)"),voo=l(),Lf=a("li"),Ile=a("strong"),Foo=o("data2vec-text"),Too=o(" \u2014 "),GP=a("a"),Moo=o("Data2VecTextConfig"),Eoo=o(" (Data2VecText model)"),Coo=l(),yf=a("li"),Nle=a("strong"),woo=o("data2vec-vision"),Aoo=o(" \u2014 "),OP=a("a"),Loo=o("Data2VecVisionConfig"),yoo=o(" (Data2VecVision model)"),xoo=l(),xf=a("li"),qle=a("strong"),$oo=o("deberta"),koo=o(" \u2014 "),VP=a("a"),Soo=o("DebertaConfig"),Roo=o(" (DeBERTa model)"),Poo=l(),$f=a("li"),jle=a("strong"),Boo=o("deberta-v2"),Ioo=o(" \u2014 "),XP=a("a"),Noo=o("DebertaV2Config"),qoo=o(" (DeBERTa-v2 model)"),joo=l(),kf=a("li"),Dle=a("strong"),Doo=o("decision_transformer"),Goo=o(" \u2014 "),zP=a("a"),Ooo=o("DecisionTransformerConfig"),Voo=o(" (Decision Transformer model)"),Xoo=l(),Sf=a("li"),Gle=a("strong"),zoo=o("deit"),Woo=o(" \u2014 "),WP=a("a"),Qoo=o("DeiTConfig"),Uoo=o(" (DeiT model)"),Hoo=l(),Rf=a("li"),Ole=a("strong"),Joo=o("detr"),Yoo=o(" \u2014 "),QP=a("a"),Koo=o("DetrConfig"),Zoo=o(" (DETR model)"),ero=l(),Pf=a("li"),Vle=a("strong"),oro=o("distilbert"),rro=o(" \u2014 "),UP=a("a"),tro=o("DistilBertConfig"),aro=o(" (DistilBERT model)"),nro=l(),Bf=a("li"),Xle=a("strong"),sro=o("donut-swin"),lro=o(" \u2014 "),HP=a("a"),iro=o("DonutSwinConfig"),dro=o(" (DonutSwin model)"),cro=l(),If=a("li"),zle=a("strong"),mro=o("dpr"),fro=o(" \u2014 "),JP=a("a"),gro=o("DPRConfig"),hro=o(" (DPR model)"),uro=l(),Nf=a("li"),Wle=a("strong"),pro=o("dpt"),_ro=o(" \u2014 "),YP=a("a"),bro=o("DPTConfig"),vro=o(" (DPT model)"),Fro=l(),qf=a("li"),Qle=a("strong"),Tro=o("electra"),Mro=o(" \u2014 "),KP=a("a"),Ero=o("ElectraConfig"),Cro=o(" (ELECTRA model)"),wro=l(),jf=a("li"),Ule=a("strong"),Aro=o("encoder-decoder"),Lro=o(" \u2014 "),ZP=a("a"),yro=o("EncoderDecoderConfig"),xro=o(" (Encoder decoder model)"),$ro=l(),Df=a("li"),Hle=a("strong"),kro=o("flaubert"),Sro=o(" \u2014 "),eB=a("a"),Rro=o("FlaubertConfig"),Pro=o(" (FlauBERT model)"),Bro=l(),Gf=a("li"),Jle=a("strong"),Iro=o("flava"),Nro=o(" \u2014 "),oB=a("a"),qro=o("FlavaConfig"),jro=o(" (FLAVA model)"),Dro=l(),Of=a("li"),Yle=a("strong"),Gro=o("fnet"),Oro=o(" \u2014 "),rB=a("a"),Vro=o("FNetConfig"),Xro=o(" (FNet model)"),zro=l(),Vf=a("li"),Kle=a("strong"),Wro=o("fsmt"),Qro=o(" \u2014 "),tB=a("a"),Uro=o("FSMTConfig"),Hro=o(" (FairSeq Machine-Translation model)"),Jro=l(),Xf=a("li"),Zle=a("strong"),Yro=o("funnel"),Kro=o(" \u2014 "),aB=a("a"),Zro=o("FunnelConfig"),eto=o(" (Funnel Transformer model)"),oto=l(),zf=a("li"),eie=a("strong"),rto=o("glpn"),tto=o(" \u2014 "),nB=a("a"),ato=o("GLPNConfig"),nto=o(" (GLPN model)"),sto=l(),Wf=a("li"),oie=a("strong"),lto=o("gpt2"),ito=o(" \u2014 "),sB=a("a"),dto=o("GPT2Config"),cto=o(" (OpenAI GPT-2 model)"),mto=l(),Qf=a("li"),rie=a("strong"),fto=o("gpt_neo"),gto=o(" \u2014 "),lB=a("a"),hto=o("GPTNeoConfig"),uto=o(" (GPT Neo model)"),pto=l(),Uf=a("li"),tie=a("strong"),_to=o("gpt_neox"),bto=o(" \u2014 "),iB=a("a"),vto=o("GPTNeoXConfig"),Fto=o(" (GPT NeoX model)"),Tto=l(),Hf=a("li"),aie=a("strong"),Mto=o("gptj"),Eto=o(" \u2014 "),dB=a("a"),Cto=o("GPTJConfig"),wto=o(" (GPT-J model)"),Ato=l(),Jf=a("li"),nie=a("strong"),Lto=o("groupvit"),yto=o(" \u2014 "),cB=a("a"),xto=o("GroupViTConfig"),$to=o(" (GroupViT model)"),kto=l(),Yf=a("li"),sie=a("strong"),Sto=o("hubert"),Rto=o(" \u2014 "),mB=a("a"),Pto=o("HubertConfig"),Bto=o(" (Hubert model)"),Ito=l(),Kf=a("li"),lie=a("strong"),Nto=o("ibert"),qto=o(" \u2014 "),fB=a("a"),jto=o("IBertConfig"),Dto=o(" (I-BERT model)"),Gto=l(),Zf=a("li"),iie=a("strong"),Oto=o("imagegpt"),Vto=o(" \u2014 "),gB=a("a"),Xto=o("ImageGPTConfig"),zto=o(" (ImageGPT model)"),Wto=l(),eg=a("li"),die=a("strong"),Qto=o("layoutlm"),Uto=o(" \u2014 "),hB=a("a"),Hto=o("LayoutLMConfig"),Jto=o(" (LayoutLM model)"),Yto=l(),og=a("li"),cie=a("strong"),Kto=o("layoutlmv2"),Zto=o(" \u2014 "),uB=a("a"),eao=o("LayoutLMv2Config"),oao=o(" (LayoutLMv2 model)"),rao=l(),rg=a("li"),mie=a("strong"),tao=o("layoutlmv3"),aao=o(" \u2014 "),pB=a("a"),nao=o("LayoutLMv3Config"),sao=o(" (LayoutLMv3 model)"),lao=l(),tg=a("li"),fie=a("strong"),iao=o("led"),dao=o(" \u2014 "),_B=a("a"),cao=o("LEDConfig"),mao=o(" (LED model)"),fao=l(),ag=a("li"),gie=a("strong"),gao=o("levit"),hao=o(" \u2014 "),bB=a("a"),uao=o("LevitConfig"),pao=o(" (LeViT model)"),_ao=l(),ng=a("li"),hie=a("strong"),bao=o("longformer"),vao=o(" \u2014 "),vB=a("a"),Fao=o("LongformerConfig"),Tao=o(" (Longformer model)"),Mao=l(),sg=a("li"),uie=a("strong"),Eao=o("longt5"),Cao=o(" \u2014 "),FB=a("a"),wao=o("LongT5Config"),Aao=o(" (LongT5 model)"),Lao=l(),lg=a("li"),pie=a("strong"),yao=o("luke"),xao=o(" \u2014 "),TB=a("a"),$ao=o("LukeConfig"),kao=o(" (LUKE model)"),Sao=l(),ig=a("li"),_ie=a("strong"),Rao=o("lxmert"),Pao=o(" \u2014 "),MB=a("a"),Bao=o("LxmertConfig"),Iao=o(" (LXMERT model)"),Nao=l(),dg=a("li"),bie=a("strong"),qao=o("m2m_100"),jao=o(" \u2014 "),EB=a("a"),Dao=o("M2M100Config"),Gao=o(" (M2M100 model)"),Oao=l(),cg=a("li"),vie=a("strong"),Vao=o("marian"),Xao=o(" \u2014 "),CB=a("a"),zao=o("MarianConfig"),Wao=o(" (Marian model)"),Qao=l(),mg=a("li"),Fie=a("strong"),Uao=o("maskformer"),Hao=o(" \u2014 "),wB=a("a"),Jao=o("MaskFormerConfig"),Yao=o(" (MaskFormer model)"),Kao=l(),fg=a("li"),Tie=a("strong"),Zao=o("mbart"),eno=o(" \u2014 "),AB=a("a"),ono=o("MBartConfig"),rno=o(" (mBART model)"),tno=l(),gg=a("li"),Mie=a("strong"),ano=o("mctct"),nno=o(" \u2014 "),LB=a("a"),sno=o("MCTCTConfig"),lno=o(" (M-CTC-T model)"),ino=l(),hg=a("li"),Eie=a("strong"),dno=o("megatron-bert"),cno=o(" \u2014 "),yB=a("a"),mno=o("MegatronBertConfig"),fno=o(" (Megatron-BERT model)"),gno=l(),ug=a("li"),Cie=a("strong"),hno=o("mobilebert"),uno=o(" \u2014 "),xB=a("a"),pno=o("MobileBertConfig"),_no=o(" (MobileBERT model)"),bno=l(),pg=a("li"),wie=a("strong"),vno=o("mobilevit"),Fno=o(" \u2014 "),$B=a("a"),Tno=o("MobileViTConfig"),Mno=o(" (MobileViT model)"),Eno=l(),_g=a("li"),Aie=a("strong"),Cno=o("mpnet"),wno=o(" \u2014 "),kB=a("a"),Ano=o("MPNetConfig"),Lno=o(" (MPNet model)"),yno=l(),bg=a("li"),Lie=a("strong"),xno=o("mt5"),$no=o(" \u2014 "),SB=a("a"),kno=o("MT5Config"),Sno=o(" (MT5 model)"),Rno=l(),vg=a("li"),yie=a("strong"),Pno=o("mvp"),Bno=o(" \u2014 "),RB=a("a"),Ino=o("MvpConfig"),Nno=o(" (MVP model)"),qno=l(),Fg=a("li"),xie=a("strong"),jno=o("nezha"),Dno=o(" \u2014 "),PB=a("a"),Gno=o("NezhaConfig"),Ono=o(" (Nezha model)"),Vno=l(),Tg=a("li"),$ie=a("strong"),Xno=o("nystromformer"),zno=o(" \u2014 "),BB=a("a"),Wno=o("NystromformerConfig"),Qno=o(" (Nystr\xF6mformer model)"),Uno=l(),Mg=a("li"),kie=a("strong"),Hno=o("openai-gpt"),Jno=o(" \u2014 "),IB=a("a"),Yno=o("OpenAIGPTConfig"),Kno=o(" (OpenAI GPT model)"),Zno=l(),Eg=a("li"),Sie=a("strong"),eso=o("opt"),oso=o(" \u2014 "),NB=a("a"),rso=o("OPTConfig"),tso=o(" (OPT model)"),aso=l(),Cg=a("li"),Rie=a("strong"),nso=o("owlvit"),sso=o(" \u2014 "),qB=a("a"),lso=o("OwlViTConfig"),iso=o(" (OWL-ViT model)"),dso=l(),wg=a("li"),Pie=a("strong"),cso=o("pegasus"),mso=o(" \u2014 "),jB=a("a"),fso=o("PegasusConfig"),gso=o(" (Pegasus model)"),hso=l(),Ag=a("li"),Bie=a("strong"),uso=o("pegasus_x"),pso=o(" \u2014 "),DB=a("a"),_so=o("PegasusXConfig"),bso=o(" (PEGASUS-X model)"),vso=l(),Lg=a("li"),Iie=a("strong"),Fso=o("perceiver"),Tso=o(" \u2014 "),GB=a("a"),Mso=o("PerceiverConfig"),Eso=o(" (Perceiver model)"),Cso=l(),yg=a("li"),Nie=a("strong"),wso=o("plbart"),Aso=o(" \u2014 "),OB=a("a"),Lso=o("PLBartConfig"),yso=o(" (PLBart model)"),xso=l(),xg=a("li"),qie=a("strong"),$so=o("poolformer"),kso=o(" \u2014 "),VB=a("a"),Sso=o("PoolFormerConfig"),Rso=o(" (PoolFormer model)"),Pso=l(),$g=a("li"),jie=a("strong"),Bso=o("prophetnet"),Iso=o(" \u2014 "),XB=a("a"),Nso=o("ProphetNetConfig"),qso=o(" (ProphetNet model)"),jso=l(),kg=a("li"),Die=a("strong"),Dso=o("qdqbert"),Gso=o(" \u2014 "),zB=a("a"),Oso=o("QDQBertConfig"),Vso=o(" (QDQBert model)"),Xso=l(),Sg=a("li"),Gie=a("strong"),zso=o("rag"),Wso=o(" \u2014 "),WB=a("a"),Qso=o("RagConfig"),Uso=o(" (RAG model)"),Hso=l(),Rg=a("li"),Oie=a("strong"),Jso=o("realm"),Yso=o(" \u2014 "),QB=a("a"),Kso=o("RealmConfig"),Zso=o(" (REALM model)"),elo=l(),Pg=a("li"),Vie=a("strong"),olo=o("reformer"),rlo=o(" \u2014 "),UB=a("a"),tlo=o("ReformerConfig"),alo=o(" (Reformer model)"),nlo=l(),Bg=a("li"),Xie=a("strong"),slo=o("regnet"),llo=o(" \u2014 "),HB=a("a"),ilo=o("RegNetConfig"),dlo=o(" (RegNet model)"),clo=l(),Ig=a("li"),zie=a("strong"),mlo=o("rembert"),flo=o(" \u2014 "),JB=a("a"),glo=o("RemBertConfig"),hlo=o(" (RemBERT model)"),ulo=l(),Ng=a("li"),Wie=a("strong"),plo=o("resnet"),_lo=o(" \u2014 "),YB=a("a"),blo=o("ResNetConfig"),vlo=o(" (ResNet model)"),Flo=l(),qg=a("li"),Qie=a("strong"),Tlo=o("retribert"),Mlo=o(" \u2014 "),KB=a("a"),Elo=o("RetriBertConfig"),Clo=o(" (RetriBERT model)"),wlo=l(),jg=a("li"),Uie=a("strong"),Alo=o("roberta"),Llo=o(" \u2014 "),ZB=a("a"),ylo=o("RobertaConfig"),xlo=o(" (RoBERTa model)"),$lo=l(),Dg=a("li"),Hie=a("strong"),klo=o("roformer"),Slo=o(" \u2014 "),eI=a("a"),Rlo=o("RoFormerConfig"),Plo=o(" (RoFormer model)"),Blo=l(),Gg=a("li"),Jie=a("strong"),Ilo=o("segformer"),Nlo=o(" \u2014 "),oI=a("a"),qlo=o("SegformerConfig"),jlo=o(" (SegFormer model)"),Dlo=l(),Og=a("li"),Yie=a("strong"),Glo=o("sew"),Olo=o(" \u2014 "),rI=a("a"),Vlo=o("SEWConfig"),Xlo=o(" (SEW model)"),zlo=l(),Vg=a("li"),Kie=a("strong"),Wlo=o("sew-d"),Qlo=o(" \u2014 "),tI=a("a"),Ulo=o("SEWDConfig"),Hlo=o(" (SEW-D model)"),Jlo=l(),Xg=a("li"),Zie=a("strong"),Ylo=o("speech-encoder-decoder"),Klo=o(" \u2014 "),aI=a("a"),Zlo=o("SpeechEncoderDecoderConfig"),eio=o(" (Speech Encoder decoder model)"),oio=l(),zg=a("li"),ede=a("strong"),rio=o("speech_to_text"),tio=o(" \u2014 "),nI=a("a"),aio=o("Speech2TextConfig"),nio=o(" (Speech2Text model)"),sio=l(),Wg=a("li"),ode=a("strong"),lio=o("speech_to_text_2"),iio=o(" \u2014 "),sI=a("a"),dio=o("Speech2Text2Config"),cio=o(" (Speech2Text2 model)"),mio=l(),Qg=a("li"),rde=a("strong"),fio=o("splinter"),gio=o(" \u2014 "),lI=a("a"),hio=o("SplinterConfig"),uio=o(" (Splinter model)"),pio=l(),Ug=a("li"),tde=a("strong"),_io=o("squeezebert"),bio=o(" \u2014 "),iI=a("a"),vio=o("SqueezeBertConfig"),Fio=o(" (SqueezeBERT model)"),Tio=l(),Hg=a("li"),ade=a("strong"),Mio=o("swin"),Eio=o(" \u2014 "),dI=a("a"),Cio=o("SwinConfig"),wio=o(" (Swin Transformer model)"),Aio=l(),Jg=a("li"),nde=a("strong"),Lio=o("swinv2"),yio=o(" \u2014 "),cI=a("a"),xio=o("Swinv2Config"),$io=o(" (Swin Transformer V2 model)"),kio=l(),Yg=a("li"),sde=a("strong"),Sio=o("t5"),Rio=o(" \u2014 "),mI=a("a"),Pio=o("T5Config"),Bio=o(" (T5 model)"),Iio=l(),Kg=a("li"),lde=a("strong"),Nio=o("tapas"),qio=o(" \u2014 "),fI=a("a"),jio=o("TapasConfig"),Dio=o(" (TAPAS model)"),Gio=l(),Zg=a("li"),ide=a("strong"),Oio=o("trajectory_transformer"),Vio=o(" \u2014 "),gI=a("a"),Xio=o("TrajectoryTransformerConfig"),zio=o(" (Trajectory Transformer model)"),Wio=l(),eh=a("li"),dde=a("strong"),Qio=o("transfo-xl"),Uio=o(" \u2014 "),hI=a("a"),Hio=o("TransfoXLConfig"),Jio=o(" (Transformer-XL model)"),Yio=l(),oh=a("li"),cde=a("strong"),Kio=o("trocr"),Zio=o(" \u2014 "),uI=a("a"),edo=o("TrOCRConfig"),odo=o(" (TrOCR model)"),rdo=l(),rh=a("li"),mde=a("strong"),tdo=o("unispeech"),ado=o(" \u2014 "),pI=a("a"),ndo=o("UniSpeechConfig"),sdo=o(" (UniSpeech model)"),ldo=l(),th=a("li"),fde=a("strong"),ido=o("unispeech-sat"),ddo=o(" \u2014 "),_I=a("a"),cdo=o("UniSpeechSatConfig"),mdo=o(" (UniSpeechSat model)"),fdo=l(),ah=a("li"),gde=a("strong"),gdo=o("van"),hdo=o(" \u2014 "),bI=a("a"),udo=o("VanConfig"),pdo=o(" (VAN model)"),_do=l(),nh=a("li"),hde=a("strong"),bdo=o("videomae"),vdo=o(" \u2014 "),vI=a("a"),Fdo=o("VideoMAEConfig"),Tdo=o(" (VideoMAE model)"),Mdo=l(),sh=a("li"),ude=a("strong"),Edo=o("vilt"),Cdo=o(" \u2014 "),FI=a("a"),wdo=o("ViltConfig"),Ado=o(" (ViLT model)"),Ldo=l(),lh=a("li"),pde=a("strong"),ydo=o("vision-encoder-decoder"),xdo=o(" \u2014 "),TI=a("a"),$do=o("VisionEncoderDecoderConfig"),kdo=o(" (Vision Encoder decoder model)"),Sdo=l(),ih=a("li"),_de=a("strong"),Rdo=o("vision-text-dual-encoder"),Pdo=o(" \u2014 "),MI=a("a"),Bdo=o("VisionTextDualEncoderConfig"),Ido=o(" (VisionTextDualEncoder model)"),Ndo=l(),dh=a("li"),bde=a("strong"),qdo=o("visual_bert"),jdo=o(" \u2014 "),EI=a("a"),Ddo=o("VisualBertConfig"),Gdo=o(" (VisualBERT model)"),Odo=l(),ch=a("li"),vde=a("strong"),Vdo=o("vit"),Xdo=o(" \u2014 "),CI=a("a"),zdo=o("ViTConfig"),Wdo=o(" (ViT model)"),Qdo=l(),mh=a("li"),Fde=a("strong"),Udo=o("vit_mae"),Hdo=o(" \u2014 "),wI=a("a"),Jdo=o("ViTMAEConfig"),Ydo=o(" (ViTMAE model)"),Kdo=l(),fh=a("li"),Tde=a("strong"),Zdo=o("wav2vec2"),eco=o(" \u2014 "),AI=a("a"),oco=o("Wav2Vec2Config"),rco=o(" (Wav2Vec2 model)"),tco=l(),gh=a("li"),Mde=a("strong"),aco=o("wav2vec2-conformer"),nco=o(" \u2014 "),LI=a("a"),sco=o("Wav2Vec2ConformerConfig"),lco=o(" (Wav2Vec2-Conformer model)"),ico=l(),hh=a("li"),Ede=a("strong"),dco=o("wavlm"),cco=o(" \u2014 "),yI=a("a"),mco=o("WavLMConfig"),fco=o(" (WavLM model)"),gco=l(),uh=a("li"),Cde=a("strong"),hco=o("xglm"),uco=o(" \u2014 "),xI=a("a"),pco=o("XGLMConfig"),_co=o(" (XGLM model)"),bco=l(),ph=a("li"),wde=a("strong"),vco=o("xlm"),Fco=o(" \u2014 "),$I=a("a"),Tco=o("XLMConfig"),Mco=o(" (XLM model)"),Eco=l(),_h=a("li"),Ade=a("strong"),Cco=o("xlm-prophetnet"),wco=o(" \u2014 "),kI=a("a"),Aco=o("XLMProphetNetConfig"),Lco=o(" (XLM-ProphetNet model)"),yco=l(),bh=a("li"),Lde=a("strong"),xco=o("xlm-roberta"),$co=o(" \u2014 "),SI=a("a"),kco=o("XLMRobertaConfig"),Sco=o(" (XLM-RoBERTa model)"),Rco=l(),vh=a("li"),yde=a("strong"),Pco=o("xlm-roberta-xl"),Bco=o(" \u2014 "),RI=a("a"),Ico=o("XLMRobertaXLConfig"),Nco=o(" (XLM-RoBERTa-XL model)"),qco=l(),Fh=a("li"),xde=a("strong"),jco=o("xlnet"),Dco=o(" \u2014 "),PI=a("a"),Gco=o("XLNetConfig"),Oco=o(" (XLNet model)"),Vco=l(),Th=a("li"),$de=a("strong"),Xco=o("yolos"),zco=o(" \u2014 "),BI=a("a"),Wco=o("YolosConfig"),Qco=o(" (YOLOS model)"),Uco=l(),Mh=a("li"),kde=a("strong"),Hco=o("yoso"),Jco=o(" \u2014 "),II=a("a"),Yco=o("YosoConfig"),Kco=o(" (YOSO model)"),Zco=l(),F(Eh.$$.fragment),emo=l(),Ch=a("div"),F(R8.$$.fragment),omo=l(),Sde=a("p"),rmo=o("Register a new configuration for this class."),OUe=l(),Ki=a("h2"),wh=a("a"),Rde=a("span"),F(P8.$$.fragment),tmo=l(),Pde=a("span"),amo=o("AutoTokenizer"),VUe=l(),xo=a("div"),F(B8.$$.fragment),nmo=l(),I8=a("p"),smo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NI=a("a"),lmo=o("AutoTokenizer.from_pretrained()"),imo=o(" class method."),dmo=l(),N8=a("p"),cmo=o("This class cannot be instantiated directly using "),Bde=a("code"),mmo=o("__init__()"),fmo=o(" (throws an error)."),gmo=l(),Sr=a("div"),F(q8.$$.fragment),hmo=l(),Ide=a("p"),umo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pmo=l(),Ga=a("p"),_mo=o("The tokenizer class to instantiate is selected based on the "),Nde=a("code"),bmo=o("model_type"),vmo=o(` property of the config object (either
passed as an argument or loaded from `),qde=a("code"),Fmo=o("pretrained_model_name_or_path"),Tmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=a("code"),Mmo=o("pretrained_model_name_or_path"),Emo=o(":"),Cmo=l(),k=a("ul"),Hn=a("li"),Dde=a("strong"),wmo=o("albert"),Amo=o(" \u2014 "),qI=a("a"),Lmo=o("AlbertTokenizer"),ymo=o(" or "),jI=a("a"),xmo=o("AlbertTokenizerFast"),$mo=o(" (ALBERT model)"),kmo=l(),Jn=a("li"),Gde=a("strong"),Smo=o("bart"),Rmo=o(" \u2014 "),DI=a("a"),Pmo=o("BartTokenizer"),Bmo=o(" or "),GI=a("a"),Imo=o("BartTokenizerFast"),Nmo=o(" (BART model)"),qmo=l(),Yn=a("li"),Ode=a("strong"),jmo=o("barthez"),Dmo=o(" \u2014 "),OI=a("a"),Gmo=o("BarthezTokenizer"),Omo=o(" or "),VI=a("a"),Vmo=o("BarthezTokenizerFast"),Xmo=o(" (BARThez model)"),zmo=l(),Ah=a("li"),Vde=a("strong"),Wmo=o("bartpho"),Qmo=o(" \u2014 "),XI=a("a"),Umo=o("BartphoTokenizer"),Hmo=o(" (BARTpho model)"),Jmo=l(),Kn=a("li"),Xde=a("strong"),Ymo=o("bert"),Kmo=o(" \u2014 "),zI=a("a"),Zmo=o("BertTokenizer"),efo=o(" or "),WI=a("a"),ofo=o("BertTokenizerFast"),rfo=o(" (BERT model)"),tfo=l(),Lh=a("li"),zde=a("strong"),afo=o("bert-generation"),nfo=o(" \u2014 "),QI=a("a"),sfo=o("BertGenerationTokenizer"),lfo=o(" (Bert Generation model)"),ifo=l(),yh=a("li"),Wde=a("strong"),dfo=o("bert-japanese"),cfo=o(" \u2014 "),UI=a("a"),mfo=o("BertJapaneseTokenizer"),ffo=o(" (BertJapanese model)"),gfo=l(),xh=a("li"),Qde=a("strong"),hfo=o("bertweet"),ufo=o(" \u2014 "),HI=a("a"),pfo=o("BertweetTokenizer"),_fo=o(" (BERTweet model)"),bfo=l(),Zn=a("li"),Ude=a("strong"),vfo=o("big_bird"),Ffo=o(" \u2014 "),JI=a("a"),Tfo=o("BigBirdTokenizer"),Mfo=o(" or "),YI=a("a"),Efo=o("BigBirdTokenizerFast"),Cfo=o(" (BigBird model)"),wfo=l(),es=a("li"),Hde=a("strong"),Afo=o("bigbird_pegasus"),Lfo=o(" \u2014 "),KI=a("a"),yfo=o("PegasusTokenizer"),xfo=o(" or "),ZI=a("a"),$fo=o("PegasusTokenizerFast"),kfo=o(" (BigBird-Pegasus model)"),Sfo=l(),os=a("li"),Jde=a("strong"),Rfo=o("blenderbot"),Pfo=o(" \u2014 "),eN=a("a"),Bfo=o("BlenderbotTokenizer"),Ifo=o(" or "),oN=a("a"),Nfo=o("BlenderbotTokenizerFast"),qfo=o(" (Blenderbot model)"),jfo=l(),$h=a("li"),Yde=a("strong"),Dfo=o("blenderbot-small"),Gfo=o(" \u2014 "),rN=a("a"),Ofo=o("BlenderbotSmallTokenizer"),Vfo=o(" (BlenderbotSmall model)"),Xfo=l(),kh=a("li"),Kde=a("strong"),zfo=o("bloom"),Wfo=o(" \u2014 "),tN=a("a"),Qfo=o("BloomTokenizerFast"),Ufo=o(" (BLOOM model)"),Hfo=l(),Sh=a("li"),Zde=a("strong"),Jfo=o("byt5"),Yfo=o(" \u2014 "),aN=a("a"),Kfo=o("ByT5Tokenizer"),Zfo=o(" (ByT5 model)"),ego=l(),rs=a("li"),ece=a("strong"),ogo=o("camembert"),rgo=o(" \u2014 "),nN=a("a"),tgo=o("CamembertTokenizer"),ago=o(" or "),sN=a("a"),ngo=o("CamembertTokenizerFast"),sgo=o(" (CamemBERT model)"),lgo=l(),Rh=a("li"),oce=a("strong"),igo=o("canine"),dgo=o(" \u2014 "),lN=a("a"),cgo=o("CanineTokenizer"),mgo=o(" (CANINE model)"),fgo=l(),ts=a("li"),rce=a("strong"),ggo=o("clip"),hgo=o(" \u2014 "),iN=a("a"),ugo=o("CLIPTokenizer"),pgo=o(" or "),dN=a("a"),_go=o("CLIPTokenizerFast"),bgo=o(" (CLIP model)"),vgo=l(),as=a("li"),tce=a("strong"),Fgo=o("codegen"),Tgo=o(" \u2014 "),cN=a("a"),Mgo=o("CodeGenTokenizer"),Ego=o(" or "),mN=a("a"),Cgo=o("CodeGenTokenizerFast"),wgo=o(" (CodeGen model)"),Ago=l(),ns=a("li"),ace=a("strong"),Lgo=o("convbert"),ygo=o(" \u2014 "),fN=a("a"),xgo=o("ConvBertTokenizer"),$go=o(" or "),gN=a("a"),kgo=o("ConvBertTokenizerFast"),Sgo=o(" (ConvBERT model)"),Rgo=l(),ss=a("li"),nce=a("strong"),Pgo=o("cpm"),Bgo=o(" \u2014 "),hN=a("a"),Igo=o("CpmTokenizer"),Ngo=o(" or "),uN=a("a"),qgo=o("CpmTokenizerFast"),jgo=o(" (CPM model)"),Dgo=l(),Ph=a("li"),sce=a("strong"),Ggo=o("ctrl"),Ogo=o(" \u2014 "),pN=a("a"),Vgo=o("CTRLTokenizer"),Xgo=o(" (CTRL model)"),zgo=l(),ls=a("li"),lce=a("strong"),Wgo=o("data2vec-text"),Qgo=o(" \u2014 "),_N=a("a"),Ugo=o("RobertaTokenizer"),Hgo=o(" or "),bN=a("a"),Jgo=o("RobertaTokenizerFast"),Ygo=o(" (Data2VecText model)"),Kgo=l(),is=a("li"),ice=a("strong"),Zgo=o("deberta"),eho=o(" \u2014 "),vN=a("a"),oho=o("DebertaTokenizer"),rho=o(" or "),FN=a("a"),tho=o("DebertaTokenizerFast"),aho=o(" (DeBERTa model)"),nho=l(),ds=a("li"),dce=a("strong"),sho=o("deberta-v2"),lho=o(" \u2014 "),TN=a("a"),iho=o("DebertaV2Tokenizer"),dho=o(" or "),MN=a("a"),cho=o("DebertaV2TokenizerFast"),mho=o(" (DeBERTa-v2 model)"),fho=l(),cs=a("li"),cce=a("strong"),gho=o("distilbert"),hho=o(" \u2014 "),EN=a("a"),uho=o("DistilBertTokenizer"),pho=o(" or "),CN=a("a"),_ho=o("DistilBertTokenizerFast"),bho=o(" (DistilBERT model)"),vho=l(),ms=a("li"),mce=a("strong"),Fho=o("dpr"),Tho=o(" \u2014 "),wN=a("a"),Mho=o("DPRQuestionEncoderTokenizer"),Eho=o(" or "),AN=a("a"),Cho=o("DPRQuestionEncoderTokenizerFast"),who=o(" (DPR model)"),Aho=l(),fs=a("li"),fce=a("strong"),Lho=o("electra"),yho=o(" \u2014 "),LN=a("a"),xho=o("ElectraTokenizer"),$ho=o(" or "),yN=a("a"),kho=o("ElectraTokenizerFast"),Sho=o(" (ELECTRA model)"),Rho=l(),Bh=a("li"),gce=a("strong"),Pho=o("flaubert"),Bho=o(" \u2014 "),xN=a("a"),Iho=o("FlaubertTokenizer"),Nho=o(" (FlauBERT model)"),qho=l(),gs=a("li"),hce=a("strong"),jho=o("fnet"),Dho=o(" \u2014 "),$N=a("a"),Gho=o("FNetTokenizer"),Oho=o(" or "),kN=a("a"),Vho=o("FNetTokenizerFast"),Xho=o(" (FNet model)"),zho=l(),Ih=a("li"),uce=a("strong"),Who=o("fsmt"),Qho=o(" \u2014 "),SN=a("a"),Uho=o("FSMTTokenizer"),Hho=o(" (FairSeq Machine-Translation model)"),Jho=l(),hs=a("li"),pce=a("strong"),Yho=o("funnel"),Kho=o(" \u2014 "),RN=a("a"),Zho=o("FunnelTokenizer"),euo=o(" or "),PN=a("a"),ouo=o("FunnelTokenizerFast"),ruo=o(" (Funnel Transformer model)"),tuo=l(),us=a("li"),_ce=a("strong"),auo=o("gpt2"),nuo=o(" \u2014 "),BN=a("a"),suo=o("GPT2Tokenizer"),luo=o(" or "),IN=a("a"),iuo=o("GPT2TokenizerFast"),duo=o(" (OpenAI GPT-2 model)"),cuo=l(),ps=a("li"),bce=a("strong"),muo=o("gpt_neo"),fuo=o(" \u2014 "),NN=a("a"),guo=o("GPT2Tokenizer"),huo=o(" or "),qN=a("a"),uuo=o("GPT2TokenizerFast"),puo=o(" (GPT Neo model)"),_uo=l(),Nh=a("li"),vce=a("strong"),buo=o("gpt_neox"),vuo=o(" \u2014 "),jN=a("a"),Fuo=o("GPTNeoXTokenizerFast"),Tuo=o(" (GPT NeoX model)"),Muo=l(),_s=a("li"),Fce=a("strong"),Euo=o("gptj"),Cuo=o(" \u2014 "),DN=a("a"),wuo=o("GPT2Tokenizer"),Auo=o(" or "),GN=a("a"),Luo=o("GPT2TokenizerFast"),yuo=o(" (GPT-J model)"),xuo=l(),bs=a("li"),Tce=a("strong"),$uo=o("groupvit"),kuo=o(" \u2014 "),ON=a("a"),Suo=o("CLIPTokenizer"),Ruo=o(" or "),VN=a("a"),Puo=o("CLIPTokenizerFast"),Buo=o(" (GroupViT model)"),Iuo=l(),vs=a("li"),Mce=a("strong"),Nuo=o("herbert"),quo=o(" \u2014 "),XN=a("a"),juo=o("HerbertTokenizer"),Duo=o(" or "),zN=a("a"),Guo=o("HerbertTokenizerFast"),Ouo=o(" (HerBERT model)"),Vuo=l(),qh=a("li"),Ece=a("strong"),Xuo=o("hubert"),zuo=o(" \u2014 "),WN=a("a"),Wuo=o("Wav2Vec2CTCTokenizer"),Quo=o(" (Hubert model)"),Uuo=l(),Fs=a("li"),Cce=a("strong"),Huo=o("ibert"),Juo=o(" \u2014 "),QN=a("a"),Yuo=o("RobertaTokenizer"),Kuo=o(" or "),UN=a("a"),Zuo=o("RobertaTokenizerFast"),epo=o(" (I-BERT model)"),opo=l(),Ts=a("li"),wce=a("strong"),rpo=o("layoutlm"),tpo=o(" \u2014 "),HN=a("a"),apo=o("LayoutLMTokenizer"),npo=o(" or "),JN=a("a"),spo=o("LayoutLMTokenizerFast"),lpo=o(" (LayoutLM model)"),ipo=l(),Ms=a("li"),Ace=a("strong"),dpo=o("layoutlmv2"),cpo=o(" \u2014 "),YN=a("a"),mpo=o("LayoutLMv2Tokenizer"),fpo=o(" or "),KN=a("a"),gpo=o("LayoutLMv2TokenizerFast"),hpo=o(" (LayoutLMv2 model)"),upo=l(),Es=a("li"),Lce=a("strong"),ppo=o("layoutlmv3"),_po=o(" \u2014 "),ZN=a("a"),bpo=o("LayoutLMv3Tokenizer"),vpo=o(" or "),eq=a("a"),Fpo=o("LayoutLMv3TokenizerFast"),Tpo=o(" (LayoutLMv3 model)"),Mpo=l(),Cs=a("li"),yce=a("strong"),Epo=o("layoutxlm"),Cpo=o(" \u2014 "),oq=a("a"),wpo=o("LayoutXLMTokenizer"),Apo=o(" or "),rq=a("a"),Lpo=o("LayoutXLMTokenizerFast"),ypo=o(" (LayoutXLM model)"),xpo=l(),ws=a("li"),xce=a("strong"),$po=o("led"),kpo=o(" \u2014 "),tq=a("a"),Spo=o("LEDTokenizer"),Rpo=o(" or "),aq=a("a"),Ppo=o("LEDTokenizerFast"),Bpo=o(" (LED model)"),Ipo=l(),As=a("li"),$ce=a("strong"),Npo=o("longformer"),qpo=o(" \u2014 "),nq=a("a"),jpo=o("LongformerTokenizer"),Dpo=o(" or "),sq=a("a"),Gpo=o("LongformerTokenizerFast"),Opo=o(" (Longformer model)"),Vpo=l(),Ls=a("li"),kce=a("strong"),Xpo=o("longt5"),zpo=o(" \u2014 "),lq=a("a"),Wpo=o("T5Tokenizer"),Qpo=o(" or "),iq=a("a"),Upo=o("T5TokenizerFast"),Hpo=o(" (LongT5 model)"),Jpo=l(),jh=a("li"),Sce=a("strong"),Ypo=o("luke"),Kpo=o(" \u2014 "),dq=a("a"),Zpo=o("LukeTokenizer"),e_o=o(" (LUKE model)"),o_o=l(),ys=a("li"),Rce=a("strong"),r_o=o("lxmert"),t_o=o(" \u2014 "),cq=a("a"),a_o=o("LxmertTokenizer"),n_o=o(" or "),mq=a("a"),s_o=o("LxmertTokenizerFast"),l_o=o(" (LXMERT model)"),i_o=l(),Dh=a("li"),Pce=a("strong"),d_o=o("m2m_100"),c_o=o(" \u2014 "),fq=a("a"),m_o=o("M2M100Tokenizer"),f_o=o(" (M2M100 model)"),g_o=l(),Gh=a("li"),Bce=a("strong"),h_o=o("marian"),u_o=o(" \u2014 "),gq=a("a"),p_o=o("MarianTokenizer"),__o=o(" (Marian model)"),b_o=l(),xs=a("li"),Ice=a("strong"),v_o=o("mbart"),F_o=o(" \u2014 "),hq=a("a"),T_o=o("MBartTokenizer"),M_o=o(" or "),uq=a("a"),E_o=o("MBartTokenizerFast"),C_o=o(" (mBART model)"),w_o=l(),$s=a("li"),Nce=a("strong"),A_o=o("mbart50"),L_o=o(" \u2014 "),pq=a("a"),y_o=o("MBart50Tokenizer"),x_o=o(" or "),_q=a("a"),$_o=o("MBart50TokenizerFast"),k_o=o(" (mBART-50 model)"),S_o=l(),ks=a("li"),qce=a("strong"),R_o=o("megatron-bert"),P_o=o(" \u2014 "),bq=a("a"),B_o=o("BertTokenizer"),I_o=o(" or "),vq=a("a"),N_o=o("BertTokenizerFast"),q_o=o(" (Megatron-BERT model)"),j_o=l(),Oh=a("li"),jce=a("strong"),D_o=o("mluke"),G_o=o(" \u2014 "),Fq=a("a"),O_o=o("MLukeTokenizer"),V_o=o(" (mLUKE model)"),X_o=l(),Ss=a("li"),Dce=a("strong"),z_o=o("mobilebert"),W_o=o(" \u2014 "),Tq=a("a"),Q_o=o("MobileBertTokenizer"),U_o=o(" or "),Mq=a("a"),H_o=o("MobileBertTokenizerFast"),J_o=o(" (MobileBERT model)"),Y_o=l(),Rs=a("li"),Gce=a("strong"),K_o=o("mpnet"),Z_o=o(" \u2014 "),Eq=a("a"),e2o=o("MPNetTokenizer"),o2o=o(" or "),Cq=a("a"),r2o=o("MPNetTokenizerFast"),t2o=o(" (MPNet model)"),a2o=l(),Ps=a("li"),Oce=a("strong"),n2o=o("mt5"),s2o=o(" \u2014 "),wq=a("a"),l2o=o("MT5Tokenizer"),i2o=o(" or "),Aq=a("a"),d2o=o("MT5TokenizerFast"),c2o=o(" (MT5 model)"),m2o=l(),Bs=a("li"),Vce=a("strong"),f2o=o("mvp"),g2o=o(" \u2014 "),Lq=a("a"),h2o=o("MvpTokenizer"),u2o=o(" or "),yq=a("a"),p2o=o("MvpTokenizerFast"),_2o=o(" (MVP model)"),b2o=l(),Is=a("li"),Xce=a("strong"),v2o=o("nezha"),F2o=o(" \u2014 "),xq=a("a"),T2o=o("BertTokenizer"),M2o=o(" or "),$q=a("a"),E2o=o("BertTokenizerFast"),C2o=o(" (Nezha model)"),w2o=l(),Ns=a("li"),zce=a("strong"),A2o=o("nllb"),L2o=o(" \u2014 "),kq=a("a"),y2o=o("NllbTokenizer"),x2o=o(" or "),Sq=a("a"),$2o=o("NllbTokenizerFast"),k2o=o(" (NLLB model)"),S2o=l(),qs=a("li"),Wce=a("strong"),R2o=o("nystromformer"),P2o=o(" \u2014 "),Rq=a("a"),B2o=o("AlbertTokenizer"),I2o=o(" or "),Pq=a("a"),N2o=o("AlbertTokenizerFast"),q2o=o(" (Nystr\xF6mformer model)"),j2o=l(),js=a("li"),Qce=a("strong"),D2o=o("openai-gpt"),G2o=o(" \u2014 "),Bq=a("a"),O2o=o("OpenAIGPTTokenizer"),V2o=o(" or "),Iq=a("a"),X2o=o("OpenAIGPTTokenizerFast"),z2o=o(" (OpenAI GPT model)"),W2o=l(),Vh=a("li"),Uce=a("strong"),Q2o=o("opt"),U2o=o(" \u2014 "),Nq=a("a"),H2o=o("GPT2Tokenizer"),J2o=o(" (OPT model)"),Y2o=l(),Ds=a("li"),Hce=a("strong"),K2o=o("owlvit"),Z2o=o(" \u2014 "),qq=a("a"),ebo=o("CLIPTokenizer"),obo=o(" or "),jq=a("a"),rbo=o("CLIPTokenizerFast"),tbo=o(" (OWL-ViT model)"),abo=l(),Gs=a("li"),Jce=a("strong"),nbo=o("pegasus"),sbo=o(" \u2014 "),Dq=a("a"),lbo=o("PegasusTokenizer"),ibo=o(" or "),Gq=a("a"),dbo=o("PegasusTokenizerFast"),cbo=o(" (Pegasus model)"),mbo=l(),Xh=a("li"),Yce=a("strong"),fbo=o("perceiver"),gbo=o(" \u2014 "),Oq=a("a"),hbo=o("PerceiverTokenizer"),ubo=o(" (Perceiver model)"),pbo=l(),zh=a("li"),Kce=a("strong"),_bo=o("phobert"),bbo=o(" \u2014 "),Vq=a("a"),vbo=o("PhobertTokenizer"),Fbo=o(" (PhoBERT model)"),Tbo=l(),Wh=a("li"),Zce=a("strong"),Mbo=o("plbart"),Ebo=o(" \u2014 "),Xq=a("a"),Cbo=o("PLBartTokenizer"),wbo=o(" (PLBart model)"),Abo=l(),Qh=a("li"),eme=a("strong"),Lbo=o("prophetnet"),ybo=o(" \u2014 "),zq=a("a"),xbo=o("ProphetNetTokenizer"),$bo=o(" (ProphetNet model)"),kbo=l(),Os=a("li"),ome=a("strong"),Sbo=o("qdqbert"),Rbo=o(" \u2014 "),Wq=a("a"),Pbo=o("BertTokenizer"),Bbo=o(" or "),Qq=a("a"),Ibo=o("BertTokenizerFast"),Nbo=o(" (QDQBert model)"),qbo=l(),Uh=a("li"),rme=a("strong"),jbo=o("rag"),Dbo=o(" \u2014 "),Uq=a("a"),Gbo=o("RagTokenizer"),Obo=o(" (RAG model)"),Vbo=l(),Vs=a("li"),tme=a("strong"),Xbo=o("realm"),zbo=o(" \u2014 "),Hq=a("a"),Wbo=o("RealmTokenizer"),Qbo=o(" or "),Jq=a("a"),Ubo=o("RealmTokenizerFast"),Hbo=o(" (REALM model)"),Jbo=l(),Xs=a("li"),ame=a("strong"),Ybo=o("reformer"),Kbo=o(" \u2014 "),Yq=a("a"),Zbo=o("ReformerTokenizer"),evo=o(" or "),Kq=a("a"),ovo=o("ReformerTokenizerFast"),rvo=o(" (Reformer model)"),tvo=l(),zs=a("li"),nme=a("strong"),avo=o("rembert"),nvo=o(" \u2014 "),Zq=a("a"),svo=o("RemBertTokenizer"),lvo=o(" or "),ej=a("a"),ivo=o("RemBertTokenizerFast"),dvo=o(" (RemBERT model)"),cvo=l(),Ws=a("li"),sme=a("strong"),mvo=o("retribert"),fvo=o(" \u2014 "),oj=a("a"),gvo=o("RetriBertTokenizer"),hvo=o(" or "),rj=a("a"),uvo=o("RetriBertTokenizerFast"),pvo=o(" (RetriBERT model)"),_vo=l(),Qs=a("li"),lme=a("strong"),bvo=o("roberta"),vvo=o(" \u2014 "),tj=a("a"),Fvo=o("RobertaTokenizer"),Tvo=o(" or "),aj=a("a"),Mvo=o("RobertaTokenizerFast"),Evo=o(" (RoBERTa model)"),Cvo=l(),Us=a("li"),ime=a("strong"),wvo=o("roformer"),Avo=o(" \u2014 "),nj=a("a"),Lvo=o("RoFormerTokenizer"),yvo=o(" or "),sj=a("a"),xvo=o("RoFormerTokenizerFast"),$vo=o(" (RoFormer model)"),kvo=l(),Hh=a("li"),dme=a("strong"),Svo=o("speech_to_text"),Rvo=o(" \u2014 "),lj=a("a"),Pvo=o("Speech2TextTokenizer"),Bvo=o(" (Speech2Text model)"),Ivo=l(),Jh=a("li"),cme=a("strong"),Nvo=o("speech_to_text_2"),qvo=o(" \u2014 "),ij=a("a"),jvo=o("Speech2Text2Tokenizer"),Dvo=o(" (Speech2Text2 model)"),Gvo=l(),Hs=a("li"),mme=a("strong"),Ovo=o("splinter"),Vvo=o(" \u2014 "),dj=a("a"),Xvo=o("SplinterTokenizer"),zvo=o(" or "),cj=a("a"),Wvo=o("SplinterTokenizerFast"),Qvo=o(" (Splinter model)"),Uvo=l(),Js=a("li"),fme=a("strong"),Hvo=o("squeezebert"),Jvo=o(" \u2014 "),mj=a("a"),Yvo=o("SqueezeBertTokenizer"),Kvo=o(" or "),fj=a("a"),Zvo=o("SqueezeBertTokenizerFast"),e1o=o(" (SqueezeBERT model)"),o1o=l(),Ys=a("li"),gme=a("strong"),r1o=o("t5"),t1o=o(" \u2014 "),gj=a("a"),a1o=o("T5Tokenizer"),n1o=o(" or "),hj=a("a"),s1o=o("T5TokenizerFast"),l1o=o(" (T5 model)"),i1o=l(),Yh=a("li"),hme=a("strong"),d1o=o("tapas"),c1o=o(" \u2014 "),uj=a("a"),m1o=o("TapasTokenizer"),f1o=o(" (TAPAS model)"),g1o=l(),Kh=a("li"),ume=a("strong"),h1o=o("tapex"),u1o=o(" \u2014 "),pj=a("a"),p1o=o("TapexTokenizer"),_1o=o(" (TAPEX model)"),b1o=l(),Zh=a("li"),pme=a("strong"),v1o=o("transfo-xl"),F1o=o(" \u2014 "),_j=a("a"),T1o=o("TransfoXLTokenizer"),M1o=o(" (Transformer-XL model)"),E1o=l(),Ks=a("li"),_me=a("strong"),C1o=o("vilt"),w1o=o(" \u2014 "),bj=a("a"),A1o=o("BertTokenizer"),L1o=o(" or "),vj=a("a"),y1o=o("BertTokenizerFast"),x1o=o(" (ViLT model)"),$1o=l(),Zs=a("li"),bme=a("strong"),k1o=o("visual_bert"),S1o=o(" \u2014 "),Fj=a("a"),R1o=o("BertTokenizer"),P1o=o(" or "),Tj=a("a"),B1o=o("BertTokenizerFast"),I1o=o(" (VisualBERT model)"),N1o=l(),eu=a("li"),vme=a("strong"),q1o=o("wav2vec2"),j1o=o(" \u2014 "),Mj=a("a"),D1o=o("Wav2Vec2CTCTokenizer"),G1o=o(" (Wav2Vec2 model)"),O1o=l(),ou=a("li"),Fme=a("strong"),V1o=o("wav2vec2-conformer"),X1o=o(" \u2014 "),Ej=a("a"),z1o=o("Wav2Vec2CTCTokenizer"),W1o=o(" (Wav2Vec2-Conformer model)"),Q1o=l(),ru=a("li"),Tme=a("strong"),U1o=o("wav2vec2_phoneme"),H1o=o(" \u2014 "),Cj=a("a"),J1o=o("Wav2Vec2PhonemeCTCTokenizer"),Y1o=o(" (Wav2Vec2Phoneme model)"),K1o=l(),el=a("li"),Mme=a("strong"),Z1o=o("xglm"),eFo=o(" \u2014 "),wj=a("a"),oFo=o("XGLMTokenizer"),rFo=o(" or "),Aj=a("a"),tFo=o("XGLMTokenizerFast"),aFo=o(" (XGLM model)"),nFo=l(),tu=a("li"),Eme=a("strong"),sFo=o("xlm"),lFo=o(" \u2014 "),Lj=a("a"),iFo=o("XLMTokenizer"),dFo=o(" (XLM model)"),cFo=l(),au=a("li"),Cme=a("strong"),mFo=o("xlm-prophetnet"),fFo=o(" \u2014 "),yj=a("a"),gFo=o("XLMProphetNetTokenizer"),hFo=o(" (XLM-ProphetNet model)"),uFo=l(),ol=a("li"),wme=a("strong"),pFo=o("xlm-roberta"),_Fo=o(" \u2014 "),xj=a("a"),bFo=o("XLMRobertaTokenizer"),vFo=o(" or "),$j=a("a"),FFo=o("XLMRobertaTokenizerFast"),TFo=o(" (XLM-RoBERTa model)"),MFo=l(),rl=a("li"),Ame=a("strong"),EFo=o("xlm-roberta-xl"),CFo=o(" \u2014 "),kj=a("a"),wFo=o("RobertaTokenizer"),AFo=o(" or "),Sj=a("a"),LFo=o("RobertaTokenizerFast"),yFo=o(" (XLM-RoBERTa-XL model)"),xFo=l(),tl=a("li"),Lme=a("strong"),$Fo=o("xlnet"),kFo=o(" \u2014 "),Rj=a("a"),SFo=o("XLNetTokenizer"),RFo=o(" or "),Pj=a("a"),PFo=o("XLNetTokenizerFast"),BFo=o(" (XLNet model)"),IFo=l(),al=a("li"),yme=a("strong"),NFo=o("yoso"),qFo=o(" \u2014 "),Bj=a("a"),jFo=o("AlbertTokenizer"),DFo=o(" or "),Ij=a("a"),GFo=o("AlbertTokenizerFast"),OFo=o(" (YOSO model)"),VFo=l(),F(nu.$$.fragment),XFo=l(),su=a("div"),F(j8.$$.fragment),zFo=l(),xme=a("p"),WFo=o("Register a new tokenizer in this mapping."),XUe=l(),Zi=a("h2"),lu=a("a"),$me=a("span"),F(D8.$$.fragment),QFo=l(),kme=a("span"),UFo=o("AutoFeatureExtractor"),zUe=l(),$o=a("div"),F(G8.$$.fragment),HFo=l(),O8=a("p"),JFo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Nj=a("a"),YFo=o("AutoFeatureExtractor.from_pretrained()"),KFo=o(" class method."),ZFo=l(),V8=a("p"),eTo=o("This class cannot be instantiated directly using "),Sme=a("code"),oTo=o("__init__()"),rTo=o(" (throws an error)."),tTo=l(),Je=a("div"),F(X8.$$.fragment),aTo=l(),Rme=a("p"),nTo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),sTo=l(),Oa=a("p"),lTo=o("The feature extractor class to instantiate is selected based on the "),Pme=a("code"),iTo=o("model_type"),dTo=o(` property of the config object
(either passed as an argument or loaded from `),Bme=a("code"),cTo=o("pretrained_model_name_or_path"),mTo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ime=a("code"),fTo=o("pretrained_model_name_or_path"),gTo=o(":"),hTo=l(),Q=a("ul"),iu=a("li"),Nme=a("strong"),uTo=o("beit"),pTo=o(" \u2014 "),qj=a("a"),_To=o("BeitFeatureExtractor"),bTo=o(" (BEiT model)"),vTo=l(),du=a("li"),qme=a("strong"),FTo=o("clip"),TTo=o(" \u2014 "),jj=a("a"),MTo=o("CLIPFeatureExtractor"),ETo=o(" (CLIP model)"),CTo=l(),cu=a("li"),jme=a("strong"),wTo=o("convnext"),ATo=o(" \u2014 "),Dj=a("a"),LTo=o("ConvNextFeatureExtractor"),yTo=o(" (ConvNeXT model)"),xTo=l(),mu=a("li"),Dme=a("strong"),$To=o("cvt"),kTo=o(" \u2014 "),Gj=a("a"),STo=o("ConvNextFeatureExtractor"),RTo=o(" (CvT model)"),PTo=l(),fu=a("li"),Gme=a("strong"),BTo=o("data2vec-audio"),ITo=o(" \u2014 "),Oj=a("a"),NTo=o("Wav2Vec2FeatureExtractor"),qTo=o(" (Data2VecAudio model)"),jTo=l(),gu=a("li"),Ome=a("strong"),DTo=o("data2vec-vision"),GTo=o(" \u2014 "),Vj=a("a"),OTo=o("BeitFeatureExtractor"),VTo=o(" (Data2VecVision model)"),XTo=l(),hu=a("li"),Vme=a("strong"),zTo=o("deit"),WTo=o(" \u2014 "),Xj=a("a"),QTo=o("DeiTFeatureExtractor"),UTo=o(" (DeiT model)"),HTo=l(),uu=a("li"),Xme=a("strong"),JTo=o("detr"),YTo=o(" \u2014 "),zj=a("a"),KTo=o("DetrFeatureExtractor"),ZTo=o(" (DETR model)"),eMo=l(),pu=a("li"),zme=a("strong"),oMo=o("donut"),rMo=o(" \u2014 "),Wj=a("a"),tMo=o("DonutFeatureExtractor"),aMo=o(" (Donut model)"),nMo=l(),_u=a("li"),Wme=a("strong"),sMo=o("dpt"),lMo=o(" \u2014 "),Qj=a("a"),iMo=o("DPTFeatureExtractor"),dMo=o(" (DPT model)"),cMo=l(),bu=a("li"),Qme=a("strong"),mMo=o("flava"),fMo=o(" \u2014 "),Uj=a("a"),gMo=o("FlavaFeatureExtractor"),hMo=o(" (FLAVA model)"),uMo=l(),vu=a("li"),Ume=a("strong"),pMo=o("glpn"),_Mo=o(" \u2014 "),Hj=a("a"),bMo=o("GLPNFeatureExtractor"),vMo=o(" (GLPN model)"),FMo=l(),Fu=a("li"),Hme=a("strong"),TMo=o("groupvit"),MMo=o(" \u2014 "),Jj=a("a"),EMo=o("CLIPFeatureExtractor"),CMo=o(" (GroupViT model)"),wMo=l(),Tu=a("li"),Jme=a("strong"),AMo=o("hubert"),LMo=o(" \u2014 "),Yj=a("a"),yMo=o("Wav2Vec2FeatureExtractor"),xMo=o(" (Hubert model)"),$Mo=l(),Mu=a("li"),Yme=a("strong"),kMo=o("imagegpt"),SMo=o(" \u2014 "),Kj=a("a"),RMo=o("ImageGPTFeatureExtractor"),PMo=o(" (ImageGPT model)"),BMo=l(),Eu=a("li"),Kme=a("strong"),IMo=o("layoutlmv2"),NMo=o(" \u2014 "),Zj=a("a"),qMo=o("LayoutLMv2FeatureExtractor"),jMo=o(" (LayoutLMv2 model)"),DMo=l(),Cu=a("li"),Zme=a("strong"),GMo=o("layoutlmv3"),OMo=o(" \u2014 "),eD=a("a"),VMo=o("LayoutLMv3FeatureExtractor"),XMo=o(" (LayoutLMv3 model)"),zMo=l(),wu=a("li"),efe=a("strong"),WMo=o("levit"),QMo=o(" \u2014 "),oD=a("a"),UMo=o("LevitFeatureExtractor"),HMo=o(" (LeViT model)"),JMo=l(),Au=a("li"),ofe=a("strong"),YMo=o("maskformer"),KMo=o(" \u2014 "),rD=a("a"),ZMo=o("MaskFormerFeatureExtractor"),eEo=o(" (MaskFormer model)"),oEo=l(),Lu=a("li"),rfe=a("strong"),rEo=o("mctct"),tEo=o(" \u2014 "),tD=a("a"),aEo=o("MCTCTFeatureExtractor"),nEo=o(" (M-CTC-T model)"),sEo=l(),yu=a("li"),tfe=a("strong"),lEo=o("mobilevit"),iEo=o(" \u2014 "),aD=a("a"),dEo=o("MobileViTFeatureExtractor"),cEo=o(" (MobileViT model)"),mEo=l(),xu=a("li"),afe=a("strong"),fEo=o("owlvit"),gEo=o(" \u2014 "),nD=a("a"),hEo=o("OwlViTFeatureExtractor"),uEo=o(" (OWL-ViT model)"),pEo=l(),$u=a("li"),nfe=a("strong"),_Eo=o("perceiver"),bEo=o(" \u2014 "),sD=a("a"),vEo=o("PerceiverFeatureExtractor"),FEo=o(" (Perceiver model)"),TEo=l(),ku=a("li"),sfe=a("strong"),MEo=o("poolformer"),EEo=o(" \u2014 "),lD=a("a"),CEo=o("PoolFormerFeatureExtractor"),wEo=o(" (PoolFormer model)"),AEo=l(),Su=a("li"),lfe=a("strong"),LEo=o("regnet"),yEo=o(" \u2014 "),iD=a("a"),xEo=o("ConvNextFeatureExtractor"),$Eo=o(" (RegNet model)"),kEo=l(),Ru=a("li"),ife=a("strong"),SEo=o("resnet"),REo=o(" \u2014 "),dD=a("a"),PEo=o("ConvNextFeatureExtractor"),BEo=o(" (ResNet model)"),IEo=l(),Pu=a("li"),dfe=a("strong"),NEo=o("segformer"),qEo=o(" \u2014 "),cD=a("a"),jEo=o("SegformerFeatureExtractor"),DEo=o(" (SegFormer model)"),GEo=l(),Bu=a("li"),cfe=a("strong"),OEo=o("speech_to_text"),VEo=o(" \u2014 "),mD=a("a"),XEo=o("Speech2TextFeatureExtractor"),zEo=o(" (Speech2Text model)"),WEo=l(),Iu=a("li"),mfe=a("strong"),QEo=o("swin"),UEo=o(" \u2014 "),fD=a("a"),HEo=o("ViTFeatureExtractor"),JEo=o(" (Swin Transformer model)"),YEo=l(),Nu=a("li"),ffe=a("strong"),KEo=o("swinv2"),ZEo=o(" \u2014 "),gD=a("a"),e4o=o("ViTFeatureExtractor"),o4o=o(" (Swin Transformer V2 model)"),r4o=l(),qu=a("li"),gfe=a("strong"),t4o=o("van"),a4o=o(" \u2014 "),hD=a("a"),n4o=o("ConvNextFeatureExtractor"),s4o=o(" (VAN model)"),l4o=l(),ju=a("li"),hfe=a("strong"),i4o=o("videomae"),d4o=o(" \u2014 "),uD=a("a"),c4o=o("VideoMAEFeatureExtractor"),m4o=o(" (VideoMAE model)"),f4o=l(),Du=a("li"),ufe=a("strong"),g4o=o("vilt"),h4o=o(" \u2014 "),pD=a("a"),u4o=o("ViltFeatureExtractor"),p4o=o(" (ViLT model)"),_4o=l(),Gu=a("li"),pfe=a("strong"),b4o=o("vit"),v4o=o(" \u2014 "),_D=a("a"),F4o=o("ViTFeatureExtractor"),T4o=o(" (ViT model)"),M4o=l(),Ou=a("li"),_fe=a("strong"),E4o=o("vit_mae"),C4o=o(" \u2014 "),bD=a("a"),w4o=o("ViTFeatureExtractor"),A4o=o(" (ViTMAE model)"),L4o=l(),Vu=a("li"),bfe=a("strong"),y4o=o("wav2vec2"),x4o=o(" \u2014 "),vD=a("a"),$4o=o("Wav2Vec2FeatureExtractor"),k4o=o(" (Wav2Vec2 model)"),S4o=l(),Xu=a("li"),vfe=a("strong"),R4o=o("wav2vec2-conformer"),P4o=o(" \u2014 "),FD=a("a"),B4o=o("Wav2Vec2FeatureExtractor"),I4o=o(" (Wav2Vec2-Conformer model)"),N4o=l(),zu=a("li"),Ffe=a("strong"),q4o=o("yolos"),j4o=o(" \u2014 "),TD=a("a"),D4o=o("YolosFeatureExtractor"),G4o=o(" (YOLOS model)"),O4o=l(),F(Wu.$$.fragment),V4o=l(),F(Qu.$$.fragment),X4o=l(),Uu=a("div"),F(z8.$$.fragment),z4o=l(),Tfe=a("p"),W4o=o("Register a new feature extractor for this class."),WUe=l(),ed=a("h2"),Hu=a("a"),Mfe=a("span"),F(W8.$$.fragment),Q4o=l(),Efe=a("span"),U4o=o("AutoProcessor"),QUe=l(),ko=a("div"),F(Q8.$$.fragment),H4o=l(),U8=a("p"),J4o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MD=a("a"),Y4o=o("AutoProcessor.from_pretrained()"),K4o=o(" class method."),Z4o=l(),H8=a("p"),eCo=o("This class cannot be instantiated directly using "),Cfe=a("code"),oCo=o("__init__()"),rCo=o(" (throws an error)."),tCo=l(),Ye=a("div"),F(J8.$$.fragment),aCo=l(),wfe=a("p"),nCo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sCo=l(),od=a("p"),lCo=o("The processor class to instantiate is selected based on the "),Afe=a("code"),iCo=o("model_type"),dCo=o(` property of the config object (either
passed as an argument or loaded from `),Lfe=a("code"),cCo=o("pretrained_model_name_or_path"),mCo=o(" if possible):"),fCo=l(),ce=a("ul"),Ju=a("li"),yfe=a("strong"),gCo=o("clip"),hCo=o(" \u2014 "),ED=a("a"),uCo=o("CLIPProcessor"),pCo=o(" (CLIP model)"),_Co=l(),Yu=a("li"),xfe=a("strong"),bCo=o("donut"),vCo=o(" \u2014 "),CD=a("a"),FCo=o("DonutProcessor"),TCo=o(" (Donut model)"),MCo=l(),Ku=a("li"),$fe=a("strong"),ECo=o("flava"),CCo=o(" \u2014 "),wD=a("a"),wCo=o("FlavaProcessor"),ACo=o(" (FLAVA model)"),LCo=l(),Zu=a("li"),kfe=a("strong"),yCo=o("groupvit"),xCo=o(" \u2014 "),AD=a("a"),$Co=o("CLIPProcessor"),kCo=o(" (GroupViT model)"),SCo=l(),ep=a("li"),Sfe=a("strong"),RCo=o("layoutlmv2"),PCo=o(" \u2014 "),LD=a("a"),BCo=o("LayoutLMv2Processor"),ICo=o(" (LayoutLMv2 model)"),NCo=l(),op=a("li"),Rfe=a("strong"),qCo=o("layoutlmv3"),jCo=o(" \u2014 "),yD=a("a"),DCo=o("LayoutLMv3Processor"),GCo=o(" (LayoutLMv3 model)"),OCo=l(),rp=a("li"),Pfe=a("strong"),VCo=o("layoutxlm"),XCo=o(" \u2014 "),xD=a("a"),zCo=o("LayoutXLMProcessor"),WCo=o(" (LayoutXLM model)"),QCo=l(),tp=a("li"),Bfe=a("strong"),UCo=o("owlvit"),HCo=o(" \u2014 "),$D=a("a"),JCo=o("OwlViTProcessor"),YCo=o(" (OWL-ViT model)"),KCo=l(),ap=a("li"),Ife=a("strong"),ZCo=o("sew"),e3o=o(" \u2014 "),kD=a("a"),o3o=o("Wav2Vec2Processor"),r3o=o(" (SEW model)"),t3o=l(),np=a("li"),Nfe=a("strong"),a3o=o("sew-d"),n3o=o(" \u2014 "),SD=a("a"),s3o=o("Wav2Vec2Processor"),l3o=o(" (SEW-D model)"),i3o=l(),sp=a("li"),qfe=a("strong"),d3o=o("speech_to_text"),c3o=o(" \u2014 "),RD=a("a"),m3o=o("Speech2TextProcessor"),f3o=o(" (Speech2Text model)"),g3o=l(),lp=a("li"),jfe=a("strong"),h3o=o("speech_to_text_2"),u3o=o(" \u2014 "),PD=a("a"),p3o=o("Speech2Text2Processor"),_3o=o(" (Speech2Text2 model)"),b3o=l(),ip=a("li"),Dfe=a("strong"),v3o=o("trocr"),F3o=o(" \u2014 "),BD=a("a"),T3o=o("TrOCRProcessor"),M3o=o(" (TrOCR model)"),E3o=l(),dp=a("li"),Gfe=a("strong"),C3o=o("unispeech"),w3o=o(" \u2014 "),ID=a("a"),A3o=o("Wav2Vec2Processor"),L3o=o(" (UniSpeech model)"),y3o=l(),cp=a("li"),Ofe=a("strong"),x3o=o("unispeech-sat"),$3o=o(" \u2014 "),ND=a("a"),k3o=o("Wav2Vec2Processor"),S3o=o(" (UniSpeechSat model)"),R3o=l(),mp=a("li"),Vfe=a("strong"),P3o=o("vilt"),B3o=o(" \u2014 "),qD=a("a"),I3o=o("ViltProcessor"),N3o=o(" (ViLT model)"),q3o=l(),fp=a("li"),Xfe=a("strong"),j3o=o("vision-text-dual-encoder"),D3o=o(" \u2014 "),jD=a("a"),G3o=o("VisionTextDualEncoderProcessor"),O3o=o(" (VisionTextDualEncoder model)"),V3o=l(),gp=a("li"),zfe=a("strong"),X3o=o("wav2vec2"),z3o=o(" \u2014 "),DD=a("a"),W3o=o("Wav2Vec2Processor"),Q3o=o(" (Wav2Vec2 model)"),U3o=l(),hp=a("li"),Wfe=a("strong"),H3o=o("wav2vec2-conformer"),J3o=o(" \u2014 "),GD=a("a"),Y3o=o("Wav2Vec2Processor"),K3o=o(" (Wav2Vec2-Conformer model)"),Z3o=l(),up=a("li"),Qfe=a("strong"),e5o=o("wavlm"),o5o=o(" \u2014 "),OD=a("a"),r5o=o("Wav2Vec2Processor"),t5o=o(" (WavLM model)"),a5o=l(),F(pp.$$.fragment),n5o=l(),F(_p.$$.fragment),s5o=l(),bp=a("div"),F(Y8.$$.fragment),l5o=l(),Ufe=a("p"),i5o=o("Register a new processor for this class."),UUe=l(),rd=a("h2"),vp=a("a"),Hfe=a("span"),F(K8.$$.fragment),d5o=l(),Jfe=a("span"),c5o=o("AutoModel"),HUe=l(),So=a("div"),F(Z8.$$.fragment),m5o=l(),td=a("p"),f5o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VD=a("a"),g5o=o("from_pretrained()"),h5o=o(" class method or the "),XD=a("a"),u5o=o("from_config()"),p5o=o(` class
method.`),_5o=l(),e9=a("p"),b5o=o("This class cannot be instantiated directly using "),Yfe=a("code"),v5o=o("__init__()"),F5o=o(" (throws an error)."),T5o=l(),ft=a("div"),F(o9.$$.fragment),M5o=l(),Kfe=a("p"),E5o=o("Instantiates one of the base model classes of the library from a configuration."),C5o=l(),ad=a("p"),w5o=o(`Note:
Loading a model from its configuration file does `),Zfe=a("strong"),A5o=o("not"),L5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),y5o=o("from_pretrained()"),x5o=o(" to load the model weights."),$5o=l(),F(Fp.$$.fragment),k5o=l(),Ke=a("div"),F(r9.$$.fragment),S5o=l(),ege=a("p"),R5o=o("Instantiate one of the base model classes of the library from a pretrained model."),P5o=l(),Va=a("p"),B5o=o("The model class to instantiate is selected based on the "),oge=a("code"),I5o=o("model_type"),N5o=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),q5o=o("pretrained_model_name_or_path"),j5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),D5o=o("pretrained_model_name_or_path"),G5o=o(":"),O5o=l(),y=a("ul"),Tp=a("li"),age=a("strong"),V5o=o("albert"),X5o=o(" \u2014 "),WD=a("a"),z5o=o("AlbertModel"),W5o=o(" (ALBERT model)"),Q5o=l(),Mp=a("li"),nge=a("strong"),U5o=o("bart"),H5o=o(" \u2014 "),QD=a("a"),J5o=o("BartModel"),Y5o=o(" (BART model)"),K5o=l(),Ep=a("li"),sge=a("strong"),Z5o=o("beit"),e0o=o(" \u2014 "),UD=a("a"),o0o=o("BeitModel"),r0o=o(" (BEiT model)"),t0o=l(),Cp=a("li"),lge=a("strong"),a0o=o("bert"),n0o=o(" \u2014 "),HD=a("a"),s0o=o("BertModel"),l0o=o(" (BERT model)"),i0o=l(),wp=a("li"),ige=a("strong"),d0o=o("bert-generation"),c0o=o(" \u2014 "),JD=a("a"),m0o=o("BertGenerationEncoder"),f0o=o(" (Bert Generation model)"),g0o=l(),Ap=a("li"),dge=a("strong"),h0o=o("big_bird"),u0o=o(" \u2014 "),YD=a("a"),p0o=o("BigBirdModel"),_0o=o(" (BigBird model)"),b0o=l(),Lp=a("li"),cge=a("strong"),v0o=o("bigbird_pegasus"),F0o=o(" \u2014 "),KD=a("a"),T0o=o("BigBirdPegasusModel"),M0o=o(" (BigBird-Pegasus model)"),E0o=l(),yp=a("li"),mge=a("strong"),C0o=o("blenderbot"),w0o=o(" \u2014 "),ZD=a("a"),A0o=o("BlenderbotModel"),L0o=o(" (Blenderbot model)"),y0o=l(),xp=a("li"),fge=a("strong"),x0o=o("blenderbot-small"),$0o=o(" \u2014 "),eG=a("a"),k0o=o("BlenderbotSmallModel"),S0o=o(" (BlenderbotSmall model)"),R0o=l(),$p=a("li"),gge=a("strong"),P0o=o("bloom"),B0o=o(" \u2014 "),oG=a("a"),I0o=o("BloomModel"),N0o=o(" (BLOOM model)"),q0o=l(),kp=a("li"),hge=a("strong"),j0o=o("camembert"),D0o=o(" \u2014 "),rG=a("a"),G0o=o("CamembertModel"),O0o=o(" (CamemBERT model)"),V0o=l(),Sp=a("li"),uge=a("strong"),X0o=o("canine"),z0o=o(" \u2014 "),tG=a("a"),W0o=o("CanineModel"),Q0o=o(" (CANINE model)"),U0o=l(),Rp=a("li"),pge=a("strong"),H0o=o("clip"),J0o=o(" \u2014 "),aG=a("a"),Y0o=o("CLIPModel"),K0o=o(" (CLIP model)"),Z0o=l(),Pp=a("li"),_ge=a("strong"),ewo=o("codegen"),owo=o(" \u2014 "),nG=a("a"),rwo=o("CodeGenModel"),two=o(" (CodeGen model)"),awo=l(),Bp=a("li"),bge=a("strong"),nwo=o("convbert"),swo=o(" \u2014 "),sG=a("a"),lwo=o("ConvBertModel"),iwo=o(" (ConvBERT model)"),dwo=l(),Ip=a("li"),vge=a("strong"),cwo=o("convnext"),mwo=o(" \u2014 "),lG=a("a"),fwo=o("ConvNextModel"),gwo=o(" (ConvNeXT model)"),hwo=l(),Np=a("li"),Fge=a("strong"),uwo=o("ctrl"),pwo=o(" \u2014 "),iG=a("a"),_wo=o("CTRLModel"),bwo=o(" (CTRL model)"),vwo=l(),qp=a("li"),Tge=a("strong"),Fwo=o("cvt"),Two=o(" \u2014 "),dG=a("a"),Mwo=o("CvtModel"),Ewo=o(" (CvT model)"),Cwo=l(),jp=a("li"),Mge=a("strong"),wwo=o("data2vec-audio"),Awo=o(" \u2014 "),cG=a("a"),Lwo=o("Data2VecAudioModel"),ywo=o(" (Data2VecAudio model)"),xwo=l(),Dp=a("li"),Ege=a("strong"),$wo=o("data2vec-text"),kwo=o(" \u2014 "),mG=a("a"),Swo=o("Data2VecTextModel"),Rwo=o(" (Data2VecText model)"),Pwo=l(),Gp=a("li"),Cge=a("strong"),Bwo=o("data2vec-vision"),Iwo=o(" \u2014 "),fG=a("a"),Nwo=o("Data2VecVisionModel"),qwo=o(" (Data2VecVision model)"),jwo=l(),Op=a("li"),wge=a("strong"),Dwo=o("deberta"),Gwo=o(" \u2014 "),gG=a("a"),Owo=o("DebertaModel"),Vwo=o(" (DeBERTa model)"),Xwo=l(),Vp=a("li"),Age=a("strong"),zwo=o("deberta-v2"),Wwo=o(" \u2014 "),hG=a("a"),Qwo=o("DebertaV2Model"),Uwo=o(" (DeBERTa-v2 model)"),Hwo=l(),Xp=a("li"),Lge=a("strong"),Jwo=o("decision_transformer"),Ywo=o(" \u2014 "),uG=a("a"),Kwo=o("DecisionTransformerModel"),Zwo=o(" (Decision Transformer model)"),e6o=l(),zp=a("li"),yge=a("strong"),o6o=o("deit"),r6o=o(" \u2014 "),pG=a("a"),t6o=o("DeiTModel"),a6o=o(" (DeiT model)"),n6o=l(),Wp=a("li"),xge=a("strong"),s6o=o("detr"),l6o=o(" \u2014 "),_G=a("a"),i6o=o("DetrModel"),d6o=o(" (DETR model)"),c6o=l(),Qp=a("li"),$ge=a("strong"),m6o=o("distilbert"),f6o=o(" \u2014 "),bG=a("a"),g6o=o("DistilBertModel"),h6o=o(" (DistilBERT model)"),u6o=l(),Up=a("li"),kge=a("strong"),p6o=o("donut-swin"),_6o=o(" \u2014 "),vG=a("a"),b6o=o("DonutSwinModel"),v6o=o(" (DonutSwin model)"),F6o=l(),Hp=a("li"),Sge=a("strong"),T6o=o("dpr"),M6o=o(" \u2014 "),FG=a("a"),E6o=o("DPRQuestionEncoder"),C6o=o(" (DPR model)"),w6o=l(),Jp=a("li"),Rge=a("strong"),A6o=o("dpt"),L6o=o(" \u2014 "),TG=a("a"),y6o=o("DPTModel"),x6o=o(" (DPT model)"),$6o=l(),Yp=a("li"),Pge=a("strong"),k6o=o("electra"),S6o=o(" \u2014 "),MG=a("a"),R6o=o("ElectraModel"),P6o=o(" (ELECTRA model)"),B6o=l(),Kp=a("li"),Bge=a("strong"),I6o=o("flaubert"),N6o=o(" \u2014 "),EG=a("a"),q6o=o("FlaubertModel"),j6o=o(" (FlauBERT model)"),D6o=l(),Zp=a("li"),Ige=a("strong"),G6o=o("flava"),O6o=o(" \u2014 "),CG=a("a"),V6o=o("FlavaModel"),X6o=o(" (FLAVA model)"),z6o=l(),e_=a("li"),Nge=a("strong"),W6o=o("fnet"),Q6o=o(" \u2014 "),wG=a("a"),U6o=o("FNetModel"),H6o=o(" (FNet model)"),J6o=l(),o_=a("li"),qge=a("strong"),Y6o=o("fsmt"),K6o=o(" \u2014 "),AG=a("a"),Z6o=o("FSMTModel"),eAo=o(" (FairSeq Machine-Translation model)"),oAo=l(),nl=a("li"),jge=a("strong"),rAo=o("funnel"),tAo=o(" \u2014 "),LG=a("a"),aAo=o("FunnelModel"),nAo=o(" or "),yG=a("a"),sAo=o("FunnelBaseModel"),lAo=o(" (Funnel Transformer model)"),iAo=l(),r_=a("li"),Dge=a("strong"),dAo=o("glpn"),cAo=o(" \u2014 "),xG=a("a"),mAo=o("GLPNModel"),fAo=o(" (GLPN model)"),gAo=l(),t_=a("li"),Gge=a("strong"),hAo=o("gpt2"),uAo=o(" \u2014 "),$G=a("a"),pAo=o("GPT2Model"),_Ao=o(" (OpenAI GPT-2 model)"),bAo=l(),a_=a("li"),Oge=a("strong"),vAo=o("gpt_neo"),FAo=o(" \u2014 "),kG=a("a"),TAo=o("GPTNeoModel"),MAo=o(" (GPT Neo model)"),EAo=l(),n_=a("li"),Vge=a("strong"),CAo=o("gpt_neox"),wAo=o(" \u2014 "),SG=a("a"),AAo=o("GPTNeoXModel"),LAo=o(" (GPT NeoX model)"),yAo=l(),s_=a("li"),Xge=a("strong"),xAo=o("gptj"),$Ao=o(" \u2014 "),RG=a("a"),kAo=o("GPTJModel"),SAo=o(" (GPT-J model)"),RAo=l(),l_=a("li"),zge=a("strong"),PAo=o("groupvit"),BAo=o(" \u2014 "),PG=a("a"),IAo=o("GroupViTModel"),NAo=o(" (GroupViT model)"),qAo=l(),i_=a("li"),Wge=a("strong"),jAo=o("hubert"),DAo=o(" \u2014 "),BG=a("a"),GAo=o("HubertModel"),OAo=o(" (Hubert model)"),VAo=l(),d_=a("li"),Qge=a("strong"),XAo=o("ibert"),zAo=o(" \u2014 "),IG=a("a"),WAo=o("IBertModel"),QAo=o(" (I-BERT model)"),UAo=l(),c_=a("li"),Uge=a("strong"),HAo=o("imagegpt"),JAo=o(" \u2014 "),NG=a("a"),YAo=o("ImageGPTModel"),KAo=o(" (ImageGPT model)"),ZAo=l(),m_=a("li"),Hge=a("strong"),e7o=o("layoutlm"),o7o=o(" \u2014 "),qG=a("a"),r7o=o("LayoutLMModel"),t7o=o(" (LayoutLM model)"),a7o=l(),f_=a("li"),Jge=a("strong"),n7o=o("layoutlmv2"),s7o=o(" \u2014 "),jG=a("a"),l7o=o("LayoutLMv2Model"),i7o=o(" (LayoutLMv2 model)"),d7o=l(),g_=a("li"),Yge=a("strong"),c7o=o("layoutlmv3"),m7o=o(" \u2014 "),DG=a("a"),f7o=o("LayoutLMv3Model"),g7o=o(" (LayoutLMv3 model)"),h7o=l(),h_=a("li"),Kge=a("strong"),u7o=o("led"),p7o=o(" \u2014 "),GG=a("a"),_7o=o("LEDModel"),b7o=o(" (LED model)"),v7o=l(),u_=a("li"),Zge=a("strong"),F7o=o("levit"),T7o=o(" \u2014 "),OG=a("a"),M7o=o("LevitModel"),E7o=o(" (LeViT model)"),C7o=l(),p_=a("li"),ehe=a("strong"),w7o=o("longformer"),A7o=o(" \u2014 "),VG=a("a"),L7o=o("LongformerModel"),y7o=o(" (Longformer model)"),x7o=l(),__=a("li"),ohe=a("strong"),$7o=o("longt5"),k7o=o(" \u2014 "),XG=a("a"),S7o=o("LongT5Model"),R7o=o(" (LongT5 model)"),P7o=l(),b_=a("li"),rhe=a("strong"),B7o=o("luke"),I7o=o(" \u2014 "),zG=a("a"),N7o=o("LukeModel"),q7o=o(" (LUKE model)"),j7o=l(),v_=a("li"),the=a("strong"),D7o=o("lxmert"),G7o=o(" \u2014 "),WG=a("a"),O7o=o("LxmertModel"),V7o=o(" (LXMERT model)"),X7o=l(),F_=a("li"),ahe=a("strong"),z7o=o("m2m_100"),W7o=o(" \u2014 "),QG=a("a"),Q7o=o("M2M100Model"),U7o=o(" (M2M100 model)"),H7o=l(),T_=a("li"),nhe=a("strong"),J7o=o("marian"),Y7o=o(" \u2014 "),UG=a("a"),K7o=o("MarianModel"),Z7o=o(" (Marian model)"),eLo=l(),M_=a("li"),she=a("strong"),oLo=o("maskformer"),rLo=o(" \u2014 "),HG=a("a"),tLo=o("MaskFormerModel"),aLo=o(" (MaskFormer model)"),nLo=l(),E_=a("li"),lhe=a("strong"),sLo=o("mbart"),lLo=o(" \u2014 "),JG=a("a"),iLo=o("MBartModel"),dLo=o(" (mBART model)"),cLo=l(),C_=a("li"),ihe=a("strong"),mLo=o("mctct"),fLo=o(" \u2014 "),YG=a("a"),gLo=o("MCTCTModel"),hLo=o(" (M-CTC-T model)"),uLo=l(),w_=a("li"),dhe=a("strong"),pLo=o("megatron-bert"),_Lo=o(" \u2014 "),KG=a("a"),bLo=o("MegatronBertModel"),vLo=o(" (Megatron-BERT model)"),FLo=l(),A_=a("li"),che=a("strong"),TLo=o("mobilebert"),MLo=o(" \u2014 "),ZG=a("a"),ELo=o("MobileBertModel"),CLo=o(" (MobileBERT model)"),wLo=l(),L_=a("li"),mhe=a("strong"),ALo=o("mobilevit"),LLo=o(" \u2014 "),eO=a("a"),yLo=o("MobileViTModel"),xLo=o(" (MobileViT model)"),$Lo=l(),y_=a("li"),fhe=a("strong"),kLo=o("mpnet"),SLo=o(" \u2014 "),oO=a("a"),RLo=o("MPNetModel"),PLo=o(" (MPNet model)"),BLo=l(),x_=a("li"),ghe=a("strong"),ILo=o("mt5"),NLo=o(" \u2014 "),rO=a("a"),qLo=o("MT5Model"),jLo=o(" (MT5 model)"),DLo=l(),$_=a("li"),hhe=a("strong"),GLo=o("mvp"),OLo=o(" \u2014 "),tO=a("a"),VLo=o("MvpModel"),XLo=o(" (MVP model)"),zLo=l(),k_=a("li"),uhe=a("strong"),WLo=o("nezha"),QLo=o(" \u2014 "),aO=a("a"),ULo=o("NezhaModel"),HLo=o(" (Nezha model)"),JLo=l(),S_=a("li"),phe=a("strong"),YLo=o("nllb"),KLo=o(" \u2014 "),nO=a("a"),ZLo=o("M2M100Model"),eyo=o(" (NLLB model)"),oyo=l(),R_=a("li"),_he=a("strong"),ryo=o("nystromformer"),tyo=o(" \u2014 "),sO=a("a"),ayo=o("NystromformerModel"),nyo=o(" (Nystr\xF6mformer model)"),syo=l(),P_=a("li"),bhe=a("strong"),lyo=o("openai-gpt"),iyo=o(" \u2014 "),lO=a("a"),dyo=o("OpenAIGPTModel"),cyo=o(" (OpenAI GPT model)"),myo=l(),B_=a("li"),vhe=a("strong"),fyo=o("opt"),gyo=o(" \u2014 "),iO=a("a"),hyo=o("OPTModel"),uyo=o(" (OPT model)"),pyo=l(),I_=a("li"),Fhe=a("strong"),_yo=o("owlvit"),byo=o(" \u2014 "),dO=a("a"),vyo=o("OwlViTModel"),Fyo=o(" (OWL-ViT model)"),Tyo=l(),N_=a("li"),The=a("strong"),Myo=o("pegasus"),Eyo=o(" \u2014 "),cO=a("a"),Cyo=o("PegasusModel"),wyo=o(" (Pegasus model)"),Ayo=l(),q_=a("li"),Mhe=a("strong"),Lyo=o("pegasus_x"),yyo=o(" \u2014 "),mO=a("a"),xyo=o("PegasusXModel"),$yo=o(" (PEGASUS-X model)"),kyo=l(),j_=a("li"),Ehe=a("strong"),Syo=o("perceiver"),Ryo=o(" \u2014 "),fO=a("a"),Pyo=o("PerceiverModel"),Byo=o(" (Perceiver model)"),Iyo=l(),D_=a("li"),Che=a("strong"),Nyo=o("plbart"),qyo=o(" \u2014 "),gO=a("a"),jyo=o("PLBartModel"),Dyo=o(" (PLBart model)"),Gyo=l(),G_=a("li"),whe=a("strong"),Oyo=o("poolformer"),Vyo=o(" \u2014 "),hO=a("a"),Xyo=o("PoolFormerModel"),zyo=o(" (PoolFormer model)"),Wyo=l(),O_=a("li"),Ahe=a("strong"),Qyo=o("prophetnet"),Uyo=o(" \u2014 "),uO=a("a"),Hyo=o("ProphetNetModel"),Jyo=o(" (ProphetNet model)"),Yyo=l(),V_=a("li"),Lhe=a("strong"),Kyo=o("qdqbert"),Zyo=o(" \u2014 "),pO=a("a"),e8o=o("QDQBertModel"),o8o=o(" (QDQBert model)"),r8o=l(),X_=a("li"),yhe=a("strong"),t8o=o("reformer"),a8o=o(" \u2014 "),_O=a("a"),n8o=o("ReformerModel"),s8o=o(" (Reformer model)"),l8o=l(),z_=a("li"),xhe=a("strong"),i8o=o("regnet"),d8o=o(" \u2014 "),bO=a("a"),c8o=o("RegNetModel"),m8o=o(" (RegNet model)"),f8o=l(),W_=a("li"),$he=a("strong"),g8o=o("rembert"),h8o=o(" \u2014 "),vO=a("a"),u8o=o("RemBertModel"),p8o=o(" (RemBERT model)"),_8o=l(),Q_=a("li"),khe=a("strong"),b8o=o("resnet"),v8o=o(" \u2014 "),FO=a("a"),F8o=o("ResNetModel"),T8o=o(" (ResNet model)"),M8o=l(),U_=a("li"),She=a("strong"),E8o=o("retribert"),C8o=o(" \u2014 "),TO=a("a"),w8o=o("RetriBertModel"),A8o=o(" (RetriBERT model)"),L8o=l(),H_=a("li"),Rhe=a("strong"),y8o=o("roberta"),x8o=o(" \u2014 "),MO=a("a"),$8o=o("RobertaModel"),k8o=o(" (RoBERTa model)"),S8o=l(),J_=a("li"),Phe=a("strong"),R8o=o("roformer"),P8o=o(" \u2014 "),EO=a("a"),B8o=o("RoFormerModel"),I8o=o(" (RoFormer model)"),N8o=l(),Y_=a("li"),Bhe=a("strong"),q8o=o("segformer"),j8o=o(" \u2014 "),CO=a("a"),D8o=o("SegformerModel"),G8o=o(" (SegFormer model)"),O8o=l(),K_=a("li"),Ihe=a("strong"),V8o=o("sew"),X8o=o(" \u2014 "),wO=a("a"),z8o=o("SEWModel"),W8o=o(" (SEW model)"),Q8o=l(),Z_=a("li"),Nhe=a("strong"),U8o=o("sew-d"),H8o=o(" \u2014 "),AO=a("a"),J8o=o("SEWDModel"),Y8o=o(" (SEW-D model)"),K8o=l(),e2=a("li"),qhe=a("strong"),Z8o=o("speech_to_text"),e9o=o(" \u2014 "),LO=a("a"),o9o=o("Speech2TextModel"),r9o=o(" (Speech2Text model)"),t9o=l(),o2=a("li"),jhe=a("strong"),a9o=o("splinter"),n9o=o(" \u2014 "),yO=a("a"),s9o=o("SplinterModel"),l9o=o(" (Splinter model)"),i9o=l(),r2=a("li"),Dhe=a("strong"),d9o=o("squeezebert"),c9o=o(" \u2014 "),xO=a("a"),m9o=o("SqueezeBertModel"),f9o=o(" (SqueezeBERT model)"),g9o=l(),t2=a("li"),Ghe=a("strong"),h9o=o("swin"),u9o=o(" \u2014 "),$O=a("a"),p9o=o("SwinModel"),_9o=o(" (Swin Transformer model)"),b9o=l(),a2=a("li"),Ohe=a("strong"),v9o=o("swinv2"),F9o=o(" \u2014 "),kO=a("a"),T9o=o("Swinv2Model"),M9o=o(" (Swin Transformer V2 model)"),E9o=l(),n2=a("li"),Vhe=a("strong"),C9o=o("t5"),w9o=o(" \u2014 "),SO=a("a"),A9o=o("T5Model"),L9o=o(" (T5 model)"),y9o=l(),s2=a("li"),Xhe=a("strong"),x9o=o("tapas"),$9o=o(" \u2014 "),RO=a("a"),k9o=o("TapasModel"),S9o=o(" (TAPAS model)"),R9o=l(),l2=a("li"),zhe=a("strong"),P9o=o("trajectory_transformer"),B9o=o(" \u2014 "),PO=a("a"),I9o=o("TrajectoryTransformerModel"),N9o=o(" (Trajectory Transformer model)"),q9o=l(),i2=a("li"),Whe=a("strong"),j9o=o("transfo-xl"),D9o=o(" \u2014 "),BO=a("a"),G9o=o("TransfoXLModel"),O9o=o(" (Transformer-XL model)"),V9o=l(),d2=a("li"),Qhe=a("strong"),X9o=o("unispeech"),z9o=o(" \u2014 "),IO=a("a"),W9o=o("UniSpeechModel"),Q9o=o(" (UniSpeech model)"),U9o=l(),c2=a("li"),Uhe=a("strong"),H9o=o("unispeech-sat"),J9o=o(" \u2014 "),NO=a("a"),Y9o=o("UniSpeechSatModel"),K9o=o(" (UniSpeechSat model)"),Z9o=l(),m2=a("li"),Hhe=a("strong"),exo=o("van"),oxo=o(" \u2014 "),qO=a("a"),rxo=o("VanModel"),txo=o(" (VAN model)"),axo=l(),f2=a("li"),Jhe=a("strong"),nxo=o("videomae"),sxo=o(" \u2014 "),jO=a("a"),lxo=o("VideoMAEModel"),ixo=o(" (VideoMAE model)"),dxo=l(),g2=a("li"),Yhe=a("strong"),cxo=o("vilt"),mxo=o(" \u2014 "),DO=a("a"),fxo=o("ViltModel"),gxo=o(" (ViLT model)"),hxo=l(),h2=a("li"),Khe=a("strong"),uxo=o("vision-text-dual-encoder"),pxo=o(" \u2014 "),GO=a("a"),_xo=o("VisionTextDualEncoderModel"),bxo=o(" (VisionTextDualEncoder model)"),vxo=l(),u2=a("li"),Zhe=a("strong"),Fxo=o("visual_bert"),Txo=o(" \u2014 "),OO=a("a"),Mxo=o("VisualBertModel"),Exo=o(" (VisualBERT model)"),Cxo=l(),p2=a("li"),eue=a("strong"),wxo=o("vit"),Axo=o(" \u2014 "),VO=a("a"),Lxo=o("ViTModel"),yxo=o(" (ViT model)"),xxo=l(),_2=a("li"),oue=a("strong"),$xo=o("vit_mae"),kxo=o(" \u2014 "),XO=a("a"),Sxo=o("ViTMAEModel"),Rxo=o(" (ViTMAE model)"),Pxo=l(),b2=a("li"),rue=a("strong"),Bxo=o("wav2vec2"),Ixo=o(" \u2014 "),zO=a("a"),Nxo=o("Wav2Vec2Model"),qxo=o(" (Wav2Vec2 model)"),jxo=l(),v2=a("li"),tue=a("strong"),Dxo=o("wav2vec2-conformer"),Gxo=o(" \u2014 "),WO=a("a"),Oxo=o("Wav2Vec2ConformerModel"),Vxo=o(" (Wav2Vec2-Conformer model)"),Xxo=l(),F2=a("li"),aue=a("strong"),zxo=o("wavlm"),Wxo=o(" \u2014 "),QO=a("a"),Qxo=o("WavLMModel"),Uxo=o(" (WavLM model)"),Hxo=l(),T2=a("li"),nue=a("strong"),Jxo=o("xglm"),Yxo=o(" \u2014 "),UO=a("a"),Kxo=o("XGLMModel"),Zxo=o(" (XGLM model)"),e$o=l(),M2=a("li"),sue=a("strong"),o$o=o("xlm"),r$o=o(" \u2014 "),HO=a("a"),t$o=o("XLMModel"),a$o=o(" (XLM model)"),n$o=l(),E2=a("li"),lue=a("strong"),s$o=o("xlm-prophetnet"),l$o=o(" \u2014 "),JO=a("a"),i$o=o("XLMProphetNetModel"),d$o=o(" (XLM-ProphetNet model)"),c$o=l(),C2=a("li"),iue=a("strong"),m$o=o("xlm-roberta"),f$o=o(" \u2014 "),YO=a("a"),g$o=o("XLMRobertaModel"),h$o=o(" (XLM-RoBERTa model)"),u$o=l(),w2=a("li"),due=a("strong"),p$o=o("xlm-roberta-xl"),_$o=o(" \u2014 "),KO=a("a"),b$o=o("XLMRobertaXLModel"),v$o=o(" (XLM-RoBERTa-XL model)"),F$o=l(),A2=a("li"),cue=a("strong"),T$o=o("xlnet"),M$o=o(" \u2014 "),ZO=a("a"),E$o=o("XLNetModel"),C$o=o(" (XLNet model)"),w$o=l(),L2=a("li"),mue=a("strong"),A$o=o("yolos"),L$o=o(" \u2014 "),eV=a("a"),y$o=o("YolosModel"),x$o=o(" (YOLOS model)"),$$o=l(),y2=a("li"),fue=a("strong"),k$o=o("yoso"),S$o=o(" \u2014 "),oV=a("a"),R$o=o("YosoModel"),P$o=o(" (YOSO model)"),B$o=l(),x2=a("p"),I$o=o("The model is set in evaluation mode by default using "),gue=a("code"),N$o=o("model.eval()"),q$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=a("code"),j$o=o("model.train()"),D$o=l(),F($2.$$.fragment),JUe=l(),nd=a("h2"),k2=a("a"),uue=a("span"),F(t9.$$.fragment),G$o=l(),pue=a("span"),O$o=o("AutoModelForPreTraining"),YUe=l(),Ro=a("div"),F(a9.$$.fragment),V$o=l(),sd=a("p"),X$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rV=a("a"),z$o=o("from_pretrained()"),W$o=o(" class method or the "),tV=a("a"),Q$o=o("from_config()"),U$o=o(` class
method.`),H$o=l(),n9=a("p"),J$o=o("This class cannot be instantiated directly using "),_ue=a("code"),Y$o=o("__init__()"),K$o=o(" (throws an error)."),Z$o=l(),gt=a("div"),F(s9.$$.fragment),eko=l(),bue=a("p"),oko=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rko=l(),ld=a("p"),tko=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),ako=o("not"),nko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),sko=o("from_pretrained()"),lko=o(" to load the model weights."),iko=l(),F(S2.$$.fragment),dko=l(),Ze=a("div"),F(l9.$$.fragment),cko=l(),Fue=a("p"),mko=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fko=l(),Xa=a("p"),gko=o("The model class to instantiate is selected based on the "),Tue=a("code"),hko=o("model_type"),uko=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),pko=o("pretrained_model_name_or_path"),_ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),bko=o("pretrained_model_name_or_path"),vko=o(":"),Fko=l(),G=a("ul"),R2=a("li"),Cue=a("strong"),Tko=o("albert"),Mko=o(" \u2014 "),nV=a("a"),Eko=o("AlbertForPreTraining"),Cko=o(" (ALBERT model)"),wko=l(),P2=a("li"),wue=a("strong"),Ako=o("bart"),Lko=o(" \u2014 "),sV=a("a"),yko=o("BartForConditionalGeneration"),xko=o(" (BART model)"),$ko=l(),B2=a("li"),Aue=a("strong"),kko=o("bert"),Sko=o(" \u2014 "),lV=a("a"),Rko=o("BertForPreTraining"),Pko=o(" (BERT model)"),Bko=l(),I2=a("li"),Lue=a("strong"),Iko=o("big_bird"),Nko=o(" \u2014 "),iV=a("a"),qko=o("BigBirdForPreTraining"),jko=o(" (BigBird model)"),Dko=l(),N2=a("li"),yue=a("strong"),Gko=o("bloom"),Oko=o(" \u2014 "),dV=a("a"),Vko=o("BloomForCausalLM"),Xko=o(" (BLOOM model)"),zko=l(),q2=a("li"),xue=a("strong"),Wko=o("camembert"),Qko=o(" \u2014 "),cV=a("a"),Uko=o("CamembertForMaskedLM"),Hko=o(" (CamemBERT model)"),Jko=l(),j2=a("li"),$ue=a("strong"),Yko=o("ctrl"),Kko=o(" \u2014 "),mV=a("a"),Zko=o("CTRLLMHeadModel"),eSo=o(" (CTRL model)"),oSo=l(),D2=a("li"),kue=a("strong"),rSo=o("data2vec-text"),tSo=o(" \u2014 "),fV=a("a"),aSo=o("Data2VecTextForMaskedLM"),nSo=o(" (Data2VecText model)"),sSo=l(),G2=a("li"),Sue=a("strong"),lSo=o("deberta"),iSo=o(" \u2014 "),gV=a("a"),dSo=o("DebertaForMaskedLM"),cSo=o(" (DeBERTa model)"),mSo=l(),O2=a("li"),Rue=a("strong"),fSo=o("deberta-v2"),gSo=o(" \u2014 "),hV=a("a"),hSo=o("DebertaV2ForMaskedLM"),uSo=o(" (DeBERTa-v2 model)"),pSo=l(),V2=a("li"),Pue=a("strong"),_So=o("distilbert"),bSo=o(" \u2014 "),uV=a("a"),vSo=o("DistilBertForMaskedLM"),FSo=o(" (DistilBERT model)"),TSo=l(),X2=a("li"),Bue=a("strong"),MSo=o("electra"),ESo=o(" \u2014 "),pV=a("a"),CSo=o("ElectraForPreTraining"),wSo=o(" (ELECTRA model)"),ASo=l(),z2=a("li"),Iue=a("strong"),LSo=o("flaubert"),ySo=o(" \u2014 "),_V=a("a"),xSo=o("FlaubertWithLMHeadModel"),$So=o(" (FlauBERT model)"),kSo=l(),W2=a("li"),Nue=a("strong"),SSo=o("flava"),RSo=o(" \u2014 "),bV=a("a"),PSo=o("FlavaForPreTraining"),BSo=o(" (FLAVA model)"),ISo=l(),Q2=a("li"),que=a("strong"),NSo=o("fnet"),qSo=o(" \u2014 "),vV=a("a"),jSo=o("FNetForPreTraining"),DSo=o(" (FNet model)"),GSo=l(),U2=a("li"),jue=a("strong"),OSo=o("fsmt"),VSo=o(" \u2014 "),FV=a("a"),XSo=o("FSMTForConditionalGeneration"),zSo=o(" (FairSeq Machine-Translation model)"),WSo=l(),H2=a("li"),Due=a("strong"),QSo=o("funnel"),USo=o(" \u2014 "),TV=a("a"),HSo=o("FunnelForPreTraining"),JSo=o(" (Funnel Transformer model)"),YSo=l(),J2=a("li"),Gue=a("strong"),KSo=o("gpt2"),ZSo=o(" \u2014 "),MV=a("a"),eRo=o("GPT2LMHeadModel"),oRo=o(" (OpenAI GPT-2 model)"),rRo=l(),Y2=a("li"),Oue=a("strong"),tRo=o("ibert"),aRo=o(" \u2014 "),EV=a("a"),nRo=o("IBertForMaskedLM"),sRo=o(" (I-BERT model)"),lRo=l(),K2=a("li"),Vue=a("strong"),iRo=o("layoutlm"),dRo=o(" \u2014 "),CV=a("a"),cRo=o("LayoutLMForMaskedLM"),mRo=o(" (LayoutLM model)"),fRo=l(),Z2=a("li"),Xue=a("strong"),gRo=o("longformer"),hRo=o(" \u2014 "),wV=a("a"),uRo=o("LongformerForMaskedLM"),pRo=o(" (Longformer model)"),_Ro=l(),eb=a("li"),zue=a("strong"),bRo=o("luke"),vRo=o(" \u2014 "),AV=a("a"),FRo=o("LukeForMaskedLM"),TRo=o(" (LUKE model)"),MRo=l(),ob=a("li"),Wue=a("strong"),ERo=o("lxmert"),CRo=o(" \u2014 "),LV=a("a"),wRo=o("LxmertForPreTraining"),ARo=o(" (LXMERT model)"),LRo=l(),rb=a("li"),Que=a("strong"),yRo=o("megatron-bert"),xRo=o(" \u2014 "),yV=a("a"),$Ro=o("MegatronBertForPreTraining"),kRo=o(" (Megatron-BERT model)"),SRo=l(),tb=a("li"),Uue=a("strong"),RRo=o("mobilebert"),PRo=o(" \u2014 "),xV=a("a"),BRo=o("MobileBertForPreTraining"),IRo=o(" (MobileBERT model)"),NRo=l(),ab=a("li"),Hue=a("strong"),qRo=o("mpnet"),jRo=o(" \u2014 "),$V=a("a"),DRo=o("MPNetForMaskedLM"),GRo=o(" (MPNet model)"),ORo=l(),nb=a("li"),Jue=a("strong"),VRo=o("mvp"),XRo=o(" \u2014 "),kV=a("a"),zRo=o("MvpForConditionalGeneration"),WRo=o(" (MVP model)"),QRo=l(),sb=a("li"),Yue=a("strong"),URo=o("nezha"),HRo=o(" \u2014 "),SV=a("a"),JRo=o("NezhaForPreTraining"),YRo=o(" (Nezha model)"),KRo=l(),lb=a("li"),Kue=a("strong"),ZRo=o("openai-gpt"),ePo=o(" \u2014 "),RV=a("a"),oPo=o("OpenAIGPTLMHeadModel"),rPo=o(" (OpenAI GPT model)"),tPo=l(),ib=a("li"),Zue=a("strong"),aPo=o("retribert"),nPo=o(" \u2014 "),PV=a("a"),sPo=o("RetriBertModel"),lPo=o(" (RetriBERT model)"),iPo=l(),db=a("li"),epe=a("strong"),dPo=o("roberta"),cPo=o(" \u2014 "),BV=a("a"),mPo=o("RobertaForMaskedLM"),fPo=o(" (RoBERTa model)"),gPo=l(),cb=a("li"),ope=a("strong"),hPo=o("splinter"),uPo=o(" \u2014 "),IV=a("a"),pPo=o("SplinterForPreTraining"),_Po=o(" (Splinter model)"),bPo=l(),mb=a("li"),rpe=a("strong"),vPo=o("squeezebert"),FPo=o(" \u2014 "),NV=a("a"),TPo=o("SqueezeBertForMaskedLM"),MPo=o(" (SqueezeBERT model)"),EPo=l(),fb=a("li"),tpe=a("strong"),CPo=o("t5"),wPo=o(" \u2014 "),qV=a("a"),APo=o("T5ForConditionalGeneration"),LPo=o(" (T5 model)"),yPo=l(),gb=a("li"),ape=a("strong"),xPo=o("tapas"),$Po=o(" \u2014 "),jV=a("a"),kPo=o("TapasForMaskedLM"),SPo=o(" (TAPAS model)"),RPo=l(),hb=a("li"),npe=a("strong"),PPo=o("transfo-xl"),BPo=o(" \u2014 "),DV=a("a"),IPo=o("TransfoXLLMHeadModel"),NPo=o(" (Transformer-XL model)"),qPo=l(),ub=a("li"),spe=a("strong"),jPo=o("unispeech"),DPo=o(" \u2014 "),GV=a("a"),GPo=o("UniSpeechForPreTraining"),OPo=o(" (UniSpeech model)"),VPo=l(),pb=a("li"),lpe=a("strong"),XPo=o("unispeech-sat"),zPo=o(" \u2014 "),OV=a("a"),WPo=o("UniSpeechSatForPreTraining"),QPo=o(" (UniSpeechSat model)"),UPo=l(),_b=a("li"),ipe=a("strong"),HPo=o("videomae"),JPo=o(" \u2014 "),VV=a("a"),YPo=o("VideoMAEForPreTraining"),KPo=o(" (VideoMAE model)"),ZPo=l(),bb=a("li"),dpe=a("strong"),eBo=o("visual_bert"),oBo=o(" \u2014 "),XV=a("a"),rBo=o("VisualBertForPreTraining"),tBo=o(" (VisualBERT model)"),aBo=l(),vb=a("li"),cpe=a("strong"),nBo=o("vit_mae"),sBo=o(" \u2014 "),zV=a("a"),lBo=o("ViTMAEForPreTraining"),iBo=o(" (ViTMAE model)"),dBo=l(),Fb=a("li"),mpe=a("strong"),cBo=o("wav2vec2"),mBo=o(" \u2014 "),WV=a("a"),fBo=o("Wav2Vec2ForPreTraining"),gBo=o(" (Wav2Vec2 model)"),hBo=l(),Tb=a("li"),fpe=a("strong"),uBo=o("wav2vec2-conformer"),pBo=o(" \u2014 "),QV=a("a"),_Bo=o("Wav2Vec2ConformerForPreTraining"),bBo=o(" (Wav2Vec2-Conformer model)"),vBo=l(),Mb=a("li"),gpe=a("strong"),FBo=o("xlm"),TBo=o(" \u2014 "),UV=a("a"),MBo=o("XLMWithLMHeadModel"),EBo=o(" (XLM model)"),CBo=l(),Eb=a("li"),hpe=a("strong"),wBo=o("xlm-roberta"),ABo=o(" \u2014 "),HV=a("a"),LBo=o("XLMRobertaForMaskedLM"),yBo=o(" (XLM-RoBERTa model)"),xBo=l(),Cb=a("li"),upe=a("strong"),$Bo=o("xlm-roberta-xl"),kBo=o(" \u2014 "),JV=a("a"),SBo=o("XLMRobertaXLForMaskedLM"),RBo=o(" (XLM-RoBERTa-XL model)"),PBo=l(),wb=a("li"),ppe=a("strong"),BBo=o("xlnet"),IBo=o(" \u2014 "),YV=a("a"),NBo=o("XLNetLMHeadModel"),qBo=o(" (XLNet model)"),jBo=l(),Ab=a("p"),DBo=o("The model is set in evaluation mode by default using "),_pe=a("code"),GBo=o("model.eval()"),OBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),VBo=o("model.train()"),XBo=l(),F(Lb.$$.fragment),KUe=l(),id=a("h2"),yb=a("a"),vpe=a("span"),F(i9.$$.fragment),zBo=l(),Fpe=a("span"),WBo=o("AutoModelForCausalLM"),ZUe=l(),Po=a("div"),F(d9.$$.fragment),QBo=l(),dd=a("p"),UBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KV=a("a"),HBo=o("from_pretrained()"),JBo=o(" class method or the "),ZV=a("a"),YBo=o("from_config()"),KBo=o(` class
method.`),ZBo=l(),c9=a("p"),eIo=o("This class cannot be instantiated directly using "),Tpe=a("code"),oIo=o("__init__()"),rIo=o(" (throws an error)."),tIo=l(),ht=a("div"),F(m9.$$.fragment),aIo=l(),Mpe=a("p"),nIo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sIo=l(),cd=a("p"),lIo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),iIo=o("not"),dIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),cIo=o("from_pretrained()"),mIo=o(" to load the model weights."),fIo=l(),F(xb.$$.fragment),gIo=l(),eo=a("div"),F(f9.$$.fragment),hIo=l(),Cpe=a("p"),uIo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pIo=l(),za=a("p"),_Io=o("The model class to instantiate is selected based on the "),wpe=a("code"),bIo=o("model_type"),vIo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),FIo=o("pretrained_model_name_or_path"),TIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),MIo=o("pretrained_model_name_or_path"),EIo=o(":"),CIo=l(),z=a("ul"),$b=a("li"),ype=a("strong"),wIo=o("bart"),AIo=o(" \u2014 "),oX=a("a"),LIo=o("BartForCausalLM"),yIo=o(" (BART model)"),xIo=l(),kb=a("li"),xpe=a("strong"),$Io=o("bert"),kIo=o(" \u2014 "),rX=a("a"),SIo=o("BertLMHeadModel"),RIo=o(" (BERT model)"),PIo=l(),Sb=a("li"),$pe=a("strong"),BIo=o("bert-generation"),IIo=o(" \u2014 "),tX=a("a"),NIo=o("BertGenerationDecoder"),qIo=o(" (Bert Generation model)"),jIo=l(),Rb=a("li"),kpe=a("strong"),DIo=o("big_bird"),GIo=o(" \u2014 "),aX=a("a"),OIo=o("BigBirdForCausalLM"),VIo=o(" (BigBird model)"),XIo=l(),Pb=a("li"),Spe=a("strong"),zIo=o("bigbird_pegasus"),WIo=o(" \u2014 "),nX=a("a"),QIo=o("BigBirdPegasusForCausalLM"),UIo=o(" (BigBird-Pegasus model)"),HIo=l(),Bb=a("li"),Rpe=a("strong"),JIo=o("blenderbot"),YIo=o(" \u2014 "),sX=a("a"),KIo=o("BlenderbotForCausalLM"),ZIo=o(" (Blenderbot model)"),eNo=l(),Ib=a("li"),Ppe=a("strong"),oNo=o("blenderbot-small"),rNo=o(" \u2014 "),lX=a("a"),tNo=o("BlenderbotSmallForCausalLM"),aNo=o(" (BlenderbotSmall model)"),nNo=l(),Nb=a("li"),Bpe=a("strong"),sNo=o("bloom"),lNo=o(" \u2014 "),iX=a("a"),iNo=o("BloomForCausalLM"),dNo=o(" (BLOOM model)"),cNo=l(),qb=a("li"),Ipe=a("strong"),mNo=o("camembert"),fNo=o(" \u2014 "),dX=a("a"),gNo=o("CamembertForCausalLM"),hNo=o(" (CamemBERT model)"),uNo=l(),jb=a("li"),Npe=a("strong"),pNo=o("codegen"),_No=o(" \u2014 "),cX=a("a"),bNo=o("CodeGenForCausalLM"),vNo=o(" (CodeGen model)"),FNo=l(),Db=a("li"),qpe=a("strong"),TNo=o("ctrl"),MNo=o(" \u2014 "),mX=a("a"),ENo=o("CTRLLMHeadModel"),CNo=o(" (CTRL model)"),wNo=l(),Gb=a("li"),jpe=a("strong"),ANo=o("data2vec-text"),LNo=o(" \u2014 "),fX=a("a"),yNo=o("Data2VecTextForCausalLM"),xNo=o(" (Data2VecText model)"),$No=l(),Ob=a("li"),Dpe=a("strong"),kNo=o("electra"),SNo=o(" \u2014 "),gX=a("a"),RNo=o("ElectraForCausalLM"),PNo=o(" (ELECTRA model)"),BNo=l(),Vb=a("li"),Gpe=a("strong"),INo=o("gpt2"),NNo=o(" \u2014 "),hX=a("a"),qNo=o("GPT2LMHeadModel"),jNo=o(" (OpenAI GPT-2 model)"),DNo=l(),Xb=a("li"),Ope=a("strong"),GNo=o("gpt_neo"),ONo=o(" \u2014 "),uX=a("a"),VNo=o("GPTNeoForCausalLM"),XNo=o(" (GPT Neo model)"),zNo=l(),zb=a("li"),Vpe=a("strong"),WNo=o("gpt_neox"),QNo=o(" \u2014 "),pX=a("a"),UNo=o("GPTNeoXForCausalLM"),HNo=o(" (GPT NeoX model)"),JNo=l(),Wb=a("li"),Xpe=a("strong"),YNo=o("gptj"),KNo=o(" \u2014 "),_X=a("a"),ZNo=o("GPTJForCausalLM"),eqo=o(" (GPT-J model)"),oqo=l(),Qb=a("li"),zpe=a("strong"),rqo=o("marian"),tqo=o(" \u2014 "),bX=a("a"),aqo=o("MarianForCausalLM"),nqo=o(" (Marian model)"),sqo=l(),Ub=a("li"),Wpe=a("strong"),lqo=o("mbart"),iqo=o(" \u2014 "),vX=a("a"),dqo=o("MBartForCausalLM"),cqo=o(" (mBART model)"),mqo=l(),Hb=a("li"),Qpe=a("strong"),fqo=o("megatron-bert"),gqo=o(" \u2014 "),FX=a("a"),hqo=o("MegatronBertForCausalLM"),uqo=o(" (Megatron-BERT model)"),pqo=l(),Jb=a("li"),Upe=a("strong"),_qo=o("mvp"),bqo=o(" \u2014 "),TX=a("a"),vqo=o("MvpForCausalLM"),Fqo=o(" (MVP model)"),Tqo=l(),Yb=a("li"),Hpe=a("strong"),Mqo=o("openai-gpt"),Eqo=o(" \u2014 "),MX=a("a"),Cqo=o("OpenAIGPTLMHeadModel"),wqo=o(" (OpenAI GPT model)"),Aqo=l(),Kb=a("li"),Jpe=a("strong"),Lqo=o("opt"),yqo=o(" \u2014 "),EX=a("a"),xqo=o("OPTForCausalLM"),$qo=o(" (OPT model)"),kqo=l(),Zb=a("li"),Ype=a("strong"),Sqo=o("pegasus"),Rqo=o(" \u2014 "),CX=a("a"),Pqo=o("PegasusForCausalLM"),Bqo=o(" (Pegasus model)"),Iqo=l(),ev=a("li"),Kpe=a("strong"),Nqo=o("plbart"),qqo=o(" \u2014 "),wX=a("a"),jqo=o("PLBartForCausalLM"),Dqo=o(" (PLBart model)"),Gqo=l(),ov=a("li"),Zpe=a("strong"),Oqo=o("prophetnet"),Vqo=o(" \u2014 "),AX=a("a"),Xqo=o("ProphetNetForCausalLM"),zqo=o(" (ProphetNet model)"),Wqo=l(),rv=a("li"),e_e=a("strong"),Qqo=o("qdqbert"),Uqo=o(" \u2014 "),LX=a("a"),Hqo=o("QDQBertLMHeadModel"),Jqo=o(" (QDQBert model)"),Yqo=l(),tv=a("li"),o_e=a("strong"),Kqo=o("reformer"),Zqo=o(" \u2014 "),yX=a("a"),ejo=o("ReformerModelWithLMHead"),ojo=o(" (Reformer model)"),rjo=l(),av=a("li"),r_e=a("strong"),tjo=o("rembert"),ajo=o(" \u2014 "),xX=a("a"),njo=o("RemBertForCausalLM"),sjo=o(" (RemBERT model)"),ljo=l(),nv=a("li"),t_e=a("strong"),ijo=o("roberta"),djo=o(" \u2014 "),$X=a("a"),cjo=o("RobertaForCausalLM"),mjo=o(" (RoBERTa model)"),fjo=l(),sv=a("li"),a_e=a("strong"),gjo=o("roformer"),hjo=o(" \u2014 "),kX=a("a"),ujo=o("RoFormerForCausalLM"),pjo=o(" (RoFormer model)"),_jo=l(),lv=a("li"),n_e=a("strong"),bjo=o("speech_to_text_2"),vjo=o(" \u2014 "),SX=a("a"),Fjo=o("Speech2Text2ForCausalLM"),Tjo=o(" (Speech2Text2 model)"),Mjo=l(),iv=a("li"),s_e=a("strong"),Ejo=o("transfo-xl"),Cjo=o(" \u2014 "),RX=a("a"),wjo=o("TransfoXLLMHeadModel"),Ajo=o(" (Transformer-XL model)"),Ljo=l(),dv=a("li"),l_e=a("strong"),yjo=o("trocr"),xjo=o(" \u2014 "),PX=a("a"),$jo=o("TrOCRForCausalLM"),kjo=o(" (TrOCR model)"),Sjo=l(),cv=a("li"),i_e=a("strong"),Rjo=o("xglm"),Pjo=o(" \u2014 "),BX=a("a"),Bjo=o("XGLMForCausalLM"),Ijo=o(" (XGLM model)"),Njo=l(),mv=a("li"),d_e=a("strong"),qjo=o("xlm"),jjo=o(" \u2014 "),IX=a("a"),Djo=o("XLMWithLMHeadModel"),Gjo=o(" (XLM model)"),Ojo=l(),fv=a("li"),c_e=a("strong"),Vjo=o("xlm-prophetnet"),Xjo=o(" \u2014 "),NX=a("a"),zjo=o("XLMProphetNetForCausalLM"),Wjo=o(" (XLM-ProphetNet model)"),Qjo=l(),gv=a("li"),m_e=a("strong"),Ujo=o("xlm-roberta"),Hjo=o(" \u2014 "),qX=a("a"),Jjo=o("XLMRobertaForCausalLM"),Yjo=o(" (XLM-RoBERTa model)"),Kjo=l(),hv=a("li"),f_e=a("strong"),Zjo=o("xlm-roberta-xl"),eDo=o(" \u2014 "),jX=a("a"),oDo=o("XLMRobertaXLForCausalLM"),rDo=o(" (XLM-RoBERTa-XL model)"),tDo=l(),uv=a("li"),g_e=a("strong"),aDo=o("xlnet"),nDo=o(" \u2014 "),DX=a("a"),sDo=o("XLNetLMHeadModel"),lDo=o(" (XLNet model)"),iDo=l(),pv=a("p"),dDo=o("The model is set in evaluation mode by default using "),h_e=a("code"),cDo=o("model.eval()"),mDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),fDo=o("model.train()"),gDo=l(),F(_v.$$.fragment),eHe=l(),md=a("h2"),bv=a("a"),p_e=a("span"),F(g9.$$.fragment),hDo=l(),__e=a("span"),uDo=o("AutoModelForMaskedLM"),oHe=l(),Bo=a("div"),F(h9.$$.fragment),pDo=l(),fd=a("p"),_Do=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GX=a("a"),bDo=o("from_pretrained()"),vDo=o(" class method or the "),OX=a("a"),FDo=o("from_config()"),TDo=o(` class
method.`),MDo=l(),u9=a("p"),EDo=o("This class cannot be instantiated directly using "),b_e=a("code"),CDo=o("__init__()"),wDo=o(" (throws an error)."),ADo=l(),ut=a("div"),F(p9.$$.fragment),LDo=l(),v_e=a("p"),yDo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xDo=l(),gd=a("p"),$Do=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),kDo=o("not"),SDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=a("a"),RDo=o("from_pretrained()"),PDo=o(" to load the model weights."),BDo=l(),F(vv.$$.fragment),IDo=l(),oo=a("div"),F(_9.$$.fragment),NDo=l(),T_e=a("p"),qDo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jDo=l(),Wa=a("p"),DDo=o("The model class to instantiate is selected based on the "),M_e=a("code"),GDo=o("model_type"),ODo=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),VDo=o("pretrained_model_name_or_path"),XDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),zDo=o("pretrained_model_name_or_path"),WDo=o(":"),QDo=l(),U=a("ul"),Fv=a("li"),w_e=a("strong"),UDo=o("albert"),HDo=o(" \u2014 "),XX=a("a"),JDo=o("AlbertForMaskedLM"),YDo=o(" (ALBERT model)"),KDo=l(),Tv=a("li"),A_e=a("strong"),ZDo=o("bart"),eGo=o(" \u2014 "),zX=a("a"),oGo=o("BartForConditionalGeneration"),rGo=o(" (BART model)"),tGo=l(),Mv=a("li"),L_e=a("strong"),aGo=o("bert"),nGo=o(" \u2014 "),WX=a("a"),sGo=o("BertForMaskedLM"),lGo=o(" (BERT model)"),iGo=l(),Ev=a("li"),y_e=a("strong"),dGo=o("big_bird"),cGo=o(" \u2014 "),QX=a("a"),mGo=o("BigBirdForMaskedLM"),fGo=o(" (BigBird model)"),gGo=l(),Cv=a("li"),x_e=a("strong"),hGo=o("camembert"),uGo=o(" \u2014 "),UX=a("a"),pGo=o("CamembertForMaskedLM"),_Go=o(" (CamemBERT model)"),bGo=l(),wv=a("li"),$_e=a("strong"),vGo=o("convbert"),FGo=o(" \u2014 "),HX=a("a"),TGo=o("ConvBertForMaskedLM"),MGo=o(" (ConvBERT model)"),EGo=l(),Av=a("li"),k_e=a("strong"),CGo=o("data2vec-text"),wGo=o(" \u2014 "),JX=a("a"),AGo=o("Data2VecTextForMaskedLM"),LGo=o(" (Data2VecText model)"),yGo=l(),Lv=a("li"),S_e=a("strong"),xGo=o("deberta"),$Go=o(" \u2014 "),YX=a("a"),kGo=o("DebertaForMaskedLM"),SGo=o(" (DeBERTa model)"),RGo=l(),yv=a("li"),R_e=a("strong"),PGo=o("deberta-v2"),BGo=o(" \u2014 "),KX=a("a"),IGo=o("DebertaV2ForMaskedLM"),NGo=o(" (DeBERTa-v2 model)"),qGo=l(),xv=a("li"),P_e=a("strong"),jGo=o("distilbert"),DGo=o(" \u2014 "),ZX=a("a"),GGo=o("DistilBertForMaskedLM"),OGo=o(" (DistilBERT model)"),VGo=l(),$v=a("li"),B_e=a("strong"),XGo=o("electra"),zGo=o(" \u2014 "),ez=a("a"),WGo=o("ElectraForMaskedLM"),QGo=o(" (ELECTRA model)"),UGo=l(),kv=a("li"),I_e=a("strong"),HGo=o("flaubert"),JGo=o(" \u2014 "),oz=a("a"),YGo=o("FlaubertWithLMHeadModel"),KGo=o(" (FlauBERT model)"),ZGo=l(),Sv=a("li"),N_e=a("strong"),eOo=o("fnet"),oOo=o(" \u2014 "),rz=a("a"),rOo=o("FNetForMaskedLM"),tOo=o(" (FNet model)"),aOo=l(),Rv=a("li"),q_e=a("strong"),nOo=o("funnel"),sOo=o(" \u2014 "),tz=a("a"),lOo=o("FunnelForMaskedLM"),iOo=o(" (Funnel Transformer model)"),dOo=l(),Pv=a("li"),j_e=a("strong"),cOo=o("ibert"),mOo=o(" \u2014 "),az=a("a"),fOo=o("IBertForMaskedLM"),gOo=o(" (I-BERT model)"),hOo=l(),Bv=a("li"),D_e=a("strong"),uOo=o("layoutlm"),pOo=o(" \u2014 "),nz=a("a"),_Oo=o("LayoutLMForMaskedLM"),bOo=o(" (LayoutLM model)"),vOo=l(),Iv=a("li"),G_e=a("strong"),FOo=o("longformer"),TOo=o(" \u2014 "),sz=a("a"),MOo=o("LongformerForMaskedLM"),EOo=o(" (Longformer model)"),COo=l(),Nv=a("li"),O_e=a("strong"),wOo=o("luke"),AOo=o(" \u2014 "),lz=a("a"),LOo=o("LukeForMaskedLM"),yOo=o(" (LUKE model)"),xOo=l(),qv=a("li"),V_e=a("strong"),$Oo=o("mbart"),kOo=o(" \u2014 "),iz=a("a"),SOo=o("MBartForConditionalGeneration"),ROo=o(" (mBART model)"),POo=l(),jv=a("li"),X_e=a("strong"),BOo=o("megatron-bert"),IOo=o(" \u2014 "),dz=a("a"),NOo=o("MegatronBertForMaskedLM"),qOo=o(" (Megatron-BERT model)"),jOo=l(),Dv=a("li"),z_e=a("strong"),DOo=o("mobilebert"),GOo=o(" \u2014 "),cz=a("a"),OOo=o("MobileBertForMaskedLM"),VOo=o(" (MobileBERT model)"),XOo=l(),Gv=a("li"),W_e=a("strong"),zOo=o("mpnet"),WOo=o(" \u2014 "),mz=a("a"),QOo=o("MPNetForMaskedLM"),UOo=o(" (MPNet model)"),HOo=l(),Ov=a("li"),Q_e=a("strong"),JOo=o("mvp"),YOo=o(" \u2014 "),fz=a("a"),KOo=o("MvpForConditionalGeneration"),ZOo=o(" (MVP model)"),eVo=l(),Vv=a("li"),U_e=a("strong"),oVo=o("nezha"),rVo=o(" \u2014 "),gz=a("a"),tVo=o("NezhaForMaskedLM"),aVo=o(" (Nezha model)"),nVo=l(),Xv=a("li"),H_e=a("strong"),sVo=o("nystromformer"),lVo=o(" \u2014 "),hz=a("a"),iVo=o("NystromformerForMaskedLM"),dVo=o(" (Nystr\xF6mformer model)"),cVo=l(),zv=a("li"),J_e=a("strong"),mVo=o("perceiver"),fVo=o(" \u2014 "),uz=a("a"),gVo=o("PerceiverForMaskedLM"),hVo=o(" (Perceiver model)"),uVo=l(),Wv=a("li"),Y_e=a("strong"),pVo=o("qdqbert"),_Vo=o(" \u2014 "),pz=a("a"),bVo=o("QDQBertForMaskedLM"),vVo=o(" (QDQBert model)"),FVo=l(),Qv=a("li"),K_e=a("strong"),TVo=o("reformer"),MVo=o(" \u2014 "),_z=a("a"),EVo=o("ReformerForMaskedLM"),CVo=o(" (Reformer model)"),wVo=l(),Uv=a("li"),Z_e=a("strong"),AVo=o("rembert"),LVo=o(" \u2014 "),bz=a("a"),yVo=o("RemBertForMaskedLM"),xVo=o(" (RemBERT model)"),$Vo=l(),Hv=a("li"),e2e=a("strong"),kVo=o("roberta"),SVo=o(" \u2014 "),vz=a("a"),RVo=o("RobertaForMaskedLM"),PVo=o(" (RoBERTa model)"),BVo=l(),Jv=a("li"),o2e=a("strong"),IVo=o("roformer"),NVo=o(" \u2014 "),Fz=a("a"),qVo=o("RoFormerForMaskedLM"),jVo=o(" (RoFormer model)"),DVo=l(),Yv=a("li"),r2e=a("strong"),GVo=o("squeezebert"),OVo=o(" \u2014 "),Tz=a("a"),VVo=o("SqueezeBertForMaskedLM"),XVo=o(" (SqueezeBERT model)"),zVo=l(),Kv=a("li"),t2e=a("strong"),WVo=o("tapas"),QVo=o(" \u2014 "),Mz=a("a"),UVo=o("TapasForMaskedLM"),HVo=o(" (TAPAS model)"),JVo=l(),Zv=a("li"),a2e=a("strong"),YVo=o("wav2vec2"),KVo=o(" \u2014 "),n2e=a("code"),ZVo=o("Wav2Vec2ForMaskedLM"),eXo=o(" (Wav2Vec2 model)"),oXo=l(),e1=a("li"),s2e=a("strong"),rXo=o("xlm"),tXo=o(" \u2014 "),Ez=a("a"),aXo=o("XLMWithLMHeadModel"),nXo=o(" (XLM model)"),sXo=l(),o1=a("li"),l2e=a("strong"),lXo=o("xlm-roberta"),iXo=o(" \u2014 "),Cz=a("a"),dXo=o("XLMRobertaForMaskedLM"),cXo=o(" (XLM-RoBERTa model)"),mXo=l(),r1=a("li"),i2e=a("strong"),fXo=o("xlm-roberta-xl"),gXo=o(" \u2014 "),wz=a("a"),hXo=o("XLMRobertaXLForMaskedLM"),uXo=o(" (XLM-RoBERTa-XL model)"),pXo=l(),t1=a("li"),d2e=a("strong"),_Xo=o("yoso"),bXo=o(" \u2014 "),Az=a("a"),vXo=o("YosoForMaskedLM"),FXo=o(" (YOSO model)"),TXo=l(),a1=a("p"),MXo=o("The model is set in evaluation mode by default using "),c2e=a("code"),EXo=o("model.eval()"),CXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=a("code"),wXo=o("model.train()"),AXo=l(),F(n1.$$.fragment),rHe=l(),hd=a("h2"),s1=a("a"),f2e=a("span"),F(b9.$$.fragment),LXo=l(),g2e=a("span"),yXo=o("AutoModelForSeq2SeqLM"),tHe=l(),Io=a("div"),F(v9.$$.fragment),xXo=l(),ud=a("p"),$Xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lz=a("a"),kXo=o("from_pretrained()"),SXo=o(" class method or the "),yz=a("a"),RXo=o("from_config()"),PXo=o(` class
method.`),BXo=l(),F9=a("p"),IXo=o("This class cannot be instantiated directly using "),h2e=a("code"),NXo=o("__init__()"),qXo=o(" (throws an error)."),jXo=l(),pt=a("div"),F(T9.$$.fragment),DXo=l(),u2e=a("p"),GXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OXo=l(),pd=a("p"),VXo=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),XXo=o("not"),zXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),WXo=o("from_pretrained()"),QXo=o(" to load the model weights."),UXo=l(),F(l1.$$.fragment),HXo=l(),ro=a("div"),F(M9.$$.fragment),JXo=l(),_2e=a("p"),YXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KXo=l(),Qa=a("p"),ZXo=o("The model class to instantiate is selected based on the "),b2e=a("code"),ezo=o("model_type"),ozo=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(":"),szo=l(),me=a("ul"),i1=a("li"),T2e=a("strong"),lzo=o("bart"),izo=o(" \u2014 "),$z=a("a"),dzo=o("BartForConditionalGeneration"),czo=o(" (BART model)"),mzo=l(),d1=a("li"),M2e=a("strong"),fzo=o("bigbird_pegasus"),gzo=o(" \u2014 "),kz=a("a"),hzo=o("BigBirdPegasusForConditionalGeneration"),uzo=o(" (BigBird-Pegasus model)"),pzo=l(),c1=a("li"),E2e=a("strong"),_zo=o("blenderbot"),bzo=o(" \u2014 "),Sz=a("a"),vzo=o("BlenderbotForConditionalGeneration"),Fzo=o(" (Blenderbot model)"),Tzo=l(),m1=a("li"),C2e=a("strong"),Mzo=o("blenderbot-small"),Ezo=o(" \u2014 "),Rz=a("a"),Czo=o("BlenderbotSmallForConditionalGeneration"),wzo=o(" (BlenderbotSmall model)"),Azo=l(),f1=a("li"),w2e=a("strong"),Lzo=o("encoder-decoder"),yzo=o(" \u2014 "),Pz=a("a"),xzo=o("EncoderDecoderModel"),$zo=o(" (Encoder decoder model)"),kzo=l(),g1=a("li"),A2e=a("strong"),Szo=o("fsmt"),Rzo=o(" \u2014 "),Bz=a("a"),Pzo=o("FSMTForConditionalGeneration"),Bzo=o(" (FairSeq Machine-Translation model)"),Izo=l(),h1=a("li"),L2e=a("strong"),Nzo=o("led"),qzo=o(" \u2014 "),Iz=a("a"),jzo=o("LEDForConditionalGeneration"),Dzo=o(" (LED model)"),Gzo=l(),u1=a("li"),y2e=a("strong"),Ozo=o("longt5"),Vzo=o(" \u2014 "),Nz=a("a"),Xzo=o("LongT5ForConditionalGeneration"),zzo=o(" (LongT5 model)"),Wzo=l(),p1=a("li"),x2e=a("strong"),Qzo=o("m2m_100"),Uzo=o(" \u2014 "),qz=a("a"),Hzo=o("M2M100ForConditionalGeneration"),Jzo=o(" (M2M100 model)"),Yzo=l(),_1=a("li"),$2e=a("strong"),Kzo=o("marian"),Zzo=o(" \u2014 "),jz=a("a"),eWo=o("MarianMTModel"),oWo=o(" (Marian model)"),rWo=l(),b1=a("li"),k2e=a("strong"),tWo=o("mbart"),aWo=o(" \u2014 "),Dz=a("a"),nWo=o("MBartForConditionalGeneration"),sWo=o(" (mBART model)"),lWo=l(),v1=a("li"),S2e=a("strong"),iWo=o("mt5"),dWo=o(" \u2014 "),Gz=a("a"),cWo=o("MT5ForConditionalGeneration"),mWo=o(" (MT5 model)"),fWo=l(),F1=a("li"),R2e=a("strong"),gWo=o("mvp"),hWo=o(" \u2014 "),Oz=a("a"),uWo=o("MvpForConditionalGeneration"),pWo=o(" (MVP model)"),_Wo=l(),T1=a("li"),P2e=a("strong"),bWo=o("nllb"),vWo=o(" \u2014 "),Vz=a("a"),FWo=o("M2M100ForConditionalGeneration"),TWo=o(" (NLLB model)"),MWo=l(),M1=a("li"),B2e=a("strong"),EWo=o("pegasus"),CWo=o(" \u2014 "),Xz=a("a"),wWo=o("PegasusForConditionalGeneration"),AWo=o(" (Pegasus model)"),LWo=l(),E1=a("li"),I2e=a("strong"),yWo=o("pegasus_x"),xWo=o(" \u2014 "),zz=a("a"),$Wo=o("PegasusXForConditionalGeneration"),kWo=o(" (PEGASUS-X model)"),SWo=l(),C1=a("li"),N2e=a("strong"),RWo=o("plbart"),PWo=o(" \u2014 "),Wz=a("a"),BWo=o("PLBartForConditionalGeneration"),IWo=o(" (PLBart model)"),NWo=l(),w1=a("li"),q2e=a("strong"),qWo=o("prophetnet"),jWo=o(" \u2014 "),Qz=a("a"),DWo=o("ProphetNetForConditionalGeneration"),GWo=o(" (ProphetNet model)"),OWo=l(),A1=a("li"),j2e=a("strong"),VWo=o("t5"),XWo=o(" \u2014 "),Uz=a("a"),zWo=o("T5ForConditionalGeneration"),WWo=o(" (T5 model)"),QWo=l(),L1=a("li"),D2e=a("strong"),UWo=o("xlm-prophetnet"),HWo=o(" \u2014 "),Hz=a("a"),JWo=o("XLMProphetNetForConditionalGeneration"),YWo=o(" (XLM-ProphetNet model)"),KWo=l(),y1=a("p"),ZWo=o("The model is set in evaluation mode by default using "),G2e=a("code"),eQo=o("model.eval()"),oQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=a("code"),rQo=o("model.train()"),tQo=l(),F(x1.$$.fragment),aHe=l(),_d=a("h2"),$1=a("a"),V2e=a("span"),F(E9.$$.fragment),aQo=l(),X2e=a("span"),nQo=o("AutoModelForSequenceClassification"),nHe=l(),No=a("div"),F(C9.$$.fragment),sQo=l(),bd=a("p"),lQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jz=a("a"),iQo=o("from_pretrained()"),dQo=o(" class method or the "),Yz=a("a"),cQo=o("from_config()"),mQo=o(` class
method.`),fQo=l(),w9=a("p"),gQo=o("This class cannot be instantiated directly using "),z2e=a("code"),hQo=o("__init__()"),uQo=o(" (throws an error)."),pQo=l(),_t=a("div"),F(A9.$$.fragment),_Qo=l(),W2e=a("p"),bQo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vQo=l(),vd=a("p"),FQo=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),TQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),EQo=o("from_pretrained()"),CQo=o(" to load the model weights."),wQo=l(),F(k1.$$.fragment),AQo=l(),to=a("div"),F(L9.$$.fragment),LQo=l(),U2e=a("p"),yQo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xQo=l(),Ua=a("p"),$Qo=o("The model class to instantiate is selected based on the "),H2e=a("code"),kQo=o("model_type"),SQo=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),RQo=o("pretrained_model_name_or_path"),PQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),BQo=o("pretrained_model_name_or_path"),IQo=o(":"),NQo=l(),j=a("ul"),S1=a("li"),K2e=a("strong"),qQo=o("albert"),jQo=o(" \u2014 "),Zz=a("a"),DQo=o("AlbertForSequenceClassification"),GQo=o(" (ALBERT model)"),OQo=l(),R1=a("li"),Z2e=a("strong"),VQo=o("bart"),XQo=o(" \u2014 "),eW=a("a"),zQo=o("BartForSequenceClassification"),WQo=o(" (BART model)"),QQo=l(),P1=a("li"),ebe=a("strong"),UQo=o("bert"),HQo=o(" \u2014 "),oW=a("a"),JQo=o("BertForSequenceClassification"),YQo=o(" (BERT model)"),KQo=l(),B1=a("li"),obe=a("strong"),ZQo=o("big_bird"),eUo=o(" \u2014 "),rW=a("a"),oUo=o("BigBirdForSequenceClassification"),rUo=o(" (BigBird model)"),tUo=l(),I1=a("li"),rbe=a("strong"),aUo=o("bigbird_pegasus"),nUo=o(" \u2014 "),tW=a("a"),sUo=o("BigBirdPegasusForSequenceClassification"),lUo=o(" (BigBird-Pegasus model)"),iUo=l(),N1=a("li"),tbe=a("strong"),dUo=o("bloom"),cUo=o(" \u2014 "),aW=a("a"),mUo=o("BloomForSequenceClassification"),fUo=o(" (BLOOM model)"),gUo=l(),q1=a("li"),abe=a("strong"),hUo=o("camembert"),uUo=o(" \u2014 "),nW=a("a"),pUo=o("CamembertForSequenceClassification"),_Uo=o(" (CamemBERT model)"),bUo=l(),j1=a("li"),nbe=a("strong"),vUo=o("canine"),FUo=o(" \u2014 "),sW=a("a"),TUo=o("CanineForSequenceClassification"),MUo=o(" (CANINE model)"),EUo=l(),D1=a("li"),sbe=a("strong"),CUo=o("convbert"),wUo=o(" \u2014 "),lW=a("a"),AUo=o("ConvBertForSequenceClassification"),LUo=o(" (ConvBERT model)"),yUo=l(),G1=a("li"),lbe=a("strong"),xUo=o("ctrl"),$Uo=o(" \u2014 "),iW=a("a"),kUo=o("CTRLForSequenceClassification"),SUo=o(" (CTRL model)"),RUo=l(),O1=a("li"),ibe=a("strong"),PUo=o("data2vec-text"),BUo=o(" \u2014 "),dW=a("a"),IUo=o("Data2VecTextForSequenceClassification"),NUo=o(" (Data2VecText model)"),qUo=l(),V1=a("li"),dbe=a("strong"),jUo=o("deberta"),DUo=o(" \u2014 "),cW=a("a"),GUo=o("DebertaForSequenceClassification"),OUo=o(" (DeBERTa model)"),VUo=l(),X1=a("li"),cbe=a("strong"),XUo=o("deberta-v2"),zUo=o(" \u2014 "),mW=a("a"),WUo=o("DebertaV2ForSequenceClassification"),QUo=o(" (DeBERTa-v2 model)"),UUo=l(),z1=a("li"),mbe=a("strong"),HUo=o("distilbert"),JUo=o(" \u2014 "),fW=a("a"),YUo=o("DistilBertForSequenceClassification"),KUo=o(" (DistilBERT model)"),ZUo=l(),W1=a("li"),fbe=a("strong"),eHo=o("electra"),oHo=o(" \u2014 "),gW=a("a"),rHo=o("ElectraForSequenceClassification"),tHo=o(" (ELECTRA model)"),aHo=l(),Q1=a("li"),gbe=a("strong"),nHo=o("flaubert"),sHo=o(" \u2014 "),hW=a("a"),lHo=o("FlaubertForSequenceClassification"),iHo=o(" (FlauBERT model)"),dHo=l(),U1=a("li"),hbe=a("strong"),cHo=o("fnet"),mHo=o(" \u2014 "),uW=a("a"),fHo=o("FNetForSequenceClassification"),gHo=o(" (FNet model)"),hHo=l(),H1=a("li"),ube=a("strong"),uHo=o("funnel"),pHo=o(" \u2014 "),pW=a("a"),_Ho=o("FunnelForSequenceClassification"),bHo=o(" (Funnel Transformer model)"),vHo=l(),J1=a("li"),pbe=a("strong"),FHo=o("gpt2"),THo=o(" \u2014 "),_W=a("a"),MHo=o("GPT2ForSequenceClassification"),EHo=o(" (OpenAI GPT-2 model)"),CHo=l(),Y1=a("li"),_be=a("strong"),wHo=o("gpt_neo"),AHo=o(" \u2014 "),bW=a("a"),LHo=o("GPTNeoForSequenceClassification"),yHo=o(" (GPT Neo model)"),xHo=l(),K1=a("li"),bbe=a("strong"),$Ho=o("gptj"),kHo=o(" \u2014 "),vW=a("a"),SHo=o("GPTJForSequenceClassification"),RHo=o(" (GPT-J model)"),PHo=l(),Z1=a("li"),vbe=a("strong"),BHo=o("ibert"),IHo=o(" \u2014 "),FW=a("a"),NHo=o("IBertForSequenceClassification"),qHo=o(" (I-BERT model)"),jHo=l(),eF=a("li"),Fbe=a("strong"),DHo=o("layoutlm"),GHo=o(" \u2014 "),TW=a("a"),OHo=o("LayoutLMForSequenceClassification"),VHo=o(" (LayoutLM model)"),XHo=l(),oF=a("li"),Tbe=a("strong"),zHo=o("layoutlmv2"),WHo=o(" \u2014 "),MW=a("a"),QHo=o("LayoutLMv2ForSequenceClassification"),UHo=o(" (LayoutLMv2 model)"),HHo=l(),rF=a("li"),Mbe=a("strong"),JHo=o("layoutlmv3"),YHo=o(" \u2014 "),EW=a("a"),KHo=o("LayoutLMv3ForSequenceClassification"),ZHo=o(" (LayoutLMv3 model)"),eJo=l(),tF=a("li"),Ebe=a("strong"),oJo=o("led"),rJo=o(" \u2014 "),CW=a("a"),tJo=o("LEDForSequenceClassification"),aJo=o(" (LED model)"),nJo=l(),aF=a("li"),Cbe=a("strong"),sJo=o("longformer"),lJo=o(" \u2014 "),wW=a("a"),iJo=o("LongformerForSequenceClassification"),dJo=o(" (Longformer model)"),cJo=l(),nF=a("li"),wbe=a("strong"),mJo=o("luke"),fJo=o(" \u2014 "),AW=a("a"),gJo=o("LukeForSequenceClassification"),hJo=o(" (LUKE model)"),uJo=l(),sF=a("li"),Abe=a("strong"),pJo=o("mbart"),_Jo=o(" \u2014 "),LW=a("a"),bJo=o("MBartForSequenceClassification"),vJo=o(" (mBART model)"),FJo=l(),lF=a("li"),Lbe=a("strong"),TJo=o("megatron-bert"),MJo=o(" \u2014 "),yW=a("a"),EJo=o("MegatronBertForSequenceClassification"),CJo=o(" (Megatron-BERT model)"),wJo=l(),iF=a("li"),ybe=a("strong"),AJo=o("mobilebert"),LJo=o(" \u2014 "),xW=a("a"),yJo=o("MobileBertForSequenceClassification"),xJo=o(" (MobileBERT model)"),$Jo=l(),dF=a("li"),xbe=a("strong"),kJo=o("mpnet"),SJo=o(" \u2014 "),$W=a("a"),RJo=o("MPNetForSequenceClassification"),PJo=o(" (MPNet model)"),BJo=l(),cF=a("li"),$be=a("strong"),IJo=o("mvp"),NJo=o(" \u2014 "),kW=a("a"),qJo=o("MvpForSequenceClassification"),jJo=o(" (MVP model)"),DJo=l(),mF=a("li"),kbe=a("strong"),GJo=o("nezha"),OJo=o(" \u2014 "),SW=a("a"),VJo=o("NezhaForSequenceClassification"),XJo=o(" (Nezha model)"),zJo=l(),fF=a("li"),Sbe=a("strong"),WJo=o("nystromformer"),QJo=o(" \u2014 "),RW=a("a"),UJo=o("NystromformerForSequenceClassification"),HJo=o(" (Nystr\xF6mformer model)"),JJo=l(),gF=a("li"),Rbe=a("strong"),YJo=o("openai-gpt"),KJo=o(" \u2014 "),PW=a("a"),ZJo=o("OpenAIGPTForSequenceClassification"),eYo=o(" (OpenAI GPT model)"),oYo=l(),hF=a("li"),Pbe=a("strong"),rYo=o("opt"),tYo=o(" \u2014 "),BW=a("a"),aYo=o("OPTForSequenceClassification"),nYo=o(" (OPT model)"),sYo=l(),uF=a("li"),Bbe=a("strong"),lYo=o("perceiver"),iYo=o(" \u2014 "),IW=a("a"),dYo=o("PerceiverForSequenceClassification"),cYo=o(" (Perceiver model)"),mYo=l(),pF=a("li"),Ibe=a("strong"),fYo=o("plbart"),gYo=o(" \u2014 "),NW=a("a"),hYo=o("PLBartForSequenceClassification"),uYo=o(" (PLBart model)"),pYo=l(),_F=a("li"),Nbe=a("strong"),_Yo=o("qdqbert"),bYo=o(" \u2014 "),qW=a("a"),vYo=o("QDQBertForSequenceClassification"),FYo=o(" (QDQBert model)"),TYo=l(),bF=a("li"),qbe=a("strong"),MYo=o("reformer"),EYo=o(" \u2014 "),jW=a("a"),CYo=o("ReformerForSequenceClassification"),wYo=o(" (Reformer model)"),AYo=l(),vF=a("li"),jbe=a("strong"),LYo=o("rembert"),yYo=o(" \u2014 "),DW=a("a"),xYo=o("RemBertForSequenceClassification"),$Yo=o(" (RemBERT model)"),kYo=l(),FF=a("li"),Dbe=a("strong"),SYo=o("roberta"),RYo=o(" \u2014 "),GW=a("a"),PYo=o("RobertaForSequenceClassification"),BYo=o(" (RoBERTa model)"),IYo=l(),TF=a("li"),Gbe=a("strong"),NYo=o("roformer"),qYo=o(" \u2014 "),OW=a("a"),jYo=o("RoFormerForSequenceClassification"),DYo=o(" (RoFormer model)"),GYo=l(),MF=a("li"),Obe=a("strong"),OYo=o("squeezebert"),VYo=o(" \u2014 "),VW=a("a"),XYo=o("SqueezeBertForSequenceClassification"),zYo=o(" (SqueezeBERT model)"),WYo=l(),EF=a("li"),Vbe=a("strong"),QYo=o("tapas"),UYo=o(" \u2014 "),XW=a("a"),HYo=o("TapasForSequenceClassification"),JYo=o(" (TAPAS model)"),YYo=l(),CF=a("li"),Xbe=a("strong"),KYo=o("transfo-xl"),ZYo=o(" \u2014 "),zW=a("a"),eKo=o("TransfoXLForSequenceClassification"),oKo=o(" (Transformer-XL model)"),rKo=l(),wF=a("li"),zbe=a("strong"),tKo=o("xlm"),aKo=o(" \u2014 "),WW=a("a"),nKo=o("XLMForSequenceClassification"),sKo=o(" (XLM model)"),lKo=l(),AF=a("li"),Wbe=a("strong"),iKo=o("xlm-roberta"),dKo=o(" \u2014 "),QW=a("a"),cKo=o("XLMRobertaForSequenceClassification"),mKo=o(" (XLM-RoBERTa model)"),fKo=l(),LF=a("li"),Qbe=a("strong"),gKo=o("xlm-roberta-xl"),hKo=o(" \u2014 "),UW=a("a"),uKo=o("XLMRobertaXLForSequenceClassification"),pKo=o(" (XLM-RoBERTa-XL model)"),_Ko=l(),yF=a("li"),Ube=a("strong"),bKo=o("xlnet"),vKo=o(" \u2014 "),HW=a("a"),FKo=o("XLNetForSequenceClassification"),TKo=o(" (XLNet model)"),MKo=l(),xF=a("li"),Hbe=a("strong"),EKo=o("yoso"),CKo=o(" \u2014 "),JW=a("a"),wKo=o("YosoForSequenceClassification"),AKo=o(" (YOSO model)"),LKo=l(),$F=a("p"),yKo=o("The model is set in evaluation mode by default using "),Jbe=a("code"),xKo=o("model.eval()"),$Ko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=a("code"),kKo=o("model.train()"),SKo=l(),F(kF.$$.fragment),sHe=l(),Fd=a("h2"),SF=a("a"),Kbe=a("span"),F(y9.$$.fragment),RKo=l(),Zbe=a("span"),PKo=o("AutoModelForMultipleChoice"),lHe=l(),qo=a("div"),F(x9.$$.fragment),BKo=l(),Td=a("p"),IKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YW=a("a"),NKo=o("from_pretrained()"),qKo=o(" class method or the "),KW=a("a"),jKo=o("from_config()"),DKo=o(` class
method.`),GKo=l(),$9=a("p"),OKo=o("This class cannot be instantiated directly using "),eve=a("code"),VKo=o("__init__()"),XKo=o(" (throws an error)."),zKo=l(),bt=a("div"),F(k9.$$.fragment),WKo=l(),ove=a("p"),QKo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UKo=l(),Md=a("p"),HKo=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),JKo=o("not"),YKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),KKo=o("from_pretrained()"),ZKo=o(" to load the model weights."),eZo=l(),F(RF.$$.fragment),oZo=l(),ao=a("div"),F(S9.$$.fragment),rZo=l(),tve=a("p"),tZo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aZo=l(),Ha=a("p"),nZo=o("The model class to instantiate is selected based on the "),ave=a("code"),sZo=o("model_type"),lZo=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),iZo=o("pretrained_model_name_or_path"),dZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),cZo=o("pretrained_model_name_or_path"),mZo=o(":"),fZo=l(),Z=a("ul"),PF=a("li"),lve=a("strong"),gZo=o("albert"),hZo=o(" \u2014 "),eQ=a("a"),uZo=o("AlbertForMultipleChoice"),pZo=o(" (ALBERT model)"),_Zo=l(),BF=a("li"),ive=a("strong"),bZo=o("bert"),vZo=o(" \u2014 "),oQ=a("a"),FZo=o("BertForMultipleChoice"),TZo=o(" (BERT model)"),MZo=l(),IF=a("li"),dve=a("strong"),EZo=o("big_bird"),CZo=o(" \u2014 "),rQ=a("a"),wZo=o("BigBirdForMultipleChoice"),AZo=o(" (BigBird model)"),LZo=l(),NF=a("li"),cve=a("strong"),yZo=o("camembert"),xZo=o(" \u2014 "),tQ=a("a"),$Zo=o("CamembertForMultipleChoice"),kZo=o(" (CamemBERT model)"),SZo=l(),qF=a("li"),mve=a("strong"),RZo=o("canine"),PZo=o(" \u2014 "),aQ=a("a"),BZo=o("CanineForMultipleChoice"),IZo=o(" (CANINE model)"),NZo=l(),jF=a("li"),fve=a("strong"),qZo=o("convbert"),jZo=o(" \u2014 "),nQ=a("a"),DZo=o("ConvBertForMultipleChoice"),GZo=o(" (ConvBERT model)"),OZo=l(),DF=a("li"),gve=a("strong"),VZo=o("data2vec-text"),XZo=o(" \u2014 "),sQ=a("a"),zZo=o("Data2VecTextForMultipleChoice"),WZo=o(" (Data2VecText model)"),QZo=l(),GF=a("li"),hve=a("strong"),UZo=o("deberta-v2"),HZo=o(" \u2014 "),lQ=a("a"),JZo=o("DebertaV2ForMultipleChoice"),YZo=o(" (DeBERTa-v2 model)"),KZo=l(),OF=a("li"),uve=a("strong"),ZZo=o("distilbert"),eer=o(" \u2014 "),iQ=a("a"),oer=o("DistilBertForMultipleChoice"),rer=o(" (DistilBERT model)"),ter=l(),VF=a("li"),pve=a("strong"),aer=o("electra"),ner=o(" \u2014 "),dQ=a("a"),ser=o("ElectraForMultipleChoice"),ler=o(" (ELECTRA model)"),ier=l(),XF=a("li"),_ve=a("strong"),der=o("flaubert"),cer=o(" \u2014 "),cQ=a("a"),mer=o("FlaubertForMultipleChoice"),fer=o(" (FlauBERT model)"),ger=l(),zF=a("li"),bve=a("strong"),her=o("fnet"),uer=o(" \u2014 "),mQ=a("a"),per=o("FNetForMultipleChoice"),_er=o(" (FNet model)"),ber=l(),WF=a("li"),vve=a("strong"),ver=o("funnel"),Fer=o(" \u2014 "),fQ=a("a"),Ter=o("FunnelForMultipleChoice"),Mer=o(" (Funnel Transformer model)"),Eer=l(),QF=a("li"),Fve=a("strong"),Cer=o("ibert"),wer=o(" \u2014 "),gQ=a("a"),Aer=o("IBertForMultipleChoice"),Ler=o(" (I-BERT model)"),yer=l(),UF=a("li"),Tve=a("strong"),xer=o("longformer"),$er=o(" \u2014 "),hQ=a("a"),ker=o("LongformerForMultipleChoice"),Ser=o(" (Longformer model)"),Rer=l(),HF=a("li"),Mve=a("strong"),Per=o("luke"),Ber=o(" \u2014 "),uQ=a("a"),Ier=o("LukeForMultipleChoice"),Ner=o(" (LUKE model)"),qer=l(),JF=a("li"),Eve=a("strong"),jer=o("megatron-bert"),Der=o(" \u2014 "),pQ=a("a"),Ger=o("MegatronBertForMultipleChoice"),Oer=o(" (Megatron-BERT model)"),Ver=l(),YF=a("li"),Cve=a("strong"),Xer=o("mobilebert"),zer=o(" \u2014 "),_Q=a("a"),Wer=o("MobileBertForMultipleChoice"),Qer=o(" (MobileBERT model)"),Uer=l(),KF=a("li"),wve=a("strong"),Her=o("mpnet"),Jer=o(" \u2014 "),bQ=a("a"),Yer=o("MPNetForMultipleChoice"),Ker=o(" (MPNet model)"),Zer=l(),ZF=a("li"),Ave=a("strong"),eor=o("nezha"),oor=o(" \u2014 "),vQ=a("a"),ror=o("NezhaForMultipleChoice"),tor=o(" (Nezha model)"),aor=l(),eT=a("li"),Lve=a("strong"),nor=o("nystromformer"),sor=o(" \u2014 "),FQ=a("a"),lor=o("NystromformerForMultipleChoice"),ior=o(" (Nystr\xF6mformer model)"),dor=l(),oT=a("li"),yve=a("strong"),cor=o("qdqbert"),mor=o(" \u2014 "),TQ=a("a"),gor=o("QDQBertForMultipleChoice"),hor=o(" (QDQBert model)"),uor=l(),rT=a("li"),xve=a("strong"),por=o("rembert"),_or=o(" \u2014 "),MQ=a("a"),bor=o("RemBertForMultipleChoice"),vor=o(" (RemBERT model)"),For=l(),tT=a("li"),$ve=a("strong"),Tor=o("roberta"),Mor=o(" \u2014 "),EQ=a("a"),Eor=o("RobertaForMultipleChoice"),Cor=o(" (RoBERTa model)"),wor=l(),aT=a("li"),kve=a("strong"),Aor=o("roformer"),Lor=o(" \u2014 "),CQ=a("a"),yor=o("RoFormerForMultipleChoice"),xor=o(" (RoFormer model)"),$or=l(),nT=a("li"),Sve=a("strong"),kor=o("squeezebert"),Sor=o(" \u2014 "),wQ=a("a"),Ror=o("SqueezeBertForMultipleChoice"),Por=o(" (SqueezeBERT model)"),Bor=l(),sT=a("li"),Rve=a("strong"),Ior=o("xlm"),Nor=o(" \u2014 "),AQ=a("a"),qor=o("XLMForMultipleChoice"),jor=o(" (XLM model)"),Dor=l(),lT=a("li"),Pve=a("strong"),Gor=o("xlm-roberta"),Oor=o(" \u2014 "),LQ=a("a"),Vor=o("XLMRobertaForMultipleChoice"),Xor=o(" (XLM-RoBERTa model)"),zor=l(),iT=a("li"),Bve=a("strong"),Wor=o("xlm-roberta-xl"),Qor=o(" \u2014 "),yQ=a("a"),Uor=o("XLMRobertaXLForMultipleChoice"),Hor=o(" (XLM-RoBERTa-XL model)"),Jor=l(),dT=a("li"),Ive=a("strong"),Yor=o("xlnet"),Kor=o(" \u2014 "),xQ=a("a"),Zor=o("XLNetForMultipleChoice"),err=o(" (XLNet model)"),orr=l(),cT=a("li"),Nve=a("strong"),rrr=o("yoso"),trr=o(" \u2014 "),$Q=a("a"),arr=o("YosoForMultipleChoice"),nrr=o(" (YOSO model)"),srr=l(),mT=a("p"),lrr=o("The model is set in evaluation mode by default using "),qve=a("code"),irr=o("model.eval()"),drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=a("code"),crr=o("model.train()"),mrr=l(),F(fT.$$.fragment),iHe=l(),Ed=a("h2"),gT=a("a"),Dve=a("span"),F(R9.$$.fragment),frr=l(),Gve=a("span"),grr=o("AutoModelForNextSentencePrediction"),dHe=l(),jo=a("div"),F(P9.$$.fragment),hrr=l(),Cd=a("p"),urr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kQ=a("a"),prr=o("from_pretrained()"),_rr=o(" class method or the "),SQ=a("a"),brr=o("from_config()"),vrr=o(` class
method.`),Frr=l(),B9=a("p"),Trr=o("This class cannot be instantiated directly using "),Ove=a("code"),Mrr=o("__init__()"),Err=o(" (throws an error)."),Crr=l(),vt=a("div"),F(I9.$$.fragment),wrr=l(),Vve=a("p"),Arr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lrr=l(),wd=a("p"),yrr=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),xrr=o("not"),$rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),krr=o("from_pretrained()"),Srr=o(" to load the model weights."),Rrr=l(),F(hT.$$.fragment),Prr=l(),no=a("div"),F(N9.$$.fragment),Brr=l(),zve=a("p"),Irr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nrr=l(),Ja=a("p"),qrr=o("The model class to instantiate is selected based on the "),Wve=a("code"),jrr=o("model_type"),Drr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(":"),zrr=l(),Do=a("ul"),uT=a("li"),Hve=a("strong"),Wrr=o("bert"),Qrr=o(" \u2014 "),PQ=a("a"),Urr=o("BertForNextSentencePrediction"),Hrr=o(" (BERT model)"),Jrr=l(),pT=a("li"),Jve=a("strong"),Yrr=o("fnet"),Krr=o(" \u2014 "),BQ=a("a"),Zrr=o("FNetForNextSentencePrediction"),etr=o(" (FNet model)"),otr=l(),_T=a("li"),Yve=a("strong"),rtr=o("megatron-bert"),ttr=o(" \u2014 "),IQ=a("a"),atr=o("MegatronBertForNextSentencePrediction"),ntr=o(" (Megatron-BERT model)"),str=l(),bT=a("li"),Kve=a("strong"),ltr=o("mobilebert"),itr=o(" \u2014 "),NQ=a("a"),dtr=o("MobileBertForNextSentencePrediction"),ctr=o(" (MobileBERT model)"),mtr=l(),vT=a("li"),Zve=a("strong"),ftr=o("nezha"),gtr=o(" \u2014 "),qQ=a("a"),htr=o("NezhaForNextSentencePrediction"),utr=o(" (Nezha model)"),ptr=l(),FT=a("li"),e1e=a("strong"),_tr=o("qdqbert"),btr=o(" \u2014 "),jQ=a("a"),vtr=o("QDQBertForNextSentencePrediction"),Ftr=o(" (QDQBert model)"),Ttr=l(),TT=a("p"),Mtr=o("The model is set in evaluation mode by default using "),o1e=a("code"),Etr=o("model.eval()"),Ctr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=a("code"),wtr=o("model.train()"),Atr=l(),F(MT.$$.fragment),cHe=l(),Ad=a("h2"),ET=a("a"),t1e=a("span"),F(q9.$$.fragment),Ltr=l(),a1e=a("span"),ytr=o("AutoModelForTokenClassification"),mHe=l(),Go=a("div"),F(j9.$$.fragment),xtr=l(),Ld=a("p"),$tr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DQ=a("a"),ktr=o("from_pretrained()"),Str=o(" class method or the "),GQ=a("a"),Rtr=o("from_config()"),Ptr=o(` class
method.`),Btr=l(),D9=a("p"),Itr=o("This class cannot be instantiated directly using "),n1e=a("code"),Ntr=o("__init__()"),qtr=o(" (throws an error)."),jtr=l(),Ft=a("div"),F(G9.$$.fragment),Dtr=l(),s1e=a("p"),Gtr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Otr=l(),yd=a("p"),Vtr=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),Xtr=o("not"),ztr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),Wtr=o("from_pretrained()"),Qtr=o(" to load the model weights."),Utr=l(),F(CT.$$.fragment),Htr=l(),so=a("div"),F(O9.$$.fragment),Jtr=l(),i1e=a("p"),Ytr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ktr=l(),Ya=a("p"),Ztr=o("The model class to instantiate is selected based on the "),d1e=a("code"),ear=o("model_type"),oar=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),rar=o("pretrained_model_name_or_path"),tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),aar=o("pretrained_model_name_or_path"),nar=o(":"),sar=l(),H=a("ul"),wT=a("li"),f1e=a("strong"),lar=o("albert"),iar=o(" \u2014 "),VQ=a("a"),dar=o("AlbertForTokenClassification"),car=o(" (ALBERT model)"),mar=l(),AT=a("li"),g1e=a("strong"),far=o("bert"),gar=o(" \u2014 "),XQ=a("a"),har=o("BertForTokenClassification"),uar=o(" (BERT model)"),par=l(),LT=a("li"),h1e=a("strong"),_ar=o("big_bird"),bar=o(" \u2014 "),zQ=a("a"),Far=o("BigBirdForTokenClassification"),Tar=o(" (BigBird model)"),Mar=l(),yT=a("li"),u1e=a("strong"),Ear=o("bloom"),Car=o(" \u2014 "),WQ=a("a"),war=o("BloomForTokenClassification"),Aar=o(" (BLOOM model)"),Lar=l(),xT=a("li"),p1e=a("strong"),yar=o("camembert"),xar=o(" \u2014 "),QQ=a("a"),$ar=o("CamembertForTokenClassification"),kar=o(" (CamemBERT model)"),Sar=l(),$T=a("li"),_1e=a("strong"),Rar=o("canine"),Par=o(" \u2014 "),UQ=a("a"),Bar=o("CanineForTokenClassification"),Iar=o(" (CANINE model)"),Nar=l(),kT=a("li"),b1e=a("strong"),qar=o("convbert"),jar=o(" \u2014 "),HQ=a("a"),Dar=o("ConvBertForTokenClassification"),Gar=o(" (ConvBERT model)"),Oar=l(),ST=a("li"),v1e=a("strong"),Var=o("data2vec-text"),Xar=o(" \u2014 "),JQ=a("a"),zar=o("Data2VecTextForTokenClassification"),War=o(" (Data2VecText model)"),Qar=l(),RT=a("li"),F1e=a("strong"),Uar=o("deberta"),Har=o(" \u2014 "),YQ=a("a"),Jar=o("DebertaForTokenClassification"),Yar=o(" (DeBERTa model)"),Kar=l(),PT=a("li"),T1e=a("strong"),Zar=o("deberta-v2"),enr=o(" \u2014 "),KQ=a("a"),onr=o("DebertaV2ForTokenClassification"),rnr=o(" (DeBERTa-v2 model)"),tnr=l(),BT=a("li"),M1e=a("strong"),anr=o("distilbert"),nnr=o(" \u2014 "),ZQ=a("a"),snr=o("DistilBertForTokenClassification"),lnr=o(" (DistilBERT model)"),inr=l(),IT=a("li"),E1e=a("strong"),dnr=o("electra"),cnr=o(" \u2014 "),eU=a("a"),mnr=o("ElectraForTokenClassification"),fnr=o(" (ELECTRA model)"),gnr=l(),NT=a("li"),C1e=a("strong"),hnr=o("flaubert"),unr=o(" \u2014 "),oU=a("a"),pnr=o("FlaubertForTokenClassification"),_nr=o(" (FlauBERT model)"),bnr=l(),qT=a("li"),w1e=a("strong"),vnr=o("fnet"),Fnr=o(" \u2014 "),rU=a("a"),Tnr=o("FNetForTokenClassification"),Mnr=o(" (FNet model)"),Enr=l(),jT=a("li"),A1e=a("strong"),Cnr=o("funnel"),wnr=o(" \u2014 "),tU=a("a"),Anr=o("FunnelForTokenClassification"),Lnr=o(" (Funnel Transformer model)"),ynr=l(),DT=a("li"),L1e=a("strong"),xnr=o("gpt2"),$nr=o(" \u2014 "),aU=a("a"),knr=o("GPT2ForTokenClassification"),Snr=o(" (OpenAI GPT-2 model)"),Rnr=l(),GT=a("li"),y1e=a("strong"),Pnr=o("ibert"),Bnr=o(" \u2014 "),nU=a("a"),Inr=o("IBertForTokenClassification"),Nnr=o(" (I-BERT model)"),qnr=l(),OT=a("li"),x1e=a("strong"),jnr=o("layoutlm"),Dnr=o(" \u2014 "),sU=a("a"),Gnr=o("LayoutLMForTokenClassification"),Onr=o(" (LayoutLM model)"),Vnr=l(),VT=a("li"),$1e=a("strong"),Xnr=o("layoutlmv2"),znr=o(" \u2014 "),lU=a("a"),Wnr=o("LayoutLMv2ForTokenClassification"),Qnr=o(" (LayoutLMv2 model)"),Unr=l(),XT=a("li"),k1e=a("strong"),Hnr=o("layoutlmv3"),Jnr=o(" \u2014 "),iU=a("a"),Ynr=o("LayoutLMv3ForTokenClassification"),Knr=o(" (LayoutLMv3 model)"),Znr=l(),zT=a("li"),S1e=a("strong"),esr=o("longformer"),osr=o(" \u2014 "),dU=a("a"),rsr=o("LongformerForTokenClassification"),tsr=o(" (Longformer model)"),asr=l(),WT=a("li"),R1e=a("strong"),nsr=o("luke"),ssr=o(" \u2014 "),cU=a("a"),lsr=o("LukeForTokenClassification"),isr=o(" (LUKE model)"),dsr=l(),QT=a("li"),P1e=a("strong"),csr=o("megatron-bert"),msr=o(" \u2014 "),mU=a("a"),fsr=o("MegatronBertForTokenClassification"),gsr=o(" (Megatron-BERT model)"),hsr=l(),UT=a("li"),B1e=a("strong"),usr=o("mobilebert"),psr=o(" \u2014 "),fU=a("a"),_sr=o("MobileBertForTokenClassification"),bsr=o(" (MobileBERT model)"),vsr=l(),HT=a("li"),I1e=a("strong"),Fsr=o("mpnet"),Tsr=o(" \u2014 "),gU=a("a"),Msr=o("MPNetForTokenClassification"),Esr=o(" (MPNet model)"),Csr=l(),JT=a("li"),N1e=a("strong"),wsr=o("nezha"),Asr=o(" \u2014 "),hU=a("a"),Lsr=o("NezhaForTokenClassification"),ysr=o(" (Nezha model)"),xsr=l(),YT=a("li"),q1e=a("strong"),$sr=o("nystromformer"),ksr=o(" \u2014 "),uU=a("a"),Ssr=o("NystromformerForTokenClassification"),Rsr=o(" (Nystr\xF6mformer model)"),Psr=l(),KT=a("li"),j1e=a("strong"),Bsr=o("qdqbert"),Isr=o(" \u2014 "),pU=a("a"),Nsr=o("QDQBertForTokenClassification"),qsr=o(" (QDQBert model)"),jsr=l(),ZT=a("li"),D1e=a("strong"),Dsr=o("rembert"),Gsr=o(" \u2014 "),_U=a("a"),Osr=o("RemBertForTokenClassification"),Vsr=o(" (RemBERT model)"),Xsr=l(),eM=a("li"),G1e=a("strong"),zsr=o("roberta"),Wsr=o(" \u2014 "),bU=a("a"),Qsr=o("RobertaForTokenClassification"),Usr=o(" (RoBERTa model)"),Hsr=l(),oM=a("li"),O1e=a("strong"),Jsr=o("roformer"),Ysr=o(" \u2014 "),vU=a("a"),Ksr=o("RoFormerForTokenClassification"),Zsr=o(" (RoFormer model)"),elr=l(),rM=a("li"),V1e=a("strong"),olr=o("squeezebert"),rlr=o(" \u2014 "),FU=a("a"),tlr=o("SqueezeBertForTokenClassification"),alr=o(" (SqueezeBERT model)"),nlr=l(),tM=a("li"),X1e=a("strong"),slr=o("xlm"),llr=o(" \u2014 "),TU=a("a"),ilr=o("XLMForTokenClassification"),dlr=o(" (XLM model)"),clr=l(),aM=a("li"),z1e=a("strong"),mlr=o("xlm-roberta"),flr=o(" \u2014 "),MU=a("a"),glr=o("XLMRobertaForTokenClassification"),hlr=o(" (XLM-RoBERTa model)"),ulr=l(),nM=a("li"),W1e=a("strong"),plr=o("xlm-roberta-xl"),_lr=o(" \u2014 "),EU=a("a"),blr=o("XLMRobertaXLForTokenClassification"),vlr=o(" (XLM-RoBERTa-XL model)"),Flr=l(),sM=a("li"),Q1e=a("strong"),Tlr=o("xlnet"),Mlr=o(" \u2014 "),CU=a("a"),Elr=o("XLNetForTokenClassification"),Clr=o(" (XLNet model)"),wlr=l(),lM=a("li"),U1e=a("strong"),Alr=o("yoso"),Llr=o(" \u2014 "),wU=a("a"),ylr=o("YosoForTokenClassification"),xlr=o(" (YOSO model)"),$lr=l(),iM=a("p"),klr=o("The model is set in evaluation mode by default using "),H1e=a("code"),Slr=o("model.eval()"),Rlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=a("code"),Plr=o("model.train()"),Blr=l(),F(dM.$$.fragment),fHe=l(),xd=a("h2"),cM=a("a"),Y1e=a("span"),F(V9.$$.fragment),Ilr=l(),K1e=a("span"),Nlr=o("AutoModelForQuestionAnswering"),gHe=l(),Oo=a("div"),F(X9.$$.fragment),qlr=l(),$d=a("p"),jlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AU=a("a"),Dlr=o("from_pretrained()"),Glr=o(" class method or the "),LU=a("a"),Olr=o("from_config()"),Vlr=o(` class
method.`),Xlr=l(),z9=a("p"),zlr=o("This class cannot be instantiated directly using "),Z1e=a("code"),Wlr=o("__init__()"),Qlr=o(" (throws an error)."),Ulr=l(),Tt=a("div"),F(W9.$$.fragment),Hlr=l(),eFe=a("p"),Jlr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ylr=l(),kd=a("p"),Klr=o(`Note:
Loading a model from its configuration file does `),oFe=a("strong"),Zlr=o("not"),eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),oir=o("from_pretrained()"),rir=o(" to load the model weights."),tir=l(),F(mM.$$.fragment),air=l(),lo=a("div"),F(Q9.$$.fragment),nir=l(),rFe=a("p"),sir=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lir=l(),Ka=a("p"),iir=o("The model class to instantiate is selected based on the "),tFe=a("code"),dir=o("model_type"),cir=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),mir=o("pretrained_model_name_or_path"),fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),gir=o("pretrained_model_name_or_path"),hir=o(":"),uir=l(),V=a("ul"),fM=a("li"),sFe=a("strong"),pir=o("albert"),_ir=o(" \u2014 "),xU=a("a"),bir=o("AlbertForQuestionAnswering"),vir=o(" (ALBERT model)"),Fir=l(),gM=a("li"),lFe=a("strong"),Tir=o("bart"),Mir=o(" \u2014 "),$U=a("a"),Eir=o("BartForQuestionAnswering"),Cir=o(" (BART model)"),wir=l(),hM=a("li"),iFe=a("strong"),Air=o("bert"),Lir=o(" \u2014 "),kU=a("a"),yir=o("BertForQuestionAnswering"),xir=o(" (BERT model)"),$ir=l(),uM=a("li"),dFe=a("strong"),kir=o("big_bird"),Sir=o(" \u2014 "),SU=a("a"),Rir=o("BigBirdForQuestionAnswering"),Pir=o(" (BigBird model)"),Bir=l(),pM=a("li"),cFe=a("strong"),Iir=o("bigbird_pegasus"),Nir=o(" \u2014 "),RU=a("a"),qir=o("BigBirdPegasusForQuestionAnswering"),jir=o(" (BigBird-Pegasus model)"),Dir=l(),_M=a("li"),mFe=a("strong"),Gir=o("camembert"),Oir=o(" \u2014 "),PU=a("a"),Vir=o("CamembertForQuestionAnswering"),Xir=o(" (CamemBERT model)"),zir=l(),bM=a("li"),fFe=a("strong"),Wir=o("canine"),Qir=o(" \u2014 "),BU=a("a"),Uir=o("CanineForQuestionAnswering"),Hir=o(" (CANINE model)"),Jir=l(),vM=a("li"),gFe=a("strong"),Yir=o("convbert"),Kir=o(" \u2014 "),IU=a("a"),Zir=o("ConvBertForQuestionAnswering"),edr=o(" (ConvBERT model)"),odr=l(),FM=a("li"),hFe=a("strong"),rdr=o("data2vec-text"),tdr=o(" \u2014 "),NU=a("a"),adr=o("Data2VecTextForQuestionAnswering"),ndr=o(" (Data2VecText model)"),sdr=l(),TM=a("li"),uFe=a("strong"),ldr=o("deberta"),idr=o(" \u2014 "),qU=a("a"),ddr=o("DebertaForQuestionAnswering"),cdr=o(" (DeBERTa model)"),mdr=l(),MM=a("li"),pFe=a("strong"),fdr=o("deberta-v2"),gdr=o(" \u2014 "),jU=a("a"),hdr=o("DebertaV2ForQuestionAnswering"),udr=o(" (DeBERTa-v2 model)"),pdr=l(),EM=a("li"),_Fe=a("strong"),_dr=o("distilbert"),bdr=o(" \u2014 "),DU=a("a"),vdr=o("DistilBertForQuestionAnswering"),Fdr=o(" (DistilBERT model)"),Tdr=l(),CM=a("li"),bFe=a("strong"),Mdr=o("electra"),Edr=o(" \u2014 "),GU=a("a"),Cdr=o("ElectraForQuestionAnswering"),wdr=o(" (ELECTRA model)"),Adr=l(),wM=a("li"),vFe=a("strong"),Ldr=o("flaubert"),ydr=o(" \u2014 "),OU=a("a"),xdr=o("FlaubertForQuestionAnsweringSimple"),$dr=o(" (FlauBERT model)"),kdr=l(),AM=a("li"),FFe=a("strong"),Sdr=o("fnet"),Rdr=o(" \u2014 "),VU=a("a"),Pdr=o("FNetForQuestionAnswering"),Bdr=o(" (FNet model)"),Idr=l(),LM=a("li"),TFe=a("strong"),Ndr=o("funnel"),qdr=o(" \u2014 "),XU=a("a"),jdr=o("FunnelForQuestionAnswering"),Ddr=o(" (Funnel Transformer model)"),Gdr=l(),yM=a("li"),MFe=a("strong"),Odr=o("gptj"),Vdr=o(" \u2014 "),zU=a("a"),Xdr=o("GPTJForQuestionAnswering"),zdr=o(" (GPT-J model)"),Wdr=l(),xM=a("li"),EFe=a("strong"),Qdr=o("ibert"),Udr=o(" \u2014 "),WU=a("a"),Hdr=o("IBertForQuestionAnswering"),Jdr=o(" (I-BERT model)"),Ydr=l(),$M=a("li"),CFe=a("strong"),Kdr=o("layoutlmv2"),Zdr=o(" \u2014 "),QU=a("a"),ecr=o("LayoutLMv2ForQuestionAnswering"),ocr=o(" (LayoutLMv2 model)"),rcr=l(),kM=a("li"),wFe=a("strong"),tcr=o("layoutlmv3"),acr=o(" \u2014 "),UU=a("a"),ncr=o("LayoutLMv3ForQuestionAnswering"),scr=o(" (LayoutLMv3 model)"),lcr=l(),SM=a("li"),AFe=a("strong"),icr=o("led"),dcr=o(" \u2014 "),HU=a("a"),ccr=o("LEDForQuestionAnswering"),mcr=o(" (LED model)"),fcr=l(),RM=a("li"),LFe=a("strong"),gcr=o("longformer"),hcr=o(" \u2014 "),JU=a("a"),ucr=o("LongformerForQuestionAnswering"),pcr=o(" (Longformer model)"),_cr=l(),PM=a("li"),yFe=a("strong"),bcr=o("luke"),vcr=o(" \u2014 "),YU=a("a"),Fcr=o("LukeForQuestionAnswering"),Tcr=o(" (LUKE model)"),Mcr=l(),BM=a("li"),xFe=a("strong"),Ecr=o("lxmert"),Ccr=o(" \u2014 "),KU=a("a"),wcr=o("LxmertForQuestionAnswering"),Acr=o(" (LXMERT model)"),Lcr=l(),IM=a("li"),$Fe=a("strong"),ycr=o("mbart"),xcr=o(" \u2014 "),ZU=a("a"),$cr=o("MBartForQuestionAnswering"),kcr=o(" (mBART model)"),Scr=l(),NM=a("li"),kFe=a("strong"),Rcr=o("megatron-bert"),Pcr=o(" \u2014 "),eH=a("a"),Bcr=o("MegatronBertForQuestionAnswering"),Icr=o(" (Megatron-BERT model)"),Ncr=l(),qM=a("li"),SFe=a("strong"),qcr=o("mobilebert"),jcr=o(" \u2014 "),oH=a("a"),Dcr=o("MobileBertForQuestionAnswering"),Gcr=o(" (MobileBERT model)"),Ocr=l(),jM=a("li"),RFe=a("strong"),Vcr=o("mpnet"),Xcr=o(" \u2014 "),rH=a("a"),zcr=o("MPNetForQuestionAnswering"),Wcr=o(" (MPNet model)"),Qcr=l(),DM=a("li"),PFe=a("strong"),Ucr=o("mvp"),Hcr=o(" \u2014 "),tH=a("a"),Jcr=o("MvpForQuestionAnswering"),Ycr=o(" (MVP model)"),Kcr=l(),GM=a("li"),BFe=a("strong"),Zcr=o("nezha"),emr=o(" \u2014 "),aH=a("a"),omr=o("NezhaForQuestionAnswering"),rmr=o(" (Nezha model)"),tmr=l(),OM=a("li"),IFe=a("strong"),amr=o("nystromformer"),nmr=o(" \u2014 "),nH=a("a"),smr=o("NystromformerForQuestionAnswering"),lmr=o(" (Nystr\xF6mformer model)"),imr=l(),VM=a("li"),NFe=a("strong"),dmr=o("qdqbert"),cmr=o(" \u2014 "),sH=a("a"),mmr=o("QDQBertForQuestionAnswering"),fmr=o(" (QDQBert model)"),gmr=l(),XM=a("li"),qFe=a("strong"),hmr=o("reformer"),umr=o(" \u2014 "),lH=a("a"),pmr=o("ReformerForQuestionAnswering"),_mr=o(" (Reformer model)"),bmr=l(),zM=a("li"),jFe=a("strong"),vmr=o("rembert"),Fmr=o(" \u2014 "),iH=a("a"),Tmr=o("RemBertForQuestionAnswering"),Mmr=o(" (RemBERT model)"),Emr=l(),WM=a("li"),DFe=a("strong"),Cmr=o("roberta"),wmr=o(" \u2014 "),dH=a("a"),Amr=o("RobertaForQuestionAnswering"),Lmr=o(" (RoBERTa model)"),ymr=l(),QM=a("li"),GFe=a("strong"),xmr=o("roformer"),$mr=o(" \u2014 "),cH=a("a"),kmr=o("RoFormerForQuestionAnswering"),Smr=o(" (RoFormer model)"),Rmr=l(),UM=a("li"),OFe=a("strong"),Pmr=o("splinter"),Bmr=o(" \u2014 "),mH=a("a"),Imr=o("SplinterForQuestionAnswering"),Nmr=o(" (Splinter model)"),qmr=l(),HM=a("li"),VFe=a("strong"),jmr=o("squeezebert"),Dmr=o(" \u2014 "),fH=a("a"),Gmr=o("SqueezeBertForQuestionAnswering"),Omr=o(" (SqueezeBERT model)"),Vmr=l(),JM=a("li"),XFe=a("strong"),Xmr=o("xlm"),zmr=o(" \u2014 "),gH=a("a"),Wmr=o("XLMForQuestionAnsweringSimple"),Qmr=o(" (XLM model)"),Umr=l(),YM=a("li"),zFe=a("strong"),Hmr=o("xlm-roberta"),Jmr=o(" \u2014 "),hH=a("a"),Ymr=o("XLMRobertaForQuestionAnswering"),Kmr=o(" (XLM-RoBERTa model)"),Zmr=l(),KM=a("li"),WFe=a("strong"),efr=o("xlm-roberta-xl"),ofr=o(" \u2014 "),uH=a("a"),rfr=o("XLMRobertaXLForQuestionAnswering"),tfr=o(" (XLM-RoBERTa-XL model)"),afr=l(),ZM=a("li"),QFe=a("strong"),nfr=o("xlnet"),sfr=o(" \u2014 "),pH=a("a"),lfr=o("XLNetForQuestionAnsweringSimple"),ifr=o(" (XLNet model)"),dfr=l(),eE=a("li"),UFe=a("strong"),cfr=o("yoso"),mfr=o(" \u2014 "),_H=a("a"),ffr=o("YosoForQuestionAnswering"),gfr=o(" (YOSO model)"),hfr=l(),oE=a("p"),ufr=o("The model is set in evaluation mode by default using "),HFe=a("code"),pfr=o("model.eval()"),_fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=a("code"),bfr=o("model.train()"),vfr=l(),F(rE.$$.fragment),hHe=l(),Sd=a("h2"),tE=a("a"),YFe=a("span"),F(U9.$$.fragment),Ffr=l(),KFe=a("span"),Tfr=o("AutoModelForTableQuestionAnswering"),uHe=l(),Vo=a("div"),F(H9.$$.fragment),Mfr=l(),Rd=a("p"),Efr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bH=a("a"),Cfr=o("from_pretrained()"),wfr=o(" class method or the "),vH=a("a"),Afr=o("from_config()"),Lfr=o(` class
method.`),yfr=l(),J9=a("p"),xfr=o("This class cannot be instantiated directly using "),ZFe=a("code"),$fr=o("__init__()"),kfr=o(" (throws an error)."),Sfr=l(),Mt=a("div"),F(Y9.$$.fragment),Rfr=l(),eTe=a("p"),Pfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Bfr=l(),Pd=a("p"),Ifr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),Nfr=o("not"),qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),jfr=o("from_pretrained()"),Dfr=o(" to load the model weights."),Gfr=l(),F(aE.$$.fragment),Ofr=l(),io=a("div"),F(K9.$$.fragment),Vfr=l(),rTe=a("p"),Xfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zfr=l(),Za=a("p"),Wfr=o("The model class to instantiate is selected based on the "),tTe=a("code"),Qfr=o("model_type"),Ufr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),Hfr=o("pretrained_model_name_or_path"),Jfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(":"),Zfr=l(),sTe=a("ul"),nE=a("li"),lTe=a("strong"),egr=o("tapas"),ogr=o(" \u2014 "),TH=a("a"),rgr=o("TapasForQuestionAnswering"),tgr=o(" (TAPAS model)"),agr=l(),sE=a("p"),ngr=o("The model is set in evaluation mode by default using "),iTe=a("code"),sgr=o("model.eval()"),lgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=a("code"),igr=o("model.train()"),dgr=l(),F(lE.$$.fragment),pHe=l(),Bd=a("h2"),iE=a("a"),cTe=a("span"),F(Z9.$$.fragment),cgr=l(),mTe=a("span"),mgr=o("AutoModelForImageClassification"),_He=l(),Xo=a("div"),F(ex.$$.fragment),fgr=l(),Id=a("p"),ggr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MH=a("a"),hgr=o("from_pretrained()"),ugr=o(" class method or the "),EH=a("a"),pgr=o("from_config()"),_gr=o(` class
method.`),bgr=l(),ox=a("p"),vgr=o("This class cannot be instantiated directly using "),fTe=a("code"),Fgr=o("__init__()"),Tgr=o(" (throws an error)."),Mgr=l(),Et=a("div"),F(rx.$$.fragment),Egr=l(),gTe=a("p"),Cgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wgr=l(),Nd=a("p"),Agr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),Lgr=o("not"),ygr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),xgr=o("from_pretrained()"),$gr=o(" to load the model weights."),kgr=l(),F(dE.$$.fragment),Sgr=l(),co=a("div"),F(tx.$$.fragment),Rgr=l(),uTe=a("p"),Pgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bgr=l(),en=a("p"),Igr=o("The model class to instantiate is selected based on the "),pTe=a("code"),Ngr=o("model_type"),qgr=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),jgr=o("pretrained_model_name_or_path"),Dgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),Ggr=o("pretrained_model_name_or_path"),Ogr=o(":"),Vgr=l(),be=a("ul"),cE=a("li"),vTe=a("strong"),Xgr=o("beit"),zgr=o(" \u2014 "),wH=a("a"),Wgr=o("BeitForImageClassification"),Qgr=o(" (BEiT model)"),Ugr=l(),mE=a("li"),FTe=a("strong"),Hgr=o("convnext"),Jgr=o(" \u2014 "),AH=a("a"),Ygr=o("ConvNextForImageClassification"),Kgr=o(" (ConvNeXT model)"),Zgr=l(),fE=a("li"),TTe=a("strong"),ehr=o("cvt"),ohr=o(" \u2014 "),LH=a("a"),rhr=o("CvtForImageClassification"),thr=o(" (CvT model)"),ahr=l(),gE=a("li"),MTe=a("strong"),nhr=o("data2vec-vision"),shr=o(" \u2014 "),yH=a("a"),lhr=o("Data2VecVisionForImageClassification"),ihr=o(" (Data2VecVision model)"),dhr=l(),sl=a("li"),ETe=a("strong"),chr=o("deit"),mhr=o(" \u2014 "),xH=a("a"),fhr=o("DeiTForImageClassification"),ghr=o(" or "),$H=a("a"),hhr=o("DeiTForImageClassificationWithTeacher"),uhr=o(" (DeiT model)"),phr=l(),hE=a("li"),CTe=a("strong"),_hr=o("imagegpt"),bhr=o(" \u2014 "),kH=a("a"),vhr=o("ImageGPTForImageClassification"),Fhr=o(" (ImageGPT model)"),Thr=l(),ll=a("li"),wTe=a("strong"),Mhr=o("levit"),Ehr=o(" \u2014 "),SH=a("a"),Chr=o("LevitForImageClassification"),whr=o(" or "),RH=a("a"),Ahr=o("LevitForImageClassificationWithTeacher"),Lhr=o(" (LeViT model)"),yhr=l(),uE=a("li"),ATe=a("strong"),xhr=o("mobilevit"),$hr=o(" \u2014 "),PH=a("a"),khr=o("MobileViTForImageClassification"),Shr=o(" (MobileViT model)"),Rhr=l(),Ct=a("li"),LTe=a("strong"),Phr=o("perceiver"),Bhr=o(" \u2014 "),BH=a("a"),Ihr=o("PerceiverForImageClassificationLearned"),Nhr=o(" or "),IH=a("a"),qhr=o("PerceiverForImageClassificationFourier"),jhr=o(" or "),NH=a("a"),Dhr=o("PerceiverForImageClassificationConvProcessing"),Ghr=o(" (Perceiver model)"),Ohr=l(),pE=a("li"),yTe=a("strong"),Vhr=o("poolformer"),Xhr=o(" \u2014 "),qH=a("a"),zhr=o("PoolFormerForImageClassification"),Whr=o(" (PoolFormer model)"),Qhr=l(),_E=a("li"),xTe=a("strong"),Uhr=o("regnet"),Hhr=o(" \u2014 "),jH=a("a"),Jhr=o("RegNetForImageClassification"),Yhr=o(" (RegNet model)"),Khr=l(),bE=a("li"),$Te=a("strong"),Zhr=o("resnet"),eur=o(" \u2014 "),DH=a("a"),our=o("ResNetForImageClassification"),rur=o(" (ResNet model)"),tur=l(),vE=a("li"),kTe=a("strong"),aur=o("segformer"),nur=o(" \u2014 "),GH=a("a"),sur=o("SegformerForImageClassification"),lur=o(" (SegFormer model)"),iur=l(),FE=a("li"),STe=a("strong"),dur=o("swin"),cur=o(" \u2014 "),OH=a("a"),mur=o("SwinForImageClassification"),fur=o(" (Swin Transformer model)"),gur=l(),TE=a("li"),RTe=a("strong"),hur=o("swinv2"),uur=o(" \u2014 "),VH=a("a"),pur=o("Swinv2ForImageClassification"),_ur=o(" (Swin Transformer V2 model)"),bur=l(),ME=a("li"),PTe=a("strong"),vur=o("van"),Fur=o(" \u2014 "),XH=a("a"),Tur=o("VanForImageClassification"),Mur=o(" (VAN model)"),Eur=l(),EE=a("li"),BTe=a("strong"),Cur=o("vit"),wur=o(" \u2014 "),zH=a("a"),Aur=o("ViTForImageClassification"),Lur=o(" (ViT model)"),yur=l(),CE=a("p"),xur=o("The model is set in evaluation mode by default using "),ITe=a("code"),$ur=o("model.eval()"),kur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NTe=a("code"),Sur=o("model.train()"),Rur=l(),F(wE.$$.fragment),bHe=l(),qd=a("h2"),AE=a("a"),qTe=a("span"),F(ax.$$.fragment),Pur=l(),jTe=a("span"),Bur=o("AutoModelForVideoClassification"),vHe=l(),zo=a("div"),F(nx.$$.fragment),Iur=l(),jd=a("p"),Nur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),WH=a("a"),qur=o("from_pretrained()"),jur=o(" class method or the "),QH=a("a"),Dur=o("from_config()"),Gur=o(` class
method.`),Our=l(),sx=a("p"),Vur=o("This class cannot be instantiated directly using "),DTe=a("code"),Xur=o("__init__()"),zur=o(" (throws an error)."),Wur=l(),wt=a("div"),F(lx.$$.fragment),Qur=l(),GTe=a("p"),Uur=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Hur=l(),Dd=a("p"),Jur=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),Yur=o("not"),Kur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),Zur=o("from_pretrained()"),epr=o(" to load the model weights."),opr=l(),F(LE.$$.fragment),rpr=l(),mo=a("div"),F(ix.$$.fragment),tpr=l(),VTe=a("p"),apr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),npr=l(),on=a("p"),spr=o("The model class to instantiate is selected based on the "),XTe=a("code"),lpr=o("model_type"),ipr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),mpr=o("pretrained_model_name_or_path"),fpr=o(":"),gpr=l(),QTe=a("ul"),yE=a("li"),UTe=a("strong"),hpr=o("videomae"),upr=o(" \u2014 "),HH=a("a"),ppr=o("VideoMAEForVideoClassification"),_pr=o(" (VideoMAE model)"),bpr=l(),xE=a("p"),vpr=o("The model is set in evaluation mode by default using "),HTe=a("code"),Fpr=o("model.eval()"),Tpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JTe=a("code"),Mpr=o("model.train()"),Epr=l(),F($E.$$.fragment),FHe=l(),Gd=a("h2"),kE=a("a"),YTe=a("span"),F(dx.$$.fragment),Cpr=l(),KTe=a("span"),wpr=o("AutoModelForVision2Seq"),THe=l(),Wo=a("div"),F(cx.$$.fragment),Apr=l(),Od=a("p"),Lpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JH=a("a"),ypr=o("from_pretrained()"),xpr=o(" class method or the "),YH=a("a"),$pr=o("from_config()"),kpr=o(` class
method.`),Spr=l(),mx=a("p"),Rpr=o("This class cannot be instantiated directly using "),ZTe=a("code"),Ppr=o("__init__()"),Bpr=o(" (throws an error)."),Ipr=l(),At=a("div"),F(fx.$$.fragment),Npr=l(),eMe=a("p"),qpr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jpr=l(),Vd=a("p"),Dpr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),Gpr=o("not"),Opr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),Vpr=o("from_pretrained()"),Xpr=o(" to load the model weights."),zpr=l(),F(SE.$$.fragment),Wpr=l(),fo=a("div"),F(gx.$$.fragment),Qpr=l(),rMe=a("p"),Upr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hpr=l(),rn=a("p"),Jpr=o("The model class to instantiate is selected based on the "),tMe=a("code"),Ypr=o("model_type"),Kpr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),Zpr=o("pretrained_model_name_or_path"),e_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(":"),t_r=l(),sMe=a("ul"),RE=a("li"),lMe=a("strong"),a_r=o("vision-encoder-decoder"),n_r=o(" \u2014 "),ZH=a("a"),s_r=o("VisionEncoderDecoderModel"),l_r=o(" (Vision Encoder decoder model)"),i_r=l(),PE=a("p"),d_r=o("The model is set in evaluation mode by default using "),iMe=a("code"),c_r=o("model.eval()"),m_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dMe=a("code"),f_r=o("model.train()"),g_r=l(),F(BE.$$.fragment),MHe=l(),Xd=a("h2"),IE=a("a"),cMe=a("span"),F(hx.$$.fragment),h_r=l(),mMe=a("span"),u_r=o("AutoModelForVisualQuestionAnswering"),EHe=l(),Qo=a("div"),F(ux.$$.fragment),p_r=l(),zd=a("p"),__r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),eJ=a("a"),b_r=o("from_pretrained()"),v_r=o(" class method or the "),oJ=a("a"),F_r=o("from_config()"),T_r=o(` class
method.`),M_r=l(),px=a("p"),E_r=o("This class cannot be instantiated directly using "),fMe=a("code"),C_r=o("__init__()"),w_r=o(" (throws an error)."),A_r=l(),Lt=a("div"),F(_x.$$.fragment),L_r=l(),gMe=a("p"),y_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),x_r=l(),Wd=a("p"),$_r=o(`Note:
Loading a model from its configuration file does `),hMe=a("strong"),k_r=o("not"),S_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),R_r=o("from_pretrained()"),P_r=o(" to load the model weights."),B_r=l(),F(NE.$$.fragment),I_r=l(),go=a("div"),F(bx.$$.fragment),N_r=l(),uMe=a("p"),q_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),j_r=l(),tn=a("p"),D_r=o("The model class to instantiate is selected based on the "),pMe=a("code"),G_r=o("model_type"),O_r=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),V_r=o("pretrained_model_name_or_path"),X_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),z_r=o("pretrained_model_name_or_path"),W_r=o(":"),Q_r=l(),vMe=a("ul"),qE=a("li"),FMe=a("strong"),U_r=o("vilt"),H_r=o(" \u2014 "),tJ=a("a"),J_r=o("ViltForQuestionAnswering"),Y_r=o(" (ViLT model)"),K_r=l(),jE=a("p"),Z_r=o("The model is set in evaluation mode by default using "),TMe=a("code"),e2r=o("model.eval()"),o2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MMe=a("code"),r2r=o("model.train()"),t2r=l(),F(DE.$$.fragment),CHe=l(),Qd=a("h2"),GE=a("a"),EMe=a("span"),F(vx.$$.fragment),a2r=l(),CMe=a("span"),n2r=o("AutoModelForAudioClassification"),wHe=l(),Uo=a("div"),F(Fx.$$.fragment),s2r=l(),Ud=a("p"),l2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),aJ=a("a"),i2r=o("from_pretrained()"),d2r=o(" class method or the "),nJ=a("a"),c2r=o("from_config()"),m2r=o(` class
method.`),f2r=l(),Tx=a("p"),g2r=o("This class cannot be instantiated directly using "),wMe=a("code"),h2r=o("__init__()"),u2r=o(" (throws an error)."),p2r=l(),yt=a("div"),F(Mx.$$.fragment),_2r=l(),AMe=a("p"),b2r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),v2r=l(),Hd=a("p"),F2r=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),T2r=o("not"),M2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),E2r=o("from_pretrained()"),C2r=o(" to load the model weights."),w2r=l(),F(OE.$$.fragment),A2r=l(),ho=a("div"),F(Ex.$$.fragment),L2r=l(),yMe=a("p"),y2r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),x2r=l(),an=a("p"),$2r=o("The model class to instantiate is selected based on the "),xMe=a("code"),k2r=o("model_type"),S2r=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),R2r=o("pretrained_model_name_or_path"),P2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),B2r=o("pretrained_model_name_or_path"),I2r=o(":"),N2r=l(),Pe=a("ul"),VE=a("li"),SMe=a("strong"),q2r=o("data2vec-audio"),j2r=o(" \u2014 "),lJ=a("a"),D2r=o("Data2VecAudioForSequenceClassification"),G2r=o(" (Data2VecAudio model)"),O2r=l(),XE=a("li"),RMe=a("strong"),V2r=o("hubert"),X2r=o(" \u2014 "),iJ=a("a"),z2r=o("HubertForSequenceClassification"),W2r=o(" (Hubert model)"),Q2r=l(),zE=a("li"),PMe=a("strong"),U2r=o("sew"),H2r=o(" \u2014 "),dJ=a("a"),J2r=o("SEWForSequenceClassification"),Y2r=o(" (SEW model)"),K2r=l(),WE=a("li"),BMe=a("strong"),Z2r=o("sew-d"),ebr=o(" \u2014 "),cJ=a("a"),obr=o("SEWDForSequenceClassification"),rbr=o(" (SEW-D model)"),tbr=l(),QE=a("li"),IMe=a("strong"),abr=o("unispeech"),nbr=o(" \u2014 "),mJ=a("a"),sbr=o("UniSpeechForSequenceClassification"),lbr=o(" (UniSpeech model)"),ibr=l(),UE=a("li"),NMe=a("strong"),dbr=o("unispeech-sat"),cbr=o(" \u2014 "),fJ=a("a"),mbr=o("UniSpeechSatForSequenceClassification"),fbr=o(" (UniSpeechSat model)"),gbr=l(),HE=a("li"),qMe=a("strong"),hbr=o("wav2vec2"),ubr=o(" \u2014 "),gJ=a("a"),pbr=o("Wav2Vec2ForSequenceClassification"),_br=o(" (Wav2Vec2 model)"),bbr=l(),JE=a("li"),jMe=a("strong"),vbr=o("wav2vec2-conformer"),Fbr=o(" \u2014 "),hJ=a("a"),Tbr=o("Wav2Vec2ConformerForSequenceClassification"),Mbr=o(" (Wav2Vec2-Conformer model)"),Ebr=l(),YE=a("li"),DMe=a("strong"),Cbr=o("wavlm"),wbr=o(" \u2014 "),uJ=a("a"),Abr=o("WavLMForSequenceClassification"),Lbr=o(" (WavLM model)"),ybr=l(),KE=a("p"),xbr=o("The model is set in evaluation mode by default using "),GMe=a("code"),$br=o("model.eval()"),kbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OMe=a("code"),Sbr=o("model.train()"),Rbr=l(),F(ZE.$$.fragment),AHe=l(),Jd=a("h2"),e4=a("a"),VMe=a("span"),F(Cx.$$.fragment),Pbr=l(),XMe=a("span"),Bbr=o("AutoModelForAudioFrameClassification"),LHe=l(),Ho=a("div"),F(wx.$$.fragment),Ibr=l(),Yd=a("p"),Nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pJ=a("a"),qbr=o("from_pretrained()"),jbr=o(" class method or the "),_J=a("a"),Dbr=o("from_config()"),Gbr=o(` class
method.`),Obr=l(),Ax=a("p"),Vbr=o("This class cannot be instantiated directly using "),zMe=a("code"),Xbr=o("__init__()"),zbr=o(" (throws an error)."),Wbr=l(),xt=a("div"),F(Lx.$$.fragment),Qbr=l(),WMe=a("p"),Ubr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hbr=l(),Kd=a("p"),Jbr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),Ybr=o("not"),Kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),Zbr=o("from_pretrained()"),evr=o(" to load the model weights."),ovr=l(),F(o4.$$.fragment),rvr=l(),uo=a("div"),F(yx.$$.fragment),tvr=l(),UMe=a("p"),avr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),nvr=l(),nn=a("p"),svr=o("The model class to instantiate is selected based on the "),HMe=a("code"),lvr=o("model_type"),ivr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),mvr=o("pretrained_model_name_or_path"),fvr=o(":"),gvr=l(),st=a("ul"),r4=a("li"),KMe=a("strong"),hvr=o("data2vec-audio"),uvr=o(" \u2014 "),vJ=a("a"),pvr=o("Data2VecAudioForAudioFrameClassification"),_vr=o(" (Data2VecAudio model)"),bvr=l(),t4=a("li"),ZMe=a("strong"),vvr=o("unispeech-sat"),Fvr=o(" \u2014 "),FJ=a("a"),Tvr=o("UniSpeechSatForAudioFrameClassification"),Mvr=o(" (UniSpeechSat model)"),Evr=l(),a4=a("li"),eEe=a("strong"),Cvr=o("wav2vec2"),wvr=o(" \u2014 "),TJ=a("a"),Avr=o("Wav2Vec2ForAudioFrameClassification"),Lvr=o(" (Wav2Vec2 model)"),yvr=l(),n4=a("li"),oEe=a("strong"),xvr=o("wav2vec2-conformer"),$vr=o(" \u2014 "),MJ=a("a"),kvr=o("Wav2Vec2ConformerForAudioFrameClassification"),Svr=o(" (Wav2Vec2-Conformer model)"),Rvr=l(),s4=a("li"),rEe=a("strong"),Pvr=o("wavlm"),Bvr=o(" \u2014 "),EJ=a("a"),Ivr=o("WavLMForAudioFrameClassification"),Nvr=o(" (WavLM model)"),qvr=l(),l4=a("p"),jvr=o("The model is set in evaluation mode by default using "),tEe=a("code"),Dvr=o("model.eval()"),Gvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aEe=a("code"),Ovr=o("model.train()"),Vvr=l(),F(i4.$$.fragment),yHe=l(),Zd=a("h2"),d4=a("a"),nEe=a("span"),F(xx.$$.fragment),Xvr=l(),sEe=a("span"),zvr=o("AutoModelForCTC"),xHe=l(),Jo=a("div"),F($x.$$.fragment),Wvr=l(),ec=a("p"),Qvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),CJ=a("a"),Uvr=o("from_pretrained()"),Hvr=o(" class method or the "),wJ=a("a"),Jvr=o("from_config()"),Yvr=o(` class
method.`),Kvr=l(),kx=a("p"),Zvr=o("This class cannot be instantiated directly using "),lEe=a("code"),e1r=o("__init__()"),o1r=o(" (throws an error)."),r1r=l(),$t=a("div"),F(Sx.$$.fragment),t1r=l(),iEe=a("p"),a1r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),n1r=l(),oc=a("p"),s1r=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),l1r=o("not"),i1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=a("a"),d1r=o("from_pretrained()"),c1r=o(" to load the model weights."),m1r=l(),F(c4.$$.fragment),f1r=l(),po=a("div"),F(Rx.$$.fragment),g1r=l(),cEe=a("p"),h1r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),u1r=l(),sn=a("p"),p1r=o("The model class to instantiate is selected based on the "),mEe=a("code"),_1r=o("model_type"),b1r=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),v1r=o("pretrained_model_name_or_path"),F1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),T1r=o("pretrained_model_name_or_path"),M1r=o(":"),E1r=l(),Le=a("ul"),m4=a("li"),hEe=a("strong"),C1r=o("data2vec-audio"),w1r=o(" \u2014 "),LJ=a("a"),A1r=o("Data2VecAudioForCTC"),L1r=o(" (Data2VecAudio model)"),y1r=l(),f4=a("li"),uEe=a("strong"),x1r=o("hubert"),$1r=o(" \u2014 "),yJ=a("a"),k1r=o("HubertForCTC"),S1r=o(" (Hubert model)"),R1r=l(),g4=a("li"),pEe=a("strong"),P1r=o("mctct"),B1r=o(" \u2014 "),xJ=a("a"),I1r=o("MCTCTForCTC"),N1r=o(" (M-CTC-T model)"),q1r=l(),h4=a("li"),_Ee=a("strong"),j1r=o("sew"),D1r=o(" \u2014 "),$J=a("a"),G1r=o("SEWForCTC"),O1r=o(" (SEW model)"),V1r=l(),u4=a("li"),bEe=a("strong"),X1r=o("sew-d"),z1r=o(" \u2014 "),kJ=a("a"),W1r=o("SEWDForCTC"),Q1r=o(" (SEW-D model)"),U1r=l(),p4=a("li"),vEe=a("strong"),H1r=o("unispeech"),J1r=o(" \u2014 "),SJ=a("a"),Y1r=o("UniSpeechForCTC"),K1r=o(" (UniSpeech model)"),Z1r=l(),_4=a("li"),FEe=a("strong"),eFr=o("unispeech-sat"),oFr=o(" \u2014 "),RJ=a("a"),rFr=o("UniSpeechSatForCTC"),tFr=o(" (UniSpeechSat model)"),aFr=l(),b4=a("li"),TEe=a("strong"),nFr=o("wav2vec2"),sFr=o(" \u2014 "),PJ=a("a"),lFr=o("Wav2Vec2ForCTC"),iFr=o(" (Wav2Vec2 model)"),dFr=l(),v4=a("li"),MEe=a("strong"),cFr=o("wav2vec2-conformer"),mFr=o(" \u2014 "),BJ=a("a"),fFr=o("Wav2Vec2ConformerForCTC"),gFr=o(" (Wav2Vec2-Conformer model)"),hFr=l(),F4=a("li"),EEe=a("strong"),uFr=o("wavlm"),pFr=o(" \u2014 "),IJ=a("a"),_Fr=o("WavLMForCTC"),bFr=o(" (WavLM model)"),vFr=l(),T4=a("p"),FFr=o("The model is set in evaluation mode by default using "),CEe=a("code"),TFr=o("model.eval()"),MFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wEe=a("code"),EFr=o("model.train()"),CFr=l(),F(M4.$$.fragment),$He=l(),rc=a("h2"),E4=a("a"),AEe=a("span"),F(Px.$$.fragment),wFr=l(),LEe=a("span"),AFr=o("AutoModelForSpeechSeq2Seq"),kHe=l(),Yo=a("div"),F(Bx.$$.fragment),LFr=l(),tc=a("p"),yFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NJ=a("a"),xFr=o("from_pretrained()"),$Fr=o(" class method or the "),qJ=a("a"),kFr=o("from_config()"),SFr=o(` class
method.`),RFr=l(),Ix=a("p"),PFr=o("This class cannot be instantiated directly using "),yEe=a("code"),BFr=o("__init__()"),IFr=o(" (throws an error)."),NFr=l(),kt=a("div"),F(Nx.$$.fragment),qFr=l(),xEe=a("p"),jFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),DFr=l(),ac=a("p"),GFr=o(`Note:
Loading a model from its configuration file does `),$Ee=a("strong"),OFr=o("not"),VFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),XFr=o("from_pretrained()"),zFr=o(" to load the model weights."),WFr=l(),F(C4.$$.fragment),QFr=l(),_o=a("div"),F(qx.$$.fragment),UFr=l(),kEe=a("p"),HFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JFr=l(),ln=a("p"),YFr=o("The model class to instantiate is selected based on the "),SEe=a("code"),KFr=o("model_type"),ZFr=o(` property of the config object (either
passed as an argument or loaded from `),REe=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),rTr=o("pretrained_model_name_or_path"),tTr=o(":"),aTr=l(),jx=a("ul"),w4=a("li"),BEe=a("strong"),nTr=o("speech-encoder-decoder"),sTr=o(" \u2014 "),DJ=a("a"),lTr=o("SpeechEncoderDecoderModel"),iTr=o(" (Speech Encoder decoder model)"),dTr=l(),A4=a("li"),IEe=a("strong"),cTr=o("speech_to_text"),mTr=o(" \u2014 "),GJ=a("a"),fTr=o("Speech2TextForConditionalGeneration"),gTr=o(" (Speech2Text model)"),hTr=l(),L4=a("p"),uTr=o("The model is set in evaluation mode by default using "),NEe=a("code"),pTr=o("model.eval()"),_Tr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qEe=a("code"),bTr=o("model.train()"),vTr=l(),F(y4.$$.fragment),SHe=l(),nc=a("h2"),x4=a("a"),jEe=a("span"),F(Dx.$$.fragment),FTr=l(),DEe=a("span"),TTr=o("AutoModelForAudioXVector"),RHe=l(),Ko=a("div"),F(Gx.$$.fragment),MTr=l(),sc=a("p"),ETr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),OJ=a("a"),CTr=o("from_pretrained()"),wTr=o(" class method or the "),VJ=a("a"),ATr=o("from_config()"),LTr=o(` class
method.`),yTr=l(),Ox=a("p"),xTr=o("This class cannot be instantiated directly using "),GEe=a("code"),$Tr=o("__init__()"),kTr=o(" (throws an error)."),STr=l(),St=a("div"),F(Vx.$$.fragment),RTr=l(),OEe=a("p"),PTr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),BTr=l(),lc=a("p"),ITr=o(`Note:
Loading a model from its configuration file does `),VEe=a("strong"),NTr=o("not"),qTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),jTr=o("from_pretrained()"),DTr=o(" to load the model weights."),GTr=l(),F($4.$$.fragment),OTr=l(),bo=a("div"),F(Xx.$$.fragment),VTr=l(),XEe=a("p"),XTr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),zTr=l(),dn=a("p"),WTr=o("The model class to instantiate is selected based on the "),zEe=a("code"),QTr=o("model_type"),UTr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),HTr=o("pretrained_model_name_or_path"),JTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),YTr=o("pretrained_model_name_or_path"),KTr=o(":"),ZTr=l(),lt=a("ul"),k4=a("li"),UEe=a("strong"),eMr=o("data2vec-audio"),oMr=o(" \u2014 "),zJ=a("a"),rMr=o("Data2VecAudioForXVector"),tMr=o(" (Data2VecAudio model)"),aMr=l(),S4=a("li"),HEe=a("strong"),nMr=o("unispeech-sat"),sMr=o(" \u2014 "),WJ=a("a"),lMr=o("UniSpeechSatForXVector"),iMr=o(" (UniSpeechSat model)"),dMr=l(),R4=a("li"),JEe=a("strong"),cMr=o("wav2vec2"),mMr=o(" \u2014 "),QJ=a("a"),fMr=o("Wav2Vec2ForXVector"),gMr=o(" (Wav2Vec2 model)"),hMr=l(),P4=a("li"),YEe=a("strong"),uMr=o("wav2vec2-conformer"),pMr=o(" \u2014 "),UJ=a("a"),_Mr=o("Wav2Vec2ConformerForXVector"),bMr=o(" (Wav2Vec2-Conformer model)"),vMr=l(),B4=a("li"),KEe=a("strong"),FMr=o("wavlm"),TMr=o(" \u2014 "),HJ=a("a"),MMr=o("WavLMForXVector"),EMr=o(" (WavLM model)"),CMr=l(),I4=a("p"),wMr=o("The model is set in evaluation mode by default using "),ZEe=a("code"),AMr=o("model.eval()"),LMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e4e=a("code"),yMr=o("model.train()"),xMr=l(),F(N4.$$.fragment),PHe=l(),ic=a("h2"),q4=a("a"),o4e=a("span"),F(zx.$$.fragment),$Mr=l(),r4e=a("span"),kMr=o("AutoModelForMaskedImageModeling"),BHe=l(),Zo=a("div"),F(Wx.$$.fragment),SMr=l(),dc=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),JJ=a("a"),PMr=o("from_pretrained()"),BMr=o(" class method or the "),YJ=a("a"),IMr=o("from_config()"),NMr=o(` class
method.`),qMr=l(),Qx=a("p"),jMr=o("This class cannot be instantiated directly using "),t4e=a("code"),DMr=o("__init__()"),GMr=o(" (throws an error)."),OMr=l(),Rt=a("div"),F(Ux.$$.fragment),VMr=l(),a4e=a("p"),XMr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),zMr=l(),cc=a("p"),WMr=o(`Note:
Loading a model from its configuration file does `),n4e=a("strong"),QMr=o("not"),UMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),HMr=o("from_pretrained()"),JMr=o(" to load the model weights."),YMr=l(),F(j4.$$.fragment),KMr=l(),vo=a("div"),F(Hx.$$.fragment),ZMr=l(),s4e=a("p"),eEr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),oEr=l(),cn=a("p"),rEr=o("The model class to instantiate is selected based on the "),l4e=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),i4e=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),mn=a("ul"),D4=a("li"),c4e=a("strong"),cEr=o("deit"),mEr=o(" \u2014 "),ZJ=a("a"),fEr=o("DeiTForMaskedImageModeling"),gEr=o(" (DeiT model)"),hEr=l(),G4=a("li"),m4e=a("strong"),uEr=o("swin"),pEr=o(" \u2014 "),eY=a("a"),_Er=o("SwinForMaskedImageModeling"),bEr=o(" (Swin Transformer model)"),vEr=l(),O4=a("li"),f4e=a("strong"),FEr=o("swinv2"),TEr=o(" \u2014 "),oY=a("a"),MEr=o("Swinv2ForMaskedImageModeling"),EEr=o(" (Swin Transformer V2 model)"),CEr=l(),V4=a("li"),g4e=a("strong"),wEr=o("vit"),AEr=o(" \u2014 "),rY=a("a"),LEr=o("ViTForMaskedImageModeling"),yEr=o(" (ViT model)"),xEr=l(),X4=a("p"),$Er=o("The model is set in evaluation mode by default using "),h4e=a("code"),kEr=o("model.eval()"),SEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u4e=a("code"),REr=o("model.train()"),PEr=l(),F(z4.$$.fragment),IHe=l(),mc=a("h2"),W4=a("a"),p4e=a("span"),F(Jx.$$.fragment),BEr=l(),_4e=a("span"),IEr=o("AutoModelForObjectDetection"),NHe=l(),er=a("div"),F(Yx.$$.fragment),NEr=l(),fc=a("p"),qEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tY=a("a"),jEr=o("from_pretrained()"),DEr=o(" class method or the "),aY=a("a"),GEr=o("from_config()"),OEr=o(` class
method.`),VEr=l(),Kx=a("p"),XEr=o("This class cannot be instantiated directly using "),b4e=a("code"),zEr=o("__init__()"),WEr=o(" (throws an error)."),QEr=l(),Pt=a("div"),F(Zx.$$.fragment),UEr=l(),v4e=a("p"),HEr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JEr=l(),gc=a("p"),YEr=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),KEr=o("not"),ZEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),e4r=o("from_pretrained()"),o4r=o(" to load the model weights."),r4r=l(),F(Q4.$$.fragment),t4r=l(),Fo=a("div"),F(e$.$$.fragment),a4r=l(),T4e=a("p"),n4r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),s4r=l(),fn=a("p"),l4r=o("The model class to instantiate is selected based on the "),M4e=a("code"),i4r=o("model_type"),d4r=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),c4r=o("pretrained_model_name_or_path"),m4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),f4r=o("pretrained_model_name_or_path"),g4r=o(":"),h4r=l(),o$=a("ul"),U4=a("li"),w4e=a("strong"),u4r=o("detr"),p4r=o(" \u2014 "),sY=a("a"),_4r=o("DetrForObjectDetection"),b4r=o(" (DETR model)"),v4r=l(),H4=a("li"),A4e=a("strong"),F4r=o("yolos"),T4r=o(" \u2014 "),lY=a("a"),M4r=o("YolosForObjectDetection"),E4r=o(" (YOLOS model)"),C4r=l(),J4=a("p"),w4r=o("The model is set in evaluation mode by default using "),L4e=a("code"),A4r=o("model.eval()"),L4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=a("code"),y4r=o("model.train()"),x4r=l(),F(Y4.$$.fragment),qHe=l(),hc=a("h2"),K4=a("a"),x4e=a("span"),F(r$.$$.fragment),$4r=l(),$4e=a("span"),k4r=o("AutoModelForImageSegmentation"),jHe=l(),or=a("div"),F(t$.$$.fragment),S4r=l(),uc=a("p"),R4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iY=a("a"),P4r=o("from_pretrained()"),B4r=o(" class method or the "),dY=a("a"),I4r=o("from_config()"),N4r=o(` class
method.`),q4r=l(),a$=a("p"),j4r=o("This class cannot be instantiated directly using "),k4e=a("code"),D4r=o("__init__()"),G4r=o(" (throws an error)."),O4r=l(),Bt=a("div"),F(n$.$$.fragment),V4r=l(),S4e=a("p"),X4r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),z4r=l(),pc=a("p"),W4r=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),Q4r=o("not"),U4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),H4r=o("from_pretrained()"),J4r=o(" to load the model weights."),Y4r=l(),F(Z4.$$.fragment),K4r=l(),To=a("div"),F(s$.$$.fragment),Z4r=l(),P4e=a("p"),eCr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),oCr=l(),gn=a("p"),rCr=o("The model class to instantiate is selected based on the "),B4e=a("code"),tCr=o("model_type"),aCr=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),nCr=o("pretrained_model_name_or_path"),sCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),lCr=o("pretrained_model_name_or_path"),iCr=o(":"),dCr=l(),q4e=a("ul"),eC=a("li"),j4e=a("strong"),cCr=o("detr"),mCr=o(" \u2014 "),mY=a("a"),fCr=o("DetrForSegmentation"),gCr=o(" (DETR model)"),hCr=l(),oC=a("p"),uCr=o("The model is set in evaluation mode by default using "),D4e=a("code"),pCr=o("model.eval()"),_Cr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=a("code"),bCr=o("model.train()"),vCr=l(),F(rC.$$.fragment),DHe=l(),_c=a("h2"),tC=a("a"),O4e=a("span"),F(l$.$$.fragment),FCr=l(),V4e=a("span"),TCr=o("AutoModelForSemanticSegmentation"),GHe=l(),rr=a("div"),F(i$.$$.fragment),MCr=l(),bc=a("p"),ECr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),fY=a("a"),CCr=o("from_pretrained()"),wCr=o(" class method or the "),gY=a("a"),ACr=o("from_config()"),LCr=o(` class
method.`),yCr=l(),d$=a("p"),xCr=o("This class cannot be instantiated directly using "),X4e=a("code"),$Cr=o("__init__()"),kCr=o(" (throws an error)."),SCr=l(),It=a("div"),F(c$.$$.fragment),RCr=l(),z4e=a("p"),PCr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),BCr=l(),vc=a("p"),ICr=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),NCr=o("not"),qCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),jCr=o("from_pretrained()"),DCr=o(" to load the model weights."),GCr=l(),F(aC.$$.fragment),OCr=l(),Mo=a("div"),F(m$.$$.fragment),VCr=l(),Q4e=a("p"),XCr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zCr=l(),hn=a("p"),WCr=o("The model class to instantiate is selected based on the "),U4e=a("code"),QCr=o("model_type"),UCr=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),HCr=o("pretrained_model_name_or_path"),JCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),YCr=o("pretrained_model_name_or_path"),KCr=o(":"),ZCr=l(),it=a("ul"),nC=a("li"),Y4e=a("strong"),e3r=o("beit"),o3r=o(" \u2014 "),uY=a("a"),r3r=o("BeitForSemanticSegmentation"),t3r=o(" (BEiT model)"),a3r=l(),sC=a("li"),K4e=a("strong"),n3r=o("data2vec-vision"),s3r=o(" \u2014 "),pY=a("a"),l3r=o("Data2VecVisionForSemanticSegmentation"),i3r=o(" (Data2VecVision model)"),d3r=l(),lC=a("li"),Z4e=a("strong"),c3r=o("dpt"),m3r=o(" \u2014 "),_Y=a("a"),f3r=o("DPTForSemanticSegmentation"),g3r=o(" (DPT model)"),h3r=l(),iC=a("li"),eCe=a("strong"),u3r=o("mobilevit"),p3r=o(" \u2014 "),bY=a("a"),_3r=o("MobileViTForSemanticSegmentation"),b3r=o(" (MobileViT model)"),v3r=l(),dC=a("li"),oCe=a("strong"),F3r=o("segformer"),T3r=o(" \u2014 "),vY=a("a"),M3r=o("SegformerForSemanticSegmentation"),E3r=o(" (SegFormer model)"),C3r=l(),cC=a("p"),w3r=o("The model is set in evaluation mode by default using "),rCe=a("code"),A3r=o("model.eval()"),L3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tCe=a("code"),y3r=o("model.train()"),x3r=l(),F(mC.$$.fragment),OHe=l(),Fc=a("h2"),fC=a("a"),aCe=a("span"),F(f$.$$.fragment),$3r=l(),nCe=a("span"),k3r=o("AutoModelForInstanceSegmentation"),VHe=l(),tr=a("div"),F(g$.$$.fragment),S3r=l(),Tc=a("p"),R3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),FY=a("a"),P3r=o("from_pretrained()"),B3r=o(" class method or the "),TY=a("a"),I3r=o("from_config()"),N3r=o(` class
method.`),q3r=l(),h$=a("p"),j3r=o("This class cannot be instantiated directly using "),sCe=a("code"),D3r=o("__init__()"),G3r=o(" (throws an error)."),O3r=l(),Nt=a("div"),F(u$.$$.fragment),V3r=l(),lCe=a("p"),X3r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),z3r=l(),Mc=a("p"),W3r=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),Q3r=o("not"),U3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),H3r=o("from_pretrained()"),J3r=o(" to load the model weights."),Y3r=l(),F(gC.$$.fragment),K3r=l(),Eo=a("div"),F(p$.$$.fragment),Z3r=l(),dCe=a("p"),e5r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),o5r=l(),un=a("p"),r5r=o("The model class to instantiate is selected based on the "),cCe=a("code"),t5r=o("model_type"),a5r=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),n5r=o("pretrained_model_name_or_path"),s5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),l5r=o("pretrained_model_name_or_path"),i5r=o(":"),d5r=l(),gCe=a("ul"),hC=a("li"),hCe=a("strong"),c5r=o("maskformer"),m5r=o(" \u2014 "),EY=a("a"),f5r=o("MaskFormerForInstanceSegmentation"),g5r=o(" (MaskFormer model)"),h5r=l(),uC=a("p"),u5r=o("The model is set in evaluation mode by default using "),uCe=a("code"),p5r=o("model.eval()"),_5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pCe=a("code"),b5r=o("model.train()"),v5r=l(),F(pC.$$.fragment),XHe=l(),Ec=a("h2"),_C=a("a"),_Ce=a("span"),F(_$.$$.fragment),F5r=l(),bCe=a("span"),T5r=o("TFAutoModel"),zHe=l(),ar=a("div"),F(b$.$$.fragment),M5r=l(),Cc=a("p"),E5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CY=a("a"),C5r=o("from_pretrained()"),w5r=o(" class method or the "),wY=a("a"),A5r=o("from_config()"),L5r=o(` class
method.`),y5r=l(),v$=a("p"),x5r=o("This class cannot be instantiated directly using "),vCe=a("code"),$5r=o("__init__()"),k5r=o(" (throws an error)."),S5r=l(),qt=a("div"),F(F$.$$.fragment),R5r=l(),FCe=a("p"),P5r=o("Instantiates one of the base model classes of the library from a configuration."),B5r=l(),wc=a("p"),I5r=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),N5r=o("not"),q5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=a("a"),j5r=o("from_pretrained()"),D5r=o(" to load the model weights."),G5r=l(),F(bC.$$.fragment),O5r=l(),Rr=a("div"),F(T$.$$.fragment),V5r=l(),MCe=a("p"),X5r=o("Instantiate one of the base model classes of the library from a pretrained model."),z5r=l(),pn=a("p"),W5r=o("The model class to instantiate is selected based on the "),ECe=a("code"),Q5r=o("model_type"),U5r=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),H5r=o("pretrained_model_name_or_path"),J5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),Y5r=o("pretrained_model_name_or_path"),K5r=o(":"),Z5r=l(),P=a("ul"),vC=a("li"),ACe=a("strong"),e0r=o("albert"),o0r=o(" \u2014 "),LY=a("a"),r0r=o("TFAlbertModel"),t0r=o(" (ALBERT model)"),a0r=l(),FC=a("li"),LCe=a("strong"),n0r=o("bart"),s0r=o(" \u2014 "),yY=a("a"),l0r=o("TFBartModel"),i0r=o(" (BART model)"),d0r=l(),TC=a("li"),yCe=a("strong"),c0r=o("bert"),m0r=o(" \u2014 "),xY=a("a"),f0r=o("TFBertModel"),g0r=o(" (BERT model)"),h0r=l(),MC=a("li"),xCe=a("strong"),u0r=o("blenderbot"),p0r=o(" \u2014 "),$Y=a("a"),_0r=o("TFBlenderbotModel"),b0r=o(" (Blenderbot model)"),v0r=l(),EC=a("li"),$Ce=a("strong"),F0r=o("blenderbot-small"),T0r=o(" \u2014 "),kY=a("a"),M0r=o("TFBlenderbotSmallModel"),E0r=o(" (BlenderbotSmall model)"),C0r=l(),CC=a("li"),kCe=a("strong"),w0r=o("camembert"),A0r=o(" \u2014 "),SY=a("a"),L0r=o("TFCamembertModel"),y0r=o(" (CamemBERT model)"),x0r=l(),wC=a("li"),SCe=a("strong"),$0r=o("clip"),k0r=o(" \u2014 "),RY=a("a"),S0r=o("TFCLIPModel"),R0r=o(" (CLIP model)"),P0r=l(),AC=a("li"),RCe=a("strong"),B0r=o("convbert"),I0r=o(" \u2014 "),PY=a("a"),N0r=o("TFConvBertModel"),q0r=o(" (ConvBERT model)"),j0r=l(),LC=a("li"),PCe=a("strong"),D0r=o("convnext"),G0r=o(" \u2014 "),BY=a("a"),O0r=o("TFConvNextModel"),V0r=o(" (ConvNeXT model)"),X0r=l(),yC=a("li"),BCe=a("strong"),z0r=o("ctrl"),W0r=o(" \u2014 "),IY=a("a"),Q0r=o("TFCTRLModel"),U0r=o(" (CTRL model)"),H0r=l(),xC=a("li"),ICe=a("strong"),J0r=o("data2vec-vision"),Y0r=o(" \u2014 "),NY=a("a"),K0r=o("TFData2VecVisionModel"),Z0r=o(" (Data2VecVision model)"),ewr=l(),$C=a("li"),NCe=a("strong"),owr=o("deberta"),rwr=o(" \u2014 "),qY=a("a"),twr=o("TFDebertaModel"),awr=o(" (DeBERTa model)"),nwr=l(),kC=a("li"),qCe=a("strong"),swr=o("deberta-v2"),lwr=o(" \u2014 "),jY=a("a"),iwr=o("TFDebertaV2Model"),dwr=o(" (DeBERTa-v2 model)"),cwr=l(),SC=a("li"),jCe=a("strong"),mwr=o("deit"),fwr=o(" \u2014 "),DY=a("a"),gwr=o("TFDeiTModel"),hwr=o(" (DeiT model)"),uwr=l(),RC=a("li"),DCe=a("strong"),pwr=o("distilbert"),_wr=o(" \u2014 "),GY=a("a"),bwr=o("TFDistilBertModel"),vwr=o(" (DistilBERT model)"),Fwr=l(),PC=a("li"),GCe=a("strong"),Twr=o("dpr"),Mwr=o(" \u2014 "),OY=a("a"),Ewr=o("TFDPRQuestionEncoder"),Cwr=o(" (DPR model)"),wwr=l(),BC=a("li"),OCe=a("strong"),Awr=o("electra"),Lwr=o(" \u2014 "),VY=a("a"),ywr=o("TFElectraModel"),xwr=o(" (ELECTRA model)"),$wr=l(),IC=a("li"),VCe=a("strong"),kwr=o("flaubert"),Swr=o(" \u2014 "),XY=a("a"),Rwr=o("TFFlaubertModel"),Pwr=o(" (FlauBERT model)"),Bwr=l(),il=a("li"),XCe=a("strong"),Iwr=o("funnel"),Nwr=o(" \u2014 "),zY=a("a"),qwr=o("TFFunnelModel"),jwr=o(" or "),WY=a("a"),Dwr=o("TFFunnelBaseModel"),Gwr=o(" (Funnel Transformer model)"),Owr=l(),NC=a("li"),zCe=a("strong"),Vwr=o("gpt2"),Xwr=o(" \u2014 "),QY=a("a"),zwr=o("TFGPT2Model"),Wwr=o(" (OpenAI GPT-2 model)"),Qwr=l(),qC=a("li"),WCe=a("strong"),Uwr=o("gptj"),Hwr=o(" \u2014 "),UY=a("a"),Jwr=o("TFGPTJModel"),Ywr=o(" (GPT-J model)"),Kwr=l(),jC=a("li"),QCe=a("strong"),Zwr=o("hubert"),e6r=o(" \u2014 "),HY=a("a"),o6r=o("TFHubertModel"),r6r=o(" (Hubert model)"),t6r=l(),DC=a("li"),UCe=a("strong"),a6r=o("layoutlm"),n6r=o(" \u2014 "),JY=a("a"),s6r=o("TFLayoutLMModel"),l6r=o(" (LayoutLM model)"),i6r=l(),GC=a("li"),HCe=a("strong"),d6r=o("layoutlmv3"),c6r=o(" \u2014 "),YY=a("a"),m6r=o("TFLayoutLMv3Model"),f6r=o(" (LayoutLMv3 model)"),g6r=l(),OC=a("li"),JCe=a("strong"),h6r=o("led"),u6r=o(" \u2014 "),KY=a("a"),p6r=o("TFLEDModel"),_6r=o(" (LED model)"),b6r=l(),VC=a("li"),YCe=a("strong"),v6r=o("longformer"),F6r=o(" \u2014 "),ZY=a("a"),T6r=o("TFLongformerModel"),M6r=o(" (Longformer model)"),E6r=l(),XC=a("li"),KCe=a("strong"),C6r=o("lxmert"),w6r=o(" \u2014 "),eK=a("a"),A6r=o("TFLxmertModel"),L6r=o(" (LXMERT model)"),y6r=l(),zC=a("li"),ZCe=a("strong"),x6r=o("marian"),$6r=o(" \u2014 "),oK=a("a"),k6r=o("TFMarianModel"),S6r=o(" (Marian model)"),R6r=l(),WC=a("li"),e3e=a("strong"),P6r=o("mbart"),B6r=o(" \u2014 "),rK=a("a"),I6r=o("TFMBartModel"),N6r=o(" (mBART model)"),q6r=l(),QC=a("li"),o3e=a("strong"),j6r=o("mobilebert"),D6r=o(" \u2014 "),tK=a("a"),G6r=o("TFMobileBertModel"),O6r=o(" (MobileBERT model)"),V6r=l(),UC=a("li"),r3e=a("strong"),X6r=o("mobilevit"),z6r=o(" \u2014 "),aK=a("a"),W6r=o("TFMobileViTModel"),Q6r=o(" (MobileViT model)"),U6r=l(),HC=a("li"),t3e=a("strong"),H6r=o("mpnet"),J6r=o(" \u2014 "),nK=a("a"),Y6r=o("TFMPNetModel"),K6r=o(" (MPNet model)"),Z6r=l(),JC=a("li"),a3e=a("strong"),eAr=o("mt5"),oAr=o(" \u2014 "),sK=a("a"),rAr=o("TFMT5Model"),tAr=o(" (MT5 model)"),aAr=l(),YC=a("li"),n3e=a("strong"),nAr=o("openai-gpt"),sAr=o(" \u2014 "),lK=a("a"),lAr=o("TFOpenAIGPTModel"),iAr=o(" (OpenAI GPT model)"),dAr=l(),KC=a("li"),s3e=a("strong"),cAr=o("opt"),mAr=o(" \u2014 "),iK=a("a"),fAr=o("TFOPTModel"),gAr=o(" (OPT model)"),hAr=l(),ZC=a("li"),l3e=a("strong"),uAr=o("pegasus"),pAr=o(" \u2014 "),dK=a("a"),_Ar=o("TFPegasusModel"),bAr=o(" (Pegasus model)"),vAr=l(),e3=a("li"),i3e=a("strong"),FAr=o("regnet"),TAr=o(" \u2014 "),cK=a("a"),MAr=o("TFRegNetModel"),EAr=o(" (RegNet model)"),CAr=l(),o3=a("li"),d3e=a("strong"),wAr=o("rembert"),AAr=o(" \u2014 "),mK=a("a"),LAr=o("TFRemBertModel"),yAr=o(" (RemBERT model)"),xAr=l(),r3=a("li"),c3e=a("strong"),$Ar=o("resnet"),kAr=o(" \u2014 "),fK=a("a"),SAr=o("TFResNetModel"),RAr=o(" (ResNet model)"),PAr=l(),t3=a("li"),m3e=a("strong"),BAr=o("roberta"),IAr=o(" \u2014 "),gK=a("a"),NAr=o("TFRobertaModel"),qAr=o(" (RoBERTa model)"),jAr=l(),a3=a("li"),f3e=a("strong"),DAr=o("roformer"),GAr=o(" \u2014 "),hK=a("a"),OAr=o("TFRoFormerModel"),VAr=o(" (RoFormer model)"),XAr=l(),n3=a("li"),g3e=a("strong"),zAr=o("segformer"),WAr=o(" \u2014 "),uK=a("a"),QAr=o("TFSegformerModel"),UAr=o(" (SegFormer model)"),HAr=l(),s3=a("li"),h3e=a("strong"),JAr=o("speech_to_text"),YAr=o(" \u2014 "),pK=a("a"),KAr=o("TFSpeech2TextModel"),ZAr=o(" (Speech2Text model)"),e7r=l(),l3=a("li"),u3e=a("strong"),o7r=o("swin"),r7r=o(" \u2014 "),_K=a("a"),t7r=o("TFSwinModel"),a7r=o(" (Swin Transformer model)"),n7r=l(),i3=a("li"),p3e=a("strong"),s7r=o("t5"),l7r=o(" \u2014 "),bK=a("a"),i7r=o("TFT5Model"),d7r=o(" (T5 model)"),c7r=l(),d3=a("li"),_3e=a("strong"),m7r=o("tapas"),f7r=o(" \u2014 "),vK=a("a"),g7r=o("TFTapasModel"),h7r=o(" (TAPAS model)"),u7r=l(),c3=a("li"),b3e=a("strong"),p7r=o("transfo-xl"),_7r=o(" \u2014 "),FK=a("a"),b7r=o("TFTransfoXLModel"),v7r=o(" (Transformer-XL model)"),F7r=l(),m3=a("li"),v3e=a("strong"),T7r=o("vit"),M7r=o(" \u2014 "),TK=a("a"),E7r=o("TFViTModel"),C7r=o(" (ViT model)"),w7r=l(),f3=a("li"),F3e=a("strong"),A7r=o("vit_mae"),L7r=o(" \u2014 "),MK=a("a"),y7r=o("TFViTMAEModel"),x7r=o(" (ViTMAE model)"),$7r=l(),g3=a("li"),T3e=a("strong"),k7r=o("wav2vec2"),S7r=o(" \u2014 "),EK=a("a"),R7r=o("TFWav2Vec2Model"),P7r=o(" (Wav2Vec2 model)"),B7r=l(),h3=a("li"),M3e=a("strong"),I7r=o("xglm"),N7r=o(" \u2014 "),CK=a("a"),q7r=o("TFXGLMModel"),j7r=o(" (XGLM model)"),D7r=l(),u3=a("li"),E3e=a("strong"),G7r=o("xlm"),O7r=o(" \u2014 "),wK=a("a"),V7r=o("TFXLMModel"),X7r=o(" (XLM model)"),z7r=l(),p3=a("li"),C3e=a("strong"),W7r=o("xlm-roberta"),Q7r=o(" \u2014 "),AK=a("a"),U7r=o("TFXLMRobertaModel"),H7r=o(" (XLM-RoBERTa model)"),J7r=l(),_3=a("li"),w3e=a("strong"),Y7r=o("xlnet"),K7r=o(" \u2014 "),LK=a("a"),Z7r=o("TFXLNetModel"),eLr=o(" (XLNet model)"),oLr=l(),F(b3.$$.fragment),WHe=l(),Ac=a("h2"),v3=a("a"),A3e=a("span"),F(M$.$$.fragment),rLr=l(),L3e=a("span"),tLr=o("TFAutoModelForPreTraining"),QHe=l(),nr=a("div"),F(E$.$$.fragment),aLr=l(),Lc=a("p"),nLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yK=a("a"),sLr=o("from_pretrained()"),lLr=o(" class method or the "),xK=a("a"),iLr=o("from_config()"),dLr=o(` class
method.`),cLr=l(),C$=a("p"),mLr=o("This class cannot be instantiated directly using "),y3e=a("code"),fLr=o("__init__()"),gLr=o(" (throws an error)."),hLr=l(),jt=a("div"),F(w$.$$.fragment),uLr=l(),x3e=a("p"),pLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Lr=l(),yc=a("p"),bLr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),vLr=o("not"),FLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),TLr=o("from_pretrained()"),MLr=o(" to load the model weights."),ELr=l(),F(F3.$$.fragment),CLr=l(),Pr=a("div"),F(A$.$$.fragment),wLr=l(),k3e=a("p"),ALr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),LLr=l(),_n=a("p"),yLr=o("The model class to instantiate is selected based on the "),S3e=a("code"),xLr=o("model_type"),$Lr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),RLr=o("pretrained_model_name_or_path"),PLr=o(":"),BLr=l(),se=a("ul"),T3=a("li"),B3e=a("strong"),ILr=o("albert"),NLr=o(" \u2014 "),kK=a("a"),qLr=o("TFAlbertForPreTraining"),jLr=o(" (ALBERT model)"),DLr=l(),M3=a("li"),I3e=a("strong"),GLr=o("bart"),OLr=o(" \u2014 "),SK=a("a"),VLr=o("TFBartForConditionalGeneration"),XLr=o(" (BART model)"),zLr=l(),E3=a("li"),N3e=a("strong"),WLr=o("bert"),QLr=o(" \u2014 "),RK=a("a"),ULr=o("TFBertForPreTraining"),HLr=o(" (BERT model)"),JLr=l(),C3=a("li"),q3e=a("strong"),YLr=o("camembert"),KLr=o(" \u2014 "),PK=a("a"),ZLr=o("TFCamembertForMaskedLM"),eyr=o(" (CamemBERT model)"),oyr=l(),w3=a("li"),j3e=a("strong"),ryr=o("ctrl"),tyr=o(" \u2014 "),BK=a("a"),ayr=o("TFCTRLLMHeadModel"),nyr=o(" (CTRL model)"),syr=l(),A3=a("li"),D3e=a("strong"),lyr=o("distilbert"),iyr=o(" \u2014 "),IK=a("a"),dyr=o("TFDistilBertForMaskedLM"),cyr=o(" (DistilBERT model)"),myr=l(),L3=a("li"),G3e=a("strong"),fyr=o("electra"),gyr=o(" \u2014 "),NK=a("a"),hyr=o("TFElectraForPreTraining"),uyr=o(" (ELECTRA model)"),pyr=l(),y3=a("li"),O3e=a("strong"),_yr=o("flaubert"),byr=o(" \u2014 "),qK=a("a"),vyr=o("TFFlaubertWithLMHeadModel"),Fyr=o(" (FlauBERT model)"),Tyr=l(),x3=a("li"),V3e=a("strong"),Myr=o("funnel"),Eyr=o(" \u2014 "),jK=a("a"),Cyr=o("TFFunnelForPreTraining"),wyr=o(" (Funnel Transformer model)"),Ayr=l(),$3=a("li"),X3e=a("strong"),Lyr=o("gpt2"),yyr=o(" \u2014 "),DK=a("a"),xyr=o("TFGPT2LMHeadModel"),$yr=o(" (OpenAI GPT-2 model)"),kyr=l(),k3=a("li"),z3e=a("strong"),Syr=o("layoutlm"),Ryr=o(" \u2014 "),GK=a("a"),Pyr=o("TFLayoutLMForMaskedLM"),Byr=o(" (LayoutLM model)"),Iyr=l(),S3=a("li"),W3e=a("strong"),Nyr=o("lxmert"),qyr=o(" \u2014 "),OK=a("a"),jyr=o("TFLxmertForPreTraining"),Dyr=o(" (LXMERT model)"),Gyr=l(),R3=a("li"),Q3e=a("strong"),Oyr=o("mobilebert"),Vyr=o(" \u2014 "),VK=a("a"),Xyr=o("TFMobileBertForPreTraining"),zyr=o(" (MobileBERT model)"),Wyr=l(),P3=a("li"),U3e=a("strong"),Qyr=o("mpnet"),Uyr=o(" \u2014 "),XK=a("a"),Hyr=o("TFMPNetForMaskedLM"),Jyr=o(" (MPNet model)"),Yyr=l(),B3=a("li"),H3e=a("strong"),Kyr=o("openai-gpt"),Zyr=o(" \u2014 "),zK=a("a"),e8r=o("TFOpenAIGPTLMHeadModel"),o8r=o(" (OpenAI GPT model)"),r8r=l(),I3=a("li"),J3e=a("strong"),t8r=o("roberta"),a8r=o(" \u2014 "),WK=a("a"),n8r=o("TFRobertaForMaskedLM"),s8r=o(" (RoBERTa model)"),l8r=l(),N3=a("li"),Y3e=a("strong"),i8r=o("t5"),d8r=o(" \u2014 "),QK=a("a"),c8r=o("TFT5ForConditionalGeneration"),m8r=o(" (T5 model)"),f8r=l(),q3=a("li"),K3e=a("strong"),g8r=o("tapas"),h8r=o(" \u2014 "),UK=a("a"),u8r=o("TFTapasForMaskedLM"),p8r=o(" (TAPAS model)"),_8r=l(),j3=a("li"),Z3e=a("strong"),b8r=o("transfo-xl"),v8r=o(" \u2014 "),HK=a("a"),F8r=o("TFTransfoXLLMHeadModel"),T8r=o(" (Transformer-XL model)"),M8r=l(),D3=a("li"),e5e=a("strong"),E8r=o("vit_mae"),C8r=o(" \u2014 "),JK=a("a"),w8r=o("TFViTMAEForPreTraining"),A8r=o(" (ViTMAE model)"),L8r=l(),G3=a("li"),o5e=a("strong"),y8r=o("xlm"),x8r=o(" \u2014 "),YK=a("a"),$8r=o("TFXLMWithLMHeadModel"),k8r=o(" (XLM model)"),S8r=l(),O3=a("li"),r5e=a("strong"),R8r=o("xlm-roberta"),P8r=o(" \u2014 "),KK=a("a"),B8r=o("TFXLMRobertaForMaskedLM"),I8r=o(" (XLM-RoBERTa model)"),N8r=l(),V3=a("li"),t5e=a("strong"),q8r=o("xlnet"),j8r=o(" \u2014 "),ZK=a("a"),D8r=o("TFXLNetLMHeadModel"),G8r=o(" (XLNet model)"),O8r=l(),F(X3.$$.fragment),UHe=l(),xc=a("h2"),z3=a("a"),a5e=a("span"),F(L$.$$.fragment),V8r=l(),n5e=a("span"),X8r=o("TFAutoModelForCausalLM"),HHe=l(),sr=a("div"),F(y$.$$.fragment),z8r=l(),$c=a("p"),W8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eZ=a("a"),Q8r=o("from_pretrained()"),U8r=o(" class method or the "),oZ=a("a"),H8r=o("from_config()"),J8r=o(` class
method.`),Y8r=l(),x$=a("p"),K8r=o("This class cannot be instantiated directly using "),s5e=a("code"),Z8r=o("__init__()"),e9r=o(" (throws an error)."),o9r=l(),Dt=a("div"),F($$.$$.fragment),r9r=l(),l5e=a("p"),t9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),a9r=l(),kc=a("p"),n9r=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),s9r=o("not"),l9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),i9r=o("from_pretrained()"),d9r=o(" to load the model weights."),c9r=l(),F(W3.$$.fragment),m9r=l(),Br=a("div"),F(k$.$$.fragment),f9r=l(),d5e=a("p"),g9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),h9r=l(),bn=a("p"),u9r=o("The model class to instantiate is selected based on the "),c5e=a("code"),p9r=o("model_type"),_9r=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),b9r=o("pretrained_model_name_or_path"),v9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),F9r=o("pretrained_model_name_or_path"),T9r=o(":"),M9r=l(),Me=a("ul"),Q3=a("li"),g5e=a("strong"),E9r=o("bert"),C9r=o(" \u2014 "),tZ=a("a"),w9r=o("TFBertLMHeadModel"),A9r=o(" (BERT model)"),L9r=l(),U3=a("li"),h5e=a("strong"),y9r=o("camembert"),x9r=o(" \u2014 "),aZ=a("a"),$9r=o("TFCamembertForCausalLM"),k9r=o(" (CamemBERT model)"),S9r=l(),H3=a("li"),u5e=a("strong"),R9r=o("ctrl"),P9r=o(" \u2014 "),nZ=a("a"),B9r=o("TFCTRLLMHeadModel"),I9r=o(" (CTRL model)"),N9r=l(),J3=a("li"),p5e=a("strong"),q9r=o("gpt2"),j9r=o(" \u2014 "),sZ=a("a"),D9r=o("TFGPT2LMHeadModel"),G9r=o(" (OpenAI GPT-2 model)"),O9r=l(),Y3=a("li"),_5e=a("strong"),V9r=o("gptj"),X9r=o(" \u2014 "),lZ=a("a"),z9r=o("TFGPTJForCausalLM"),W9r=o(" (GPT-J model)"),Q9r=l(),K3=a("li"),b5e=a("strong"),U9r=o("openai-gpt"),H9r=o(" \u2014 "),iZ=a("a"),J9r=o("TFOpenAIGPTLMHeadModel"),Y9r=o(" (OpenAI GPT model)"),K9r=l(),Z3=a("li"),v5e=a("strong"),Z9r=o("opt"),exr=o(" \u2014 "),dZ=a("a"),oxr=o("TFOPTForCausalLM"),rxr=o(" (OPT model)"),txr=l(),e5=a("li"),F5e=a("strong"),axr=o("rembert"),nxr=o(" \u2014 "),cZ=a("a"),sxr=o("TFRemBertForCausalLM"),lxr=o(" (RemBERT model)"),ixr=l(),o5=a("li"),T5e=a("strong"),dxr=o("roberta"),cxr=o(" \u2014 "),mZ=a("a"),mxr=o("TFRobertaForCausalLM"),fxr=o(" (RoBERTa model)"),gxr=l(),r5=a("li"),M5e=a("strong"),hxr=o("roformer"),uxr=o(" \u2014 "),fZ=a("a"),pxr=o("TFRoFormerForCausalLM"),_xr=o(" (RoFormer model)"),bxr=l(),t5=a("li"),E5e=a("strong"),vxr=o("transfo-xl"),Fxr=o(" \u2014 "),gZ=a("a"),Txr=o("TFTransfoXLLMHeadModel"),Mxr=o(" (Transformer-XL model)"),Exr=l(),a5=a("li"),C5e=a("strong"),Cxr=o("xglm"),wxr=o(" \u2014 "),hZ=a("a"),Axr=o("TFXGLMForCausalLM"),Lxr=o(" (XGLM model)"),yxr=l(),n5=a("li"),w5e=a("strong"),xxr=o("xlm"),$xr=o(" \u2014 "),uZ=a("a"),kxr=o("TFXLMWithLMHeadModel"),Sxr=o(" (XLM model)"),Rxr=l(),s5=a("li"),A5e=a("strong"),Pxr=o("xlnet"),Bxr=o(" \u2014 "),pZ=a("a"),Ixr=o("TFXLNetLMHeadModel"),Nxr=o(" (XLNet model)"),qxr=l(),F(l5.$$.fragment),JHe=l(),Sc=a("h2"),i5=a("a"),L5e=a("span"),F(S$.$$.fragment),jxr=l(),y5e=a("span"),Dxr=o("TFAutoModelForImageClassification"),YHe=l(),lr=a("div"),F(R$.$$.fragment),Gxr=l(),Rc=a("p"),Oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Z=a("a"),Vxr=o("from_pretrained()"),Xxr=o(" class method or the "),bZ=a("a"),zxr=o("from_config()"),Wxr=o(` class
method.`),Qxr=l(),P$=a("p"),Uxr=o("This class cannot be instantiated directly using "),x5e=a("code"),Hxr=o("__init__()"),Jxr=o(" (throws an error)."),Yxr=l(),Gt=a("div"),F(B$.$$.fragment),Kxr=l(),$5e=a("p"),Zxr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),e$r=l(),Pc=a("p"),o$r=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),r$r=o("not"),t$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),a$r=o("from_pretrained()"),n$r=o(" to load the model weights."),s$r=l(),F(d5.$$.fragment),l$r=l(),Ir=a("div"),F(I$.$$.fragment),i$r=l(),S5e=a("p"),d$r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),c$r=l(),vn=a("p"),m$r=o("The model class to instantiate is selected based on the "),R5e=a("code"),f$r=o("model_type"),g$r=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),h$r=o("pretrained_model_name_or_path"),u$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),p$r=o("pretrained_model_name_or_path"),_$r=o(":"),b$r=l(),Be=a("ul"),c5=a("li"),I5e=a("strong"),v$r=o("convnext"),F$r=o(" \u2014 "),FZ=a("a"),T$r=o("TFConvNextForImageClassification"),M$r=o(" (ConvNeXT model)"),E$r=l(),m5=a("li"),N5e=a("strong"),C$r=o("data2vec-vision"),w$r=o(" \u2014 "),TZ=a("a"),A$r=o("TFData2VecVisionForImageClassification"),L$r=o(" (Data2VecVision model)"),y$r=l(),dl=a("li"),q5e=a("strong"),x$r=o("deit"),$$r=o(" \u2014 "),MZ=a("a"),k$r=o("TFDeiTForImageClassification"),S$r=o(" or "),EZ=a("a"),R$r=o("TFDeiTForImageClassificationWithTeacher"),P$r=o(" (DeiT model)"),B$r=l(),f5=a("li"),j5e=a("strong"),I$r=o("mobilevit"),N$r=o(" \u2014 "),CZ=a("a"),q$r=o("TFMobileViTForImageClassification"),j$r=o(" (MobileViT model)"),D$r=l(),g5=a("li"),D5e=a("strong"),G$r=o("regnet"),O$r=o(" \u2014 "),wZ=a("a"),V$r=o("TFRegNetForImageClassification"),X$r=o(" (RegNet model)"),z$r=l(),h5=a("li"),G5e=a("strong"),W$r=o("resnet"),Q$r=o(" \u2014 "),AZ=a("a"),U$r=o("TFResNetForImageClassification"),H$r=o(" (ResNet model)"),J$r=l(),u5=a("li"),O5e=a("strong"),Y$r=o("segformer"),K$r=o(" \u2014 "),LZ=a("a"),Z$r=o("TFSegformerForImageClassification"),ekr=o(" (SegFormer model)"),okr=l(),p5=a("li"),V5e=a("strong"),rkr=o("swin"),tkr=o(" \u2014 "),yZ=a("a"),akr=o("TFSwinForImageClassification"),nkr=o(" (Swin Transformer model)"),skr=l(),_5=a("li"),X5e=a("strong"),lkr=o("vit"),ikr=o(" \u2014 "),xZ=a("a"),dkr=o("TFViTForImageClassification"),ckr=o(" (ViT model)"),mkr=l(),F(b5.$$.fragment),KHe=l(),Bc=a("h2"),v5=a("a"),z5e=a("span"),F(N$.$$.fragment),fkr=l(),W5e=a("span"),gkr=o("TFAutoModelForSemanticSegmentation"),ZHe=l(),ir=a("div"),F(q$.$$.fragment),hkr=l(),Ic=a("p"),ukr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$Z=a("a"),pkr=o("from_pretrained()"),_kr=o(" class method or the "),kZ=a("a"),bkr=o("from_config()"),vkr=o(` class
method.`),Fkr=l(),j$=a("p"),Tkr=o("This class cannot be instantiated directly using "),Q5e=a("code"),Mkr=o("__init__()"),Ekr=o(" (throws an error)."),Ckr=l(),Ot=a("div"),F(D$.$$.fragment),wkr=l(),U5e=a("p"),Akr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Lkr=l(),Nc=a("p"),ykr=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),xkr=o("not"),$kr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),kkr=o("from_pretrained()"),Skr=o(" to load the model weights."),Rkr=l(),F(F5.$$.fragment),Pkr=l(),Nr=a("div"),F(G$.$$.fragment),Bkr=l(),J5e=a("p"),Ikr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Nkr=l(),Fn=a("p"),qkr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),jkr=o("model_type"),Dkr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),Gkr=o("pretrained_model_name_or_path"),Okr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),Vkr=o("pretrained_model_name_or_path"),Xkr=o(":"),zkr=l(),qc=a("ul"),T5=a("li"),e0e=a("strong"),Wkr=o("data2vec-vision"),Qkr=o(" \u2014 "),RZ=a("a"),Ukr=o("TFData2VecVisionForSemanticSegmentation"),Hkr=o(" (Data2VecVision model)"),Jkr=l(),M5=a("li"),o0e=a("strong"),Ykr=o("mobilevit"),Kkr=o(" \u2014 "),PZ=a("a"),Zkr=o("TFMobileViTForSemanticSegmentation"),eSr=o(" (MobileViT model)"),oSr=l(),E5=a("li"),r0e=a("strong"),rSr=o("segformer"),tSr=o(" \u2014 "),BZ=a("a"),aSr=o("TFSegformerForSemanticSegmentation"),nSr=o(" (SegFormer model)"),sSr=l(),F(C5.$$.fragment),eJe=l(),jc=a("h2"),w5=a("a"),t0e=a("span"),F(O$.$$.fragment),lSr=l(),a0e=a("span"),iSr=o("TFAutoModelForMaskedLM"),oJe=l(),dr=a("div"),F(V$.$$.fragment),dSr=l(),Dc=a("p"),cSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IZ=a("a"),mSr=o("from_pretrained()"),fSr=o(" class method or the "),NZ=a("a"),gSr=o("from_config()"),hSr=o(` class
method.`),uSr=l(),X$=a("p"),pSr=o("This class cannot be instantiated directly using "),n0e=a("code"),_Sr=o("__init__()"),bSr=o(" (throws an error)."),vSr=l(),Vt=a("div"),F(z$.$$.fragment),FSr=l(),s0e=a("p"),TSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MSr=l(),Gc=a("p"),ESr=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),CSr=o("not"),wSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),ASr=o("from_pretrained()"),LSr=o(" to load the model weights."),ySr=l(),F(A5.$$.fragment),xSr=l(),qr=a("div"),F(W$.$$.fragment),$Sr=l(),i0e=a("p"),kSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SSr=l(),Tn=a("p"),RSr=o("The model class to instantiate is selected based on the "),d0e=a("code"),PSr=o("model_type"),BSr=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),ISr=o("pretrained_model_name_or_path"),NSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),qSr=o("pretrained_model_name_or_path"),jSr=o(":"),DSr=l(),fe=a("ul"),L5=a("li"),f0e=a("strong"),GSr=o("albert"),OSr=o(" \u2014 "),jZ=a("a"),VSr=o("TFAlbertForMaskedLM"),XSr=o(" (ALBERT model)"),zSr=l(),y5=a("li"),g0e=a("strong"),WSr=o("bert"),QSr=o(" \u2014 "),DZ=a("a"),USr=o("TFBertForMaskedLM"),HSr=o(" (BERT model)"),JSr=l(),x5=a("li"),h0e=a("strong"),YSr=o("camembert"),KSr=o(" \u2014 "),GZ=a("a"),ZSr=o("TFCamembertForMaskedLM"),eRr=o(" (CamemBERT model)"),oRr=l(),$5=a("li"),u0e=a("strong"),rRr=o("convbert"),tRr=o(" \u2014 "),OZ=a("a"),aRr=o("TFConvBertForMaskedLM"),nRr=o(" (ConvBERT model)"),sRr=l(),k5=a("li"),p0e=a("strong"),lRr=o("deberta"),iRr=o(" \u2014 "),VZ=a("a"),dRr=o("TFDebertaForMaskedLM"),cRr=o(" (DeBERTa model)"),mRr=l(),S5=a("li"),_0e=a("strong"),fRr=o("deberta-v2"),gRr=o(" \u2014 "),XZ=a("a"),hRr=o("TFDebertaV2ForMaskedLM"),uRr=o(" (DeBERTa-v2 model)"),pRr=l(),R5=a("li"),b0e=a("strong"),_Rr=o("distilbert"),bRr=o(" \u2014 "),zZ=a("a"),vRr=o("TFDistilBertForMaskedLM"),FRr=o(" (DistilBERT model)"),TRr=l(),P5=a("li"),v0e=a("strong"),MRr=o("electra"),ERr=o(" \u2014 "),WZ=a("a"),CRr=o("TFElectraForMaskedLM"),wRr=o(" (ELECTRA model)"),ARr=l(),B5=a("li"),F0e=a("strong"),LRr=o("flaubert"),yRr=o(" \u2014 "),QZ=a("a"),xRr=o("TFFlaubertWithLMHeadModel"),$Rr=o(" (FlauBERT model)"),kRr=l(),I5=a("li"),T0e=a("strong"),SRr=o("funnel"),RRr=o(" \u2014 "),UZ=a("a"),PRr=o("TFFunnelForMaskedLM"),BRr=o(" (Funnel Transformer model)"),IRr=l(),N5=a("li"),M0e=a("strong"),NRr=o("layoutlm"),qRr=o(" \u2014 "),HZ=a("a"),jRr=o("TFLayoutLMForMaskedLM"),DRr=o(" (LayoutLM model)"),GRr=l(),q5=a("li"),E0e=a("strong"),ORr=o("longformer"),VRr=o(" \u2014 "),JZ=a("a"),XRr=o("TFLongformerForMaskedLM"),zRr=o(" (Longformer model)"),WRr=l(),j5=a("li"),C0e=a("strong"),QRr=o("mobilebert"),URr=o(" \u2014 "),YZ=a("a"),HRr=o("TFMobileBertForMaskedLM"),JRr=o(" (MobileBERT model)"),YRr=l(),D5=a("li"),w0e=a("strong"),KRr=o("mpnet"),ZRr=o(" \u2014 "),KZ=a("a"),ePr=o("TFMPNetForMaskedLM"),oPr=o(" (MPNet model)"),rPr=l(),G5=a("li"),A0e=a("strong"),tPr=o("rembert"),aPr=o(" \u2014 "),ZZ=a("a"),nPr=o("TFRemBertForMaskedLM"),sPr=o(" (RemBERT model)"),lPr=l(),O5=a("li"),L0e=a("strong"),iPr=o("roberta"),dPr=o(" \u2014 "),eee=a("a"),cPr=o("TFRobertaForMaskedLM"),mPr=o(" (RoBERTa model)"),fPr=l(),V5=a("li"),y0e=a("strong"),gPr=o("roformer"),hPr=o(" \u2014 "),oee=a("a"),uPr=o("TFRoFormerForMaskedLM"),pPr=o(" (RoFormer model)"),_Pr=l(),X5=a("li"),x0e=a("strong"),bPr=o("tapas"),vPr=o(" \u2014 "),ree=a("a"),FPr=o("TFTapasForMaskedLM"),TPr=o(" (TAPAS model)"),MPr=l(),z5=a("li"),$0e=a("strong"),EPr=o("xlm"),CPr=o(" \u2014 "),tee=a("a"),wPr=o("TFXLMWithLMHeadModel"),APr=o(" (XLM model)"),LPr=l(),W5=a("li"),k0e=a("strong"),yPr=o("xlm-roberta"),xPr=o(" \u2014 "),aee=a("a"),$Pr=o("TFXLMRobertaForMaskedLM"),kPr=o(" (XLM-RoBERTa model)"),SPr=l(),F(Q5.$$.fragment),rJe=l(),Oc=a("h2"),U5=a("a"),S0e=a("span"),F(Q$.$$.fragment),RPr=l(),R0e=a("span"),PPr=o("TFAutoModelForSeq2SeqLM"),tJe=l(),cr=a("div"),F(U$.$$.fragment),BPr=l(),Vc=a("p"),IPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nee=a("a"),NPr=o("from_pretrained()"),qPr=o(" class method or the "),see=a("a"),jPr=o("from_config()"),DPr=o(` class
method.`),GPr=l(),H$=a("p"),OPr=o("This class cannot be instantiated directly using "),P0e=a("code"),VPr=o("__init__()"),XPr=o(" (throws an error)."),zPr=l(),Xt=a("div"),F(J$.$$.fragment),WPr=l(),B0e=a("p"),QPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UPr=l(),Xc=a("p"),HPr=o(`Note:
Loading a model from its configuration file does `),I0e=a("strong"),JPr=o("not"),YPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=a("a"),KPr=o("from_pretrained()"),ZPr=o(" to load the model weights."),eBr=l(),F(H5.$$.fragment),oBr=l(),jr=a("div"),F(Y$.$$.fragment),rBr=l(),N0e=a("p"),tBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aBr=l(),Mn=a("p"),nBr=o("The model class to instantiate is selected based on the "),q0e=a("code"),sBr=o("model_type"),lBr=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=a("code"),cBr=o("pretrained_model_name_or_path"),mBr=o(":"),fBr=l(),ye=a("ul"),J5=a("li"),G0e=a("strong"),gBr=o("bart"),hBr=o(" \u2014 "),iee=a("a"),uBr=o("TFBartForConditionalGeneration"),pBr=o(" (BART model)"),_Br=l(),Y5=a("li"),O0e=a("strong"),bBr=o("blenderbot"),vBr=o(" \u2014 "),dee=a("a"),FBr=o("TFBlenderbotForConditionalGeneration"),TBr=o(" (Blenderbot model)"),MBr=l(),K5=a("li"),V0e=a("strong"),EBr=o("blenderbot-small"),CBr=o(" \u2014 "),cee=a("a"),wBr=o("TFBlenderbotSmallForConditionalGeneration"),ABr=o(" (BlenderbotSmall model)"),LBr=l(),Z5=a("li"),X0e=a("strong"),yBr=o("encoder-decoder"),xBr=o(" \u2014 "),mee=a("a"),$Br=o("TFEncoderDecoderModel"),kBr=o(" (Encoder decoder model)"),SBr=l(),e0=a("li"),z0e=a("strong"),RBr=o("led"),PBr=o(" \u2014 "),fee=a("a"),BBr=o("TFLEDForConditionalGeneration"),IBr=o(" (LED model)"),NBr=l(),o0=a("li"),W0e=a("strong"),qBr=o("marian"),jBr=o(" \u2014 "),gee=a("a"),DBr=o("TFMarianMTModel"),GBr=o(" (Marian model)"),OBr=l(),r0=a("li"),Q0e=a("strong"),VBr=o("mbart"),XBr=o(" \u2014 "),hee=a("a"),zBr=o("TFMBartForConditionalGeneration"),WBr=o(" (mBART model)"),QBr=l(),t0=a("li"),U0e=a("strong"),UBr=o("mt5"),HBr=o(" \u2014 "),uee=a("a"),JBr=o("TFMT5ForConditionalGeneration"),YBr=o(" (MT5 model)"),KBr=l(),a0=a("li"),H0e=a("strong"),ZBr=o("pegasus"),eIr=o(" \u2014 "),pee=a("a"),oIr=o("TFPegasusForConditionalGeneration"),rIr=o(" (Pegasus model)"),tIr=l(),n0=a("li"),J0e=a("strong"),aIr=o("t5"),nIr=o(" \u2014 "),_ee=a("a"),sIr=o("TFT5ForConditionalGeneration"),lIr=o(" (T5 model)"),iIr=l(),F(s0.$$.fragment),aJe=l(),zc=a("h2"),l0=a("a"),Y0e=a("span"),F(K$.$$.fragment),dIr=l(),K0e=a("span"),cIr=o("TFAutoModelForSequenceClassification"),nJe=l(),mr=a("div"),F(Z$.$$.fragment),mIr=l(),Wc=a("p"),fIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bee=a("a"),gIr=o("from_pretrained()"),hIr=o(" class method or the "),vee=a("a"),uIr=o("from_config()"),pIr=o(` class
method.`),_Ir=l(),ek=a("p"),bIr=o("This class cannot be instantiated directly using "),Z0e=a("code"),vIr=o("__init__()"),FIr=o(" (throws an error)."),TIr=l(),zt=a("div"),F(ok.$$.fragment),MIr=l(),ewe=a("p"),EIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CIr=l(),Qc=a("p"),wIr=o(`Note:
Loading a model from its configuration file does `),owe=a("strong"),AIr=o("not"),LIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=a("a"),yIr=o("from_pretrained()"),xIr=o(" to load the model weights."),$Ir=l(),F(i0.$$.fragment),kIr=l(),Dr=a("div"),F(rk.$$.fragment),SIr=l(),rwe=a("p"),RIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PIr=l(),En=a("p"),BIr=o("The model class to instantiate is selected based on the "),twe=a("code"),IIr=o("model_type"),NIr=o(` property of the config object (either
passed as an argument or loaded from `),awe=a("code"),qIr=o("pretrained_model_name_or_path"),jIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=a("code"),DIr=o("pretrained_model_name_or_path"),GIr=o(":"),OIr=l(),re=a("ul"),d0=a("li"),swe=a("strong"),VIr=o("albert"),XIr=o(" \u2014 "),Tee=a("a"),zIr=o("TFAlbertForSequenceClassification"),WIr=o(" (ALBERT model)"),QIr=l(),c0=a("li"),lwe=a("strong"),UIr=o("bert"),HIr=o(" \u2014 "),Mee=a("a"),JIr=o("TFBertForSequenceClassification"),YIr=o(" (BERT model)"),KIr=l(),m0=a("li"),iwe=a("strong"),ZIr=o("camembert"),eNr=o(" \u2014 "),Eee=a("a"),oNr=o("TFCamembertForSequenceClassification"),rNr=o(" (CamemBERT model)"),tNr=l(),f0=a("li"),dwe=a("strong"),aNr=o("convbert"),nNr=o(" \u2014 "),Cee=a("a"),sNr=o("TFConvBertForSequenceClassification"),lNr=o(" (ConvBERT model)"),iNr=l(),g0=a("li"),cwe=a("strong"),dNr=o("ctrl"),cNr=o(" \u2014 "),wee=a("a"),mNr=o("TFCTRLForSequenceClassification"),fNr=o(" (CTRL model)"),gNr=l(),h0=a("li"),mwe=a("strong"),hNr=o("deberta"),uNr=o(" \u2014 "),Aee=a("a"),pNr=o("TFDebertaForSequenceClassification"),_Nr=o(" (DeBERTa model)"),bNr=l(),u0=a("li"),fwe=a("strong"),vNr=o("deberta-v2"),FNr=o(" \u2014 "),Lee=a("a"),TNr=o("TFDebertaV2ForSequenceClassification"),MNr=o(" (DeBERTa-v2 model)"),ENr=l(),p0=a("li"),gwe=a("strong"),CNr=o("distilbert"),wNr=o(" \u2014 "),yee=a("a"),ANr=o("TFDistilBertForSequenceClassification"),LNr=o(" (DistilBERT model)"),yNr=l(),_0=a("li"),hwe=a("strong"),xNr=o("electra"),$Nr=o(" \u2014 "),xee=a("a"),kNr=o("TFElectraForSequenceClassification"),SNr=o(" (ELECTRA model)"),RNr=l(),b0=a("li"),uwe=a("strong"),PNr=o("flaubert"),BNr=o(" \u2014 "),$ee=a("a"),INr=o("TFFlaubertForSequenceClassification"),NNr=o(" (FlauBERT model)"),qNr=l(),v0=a("li"),pwe=a("strong"),jNr=o("funnel"),DNr=o(" \u2014 "),kee=a("a"),GNr=o("TFFunnelForSequenceClassification"),ONr=o(" (Funnel Transformer model)"),VNr=l(),F0=a("li"),_we=a("strong"),XNr=o("gpt2"),zNr=o(" \u2014 "),See=a("a"),WNr=o("TFGPT2ForSequenceClassification"),QNr=o(" (OpenAI GPT-2 model)"),UNr=l(),T0=a("li"),bwe=a("strong"),HNr=o("gptj"),JNr=o(" \u2014 "),Ree=a("a"),YNr=o("TFGPTJForSequenceClassification"),KNr=o(" (GPT-J model)"),ZNr=l(),M0=a("li"),vwe=a("strong"),eqr=o("layoutlm"),oqr=o(" \u2014 "),Pee=a("a"),rqr=o("TFLayoutLMForSequenceClassification"),tqr=o(" (LayoutLM model)"),aqr=l(),E0=a("li"),Fwe=a("strong"),nqr=o("layoutlmv3"),sqr=o(" \u2014 "),Bee=a("a"),lqr=o("TFLayoutLMv3ForSequenceClassification"),iqr=o(" (LayoutLMv3 model)"),dqr=l(),C0=a("li"),Twe=a("strong"),cqr=o("longformer"),mqr=o(" \u2014 "),Iee=a("a"),fqr=o("TFLongformerForSequenceClassification"),gqr=o(" (Longformer model)"),hqr=l(),w0=a("li"),Mwe=a("strong"),uqr=o("mobilebert"),pqr=o(" \u2014 "),Nee=a("a"),_qr=o("TFMobileBertForSequenceClassification"),bqr=o(" (MobileBERT model)"),vqr=l(),A0=a("li"),Ewe=a("strong"),Fqr=o("mpnet"),Tqr=o(" \u2014 "),qee=a("a"),Mqr=o("TFMPNetForSequenceClassification"),Eqr=o(" (MPNet model)"),Cqr=l(),L0=a("li"),Cwe=a("strong"),wqr=o("openai-gpt"),Aqr=o(" \u2014 "),jee=a("a"),Lqr=o("TFOpenAIGPTForSequenceClassification"),yqr=o(" (OpenAI GPT model)"),xqr=l(),y0=a("li"),wwe=a("strong"),$qr=o("rembert"),kqr=o(" \u2014 "),Dee=a("a"),Sqr=o("TFRemBertForSequenceClassification"),Rqr=o(" (RemBERT model)"),Pqr=l(),x0=a("li"),Awe=a("strong"),Bqr=o("roberta"),Iqr=o(" \u2014 "),Gee=a("a"),Nqr=o("TFRobertaForSequenceClassification"),qqr=o(" (RoBERTa model)"),jqr=l(),$0=a("li"),Lwe=a("strong"),Dqr=o("roformer"),Gqr=o(" \u2014 "),Oee=a("a"),Oqr=o("TFRoFormerForSequenceClassification"),Vqr=o(" (RoFormer model)"),Xqr=l(),k0=a("li"),ywe=a("strong"),zqr=o("tapas"),Wqr=o(" \u2014 "),Vee=a("a"),Qqr=o("TFTapasForSequenceClassification"),Uqr=o(" (TAPAS model)"),Hqr=l(),S0=a("li"),xwe=a("strong"),Jqr=o("transfo-xl"),Yqr=o(" \u2014 "),Xee=a("a"),Kqr=o("TFTransfoXLForSequenceClassification"),Zqr=o(" (Transformer-XL model)"),ejr=l(),R0=a("li"),$we=a("strong"),ojr=o("xlm"),rjr=o(" \u2014 "),zee=a("a"),tjr=o("TFXLMForSequenceClassification"),ajr=o(" (XLM model)"),njr=l(),P0=a("li"),kwe=a("strong"),sjr=o("xlm-roberta"),ljr=o(" \u2014 "),Wee=a("a"),ijr=o("TFXLMRobertaForSequenceClassification"),djr=o(" (XLM-RoBERTa model)"),cjr=l(),B0=a("li"),Swe=a("strong"),mjr=o("xlnet"),fjr=o(" \u2014 "),Qee=a("a"),gjr=o("TFXLNetForSequenceClassification"),hjr=o(" (XLNet model)"),ujr=l(),F(I0.$$.fragment),sJe=l(),Uc=a("h2"),N0=a("a"),Rwe=a("span"),F(tk.$$.fragment),pjr=l(),Pwe=a("span"),_jr=o("TFAutoModelForMultipleChoice"),lJe=l(),fr=a("div"),F(ak.$$.fragment),bjr=l(),Hc=a("p"),vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Uee=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" class method or the "),Hee=a("a"),Mjr=o("from_config()"),Ejr=o(` class
method.`),Cjr=l(),nk=a("p"),wjr=o("This class cannot be instantiated directly using "),Bwe=a("code"),Ajr=o("__init__()"),Ljr=o(" (throws an error)."),yjr=l(),Wt=a("div"),F(sk.$$.fragment),xjr=l(),Iwe=a("p"),$jr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kjr=l(),Jc=a("p"),Sjr=o(`Note:
Loading a model from its configuration file does `),Nwe=a("strong"),Rjr=o("not"),Pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" to load the model weights."),Njr=l(),F(q0.$$.fragment),qjr=l(),Gr=a("div"),F(lk.$$.fragment),jjr=l(),qwe=a("p"),Djr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Gjr=l(),Cn=a("p"),Ojr=o("The model class to instantiate is selected based on the "),jwe=a("code"),Vjr=o("model_type"),Xjr=o(` property of the config object (either
passed as an argument or loaded from `),Dwe=a("code"),zjr=o("pretrained_model_name_or_path"),Wjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gwe=a("code"),Qjr=o("pretrained_model_name_or_path"),Ujr=o(":"),Hjr=l(),ve=a("ul"),j0=a("li"),Owe=a("strong"),Jjr=o("albert"),Yjr=o(" \u2014 "),Yee=a("a"),Kjr=o("TFAlbertForMultipleChoice"),Zjr=o(" (ALBERT model)"),eDr=l(),D0=a("li"),Vwe=a("strong"),oDr=o("bert"),rDr=o(" \u2014 "),Kee=a("a"),tDr=o("TFBertForMultipleChoice"),aDr=o(" (BERT model)"),nDr=l(),G0=a("li"),Xwe=a("strong"),sDr=o("camembert"),lDr=o(" \u2014 "),Zee=a("a"),iDr=o("TFCamembertForMultipleChoice"),dDr=o(" (CamemBERT model)"),cDr=l(),O0=a("li"),zwe=a("strong"),mDr=o("convbert"),fDr=o(" \u2014 "),eoe=a("a"),gDr=o("TFConvBertForMultipleChoice"),hDr=o(" (ConvBERT model)"),uDr=l(),V0=a("li"),Wwe=a("strong"),pDr=o("distilbert"),_Dr=o(" \u2014 "),ooe=a("a"),bDr=o("TFDistilBertForMultipleChoice"),vDr=o(" (DistilBERT model)"),FDr=l(),X0=a("li"),Qwe=a("strong"),TDr=o("electra"),MDr=o(" \u2014 "),roe=a("a"),EDr=o("TFElectraForMultipleChoice"),CDr=o(" (ELECTRA model)"),wDr=l(),z0=a("li"),Uwe=a("strong"),ADr=o("flaubert"),LDr=o(" \u2014 "),toe=a("a"),yDr=o("TFFlaubertForMultipleChoice"),xDr=o(" (FlauBERT model)"),$Dr=l(),W0=a("li"),Hwe=a("strong"),kDr=o("funnel"),SDr=o(" \u2014 "),aoe=a("a"),RDr=o("TFFunnelForMultipleChoice"),PDr=o(" (Funnel Transformer model)"),BDr=l(),Q0=a("li"),Jwe=a("strong"),IDr=o("longformer"),NDr=o(" \u2014 "),noe=a("a"),qDr=o("TFLongformerForMultipleChoice"),jDr=o(" (Longformer model)"),DDr=l(),U0=a("li"),Ywe=a("strong"),GDr=o("mobilebert"),ODr=o(" \u2014 "),soe=a("a"),VDr=o("TFMobileBertForMultipleChoice"),XDr=o(" (MobileBERT model)"),zDr=l(),H0=a("li"),Kwe=a("strong"),WDr=o("mpnet"),QDr=o(" \u2014 "),loe=a("a"),UDr=o("TFMPNetForMultipleChoice"),HDr=o(" (MPNet model)"),JDr=l(),J0=a("li"),Zwe=a("strong"),YDr=o("rembert"),KDr=o(" \u2014 "),ioe=a("a"),ZDr=o("TFRemBertForMultipleChoice"),eGr=o(" (RemBERT model)"),oGr=l(),Y0=a("li"),e6e=a("strong"),rGr=o("roberta"),tGr=o(" \u2014 "),doe=a("a"),aGr=o("TFRobertaForMultipleChoice"),nGr=o(" (RoBERTa model)"),sGr=l(),K0=a("li"),o6e=a("strong"),lGr=o("roformer"),iGr=o(" \u2014 "),coe=a("a"),dGr=o("TFRoFormerForMultipleChoice"),cGr=o(" (RoFormer model)"),mGr=l(),Z0=a("li"),r6e=a("strong"),fGr=o("xlm"),gGr=o(" \u2014 "),moe=a("a"),hGr=o("TFXLMForMultipleChoice"),uGr=o(" (XLM model)"),pGr=l(),ew=a("li"),t6e=a("strong"),_Gr=o("xlm-roberta"),bGr=o(" \u2014 "),foe=a("a"),vGr=o("TFXLMRobertaForMultipleChoice"),FGr=o(" (XLM-RoBERTa model)"),TGr=l(),ow=a("li"),a6e=a("strong"),MGr=o("xlnet"),EGr=o(" \u2014 "),goe=a("a"),CGr=o("TFXLNetForMultipleChoice"),wGr=o(" (XLNet model)"),AGr=l(),F(rw.$$.fragment),iJe=l(),Yc=a("h2"),tw=a("a"),n6e=a("span"),F(ik.$$.fragment),LGr=l(),s6e=a("span"),yGr=o("TFAutoModelForNextSentencePrediction"),dJe=l(),gr=a("div"),F(dk.$$.fragment),xGr=l(),Kc=a("p"),$Gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hoe=a("a"),kGr=o("from_pretrained()"),SGr=o(" class method or the "),uoe=a("a"),RGr=o("from_config()"),PGr=o(` class
method.`),BGr=l(),ck=a("p"),IGr=o("This class cannot be instantiated directly using "),l6e=a("code"),NGr=o("__init__()"),qGr=o(" (throws an error)."),jGr=l(),Qt=a("div"),F(mk.$$.fragment),DGr=l(),i6e=a("p"),GGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OGr=l(),Zc=a("p"),VGr=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),XGr=o("not"),zGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=a("a"),WGr=o("from_pretrained()"),QGr=o(" to load the model weights."),UGr=l(),F(aw.$$.fragment),HGr=l(),Or=a("div"),F(fk.$$.fragment),JGr=l(),c6e=a("p"),YGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KGr=l(),wn=a("p"),ZGr=o("The model class to instantiate is selected based on the "),m6e=a("code"),eOr=o("model_type"),oOr=o(` property of the config object (either
passed as an argument or loaded from `),f6e=a("code"),rOr=o("pretrained_model_name_or_path"),tOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),aOr=o("pretrained_model_name_or_path"),nOr=o(":"),sOr=l(),gk=a("ul"),nw=a("li"),h6e=a("strong"),lOr=o("bert"),iOr=o(" \u2014 "),_oe=a("a"),dOr=o("TFBertForNextSentencePrediction"),cOr=o(" (BERT model)"),mOr=l(),sw=a("li"),u6e=a("strong"),fOr=o("mobilebert"),gOr=o(" \u2014 "),boe=a("a"),hOr=o("TFMobileBertForNextSentencePrediction"),uOr=o(" (MobileBERT model)"),pOr=l(),F(lw.$$.fragment),cJe=l(),em=a("h2"),iw=a("a"),p6e=a("span"),F(hk.$$.fragment),_Or=l(),_6e=a("span"),bOr=o("TFAutoModelForTableQuestionAnswering"),mJe=l(),hr=a("div"),F(uk.$$.fragment),vOr=l(),om=a("p"),FOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),voe=a("a"),TOr=o("from_pretrained()"),MOr=o(" class method or the "),Foe=a("a"),EOr=o("from_config()"),COr=o(` class
method.`),wOr=l(),pk=a("p"),AOr=o("This class cannot be instantiated directly using "),b6e=a("code"),LOr=o("__init__()"),yOr=o(" (throws an error)."),xOr=l(),Ut=a("div"),F(_k.$$.fragment),$Or=l(),v6e=a("p"),kOr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SOr=l(),rm=a("p"),ROr=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),POr=o("not"),BOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),IOr=o("from_pretrained()"),NOr=o(" to load the model weights."),qOr=l(),F(dw.$$.fragment),jOr=l(),Vr=a("div"),F(bk.$$.fragment),DOr=l(),T6e=a("p"),GOr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),OOr=l(),An=a("p"),VOr=o("The model class to instantiate is selected based on the "),M6e=a("code"),XOr=o("model_type"),zOr=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),WOr=o("pretrained_model_name_or_path"),QOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),UOr=o("pretrained_model_name_or_path"),HOr=o(":"),JOr=l(),w6e=a("ul"),cw=a("li"),A6e=a("strong"),YOr=o("tapas"),KOr=o(" \u2014 "),Moe=a("a"),ZOr=o("TFTapasForQuestionAnswering"),eVr=o(" (TAPAS model)"),oVr=l(),F(mw.$$.fragment),fJe=l(),tm=a("h2"),fw=a("a"),L6e=a("span"),F(vk.$$.fragment),rVr=l(),y6e=a("span"),tVr=o("TFAutoModelForTokenClassification"),gJe=l(),ur=a("div"),F(Fk.$$.fragment),aVr=l(),am=a("p"),nVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Eoe=a("a"),sVr=o("from_pretrained()"),lVr=o(" class method or the "),Coe=a("a"),iVr=o("from_config()"),dVr=o(` class
method.`),cVr=l(),Tk=a("p"),mVr=o("This class cannot be instantiated directly using "),x6e=a("code"),fVr=o("__init__()"),gVr=o(" (throws an error)."),hVr=l(),Ht=a("div"),F(Mk.$$.fragment),uVr=l(),$6e=a("p"),pVr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Vr=l(),nm=a("p"),bVr=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),vVr=o("not"),FVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=a("a"),TVr=o("from_pretrained()"),MVr=o(" to load the model weights."),EVr=l(),F(gw.$$.fragment),CVr=l(),Xr=a("div"),F(Ek.$$.fragment),wVr=l(),S6e=a("p"),AVr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LVr=l(),Ln=a("p"),yVr=o("The model class to instantiate is selected based on the "),R6e=a("code"),xVr=o("model_type"),$Vr=o(` property of the config object (either
passed as an argument or loaded from `),P6e=a("code"),kVr=o("pretrained_model_name_or_path"),SVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=a("code"),RVr=o("pretrained_model_name_or_path"),PVr=o(":"),BVr=l(),ie=a("ul"),hw=a("li"),I6e=a("strong"),IVr=o("albert"),NVr=o(" \u2014 "),Aoe=a("a"),qVr=o("TFAlbertForTokenClassification"),jVr=o(" (ALBERT model)"),DVr=l(),uw=a("li"),N6e=a("strong"),GVr=o("bert"),OVr=o(" \u2014 "),Loe=a("a"),VVr=o("TFBertForTokenClassification"),XVr=o(" (BERT model)"),zVr=l(),pw=a("li"),q6e=a("strong"),WVr=o("camembert"),QVr=o(" \u2014 "),yoe=a("a"),UVr=o("TFCamembertForTokenClassification"),HVr=o(" (CamemBERT model)"),JVr=l(),_w=a("li"),j6e=a("strong"),YVr=o("convbert"),KVr=o(" \u2014 "),xoe=a("a"),ZVr=o("TFConvBertForTokenClassification"),eXr=o(" (ConvBERT model)"),oXr=l(),bw=a("li"),D6e=a("strong"),rXr=o("deberta"),tXr=o(" \u2014 "),$oe=a("a"),aXr=o("TFDebertaForTokenClassification"),nXr=o(" (DeBERTa model)"),sXr=l(),vw=a("li"),G6e=a("strong"),lXr=o("deberta-v2"),iXr=o(" \u2014 "),koe=a("a"),dXr=o("TFDebertaV2ForTokenClassification"),cXr=o(" (DeBERTa-v2 model)"),mXr=l(),Fw=a("li"),O6e=a("strong"),fXr=o("distilbert"),gXr=o(" \u2014 "),Soe=a("a"),hXr=o("TFDistilBertForTokenClassification"),uXr=o(" (DistilBERT model)"),pXr=l(),Tw=a("li"),V6e=a("strong"),_Xr=o("electra"),bXr=o(" \u2014 "),Roe=a("a"),vXr=o("TFElectraForTokenClassification"),FXr=o(" (ELECTRA model)"),TXr=l(),Mw=a("li"),X6e=a("strong"),MXr=o("flaubert"),EXr=o(" \u2014 "),Poe=a("a"),CXr=o("TFFlaubertForTokenClassification"),wXr=o(" (FlauBERT model)"),AXr=l(),Ew=a("li"),z6e=a("strong"),LXr=o("funnel"),yXr=o(" \u2014 "),Boe=a("a"),xXr=o("TFFunnelForTokenClassification"),$Xr=o(" (Funnel Transformer model)"),kXr=l(),Cw=a("li"),W6e=a("strong"),SXr=o("layoutlm"),RXr=o(" \u2014 "),Ioe=a("a"),PXr=o("TFLayoutLMForTokenClassification"),BXr=o(" (LayoutLM model)"),IXr=l(),ww=a("li"),Q6e=a("strong"),NXr=o("layoutlmv3"),qXr=o(" \u2014 "),Noe=a("a"),jXr=o("TFLayoutLMv3ForTokenClassification"),DXr=o(" (LayoutLMv3 model)"),GXr=l(),Aw=a("li"),U6e=a("strong"),OXr=o("longformer"),VXr=o(" \u2014 "),qoe=a("a"),XXr=o("TFLongformerForTokenClassification"),zXr=o(" (Longformer model)"),WXr=l(),Lw=a("li"),H6e=a("strong"),QXr=o("mobilebert"),UXr=o(" \u2014 "),joe=a("a"),HXr=o("TFMobileBertForTokenClassification"),JXr=o(" (MobileBERT model)"),YXr=l(),yw=a("li"),J6e=a("strong"),KXr=o("mpnet"),ZXr=o(" \u2014 "),Doe=a("a"),ezr=o("TFMPNetForTokenClassification"),ozr=o(" (MPNet model)"),rzr=l(),xw=a("li"),Y6e=a("strong"),tzr=o("rembert"),azr=o(" \u2014 "),Goe=a("a"),nzr=o("TFRemBertForTokenClassification"),szr=o(" (RemBERT model)"),lzr=l(),$w=a("li"),K6e=a("strong"),izr=o("roberta"),dzr=o(" \u2014 "),Ooe=a("a"),czr=o("TFRobertaForTokenClassification"),mzr=o(" (RoBERTa model)"),fzr=l(),kw=a("li"),Z6e=a("strong"),gzr=o("roformer"),hzr=o(" \u2014 "),Voe=a("a"),uzr=o("TFRoFormerForTokenClassification"),pzr=o(" (RoFormer model)"),_zr=l(),Sw=a("li"),eAe=a("strong"),bzr=o("xlm"),vzr=o(" \u2014 "),Xoe=a("a"),Fzr=o("TFXLMForTokenClassification"),Tzr=o(" (XLM model)"),Mzr=l(),Rw=a("li"),oAe=a("strong"),Ezr=o("xlm-roberta"),Czr=o(" \u2014 "),zoe=a("a"),wzr=o("TFXLMRobertaForTokenClassification"),Azr=o(" (XLM-RoBERTa model)"),Lzr=l(),Pw=a("li"),rAe=a("strong"),yzr=o("xlnet"),xzr=o(" \u2014 "),Woe=a("a"),$zr=o("TFXLNetForTokenClassification"),kzr=o(" (XLNet model)"),Szr=l(),F(Bw.$$.fragment),hJe=l(),sm=a("h2"),Iw=a("a"),tAe=a("span"),F(Ck.$$.fragment),Rzr=l(),aAe=a("span"),Pzr=o("TFAutoModelForQuestionAnswering"),uJe=l(),pr=a("div"),F(wk.$$.fragment),Bzr=l(),lm=a("p"),Izr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qoe=a("a"),Nzr=o("from_pretrained()"),qzr=o(" class method or the "),Uoe=a("a"),jzr=o("from_config()"),Dzr=o(` class
method.`),Gzr=l(),Ak=a("p"),Ozr=o("This class cannot be instantiated directly using "),nAe=a("code"),Vzr=o("__init__()"),Xzr=o(" (throws an error)."),zzr=l(),Jt=a("div"),F(Lk.$$.fragment),Wzr=l(),sAe=a("p"),Qzr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Uzr=l(),im=a("p"),Hzr=o(`Note:
Loading a model from its configuration file does `),lAe=a("strong"),Jzr=o("not"),Yzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=a("a"),Kzr=o("from_pretrained()"),Zzr=o(" to load the model weights."),eWr=l(),F(Nw.$$.fragment),oWr=l(),zr=a("div"),F(yk.$$.fragment),rWr=l(),iAe=a("p"),tWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aWr=l(),yn=a("p"),nWr=o("The model class to instantiate is selected based on the "),dAe=a("code"),sWr=o("model_type"),lWr=o(` property of the config object (either
passed as an argument or loaded from `),cAe=a("code"),iWr=o("pretrained_model_name_or_path"),dWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mAe=a("code"),cWr=o("pretrained_model_name_or_path"),mWr=o(":"),fWr=l(),de=a("ul"),qw=a("li"),fAe=a("strong"),gWr=o("albert"),hWr=o(" \u2014 "),Joe=a("a"),uWr=o("TFAlbertForQuestionAnswering"),pWr=o(" (ALBERT model)"),_Wr=l(),jw=a("li"),gAe=a("strong"),bWr=o("bert"),vWr=o(" \u2014 "),Yoe=a("a"),FWr=o("TFBertForQuestionAnswering"),TWr=o(" (BERT model)"),MWr=l(),Dw=a("li"),hAe=a("strong"),EWr=o("camembert"),CWr=o(" \u2014 "),Koe=a("a"),wWr=o("TFCamembertForQuestionAnswering"),AWr=o(" (CamemBERT model)"),LWr=l(),Gw=a("li"),uAe=a("strong"),yWr=o("convbert"),xWr=o(" \u2014 "),Zoe=a("a"),$Wr=o("TFConvBertForQuestionAnswering"),kWr=o(" (ConvBERT model)"),SWr=l(),Ow=a("li"),pAe=a("strong"),RWr=o("deberta"),PWr=o(" \u2014 "),ere=a("a"),BWr=o("TFDebertaForQuestionAnswering"),IWr=o(" (DeBERTa model)"),NWr=l(),Vw=a("li"),_Ae=a("strong"),qWr=o("deberta-v2"),jWr=o(" \u2014 "),ore=a("a"),DWr=o("TFDebertaV2ForQuestionAnswering"),GWr=o(" (DeBERTa-v2 model)"),OWr=l(),Xw=a("li"),bAe=a("strong"),VWr=o("distilbert"),XWr=o(" \u2014 "),rre=a("a"),zWr=o("TFDistilBertForQuestionAnswering"),WWr=o(" (DistilBERT model)"),QWr=l(),zw=a("li"),vAe=a("strong"),UWr=o("electra"),HWr=o(" \u2014 "),tre=a("a"),JWr=o("TFElectraForQuestionAnswering"),YWr=o(" (ELECTRA model)"),KWr=l(),Ww=a("li"),FAe=a("strong"),ZWr=o("flaubert"),eQr=o(" \u2014 "),are=a("a"),oQr=o("TFFlaubertForQuestionAnsweringSimple"),rQr=o(" (FlauBERT model)"),tQr=l(),Qw=a("li"),TAe=a("strong"),aQr=o("funnel"),nQr=o(" \u2014 "),nre=a("a"),sQr=o("TFFunnelForQuestionAnswering"),lQr=o(" (Funnel Transformer model)"),iQr=l(),Uw=a("li"),MAe=a("strong"),dQr=o("gptj"),cQr=o(" \u2014 "),sre=a("a"),mQr=o("TFGPTJForQuestionAnswering"),fQr=o(" (GPT-J model)"),gQr=l(),Hw=a("li"),EAe=a("strong"),hQr=o("layoutlmv3"),uQr=o(" \u2014 "),lre=a("a"),pQr=o("TFLayoutLMv3ForQuestionAnswering"),_Qr=o(" (LayoutLMv3 model)"),bQr=l(),Jw=a("li"),CAe=a("strong"),vQr=o("longformer"),FQr=o(" \u2014 "),ire=a("a"),TQr=o("TFLongformerForQuestionAnswering"),MQr=o(" (Longformer model)"),EQr=l(),Yw=a("li"),wAe=a("strong"),CQr=o("mobilebert"),wQr=o(" \u2014 "),dre=a("a"),AQr=o("TFMobileBertForQuestionAnswering"),LQr=o(" (MobileBERT model)"),yQr=l(),Kw=a("li"),AAe=a("strong"),xQr=o("mpnet"),$Qr=o(" \u2014 "),cre=a("a"),kQr=o("TFMPNetForQuestionAnswering"),SQr=o(" (MPNet model)"),RQr=l(),Zw=a("li"),LAe=a("strong"),PQr=o("rembert"),BQr=o(" \u2014 "),mre=a("a"),IQr=o("TFRemBertForQuestionAnswering"),NQr=o(" (RemBERT model)"),qQr=l(),e6=a("li"),yAe=a("strong"),jQr=o("roberta"),DQr=o(" \u2014 "),fre=a("a"),GQr=o("TFRobertaForQuestionAnswering"),OQr=o(" (RoBERTa model)"),VQr=l(),o6=a("li"),xAe=a("strong"),XQr=o("roformer"),zQr=o(" \u2014 "),gre=a("a"),WQr=o("TFRoFormerForQuestionAnswering"),QQr=o(" (RoFormer model)"),UQr=l(),r6=a("li"),$Ae=a("strong"),HQr=o("xlm"),JQr=o(" \u2014 "),hre=a("a"),YQr=o("TFXLMForQuestionAnsweringSimple"),KQr=o(" (XLM model)"),ZQr=l(),t6=a("li"),kAe=a("strong"),eUr=o("xlm-roberta"),oUr=o(" \u2014 "),ure=a("a"),rUr=o("TFXLMRobertaForQuestionAnswering"),tUr=o(" (XLM-RoBERTa model)"),aUr=l(),a6=a("li"),SAe=a("strong"),nUr=o("xlnet"),sUr=o(" \u2014 "),pre=a("a"),lUr=o("TFXLNetForQuestionAnsweringSimple"),iUr=o(" (XLNet model)"),dUr=l(),F(n6.$$.fragment),pJe=l(),dm=a("h2"),s6=a("a"),RAe=a("span"),F(xk.$$.fragment),cUr=l(),PAe=a("span"),mUr=o("TFAutoModelForVision2Seq"),_Je=l(),_r=a("div"),F($k.$$.fragment),fUr=l(),cm=a("p"),gUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_re=a("a"),hUr=o("from_pretrained()"),uUr=o(" class method or the "),bre=a("a"),pUr=o("from_config()"),_Ur=o(` class
method.`),bUr=l(),kk=a("p"),vUr=o("This class cannot be instantiated directly using "),BAe=a("code"),FUr=o("__init__()"),TUr=o(" (throws an error)."),MUr=l(),Yt=a("div"),F(Sk.$$.fragment),EUr=l(),IAe=a("p"),CUr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wUr=l(),mm=a("p"),AUr=o(`Note:
Loading a model from its configuration file does `),NAe=a("strong"),LUr=o("not"),yUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("a"),xUr=o("from_pretrained()"),$Ur=o(" to load the model weights."),kUr=l(),F(l6.$$.fragment),SUr=l(),Wr=a("div"),F(Rk.$$.fragment),RUr=l(),qAe=a("p"),PUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BUr=l(),xn=a("p"),IUr=o("The model class to instantiate is selected based on the "),jAe=a("code"),NUr=o("model_type"),qUr=o(` property of the config object (either
passed as an argument or loaded from `),DAe=a("code"),jUr=o("pretrained_model_name_or_path"),DUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GAe=a("code"),GUr=o("pretrained_model_name_or_path"),OUr=o(":"),VUr=l(),OAe=a("ul"),i6=a("li"),VAe=a("strong"),XUr=o("vision-encoder-decoder"),zUr=o(" \u2014 "),Fre=a("a"),WUr=o("TFVisionEncoderDecoderModel"),QUr=o(" (Vision Encoder decoder model)"),UUr=l(),F(d6.$$.fragment),bJe=l(),fm=a("h2"),c6=a("a"),XAe=a("span"),F(Pk.$$.fragment),HUr=l(),zAe=a("span"),JUr=o("TFAutoModelForSpeechSeq2Seq"),vJe=l(),br=a("div"),F(Bk.$$.fragment),YUr=l(),gm=a("p"),KUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tre=a("a"),ZUr=o("from_pretrained()"),eHr=o(" class method or the "),Mre=a("a"),oHr=o("from_config()"),rHr=o(` class
method.`),tHr=l(),Ik=a("p"),aHr=o("This class cannot be instantiated directly using "),WAe=a("code"),nHr=o("__init__()"),sHr=o(" (throws an error)."),lHr=l(),Kt=a("div"),F(Nk.$$.fragment),iHr=l(),QAe=a("p"),dHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cHr=l(),hm=a("p"),mHr=o(`Note:
Loading a model from its configuration file does `),UAe=a("strong"),fHr=o("not"),gHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),hHr=o("from_pretrained()"),uHr=o(" to load the model weights."),pHr=l(),F(m6.$$.fragment),_Hr=l(),Qr=a("div"),F(qk.$$.fragment),bHr=l(),HAe=a("p"),vHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FHr=l(),$n=a("p"),THr=o("The model class to instantiate is selected based on the "),JAe=a("code"),MHr=o("model_type"),EHr=o(` property of the config object (either
passed as an argument or loaded from `),YAe=a("code"),CHr=o("pretrained_model_name_or_path"),wHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=a("code"),AHr=o("pretrained_model_name_or_path"),LHr=o(":"),yHr=l(),ZAe=a("ul"),f6=a("li"),e7e=a("strong"),xHr=o("speech_to_text"),$Hr=o(" \u2014 "),Cre=a("a"),kHr=o("TFSpeech2TextForConditionalGeneration"),SHr=o(" (Speech2Text model)"),RHr=l(),F(g6.$$.fragment),FJe=l(),um=a("h2"),h6=a("a"),o7e=a("span"),F(jk.$$.fragment),PHr=l(),r7e=a("span"),BHr=o("FlaxAutoModel"),TJe=l(),vr=a("div"),F(Dk.$$.fragment),IHr=l(),pm=a("p"),NHr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wre=a("a"),qHr=o("from_pretrained()"),jHr=o(" class method or the "),Are=a("a"),DHr=o("from_config()"),GHr=o(` class
method.`),OHr=l(),Gk=a("p"),VHr=o("This class cannot be instantiated directly using "),t7e=a("code"),XHr=o("__init__()"),zHr=o(" (throws an error)."),WHr=l(),Zt=a("div"),F(Ok.$$.fragment),QHr=l(),a7e=a("p"),UHr=o("Instantiates one of the base model classes of the library from a configuration."),HHr=l(),_m=a("p"),JHr=o(`Note:
Loading a model from its configuration file does `),n7e=a("strong"),YHr=o("not"),KHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("a"),ZHr=o("from_pretrained()"),eJr=o(" to load the model weights."),oJr=l(),F(u6.$$.fragment),rJr=l(),Ur=a("div"),F(Vk.$$.fragment),tJr=l(),s7e=a("p"),aJr=o("Instantiate one of the base model classes of the library from a pretrained model."),nJr=l(),kn=a("p"),sJr=o("The model class to instantiate is selected based on the "),l7e=a("code"),lJr=o("model_type"),iJr=o(` property of the config object (either
passed as an argument or loaded from `),i7e=a("code"),dJr=o("pretrained_model_name_or_path"),cJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=a("code"),mJr=o("pretrained_model_name_or_path"),fJr=o(":"),gJr=l(),te=a("ul"),p6=a("li"),c7e=a("strong"),hJr=o("albert"),uJr=o(" \u2014 "),yre=a("a"),pJr=o("FlaxAlbertModel"),_Jr=o(" (ALBERT model)"),bJr=l(),_6=a("li"),m7e=a("strong"),vJr=o("bart"),FJr=o(" \u2014 "),xre=a("a"),TJr=o("FlaxBartModel"),MJr=o(" (BART model)"),EJr=l(),b6=a("li"),f7e=a("strong"),CJr=o("beit"),wJr=o(" \u2014 "),$re=a("a"),AJr=o("FlaxBeitModel"),LJr=o(" (BEiT model)"),yJr=l(),v6=a("li"),g7e=a("strong"),xJr=o("bert"),$Jr=o(" \u2014 "),kre=a("a"),kJr=o("FlaxBertModel"),SJr=o(" (BERT model)"),RJr=l(),F6=a("li"),h7e=a("strong"),PJr=o("big_bird"),BJr=o(" \u2014 "),Sre=a("a"),IJr=o("FlaxBigBirdModel"),NJr=o(" (BigBird model)"),qJr=l(),T6=a("li"),u7e=a("strong"),jJr=o("blenderbot"),DJr=o(" \u2014 "),Rre=a("a"),GJr=o("FlaxBlenderbotModel"),OJr=o(" (Blenderbot model)"),VJr=l(),M6=a("li"),p7e=a("strong"),XJr=o("blenderbot-small"),zJr=o(" \u2014 "),Pre=a("a"),WJr=o("FlaxBlenderbotSmallModel"),QJr=o(" (BlenderbotSmall model)"),UJr=l(),E6=a("li"),_7e=a("strong"),HJr=o("clip"),JJr=o(" \u2014 "),Bre=a("a"),YJr=o("FlaxCLIPModel"),KJr=o(" (CLIP model)"),ZJr=l(),C6=a("li"),b7e=a("strong"),eYr=o("distilbert"),oYr=o(" \u2014 "),Ire=a("a"),rYr=o("FlaxDistilBertModel"),tYr=o(" (DistilBERT model)"),aYr=l(),w6=a("li"),v7e=a("strong"),nYr=o("electra"),sYr=o(" \u2014 "),Nre=a("a"),lYr=o("FlaxElectraModel"),iYr=o(" (ELECTRA model)"),dYr=l(),A6=a("li"),F7e=a("strong"),cYr=o("gpt2"),mYr=o(" \u2014 "),qre=a("a"),fYr=o("FlaxGPT2Model"),gYr=o(" (OpenAI GPT-2 model)"),hYr=l(),L6=a("li"),T7e=a("strong"),uYr=o("gpt_neo"),pYr=o(" \u2014 "),jre=a("a"),_Yr=o("FlaxGPTNeoModel"),bYr=o(" (GPT Neo model)"),vYr=l(),y6=a("li"),M7e=a("strong"),FYr=o("gptj"),TYr=o(" \u2014 "),Dre=a("a"),MYr=o("FlaxGPTJModel"),EYr=o(" (GPT-J model)"),CYr=l(),x6=a("li"),E7e=a("strong"),wYr=o("longt5"),AYr=o(" \u2014 "),Gre=a("a"),LYr=o("FlaxLongT5Model"),yYr=o(" (LongT5 model)"),xYr=l(),$6=a("li"),C7e=a("strong"),$Yr=o("marian"),kYr=o(" \u2014 "),Ore=a("a"),SYr=o("FlaxMarianModel"),RYr=o(" (Marian model)"),PYr=l(),k6=a("li"),w7e=a("strong"),BYr=o("mbart"),IYr=o(" \u2014 "),Vre=a("a"),NYr=o("FlaxMBartModel"),qYr=o(" (mBART model)"),jYr=l(),S6=a("li"),A7e=a("strong"),DYr=o("mt5"),GYr=o(" \u2014 "),Xre=a("a"),OYr=o("FlaxMT5Model"),VYr=o(" (MT5 model)"),XYr=l(),R6=a("li"),L7e=a("strong"),zYr=o("opt"),WYr=o(" \u2014 "),zre=a("a"),QYr=o("FlaxOPTModel"),UYr=o(" (OPT model)"),HYr=l(),P6=a("li"),y7e=a("strong"),JYr=o("pegasus"),YYr=o(" \u2014 "),Wre=a("a"),KYr=o("FlaxPegasusModel"),ZYr=o(" (Pegasus model)"),eKr=l(),B6=a("li"),x7e=a("strong"),oKr=o("roberta"),rKr=o(" \u2014 "),Qre=a("a"),tKr=o("FlaxRobertaModel"),aKr=o(" (RoBERTa model)"),nKr=l(),I6=a("li"),$7e=a("strong"),sKr=o("roformer"),lKr=o(" \u2014 "),Ure=a("a"),iKr=o("FlaxRoFormerModel"),dKr=o(" (RoFormer model)"),cKr=l(),N6=a("li"),k7e=a("strong"),mKr=o("t5"),fKr=o(" \u2014 "),Hre=a("a"),gKr=o("FlaxT5Model"),hKr=o(" (T5 model)"),uKr=l(),q6=a("li"),S7e=a("strong"),pKr=o("vision-text-dual-encoder"),_Kr=o(" \u2014 "),Jre=a("a"),bKr=o("FlaxVisionTextDualEncoderModel"),vKr=o(" (VisionTextDualEncoder model)"),FKr=l(),j6=a("li"),R7e=a("strong"),TKr=o("vit"),MKr=o(" \u2014 "),Yre=a("a"),EKr=o("FlaxViTModel"),CKr=o(" (ViT model)"),wKr=l(),D6=a("li"),P7e=a("strong"),AKr=o("wav2vec2"),LKr=o(" \u2014 "),Kre=a("a"),yKr=o("FlaxWav2Vec2Model"),xKr=o(" (Wav2Vec2 model)"),$Kr=l(),G6=a("li"),B7e=a("strong"),kKr=o("xglm"),SKr=o(" \u2014 "),Zre=a("a"),RKr=o("FlaxXGLMModel"),PKr=o(" (XGLM model)"),BKr=l(),O6=a("li"),I7e=a("strong"),IKr=o("xlm-roberta"),NKr=o(" \u2014 "),ete=a("a"),qKr=o("FlaxXLMRobertaModel"),jKr=o(" (XLM-RoBERTa model)"),DKr=l(),F(V6.$$.fragment),MJe=l(),bm=a("h2"),X6=a("a"),N7e=a("span"),F(Xk.$$.fragment),GKr=l(),q7e=a("span"),OKr=o("FlaxAutoModelForCausalLM"),EJe=l(),Fr=a("div"),F(zk.$$.fragment),VKr=l(),vm=a("p"),XKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ote=a("a"),zKr=o("from_pretrained()"),WKr=o(" class method or the "),rte=a("a"),QKr=o("from_config()"),UKr=o(` class
method.`),HKr=l(),Wk=a("p"),JKr=o("This class cannot be instantiated directly using "),j7e=a("code"),YKr=o("__init__()"),KKr=o(" (throws an error)."),ZKr=l(),ea=a("div"),F(Qk.$$.fragment),eZr=l(),D7e=a("p"),oZr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rZr=l(),Fm=a("p"),tZr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),aZr=o("not"),nZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=a("a"),sZr=o("from_pretrained()"),lZr=o(" to load the model weights."),iZr=l(),F(z6.$$.fragment),dZr=l(),Hr=a("div"),F(Uk.$$.fragment),cZr=l(),O7e=a("p"),mZr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fZr=l(),Sn=a("p"),gZr=o("The model class to instantiate is selected based on the "),V7e=a("code"),hZr=o("model_type"),uZr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),pZr=o("pretrained_model_name_or_path"),_Zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),bZr=o("pretrained_model_name_or_path"),vZr=o(":"),FZr=l(),xe=a("ul"),W6=a("li"),W7e=a("strong"),TZr=o("bart"),MZr=o(" \u2014 "),ate=a("a"),EZr=o("FlaxBartForCausalLM"),CZr=o(" (BART model)"),wZr=l(),Q6=a("li"),Q7e=a("strong"),AZr=o("bert"),LZr=o(" \u2014 "),nte=a("a"),yZr=o("FlaxBertForCausalLM"),xZr=o(" (BERT model)"),$Zr=l(),U6=a("li"),U7e=a("strong"),kZr=o("big_bird"),SZr=o(" \u2014 "),ste=a("a"),RZr=o("FlaxBigBirdForCausalLM"),PZr=o(" (BigBird model)"),BZr=l(),H6=a("li"),H7e=a("strong"),IZr=o("electra"),NZr=o(" \u2014 "),lte=a("a"),qZr=o("FlaxElectraForCausalLM"),jZr=o(" (ELECTRA model)"),DZr=l(),J6=a("li"),J7e=a("strong"),GZr=o("gpt2"),OZr=o(" \u2014 "),ite=a("a"),VZr=o("FlaxGPT2LMHeadModel"),XZr=o(" (OpenAI GPT-2 model)"),zZr=l(),Y6=a("li"),Y7e=a("strong"),WZr=o("gpt_neo"),QZr=o(" \u2014 "),dte=a("a"),UZr=o("FlaxGPTNeoForCausalLM"),HZr=o(" (GPT Neo model)"),JZr=l(),K6=a("li"),K7e=a("strong"),YZr=o("gptj"),KZr=o(" \u2014 "),cte=a("a"),ZZr=o("FlaxGPTJForCausalLM"),eet=o(" (GPT-J model)"),oet=l(),Z6=a("li"),Z7e=a("strong"),ret=o("opt"),tet=o(" \u2014 "),mte=a("a"),aet=o("FlaxOPTForCausalLM"),net=o(" (OPT model)"),set=l(),eA=a("li"),eLe=a("strong"),iet=o("roberta"),det=o(" \u2014 "),fte=a("a"),cet=o("FlaxRobertaForCausalLM"),met=o(" (RoBERTa model)"),fet=l(),oA=a("li"),oLe=a("strong"),get=o("xglm"),het=o(" \u2014 "),gte=a("a"),uet=o("FlaxXGLMForCausalLM"),pet=o(" (XGLM model)"),_et=l(),F(rA.$$.fragment),CJe=l(),Tm=a("h2"),tA=a("a"),rLe=a("span"),F(Hk.$$.fragment),bet=l(),tLe=a("span"),vet=o("FlaxAutoModelForPreTraining"),wJe=l(),Tr=a("div"),F(Jk.$$.fragment),Fet=l(),Mm=a("p"),Tet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hte=a("a"),Met=o("from_pretrained()"),Eet=o(" class method or the "),ute=a("a"),Cet=o("from_config()"),wet=o(` class
method.`),Aet=l(),Yk=a("p"),Let=o("This class cannot be instantiated directly using "),aLe=a("code"),yet=o("__init__()"),xet=o(" (throws an error)."),$et=l(),oa=a("div"),F(Kk.$$.fragment),ket=l(),nLe=a("p"),Set=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ret=l(),Em=a("p"),Pet=o(`Note:
Loading a model from its configuration file does `),sLe=a("strong"),Bet=o("not"),Iet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pte=a("a"),Net=o("from_pretrained()"),qet=o(" to load the model weights."),jet=l(),F(aA.$$.fragment),Det=l(),Jr=a("div"),F(Zk.$$.fragment),Get=l(),lLe=a("p"),Oet=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vet=l(),Rn=a("p"),Xet=o("The model class to instantiate is selected based on the "),iLe=a("code"),zet=o("model_type"),Wet=o(` property of the config object (either
passed as an argument or loaded from `),dLe=a("code"),Qet=o("pretrained_model_name_or_path"),Uet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cLe=a("code"),Het=o("pretrained_model_name_or_path"),Jet=o(":"),Yet=l(),Ee=a("ul"),nA=a("li"),mLe=a("strong"),Ket=o("albert"),Zet=o(" \u2014 "),_te=a("a"),eot=o("FlaxAlbertForPreTraining"),oot=o(" (ALBERT model)"),rot=l(),sA=a("li"),fLe=a("strong"),tot=o("bart"),aot=o(" \u2014 "),bte=a("a"),not=o("FlaxBartForConditionalGeneration"),sot=o(" (BART model)"),lot=l(),lA=a("li"),gLe=a("strong"),iot=o("bert"),dot=o(" \u2014 "),vte=a("a"),cot=o("FlaxBertForPreTraining"),mot=o(" (BERT model)"),fot=l(),iA=a("li"),hLe=a("strong"),got=o("big_bird"),hot=o(" \u2014 "),Fte=a("a"),uot=o("FlaxBigBirdForPreTraining"),pot=o(" (BigBird model)"),_ot=l(),dA=a("li"),uLe=a("strong"),bot=o("electra"),vot=o(" \u2014 "),Tte=a("a"),Fot=o("FlaxElectraForPreTraining"),Tot=o(" (ELECTRA model)"),Mot=l(),cA=a("li"),pLe=a("strong"),Eot=o("longt5"),Cot=o(" \u2014 "),Mte=a("a"),wot=o("FlaxLongT5ForConditionalGeneration"),Aot=o(" (LongT5 model)"),Lot=l(),mA=a("li"),_Le=a("strong"),yot=o("mbart"),xot=o(" \u2014 "),Ete=a("a"),$ot=o("FlaxMBartForConditionalGeneration"),kot=o(" (mBART model)"),Sot=l(),fA=a("li"),bLe=a("strong"),Rot=o("mt5"),Pot=o(" \u2014 "),Cte=a("a"),Bot=o("FlaxMT5ForConditionalGeneration"),Iot=o(" (MT5 model)"),Not=l(),gA=a("li"),vLe=a("strong"),qot=o("roberta"),jot=o(" \u2014 "),wte=a("a"),Dot=o("FlaxRobertaForMaskedLM"),Got=o(" (RoBERTa model)"),Oot=l(),hA=a("li"),FLe=a("strong"),Vot=o("roformer"),Xot=o(" \u2014 "),Ate=a("a"),zot=o("FlaxRoFormerForMaskedLM"),Wot=o(" (RoFormer model)"),Qot=l(),uA=a("li"),TLe=a("strong"),Uot=o("t5"),Hot=o(" \u2014 "),Lte=a("a"),Jot=o("FlaxT5ForConditionalGeneration"),Yot=o(" (T5 model)"),Kot=l(),pA=a("li"),MLe=a("strong"),Zot=o("wav2vec2"),ert=o(" \u2014 "),yte=a("a"),ort=o("FlaxWav2Vec2ForPreTraining"),rrt=o(" (Wav2Vec2 model)"),trt=l(),_A=a("li"),ELe=a("strong"),art=o("xlm-roberta"),nrt=o(" \u2014 "),xte=a("a"),srt=o("FlaxXLMRobertaForMaskedLM"),lrt=o(" (XLM-RoBERTa model)"),irt=l(),F(bA.$$.fragment),AJe=l(),Cm=a("h2"),vA=a("a"),CLe=a("span"),F(eS.$$.fragment),drt=l(),wLe=a("span"),crt=o("FlaxAutoModelForMaskedLM"),LJe=l(),Mr=a("div"),F(oS.$$.fragment),mrt=l(),wm=a("p"),frt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$te=a("a"),grt=o("from_pretrained()"),hrt=o(" class method or the "),kte=a("a"),urt=o("from_config()"),prt=o(` class
method.`),_rt=l(),rS=a("p"),brt=o("This class cannot be instantiated directly using "),ALe=a("code"),vrt=o("__init__()"),Frt=o(" (throws an error)."),Trt=l(),ra=a("div"),F(tS.$$.fragment),Mrt=l(),LLe=a("p"),Ert=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Crt=l(),Am=a("p"),wrt=o(`Note:
Loading a model from its configuration file does `),yLe=a("strong"),Art=o("not"),Lrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ste=a("a"),yrt=o("from_pretrained()"),xrt=o(" to load the model weights."),$rt=l(),F(FA.$$.fragment),krt=l(),Yr=a("div"),F(aS.$$.fragment),Srt=l(),xLe=a("p"),Rrt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Prt=l(),Pn=a("p"),Brt=o("The model class to instantiate is selected based on the "),$Le=a("code"),Irt=o("model_type"),Nrt=o(` property of the config object (either
passed as an argument or loaded from `),kLe=a("code"),qrt=o("pretrained_model_name_or_path"),jrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SLe=a("code"),Drt=o("pretrained_model_name_or_path"),Grt=o(":"),Ort=l(),$e=a("ul"),TA=a("li"),RLe=a("strong"),Vrt=o("albert"),Xrt=o(" \u2014 "),Rte=a("a"),zrt=o("FlaxAlbertForMaskedLM"),Wrt=o(" (ALBERT model)"),Qrt=l(),MA=a("li"),PLe=a("strong"),Urt=o("bart"),Hrt=o(" \u2014 "),Pte=a("a"),Jrt=o("FlaxBartForConditionalGeneration"),Yrt=o(" (BART model)"),Krt=l(),EA=a("li"),BLe=a("strong"),Zrt=o("bert"),ett=o(" \u2014 "),Bte=a("a"),ott=o("FlaxBertForMaskedLM"),rtt=o(" (BERT model)"),ttt=l(),CA=a("li"),ILe=a("strong"),att=o("big_bird"),ntt=o(" \u2014 "),Ite=a("a"),stt=o("FlaxBigBirdForMaskedLM"),ltt=o(" (BigBird model)"),itt=l(),wA=a("li"),NLe=a("strong"),dtt=o("distilbert"),ctt=o(" \u2014 "),Nte=a("a"),mtt=o("FlaxDistilBertForMaskedLM"),ftt=o(" (DistilBERT model)"),gtt=l(),AA=a("li"),qLe=a("strong"),htt=o("electra"),utt=o(" \u2014 "),qte=a("a"),ptt=o("FlaxElectraForMaskedLM"),_tt=o(" (ELECTRA model)"),btt=l(),LA=a("li"),jLe=a("strong"),vtt=o("mbart"),Ftt=o(" \u2014 "),jte=a("a"),Ttt=o("FlaxMBartForConditionalGeneration"),Mtt=o(" (mBART model)"),Ett=l(),yA=a("li"),DLe=a("strong"),Ctt=o("roberta"),wtt=o(" \u2014 "),Dte=a("a"),Att=o("FlaxRobertaForMaskedLM"),Ltt=o(" (RoBERTa model)"),ytt=l(),xA=a("li"),GLe=a("strong"),xtt=o("roformer"),$tt=o(" \u2014 "),Gte=a("a"),ktt=o("FlaxRoFormerForMaskedLM"),Stt=o(" (RoFormer model)"),Rtt=l(),$A=a("li"),OLe=a("strong"),Ptt=o("xlm-roberta"),Btt=o(" \u2014 "),Ote=a("a"),Itt=o("FlaxXLMRobertaForMaskedLM"),Ntt=o(" (XLM-RoBERTa model)"),qtt=l(),F(kA.$$.fragment),yJe=l(),Lm=a("h2"),SA=a("a"),VLe=a("span"),F(nS.$$.fragment),jtt=l(),XLe=a("span"),Dtt=o("FlaxAutoModelForSeq2SeqLM"),xJe=l(),Er=a("div"),F(sS.$$.fragment),Gtt=l(),ym=a("p"),Ott=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Vte=a("a"),Vtt=o("from_pretrained()"),Xtt=o(" class method or the "),Xte=a("a"),ztt=o("from_config()"),Wtt=o(` class
method.`),Qtt=l(),lS=a("p"),Utt=o("This class cannot be instantiated directly using "),zLe=a("code"),Htt=o("__init__()"),Jtt=o(" (throws an error)."),Ytt=l(),ta=a("div"),F(iS.$$.fragment),Ktt=l(),WLe=a("p"),Ztt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eat=l(),xm=a("p"),oat=o(`Note:
Loading a model from its configuration file does `),QLe=a("strong"),rat=o("not"),tat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zte=a("a"),aat=o("from_pretrained()"),nat=o(" to load the model weights."),sat=l(),F(RA.$$.fragment),lat=l(),Kr=a("div"),F(dS.$$.fragment),iat=l(),ULe=a("p"),dat=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cat=l(),Bn=a("p"),mat=o("The model class to instantiate is selected based on the "),HLe=a("code"),fat=o("model_type"),gat=o(` property of the config object (either
passed as an argument or loaded from `),JLe=a("code"),hat=o("pretrained_model_name_or_path"),uat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YLe=a("code"),pat=o("pretrained_model_name_or_path"),_at=o(":"),bat=l(),ke=a("ul"),PA=a("li"),KLe=a("strong"),vat=o("bart"),Fat=o(" \u2014 "),Wte=a("a"),Tat=o("FlaxBartForConditionalGeneration"),Mat=o(" (BART model)"),Eat=l(),BA=a("li"),ZLe=a("strong"),Cat=o("blenderbot"),wat=o(" \u2014 "),Qte=a("a"),Aat=o("FlaxBlenderbotForConditionalGeneration"),Lat=o(" (Blenderbot model)"),yat=l(),IA=a("li"),eye=a("strong"),xat=o("blenderbot-small"),$at=o(" \u2014 "),Ute=a("a"),kat=o("FlaxBlenderbotSmallForConditionalGeneration"),Sat=o(" (BlenderbotSmall model)"),Rat=l(),NA=a("li"),oye=a("strong"),Pat=o("encoder-decoder"),Bat=o(" \u2014 "),Hte=a("a"),Iat=o("FlaxEncoderDecoderModel"),Nat=o(" (Encoder decoder model)"),qat=l(),qA=a("li"),rye=a("strong"),jat=o("longt5"),Dat=o(" \u2014 "),Jte=a("a"),Gat=o("FlaxLongT5ForConditionalGeneration"),Oat=o(" (LongT5 model)"),Vat=l(),jA=a("li"),tye=a("strong"),Xat=o("marian"),zat=o(" \u2014 "),Yte=a("a"),Wat=o("FlaxMarianMTModel"),Qat=o(" (Marian model)"),Uat=l(),DA=a("li"),aye=a("strong"),Hat=o("mbart"),Jat=o(" \u2014 "),Kte=a("a"),Yat=o("FlaxMBartForConditionalGeneration"),Kat=o(" (mBART model)"),Zat=l(),GA=a("li"),nye=a("strong"),ent=o("mt5"),ont=o(" \u2014 "),Zte=a("a"),rnt=o("FlaxMT5ForConditionalGeneration"),tnt=o(" (MT5 model)"),ant=l(),OA=a("li"),sye=a("strong"),nnt=o("pegasus"),snt=o(" \u2014 "),eae=a("a"),lnt=o("FlaxPegasusForConditionalGeneration"),int=o(" (Pegasus model)"),dnt=l(),VA=a("li"),lye=a("strong"),cnt=o("t5"),mnt=o(" \u2014 "),oae=a("a"),fnt=o("FlaxT5ForConditionalGeneration"),gnt=o(" (T5 model)"),hnt=l(),F(XA.$$.fragment),$Je=l(),$m=a("h2"),zA=a("a"),iye=a("span"),F(cS.$$.fragment),unt=l(),dye=a("span"),pnt=o("FlaxAutoModelForSequenceClassification"),kJe=l(),Cr=a("div"),F(mS.$$.fragment),_nt=l(),km=a("p"),bnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rae=a("a"),vnt=o("from_pretrained()"),Fnt=o(" class method or the "),tae=a("a"),Tnt=o("from_config()"),Mnt=o(` class
method.`),Ent=l(),fS=a("p"),Cnt=o("This class cannot be instantiated directly using "),cye=a("code"),wnt=o("__init__()"),Ant=o(" (throws an error)."),Lnt=l(),aa=a("div"),F(gS.$$.fragment),ynt=l(),mye=a("p"),xnt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$nt=l(),Sm=a("p"),knt=o(`Note:
Loading a model from its configuration file does `),fye=a("strong"),Snt=o("not"),Rnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=a("a"),Pnt=o("from_pretrained()"),Bnt=o(" to load the model weights."),Int=l(),F(WA.$$.fragment),Nnt=l(),Zr=a("div"),F(hS.$$.fragment),qnt=l(),gye=a("p"),jnt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dnt=l(),In=a("p"),Gnt=o("The model class to instantiate is selected based on the "),hye=a("code"),Ont=o("model_type"),Vnt=o(` property of the config object (either
passed as an argument or loaded from `),uye=a("code"),Xnt=o("pretrained_model_name_or_path"),znt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pye=a("code"),Wnt=o("pretrained_model_name_or_path"),Qnt=o(":"),Unt=l(),Se=a("ul"),QA=a("li"),_ye=a("strong"),Hnt=o("albert"),Jnt=o(" \u2014 "),nae=a("a"),Ynt=o("FlaxAlbertForSequenceClassification"),Knt=o(" (ALBERT model)"),Znt=l(),UA=a("li"),bye=a("strong"),est=o("bart"),ost=o(" \u2014 "),sae=a("a"),rst=o("FlaxBartForSequenceClassification"),tst=o(" (BART model)"),ast=l(),HA=a("li"),vye=a("strong"),nst=o("bert"),sst=o(" \u2014 "),lae=a("a"),lst=o("FlaxBertForSequenceClassification"),ist=o(" (BERT model)"),dst=l(),JA=a("li"),Fye=a("strong"),cst=o("big_bird"),mst=o(" \u2014 "),iae=a("a"),fst=o("FlaxBigBirdForSequenceClassification"),gst=o(" (BigBird model)"),hst=l(),YA=a("li"),Tye=a("strong"),ust=o("distilbert"),pst=o(" \u2014 "),dae=a("a"),_st=o("FlaxDistilBertForSequenceClassification"),bst=o(" (DistilBERT model)"),vst=l(),KA=a("li"),Mye=a("strong"),Fst=o("electra"),Tst=o(" \u2014 "),cae=a("a"),Mst=o("FlaxElectraForSequenceClassification"),Est=o(" (ELECTRA model)"),Cst=l(),ZA=a("li"),Eye=a("strong"),wst=o("mbart"),Ast=o(" \u2014 "),mae=a("a"),Lst=o("FlaxMBartForSequenceClassification"),yst=o(" (mBART model)"),xst=l(),e7=a("li"),Cye=a("strong"),$st=o("roberta"),kst=o(" \u2014 "),fae=a("a"),Sst=o("FlaxRobertaForSequenceClassification"),Rst=o(" (RoBERTa model)"),Pst=l(),o7=a("li"),wye=a("strong"),Bst=o("roformer"),Ist=o(" \u2014 "),gae=a("a"),Nst=o("FlaxRoFormerForSequenceClassification"),qst=o(" (RoFormer model)"),jst=l(),r7=a("li"),Aye=a("strong"),Dst=o("xlm-roberta"),Gst=o(" \u2014 "),hae=a("a"),Ost=o("FlaxXLMRobertaForSequenceClassification"),Vst=o(" (XLM-RoBERTa model)"),Xst=l(),F(t7.$$.fragment),SJe=l(),Rm=a("h2"),a7=a("a"),Lye=a("span"),F(uS.$$.fragment),zst=l(),yye=a("span"),Wst=o("FlaxAutoModelForQuestionAnswering"),RJe=l(),wr=a("div"),F(pS.$$.fragment),Qst=l(),Pm=a("p"),Ust=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uae=a("a"),Hst=o("from_pretrained()"),Jst=o(" class method or the "),pae=a("a"),Yst=o("from_config()"),Kst=o(` class
method.`),Zst=l(),_S=a("p"),elt=o("This class cannot be instantiated directly using "),xye=a("code"),olt=o("__init__()"),rlt=o(" (throws an error)."),tlt=l(),na=a("div"),F(bS.$$.fragment),alt=l(),$ye=a("p"),nlt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),slt=l(),Bm=a("p"),llt=o(`Note:
Loading a model from its configuration file does `),kye=a("strong"),ilt=o("not"),dlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ae=a("a"),clt=o("from_pretrained()"),mlt=o(" to load the model weights."),flt=l(),F(n7.$$.fragment),glt=l(),et=a("div"),F(vS.$$.fragment),hlt=l(),Sye=a("p"),ult=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),plt=l(),Nn=a("p"),_lt=o("The model class to instantiate is selected based on the "),Rye=a("code"),blt=o("model_type"),vlt=o(` property of the config object (either
passed as an argument or loaded from `),Pye=a("code"),Flt=o("pretrained_model_name_or_path"),Tlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bye=a("code"),Mlt=o("pretrained_model_name_or_path"),Elt=o(":"),Clt=l(),Re=a("ul"),s7=a("li"),Iye=a("strong"),wlt=o("albert"),Alt=o(" \u2014 "),bae=a("a"),Llt=o("FlaxAlbertForQuestionAnswering"),ylt=o(" (ALBERT model)"),xlt=l(),l7=a("li"),Nye=a("strong"),$lt=o("bart"),klt=o(" \u2014 "),vae=a("a"),Slt=o("FlaxBartForQuestionAnswering"),Rlt=o(" (BART model)"),Plt=l(),i7=a("li"),qye=a("strong"),Blt=o("bert"),Ilt=o(" \u2014 "),Fae=a("a"),Nlt=o("FlaxBertForQuestionAnswering"),qlt=o(" (BERT model)"),jlt=l(),d7=a("li"),jye=a("strong"),Dlt=o("big_bird"),Glt=o(" \u2014 "),Tae=a("a"),Olt=o("FlaxBigBirdForQuestionAnswering"),Vlt=o(" (BigBird model)"),Xlt=l(),c7=a("li"),Dye=a("strong"),zlt=o("distilbert"),Wlt=o(" \u2014 "),Mae=a("a"),Qlt=o("FlaxDistilBertForQuestionAnswering"),Ult=o(" (DistilBERT model)"),Hlt=l(),m7=a("li"),Gye=a("strong"),Jlt=o("electra"),Ylt=o(" \u2014 "),Eae=a("a"),Klt=o("FlaxElectraForQuestionAnswering"),Zlt=o(" (ELECTRA model)"),eit=l(),f7=a("li"),Oye=a("strong"),oit=o("mbart"),rit=o(" \u2014 "),Cae=a("a"),tit=o("FlaxMBartForQuestionAnswering"),ait=o(" (mBART model)"),nit=l(),g7=a("li"),Vye=a("strong"),sit=o("roberta"),lit=o(" \u2014 "),wae=a("a"),iit=o("FlaxRobertaForQuestionAnswering"),dit=o(" (RoBERTa model)"),cit=l(),h7=a("li"),Xye=a("strong"),mit=o("roformer"),fit=o(" \u2014 "),Aae=a("a"),git=o("FlaxRoFormerForQuestionAnswering"),hit=o(" (RoFormer model)"),uit=l(),u7=a("li"),zye=a("strong"),pit=o("xlm-roberta"),_it=o(" \u2014 "),Lae=a("a"),bit=o("FlaxXLMRobertaForQuestionAnswering"),vit=o(" (XLM-RoBERTa model)"),Fit=l(),F(p7.$$.fragment),PJe=l(),Im=a("h2"),_7=a("a"),Wye=a("span"),F(FS.$$.fragment),Tit=l(),Qye=a("span"),Mit=o("FlaxAutoModelForTokenClassification"),BJe=l(),Ar=a("div"),F(TS.$$.fragment),Eit=l(),Nm=a("p"),Cit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yae=a("a"),wit=o("from_pretrained()"),Ait=o(" class method or the "),xae=a("a"),Lit=o("from_config()"),yit=o(` class
method.`),xit=l(),MS=a("p"),$it=o("This class cannot be instantiated directly using "),Uye=a("code"),kit=o("__init__()"),Sit=o(" (throws an error)."),Rit=l(),sa=a("div"),F(ES.$$.fragment),Pit=l(),Hye=a("p"),Bit=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Iit=l(),qm=a("p"),Nit=o(`Note:
Loading a model from its configuration file does `),Jye=a("strong"),qit=o("not"),jit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=a("a"),Dit=o("from_pretrained()"),Git=o(" to load the model weights."),Oit=l(),F(b7.$$.fragment),Vit=l(),ot=a("div"),F(CS.$$.fragment),Xit=l(),Yye=a("p"),zit=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wit=l(),qn=a("p"),Qit=o("The model class to instantiate is selected based on the "),Kye=a("code"),Uit=o("model_type"),Hit=o(` property of the config object (either
passed as an argument or loaded from `),Zye=a("code"),Jit=o("pretrained_model_name_or_path"),Yit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=a("code"),Kit=o("pretrained_model_name_or_path"),Zit=o(":"),edt=l(),Xe=a("ul"),v7=a("li"),o8e=a("strong"),odt=o("albert"),rdt=o(" \u2014 "),kae=a("a"),tdt=o("FlaxAlbertForTokenClassification"),adt=o(" (ALBERT model)"),ndt=l(),F7=a("li"),r8e=a("strong"),sdt=o("bert"),ldt=o(" \u2014 "),Sae=a("a"),idt=o("FlaxBertForTokenClassification"),ddt=o(" (BERT model)"),cdt=l(),T7=a("li"),t8e=a("strong"),mdt=o("big_bird"),fdt=o(" \u2014 "),Rae=a("a"),gdt=o("FlaxBigBirdForTokenClassification"),hdt=o(" (BigBird model)"),udt=l(),M7=a("li"),a8e=a("strong"),pdt=o("distilbert"),_dt=o(" \u2014 "),Pae=a("a"),bdt=o("FlaxDistilBertForTokenClassification"),vdt=o(" (DistilBERT model)"),Fdt=l(),E7=a("li"),n8e=a("strong"),Tdt=o("electra"),Mdt=o(" \u2014 "),Bae=a("a"),Edt=o("FlaxElectraForTokenClassification"),Cdt=o(" (ELECTRA model)"),wdt=l(),C7=a("li"),s8e=a("strong"),Adt=o("roberta"),Ldt=o(" \u2014 "),Iae=a("a"),ydt=o("FlaxRobertaForTokenClassification"),xdt=o(" (RoBERTa model)"),$dt=l(),w7=a("li"),l8e=a("strong"),kdt=o("roformer"),Sdt=o(" \u2014 "),Nae=a("a"),Rdt=o("FlaxRoFormerForTokenClassification"),Pdt=o(" (RoFormer model)"),Bdt=l(),A7=a("li"),i8e=a("strong"),Idt=o("xlm-roberta"),Ndt=o(" \u2014 "),qae=a("a"),qdt=o("FlaxXLMRobertaForTokenClassification"),jdt=o(" (XLM-RoBERTa model)"),Ddt=l(),F(L7.$$.fragment),IJe=l(),jm=a("h2"),y7=a("a"),d8e=a("span"),F(wS.$$.fragment),Gdt=l(),c8e=a("span"),Odt=o("FlaxAutoModelForMultipleChoice"),NJe=l(),Lr=a("div"),F(AS.$$.fragment),Vdt=l(),Dm=a("p"),Xdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jae=a("a"),zdt=o("from_pretrained()"),Wdt=o(" class method or the "),Dae=a("a"),Qdt=o("from_config()"),Udt=o(` class
method.`),Hdt=l(),LS=a("p"),Jdt=o("This class cannot be instantiated directly using "),m8e=a("code"),Ydt=o("__init__()"),Kdt=o(" (throws an error)."),Zdt=l(),la=a("div"),F(yS.$$.fragment),ect=l(),f8e=a("p"),oct=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rct=l(),Gm=a("p"),tct=o(`Note:
Loading a model from its configuration file does `),g8e=a("strong"),act=o("not"),nct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=a("a"),sct=o("from_pretrained()"),lct=o(" to load the model weights."),ict=l(),F(x7.$$.fragment),dct=l(),rt=a("div"),F(xS.$$.fragment),cct=l(),h8e=a("p"),mct=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fct=l(),jn=a("p"),gct=o("The model class to instantiate is selected based on the "),u8e=a("code"),hct=o("model_type"),uct=o(` property of the config object (either
passed as an argument or loaded from `),p8e=a("code"),pct=o("pretrained_model_name_or_path"),_ct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=a("code"),bct=o("pretrained_model_name_or_path"),vct=o(":"),Fct=l(),ze=a("ul"),$7=a("li"),b8e=a("strong"),Tct=o("albert"),Mct=o(" \u2014 "),Oae=a("a"),Ect=o("FlaxAlbertForMultipleChoice"),Cct=o(" (ALBERT model)"),wct=l(),k7=a("li"),v8e=a("strong"),Act=o("bert"),Lct=o(" \u2014 "),Vae=a("a"),yct=o("FlaxBertForMultipleChoice"),xct=o(" (BERT model)"),$ct=l(),S7=a("li"),F8e=a("strong"),kct=o("big_bird"),Sct=o(" \u2014 "),Xae=a("a"),Rct=o("FlaxBigBirdForMultipleChoice"),Pct=o(" (BigBird model)"),Bct=l(),R7=a("li"),T8e=a("strong"),Ict=o("distilbert"),Nct=o(" \u2014 "),zae=a("a"),qct=o("FlaxDistilBertForMultipleChoice"),jct=o(" (DistilBERT model)"),Dct=l(),P7=a("li"),M8e=a("strong"),Gct=o("electra"),Oct=o(" \u2014 "),Wae=a("a"),Vct=o("FlaxElectraForMultipleChoice"),Xct=o(" (ELECTRA model)"),zct=l(),B7=a("li"),E8e=a("strong"),Wct=o("roberta"),Qct=o(" \u2014 "),Qae=a("a"),Uct=o("FlaxRobertaForMultipleChoice"),Hct=o(" (RoBERTa model)"),Jct=l(),I7=a("li"),C8e=a("strong"),Yct=o("roformer"),Kct=o(" \u2014 "),Uae=a("a"),Zct=o("FlaxRoFormerForMultipleChoice"),emt=o(" (RoFormer model)"),omt=l(),N7=a("li"),w8e=a("strong"),rmt=o("xlm-roberta"),tmt=o(" \u2014 "),Hae=a("a"),amt=o("FlaxXLMRobertaForMultipleChoice"),nmt=o(" (XLM-RoBERTa model)"),smt=l(),F(q7.$$.fragment),qJe=l(),Om=a("h2"),j7=a("a"),A8e=a("span"),F($S.$$.fragment),lmt=l(),L8e=a("span"),imt=o("FlaxAutoModelForNextSentencePrediction"),jJe=l(),yr=a("div"),F(kS.$$.fragment),dmt=l(),Vm=a("p"),cmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jae=a("a"),mmt=o("from_pretrained()"),fmt=o(" class method or the "),Yae=a("a"),gmt=o("from_config()"),hmt=o(` class
method.`),umt=l(),SS=a("p"),pmt=o("This class cannot be instantiated directly using "),y8e=a("code"),_mt=o("__init__()"),bmt=o(" (throws an error)."),vmt=l(),ia=a("div"),F(RS.$$.fragment),Fmt=l(),x8e=a("p"),Tmt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mmt=l(),Xm=a("p"),Emt=o(`Note:
Loading a model from its configuration file does `),$8e=a("strong"),Cmt=o("not"),wmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kae=a("a"),Amt=o("from_pretrained()"),Lmt=o(" to load the model weights."),ymt=l(),F(D7.$$.fragment),xmt=l(),tt=a("div"),F(PS.$$.fragment),$mt=l(),k8e=a("p"),kmt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Smt=l(),Dn=a("p"),Rmt=o("The model class to instantiate is selected based on the "),S8e=a("code"),Pmt=o("model_type"),Bmt=o(` property of the config object (either
passed as an argument or loaded from `),R8e=a("code"),Imt=o("pretrained_model_name_or_path"),Nmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=a("code"),qmt=o("pretrained_model_name_or_path"),jmt=o(":"),Dmt=l(),B8e=a("ul"),G7=a("li"),I8e=a("strong"),Gmt=o("bert"),Omt=o(" \u2014 "),Zae=a("a"),Vmt=o("FlaxBertForNextSentencePrediction"),Xmt=o(" (BERT model)"),zmt=l(),F(O7.$$.fragment),DJe=l(),zm=a("h2"),V7=a("a"),N8e=a("span"),F(BS.$$.fragment),Wmt=l(),q8e=a("span"),Qmt=o("FlaxAutoModelForImageClassification"),GJe=l(),xr=a("div"),F(IS.$$.fragment),Umt=l(),Wm=a("p"),Hmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ene=a("a"),Jmt=o("from_pretrained()"),Ymt=o(" class method or the "),one=a("a"),Kmt=o("from_config()"),Zmt=o(` class
method.`),eft=l(),NS=a("p"),oft=o("This class cannot be instantiated directly using "),j8e=a("code"),rft=o("__init__()"),tft=o(" (throws an error)."),aft=l(),da=a("div"),F(qS.$$.fragment),nft=l(),D8e=a("p"),sft=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lft=l(),Qm=a("p"),ift=o(`Note:
Loading a model from its configuration file does `),G8e=a("strong"),dft=o("not"),cft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rne=a("a"),mft=o("from_pretrained()"),fft=o(" to load the model weights."),gft=l(),F(X7.$$.fragment),hft=l(),at=a("div"),F(jS.$$.fragment),uft=l(),O8e=a("p"),pft=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_ft=l(),Gn=a("p"),bft=o("The model class to instantiate is selected based on the "),V8e=a("code"),vft=o("model_type"),Fft=o(` property of the config object (either
passed as an argument or loaded from `),X8e=a("code"),Tft=o("pretrained_model_name_or_path"),Mft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=a("code"),Eft=o("pretrained_model_name_or_path"),Cft=o(":"),wft=l(),DS=a("ul"),z7=a("li"),W8e=a("strong"),Aft=o("beit"),Lft=o(" \u2014 "),tne=a("a"),yft=o("FlaxBeitForImageClassification"),xft=o(" (BEiT model)"),$ft=l(),W7=a("li"),Q8e=a("strong"),kft=o("vit"),Sft=o(" \u2014 "),ane=a("a"),Rft=o("FlaxViTForImageClassification"),Pft=o(" (ViT model)"),Bft=l(),F(Q7.$$.fragment),OJe=l(),Um=a("h2"),U7=a("a"),U8e=a("span"),F(GS.$$.fragment),Ift=l(),H8e=a("span"),Nft=o("FlaxAutoModelForVision2Seq"),VJe=l(),$r=a("div"),F(OS.$$.fragment),qft=l(),Hm=a("p"),jft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nne=a("a"),Dft=o("from_pretrained()"),Gft=o(" class method or the "),sne=a("a"),Oft=o("from_config()"),Vft=o(` class
method.`),Xft=l(),VS=a("p"),zft=o("This class cannot be instantiated directly using "),J8e=a("code"),Wft=o("__init__()"),Qft=o(" (throws an error)."),Uft=l(),ca=a("div"),F(XS.$$.fragment),Hft=l(),Y8e=a("p"),Jft=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yft=l(),Jm=a("p"),Kft=o(`Note:
Loading a model from its configuration file does `),K8e=a("strong"),Zft=o("not"),egt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lne=a("a"),ogt=o("from_pretrained()"),rgt=o(" to load the model weights."),tgt=l(),F(H7.$$.fragment),agt=l(),nt=a("div"),F(zS.$$.fragment),ngt=l(),Z8e=a("p"),sgt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lgt=l(),On=a("p"),igt=o("The model class to instantiate is selected based on the "),e9e=a("code"),dgt=o("model_type"),cgt=o(` property of the config object (either
passed as an argument or loaded from `),o9e=a("code"),mgt=o("pretrained_model_name_or_path"),fgt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r9e=a("code"),ggt=o("pretrained_model_name_or_path"),hgt=o(":"),ugt=l(),t9e=a("ul"),J7=a("li"),a9e=a("strong"),pgt=o("vision-encoder-decoder"),_gt=o(" \u2014 "),ine=a("a"),bgt=o("FlaxVisionEncoderDecoderModel"),vgt=o(" (Vision Encoder decoder model)"),Fgt=l(),F(Y7.$$.fragment),this.h()},l(m){const _=sna('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var WS=s(u);f=n(WS,"A",{id:!0,class:!0,href:!0});var n9e=s(f);p=n(n9e,"SPAN",{});var s9e=s(p);T(d.$$.fragment,s9e),s9e.forEach(t),n9e.forEach(t),h=i(WS),Ao=n(WS,"SPAN",{});var l9e=s(Ao);Oi=r(l9e,"Auto Classes"),l9e.forEach(t),WS.forEach(t),ef=i(m),mt=n(m,"P",{});var QS=s(mt);Vi=r(QS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(QS,"CODE",{});var i9e=s(Xi);M8=r(i9e,"from_pretrained()"),i9e.forEach(t),of=r(QS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),QS.forEach(t),Ve=i(m),Ue=n(m,"P",{});var Vn=s(Ue);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var d9e=s(Xn);E8=r(d9e,"AutoConfig"),d9e.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var c9e=s(Wn);C8=r(c9e,"AutoModel"),c9e.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var m9e=s(Qn);w8=r(m9e,"AutoTokenizer"),m9e.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rf=i(m),T(ja.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var US=s(Ae);uP=r(US,"will create a model that is an instance of "),Ui=n(US,"A",{href:!0});var f9e=s(Ui);pP=r(f9e,"BertModel"),f9e.forEach(t),_P=r(US,"."),US.forEach(t),Lo=i(m),Da=n(m,"P",{});var HS=s(Da);bP=r(HS,"There is one class of "),tf=n(HS,"CODE",{});var g9e=s(tf);vP=r(g9e,"AutoModel"),g9e.forEach(t),aZe=r(HS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),HS.forEach(t),BUe=i(m),Hi=n(m,"H2",{class:!0});var JS=s(Hi);af=n(JS,"A",{id:!0,class:!0,href:!0});var h9e=s(af);lle=n(h9e,"SPAN",{});var u9e=s(lle);T(A8.$$.fragment,u9e),u9e.forEach(t),h9e.forEach(t),nZe=i(JS),ile=n(JS,"SPAN",{});var p9e=s(ile);sZe=r(p9e,"Extending the Auto Classes"),p9e.forEach(t),JS.forEach(t),IUe=i(m),Un=n(m,"P",{});var Ym=s(Un);lZe=r(Ym,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dle=n(Ym,"CODE",{});var _9e=s(dle);iZe=r(_9e,"NewModel"),_9e.forEach(t),dZe=r(Ym,", make sure you have a "),cle=n(Ym,"CODE",{});var b9e=s(cle);cZe=r(b9e,"NewModelConfig"),b9e.forEach(t),mZe=r(Ym,` then you can add those to the auto
classes like this:`),Ym.forEach(t),NUe=i(m),T(L8.$$.fragment,m),qUe=i(m),FP=n(m,"P",{});var v9e=s(FP);fZe=r(v9e,"You will then be able to use the auto classes like you would usually do!"),v9e.forEach(t),jUe=i(m),T(nf.$$.fragment,m),DUe=i(m),Ji=n(m,"H2",{class:!0});var YS=s(Ji);sf=n(YS,"A",{id:!0,class:!0,href:!0});var F9e=s(sf);mle=n(F9e,"SPAN",{});var T9e=s(mle);T(y8.$$.fragment,T9e),T9e.forEach(t),F9e.forEach(t),gZe=i(YS),fle=n(YS,"SPAN",{});var M9e=s(fle);hZe=r(M9e,"AutoConfig"),M9e.forEach(t),YS.forEach(t),GUe=i(m),yo=n(m,"DIV",{class:!0});var dt=s(yo);T(x8.$$.fragment,dt),uZe=i(dt),$8=n(dt,"P",{});var KS=s($8);pZe=r(KS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),TP=n(KS,"A",{href:!0});var E9e=s(TP);_Ze=r(E9e,"from_pretrained()"),E9e.forEach(t),bZe=r(KS," class method."),KS.forEach(t),vZe=i(dt),k8=n(dt,"P",{});var ZS=s(k8);FZe=r(ZS,"This class cannot be instantiated directly using "),gle=n(ZS,"CODE",{});var C9e=s(gle);TZe=r(C9e,"__init__()"),C9e.forEach(t),MZe=r(ZS," (throws an error)."),ZS.forEach(t),EZe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(S8.$$.fragment,ct),CZe=i(ct),hle=n(ct,"P",{});var w9e=s(hle);wZe=r(w9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),w9e.forEach(t),AZe=i(ct),Yi=n(ct,"P",{});var Km=s(Yi);LZe=r(Km,"The configuration class to instantiate is selected based on the "),ule=n(Km,"CODE",{});var A9e=s(ule);yZe=r(A9e,"model_type"),A9e.forEach(t),xZe=r(Km,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ple=n(Km,"CODE",{});var L9e=s(ple);$Ze=r(L9e,"pretrained_model_name_or_path"),L9e.forEach(t),kZe=r(Km,":"),Km.forEach(t),SZe=i(ct),A=n(ct,"UL",{});var L=s(A);lf=n(L,"LI",{});var K7=s(lf);_le=n(K7,"STRONG",{});var y9e=s(_le);RZe=r(y9e,"albert"),y9e.forEach(t),PZe=r(K7," \u2014 "),MP=n(K7,"A",{href:!0});var x9e=s(MP);BZe=r(x9e,"AlbertConfig"),x9e.forEach(t),IZe=r(K7," (ALBERT model)"),K7.forEach(t),NZe=i(L),df=n(L,"LI",{});var Z7=s(df);ble=n(Z7,"STRONG",{});var $9e=s(ble);qZe=r($9e,"bart"),$9e.forEach(t),jZe=r(Z7," \u2014 "),EP=n(Z7,"A",{href:!0});var k9e=s(EP);DZe=r(k9e,"BartConfig"),k9e.forEach(t),GZe=r(Z7," (BART model)"),Z7.forEach(t),OZe=i(L),cf=n(L,"LI",{});var eL=s(cf);vle=n(eL,"STRONG",{});var S9e=s(vle);VZe=r(S9e,"beit"),S9e.forEach(t),XZe=r(eL," \u2014 "),CP=n(eL,"A",{href:!0});var R9e=s(CP);zZe=r(R9e,"BeitConfig"),R9e.forEach(t),WZe=r(eL," (BEiT model)"),eL.forEach(t),QZe=i(L),mf=n(L,"LI",{});var oL=s(mf);Fle=n(oL,"STRONG",{});var P9e=s(Fle);UZe=r(P9e,"bert"),P9e.forEach(t),HZe=r(oL," \u2014 "),wP=n(oL,"A",{href:!0});var B9e=s(wP);JZe=r(B9e,"BertConfig"),B9e.forEach(t),YZe=r(oL," (BERT model)"),oL.forEach(t),KZe=i(L),ff=n(L,"LI",{});var rL=s(ff);Tle=n(rL,"STRONG",{});var I9e=s(Tle);ZZe=r(I9e,"bert-generation"),I9e.forEach(t),eeo=r(rL," \u2014 "),AP=n(rL,"A",{href:!0});var N9e=s(AP);oeo=r(N9e,"BertGenerationConfig"),N9e.forEach(t),reo=r(rL," (Bert Generation model)"),rL.forEach(t),teo=i(L),gf=n(L,"LI",{});var tL=s(gf);Mle=n(tL,"STRONG",{});var q9e=s(Mle);aeo=r(q9e,"big_bird"),q9e.forEach(t),neo=r(tL," \u2014 "),LP=n(tL,"A",{href:!0});var j9e=s(LP);seo=r(j9e,"BigBirdConfig"),j9e.forEach(t),leo=r(tL," (BigBird model)"),tL.forEach(t),ieo=i(L),hf=n(L,"LI",{});var aL=s(hf);Ele=n(aL,"STRONG",{});var D9e=s(Ele);deo=r(D9e,"bigbird_pegasus"),D9e.forEach(t),ceo=r(aL," \u2014 "),yP=n(aL,"A",{href:!0});var G9e=s(yP);meo=r(G9e,"BigBirdPegasusConfig"),G9e.forEach(t),feo=r(aL," (BigBird-Pegasus model)"),aL.forEach(t),geo=i(L),uf=n(L,"LI",{});var nL=s(uf);Cle=n(nL,"STRONG",{});var O9e=s(Cle);heo=r(O9e,"blenderbot"),O9e.forEach(t),ueo=r(nL," \u2014 "),xP=n(nL,"A",{href:!0});var V9e=s(xP);peo=r(V9e,"BlenderbotConfig"),V9e.forEach(t),_eo=r(nL," (Blenderbot model)"),nL.forEach(t),beo=i(L),pf=n(L,"LI",{});var sL=s(pf);wle=n(sL,"STRONG",{});var X9e=s(wle);veo=r(X9e,"blenderbot-small"),X9e.forEach(t),Feo=r(sL," \u2014 "),$P=n(sL,"A",{href:!0});var z9e=s($P);Teo=r(z9e,"BlenderbotSmallConfig"),z9e.forEach(t),Meo=r(sL," (BlenderbotSmall model)"),sL.forEach(t),Eeo=i(L),_f=n(L,"LI",{});var lL=s(_f);Ale=n(lL,"STRONG",{});var W9e=s(Ale);Ceo=r(W9e,"bloom"),W9e.forEach(t),weo=r(lL," \u2014 "),kP=n(lL,"A",{href:!0});var Q9e=s(kP);Aeo=r(Q9e,"BloomConfig"),Q9e.forEach(t),Leo=r(lL," (BLOOM model)"),lL.forEach(t),yeo=i(L),bf=n(L,"LI",{});var iL=s(bf);Lle=n(iL,"STRONG",{});var U9e=s(Lle);xeo=r(U9e,"camembert"),U9e.forEach(t),$eo=r(iL," \u2014 "),SP=n(iL,"A",{href:!0});var H9e=s(SP);keo=r(H9e,"CamembertConfig"),H9e.forEach(t),Seo=r(iL," (CamemBERT model)"),iL.forEach(t),Reo=i(L),vf=n(L,"LI",{});var dL=s(vf);yle=n(dL,"STRONG",{});var J9e=s(yle);Peo=r(J9e,"canine"),J9e.forEach(t),Beo=r(dL," \u2014 "),RP=n(dL,"A",{href:!0});var Y9e=s(RP);Ieo=r(Y9e,"CanineConfig"),Y9e.forEach(t),Neo=r(dL," (CANINE model)"),dL.forEach(t),qeo=i(L),Ff=n(L,"LI",{});var cL=s(Ff);xle=n(cL,"STRONG",{});var K9e=s(xle);jeo=r(K9e,"clip"),K9e.forEach(t),Deo=r(cL," \u2014 "),PP=n(cL,"A",{href:!0});var Z9e=s(PP);Geo=r(Z9e,"CLIPConfig"),Z9e.forEach(t),Oeo=r(cL," (CLIP model)"),cL.forEach(t),Veo=i(L),Tf=n(L,"LI",{});var mL=s(Tf);$le=n(mL,"STRONG",{});var exe=s($le);Xeo=r(exe,"codegen"),exe.forEach(t),zeo=r(mL," \u2014 "),BP=n(mL,"A",{href:!0});var oxe=s(BP);Weo=r(oxe,"CodeGenConfig"),oxe.forEach(t),Qeo=r(mL," (CodeGen model)"),mL.forEach(t),Ueo=i(L),Mf=n(L,"LI",{});var fL=s(Mf);kle=n(fL,"STRONG",{});var rxe=s(kle);Heo=r(rxe,"convbert"),rxe.forEach(t),Jeo=r(fL," \u2014 "),IP=n(fL,"A",{href:!0});var txe=s(IP);Yeo=r(txe,"ConvBertConfig"),txe.forEach(t),Keo=r(fL," (ConvBERT model)"),fL.forEach(t),Zeo=i(L),Ef=n(L,"LI",{});var gL=s(Ef);Sle=n(gL,"STRONG",{});var axe=s(Sle);eoo=r(axe,"convnext"),axe.forEach(t),ooo=r(gL," \u2014 "),NP=n(gL,"A",{href:!0});var nxe=s(NP);roo=r(nxe,"ConvNextConfig"),nxe.forEach(t),too=r(gL," (ConvNeXT model)"),gL.forEach(t),aoo=i(L),Cf=n(L,"LI",{});var hL=s(Cf);Rle=n(hL,"STRONG",{});var sxe=s(Rle);noo=r(sxe,"ctrl"),sxe.forEach(t),soo=r(hL," \u2014 "),qP=n(hL,"A",{href:!0});var lxe=s(qP);loo=r(lxe,"CTRLConfig"),lxe.forEach(t),ioo=r(hL," (CTRL model)"),hL.forEach(t),doo=i(L),wf=n(L,"LI",{});var uL=s(wf);Ple=n(uL,"STRONG",{});var ixe=s(Ple);coo=r(ixe,"cvt"),ixe.forEach(t),moo=r(uL," \u2014 "),jP=n(uL,"A",{href:!0});var dxe=s(jP);foo=r(dxe,"CvtConfig"),dxe.forEach(t),goo=r(uL," (CvT model)"),uL.forEach(t),hoo=i(L),Af=n(L,"LI",{});var pL=s(Af);Ble=n(pL,"STRONG",{});var cxe=s(Ble);uoo=r(cxe,"data2vec-audio"),cxe.forEach(t),poo=r(pL," \u2014 "),DP=n(pL,"A",{href:!0});var mxe=s(DP);_oo=r(mxe,"Data2VecAudioConfig"),mxe.forEach(t),boo=r(pL," (Data2VecAudio model)"),pL.forEach(t),voo=i(L),Lf=n(L,"LI",{});var _L=s(Lf);Ile=n(_L,"STRONG",{});var fxe=s(Ile);Foo=r(fxe,"data2vec-text"),fxe.forEach(t),Too=r(_L," \u2014 "),GP=n(_L,"A",{href:!0});var gxe=s(GP);Moo=r(gxe,"Data2VecTextConfig"),gxe.forEach(t),Eoo=r(_L," (Data2VecText model)"),_L.forEach(t),Coo=i(L),yf=n(L,"LI",{});var bL=s(yf);Nle=n(bL,"STRONG",{});var hxe=s(Nle);woo=r(hxe,"data2vec-vision"),hxe.forEach(t),Aoo=r(bL," \u2014 "),OP=n(bL,"A",{href:!0});var uxe=s(OP);Loo=r(uxe,"Data2VecVisionConfig"),uxe.forEach(t),yoo=r(bL," (Data2VecVision model)"),bL.forEach(t),xoo=i(L),xf=n(L,"LI",{});var vL=s(xf);qle=n(vL,"STRONG",{});var pxe=s(qle);$oo=r(pxe,"deberta"),pxe.forEach(t),koo=r(vL," \u2014 "),VP=n(vL,"A",{href:!0});var _xe=s(VP);Soo=r(_xe,"DebertaConfig"),_xe.forEach(t),Roo=r(vL," (DeBERTa model)"),vL.forEach(t),Poo=i(L),$f=n(L,"LI",{});var FL=s($f);jle=n(FL,"STRONG",{});var bxe=s(jle);Boo=r(bxe,"deberta-v2"),bxe.forEach(t),Ioo=r(FL," \u2014 "),XP=n(FL,"A",{href:!0});var vxe=s(XP);Noo=r(vxe,"DebertaV2Config"),vxe.forEach(t),qoo=r(FL," (DeBERTa-v2 model)"),FL.forEach(t),joo=i(L),kf=n(L,"LI",{});var TL=s(kf);Dle=n(TL,"STRONG",{});var Fxe=s(Dle);Doo=r(Fxe,"decision_transformer"),Fxe.forEach(t),Goo=r(TL," \u2014 "),zP=n(TL,"A",{href:!0});var Txe=s(zP);Ooo=r(Txe,"DecisionTransformerConfig"),Txe.forEach(t),Voo=r(TL," (Decision Transformer model)"),TL.forEach(t),Xoo=i(L),Sf=n(L,"LI",{});var ML=s(Sf);Gle=n(ML,"STRONG",{});var Mxe=s(Gle);zoo=r(Mxe,"deit"),Mxe.forEach(t),Woo=r(ML," \u2014 "),WP=n(ML,"A",{href:!0});var Mgt=s(WP);Qoo=r(Mgt,"DeiTConfig"),Mgt.forEach(t),Uoo=r(ML," (DeiT model)"),ML.forEach(t),Hoo=i(L),Rf=n(L,"LI",{});var Exe=s(Rf);Ole=n(Exe,"STRONG",{});var Egt=s(Ole);Joo=r(Egt,"detr"),Egt.forEach(t),Yoo=r(Exe," \u2014 "),QP=n(Exe,"A",{href:!0});var Cgt=s(QP);Koo=r(Cgt,"DetrConfig"),Cgt.forEach(t),Zoo=r(Exe," (DETR model)"),Exe.forEach(t),ero=i(L),Pf=n(L,"LI",{});var Cxe=s(Pf);Vle=n(Cxe,"STRONG",{});var wgt=s(Vle);oro=r(wgt,"distilbert"),wgt.forEach(t),rro=r(Cxe," \u2014 "),UP=n(Cxe,"A",{href:!0});var Agt=s(UP);tro=r(Agt,"DistilBertConfig"),Agt.forEach(t),aro=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),nro=i(L),Bf=n(L,"LI",{});var wxe=s(Bf);Xle=n(wxe,"STRONG",{});var Lgt=s(Xle);sro=r(Lgt,"donut-swin"),Lgt.forEach(t),lro=r(wxe," \u2014 "),HP=n(wxe,"A",{href:!0});var ygt=s(HP);iro=r(ygt,"DonutSwinConfig"),ygt.forEach(t),dro=r(wxe," (DonutSwin model)"),wxe.forEach(t),cro=i(L),If=n(L,"LI",{});var Axe=s(If);zle=n(Axe,"STRONG",{});var xgt=s(zle);mro=r(xgt,"dpr"),xgt.forEach(t),fro=r(Axe," \u2014 "),JP=n(Axe,"A",{href:!0});var $gt=s(JP);gro=r($gt,"DPRConfig"),$gt.forEach(t),hro=r(Axe," (DPR model)"),Axe.forEach(t),uro=i(L),Nf=n(L,"LI",{});var Lxe=s(Nf);Wle=n(Lxe,"STRONG",{});var kgt=s(Wle);pro=r(kgt,"dpt"),kgt.forEach(t),_ro=r(Lxe," \u2014 "),YP=n(Lxe,"A",{href:!0});var Sgt=s(YP);bro=r(Sgt,"DPTConfig"),Sgt.forEach(t),vro=r(Lxe," (DPT model)"),Lxe.forEach(t),Fro=i(L),qf=n(L,"LI",{});var yxe=s(qf);Qle=n(yxe,"STRONG",{});var Rgt=s(Qle);Tro=r(Rgt,"electra"),Rgt.forEach(t),Mro=r(yxe," \u2014 "),KP=n(yxe,"A",{href:!0});var Pgt=s(KP);Ero=r(Pgt,"ElectraConfig"),Pgt.forEach(t),Cro=r(yxe," (ELECTRA model)"),yxe.forEach(t),wro=i(L),jf=n(L,"LI",{});var xxe=s(jf);Ule=n(xxe,"STRONG",{});var Bgt=s(Ule);Aro=r(Bgt,"encoder-decoder"),Bgt.forEach(t),Lro=r(xxe," \u2014 "),ZP=n(xxe,"A",{href:!0});var Igt=s(ZP);yro=r(Igt,"EncoderDecoderConfig"),Igt.forEach(t),xro=r(xxe," (Encoder decoder model)"),xxe.forEach(t),$ro=i(L),Df=n(L,"LI",{});var $xe=s(Df);Hle=n($xe,"STRONG",{});var Ngt=s(Hle);kro=r(Ngt,"flaubert"),Ngt.forEach(t),Sro=r($xe," \u2014 "),eB=n($xe,"A",{href:!0});var qgt=s(eB);Rro=r(qgt,"FlaubertConfig"),qgt.forEach(t),Pro=r($xe," (FlauBERT model)"),$xe.forEach(t),Bro=i(L),Gf=n(L,"LI",{});var kxe=s(Gf);Jle=n(kxe,"STRONG",{});var jgt=s(Jle);Iro=r(jgt,"flava"),jgt.forEach(t),Nro=r(kxe," \u2014 "),oB=n(kxe,"A",{href:!0});var Dgt=s(oB);qro=r(Dgt,"FlavaConfig"),Dgt.forEach(t),jro=r(kxe," (FLAVA model)"),kxe.forEach(t),Dro=i(L),Of=n(L,"LI",{});var Sxe=s(Of);Yle=n(Sxe,"STRONG",{});var Ggt=s(Yle);Gro=r(Ggt,"fnet"),Ggt.forEach(t),Oro=r(Sxe," \u2014 "),rB=n(Sxe,"A",{href:!0});var Ogt=s(rB);Vro=r(Ogt,"FNetConfig"),Ogt.forEach(t),Xro=r(Sxe," (FNet model)"),Sxe.forEach(t),zro=i(L),Vf=n(L,"LI",{});var Rxe=s(Vf);Kle=n(Rxe,"STRONG",{});var Vgt=s(Kle);Wro=r(Vgt,"fsmt"),Vgt.forEach(t),Qro=r(Rxe," \u2014 "),tB=n(Rxe,"A",{href:!0});var Xgt=s(tB);Uro=r(Xgt,"FSMTConfig"),Xgt.forEach(t),Hro=r(Rxe," (FairSeq Machine-Translation model)"),Rxe.forEach(t),Jro=i(L),Xf=n(L,"LI",{});var Pxe=s(Xf);Zle=n(Pxe,"STRONG",{});var zgt=s(Zle);Yro=r(zgt,"funnel"),zgt.forEach(t),Kro=r(Pxe," \u2014 "),aB=n(Pxe,"A",{href:!0});var Wgt=s(aB);Zro=r(Wgt,"FunnelConfig"),Wgt.forEach(t),eto=r(Pxe," (Funnel Transformer model)"),Pxe.forEach(t),oto=i(L),zf=n(L,"LI",{});var Bxe=s(zf);eie=n(Bxe,"STRONG",{});var Qgt=s(eie);rto=r(Qgt,"glpn"),Qgt.forEach(t),tto=r(Bxe," \u2014 "),nB=n(Bxe,"A",{href:!0});var Ugt=s(nB);ato=r(Ugt,"GLPNConfig"),Ugt.forEach(t),nto=r(Bxe," (GLPN model)"),Bxe.forEach(t),sto=i(L),Wf=n(L,"LI",{});var Ixe=s(Wf);oie=n(Ixe,"STRONG",{});var Hgt=s(oie);lto=r(Hgt,"gpt2"),Hgt.forEach(t),ito=r(Ixe," \u2014 "),sB=n(Ixe,"A",{href:!0});var Jgt=s(sB);dto=r(Jgt,"GPT2Config"),Jgt.forEach(t),cto=r(Ixe," (OpenAI GPT-2 model)"),Ixe.forEach(t),mto=i(L),Qf=n(L,"LI",{});var Nxe=s(Qf);rie=n(Nxe,"STRONG",{});var Ygt=s(rie);fto=r(Ygt,"gpt_neo"),Ygt.forEach(t),gto=r(Nxe," \u2014 "),lB=n(Nxe,"A",{href:!0});var Kgt=s(lB);hto=r(Kgt,"GPTNeoConfig"),Kgt.forEach(t),uto=r(Nxe," (GPT Neo model)"),Nxe.forEach(t),pto=i(L),Uf=n(L,"LI",{});var qxe=s(Uf);tie=n(qxe,"STRONG",{});var Zgt=s(tie);_to=r(Zgt,"gpt_neox"),Zgt.forEach(t),bto=r(qxe," \u2014 "),iB=n(qxe,"A",{href:!0});var eht=s(iB);vto=r(eht,"GPTNeoXConfig"),eht.forEach(t),Fto=r(qxe," (GPT NeoX model)"),qxe.forEach(t),Tto=i(L),Hf=n(L,"LI",{});var jxe=s(Hf);aie=n(jxe,"STRONG",{});var oht=s(aie);Mto=r(oht,"gptj"),oht.forEach(t),Eto=r(jxe," \u2014 "),dB=n(jxe,"A",{href:!0});var rht=s(dB);Cto=r(rht,"GPTJConfig"),rht.forEach(t),wto=r(jxe," (GPT-J model)"),jxe.forEach(t),Ato=i(L),Jf=n(L,"LI",{});var Dxe=s(Jf);nie=n(Dxe,"STRONG",{});var tht=s(nie);Lto=r(tht,"groupvit"),tht.forEach(t),yto=r(Dxe," \u2014 "),cB=n(Dxe,"A",{href:!0});var aht=s(cB);xto=r(aht,"GroupViTConfig"),aht.forEach(t),$to=r(Dxe," (GroupViT model)"),Dxe.forEach(t),kto=i(L),Yf=n(L,"LI",{});var Gxe=s(Yf);sie=n(Gxe,"STRONG",{});var nht=s(sie);Sto=r(nht,"hubert"),nht.forEach(t),Rto=r(Gxe," \u2014 "),mB=n(Gxe,"A",{href:!0});var sht=s(mB);Pto=r(sht,"HubertConfig"),sht.forEach(t),Bto=r(Gxe," (Hubert model)"),Gxe.forEach(t),Ito=i(L),Kf=n(L,"LI",{});var Oxe=s(Kf);lie=n(Oxe,"STRONG",{});var lht=s(lie);Nto=r(lht,"ibert"),lht.forEach(t),qto=r(Oxe," \u2014 "),fB=n(Oxe,"A",{href:!0});var iht=s(fB);jto=r(iht,"IBertConfig"),iht.forEach(t),Dto=r(Oxe," (I-BERT model)"),Oxe.forEach(t),Gto=i(L),Zf=n(L,"LI",{});var Vxe=s(Zf);iie=n(Vxe,"STRONG",{});var dht=s(iie);Oto=r(dht,"imagegpt"),dht.forEach(t),Vto=r(Vxe," \u2014 "),gB=n(Vxe,"A",{href:!0});var cht=s(gB);Xto=r(cht,"ImageGPTConfig"),cht.forEach(t),zto=r(Vxe," (ImageGPT model)"),Vxe.forEach(t),Wto=i(L),eg=n(L,"LI",{});var Xxe=s(eg);die=n(Xxe,"STRONG",{});var mht=s(die);Qto=r(mht,"layoutlm"),mht.forEach(t),Uto=r(Xxe," \u2014 "),hB=n(Xxe,"A",{href:!0});var fht=s(hB);Hto=r(fht,"LayoutLMConfig"),fht.forEach(t),Jto=r(Xxe," (LayoutLM model)"),Xxe.forEach(t),Yto=i(L),og=n(L,"LI",{});var zxe=s(og);cie=n(zxe,"STRONG",{});var ght=s(cie);Kto=r(ght,"layoutlmv2"),ght.forEach(t),Zto=r(zxe," \u2014 "),uB=n(zxe,"A",{href:!0});var hht=s(uB);eao=r(hht,"LayoutLMv2Config"),hht.forEach(t),oao=r(zxe," (LayoutLMv2 model)"),zxe.forEach(t),rao=i(L),rg=n(L,"LI",{});var Wxe=s(rg);mie=n(Wxe,"STRONG",{});var uht=s(mie);tao=r(uht,"layoutlmv3"),uht.forEach(t),aao=r(Wxe," \u2014 "),pB=n(Wxe,"A",{href:!0});var pht=s(pB);nao=r(pht,"LayoutLMv3Config"),pht.forEach(t),sao=r(Wxe," (LayoutLMv3 model)"),Wxe.forEach(t),lao=i(L),tg=n(L,"LI",{});var Qxe=s(tg);fie=n(Qxe,"STRONG",{});var _ht=s(fie);iao=r(_ht,"led"),_ht.forEach(t),dao=r(Qxe," \u2014 "),_B=n(Qxe,"A",{href:!0});var bht=s(_B);cao=r(bht,"LEDConfig"),bht.forEach(t),mao=r(Qxe," (LED model)"),Qxe.forEach(t),fao=i(L),ag=n(L,"LI",{});var Uxe=s(ag);gie=n(Uxe,"STRONG",{});var vht=s(gie);gao=r(vht,"levit"),vht.forEach(t),hao=r(Uxe," \u2014 "),bB=n(Uxe,"A",{href:!0});var Fht=s(bB);uao=r(Fht,"LevitConfig"),Fht.forEach(t),pao=r(Uxe," (LeViT model)"),Uxe.forEach(t),_ao=i(L),ng=n(L,"LI",{});var Hxe=s(ng);hie=n(Hxe,"STRONG",{});var Tht=s(hie);bao=r(Tht,"longformer"),Tht.forEach(t),vao=r(Hxe," \u2014 "),vB=n(Hxe,"A",{href:!0});var Mht=s(vB);Fao=r(Mht,"LongformerConfig"),Mht.forEach(t),Tao=r(Hxe," (Longformer model)"),Hxe.forEach(t),Mao=i(L),sg=n(L,"LI",{});var Jxe=s(sg);uie=n(Jxe,"STRONG",{});var Eht=s(uie);Eao=r(Eht,"longt5"),Eht.forEach(t),Cao=r(Jxe," \u2014 "),FB=n(Jxe,"A",{href:!0});var Cht=s(FB);wao=r(Cht,"LongT5Config"),Cht.forEach(t),Aao=r(Jxe," (LongT5 model)"),Jxe.forEach(t),Lao=i(L),lg=n(L,"LI",{});var Yxe=s(lg);pie=n(Yxe,"STRONG",{});var wht=s(pie);yao=r(wht,"luke"),wht.forEach(t),xao=r(Yxe," \u2014 "),TB=n(Yxe,"A",{href:!0});var Aht=s(TB);$ao=r(Aht,"LukeConfig"),Aht.forEach(t),kao=r(Yxe," (LUKE model)"),Yxe.forEach(t),Sao=i(L),ig=n(L,"LI",{});var Kxe=s(ig);_ie=n(Kxe,"STRONG",{});var Lht=s(_ie);Rao=r(Lht,"lxmert"),Lht.forEach(t),Pao=r(Kxe," \u2014 "),MB=n(Kxe,"A",{href:!0});var yht=s(MB);Bao=r(yht,"LxmertConfig"),yht.forEach(t),Iao=r(Kxe," (LXMERT model)"),Kxe.forEach(t),Nao=i(L),dg=n(L,"LI",{});var Zxe=s(dg);bie=n(Zxe,"STRONG",{});var xht=s(bie);qao=r(xht,"m2m_100"),xht.forEach(t),jao=r(Zxe," \u2014 "),EB=n(Zxe,"A",{href:!0});var $ht=s(EB);Dao=r($ht,"M2M100Config"),$ht.forEach(t),Gao=r(Zxe," (M2M100 model)"),Zxe.forEach(t),Oao=i(L),cg=n(L,"LI",{});var e$e=s(cg);vie=n(e$e,"STRONG",{});var kht=s(vie);Vao=r(kht,"marian"),kht.forEach(t),Xao=r(e$e," \u2014 "),CB=n(e$e,"A",{href:!0});var Sht=s(CB);zao=r(Sht,"MarianConfig"),Sht.forEach(t),Wao=r(e$e," (Marian model)"),e$e.forEach(t),Qao=i(L),mg=n(L,"LI",{});var o$e=s(mg);Fie=n(o$e,"STRONG",{});var Rht=s(Fie);Uao=r(Rht,"maskformer"),Rht.forEach(t),Hao=r(o$e," \u2014 "),wB=n(o$e,"A",{href:!0});var Pht=s(wB);Jao=r(Pht,"MaskFormerConfig"),Pht.forEach(t),Yao=r(o$e," (MaskFormer model)"),o$e.forEach(t),Kao=i(L),fg=n(L,"LI",{});var r$e=s(fg);Tie=n(r$e,"STRONG",{});var Bht=s(Tie);Zao=r(Bht,"mbart"),Bht.forEach(t),eno=r(r$e," \u2014 "),AB=n(r$e,"A",{href:!0});var Iht=s(AB);ono=r(Iht,"MBartConfig"),Iht.forEach(t),rno=r(r$e," (mBART model)"),r$e.forEach(t),tno=i(L),gg=n(L,"LI",{});var t$e=s(gg);Mie=n(t$e,"STRONG",{});var Nht=s(Mie);ano=r(Nht,"mctct"),Nht.forEach(t),nno=r(t$e," \u2014 "),LB=n(t$e,"A",{href:!0});var qht=s(LB);sno=r(qht,"MCTCTConfig"),qht.forEach(t),lno=r(t$e," (M-CTC-T model)"),t$e.forEach(t),ino=i(L),hg=n(L,"LI",{});var a$e=s(hg);Eie=n(a$e,"STRONG",{});var jht=s(Eie);dno=r(jht,"megatron-bert"),jht.forEach(t),cno=r(a$e," \u2014 "),yB=n(a$e,"A",{href:!0});var Dht=s(yB);mno=r(Dht,"MegatronBertConfig"),Dht.forEach(t),fno=r(a$e," (Megatron-BERT model)"),a$e.forEach(t),gno=i(L),ug=n(L,"LI",{});var n$e=s(ug);Cie=n(n$e,"STRONG",{});var Ght=s(Cie);hno=r(Ght,"mobilebert"),Ght.forEach(t),uno=r(n$e," \u2014 "),xB=n(n$e,"A",{href:!0});var Oht=s(xB);pno=r(Oht,"MobileBertConfig"),Oht.forEach(t),_no=r(n$e," (MobileBERT model)"),n$e.forEach(t),bno=i(L),pg=n(L,"LI",{});var s$e=s(pg);wie=n(s$e,"STRONG",{});var Vht=s(wie);vno=r(Vht,"mobilevit"),Vht.forEach(t),Fno=r(s$e," \u2014 "),$B=n(s$e,"A",{href:!0});var Xht=s($B);Tno=r(Xht,"MobileViTConfig"),Xht.forEach(t),Mno=r(s$e," (MobileViT model)"),s$e.forEach(t),Eno=i(L),_g=n(L,"LI",{});var l$e=s(_g);Aie=n(l$e,"STRONG",{});var zht=s(Aie);Cno=r(zht,"mpnet"),zht.forEach(t),wno=r(l$e," \u2014 "),kB=n(l$e,"A",{href:!0});var Wht=s(kB);Ano=r(Wht,"MPNetConfig"),Wht.forEach(t),Lno=r(l$e," (MPNet model)"),l$e.forEach(t),yno=i(L),bg=n(L,"LI",{});var i$e=s(bg);Lie=n(i$e,"STRONG",{});var Qht=s(Lie);xno=r(Qht,"mt5"),Qht.forEach(t),$no=r(i$e," \u2014 "),SB=n(i$e,"A",{href:!0});var Uht=s(SB);kno=r(Uht,"MT5Config"),Uht.forEach(t),Sno=r(i$e," (MT5 model)"),i$e.forEach(t),Rno=i(L),vg=n(L,"LI",{});var d$e=s(vg);yie=n(d$e,"STRONG",{});var Hht=s(yie);Pno=r(Hht,"mvp"),Hht.forEach(t),Bno=r(d$e," \u2014 "),RB=n(d$e,"A",{href:!0});var Jht=s(RB);Ino=r(Jht,"MvpConfig"),Jht.forEach(t),Nno=r(d$e," (MVP model)"),d$e.forEach(t),qno=i(L),Fg=n(L,"LI",{});var c$e=s(Fg);xie=n(c$e,"STRONG",{});var Yht=s(xie);jno=r(Yht,"nezha"),Yht.forEach(t),Dno=r(c$e," \u2014 "),PB=n(c$e,"A",{href:!0});var Kht=s(PB);Gno=r(Kht,"NezhaConfig"),Kht.forEach(t),Ono=r(c$e," (Nezha model)"),c$e.forEach(t),Vno=i(L),Tg=n(L,"LI",{});var m$e=s(Tg);$ie=n(m$e,"STRONG",{});var Zht=s($ie);Xno=r(Zht,"nystromformer"),Zht.forEach(t),zno=r(m$e," \u2014 "),BB=n(m$e,"A",{href:!0});var eut=s(BB);Wno=r(eut,"NystromformerConfig"),eut.forEach(t),Qno=r(m$e," (Nystr\xF6mformer model)"),m$e.forEach(t),Uno=i(L),Mg=n(L,"LI",{});var f$e=s(Mg);kie=n(f$e,"STRONG",{});var out=s(kie);Hno=r(out,"openai-gpt"),out.forEach(t),Jno=r(f$e," \u2014 "),IB=n(f$e,"A",{href:!0});var rut=s(IB);Yno=r(rut,"OpenAIGPTConfig"),rut.forEach(t),Kno=r(f$e," (OpenAI GPT model)"),f$e.forEach(t),Zno=i(L),Eg=n(L,"LI",{});var g$e=s(Eg);Sie=n(g$e,"STRONG",{});var tut=s(Sie);eso=r(tut,"opt"),tut.forEach(t),oso=r(g$e," \u2014 "),NB=n(g$e,"A",{href:!0});var aut=s(NB);rso=r(aut,"OPTConfig"),aut.forEach(t),tso=r(g$e," (OPT model)"),g$e.forEach(t),aso=i(L),Cg=n(L,"LI",{});var h$e=s(Cg);Rie=n(h$e,"STRONG",{});var nut=s(Rie);nso=r(nut,"owlvit"),nut.forEach(t),sso=r(h$e," \u2014 "),qB=n(h$e,"A",{href:!0});var sut=s(qB);lso=r(sut,"OwlViTConfig"),sut.forEach(t),iso=r(h$e," (OWL-ViT model)"),h$e.forEach(t),dso=i(L),wg=n(L,"LI",{});var u$e=s(wg);Pie=n(u$e,"STRONG",{});var lut=s(Pie);cso=r(lut,"pegasus"),lut.forEach(t),mso=r(u$e," \u2014 "),jB=n(u$e,"A",{href:!0});var iut=s(jB);fso=r(iut,"PegasusConfig"),iut.forEach(t),gso=r(u$e," (Pegasus model)"),u$e.forEach(t),hso=i(L),Ag=n(L,"LI",{});var p$e=s(Ag);Bie=n(p$e,"STRONG",{});var dut=s(Bie);uso=r(dut,"pegasus_x"),dut.forEach(t),pso=r(p$e," \u2014 "),DB=n(p$e,"A",{href:!0});var cut=s(DB);_so=r(cut,"PegasusXConfig"),cut.forEach(t),bso=r(p$e," (PEGASUS-X model)"),p$e.forEach(t),vso=i(L),Lg=n(L,"LI",{});var _$e=s(Lg);Iie=n(_$e,"STRONG",{});var mut=s(Iie);Fso=r(mut,"perceiver"),mut.forEach(t),Tso=r(_$e," \u2014 "),GB=n(_$e,"A",{href:!0});var fut=s(GB);Mso=r(fut,"PerceiverConfig"),fut.forEach(t),Eso=r(_$e," (Perceiver model)"),_$e.forEach(t),Cso=i(L),yg=n(L,"LI",{});var b$e=s(yg);Nie=n(b$e,"STRONG",{});var gut=s(Nie);wso=r(gut,"plbart"),gut.forEach(t),Aso=r(b$e," \u2014 "),OB=n(b$e,"A",{href:!0});var hut=s(OB);Lso=r(hut,"PLBartConfig"),hut.forEach(t),yso=r(b$e," (PLBart model)"),b$e.forEach(t),xso=i(L),xg=n(L,"LI",{});var v$e=s(xg);qie=n(v$e,"STRONG",{});var uut=s(qie);$so=r(uut,"poolformer"),uut.forEach(t),kso=r(v$e," \u2014 "),VB=n(v$e,"A",{href:!0});var put=s(VB);Sso=r(put,"PoolFormerConfig"),put.forEach(t),Rso=r(v$e," (PoolFormer model)"),v$e.forEach(t),Pso=i(L),$g=n(L,"LI",{});var F$e=s($g);jie=n(F$e,"STRONG",{});var _ut=s(jie);Bso=r(_ut,"prophetnet"),_ut.forEach(t),Iso=r(F$e," \u2014 "),XB=n(F$e,"A",{href:!0});var but=s(XB);Nso=r(but,"ProphetNetConfig"),but.forEach(t),qso=r(F$e," (ProphetNet model)"),F$e.forEach(t),jso=i(L),kg=n(L,"LI",{});var T$e=s(kg);Die=n(T$e,"STRONG",{});var vut=s(Die);Dso=r(vut,"qdqbert"),vut.forEach(t),Gso=r(T$e," \u2014 "),zB=n(T$e,"A",{href:!0});var Fut=s(zB);Oso=r(Fut,"QDQBertConfig"),Fut.forEach(t),Vso=r(T$e," (QDQBert model)"),T$e.forEach(t),Xso=i(L),Sg=n(L,"LI",{});var M$e=s(Sg);Gie=n(M$e,"STRONG",{});var Tut=s(Gie);zso=r(Tut,"rag"),Tut.forEach(t),Wso=r(M$e," \u2014 "),WB=n(M$e,"A",{href:!0});var Mut=s(WB);Qso=r(Mut,"RagConfig"),Mut.forEach(t),Uso=r(M$e," (RAG model)"),M$e.forEach(t),Hso=i(L),Rg=n(L,"LI",{});var E$e=s(Rg);Oie=n(E$e,"STRONG",{});var Eut=s(Oie);Jso=r(Eut,"realm"),Eut.forEach(t),Yso=r(E$e," \u2014 "),QB=n(E$e,"A",{href:!0});var Cut=s(QB);Kso=r(Cut,"RealmConfig"),Cut.forEach(t),Zso=r(E$e," (REALM model)"),E$e.forEach(t),elo=i(L),Pg=n(L,"LI",{});var C$e=s(Pg);Vie=n(C$e,"STRONG",{});var wut=s(Vie);olo=r(wut,"reformer"),wut.forEach(t),rlo=r(C$e," \u2014 "),UB=n(C$e,"A",{href:!0});var Aut=s(UB);tlo=r(Aut,"ReformerConfig"),Aut.forEach(t),alo=r(C$e," (Reformer model)"),C$e.forEach(t),nlo=i(L),Bg=n(L,"LI",{});var w$e=s(Bg);Xie=n(w$e,"STRONG",{});var Lut=s(Xie);slo=r(Lut,"regnet"),Lut.forEach(t),llo=r(w$e," \u2014 "),HB=n(w$e,"A",{href:!0});var yut=s(HB);ilo=r(yut,"RegNetConfig"),yut.forEach(t),dlo=r(w$e," (RegNet model)"),w$e.forEach(t),clo=i(L),Ig=n(L,"LI",{});var A$e=s(Ig);zie=n(A$e,"STRONG",{});var xut=s(zie);mlo=r(xut,"rembert"),xut.forEach(t),flo=r(A$e," \u2014 "),JB=n(A$e,"A",{href:!0});var $ut=s(JB);glo=r($ut,"RemBertConfig"),$ut.forEach(t),hlo=r(A$e," (RemBERT model)"),A$e.forEach(t),ulo=i(L),Ng=n(L,"LI",{});var L$e=s(Ng);Wie=n(L$e,"STRONG",{});var kut=s(Wie);plo=r(kut,"resnet"),kut.forEach(t),_lo=r(L$e," \u2014 "),YB=n(L$e,"A",{href:!0});var Sut=s(YB);blo=r(Sut,"ResNetConfig"),Sut.forEach(t),vlo=r(L$e," (ResNet model)"),L$e.forEach(t),Flo=i(L),qg=n(L,"LI",{});var y$e=s(qg);Qie=n(y$e,"STRONG",{});var Rut=s(Qie);Tlo=r(Rut,"retribert"),Rut.forEach(t),Mlo=r(y$e," \u2014 "),KB=n(y$e,"A",{href:!0});var Put=s(KB);Elo=r(Put,"RetriBertConfig"),Put.forEach(t),Clo=r(y$e," (RetriBERT model)"),y$e.forEach(t),wlo=i(L),jg=n(L,"LI",{});var x$e=s(jg);Uie=n(x$e,"STRONG",{});var But=s(Uie);Alo=r(But,"roberta"),But.forEach(t),Llo=r(x$e," \u2014 "),ZB=n(x$e,"A",{href:!0});var Iut=s(ZB);ylo=r(Iut,"RobertaConfig"),Iut.forEach(t),xlo=r(x$e," (RoBERTa model)"),x$e.forEach(t),$lo=i(L),Dg=n(L,"LI",{});var $$e=s(Dg);Hie=n($$e,"STRONG",{});var Nut=s(Hie);klo=r(Nut,"roformer"),Nut.forEach(t),Slo=r($$e," \u2014 "),eI=n($$e,"A",{href:!0});var qut=s(eI);Rlo=r(qut,"RoFormerConfig"),qut.forEach(t),Plo=r($$e," (RoFormer model)"),$$e.forEach(t),Blo=i(L),Gg=n(L,"LI",{});var k$e=s(Gg);Jie=n(k$e,"STRONG",{});var jut=s(Jie);Ilo=r(jut,"segformer"),jut.forEach(t),Nlo=r(k$e," \u2014 "),oI=n(k$e,"A",{href:!0});var Dut=s(oI);qlo=r(Dut,"SegformerConfig"),Dut.forEach(t),jlo=r(k$e," (SegFormer model)"),k$e.forEach(t),Dlo=i(L),Og=n(L,"LI",{});var S$e=s(Og);Yie=n(S$e,"STRONG",{});var Gut=s(Yie);Glo=r(Gut,"sew"),Gut.forEach(t),Olo=r(S$e," \u2014 "),rI=n(S$e,"A",{href:!0});var Out=s(rI);Vlo=r(Out,"SEWConfig"),Out.forEach(t),Xlo=r(S$e," (SEW model)"),S$e.forEach(t),zlo=i(L),Vg=n(L,"LI",{});var R$e=s(Vg);Kie=n(R$e,"STRONG",{});var Vut=s(Kie);Wlo=r(Vut,"sew-d"),Vut.forEach(t),Qlo=r(R$e," \u2014 "),tI=n(R$e,"A",{href:!0});var Xut=s(tI);Ulo=r(Xut,"SEWDConfig"),Xut.forEach(t),Hlo=r(R$e," (SEW-D model)"),R$e.forEach(t),Jlo=i(L),Xg=n(L,"LI",{});var P$e=s(Xg);Zie=n(P$e,"STRONG",{});var zut=s(Zie);Ylo=r(zut,"speech-encoder-decoder"),zut.forEach(t),Klo=r(P$e," \u2014 "),aI=n(P$e,"A",{href:!0});var Wut=s(aI);Zlo=r(Wut,"SpeechEncoderDecoderConfig"),Wut.forEach(t),eio=r(P$e," (Speech Encoder decoder model)"),P$e.forEach(t),oio=i(L),zg=n(L,"LI",{});var B$e=s(zg);ede=n(B$e,"STRONG",{});var Qut=s(ede);rio=r(Qut,"speech_to_text"),Qut.forEach(t),tio=r(B$e," \u2014 "),nI=n(B$e,"A",{href:!0});var Uut=s(nI);aio=r(Uut,"Speech2TextConfig"),Uut.forEach(t),nio=r(B$e," (Speech2Text model)"),B$e.forEach(t),sio=i(L),Wg=n(L,"LI",{});var I$e=s(Wg);ode=n(I$e,"STRONG",{});var Hut=s(ode);lio=r(Hut,"speech_to_text_2"),Hut.forEach(t),iio=r(I$e," \u2014 "),sI=n(I$e,"A",{href:!0});var Jut=s(sI);dio=r(Jut,"Speech2Text2Config"),Jut.forEach(t),cio=r(I$e," (Speech2Text2 model)"),I$e.forEach(t),mio=i(L),Qg=n(L,"LI",{});var N$e=s(Qg);rde=n(N$e,"STRONG",{});var Yut=s(rde);fio=r(Yut,"splinter"),Yut.forEach(t),gio=r(N$e," \u2014 "),lI=n(N$e,"A",{href:!0});var Kut=s(lI);hio=r(Kut,"SplinterConfig"),Kut.forEach(t),uio=r(N$e," (Splinter model)"),N$e.forEach(t),pio=i(L),Ug=n(L,"LI",{});var q$e=s(Ug);tde=n(q$e,"STRONG",{});var Zut=s(tde);_io=r(Zut,"squeezebert"),Zut.forEach(t),bio=r(q$e," \u2014 "),iI=n(q$e,"A",{href:!0});var ept=s(iI);vio=r(ept,"SqueezeBertConfig"),ept.forEach(t),Fio=r(q$e," (SqueezeBERT model)"),q$e.forEach(t),Tio=i(L),Hg=n(L,"LI",{});var j$e=s(Hg);ade=n(j$e,"STRONG",{});var opt=s(ade);Mio=r(opt,"swin"),opt.forEach(t),Eio=r(j$e," \u2014 "),dI=n(j$e,"A",{href:!0});var rpt=s(dI);Cio=r(rpt,"SwinConfig"),rpt.forEach(t),wio=r(j$e," (Swin Transformer model)"),j$e.forEach(t),Aio=i(L),Jg=n(L,"LI",{});var D$e=s(Jg);nde=n(D$e,"STRONG",{});var tpt=s(nde);Lio=r(tpt,"swinv2"),tpt.forEach(t),yio=r(D$e," \u2014 "),cI=n(D$e,"A",{href:!0});var apt=s(cI);xio=r(apt,"Swinv2Config"),apt.forEach(t),$io=r(D$e," (Swin Transformer V2 model)"),D$e.forEach(t),kio=i(L),Yg=n(L,"LI",{});var G$e=s(Yg);sde=n(G$e,"STRONG",{});var npt=s(sde);Sio=r(npt,"t5"),npt.forEach(t),Rio=r(G$e," \u2014 "),mI=n(G$e,"A",{href:!0});var spt=s(mI);Pio=r(spt,"T5Config"),spt.forEach(t),Bio=r(G$e," (T5 model)"),G$e.forEach(t),Iio=i(L),Kg=n(L,"LI",{});var O$e=s(Kg);lde=n(O$e,"STRONG",{});var lpt=s(lde);Nio=r(lpt,"tapas"),lpt.forEach(t),qio=r(O$e," \u2014 "),fI=n(O$e,"A",{href:!0});var ipt=s(fI);jio=r(ipt,"TapasConfig"),ipt.forEach(t),Dio=r(O$e," (TAPAS model)"),O$e.forEach(t),Gio=i(L),Zg=n(L,"LI",{});var V$e=s(Zg);ide=n(V$e,"STRONG",{});var dpt=s(ide);Oio=r(dpt,"trajectory_transformer"),dpt.forEach(t),Vio=r(V$e," \u2014 "),gI=n(V$e,"A",{href:!0});var cpt=s(gI);Xio=r(cpt,"TrajectoryTransformerConfig"),cpt.forEach(t),zio=r(V$e," (Trajectory Transformer model)"),V$e.forEach(t),Wio=i(L),eh=n(L,"LI",{});var X$e=s(eh);dde=n(X$e,"STRONG",{});var mpt=s(dde);Qio=r(mpt,"transfo-xl"),mpt.forEach(t),Uio=r(X$e," \u2014 "),hI=n(X$e,"A",{href:!0});var fpt=s(hI);Hio=r(fpt,"TransfoXLConfig"),fpt.forEach(t),Jio=r(X$e," (Transformer-XL model)"),X$e.forEach(t),Yio=i(L),oh=n(L,"LI",{});var z$e=s(oh);cde=n(z$e,"STRONG",{});var gpt=s(cde);Kio=r(gpt,"trocr"),gpt.forEach(t),Zio=r(z$e," \u2014 "),uI=n(z$e,"A",{href:!0});var hpt=s(uI);edo=r(hpt,"TrOCRConfig"),hpt.forEach(t),odo=r(z$e," (TrOCR model)"),z$e.forEach(t),rdo=i(L),rh=n(L,"LI",{});var W$e=s(rh);mde=n(W$e,"STRONG",{});var upt=s(mde);tdo=r(upt,"unispeech"),upt.forEach(t),ado=r(W$e," \u2014 "),pI=n(W$e,"A",{href:!0});var ppt=s(pI);ndo=r(ppt,"UniSpeechConfig"),ppt.forEach(t),sdo=r(W$e," (UniSpeech model)"),W$e.forEach(t),ldo=i(L),th=n(L,"LI",{});var Q$e=s(th);fde=n(Q$e,"STRONG",{});var _pt=s(fde);ido=r(_pt,"unispeech-sat"),_pt.forEach(t),ddo=r(Q$e," \u2014 "),_I=n(Q$e,"A",{href:!0});var bpt=s(_I);cdo=r(bpt,"UniSpeechSatConfig"),bpt.forEach(t),mdo=r(Q$e," (UniSpeechSat model)"),Q$e.forEach(t),fdo=i(L),ah=n(L,"LI",{});var U$e=s(ah);gde=n(U$e,"STRONG",{});var vpt=s(gde);gdo=r(vpt,"van"),vpt.forEach(t),hdo=r(U$e," \u2014 "),bI=n(U$e,"A",{href:!0});var Fpt=s(bI);udo=r(Fpt,"VanConfig"),Fpt.forEach(t),pdo=r(U$e," (VAN model)"),U$e.forEach(t),_do=i(L),nh=n(L,"LI",{});var H$e=s(nh);hde=n(H$e,"STRONG",{});var Tpt=s(hde);bdo=r(Tpt,"videomae"),Tpt.forEach(t),vdo=r(H$e," \u2014 "),vI=n(H$e,"A",{href:!0});var Mpt=s(vI);Fdo=r(Mpt,"VideoMAEConfig"),Mpt.forEach(t),Tdo=r(H$e," (VideoMAE model)"),H$e.forEach(t),Mdo=i(L),sh=n(L,"LI",{});var J$e=s(sh);ude=n(J$e,"STRONG",{});var Ept=s(ude);Edo=r(Ept,"vilt"),Ept.forEach(t),Cdo=r(J$e," \u2014 "),FI=n(J$e,"A",{href:!0});var Cpt=s(FI);wdo=r(Cpt,"ViltConfig"),Cpt.forEach(t),Ado=r(J$e," (ViLT model)"),J$e.forEach(t),Ldo=i(L),lh=n(L,"LI",{});var Y$e=s(lh);pde=n(Y$e,"STRONG",{});var wpt=s(pde);ydo=r(wpt,"vision-encoder-decoder"),wpt.forEach(t),xdo=r(Y$e," \u2014 "),TI=n(Y$e,"A",{href:!0});var Apt=s(TI);$do=r(Apt,"VisionEncoderDecoderConfig"),Apt.forEach(t),kdo=r(Y$e," (Vision Encoder decoder model)"),Y$e.forEach(t),Sdo=i(L),ih=n(L,"LI",{});var K$e=s(ih);_de=n(K$e,"STRONG",{});var Lpt=s(_de);Rdo=r(Lpt,"vision-text-dual-encoder"),Lpt.forEach(t),Pdo=r(K$e," \u2014 "),MI=n(K$e,"A",{href:!0});var ypt=s(MI);Bdo=r(ypt,"VisionTextDualEncoderConfig"),ypt.forEach(t),Ido=r(K$e," (VisionTextDualEncoder model)"),K$e.forEach(t),Ndo=i(L),dh=n(L,"LI",{});var Z$e=s(dh);bde=n(Z$e,"STRONG",{});var xpt=s(bde);qdo=r(xpt,"visual_bert"),xpt.forEach(t),jdo=r(Z$e," \u2014 "),EI=n(Z$e,"A",{href:!0});var $pt=s(EI);Ddo=r($pt,"VisualBertConfig"),$pt.forEach(t),Gdo=r(Z$e," (VisualBERT model)"),Z$e.forEach(t),Odo=i(L),ch=n(L,"LI",{});var eke=s(ch);vde=n(eke,"STRONG",{});var kpt=s(vde);Vdo=r(kpt,"vit"),kpt.forEach(t),Xdo=r(eke," \u2014 "),CI=n(eke,"A",{href:!0});var Spt=s(CI);zdo=r(Spt,"ViTConfig"),Spt.forEach(t),Wdo=r(eke," (ViT model)"),eke.forEach(t),Qdo=i(L),mh=n(L,"LI",{});var oke=s(mh);Fde=n(oke,"STRONG",{});var Rpt=s(Fde);Udo=r(Rpt,"vit_mae"),Rpt.forEach(t),Hdo=r(oke," \u2014 "),wI=n(oke,"A",{href:!0});var Ppt=s(wI);Jdo=r(Ppt,"ViTMAEConfig"),Ppt.forEach(t),Ydo=r(oke," (ViTMAE model)"),oke.forEach(t),Kdo=i(L),fh=n(L,"LI",{});var rke=s(fh);Tde=n(rke,"STRONG",{});var Bpt=s(Tde);Zdo=r(Bpt,"wav2vec2"),Bpt.forEach(t),eco=r(rke," \u2014 "),AI=n(rke,"A",{href:!0});var Ipt=s(AI);oco=r(Ipt,"Wav2Vec2Config"),Ipt.forEach(t),rco=r(rke," (Wav2Vec2 model)"),rke.forEach(t),tco=i(L),gh=n(L,"LI",{});var tke=s(gh);Mde=n(tke,"STRONG",{});var Npt=s(Mde);aco=r(Npt,"wav2vec2-conformer"),Npt.forEach(t),nco=r(tke," \u2014 "),LI=n(tke,"A",{href:!0});var qpt=s(LI);sco=r(qpt,"Wav2Vec2ConformerConfig"),qpt.forEach(t),lco=r(tke," (Wav2Vec2-Conformer model)"),tke.forEach(t),ico=i(L),hh=n(L,"LI",{});var ake=s(hh);Ede=n(ake,"STRONG",{});var jpt=s(Ede);dco=r(jpt,"wavlm"),jpt.forEach(t),cco=r(ake," \u2014 "),yI=n(ake,"A",{href:!0});var Dpt=s(yI);mco=r(Dpt,"WavLMConfig"),Dpt.forEach(t),fco=r(ake," (WavLM model)"),ake.forEach(t),gco=i(L),uh=n(L,"LI",{});var nke=s(uh);Cde=n(nke,"STRONG",{});var Gpt=s(Cde);hco=r(Gpt,"xglm"),Gpt.forEach(t),uco=r(nke," \u2014 "),xI=n(nke,"A",{href:!0});var Opt=s(xI);pco=r(Opt,"XGLMConfig"),Opt.forEach(t),_co=r(nke," (XGLM model)"),nke.forEach(t),bco=i(L),ph=n(L,"LI",{});var ske=s(ph);wde=n(ske,"STRONG",{});var Vpt=s(wde);vco=r(Vpt,"xlm"),Vpt.forEach(t),Fco=r(ske," \u2014 "),$I=n(ske,"A",{href:!0});var Xpt=s($I);Tco=r(Xpt,"XLMConfig"),Xpt.forEach(t),Mco=r(ske," (XLM model)"),ske.forEach(t),Eco=i(L),_h=n(L,"LI",{});var lke=s(_h);Ade=n(lke,"STRONG",{});var zpt=s(Ade);Cco=r(zpt,"xlm-prophetnet"),zpt.forEach(t),wco=r(lke," \u2014 "),kI=n(lke,"A",{href:!0});var Wpt=s(kI);Aco=r(Wpt,"XLMProphetNetConfig"),Wpt.forEach(t),Lco=r(lke," (XLM-ProphetNet model)"),lke.forEach(t),yco=i(L),bh=n(L,"LI",{});var ike=s(bh);Lde=n(ike,"STRONG",{});var Qpt=s(Lde);xco=r(Qpt,"xlm-roberta"),Qpt.forEach(t),$co=r(ike," \u2014 "),SI=n(ike,"A",{href:!0});var Upt=s(SI);kco=r(Upt,"XLMRobertaConfig"),Upt.forEach(t),Sco=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),Rco=i(L),vh=n(L,"LI",{});var dke=s(vh);yde=n(dke,"STRONG",{});var Hpt=s(yde);Pco=r(Hpt,"xlm-roberta-xl"),Hpt.forEach(t),Bco=r(dke," \u2014 "),RI=n(dke,"A",{href:!0});var Jpt=s(RI);Ico=r(Jpt,"XLMRobertaXLConfig"),Jpt.forEach(t),Nco=r(dke," (XLM-RoBERTa-XL model)"),dke.forEach(t),qco=i(L),Fh=n(L,"LI",{});var cke=s(Fh);xde=n(cke,"STRONG",{});var Ypt=s(xde);jco=r(Ypt,"xlnet"),Ypt.forEach(t),Dco=r(cke," \u2014 "),PI=n(cke,"A",{href:!0});var Kpt=s(PI);Gco=r(Kpt,"XLNetConfig"),Kpt.forEach(t),Oco=r(cke," (XLNet model)"),cke.forEach(t),Vco=i(L),Th=n(L,"LI",{});var mke=s(Th);$de=n(mke,"STRONG",{});var Zpt=s($de);Xco=r(Zpt,"yolos"),Zpt.forEach(t),zco=r(mke," \u2014 "),BI=n(mke,"A",{href:!0});var e_t=s(BI);Wco=r(e_t,"YolosConfig"),e_t.forEach(t),Qco=r(mke," (YOLOS model)"),mke.forEach(t),Uco=i(L),Mh=n(L,"LI",{});var fke=s(Mh);kde=n(fke,"STRONG",{});var o_t=s(kde);Hco=r(o_t,"yoso"),o_t.forEach(t),Jco=r(fke," \u2014 "),II=n(fke,"A",{href:!0});var r_t=s(II);Yco=r(r_t,"YosoConfig"),r_t.forEach(t),Kco=r(fke," (YOSO model)"),fke.forEach(t),L.forEach(t),Zco=i(ct),T(Eh.$$.fragment,ct),ct.forEach(t),emo=i(dt),Ch=n(dt,"DIV",{class:!0});var zJe=s(Ch);T(R8.$$.fragment,zJe),omo=i(zJe),Sde=n(zJe,"P",{});var t_t=s(Sde);rmo=r(t_t,"Register a new configuration for this class."),t_t.forEach(t),zJe.forEach(t),dt.forEach(t),OUe=i(m),Ki=n(m,"H2",{class:!0});var WJe=s(Ki);wh=n(WJe,"A",{id:!0,class:!0,href:!0});var a_t=s(wh);Rde=n(a_t,"SPAN",{});var n_t=s(Rde);T(P8.$$.fragment,n_t),n_t.forEach(t),a_t.forEach(t),tmo=i(WJe),Pde=n(WJe,"SPAN",{});var s_t=s(Pde);amo=r(s_t,"AutoTokenizer"),s_t.forEach(t),WJe.forEach(t),VUe=i(m),xo=n(m,"DIV",{class:!0});var cl=s(xo);T(B8.$$.fragment,cl),nmo=i(cl),I8=n(cl,"P",{});var QJe=s(I8);smo=r(QJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NI=n(QJe,"A",{href:!0});var l_t=s(NI);lmo=r(l_t,"AutoTokenizer.from_pretrained()"),l_t.forEach(t),imo=r(QJe," class method."),QJe.forEach(t),dmo=i(cl),N8=n(cl,"P",{});var UJe=s(N8);cmo=r(UJe,"This class cannot be instantiated directly using "),Bde=n(UJe,"CODE",{});var i_t=s(Bde);mmo=r(i_t,"__init__()"),i_t.forEach(t),fmo=r(UJe," (throws an error)."),UJe.forEach(t),gmo=i(cl),Sr=n(cl,"DIV",{class:!0});var ml=s(Sr);T(q8.$$.fragment,ml),hmo=i(ml),Ide=n(ml,"P",{});var d_t=s(Ide);umo=r(d_t,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),d_t.forEach(t),pmo=i(ml),Ga=n(ml,"P",{});var EL=s(Ga);_mo=r(EL,"The tokenizer class to instantiate is selected based on the "),Nde=n(EL,"CODE",{});var c_t=s(Nde);bmo=r(c_t,"model_type"),c_t.forEach(t),vmo=r(EL,` property of the config object (either
passed as an argument or loaded from `),qde=n(EL,"CODE",{});var m_t=s(qde);Fmo=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),Tmo=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=n(EL,"CODE",{});var f_t=s(jde);Mmo=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),Emo=r(EL,":"),EL.forEach(t),Cmo=i(ml),k=n(ml,"UL",{});var S=s(k);Hn=n(S,"LI",{});var eR=s(Hn);Dde=n(eR,"STRONG",{});var g_t=s(Dde);wmo=r(g_t,"albert"),g_t.forEach(t),Amo=r(eR," \u2014 "),qI=n(eR,"A",{href:!0});var h_t=s(qI);Lmo=r(h_t,"AlbertTokenizer"),h_t.forEach(t),ymo=r(eR," or "),jI=n(eR,"A",{href:!0});var u_t=s(jI);xmo=r(u_t,"AlbertTokenizerFast"),u_t.forEach(t),$mo=r(eR," (ALBERT model)"),eR.forEach(t),kmo=i(S),Jn=n(S,"LI",{});var oR=s(Jn);Gde=n(oR,"STRONG",{});var p_t=s(Gde);Smo=r(p_t,"bart"),p_t.forEach(t),Rmo=r(oR," \u2014 "),DI=n(oR,"A",{href:!0});var __t=s(DI);Pmo=r(__t,"BartTokenizer"),__t.forEach(t),Bmo=r(oR," or "),GI=n(oR,"A",{href:!0});var b_t=s(GI);Imo=r(b_t,"BartTokenizerFast"),b_t.forEach(t),Nmo=r(oR," (BART model)"),oR.forEach(t),qmo=i(S),Yn=n(S,"LI",{});var rR=s(Yn);Ode=n(rR,"STRONG",{});var v_t=s(Ode);jmo=r(v_t,"barthez"),v_t.forEach(t),Dmo=r(rR," \u2014 "),OI=n(rR,"A",{href:!0});var F_t=s(OI);Gmo=r(F_t,"BarthezTokenizer"),F_t.forEach(t),Omo=r(rR," or "),VI=n(rR,"A",{href:!0});var T_t=s(VI);Vmo=r(T_t,"BarthezTokenizerFast"),T_t.forEach(t),Xmo=r(rR," (BARThez model)"),rR.forEach(t),zmo=i(S),Ah=n(S,"LI",{});var gke=s(Ah);Vde=n(gke,"STRONG",{});var M_t=s(Vde);Wmo=r(M_t,"bartpho"),M_t.forEach(t),Qmo=r(gke," \u2014 "),XI=n(gke,"A",{href:!0});var E_t=s(XI);Umo=r(E_t,"BartphoTokenizer"),E_t.forEach(t),Hmo=r(gke," (BARTpho model)"),gke.forEach(t),Jmo=i(S),Kn=n(S,"LI",{});var tR=s(Kn);Xde=n(tR,"STRONG",{});var C_t=s(Xde);Ymo=r(C_t,"bert"),C_t.forEach(t),Kmo=r(tR," \u2014 "),zI=n(tR,"A",{href:!0});var w_t=s(zI);Zmo=r(w_t,"BertTokenizer"),w_t.forEach(t),efo=r(tR," or "),WI=n(tR,"A",{href:!0});var A_t=s(WI);ofo=r(A_t,"BertTokenizerFast"),A_t.forEach(t),rfo=r(tR," (BERT model)"),tR.forEach(t),tfo=i(S),Lh=n(S,"LI",{});var hke=s(Lh);zde=n(hke,"STRONG",{});var L_t=s(zde);afo=r(L_t,"bert-generation"),L_t.forEach(t),nfo=r(hke," \u2014 "),QI=n(hke,"A",{href:!0});var y_t=s(QI);sfo=r(y_t,"BertGenerationTokenizer"),y_t.forEach(t),lfo=r(hke," (Bert Generation model)"),hke.forEach(t),ifo=i(S),yh=n(S,"LI",{});var uke=s(yh);Wde=n(uke,"STRONG",{});var x_t=s(Wde);dfo=r(x_t,"bert-japanese"),x_t.forEach(t),cfo=r(uke," \u2014 "),UI=n(uke,"A",{href:!0});var $_t=s(UI);mfo=r($_t,"BertJapaneseTokenizer"),$_t.forEach(t),ffo=r(uke," (BertJapanese model)"),uke.forEach(t),gfo=i(S),xh=n(S,"LI",{});var pke=s(xh);Qde=n(pke,"STRONG",{});var k_t=s(Qde);hfo=r(k_t,"bertweet"),k_t.forEach(t),ufo=r(pke," \u2014 "),HI=n(pke,"A",{href:!0});var S_t=s(HI);pfo=r(S_t,"BertweetTokenizer"),S_t.forEach(t),_fo=r(pke," (BERTweet model)"),pke.forEach(t),bfo=i(S),Zn=n(S,"LI",{});var aR=s(Zn);Ude=n(aR,"STRONG",{});var R_t=s(Ude);vfo=r(R_t,"big_bird"),R_t.forEach(t),Ffo=r(aR," \u2014 "),JI=n(aR,"A",{href:!0});var P_t=s(JI);Tfo=r(P_t,"BigBirdTokenizer"),P_t.forEach(t),Mfo=r(aR," or "),YI=n(aR,"A",{href:!0});var B_t=s(YI);Efo=r(B_t,"BigBirdTokenizerFast"),B_t.forEach(t),Cfo=r(aR," (BigBird model)"),aR.forEach(t),wfo=i(S),es=n(S,"LI",{});var nR=s(es);Hde=n(nR,"STRONG",{});var I_t=s(Hde);Afo=r(I_t,"bigbird_pegasus"),I_t.forEach(t),Lfo=r(nR," \u2014 "),KI=n(nR,"A",{href:!0});var N_t=s(KI);yfo=r(N_t,"PegasusTokenizer"),N_t.forEach(t),xfo=r(nR," or "),ZI=n(nR,"A",{href:!0});var q_t=s(ZI);$fo=r(q_t,"PegasusTokenizerFast"),q_t.forEach(t),kfo=r(nR," (BigBird-Pegasus model)"),nR.forEach(t),Sfo=i(S),os=n(S,"LI",{});var sR=s(os);Jde=n(sR,"STRONG",{});var j_t=s(Jde);Rfo=r(j_t,"blenderbot"),j_t.forEach(t),Pfo=r(sR," \u2014 "),eN=n(sR,"A",{href:!0});var D_t=s(eN);Bfo=r(D_t,"BlenderbotTokenizer"),D_t.forEach(t),Ifo=r(sR," or "),oN=n(sR,"A",{href:!0});var G_t=s(oN);Nfo=r(G_t,"BlenderbotTokenizerFast"),G_t.forEach(t),qfo=r(sR," (Blenderbot model)"),sR.forEach(t),jfo=i(S),$h=n(S,"LI",{});var _ke=s($h);Yde=n(_ke,"STRONG",{});var O_t=s(Yde);Dfo=r(O_t,"blenderbot-small"),O_t.forEach(t),Gfo=r(_ke," \u2014 "),rN=n(_ke,"A",{href:!0});var V_t=s(rN);Ofo=r(V_t,"BlenderbotSmallTokenizer"),V_t.forEach(t),Vfo=r(_ke," (BlenderbotSmall model)"),_ke.forEach(t),Xfo=i(S),kh=n(S,"LI",{});var bke=s(kh);Kde=n(bke,"STRONG",{});var X_t=s(Kde);zfo=r(X_t,"bloom"),X_t.forEach(t),Wfo=r(bke," \u2014 "),tN=n(bke,"A",{href:!0});var z_t=s(tN);Qfo=r(z_t,"BloomTokenizerFast"),z_t.forEach(t),Ufo=r(bke," (BLOOM model)"),bke.forEach(t),Hfo=i(S),Sh=n(S,"LI",{});var vke=s(Sh);Zde=n(vke,"STRONG",{});var W_t=s(Zde);Jfo=r(W_t,"byt5"),W_t.forEach(t),Yfo=r(vke," \u2014 "),aN=n(vke,"A",{href:!0});var Q_t=s(aN);Kfo=r(Q_t,"ByT5Tokenizer"),Q_t.forEach(t),Zfo=r(vke," (ByT5 model)"),vke.forEach(t),ego=i(S),rs=n(S,"LI",{});var lR=s(rs);ece=n(lR,"STRONG",{});var U_t=s(ece);ogo=r(U_t,"camembert"),U_t.forEach(t),rgo=r(lR," \u2014 "),nN=n(lR,"A",{href:!0});var H_t=s(nN);tgo=r(H_t,"CamembertTokenizer"),H_t.forEach(t),ago=r(lR," or "),sN=n(lR,"A",{href:!0});var J_t=s(sN);ngo=r(J_t,"CamembertTokenizerFast"),J_t.forEach(t),sgo=r(lR," (CamemBERT model)"),lR.forEach(t),lgo=i(S),Rh=n(S,"LI",{});var Fke=s(Rh);oce=n(Fke,"STRONG",{});var Y_t=s(oce);igo=r(Y_t,"canine"),Y_t.forEach(t),dgo=r(Fke," \u2014 "),lN=n(Fke,"A",{href:!0});var K_t=s(lN);cgo=r(K_t,"CanineTokenizer"),K_t.forEach(t),mgo=r(Fke," (CANINE model)"),Fke.forEach(t),fgo=i(S),ts=n(S,"LI",{});var iR=s(ts);rce=n(iR,"STRONG",{});var Z_t=s(rce);ggo=r(Z_t,"clip"),Z_t.forEach(t),hgo=r(iR," \u2014 "),iN=n(iR,"A",{href:!0});var e2t=s(iN);ugo=r(e2t,"CLIPTokenizer"),e2t.forEach(t),pgo=r(iR," or "),dN=n(iR,"A",{href:!0});var o2t=s(dN);_go=r(o2t,"CLIPTokenizerFast"),o2t.forEach(t),bgo=r(iR," (CLIP model)"),iR.forEach(t),vgo=i(S),as=n(S,"LI",{});var dR=s(as);tce=n(dR,"STRONG",{});var r2t=s(tce);Fgo=r(r2t,"codegen"),r2t.forEach(t),Tgo=r(dR," \u2014 "),cN=n(dR,"A",{href:!0});var t2t=s(cN);Mgo=r(t2t,"CodeGenTokenizer"),t2t.forEach(t),Ego=r(dR," or "),mN=n(dR,"A",{href:!0});var a2t=s(mN);Cgo=r(a2t,"CodeGenTokenizerFast"),a2t.forEach(t),wgo=r(dR," (CodeGen model)"),dR.forEach(t),Ago=i(S),ns=n(S,"LI",{});var cR=s(ns);ace=n(cR,"STRONG",{});var n2t=s(ace);Lgo=r(n2t,"convbert"),n2t.forEach(t),ygo=r(cR," \u2014 "),fN=n(cR,"A",{href:!0});var s2t=s(fN);xgo=r(s2t,"ConvBertTokenizer"),s2t.forEach(t),$go=r(cR," or "),gN=n(cR,"A",{href:!0});var l2t=s(gN);kgo=r(l2t,"ConvBertTokenizerFast"),l2t.forEach(t),Sgo=r(cR," (ConvBERT model)"),cR.forEach(t),Rgo=i(S),ss=n(S,"LI",{});var mR=s(ss);nce=n(mR,"STRONG",{});var i2t=s(nce);Pgo=r(i2t,"cpm"),i2t.forEach(t),Bgo=r(mR," \u2014 "),hN=n(mR,"A",{href:!0});var d2t=s(hN);Igo=r(d2t,"CpmTokenizer"),d2t.forEach(t),Ngo=r(mR," or "),uN=n(mR,"A",{href:!0});var c2t=s(uN);qgo=r(c2t,"CpmTokenizerFast"),c2t.forEach(t),jgo=r(mR," (CPM model)"),mR.forEach(t),Dgo=i(S),Ph=n(S,"LI",{});var Tke=s(Ph);sce=n(Tke,"STRONG",{});var m2t=s(sce);Ggo=r(m2t,"ctrl"),m2t.forEach(t),Ogo=r(Tke," \u2014 "),pN=n(Tke,"A",{href:!0});var f2t=s(pN);Vgo=r(f2t,"CTRLTokenizer"),f2t.forEach(t),Xgo=r(Tke," (CTRL model)"),Tke.forEach(t),zgo=i(S),ls=n(S,"LI",{});var fR=s(ls);lce=n(fR,"STRONG",{});var g2t=s(lce);Wgo=r(g2t,"data2vec-text"),g2t.forEach(t),Qgo=r(fR," \u2014 "),_N=n(fR,"A",{href:!0});var h2t=s(_N);Ugo=r(h2t,"RobertaTokenizer"),h2t.forEach(t),Hgo=r(fR," or "),bN=n(fR,"A",{href:!0});var u2t=s(bN);Jgo=r(u2t,"RobertaTokenizerFast"),u2t.forEach(t),Ygo=r(fR," (Data2VecText model)"),fR.forEach(t),Kgo=i(S),is=n(S,"LI",{});var gR=s(is);ice=n(gR,"STRONG",{});var p2t=s(ice);Zgo=r(p2t,"deberta"),p2t.forEach(t),eho=r(gR," \u2014 "),vN=n(gR,"A",{href:!0});var _2t=s(vN);oho=r(_2t,"DebertaTokenizer"),_2t.forEach(t),rho=r(gR," or "),FN=n(gR,"A",{href:!0});var b2t=s(FN);tho=r(b2t,"DebertaTokenizerFast"),b2t.forEach(t),aho=r(gR," (DeBERTa model)"),gR.forEach(t),nho=i(S),ds=n(S,"LI",{});var hR=s(ds);dce=n(hR,"STRONG",{});var v2t=s(dce);sho=r(v2t,"deberta-v2"),v2t.forEach(t),lho=r(hR," \u2014 "),TN=n(hR,"A",{href:!0});var F2t=s(TN);iho=r(F2t,"DebertaV2Tokenizer"),F2t.forEach(t),dho=r(hR," or "),MN=n(hR,"A",{href:!0});var T2t=s(MN);cho=r(T2t,"DebertaV2TokenizerFast"),T2t.forEach(t),mho=r(hR," (DeBERTa-v2 model)"),hR.forEach(t),fho=i(S),cs=n(S,"LI",{});var uR=s(cs);cce=n(uR,"STRONG",{});var M2t=s(cce);gho=r(M2t,"distilbert"),M2t.forEach(t),hho=r(uR," \u2014 "),EN=n(uR,"A",{href:!0});var E2t=s(EN);uho=r(E2t,"DistilBertTokenizer"),E2t.forEach(t),pho=r(uR," or "),CN=n(uR,"A",{href:!0});var C2t=s(CN);_ho=r(C2t,"DistilBertTokenizerFast"),C2t.forEach(t),bho=r(uR," (DistilBERT model)"),uR.forEach(t),vho=i(S),ms=n(S,"LI",{});var pR=s(ms);mce=n(pR,"STRONG",{});var w2t=s(mce);Fho=r(w2t,"dpr"),w2t.forEach(t),Tho=r(pR," \u2014 "),wN=n(pR,"A",{href:!0});var A2t=s(wN);Mho=r(A2t,"DPRQuestionEncoderTokenizer"),A2t.forEach(t),Eho=r(pR," or "),AN=n(pR,"A",{href:!0});var L2t=s(AN);Cho=r(L2t,"DPRQuestionEncoderTokenizerFast"),L2t.forEach(t),who=r(pR," (DPR model)"),pR.forEach(t),Aho=i(S),fs=n(S,"LI",{});var _R=s(fs);fce=n(_R,"STRONG",{});var y2t=s(fce);Lho=r(y2t,"electra"),y2t.forEach(t),yho=r(_R," \u2014 "),LN=n(_R,"A",{href:!0});var x2t=s(LN);xho=r(x2t,"ElectraTokenizer"),x2t.forEach(t),$ho=r(_R," or "),yN=n(_R,"A",{href:!0});var $2t=s(yN);kho=r($2t,"ElectraTokenizerFast"),$2t.forEach(t),Sho=r(_R," (ELECTRA model)"),_R.forEach(t),Rho=i(S),Bh=n(S,"LI",{});var Mke=s(Bh);gce=n(Mke,"STRONG",{});var k2t=s(gce);Pho=r(k2t,"flaubert"),k2t.forEach(t),Bho=r(Mke," \u2014 "),xN=n(Mke,"A",{href:!0});var S2t=s(xN);Iho=r(S2t,"FlaubertTokenizer"),S2t.forEach(t),Nho=r(Mke," (FlauBERT model)"),Mke.forEach(t),qho=i(S),gs=n(S,"LI",{});var bR=s(gs);hce=n(bR,"STRONG",{});var R2t=s(hce);jho=r(R2t,"fnet"),R2t.forEach(t),Dho=r(bR," \u2014 "),$N=n(bR,"A",{href:!0});var P2t=s($N);Gho=r(P2t,"FNetTokenizer"),P2t.forEach(t),Oho=r(bR," or "),kN=n(bR,"A",{href:!0});var B2t=s(kN);Vho=r(B2t,"FNetTokenizerFast"),B2t.forEach(t),Xho=r(bR," (FNet model)"),bR.forEach(t),zho=i(S),Ih=n(S,"LI",{});var Eke=s(Ih);uce=n(Eke,"STRONG",{});var I2t=s(uce);Who=r(I2t,"fsmt"),I2t.forEach(t),Qho=r(Eke," \u2014 "),SN=n(Eke,"A",{href:!0});var N2t=s(SN);Uho=r(N2t,"FSMTTokenizer"),N2t.forEach(t),Hho=r(Eke," (FairSeq Machine-Translation model)"),Eke.forEach(t),Jho=i(S),hs=n(S,"LI",{});var vR=s(hs);pce=n(vR,"STRONG",{});var q2t=s(pce);Yho=r(q2t,"funnel"),q2t.forEach(t),Kho=r(vR," \u2014 "),RN=n(vR,"A",{href:!0});var j2t=s(RN);Zho=r(j2t,"FunnelTokenizer"),j2t.forEach(t),euo=r(vR," or "),PN=n(vR,"A",{href:!0});var D2t=s(PN);ouo=r(D2t,"FunnelTokenizerFast"),D2t.forEach(t),ruo=r(vR," (Funnel Transformer model)"),vR.forEach(t),tuo=i(S),us=n(S,"LI",{});var FR=s(us);_ce=n(FR,"STRONG",{});var G2t=s(_ce);auo=r(G2t,"gpt2"),G2t.forEach(t),nuo=r(FR," \u2014 "),BN=n(FR,"A",{href:!0});var O2t=s(BN);suo=r(O2t,"GPT2Tokenizer"),O2t.forEach(t),luo=r(FR," or "),IN=n(FR,"A",{href:!0});var V2t=s(IN);iuo=r(V2t,"GPT2TokenizerFast"),V2t.forEach(t),duo=r(FR," (OpenAI GPT-2 model)"),FR.forEach(t),cuo=i(S),ps=n(S,"LI",{});var TR=s(ps);bce=n(TR,"STRONG",{});var X2t=s(bce);muo=r(X2t,"gpt_neo"),X2t.forEach(t),fuo=r(TR," \u2014 "),NN=n(TR,"A",{href:!0});var z2t=s(NN);guo=r(z2t,"GPT2Tokenizer"),z2t.forEach(t),huo=r(TR," or "),qN=n(TR,"A",{href:!0});var W2t=s(qN);uuo=r(W2t,"GPT2TokenizerFast"),W2t.forEach(t),puo=r(TR," (GPT Neo model)"),TR.forEach(t),_uo=i(S),Nh=n(S,"LI",{});var Cke=s(Nh);vce=n(Cke,"STRONG",{});var Q2t=s(vce);buo=r(Q2t,"gpt_neox"),Q2t.forEach(t),vuo=r(Cke," \u2014 "),jN=n(Cke,"A",{href:!0});var U2t=s(jN);Fuo=r(U2t,"GPTNeoXTokenizerFast"),U2t.forEach(t),Tuo=r(Cke," (GPT NeoX model)"),Cke.forEach(t),Muo=i(S),_s=n(S,"LI",{});var MR=s(_s);Fce=n(MR,"STRONG",{});var H2t=s(Fce);Euo=r(H2t,"gptj"),H2t.forEach(t),Cuo=r(MR," \u2014 "),DN=n(MR,"A",{href:!0});var J2t=s(DN);wuo=r(J2t,"GPT2Tokenizer"),J2t.forEach(t),Auo=r(MR," or "),GN=n(MR,"A",{href:!0});var Y2t=s(GN);Luo=r(Y2t,"GPT2TokenizerFast"),Y2t.forEach(t),yuo=r(MR," (GPT-J model)"),MR.forEach(t),xuo=i(S),bs=n(S,"LI",{});var ER=s(bs);Tce=n(ER,"STRONG",{});var K2t=s(Tce);$uo=r(K2t,"groupvit"),K2t.forEach(t),kuo=r(ER," \u2014 "),ON=n(ER,"A",{href:!0});var Z2t=s(ON);Suo=r(Z2t,"CLIPTokenizer"),Z2t.forEach(t),Ruo=r(ER," or "),VN=n(ER,"A",{href:!0});var ebt=s(VN);Puo=r(ebt,"CLIPTokenizerFast"),ebt.forEach(t),Buo=r(ER," (GroupViT model)"),ER.forEach(t),Iuo=i(S),vs=n(S,"LI",{});var CR=s(vs);Mce=n(CR,"STRONG",{});var obt=s(Mce);Nuo=r(obt,"herbert"),obt.forEach(t),quo=r(CR," \u2014 "),XN=n(CR,"A",{href:!0});var rbt=s(XN);juo=r(rbt,"HerbertTokenizer"),rbt.forEach(t),Duo=r(CR," or "),zN=n(CR,"A",{href:!0});var tbt=s(zN);Guo=r(tbt,"HerbertTokenizerFast"),tbt.forEach(t),Ouo=r(CR," (HerBERT model)"),CR.forEach(t),Vuo=i(S),qh=n(S,"LI",{});var wke=s(qh);Ece=n(wke,"STRONG",{});var abt=s(Ece);Xuo=r(abt,"hubert"),abt.forEach(t),zuo=r(wke," \u2014 "),WN=n(wke,"A",{href:!0});var nbt=s(WN);Wuo=r(nbt,"Wav2Vec2CTCTokenizer"),nbt.forEach(t),Quo=r(wke," (Hubert model)"),wke.forEach(t),Uuo=i(S),Fs=n(S,"LI",{});var wR=s(Fs);Cce=n(wR,"STRONG",{});var sbt=s(Cce);Huo=r(sbt,"ibert"),sbt.forEach(t),Juo=r(wR," \u2014 "),QN=n(wR,"A",{href:!0});var lbt=s(QN);Yuo=r(lbt,"RobertaTokenizer"),lbt.forEach(t),Kuo=r(wR," or "),UN=n(wR,"A",{href:!0});var ibt=s(UN);Zuo=r(ibt,"RobertaTokenizerFast"),ibt.forEach(t),epo=r(wR," (I-BERT model)"),wR.forEach(t),opo=i(S),Ts=n(S,"LI",{});var AR=s(Ts);wce=n(AR,"STRONG",{});var dbt=s(wce);rpo=r(dbt,"layoutlm"),dbt.forEach(t),tpo=r(AR," \u2014 "),HN=n(AR,"A",{href:!0});var cbt=s(HN);apo=r(cbt,"LayoutLMTokenizer"),cbt.forEach(t),npo=r(AR," or "),JN=n(AR,"A",{href:!0});var mbt=s(JN);spo=r(mbt,"LayoutLMTokenizerFast"),mbt.forEach(t),lpo=r(AR," (LayoutLM model)"),AR.forEach(t),ipo=i(S),Ms=n(S,"LI",{});var LR=s(Ms);Ace=n(LR,"STRONG",{});var fbt=s(Ace);dpo=r(fbt,"layoutlmv2"),fbt.forEach(t),cpo=r(LR," \u2014 "),YN=n(LR,"A",{href:!0});var gbt=s(YN);mpo=r(gbt,"LayoutLMv2Tokenizer"),gbt.forEach(t),fpo=r(LR," or "),KN=n(LR,"A",{href:!0});var hbt=s(KN);gpo=r(hbt,"LayoutLMv2TokenizerFast"),hbt.forEach(t),hpo=r(LR," (LayoutLMv2 model)"),LR.forEach(t),upo=i(S),Es=n(S,"LI",{});var yR=s(Es);Lce=n(yR,"STRONG",{});var ubt=s(Lce);ppo=r(ubt,"layoutlmv3"),ubt.forEach(t),_po=r(yR," \u2014 "),ZN=n(yR,"A",{href:!0});var pbt=s(ZN);bpo=r(pbt,"LayoutLMv3Tokenizer"),pbt.forEach(t),vpo=r(yR," or "),eq=n(yR,"A",{href:!0});var _bt=s(eq);Fpo=r(_bt,"LayoutLMv3TokenizerFast"),_bt.forEach(t),Tpo=r(yR," (LayoutLMv3 model)"),yR.forEach(t),Mpo=i(S),Cs=n(S,"LI",{});var xR=s(Cs);yce=n(xR,"STRONG",{});var bbt=s(yce);Epo=r(bbt,"layoutxlm"),bbt.forEach(t),Cpo=r(xR," \u2014 "),oq=n(xR,"A",{href:!0});var vbt=s(oq);wpo=r(vbt,"LayoutXLMTokenizer"),vbt.forEach(t),Apo=r(xR," or "),rq=n(xR,"A",{href:!0});var Fbt=s(rq);Lpo=r(Fbt,"LayoutXLMTokenizerFast"),Fbt.forEach(t),ypo=r(xR," (LayoutXLM model)"),xR.forEach(t),xpo=i(S),ws=n(S,"LI",{});var $R=s(ws);xce=n($R,"STRONG",{});var Tbt=s(xce);$po=r(Tbt,"led"),Tbt.forEach(t),kpo=r($R," \u2014 "),tq=n($R,"A",{href:!0});var Mbt=s(tq);Spo=r(Mbt,"LEDTokenizer"),Mbt.forEach(t),Rpo=r($R," or "),aq=n($R,"A",{href:!0});var Ebt=s(aq);Ppo=r(Ebt,"LEDTokenizerFast"),Ebt.forEach(t),Bpo=r($R," (LED model)"),$R.forEach(t),Ipo=i(S),As=n(S,"LI",{});var kR=s(As);$ce=n(kR,"STRONG",{});var Cbt=s($ce);Npo=r(Cbt,"longformer"),Cbt.forEach(t),qpo=r(kR," \u2014 "),nq=n(kR,"A",{href:!0});var wbt=s(nq);jpo=r(wbt,"LongformerTokenizer"),wbt.forEach(t),Dpo=r(kR," or "),sq=n(kR,"A",{href:!0});var Abt=s(sq);Gpo=r(Abt,"LongformerTokenizerFast"),Abt.forEach(t),Opo=r(kR," (Longformer model)"),kR.forEach(t),Vpo=i(S),Ls=n(S,"LI",{});var SR=s(Ls);kce=n(SR,"STRONG",{});var Lbt=s(kce);Xpo=r(Lbt,"longt5"),Lbt.forEach(t),zpo=r(SR," \u2014 "),lq=n(SR,"A",{href:!0});var ybt=s(lq);Wpo=r(ybt,"T5Tokenizer"),ybt.forEach(t),Qpo=r(SR," or "),iq=n(SR,"A",{href:!0});var xbt=s(iq);Upo=r(xbt,"T5TokenizerFast"),xbt.forEach(t),Hpo=r(SR," (LongT5 model)"),SR.forEach(t),Jpo=i(S),jh=n(S,"LI",{});var Ake=s(jh);Sce=n(Ake,"STRONG",{});var $bt=s(Sce);Ypo=r($bt,"luke"),$bt.forEach(t),Kpo=r(Ake," \u2014 "),dq=n(Ake,"A",{href:!0});var kbt=s(dq);Zpo=r(kbt,"LukeTokenizer"),kbt.forEach(t),e_o=r(Ake," (LUKE model)"),Ake.forEach(t),o_o=i(S),ys=n(S,"LI",{});var RR=s(ys);Rce=n(RR,"STRONG",{});var Sbt=s(Rce);r_o=r(Sbt,"lxmert"),Sbt.forEach(t),t_o=r(RR," \u2014 "),cq=n(RR,"A",{href:!0});var Rbt=s(cq);a_o=r(Rbt,"LxmertTokenizer"),Rbt.forEach(t),n_o=r(RR," or "),mq=n(RR,"A",{href:!0});var Pbt=s(mq);s_o=r(Pbt,"LxmertTokenizerFast"),Pbt.forEach(t),l_o=r(RR," (LXMERT model)"),RR.forEach(t),i_o=i(S),Dh=n(S,"LI",{});var Lke=s(Dh);Pce=n(Lke,"STRONG",{});var Bbt=s(Pce);d_o=r(Bbt,"m2m_100"),Bbt.forEach(t),c_o=r(Lke," \u2014 "),fq=n(Lke,"A",{href:!0});var Ibt=s(fq);m_o=r(Ibt,"M2M100Tokenizer"),Ibt.forEach(t),f_o=r(Lke," (M2M100 model)"),Lke.forEach(t),g_o=i(S),Gh=n(S,"LI",{});var yke=s(Gh);Bce=n(yke,"STRONG",{});var Nbt=s(Bce);h_o=r(Nbt,"marian"),Nbt.forEach(t),u_o=r(yke," \u2014 "),gq=n(yke,"A",{href:!0});var qbt=s(gq);p_o=r(qbt,"MarianTokenizer"),qbt.forEach(t),__o=r(yke," (Marian model)"),yke.forEach(t),b_o=i(S),xs=n(S,"LI",{});var PR=s(xs);Ice=n(PR,"STRONG",{});var jbt=s(Ice);v_o=r(jbt,"mbart"),jbt.forEach(t),F_o=r(PR," \u2014 "),hq=n(PR,"A",{href:!0});var Dbt=s(hq);T_o=r(Dbt,"MBartTokenizer"),Dbt.forEach(t),M_o=r(PR," or "),uq=n(PR,"A",{href:!0});var Gbt=s(uq);E_o=r(Gbt,"MBartTokenizerFast"),Gbt.forEach(t),C_o=r(PR," (mBART model)"),PR.forEach(t),w_o=i(S),$s=n(S,"LI",{});var BR=s($s);Nce=n(BR,"STRONG",{});var Obt=s(Nce);A_o=r(Obt,"mbart50"),Obt.forEach(t),L_o=r(BR," \u2014 "),pq=n(BR,"A",{href:!0});var Vbt=s(pq);y_o=r(Vbt,"MBart50Tokenizer"),Vbt.forEach(t),x_o=r(BR," or "),_q=n(BR,"A",{href:!0});var Xbt=s(_q);$_o=r(Xbt,"MBart50TokenizerFast"),Xbt.forEach(t),k_o=r(BR," (mBART-50 model)"),BR.forEach(t),S_o=i(S),ks=n(S,"LI",{});var IR=s(ks);qce=n(IR,"STRONG",{});var zbt=s(qce);R_o=r(zbt,"megatron-bert"),zbt.forEach(t),P_o=r(IR," \u2014 "),bq=n(IR,"A",{href:!0});var Wbt=s(bq);B_o=r(Wbt,"BertTokenizer"),Wbt.forEach(t),I_o=r(IR," or "),vq=n(IR,"A",{href:!0});var Qbt=s(vq);N_o=r(Qbt,"BertTokenizerFast"),Qbt.forEach(t),q_o=r(IR," (Megatron-BERT model)"),IR.forEach(t),j_o=i(S),Oh=n(S,"LI",{});var xke=s(Oh);jce=n(xke,"STRONG",{});var Ubt=s(jce);D_o=r(Ubt,"mluke"),Ubt.forEach(t),G_o=r(xke," \u2014 "),Fq=n(xke,"A",{href:!0});var Hbt=s(Fq);O_o=r(Hbt,"MLukeTokenizer"),Hbt.forEach(t),V_o=r(xke," (mLUKE model)"),xke.forEach(t),X_o=i(S),Ss=n(S,"LI",{});var NR=s(Ss);Dce=n(NR,"STRONG",{});var Jbt=s(Dce);z_o=r(Jbt,"mobilebert"),Jbt.forEach(t),W_o=r(NR," \u2014 "),Tq=n(NR,"A",{href:!0});var Ybt=s(Tq);Q_o=r(Ybt,"MobileBertTokenizer"),Ybt.forEach(t),U_o=r(NR," or "),Mq=n(NR,"A",{href:!0});var Kbt=s(Mq);H_o=r(Kbt,"MobileBertTokenizerFast"),Kbt.forEach(t),J_o=r(NR," (MobileBERT model)"),NR.forEach(t),Y_o=i(S),Rs=n(S,"LI",{});var qR=s(Rs);Gce=n(qR,"STRONG",{});var Zbt=s(Gce);K_o=r(Zbt,"mpnet"),Zbt.forEach(t),Z_o=r(qR," \u2014 "),Eq=n(qR,"A",{href:!0});var evt=s(Eq);e2o=r(evt,"MPNetTokenizer"),evt.forEach(t),o2o=r(qR," or "),Cq=n(qR,"A",{href:!0});var ovt=s(Cq);r2o=r(ovt,"MPNetTokenizerFast"),ovt.forEach(t),t2o=r(qR," (MPNet model)"),qR.forEach(t),a2o=i(S),Ps=n(S,"LI",{});var jR=s(Ps);Oce=n(jR,"STRONG",{});var rvt=s(Oce);n2o=r(rvt,"mt5"),rvt.forEach(t),s2o=r(jR," \u2014 "),wq=n(jR,"A",{href:!0});var tvt=s(wq);l2o=r(tvt,"MT5Tokenizer"),tvt.forEach(t),i2o=r(jR," or "),Aq=n(jR,"A",{href:!0});var avt=s(Aq);d2o=r(avt,"MT5TokenizerFast"),avt.forEach(t),c2o=r(jR," (MT5 model)"),jR.forEach(t),m2o=i(S),Bs=n(S,"LI",{});var DR=s(Bs);Vce=n(DR,"STRONG",{});var nvt=s(Vce);f2o=r(nvt,"mvp"),nvt.forEach(t),g2o=r(DR," \u2014 "),Lq=n(DR,"A",{href:!0});var svt=s(Lq);h2o=r(svt,"MvpTokenizer"),svt.forEach(t),u2o=r(DR," or "),yq=n(DR,"A",{href:!0});var lvt=s(yq);p2o=r(lvt,"MvpTokenizerFast"),lvt.forEach(t),_2o=r(DR," (MVP model)"),DR.forEach(t),b2o=i(S),Is=n(S,"LI",{});var GR=s(Is);Xce=n(GR,"STRONG",{});var ivt=s(Xce);v2o=r(ivt,"nezha"),ivt.forEach(t),F2o=r(GR," \u2014 "),xq=n(GR,"A",{href:!0});var dvt=s(xq);T2o=r(dvt,"BertTokenizer"),dvt.forEach(t),M2o=r(GR," or "),$q=n(GR,"A",{href:!0});var cvt=s($q);E2o=r(cvt,"BertTokenizerFast"),cvt.forEach(t),C2o=r(GR," (Nezha model)"),GR.forEach(t),w2o=i(S),Ns=n(S,"LI",{});var OR=s(Ns);zce=n(OR,"STRONG",{});var mvt=s(zce);A2o=r(mvt,"nllb"),mvt.forEach(t),L2o=r(OR," \u2014 "),kq=n(OR,"A",{href:!0});var fvt=s(kq);y2o=r(fvt,"NllbTokenizer"),fvt.forEach(t),x2o=r(OR," or "),Sq=n(OR,"A",{href:!0});var gvt=s(Sq);$2o=r(gvt,"NllbTokenizerFast"),gvt.forEach(t),k2o=r(OR," (NLLB model)"),OR.forEach(t),S2o=i(S),qs=n(S,"LI",{});var VR=s(qs);Wce=n(VR,"STRONG",{});var hvt=s(Wce);R2o=r(hvt,"nystromformer"),hvt.forEach(t),P2o=r(VR," \u2014 "),Rq=n(VR,"A",{href:!0});var uvt=s(Rq);B2o=r(uvt,"AlbertTokenizer"),uvt.forEach(t),I2o=r(VR," or "),Pq=n(VR,"A",{href:!0});var pvt=s(Pq);N2o=r(pvt,"AlbertTokenizerFast"),pvt.forEach(t),q2o=r(VR," (Nystr\xF6mformer model)"),VR.forEach(t),j2o=i(S),js=n(S,"LI",{});var XR=s(js);Qce=n(XR,"STRONG",{});var _vt=s(Qce);D2o=r(_vt,"openai-gpt"),_vt.forEach(t),G2o=r(XR," \u2014 "),Bq=n(XR,"A",{href:!0});var bvt=s(Bq);O2o=r(bvt,"OpenAIGPTTokenizer"),bvt.forEach(t),V2o=r(XR," or "),Iq=n(XR,"A",{href:!0});var vvt=s(Iq);X2o=r(vvt,"OpenAIGPTTokenizerFast"),vvt.forEach(t),z2o=r(XR," (OpenAI GPT model)"),XR.forEach(t),W2o=i(S),Vh=n(S,"LI",{});var $ke=s(Vh);Uce=n($ke,"STRONG",{});var Fvt=s(Uce);Q2o=r(Fvt,"opt"),Fvt.forEach(t),U2o=r($ke," \u2014 "),Nq=n($ke,"A",{href:!0});var Tvt=s(Nq);H2o=r(Tvt,"GPT2Tokenizer"),Tvt.forEach(t),J2o=r($ke," (OPT model)"),$ke.forEach(t),Y2o=i(S),Ds=n(S,"LI",{});var zR=s(Ds);Hce=n(zR,"STRONG",{});var Mvt=s(Hce);K2o=r(Mvt,"owlvit"),Mvt.forEach(t),Z2o=r(zR," \u2014 "),qq=n(zR,"A",{href:!0});var Evt=s(qq);ebo=r(Evt,"CLIPTokenizer"),Evt.forEach(t),obo=r(zR," or "),jq=n(zR,"A",{href:!0});var Cvt=s(jq);rbo=r(Cvt,"CLIPTokenizerFast"),Cvt.forEach(t),tbo=r(zR," (OWL-ViT model)"),zR.forEach(t),abo=i(S),Gs=n(S,"LI",{});var WR=s(Gs);Jce=n(WR,"STRONG",{});var wvt=s(Jce);nbo=r(wvt,"pegasus"),wvt.forEach(t),sbo=r(WR," \u2014 "),Dq=n(WR,"A",{href:!0});var Avt=s(Dq);lbo=r(Avt,"PegasusTokenizer"),Avt.forEach(t),ibo=r(WR," or "),Gq=n(WR,"A",{href:!0});var Lvt=s(Gq);dbo=r(Lvt,"PegasusTokenizerFast"),Lvt.forEach(t),cbo=r(WR," (Pegasus model)"),WR.forEach(t),mbo=i(S),Xh=n(S,"LI",{});var kke=s(Xh);Yce=n(kke,"STRONG",{});var yvt=s(Yce);fbo=r(yvt,"perceiver"),yvt.forEach(t),gbo=r(kke," \u2014 "),Oq=n(kke,"A",{href:!0});var xvt=s(Oq);hbo=r(xvt,"PerceiverTokenizer"),xvt.forEach(t),ubo=r(kke," (Perceiver model)"),kke.forEach(t),pbo=i(S),zh=n(S,"LI",{});var Ske=s(zh);Kce=n(Ske,"STRONG",{});var $vt=s(Kce);_bo=r($vt,"phobert"),$vt.forEach(t),bbo=r(Ske," \u2014 "),Vq=n(Ske,"A",{href:!0});var kvt=s(Vq);vbo=r(kvt,"PhobertTokenizer"),kvt.forEach(t),Fbo=r(Ske," (PhoBERT model)"),Ske.forEach(t),Tbo=i(S),Wh=n(S,"LI",{});var Rke=s(Wh);Zce=n(Rke,"STRONG",{});var Svt=s(Zce);Mbo=r(Svt,"plbart"),Svt.forEach(t),Ebo=r(Rke," \u2014 "),Xq=n(Rke,"A",{href:!0});var Rvt=s(Xq);Cbo=r(Rvt,"PLBartTokenizer"),Rvt.forEach(t),wbo=r(Rke," (PLBart model)"),Rke.forEach(t),Abo=i(S),Qh=n(S,"LI",{});var Pke=s(Qh);eme=n(Pke,"STRONG",{});var Pvt=s(eme);Lbo=r(Pvt,"prophetnet"),Pvt.forEach(t),ybo=r(Pke," \u2014 "),zq=n(Pke,"A",{href:!0});var Bvt=s(zq);xbo=r(Bvt,"ProphetNetTokenizer"),Bvt.forEach(t),$bo=r(Pke," (ProphetNet model)"),Pke.forEach(t),kbo=i(S),Os=n(S,"LI",{});var QR=s(Os);ome=n(QR,"STRONG",{});var Ivt=s(ome);Sbo=r(Ivt,"qdqbert"),Ivt.forEach(t),Rbo=r(QR," \u2014 "),Wq=n(QR,"A",{href:!0});var Nvt=s(Wq);Pbo=r(Nvt,"BertTokenizer"),Nvt.forEach(t),Bbo=r(QR," or "),Qq=n(QR,"A",{href:!0});var qvt=s(Qq);Ibo=r(qvt,"BertTokenizerFast"),qvt.forEach(t),Nbo=r(QR," (QDQBert model)"),QR.forEach(t),qbo=i(S),Uh=n(S,"LI",{});var Bke=s(Uh);rme=n(Bke,"STRONG",{});var jvt=s(rme);jbo=r(jvt,"rag"),jvt.forEach(t),Dbo=r(Bke," \u2014 "),Uq=n(Bke,"A",{href:!0});var Dvt=s(Uq);Gbo=r(Dvt,"RagTokenizer"),Dvt.forEach(t),Obo=r(Bke," (RAG model)"),Bke.forEach(t),Vbo=i(S),Vs=n(S,"LI",{});var UR=s(Vs);tme=n(UR,"STRONG",{});var Gvt=s(tme);Xbo=r(Gvt,"realm"),Gvt.forEach(t),zbo=r(UR," \u2014 "),Hq=n(UR,"A",{href:!0});var Ovt=s(Hq);Wbo=r(Ovt,"RealmTokenizer"),Ovt.forEach(t),Qbo=r(UR," or "),Jq=n(UR,"A",{href:!0});var Vvt=s(Jq);Ubo=r(Vvt,"RealmTokenizerFast"),Vvt.forEach(t),Hbo=r(UR," (REALM model)"),UR.forEach(t),Jbo=i(S),Xs=n(S,"LI",{});var HR=s(Xs);ame=n(HR,"STRONG",{});var Xvt=s(ame);Ybo=r(Xvt,"reformer"),Xvt.forEach(t),Kbo=r(HR," \u2014 "),Yq=n(HR,"A",{href:!0});var zvt=s(Yq);Zbo=r(zvt,"ReformerTokenizer"),zvt.forEach(t),evo=r(HR," or "),Kq=n(HR,"A",{href:!0});var Wvt=s(Kq);ovo=r(Wvt,"ReformerTokenizerFast"),Wvt.forEach(t),rvo=r(HR," (Reformer model)"),HR.forEach(t),tvo=i(S),zs=n(S,"LI",{});var JR=s(zs);nme=n(JR,"STRONG",{});var Qvt=s(nme);avo=r(Qvt,"rembert"),Qvt.forEach(t),nvo=r(JR," \u2014 "),Zq=n(JR,"A",{href:!0});var Uvt=s(Zq);svo=r(Uvt,"RemBertTokenizer"),Uvt.forEach(t),lvo=r(JR," or "),ej=n(JR,"A",{href:!0});var Hvt=s(ej);ivo=r(Hvt,"RemBertTokenizerFast"),Hvt.forEach(t),dvo=r(JR," (RemBERT model)"),JR.forEach(t),cvo=i(S),Ws=n(S,"LI",{});var YR=s(Ws);sme=n(YR,"STRONG",{});var Jvt=s(sme);mvo=r(Jvt,"retribert"),Jvt.forEach(t),fvo=r(YR," \u2014 "),oj=n(YR,"A",{href:!0});var Yvt=s(oj);gvo=r(Yvt,"RetriBertTokenizer"),Yvt.forEach(t),hvo=r(YR," or "),rj=n(YR,"A",{href:!0});var Kvt=s(rj);uvo=r(Kvt,"RetriBertTokenizerFast"),Kvt.forEach(t),pvo=r(YR," (RetriBERT model)"),YR.forEach(t),_vo=i(S),Qs=n(S,"LI",{});var KR=s(Qs);lme=n(KR,"STRONG",{});var Zvt=s(lme);bvo=r(Zvt,"roberta"),Zvt.forEach(t),vvo=r(KR," \u2014 "),tj=n(KR,"A",{href:!0});var e1t=s(tj);Fvo=r(e1t,"RobertaTokenizer"),e1t.forEach(t),Tvo=r(KR," or "),aj=n(KR,"A",{href:!0});var o1t=s(aj);Mvo=r(o1t,"RobertaTokenizerFast"),o1t.forEach(t),Evo=r(KR," (RoBERTa model)"),KR.forEach(t),Cvo=i(S),Us=n(S,"LI",{});var ZR=s(Us);ime=n(ZR,"STRONG",{});var r1t=s(ime);wvo=r(r1t,"roformer"),r1t.forEach(t),Avo=r(ZR," \u2014 "),nj=n(ZR,"A",{href:!0});var t1t=s(nj);Lvo=r(t1t,"RoFormerTokenizer"),t1t.forEach(t),yvo=r(ZR," or "),sj=n(ZR,"A",{href:!0});var a1t=s(sj);xvo=r(a1t,"RoFormerTokenizerFast"),a1t.forEach(t),$vo=r(ZR," (RoFormer model)"),ZR.forEach(t),kvo=i(S),Hh=n(S,"LI",{});var Ike=s(Hh);dme=n(Ike,"STRONG",{});var n1t=s(dme);Svo=r(n1t,"speech_to_text"),n1t.forEach(t),Rvo=r(Ike," \u2014 "),lj=n(Ike,"A",{href:!0});var s1t=s(lj);Pvo=r(s1t,"Speech2TextTokenizer"),s1t.forEach(t),Bvo=r(Ike," (Speech2Text model)"),Ike.forEach(t),Ivo=i(S),Jh=n(S,"LI",{});var Nke=s(Jh);cme=n(Nke,"STRONG",{});var l1t=s(cme);Nvo=r(l1t,"speech_to_text_2"),l1t.forEach(t),qvo=r(Nke," \u2014 "),ij=n(Nke,"A",{href:!0});var i1t=s(ij);jvo=r(i1t,"Speech2Text2Tokenizer"),i1t.forEach(t),Dvo=r(Nke," (Speech2Text2 model)"),Nke.forEach(t),Gvo=i(S),Hs=n(S,"LI",{});var eP=s(Hs);mme=n(eP,"STRONG",{});var d1t=s(mme);Ovo=r(d1t,"splinter"),d1t.forEach(t),Vvo=r(eP," \u2014 "),dj=n(eP,"A",{href:!0});var c1t=s(dj);Xvo=r(c1t,"SplinterTokenizer"),c1t.forEach(t),zvo=r(eP," or "),cj=n(eP,"A",{href:!0});var m1t=s(cj);Wvo=r(m1t,"SplinterTokenizerFast"),m1t.forEach(t),Qvo=r(eP," (Splinter model)"),eP.forEach(t),Uvo=i(S),Js=n(S,"LI",{});var oP=s(Js);fme=n(oP,"STRONG",{});var f1t=s(fme);Hvo=r(f1t,"squeezebert"),f1t.forEach(t),Jvo=r(oP," \u2014 "),mj=n(oP,"A",{href:!0});var g1t=s(mj);Yvo=r(g1t,"SqueezeBertTokenizer"),g1t.forEach(t),Kvo=r(oP," or "),fj=n(oP,"A",{href:!0});var h1t=s(fj);Zvo=r(h1t,"SqueezeBertTokenizerFast"),h1t.forEach(t),e1o=r(oP," (SqueezeBERT model)"),oP.forEach(t),o1o=i(S),Ys=n(S,"LI",{});var rP=s(Ys);gme=n(rP,"STRONG",{});var u1t=s(gme);r1o=r(u1t,"t5"),u1t.forEach(t),t1o=r(rP," \u2014 "),gj=n(rP,"A",{href:!0});var p1t=s(gj);a1o=r(p1t,"T5Tokenizer"),p1t.forEach(t),n1o=r(rP," or "),hj=n(rP,"A",{href:!0});var _1t=s(hj);s1o=r(_1t,"T5TokenizerFast"),_1t.forEach(t),l1o=r(rP," (T5 model)"),rP.forEach(t),i1o=i(S),Yh=n(S,"LI",{});var qke=s(Yh);hme=n(qke,"STRONG",{});var b1t=s(hme);d1o=r(b1t,"tapas"),b1t.forEach(t),c1o=r(qke," \u2014 "),uj=n(qke,"A",{href:!0});var v1t=s(uj);m1o=r(v1t,"TapasTokenizer"),v1t.forEach(t),f1o=r(qke," (TAPAS model)"),qke.forEach(t),g1o=i(S),Kh=n(S,"LI",{});var jke=s(Kh);ume=n(jke,"STRONG",{});var F1t=s(ume);h1o=r(F1t,"tapex"),F1t.forEach(t),u1o=r(jke," \u2014 "),pj=n(jke,"A",{href:!0});var T1t=s(pj);p1o=r(T1t,"TapexTokenizer"),T1t.forEach(t),_1o=r(jke," (TAPEX model)"),jke.forEach(t),b1o=i(S),Zh=n(S,"LI",{});var Dke=s(Zh);pme=n(Dke,"STRONG",{});var M1t=s(pme);v1o=r(M1t,"transfo-xl"),M1t.forEach(t),F1o=r(Dke," \u2014 "),_j=n(Dke,"A",{href:!0});var E1t=s(_j);T1o=r(E1t,"TransfoXLTokenizer"),E1t.forEach(t),M1o=r(Dke," (Transformer-XL model)"),Dke.forEach(t),E1o=i(S),Ks=n(S,"LI",{});var tP=s(Ks);_me=n(tP,"STRONG",{});var C1t=s(_me);C1o=r(C1t,"vilt"),C1t.forEach(t),w1o=r(tP," \u2014 "),bj=n(tP,"A",{href:!0});var w1t=s(bj);A1o=r(w1t,"BertTokenizer"),w1t.forEach(t),L1o=r(tP," or "),vj=n(tP,"A",{href:!0});var A1t=s(vj);y1o=r(A1t,"BertTokenizerFast"),A1t.forEach(t),x1o=r(tP," (ViLT model)"),tP.forEach(t),$1o=i(S),Zs=n(S,"LI",{});var aP=s(Zs);bme=n(aP,"STRONG",{});var L1t=s(bme);k1o=r(L1t,"visual_bert"),L1t.forEach(t),S1o=r(aP," \u2014 "),Fj=n(aP,"A",{href:!0});var y1t=s(Fj);R1o=r(y1t,"BertTokenizer"),y1t.forEach(t),P1o=r(aP," or "),Tj=n(aP,"A",{href:!0});var x1t=s(Tj);B1o=r(x1t,"BertTokenizerFast"),x1t.forEach(t),I1o=r(aP," (VisualBERT model)"),aP.forEach(t),N1o=i(S),eu=n(S,"LI",{});var Gke=s(eu);vme=n(Gke,"STRONG",{});var $1t=s(vme);q1o=r($1t,"wav2vec2"),$1t.forEach(t),j1o=r(Gke," \u2014 "),Mj=n(Gke,"A",{href:!0});var k1t=s(Mj);D1o=r(k1t,"Wav2Vec2CTCTokenizer"),k1t.forEach(t),G1o=r(Gke," (Wav2Vec2 model)"),Gke.forEach(t),O1o=i(S),ou=n(S,"LI",{});var Oke=s(ou);Fme=n(Oke,"STRONG",{});var S1t=s(Fme);V1o=r(S1t,"wav2vec2-conformer"),S1t.forEach(t),X1o=r(Oke," \u2014 "),Ej=n(Oke,"A",{href:!0});var R1t=s(Ej);z1o=r(R1t,"Wav2Vec2CTCTokenizer"),R1t.forEach(t),W1o=r(Oke," (Wav2Vec2-Conformer model)"),Oke.forEach(t),Q1o=i(S),ru=n(S,"LI",{});var Vke=s(ru);Tme=n(Vke,"STRONG",{});var P1t=s(Tme);U1o=r(P1t,"wav2vec2_phoneme"),P1t.forEach(t),H1o=r(Vke," \u2014 "),Cj=n(Vke,"A",{href:!0});var B1t=s(Cj);J1o=r(B1t,"Wav2Vec2PhonemeCTCTokenizer"),B1t.forEach(t),Y1o=r(Vke," (Wav2Vec2Phoneme model)"),Vke.forEach(t),K1o=i(S),el=n(S,"LI",{});var nP=s(el);Mme=n(nP,"STRONG",{});var I1t=s(Mme);Z1o=r(I1t,"xglm"),I1t.forEach(t),eFo=r(nP," \u2014 "),wj=n(nP,"A",{href:!0});var N1t=s(wj);oFo=r(N1t,"XGLMTokenizer"),N1t.forEach(t),rFo=r(nP," or "),Aj=n(nP,"A",{href:!0});var q1t=s(Aj);tFo=r(q1t,"XGLMTokenizerFast"),q1t.forEach(t),aFo=r(nP," (XGLM model)"),nP.forEach(t),nFo=i(S),tu=n(S,"LI",{});var Xke=s(tu);Eme=n(Xke,"STRONG",{});var j1t=s(Eme);sFo=r(j1t,"xlm"),j1t.forEach(t),lFo=r(Xke," \u2014 "),Lj=n(Xke,"A",{href:!0});var D1t=s(Lj);iFo=r(D1t,"XLMTokenizer"),D1t.forEach(t),dFo=r(Xke," (XLM model)"),Xke.forEach(t),cFo=i(S),au=n(S,"LI",{});var zke=s(au);Cme=n(zke,"STRONG",{});var G1t=s(Cme);mFo=r(G1t,"xlm-prophetnet"),G1t.forEach(t),fFo=r(zke," \u2014 "),yj=n(zke,"A",{href:!0});var O1t=s(yj);gFo=r(O1t,"XLMProphetNetTokenizer"),O1t.forEach(t),hFo=r(zke," (XLM-ProphetNet model)"),zke.forEach(t),uFo=i(S),ol=n(S,"LI",{});var sP=s(ol);wme=n(sP,"STRONG",{});var V1t=s(wme);pFo=r(V1t,"xlm-roberta"),V1t.forEach(t),_Fo=r(sP," \u2014 "),xj=n(sP,"A",{href:!0});var X1t=s(xj);bFo=r(X1t,"XLMRobertaTokenizer"),X1t.forEach(t),vFo=r(sP," or "),$j=n(sP,"A",{href:!0});var z1t=s($j);FFo=r(z1t,"XLMRobertaTokenizerFast"),z1t.forEach(t),TFo=r(sP," (XLM-RoBERTa model)"),sP.forEach(t),MFo=i(S),rl=n(S,"LI",{});var lP=s(rl);Ame=n(lP,"STRONG",{});var W1t=s(Ame);EFo=r(W1t,"xlm-roberta-xl"),W1t.forEach(t),CFo=r(lP," \u2014 "),kj=n(lP,"A",{href:!0});var Q1t=s(kj);wFo=r(Q1t,"RobertaTokenizer"),Q1t.forEach(t),AFo=r(lP," or "),Sj=n(lP,"A",{href:!0});var U1t=s(Sj);LFo=r(U1t,"RobertaTokenizerFast"),U1t.forEach(t),yFo=r(lP," (XLM-RoBERTa-XL model)"),lP.forEach(t),xFo=i(S),tl=n(S,"LI",{});var iP=s(tl);Lme=n(iP,"STRONG",{});var H1t=s(Lme);$Fo=r(H1t,"xlnet"),H1t.forEach(t),kFo=r(iP," \u2014 "),Rj=n(iP,"A",{href:!0});var J1t=s(Rj);SFo=r(J1t,"XLNetTokenizer"),J1t.forEach(t),RFo=r(iP," or "),Pj=n(iP,"A",{href:!0});var Y1t=s(Pj);PFo=r(Y1t,"XLNetTokenizerFast"),Y1t.forEach(t),BFo=r(iP," (XLNet model)"),iP.forEach(t),IFo=i(S),al=n(S,"LI",{});var dP=s(al);yme=n(dP,"STRONG",{});var K1t=s(yme);NFo=r(K1t,"yoso"),K1t.forEach(t),qFo=r(dP," \u2014 "),Bj=n(dP,"A",{href:!0});var Z1t=s(Bj);jFo=r(Z1t,"AlbertTokenizer"),Z1t.forEach(t),DFo=r(dP," or "),Ij=n(dP,"A",{href:!0});var eFt=s(Ij);GFo=r(eFt,"AlbertTokenizerFast"),eFt.forEach(t),OFo=r(dP," (YOSO model)"),dP.forEach(t),S.forEach(t),VFo=i(ml),T(nu.$$.fragment,ml),ml.forEach(t),XFo=i(cl),su=n(cl,"DIV",{class:!0});var HJe=s(su);T(j8.$$.fragment,HJe),zFo=i(HJe),xme=n(HJe,"P",{});var oFt=s(xme);WFo=r(oFt,"Register a new tokenizer in this mapping."),oFt.forEach(t),HJe.forEach(t),cl.forEach(t),XUe=i(m),Zi=n(m,"H2",{class:!0});var JJe=s(Zi);lu=n(JJe,"A",{id:!0,class:!0,href:!0});var rFt=s(lu);$me=n(rFt,"SPAN",{});var tFt=s($me);T(D8.$$.fragment,tFt),tFt.forEach(t),rFt.forEach(t),QFo=i(JJe),kme=n(JJe,"SPAN",{});var aFt=s(kme);UFo=r(aFt,"AutoFeatureExtractor"),aFt.forEach(t),JJe.forEach(t),zUe=i(m),$o=n(m,"DIV",{class:!0});var fl=s($o);T(G8.$$.fragment,fl),HFo=i(fl),O8=n(fl,"P",{});var YJe=s(O8);JFo=r(YJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Nj=n(YJe,"A",{href:!0});var nFt=s(Nj);YFo=r(nFt,"AutoFeatureExtractor.from_pretrained()"),nFt.forEach(t),KFo=r(YJe," class method."),YJe.forEach(t),ZFo=i(fl),V8=n(fl,"P",{});var KJe=s(V8);eTo=r(KJe,"This class cannot be instantiated directly using "),Sme=n(KJe,"CODE",{});var sFt=s(Sme);oTo=r(sFt,"__init__()"),sFt.forEach(t),rTo=r(KJe," (throws an error)."),KJe.forEach(t),tTo=i(fl),Je=n(fl,"DIV",{class:!0});var ma=s(Je);T(X8.$$.fragment,ma),aTo=i(ma),Rme=n(ma,"P",{});var lFt=s(Rme);nTo=r(lFt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),lFt.forEach(t),sTo=i(ma),Oa=n(ma,"P",{});var CL=s(Oa);lTo=r(CL,"The feature extractor class to instantiate is selected based on the "),Pme=n(CL,"CODE",{});var iFt=s(Pme);iTo=r(iFt,"model_type"),iFt.forEach(t),dTo=r(CL,` property of the config object
(either passed as an argument or loaded from `),Bme=n(CL,"CODE",{});var dFt=s(Bme);cTo=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),mTo=r(CL,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ime=n(CL,"CODE",{});var cFt=s(Ime);fTo=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),gTo=r(CL,":"),CL.forEach(t),hTo=i(ma),Q=n(ma,"UL",{});var J=s(Q);iu=n(J,"LI",{});var Wke=s(iu);Nme=n(Wke,"STRONG",{});var mFt=s(Nme);uTo=r(mFt,"beit"),mFt.forEach(t),pTo=r(Wke," \u2014 "),qj=n(Wke,"A",{href:!0});var fFt=s(qj);_To=r(fFt,"BeitFeatureExtractor"),fFt.forEach(t),bTo=r(Wke," (BEiT model)"),Wke.forEach(t),vTo=i(J),du=n(J,"LI",{});var Qke=s(du);qme=n(Qke,"STRONG",{});var gFt=s(qme);FTo=r(gFt,"clip"),gFt.forEach(t),TTo=r(Qke," \u2014 "),jj=n(Qke,"A",{href:!0});var hFt=s(jj);MTo=r(hFt,"CLIPFeatureExtractor"),hFt.forEach(t),ETo=r(Qke," (CLIP model)"),Qke.forEach(t),CTo=i(J),cu=n(J,"LI",{});var Uke=s(cu);jme=n(Uke,"STRONG",{});var uFt=s(jme);wTo=r(uFt,"convnext"),uFt.forEach(t),ATo=r(Uke," \u2014 "),Dj=n(Uke,"A",{href:!0});var pFt=s(Dj);LTo=r(pFt,"ConvNextFeatureExtractor"),pFt.forEach(t),yTo=r(Uke," (ConvNeXT model)"),Uke.forEach(t),xTo=i(J),mu=n(J,"LI",{});var Hke=s(mu);Dme=n(Hke,"STRONG",{});var _Ft=s(Dme);$To=r(_Ft,"cvt"),_Ft.forEach(t),kTo=r(Hke," \u2014 "),Gj=n(Hke,"A",{href:!0});var bFt=s(Gj);STo=r(bFt,"ConvNextFeatureExtractor"),bFt.forEach(t),RTo=r(Hke," (CvT model)"),Hke.forEach(t),PTo=i(J),fu=n(J,"LI",{});var Jke=s(fu);Gme=n(Jke,"STRONG",{});var vFt=s(Gme);BTo=r(vFt,"data2vec-audio"),vFt.forEach(t),ITo=r(Jke," \u2014 "),Oj=n(Jke,"A",{href:!0});var FFt=s(Oj);NTo=r(FFt,"Wav2Vec2FeatureExtractor"),FFt.forEach(t),qTo=r(Jke," (Data2VecAudio model)"),Jke.forEach(t),jTo=i(J),gu=n(J,"LI",{});var Yke=s(gu);Ome=n(Yke,"STRONG",{});var TFt=s(Ome);DTo=r(TFt,"data2vec-vision"),TFt.forEach(t),GTo=r(Yke," \u2014 "),Vj=n(Yke,"A",{href:!0});var MFt=s(Vj);OTo=r(MFt,"BeitFeatureExtractor"),MFt.forEach(t),VTo=r(Yke," (Data2VecVision model)"),Yke.forEach(t),XTo=i(J),hu=n(J,"LI",{});var Kke=s(hu);Vme=n(Kke,"STRONG",{});var EFt=s(Vme);zTo=r(EFt,"deit"),EFt.forEach(t),WTo=r(Kke," \u2014 "),Xj=n(Kke,"A",{href:!0});var CFt=s(Xj);QTo=r(CFt,"DeiTFeatureExtractor"),CFt.forEach(t),UTo=r(Kke," (DeiT model)"),Kke.forEach(t),HTo=i(J),uu=n(J,"LI",{});var Zke=s(uu);Xme=n(Zke,"STRONG",{});var wFt=s(Xme);JTo=r(wFt,"detr"),wFt.forEach(t),YTo=r(Zke," \u2014 "),zj=n(Zke,"A",{href:!0});var AFt=s(zj);KTo=r(AFt,"DetrFeatureExtractor"),AFt.forEach(t),ZTo=r(Zke," (DETR model)"),Zke.forEach(t),eMo=i(J),pu=n(J,"LI",{});var eSe=s(pu);zme=n(eSe,"STRONG",{});var LFt=s(zme);oMo=r(LFt,"donut"),LFt.forEach(t),rMo=r(eSe," \u2014 "),Wj=n(eSe,"A",{href:!0});var yFt=s(Wj);tMo=r(yFt,"DonutFeatureExtractor"),yFt.forEach(t),aMo=r(eSe," (Donut model)"),eSe.forEach(t),nMo=i(J),_u=n(J,"LI",{});var oSe=s(_u);Wme=n(oSe,"STRONG",{});var xFt=s(Wme);sMo=r(xFt,"dpt"),xFt.forEach(t),lMo=r(oSe," \u2014 "),Qj=n(oSe,"A",{href:!0});var $Ft=s(Qj);iMo=r($Ft,"DPTFeatureExtractor"),$Ft.forEach(t),dMo=r(oSe," (DPT model)"),oSe.forEach(t),cMo=i(J),bu=n(J,"LI",{});var rSe=s(bu);Qme=n(rSe,"STRONG",{});var kFt=s(Qme);mMo=r(kFt,"flava"),kFt.forEach(t),fMo=r(rSe," \u2014 "),Uj=n(rSe,"A",{href:!0});var SFt=s(Uj);gMo=r(SFt,"FlavaFeatureExtractor"),SFt.forEach(t),hMo=r(rSe," (FLAVA model)"),rSe.forEach(t),uMo=i(J),vu=n(J,"LI",{});var tSe=s(vu);Ume=n(tSe,"STRONG",{});var RFt=s(Ume);pMo=r(RFt,"glpn"),RFt.forEach(t),_Mo=r(tSe," \u2014 "),Hj=n(tSe,"A",{href:!0});var PFt=s(Hj);bMo=r(PFt,"GLPNFeatureExtractor"),PFt.forEach(t),vMo=r(tSe," (GLPN model)"),tSe.forEach(t),FMo=i(J),Fu=n(J,"LI",{});var aSe=s(Fu);Hme=n(aSe,"STRONG",{});var BFt=s(Hme);TMo=r(BFt,"groupvit"),BFt.forEach(t),MMo=r(aSe," \u2014 "),Jj=n(aSe,"A",{href:!0});var IFt=s(Jj);EMo=r(IFt,"CLIPFeatureExtractor"),IFt.forEach(t),CMo=r(aSe," (GroupViT model)"),aSe.forEach(t),wMo=i(J),Tu=n(J,"LI",{});var nSe=s(Tu);Jme=n(nSe,"STRONG",{});var NFt=s(Jme);AMo=r(NFt,"hubert"),NFt.forEach(t),LMo=r(nSe," \u2014 "),Yj=n(nSe,"A",{href:!0});var qFt=s(Yj);yMo=r(qFt,"Wav2Vec2FeatureExtractor"),qFt.forEach(t),xMo=r(nSe," (Hubert model)"),nSe.forEach(t),$Mo=i(J),Mu=n(J,"LI",{});var sSe=s(Mu);Yme=n(sSe,"STRONG",{});var jFt=s(Yme);kMo=r(jFt,"imagegpt"),jFt.forEach(t),SMo=r(sSe," \u2014 "),Kj=n(sSe,"A",{href:!0});var DFt=s(Kj);RMo=r(DFt,"ImageGPTFeatureExtractor"),DFt.forEach(t),PMo=r(sSe," (ImageGPT model)"),sSe.forEach(t),BMo=i(J),Eu=n(J,"LI",{});var lSe=s(Eu);Kme=n(lSe,"STRONG",{});var GFt=s(Kme);IMo=r(GFt,"layoutlmv2"),GFt.forEach(t),NMo=r(lSe," \u2014 "),Zj=n(lSe,"A",{href:!0});var OFt=s(Zj);qMo=r(OFt,"LayoutLMv2FeatureExtractor"),OFt.forEach(t),jMo=r(lSe," (LayoutLMv2 model)"),lSe.forEach(t),DMo=i(J),Cu=n(J,"LI",{});var iSe=s(Cu);Zme=n(iSe,"STRONG",{});var VFt=s(Zme);GMo=r(VFt,"layoutlmv3"),VFt.forEach(t),OMo=r(iSe," \u2014 "),eD=n(iSe,"A",{href:!0});var XFt=s(eD);VMo=r(XFt,"LayoutLMv3FeatureExtractor"),XFt.forEach(t),XMo=r(iSe," (LayoutLMv3 model)"),iSe.forEach(t),zMo=i(J),wu=n(J,"LI",{});var dSe=s(wu);efe=n(dSe,"STRONG",{});var zFt=s(efe);WMo=r(zFt,"levit"),zFt.forEach(t),QMo=r(dSe," \u2014 "),oD=n(dSe,"A",{href:!0});var WFt=s(oD);UMo=r(WFt,"LevitFeatureExtractor"),WFt.forEach(t),HMo=r(dSe," (LeViT model)"),dSe.forEach(t),JMo=i(J),Au=n(J,"LI",{});var cSe=s(Au);ofe=n(cSe,"STRONG",{});var QFt=s(ofe);YMo=r(QFt,"maskformer"),QFt.forEach(t),KMo=r(cSe," \u2014 "),rD=n(cSe,"A",{href:!0});var UFt=s(rD);ZMo=r(UFt,"MaskFormerFeatureExtractor"),UFt.forEach(t),eEo=r(cSe," (MaskFormer model)"),cSe.forEach(t),oEo=i(J),Lu=n(J,"LI",{});var mSe=s(Lu);rfe=n(mSe,"STRONG",{});var HFt=s(rfe);rEo=r(HFt,"mctct"),HFt.forEach(t),tEo=r(mSe," \u2014 "),tD=n(mSe,"A",{href:!0});var JFt=s(tD);aEo=r(JFt,"MCTCTFeatureExtractor"),JFt.forEach(t),nEo=r(mSe," (M-CTC-T model)"),mSe.forEach(t),sEo=i(J),yu=n(J,"LI",{});var fSe=s(yu);tfe=n(fSe,"STRONG",{});var YFt=s(tfe);lEo=r(YFt,"mobilevit"),YFt.forEach(t),iEo=r(fSe," \u2014 "),aD=n(fSe,"A",{href:!0});var KFt=s(aD);dEo=r(KFt,"MobileViTFeatureExtractor"),KFt.forEach(t),cEo=r(fSe," (MobileViT model)"),fSe.forEach(t),mEo=i(J),xu=n(J,"LI",{});var gSe=s(xu);afe=n(gSe,"STRONG",{});var ZFt=s(afe);fEo=r(ZFt,"owlvit"),ZFt.forEach(t),gEo=r(gSe," \u2014 "),nD=n(gSe,"A",{href:!0});var eTt=s(nD);hEo=r(eTt,"OwlViTFeatureExtractor"),eTt.forEach(t),uEo=r(gSe," (OWL-ViT model)"),gSe.forEach(t),pEo=i(J),$u=n(J,"LI",{});var hSe=s($u);nfe=n(hSe,"STRONG",{});var oTt=s(nfe);_Eo=r(oTt,"perceiver"),oTt.forEach(t),bEo=r(hSe," \u2014 "),sD=n(hSe,"A",{href:!0});var rTt=s(sD);vEo=r(rTt,"PerceiverFeatureExtractor"),rTt.forEach(t),FEo=r(hSe," (Perceiver model)"),hSe.forEach(t),TEo=i(J),ku=n(J,"LI",{});var uSe=s(ku);sfe=n(uSe,"STRONG",{});var tTt=s(sfe);MEo=r(tTt,"poolformer"),tTt.forEach(t),EEo=r(uSe," \u2014 "),lD=n(uSe,"A",{href:!0});var aTt=s(lD);CEo=r(aTt,"PoolFormerFeatureExtractor"),aTt.forEach(t),wEo=r(uSe," (PoolFormer model)"),uSe.forEach(t),AEo=i(J),Su=n(J,"LI",{});var pSe=s(Su);lfe=n(pSe,"STRONG",{});var nTt=s(lfe);LEo=r(nTt,"regnet"),nTt.forEach(t),yEo=r(pSe," \u2014 "),iD=n(pSe,"A",{href:!0});var sTt=s(iD);xEo=r(sTt,"ConvNextFeatureExtractor"),sTt.forEach(t),$Eo=r(pSe," (RegNet model)"),pSe.forEach(t),kEo=i(J),Ru=n(J,"LI",{});var _Se=s(Ru);ife=n(_Se,"STRONG",{});var lTt=s(ife);SEo=r(lTt,"resnet"),lTt.forEach(t),REo=r(_Se," \u2014 "),dD=n(_Se,"A",{href:!0});var iTt=s(dD);PEo=r(iTt,"ConvNextFeatureExtractor"),iTt.forEach(t),BEo=r(_Se," (ResNet model)"),_Se.forEach(t),IEo=i(J),Pu=n(J,"LI",{});var bSe=s(Pu);dfe=n(bSe,"STRONG",{});var dTt=s(dfe);NEo=r(dTt,"segformer"),dTt.forEach(t),qEo=r(bSe," \u2014 "),cD=n(bSe,"A",{href:!0});var cTt=s(cD);jEo=r(cTt,"SegformerFeatureExtractor"),cTt.forEach(t),DEo=r(bSe," (SegFormer model)"),bSe.forEach(t),GEo=i(J),Bu=n(J,"LI",{});var vSe=s(Bu);cfe=n(vSe,"STRONG",{});var mTt=s(cfe);OEo=r(mTt,"speech_to_text"),mTt.forEach(t),VEo=r(vSe," \u2014 "),mD=n(vSe,"A",{href:!0});var fTt=s(mD);XEo=r(fTt,"Speech2TextFeatureExtractor"),fTt.forEach(t),zEo=r(vSe," (Speech2Text model)"),vSe.forEach(t),WEo=i(J),Iu=n(J,"LI",{});var FSe=s(Iu);mfe=n(FSe,"STRONG",{});var gTt=s(mfe);QEo=r(gTt,"swin"),gTt.forEach(t),UEo=r(FSe," \u2014 "),fD=n(FSe,"A",{href:!0});var hTt=s(fD);HEo=r(hTt,"ViTFeatureExtractor"),hTt.forEach(t),JEo=r(FSe," (Swin Transformer model)"),FSe.forEach(t),YEo=i(J),Nu=n(J,"LI",{});var TSe=s(Nu);ffe=n(TSe,"STRONG",{});var uTt=s(ffe);KEo=r(uTt,"swinv2"),uTt.forEach(t),ZEo=r(TSe," \u2014 "),gD=n(TSe,"A",{href:!0});var pTt=s(gD);e4o=r(pTt,"ViTFeatureExtractor"),pTt.forEach(t),o4o=r(TSe," (Swin Transformer V2 model)"),TSe.forEach(t),r4o=i(J),qu=n(J,"LI",{});var MSe=s(qu);gfe=n(MSe,"STRONG",{});var _Tt=s(gfe);t4o=r(_Tt,"van"),_Tt.forEach(t),a4o=r(MSe," \u2014 "),hD=n(MSe,"A",{href:!0});var bTt=s(hD);n4o=r(bTt,"ConvNextFeatureExtractor"),bTt.forEach(t),s4o=r(MSe," (VAN model)"),MSe.forEach(t),l4o=i(J),ju=n(J,"LI",{});var ESe=s(ju);hfe=n(ESe,"STRONG",{});var vTt=s(hfe);i4o=r(vTt,"videomae"),vTt.forEach(t),d4o=r(ESe," \u2014 "),uD=n(ESe,"A",{href:!0});var FTt=s(uD);c4o=r(FTt,"VideoMAEFeatureExtractor"),FTt.forEach(t),m4o=r(ESe," (VideoMAE model)"),ESe.forEach(t),f4o=i(J),Du=n(J,"LI",{});var CSe=s(Du);ufe=n(CSe,"STRONG",{});var TTt=s(ufe);g4o=r(TTt,"vilt"),TTt.forEach(t),h4o=r(CSe," \u2014 "),pD=n(CSe,"A",{href:!0});var MTt=s(pD);u4o=r(MTt,"ViltFeatureExtractor"),MTt.forEach(t),p4o=r(CSe," (ViLT model)"),CSe.forEach(t),_4o=i(J),Gu=n(J,"LI",{});var wSe=s(Gu);pfe=n(wSe,"STRONG",{});var ETt=s(pfe);b4o=r(ETt,"vit"),ETt.forEach(t),v4o=r(wSe," \u2014 "),_D=n(wSe,"A",{href:!0});var CTt=s(_D);F4o=r(CTt,"ViTFeatureExtractor"),CTt.forEach(t),T4o=r(wSe," (ViT model)"),wSe.forEach(t),M4o=i(J),Ou=n(J,"LI",{});var ASe=s(Ou);_fe=n(ASe,"STRONG",{});var wTt=s(_fe);E4o=r(wTt,"vit_mae"),wTt.forEach(t),C4o=r(ASe," \u2014 "),bD=n(ASe,"A",{href:!0});var ATt=s(bD);w4o=r(ATt,"ViTFeatureExtractor"),ATt.forEach(t),A4o=r(ASe," (ViTMAE model)"),ASe.forEach(t),L4o=i(J),Vu=n(J,"LI",{});var LSe=s(Vu);bfe=n(LSe,"STRONG",{});var LTt=s(bfe);y4o=r(LTt,"wav2vec2"),LTt.forEach(t),x4o=r(LSe," \u2014 "),vD=n(LSe,"A",{href:!0});var yTt=s(vD);$4o=r(yTt,"Wav2Vec2FeatureExtractor"),yTt.forEach(t),k4o=r(LSe," (Wav2Vec2 model)"),LSe.forEach(t),S4o=i(J),Xu=n(J,"LI",{});var ySe=s(Xu);vfe=n(ySe,"STRONG",{});var xTt=s(vfe);R4o=r(xTt,"wav2vec2-conformer"),xTt.forEach(t),P4o=r(ySe," \u2014 "),FD=n(ySe,"A",{href:!0});var $Tt=s(FD);B4o=r($Tt,"Wav2Vec2FeatureExtractor"),$Tt.forEach(t),I4o=r(ySe," (Wav2Vec2-Conformer model)"),ySe.forEach(t),N4o=i(J),zu=n(J,"LI",{});var xSe=s(zu);Ffe=n(xSe,"STRONG",{});var kTt=s(Ffe);q4o=r(kTt,"yolos"),kTt.forEach(t),j4o=r(xSe," \u2014 "),TD=n(xSe,"A",{href:!0});var STt=s(TD);D4o=r(STt,"YolosFeatureExtractor"),STt.forEach(t),G4o=r(xSe," (YOLOS model)"),xSe.forEach(t),J.forEach(t),O4o=i(ma),T(Wu.$$.fragment,ma),V4o=i(ma),T(Qu.$$.fragment,ma),ma.forEach(t),X4o=i(fl),Uu=n(fl,"DIV",{class:!0});var ZJe=s(Uu);T(z8.$$.fragment,ZJe),z4o=i(ZJe),Tfe=n(ZJe,"P",{});var RTt=s(Tfe);W4o=r(RTt,"Register a new feature extractor for this class."),RTt.forEach(t),ZJe.forEach(t),fl.forEach(t),WUe=i(m),ed=n(m,"H2",{class:!0});var eYe=s(ed);Hu=n(eYe,"A",{id:!0,class:!0,href:!0});var PTt=s(Hu);Mfe=n(PTt,"SPAN",{});var BTt=s(Mfe);T(W8.$$.fragment,BTt),BTt.forEach(t),PTt.forEach(t),Q4o=i(eYe),Efe=n(eYe,"SPAN",{});var ITt=s(Efe);U4o=r(ITt,"AutoProcessor"),ITt.forEach(t),eYe.forEach(t),QUe=i(m),ko=n(m,"DIV",{class:!0});var gl=s(ko);T(Q8.$$.fragment,gl),H4o=i(gl),U8=n(gl,"P",{});var oYe=s(U8);J4o=r(oYe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MD=n(oYe,"A",{href:!0});var NTt=s(MD);Y4o=r(NTt,"AutoProcessor.from_pretrained()"),NTt.forEach(t),K4o=r(oYe," class method."),oYe.forEach(t),Z4o=i(gl),H8=n(gl,"P",{});var rYe=s(H8);eCo=r(rYe,"This class cannot be instantiated directly using "),Cfe=n(rYe,"CODE",{});var qTt=s(Cfe);oCo=r(qTt,"__init__()"),qTt.forEach(t),rCo=r(rYe," (throws an error)."),rYe.forEach(t),tCo=i(gl),Ye=n(gl,"DIV",{class:!0});var fa=s(Ye);T(J8.$$.fragment,fa),aCo=i(fa),wfe=n(fa,"P",{});var jTt=s(wfe);nCo=r(jTt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jTt.forEach(t),sCo=i(fa),od=n(fa,"P",{});var dne=s(od);lCo=r(dne,"The processor class to instantiate is selected based on the "),Afe=n(dne,"CODE",{});var DTt=s(Afe);iCo=r(DTt,"model_type"),DTt.forEach(t),dCo=r(dne,` property of the config object (either
passed as an argument or loaded from `),Lfe=n(dne,"CODE",{});var GTt=s(Lfe);cCo=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),mCo=r(dne," if possible):"),dne.forEach(t),fCo=i(fa),ce=n(fa,"UL",{});var ue=s(ce);Ju=n(ue,"LI",{});var $Se=s(Ju);yfe=n($Se,"STRONG",{});var OTt=s(yfe);gCo=r(OTt,"clip"),OTt.forEach(t),hCo=r($Se," \u2014 "),ED=n($Se,"A",{href:!0});var VTt=s(ED);uCo=r(VTt,"CLIPProcessor"),VTt.forEach(t),pCo=r($Se," (CLIP model)"),$Se.forEach(t),_Co=i(ue),Yu=n(ue,"LI",{});var kSe=s(Yu);xfe=n(kSe,"STRONG",{});var XTt=s(xfe);bCo=r(XTt,"donut"),XTt.forEach(t),vCo=r(kSe," \u2014 "),CD=n(kSe,"A",{href:!0});var zTt=s(CD);FCo=r(zTt,"DonutProcessor"),zTt.forEach(t),TCo=r(kSe," (Donut model)"),kSe.forEach(t),MCo=i(ue),Ku=n(ue,"LI",{});var SSe=s(Ku);$fe=n(SSe,"STRONG",{});var WTt=s($fe);ECo=r(WTt,"flava"),WTt.forEach(t),CCo=r(SSe," \u2014 "),wD=n(SSe,"A",{href:!0});var QTt=s(wD);wCo=r(QTt,"FlavaProcessor"),QTt.forEach(t),ACo=r(SSe," (FLAVA model)"),SSe.forEach(t),LCo=i(ue),Zu=n(ue,"LI",{});var RSe=s(Zu);kfe=n(RSe,"STRONG",{});var UTt=s(kfe);yCo=r(UTt,"groupvit"),UTt.forEach(t),xCo=r(RSe," \u2014 "),AD=n(RSe,"A",{href:!0});var HTt=s(AD);$Co=r(HTt,"CLIPProcessor"),HTt.forEach(t),kCo=r(RSe," (GroupViT model)"),RSe.forEach(t),SCo=i(ue),ep=n(ue,"LI",{});var PSe=s(ep);Sfe=n(PSe,"STRONG",{});var JTt=s(Sfe);RCo=r(JTt,"layoutlmv2"),JTt.forEach(t),PCo=r(PSe," \u2014 "),LD=n(PSe,"A",{href:!0});var YTt=s(LD);BCo=r(YTt,"LayoutLMv2Processor"),YTt.forEach(t),ICo=r(PSe," (LayoutLMv2 model)"),PSe.forEach(t),NCo=i(ue),op=n(ue,"LI",{});var BSe=s(op);Rfe=n(BSe,"STRONG",{});var KTt=s(Rfe);qCo=r(KTt,"layoutlmv3"),KTt.forEach(t),jCo=r(BSe," \u2014 "),yD=n(BSe,"A",{href:!0});var ZTt=s(yD);DCo=r(ZTt,"LayoutLMv3Processor"),ZTt.forEach(t),GCo=r(BSe," (LayoutLMv3 model)"),BSe.forEach(t),OCo=i(ue),rp=n(ue,"LI",{});var ISe=s(rp);Pfe=n(ISe,"STRONG",{});var eMt=s(Pfe);VCo=r(eMt,"layoutxlm"),eMt.forEach(t),XCo=r(ISe," \u2014 "),xD=n(ISe,"A",{href:!0});var oMt=s(xD);zCo=r(oMt,"LayoutXLMProcessor"),oMt.forEach(t),WCo=r(ISe," (LayoutXLM model)"),ISe.forEach(t),QCo=i(ue),tp=n(ue,"LI",{});var NSe=s(tp);Bfe=n(NSe,"STRONG",{});var rMt=s(Bfe);UCo=r(rMt,"owlvit"),rMt.forEach(t),HCo=r(NSe," \u2014 "),$D=n(NSe,"A",{href:!0});var tMt=s($D);JCo=r(tMt,"OwlViTProcessor"),tMt.forEach(t),YCo=r(NSe," (OWL-ViT model)"),NSe.forEach(t),KCo=i(ue),ap=n(ue,"LI",{});var qSe=s(ap);Ife=n(qSe,"STRONG",{});var aMt=s(Ife);ZCo=r(aMt,"sew"),aMt.forEach(t),e3o=r(qSe," \u2014 "),kD=n(qSe,"A",{href:!0});var nMt=s(kD);o3o=r(nMt,"Wav2Vec2Processor"),nMt.forEach(t),r3o=r(qSe," (SEW model)"),qSe.forEach(t),t3o=i(ue),np=n(ue,"LI",{});var jSe=s(np);Nfe=n(jSe,"STRONG",{});var sMt=s(Nfe);a3o=r(sMt,"sew-d"),sMt.forEach(t),n3o=r(jSe," \u2014 "),SD=n(jSe,"A",{href:!0});var lMt=s(SD);s3o=r(lMt,"Wav2Vec2Processor"),lMt.forEach(t),l3o=r(jSe," (SEW-D model)"),jSe.forEach(t),i3o=i(ue),sp=n(ue,"LI",{});var DSe=s(sp);qfe=n(DSe,"STRONG",{});var iMt=s(qfe);d3o=r(iMt,"speech_to_text"),iMt.forEach(t),c3o=r(DSe," \u2014 "),RD=n(DSe,"A",{href:!0});var dMt=s(RD);m3o=r(dMt,"Speech2TextProcessor"),dMt.forEach(t),f3o=r(DSe," (Speech2Text model)"),DSe.forEach(t),g3o=i(ue),lp=n(ue,"LI",{});var GSe=s(lp);jfe=n(GSe,"STRONG",{});var cMt=s(jfe);h3o=r(cMt,"speech_to_text_2"),cMt.forEach(t),u3o=r(GSe," \u2014 "),PD=n(GSe,"A",{href:!0});var mMt=s(PD);p3o=r(mMt,"Speech2Text2Processor"),mMt.forEach(t),_3o=r(GSe," (Speech2Text2 model)"),GSe.forEach(t),b3o=i(ue),ip=n(ue,"LI",{});var OSe=s(ip);Dfe=n(OSe,"STRONG",{});var fMt=s(Dfe);v3o=r(fMt,"trocr"),fMt.forEach(t),F3o=r(OSe," \u2014 "),BD=n(OSe,"A",{href:!0});var gMt=s(BD);T3o=r(gMt,"TrOCRProcessor"),gMt.forEach(t),M3o=r(OSe," (TrOCR model)"),OSe.forEach(t),E3o=i(ue),dp=n(ue,"LI",{});var VSe=s(dp);Gfe=n(VSe,"STRONG",{});var hMt=s(Gfe);C3o=r(hMt,"unispeech"),hMt.forEach(t),w3o=r(VSe," \u2014 "),ID=n(VSe,"A",{href:!0});var uMt=s(ID);A3o=r(uMt,"Wav2Vec2Processor"),uMt.forEach(t),L3o=r(VSe," (UniSpeech model)"),VSe.forEach(t),y3o=i(ue),cp=n(ue,"LI",{});var XSe=s(cp);Ofe=n(XSe,"STRONG",{});var pMt=s(Ofe);x3o=r(pMt,"unispeech-sat"),pMt.forEach(t),$3o=r(XSe," \u2014 "),ND=n(XSe,"A",{href:!0});var _Mt=s(ND);k3o=r(_Mt,"Wav2Vec2Processor"),_Mt.forEach(t),S3o=r(XSe," (UniSpeechSat model)"),XSe.forEach(t),R3o=i(ue),mp=n(ue,"LI",{});var zSe=s(mp);Vfe=n(zSe,"STRONG",{});var bMt=s(Vfe);P3o=r(bMt,"vilt"),bMt.forEach(t),B3o=r(zSe," \u2014 "),qD=n(zSe,"A",{href:!0});var vMt=s(qD);I3o=r(vMt,"ViltProcessor"),vMt.forEach(t),N3o=r(zSe," (ViLT model)"),zSe.forEach(t),q3o=i(ue),fp=n(ue,"LI",{});var WSe=s(fp);Xfe=n(WSe,"STRONG",{});var FMt=s(Xfe);j3o=r(FMt,"vision-text-dual-encoder"),FMt.forEach(t),D3o=r(WSe," \u2014 "),jD=n(WSe,"A",{href:!0});var TMt=s(jD);G3o=r(TMt,"VisionTextDualEncoderProcessor"),TMt.forEach(t),O3o=r(WSe," (VisionTextDualEncoder model)"),WSe.forEach(t),V3o=i(ue),gp=n(ue,"LI",{});var QSe=s(gp);zfe=n(QSe,"STRONG",{});var MMt=s(zfe);X3o=r(MMt,"wav2vec2"),MMt.forEach(t),z3o=r(QSe," \u2014 "),DD=n(QSe,"A",{href:!0});var EMt=s(DD);W3o=r(EMt,"Wav2Vec2Processor"),EMt.forEach(t),Q3o=r(QSe," (Wav2Vec2 model)"),QSe.forEach(t),U3o=i(ue),hp=n(ue,"LI",{});var USe=s(hp);Wfe=n(USe,"STRONG",{});var CMt=s(Wfe);H3o=r(CMt,"wav2vec2-conformer"),CMt.forEach(t),J3o=r(USe," \u2014 "),GD=n(USe,"A",{href:!0});var wMt=s(GD);Y3o=r(wMt,"Wav2Vec2Processor"),wMt.forEach(t),K3o=r(USe," (Wav2Vec2-Conformer model)"),USe.forEach(t),Z3o=i(ue),up=n(ue,"LI",{});var HSe=s(up);Qfe=n(HSe,"STRONG",{});var AMt=s(Qfe);e5o=r(AMt,"wavlm"),AMt.forEach(t),o5o=r(HSe," \u2014 "),OD=n(HSe,"A",{href:!0});var LMt=s(OD);r5o=r(LMt,"Wav2Vec2Processor"),LMt.forEach(t),t5o=r(HSe," (WavLM model)"),HSe.forEach(t),ue.forEach(t),a5o=i(fa),T(pp.$$.fragment,fa),n5o=i(fa),T(_p.$$.fragment,fa),fa.forEach(t),s5o=i(gl),bp=n(gl,"DIV",{class:!0});var tYe=s(bp);T(Y8.$$.fragment,tYe),l5o=i(tYe),Ufe=n(tYe,"P",{});var yMt=s(Ufe);i5o=r(yMt,"Register a new processor for this class."),yMt.forEach(t),tYe.forEach(t),gl.forEach(t),UUe=i(m),rd=n(m,"H2",{class:!0});var aYe=s(rd);vp=n(aYe,"A",{id:!0,class:!0,href:!0});var xMt=s(vp);Hfe=n(xMt,"SPAN",{});var $Mt=s(Hfe);T(K8.$$.fragment,$Mt),$Mt.forEach(t),xMt.forEach(t),d5o=i(aYe),Jfe=n(aYe,"SPAN",{});var kMt=s(Jfe);c5o=r(kMt,"AutoModel"),kMt.forEach(t),aYe.forEach(t),HUe=i(m),So=n(m,"DIV",{class:!0});var hl=s(So);T(Z8.$$.fragment,hl),m5o=i(hl),td=n(hl,"P",{});var cne=s(td);f5o=r(cne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VD=n(cne,"A",{href:!0});var SMt=s(VD);g5o=r(SMt,"from_pretrained()"),SMt.forEach(t),h5o=r(cne," class method or the "),XD=n(cne,"A",{href:!0});var RMt=s(XD);u5o=r(RMt,"from_config()"),RMt.forEach(t),p5o=r(cne,` class
method.`),cne.forEach(t),_5o=i(hl),e9=n(hl,"P",{});var nYe=s(e9);b5o=r(nYe,"This class cannot be instantiated directly using "),Yfe=n(nYe,"CODE",{});var PMt=s(Yfe);v5o=r(PMt,"__init__()"),PMt.forEach(t),F5o=r(nYe," (throws an error)."),nYe.forEach(t),T5o=i(hl),ft=n(hl,"DIV",{class:!0});var wL=s(ft);T(o9.$$.fragment,wL),M5o=i(wL),Kfe=n(wL,"P",{});var BMt=s(Kfe);E5o=r(BMt,"Instantiates one of the base model classes of the library from a configuration."),BMt.forEach(t),C5o=i(wL),ad=n(wL,"P",{});var mne=s(ad);w5o=r(mne,`Note:
Loading a model from its configuration file does `),Zfe=n(mne,"STRONG",{});var IMt=s(Zfe);A5o=r(IMt,"not"),IMt.forEach(t),L5o=r(mne,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(mne,"A",{href:!0});var NMt=s(zD);y5o=r(NMt,"from_pretrained()"),NMt.forEach(t),x5o=r(mne," to load the model weights."),mne.forEach(t),$5o=i(wL),T(Fp.$$.fragment,wL),wL.forEach(t),k5o=i(hl),Ke=n(hl,"DIV",{class:!0});var ga=s(Ke);T(r9.$$.fragment,ga),S5o=i(ga),ege=n(ga,"P",{});var qMt=s(ege);R5o=r(qMt,"Instantiate one of the base model classes of the library from a pretrained model."),qMt.forEach(t),P5o=i(ga),Va=n(ga,"P",{});var AL=s(Va);B5o=r(AL,"The model class to instantiate is selected based on the "),oge=n(AL,"CODE",{});var jMt=s(oge);I5o=r(jMt,"model_type"),jMt.forEach(t),N5o=r(AL,` property of the config object (either
passed as an argument or loaded from `),rge=n(AL,"CODE",{});var DMt=s(rge);q5o=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),j5o=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(AL,"CODE",{});var GMt=s(tge);D5o=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),G5o=r(AL,":"),AL.forEach(t),O5o=i(ga),y=n(ga,"UL",{});var x=s(y);Tp=n(x,"LI",{});var JSe=s(Tp);age=n(JSe,"STRONG",{});var OMt=s(age);V5o=r(OMt,"albert"),OMt.forEach(t),X5o=r(JSe," \u2014 "),WD=n(JSe,"A",{href:!0});var VMt=s(WD);z5o=r(VMt,"AlbertModel"),VMt.forEach(t),W5o=r(JSe," (ALBERT model)"),JSe.forEach(t),Q5o=i(x),Mp=n(x,"LI",{});var YSe=s(Mp);nge=n(YSe,"STRONG",{});var XMt=s(nge);U5o=r(XMt,"bart"),XMt.forEach(t),H5o=r(YSe," \u2014 "),QD=n(YSe,"A",{href:!0});var zMt=s(QD);J5o=r(zMt,"BartModel"),zMt.forEach(t),Y5o=r(YSe," (BART model)"),YSe.forEach(t),K5o=i(x),Ep=n(x,"LI",{});var KSe=s(Ep);sge=n(KSe,"STRONG",{});var WMt=s(sge);Z5o=r(WMt,"beit"),WMt.forEach(t),e0o=r(KSe," \u2014 "),UD=n(KSe,"A",{href:!0});var QMt=s(UD);o0o=r(QMt,"BeitModel"),QMt.forEach(t),r0o=r(KSe," (BEiT model)"),KSe.forEach(t),t0o=i(x),Cp=n(x,"LI",{});var ZSe=s(Cp);lge=n(ZSe,"STRONG",{});var UMt=s(lge);a0o=r(UMt,"bert"),UMt.forEach(t),n0o=r(ZSe," \u2014 "),HD=n(ZSe,"A",{href:!0});var HMt=s(HD);s0o=r(HMt,"BertModel"),HMt.forEach(t),l0o=r(ZSe," (BERT model)"),ZSe.forEach(t),i0o=i(x),wp=n(x,"LI",{});var eRe=s(wp);ige=n(eRe,"STRONG",{});var JMt=s(ige);d0o=r(JMt,"bert-generation"),JMt.forEach(t),c0o=r(eRe," \u2014 "),JD=n(eRe,"A",{href:!0});var YMt=s(JD);m0o=r(YMt,"BertGenerationEncoder"),YMt.forEach(t),f0o=r(eRe," (Bert Generation model)"),eRe.forEach(t),g0o=i(x),Ap=n(x,"LI",{});var oRe=s(Ap);dge=n(oRe,"STRONG",{});var KMt=s(dge);h0o=r(KMt,"big_bird"),KMt.forEach(t),u0o=r(oRe," \u2014 "),YD=n(oRe,"A",{href:!0});var ZMt=s(YD);p0o=r(ZMt,"BigBirdModel"),ZMt.forEach(t),_0o=r(oRe," (BigBird model)"),oRe.forEach(t),b0o=i(x),Lp=n(x,"LI",{});var rRe=s(Lp);cge=n(rRe,"STRONG",{});var eEt=s(cge);v0o=r(eEt,"bigbird_pegasus"),eEt.forEach(t),F0o=r(rRe," \u2014 "),KD=n(rRe,"A",{href:!0});var oEt=s(KD);T0o=r(oEt,"BigBirdPegasusModel"),oEt.forEach(t),M0o=r(rRe," (BigBird-Pegasus model)"),rRe.forEach(t),E0o=i(x),yp=n(x,"LI",{});var tRe=s(yp);mge=n(tRe,"STRONG",{});var rEt=s(mge);C0o=r(rEt,"blenderbot"),rEt.forEach(t),w0o=r(tRe," \u2014 "),ZD=n(tRe,"A",{href:!0});var tEt=s(ZD);A0o=r(tEt,"BlenderbotModel"),tEt.forEach(t),L0o=r(tRe," (Blenderbot model)"),tRe.forEach(t),y0o=i(x),xp=n(x,"LI",{});var aRe=s(xp);fge=n(aRe,"STRONG",{});var aEt=s(fge);x0o=r(aEt,"blenderbot-small"),aEt.forEach(t),$0o=r(aRe," \u2014 "),eG=n(aRe,"A",{href:!0});var nEt=s(eG);k0o=r(nEt,"BlenderbotSmallModel"),nEt.forEach(t),S0o=r(aRe," (BlenderbotSmall model)"),aRe.forEach(t),R0o=i(x),$p=n(x,"LI",{});var nRe=s($p);gge=n(nRe,"STRONG",{});var sEt=s(gge);P0o=r(sEt,"bloom"),sEt.forEach(t),B0o=r(nRe," \u2014 "),oG=n(nRe,"A",{href:!0});var lEt=s(oG);I0o=r(lEt,"BloomModel"),lEt.forEach(t),N0o=r(nRe," (BLOOM model)"),nRe.forEach(t),q0o=i(x),kp=n(x,"LI",{});var sRe=s(kp);hge=n(sRe,"STRONG",{});var iEt=s(hge);j0o=r(iEt,"camembert"),iEt.forEach(t),D0o=r(sRe," \u2014 "),rG=n(sRe,"A",{href:!0});var dEt=s(rG);G0o=r(dEt,"CamembertModel"),dEt.forEach(t),O0o=r(sRe," (CamemBERT model)"),sRe.forEach(t),V0o=i(x),Sp=n(x,"LI",{});var lRe=s(Sp);uge=n(lRe,"STRONG",{});var cEt=s(uge);X0o=r(cEt,"canine"),cEt.forEach(t),z0o=r(lRe," \u2014 "),tG=n(lRe,"A",{href:!0});var mEt=s(tG);W0o=r(mEt,"CanineModel"),mEt.forEach(t),Q0o=r(lRe," (CANINE model)"),lRe.forEach(t),U0o=i(x),Rp=n(x,"LI",{});var iRe=s(Rp);pge=n(iRe,"STRONG",{});var fEt=s(pge);H0o=r(fEt,"clip"),fEt.forEach(t),J0o=r(iRe," \u2014 "),aG=n(iRe,"A",{href:!0});var gEt=s(aG);Y0o=r(gEt,"CLIPModel"),gEt.forEach(t),K0o=r(iRe," (CLIP model)"),iRe.forEach(t),Z0o=i(x),Pp=n(x,"LI",{});var dRe=s(Pp);_ge=n(dRe,"STRONG",{});var hEt=s(_ge);ewo=r(hEt,"codegen"),hEt.forEach(t),owo=r(dRe," \u2014 "),nG=n(dRe,"A",{href:!0});var uEt=s(nG);rwo=r(uEt,"CodeGenModel"),uEt.forEach(t),two=r(dRe," (CodeGen model)"),dRe.forEach(t),awo=i(x),Bp=n(x,"LI",{});var cRe=s(Bp);bge=n(cRe,"STRONG",{});var pEt=s(bge);nwo=r(pEt,"convbert"),pEt.forEach(t),swo=r(cRe," \u2014 "),sG=n(cRe,"A",{href:!0});var _Et=s(sG);lwo=r(_Et,"ConvBertModel"),_Et.forEach(t),iwo=r(cRe," (ConvBERT model)"),cRe.forEach(t),dwo=i(x),Ip=n(x,"LI",{});var mRe=s(Ip);vge=n(mRe,"STRONG",{});var bEt=s(vge);cwo=r(bEt,"convnext"),bEt.forEach(t),mwo=r(mRe," \u2014 "),lG=n(mRe,"A",{href:!0});var vEt=s(lG);fwo=r(vEt,"ConvNextModel"),vEt.forEach(t),gwo=r(mRe," (ConvNeXT model)"),mRe.forEach(t),hwo=i(x),Np=n(x,"LI",{});var fRe=s(Np);Fge=n(fRe,"STRONG",{});var FEt=s(Fge);uwo=r(FEt,"ctrl"),FEt.forEach(t),pwo=r(fRe," \u2014 "),iG=n(fRe,"A",{href:!0});var TEt=s(iG);_wo=r(TEt,"CTRLModel"),TEt.forEach(t),bwo=r(fRe," (CTRL model)"),fRe.forEach(t),vwo=i(x),qp=n(x,"LI",{});var gRe=s(qp);Tge=n(gRe,"STRONG",{});var MEt=s(Tge);Fwo=r(MEt,"cvt"),MEt.forEach(t),Two=r(gRe," \u2014 "),dG=n(gRe,"A",{href:!0});var EEt=s(dG);Mwo=r(EEt,"CvtModel"),EEt.forEach(t),Ewo=r(gRe," (CvT model)"),gRe.forEach(t),Cwo=i(x),jp=n(x,"LI",{});var hRe=s(jp);Mge=n(hRe,"STRONG",{});var CEt=s(Mge);wwo=r(CEt,"data2vec-audio"),CEt.forEach(t),Awo=r(hRe," \u2014 "),cG=n(hRe,"A",{href:!0});var wEt=s(cG);Lwo=r(wEt,"Data2VecAudioModel"),wEt.forEach(t),ywo=r(hRe," (Data2VecAudio model)"),hRe.forEach(t),xwo=i(x),Dp=n(x,"LI",{});var uRe=s(Dp);Ege=n(uRe,"STRONG",{});var AEt=s(Ege);$wo=r(AEt,"data2vec-text"),AEt.forEach(t),kwo=r(uRe," \u2014 "),mG=n(uRe,"A",{href:!0});var LEt=s(mG);Swo=r(LEt,"Data2VecTextModel"),LEt.forEach(t),Rwo=r(uRe," (Data2VecText model)"),uRe.forEach(t),Pwo=i(x),Gp=n(x,"LI",{});var pRe=s(Gp);Cge=n(pRe,"STRONG",{});var yEt=s(Cge);Bwo=r(yEt,"data2vec-vision"),yEt.forEach(t),Iwo=r(pRe," \u2014 "),fG=n(pRe,"A",{href:!0});var xEt=s(fG);Nwo=r(xEt,"Data2VecVisionModel"),xEt.forEach(t),qwo=r(pRe," (Data2VecVision model)"),pRe.forEach(t),jwo=i(x),Op=n(x,"LI",{});var _Re=s(Op);wge=n(_Re,"STRONG",{});var $Et=s(wge);Dwo=r($Et,"deberta"),$Et.forEach(t),Gwo=r(_Re," \u2014 "),gG=n(_Re,"A",{href:!0});var kEt=s(gG);Owo=r(kEt,"DebertaModel"),kEt.forEach(t),Vwo=r(_Re," (DeBERTa model)"),_Re.forEach(t),Xwo=i(x),Vp=n(x,"LI",{});var bRe=s(Vp);Age=n(bRe,"STRONG",{});var SEt=s(Age);zwo=r(SEt,"deberta-v2"),SEt.forEach(t),Wwo=r(bRe," \u2014 "),hG=n(bRe,"A",{href:!0});var REt=s(hG);Qwo=r(REt,"DebertaV2Model"),REt.forEach(t),Uwo=r(bRe," (DeBERTa-v2 model)"),bRe.forEach(t),Hwo=i(x),Xp=n(x,"LI",{});var vRe=s(Xp);Lge=n(vRe,"STRONG",{});var PEt=s(Lge);Jwo=r(PEt,"decision_transformer"),PEt.forEach(t),Ywo=r(vRe," \u2014 "),uG=n(vRe,"A",{href:!0});var BEt=s(uG);Kwo=r(BEt,"DecisionTransformerModel"),BEt.forEach(t),Zwo=r(vRe," (Decision Transformer model)"),vRe.forEach(t),e6o=i(x),zp=n(x,"LI",{});var FRe=s(zp);yge=n(FRe,"STRONG",{});var IEt=s(yge);o6o=r(IEt,"deit"),IEt.forEach(t),r6o=r(FRe," \u2014 "),pG=n(FRe,"A",{href:!0});var NEt=s(pG);t6o=r(NEt,"DeiTModel"),NEt.forEach(t),a6o=r(FRe," (DeiT model)"),FRe.forEach(t),n6o=i(x),Wp=n(x,"LI",{});var TRe=s(Wp);xge=n(TRe,"STRONG",{});var qEt=s(xge);s6o=r(qEt,"detr"),qEt.forEach(t),l6o=r(TRe," \u2014 "),_G=n(TRe,"A",{href:!0});var jEt=s(_G);i6o=r(jEt,"DetrModel"),jEt.forEach(t),d6o=r(TRe," (DETR model)"),TRe.forEach(t),c6o=i(x),Qp=n(x,"LI",{});var MRe=s(Qp);$ge=n(MRe,"STRONG",{});var DEt=s($ge);m6o=r(DEt,"distilbert"),DEt.forEach(t),f6o=r(MRe," \u2014 "),bG=n(MRe,"A",{href:!0});var GEt=s(bG);g6o=r(GEt,"DistilBertModel"),GEt.forEach(t),h6o=r(MRe," (DistilBERT model)"),MRe.forEach(t),u6o=i(x),Up=n(x,"LI",{});var ERe=s(Up);kge=n(ERe,"STRONG",{});var OEt=s(kge);p6o=r(OEt,"donut-swin"),OEt.forEach(t),_6o=r(ERe," \u2014 "),vG=n(ERe,"A",{href:!0});var VEt=s(vG);b6o=r(VEt,"DonutSwinModel"),VEt.forEach(t),v6o=r(ERe," (DonutSwin model)"),ERe.forEach(t),F6o=i(x),Hp=n(x,"LI",{});var CRe=s(Hp);Sge=n(CRe,"STRONG",{});var XEt=s(Sge);T6o=r(XEt,"dpr"),XEt.forEach(t),M6o=r(CRe," \u2014 "),FG=n(CRe,"A",{href:!0});var zEt=s(FG);E6o=r(zEt,"DPRQuestionEncoder"),zEt.forEach(t),C6o=r(CRe," (DPR model)"),CRe.forEach(t),w6o=i(x),Jp=n(x,"LI",{});var wRe=s(Jp);Rge=n(wRe,"STRONG",{});var WEt=s(Rge);A6o=r(WEt,"dpt"),WEt.forEach(t),L6o=r(wRe," \u2014 "),TG=n(wRe,"A",{href:!0});var QEt=s(TG);y6o=r(QEt,"DPTModel"),QEt.forEach(t),x6o=r(wRe," (DPT model)"),wRe.forEach(t),$6o=i(x),Yp=n(x,"LI",{});var ARe=s(Yp);Pge=n(ARe,"STRONG",{});var UEt=s(Pge);k6o=r(UEt,"electra"),UEt.forEach(t),S6o=r(ARe," \u2014 "),MG=n(ARe,"A",{href:!0});var HEt=s(MG);R6o=r(HEt,"ElectraModel"),HEt.forEach(t),P6o=r(ARe," (ELECTRA model)"),ARe.forEach(t),B6o=i(x),Kp=n(x,"LI",{});var LRe=s(Kp);Bge=n(LRe,"STRONG",{});var JEt=s(Bge);I6o=r(JEt,"flaubert"),JEt.forEach(t),N6o=r(LRe," \u2014 "),EG=n(LRe,"A",{href:!0});var YEt=s(EG);q6o=r(YEt,"FlaubertModel"),YEt.forEach(t),j6o=r(LRe," (FlauBERT model)"),LRe.forEach(t),D6o=i(x),Zp=n(x,"LI",{});var yRe=s(Zp);Ige=n(yRe,"STRONG",{});var KEt=s(Ige);G6o=r(KEt,"flava"),KEt.forEach(t),O6o=r(yRe," \u2014 "),CG=n(yRe,"A",{href:!0});var ZEt=s(CG);V6o=r(ZEt,"FlavaModel"),ZEt.forEach(t),X6o=r(yRe," (FLAVA model)"),yRe.forEach(t),z6o=i(x),e_=n(x,"LI",{});var xRe=s(e_);Nge=n(xRe,"STRONG",{});var e4t=s(Nge);W6o=r(e4t,"fnet"),e4t.forEach(t),Q6o=r(xRe," \u2014 "),wG=n(xRe,"A",{href:!0});var o4t=s(wG);U6o=r(o4t,"FNetModel"),o4t.forEach(t),H6o=r(xRe," (FNet model)"),xRe.forEach(t),J6o=i(x),o_=n(x,"LI",{});var $Re=s(o_);qge=n($Re,"STRONG",{});var r4t=s(qge);Y6o=r(r4t,"fsmt"),r4t.forEach(t),K6o=r($Re," \u2014 "),AG=n($Re,"A",{href:!0});var t4t=s(AG);Z6o=r(t4t,"FSMTModel"),t4t.forEach(t),eAo=r($Re," (FairSeq Machine-Translation model)"),$Re.forEach(t),oAo=i(x),nl=n(x,"LI",{});var cP=s(nl);jge=n(cP,"STRONG",{});var a4t=s(jge);rAo=r(a4t,"funnel"),a4t.forEach(t),tAo=r(cP," \u2014 "),LG=n(cP,"A",{href:!0});var n4t=s(LG);aAo=r(n4t,"FunnelModel"),n4t.forEach(t),nAo=r(cP," or "),yG=n(cP,"A",{href:!0});var s4t=s(yG);sAo=r(s4t,"FunnelBaseModel"),s4t.forEach(t),lAo=r(cP," (Funnel Transformer model)"),cP.forEach(t),iAo=i(x),r_=n(x,"LI",{});var kRe=s(r_);Dge=n(kRe,"STRONG",{});var l4t=s(Dge);dAo=r(l4t,"glpn"),l4t.forEach(t),cAo=r(kRe," \u2014 "),xG=n(kRe,"A",{href:!0});var i4t=s(xG);mAo=r(i4t,"GLPNModel"),i4t.forEach(t),fAo=r(kRe," (GLPN model)"),kRe.forEach(t),gAo=i(x),t_=n(x,"LI",{});var SRe=s(t_);Gge=n(SRe,"STRONG",{});var d4t=s(Gge);hAo=r(d4t,"gpt2"),d4t.forEach(t),uAo=r(SRe," \u2014 "),$G=n(SRe,"A",{href:!0});var c4t=s($G);pAo=r(c4t,"GPT2Model"),c4t.forEach(t),_Ao=r(SRe," (OpenAI GPT-2 model)"),SRe.forEach(t),bAo=i(x),a_=n(x,"LI",{});var RRe=s(a_);Oge=n(RRe,"STRONG",{});var m4t=s(Oge);vAo=r(m4t,"gpt_neo"),m4t.forEach(t),FAo=r(RRe," \u2014 "),kG=n(RRe,"A",{href:!0});var f4t=s(kG);TAo=r(f4t,"GPTNeoModel"),f4t.forEach(t),MAo=r(RRe," (GPT Neo model)"),RRe.forEach(t),EAo=i(x),n_=n(x,"LI",{});var PRe=s(n_);Vge=n(PRe,"STRONG",{});var g4t=s(Vge);CAo=r(g4t,"gpt_neox"),g4t.forEach(t),wAo=r(PRe," \u2014 "),SG=n(PRe,"A",{href:!0});var h4t=s(SG);AAo=r(h4t,"GPTNeoXModel"),h4t.forEach(t),LAo=r(PRe," (GPT NeoX model)"),PRe.forEach(t),yAo=i(x),s_=n(x,"LI",{});var BRe=s(s_);Xge=n(BRe,"STRONG",{});var u4t=s(Xge);xAo=r(u4t,"gptj"),u4t.forEach(t),$Ao=r(BRe," \u2014 "),RG=n(BRe,"A",{href:!0});var p4t=s(RG);kAo=r(p4t,"GPTJModel"),p4t.forEach(t),SAo=r(BRe," (GPT-J model)"),BRe.forEach(t),RAo=i(x),l_=n(x,"LI",{});var IRe=s(l_);zge=n(IRe,"STRONG",{});var _4t=s(zge);PAo=r(_4t,"groupvit"),_4t.forEach(t),BAo=r(IRe," \u2014 "),PG=n(IRe,"A",{href:!0});var b4t=s(PG);IAo=r(b4t,"GroupViTModel"),b4t.forEach(t),NAo=r(IRe," (GroupViT model)"),IRe.forEach(t),qAo=i(x),i_=n(x,"LI",{});var NRe=s(i_);Wge=n(NRe,"STRONG",{});var v4t=s(Wge);jAo=r(v4t,"hubert"),v4t.forEach(t),DAo=r(NRe," \u2014 "),BG=n(NRe,"A",{href:!0});var F4t=s(BG);GAo=r(F4t,"HubertModel"),F4t.forEach(t),OAo=r(NRe," (Hubert model)"),NRe.forEach(t),VAo=i(x),d_=n(x,"LI",{});var qRe=s(d_);Qge=n(qRe,"STRONG",{});var T4t=s(Qge);XAo=r(T4t,"ibert"),T4t.forEach(t),zAo=r(qRe," \u2014 "),IG=n(qRe,"A",{href:!0});var M4t=s(IG);WAo=r(M4t,"IBertModel"),M4t.forEach(t),QAo=r(qRe," (I-BERT model)"),qRe.forEach(t),UAo=i(x),c_=n(x,"LI",{});var jRe=s(c_);Uge=n(jRe,"STRONG",{});var E4t=s(Uge);HAo=r(E4t,"imagegpt"),E4t.forEach(t),JAo=r(jRe," \u2014 "),NG=n(jRe,"A",{href:!0});var C4t=s(NG);YAo=r(C4t,"ImageGPTModel"),C4t.forEach(t),KAo=r(jRe," (ImageGPT model)"),jRe.forEach(t),ZAo=i(x),m_=n(x,"LI",{});var DRe=s(m_);Hge=n(DRe,"STRONG",{});var w4t=s(Hge);e7o=r(w4t,"layoutlm"),w4t.forEach(t),o7o=r(DRe," \u2014 "),qG=n(DRe,"A",{href:!0});var A4t=s(qG);r7o=r(A4t,"LayoutLMModel"),A4t.forEach(t),t7o=r(DRe," (LayoutLM model)"),DRe.forEach(t),a7o=i(x),f_=n(x,"LI",{});var GRe=s(f_);Jge=n(GRe,"STRONG",{});var L4t=s(Jge);n7o=r(L4t,"layoutlmv2"),L4t.forEach(t),s7o=r(GRe," \u2014 "),jG=n(GRe,"A",{href:!0});var y4t=s(jG);l7o=r(y4t,"LayoutLMv2Model"),y4t.forEach(t),i7o=r(GRe," (LayoutLMv2 model)"),GRe.forEach(t),d7o=i(x),g_=n(x,"LI",{});var ORe=s(g_);Yge=n(ORe,"STRONG",{});var x4t=s(Yge);c7o=r(x4t,"layoutlmv3"),x4t.forEach(t),m7o=r(ORe," \u2014 "),DG=n(ORe,"A",{href:!0});var $4t=s(DG);f7o=r($4t,"LayoutLMv3Model"),$4t.forEach(t),g7o=r(ORe," (LayoutLMv3 model)"),ORe.forEach(t),h7o=i(x),h_=n(x,"LI",{});var VRe=s(h_);Kge=n(VRe,"STRONG",{});var k4t=s(Kge);u7o=r(k4t,"led"),k4t.forEach(t),p7o=r(VRe," \u2014 "),GG=n(VRe,"A",{href:!0});var S4t=s(GG);_7o=r(S4t,"LEDModel"),S4t.forEach(t),b7o=r(VRe," (LED model)"),VRe.forEach(t),v7o=i(x),u_=n(x,"LI",{});var XRe=s(u_);Zge=n(XRe,"STRONG",{});var R4t=s(Zge);F7o=r(R4t,"levit"),R4t.forEach(t),T7o=r(XRe," \u2014 "),OG=n(XRe,"A",{href:!0});var P4t=s(OG);M7o=r(P4t,"LevitModel"),P4t.forEach(t),E7o=r(XRe," (LeViT model)"),XRe.forEach(t),C7o=i(x),p_=n(x,"LI",{});var zRe=s(p_);ehe=n(zRe,"STRONG",{});var B4t=s(ehe);w7o=r(B4t,"longformer"),B4t.forEach(t),A7o=r(zRe," \u2014 "),VG=n(zRe,"A",{href:!0});var I4t=s(VG);L7o=r(I4t,"LongformerModel"),I4t.forEach(t),y7o=r(zRe," (Longformer model)"),zRe.forEach(t),x7o=i(x),__=n(x,"LI",{});var WRe=s(__);ohe=n(WRe,"STRONG",{});var N4t=s(ohe);$7o=r(N4t,"longt5"),N4t.forEach(t),k7o=r(WRe," \u2014 "),XG=n(WRe,"A",{href:!0});var q4t=s(XG);S7o=r(q4t,"LongT5Model"),q4t.forEach(t),R7o=r(WRe," (LongT5 model)"),WRe.forEach(t),P7o=i(x),b_=n(x,"LI",{});var QRe=s(b_);rhe=n(QRe,"STRONG",{});var j4t=s(rhe);B7o=r(j4t,"luke"),j4t.forEach(t),I7o=r(QRe," \u2014 "),zG=n(QRe,"A",{href:!0});var D4t=s(zG);N7o=r(D4t,"LukeModel"),D4t.forEach(t),q7o=r(QRe," (LUKE model)"),QRe.forEach(t),j7o=i(x),v_=n(x,"LI",{});var URe=s(v_);the=n(URe,"STRONG",{});var G4t=s(the);D7o=r(G4t,"lxmert"),G4t.forEach(t),G7o=r(URe," \u2014 "),WG=n(URe,"A",{href:!0});var O4t=s(WG);O7o=r(O4t,"LxmertModel"),O4t.forEach(t),V7o=r(URe," (LXMERT model)"),URe.forEach(t),X7o=i(x),F_=n(x,"LI",{});var HRe=s(F_);ahe=n(HRe,"STRONG",{});var V4t=s(ahe);z7o=r(V4t,"m2m_100"),V4t.forEach(t),W7o=r(HRe," \u2014 "),QG=n(HRe,"A",{href:!0});var X4t=s(QG);Q7o=r(X4t,"M2M100Model"),X4t.forEach(t),U7o=r(HRe," (M2M100 model)"),HRe.forEach(t),H7o=i(x),T_=n(x,"LI",{});var JRe=s(T_);nhe=n(JRe,"STRONG",{});var z4t=s(nhe);J7o=r(z4t,"marian"),z4t.forEach(t),Y7o=r(JRe," \u2014 "),UG=n(JRe,"A",{href:!0});var W4t=s(UG);K7o=r(W4t,"MarianModel"),W4t.forEach(t),Z7o=r(JRe," (Marian model)"),JRe.forEach(t),eLo=i(x),M_=n(x,"LI",{});var YRe=s(M_);she=n(YRe,"STRONG",{});var Q4t=s(she);oLo=r(Q4t,"maskformer"),Q4t.forEach(t),rLo=r(YRe," \u2014 "),HG=n(YRe,"A",{href:!0});var U4t=s(HG);tLo=r(U4t,"MaskFormerModel"),U4t.forEach(t),aLo=r(YRe," (MaskFormer model)"),YRe.forEach(t),nLo=i(x),E_=n(x,"LI",{});var KRe=s(E_);lhe=n(KRe,"STRONG",{});var H4t=s(lhe);sLo=r(H4t,"mbart"),H4t.forEach(t),lLo=r(KRe," \u2014 "),JG=n(KRe,"A",{href:!0});var J4t=s(JG);iLo=r(J4t,"MBartModel"),J4t.forEach(t),dLo=r(KRe," (mBART model)"),KRe.forEach(t),cLo=i(x),C_=n(x,"LI",{});var ZRe=s(C_);ihe=n(ZRe,"STRONG",{});var Y4t=s(ihe);mLo=r(Y4t,"mctct"),Y4t.forEach(t),fLo=r(ZRe," \u2014 "),YG=n(ZRe,"A",{href:!0});var K4t=s(YG);gLo=r(K4t,"MCTCTModel"),K4t.forEach(t),hLo=r(ZRe," (M-CTC-T model)"),ZRe.forEach(t),uLo=i(x),w_=n(x,"LI",{});var ePe=s(w_);dhe=n(ePe,"STRONG",{});var Z4t=s(dhe);pLo=r(Z4t,"megatron-bert"),Z4t.forEach(t),_Lo=r(ePe," \u2014 "),KG=n(ePe,"A",{href:!0});var eCt=s(KG);bLo=r(eCt,"MegatronBertModel"),eCt.forEach(t),vLo=r(ePe," (Megatron-BERT model)"),ePe.forEach(t),FLo=i(x),A_=n(x,"LI",{});var oPe=s(A_);che=n(oPe,"STRONG",{});var oCt=s(che);TLo=r(oCt,"mobilebert"),oCt.forEach(t),MLo=r(oPe," \u2014 "),ZG=n(oPe,"A",{href:!0});var rCt=s(ZG);ELo=r(rCt,"MobileBertModel"),rCt.forEach(t),CLo=r(oPe," (MobileBERT model)"),oPe.forEach(t),wLo=i(x),L_=n(x,"LI",{});var rPe=s(L_);mhe=n(rPe,"STRONG",{});var tCt=s(mhe);ALo=r(tCt,"mobilevit"),tCt.forEach(t),LLo=r(rPe," \u2014 "),eO=n(rPe,"A",{href:!0});var aCt=s(eO);yLo=r(aCt,"MobileViTModel"),aCt.forEach(t),xLo=r(rPe," (MobileViT model)"),rPe.forEach(t),$Lo=i(x),y_=n(x,"LI",{});var tPe=s(y_);fhe=n(tPe,"STRONG",{});var nCt=s(fhe);kLo=r(nCt,"mpnet"),nCt.forEach(t),SLo=r(tPe," \u2014 "),oO=n(tPe,"A",{href:!0});var sCt=s(oO);RLo=r(sCt,"MPNetModel"),sCt.forEach(t),PLo=r(tPe," (MPNet model)"),tPe.forEach(t),BLo=i(x),x_=n(x,"LI",{});var aPe=s(x_);ghe=n(aPe,"STRONG",{});var lCt=s(ghe);ILo=r(lCt,"mt5"),lCt.forEach(t),NLo=r(aPe," \u2014 "),rO=n(aPe,"A",{href:!0});var iCt=s(rO);qLo=r(iCt,"MT5Model"),iCt.forEach(t),jLo=r(aPe," (MT5 model)"),aPe.forEach(t),DLo=i(x),$_=n(x,"LI",{});var nPe=s($_);hhe=n(nPe,"STRONG",{});var dCt=s(hhe);GLo=r(dCt,"mvp"),dCt.forEach(t),OLo=r(nPe," \u2014 "),tO=n(nPe,"A",{href:!0});var cCt=s(tO);VLo=r(cCt,"MvpModel"),cCt.forEach(t),XLo=r(nPe," (MVP model)"),nPe.forEach(t),zLo=i(x),k_=n(x,"LI",{});var sPe=s(k_);uhe=n(sPe,"STRONG",{});var mCt=s(uhe);WLo=r(mCt,"nezha"),mCt.forEach(t),QLo=r(sPe," \u2014 "),aO=n(sPe,"A",{href:!0});var fCt=s(aO);ULo=r(fCt,"NezhaModel"),fCt.forEach(t),HLo=r(sPe," (Nezha model)"),sPe.forEach(t),JLo=i(x),S_=n(x,"LI",{});var lPe=s(S_);phe=n(lPe,"STRONG",{});var gCt=s(phe);YLo=r(gCt,"nllb"),gCt.forEach(t),KLo=r(lPe," \u2014 "),nO=n(lPe,"A",{href:!0});var hCt=s(nO);ZLo=r(hCt,"M2M100Model"),hCt.forEach(t),eyo=r(lPe," (NLLB model)"),lPe.forEach(t),oyo=i(x),R_=n(x,"LI",{});var iPe=s(R_);_he=n(iPe,"STRONG",{});var uCt=s(_he);ryo=r(uCt,"nystromformer"),uCt.forEach(t),tyo=r(iPe," \u2014 "),sO=n(iPe,"A",{href:!0});var pCt=s(sO);ayo=r(pCt,"NystromformerModel"),pCt.forEach(t),nyo=r(iPe," (Nystr\xF6mformer model)"),iPe.forEach(t),syo=i(x),P_=n(x,"LI",{});var dPe=s(P_);bhe=n(dPe,"STRONG",{});var _Ct=s(bhe);lyo=r(_Ct,"openai-gpt"),_Ct.forEach(t),iyo=r(dPe," \u2014 "),lO=n(dPe,"A",{href:!0});var bCt=s(lO);dyo=r(bCt,"OpenAIGPTModel"),bCt.forEach(t),cyo=r(dPe," (OpenAI GPT model)"),dPe.forEach(t),myo=i(x),B_=n(x,"LI",{});var cPe=s(B_);vhe=n(cPe,"STRONG",{});var vCt=s(vhe);fyo=r(vCt,"opt"),vCt.forEach(t),gyo=r(cPe," \u2014 "),iO=n(cPe,"A",{href:!0});var FCt=s(iO);hyo=r(FCt,"OPTModel"),FCt.forEach(t),uyo=r(cPe," (OPT model)"),cPe.forEach(t),pyo=i(x),I_=n(x,"LI",{});var mPe=s(I_);Fhe=n(mPe,"STRONG",{});var TCt=s(Fhe);_yo=r(TCt,"owlvit"),TCt.forEach(t),byo=r(mPe," \u2014 "),dO=n(mPe,"A",{href:!0});var MCt=s(dO);vyo=r(MCt,"OwlViTModel"),MCt.forEach(t),Fyo=r(mPe," (OWL-ViT model)"),mPe.forEach(t),Tyo=i(x),N_=n(x,"LI",{});var fPe=s(N_);The=n(fPe,"STRONG",{});var ECt=s(The);Myo=r(ECt,"pegasus"),ECt.forEach(t),Eyo=r(fPe," \u2014 "),cO=n(fPe,"A",{href:!0});var CCt=s(cO);Cyo=r(CCt,"PegasusModel"),CCt.forEach(t),wyo=r(fPe," (Pegasus model)"),fPe.forEach(t),Ayo=i(x),q_=n(x,"LI",{});var gPe=s(q_);Mhe=n(gPe,"STRONG",{});var wCt=s(Mhe);Lyo=r(wCt,"pegasus_x"),wCt.forEach(t),yyo=r(gPe," \u2014 "),mO=n(gPe,"A",{href:!0});var ACt=s(mO);xyo=r(ACt,"PegasusXModel"),ACt.forEach(t),$yo=r(gPe," (PEGASUS-X model)"),gPe.forEach(t),kyo=i(x),j_=n(x,"LI",{});var hPe=s(j_);Ehe=n(hPe,"STRONG",{});var LCt=s(Ehe);Syo=r(LCt,"perceiver"),LCt.forEach(t),Ryo=r(hPe," \u2014 "),fO=n(hPe,"A",{href:!0});var yCt=s(fO);Pyo=r(yCt,"PerceiverModel"),yCt.forEach(t),Byo=r(hPe," (Perceiver model)"),hPe.forEach(t),Iyo=i(x),D_=n(x,"LI",{});var uPe=s(D_);Che=n(uPe,"STRONG",{});var xCt=s(Che);Nyo=r(xCt,"plbart"),xCt.forEach(t),qyo=r(uPe," \u2014 "),gO=n(uPe,"A",{href:!0});var $Ct=s(gO);jyo=r($Ct,"PLBartModel"),$Ct.forEach(t),Dyo=r(uPe," (PLBart model)"),uPe.forEach(t),Gyo=i(x),G_=n(x,"LI",{});var pPe=s(G_);whe=n(pPe,"STRONG",{});var kCt=s(whe);Oyo=r(kCt,"poolformer"),kCt.forEach(t),Vyo=r(pPe," \u2014 "),hO=n(pPe,"A",{href:!0});var SCt=s(hO);Xyo=r(SCt,"PoolFormerModel"),SCt.forEach(t),zyo=r(pPe," (PoolFormer model)"),pPe.forEach(t),Wyo=i(x),O_=n(x,"LI",{});var _Pe=s(O_);Ahe=n(_Pe,"STRONG",{});var RCt=s(Ahe);Qyo=r(RCt,"prophetnet"),RCt.forEach(t),Uyo=r(_Pe," \u2014 "),uO=n(_Pe,"A",{href:!0});var PCt=s(uO);Hyo=r(PCt,"ProphetNetModel"),PCt.forEach(t),Jyo=r(_Pe," (ProphetNet model)"),_Pe.forEach(t),Yyo=i(x),V_=n(x,"LI",{});var bPe=s(V_);Lhe=n(bPe,"STRONG",{});var BCt=s(Lhe);Kyo=r(BCt,"qdqbert"),BCt.forEach(t),Zyo=r(bPe," \u2014 "),pO=n(bPe,"A",{href:!0});var ICt=s(pO);e8o=r(ICt,"QDQBertModel"),ICt.forEach(t),o8o=r(bPe," (QDQBert model)"),bPe.forEach(t),r8o=i(x),X_=n(x,"LI",{});var vPe=s(X_);yhe=n(vPe,"STRONG",{});var NCt=s(yhe);t8o=r(NCt,"reformer"),NCt.forEach(t),a8o=r(vPe," \u2014 "),_O=n(vPe,"A",{href:!0});var qCt=s(_O);n8o=r(qCt,"ReformerModel"),qCt.forEach(t),s8o=r(vPe," (Reformer model)"),vPe.forEach(t),l8o=i(x),z_=n(x,"LI",{});var FPe=s(z_);xhe=n(FPe,"STRONG",{});var jCt=s(xhe);i8o=r(jCt,"regnet"),jCt.forEach(t),d8o=r(FPe," \u2014 "),bO=n(FPe,"A",{href:!0});var DCt=s(bO);c8o=r(DCt,"RegNetModel"),DCt.forEach(t),m8o=r(FPe," (RegNet model)"),FPe.forEach(t),f8o=i(x),W_=n(x,"LI",{});var TPe=s(W_);$he=n(TPe,"STRONG",{});var GCt=s($he);g8o=r(GCt,"rembert"),GCt.forEach(t),h8o=r(TPe," \u2014 "),vO=n(TPe,"A",{href:!0});var OCt=s(vO);u8o=r(OCt,"RemBertModel"),OCt.forEach(t),p8o=r(TPe," (RemBERT model)"),TPe.forEach(t),_8o=i(x),Q_=n(x,"LI",{});var MPe=s(Q_);khe=n(MPe,"STRONG",{});var VCt=s(khe);b8o=r(VCt,"resnet"),VCt.forEach(t),v8o=r(MPe," \u2014 "),FO=n(MPe,"A",{href:!0});var XCt=s(FO);F8o=r(XCt,"ResNetModel"),XCt.forEach(t),T8o=r(MPe," (ResNet model)"),MPe.forEach(t),M8o=i(x),U_=n(x,"LI",{});var EPe=s(U_);She=n(EPe,"STRONG",{});var zCt=s(She);E8o=r(zCt,"retribert"),zCt.forEach(t),C8o=r(EPe," \u2014 "),TO=n(EPe,"A",{href:!0});var WCt=s(TO);w8o=r(WCt,"RetriBertModel"),WCt.forEach(t),A8o=r(EPe," (RetriBERT model)"),EPe.forEach(t),L8o=i(x),H_=n(x,"LI",{});var CPe=s(H_);Rhe=n(CPe,"STRONG",{});var QCt=s(Rhe);y8o=r(QCt,"roberta"),QCt.forEach(t),x8o=r(CPe," \u2014 "),MO=n(CPe,"A",{href:!0});var UCt=s(MO);$8o=r(UCt,"RobertaModel"),UCt.forEach(t),k8o=r(CPe," (RoBERTa model)"),CPe.forEach(t),S8o=i(x),J_=n(x,"LI",{});var wPe=s(J_);Phe=n(wPe,"STRONG",{});var HCt=s(Phe);R8o=r(HCt,"roformer"),HCt.forEach(t),P8o=r(wPe," \u2014 "),EO=n(wPe,"A",{href:!0});var JCt=s(EO);B8o=r(JCt,"RoFormerModel"),JCt.forEach(t),I8o=r(wPe," (RoFormer model)"),wPe.forEach(t),N8o=i(x),Y_=n(x,"LI",{});var APe=s(Y_);Bhe=n(APe,"STRONG",{});var YCt=s(Bhe);q8o=r(YCt,"segformer"),YCt.forEach(t),j8o=r(APe," \u2014 "),CO=n(APe,"A",{href:!0});var KCt=s(CO);D8o=r(KCt,"SegformerModel"),KCt.forEach(t),G8o=r(APe," (SegFormer model)"),APe.forEach(t),O8o=i(x),K_=n(x,"LI",{});var LPe=s(K_);Ihe=n(LPe,"STRONG",{});var ZCt=s(Ihe);V8o=r(ZCt,"sew"),ZCt.forEach(t),X8o=r(LPe," \u2014 "),wO=n(LPe,"A",{href:!0});var e3t=s(wO);z8o=r(e3t,"SEWModel"),e3t.forEach(t),W8o=r(LPe," (SEW model)"),LPe.forEach(t),Q8o=i(x),Z_=n(x,"LI",{});var yPe=s(Z_);Nhe=n(yPe,"STRONG",{});var o3t=s(Nhe);U8o=r(o3t,"sew-d"),o3t.forEach(t),H8o=r(yPe," \u2014 "),AO=n(yPe,"A",{href:!0});var r3t=s(AO);J8o=r(r3t,"SEWDModel"),r3t.forEach(t),Y8o=r(yPe," (SEW-D model)"),yPe.forEach(t),K8o=i(x),e2=n(x,"LI",{});var xPe=s(e2);qhe=n(xPe,"STRONG",{});var t3t=s(qhe);Z8o=r(t3t,"speech_to_text"),t3t.forEach(t),e9o=r(xPe," \u2014 "),LO=n(xPe,"A",{href:!0});var a3t=s(LO);o9o=r(a3t,"Speech2TextModel"),a3t.forEach(t),r9o=r(xPe," (Speech2Text model)"),xPe.forEach(t),t9o=i(x),o2=n(x,"LI",{});var $Pe=s(o2);jhe=n($Pe,"STRONG",{});var n3t=s(jhe);a9o=r(n3t,"splinter"),n3t.forEach(t),n9o=r($Pe," \u2014 "),yO=n($Pe,"A",{href:!0});var s3t=s(yO);s9o=r(s3t,"SplinterModel"),s3t.forEach(t),l9o=r($Pe," (Splinter model)"),$Pe.forEach(t),i9o=i(x),r2=n(x,"LI",{});var kPe=s(r2);Dhe=n(kPe,"STRONG",{});var l3t=s(Dhe);d9o=r(l3t,"squeezebert"),l3t.forEach(t),c9o=r(kPe," \u2014 "),xO=n(kPe,"A",{href:!0});var i3t=s(xO);m9o=r(i3t,"SqueezeBertModel"),i3t.forEach(t),f9o=r(kPe," (SqueezeBERT model)"),kPe.forEach(t),g9o=i(x),t2=n(x,"LI",{});var SPe=s(t2);Ghe=n(SPe,"STRONG",{});var d3t=s(Ghe);h9o=r(d3t,"swin"),d3t.forEach(t),u9o=r(SPe," \u2014 "),$O=n(SPe,"A",{href:!0});var c3t=s($O);p9o=r(c3t,"SwinModel"),c3t.forEach(t),_9o=r(SPe," (Swin Transformer model)"),SPe.forEach(t),b9o=i(x),a2=n(x,"LI",{});var RPe=s(a2);Ohe=n(RPe,"STRONG",{});var m3t=s(Ohe);v9o=r(m3t,"swinv2"),m3t.forEach(t),F9o=r(RPe," \u2014 "),kO=n(RPe,"A",{href:!0});var f3t=s(kO);T9o=r(f3t,"Swinv2Model"),f3t.forEach(t),M9o=r(RPe," (Swin Transformer V2 model)"),RPe.forEach(t),E9o=i(x),n2=n(x,"LI",{});var PPe=s(n2);Vhe=n(PPe,"STRONG",{});var g3t=s(Vhe);C9o=r(g3t,"t5"),g3t.forEach(t),w9o=r(PPe," \u2014 "),SO=n(PPe,"A",{href:!0});var h3t=s(SO);A9o=r(h3t,"T5Model"),h3t.forEach(t),L9o=r(PPe," (T5 model)"),PPe.forEach(t),y9o=i(x),s2=n(x,"LI",{});var BPe=s(s2);Xhe=n(BPe,"STRONG",{});var u3t=s(Xhe);x9o=r(u3t,"tapas"),u3t.forEach(t),$9o=r(BPe," \u2014 "),RO=n(BPe,"A",{href:!0});var p3t=s(RO);k9o=r(p3t,"TapasModel"),p3t.forEach(t),S9o=r(BPe," (TAPAS model)"),BPe.forEach(t),R9o=i(x),l2=n(x,"LI",{});var IPe=s(l2);zhe=n(IPe,"STRONG",{});var _3t=s(zhe);P9o=r(_3t,"trajectory_transformer"),_3t.forEach(t),B9o=r(IPe," \u2014 "),PO=n(IPe,"A",{href:!0});var b3t=s(PO);I9o=r(b3t,"TrajectoryTransformerModel"),b3t.forEach(t),N9o=r(IPe," (Trajectory Transformer model)"),IPe.forEach(t),q9o=i(x),i2=n(x,"LI",{});var NPe=s(i2);Whe=n(NPe,"STRONG",{});var v3t=s(Whe);j9o=r(v3t,"transfo-xl"),v3t.forEach(t),D9o=r(NPe," \u2014 "),BO=n(NPe,"A",{href:!0});var F3t=s(BO);G9o=r(F3t,"TransfoXLModel"),F3t.forEach(t),O9o=r(NPe," (Transformer-XL model)"),NPe.forEach(t),V9o=i(x),d2=n(x,"LI",{});var qPe=s(d2);Qhe=n(qPe,"STRONG",{});var T3t=s(Qhe);X9o=r(T3t,"unispeech"),T3t.forEach(t),z9o=r(qPe," \u2014 "),IO=n(qPe,"A",{href:!0});var M3t=s(IO);W9o=r(M3t,"UniSpeechModel"),M3t.forEach(t),Q9o=r(qPe," (UniSpeech model)"),qPe.forEach(t),U9o=i(x),c2=n(x,"LI",{});var jPe=s(c2);Uhe=n(jPe,"STRONG",{});var E3t=s(Uhe);H9o=r(E3t,"unispeech-sat"),E3t.forEach(t),J9o=r(jPe," \u2014 "),NO=n(jPe,"A",{href:!0});var C3t=s(NO);Y9o=r(C3t,"UniSpeechSatModel"),C3t.forEach(t),K9o=r(jPe," (UniSpeechSat model)"),jPe.forEach(t),Z9o=i(x),m2=n(x,"LI",{});var DPe=s(m2);Hhe=n(DPe,"STRONG",{});var w3t=s(Hhe);exo=r(w3t,"van"),w3t.forEach(t),oxo=r(DPe," \u2014 "),qO=n(DPe,"A",{href:!0});var A3t=s(qO);rxo=r(A3t,"VanModel"),A3t.forEach(t),txo=r(DPe," (VAN model)"),DPe.forEach(t),axo=i(x),f2=n(x,"LI",{});var GPe=s(f2);Jhe=n(GPe,"STRONG",{});var L3t=s(Jhe);nxo=r(L3t,"videomae"),L3t.forEach(t),sxo=r(GPe," \u2014 "),jO=n(GPe,"A",{href:!0});var y3t=s(jO);lxo=r(y3t,"VideoMAEModel"),y3t.forEach(t),ixo=r(GPe," (VideoMAE model)"),GPe.forEach(t),dxo=i(x),g2=n(x,"LI",{});var OPe=s(g2);Yhe=n(OPe,"STRONG",{});var x3t=s(Yhe);cxo=r(x3t,"vilt"),x3t.forEach(t),mxo=r(OPe," \u2014 "),DO=n(OPe,"A",{href:!0});var $3t=s(DO);fxo=r($3t,"ViltModel"),$3t.forEach(t),gxo=r(OPe," (ViLT model)"),OPe.forEach(t),hxo=i(x),h2=n(x,"LI",{});var VPe=s(h2);Khe=n(VPe,"STRONG",{});var k3t=s(Khe);uxo=r(k3t,"vision-text-dual-encoder"),k3t.forEach(t),pxo=r(VPe," \u2014 "),GO=n(VPe,"A",{href:!0});var S3t=s(GO);_xo=r(S3t,"VisionTextDualEncoderModel"),S3t.forEach(t),bxo=r(VPe," (VisionTextDualEncoder model)"),VPe.forEach(t),vxo=i(x),u2=n(x,"LI",{});var XPe=s(u2);Zhe=n(XPe,"STRONG",{});var R3t=s(Zhe);Fxo=r(R3t,"visual_bert"),R3t.forEach(t),Txo=r(XPe," \u2014 "),OO=n(XPe,"A",{href:!0});var P3t=s(OO);Mxo=r(P3t,"VisualBertModel"),P3t.forEach(t),Exo=r(XPe," (VisualBERT model)"),XPe.forEach(t),Cxo=i(x),p2=n(x,"LI",{});var zPe=s(p2);eue=n(zPe,"STRONG",{});var B3t=s(eue);wxo=r(B3t,"vit"),B3t.forEach(t),Axo=r(zPe," \u2014 "),VO=n(zPe,"A",{href:!0});var I3t=s(VO);Lxo=r(I3t,"ViTModel"),I3t.forEach(t),yxo=r(zPe," (ViT model)"),zPe.forEach(t),xxo=i(x),_2=n(x,"LI",{});var WPe=s(_2);oue=n(WPe,"STRONG",{});var N3t=s(oue);$xo=r(N3t,"vit_mae"),N3t.forEach(t),kxo=r(WPe," \u2014 "),XO=n(WPe,"A",{href:!0});var q3t=s(XO);Sxo=r(q3t,"ViTMAEModel"),q3t.forEach(t),Rxo=r(WPe," (ViTMAE model)"),WPe.forEach(t),Pxo=i(x),b2=n(x,"LI",{});var QPe=s(b2);rue=n(QPe,"STRONG",{});var j3t=s(rue);Bxo=r(j3t,"wav2vec2"),j3t.forEach(t),Ixo=r(QPe," \u2014 "),zO=n(QPe,"A",{href:!0});var D3t=s(zO);Nxo=r(D3t,"Wav2Vec2Model"),D3t.forEach(t),qxo=r(QPe," (Wav2Vec2 model)"),QPe.forEach(t),jxo=i(x),v2=n(x,"LI",{});var UPe=s(v2);tue=n(UPe,"STRONG",{});var G3t=s(tue);Dxo=r(G3t,"wav2vec2-conformer"),G3t.forEach(t),Gxo=r(UPe," \u2014 "),WO=n(UPe,"A",{href:!0});var O3t=s(WO);Oxo=r(O3t,"Wav2Vec2ConformerModel"),O3t.forEach(t),Vxo=r(UPe," (Wav2Vec2-Conformer model)"),UPe.forEach(t),Xxo=i(x),F2=n(x,"LI",{});var HPe=s(F2);aue=n(HPe,"STRONG",{});var V3t=s(aue);zxo=r(V3t,"wavlm"),V3t.forEach(t),Wxo=r(HPe," \u2014 "),QO=n(HPe,"A",{href:!0});var X3t=s(QO);Qxo=r(X3t,"WavLMModel"),X3t.forEach(t),Uxo=r(HPe," (WavLM model)"),HPe.forEach(t),Hxo=i(x),T2=n(x,"LI",{});var JPe=s(T2);nue=n(JPe,"STRONG",{});var z3t=s(nue);Jxo=r(z3t,"xglm"),z3t.forEach(t),Yxo=r(JPe," \u2014 "),UO=n(JPe,"A",{href:!0});var W3t=s(UO);Kxo=r(W3t,"XGLMModel"),W3t.forEach(t),Zxo=r(JPe," (XGLM model)"),JPe.forEach(t),e$o=i(x),M2=n(x,"LI",{});var YPe=s(M2);sue=n(YPe,"STRONG",{});var Q3t=s(sue);o$o=r(Q3t,"xlm"),Q3t.forEach(t),r$o=r(YPe," \u2014 "),HO=n(YPe,"A",{href:!0});var U3t=s(HO);t$o=r(U3t,"XLMModel"),U3t.forEach(t),a$o=r(YPe," (XLM model)"),YPe.forEach(t),n$o=i(x),E2=n(x,"LI",{});var KPe=s(E2);lue=n(KPe,"STRONG",{});var H3t=s(lue);s$o=r(H3t,"xlm-prophetnet"),H3t.forEach(t),l$o=r(KPe," \u2014 "),JO=n(KPe,"A",{href:!0});var J3t=s(JO);i$o=r(J3t,"XLMProphetNetModel"),J3t.forEach(t),d$o=r(KPe," (XLM-ProphetNet model)"),KPe.forEach(t),c$o=i(x),C2=n(x,"LI",{});var ZPe=s(C2);iue=n(ZPe,"STRONG",{});var Y3t=s(iue);m$o=r(Y3t,"xlm-roberta"),Y3t.forEach(t),f$o=r(ZPe," \u2014 "),YO=n(ZPe,"A",{href:!0});var K3t=s(YO);g$o=r(K3t,"XLMRobertaModel"),K3t.forEach(t),h$o=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),u$o=i(x),w2=n(x,"LI",{});var eBe=s(w2);due=n(eBe,"STRONG",{});var Z3t=s(due);p$o=r(Z3t,"xlm-roberta-xl"),Z3t.forEach(t),_$o=r(eBe," \u2014 "),KO=n(eBe,"A",{href:!0});var e5t=s(KO);b$o=r(e5t,"XLMRobertaXLModel"),e5t.forEach(t),v$o=r(eBe," (XLM-RoBERTa-XL model)"),eBe.forEach(t),F$o=i(x),A2=n(x,"LI",{});var oBe=s(A2);cue=n(oBe,"STRONG",{});var o5t=s(cue);T$o=r(o5t,"xlnet"),o5t.forEach(t),M$o=r(oBe," \u2014 "),ZO=n(oBe,"A",{href:!0});var r5t=s(ZO);E$o=r(r5t,"XLNetModel"),r5t.forEach(t),C$o=r(oBe," (XLNet model)"),oBe.forEach(t),w$o=i(x),L2=n(x,"LI",{});var rBe=s(L2);mue=n(rBe,"STRONG",{});var t5t=s(mue);A$o=r(t5t,"yolos"),t5t.forEach(t),L$o=r(rBe," \u2014 "),eV=n(rBe,"A",{href:!0});var a5t=s(eV);y$o=r(a5t,"YolosModel"),a5t.forEach(t),x$o=r(rBe," (YOLOS model)"),rBe.forEach(t),$$o=i(x),y2=n(x,"LI",{});var tBe=s(y2);fue=n(tBe,"STRONG",{});var n5t=s(fue);k$o=r(n5t,"yoso"),n5t.forEach(t),S$o=r(tBe," \u2014 "),oV=n(tBe,"A",{href:!0});var s5t=s(oV);R$o=r(s5t,"YosoModel"),s5t.forEach(t),P$o=r(tBe," (YOSO model)"),tBe.forEach(t),x.forEach(t),B$o=i(ga),x2=n(ga,"P",{});var aBe=s(x2);I$o=r(aBe,"The model is set in evaluation mode by default using "),gue=n(aBe,"CODE",{});var l5t=s(gue);N$o=r(l5t,"model.eval()"),l5t.forEach(t),q$o=r(aBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=n(aBe,"CODE",{});var i5t=s(hue);j$o=r(i5t,"model.train()"),i5t.forEach(t),aBe.forEach(t),D$o=i(ga),T($2.$$.fragment,ga),ga.forEach(t),hl.forEach(t),JUe=i(m),nd=n(m,"H2",{class:!0});var sYe=s(nd);k2=n(sYe,"A",{id:!0,class:!0,href:!0});var d5t=s(k2);uue=n(d5t,"SPAN",{});var c5t=s(uue);T(t9.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),G$o=i(sYe),pue=n(sYe,"SPAN",{});var m5t=s(pue);O$o=r(m5t,"AutoModelForPreTraining"),m5t.forEach(t),sYe.forEach(t),YUe=i(m),Ro=n(m,"DIV",{class:!0});var ul=s(Ro);T(a9.$$.fragment,ul),V$o=i(ul),sd=n(ul,"P",{});var fne=s(sd);X$o=r(fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rV=n(fne,"A",{href:!0});var f5t=s(rV);z$o=r(f5t,"from_pretrained()"),f5t.forEach(t),W$o=r(fne," class method or the "),tV=n(fne,"A",{href:!0});var g5t=s(tV);Q$o=r(g5t,"from_config()"),g5t.forEach(t),U$o=r(fne,` class
method.`),fne.forEach(t),H$o=i(ul),n9=n(ul,"P",{});var lYe=s(n9);J$o=r(lYe,"This class cannot be instantiated directly using "),_ue=n(lYe,"CODE",{});var h5t=s(_ue);Y$o=r(h5t,"__init__()"),h5t.forEach(t),K$o=r(lYe," (throws an error)."),lYe.forEach(t),Z$o=i(ul),gt=n(ul,"DIV",{class:!0});var LL=s(gt);T(s9.$$.fragment,LL),eko=i(LL),bue=n(LL,"P",{});var u5t=s(bue);oko=r(u5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u5t.forEach(t),rko=i(LL),ld=n(LL,"P",{});var gne=s(ld);tko=r(gne,`Note:
Loading a model from its configuration file does `),vue=n(gne,"STRONG",{});var p5t=s(vue);ako=r(p5t,"not"),p5t.forEach(t),nko=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(gne,"A",{href:!0});var _5t=s(aV);sko=r(_5t,"from_pretrained()"),_5t.forEach(t),lko=r(gne," to load the model weights."),gne.forEach(t),iko=i(LL),T(S2.$$.fragment,LL),LL.forEach(t),dko=i(ul),Ze=n(ul,"DIV",{class:!0});var ha=s(Ze);T(l9.$$.fragment,ha),cko=i(ha),Fue=n(ha,"P",{});var b5t=s(Fue);mko=r(b5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),b5t.forEach(t),fko=i(ha),Xa=n(ha,"P",{});var yL=s(Xa);gko=r(yL,"The model class to instantiate is selected based on the "),Tue=n(yL,"CODE",{});var v5t=s(Tue);hko=r(v5t,"model_type"),v5t.forEach(t),uko=r(yL,` property of the config object (either
passed as an argument or loaded from `),Mue=n(yL,"CODE",{});var F5t=s(Mue);pko=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),_ko=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(yL,"CODE",{});var T5t=s(Eue);bko=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),vko=r(yL,":"),yL.forEach(t),Fko=i(ha),G=n(ha,"UL",{});var O=s(G);R2=n(O,"LI",{});var nBe=s(R2);Cue=n(nBe,"STRONG",{});var M5t=s(Cue);Tko=r(M5t,"albert"),M5t.forEach(t),Mko=r(nBe," \u2014 "),nV=n(nBe,"A",{href:!0});var E5t=s(nV);Eko=r(E5t,"AlbertForPreTraining"),E5t.forEach(t),Cko=r(nBe," (ALBERT model)"),nBe.forEach(t),wko=i(O),P2=n(O,"LI",{});var sBe=s(P2);wue=n(sBe,"STRONG",{});var C5t=s(wue);Ako=r(C5t,"bart"),C5t.forEach(t),Lko=r(sBe," \u2014 "),sV=n(sBe,"A",{href:!0});var w5t=s(sV);yko=r(w5t,"BartForConditionalGeneration"),w5t.forEach(t),xko=r(sBe," (BART model)"),sBe.forEach(t),$ko=i(O),B2=n(O,"LI",{});var lBe=s(B2);Aue=n(lBe,"STRONG",{});var A5t=s(Aue);kko=r(A5t,"bert"),A5t.forEach(t),Sko=r(lBe," \u2014 "),lV=n(lBe,"A",{href:!0});var L5t=s(lV);Rko=r(L5t,"BertForPreTraining"),L5t.forEach(t),Pko=r(lBe," (BERT model)"),lBe.forEach(t),Bko=i(O),I2=n(O,"LI",{});var iBe=s(I2);Lue=n(iBe,"STRONG",{});var y5t=s(Lue);Iko=r(y5t,"big_bird"),y5t.forEach(t),Nko=r(iBe," \u2014 "),iV=n(iBe,"A",{href:!0});var x5t=s(iV);qko=r(x5t,"BigBirdForPreTraining"),x5t.forEach(t),jko=r(iBe," (BigBird model)"),iBe.forEach(t),Dko=i(O),N2=n(O,"LI",{});var dBe=s(N2);yue=n(dBe,"STRONG",{});var $5t=s(yue);Gko=r($5t,"bloom"),$5t.forEach(t),Oko=r(dBe," \u2014 "),dV=n(dBe,"A",{href:!0});var k5t=s(dV);Vko=r(k5t,"BloomForCausalLM"),k5t.forEach(t),Xko=r(dBe," (BLOOM model)"),dBe.forEach(t),zko=i(O),q2=n(O,"LI",{});var cBe=s(q2);xue=n(cBe,"STRONG",{});var S5t=s(xue);Wko=r(S5t,"camembert"),S5t.forEach(t),Qko=r(cBe," \u2014 "),cV=n(cBe,"A",{href:!0});var R5t=s(cV);Uko=r(R5t,"CamembertForMaskedLM"),R5t.forEach(t),Hko=r(cBe," (CamemBERT model)"),cBe.forEach(t),Jko=i(O),j2=n(O,"LI",{});var mBe=s(j2);$ue=n(mBe,"STRONG",{});var P5t=s($ue);Yko=r(P5t,"ctrl"),P5t.forEach(t),Kko=r(mBe," \u2014 "),mV=n(mBe,"A",{href:!0});var B5t=s(mV);Zko=r(B5t,"CTRLLMHeadModel"),B5t.forEach(t),eSo=r(mBe," (CTRL model)"),mBe.forEach(t),oSo=i(O),D2=n(O,"LI",{});var fBe=s(D2);kue=n(fBe,"STRONG",{});var I5t=s(kue);rSo=r(I5t,"data2vec-text"),I5t.forEach(t),tSo=r(fBe," \u2014 "),fV=n(fBe,"A",{href:!0});var N5t=s(fV);aSo=r(N5t,"Data2VecTextForMaskedLM"),N5t.forEach(t),nSo=r(fBe," (Data2VecText model)"),fBe.forEach(t),sSo=i(O),G2=n(O,"LI",{});var gBe=s(G2);Sue=n(gBe,"STRONG",{});var q5t=s(Sue);lSo=r(q5t,"deberta"),q5t.forEach(t),iSo=r(gBe," \u2014 "),gV=n(gBe,"A",{href:!0});var j5t=s(gV);dSo=r(j5t,"DebertaForMaskedLM"),j5t.forEach(t),cSo=r(gBe," (DeBERTa model)"),gBe.forEach(t),mSo=i(O),O2=n(O,"LI",{});var hBe=s(O2);Rue=n(hBe,"STRONG",{});var D5t=s(Rue);fSo=r(D5t,"deberta-v2"),D5t.forEach(t),gSo=r(hBe," \u2014 "),hV=n(hBe,"A",{href:!0});var G5t=s(hV);hSo=r(G5t,"DebertaV2ForMaskedLM"),G5t.forEach(t),uSo=r(hBe," (DeBERTa-v2 model)"),hBe.forEach(t),pSo=i(O),V2=n(O,"LI",{});var uBe=s(V2);Pue=n(uBe,"STRONG",{});var O5t=s(Pue);_So=r(O5t,"distilbert"),O5t.forEach(t),bSo=r(uBe," \u2014 "),uV=n(uBe,"A",{href:!0});var V5t=s(uV);vSo=r(V5t,"DistilBertForMaskedLM"),V5t.forEach(t),FSo=r(uBe," (DistilBERT model)"),uBe.forEach(t),TSo=i(O),X2=n(O,"LI",{});var pBe=s(X2);Bue=n(pBe,"STRONG",{});var X5t=s(Bue);MSo=r(X5t,"electra"),X5t.forEach(t),ESo=r(pBe," \u2014 "),pV=n(pBe,"A",{href:!0});var z5t=s(pV);CSo=r(z5t,"ElectraForPreTraining"),z5t.forEach(t),wSo=r(pBe," (ELECTRA model)"),pBe.forEach(t),ASo=i(O),z2=n(O,"LI",{});var _Be=s(z2);Iue=n(_Be,"STRONG",{});var W5t=s(Iue);LSo=r(W5t,"flaubert"),W5t.forEach(t),ySo=r(_Be," \u2014 "),_V=n(_Be,"A",{href:!0});var Q5t=s(_V);xSo=r(Q5t,"FlaubertWithLMHeadModel"),Q5t.forEach(t),$So=r(_Be," (FlauBERT model)"),_Be.forEach(t),kSo=i(O),W2=n(O,"LI",{});var bBe=s(W2);Nue=n(bBe,"STRONG",{});var U5t=s(Nue);SSo=r(U5t,"flava"),U5t.forEach(t),RSo=r(bBe," \u2014 "),bV=n(bBe,"A",{href:!0});var H5t=s(bV);PSo=r(H5t,"FlavaForPreTraining"),H5t.forEach(t),BSo=r(bBe," (FLAVA model)"),bBe.forEach(t),ISo=i(O),Q2=n(O,"LI",{});var vBe=s(Q2);que=n(vBe,"STRONG",{});var J5t=s(que);NSo=r(J5t,"fnet"),J5t.forEach(t),qSo=r(vBe," \u2014 "),vV=n(vBe,"A",{href:!0});var Y5t=s(vV);jSo=r(Y5t,"FNetForPreTraining"),Y5t.forEach(t),DSo=r(vBe," (FNet model)"),vBe.forEach(t),GSo=i(O),U2=n(O,"LI",{});var FBe=s(U2);jue=n(FBe,"STRONG",{});var K5t=s(jue);OSo=r(K5t,"fsmt"),K5t.forEach(t),VSo=r(FBe," \u2014 "),FV=n(FBe,"A",{href:!0});var Z5t=s(FV);XSo=r(Z5t,"FSMTForConditionalGeneration"),Z5t.forEach(t),zSo=r(FBe," (FairSeq Machine-Translation model)"),FBe.forEach(t),WSo=i(O),H2=n(O,"LI",{});var TBe=s(H2);Due=n(TBe,"STRONG",{});var e0t=s(Due);QSo=r(e0t,"funnel"),e0t.forEach(t),USo=r(TBe," \u2014 "),TV=n(TBe,"A",{href:!0});var o0t=s(TV);HSo=r(o0t,"FunnelForPreTraining"),o0t.forEach(t),JSo=r(TBe," (Funnel Transformer model)"),TBe.forEach(t),YSo=i(O),J2=n(O,"LI",{});var MBe=s(J2);Gue=n(MBe,"STRONG",{});var r0t=s(Gue);KSo=r(r0t,"gpt2"),r0t.forEach(t),ZSo=r(MBe," \u2014 "),MV=n(MBe,"A",{href:!0});var t0t=s(MV);eRo=r(t0t,"GPT2LMHeadModel"),t0t.forEach(t),oRo=r(MBe," (OpenAI GPT-2 model)"),MBe.forEach(t),rRo=i(O),Y2=n(O,"LI",{});var EBe=s(Y2);Oue=n(EBe,"STRONG",{});var a0t=s(Oue);tRo=r(a0t,"ibert"),a0t.forEach(t),aRo=r(EBe," \u2014 "),EV=n(EBe,"A",{href:!0});var n0t=s(EV);nRo=r(n0t,"IBertForMaskedLM"),n0t.forEach(t),sRo=r(EBe," (I-BERT model)"),EBe.forEach(t),lRo=i(O),K2=n(O,"LI",{});var CBe=s(K2);Vue=n(CBe,"STRONG",{});var s0t=s(Vue);iRo=r(s0t,"layoutlm"),s0t.forEach(t),dRo=r(CBe," \u2014 "),CV=n(CBe,"A",{href:!0});var l0t=s(CV);cRo=r(l0t,"LayoutLMForMaskedLM"),l0t.forEach(t),mRo=r(CBe," (LayoutLM model)"),CBe.forEach(t),fRo=i(O),Z2=n(O,"LI",{});var wBe=s(Z2);Xue=n(wBe,"STRONG",{});var i0t=s(Xue);gRo=r(i0t,"longformer"),i0t.forEach(t),hRo=r(wBe," \u2014 "),wV=n(wBe,"A",{href:!0});var d0t=s(wV);uRo=r(d0t,"LongformerForMaskedLM"),d0t.forEach(t),pRo=r(wBe," (Longformer model)"),wBe.forEach(t),_Ro=i(O),eb=n(O,"LI",{});var ABe=s(eb);zue=n(ABe,"STRONG",{});var c0t=s(zue);bRo=r(c0t,"luke"),c0t.forEach(t),vRo=r(ABe," \u2014 "),AV=n(ABe,"A",{href:!0});var m0t=s(AV);FRo=r(m0t,"LukeForMaskedLM"),m0t.forEach(t),TRo=r(ABe," (LUKE model)"),ABe.forEach(t),MRo=i(O),ob=n(O,"LI",{});var LBe=s(ob);Wue=n(LBe,"STRONG",{});var f0t=s(Wue);ERo=r(f0t,"lxmert"),f0t.forEach(t),CRo=r(LBe," \u2014 "),LV=n(LBe,"A",{href:!0});var g0t=s(LV);wRo=r(g0t,"LxmertForPreTraining"),g0t.forEach(t),ARo=r(LBe," (LXMERT model)"),LBe.forEach(t),LRo=i(O),rb=n(O,"LI",{});var yBe=s(rb);Que=n(yBe,"STRONG",{});var h0t=s(Que);yRo=r(h0t,"megatron-bert"),h0t.forEach(t),xRo=r(yBe," \u2014 "),yV=n(yBe,"A",{href:!0});var u0t=s(yV);$Ro=r(u0t,"MegatronBertForPreTraining"),u0t.forEach(t),kRo=r(yBe," (Megatron-BERT model)"),yBe.forEach(t),SRo=i(O),tb=n(O,"LI",{});var xBe=s(tb);Uue=n(xBe,"STRONG",{});var p0t=s(Uue);RRo=r(p0t,"mobilebert"),p0t.forEach(t),PRo=r(xBe," \u2014 "),xV=n(xBe,"A",{href:!0});var _0t=s(xV);BRo=r(_0t,"MobileBertForPreTraining"),_0t.forEach(t),IRo=r(xBe," (MobileBERT model)"),xBe.forEach(t),NRo=i(O),ab=n(O,"LI",{});var $Be=s(ab);Hue=n($Be,"STRONG",{});var b0t=s(Hue);qRo=r(b0t,"mpnet"),b0t.forEach(t),jRo=r($Be," \u2014 "),$V=n($Be,"A",{href:!0});var v0t=s($V);DRo=r(v0t,"MPNetForMaskedLM"),v0t.forEach(t),GRo=r($Be," (MPNet model)"),$Be.forEach(t),ORo=i(O),nb=n(O,"LI",{});var kBe=s(nb);Jue=n(kBe,"STRONG",{});var F0t=s(Jue);VRo=r(F0t,"mvp"),F0t.forEach(t),XRo=r(kBe," \u2014 "),kV=n(kBe,"A",{href:!0});var T0t=s(kV);zRo=r(T0t,"MvpForConditionalGeneration"),T0t.forEach(t),WRo=r(kBe," (MVP model)"),kBe.forEach(t),QRo=i(O),sb=n(O,"LI",{});var SBe=s(sb);Yue=n(SBe,"STRONG",{});var M0t=s(Yue);URo=r(M0t,"nezha"),M0t.forEach(t),HRo=r(SBe," \u2014 "),SV=n(SBe,"A",{href:!0});var E0t=s(SV);JRo=r(E0t,"NezhaForPreTraining"),E0t.forEach(t),YRo=r(SBe," (Nezha model)"),SBe.forEach(t),KRo=i(O),lb=n(O,"LI",{});var RBe=s(lb);Kue=n(RBe,"STRONG",{});var C0t=s(Kue);ZRo=r(C0t,"openai-gpt"),C0t.forEach(t),ePo=r(RBe," \u2014 "),RV=n(RBe,"A",{href:!0});var w0t=s(RV);oPo=r(w0t,"OpenAIGPTLMHeadModel"),w0t.forEach(t),rPo=r(RBe," (OpenAI GPT model)"),RBe.forEach(t),tPo=i(O),ib=n(O,"LI",{});var PBe=s(ib);Zue=n(PBe,"STRONG",{});var A0t=s(Zue);aPo=r(A0t,"retribert"),A0t.forEach(t),nPo=r(PBe," \u2014 "),PV=n(PBe,"A",{href:!0});var L0t=s(PV);sPo=r(L0t,"RetriBertModel"),L0t.forEach(t),lPo=r(PBe," (RetriBERT model)"),PBe.forEach(t),iPo=i(O),db=n(O,"LI",{});var BBe=s(db);epe=n(BBe,"STRONG",{});var y0t=s(epe);dPo=r(y0t,"roberta"),y0t.forEach(t),cPo=r(BBe," \u2014 "),BV=n(BBe,"A",{href:!0});var x0t=s(BV);mPo=r(x0t,"RobertaForMaskedLM"),x0t.forEach(t),fPo=r(BBe," (RoBERTa model)"),BBe.forEach(t),gPo=i(O),cb=n(O,"LI",{});var IBe=s(cb);ope=n(IBe,"STRONG",{});var $0t=s(ope);hPo=r($0t,"splinter"),$0t.forEach(t),uPo=r(IBe," \u2014 "),IV=n(IBe,"A",{href:!0});var k0t=s(IV);pPo=r(k0t,"SplinterForPreTraining"),k0t.forEach(t),_Po=r(IBe," (Splinter model)"),IBe.forEach(t),bPo=i(O),mb=n(O,"LI",{});var NBe=s(mb);rpe=n(NBe,"STRONG",{});var S0t=s(rpe);vPo=r(S0t,"squeezebert"),S0t.forEach(t),FPo=r(NBe," \u2014 "),NV=n(NBe,"A",{href:!0});var R0t=s(NV);TPo=r(R0t,"SqueezeBertForMaskedLM"),R0t.forEach(t),MPo=r(NBe," (SqueezeBERT model)"),NBe.forEach(t),EPo=i(O),fb=n(O,"LI",{});var qBe=s(fb);tpe=n(qBe,"STRONG",{});var P0t=s(tpe);CPo=r(P0t,"t5"),P0t.forEach(t),wPo=r(qBe," \u2014 "),qV=n(qBe,"A",{href:!0});var B0t=s(qV);APo=r(B0t,"T5ForConditionalGeneration"),B0t.forEach(t),LPo=r(qBe," (T5 model)"),qBe.forEach(t),yPo=i(O),gb=n(O,"LI",{});var jBe=s(gb);ape=n(jBe,"STRONG",{});var I0t=s(ape);xPo=r(I0t,"tapas"),I0t.forEach(t),$Po=r(jBe," \u2014 "),jV=n(jBe,"A",{href:!0});var N0t=s(jV);kPo=r(N0t,"TapasForMaskedLM"),N0t.forEach(t),SPo=r(jBe," (TAPAS model)"),jBe.forEach(t),RPo=i(O),hb=n(O,"LI",{});var DBe=s(hb);npe=n(DBe,"STRONG",{});var q0t=s(npe);PPo=r(q0t,"transfo-xl"),q0t.forEach(t),BPo=r(DBe," \u2014 "),DV=n(DBe,"A",{href:!0});var j0t=s(DV);IPo=r(j0t,"TransfoXLLMHeadModel"),j0t.forEach(t),NPo=r(DBe," (Transformer-XL model)"),DBe.forEach(t),qPo=i(O),ub=n(O,"LI",{});var GBe=s(ub);spe=n(GBe,"STRONG",{});var D0t=s(spe);jPo=r(D0t,"unispeech"),D0t.forEach(t),DPo=r(GBe," \u2014 "),GV=n(GBe,"A",{href:!0});var G0t=s(GV);GPo=r(G0t,"UniSpeechForPreTraining"),G0t.forEach(t),OPo=r(GBe," (UniSpeech model)"),GBe.forEach(t),VPo=i(O),pb=n(O,"LI",{});var OBe=s(pb);lpe=n(OBe,"STRONG",{});var O0t=s(lpe);XPo=r(O0t,"unispeech-sat"),O0t.forEach(t),zPo=r(OBe," \u2014 "),OV=n(OBe,"A",{href:!0});var V0t=s(OV);WPo=r(V0t,"UniSpeechSatForPreTraining"),V0t.forEach(t),QPo=r(OBe," (UniSpeechSat model)"),OBe.forEach(t),UPo=i(O),_b=n(O,"LI",{});var VBe=s(_b);ipe=n(VBe,"STRONG",{});var X0t=s(ipe);HPo=r(X0t,"videomae"),X0t.forEach(t),JPo=r(VBe," \u2014 "),VV=n(VBe,"A",{href:!0});var z0t=s(VV);YPo=r(z0t,"VideoMAEForPreTraining"),z0t.forEach(t),KPo=r(VBe," (VideoMAE model)"),VBe.forEach(t),ZPo=i(O),bb=n(O,"LI",{});var XBe=s(bb);dpe=n(XBe,"STRONG",{});var W0t=s(dpe);eBo=r(W0t,"visual_bert"),W0t.forEach(t),oBo=r(XBe," \u2014 "),XV=n(XBe,"A",{href:!0});var Q0t=s(XV);rBo=r(Q0t,"VisualBertForPreTraining"),Q0t.forEach(t),tBo=r(XBe," (VisualBERT model)"),XBe.forEach(t),aBo=i(O),vb=n(O,"LI",{});var zBe=s(vb);cpe=n(zBe,"STRONG",{});var U0t=s(cpe);nBo=r(U0t,"vit_mae"),U0t.forEach(t),sBo=r(zBe," \u2014 "),zV=n(zBe,"A",{href:!0});var H0t=s(zV);lBo=r(H0t,"ViTMAEForPreTraining"),H0t.forEach(t),iBo=r(zBe," (ViTMAE model)"),zBe.forEach(t),dBo=i(O),Fb=n(O,"LI",{});var WBe=s(Fb);mpe=n(WBe,"STRONG",{});var J0t=s(mpe);cBo=r(J0t,"wav2vec2"),J0t.forEach(t),mBo=r(WBe," \u2014 "),WV=n(WBe,"A",{href:!0});var Y0t=s(WV);fBo=r(Y0t,"Wav2Vec2ForPreTraining"),Y0t.forEach(t),gBo=r(WBe," (Wav2Vec2 model)"),WBe.forEach(t),hBo=i(O),Tb=n(O,"LI",{});var QBe=s(Tb);fpe=n(QBe,"STRONG",{});var K0t=s(fpe);uBo=r(K0t,"wav2vec2-conformer"),K0t.forEach(t),pBo=r(QBe," \u2014 "),QV=n(QBe,"A",{href:!0});var Z0t=s(QV);_Bo=r(Z0t,"Wav2Vec2ConformerForPreTraining"),Z0t.forEach(t),bBo=r(QBe," (Wav2Vec2-Conformer model)"),QBe.forEach(t),vBo=i(O),Mb=n(O,"LI",{});var UBe=s(Mb);gpe=n(UBe,"STRONG",{});var ewt=s(gpe);FBo=r(ewt,"xlm"),ewt.forEach(t),TBo=r(UBe," \u2014 "),UV=n(UBe,"A",{href:!0});var owt=s(UV);MBo=r(owt,"XLMWithLMHeadModel"),owt.forEach(t),EBo=r(UBe," (XLM model)"),UBe.forEach(t),CBo=i(O),Eb=n(O,"LI",{});var HBe=s(Eb);hpe=n(HBe,"STRONG",{});var rwt=s(hpe);wBo=r(rwt,"xlm-roberta"),rwt.forEach(t),ABo=r(HBe," \u2014 "),HV=n(HBe,"A",{href:!0});var twt=s(HV);LBo=r(twt,"XLMRobertaForMaskedLM"),twt.forEach(t),yBo=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),xBo=i(O),Cb=n(O,"LI",{});var JBe=s(Cb);upe=n(JBe,"STRONG",{});var awt=s(upe);$Bo=r(awt,"xlm-roberta-xl"),awt.forEach(t),kBo=r(JBe," \u2014 "),JV=n(JBe,"A",{href:!0});var nwt=s(JV);SBo=r(nwt,"XLMRobertaXLForMaskedLM"),nwt.forEach(t),RBo=r(JBe," (XLM-RoBERTa-XL model)"),JBe.forEach(t),PBo=i(O),wb=n(O,"LI",{});var YBe=s(wb);ppe=n(YBe,"STRONG",{});var swt=s(ppe);BBo=r(swt,"xlnet"),swt.forEach(t),IBo=r(YBe," \u2014 "),YV=n(YBe,"A",{href:!0});var lwt=s(YV);NBo=r(lwt,"XLNetLMHeadModel"),lwt.forEach(t),qBo=r(YBe," (XLNet model)"),YBe.forEach(t),O.forEach(t),jBo=i(ha),Ab=n(ha,"P",{});var KBe=s(Ab);DBo=r(KBe,"The model is set in evaluation mode by default using "),_pe=n(KBe,"CODE",{});var iwt=s(_pe);GBo=r(iwt,"model.eval()"),iwt.forEach(t),OBo=r(KBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(KBe,"CODE",{});var dwt=s(bpe);VBo=r(dwt,"model.train()"),dwt.forEach(t),KBe.forEach(t),XBo=i(ha),T(Lb.$$.fragment,ha),ha.forEach(t),ul.forEach(t),KUe=i(m),id=n(m,"H2",{class:!0});var iYe=s(id);yb=n(iYe,"A",{id:!0,class:!0,href:!0});var cwt=s(yb);vpe=n(cwt,"SPAN",{});var mwt=s(vpe);T(i9.$$.fragment,mwt),mwt.forEach(t),cwt.forEach(t),zBo=i(iYe),Fpe=n(iYe,"SPAN",{});var fwt=s(Fpe);WBo=r(fwt,"AutoModelForCausalLM"),fwt.forEach(t),iYe.forEach(t),ZUe=i(m),Po=n(m,"DIV",{class:!0});var pl=s(Po);T(d9.$$.fragment,pl),QBo=i(pl),dd=n(pl,"P",{});var hne=s(dd);UBo=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KV=n(hne,"A",{href:!0});var gwt=s(KV);HBo=r(gwt,"from_pretrained()"),gwt.forEach(t),JBo=r(hne," class method or the "),ZV=n(hne,"A",{href:!0});var hwt=s(ZV);YBo=r(hwt,"from_config()"),hwt.forEach(t),KBo=r(hne,` class
method.`),hne.forEach(t),ZBo=i(pl),c9=n(pl,"P",{});var dYe=s(c9);eIo=r(dYe,"This class cannot be instantiated directly using "),Tpe=n(dYe,"CODE",{});var uwt=s(Tpe);oIo=r(uwt,"__init__()"),uwt.forEach(t),rIo=r(dYe," (throws an error)."),dYe.forEach(t),tIo=i(pl),ht=n(pl,"DIV",{class:!0});var xL=s(ht);T(m9.$$.fragment,xL),aIo=i(xL),Mpe=n(xL,"P",{});var pwt=s(Mpe);nIo=r(pwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pwt.forEach(t),sIo=i(xL),cd=n(xL,"P",{});var une=s(cd);lIo=r(une,`Note:
Loading a model from its configuration file does `),Epe=n(une,"STRONG",{});var _wt=s(Epe);iIo=r(_wt,"not"),_wt.forEach(t),dIo=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(une,"A",{href:!0});var bwt=s(eX);cIo=r(bwt,"from_pretrained()"),bwt.forEach(t),mIo=r(une," to load the model weights."),une.forEach(t),fIo=i(xL),T(xb.$$.fragment,xL),xL.forEach(t),gIo=i(pl),eo=n(pl,"DIV",{class:!0});var ua=s(eo);T(f9.$$.fragment,ua),hIo=i(ua),Cpe=n(ua,"P",{});var vwt=s(Cpe);uIo=r(vwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vwt.forEach(t),pIo=i(ua),za=n(ua,"P",{});var $L=s(za);_Io=r($L,"The model class to instantiate is selected based on the "),wpe=n($L,"CODE",{});var Fwt=s(wpe);bIo=r(Fwt,"model_type"),Fwt.forEach(t),vIo=r($L,` property of the config object (either
passed as an argument or loaded from `),Ape=n($L,"CODE",{});var Twt=s(Ape);FIo=r(Twt,"pretrained_model_name_or_path"),Twt.forEach(t),TIo=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n($L,"CODE",{});var Mwt=s(Lpe);MIo=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),EIo=r($L,":"),$L.forEach(t),CIo=i(ua),z=n(ua,"UL",{});var W=s(z);$b=n(W,"LI",{});var ZBe=s($b);ype=n(ZBe,"STRONG",{});var Ewt=s(ype);wIo=r(Ewt,"bart"),Ewt.forEach(t),AIo=r(ZBe," \u2014 "),oX=n(ZBe,"A",{href:!0});var Cwt=s(oX);LIo=r(Cwt,"BartForCausalLM"),Cwt.forEach(t),yIo=r(ZBe," (BART model)"),ZBe.forEach(t),xIo=i(W),kb=n(W,"LI",{});var eIe=s(kb);xpe=n(eIe,"STRONG",{});var wwt=s(xpe);$Io=r(wwt,"bert"),wwt.forEach(t),kIo=r(eIe," \u2014 "),rX=n(eIe,"A",{href:!0});var Awt=s(rX);SIo=r(Awt,"BertLMHeadModel"),Awt.forEach(t),RIo=r(eIe," (BERT model)"),eIe.forEach(t),PIo=i(W),Sb=n(W,"LI",{});var oIe=s(Sb);$pe=n(oIe,"STRONG",{});var Lwt=s($pe);BIo=r(Lwt,"bert-generation"),Lwt.forEach(t),IIo=r(oIe," \u2014 "),tX=n(oIe,"A",{href:!0});var ywt=s(tX);NIo=r(ywt,"BertGenerationDecoder"),ywt.forEach(t),qIo=r(oIe," (Bert Generation model)"),oIe.forEach(t),jIo=i(W),Rb=n(W,"LI",{});var rIe=s(Rb);kpe=n(rIe,"STRONG",{});var xwt=s(kpe);DIo=r(xwt,"big_bird"),xwt.forEach(t),GIo=r(rIe," \u2014 "),aX=n(rIe,"A",{href:!0});var $wt=s(aX);OIo=r($wt,"BigBirdForCausalLM"),$wt.forEach(t),VIo=r(rIe," (BigBird model)"),rIe.forEach(t),XIo=i(W),Pb=n(W,"LI",{});var tIe=s(Pb);Spe=n(tIe,"STRONG",{});var kwt=s(Spe);zIo=r(kwt,"bigbird_pegasus"),kwt.forEach(t),WIo=r(tIe," \u2014 "),nX=n(tIe,"A",{href:!0});var Swt=s(nX);QIo=r(Swt,"BigBirdPegasusForCausalLM"),Swt.forEach(t),UIo=r(tIe," (BigBird-Pegasus model)"),tIe.forEach(t),HIo=i(W),Bb=n(W,"LI",{});var aIe=s(Bb);Rpe=n(aIe,"STRONG",{});var Rwt=s(Rpe);JIo=r(Rwt,"blenderbot"),Rwt.forEach(t),YIo=r(aIe," \u2014 "),sX=n(aIe,"A",{href:!0});var Pwt=s(sX);KIo=r(Pwt,"BlenderbotForCausalLM"),Pwt.forEach(t),ZIo=r(aIe," (Blenderbot model)"),aIe.forEach(t),eNo=i(W),Ib=n(W,"LI",{});var nIe=s(Ib);Ppe=n(nIe,"STRONG",{});var Bwt=s(Ppe);oNo=r(Bwt,"blenderbot-small"),Bwt.forEach(t),rNo=r(nIe," \u2014 "),lX=n(nIe,"A",{href:!0});var Iwt=s(lX);tNo=r(Iwt,"BlenderbotSmallForCausalLM"),Iwt.forEach(t),aNo=r(nIe," (BlenderbotSmall model)"),nIe.forEach(t),nNo=i(W),Nb=n(W,"LI",{});var sIe=s(Nb);Bpe=n(sIe,"STRONG",{});var Nwt=s(Bpe);sNo=r(Nwt,"bloom"),Nwt.forEach(t),lNo=r(sIe," \u2014 "),iX=n(sIe,"A",{href:!0});var qwt=s(iX);iNo=r(qwt,"BloomForCausalLM"),qwt.forEach(t),dNo=r(sIe," (BLOOM model)"),sIe.forEach(t),cNo=i(W),qb=n(W,"LI",{});var lIe=s(qb);Ipe=n(lIe,"STRONG",{});var jwt=s(Ipe);mNo=r(jwt,"camembert"),jwt.forEach(t),fNo=r(lIe," \u2014 "),dX=n(lIe,"A",{href:!0});var Dwt=s(dX);gNo=r(Dwt,"CamembertForCausalLM"),Dwt.forEach(t),hNo=r(lIe," (CamemBERT model)"),lIe.forEach(t),uNo=i(W),jb=n(W,"LI",{});var iIe=s(jb);Npe=n(iIe,"STRONG",{});var Gwt=s(Npe);pNo=r(Gwt,"codegen"),Gwt.forEach(t),_No=r(iIe," \u2014 "),cX=n(iIe,"A",{href:!0});var Owt=s(cX);bNo=r(Owt,"CodeGenForCausalLM"),Owt.forEach(t),vNo=r(iIe," (CodeGen model)"),iIe.forEach(t),FNo=i(W),Db=n(W,"LI",{});var dIe=s(Db);qpe=n(dIe,"STRONG",{});var Vwt=s(qpe);TNo=r(Vwt,"ctrl"),Vwt.forEach(t),MNo=r(dIe," \u2014 "),mX=n(dIe,"A",{href:!0});var Xwt=s(mX);ENo=r(Xwt,"CTRLLMHeadModel"),Xwt.forEach(t),CNo=r(dIe," (CTRL model)"),dIe.forEach(t),wNo=i(W),Gb=n(W,"LI",{});var cIe=s(Gb);jpe=n(cIe,"STRONG",{});var zwt=s(jpe);ANo=r(zwt,"data2vec-text"),zwt.forEach(t),LNo=r(cIe," \u2014 "),fX=n(cIe,"A",{href:!0});var Wwt=s(fX);yNo=r(Wwt,"Data2VecTextForCausalLM"),Wwt.forEach(t),xNo=r(cIe," (Data2VecText model)"),cIe.forEach(t),$No=i(W),Ob=n(W,"LI",{});var mIe=s(Ob);Dpe=n(mIe,"STRONG",{});var Qwt=s(Dpe);kNo=r(Qwt,"electra"),Qwt.forEach(t),SNo=r(mIe," \u2014 "),gX=n(mIe,"A",{href:!0});var Uwt=s(gX);RNo=r(Uwt,"ElectraForCausalLM"),Uwt.forEach(t),PNo=r(mIe," (ELECTRA model)"),mIe.forEach(t),BNo=i(W),Vb=n(W,"LI",{});var fIe=s(Vb);Gpe=n(fIe,"STRONG",{});var Hwt=s(Gpe);INo=r(Hwt,"gpt2"),Hwt.forEach(t),NNo=r(fIe," \u2014 "),hX=n(fIe,"A",{href:!0});var Jwt=s(hX);qNo=r(Jwt,"GPT2LMHeadModel"),Jwt.forEach(t),jNo=r(fIe," (OpenAI GPT-2 model)"),fIe.forEach(t),DNo=i(W),Xb=n(W,"LI",{});var gIe=s(Xb);Ope=n(gIe,"STRONG",{});var Ywt=s(Ope);GNo=r(Ywt,"gpt_neo"),Ywt.forEach(t),ONo=r(gIe," \u2014 "),uX=n(gIe,"A",{href:!0});var Kwt=s(uX);VNo=r(Kwt,"GPTNeoForCausalLM"),Kwt.forEach(t),XNo=r(gIe," (GPT Neo model)"),gIe.forEach(t),zNo=i(W),zb=n(W,"LI",{});var hIe=s(zb);Vpe=n(hIe,"STRONG",{});var Zwt=s(Vpe);WNo=r(Zwt,"gpt_neox"),Zwt.forEach(t),QNo=r(hIe," \u2014 "),pX=n(hIe,"A",{href:!0});var e6t=s(pX);UNo=r(e6t,"GPTNeoXForCausalLM"),e6t.forEach(t),HNo=r(hIe," (GPT NeoX model)"),hIe.forEach(t),JNo=i(W),Wb=n(W,"LI",{});var uIe=s(Wb);Xpe=n(uIe,"STRONG",{});var o6t=s(Xpe);YNo=r(o6t,"gptj"),o6t.forEach(t),KNo=r(uIe," \u2014 "),_X=n(uIe,"A",{href:!0});var r6t=s(_X);ZNo=r(r6t,"GPTJForCausalLM"),r6t.forEach(t),eqo=r(uIe," (GPT-J model)"),uIe.forEach(t),oqo=i(W),Qb=n(W,"LI",{});var pIe=s(Qb);zpe=n(pIe,"STRONG",{});var t6t=s(zpe);rqo=r(t6t,"marian"),t6t.forEach(t),tqo=r(pIe," \u2014 "),bX=n(pIe,"A",{href:!0});var a6t=s(bX);aqo=r(a6t,"MarianForCausalLM"),a6t.forEach(t),nqo=r(pIe," (Marian model)"),pIe.forEach(t),sqo=i(W),Ub=n(W,"LI",{});var _Ie=s(Ub);Wpe=n(_Ie,"STRONG",{});var n6t=s(Wpe);lqo=r(n6t,"mbart"),n6t.forEach(t),iqo=r(_Ie," \u2014 "),vX=n(_Ie,"A",{href:!0});var s6t=s(vX);dqo=r(s6t,"MBartForCausalLM"),s6t.forEach(t),cqo=r(_Ie," (mBART model)"),_Ie.forEach(t),mqo=i(W),Hb=n(W,"LI",{});var bIe=s(Hb);Qpe=n(bIe,"STRONG",{});var l6t=s(Qpe);fqo=r(l6t,"megatron-bert"),l6t.forEach(t),gqo=r(bIe," \u2014 "),FX=n(bIe,"A",{href:!0});var i6t=s(FX);hqo=r(i6t,"MegatronBertForCausalLM"),i6t.forEach(t),uqo=r(bIe," (Megatron-BERT model)"),bIe.forEach(t),pqo=i(W),Jb=n(W,"LI",{});var vIe=s(Jb);Upe=n(vIe,"STRONG",{});var d6t=s(Upe);_qo=r(d6t,"mvp"),d6t.forEach(t),bqo=r(vIe," \u2014 "),TX=n(vIe,"A",{href:!0});var c6t=s(TX);vqo=r(c6t,"MvpForCausalLM"),c6t.forEach(t),Fqo=r(vIe," (MVP model)"),vIe.forEach(t),Tqo=i(W),Yb=n(W,"LI",{});var FIe=s(Yb);Hpe=n(FIe,"STRONG",{});var m6t=s(Hpe);Mqo=r(m6t,"openai-gpt"),m6t.forEach(t),Eqo=r(FIe," \u2014 "),MX=n(FIe,"A",{href:!0});var f6t=s(MX);Cqo=r(f6t,"OpenAIGPTLMHeadModel"),f6t.forEach(t),wqo=r(FIe," (OpenAI GPT model)"),FIe.forEach(t),Aqo=i(W),Kb=n(W,"LI",{});var TIe=s(Kb);Jpe=n(TIe,"STRONG",{});var g6t=s(Jpe);Lqo=r(g6t,"opt"),g6t.forEach(t),yqo=r(TIe," \u2014 "),EX=n(TIe,"A",{href:!0});var h6t=s(EX);xqo=r(h6t,"OPTForCausalLM"),h6t.forEach(t),$qo=r(TIe," (OPT model)"),TIe.forEach(t),kqo=i(W),Zb=n(W,"LI",{});var MIe=s(Zb);Ype=n(MIe,"STRONG",{});var u6t=s(Ype);Sqo=r(u6t,"pegasus"),u6t.forEach(t),Rqo=r(MIe," \u2014 "),CX=n(MIe,"A",{href:!0});var p6t=s(CX);Pqo=r(p6t,"PegasusForCausalLM"),p6t.forEach(t),Bqo=r(MIe," (Pegasus model)"),MIe.forEach(t),Iqo=i(W),ev=n(W,"LI",{});var EIe=s(ev);Kpe=n(EIe,"STRONG",{});var _6t=s(Kpe);Nqo=r(_6t,"plbart"),_6t.forEach(t),qqo=r(EIe," \u2014 "),wX=n(EIe,"A",{href:!0});var b6t=s(wX);jqo=r(b6t,"PLBartForCausalLM"),b6t.forEach(t),Dqo=r(EIe," (PLBart model)"),EIe.forEach(t),Gqo=i(W),ov=n(W,"LI",{});var CIe=s(ov);Zpe=n(CIe,"STRONG",{});var v6t=s(Zpe);Oqo=r(v6t,"prophetnet"),v6t.forEach(t),Vqo=r(CIe," \u2014 "),AX=n(CIe,"A",{href:!0});var F6t=s(AX);Xqo=r(F6t,"ProphetNetForCausalLM"),F6t.forEach(t),zqo=r(CIe," (ProphetNet model)"),CIe.forEach(t),Wqo=i(W),rv=n(W,"LI",{});var wIe=s(rv);e_e=n(wIe,"STRONG",{});var T6t=s(e_e);Qqo=r(T6t,"qdqbert"),T6t.forEach(t),Uqo=r(wIe," \u2014 "),LX=n(wIe,"A",{href:!0});var M6t=s(LX);Hqo=r(M6t,"QDQBertLMHeadModel"),M6t.forEach(t),Jqo=r(wIe," (QDQBert model)"),wIe.forEach(t),Yqo=i(W),tv=n(W,"LI",{});var AIe=s(tv);o_e=n(AIe,"STRONG",{});var E6t=s(o_e);Kqo=r(E6t,"reformer"),E6t.forEach(t),Zqo=r(AIe," \u2014 "),yX=n(AIe,"A",{href:!0});var C6t=s(yX);ejo=r(C6t,"ReformerModelWithLMHead"),C6t.forEach(t),ojo=r(AIe," (Reformer model)"),AIe.forEach(t),rjo=i(W),av=n(W,"LI",{});var LIe=s(av);r_e=n(LIe,"STRONG",{});var w6t=s(r_e);tjo=r(w6t,"rembert"),w6t.forEach(t),ajo=r(LIe," \u2014 "),xX=n(LIe,"A",{href:!0});var A6t=s(xX);njo=r(A6t,"RemBertForCausalLM"),A6t.forEach(t),sjo=r(LIe," (RemBERT model)"),LIe.forEach(t),ljo=i(W),nv=n(W,"LI",{});var yIe=s(nv);t_e=n(yIe,"STRONG",{});var L6t=s(t_e);ijo=r(L6t,"roberta"),L6t.forEach(t),djo=r(yIe," \u2014 "),$X=n(yIe,"A",{href:!0});var y6t=s($X);cjo=r(y6t,"RobertaForCausalLM"),y6t.forEach(t),mjo=r(yIe," (RoBERTa model)"),yIe.forEach(t),fjo=i(W),sv=n(W,"LI",{});var xIe=s(sv);a_e=n(xIe,"STRONG",{});var x6t=s(a_e);gjo=r(x6t,"roformer"),x6t.forEach(t),hjo=r(xIe," \u2014 "),kX=n(xIe,"A",{href:!0});var $6t=s(kX);ujo=r($6t,"RoFormerForCausalLM"),$6t.forEach(t),pjo=r(xIe," (RoFormer model)"),xIe.forEach(t),_jo=i(W),lv=n(W,"LI",{});var $Ie=s(lv);n_e=n($Ie,"STRONG",{});var k6t=s(n_e);bjo=r(k6t,"speech_to_text_2"),k6t.forEach(t),vjo=r($Ie," \u2014 "),SX=n($Ie,"A",{href:!0});var S6t=s(SX);Fjo=r(S6t,"Speech2Text2ForCausalLM"),S6t.forEach(t),Tjo=r($Ie," (Speech2Text2 model)"),$Ie.forEach(t),Mjo=i(W),iv=n(W,"LI",{});var kIe=s(iv);s_e=n(kIe,"STRONG",{});var R6t=s(s_e);Ejo=r(R6t,"transfo-xl"),R6t.forEach(t),Cjo=r(kIe," \u2014 "),RX=n(kIe,"A",{href:!0});var P6t=s(RX);wjo=r(P6t,"TransfoXLLMHeadModel"),P6t.forEach(t),Ajo=r(kIe," (Transformer-XL model)"),kIe.forEach(t),Ljo=i(W),dv=n(W,"LI",{});var SIe=s(dv);l_e=n(SIe,"STRONG",{});var B6t=s(l_e);yjo=r(B6t,"trocr"),B6t.forEach(t),xjo=r(SIe," \u2014 "),PX=n(SIe,"A",{href:!0});var I6t=s(PX);$jo=r(I6t,"TrOCRForCausalLM"),I6t.forEach(t),kjo=r(SIe," (TrOCR model)"),SIe.forEach(t),Sjo=i(W),cv=n(W,"LI",{});var RIe=s(cv);i_e=n(RIe,"STRONG",{});var N6t=s(i_e);Rjo=r(N6t,"xglm"),N6t.forEach(t),Pjo=r(RIe," \u2014 "),BX=n(RIe,"A",{href:!0});var q6t=s(BX);Bjo=r(q6t,"XGLMForCausalLM"),q6t.forEach(t),Ijo=r(RIe," (XGLM model)"),RIe.forEach(t),Njo=i(W),mv=n(W,"LI",{});var PIe=s(mv);d_e=n(PIe,"STRONG",{});var j6t=s(d_e);qjo=r(j6t,"xlm"),j6t.forEach(t),jjo=r(PIe," \u2014 "),IX=n(PIe,"A",{href:!0});var D6t=s(IX);Djo=r(D6t,"XLMWithLMHeadModel"),D6t.forEach(t),Gjo=r(PIe," (XLM model)"),PIe.forEach(t),Ojo=i(W),fv=n(W,"LI",{});var BIe=s(fv);c_e=n(BIe,"STRONG",{});var G6t=s(c_e);Vjo=r(G6t,"xlm-prophetnet"),G6t.forEach(t),Xjo=r(BIe," \u2014 "),NX=n(BIe,"A",{href:!0});var O6t=s(NX);zjo=r(O6t,"XLMProphetNetForCausalLM"),O6t.forEach(t),Wjo=r(BIe," (XLM-ProphetNet model)"),BIe.forEach(t),Qjo=i(W),gv=n(W,"LI",{});var IIe=s(gv);m_e=n(IIe,"STRONG",{});var V6t=s(m_e);Ujo=r(V6t,"xlm-roberta"),V6t.forEach(t),Hjo=r(IIe," \u2014 "),qX=n(IIe,"A",{href:!0});var X6t=s(qX);Jjo=r(X6t,"XLMRobertaForCausalLM"),X6t.forEach(t),Yjo=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),Kjo=i(W),hv=n(W,"LI",{});var NIe=s(hv);f_e=n(NIe,"STRONG",{});var z6t=s(f_e);Zjo=r(z6t,"xlm-roberta-xl"),z6t.forEach(t),eDo=r(NIe," \u2014 "),jX=n(NIe,"A",{href:!0});var W6t=s(jX);oDo=r(W6t,"XLMRobertaXLForCausalLM"),W6t.forEach(t),rDo=r(NIe," (XLM-RoBERTa-XL model)"),NIe.forEach(t),tDo=i(W),uv=n(W,"LI",{});var qIe=s(uv);g_e=n(qIe,"STRONG",{});var Q6t=s(g_e);aDo=r(Q6t,"xlnet"),Q6t.forEach(t),nDo=r(qIe," \u2014 "),DX=n(qIe,"A",{href:!0});var U6t=s(DX);sDo=r(U6t,"XLNetLMHeadModel"),U6t.forEach(t),lDo=r(qIe," (XLNet model)"),qIe.forEach(t),W.forEach(t),iDo=i(ua),pv=n(ua,"P",{});var jIe=s(pv);dDo=r(jIe,"The model is set in evaluation mode by default using "),h_e=n(jIe,"CODE",{});var H6t=s(h_e);cDo=r(H6t,"model.eval()"),H6t.forEach(t),mDo=r(jIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(jIe,"CODE",{});var J6t=s(u_e);fDo=r(J6t,"model.train()"),J6t.forEach(t),jIe.forEach(t),gDo=i(ua),T(_v.$$.fragment,ua),ua.forEach(t),pl.forEach(t),eHe=i(m),md=n(m,"H2",{class:!0});var cYe=s(md);bv=n(cYe,"A",{id:!0,class:!0,href:!0});var Y6t=s(bv);p_e=n(Y6t,"SPAN",{});var K6t=s(p_e);T(g9.$$.fragment,K6t),K6t.forEach(t),Y6t.forEach(t),hDo=i(cYe),__e=n(cYe,"SPAN",{});var Z6t=s(__e);uDo=r(Z6t,"AutoModelForMaskedLM"),Z6t.forEach(t),cYe.forEach(t),oHe=i(m),Bo=n(m,"DIV",{class:!0});var _l=s(Bo);T(h9.$$.fragment,_l),pDo=i(_l),fd=n(_l,"P",{});var pne=s(fd);_Do=r(pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GX=n(pne,"A",{href:!0});var eAt=s(GX);bDo=r(eAt,"from_pretrained()"),eAt.forEach(t),vDo=r(pne," class method or the "),OX=n(pne,"A",{href:!0});var oAt=s(OX);FDo=r(oAt,"from_config()"),oAt.forEach(t),TDo=r(pne,` class
method.`),pne.forEach(t),MDo=i(_l),u9=n(_l,"P",{});var mYe=s(u9);EDo=r(mYe,"This class cannot be instantiated directly using "),b_e=n(mYe,"CODE",{});var rAt=s(b_e);CDo=r(rAt,"__init__()"),rAt.forEach(t),wDo=r(mYe," (throws an error)."),mYe.forEach(t),ADo=i(_l),ut=n(_l,"DIV",{class:!0});var kL=s(ut);T(p9.$$.fragment,kL),LDo=i(kL),v_e=n(kL,"P",{});var tAt=s(v_e);yDo=r(tAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tAt.forEach(t),xDo=i(kL),gd=n(kL,"P",{});var _ne=s(gd);$Do=r(_ne,`Note:
Loading a model from its configuration file does `),F_e=n(_ne,"STRONG",{});var aAt=s(F_e);kDo=r(aAt,"not"),aAt.forEach(t),SDo=r(_ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=n(_ne,"A",{href:!0});var nAt=s(VX);RDo=r(nAt,"from_pretrained()"),nAt.forEach(t),PDo=r(_ne," to load the model weights."),_ne.forEach(t),BDo=i(kL),T(vv.$$.fragment,kL),kL.forEach(t),IDo=i(_l),oo=n(_l,"DIV",{class:!0});var pa=s(oo);T(_9.$$.fragment,pa),NDo=i(pa),T_e=n(pa,"P",{});var sAt=s(T_e);qDo=r(sAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sAt.forEach(t),jDo=i(pa),Wa=n(pa,"P",{});var SL=s(Wa);DDo=r(SL,"The model class to instantiate is selected based on the "),M_e=n(SL,"CODE",{});var lAt=s(M_e);GDo=r(lAt,"model_type"),lAt.forEach(t),ODo=r(SL,` property of the config object (either
passed as an argument or loaded from `),E_e=n(SL,"CODE",{});var iAt=s(E_e);VDo=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),XDo=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(SL,"CODE",{});var dAt=s(C_e);zDo=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),WDo=r(SL,":"),SL.forEach(t),QDo=i(pa),U=n(pa,"UL",{});var Y=s(U);Fv=n(Y,"LI",{});var DIe=s(Fv);w_e=n(DIe,"STRONG",{});var cAt=s(w_e);UDo=r(cAt,"albert"),cAt.forEach(t),HDo=r(DIe," \u2014 "),XX=n(DIe,"A",{href:!0});var mAt=s(XX);JDo=r(mAt,"AlbertForMaskedLM"),mAt.forEach(t),YDo=r(DIe," (ALBERT model)"),DIe.forEach(t),KDo=i(Y),Tv=n(Y,"LI",{});var GIe=s(Tv);A_e=n(GIe,"STRONG",{});var fAt=s(A_e);ZDo=r(fAt,"bart"),fAt.forEach(t),eGo=r(GIe," \u2014 "),zX=n(GIe,"A",{href:!0});var gAt=s(zX);oGo=r(gAt,"BartForConditionalGeneration"),gAt.forEach(t),rGo=r(GIe," (BART model)"),GIe.forEach(t),tGo=i(Y),Mv=n(Y,"LI",{});var OIe=s(Mv);L_e=n(OIe,"STRONG",{});var hAt=s(L_e);aGo=r(hAt,"bert"),hAt.forEach(t),nGo=r(OIe," \u2014 "),WX=n(OIe,"A",{href:!0});var uAt=s(WX);sGo=r(uAt,"BertForMaskedLM"),uAt.forEach(t),lGo=r(OIe," (BERT model)"),OIe.forEach(t),iGo=i(Y),Ev=n(Y,"LI",{});var VIe=s(Ev);y_e=n(VIe,"STRONG",{});var pAt=s(y_e);dGo=r(pAt,"big_bird"),pAt.forEach(t),cGo=r(VIe," \u2014 "),QX=n(VIe,"A",{href:!0});var _At=s(QX);mGo=r(_At,"BigBirdForMaskedLM"),_At.forEach(t),fGo=r(VIe," (BigBird model)"),VIe.forEach(t),gGo=i(Y),Cv=n(Y,"LI",{});var XIe=s(Cv);x_e=n(XIe,"STRONG",{});var bAt=s(x_e);hGo=r(bAt,"camembert"),bAt.forEach(t),uGo=r(XIe," \u2014 "),UX=n(XIe,"A",{href:!0});var vAt=s(UX);pGo=r(vAt,"CamembertForMaskedLM"),vAt.forEach(t),_Go=r(XIe," (CamemBERT model)"),XIe.forEach(t),bGo=i(Y),wv=n(Y,"LI",{});var zIe=s(wv);$_e=n(zIe,"STRONG",{});var FAt=s($_e);vGo=r(FAt,"convbert"),FAt.forEach(t),FGo=r(zIe," \u2014 "),HX=n(zIe,"A",{href:!0});var TAt=s(HX);TGo=r(TAt,"ConvBertForMaskedLM"),TAt.forEach(t),MGo=r(zIe," (ConvBERT model)"),zIe.forEach(t),EGo=i(Y),Av=n(Y,"LI",{});var WIe=s(Av);k_e=n(WIe,"STRONG",{});var MAt=s(k_e);CGo=r(MAt,"data2vec-text"),MAt.forEach(t),wGo=r(WIe," \u2014 "),JX=n(WIe,"A",{href:!0});var EAt=s(JX);AGo=r(EAt,"Data2VecTextForMaskedLM"),EAt.forEach(t),LGo=r(WIe," (Data2VecText model)"),WIe.forEach(t),yGo=i(Y),Lv=n(Y,"LI",{});var QIe=s(Lv);S_e=n(QIe,"STRONG",{});var CAt=s(S_e);xGo=r(CAt,"deberta"),CAt.forEach(t),$Go=r(QIe," \u2014 "),YX=n(QIe,"A",{href:!0});var wAt=s(YX);kGo=r(wAt,"DebertaForMaskedLM"),wAt.forEach(t),SGo=r(QIe," (DeBERTa model)"),QIe.forEach(t),RGo=i(Y),yv=n(Y,"LI",{});var UIe=s(yv);R_e=n(UIe,"STRONG",{});var AAt=s(R_e);PGo=r(AAt,"deberta-v2"),AAt.forEach(t),BGo=r(UIe," \u2014 "),KX=n(UIe,"A",{href:!0});var LAt=s(KX);IGo=r(LAt,"DebertaV2ForMaskedLM"),LAt.forEach(t),NGo=r(UIe," (DeBERTa-v2 model)"),UIe.forEach(t),qGo=i(Y),xv=n(Y,"LI",{});var HIe=s(xv);P_e=n(HIe,"STRONG",{});var yAt=s(P_e);jGo=r(yAt,"distilbert"),yAt.forEach(t),DGo=r(HIe," \u2014 "),ZX=n(HIe,"A",{href:!0});var xAt=s(ZX);GGo=r(xAt,"DistilBertForMaskedLM"),xAt.forEach(t),OGo=r(HIe," (DistilBERT model)"),HIe.forEach(t),VGo=i(Y),$v=n(Y,"LI",{});var JIe=s($v);B_e=n(JIe,"STRONG",{});var $At=s(B_e);XGo=r($At,"electra"),$At.forEach(t),zGo=r(JIe," \u2014 "),ez=n(JIe,"A",{href:!0});var kAt=s(ez);WGo=r(kAt,"ElectraForMaskedLM"),kAt.forEach(t),QGo=r(JIe," (ELECTRA model)"),JIe.forEach(t),UGo=i(Y),kv=n(Y,"LI",{});var YIe=s(kv);I_e=n(YIe,"STRONG",{});var SAt=s(I_e);HGo=r(SAt,"flaubert"),SAt.forEach(t),JGo=r(YIe," \u2014 "),oz=n(YIe,"A",{href:!0});var RAt=s(oz);YGo=r(RAt,"FlaubertWithLMHeadModel"),RAt.forEach(t),KGo=r(YIe," (FlauBERT model)"),YIe.forEach(t),ZGo=i(Y),Sv=n(Y,"LI",{});var KIe=s(Sv);N_e=n(KIe,"STRONG",{});var PAt=s(N_e);eOo=r(PAt,"fnet"),PAt.forEach(t),oOo=r(KIe," \u2014 "),rz=n(KIe,"A",{href:!0});var BAt=s(rz);rOo=r(BAt,"FNetForMaskedLM"),BAt.forEach(t),tOo=r(KIe," (FNet model)"),KIe.forEach(t),aOo=i(Y),Rv=n(Y,"LI",{});var ZIe=s(Rv);q_e=n(ZIe,"STRONG",{});var IAt=s(q_e);nOo=r(IAt,"funnel"),IAt.forEach(t),sOo=r(ZIe," \u2014 "),tz=n(ZIe,"A",{href:!0});var NAt=s(tz);lOo=r(NAt,"FunnelForMaskedLM"),NAt.forEach(t),iOo=r(ZIe," (Funnel Transformer model)"),ZIe.forEach(t),dOo=i(Y),Pv=n(Y,"LI",{});var eNe=s(Pv);j_e=n(eNe,"STRONG",{});var qAt=s(j_e);cOo=r(qAt,"ibert"),qAt.forEach(t),mOo=r(eNe," \u2014 "),az=n(eNe,"A",{href:!0});var jAt=s(az);fOo=r(jAt,"IBertForMaskedLM"),jAt.forEach(t),gOo=r(eNe," (I-BERT model)"),eNe.forEach(t),hOo=i(Y),Bv=n(Y,"LI",{});var oNe=s(Bv);D_e=n(oNe,"STRONG",{});var DAt=s(D_e);uOo=r(DAt,"layoutlm"),DAt.forEach(t),pOo=r(oNe," \u2014 "),nz=n(oNe,"A",{href:!0});var GAt=s(nz);_Oo=r(GAt,"LayoutLMForMaskedLM"),GAt.forEach(t),bOo=r(oNe," (LayoutLM model)"),oNe.forEach(t),vOo=i(Y),Iv=n(Y,"LI",{});var rNe=s(Iv);G_e=n(rNe,"STRONG",{});var OAt=s(G_e);FOo=r(OAt,"longformer"),OAt.forEach(t),TOo=r(rNe," \u2014 "),sz=n(rNe,"A",{href:!0});var VAt=s(sz);MOo=r(VAt,"LongformerForMaskedLM"),VAt.forEach(t),EOo=r(rNe," (Longformer model)"),rNe.forEach(t),COo=i(Y),Nv=n(Y,"LI",{});var tNe=s(Nv);O_e=n(tNe,"STRONG",{});var XAt=s(O_e);wOo=r(XAt,"luke"),XAt.forEach(t),AOo=r(tNe," \u2014 "),lz=n(tNe,"A",{href:!0});var zAt=s(lz);LOo=r(zAt,"LukeForMaskedLM"),zAt.forEach(t),yOo=r(tNe," (LUKE model)"),tNe.forEach(t),xOo=i(Y),qv=n(Y,"LI",{});var aNe=s(qv);V_e=n(aNe,"STRONG",{});var WAt=s(V_e);$Oo=r(WAt,"mbart"),WAt.forEach(t),kOo=r(aNe," \u2014 "),iz=n(aNe,"A",{href:!0});var QAt=s(iz);SOo=r(QAt,"MBartForConditionalGeneration"),QAt.forEach(t),ROo=r(aNe," (mBART model)"),aNe.forEach(t),POo=i(Y),jv=n(Y,"LI",{});var nNe=s(jv);X_e=n(nNe,"STRONG",{});var UAt=s(X_e);BOo=r(UAt,"megatron-bert"),UAt.forEach(t),IOo=r(nNe," \u2014 "),dz=n(nNe,"A",{href:!0});var HAt=s(dz);NOo=r(HAt,"MegatronBertForMaskedLM"),HAt.forEach(t),qOo=r(nNe," (Megatron-BERT model)"),nNe.forEach(t),jOo=i(Y),Dv=n(Y,"LI",{});var sNe=s(Dv);z_e=n(sNe,"STRONG",{});var JAt=s(z_e);DOo=r(JAt,"mobilebert"),JAt.forEach(t),GOo=r(sNe," \u2014 "),cz=n(sNe,"A",{href:!0});var YAt=s(cz);OOo=r(YAt,"MobileBertForMaskedLM"),YAt.forEach(t),VOo=r(sNe," (MobileBERT model)"),sNe.forEach(t),XOo=i(Y),Gv=n(Y,"LI",{});var lNe=s(Gv);W_e=n(lNe,"STRONG",{});var KAt=s(W_e);zOo=r(KAt,"mpnet"),KAt.forEach(t),WOo=r(lNe," \u2014 "),mz=n(lNe,"A",{href:!0});var ZAt=s(mz);QOo=r(ZAt,"MPNetForMaskedLM"),ZAt.forEach(t),UOo=r(lNe," (MPNet model)"),lNe.forEach(t),HOo=i(Y),Ov=n(Y,"LI",{});var iNe=s(Ov);Q_e=n(iNe,"STRONG",{});var e7t=s(Q_e);JOo=r(e7t,"mvp"),e7t.forEach(t),YOo=r(iNe," \u2014 "),fz=n(iNe,"A",{href:!0});var o7t=s(fz);KOo=r(o7t,"MvpForConditionalGeneration"),o7t.forEach(t),ZOo=r(iNe," (MVP model)"),iNe.forEach(t),eVo=i(Y),Vv=n(Y,"LI",{});var dNe=s(Vv);U_e=n(dNe,"STRONG",{});var r7t=s(U_e);oVo=r(r7t,"nezha"),r7t.forEach(t),rVo=r(dNe," \u2014 "),gz=n(dNe,"A",{href:!0});var t7t=s(gz);tVo=r(t7t,"NezhaForMaskedLM"),t7t.forEach(t),aVo=r(dNe," (Nezha model)"),dNe.forEach(t),nVo=i(Y),Xv=n(Y,"LI",{});var cNe=s(Xv);H_e=n(cNe,"STRONG",{});var a7t=s(H_e);sVo=r(a7t,"nystromformer"),a7t.forEach(t),lVo=r(cNe," \u2014 "),hz=n(cNe,"A",{href:!0});var n7t=s(hz);iVo=r(n7t,"NystromformerForMaskedLM"),n7t.forEach(t),dVo=r(cNe," (Nystr\xF6mformer model)"),cNe.forEach(t),cVo=i(Y),zv=n(Y,"LI",{});var mNe=s(zv);J_e=n(mNe,"STRONG",{});var s7t=s(J_e);mVo=r(s7t,"perceiver"),s7t.forEach(t),fVo=r(mNe," \u2014 "),uz=n(mNe,"A",{href:!0});var l7t=s(uz);gVo=r(l7t,"PerceiverForMaskedLM"),l7t.forEach(t),hVo=r(mNe," (Perceiver model)"),mNe.forEach(t),uVo=i(Y),Wv=n(Y,"LI",{});var fNe=s(Wv);Y_e=n(fNe,"STRONG",{});var i7t=s(Y_e);pVo=r(i7t,"qdqbert"),i7t.forEach(t),_Vo=r(fNe," \u2014 "),pz=n(fNe,"A",{href:!0});var d7t=s(pz);bVo=r(d7t,"QDQBertForMaskedLM"),d7t.forEach(t),vVo=r(fNe," (QDQBert model)"),fNe.forEach(t),FVo=i(Y),Qv=n(Y,"LI",{});var gNe=s(Qv);K_e=n(gNe,"STRONG",{});var c7t=s(K_e);TVo=r(c7t,"reformer"),c7t.forEach(t),MVo=r(gNe," \u2014 "),_z=n(gNe,"A",{href:!0});var m7t=s(_z);EVo=r(m7t,"ReformerForMaskedLM"),m7t.forEach(t),CVo=r(gNe," (Reformer model)"),gNe.forEach(t),wVo=i(Y),Uv=n(Y,"LI",{});var hNe=s(Uv);Z_e=n(hNe,"STRONG",{});var f7t=s(Z_e);AVo=r(f7t,"rembert"),f7t.forEach(t),LVo=r(hNe," \u2014 "),bz=n(hNe,"A",{href:!0});var g7t=s(bz);yVo=r(g7t,"RemBertForMaskedLM"),g7t.forEach(t),xVo=r(hNe," (RemBERT model)"),hNe.forEach(t),$Vo=i(Y),Hv=n(Y,"LI",{});var uNe=s(Hv);e2e=n(uNe,"STRONG",{});var h7t=s(e2e);kVo=r(h7t,"roberta"),h7t.forEach(t),SVo=r(uNe," \u2014 "),vz=n(uNe,"A",{href:!0});var u7t=s(vz);RVo=r(u7t,"RobertaForMaskedLM"),u7t.forEach(t),PVo=r(uNe," (RoBERTa model)"),uNe.forEach(t),BVo=i(Y),Jv=n(Y,"LI",{});var pNe=s(Jv);o2e=n(pNe,"STRONG",{});var p7t=s(o2e);IVo=r(p7t,"roformer"),p7t.forEach(t),NVo=r(pNe," \u2014 "),Fz=n(pNe,"A",{href:!0});var _7t=s(Fz);qVo=r(_7t,"RoFormerForMaskedLM"),_7t.forEach(t),jVo=r(pNe," (RoFormer model)"),pNe.forEach(t),DVo=i(Y),Yv=n(Y,"LI",{});var _Ne=s(Yv);r2e=n(_Ne,"STRONG",{});var b7t=s(r2e);GVo=r(b7t,"squeezebert"),b7t.forEach(t),OVo=r(_Ne," \u2014 "),Tz=n(_Ne,"A",{href:!0});var v7t=s(Tz);VVo=r(v7t,"SqueezeBertForMaskedLM"),v7t.forEach(t),XVo=r(_Ne," (SqueezeBERT model)"),_Ne.forEach(t),zVo=i(Y),Kv=n(Y,"LI",{});var bNe=s(Kv);t2e=n(bNe,"STRONG",{});var F7t=s(t2e);WVo=r(F7t,"tapas"),F7t.forEach(t),QVo=r(bNe," \u2014 "),Mz=n(bNe,"A",{href:!0});var T7t=s(Mz);UVo=r(T7t,"TapasForMaskedLM"),T7t.forEach(t),HVo=r(bNe," (TAPAS model)"),bNe.forEach(t),JVo=i(Y),Zv=n(Y,"LI",{});var vNe=s(Zv);a2e=n(vNe,"STRONG",{});var M7t=s(a2e);YVo=r(M7t,"wav2vec2"),M7t.forEach(t),KVo=r(vNe," \u2014 "),n2e=n(vNe,"CODE",{});var E7t=s(n2e);ZVo=r(E7t,"Wav2Vec2ForMaskedLM"),E7t.forEach(t),eXo=r(vNe," (Wav2Vec2 model)"),vNe.forEach(t),oXo=i(Y),e1=n(Y,"LI",{});var FNe=s(e1);s2e=n(FNe,"STRONG",{});var C7t=s(s2e);rXo=r(C7t,"xlm"),C7t.forEach(t),tXo=r(FNe," \u2014 "),Ez=n(FNe,"A",{href:!0});var w7t=s(Ez);aXo=r(w7t,"XLMWithLMHeadModel"),w7t.forEach(t),nXo=r(FNe," (XLM model)"),FNe.forEach(t),sXo=i(Y),o1=n(Y,"LI",{});var TNe=s(o1);l2e=n(TNe,"STRONG",{});var A7t=s(l2e);lXo=r(A7t,"xlm-roberta"),A7t.forEach(t),iXo=r(TNe," \u2014 "),Cz=n(TNe,"A",{href:!0});var L7t=s(Cz);dXo=r(L7t,"XLMRobertaForMaskedLM"),L7t.forEach(t),cXo=r(TNe," (XLM-RoBERTa model)"),TNe.forEach(t),mXo=i(Y),r1=n(Y,"LI",{});var MNe=s(r1);i2e=n(MNe,"STRONG",{});var y7t=s(i2e);fXo=r(y7t,"xlm-roberta-xl"),y7t.forEach(t),gXo=r(MNe," \u2014 "),wz=n(MNe,"A",{href:!0});var x7t=s(wz);hXo=r(x7t,"XLMRobertaXLForMaskedLM"),x7t.forEach(t),uXo=r(MNe," (XLM-RoBERTa-XL model)"),MNe.forEach(t),pXo=i(Y),t1=n(Y,"LI",{});var ENe=s(t1);d2e=n(ENe,"STRONG",{});var $7t=s(d2e);_Xo=r($7t,"yoso"),$7t.forEach(t),bXo=r(ENe," \u2014 "),Az=n(ENe,"A",{href:!0});var k7t=s(Az);vXo=r(k7t,"YosoForMaskedLM"),k7t.forEach(t),FXo=r(ENe," (YOSO model)"),ENe.forEach(t),Y.forEach(t),TXo=i(pa),a1=n(pa,"P",{});var CNe=s(a1);MXo=r(CNe,"The model is set in evaluation mode by default using "),c2e=n(CNe,"CODE",{});var S7t=s(c2e);EXo=r(S7t,"model.eval()"),S7t.forEach(t),CXo=r(CNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=n(CNe,"CODE",{});var R7t=s(m2e);wXo=r(R7t,"model.train()"),R7t.forEach(t),CNe.forEach(t),AXo=i(pa),T(n1.$$.fragment,pa),pa.forEach(t),_l.forEach(t),rHe=i(m),hd=n(m,"H2",{class:!0});var fYe=s(hd);s1=n(fYe,"A",{id:!0,class:!0,href:!0});var P7t=s(s1);f2e=n(P7t,"SPAN",{});var B7t=s(f2e);T(b9.$$.fragment,B7t),B7t.forEach(t),P7t.forEach(t),LXo=i(fYe),g2e=n(fYe,"SPAN",{});var I7t=s(g2e);yXo=r(I7t,"AutoModelForSeq2SeqLM"),I7t.forEach(t),fYe.forEach(t),tHe=i(m),Io=n(m,"DIV",{class:!0});var bl=s(Io);T(v9.$$.fragment,bl),xXo=i(bl),ud=n(bl,"P",{});var bne=s(ud);$Xo=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lz=n(bne,"A",{href:!0});var N7t=s(Lz);kXo=r(N7t,"from_pretrained()"),N7t.forEach(t),SXo=r(bne," class method or the "),yz=n(bne,"A",{href:!0});var q7t=s(yz);RXo=r(q7t,"from_config()"),q7t.forEach(t),PXo=r(bne,` class
method.`),bne.forEach(t),BXo=i(bl),F9=n(bl,"P",{});var gYe=s(F9);IXo=r(gYe,"This class cannot be instantiated directly using "),h2e=n(gYe,"CODE",{});var j7t=s(h2e);NXo=r(j7t,"__init__()"),j7t.forEach(t),qXo=r(gYe," (throws an error)."),gYe.forEach(t),jXo=i(bl),pt=n(bl,"DIV",{class:!0});var RL=s(pt);T(T9.$$.fragment,RL),DXo=i(RL),u2e=n(RL,"P",{});var D7t=s(u2e);GXo=r(D7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),D7t.forEach(t),OXo=i(RL),pd=n(RL,"P",{});var vne=s(pd);VXo=r(vne,`Note:
Loading a model from its configuration file does `),p2e=n(vne,"STRONG",{});var G7t=s(p2e);XXo=r(G7t,"not"),G7t.forEach(t),zXo=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(vne,"A",{href:!0});var O7t=s(xz);WXo=r(O7t,"from_pretrained()"),O7t.forEach(t),QXo=r(vne," to load the model weights."),vne.forEach(t),UXo=i(RL),T(l1.$$.fragment,RL),RL.forEach(t),HXo=i(bl),ro=n(bl,"DIV",{class:!0});var _a=s(ro);T(M9.$$.fragment,_a),JXo=i(_a),_2e=n(_a,"P",{});var V7t=s(_2e);YXo=r(V7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V7t.forEach(t),KXo=i(_a),Qa=n(_a,"P",{});var PL=s(Qa);ZXo=r(PL,"The model class to instantiate is selected based on the "),b2e=n(PL,"CODE",{});var X7t=s(b2e);ezo=r(X7t,"model_type"),X7t.forEach(t),ozo=r(PL,` property of the config object (either
passed as an argument or loaded from `),v2e=n(PL,"CODE",{});var z7t=s(v2e);rzo=r(z7t,"pretrained_model_name_or_path"),z7t.forEach(t),tzo=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(PL,"CODE",{});var W7t=s(F2e);azo=r(W7t,"pretrained_model_name_or_path"),W7t.forEach(t),nzo=r(PL,":"),PL.forEach(t),szo=i(_a),me=n(_a,"UL",{});var pe=s(me);i1=n(pe,"LI",{});var wNe=s(i1);T2e=n(wNe,"STRONG",{});var Q7t=s(T2e);lzo=r(Q7t,"bart"),Q7t.forEach(t),izo=r(wNe," \u2014 "),$z=n(wNe,"A",{href:!0});var U7t=s($z);dzo=r(U7t,"BartForConditionalGeneration"),U7t.forEach(t),czo=r(wNe," (BART model)"),wNe.forEach(t),mzo=i(pe),d1=n(pe,"LI",{});var ANe=s(d1);M2e=n(ANe,"STRONG",{});var H7t=s(M2e);fzo=r(H7t,"bigbird_pegasus"),H7t.forEach(t),gzo=r(ANe," \u2014 "),kz=n(ANe,"A",{href:!0});var J7t=s(kz);hzo=r(J7t,"BigBirdPegasusForConditionalGeneration"),J7t.forEach(t),uzo=r(ANe," (BigBird-Pegasus model)"),ANe.forEach(t),pzo=i(pe),c1=n(pe,"LI",{});var LNe=s(c1);E2e=n(LNe,"STRONG",{});var Y7t=s(E2e);_zo=r(Y7t,"blenderbot"),Y7t.forEach(t),bzo=r(LNe," \u2014 "),Sz=n(LNe,"A",{href:!0});var K7t=s(Sz);vzo=r(K7t,"BlenderbotForConditionalGeneration"),K7t.forEach(t),Fzo=r(LNe," (Blenderbot model)"),LNe.forEach(t),Tzo=i(pe),m1=n(pe,"LI",{});var yNe=s(m1);C2e=n(yNe,"STRONG",{});var Z7t=s(C2e);Mzo=r(Z7t,"blenderbot-small"),Z7t.forEach(t),Ezo=r(yNe," \u2014 "),Rz=n(yNe,"A",{href:!0});var eLt=s(Rz);Czo=r(eLt,"BlenderbotSmallForConditionalGeneration"),eLt.forEach(t),wzo=r(yNe," (BlenderbotSmall model)"),yNe.forEach(t),Azo=i(pe),f1=n(pe,"LI",{});var xNe=s(f1);w2e=n(xNe,"STRONG",{});var oLt=s(w2e);Lzo=r(oLt,"encoder-decoder"),oLt.forEach(t),yzo=r(xNe," \u2014 "),Pz=n(xNe,"A",{href:!0});var rLt=s(Pz);xzo=r(rLt,"EncoderDecoderModel"),rLt.forEach(t),$zo=r(xNe," (Encoder decoder model)"),xNe.forEach(t),kzo=i(pe),g1=n(pe,"LI",{});var $Ne=s(g1);A2e=n($Ne,"STRONG",{});var tLt=s(A2e);Szo=r(tLt,"fsmt"),tLt.forEach(t),Rzo=r($Ne," \u2014 "),Bz=n($Ne,"A",{href:!0});var aLt=s(Bz);Pzo=r(aLt,"FSMTForConditionalGeneration"),aLt.forEach(t),Bzo=r($Ne," (FairSeq Machine-Translation model)"),$Ne.forEach(t),Izo=i(pe),h1=n(pe,"LI",{});var kNe=s(h1);L2e=n(kNe,"STRONG",{});var nLt=s(L2e);Nzo=r(nLt,"led"),nLt.forEach(t),qzo=r(kNe," \u2014 "),Iz=n(kNe,"A",{href:!0});var sLt=s(Iz);jzo=r(sLt,"LEDForConditionalGeneration"),sLt.forEach(t),Dzo=r(kNe," (LED model)"),kNe.forEach(t),Gzo=i(pe),u1=n(pe,"LI",{});var SNe=s(u1);y2e=n(SNe,"STRONG",{});var lLt=s(y2e);Ozo=r(lLt,"longt5"),lLt.forEach(t),Vzo=r(SNe," \u2014 "),Nz=n(SNe,"A",{href:!0});var iLt=s(Nz);Xzo=r(iLt,"LongT5ForConditionalGeneration"),iLt.forEach(t),zzo=r(SNe," (LongT5 model)"),SNe.forEach(t),Wzo=i(pe),p1=n(pe,"LI",{});var RNe=s(p1);x2e=n(RNe,"STRONG",{});var dLt=s(x2e);Qzo=r(dLt,"m2m_100"),dLt.forEach(t),Uzo=r(RNe," \u2014 "),qz=n(RNe,"A",{href:!0});var cLt=s(qz);Hzo=r(cLt,"M2M100ForConditionalGeneration"),cLt.forEach(t),Jzo=r(RNe," (M2M100 model)"),RNe.forEach(t),Yzo=i(pe),_1=n(pe,"LI",{});var PNe=s(_1);$2e=n(PNe,"STRONG",{});var mLt=s($2e);Kzo=r(mLt,"marian"),mLt.forEach(t),Zzo=r(PNe," \u2014 "),jz=n(PNe,"A",{href:!0});var fLt=s(jz);eWo=r(fLt,"MarianMTModel"),fLt.forEach(t),oWo=r(PNe," (Marian model)"),PNe.forEach(t),rWo=i(pe),b1=n(pe,"LI",{});var BNe=s(b1);k2e=n(BNe,"STRONG",{});var gLt=s(k2e);tWo=r(gLt,"mbart"),gLt.forEach(t),aWo=r(BNe," \u2014 "),Dz=n(BNe,"A",{href:!0});var hLt=s(Dz);nWo=r(hLt,"MBartForConditionalGeneration"),hLt.forEach(t),sWo=r(BNe," (mBART model)"),BNe.forEach(t),lWo=i(pe),v1=n(pe,"LI",{});var INe=s(v1);S2e=n(INe,"STRONG",{});var uLt=s(S2e);iWo=r(uLt,"mt5"),uLt.forEach(t),dWo=r(INe," \u2014 "),Gz=n(INe,"A",{href:!0});var pLt=s(Gz);cWo=r(pLt,"MT5ForConditionalGeneration"),pLt.forEach(t),mWo=r(INe," (MT5 model)"),INe.forEach(t),fWo=i(pe),F1=n(pe,"LI",{});var NNe=s(F1);R2e=n(NNe,"STRONG",{});var _Lt=s(R2e);gWo=r(_Lt,"mvp"),_Lt.forEach(t),hWo=r(NNe," \u2014 "),Oz=n(NNe,"A",{href:!0});var bLt=s(Oz);uWo=r(bLt,"MvpForConditionalGeneration"),bLt.forEach(t),pWo=r(NNe," (MVP model)"),NNe.forEach(t),_Wo=i(pe),T1=n(pe,"LI",{});var qNe=s(T1);P2e=n(qNe,"STRONG",{});var vLt=s(P2e);bWo=r(vLt,"nllb"),vLt.forEach(t),vWo=r(qNe," \u2014 "),Vz=n(qNe,"A",{href:!0});var FLt=s(Vz);FWo=r(FLt,"M2M100ForConditionalGeneration"),FLt.forEach(t),TWo=r(qNe," (NLLB model)"),qNe.forEach(t),MWo=i(pe),M1=n(pe,"LI",{});var jNe=s(M1);B2e=n(jNe,"STRONG",{});var TLt=s(B2e);EWo=r(TLt,"pegasus"),TLt.forEach(t),CWo=r(jNe," \u2014 "),Xz=n(jNe,"A",{href:!0});var MLt=s(Xz);wWo=r(MLt,"PegasusForConditionalGeneration"),MLt.forEach(t),AWo=r(jNe," (Pegasus model)"),jNe.forEach(t),LWo=i(pe),E1=n(pe,"LI",{});var DNe=s(E1);I2e=n(DNe,"STRONG",{});var ELt=s(I2e);yWo=r(ELt,"pegasus_x"),ELt.forEach(t),xWo=r(DNe," \u2014 "),zz=n(DNe,"A",{href:!0});var CLt=s(zz);$Wo=r(CLt,"PegasusXForConditionalGeneration"),CLt.forEach(t),kWo=r(DNe," (PEGASUS-X model)"),DNe.forEach(t),SWo=i(pe),C1=n(pe,"LI",{});var GNe=s(C1);N2e=n(GNe,"STRONG",{});var wLt=s(N2e);RWo=r(wLt,"plbart"),wLt.forEach(t),PWo=r(GNe," \u2014 "),Wz=n(GNe,"A",{href:!0});var ALt=s(Wz);BWo=r(ALt,"PLBartForConditionalGeneration"),ALt.forEach(t),IWo=r(GNe," (PLBart model)"),GNe.forEach(t),NWo=i(pe),w1=n(pe,"LI",{});var ONe=s(w1);q2e=n(ONe,"STRONG",{});var LLt=s(q2e);qWo=r(LLt,"prophetnet"),LLt.forEach(t),jWo=r(ONe," \u2014 "),Qz=n(ONe,"A",{href:!0});var yLt=s(Qz);DWo=r(yLt,"ProphetNetForConditionalGeneration"),yLt.forEach(t),GWo=r(ONe," (ProphetNet model)"),ONe.forEach(t),OWo=i(pe),A1=n(pe,"LI",{});var VNe=s(A1);j2e=n(VNe,"STRONG",{});var xLt=s(j2e);VWo=r(xLt,"t5"),xLt.forEach(t),XWo=r(VNe," \u2014 "),Uz=n(VNe,"A",{href:!0});var $Lt=s(Uz);zWo=r($Lt,"T5ForConditionalGeneration"),$Lt.forEach(t),WWo=r(VNe," (T5 model)"),VNe.forEach(t),QWo=i(pe),L1=n(pe,"LI",{});var XNe=s(L1);D2e=n(XNe,"STRONG",{});var kLt=s(D2e);UWo=r(kLt,"xlm-prophetnet"),kLt.forEach(t),HWo=r(XNe," \u2014 "),Hz=n(XNe,"A",{href:!0});var SLt=s(Hz);JWo=r(SLt,"XLMProphetNetForConditionalGeneration"),SLt.forEach(t),YWo=r(XNe," (XLM-ProphetNet model)"),XNe.forEach(t),pe.forEach(t),KWo=i(_a),y1=n(_a,"P",{});var zNe=s(y1);ZWo=r(zNe,"The model is set in evaluation mode by default using "),G2e=n(zNe,"CODE",{});var RLt=s(G2e);eQo=r(RLt,"model.eval()"),RLt.forEach(t),oQo=r(zNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=n(zNe,"CODE",{});var PLt=s(O2e);rQo=r(PLt,"model.train()"),PLt.forEach(t),zNe.forEach(t),tQo=i(_a),T(x1.$$.fragment,_a),_a.forEach(t),bl.forEach(t),aHe=i(m),_d=n(m,"H2",{class:!0});var hYe=s(_d);$1=n(hYe,"A",{id:!0,class:!0,href:!0});var BLt=s($1);V2e=n(BLt,"SPAN",{});var ILt=s(V2e);T(E9.$$.fragment,ILt),ILt.forEach(t),BLt.forEach(t),aQo=i(hYe),X2e=n(hYe,"SPAN",{});var NLt=s(X2e);nQo=r(NLt,"AutoModelForSequenceClassification"),NLt.forEach(t),hYe.forEach(t),nHe=i(m),No=n(m,"DIV",{class:!0});var vl=s(No);T(C9.$$.fragment,vl),sQo=i(vl),bd=n(vl,"P",{});var Fne=s(bd);lQo=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jz=n(Fne,"A",{href:!0});var qLt=s(Jz);iQo=r(qLt,"from_pretrained()"),qLt.forEach(t),dQo=r(Fne," class method or the "),Yz=n(Fne,"A",{href:!0});var jLt=s(Yz);cQo=r(jLt,"from_config()"),jLt.forEach(t),mQo=r(Fne,` class
method.`),Fne.forEach(t),fQo=i(vl),w9=n(vl,"P",{});var uYe=s(w9);gQo=r(uYe,"This class cannot be instantiated directly using "),z2e=n(uYe,"CODE",{});var DLt=s(z2e);hQo=r(DLt,"__init__()"),DLt.forEach(t),uQo=r(uYe," (throws an error)."),uYe.forEach(t),pQo=i(vl),_t=n(vl,"DIV",{class:!0});var BL=s(_t);T(A9.$$.fragment,BL),_Qo=i(BL),W2e=n(BL,"P",{});var GLt=s(W2e);bQo=r(GLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GLt.forEach(t),vQo=i(BL),vd=n(BL,"P",{});var Tne=s(vd);FQo=r(Tne,`Note:
Loading a model from its configuration file does `),Q2e=n(Tne,"STRONG",{});var OLt=s(Q2e);TQo=r(OLt,"not"),OLt.forEach(t),MQo=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(Tne,"A",{href:!0});var VLt=s(Kz);EQo=r(VLt,"from_pretrained()"),VLt.forEach(t),CQo=r(Tne," to load the model weights."),Tne.forEach(t),wQo=i(BL),T(k1.$$.fragment,BL),BL.forEach(t),AQo=i(vl),to=n(vl,"DIV",{class:!0});var ba=s(to);T(L9.$$.fragment,ba),LQo=i(ba),U2e=n(ba,"P",{});var XLt=s(U2e);yQo=r(XLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XLt.forEach(t),xQo=i(ba),Ua=n(ba,"P",{});var IL=s(Ua);$Qo=r(IL,"The model class to instantiate is selected based on the "),H2e=n(IL,"CODE",{});var zLt=s(H2e);kQo=r(zLt,"model_type"),zLt.forEach(t),SQo=r(IL,` property of the config object (either
passed as an argument or loaded from `),J2e=n(IL,"CODE",{});var WLt=s(J2e);RQo=r(WLt,"pretrained_model_name_or_path"),WLt.forEach(t),PQo=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(IL,"CODE",{});var QLt=s(Y2e);BQo=r(QLt,"pretrained_model_name_or_path"),QLt.forEach(t),IQo=r(IL,":"),IL.forEach(t),NQo=i(ba),j=n(ba,"UL",{});var D=s(j);S1=n(D,"LI",{});var WNe=s(S1);K2e=n(WNe,"STRONG",{});var ULt=s(K2e);qQo=r(ULt,"albert"),ULt.forEach(t),jQo=r(WNe," \u2014 "),Zz=n(WNe,"A",{href:!0});var HLt=s(Zz);DQo=r(HLt,"AlbertForSequenceClassification"),HLt.forEach(t),GQo=r(WNe," (ALBERT model)"),WNe.forEach(t),OQo=i(D),R1=n(D,"LI",{});var QNe=s(R1);Z2e=n(QNe,"STRONG",{});var JLt=s(Z2e);VQo=r(JLt,"bart"),JLt.forEach(t),XQo=r(QNe," \u2014 "),eW=n(QNe,"A",{href:!0});var YLt=s(eW);zQo=r(YLt,"BartForSequenceClassification"),YLt.forEach(t),WQo=r(QNe," (BART model)"),QNe.forEach(t),QQo=i(D),P1=n(D,"LI",{});var UNe=s(P1);ebe=n(UNe,"STRONG",{});var KLt=s(ebe);UQo=r(KLt,"bert"),KLt.forEach(t),HQo=r(UNe," \u2014 "),oW=n(UNe,"A",{href:!0});var ZLt=s(oW);JQo=r(ZLt,"BertForSequenceClassification"),ZLt.forEach(t),YQo=r(UNe," (BERT model)"),UNe.forEach(t),KQo=i(D),B1=n(D,"LI",{});var HNe=s(B1);obe=n(HNe,"STRONG",{});var eyt=s(obe);ZQo=r(eyt,"big_bird"),eyt.forEach(t),eUo=r(HNe," \u2014 "),rW=n(HNe,"A",{href:!0});var oyt=s(rW);oUo=r(oyt,"BigBirdForSequenceClassification"),oyt.forEach(t),rUo=r(HNe," (BigBird model)"),HNe.forEach(t),tUo=i(D),I1=n(D,"LI",{});var JNe=s(I1);rbe=n(JNe,"STRONG",{});var ryt=s(rbe);aUo=r(ryt,"bigbird_pegasus"),ryt.forEach(t),nUo=r(JNe," \u2014 "),tW=n(JNe,"A",{href:!0});var tyt=s(tW);sUo=r(tyt,"BigBirdPegasusForSequenceClassification"),tyt.forEach(t),lUo=r(JNe," (BigBird-Pegasus model)"),JNe.forEach(t),iUo=i(D),N1=n(D,"LI",{});var YNe=s(N1);tbe=n(YNe,"STRONG",{});var ayt=s(tbe);dUo=r(ayt,"bloom"),ayt.forEach(t),cUo=r(YNe," \u2014 "),aW=n(YNe,"A",{href:!0});var nyt=s(aW);mUo=r(nyt,"BloomForSequenceClassification"),nyt.forEach(t),fUo=r(YNe," (BLOOM model)"),YNe.forEach(t),gUo=i(D),q1=n(D,"LI",{});var KNe=s(q1);abe=n(KNe,"STRONG",{});var syt=s(abe);hUo=r(syt,"camembert"),syt.forEach(t),uUo=r(KNe," \u2014 "),nW=n(KNe,"A",{href:!0});var lyt=s(nW);pUo=r(lyt,"CamembertForSequenceClassification"),lyt.forEach(t),_Uo=r(KNe," (CamemBERT model)"),KNe.forEach(t),bUo=i(D),j1=n(D,"LI",{});var ZNe=s(j1);nbe=n(ZNe,"STRONG",{});var iyt=s(nbe);vUo=r(iyt,"canine"),iyt.forEach(t),FUo=r(ZNe," \u2014 "),sW=n(ZNe,"A",{href:!0});var dyt=s(sW);TUo=r(dyt,"CanineForSequenceClassification"),dyt.forEach(t),MUo=r(ZNe," (CANINE model)"),ZNe.forEach(t),EUo=i(D),D1=n(D,"LI",{});var eqe=s(D1);sbe=n(eqe,"STRONG",{});var cyt=s(sbe);CUo=r(cyt,"convbert"),cyt.forEach(t),wUo=r(eqe," \u2014 "),lW=n(eqe,"A",{href:!0});var myt=s(lW);AUo=r(myt,"ConvBertForSequenceClassification"),myt.forEach(t),LUo=r(eqe," (ConvBERT model)"),eqe.forEach(t),yUo=i(D),G1=n(D,"LI",{});var oqe=s(G1);lbe=n(oqe,"STRONG",{});var fyt=s(lbe);xUo=r(fyt,"ctrl"),fyt.forEach(t),$Uo=r(oqe," \u2014 "),iW=n(oqe,"A",{href:!0});var gyt=s(iW);kUo=r(gyt,"CTRLForSequenceClassification"),gyt.forEach(t),SUo=r(oqe," (CTRL model)"),oqe.forEach(t),RUo=i(D),O1=n(D,"LI",{});var rqe=s(O1);ibe=n(rqe,"STRONG",{});var hyt=s(ibe);PUo=r(hyt,"data2vec-text"),hyt.forEach(t),BUo=r(rqe," \u2014 "),dW=n(rqe,"A",{href:!0});var uyt=s(dW);IUo=r(uyt,"Data2VecTextForSequenceClassification"),uyt.forEach(t),NUo=r(rqe," (Data2VecText model)"),rqe.forEach(t),qUo=i(D),V1=n(D,"LI",{});var tqe=s(V1);dbe=n(tqe,"STRONG",{});var pyt=s(dbe);jUo=r(pyt,"deberta"),pyt.forEach(t),DUo=r(tqe," \u2014 "),cW=n(tqe,"A",{href:!0});var _yt=s(cW);GUo=r(_yt,"DebertaForSequenceClassification"),_yt.forEach(t),OUo=r(tqe," (DeBERTa model)"),tqe.forEach(t),VUo=i(D),X1=n(D,"LI",{});var aqe=s(X1);cbe=n(aqe,"STRONG",{});var byt=s(cbe);XUo=r(byt,"deberta-v2"),byt.forEach(t),zUo=r(aqe," \u2014 "),mW=n(aqe,"A",{href:!0});var vyt=s(mW);WUo=r(vyt,"DebertaV2ForSequenceClassification"),vyt.forEach(t),QUo=r(aqe," (DeBERTa-v2 model)"),aqe.forEach(t),UUo=i(D),z1=n(D,"LI",{});var nqe=s(z1);mbe=n(nqe,"STRONG",{});var Fyt=s(mbe);HUo=r(Fyt,"distilbert"),Fyt.forEach(t),JUo=r(nqe," \u2014 "),fW=n(nqe,"A",{href:!0});var Tyt=s(fW);YUo=r(Tyt,"DistilBertForSequenceClassification"),Tyt.forEach(t),KUo=r(nqe," (DistilBERT model)"),nqe.forEach(t),ZUo=i(D),W1=n(D,"LI",{});var sqe=s(W1);fbe=n(sqe,"STRONG",{});var Myt=s(fbe);eHo=r(Myt,"electra"),Myt.forEach(t),oHo=r(sqe," \u2014 "),gW=n(sqe,"A",{href:!0});var Eyt=s(gW);rHo=r(Eyt,"ElectraForSequenceClassification"),Eyt.forEach(t),tHo=r(sqe," (ELECTRA model)"),sqe.forEach(t),aHo=i(D),Q1=n(D,"LI",{});var lqe=s(Q1);gbe=n(lqe,"STRONG",{});var Cyt=s(gbe);nHo=r(Cyt,"flaubert"),Cyt.forEach(t),sHo=r(lqe," \u2014 "),hW=n(lqe,"A",{href:!0});var wyt=s(hW);lHo=r(wyt,"FlaubertForSequenceClassification"),wyt.forEach(t),iHo=r(lqe," (FlauBERT model)"),lqe.forEach(t),dHo=i(D),U1=n(D,"LI",{});var iqe=s(U1);hbe=n(iqe,"STRONG",{});var Ayt=s(hbe);cHo=r(Ayt,"fnet"),Ayt.forEach(t),mHo=r(iqe," \u2014 "),uW=n(iqe,"A",{href:!0});var Lyt=s(uW);fHo=r(Lyt,"FNetForSequenceClassification"),Lyt.forEach(t),gHo=r(iqe," (FNet model)"),iqe.forEach(t),hHo=i(D),H1=n(D,"LI",{});var dqe=s(H1);ube=n(dqe,"STRONG",{});var yyt=s(ube);uHo=r(yyt,"funnel"),yyt.forEach(t),pHo=r(dqe," \u2014 "),pW=n(dqe,"A",{href:!0});var xyt=s(pW);_Ho=r(xyt,"FunnelForSequenceClassification"),xyt.forEach(t),bHo=r(dqe," (Funnel Transformer model)"),dqe.forEach(t),vHo=i(D),J1=n(D,"LI",{});var cqe=s(J1);pbe=n(cqe,"STRONG",{});var $yt=s(pbe);FHo=r($yt,"gpt2"),$yt.forEach(t),THo=r(cqe," \u2014 "),_W=n(cqe,"A",{href:!0});var kyt=s(_W);MHo=r(kyt,"GPT2ForSequenceClassification"),kyt.forEach(t),EHo=r(cqe," (OpenAI GPT-2 model)"),cqe.forEach(t),CHo=i(D),Y1=n(D,"LI",{});var mqe=s(Y1);_be=n(mqe,"STRONG",{});var Syt=s(_be);wHo=r(Syt,"gpt_neo"),Syt.forEach(t),AHo=r(mqe," \u2014 "),bW=n(mqe,"A",{href:!0});var Ryt=s(bW);LHo=r(Ryt,"GPTNeoForSequenceClassification"),Ryt.forEach(t),yHo=r(mqe," (GPT Neo model)"),mqe.forEach(t),xHo=i(D),K1=n(D,"LI",{});var fqe=s(K1);bbe=n(fqe,"STRONG",{});var Pyt=s(bbe);$Ho=r(Pyt,"gptj"),Pyt.forEach(t),kHo=r(fqe," \u2014 "),vW=n(fqe,"A",{href:!0});var Byt=s(vW);SHo=r(Byt,"GPTJForSequenceClassification"),Byt.forEach(t),RHo=r(fqe," (GPT-J model)"),fqe.forEach(t),PHo=i(D),Z1=n(D,"LI",{});var gqe=s(Z1);vbe=n(gqe,"STRONG",{});var Iyt=s(vbe);BHo=r(Iyt,"ibert"),Iyt.forEach(t),IHo=r(gqe," \u2014 "),FW=n(gqe,"A",{href:!0});var Nyt=s(FW);NHo=r(Nyt,"IBertForSequenceClassification"),Nyt.forEach(t),qHo=r(gqe," (I-BERT model)"),gqe.forEach(t),jHo=i(D),eF=n(D,"LI",{});var hqe=s(eF);Fbe=n(hqe,"STRONG",{});var qyt=s(Fbe);DHo=r(qyt,"layoutlm"),qyt.forEach(t),GHo=r(hqe," \u2014 "),TW=n(hqe,"A",{href:!0});var jyt=s(TW);OHo=r(jyt,"LayoutLMForSequenceClassification"),jyt.forEach(t),VHo=r(hqe," (LayoutLM model)"),hqe.forEach(t),XHo=i(D),oF=n(D,"LI",{});var uqe=s(oF);Tbe=n(uqe,"STRONG",{});var Dyt=s(Tbe);zHo=r(Dyt,"layoutlmv2"),Dyt.forEach(t),WHo=r(uqe," \u2014 "),MW=n(uqe,"A",{href:!0});var Gyt=s(MW);QHo=r(Gyt,"LayoutLMv2ForSequenceClassification"),Gyt.forEach(t),UHo=r(uqe," (LayoutLMv2 model)"),uqe.forEach(t),HHo=i(D),rF=n(D,"LI",{});var pqe=s(rF);Mbe=n(pqe,"STRONG",{});var Oyt=s(Mbe);JHo=r(Oyt,"layoutlmv3"),Oyt.forEach(t),YHo=r(pqe," \u2014 "),EW=n(pqe,"A",{href:!0});var Vyt=s(EW);KHo=r(Vyt,"LayoutLMv3ForSequenceClassification"),Vyt.forEach(t),ZHo=r(pqe," (LayoutLMv3 model)"),pqe.forEach(t),eJo=i(D),tF=n(D,"LI",{});var _qe=s(tF);Ebe=n(_qe,"STRONG",{});var Xyt=s(Ebe);oJo=r(Xyt,"led"),Xyt.forEach(t),rJo=r(_qe," \u2014 "),CW=n(_qe,"A",{href:!0});var zyt=s(CW);tJo=r(zyt,"LEDForSequenceClassification"),zyt.forEach(t),aJo=r(_qe," (LED model)"),_qe.forEach(t),nJo=i(D),aF=n(D,"LI",{});var bqe=s(aF);Cbe=n(bqe,"STRONG",{});var Wyt=s(Cbe);sJo=r(Wyt,"longformer"),Wyt.forEach(t),lJo=r(bqe," \u2014 "),wW=n(bqe,"A",{href:!0});var Qyt=s(wW);iJo=r(Qyt,"LongformerForSequenceClassification"),Qyt.forEach(t),dJo=r(bqe," (Longformer model)"),bqe.forEach(t),cJo=i(D),nF=n(D,"LI",{});var vqe=s(nF);wbe=n(vqe,"STRONG",{});var Uyt=s(wbe);mJo=r(Uyt,"luke"),Uyt.forEach(t),fJo=r(vqe," \u2014 "),AW=n(vqe,"A",{href:!0});var Hyt=s(AW);gJo=r(Hyt,"LukeForSequenceClassification"),Hyt.forEach(t),hJo=r(vqe," (LUKE model)"),vqe.forEach(t),uJo=i(D),sF=n(D,"LI",{});var Fqe=s(sF);Abe=n(Fqe,"STRONG",{});var Jyt=s(Abe);pJo=r(Jyt,"mbart"),Jyt.forEach(t),_Jo=r(Fqe," \u2014 "),LW=n(Fqe,"A",{href:!0});var Yyt=s(LW);bJo=r(Yyt,"MBartForSequenceClassification"),Yyt.forEach(t),vJo=r(Fqe," (mBART model)"),Fqe.forEach(t),FJo=i(D),lF=n(D,"LI",{});var Tqe=s(lF);Lbe=n(Tqe,"STRONG",{});var Kyt=s(Lbe);TJo=r(Kyt,"megatron-bert"),Kyt.forEach(t),MJo=r(Tqe," \u2014 "),yW=n(Tqe,"A",{href:!0});var Zyt=s(yW);EJo=r(Zyt,"MegatronBertForSequenceClassification"),Zyt.forEach(t),CJo=r(Tqe," (Megatron-BERT model)"),Tqe.forEach(t),wJo=i(D),iF=n(D,"LI",{});var Mqe=s(iF);ybe=n(Mqe,"STRONG",{});var e8t=s(ybe);AJo=r(e8t,"mobilebert"),e8t.forEach(t),LJo=r(Mqe," \u2014 "),xW=n(Mqe,"A",{href:!0});var o8t=s(xW);yJo=r(o8t,"MobileBertForSequenceClassification"),o8t.forEach(t),xJo=r(Mqe," (MobileBERT model)"),Mqe.forEach(t),$Jo=i(D),dF=n(D,"LI",{});var Eqe=s(dF);xbe=n(Eqe,"STRONG",{});var r8t=s(xbe);kJo=r(r8t,"mpnet"),r8t.forEach(t),SJo=r(Eqe," \u2014 "),$W=n(Eqe,"A",{href:!0});var t8t=s($W);RJo=r(t8t,"MPNetForSequenceClassification"),t8t.forEach(t),PJo=r(Eqe," (MPNet model)"),Eqe.forEach(t),BJo=i(D),cF=n(D,"LI",{});var Cqe=s(cF);$be=n(Cqe,"STRONG",{});var a8t=s($be);IJo=r(a8t,"mvp"),a8t.forEach(t),NJo=r(Cqe," \u2014 "),kW=n(Cqe,"A",{href:!0});var n8t=s(kW);qJo=r(n8t,"MvpForSequenceClassification"),n8t.forEach(t),jJo=r(Cqe," (MVP model)"),Cqe.forEach(t),DJo=i(D),mF=n(D,"LI",{});var wqe=s(mF);kbe=n(wqe,"STRONG",{});var s8t=s(kbe);GJo=r(s8t,"nezha"),s8t.forEach(t),OJo=r(wqe," \u2014 "),SW=n(wqe,"A",{href:!0});var l8t=s(SW);VJo=r(l8t,"NezhaForSequenceClassification"),l8t.forEach(t),XJo=r(wqe," (Nezha model)"),wqe.forEach(t),zJo=i(D),fF=n(D,"LI",{});var Aqe=s(fF);Sbe=n(Aqe,"STRONG",{});var i8t=s(Sbe);WJo=r(i8t,"nystromformer"),i8t.forEach(t),QJo=r(Aqe," \u2014 "),RW=n(Aqe,"A",{href:!0});var d8t=s(RW);UJo=r(d8t,"NystromformerForSequenceClassification"),d8t.forEach(t),HJo=r(Aqe," (Nystr\xF6mformer model)"),Aqe.forEach(t),JJo=i(D),gF=n(D,"LI",{});var Lqe=s(gF);Rbe=n(Lqe,"STRONG",{});var c8t=s(Rbe);YJo=r(c8t,"openai-gpt"),c8t.forEach(t),KJo=r(Lqe," \u2014 "),PW=n(Lqe,"A",{href:!0});var m8t=s(PW);ZJo=r(m8t,"OpenAIGPTForSequenceClassification"),m8t.forEach(t),eYo=r(Lqe," (OpenAI GPT model)"),Lqe.forEach(t),oYo=i(D),hF=n(D,"LI",{});var yqe=s(hF);Pbe=n(yqe,"STRONG",{});var f8t=s(Pbe);rYo=r(f8t,"opt"),f8t.forEach(t),tYo=r(yqe," \u2014 "),BW=n(yqe,"A",{href:!0});var g8t=s(BW);aYo=r(g8t,"OPTForSequenceClassification"),g8t.forEach(t),nYo=r(yqe," (OPT model)"),yqe.forEach(t),sYo=i(D),uF=n(D,"LI",{});var xqe=s(uF);Bbe=n(xqe,"STRONG",{});var h8t=s(Bbe);lYo=r(h8t,"perceiver"),h8t.forEach(t),iYo=r(xqe," \u2014 "),IW=n(xqe,"A",{href:!0});var u8t=s(IW);dYo=r(u8t,"PerceiverForSequenceClassification"),u8t.forEach(t),cYo=r(xqe," (Perceiver model)"),xqe.forEach(t),mYo=i(D),pF=n(D,"LI",{});var $qe=s(pF);Ibe=n($qe,"STRONG",{});var p8t=s(Ibe);fYo=r(p8t,"plbart"),p8t.forEach(t),gYo=r($qe," \u2014 "),NW=n($qe,"A",{href:!0});var _8t=s(NW);hYo=r(_8t,"PLBartForSequenceClassification"),_8t.forEach(t),uYo=r($qe," (PLBart model)"),$qe.forEach(t),pYo=i(D),_F=n(D,"LI",{});var kqe=s(_F);Nbe=n(kqe,"STRONG",{});var b8t=s(Nbe);_Yo=r(b8t,"qdqbert"),b8t.forEach(t),bYo=r(kqe," \u2014 "),qW=n(kqe,"A",{href:!0});var v8t=s(qW);vYo=r(v8t,"QDQBertForSequenceClassification"),v8t.forEach(t),FYo=r(kqe," (QDQBert model)"),kqe.forEach(t),TYo=i(D),bF=n(D,"LI",{});var Sqe=s(bF);qbe=n(Sqe,"STRONG",{});var F8t=s(qbe);MYo=r(F8t,"reformer"),F8t.forEach(t),EYo=r(Sqe," \u2014 "),jW=n(Sqe,"A",{href:!0});var T8t=s(jW);CYo=r(T8t,"ReformerForSequenceClassification"),T8t.forEach(t),wYo=r(Sqe," (Reformer model)"),Sqe.forEach(t),AYo=i(D),vF=n(D,"LI",{});var Rqe=s(vF);jbe=n(Rqe,"STRONG",{});var M8t=s(jbe);LYo=r(M8t,"rembert"),M8t.forEach(t),yYo=r(Rqe," \u2014 "),DW=n(Rqe,"A",{href:!0});var E8t=s(DW);xYo=r(E8t,"RemBertForSequenceClassification"),E8t.forEach(t),$Yo=r(Rqe," (RemBERT model)"),Rqe.forEach(t),kYo=i(D),FF=n(D,"LI",{});var Pqe=s(FF);Dbe=n(Pqe,"STRONG",{});var C8t=s(Dbe);SYo=r(C8t,"roberta"),C8t.forEach(t),RYo=r(Pqe," \u2014 "),GW=n(Pqe,"A",{href:!0});var w8t=s(GW);PYo=r(w8t,"RobertaForSequenceClassification"),w8t.forEach(t),BYo=r(Pqe," (RoBERTa model)"),Pqe.forEach(t),IYo=i(D),TF=n(D,"LI",{});var Bqe=s(TF);Gbe=n(Bqe,"STRONG",{});var A8t=s(Gbe);NYo=r(A8t,"roformer"),A8t.forEach(t),qYo=r(Bqe," \u2014 "),OW=n(Bqe,"A",{href:!0});var L8t=s(OW);jYo=r(L8t,"RoFormerForSequenceClassification"),L8t.forEach(t),DYo=r(Bqe," (RoFormer model)"),Bqe.forEach(t),GYo=i(D),MF=n(D,"LI",{});var Iqe=s(MF);Obe=n(Iqe,"STRONG",{});var y8t=s(Obe);OYo=r(y8t,"squeezebert"),y8t.forEach(t),VYo=r(Iqe," \u2014 "),VW=n(Iqe,"A",{href:!0});var x8t=s(VW);XYo=r(x8t,"SqueezeBertForSequenceClassification"),x8t.forEach(t),zYo=r(Iqe," (SqueezeBERT model)"),Iqe.forEach(t),WYo=i(D),EF=n(D,"LI",{});var Nqe=s(EF);Vbe=n(Nqe,"STRONG",{});var $8t=s(Vbe);QYo=r($8t,"tapas"),$8t.forEach(t),UYo=r(Nqe," \u2014 "),XW=n(Nqe,"A",{href:!0});var k8t=s(XW);HYo=r(k8t,"TapasForSequenceClassification"),k8t.forEach(t),JYo=r(Nqe," (TAPAS model)"),Nqe.forEach(t),YYo=i(D),CF=n(D,"LI",{});var qqe=s(CF);Xbe=n(qqe,"STRONG",{});var S8t=s(Xbe);KYo=r(S8t,"transfo-xl"),S8t.forEach(t),ZYo=r(qqe," \u2014 "),zW=n(qqe,"A",{href:!0});var R8t=s(zW);eKo=r(R8t,"TransfoXLForSequenceClassification"),R8t.forEach(t),oKo=r(qqe," (Transformer-XL model)"),qqe.forEach(t),rKo=i(D),wF=n(D,"LI",{});var jqe=s(wF);zbe=n(jqe,"STRONG",{});var P8t=s(zbe);tKo=r(P8t,"xlm"),P8t.forEach(t),aKo=r(jqe," \u2014 "),WW=n(jqe,"A",{href:!0});var B8t=s(WW);nKo=r(B8t,"XLMForSequenceClassification"),B8t.forEach(t),sKo=r(jqe," (XLM model)"),jqe.forEach(t),lKo=i(D),AF=n(D,"LI",{});var Dqe=s(AF);Wbe=n(Dqe,"STRONG",{});var I8t=s(Wbe);iKo=r(I8t,"xlm-roberta"),I8t.forEach(t),dKo=r(Dqe," \u2014 "),QW=n(Dqe,"A",{href:!0});var N8t=s(QW);cKo=r(N8t,"XLMRobertaForSequenceClassification"),N8t.forEach(t),mKo=r(Dqe," (XLM-RoBERTa model)"),Dqe.forEach(t),fKo=i(D),LF=n(D,"LI",{});var Gqe=s(LF);Qbe=n(Gqe,"STRONG",{});var q8t=s(Qbe);gKo=r(q8t,"xlm-roberta-xl"),q8t.forEach(t),hKo=r(Gqe," \u2014 "),UW=n(Gqe,"A",{href:!0});var j8t=s(UW);uKo=r(j8t,"XLMRobertaXLForSequenceClassification"),j8t.forEach(t),pKo=r(Gqe," (XLM-RoBERTa-XL model)"),Gqe.forEach(t),_Ko=i(D),yF=n(D,"LI",{});var Oqe=s(yF);Ube=n(Oqe,"STRONG",{});var D8t=s(Ube);bKo=r(D8t,"xlnet"),D8t.forEach(t),vKo=r(Oqe," \u2014 "),HW=n(Oqe,"A",{href:!0});var G8t=s(HW);FKo=r(G8t,"XLNetForSequenceClassification"),G8t.forEach(t),TKo=r(Oqe," (XLNet model)"),Oqe.forEach(t),MKo=i(D),xF=n(D,"LI",{});var Vqe=s(xF);Hbe=n(Vqe,"STRONG",{});var O8t=s(Hbe);EKo=r(O8t,"yoso"),O8t.forEach(t),CKo=r(Vqe," \u2014 "),JW=n(Vqe,"A",{href:!0});var V8t=s(JW);wKo=r(V8t,"YosoForSequenceClassification"),V8t.forEach(t),AKo=r(Vqe," (YOSO model)"),Vqe.forEach(t),D.forEach(t),LKo=i(ba),$F=n(ba,"P",{});var Xqe=s($F);yKo=r(Xqe,"The model is set in evaluation mode by default using "),Jbe=n(Xqe,"CODE",{});var X8t=s(Jbe);xKo=r(X8t,"model.eval()"),X8t.forEach(t),$Ko=r(Xqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=n(Xqe,"CODE",{});var z8t=s(Ybe);kKo=r(z8t,"model.train()"),z8t.forEach(t),Xqe.forEach(t),SKo=i(ba),T(kF.$$.fragment,ba),ba.forEach(t),vl.forEach(t),sHe=i(m),Fd=n(m,"H2",{class:!0});var pYe=s(Fd);SF=n(pYe,"A",{id:!0,class:!0,href:!0});var W8t=s(SF);Kbe=n(W8t,"SPAN",{});var Q8t=s(Kbe);T(y9.$$.fragment,Q8t),Q8t.forEach(t),W8t.forEach(t),RKo=i(pYe),Zbe=n(pYe,"SPAN",{});var U8t=s(Zbe);PKo=r(U8t,"AutoModelForMultipleChoice"),U8t.forEach(t),pYe.forEach(t),lHe=i(m),qo=n(m,"DIV",{class:!0});var Fl=s(qo);T(x9.$$.fragment,Fl),BKo=i(Fl),Td=n(Fl,"P",{});var Mne=s(Td);IKo=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YW=n(Mne,"A",{href:!0});var H8t=s(YW);NKo=r(H8t,"from_pretrained()"),H8t.forEach(t),qKo=r(Mne," class method or the "),KW=n(Mne,"A",{href:!0});var J8t=s(KW);jKo=r(J8t,"from_config()"),J8t.forEach(t),DKo=r(Mne,` class
method.`),Mne.forEach(t),GKo=i(Fl),$9=n(Fl,"P",{});var _Ye=s($9);OKo=r(_Ye,"This class cannot be instantiated directly using "),eve=n(_Ye,"CODE",{});var Y8t=s(eve);VKo=r(Y8t,"__init__()"),Y8t.forEach(t),XKo=r(_Ye," (throws an error)."),_Ye.forEach(t),zKo=i(Fl),bt=n(Fl,"DIV",{class:!0});var NL=s(bt);T(k9.$$.fragment,NL),WKo=i(NL),ove=n(NL,"P",{});var K8t=s(ove);QKo=r(K8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K8t.forEach(t),UKo=i(NL),Md=n(NL,"P",{});var Ene=s(Md);HKo=r(Ene,`Note:
Loading a model from its configuration file does `),rve=n(Ene,"STRONG",{});var Z8t=s(rve);JKo=r(Z8t,"not"),Z8t.forEach(t),YKo=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(Ene,"A",{href:!0});var e9t=s(ZW);KKo=r(e9t,"from_pretrained()"),e9t.forEach(t),ZKo=r(Ene," to load the model weights."),Ene.forEach(t),eZo=i(NL),T(RF.$$.fragment,NL),NL.forEach(t),oZo=i(Fl),ao=n(Fl,"DIV",{class:!0});var va=s(ao);T(S9.$$.fragment,va),rZo=i(va),tve=n(va,"P",{});var o9t=s(tve);tZo=r(o9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o9t.forEach(t),aZo=i(va),Ha=n(va,"P",{});var qL=s(Ha);nZo=r(qL,"The model class to instantiate is selected based on the "),ave=n(qL,"CODE",{});var r9t=s(ave);sZo=r(r9t,"model_type"),r9t.forEach(t),lZo=r(qL,` property of the config object (either
passed as an argument or loaded from `),nve=n(qL,"CODE",{});var t9t=s(nve);iZo=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),dZo=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(qL,"CODE",{});var a9t=s(sve);cZo=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),mZo=r(qL,":"),qL.forEach(t),fZo=i(va),Z=n(va,"UL",{});var ee=s(Z);PF=n(ee,"LI",{});var zqe=s(PF);lve=n(zqe,"STRONG",{});var n9t=s(lve);gZo=r(n9t,"albert"),n9t.forEach(t),hZo=r(zqe," \u2014 "),eQ=n(zqe,"A",{href:!0});var s9t=s(eQ);uZo=r(s9t,"AlbertForMultipleChoice"),s9t.forEach(t),pZo=r(zqe," (ALBERT model)"),zqe.forEach(t),_Zo=i(ee),BF=n(ee,"LI",{});var Wqe=s(BF);ive=n(Wqe,"STRONG",{});var l9t=s(ive);bZo=r(l9t,"bert"),l9t.forEach(t),vZo=r(Wqe," \u2014 "),oQ=n(Wqe,"A",{href:!0});var i9t=s(oQ);FZo=r(i9t,"BertForMultipleChoice"),i9t.forEach(t),TZo=r(Wqe," (BERT model)"),Wqe.forEach(t),MZo=i(ee),IF=n(ee,"LI",{});var Qqe=s(IF);dve=n(Qqe,"STRONG",{});var d9t=s(dve);EZo=r(d9t,"big_bird"),d9t.forEach(t),CZo=r(Qqe," \u2014 "),rQ=n(Qqe,"A",{href:!0});var c9t=s(rQ);wZo=r(c9t,"BigBirdForMultipleChoice"),c9t.forEach(t),AZo=r(Qqe," (BigBird model)"),Qqe.forEach(t),LZo=i(ee),NF=n(ee,"LI",{});var Uqe=s(NF);cve=n(Uqe,"STRONG",{});var m9t=s(cve);yZo=r(m9t,"camembert"),m9t.forEach(t),xZo=r(Uqe," \u2014 "),tQ=n(Uqe,"A",{href:!0});var f9t=s(tQ);$Zo=r(f9t,"CamembertForMultipleChoice"),f9t.forEach(t),kZo=r(Uqe," (CamemBERT model)"),Uqe.forEach(t),SZo=i(ee),qF=n(ee,"LI",{});var Hqe=s(qF);mve=n(Hqe,"STRONG",{});var g9t=s(mve);RZo=r(g9t,"canine"),g9t.forEach(t),PZo=r(Hqe," \u2014 "),aQ=n(Hqe,"A",{href:!0});var h9t=s(aQ);BZo=r(h9t,"CanineForMultipleChoice"),h9t.forEach(t),IZo=r(Hqe," (CANINE model)"),Hqe.forEach(t),NZo=i(ee),jF=n(ee,"LI",{});var Jqe=s(jF);fve=n(Jqe,"STRONG",{});var u9t=s(fve);qZo=r(u9t,"convbert"),u9t.forEach(t),jZo=r(Jqe," \u2014 "),nQ=n(Jqe,"A",{href:!0});var p9t=s(nQ);DZo=r(p9t,"ConvBertForMultipleChoice"),p9t.forEach(t),GZo=r(Jqe," (ConvBERT model)"),Jqe.forEach(t),OZo=i(ee),DF=n(ee,"LI",{});var Yqe=s(DF);gve=n(Yqe,"STRONG",{});var _9t=s(gve);VZo=r(_9t,"data2vec-text"),_9t.forEach(t),XZo=r(Yqe," \u2014 "),sQ=n(Yqe,"A",{href:!0});var b9t=s(sQ);zZo=r(b9t,"Data2VecTextForMultipleChoice"),b9t.forEach(t),WZo=r(Yqe," (Data2VecText model)"),Yqe.forEach(t),QZo=i(ee),GF=n(ee,"LI",{});var Kqe=s(GF);hve=n(Kqe,"STRONG",{});var v9t=s(hve);UZo=r(v9t,"deberta-v2"),v9t.forEach(t),HZo=r(Kqe," \u2014 "),lQ=n(Kqe,"A",{href:!0});var F9t=s(lQ);JZo=r(F9t,"DebertaV2ForMultipleChoice"),F9t.forEach(t),YZo=r(Kqe," (DeBERTa-v2 model)"),Kqe.forEach(t),KZo=i(ee),OF=n(ee,"LI",{});var Zqe=s(OF);uve=n(Zqe,"STRONG",{});var T9t=s(uve);ZZo=r(T9t,"distilbert"),T9t.forEach(t),eer=r(Zqe," \u2014 "),iQ=n(Zqe,"A",{href:!0});var M9t=s(iQ);oer=r(M9t,"DistilBertForMultipleChoice"),M9t.forEach(t),rer=r(Zqe," (DistilBERT model)"),Zqe.forEach(t),ter=i(ee),VF=n(ee,"LI",{});var eje=s(VF);pve=n(eje,"STRONG",{});var E9t=s(pve);aer=r(E9t,"electra"),E9t.forEach(t),ner=r(eje," \u2014 "),dQ=n(eje,"A",{href:!0});var C9t=s(dQ);ser=r(C9t,"ElectraForMultipleChoice"),C9t.forEach(t),ler=r(eje," (ELECTRA model)"),eje.forEach(t),ier=i(ee),XF=n(ee,"LI",{});var oje=s(XF);_ve=n(oje,"STRONG",{});var w9t=s(_ve);der=r(w9t,"flaubert"),w9t.forEach(t),cer=r(oje," \u2014 "),cQ=n(oje,"A",{href:!0});var A9t=s(cQ);mer=r(A9t,"FlaubertForMultipleChoice"),A9t.forEach(t),fer=r(oje," (FlauBERT model)"),oje.forEach(t),ger=i(ee),zF=n(ee,"LI",{});var rje=s(zF);bve=n(rje,"STRONG",{});var L9t=s(bve);her=r(L9t,"fnet"),L9t.forEach(t),uer=r(rje," \u2014 "),mQ=n(rje,"A",{href:!0});var y9t=s(mQ);per=r(y9t,"FNetForMultipleChoice"),y9t.forEach(t),_er=r(rje," (FNet model)"),rje.forEach(t),ber=i(ee),WF=n(ee,"LI",{});var tje=s(WF);vve=n(tje,"STRONG",{});var x9t=s(vve);ver=r(x9t,"funnel"),x9t.forEach(t),Fer=r(tje," \u2014 "),fQ=n(tje,"A",{href:!0});var $9t=s(fQ);Ter=r($9t,"FunnelForMultipleChoice"),$9t.forEach(t),Mer=r(tje," (Funnel Transformer model)"),tje.forEach(t),Eer=i(ee),QF=n(ee,"LI",{});var aje=s(QF);Fve=n(aje,"STRONG",{});var k9t=s(Fve);Cer=r(k9t,"ibert"),k9t.forEach(t),wer=r(aje," \u2014 "),gQ=n(aje,"A",{href:!0});var S9t=s(gQ);Aer=r(S9t,"IBertForMultipleChoice"),S9t.forEach(t),Ler=r(aje," (I-BERT model)"),aje.forEach(t),yer=i(ee),UF=n(ee,"LI",{});var nje=s(UF);Tve=n(nje,"STRONG",{});var R9t=s(Tve);xer=r(R9t,"longformer"),R9t.forEach(t),$er=r(nje," \u2014 "),hQ=n(nje,"A",{href:!0});var P9t=s(hQ);ker=r(P9t,"LongformerForMultipleChoice"),P9t.forEach(t),Ser=r(nje," (Longformer model)"),nje.forEach(t),Rer=i(ee),HF=n(ee,"LI",{});var sje=s(HF);Mve=n(sje,"STRONG",{});var B9t=s(Mve);Per=r(B9t,"luke"),B9t.forEach(t),Ber=r(sje," \u2014 "),uQ=n(sje,"A",{href:!0});var I9t=s(uQ);Ier=r(I9t,"LukeForMultipleChoice"),I9t.forEach(t),Ner=r(sje," (LUKE model)"),sje.forEach(t),qer=i(ee),JF=n(ee,"LI",{});var lje=s(JF);Eve=n(lje,"STRONG",{});var N9t=s(Eve);jer=r(N9t,"megatron-bert"),N9t.forEach(t),Der=r(lje," \u2014 "),pQ=n(lje,"A",{href:!0});var q9t=s(pQ);Ger=r(q9t,"MegatronBertForMultipleChoice"),q9t.forEach(t),Oer=r(lje," (Megatron-BERT model)"),lje.forEach(t),Ver=i(ee),YF=n(ee,"LI",{});var ije=s(YF);Cve=n(ije,"STRONG",{});var j9t=s(Cve);Xer=r(j9t,"mobilebert"),j9t.forEach(t),zer=r(ije," \u2014 "),_Q=n(ije,"A",{href:!0});var D9t=s(_Q);Wer=r(D9t,"MobileBertForMultipleChoice"),D9t.forEach(t),Qer=r(ije," (MobileBERT model)"),ije.forEach(t),Uer=i(ee),KF=n(ee,"LI",{});var dje=s(KF);wve=n(dje,"STRONG",{});var G9t=s(wve);Her=r(G9t,"mpnet"),G9t.forEach(t),Jer=r(dje," \u2014 "),bQ=n(dje,"A",{href:!0});var O9t=s(bQ);Yer=r(O9t,"MPNetForMultipleChoice"),O9t.forEach(t),Ker=r(dje," (MPNet model)"),dje.forEach(t),Zer=i(ee),ZF=n(ee,"LI",{});var cje=s(ZF);Ave=n(cje,"STRONG",{});var V9t=s(Ave);eor=r(V9t,"nezha"),V9t.forEach(t),oor=r(cje," \u2014 "),vQ=n(cje,"A",{href:!0});var X9t=s(vQ);ror=r(X9t,"NezhaForMultipleChoice"),X9t.forEach(t),tor=r(cje," (Nezha model)"),cje.forEach(t),aor=i(ee),eT=n(ee,"LI",{});var mje=s(eT);Lve=n(mje,"STRONG",{});var z9t=s(Lve);nor=r(z9t,"nystromformer"),z9t.forEach(t),sor=r(mje," \u2014 "),FQ=n(mje,"A",{href:!0});var W9t=s(FQ);lor=r(W9t,"NystromformerForMultipleChoice"),W9t.forEach(t),ior=r(mje," (Nystr\xF6mformer model)"),mje.forEach(t),dor=i(ee),oT=n(ee,"LI",{});var fje=s(oT);yve=n(fje,"STRONG",{});var Q9t=s(yve);cor=r(Q9t,"qdqbert"),Q9t.forEach(t),mor=r(fje," \u2014 "),TQ=n(fje,"A",{href:!0});var U9t=s(TQ);gor=r(U9t,"QDQBertForMultipleChoice"),U9t.forEach(t),hor=r(fje," (QDQBert model)"),fje.forEach(t),uor=i(ee),rT=n(ee,"LI",{});var gje=s(rT);xve=n(gje,"STRONG",{});var H9t=s(xve);por=r(H9t,"rembert"),H9t.forEach(t),_or=r(gje," \u2014 "),MQ=n(gje,"A",{href:!0});var J9t=s(MQ);bor=r(J9t,"RemBertForMultipleChoice"),J9t.forEach(t),vor=r(gje," (RemBERT model)"),gje.forEach(t),For=i(ee),tT=n(ee,"LI",{});var hje=s(tT);$ve=n(hje,"STRONG",{});var Y9t=s($ve);Tor=r(Y9t,"roberta"),Y9t.forEach(t),Mor=r(hje," \u2014 "),EQ=n(hje,"A",{href:!0});var K9t=s(EQ);Eor=r(K9t,"RobertaForMultipleChoice"),K9t.forEach(t),Cor=r(hje," (RoBERTa model)"),hje.forEach(t),wor=i(ee),aT=n(ee,"LI",{});var uje=s(aT);kve=n(uje,"STRONG",{});var Z9t=s(kve);Aor=r(Z9t,"roformer"),Z9t.forEach(t),Lor=r(uje," \u2014 "),CQ=n(uje,"A",{href:!0});var ext=s(CQ);yor=r(ext,"RoFormerForMultipleChoice"),ext.forEach(t),xor=r(uje," (RoFormer model)"),uje.forEach(t),$or=i(ee),nT=n(ee,"LI",{});var pje=s(nT);Sve=n(pje,"STRONG",{});var oxt=s(Sve);kor=r(oxt,"squeezebert"),oxt.forEach(t),Sor=r(pje," \u2014 "),wQ=n(pje,"A",{href:!0});var rxt=s(wQ);Ror=r(rxt,"SqueezeBertForMultipleChoice"),rxt.forEach(t),Por=r(pje," (SqueezeBERT model)"),pje.forEach(t),Bor=i(ee),sT=n(ee,"LI",{});var _je=s(sT);Rve=n(_je,"STRONG",{});var txt=s(Rve);Ior=r(txt,"xlm"),txt.forEach(t),Nor=r(_je," \u2014 "),AQ=n(_je,"A",{href:!0});var axt=s(AQ);qor=r(axt,"XLMForMultipleChoice"),axt.forEach(t),jor=r(_je," (XLM model)"),_je.forEach(t),Dor=i(ee),lT=n(ee,"LI",{});var bje=s(lT);Pve=n(bje,"STRONG",{});var nxt=s(Pve);Gor=r(nxt,"xlm-roberta"),nxt.forEach(t),Oor=r(bje," \u2014 "),LQ=n(bje,"A",{href:!0});var sxt=s(LQ);Vor=r(sxt,"XLMRobertaForMultipleChoice"),sxt.forEach(t),Xor=r(bje," (XLM-RoBERTa model)"),bje.forEach(t),zor=i(ee),iT=n(ee,"LI",{});var vje=s(iT);Bve=n(vje,"STRONG",{});var lxt=s(Bve);Wor=r(lxt,"xlm-roberta-xl"),lxt.forEach(t),Qor=r(vje," \u2014 "),yQ=n(vje,"A",{href:!0});var ixt=s(yQ);Uor=r(ixt,"XLMRobertaXLForMultipleChoice"),ixt.forEach(t),Hor=r(vje," (XLM-RoBERTa-XL model)"),vje.forEach(t),Jor=i(ee),dT=n(ee,"LI",{});var Fje=s(dT);Ive=n(Fje,"STRONG",{});var dxt=s(Ive);Yor=r(dxt,"xlnet"),dxt.forEach(t),Kor=r(Fje," \u2014 "),xQ=n(Fje,"A",{href:!0});var cxt=s(xQ);Zor=r(cxt,"XLNetForMultipleChoice"),cxt.forEach(t),err=r(Fje," (XLNet model)"),Fje.forEach(t),orr=i(ee),cT=n(ee,"LI",{});var Tje=s(cT);Nve=n(Tje,"STRONG",{});var mxt=s(Nve);rrr=r(mxt,"yoso"),mxt.forEach(t),trr=r(Tje," \u2014 "),$Q=n(Tje,"A",{href:!0});var fxt=s($Q);arr=r(fxt,"YosoForMultipleChoice"),fxt.forEach(t),nrr=r(Tje," (YOSO model)"),Tje.forEach(t),ee.forEach(t),srr=i(va),mT=n(va,"P",{});var Mje=s(mT);lrr=r(Mje,"The model is set in evaluation mode by default using "),qve=n(Mje,"CODE",{});var gxt=s(qve);irr=r(gxt,"model.eval()"),gxt.forEach(t),drr=r(Mje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=n(Mje,"CODE",{});var hxt=s(jve);crr=r(hxt,"model.train()"),hxt.forEach(t),Mje.forEach(t),mrr=i(va),T(fT.$$.fragment,va),va.forEach(t),Fl.forEach(t),iHe=i(m),Ed=n(m,"H2",{class:!0});var bYe=s(Ed);gT=n(bYe,"A",{id:!0,class:!0,href:!0});var uxt=s(gT);Dve=n(uxt,"SPAN",{});var pxt=s(Dve);T(R9.$$.fragment,pxt),pxt.forEach(t),uxt.forEach(t),frr=i(bYe),Gve=n(bYe,"SPAN",{});var _xt=s(Gve);grr=r(_xt,"AutoModelForNextSentencePrediction"),_xt.forEach(t),bYe.forEach(t),dHe=i(m),jo=n(m,"DIV",{class:!0});var Tl=s(jo);T(P9.$$.fragment,Tl),hrr=i(Tl),Cd=n(Tl,"P",{});var Cne=s(Cd);urr=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kQ=n(Cne,"A",{href:!0});var bxt=s(kQ);prr=r(bxt,"from_pretrained()"),bxt.forEach(t),_rr=r(Cne," class method or the "),SQ=n(Cne,"A",{href:!0});var vxt=s(SQ);brr=r(vxt,"from_config()"),vxt.forEach(t),vrr=r(Cne,` class
method.`),Cne.forEach(t),Frr=i(Tl),B9=n(Tl,"P",{});var vYe=s(B9);Trr=r(vYe,"This class cannot be instantiated directly using "),Ove=n(vYe,"CODE",{});var Fxt=s(Ove);Mrr=r(Fxt,"__init__()"),Fxt.forEach(t),Err=r(vYe," (throws an error)."),vYe.forEach(t),Crr=i(Tl),vt=n(Tl,"DIV",{class:!0});var jL=s(vt);T(I9.$$.fragment,jL),wrr=i(jL),Vve=n(jL,"P",{});var Txt=s(Vve);Arr=r(Txt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Txt.forEach(t),Lrr=i(jL),wd=n(jL,"P",{});var wne=s(wd);yrr=r(wne,`Note:
Loading a model from its configuration file does `),Xve=n(wne,"STRONG",{});var Mxt=s(Xve);xrr=r(Mxt,"not"),Mxt.forEach(t),$rr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(wne,"A",{href:!0});var Ext=s(RQ);krr=r(Ext,"from_pretrained()"),Ext.forEach(t),Srr=r(wne," to load the model weights."),wne.forEach(t),Rrr=i(jL),T(hT.$$.fragment,jL),jL.forEach(t),Prr=i(Tl),no=n(Tl,"DIV",{class:!0});var Fa=s(no);T(N9.$$.fragment,Fa),Brr=i(Fa),zve=n(Fa,"P",{});var Cxt=s(zve);Irr=r(Cxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cxt.forEach(t),Nrr=i(Fa),Ja=n(Fa,"P",{});var DL=s(Ja);qrr=r(DL,"The model class to instantiate is selected based on the "),Wve=n(DL,"CODE",{});var wxt=s(Wve);jrr=r(wxt,"model_type"),wxt.forEach(t),Drr=r(DL,` property of the config object (either
passed as an argument or loaded from `),Qve=n(DL,"CODE",{});var Axt=s(Qve);Grr=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),Orr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(DL,"CODE",{});var Lxt=s(Uve);Vrr=r(Lxt,"pretrained_model_name_or_path"),Lxt.forEach(t),Xrr=r(DL,":"),DL.forEach(t),zrr=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);uT=n(Ta,"LI",{});var Eje=s(uT);Hve=n(Eje,"STRONG",{});var yxt=s(Hve);Wrr=r(yxt,"bert"),yxt.forEach(t),Qrr=r(Eje," \u2014 "),PQ=n(Eje,"A",{href:!0});var xxt=s(PQ);Urr=r(xxt,"BertForNextSentencePrediction"),xxt.forEach(t),Hrr=r(Eje," (BERT model)"),Eje.forEach(t),Jrr=i(Ta),pT=n(Ta,"LI",{});var Cje=s(pT);Jve=n(Cje,"STRONG",{});var $xt=s(Jve);Yrr=r($xt,"fnet"),$xt.forEach(t),Krr=r(Cje," \u2014 "),BQ=n(Cje,"A",{href:!0});var kxt=s(BQ);Zrr=r(kxt,"FNetForNextSentencePrediction"),kxt.forEach(t),etr=r(Cje," (FNet model)"),Cje.forEach(t),otr=i(Ta),_T=n(Ta,"LI",{});var wje=s(_T);Yve=n(wje,"STRONG",{});var Sxt=s(Yve);rtr=r(Sxt,"megatron-bert"),Sxt.forEach(t),ttr=r(wje," \u2014 "),IQ=n(wje,"A",{href:!0});var Rxt=s(IQ);atr=r(Rxt,"MegatronBertForNextSentencePrediction"),Rxt.forEach(t),ntr=r(wje," (Megatron-BERT model)"),wje.forEach(t),str=i(Ta),bT=n(Ta,"LI",{});var Aje=s(bT);Kve=n(Aje,"STRONG",{});var Pxt=s(Kve);ltr=r(Pxt,"mobilebert"),Pxt.forEach(t),itr=r(Aje," \u2014 "),NQ=n(Aje,"A",{href:!0});var Bxt=s(NQ);dtr=r(Bxt,"MobileBertForNextSentencePrediction"),Bxt.forEach(t),ctr=r(Aje," (MobileBERT model)"),Aje.forEach(t),mtr=i(Ta),vT=n(Ta,"LI",{});var Lje=s(vT);Zve=n(Lje,"STRONG",{});var Ixt=s(Zve);ftr=r(Ixt,"nezha"),Ixt.forEach(t),gtr=r(Lje," \u2014 "),qQ=n(Lje,"A",{href:!0});var Nxt=s(qQ);htr=r(Nxt,"NezhaForNextSentencePrediction"),Nxt.forEach(t),utr=r(Lje," (Nezha model)"),Lje.forEach(t),ptr=i(Ta),FT=n(Ta,"LI",{});var yje=s(FT);e1e=n(yje,"STRONG",{});var qxt=s(e1e);_tr=r(qxt,"qdqbert"),qxt.forEach(t),btr=r(yje," \u2014 "),jQ=n(yje,"A",{href:!0});var jxt=s(jQ);vtr=r(jxt,"QDQBertForNextSentencePrediction"),jxt.forEach(t),Ftr=r(yje," (QDQBert model)"),yje.forEach(t),Ta.forEach(t),Ttr=i(Fa),TT=n(Fa,"P",{});var xje=s(TT);Mtr=r(xje,"The model is set in evaluation mode by default using "),o1e=n(xje,"CODE",{});var Dxt=s(o1e);Etr=r(Dxt,"model.eval()"),Dxt.forEach(t),Ctr=r(xje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=n(xje,"CODE",{});var Gxt=s(r1e);wtr=r(Gxt,"model.train()"),Gxt.forEach(t),xje.forEach(t),Atr=i(Fa),T(MT.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),cHe=i(m),Ad=n(m,"H2",{class:!0});var FYe=s(Ad);ET=n(FYe,"A",{id:!0,class:!0,href:!0});var Oxt=s(ET);t1e=n(Oxt,"SPAN",{});var Vxt=s(t1e);T(q9.$$.fragment,Vxt),Vxt.forEach(t),Oxt.forEach(t),Ltr=i(FYe),a1e=n(FYe,"SPAN",{});var Xxt=s(a1e);ytr=r(Xxt,"AutoModelForTokenClassification"),Xxt.forEach(t),FYe.forEach(t),mHe=i(m),Go=n(m,"DIV",{class:!0});var Ml=s(Go);T(j9.$$.fragment,Ml),xtr=i(Ml),Ld=n(Ml,"P",{});var Ane=s(Ld);$tr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DQ=n(Ane,"A",{href:!0});var zxt=s(DQ);ktr=r(zxt,"from_pretrained()"),zxt.forEach(t),Str=r(Ane," class method or the "),GQ=n(Ane,"A",{href:!0});var Wxt=s(GQ);Rtr=r(Wxt,"from_config()"),Wxt.forEach(t),Ptr=r(Ane,` class
method.`),Ane.forEach(t),Btr=i(Ml),D9=n(Ml,"P",{});var TYe=s(D9);Itr=r(TYe,"This class cannot be instantiated directly using "),n1e=n(TYe,"CODE",{});var Qxt=s(n1e);Ntr=r(Qxt,"__init__()"),Qxt.forEach(t),qtr=r(TYe," (throws an error)."),TYe.forEach(t),jtr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var GL=s(Ft);T(G9.$$.fragment,GL),Dtr=i(GL),s1e=n(GL,"P",{});var Uxt=s(s1e);Gtr=r(Uxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Uxt.forEach(t),Otr=i(GL),yd=n(GL,"P",{});var Lne=s(yd);Vtr=r(Lne,`Note:
Loading a model from its configuration file does `),l1e=n(Lne,"STRONG",{});var Hxt=s(l1e);Xtr=r(Hxt,"not"),Hxt.forEach(t),ztr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(Lne,"A",{href:!0});var Jxt=s(OQ);Wtr=r(Jxt,"from_pretrained()"),Jxt.forEach(t),Qtr=r(Lne," to load the model weights."),Lne.forEach(t),Utr=i(GL),T(CT.$$.fragment,GL),GL.forEach(t),Htr=i(Ml),so=n(Ml,"DIV",{class:!0});var Ma=s(so);T(O9.$$.fragment,Ma),Jtr=i(Ma),i1e=n(Ma,"P",{});var Yxt=s(i1e);Ytr=r(Yxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yxt.forEach(t),Ktr=i(Ma),Ya=n(Ma,"P",{});var OL=s(Ya);Ztr=r(OL,"The model class to instantiate is selected based on the "),d1e=n(OL,"CODE",{});var Kxt=s(d1e);ear=r(Kxt,"model_type"),Kxt.forEach(t),oar=r(OL,` property of the config object (either
passed as an argument or loaded from `),c1e=n(OL,"CODE",{});var Zxt=s(c1e);rar=r(Zxt,"pretrained_model_name_or_path"),Zxt.forEach(t),tar=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(OL,"CODE",{});var e$t=s(m1e);aar=r(e$t,"pretrained_model_name_or_path"),e$t.forEach(t),nar=r(OL,":"),OL.forEach(t),sar=i(Ma),H=n(Ma,"UL",{});var K=s(H);wT=n(K,"LI",{});var $je=s(wT);f1e=n($je,"STRONG",{});var o$t=s(f1e);lar=r(o$t,"albert"),o$t.forEach(t),iar=r($je," \u2014 "),VQ=n($je,"A",{href:!0});var r$t=s(VQ);dar=r(r$t,"AlbertForTokenClassification"),r$t.forEach(t),car=r($je," (ALBERT model)"),$je.forEach(t),mar=i(K),AT=n(K,"LI",{});var kje=s(AT);g1e=n(kje,"STRONG",{});var t$t=s(g1e);far=r(t$t,"bert"),t$t.forEach(t),gar=r(kje," \u2014 "),XQ=n(kje,"A",{href:!0});var a$t=s(XQ);har=r(a$t,"BertForTokenClassification"),a$t.forEach(t),uar=r(kje," (BERT model)"),kje.forEach(t),par=i(K),LT=n(K,"LI",{});var Sje=s(LT);h1e=n(Sje,"STRONG",{});var n$t=s(h1e);_ar=r(n$t,"big_bird"),n$t.forEach(t),bar=r(Sje," \u2014 "),zQ=n(Sje,"A",{href:!0});var s$t=s(zQ);Far=r(s$t,"BigBirdForTokenClassification"),s$t.forEach(t),Tar=r(Sje," (BigBird model)"),Sje.forEach(t),Mar=i(K),yT=n(K,"LI",{});var Rje=s(yT);u1e=n(Rje,"STRONG",{});var l$t=s(u1e);Ear=r(l$t,"bloom"),l$t.forEach(t),Car=r(Rje," \u2014 "),WQ=n(Rje,"A",{href:!0});var i$t=s(WQ);war=r(i$t,"BloomForTokenClassification"),i$t.forEach(t),Aar=r(Rje," (BLOOM model)"),Rje.forEach(t),Lar=i(K),xT=n(K,"LI",{});var Pje=s(xT);p1e=n(Pje,"STRONG",{});var d$t=s(p1e);yar=r(d$t,"camembert"),d$t.forEach(t),xar=r(Pje," \u2014 "),QQ=n(Pje,"A",{href:!0});var c$t=s(QQ);$ar=r(c$t,"CamembertForTokenClassification"),c$t.forEach(t),kar=r(Pje," (CamemBERT model)"),Pje.forEach(t),Sar=i(K),$T=n(K,"LI",{});var Bje=s($T);_1e=n(Bje,"STRONG",{});var m$t=s(_1e);Rar=r(m$t,"canine"),m$t.forEach(t),Par=r(Bje," \u2014 "),UQ=n(Bje,"A",{href:!0});var f$t=s(UQ);Bar=r(f$t,"CanineForTokenClassification"),f$t.forEach(t),Iar=r(Bje," (CANINE model)"),Bje.forEach(t),Nar=i(K),kT=n(K,"LI",{});var Ije=s(kT);b1e=n(Ije,"STRONG",{});var g$t=s(b1e);qar=r(g$t,"convbert"),g$t.forEach(t),jar=r(Ije," \u2014 "),HQ=n(Ije,"A",{href:!0});var h$t=s(HQ);Dar=r(h$t,"ConvBertForTokenClassification"),h$t.forEach(t),Gar=r(Ije," (ConvBERT model)"),Ije.forEach(t),Oar=i(K),ST=n(K,"LI",{});var Nje=s(ST);v1e=n(Nje,"STRONG",{});var u$t=s(v1e);Var=r(u$t,"data2vec-text"),u$t.forEach(t),Xar=r(Nje," \u2014 "),JQ=n(Nje,"A",{href:!0});var p$t=s(JQ);zar=r(p$t,"Data2VecTextForTokenClassification"),p$t.forEach(t),War=r(Nje," (Data2VecText model)"),Nje.forEach(t),Qar=i(K),RT=n(K,"LI",{});var qje=s(RT);F1e=n(qje,"STRONG",{});var _$t=s(F1e);Uar=r(_$t,"deberta"),_$t.forEach(t),Har=r(qje," \u2014 "),YQ=n(qje,"A",{href:!0});var b$t=s(YQ);Jar=r(b$t,"DebertaForTokenClassification"),b$t.forEach(t),Yar=r(qje," (DeBERTa model)"),qje.forEach(t),Kar=i(K),PT=n(K,"LI",{});var jje=s(PT);T1e=n(jje,"STRONG",{});var v$t=s(T1e);Zar=r(v$t,"deberta-v2"),v$t.forEach(t),enr=r(jje," \u2014 "),KQ=n(jje,"A",{href:!0});var F$t=s(KQ);onr=r(F$t,"DebertaV2ForTokenClassification"),F$t.forEach(t),rnr=r(jje," (DeBERTa-v2 model)"),jje.forEach(t),tnr=i(K),BT=n(K,"LI",{});var Dje=s(BT);M1e=n(Dje,"STRONG",{});var T$t=s(M1e);anr=r(T$t,"distilbert"),T$t.forEach(t),nnr=r(Dje," \u2014 "),ZQ=n(Dje,"A",{href:!0});var M$t=s(ZQ);snr=r(M$t,"DistilBertForTokenClassification"),M$t.forEach(t),lnr=r(Dje," (DistilBERT model)"),Dje.forEach(t),inr=i(K),IT=n(K,"LI",{});var Gje=s(IT);E1e=n(Gje,"STRONG",{});var E$t=s(E1e);dnr=r(E$t,"electra"),E$t.forEach(t),cnr=r(Gje," \u2014 "),eU=n(Gje,"A",{href:!0});var C$t=s(eU);mnr=r(C$t,"ElectraForTokenClassification"),C$t.forEach(t),fnr=r(Gje," (ELECTRA model)"),Gje.forEach(t),gnr=i(K),NT=n(K,"LI",{});var Oje=s(NT);C1e=n(Oje,"STRONG",{});var w$t=s(C1e);hnr=r(w$t,"flaubert"),w$t.forEach(t),unr=r(Oje," \u2014 "),oU=n(Oje,"A",{href:!0});var A$t=s(oU);pnr=r(A$t,"FlaubertForTokenClassification"),A$t.forEach(t),_nr=r(Oje," (FlauBERT model)"),Oje.forEach(t),bnr=i(K),qT=n(K,"LI",{});var Vje=s(qT);w1e=n(Vje,"STRONG",{});var L$t=s(w1e);vnr=r(L$t,"fnet"),L$t.forEach(t),Fnr=r(Vje," \u2014 "),rU=n(Vje,"A",{href:!0});var y$t=s(rU);Tnr=r(y$t,"FNetForTokenClassification"),y$t.forEach(t),Mnr=r(Vje," (FNet model)"),Vje.forEach(t),Enr=i(K),jT=n(K,"LI",{});var Xje=s(jT);A1e=n(Xje,"STRONG",{});var x$t=s(A1e);Cnr=r(x$t,"funnel"),x$t.forEach(t),wnr=r(Xje," \u2014 "),tU=n(Xje,"A",{href:!0});var $$t=s(tU);Anr=r($$t,"FunnelForTokenClassification"),$$t.forEach(t),Lnr=r(Xje," (Funnel Transformer model)"),Xje.forEach(t),ynr=i(K),DT=n(K,"LI",{});var zje=s(DT);L1e=n(zje,"STRONG",{});var k$t=s(L1e);xnr=r(k$t,"gpt2"),k$t.forEach(t),$nr=r(zje," \u2014 "),aU=n(zje,"A",{href:!0});var S$t=s(aU);knr=r(S$t,"GPT2ForTokenClassification"),S$t.forEach(t),Snr=r(zje," (OpenAI GPT-2 model)"),zje.forEach(t),Rnr=i(K),GT=n(K,"LI",{});var Wje=s(GT);y1e=n(Wje,"STRONG",{});var R$t=s(y1e);Pnr=r(R$t,"ibert"),R$t.forEach(t),Bnr=r(Wje," \u2014 "),nU=n(Wje,"A",{href:!0});var P$t=s(nU);Inr=r(P$t,"IBertForTokenClassification"),P$t.forEach(t),Nnr=r(Wje," (I-BERT model)"),Wje.forEach(t),qnr=i(K),OT=n(K,"LI",{});var Qje=s(OT);x1e=n(Qje,"STRONG",{});var B$t=s(x1e);jnr=r(B$t,"layoutlm"),B$t.forEach(t),Dnr=r(Qje," \u2014 "),sU=n(Qje,"A",{href:!0});var I$t=s(sU);Gnr=r(I$t,"LayoutLMForTokenClassification"),I$t.forEach(t),Onr=r(Qje," (LayoutLM model)"),Qje.forEach(t),Vnr=i(K),VT=n(K,"LI",{});var Uje=s(VT);$1e=n(Uje,"STRONG",{});var N$t=s($1e);Xnr=r(N$t,"layoutlmv2"),N$t.forEach(t),znr=r(Uje," \u2014 "),lU=n(Uje,"A",{href:!0});var q$t=s(lU);Wnr=r(q$t,"LayoutLMv2ForTokenClassification"),q$t.forEach(t),Qnr=r(Uje," (LayoutLMv2 model)"),Uje.forEach(t),Unr=i(K),XT=n(K,"LI",{});var Hje=s(XT);k1e=n(Hje,"STRONG",{});var j$t=s(k1e);Hnr=r(j$t,"layoutlmv3"),j$t.forEach(t),Jnr=r(Hje," \u2014 "),iU=n(Hje,"A",{href:!0});var D$t=s(iU);Ynr=r(D$t,"LayoutLMv3ForTokenClassification"),D$t.forEach(t),Knr=r(Hje," (LayoutLMv3 model)"),Hje.forEach(t),Znr=i(K),zT=n(K,"LI",{});var Jje=s(zT);S1e=n(Jje,"STRONG",{});var G$t=s(S1e);esr=r(G$t,"longformer"),G$t.forEach(t),osr=r(Jje," \u2014 "),dU=n(Jje,"A",{href:!0});var O$t=s(dU);rsr=r(O$t,"LongformerForTokenClassification"),O$t.forEach(t),tsr=r(Jje," (Longformer model)"),Jje.forEach(t),asr=i(K),WT=n(K,"LI",{});var Yje=s(WT);R1e=n(Yje,"STRONG",{});var V$t=s(R1e);nsr=r(V$t,"luke"),V$t.forEach(t),ssr=r(Yje," \u2014 "),cU=n(Yje,"A",{href:!0});var X$t=s(cU);lsr=r(X$t,"LukeForTokenClassification"),X$t.forEach(t),isr=r(Yje," (LUKE model)"),Yje.forEach(t),dsr=i(K),QT=n(K,"LI",{});var Kje=s(QT);P1e=n(Kje,"STRONG",{});var z$t=s(P1e);csr=r(z$t,"megatron-bert"),z$t.forEach(t),msr=r(Kje," \u2014 "),mU=n(Kje,"A",{href:!0});var W$t=s(mU);fsr=r(W$t,"MegatronBertForTokenClassification"),W$t.forEach(t),gsr=r(Kje," (Megatron-BERT model)"),Kje.forEach(t),hsr=i(K),UT=n(K,"LI",{});var Zje=s(UT);B1e=n(Zje,"STRONG",{});var Q$t=s(B1e);usr=r(Q$t,"mobilebert"),Q$t.forEach(t),psr=r(Zje," \u2014 "),fU=n(Zje,"A",{href:!0});var U$t=s(fU);_sr=r(U$t,"MobileBertForTokenClassification"),U$t.forEach(t),bsr=r(Zje," (MobileBERT model)"),Zje.forEach(t),vsr=i(K),HT=n(K,"LI",{});var eDe=s(HT);I1e=n(eDe,"STRONG",{});var H$t=s(I1e);Fsr=r(H$t,"mpnet"),H$t.forEach(t),Tsr=r(eDe," \u2014 "),gU=n(eDe,"A",{href:!0});var J$t=s(gU);Msr=r(J$t,"MPNetForTokenClassification"),J$t.forEach(t),Esr=r(eDe," (MPNet model)"),eDe.forEach(t),Csr=i(K),JT=n(K,"LI",{});var oDe=s(JT);N1e=n(oDe,"STRONG",{});var Y$t=s(N1e);wsr=r(Y$t,"nezha"),Y$t.forEach(t),Asr=r(oDe," \u2014 "),hU=n(oDe,"A",{href:!0});var K$t=s(hU);Lsr=r(K$t,"NezhaForTokenClassification"),K$t.forEach(t),ysr=r(oDe," (Nezha model)"),oDe.forEach(t),xsr=i(K),YT=n(K,"LI",{});var rDe=s(YT);q1e=n(rDe,"STRONG",{});var Z$t=s(q1e);$sr=r(Z$t,"nystromformer"),Z$t.forEach(t),ksr=r(rDe," \u2014 "),uU=n(rDe,"A",{href:!0});var ekt=s(uU);Ssr=r(ekt,"NystromformerForTokenClassification"),ekt.forEach(t),Rsr=r(rDe," (Nystr\xF6mformer model)"),rDe.forEach(t),Psr=i(K),KT=n(K,"LI",{});var tDe=s(KT);j1e=n(tDe,"STRONG",{});var okt=s(j1e);Bsr=r(okt,"qdqbert"),okt.forEach(t),Isr=r(tDe," \u2014 "),pU=n(tDe,"A",{href:!0});var rkt=s(pU);Nsr=r(rkt,"QDQBertForTokenClassification"),rkt.forEach(t),qsr=r(tDe," (QDQBert model)"),tDe.forEach(t),jsr=i(K),ZT=n(K,"LI",{});var aDe=s(ZT);D1e=n(aDe,"STRONG",{});var tkt=s(D1e);Dsr=r(tkt,"rembert"),tkt.forEach(t),Gsr=r(aDe," \u2014 "),_U=n(aDe,"A",{href:!0});var akt=s(_U);Osr=r(akt,"RemBertForTokenClassification"),akt.forEach(t),Vsr=r(aDe," (RemBERT model)"),aDe.forEach(t),Xsr=i(K),eM=n(K,"LI",{});var nDe=s(eM);G1e=n(nDe,"STRONG",{});var nkt=s(G1e);zsr=r(nkt,"roberta"),nkt.forEach(t),Wsr=r(nDe," \u2014 "),bU=n(nDe,"A",{href:!0});var skt=s(bU);Qsr=r(skt,"RobertaForTokenClassification"),skt.forEach(t),Usr=r(nDe," (RoBERTa model)"),nDe.forEach(t),Hsr=i(K),oM=n(K,"LI",{});var sDe=s(oM);O1e=n(sDe,"STRONG",{});var lkt=s(O1e);Jsr=r(lkt,"roformer"),lkt.forEach(t),Ysr=r(sDe," \u2014 "),vU=n(sDe,"A",{href:!0});var ikt=s(vU);Ksr=r(ikt,"RoFormerForTokenClassification"),ikt.forEach(t),Zsr=r(sDe," (RoFormer model)"),sDe.forEach(t),elr=i(K),rM=n(K,"LI",{});var lDe=s(rM);V1e=n(lDe,"STRONG",{});var dkt=s(V1e);olr=r(dkt,"squeezebert"),dkt.forEach(t),rlr=r(lDe," \u2014 "),FU=n(lDe,"A",{href:!0});var ckt=s(FU);tlr=r(ckt,"SqueezeBertForTokenClassification"),ckt.forEach(t),alr=r(lDe," (SqueezeBERT model)"),lDe.forEach(t),nlr=i(K),tM=n(K,"LI",{});var iDe=s(tM);X1e=n(iDe,"STRONG",{});var mkt=s(X1e);slr=r(mkt,"xlm"),mkt.forEach(t),llr=r(iDe," \u2014 "),TU=n(iDe,"A",{href:!0});var fkt=s(TU);ilr=r(fkt,"XLMForTokenClassification"),fkt.forEach(t),dlr=r(iDe," (XLM model)"),iDe.forEach(t),clr=i(K),aM=n(K,"LI",{});var dDe=s(aM);z1e=n(dDe,"STRONG",{});var gkt=s(z1e);mlr=r(gkt,"xlm-roberta"),gkt.forEach(t),flr=r(dDe," \u2014 "),MU=n(dDe,"A",{href:!0});var hkt=s(MU);glr=r(hkt,"XLMRobertaForTokenClassification"),hkt.forEach(t),hlr=r(dDe," (XLM-RoBERTa model)"),dDe.forEach(t),ulr=i(K),nM=n(K,"LI",{});var cDe=s(nM);W1e=n(cDe,"STRONG",{});var ukt=s(W1e);plr=r(ukt,"xlm-roberta-xl"),ukt.forEach(t),_lr=r(cDe," \u2014 "),EU=n(cDe,"A",{href:!0});var pkt=s(EU);blr=r(pkt,"XLMRobertaXLForTokenClassification"),pkt.forEach(t),vlr=r(cDe," (XLM-RoBERTa-XL model)"),cDe.forEach(t),Flr=i(K),sM=n(K,"LI",{});var mDe=s(sM);Q1e=n(mDe,"STRONG",{});var _kt=s(Q1e);Tlr=r(_kt,"xlnet"),_kt.forEach(t),Mlr=r(mDe," \u2014 "),CU=n(mDe,"A",{href:!0});var bkt=s(CU);Elr=r(bkt,"XLNetForTokenClassification"),bkt.forEach(t),Clr=r(mDe," (XLNet model)"),mDe.forEach(t),wlr=i(K),lM=n(K,"LI",{});var fDe=s(lM);U1e=n(fDe,"STRONG",{});var vkt=s(U1e);Alr=r(vkt,"yoso"),vkt.forEach(t),Llr=r(fDe," \u2014 "),wU=n(fDe,"A",{href:!0});var Fkt=s(wU);ylr=r(Fkt,"YosoForTokenClassification"),Fkt.forEach(t),xlr=r(fDe," (YOSO model)"),fDe.forEach(t),K.forEach(t),$lr=i(Ma),iM=n(Ma,"P",{});var gDe=s(iM);klr=r(gDe,"The model is set in evaluation mode by default using "),H1e=n(gDe,"CODE",{});var Tkt=s(H1e);Slr=r(Tkt,"model.eval()"),Tkt.forEach(t),Rlr=r(gDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=n(gDe,"CODE",{});var Mkt=s(J1e);Plr=r(Mkt,"model.train()"),Mkt.forEach(t),gDe.forEach(t),Blr=i(Ma),T(dM.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),fHe=i(m),xd=n(m,"H2",{class:!0});var MYe=s(xd);cM=n(MYe,"A",{id:!0,class:!0,href:!0});var Ekt=s(cM);Y1e=n(Ekt,"SPAN",{});var Ckt=s(Y1e);T(V9.$$.fragment,Ckt),Ckt.forEach(t),Ekt.forEach(t),Ilr=i(MYe),K1e=n(MYe,"SPAN",{});var wkt=s(K1e);Nlr=r(wkt,"AutoModelForQuestionAnswering"),wkt.forEach(t),MYe.forEach(t),gHe=i(m),Oo=n(m,"DIV",{class:!0});var El=s(Oo);T(X9.$$.fragment,El),qlr=i(El),$d=n(El,"P",{});var yne=s($d);jlr=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AU=n(yne,"A",{href:!0});var Akt=s(AU);Dlr=r(Akt,"from_pretrained()"),Akt.forEach(t),Glr=r(yne," class method or the "),LU=n(yne,"A",{href:!0});var Lkt=s(LU);Olr=r(Lkt,"from_config()"),Lkt.forEach(t),Vlr=r(yne,` class
method.`),yne.forEach(t),Xlr=i(El),z9=n(El,"P",{});var EYe=s(z9);zlr=r(EYe,"This class cannot be instantiated directly using "),Z1e=n(EYe,"CODE",{});var ykt=s(Z1e);Wlr=r(ykt,"__init__()"),ykt.forEach(t),Qlr=r(EYe," (throws an error)."),EYe.forEach(t),Ulr=i(El),Tt=n(El,"DIV",{class:!0});var VL=s(Tt);T(W9.$$.fragment,VL),Hlr=i(VL),eFe=n(VL,"P",{});var xkt=s(eFe);Jlr=r(xkt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xkt.forEach(t),Ylr=i(VL),kd=n(VL,"P",{});var xne=s(kd);Klr=r(xne,`Note:
Loading a model from its configuration file does `),oFe=n(xne,"STRONG",{});var $kt=s(oFe);Zlr=r($kt,"not"),$kt.forEach(t),eir=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(xne,"A",{href:!0});var kkt=s(yU);oir=r(kkt,"from_pretrained()"),kkt.forEach(t),rir=r(xne," to load the model weights."),xne.forEach(t),tir=i(VL),T(mM.$$.fragment,VL),VL.forEach(t),air=i(El),lo=n(El,"DIV",{class:!0});var Ea=s(lo);T(Q9.$$.fragment,Ea),nir=i(Ea),rFe=n(Ea,"P",{});var Skt=s(rFe);sir=r(Skt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Skt.forEach(t),lir=i(Ea),Ka=n(Ea,"P",{});var XL=s(Ka);iir=r(XL,"The model class to instantiate is selected based on the "),tFe=n(XL,"CODE",{});var Rkt=s(tFe);dir=r(Rkt,"model_type"),Rkt.forEach(t),cir=r(XL,` property of the config object (either
passed as an argument or loaded from `),aFe=n(XL,"CODE",{});var Pkt=s(aFe);mir=r(Pkt,"pretrained_model_name_or_path"),Pkt.forEach(t),fir=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(XL,"CODE",{});var Bkt=s(nFe);gir=r(Bkt,"pretrained_model_name_or_path"),Bkt.forEach(t),hir=r(XL,":"),XL.forEach(t),uir=i(Ea),V=n(Ea,"UL",{});var X=s(V);fM=n(X,"LI",{});var hDe=s(fM);sFe=n(hDe,"STRONG",{});var Ikt=s(sFe);pir=r(Ikt,"albert"),Ikt.forEach(t),_ir=r(hDe," \u2014 "),xU=n(hDe,"A",{href:!0});var Nkt=s(xU);bir=r(Nkt,"AlbertForQuestionAnswering"),Nkt.forEach(t),vir=r(hDe," (ALBERT model)"),hDe.forEach(t),Fir=i(X),gM=n(X,"LI",{});var uDe=s(gM);lFe=n(uDe,"STRONG",{});var qkt=s(lFe);Tir=r(qkt,"bart"),qkt.forEach(t),Mir=r(uDe," \u2014 "),$U=n(uDe,"A",{href:!0});var jkt=s($U);Eir=r(jkt,"BartForQuestionAnswering"),jkt.forEach(t),Cir=r(uDe," (BART model)"),uDe.forEach(t),wir=i(X),hM=n(X,"LI",{});var pDe=s(hM);iFe=n(pDe,"STRONG",{});var Dkt=s(iFe);Air=r(Dkt,"bert"),Dkt.forEach(t),Lir=r(pDe," \u2014 "),kU=n(pDe,"A",{href:!0});var Gkt=s(kU);yir=r(Gkt,"BertForQuestionAnswering"),Gkt.forEach(t),xir=r(pDe," (BERT model)"),pDe.forEach(t),$ir=i(X),uM=n(X,"LI",{});var _De=s(uM);dFe=n(_De,"STRONG",{});var Okt=s(dFe);kir=r(Okt,"big_bird"),Okt.forEach(t),Sir=r(_De," \u2014 "),SU=n(_De,"A",{href:!0});var Vkt=s(SU);Rir=r(Vkt,"BigBirdForQuestionAnswering"),Vkt.forEach(t),Pir=r(_De," (BigBird model)"),_De.forEach(t),Bir=i(X),pM=n(X,"LI",{});var bDe=s(pM);cFe=n(bDe,"STRONG",{});var Xkt=s(cFe);Iir=r(Xkt,"bigbird_pegasus"),Xkt.forEach(t),Nir=r(bDe," \u2014 "),RU=n(bDe,"A",{href:!0});var zkt=s(RU);qir=r(zkt,"BigBirdPegasusForQuestionAnswering"),zkt.forEach(t),jir=r(bDe," (BigBird-Pegasus model)"),bDe.forEach(t),Dir=i(X),_M=n(X,"LI",{});var vDe=s(_M);mFe=n(vDe,"STRONG",{});var Wkt=s(mFe);Gir=r(Wkt,"camembert"),Wkt.forEach(t),Oir=r(vDe," \u2014 "),PU=n(vDe,"A",{href:!0});var Qkt=s(PU);Vir=r(Qkt,"CamembertForQuestionAnswering"),Qkt.forEach(t),Xir=r(vDe," (CamemBERT model)"),vDe.forEach(t),zir=i(X),bM=n(X,"LI",{});var FDe=s(bM);fFe=n(FDe,"STRONG",{});var Ukt=s(fFe);Wir=r(Ukt,"canine"),Ukt.forEach(t),Qir=r(FDe," \u2014 "),BU=n(FDe,"A",{href:!0});var Hkt=s(BU);Uir=r(Hkt,"CanineForQuestionAnswering"),Hkt.forEach(t),Hir=r(FDe," (CANINE model)"),FDe.forEach(t),Jir=i(X),vM=n(X,"LI",{});var TDe=s(vM);gFe=n(TDe,"STRONG",{});var Jkt=s(gFe);Yir=r(Jkt,"convbert"),Jkt.forEach(t),Kir=r(TDe," \u2014 "),IU=n(TDe,"A",{href:!0});var Ykt=s(IU);Zir=r(Ykt,"ConvBertForQuestionAnswering"),Ykt.forEach(t),edr=r(TDe," (ConvBERT model)"),TDe.forEach(t),odr=i(X),FM=n(X,"LI",{});var MDe=s(FM);hFe=n(MDe,"STRONG",{});var Kkt=s(hFe);rdr=r(Kkt,"data2vec-text"),Kkt.forEach(t),tdr=r(MDe," \u2014 "),NU=n(MDe,"A",{href:!0});var Zkt=s(NU);adr=r(Zkt,"Data2VecTextForQuestionAnswering"),Zkt.forEach(t),ndr=r(MDe," (Data2VecText model)"),MDe.forEach(t),sdr=i(X),TM=n(X,"LI",{});var EDe=s(TM);uFe=n(EDe,"STRONG",{});var eSt=s(uFe);ldr=r(eSt,"deberta"),eSt.forEach(t),idr=r(EDe," \u2014 "),qU=n(EDe,"A",{href:!0});var oSt=s(qU);ddr=r(oSt,"DebertaForQuestionAnswering"),oSt.forEach(t),cdr=r(EDe," (DeBERTa model)"),EDe.forEach(t),mdr=i(X),MM=n(X,"LI",{});var CDe=s(MM);pFe=n(CDe,"STRONG",{});var rSt=s(pFe);fdr=r(rSt,"deberta-v2"),rSt.forEach(t),gdr=r(CDe," \u2014 "),jU=n(CDe,"A",{href:!0});var tSt=s(jU);hdr=r(tSt,"DebertaV2ForQuestionAnswering"),tSt.forEach(t),udr=r(CDe," (DeBERTa-v2 model)"),CDe.forEach(t),pdr=i(X),EM=n(X,"LI",{});var wDe=s(EM);_Fe=n(wDe,"STRONG",{});var aSt=s(_Fe);_dr=r(aSt,"distilbert"),aSt.forEach(t),bdr=r(wDe," \u2014 "),DU=n(wDe,"A",{href:!0});var nSt=s(DU);vdr=r(nSt,"DistilBertForQuestionAnswering"),nSt.forEach(t),Fdr=r(wDe," (DistilBERT model)"),wDe.forEach(t),Tdr=i(X),CM=n(X,"LI",{});var ADe=s(CM);bFe=n(ADe,"STRONG",{});var sSt=s(bFe);Mdr=r(sSt,"electra"),sSt.forEach(t),Edr=r(ADe," \u2014 "),GU=n(ADe,"A",{href:!0});var lSt=s(GU);Cdr=r(lSt,"ElectraForQuestionAnswering"),lSt.forEach(t),wdr=r(ADe," (ELECTRA model)"),ADe.forEach(t),Adr=i(X),wM=n(X,"LI",{});var LDe=s(wM);vFe=n(LDe,"STRONG",{});var iSt=s(vFe);Ldr=r(iSt,"flaubert"),iSt.forEach(t),ydr=r(LDe," \u2014 "),OU=n(LDe,"A",{href:!0});var dSt=s(OU);xdr=r(dSt,"FlaubertForQuestionAnsweringSimple"),dSt.forEach(t),$dr=r(LDe," (FlauBERT model)"),LDe.forEach(t),kdr=i(X),AM=n(X,"LI",{});var yDe=s(AM);FFe=n(yDe,"STRONG",{});var cSt=s(FFe);Sdr=r(cSt,"fnet"),cSt.forEach(t),Rdr=r(yDe," \u2014 "),VU=n(yDe,"A",{href:!0});var mSt=s(VU);Pdr=r(mSt,"FNetForQuestionAnswering"),mSt.forEach(t),Bdr=r(yDe," (FNet model)"),yDe.forEach(t),Idr=i(X),LM=n(X,"LI",{});var xDe=s(LM);TFe=n(xDe,"STRONG",{});var fSt=s(TFe);Ndr=r(fSt,"funnel"),fSt.forEach(t),qdr=r(xDe," \u2014 "),XU=n(xDe,"A",{href:!0});var gSt=s(XU);jdr=r(gSt,"FunnelForQuestionAnswering"),gSt.forEach(t),Ddr=r(xDe," (Funnel Transformer model)"),xDe.forEach(t),Gdr=i(X),yM=n(X,"LI",{});var $De=s(yM);MFe=n($De,"STRONG",{});var hSt=s(MFe);Odr=r(hSt,"gptj"),hSt.forEach(t),Vdr=r($De," \u2014 "),zU=n($De,"A",{href:!0});var uSt=s(zU);Xdr=r(uSt,"GPTJForQuestionAnswering"),uSt.forEach(t),zdr=r($De," (GPT-J model)"),$De.forEach(t),Wdr=i(X),xM=n(X,"LI",{});var kDe=s(xM);EFe=n(kDe,"STRONG",{});var pSt=s(EFe);Qdr=r(pSt,"ibert"),pSt.forEach(t),Udr=r(kDe," \u2014 "),WU=n(kDe,"A",{href:!0});var _St=s(WU);Hdr=r(_St,"IBertForQuestionAnswering"),_St.forEach(t),Jdr=r(kDe," (I-BERT model)"),kDe.forEach(t),Ydr=i(X),$M=n(X,"LI",{});var SDe=s($M);CFe=n(SDe,"STRONG",{});var bSt=s(CFe);Kdr=r(bSt,"layoutlmv2"),bSt.forEach(t),Zdr=r(SDe," \u2014 "),QU=n(SDe,"A",{href:!0});var vSt=s(QU);ecr=r(vSt,"LayoutLMv2ForQuestionAnswering"),vSt.forEach(t),ocr=r(SDe," (LayoutLMv2 model)"),SDe.forEach(t),rcr=i(X),kM=n(X,"LI",{});var RDe=s(kM);wFe=n(RDe,"STRONG",{});var FSt=s(wFe);tcr=r(FSt,"layoutlmv3"),FSt.forEach(t),acr=r(RDe," \u2014 "),UU=n(RDe,"A",{href:!0});var TSt=s(UU);ncr=r(TSt,"LayoutLMv3ForQuestionAnswering"),TSt.forEach(t),scr=r(RDe," (LayoutLMv3 model)"),RDe.forEach(t),lcr=i(X),SM=n(X,"LI",{});var PDe=s(SM);AFe=n(PDe,"STRONG",{});var MSt=s(AFe);icr=r(MSt,"led"),MSt.forEach(t),dcr=r(PDe," \u2014 "),HU=n(PDe,"A",{href:!0});var ESt=s(HU);ccr=r(ESt,"LEDForQuestionAnswering"),ESt.forEach(t),mcr=r(PDe," (LED model)"),PDe.forEach(t),fcr=i(X),RM=n(X,"LI",{});var BDe=s(RM);LFe=n(BDe,"STRONG",{});var CSt=s(LFe);gcr=r(CSt,"longformer"),CSt.forEach(t),hcr=r(BDe," \u2014 "),JU=n(BDe,"A",{href:!0});var wSt=s(JU);ucr=r(wSt,"LongformerForQuestionAnswering"),wSt.forEach(t),pcr=r(BDe," (Longformer model)"),BDe.forEach(t),_cr=i(X),PM=n(X,"LI",{});var IDe=s(PM);yFe=n(IDe,"STRONG",{});var ASt=s(yFe);bcr=r(ASt,"luke"),ASt.forEach(t),vcr=r(IDe," \u2014 "),YU=n(IDe,"A",{href:!0});var LSt=s(YU);Fcr=r(LSt,"LukeForQuestionAnswering"),LSt.forEach(t),Tcr=r(IDe," (LUKE model)"),IDe.forEach(t),Mcr=i(X),BM=n(X,"LI",{});var NDe=s(BM);xFe=n(NDe,"STRONG",{});var ySt=s(xFe);Ecr=r(ySt,"lxmert"),ySt.forEach(t),Ccr=r(NDe," \u2014 "),KU=n(NDe,"A",{href:!0});var xSt=s(KU);wcr=r(xSt,"LxmertForQuestionAnswering"),xSt.forEach(t),Acr=r(NDe," (LXMERT model)"),NDe.forEach(t),Lcr=i(X),IM=n(X,"LI",{});var qDe=s(IM);$Fe=n(qDe,"STRONG",{});var $St=s($Fe);ycr=r($St,"mbart"),$St.forEach(t),xcr=r(qDe," \u2014 "),ZU=n(qDe,"A",{href:!0});var kSt=s(ZU);$cr=r(kSt,"MBartForQuestionAnswering"),kSt.forEach(t),kcr=r(qDe," (mBART model)"),qDe.forEach(t),Scr=i(X),NM=n(X,"LI",{});var jDe=s(NM);kFe=n(jDe,"STRONG",{});var SSt=s(kFe);Rcr=r(SSt,"megatron-bert"),SSt.forEach(t),Pcr=r(jDe," \u2014 "),eH=n(jDe,"A",{href:!0});var RSt=s(eH);Bcr=r(RSt,"MegatronBertForQuestionAnswering"),RSt.forEach(t),Icr=r(jDe," (Megatron-BERT model)"),jDe.forEach(t),Ncr=i(X),qM=n(X,"LI",{});var DDe=s(qM);SFe=n(DDe,"STRONG",{});var PSt=s(SFe);qcr=r(PSt,"mobilebert"),PSt.forEach(t),jcr=r(DDe," \u2014 "),oH=n(DDe,"A",{href:!0});var BSt=s(oH);Dcr=r(BSt,"MobileBertForQuestionAnswering"),BSt.forEach(t),Gcr=r(DDe," (MobileBERT model)"),DDe.forEach(t),Ocr=i(X),jM=n(X,"LI",{});var GDe=s(jM);RFe=n(GDe,"STRONG",{});var ISt=s(RFe);Vcr=r(ISt,"mpnet"),ISt.forEach(t),Xcr=r(GDe," \u2014 "),rH=n(GDe,"A",{href:!0});var NSt=s(rH);zcr=r(NSt,"MPNetForQuestionAnswering"),NSt.forEach(t),Wcr=r(GDe," (MPNet model)"),GDe.forEach(t),Qcr=i(X),DM=n(X,"LI",{});var ODe=s(DM);PFe=n(ODe,"STRONG",{});var qSt=s(PFe);Ucr=r(qSt,"mvp"),qSt.forEach(t),Hcr=r(ODe," \u2014 "),tH=n(ODe,"A",{href:!0});var jSt=s(tH);Jcr=r(jSt,"MvpForQuestionAnswering"),jSt.forEach(t),Ycr=r(ODe," (MVP model)"),ODe.forEach(t),Kcr=i(X),GM=n(X,"LI",{});var VDe=s(GM);BFe=n(VDe,"STRONG",{});var DSt=s(BFe);Zcr=r(DSt,"nezha"),DSt.forEach(t),emr=r(VDe," \u2014 "),aH=n(VDe,"A",{href:!0});var GSt=s(aH);omr=r(GSt,"NezhaForQuestionAnswering"),GSt.forEach(t),rmr=r(VDe," (Nezha model)"),VDe.forEach(t),tmr=i(X),OM=n(X,"LI",{});var XDe=s(OM);IFe=n(XDe,"STRONG",{});var OSt=s(IFe);amr=r(OSt,"nystromformer"),OSt.forEach(t),nmr=r(XDe," \u2014 "),nH=n(XDe,"A",{href:!0});var VSt=s(nH);smr=r(VSt,"NystromformerForQuestionAnswering"),VSt.forEach(t),lmr=r(XDe," (Nystr\xF6mformer model)"),XDe.forEach(t),imr=i(X),VM=n(X,"LI",{});var zDe=s(VM);NFe=n(zDe,"STRONG",{});var XSt=s(NFe);dmr=r(XSt,"qdqbert"),XSt.forEach(t),cmr=r(zDe," \u2014 "),sH=n(zDe,"A",{href:!0});var zSt=s(sH);mmr=r(zSt,"QDQBertForQuestionAnswering"),zSt.forEach(t),fmr=r(zDe," (QDQBert model)"),zDe.forEach(t),gmr=i(X),XM=n(X,"LI",{});var WDe=s(XM);qFe=n(WDe,"STRONG",{});var WSt=s(qFe);hmr=r(WSt,"reformer"),WSt.forEach(t),umr=r(WDe," \u2014 "),lH=n(WDe,"A",{href:!0});var QSt=s(lH);pmr=r(QSt,"ReformerForQuestionAnswering"),QSt.forEach(t),_mr=r(WDe," (Reformer model)"),WDe.forEach(t),bmr=i(X),zM=n(X,"LI",{});var QDe=s(zM);jFe=n(QDe,"STRONG",{});var USt=s(jFe);vmr=r(USt,"rembert"),USt.forEach(t),Fmr=r(QDe," \u2014 "),iH=n(QDe,"A",{href:!0});var HSt=s(iH);Tmr=r(HSt,"RemBertForQuestionAnswering"),HSt.forEach(t),Mmr=r(QDe," (RemBERT model)"),QDe.forEach(t),Emr=i(X),WM=n(X,"LI",{});var UDe=s(WM);DFe=n(UDe,"STRONG",{});var JSt=s(DFe);Cmr=r(JSt,"roberta"),JSt.forEach(t),wmr=r(UDe," \u2014 "),dH=n(UDe,"A",{href:!0});var YSt=s(dH);Amr=r(YSt,"RobertaForQuestionAnswering"),YSt.forEach(t),Lmr=r(UDe," (RoBERTa model)"),UDe.forEach(t),ymr=i(X),QM=n(X,"LI",{});var HDe=s(QM);GFe=n(HDe,"STRONG",{});var KSt=s(GFe);xmr=r(KSt,"roformer"),KSt.forEach(t),$mr=r(HDe," \u2014 "),cH=n(HDe,"A",{href:!0});var ZSt=s(cH);kmr=r(ZSt,"RoFormerForQuestionAnswering"),ZSt.forEach(t),Smr=r(HDe," (RoFormer model)"),HDe.forEach(t),Rmr=i(X),UM=n(X,"LI",{});var JDe=s(UM);OFe=n(JDe,"STRONG",{});var eRt=s(OFe);Pmr=r(eRt,"splinter"),eRt.forEach(t),Bmr=r(JDe," \u2014 "),mH=n(JDe,"A",{href:!0});var oRt=s(mH);Imr=r(oRt,"SplinterForQuestionAnswering"),oRt.forEach(t),Nmr=r(JDe," (Splinter model)"),JDe.forEach(t),qmr=i(X),HM=n(X,"LI",{});var YDe=s(HM);VFe=n(YDe,"STRONG",{});var rRt=s(VFe);jmr=r(rRt,"squeezebert"),rRt.forEach(t),Dmr=r(YDe," \u2014 "),fH=n(YDe,"A",{href:!0});var tRt=s(fH);Gmr=r(tRt,"SqueezeBertForQuestionAnswering"),tRt.forEach(t),Omr=r(YDe," (SqueezeBERT model)"),YDe.forEach(t),Vmr=i(X),JM=n(X,"LI",{});var KDe=s(JM);XFe=n(KDe,"STRONG",{});var aRt=s(XFe);Xmr=r(aRt,"xlm"),aRt.forEach(t),zmr=r(KDe," \u2014 "),gH=n(KDe,"A",{href:!0});var nRt=s(gH);Wmr=r(nRt,"XLMForQuestionAnsweringSimple"),nRt.forEach(t),Qmr=r(KDe," (XLM model)"),KDe.forEach(t),Umr=i(X),YM=n(X,"LI",{});var ZDe=s(YM);zFe=n(ZDe,"STRONG",{});var sRt=s(zFe);Hmr=r(sRt,"xlm-roberta"),sRt.forEach(t),Jmr=r(ZDe," \u2014 "),hH=n(ZDe,"A",{href:!0});var lRt=s(hH);Ymr=r(lRt,"XLMRobertaForQuestionAnswering"),lRt.forEach(t),Kmr=r(ZDe," (XLM-RoBERTa model)"),ZDe.forEach(t),Zmr=i(X),KM=n(X,"LI",{});var eGe=s(KM);WFe=n(eGe,"STRONG",{});var iRt=s(WFe);efr=r(iRt,"xlm-roberta-xl"),iRt.forEach(t),ofr=r(eGe," \u2014 "),uH=n(eGe,"A",{href:!0});var dRt=s(uH);rfr=r(dRt,"XLMRobertaXLForQuestionAnswering"),dRt.forEach(t),tfr=r(eGe," (XLM-RoBERTa-XL model)"),eGe.forEach(t),afr=i(X),ZM=n(X,"LI",{});var oGe=s(ZM);QFe=n(oGe,"STRONG",{});var cRt=s(QFe);nfr=r(cRt,"xlnet"),cRt.forEach(t),sfr=r(oGe," \u2014 "),pH=n(oGe,"A",{href:!0});var mRt=s(pH);lfr=r(mRt,"XLNetForQuestionAnsweringSimple"),mRt.forEach(t),ifr=r(oGe," (XLNet model)"),oGe.forEach(t),dfr=i(X),eE=n(X,"LI",{});var rGe=s(eE);UFe=n(rGe,"STRONG",{});var fRt=s(UFe);cfr=r(fRt,"yoso"),fRt.forEach(t),mfr=r(rGe," \u2014 "),_H=n(rGe,"A",{href:!0});var gRt=s(_H);ffr=r(gRt,"YosoForQuestionAnswering"),gRt.forEach(t),gfr=r(rGe," (YOSO model)"),rGe.forEach(t),X.forEach(t),hfr=i(Ea),oE=n(Ea,"P",{});var tGe=s(oE);ufr=r(tGe,"The model is set in evaluation mode by default using "),HFe=n(tGe,"CODE",{});var hRt=s(HFe);pfr=r(hRt,"model.eval()"),hRt.forEach(t),_fr=r(tGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=n(tGe,"CODE",{});var uRt=s(JFe);bfr=r(uRt,"model.train()"),uRt.forEach(t),tGe.forEach(t),vfr=i(Ea),T(rE.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),hHe=i(m),Sd=n(m,"H2",{class:!0});var CYe=s(Sd);tE=n(CYe,"A",{id:!0,class:!0,href:!0});var pRt=s(tE);YFe=n(pRt,"SPAN",{});var _Rt=s(YFe);T(U9.$$.fragment,_Rt),_Rt.forEach(t),pRt.forEach(t),Ffr=i(CYe),KFe=n(CYe,"SPAN",{});var bRt=s(KFe);Tfr=r(bRt,"AutoModelForTableQuestionAnswering"),bRt.forEach(t),CYe.forEach(t),uHe=i(m),Vo=n(m,"DIV",{class:!0});var Cl=s(Vo);T(H9.$$.fragment,Cl),Mfr=i(Cl),Rd=n(Cl,"P",{});var $ne=s(Rd);Efr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bH=n($ne,"A",{href:!0});var vRt=s(bH);Cfr=r(vRt,"from_pretrained()"),vRt.forEach(t),wfr=r($ne," class method or the "),vH=n($ne,"A",{href:!0});var FRt=s(vH);Afr=r(FRt,"from_config()"),FRt.forEach(t),Lfr=r($ne,` class
method.`),$ne.forEach(t),yfr=i(Cl),J9=n(Cl,"P",{});var wYe=s(J9);xfr=r(wYe,"This class cannot be instantiated directly using "),ZFe=n(wYe,"CODE",{});var TRt=s(ZFe);$fr=r(TRt,"__init__()"),TRt.forEach(t),kfr=r(wYe," (throws an error)."),wYe.forEach(t),Sfr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var zL=s(Mt);T(Y9.$$.fragment,zL),Rfr=i(zL),eTe=n(zL,"P",{});var MRt=s(eTe);Pfr=r(MRt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MRt.forEach(t),Bfr=i(zL),Pd=n(zL,"P",{});var kne=s(Pd);Ifr=r(kne,`Note:
Loading a model from its configuration file does `),oTe=n(kne,"STRONG",{});var ERt=s(oTe);Nfr=r(ERt,"not"),ERt.forEach(t),qfr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(kne,"A",{href:!0});var CRt=s(FH);jfr=r(CRt,"from_pretrained()"),CRt.forEach(t),Dfr=r(kne," to load the model weights."),kne.forEach(t),Gfr=i(zL),T(aE.$$.fragment,zL),zL.forEach(t),Ofr=i(Cl),io=n(Cl,"DIV",{class:!0});var Ca=s(io);T(K9.$$.fragment,Ca),Vfr=i(Ca),rTe=n(Ca,"P",{});var wRt=s(rTe);Xfr=r(wRt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wRt.forEach(t),zfr=i(Ca),Za=n(Ca,"P",{});var WL=s(Za);Wfr=r(WL,"The model class to instantiate is selected based on the "),tTe=n(WL,"CODE",{});var ARt=s(tTe);Qfr=r(ARt,"model_type"),ARt.forEach(t),Ufr=r(WL,` property of the config object (either
passed as an argument or loaded from `),aTe=n(WL,"CODE",{});var LRt=s(aTe);Hfr=r(LRt,"pretrained_model_name_or_path"),LRt.forEach(t),Jfr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(WL,"CODE",{});var yRt=s(nTe);Yfr=r(yRt,"pretrained_model_name_or_path"),yRt.forEach(t),Kfr=r(WL,":"),WL.forEach(t),Zfr=i(Ca),sTe=n(Ca,"UL",{});var xRt=s(sTe);nE=n(xRt,"LI",{});var aGe=s(nE);lTe=n(aGe,"STRONG",{});var $Rt=s(lTe);egr=r($Rt,"tapas"),$Rt.forEach(t),ogr=r(aGe," \u2014 "),TH=n(aGe,"A",{href:!0});var kRt=s(TH);rgr=r(kRt,"TapasForQuestionAnswering"),kRt.forEach(t),tgr=r(aGe," (TAPAS model)"),aGe.forEach(t),xRt.forEach(t),agr=i(Ca),sE=n(Ca,"P",{});var nGe=s(sE);ngr=r(nGe,"The model is set in evaluation mode by default using "),iTe=n(nGe,"CODE",{});var SRt=s(iTe);sgr=r(SRt,"model.eval()"),SRt.forEach(t),lgr=r(nGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=n(nGe,"CODE",{});var RRt=s(dTe);igr=r(RRt,"model.train()"),RRt.forEach(t),nGe.forEach(t),dgr=i(Ca),T(lE.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),pHe=i(m),Bd=n(m,"H2",{class:!0});var AYe=s(Bd);iE=n(AYe,"A",{id:!0,class:!0,href:!0});var PRt=s(iE);cTe=n(PRt,"SPAN",{});var BRt=s(cTe);T(Z9.$$.fragment,BRt),BRt.forEach(t),PRt.forEach(t),cgr=i(AYe),mTe=n(AYe,"SPAN",{});var IRt=s(mTe);mgr=r(IRt,"AutoModelForImageClassification"),IRt.forEach(t),AYe.forEach(t),_He=i(m),Xo=n(m,"DIV",{class:!0});var wl=s(Xo);T(ex.$$.fragment,wl),fgr=i(wl),Id=n(wl,"P",{});var Sne=s(Id);ggr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MH=n(Sne,"A",{href:!0});var NRt=s(MH);hgr=r(NRt,"from_pretrained()"),NRt.forEach(t),ugr=r(Sne," class method or the "),EH=n(Sne,"A",{href:!0});var qRt=s(EH);pgr=r(qRt,"from_config()"),qRt.forEach(t),_gr=r(Sne,` class
method.`),Sne.forEach(t),bgr=i(wl),ox=n(wl,"P",{});var LYe=s(ox);vgr=r(LYe,"This class cannot be instantiated directly using "),fTe=n(LYe,"CODE",{});var jRt=s(fTe);Fgr=r(jRt,"__init__()"),jRt.forEach(t),Tgr=r(LYe," (throws an error)."),LYe.forEach(t),Mgr=i(wl),Et=n(wl,"DIV",{class:!0});var QL=s(Et);T(rx.$$.fragment,QL),Egr=i(QL),gTe=n(QL,"P",{});var DRt=s(gTe);Cgr=r(DRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DRt.forEach(t),wgr=i(QL),Nd=n(QL,"P",{});var Rne=s(Nd);Agr=r(Rne,`Note:
Loading a model from its configuration file does `),hTe=n(Rne,"STRONG",{});var GRt=s(hTe);Lgr=r(GRt,"not"),GRt.forEach(t),ygr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(Rne,"A",{href:!0});var ORt=s(CH);xgr=r(ORt,"from_pretrained()"),ORt.forEach(t),$gr=r(Rne," to load the model weights."),Rne.forEach(t),kgr=i(QL),T(dE.$$.fragment,QL),QL.forEach(t),Sgr=i(wl),co=n(wl,"DIV",{class:!0});var wa=s(co);T(tx.$$.fragment,wa),Rgr=i(wa),uTe=n(wa,"P",{});var VRt=s(uTe);Pgr=r(VRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VRt.forEach(t),Bgr=i(wa),en=n(wa,"P",{});var UL=s(en);Igr=r(UL,"The model class to instantiate is selected based on the "),pTe=n(UL,"CODE",{});var XRt=s(pTe);Ngr=r(XRt,"model_type"),XRt.forEach(t),qgr=r(UL,` property of the config object (either
passed as an argument or loaded from `),_Te=n(UL,"CODE",{});var zRt=s(_Te);jgr=r(zRt,"pretrained_model_name_or_path"),zRt.forEach(t),Dgr=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(UL,"CODE",{});var WRt=s(bTe);Ggr=r(WRt,"pretrained_model_name_or_path"),WRt.forEach(t),Ogr=r(UL,":"),UL.forEach(t),Vgr=i(wa),be=n(wa,"UL",{});var Fe=s(be);cE=n(Fe,"LI",{});var sGe=s(cE);vTe=n(sGe,"STRONG",{});var QRt=s(vTe);Xgr=r(QRt,"beit"),QRt.forEach(t),zgr=r(sGe," \u2014 "),wH=n(sGe,"A",{href:!0});var URt=s(wH);Wgr=r(URt,"BeitForImageClassification"),URt.forEach(t),Qgr=r(sGe," (BEiT model)"),sGe.forEach(t),Ugr=i(Fe),mE=n(Fe,"LI",{});var lGe=s(mE);FTe=n(lGe,"STRONG",{});var HRt=s(FTe);Hgr=r(HRt,"convnext"),HRt.forEach(t),Jgr=r(lGe," \u2014 "),AH=n(lGe,"A",{href:!0});var JRt=s(AH);Ygr=r(JRt,"ConvNextForImageClassification"),JRt.forEach(t),Kgr=r(lGe," (ConvNeXT model)"),lGe.forEach(t),Zgr=i(Fe),fE=n(Fe,"LI",{});var iGe=s(fE);TTe=n(iGe,"STRONG",{});var YRt=s(TTe);ehr=r(YRt,"cvt"),YRt.forEach(t),ohr=r(iGe," \u2014 "),LH=n(iGe,"A",{href:!0});var KRt=s(LH);rhr=r(KRt,"CvtForImageClassification"),KRt.forEach(t),thr=r(iGe," (CvT model)"),iGe.forEach(t),ahr=i(Fe),gE=n(Fe,"LI",{});var dGe=s(gE);MTe=n(dGe,"STRONG",{});var ZRt=s(MTe);nhr=r(ZRt,"data2vec-vision"),ZRt.forEach(t),shr=r(dGe," \u2014 "),yH=n(dGe,"A",{href:!0});var ePt=s(yH);lhr=r(ePt,"Data2VecVisionForImageClassification"),ePt.forEach(t),ihr=r(dGe," (Data2VecVision model)"),dGe.forEach(t),dhr=i(Fe),sl=n(Fe,"LI",{});var mP=s(sl);ETe=n(mP,"STRONG",{});var oPt=s(ETe);chr=r(oPt,"deit"),oPt.forEach(t),mhr=r(mP," \u2014 "),xH=n(mP,"A",{href:!0});var rPt=s(xH);fhr=r(rPt,"DeiTForImageClassification"),rPt.forEach(t),ghr=r(mP," or "),$H=n(mP,"A",{href:!0});var tPt=s($H);hhr=r(tPt,"DeiTForImageClassificationWithTeacher"),tPt.forEach(t),uhr=r(mP," (DeiT model)"),mP.forEach(t),phr=i(Fe),hE=n(Fe,"LI",{});var cGe=s(hE);CTe=n(cGe,"STRONG",{});var aPt=s(CTe);_hr=r(aPt,"imagegpt"),aPt.forEach(t),bhr=r(cGe," \u2014 "),kH=n(cGe,"A",{href:!0});var nPt=s(kH);vhr=r(nPt,"ImageGPTForImageClassification"),nPt.forEach(t),Fhr=r(cGe," (ImageGPT model)"),cGe.forEach(t),Thr=i(Fe),ll=n(Fe,"LI",{});var fP=s(ll);wTe=n(fP,"STRONG",{});var sPt=s(wTe);Mhr=r(sPt,"levit"),sPt.forEach(t),Ehr=r(fP," \u2014 "),SH=n(fP,"A",{href:!0});var lPt=s(SH);Chr=r(lPt,"LevitForImageClassification"),lPt.forEach(t),whr=r(fP," or "),RH=n(fP,"A",{href:!0});var iPt=s(RH);Ahr=r(iPt,"LevitForImageClassificationWithTeacher"),iPt.forEach(t),Lhr=r(fP," (LeViT model)"),fP.forEach(t),yhr=i(Fe),uE=n(Fe,"LI",{});var mGe=s(uE);ATe=n(mGe,"STRONG",{});var dPt=s(ATe);xhr=r(dPt,"mobilevit"),dPt.forEach(t),$hr=r(mGe," \u2014 "),PH=n(mGe,"A",{href:!0});var cPt=s(PH);khr=r(cPt,"MobileViTForImageClassification"),cPt.forEach(t),Shr=r(mGe," (MobileViT model)"),mGe.forEach(t),Rhr=i(Fe),Ct=n(Fe,"LI",{});var Zm=s(Ct);LTe=n(Zm,"STRONG",{});var mPt=s(LTe);Phr=r(mPt,"perceiver"),mPt.forEach(t),Bhr=r(Zm," \u2014 "),BH=n(Zm,"A",{href:!0});var fPt=s(BH);Ihr=r(fPt,"PerceiverForImageClassificationLearned"),fPt.forEach(t),Nhr=r(Zm," or "),IH=n(Zm,"A",{href:!0});var gPt=s(IH);qhr=r(gPt,"PerceiverForImageClassificationFourier"),gPt.forEach(t),jhr=r(Zm," or "),NH=n(Zm,"A",{href:!0});var hPt=s(NH);Dhr=r(hPt,"PerceiverForImageClassificationConvProcessing"),hPt.forEach(t),Ghr=r(Zm," (Perceiver model)"),Zm.forEach(t),Ohr=i(Fe),pE=n(Fe,"LI",{});var fGe=s(pE);yTe=n(fGe,"STRONG",{});var uPt=s(yTe);Vhr=r(uPt,"poolformer"),uPt.forEach(t),Xhr=r(fGe," \u2014 "),qH=n(fGe,"A",{href:!0});var pPt=s(qH);zhr=r(pPt,"PoolFormerForImageClassification"),pPt.forEach(t),Whr=r(fGe," (PoolFormer model)"),fGe.forEach(t),Qhr=i(Fe),_E=n(Fe,"LI",{});var gGe=s(_E);xTe=n(gGe,"STRONG",{});var _Pt=s(xTe);Uhr=r(_Pt,"regnet"),_Pt.forEach(t),Hhr=r(gGe," \u2014 "),jH=n(gGe,"A",{href:!0});var bPt=s(jH);Jhr=r(bPt,"RegNetForImageClassification"),bPt.forEach(t),Yhr=r(gGe," (RegNet model)"),gGe.forEach(t),Khr=i(Fe),bE=n(Fe,"LI",{});var hGe=s(bE);$Te=n(hGe,"STRONG",{});var vPt=s($Te);Zhr=r(vPt,"resnet"),vPt.forEach(t),eur=r(hGe," \u2014 "),DH=n(hGe,"A",{href:!0});var FPt=s(DH);our=r(FPt,"ResNetForImageClassification"),FPt.forEach(t),rur=r(hGe," (ResNet model)"),hGe.forEach(t),tur=i(Fe),vE=n(Fe,"LI",{});var uGe=s(vE);kTe=n(uGe,"STRONG",{});var TPt=s(kTe);aur=r(TPt,"segformer"),TPt.forEach(t),nur=r(uGe," \u2014 "),GH=n(uGe,"A",{href:!0});var MPt=s(GH);sur=r(MPt,"SegformerForImageClassification"),MPt.forEach(t),lur=r(uGe," (SegFormer model)"),uGe.forEach(t),iur=i(Fe),FE=n(Fe,"LI",{});var pGe=s(FE);STe=n(pGe,"STRONG",{});var EPt=s(STe);dur=r(EPt,"swin"),EPt.forEach(t),cur=r(pGe," \u2014 "),OH=n(pGe,"A",{href:!0});var CPt=s(OH);mur=r(CPt,"SwinForImageClassification"),CPt.forEach(t),fur=r(pGe," (Swin Transformer model)"),pGe.forEach(t),gur=i(Fe),TE=n(Fe,"LI",{});var _Ge=s(TE);RTe=n(_Ge,"STRONG",{});var wPt=s(RTe);hur=r(wPt,"swinv2"),wPt.forEach(t),uur=r(_Ge," \u2014 "),VH=n(_Ge,"A",{href:!0});var APt=s(VH);pur=r(APt,"Swinv2ForImageClassification"),APt.forEach(t),_ur=r(_Ge," (Swin Transformer V2 model)"),_Ge.forEach(t),bur=i(Fe),ME=n(Fe,"LI",{});var bGe=s(ME);PTe=n(bGe,"STRONG",{});var LPt=s(PTe);vur=r(LPt,"van"),LPt.forEach(t),Fur=r(bGe," \u2014 "),XH=n(bGe,"A",{href:!0});var yPt=s(XH);Tur=r(yPt,"VanForImageClassification"),yPt.forEach(t),Mur=r(bGe," (VAN model)"),bGe.forEach(t),Eur=i(Fe),EE=n(Fe,"LI",{});var vGe=s(EE);BTe=n(vGe,"STRONG",{});var xPt=s(BTe);Cur=r(xPt,"vit"),xPt.forEach(t),wur=r(vGe," \u2014 "),zH=n(vGe,"A",{href:!0});var $Pt=s(zH);Aur=r($Pt,"ViTForImageClassification"),$Pt.forEach(t),Lur=r(vGe," (ViT model)"),vGe.forEach(t),Fe.forEach(t),yur=i(wa),CE=n(wa,"P",{});var FGe=s(CE);xur=r(FGe,"The model is set in evaluation mode by default using "),ITe=n(FGe,"CODE",{});var kPt=s(ITe);$ur=r(kPt,"model.eval()"),kPt.forEach(t),kur=r(FGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NTe=n(FGe,"CODE",{});var SPt=s(NTe);Sur=r(SPt,"model.train()"),SPt.forEach(t),FGe.forEach(t),Rur=i(wa),T(wE.$$.fragment,wa),wa.forEach(t),wl.forEach(t),bHe=i(m),qd=n(m,"H2",{class:!0});var yYe=s(qd);AE=n(yYe,"A",{id:!0,class:!0,href:!0});var RPt=s(AE);qTe=n(RPt,"SPAN",{});var PPt=s(qTe);T(ax.$$.fragment,PPt),PPt.forEach(t),RPt.forEach(t),Pur=i(yYe),jTe=n(yYe,"SPAN",{});var BPt=s(jTe);Bur=r(BPt,"AutoModelForVideoClassification"),BPt.forEach(t),yYe.forEach(t),vHe=i(m),zo=n(m,"DIV",{class:!0});var Al=s(zo);T(nx.$$.fragment,Al),Iur=i(Al),jd=n(Al,"P",{});var Pne=s(jd);Nur=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),WH=n(Pne,"A",{href:!0});var IPt=s(WH);qur=r(IPt,"from_pretrained()"),IPt.forEach(t),jur=r(Pne," class method or the "),QH=n(Pne,"A",{href:!0});var NPt=s(QH);Dur=r(NPt,"from_config()"),NPt.forEach(t),Gur=r(Pne,` class
method.`),Pne.forEach(t),Our=i(Al),sx=n(Al,"P",{});var xYe=s(sx);Vur=r(xYe,"This class cannot be instantiated directly using "),DTe=n(xYe,"CODE",{});var qPt=s(DTe);Xur=r(qPt,"__init__()"),qPt.forEach(t),zur=r(xYe," (throws an error)."),xYe.forEach(t),Wur=i(Al),wt=n(Al,"DIV",{class:!0});var HL=s(wt);T(lx.$$.fragment,HL),Qur=i(HL),GTe=n(HL,"P",{});var jPt=s(GTe);Uur=r(jPt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),jPt.forEach(t),Hur=i(HL),Dd=n(HL,"P",{});var Bne=s(Dd);Jur=r(Bne,`Note:
Loading a model from its configuration file does `),OTe=n(Bne,"STRONG",{});var DPt=s(OTe);Yur=r(DPt,"not"),DPt.forEach(t),Kur=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(Bne,"A",{href:!0});var GPt=s(UH);Zur=r(GPt,"from_pretrained()"),GPt.forEach(t),epr=r(Bne," to load the model weights."),Bne.forEach(t),opr=i(HL),T(LE.$$.fragment,HL),HL.forEach(t),rpr=i(Al),mo=n(Al,"DIV",{class:!0});var Aa=s(mo);T(ix.$$.fragment,Aa),tpr=i(Aa),VTe=n(Aa,"P",{});var OPt=s(VTe);apr=r(OPt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),OPt.forEach(t),npr=i(Aa),on=n(Aa,"P",{});var JL=s(on);spr=r(JL,"The model class to instantiate is selected based on the "),XTe=n(JL,"CODE",{});var VPt=s(XTe);lpr=r(VPt,"model_type"),VPt.forEach(t),ipr=r(JL,` property of the config object (either
passed as an argument or loaded from `),zTe=n(JL,"CODE",{});var XPt=s(zTe);dpr=r(XPt,"pretrained_model_name_or_path"),XPt.forEach(t),cpr=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(JL,"CODE",{});var zPt=s(WTe);mpr=r(zPt,"pretrained_model_name_or_path"),zPt.forEach(t),fpr=r(JL,":"),JL.forEach(t),gpr=i(Aa),QTe=n(Aa,"UL",{});var WPt=s(QTe);yE=n(WPt,"LI",{});var TGe=s(yE);UTe=n(TGe,"STRONG",{});var QPt=s(UTe);hpr=r(QPt,"videomae"),QPt.forEach(t),upr=r(TGe," \u2014 "),HH=n(TGe,"A",{href:!0});var UPt=s(HH);ppr=r(UPt,"VideoMAEForVideoClassification"),UPt.forEach(t),_pr=r(TGe," (VideoMAE model)"),TGe.forEach(t),WPt.forEach(t),bpr=i(Aa),xE=n(Aa,"P",{});var MGe=s(xE);vpr=r(MGe,"The model is set in evaluation mode by default using "),HTe=n(MGe,"CODE",{});var HPt=s(HTe);Fpr=r(HPt,"model.eval()"),HPt.forEach(t),Tpr=r(MGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JTe=n(MGe,"CODE",{});var JPt=s(JTe);Mpr=r(JPt,"model.train()"),JPt.forEach(t),MGe.forEach(t),Epr=i(Aa),T($E.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),FHe=i(m),Gd=n(m,"H2",{class:!0});var $Ye=s(Gd);kE=n($Ye,"A",{id:!0,class:!0,href:!0});var YPt=s(kE);YTe=n(YPt,"SPAN",{});var KPt=s(YTe);T(dx.$$.fragment,KPt),KPt.forEach(t),YPt.forEach(t),Cpr=i($Ye),KTe=n($Ye,"SPAN",{});var ZPt=s(KTe);wpr=r(ZPt,"AutoModelForVision2Seq"),ZPt.forEach(t),$Ye.forEach(t),THe=i(m),Wo=n(m,"DIV",{class:!0});var Ll=s(Wo);T(cx.$$.fragment,Ll),Apr=i(Ll),Od=n(Ll,"P",{});var Ine=s(Od);Lpr=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JH=n(Ine,"A",{href:!0});var eBt=s(JH);ypr=r(eBt,"from_pretrained()"),eBt.forEach(t),xpr=r(Ine," class method or the "),YH=n(Ine,"A",{href:!0});var oBt=s(YH);$pr=r(oBt,"from_config()"),oBt.forEach(t),kpr=r(Ine,` class
method.`),Ine.forEach(t),Spr=i(Ll),mx=n(Ll,"P",{});var kYe=s(mx);Rpr=r(kYe,"This class cannot be instantiated directly using "),ZTe=n(kYe,"CODE",{});var rBt=s(ZTe);Ppr=r(rBt,"__init__()"),rBt.forEach(t),Bpr=r(kYe," (throws an error)."),kYe.forEach(t),Ipr=i(Ll),At=n(Ll,"DIV",{class:!0});var YL=s(At);T(fx.$$.fragment,YL),Npr=i(YL),eMe=n(YL,"P",{});var tBt=s(eMe);qpr=r(tBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tBt.forEach(t),jpr=i(YL),Vd=n(YL,"P",{});var Nne=s(Vd);Dpr=r(Nne,`Note:
Loading a model from its configuration file does `),oMe=n(Nne,"STRONG",{});var aBt=s(oMe);Gpr=r(aBt,"not"),aBt.forEach(t),Opr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(Nne,"A",{href:!0});var nBt=s(KH);Vpr=r(nBt,"from_pretrained()"),nBt.forEach(t),Xpr=r(Nne," to load the model weights."),Nne.forEach(t),zpr=i(YL),T(SE.$$.fragment,YL),YL.forEach(t),Wpr=i(Ll),fo=n(Ll,"DIV",{class:!0});var La=s(fo);T(gx.$$.fragment,La),Qpr=i(La),rMe=n(La,"P",{});var sBt=s(rMe);Upr=r(sBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sBt.forEach(t),Hpr=i(La),rn=n(La,"P",{});var KL=s(rn);Jpr=r(KL,"The model class to instantiate is selected based on the "),tMe=n(KL,"CODE",{});var lBt=s(tMe);Ypr=r(lBt,"model_type"),lBt.forEach(t),Kpr=r(KL,` property of the config object (either
passed as an argument or loaded from `),aMe=n(KL,"CODE",{});var iBt=s(aMe);Zpr=r(iBt,"pretrained_model_name_or_path"),iBt.forEach(t),e_r=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(KL,"CODE",{});var dBt=s(nMe);o_r=r(dBt,"pretrained_model_name_or_path"),dBt.forEach(t),r_r=r(KL,":"),KL.forEach(t),t_r=i(La),sMe=n(La,"UL",{});var cBt=s(sMe);RE=n(cBt,"LI",{});var EGe=s(RE);lMe=n(EGe,"STRONG",{});var mBt=s(lMe);a_r=r(mBt,"vision-encoder-decoder"),mBt.forEach(t),n_r=r(EGe," \u2014 "),ZH=n(EGe,"A",{href:!0});var fBt=s(ZH);s_r=r(fBt,"VisionEncoderDecoderModel"),fBt.forEach(t),l_r=r(EGe," (Vision Encoder decoder model)"),EGe.forEach(t),cBt.forEach(t),i_r=i(La),PE=n(La,"P",{});var CGe=s(PE);d_r=r(CGe,"The model is set in evaluation mode by default using "),iMe=n(CGe,"CODE",{});var gBt=s(iMe);c_r=r(gBt,"model.eval()"),gBt.forEach(t),m_r=r(CGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dMe=n(CGe,"CODE",{});var hBt=s(dMe);f_r=r(hBt,"model.train()"),hBt.forEach(t),CGe.forEach(t),g_r=i(La),T(BE.$$.fragment,La),La.forEach(t),Ll.forEach(t),MHe=i(m),Xd=n(m,"H2",{class:!0});var SYe=s(Xd);IE=n(SYe,"A",{id:!0,class:!0,href:!0});var uBt=s(IE);cMe=n(uBt,"SPAN",{});var pBt=s(cMe);T(hx.$$.fragment,pBt),pBt.forEach(t),uBt.forEach(t),h_r=i(SYe),mMe=n(SYe,"SPAN",{});var _Bt=s(mMe);u_r=r(_Bt,"AutoModelForVisualQuestionAnswering"),_Bt.forEach(t),SYe.forEach(t),EHe=i(m),Qo=n(m,"DIV",{class:!0});var yl=s(Qo);T(ux.$$.fragment,yl),p_r=i(yl),zd=n(yl,"P",{});var qne=s(zd);__r=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),eJ=n(qne,"A",{href:!0});var bBt=s(eJ);b_r=r(bBt,"from_pretrained()"),bBt.forEach(t),v_r=r(qne," class method or the "),oJ=n(qne,"A",{href:!0});var vBt=s(oJ);F_r=r(vBt,"from_config()"),vBt.forEach(t),T_r=r(qne,` class
method.`),qne.forEach(t),M_r=i(yl),px=n(yl,"P",{});var RYe=s(px);E_r=r(RYe,"This class cannot be instantiated directly using "),fMe=n(RYe,"CODE",{});var FBt=s(fMe);C_r=r(FBt,"__init__()"),FBt.forEach(t),w_r=r(RYe," (throws an error)."),RYe.forEach(t),A_r=i(yl),Lt=n(yl,"DIV",{class:!0});var ZL=s(Lt);T(_x.$$.fragment,ZL),L_r=i(ZL),gMe=n(ZL,"P",{});var TBt=s(gMe);y_r=r(TBt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),TBt.forEach(t),x_r=i(ZL),Wd=n(ZL,"P",{});var jne=s(Wd);$_r=r(jne,`Note:
Loading a model from its configuration file does `),hMe=n(jne,"STRONG",{});var MBt=s(hMe);k_r=r(MBt,"not"),MBt.forEach(t),S_r=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(jne,"A",{href:!0});var EBt=s(rJ);R_r=r(EBt,"from_pretrained()"),EBt.forEach(t),P_r=r(jne," to load the model weights."),jne.forEach(t),B_r=i(ZL),T(NE.$$.fragment,ZL),ZL.forEach(t),I_r=i(yl),go=n(yl,"DIV",{class:!0});var ya=s(go);T(bx.$$.fragment,ya),N_r=i(ya),uMe=n(ya,"P",{});var CBt=s(uMe);q_r=r(CBt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),CBt.forEach(t),j_r=i(ya),tn=n(ya,"P",{});var ey=s(tn);D_r=r(ey,"The model class to instantiate is selected based on the "),pMe=n(ey,"CODE",{});var wBt=s(pMe);G_r=r(wBt,"model_type"),wBt.forEach(t),O_r=r(ey,` property of the config object (either
passed as an argument or loaded from `),_Me=n(ey,"CODE",{});var ABt=s(_Me);V_r=r(ABt,"pretrained_model_name_or_path"),ABt.forEach(t),X_r=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n(ey,"CODE",{});var LBt=s(bMe);z_r=r(LBt,"pretrained_model_name_or_path"),LBt.forEach(t),W_r=r(ey,":"),ey.forEach(t),Q_r=i(ya),vMe=n(ya,"UL",{});var yBt=s(vMe);qE=n(yBt,"LI",{});var wGe=s(qE);FMe=n(wGe,"STRONG",{});var xBt=s(FMe);U_r=r(xBt,"vilt"),xBt.forEach(t),H_r=r(wGe," \u2014 "),tJ=n(wGe,"A",{href:!0});var $Bt=s(tJ);J_r=r($Bt,"ViltForQuestionAnswering"),$Bt.forEach(t),Y_r=r(wGe," (ViLT model)"),wGe.forEach(t),yBt.forEach(t),K_r=i(ya),jE=n(ya,"P",{});var AGe=s(jE);Z_r=r(AGe,"The model is set in evaluation mode by default using "),TMe=n(AGe,"CODE",{});var kBt=s(TMe);e2r=r(kBt,"model.eval()"),kBt.forEach(t),o2r=r(AGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MMe=n(AGe,"CODE",{});var SBt=s(MMe);r2r=r(SBt,"model.train()"),SBt.forEach(t),AGe.forEach(t),t2r=i(ya),T(DE.$$.fragment,ya),ya.forEach(t),yl.forEach(t),CHe=i(m),Qd=n(m,"H2",{class:!0});var PYe=s(Qd);GE=n(PYe,"A",{id:!0,class:!0,href:!0});var RBt=s(GE);EMe=n(RBt,"SPAN",{});var PBt=s(EMe);T(vx.$$.fragment,PBt),PBt.forEach(t),RBt.forEach(t),a2r=i(PYe),CMe=n(PYe,"SPAN",{});var BBt=s(CMe);n2r=r(BBt,"AutoModelForAudioClassification"),BBt.forEach(t),PYe.forEach(t),wHe=i(m),Uo=n(m,"DIV",{class:!0});var xl=s(Uo);T(Fx.$$.fragment,xl),s2r=i(xl),Ud=n(xl,"P",{});var Dne=s(Ud);l2r=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),aJ=n(Dne,"A",{href:!0});var IBt=s(aJ);i2r=r(IBt,"from_pretrained()"),IBt.forEach(t),d2r=r(Dne," class method or the "),nJ=n(Dne,"A",{href:!0});var NBt=s(nJ);c2r=r(NBt,"from_config()"),NBt.forEach(t),m2r=r(Dne,` class
method.`),Dne.forEach(t),f2r=i(xl),Tx=n(xl,"P",{});var BYe=s(Tx);g2r=r(BYe,"This class cannot be instantiated directly using "),wMe=n(BYe,"CODE",{});var qBt=s(wMe);h2r=r(qBt,"__init__()"),qBt.forEach(t),u2r=r(BYe," (throws an error)."),BYe.forEach(t),p2r=i(xl),yt=n(xl,"DIV",{class:!0});var oy=s(yt);T(Mx.$$.fragment,oy),_2r=i(oy),AMe=n(oy,"P",{});var jBt=s(AMe);b2r=r(jBt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),jBt.forEach(t),v2r=i(oy),Hd=n(oy,"P",{});var Gne=s(Hd);F2r=r(Gne,`Note:
Loading a model from its configuration file does `),LMe=n(Gne,"STRONG",{});var DBt=s(LMe);T2r=r(DBt,"not"),DBt.forEach(t),M2r=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(Gne,"A",{href:!0});var GBt=s(sJ);E2r=r(GBt,"from_pretrained()"),GBt.forEach(t),C2r=r(Gne," to load the model weights."),Gne.forEach(t),w2r=i(oy),T(OE.$$.fragment,oy),oy.forEach(t),A2r=i(xl),ho=n(xl,"DIV",{class:!0});var xa=s(ho);T(Ex.$$.fragment,xa),L2r=i(xa),yMe=n(xa,"P",{});var OBt=s(yMe);y2r=r(OBt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),OBt.forEach(t),x2r=i(xa),an=n(xa,"P",{});var ry=s(an);$2r=r(ry,"The model class to instantiate is selected based on the "),xMe=n(ry,"CODE",{});var VBt=s(xMe);k2r=r(VBt,"model_type"),VBt.forEach(t),S2r=r(ry,` property of the config object (either
passed as an argument or loaded from `),$Me=n(ry,"CODE",{});var XBt=s($Me);R2r=r(XBt,"pretrained_model_name_or_path"),XBt.forEach(t),P2r=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(ry,"CODE",{});var zBt=s(kMe);B2r=r(zBt,"pretrained_model_name_or_path"),zBt.forEach(t),I2r=r(ry,":"),ry.forEach(t),N2r=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);VE=n(We,"LI",{});var LGe=s(VE);SMe=n(LGe,"STRONG",{});var WBt=s(SMe);q2r=r(WBt,"data2vec-audio"),WBt.forEach(t),j2r=r(LGe," \u2014 "),lJ=n(LGe,"A",{href:!0});var QBt=s(lJ);D2r=r(QBt,"Data2VecAudioForSequenceClassification"),QBt.forEach(t),G2r=r(LGe," (Data2VecAudio model)"),LGe.forEach(t),O2r=i(We),XE=n(We,"LI",{});var yGe=s(XE);RMe=n(yGe,"STRONG",{});var UBt=s(RMe);V2r=r(UBt,"hubert"),UBt.forEach(t),X2r=r(yGe," \u2014 "),iJ=n(yGe,"A",{href:!0});var HBt=s(iJ);z2r=r(HBt,"HubertForSequenceClassification"),HBt.forEach(t),W2r=r(yGe," (Hubert model)"),yGe.forEach(t),Q2r=i(We),zE=n(We,"LI",{});var xGe=s(zE);PMe=n(xGe,"STRONG",{});var JBt=s(PMe);U2r=r(JBt,"sew"),JBt.forEach(t),H2r=r(xGe," \u2014 "),dJ=n(xGe,"A",{href:!0});var YBt=s(dJ);J2r=r(YBt,"SEWForSequenceClassification"),YBt.forEach(t),Y2r=r(xGe," (SEW model)"),xGe.forEach(t),K2r=i(We),WE=n(We,"LI",{});var $Ge=s(WE);BMe=n($Ge,"STRONG",{});var KBt=s(BMe);Z2r=r(KBt,"sew-d"),KBt.forEach(t),ebr=r($Ge," \u2014 "),cJ=n($Ge,"A",{href:!0});var ZBt=s(cJ);obr=r(ZBt,"SEWDForSequenceClassification"),ZBt.forEach(t),rbr=r($Ge," (SEW-D model)"),$Ge.forEach(t),tbr=i(We),QE=n(We,"LI",{});var kGe=s(QE);IMe=n(kGe,"STRONG",{});var eIt=s(IMe);abr=r(eIt,"unispeech"),eIt.forEach(t),nbr=r(kGe," \u2014 "),mJ=n(kGe,"A",{href:!0});var oIt=s(mJ);sbr=r(oIt,"UniSpeechForSequenceClassification"),oIt.forEach(t),lbr=r(kGe," (UniSpeech model)"),kGe.forEach(t),ibr=i(We),UE=n(We,"LI",{});var SGe=s(UE);NMe=n(SGe,"STRONG",{});var rIt=s(NMe);dbr=r(rIt,"unispeech-sat"),rIt.forEach(t),cbr=r(SGe," \u2014 "),fJ=n(SGe,"A",{href:!0});var tIt=s(fJ);mbr=r(tIt,"UniSpeechSatForSequenceClassification"),tIt.forEach(t),fbr=r(SGe," (UniSpeechSat model)"),SGe.forEach(t),gbr=i(We),HE=n(We,"LI",{});var RGe=s(HE);qMe=n(RGe,"STRONG",{});var aIt=s(qMe);hbr=r(aIt,"wav2vec2"),aIt.forEach(t),ubr=r(RGe," \u2014 "),gJ=n(RGe,"A",{href:!0});var nIt=s(gJ);pbr=r(nIt,"Wav2Vec2ForSequenceClassification"),nIt.forEach(t),_br=r(RGe," (Wav2Vec2 model)"),RGe.forEach(t),bbr=i(We),JE=n(We,"LI",{});var PGe=s(JE);jMe=n(PGe,"STRONG",{});var sIt=s(jMe);vbr=r(sIt,"wav2vec2-conformer"),sIt.forEach(t),Fbr=r(PGe," \u2014 "),hJ=n(PGe,"A",{href:!0});var lIt=s(hJ);Tbr=r(lIt,"Wav2Vec2ConformerForSequenceClassification"),lIt.forEach(t),Mbr=r(PGe," (Wav2Vec2-Conformer model)"),PGe.forEach(t),Ebr=i(We),YE=n(We,"LI",{});var BGe=s(YE);DMe=n(BGe,"STRONG",{});var iIt=s(DMe);Cbr=r(iIt,"wavlm"),iIt.forEach(t),wbr=r(BGe," \u2014 "),uJ=n(BGe,"A",{href:!0});var dIt=s(uJ);Abr=r(dIt,"WavLMForSequenceClassification"),dIt.forEach(t),Lbr=r(BGe," (WavLM model)"),BGe.forEach(t),We.forEach(t),ybr=i(xa),KE=n(xa,"P",{});var IGe=s(KE);xbr=r(IGe,"The model is set in evaluation mode by default using "),GMe=n(IGe,"CODE",{});var cIt=s(GMe);$br=r(cIt,"model.eval()"),cIt.forEach(t),kbr=r(IGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OMe=n(IGe,"CODE",{});var mIt=s(OMe);Sbr=r(mIt,"model.train()"),mIt.forEach(t),IGe.forEach(t),Rbr=i(xa),T(ZE.$$.fragment,xa),xa.forEach(t),xl.forEach(t),AHe=i(m),Jd=n(m,"H2",{class:!0});var IYe=s(Jd);e4=n(IYe,"A",{id:!0,class:!0,href:!0});var fIt=s(e4);VMe=n(fIt,"SPAN",{});var gIt=s(VMe);T(Cx.$$.fragment,gIt),gIt.forEach(t),fIt.forEach(t),Pbr=i(IYe),XMe=n(IYe,"SPAN",{});var hIt=s(XMe);Bbr=r(hIt,"AutoModelForAudioFrameClassification"),hIt.forEach(t),IYe.forEach(t),LHe=i(m),Ho=n(m,"DIV",{class:!0});var $l=s(Ho);T(wx.$$.fragment,$l),Ibr=i($l),Yd=n($l,"P",{});var One=s(Yd);Nbr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pJ=n(One,"A",{href:!0});var uIt=s(pJ);qbr=r(uIt,"from_pretrained()"),uIt.forEach(t),jbr=r(One," class method or the "),_J=n(One,"A",{href:!0});var pIt=s(_J);Dbr=r(pIt,"from_config()"),pIt.forEach(t),Gbr=r(One,` class
method.`),One.forEach(t),Obr=i($l),Ax=n($l,"P",{});var NYe=s(Ax);Vbr=r(NYe,"This class cannot be instantiated directly using "),zMe=n(NYe,"CODE",{});var _It=s(zMe);Xbr=r(_It,"__init__()"),_It.forEach(t),zbr=r(NYe," (throws an error)."),NYe.forEach(t),Wbr=i($l),xt=n($l,"DIV",{class:!0});var ty=s(xt);T(Lx.$$.fragment,ty),Qbr=i(ty),WMe=n(ty,"P",{});var bIt=s(WMe);Ubr=r(bIt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bIt.forEach(t),Hbr=i(ty),Kd=n(ty,"P",{});var Vne=s(Kd);Jbr=r(Vne,`Note:
Loading a model from its configuration file does `),QMe=n(Vne,"STRONG",{});var vIt=s(QMe);Ybr=r(vIt,"not"),vIt.forEach(t),Kbr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(Vne,"A",{href:!0});var FIt=s(bJ);Zbr=r(FIt,"from_pretrained()"),FIt.forEach(t),evr=r(Vne," to load the model weights."),Vne.forEach(t),ovr=i(ty),T(o4.$$.fragment,ty),ty.forEach(t),rvr=i($l),uo=n($l,"DIV",{class:!0});var $a=s(uo);T(yx.$$.fragment,$a),tvr=i($a),UMe=n($a,"P",{});var TIt=s(UMe);avr=r(TIt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),TIt.forEach(t),nvr=i($a),nn=n($a,"P",{});var ay=s(nn);svr=r(ay,"The model class to instantiate is selected based on the "),HMe=n(ay,"CODE",{});var MIt=s(HMe);lvr=r(MIt,"model_type"),MIt.forEach(t),ivr=r(ay,` property of the config object (either
passed as an argument or loaded from `),JMe=n(ay,"CODE",{});var EIt=s(JMe);dvr=r(EIt,"pretrained_model_name_or_path"),EIt.forEach(t),cvr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(ay,"CODE",{});var CIt=s(YMe);mvr=r(CIt,"pretrained_model_name_or_path"),CIt.forEach(t),fvr=r(ay,":"),ay.forEach(t),gvr=i($a),st=n($a,"UL",{});var kl=s(st);r4=n(kl,"LI",{});var NGe=s(r4);KMe=n(NGe,"STRONG",{});var wIt=s(KMe);hvr=r(wIt,"data2vec-audio"),wIt.forEach(t),uvr=r(NGe," \u2014 "),vJ=n(NGe,"A",{href:!0});var AIt=s(vJ);pvr=r(AIt,"Data2VecAudioForAudioFrameClassification"),AIt.forEach(t),_vr=r(NGe," (Data2VecAudio model)"),NGe.forEach(t),bvr=i(kl),t4=n(kl,"LI",{});var qGe=s(t4);ZMe=n(qGe,"STRONG",{});var LIt=s(ZMe);vvr=r(LIt,"unispeech-sat"),LIt.forEach(t),Fvr=r(qGe," \u2014 "),FJ=n(qGe,"A",{href:!0});var yIt=s(FJ);Tvr=r(yIt,"UniSpeechSatForAudioFrameClassification"),yIt.forEach(t),Mvr=r(qGe," (UniSpeechSat model)"),qGe.forEach(t),Evr=i(kl),a4=n(kl,"LI",{});var jGe=s(a4);eEe=n(jGe,"STRONG",{});var xIt=s(eEe);Cvr=r(xIt,"wav2vec2"),xIt.forEach(t),wvr=r(jGe," \u2014 "),TJ=n(jGe,"A",{href:!0});var $It=s(TJ);Avr=r($It,"Wav2Vec2ForAudioFrameClassification"),$It.forEach(t),Lvr=r(jGe," (Wav2Vec2 model)"),jGe.forEach(t),yvr=i(kl),n4=n(kl,"LI",{});var DGe=s(n4);oEe=n(DGe,"STRONG",{});var kIt=s(oEe);xvr=r(kIt,"wav2vec2-conformer"),kIt.forEach(t),$vr=r(DGe," \u2014 "),MJ=n(DGe,"A",{href:!0});var SIt=s(MJ);kvr=r(SIt,"Wav2Vec2ConformerForAudioFrameClassification"),SIt.forEach(t),Svr=r(DGe," (Wav2Vec2-Conformer model)"),DGe.forEach(t),Rvr=i(kl),s4=n(kl,"LI",{});var GGe=s(s4);rEe=n(GGe,"STRONG",{});var RIt=s(rEe);Pvr=r(RIt,"wavlm"),RIt.forEach(t),Bvr=r(GGe," \u2014 "),EJ=n(GGe,"A",{href:!0});var PIt=s(EJ);Ivr=r(PIt,"WavLMForAudioFrameClassification"),PIt.forEach(t),Nvr=r(GGe," (WavLM model)"),GGe.forEach(t),kl.forEach(t),qvr=i($a),l4=n($a,"P",{});var OGe=s(l4);jvr=r(OGe,"The model is set in evaluation mode by default using "),tEe=n(OGe,"CODE",{});var BIt=s(tEe);Dvr=r(BIt,"model.eval()"),BIt.forEach(t),Gvr=r(OGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aEe=n(OGe,"CODE",{});var IIt=s(aEe);Ovr=r(IIt,"model.train()"),IIt.forEach(t),OGe.forEach(t),Vvr=i($a),T(i4.$$.fragment,$a),$a.forEach(t),$l.forEach(t),yHe=i(m),Zd=n(m,"H2",{class:!0});var qYe=s(Zd);d4=n(qYe,"A",{id:!0,class:!0,href:!0});var NIt=s(d4);nEe=n(NIt,"SPAN",{});var qIt=s(nEe);T(xx.$$.fragment,qIt),qIt.forEach(t),NIt.forEach(t),Xvr=i(qYe),sEe=n(qYe,"SPAN",{});var jIt=s(sEe);zvr=r(jIt,"AutoModelForCTC"),jIt.forEach(t),qYe.forEach(t),xHe=i(m),Jo=n(m,"DIV",{class:!0});var Sl=s(Jo);T($x.$$.fragment,Sl),Wvr=i(Sl),ec=n(Sl,"P",{});var Xne=s(ec);Qvr=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),CJ=n(Xne,"A",{href:!0});var DIt=s(CJ);Uvr=r(DIt,"from_pretrained()"),DIt.forEach(t),Hvr=r(Xne," class method or the "),wJ=n(Xne,"A",{href:!0});var GIt=s(wJ);Jvr=r(GIt,"from_config()"),GIt.forEach(t),Yvr=r(Xne,` class
method.`),Xne.forEach(t),Kvr=i(Sl),kx=n(Sl,"P",{});var jYe=s(kx);Zvr=r(jYe,"This class cannot be instantiated directly using "),lEe=n(jYe,"CODE",{});var OIt=s(lEe);e1r=r(OIt,"__init__()"),OIt.forEach(t),o1r=r(jYe," (throws an error)."),jYe.forEach(t),r1r=i(Sl),$t=n(Sl,"DIV",{class:!0});var ny=s($t);T(Sx.$$.fragment,ny),t1r=i(ny),iEe=n(ny,"P",{});var VIt=s(iEe);a1r=r(VIt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),VIt.forEach(t),n1r=i(ny),oc=n(ny,"P",{});var zne=s(oc);s1r=r(zne,`Note:
Loading a model from its configuration file does `),dEe=n(zne,"STRONG",{});var XIt=s(dEe);l1r=r(XIt,"not"),XIt.forEach(t),i1r=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=n(zne,"A",{href:!0});var zIt=s(AJ);d1r=r(zIt,"from_pretrained()"),zIt.forEach(t),c1r=r(zne," to load the model weights."),zne.forEach(t),m1r=i(ny),T(c4.$$.fragment,ny),ny.forEach(t),f1r=i(Sl),po=n(Sl,"DIV",{class:!0});var ka=s(po);T(Rx.$$.fragment,ka),g1r=i(ka),cEe=n(ka,"P",{});var WIt=s(cEe);h1r=r(WIt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),WIt.forEach(t),u1r=i(ka),sn=n(ka,"P",{});var sy=s(sn);p1r=r(sy,"The model class to instantiate is selected based on the "),mEe=n(sy,"CODE",{});var QIt=s(mEe);_1r=r(QIt,"model_type"),QIt.forEach(t),b1r=r(sy,` property of the config object (either
passed as an argument or loaded from `),fEe=n(sy,"CODE",{});var UIt=s(fEe);v1r=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),F1r=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n(sy,"CODE",{});var HIt=s(gEe);T1r=r(HIt,"pretrained_model_name_or_path"),HIt.forEach(t),M1r=r(sy,":"),sy.forEach(t),E1r=i(ka),Le=n(ka,"UL",{});var Ie=s(Le);m4=n(Ie,"LI",{});var VGe=s(m4);hEe=n(VGe,"STRONG",{});var JIt=s(hEe);C1r=r(JIt,"data2vec-audio"),JIt.forEach(t),w1r=r(VGe," \u2014 "),LJ=n(VGe,"A",{href:!0});var YIt=s(LJ);A1r=r(YIt,"Data2VecAudioForCTC"),YIt.forEach(t),L1r=r(VGe," (Data2VecAudio model)"),VGe.forEach(t),y1r=i(Ie),f4=n(Ie,"LI",{});var XGe=s(f4);uEe=n(XGe,"STRONG",{});var KIt=s(uEe);x1r=r(KIt,"hubert"),KIt.forEach(t),$1r=r(XGe," \u2014 "),yJ=n(XGe,"A",{href:!0});var ZIt=s(yJ);k1r=r(ZIt,"HubertForCTC"),ZIt.forEach(t),S1r=r(XGe," (Hubert model)"),XGe.forEach(t),R1r=i(Ie),g4=n(Ie,"LI",{});var zGe=s(g4);pEe=n(zGe,"STRONG",{});var eNt=s(pEe);P1r=r(eNt,"mctct"),eNt.forEach(t),B1r=r(zGe," \u2014 "),xJ=n(zGe,"A",{href:!0});var oNt=s(xJ);I1r=r(oNt,"MCTCTForCTC"),oNt.forEach(t),N1r=r(zGe," (M-CTC-T model)"),zGe.forEach(t),q1r=i(Ie),h4=n(Ie,"LI",{});var WGe=s(h4);_Ee=n(WGe,"STRONG",{});var rNt=s(_Ee);j1r=r(rNt,"sew"),rNt.forEach(t),D1r=r(WGe," \u2014 "),$J=n(WGe,"A",{href:!0});var tNt=s($J);G1r=r(tNt,"SEWForCTC"),tNt.forEach(t),O1r=r(WGe," (SEW model)"),WGe.forEach(t),V1r=i(Ie),u4=n(Ie,"LI",{});var QGe=s(u4);bEe=n(QGe,"STRONG",{});var aNt=s(bEe);X1r=r(aNt,"sew-d"),aNt.forEach(t),z1r=r(QGe," \u2014 "),kJ=n(QGe,"A",{href:!0});var nNt=s(kJ);W1r=r(nNt,"SEWDForCTC"),nNt.forEach(t),Q1r=r(QGe," (SEW-D model)"),QGe.forEach(t),U1r=i(Ie),p4=n(Ie,"LI",{});var UGe=s(p4);vEe=n(UGe,"STRONG",{});var sNt=s(vEe);H1r=r(sNt,"unispeech"),sNt.forEach(t),J1r=r(UGe," \u2014 "),SJ=n(UGe,"A",{href:!0});var lNt=s(SJ);Y1r=r(lNt,"UniSpeechForCTC"),lNt.forEach(t),K1r=r(UGe," (UniSpeech model)"),UGe.forEach(t),Z1r=i(Ie),_4=n(Ie,"LI",{});var HGe=s(_4);FEe=n(HGe,"STRONG",{});var iNt=s(FEe);eFr=r(iNt,"unispeech-sat"),iNt.forEach(t),oFr=r(HGe," \u2014 "),RJ=n(HGe,"A",{href:!0});var dNt=s(RJ);rFr=r(dNt,"UniSpeechSatForCTC"),dNt.forEach(t),tFr=r(HGe," (UniSpeechSat model)"),HGe.forEach(t),aFr=i(Ie),b4=n(Ie,"LI",{});var JGe=s(b4);TEe=n(JGe,"STRONG",{});var cNt=s(TEe);nFr=r(cNt,"wav2vec2"),cNt.forEach(t),sFr=r(JGe," \u2014 "),PJ=n(JGe,"A",{href:!0});var mNt=s(PJ);lFr=r(mNt,"Wav2Vec2ForCTC"),mNt.forEach(t),iFr=r(JGe," (Wav2Vec2 model)"),JGe.forEach(t),dFr=i(Ie),v4=n(Ie,"LI",{});var YGe=s(v4);MEe=n(YGe,"STRONG",{});var fNt=s(MEe);cFr=r(fNt,"wav2vec2-conformer"),fNt.forEach(t),mFr=r(YGe," \u2014 "),BJ=n(YGe,"A",{href:!0});var gNt=s(BJ);fFr=r(gNt,"Wav2Vec2ConformerForCTC"),gNt.forEach(t),gFr=r(YGe," (Wav2Vec2-Conformer model)"),YGe.forEach(t),hFr=i(Ie),F4=n(Ie,"LI",{});var KGe=s(F4);EEe=n(KGe,"STRONG",{});var hNt=s(EEe);uFr=r(hNt,"wavlm"),hNt.forEach(t),pFr=r(KGe," \u2014 "),IJ=n(KGe,"A",{href:!0});var uNt=s(IJ);_Fr=r(uNt,"WavLMForCTC"),uNt.forEach(t),bFr=r(KGe," (WavLM model)"),KGe.forEach(t),Ie.forEach(t),vFr=i(ka),T4=n(ka,"P",{});var ZGe=s(T4);FFr=r(ZGe,"The model is set in evaluation mode by default using "),CEe=n(ZGe,"CODE",{});var pNt=s(CEe);TFr=r(pNt,"model.eval()"),pNt.forEach(t),MFr=r(ZGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wEe=n(ZGe,"CODE",{});var _Nt=s(wEe);EFr=r(_Nt,"model.train()"),_Nt.forEach(t),ZGe.forEach(t),CFr=i(ka),T(M4.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),$He=i(m),rc=n(m,"H2",{class:!0});var DYe=s(rc);E4=n(DYe,"A",{id:!0,class:!0,href:!0});var bNt=s(E4);AEe=n(bNt,"SPAN",{});var vNt=s(AEe);T(Px.$$.fragment,vNt),vNt.forEach(t),bNt.forEach(t),wFr=i(DYe),LEe=n(DYe,"SPAN",{});var FNt=s(LEe);AFr=r(FNt,"AutoModelForSpeechSeq2Seq"),FNt.forEach(t),DYe.forEach(t),kHe=i(m),Yo=n(m,"DIV",{class:!0});var Rl=s(Yo);T(Bx.$$.fragment,Rl),LFr=i(Rl),tc=n(Rl,"P",{});var Wne=s(tc);yFr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NJ=n(Wne,"A",{href:!0});var TNt=s(NJ);xFr=r(TNt,"from_pretrained()"),TNt.forEach(t),$Fr=r(Wne," class method or the "),qJ=n(Wne,"A",{href:!0});var MNt=s(qJ);kFr=r(MNt,"from_config()"),MNt.forEach(t),SFr=r(Wne,` class
method.`),Wne.forEach(t),RFr=i(Rl),Ix=n(Rl,"P",{});var GYe=s(Ix);PFr=r(GYe,"This class cannot be instantiated directly using "),yEe=n(GYe,"CODE",{});var ENt=s(yEe);BFr=r(ENt,"__init__()"),ENt.forEach(t),IFr=r(GYe," (throws an error)."),GYe.forEach(t),NFr=i(Rl),kt=n(Rl,"DIV",{class:!0});var ly=s(kt);T(Nx.$$.fragment,ly),qFr=i(ly),xEe=n(ly,"P",{});var CNt=s(xEe);jFr=r(CNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CNt.forEach(t),DFr=i(ly),ac=n(ly,"P",{});var Qne=s(ac);GFr=r(Qne,`Note:
Loading a model from its configuration file does `),$Ee=n(Qne,"STRONG",{});var wNt=s($Ee);OFr=r(wNt,"not"),wNt.forEach(t),VFr=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(Qne,"A",{href:!0});var ANt=s(jJ);XFr=r(ANt,"from_pretrained()"),ANt.forEach(t),zFr=r(Qne," to load the model weights."),Qne.forEach(t),WFr=i(ly),T(C4.$$.fragment,ly),ly.forEach(t),QFr=i(Rl),_o=n(Rl,"DIV",{class:!0});var Sa=s(_o);T(qx.$$.fragment,Sa),UFr=i(Sa),kEe=n(Sa,"P",{});var LNt=s(kEe);HFr=r(LNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),LNt.forEach(t),JFr=i(Sa),ln=n(Sa,"P",{});var iy=s(ln);YFr=r(iy,"The model class to instantiate is selected based on the "),SEe=n(iy,"CODE",{});var yNt=s(SEe);KFr=r(yNt,"model_type"),yNt.forEach(t),ZFr=r(iy,` property of the config object (either
passed as an argument or loaded from `),REe=n(iy,"CODE",{});var xNt=s(REe);eTr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),oTr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(iy,"CODE",{});var $Nt=s(PEe);rTr=r($Nt,"pretrained_model_name_or_path"),$Nt.forEach(t),tTr=r(iy,":"),iy.forEach(t),aTr=i(Sa),jx=n(Sa,"UL",{});var OYe=s(jx);w4=n(OYe,"LI",{});var eOe=s(w4);BEe=n(eOe,"STRONG",{});var kNt=s(BEe);nTr=r(kNt,"speech-encoder-decoder"),kNt.forEach(t),sTr=r(eOe," \u2014 "),DJ=n(eOe,"A",{href:!0});var SNt=s(DJ);lTr=r(SNt,"SpeechEncoderDecoderModel"),SNt.forEach(t),iTr=r(eOe," (Speech Encoder decoder model)"),eOe.forEach(t),dTr=i(OYe),A4=n(OYe,"LI",{});var oOe=s(A4);IEe=n(oOe,"STRONG",{});var RNt=s(IEe);cTr=r(RNt,"speech_to_text"),RNt.forEach(t),mTr=r(oOe," \u2014 "),GJ=n(oOe,"A",{href:!0});var PNt=s(GJ);fTr=r(PNt,"Speech2TextForConditionalGeneration"),PNt.forEach(t),gTr=r(oOe," (Speech2Text model)"),oOe.forEach(t),OYe.forEach(t),hTr=i(Sa),L4=n(Sa,"P",{});var rOe=s(L4);uTr=r(rOe,"The model is set in evaluation mode by default using "),NEe=n(rOe,"CODE",{});var BNt=s(NEe);pTr=r(BNt,"model.eval()"),BNt.forEach(t),_Tr=r(rOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qEe=n(rOe,"CODE",{});var INt=s(qEe);bTr=r(INt,"model.train()"),INt.forEach(t),rOe.forEach(t),vTr=i(Sa),T(y4.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),SHe=i(m),nc=n(m,"H2",{class:!0});var VYe=s(nc);x4=n(VYe,"A",{id:!0,class:!0,href:!0});var NNt=s(x4);jEe=n(NNt,"SPAN",{});var qNt=s(jEe);T(Dx.$$.fragment,qNt),qNt.forEach(t),NNt.forEach(t),FTr=i(VYe),DEe=n(VYe,"SPAN",{});var jNt=s(DEe);TTr=r(jNt,"AutoModelForAudioXVector"),jNt.forEach(t),VYe.forEach(t),RHe=i(m),Ko=n(m,"DIV",{class:!0});var Pl=s(Ko);T(Gx.$$.fragment,Pl),MTr=i(Pl),sc=n(Pl,"P",{});var Une=s(sc);ETr=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),OJ=n(Une,"A",{href:!0});var DNt=s(OJ);CTr=r(DNt,"from_pretrained()"),DNt.forEach(t),wTr=r(Une," class method or the "),VJ=n(Une,"A",{href:!0});var GNt=s(VJ);ATr=r(GNt,"from_config()"),GNt.forEach(t),LTr=r(Une,` class
method.`),Une.forEach(t),yTr=i(Pl),Ox=n(Pl,"P",{});var XYe=s(Ox);xTr=r(XYe,"This class cannot be instantiated directly using "),GEe=n(XYe,"CODE",{});var ONt=s(GEe);$Tr=r(ONt,"__init__()"),ONt.forEach(t),kTr=r(XYe," (throws an error)."),XYe.forEach(t),STr=i(Pl),St=n(Pl,"DIV",{class:!0});var dy=s(St);T(Vx.$$.fragment,dy),RTr=i(dy),OEe=n(dy,"P",{});var VNt=s(OEe);PTr=r(VNt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),VNt.forEach(t),BTr=i(dy),lc=n(dy,"P",{});var Hne=s(lc);ITr=r(Hne,`Note:
Loading a model from its configuration file does `),VEe=n(Hne,"STRONG",{});var XNt=s(VEe);NTr=r(XNt,"not"),XNt.forEach(t),qTr=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(Hne,"A",{href:!0});var zNt=s(XJ);jTr=r(zNt,"from_pretrained()"),zNt.forEach(t),DTr=r(Hne," to load the model weights."),Hne.forEach(t),GTr=i(dy),T($4.$$.fragment,dy),dy.forEach(t),OTr=i(Pl),bo=n(Pl,"DIV",{class:!0});var Ra=s(bo);T(Xx.$$.fragment,Ra),VTr=i(Ra),XEe=n(Ra,"P",{});var WNt=s(XEe);XTr=r(WNt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),WNt.forEach(t),zTr=i(Ra),dn=n(Ra,"P",{});var cy=s(dn);WTr=r(cy,"The model class to instantiate is selected based on the "),zEe=n(cy,"CODE",{});var QNt=s(zEe);QTr=r(QNt,"model_type"),QNt.forEach(t),UTr=r(cy,` property of the config object (either
passed as an argument or loaded from `),WEe=n(cy,"CODE",{});var UNt=s(WEe);HTr=r(UNt,"pretrained_model_name_or_path"),UNt.forEach(t),JTr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(cy,"CODE",{});var HNt=s(QEe);YTr=r(HNt,"pretrained_model_name_or_path"),HNt.forEach(t),KTr=r(cy,":"),cy.forEach(t),ZTr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);k4=n(Bl,"LI",{});var tOe=s(k4);UEe=n(tOe,"STRONG",{});var JNt=s(UEe);eMr=r(JNt,"data2vec-audio"),JNt.forEach(t),oMr=r(tOe," \u2014 "),zJ=n(tOe,"A",{href:!0});var YNt=s(zJ);rMr=r(YNt,"Data2VecAudioForXVector"),YNt.forEach(t),tMr=r(tOe," (Data2VecAudio model)"),tOe.forEach(t),aMr=i(Bl),S4=n(Bl,"LI",{});var aOe=s(S4);HEe=n(aOe,"STRONG",{});var KNt=s(HEe);nMr=r(KNt,"unispeech-sat"),KNt.forEach(t),sMr=r(aOe," \u2014 "),WJ=n(aOe,"A",{href:!0});var ZNt=s(WJ);lMr=r(ZNt,"UniSpeechSatForXVector"),ZNt.forEach(t),iMr=r(aOe," (UniSpeechSat model)"),aOe.forEach(t),dMr=i(Bl),R4=n(Bl,"LI",{});var nOe=s(R4);JEe=n(nOe,"STRONG",{});var eqt=s(JEe);cMr=r(eqt,"wav2vec2"),eqt.forEach(t),mMr=r(nOe," \u2014 "),QJ=n(nOe,"A",{href:!0});var oqt=s(QJ);fMr=r(oqt,"Wav2Vec2ForXVector"),oqt.forEach(t),gMr=r(nOe," (Wav2Vec2 model)"),nOe.forEach(t),hMr=i(Bl),P4=n(Bl,"LI",{});var sOe=s(P4);YEe=n(sOe,"STRONG",{});var rqt=s(YEe);uMr=r(rqt,"wav2vec2-conformer"),rqt.forEach(t),pMr=r(sOe," \u2014 "),UJ=n(sOe,"A",{href:!0});var tqt=s(UJ);_Mr=r(tqt,"Wav2Vec2ConformerForXVector"),tqt.forEach(t),bMr=r(sOe," (Wav2Vec2-Conformer model)"),sOe.forEach(t),vMr=i(Bl),B4=n(Bl,"LI",{});var lOe=s(B4);KEe=n(lOe,"STRONG",{});var aqt=s(KEe);FMr=r(aqt,"wavlm"),aqt.forEach(t),TMr=r(lOe," \u2014 "),HJ=n(lOe,"A",{href:!0});var nqt=s(HJ);MMr=r(nqt,"WavLMForXVector"),nqt.forEach(t),EMr=r(lOe," (WavLM model)"),lOe.forEach(t),Bl.forEach(t),CMr=i(Ra),I4=n(Ra,"P",{});var iOe=s(I4);wMr=r(iOe,"The model is set in evaluation mode by default using "),ZEe=n(iOe,"CODE",{});var sqt=s(ZEe);AMr=r(sqt,"model.eval()"),sqt.forEach(t),LMr=r(iOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e4e=n(iOe,"CODE",{});var lqt=s(e4e);yMr=r(lqt,"model.train()"),lqt.forEach(t),iOe.forEach(t),xMr=i(Ra),T(N4.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),PHe=i(m),ic=n(m,"H2",{class:!0});var zYe=s(ic);q4=n(zYe,"A",{id:!0,class:!0,href:!0});var iqt=s(q4);o4e=n(iqt,"SPAN",{});var dqt=s(o4e);T(zx.$$.fragment,dqt),dqt.forEach(t),iqt.forEach(t),$Mr=i(zYe),r4e=n(zYe,"SPAN",{});var cqt=s(r4e);kMr=r(cqt,"AutoModelForMaskedImageModeling"),cqt.forEach(t),zYe.forEach(t),BHe=i(m),Zo=n(m,"DIV",{class:!0});var Il=s(Zo);T(Wx.$$.fragment,Il),SMr=i(Il),dc=n(Il,"P",{});var Jne=s(dc);RMr=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),JJ=n(Jne,"A",{href:!0});var mqt=s(JJ);PMr=r(mqt,"from_pretrained()"),mqt.forEach(t),BMr=r(Jne," class method or the "),YJ=n(Jne,"A",{href:!0});var fqt=s(YJ);IMr=r(fqt,"from_config()"),fqt.forEach(t),NMr=r(Jne,` class
method.`),Jne.forEach(t),qMr=i(Il),Qx=n(Il,"P",{});var WYe=s(Qx);jMr=r(WYe,"This class cannot be instantiated directly using "),t4e=n(WYe,"CODE",{});var gqt=s(t4e);DMr=r(gqt,"__init__()"),gqt.forEach(t),GMr=r(WYe," (throws an error)."),WYe.forEach(t),OMr=i(Il),Rt=n(Il,"DIV",{class:!0});var my=s(Rt);T(Ux.$$.fragment,my),VMr=i(my),a4e=n(my,"P",{});var hqt=s(a4e);XMr=r(hqt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),hqt.forEach(t),zMr=i(my),cc=n(my,"P",{});var Yne=s(cc);WMr=r(Yne,`Note:
Loading a model from its configuration file does `),n4e=n(Yne,"STRONG",{});var uqt=s(n4e);QMr=r(uqt,"not"),uqt.forEach(t),UMr=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(Yne,"A",{href:!0});var pqt=s(KJ);HMr=r(pqt,"from_pretrained()"),pqt.forEach(t),JMr=r(Yne," to load the model weights."),Yne.forEach(t),YMr=i(my),T(j4.$$.fragment,my),my.forEach(t),KMr=i(Il),vo=n(Il,"DIV",{class:!0});var Pa=s(vo);T(Hx.$$.fragment,Pa),ZMr=i(Pa),s4e=n(Pa,"P",{});var _qt=s(s4e);eEr=r(_qt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_qt.forEach(t),oEr=i(Pa),cn=n(Pa,"P",{});var fy=s(cn);rEr=r(fy,"The model class to instantiate is selected based on the "),l4e=n(fy,"CODE",{});var bqt=s(l4e);tEr=r(bqt,"model_type"),bqt.forEach(t),aEr=r(fy,` property of the config object (either
passed as an argument or loaded from `),i4e=n(fy,"CODE",{});var vqt=s(i4e);nEr=r(vqt,"pretrained_model_name_or_path"),vqt.forEach(t),sEr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=n(fy,"CODE",{});var Fqt=s(d4e);lEr=r(Fqt,"pretrained_model_name_or_path"),Fqt.forEach(t),iEr=r(fy,":"),fy.forEach(t),dEr=i(Pa),mn=n(Pa,"UL",{});var gy=s(mn);D4=n(gy,"LI",{});var dOe=s(D4);c4e=n(dOe,"STRONG",{});var Tqt=s(c4e);cEr=r(Tqt,"deit"),Tqt.forEach(t),mEr=r(dOe," \u2014 "),ZJ=n(dOe,"A",{href:!0});var Mqt=s(ZJ);fEr=r(Mqt,"DeiTForMaskedImageModeling"),Mqt.forEach(t),gEr=r(dOe," (DeiT model)"),dOe.forEach(t),hEr=i(gy),G4=n(gy,"LI",{});var cOe=s(G4);m4e=n(cOe,"STRONG",{});var Eqt=s(m4e);uEr=r(Eqt,"swin"),Eqt.forEach(t),pEr=r(cOe," \u2014 "),eY=n(cOe,"A",{href:!0});var Cqt=s(eY);_Er=r(Cqt,"SwinForMaskedImageModeling"),Cqt.forEach(t),bEr=r(cOe," (Swin Transformer model)"),cOe.forEach(t),vEr=i(gy),O4=n(gy,"LI",{});var mOe=s(O4);f4e=n(mOe,"STRONG",{});var wqt=s(f4e);FEr=r(wqt,"swinv2"),wqt.forEach(t),TEr=r(mOe," \u2014 "),oY=n(mOe,"A",{href:!0});var Aqt=s(oY);MEr=r(Aqt,"Swinv2ForMaskedImageModeling"),Aqt.forEach(t),EEr=r(mOe," (Swin Transformer V2 model)"),mOe.forEach(t),CEr=i(gy),V4=n(gy,"LI",{});var fOe=s(V4);g4e=n(fOe,"STRONG",{});var Lqt=s(g4e);wEr=r(Lqt,"vit"),Lqt.forEach(t),AEr=r(fOe," \u2014 "),rY=n(fOe,"A",{href:!0});var yqt=s(rY);LEr=r(yqt,"ViTForMaskedImageModeling"),yqt.forEach(t),yEr=r(fOe," (ViT model)"),fOe.forEach(t),gy.forEach(t),xEr=i(Pa),X4=n(Pa,"P",{});var gOe=s(X4);$Er=r(gOe,"The model is set in evaluation mode by default using "),h4e=n(gOe,"CODE",{});var xqt=s(h4e);kEr=r(xqt,"model.eval()"),xqt.forEach(t),SEr=r(gOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u4e=n(gOe,"CODE",{});var $qt=s(u4e);REr=r($qt,"model.train()"),$qt.forEach(t),gOe.forEach(t),PEr=i(Pa),T(z4.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),IHe=i(m),mc=n(m,"H2",{class:!0});var QYe=s(mc);W4=n(QYe,"A",{id:!0,class:!0,href:!0});var kqt=s(W4);p4e=n(kqt,"SPAN",{});var Sqt=s(p4e);T(Jx.$$.fragment,Sqt),Sqt.forEach(t),kqt.forEach(t),BEr=i(QYe),_4e=n(QYe,"SPAN",{});var Rqt=s(_4e);IEr=r(Rqt,"AutoModelForObjectDetection"),Rqt.forEach(t),QYe.forEach(t),NHe=i(m),er=n(m,"DIV",{class:!0});var Nl=s(er);T(Yx.$$.fragment,Nl),NEr=i(Nl),fc=n(Nl,"P",{});var Kne=s(fc);qEr=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tY=n(Kne,"A",{href:!0});var Pqt=s(tY);jEr=r(Pqt,"from_pretrained()"),Pqt.forEach(t),DEr=r(Kne," class method or the "),aY=n(Kne,"A",{href:!0});var Bqt=s(aY);GEr=r(Bqt,"from_config()"),Bqt.forEach(t),OEr=r(Kne,` class
method.`),Kne.forEach(t),VEr=i(Nl),Kx=n(Nl,"P",{});var UYe=s(Kx);XEr=r(UYe,"This class cannot be instantiated directly using "),b4e=n(UYe,"CODE",{});var Iqt=s(b4e);zEr=r(Iqt,"__init__()"),Iqt.forEach(t),WEr=r(UYe," (throws an error)."),UYe.forEach(t),QEr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var hy=s(Pt);T(Zx.$$.fragment,hy),UEr=i(hy),v4e=n(hy,"P",{});var Nqt=s(v4e);HEr=r(Nqt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Nqt.forEach(t),JEr=i(hy),gc=n(hy,"P",{});var Zne=s(gc);YEr=r(Zne,`Note:
Loading a model from its configuration file does `),F4e=n(Zne,"STRONG",{});var qqt=s(F4e);KEr=r(qqt,"not"),qqt.forEach(t),ZEr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(Zne,"A",{href:!0});var jqt=s(nY);e4r=r(jqt,"from_pretrained()"),jqt.forEach(t),o4r=r(Zne," to load the model weights."),Zne.forEach(t),r4r=i(hy),T(Q4.$$.fragment,hy),hy.forEach(t),t4r=i(Nl),Fo=n(Nl,"DIV",{class:!0});var Ba=s(Fo);T(e$.$$.fragment,Ba),a4r=i(Ba),T4e=n(Ba,"P",{});var Dqt=s(T4e);n4r=r(Dqt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Dqt.forEach(t),s4r=i(Ba),fn=n(Ba,"P",{});var uy=s(fn);l4r=r(uy,"The model class to instantiate is selected based on the "),M4e=n(uy,"CODE",{});var Gqt=s(M4e);i4r=r(Gqt,"model_type"),Gqt.forEach(t),d4r=r(uy,` property of the config object (either
passed as an argument or loaded from `),E4e=n(uy,"CODE",{});var Oqt=s(E4e);c4r=r(Oqt,"pretrained_model_name_or_path"),Oqt.forEach(t),m4r=r(uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(uy,"CODE",{});var Vqt=s(C4e);f4r=r(Vqt,"pretrained_model_name_or_path"),Vqt.forEach(t),g4r=r(uy,":"),uy.forEach(t),h4r=i(Ba),o$=n(Ba,"UL",{});var HYe=s(o$);U4=n(HYe,"LI",{});var hOe=s(U4);w4e=n(hOe,"STRONG",{});var Xqt=s(w4e);u4r=r(Xqt,"detr"),Xqt.forEach(t),p4r=r(hOe," \u2014 "),sY=n(hOe,"A",{href:!0});var zqt=s(sY);_4r=r(zqt,"DetrForObjectDetection"),zqt.forEach(t),b4r=r(hOe," (DETR model)"),hOe.forEach(t),v4r=i(HYe),H4=n(HYe,"LI",{});var uOe=s(H4);A4e=n(uOe,"STRONG",{});var Wqt=s(A4e);F4r=r(Wqt,"yolos"),Wqt.forEach(t),T4r=r(uOe," \u2014 "),lY=n(uOe,"A",{href:!0});var Qqt=s(lY);M4r=r(Qqt,"YolosForObjectDetection"),Qqt.forEach(t),E4r=r(uOe," (YOLOS model)"),uOe.forEach(t),HYe.forEach(t),C4r=i(Ba),J4=n(Ba,"P",{});var pOe=s(J4);w4r=r(pOe,"The model is set in evaluation mode by default using "),L4e=n(pOe,"CODE",{});var Uqt=s(L4e);A4r=r(Uqt,"model.eval()"),Uqt.forEach(t),L4r=r(pOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=n(pOe,"CODE",{});var Hqt=s(y4e);y4r=r(Hqt,"model.train()"),Hqt.forEach(t),pOe.forEach(t),x4r=i(Ba),T(Y4.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),qHe=i(m),hc=n(m,"H2",{class:!0});var JYe=s(hc);K4=n(JYe,"A",{id:!0,class:!0,href:!0});var Jqt=s(K4);x4e=n(Jqt,"SPAN",{});var Yqt=s(x4e);T(r$.$$.fragment,Yqt),Yqt.forEach(t),Jqt.forEach(t),$4r=i(JYe),$4e=n(JYe,"SPAN",{});var Kqt=s($4e);k4r=r(Kqt,"AutoModelForImageSegmentation"),Kqt.forEach(t),JYe.forEach(t),jHe=i(m),or=n(m,"DIV",{class:!0});var ql=s(or);T(t$.$$.fragment,ql),S4r=i(ql),uc=n(ql,"P",{});var ese=s(uc);R4r=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iY=n(ese,"A",{href:!0});var Zqt=s(iY);P4r=r(Zqt,"from_pretrained()"),Zqt.forEach(t),B4r=r(ese," class method or the "),dY=n(ese,"A",{href:!0});var ejt=s(dY);I4r=r(ejt,"from_config()"),ejt.forEach(t),N4r=r(ese,` class
method.`),ese.forEach(t),q4r=i(ql),a$=n(ql,"P",{});var YYe=s(a$);j4r=r(YYe,"This class cannot be instantiated directly using "),k4e=n(YYe,"CODE",{});var ojt=s(k4e);D4r=r(ojt,"__init__()"),ojt.forEach(t),G4r=r(YYe," (throws an error)."),YYe.forEach(t),O4r=i(ql),Bt=n(ql,"DIV",{class:!0});var py=s(Bt);T(n$.$$.fragment,py),V4r=i(py),S4e=n(py,"P",{});var rjt=s(S4e);X4r=r(rjt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rjt.forEach(t),z4r=i(py),pc=n(py,"P",{});var ose=s(pc);W4r=r(ose,`Note:
Loading a model from its configuration file does `),R4e=n(ose,"STRONG",{});var tjt=s(R4e);Q4r=r(tjt,"not"),tjt.forEach(t),U4r=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(ose,"A",{href:!0});var ajt=s(cY);H4r=r(ajt,"from_pretrained()"),ajt.forEach(t),J4r=r(ose," to load the model weights."),ose.forEach(t),Y4r=i(py),T(Z4.$$.fragment,py),py.forEach(t),K4r=i(ql),To=n(ql,"DIV",{class:!0});var Ia=s(To);T(s$.$$.fragment,Ia),Z4r=i(Ia),P4e=n(Ia,"P",{});var njt=s(P4e);eCr=r(njt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),njt.forEach(t),oCr=i(Ia),gn=n(Ia,"P",{});var _y=s(gn);rCr=r(_y,"The model class to instantiate is selected based on the "),B4e=n(_y,"CODE",{});var sjt=s(B4e);tCr=r(sjt,"model_type"),sjt.forEach(t),aCr=r(_y,` property of the config object (either
passed as an argument or loaded from `),I4e=n(_y,"CODE",{});var ljt=s(I4e);nCr=r(ljt,"pretrained_model_name_or_path"),ljt.forEach(t),sCr=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(_y,"CODE",{});var ijt=s(N4e);lCr=r(ijt,"pretrained_model_name_or_path"),ijt.forEach(t),iCr=r(_y,":"),_y.forEach(t),dCr=i(Ia),q4e=n(Ia,"UL",{});var djt=s(q4e);eC=n(djt,"LI",{});var _Oe=s(eC);j4e=n(_Oe,"STRONG",{});var cjt=s(j4e);cCr=r(cjt,"detr"),cjt.forEach(t),mCr=r(_Oe," \u2014 "),mY=n(_Oe,"A",{href:!0});var mjt=s(mY);fCr=r(mjt,"DetrForSegmentation"),mjt.forEach(t),gCr=r(_Oe," (DETR model)"),_Oe.forEach(t),djt.forEach(t),hCr=i(Ia),oC=n(Ia,"P",{});var bOe=s(oC);uCr=r(bOe,"The model is set in evaluation mode by default using "),D4e=n(bOe,"CODE",{});var fjt=s(D4e);pCr=r(fjt,"model.eval()"),fjt.forEach(t),_Cr=r(bOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=n(bOe,"CODE",{});var gjt=s(G4e);bCr=r(gjt,"model.train()"),gjt.forEach(t),bOe.forEach(t),vCr=i(Ia),T(rC.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),DHe=i(m),_c=n(m,"H2",{class:!0});var KYe=s(_c);tC=n(KYe,"A",{id:!0,class:!0,href:!0});var hjt=s(tC);O4e=n(hjt,"SPAN",{});var ujt=s(O4e);T(l$.$$.fragment,ujt),ujt.forEach(t),hjt.forEach(t),FCr=i(KYe),V4e=n(KYe,"SPAN",{});var pjt=s(V4e);TCr=r(pjt,"AutoModelForSemanticSegmentation"),pjt.forEach(t),KYe.forEach(t),GHe=i(m),rr=n(m,"DIV",{class:!0});var jl=s(rr);T(i$.$$.fragment,jl),MCr=i(jl),bc=n(jl,"P",{});var rse=s(bc);ECr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),fY=n(rse,"A",{href:!0});var _jt=s(fY);CCr=r(_jt,"from_pretrained()"),_jt.forEach(t),wCr=r(rse," class method or the "),gY=n(rse,"A",{href:!0});var bjt=s(gY);ACr=r(bjt,"from_config()"),bjt.forEach(t),LCr=r(rse,` class
method.`),rse.forEach(t),yCr=i(jl),d$=n(jl,"P",{});var ZYe=s(d$);xCr=r(ZYe,"This class cannot be instantiated directly using "),X4e=n(ZYe,"CODE",{});var vjt=s(X4e);$Cr=r(vjt,"__init__()"),vjt.forEach(t),kCr=r(ZYe," (throws an error)."),ZYe.forEach(t),SCr=i(jl),It=n(jl,"DIV",{class:!0});var by=s(It);T(c$.$$.fragment,by),RCr=i(by),z4e=n(by,"P",{});var Fjt=s(z4e);PCr=r(Fjt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Fjt.forEach(t),BCr=i(by),vc=n(by,"P",{});var tse=s(vc);ICr=r(tse,`Note:
Loading a model from its configuration file does `),W4e=n(tse,"STRONG",{});var Tjt=s(W4e);NCr=r(Tjt,"not"),Tjt.forEach(t),qCr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(tse,"A",{href:!0});var Mjt=s(hY);jCr=r(Mjt,"from_pretrained()"),Mjt.forEach(t),DCr=r(tse," to load the model weights."),tse.forEach(t),GCr=i(by),T(aC.$$.fragment,by),by.forEach(t),OCr=i(jl),Mo=n(jl,"DIV",{class:!0});var Na=s(Mo);T(m$.$$.fragment,Na),VCr=i(Na),Q4e=n(Na,"P",{});var Ejt=s(Q4e);XCr=r(Ejt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ejt.forEach(t),zCr=i(Na),hn=n(Na,"P",{});var vy=s(hn);WCr=r(vy,"The model class to instantiate is selected based on the "),U4e=n(vy,"CODE",{});var Cjt=s(U4e);QCr=r(Cjt,"model_type"),Cjt.forEach(t),UCr=r(vy,` property of the config object (either
passed as an argument or loaded from `),H4e=n(vy,"CODE",{});var wjt=s(H4e);HCr=r(wjt,"pretrained_model_name_or_path"),wjt.forEach(t),JCr=r(vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(vy,"CODE",{});var Ajt=s(J4e);YCr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),KCr=r(vy,":"),vy.forEach(t),ZCr=i(Na),it=n(Na,"UL",{});var Dl=s(it);nC=n(Dl,"LI",{});var vOe=s(nC);Y4e=n(vOe,"STRONG",{});var Ljt=s(Y4e);e3r=r(Ljt,"beit"),Ljt.forEach(t),o3r=r(vOe," \u2014 "),uY=n(vOe,"A",{href:!0});var yjt=s(uY);r3r=r(yjt,"BeitForSemanticSegmentation"),yjt.forEach(t),t3r=r(vOe," (BEiT model)"),vOe.forEach(t),a3r=i(Dl),sC=n(Dl,"LI",{});var FOe=s(sC);K4e=n(FOe,"STRONG",{});var xjt=s(K4e);n3r=r(xjt,"data2vec-vision"),xjt.forEach(t),s3r=r(FOe," \u2014 "),pY=n(FOe,"A",{href:!0});var $jt=s(pY);l3r=r($jt,"Data2VecVisionForSemanticSegmentation"),$jt.forEach(t),i3r=r(FOe," (Data2VecVision model)"),FOe.forEach(t),d3r=i(Dl),lC=n(Dl,"LI",{});var TOe=s(lC);Z4e=n(TOe,"STRONG",{});var kjt=s(Z4e);c3r=r(kjt,"dpt"),kjt.forEach(t),m3r=r(TOe," \u2014 "),_Y=n(TOe,"A",{href:!0});var Sjt=s(_Y);f3r=r(Sjt,"DPTForSemanticSegmentation"),Sjt.forEach(t),g3r=r(TOe," (DPT model)"),TOe.forEach(t),h3r=i(Dl),iC=n(Dl,"LI",{});var MOe=s(iC);eCe=n(MOe,"STRONG",{});var Rjt=s(eCe);u3r=r(Rjt,"mobilevit"),Rjt.forEach(t),p3r=r(MOe," \u2014 "),bY=n(MOe,"A",{href:!0});var Pjt=s(bY);_3r=r(Pjt,"MobileViTForSemanticSegmentation"),Pjt.forEach(t),b3r=r(MOe," (MobileViT model)"),MOe.forEach(t),v3r=i(Dl),dC=n(Dl,"LI",{});var EOe=s(dC);oCe=n(EOe,"STRONG",{});var Bjt=s(oCe);F3r=r(Bjt,"segformer"),Bjt.forEach(t),T3r=r(EOe," \u2014 "),vY=n(EOe,"A",{href:!0});var Ijt=s(vY);M3r=r(Ijt,"SegformerForSemanticSegmentation"),Ijt.forEach(t),E3r=r(EOe," (SegFormer model)"),EOe.forEach(t),Dl.forEach(t),C3r=i(Na),cC=n(Na,"P",{});var COe=s(cC);w3r=r(COe,"The model is set in evaluation mode by default using "),rCe=n(COe,"CODE",{});var Njt=s(rCe);A3r=r(Njt,"model.eval()"),Njt.forEach(t),L3r=r(COe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tCe=n(COe,"CODE",{});var qjt=s(tCe);y3r=r(qjt,"model.train()"),qjt.forEach(t),COe.forEach(t),x3r=i(Na),T(mC.$$.fragment,Na),Na.forEach(t),jl.forEach(t),OHe=i(m),Fc=n(m,"H2",{class:!0});var eKe=s(Fc);fC=n(eKe,"A",{id:!0,class:!0,href:!0});var jjt=s(fC);aCe=n(jjt,"SPAN",{});var Djt=s(aCe);T(f$.$$.fragment,Djt),Djt.forEach(t),jjt.forEach(t),$3r=i(eKe),nCe=n(eKe,"SPAN",{});var Gjt=s(nCe);k3r=r(Gjt,"AutoModelForInstanceSegmentation"),Gjt.forEach(t),eKe.forEach(t),VHe=i(m),tr=n(m,"DIV",{class:!0});var Gl=s(tr);T(g$.$$.fragment,Gl),S3r=i(Gl),Tc=n(Gl,"P",{});var ase=s(Tc);R3r=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),FY=n(ase,"A",{href:!0});var Ojt=s(FY);P3r=r(Ojt,"from_pretrained()"),Ojt.forEach(t),B3r=r(ase," class method or the "),TY=n(ase,"A",{href:!0});var Vjt=s(TY);I3r=r(Vjt,"from_config()"),Vjt.forEach(t),N3r=r(ase,` class
method.`),ase.forEach(t),q3r=i(Gl),h$=n(Gl,"P",{});var oKe=s(h$);j3r=r(oKe,"This class cannot be instantiated directly using "),sCe=n(oKe,"CODE",{});var Xjt=s(sCe);D3r=r(Xjt,"__init__()"),Xjt.forEach(t),G3r=r(oKe," (throws an error)."),oKe.forEach(t),O3r=i(Gl),Nt=n(Gl,"DIV",{class:!0});var Fy=s(Nt);T(u$.$$.fragment,Fy),V3r=i(Fy),lCe=n(Fy,"P",{});var zjt=s(lCe);X3r=r(zjt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zjt.forEach(t),z3r=i(Fy),Mc=n(Fy,"P",{});var nse=s(Mc);W3r=r(nse,`Note:
Loading a model from its configuration file does `),iCe=n(nse,"STRONG",{});var Wjt=s(iCe);Q3r=r(Wjt,"not"),Wjt.forEach(t),U3r=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n(nse,"A",{href:!0});var Qjt=s(MY);H3r=r(Qjt,"from_pretrained()"),Qjt.forEach(t),J3r=r(nse," to load the model weights."),nse.forEach(t),Y3r=i(Fy),T(gC.$$.fragment,Fy),Fy.forEach(t),K3r=i(Gl),Eo=n(Gl,"DIV",{class:!0});var qa=s(Eo);T(p$.$$.fragment,qa),Z3r=i(qa),dCe=n(qa,"P",{});var Ujt=s(dCe);e5r=r(Ujt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ujt.forEach(t),o5r=i(qa),un=n(qa,"P",{});var Ty=s(un);r5r=r(Ty,"The model class to instantiate is selected based on the "),cCe=n(Ty,"CODE",{});var Hjt=s(cCe);t5r=r(Hjt,"model_type"),Hjt.forEach(t),a5r=r(Ty,` property of the config object (either
passed as an argument or loaded from `),mCe=n(Ty,"CODE",{});var Jjt=s(mCe);n5r=r(Jjt,"pretrained_model_name_or_path"),Jjt.forEach(t),s5r=r(Ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n(Ty,"CODE",{});var Yjt=s(fCe);l5r=r(Yjt,"pretrained_model_name_or_path"),Yjt.forEach(t),i5r=r(Ty,":"),Ty.forEach(t),d5r=i(qa),gCe=n(qa,"UL",{});var Kjt=s(gCe);hC=n(Kjt,"LI",{});var wOe=s(hC);hCe=n(wOe,"STRONG",{});var Zjt=s(hCe);c5r=r(Zjt,"maskformer"),Zjt.forEach(t),m5r=r(wOe," \u2014 "),EY=n(wOe,"A",{href:!0});var eDt=s(EY);f5r=r(eDt,"MaskFormerForInstanceSegmentation"),eDt.forEach(t),g5r=r(wOe," (MaskFormer model)"),wOe.forEach(t),Kjt.forEach(t),h5r=i(qa),uC=n(qa,"P",{});var AOe=s(uC);u5r=r(AOe,"The model is set in evaluation mode by default using "),uCe=n(AOe,"CODE",{});var oDt=s(uCe);p5r=r(oDt,"model.eval()"),oDt.forEach(t),_5r=r(AOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pCe=n(AOe,"CODE",{});var rDt=s(pCe);b5r=r(rDt,"model.train()"),rDt.forEach(t),AOe.forEach(t),v5r=i(qa),T(pC.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),XHe=i(m),Ec=n(m,"H2",{class:!0});var rKe=s(Ec);_C=n(rKe,"A",{id:!0,class:!0,href:!0});var tDt=s(_C);_Ce=n(tDt,"SPAN",{});var aDt=s(_Ce);T(_$.$$.fragment,aDt),aDt.forEach(t),tDt.forEach(t),F5r=i(rKe),bCe=n(rKe,"SPAN",{});var nDt=s(bCe);T5r=r(nDt,"TFAutoModel"),nDt.forEach(t),rKe.forEach(t),zHe=i(m),ar=n(m,"DIV",{class:!0});var Ol=s(ar);T(b$.$$.fragment,Ol),M5r=i(Ol),Cc=n(Ol,"P",{});var sse=s(Cc);E5r=r(sse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CY=n(sse,"A",{href:!0});var sDt=s(CY);C5r=r(sDt,"from_pretrained()"),sDt.forEach(t),w5r=r(sse," class method or the "),wY=n(sse,"A",{href:!0});var lDt=s(wY);A5r=r(lDt,"from_config()"),lDt.forEach(t),L5r=r(sse,` class
method.`),sse.forEach(t),y5r=i(Ol),v$=n(Ol,"P",{});var tKe=s(v$);x5r=r(tKe,"This class cannot be instantiated directly using "),vCe=n(tKe,"CODE",{});var iDt=s(vCe);$5r=r(iDt,"__init__()"),iDt.forEach(t),k5r=r(tKe," (throws an error)."),tKe.forEach(t),S5r=i(Ol),qt=n(Ol,"DIV",{class:!0});var My=s(qt);T(F$.$$.fragment,My),R5r=i(My),FCe=n(My,"P",{});var dDt=s(FCe);P5r=r(dDt,"Instantiates one of the base model classes of the library from a configuration."),dDt.forEach(t),B5r=i(My),wc=n(My,"P",{});var lse=s(wc);I5r=r(lse,`Note:
Loading a model from its configuration file does `),TCe=n(lse,"STRONG",{});var cDt=s(TCe);N5r=r(cDt,"not"),cDt.forEach(t),q5r=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=n(lse,"A",{href:!0});var mDt=s(AY);j5r=r(mDt,"from_pretrained()"),mDt.forEach(t),D5r=r(lse," to load the model weights."),lse.forEach(t),G5r=i(My),T(bC.$$.fragment,My),My.forEach(t),O5r=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(T$.$$.fragment,Vl),V5r=i(Vl),MCe=n(Vl,"P",{});var fDt=s(MCe);X5r=r(fDt,"Instantiate one of the base model classes of the library from a pretrained model."),fDt.forEach(t),z5r=i(Vl),pn=n(Vl,"P",{});var Ey=s(pn);W5r=r(Ey,"The model class to instantiate is selected based on the "),ECe=n(Ey,"CODE",{});var gDt=s(ECe);Q5r=r(gDt,"model_type"),gDt.forEach(t),U5r=r(Ey,` property of the config object (either
passed as an argument or loaded from `),CCe=n(Ey,"CODE",{});var hDt=s(CCe);H5r=r(hDt,"pretrained_model_name_or_path"),hDt.forEach(t),J5r=r(Ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(Ey,"CODE",{});var uDt=s(wCe);Y5r=r(uDt,"pretrained_model_name_or_path"),uDt.forEach(t),K5r=r(Ey,":"),Ey.forEach(t),Z5r=i(Vl),P=n(Vl,"UL",{});var I=s(P);vC=n(I,"LI",{});var LOe=s(vC);ACe=n(LOe,"STRONG",{});var pDt=s(ACe);e0r=r(pDt,"albert"),pDt.forEach(t),o0r=r(LOe," \u2014 "),LY=n(LOe,"A",{href:!0});var _Dt=s(LY);r0r=r(_Dt,"TFAlbertModel"),_Dt.forEach(t),t0r=r(LOe," (ALBERT model)"),LOe.forEach(t),a0r=i(I),FC=n(I,"LI",{});var yOe=s(FC);LCe=n(yOe,"STRONG",{});var bDt=s(LCe);n0r=r(bDt,"bart"),bDt.forEach(t),s0r=r(yOe," \u2014 "),yY=n(yOe,"A",{href:!0});var vDt=s(yY);l0r=r(vDt,"TFBartModel"),vDt.forEach(t),i0r=r(yOe," (BART model)"),yOe.forEach(t),d0r=i(I),TC=n(I,"LI",{});var xOe=s(TC);yCe=n(xOe,"STRONG",{});var FDt=s(yCe);c0r=r(FDt,"bert"),FDt.forEach(t),m0r=r(xOe," \u2014 "),xY=n(xOe,"A",{href:!0});var TDt=s(xY);f0r=r(TDt,"TFBertModel"),TDt.forEach(t),g0r=r(xOe," (BERT model)"),xOe.forEach(t),h0r=i(I),MC=n(I,"LI",{});var $Oe=s(MC);xCe=n($Oe,"STRONG",{});var MDt=s(xCe);u0r=r(MDt,"blenderbot"),MDt.forEach(t),p0r=r($Oe," \u2014 "),$Y=n($Oe,"A",{href:!0});var EDt=s($Y);_0r=r(EDt,"TFBlenderbotModel"),EDt.forEach(t),b0r=r($Oe," (Blenderbot model)"),$Oe.forEach(t),v0r=i(I),EC=n(I,"LI",{});var kOe=s(EC);$Ce=n(kOe,"STRONG",{});var CDt=s($Ce);F0r=r(CDt,"blenderbot-small"),CDt.forEach(t),T0r=r(kOe," \u2014 "),kY=n(kOe,"A",{href:!0});var wDt=s(kY);M0r=r(wDt,"TFBlenderbotSmallModel"),wDt.forEach(t),E0r=r(kOe," (BlenderbotSmall model)"),kOe.forEach(t),C0r=i(I),CC=n(I,"LI",{});var SOe=s(CC);kCe=n(SOe,"STRONG",{});var ADt=s(kCe);w0r=r(ADt,"camembert"),ADt.forEach(t),A0r=r(SOe," \u2014 "),SY=n(SOe,"A",{href:!0});var LDt=s(SY);L0r=r(LDt,"TFCamembertModel"),LDt.forEach(t),y0r=r(SOe," (CamemBERT model)"),SOe.forEach(t),x0r=i(I),wC=n(I,"LI",{});var ROe=s(wC);SCe=n(ROe,"STRONG",{});var yDt=s(SCe);$0r=r(yDt,"clip"),yDt.forEach(t),k0r=r(ROe," \u2014 "),RY=n(ROe,"A",{href:!0});var xDt=s(RY);S0r=r(xDt,"TFCLIPModel"),xDt.forEach(t),R0r=r(ROe," (CLIP model)"),ROe.forEach(t),P0r=i(I),AC=n(I,"LI",{});var POe=s(AC);RCe=n(POe,"STRONG",{});var $Dt=s(RCe);B0r=r($Dt,"convbert"),$Dt.forEach(t),I0r=r(POe," \u2014 "),PY=n(POe,"A",{href:!0});var kDt=s(PY);N0r=r(kDt,"TFConvBertModel"),kDt.forEach(t),q0r=r(POe," (ConvBERT model)"),POe.forEach(t),j0r=i(I),LC=n(I,"LI",{});var BOe=s(LC);PCe=n(BOe,"STRONG",{});var SDt=s(PCe);D0r=r(SDt,"convnext"),SDt.forEach(t),G0r=r(BOe," \u2014 "),BY=n(BOe,"A",{href:!0});var RDt=s(BY);O0r=r(RDt,"TFConvNextModel"),RDt.forEach(t),V0r=r(BOe," (ConvNeXT model)"),BOe.forEach(t),X0r=i(I),yC=n(I,"LI",{});var IOe=s(yC);BCe=n(IOe,"STRONG",{});var PDt=s(BCe);z0r=r(PDt,"ctrl"),PDt.forEach(t),W0r=r(IOe," \u2014 "),IY=n(IOe,"A",{href:!0});var BDt=s(IY);Q0r=r(BDt,"TFCTRLModel"),BDt.forEach(t),U0r=r(IOe," (CTRL model)"),IOe.forEach(t),H0r=i(I),xC=n(I,"LI",{});var NOe=s(xC);ICe=n(NOe,"STRONG",{});var IDt=s(ICe);J0r=r(IDt,"data2vec-vision"),IDt.forEach(t),Y0r=r(NOe," \u2014 "),NY=n(NOe,"A",{href:!0});var NDt=s(NY);K0r=r(NDt,"TFData2VecVisionModel"),NDt.forEach(t),Z0r=r(NOe," (Data2VecVision model)"),NOe.forEach(t),ewr=i(I),$C=n(I,"LI",{});var qOe=s($C);NCe=n(qOe,"STRONG",{});var qDt=s(NCe);owr=r(qDt,"deberta"),qDt.forEach(t),rwr=r(qOe," \u2014 "),qY=n(qOe,"A",{href:!0});var jDt=s(qY);twr=r(jDt,"TFDebertaModel"),jDt.forEach(t),awr=r(qOe," (DeBERTa model)"),qOe.forEach(t),nwr=i(I),kC=n(I,"LI",{});var jOe=s(kC);qCe=n(jOe,"STRONG",{});var DDt=s(qCe);swr=r(DDt,"deberta-v2"),DDt.forEach(t),lwr=r(jOe," \u2014 "),jY=n(jOe,"A",{href:!0});var GDt=s(jY);iwr=r(GDt,"TFDebertaV2Model"),GDt.forEach(t),dwr=r(jOe," (DeBERTa-v2 model)"),jOe.forEach(t),cwr=i(I),SC=n(I,"LI",{});var DOe=s(SC);jCe=n(DOe,"STRONG",{});var ODt=s(jCe);mwr=r(ODt,"deit"),ODt.forEach(t),fwr=r(DOe," \u2014 "),DY=n(DOe,"A",{href:!0});var VDt=s(DY);gwr=r(VDt,"TFDeiTModel"),VDt.forEach(t),hwr=r(DOe," (DeiT model)"),DOe.forEach(t),uwr=i(I),RC=n(I,"LI",{});var GOe=s(RC);DCe=n(GOe,"STRONG",{});var XDt=s(DCe);pwr=r(XDt,"distilbert"),XDt.forEach(t),_wr=r(GOe," \u2014 "),GY=n(GOe,"A",{href:!0});var zDt=s(GY);bwr=r(zDt,"TFDistilBertModel"),zDt.forEach(t),vwr=r(GOe," (DistilBERT model)"),GOe.forEach(t),Fwr=i(I),PC=n(I,"LI",{});var OOe=s(PC);GCe=n(OOe,"STRONG",{});var WDt=s(GCe);Twr=r(WDt,"dpr"),WDt.forEach(t),Mwr=r(OOe," \u2014 "),OY=n(OOe,"A",{href:!0});var QDt=s(OY);Ewr=r(QDt,"TFDPRQuestionEncoder"),QDt.forEach(t),Cwr=r(OOe," (DPR model)"),OOe.forEach(t),wwr=i(I),BC=n(I,"LI",{});var VOe=s(BC);OCe=n(VOe,"STRONG",{});var UDt=s(OCe);Awr=r(UDt,"electra"),UDt.forEach(t),Lwr=r(VOe," \u2014 "),VY=n(VOe,"A",{href:!0});var HDt=s(VY);ywr=r(HDt,"TFElectraModel"),HDt.forEach(t),xwr=r(VOe," (ELECTRA model)"),VOe.forEach(t),$wr=i(I),IC=n(I,"LI",{});var XOe=s(IC);VCe=n(XOe,"STRONG",{});var JDt=s(VCe);kwr=r(JDt,"flaubert"),JDt.forEach(t),Swr=r(XOe," \u2014 "),XY=n(XOe,"A",{href:!0});var YDt=s(XY);Rwr=r(YDt,"TFFlaubertModel"),YDt.forEach(t),Pwr=r(XOe," (FlauBERT model)"),XOe.forEach(t),Bwr=i(I),il=n(I,"LI",{});var gP=s(il);XCe=n(gP,"STRONG",{});var KDt=s(XCe);Iwr=r(KDt,"funnel"),KDt.forEach(t),Nwr=r(gP," \u2014 "),zY=n(gP,"A",{href:!0});var ZDt=s(zY);qwr=r(ZDt,"TFFunnelModel"),ZDt.forEach(t),jwr=r(gP," or "),WY=n(gP,"A",{href:!0});var eGt=s(WY);Dwr=r(eGt,"TFFunnelBaseModel"),eGt.forEach(t),Gwr=r(gP," (Funnel Transformer model)"),gP.forEach(t),Owr=i(I),NC=n(I,"LI",{});var zOe=s(NC);zCe=n(zOe,"STRONG",{});var oGt=s(zCe);Vwr=r(oGt,"gpt2"),oGt.forEach(t),Xwr=r(zOe," \u2014 "),QY=n(zOe,"A",{href:!0});var rGt=s(QY);zwr=r(rGt,"TFGPT2Model"),rGt.forEach(t),Wwr=r(zOe," (OpenAI GPT-2 model)"),zOe.forEach(t),Qwr=i(I),qC=n(I,"LI",{});var WOe=s(qC);WCe=n(WOe,"STRONG",{});var tGt=s(WCe);Uwr=r(tGt,"gptj"),tGt.forEach(t),Hwr=r(WOe," \u2014 "),UY=n(WOe,"A",{href:!0});var aGt=s(UY);Jwr=r(aGt,"TFGPTJModel"),aGt.forEach(t),Ywr=r(WOe," (GPT-J model)"),WOe.forEach(t),Kwr=i(I),jC=n(I,"LI",{});var QOe=s(jC);QCe=n(QOe,"STRONG",{});var nGt=s(QCe);Zwr=r(nGt,"hubert"),nGt.forEach(t),e6r=r(QOe," \u2014 "),HY=n(QOe,"A",{href:!0});var sGt=s(HY);o6r=r(sGt,"TFHubertModel"),sGt.forEach(t),r6r=r(QOe," (Hubert model)"),QOe.forEach(t),t6r=i(I),DC=n(I,"LI",{});var UOe=s(DC);UCe=n(UOe,"STRONG",{});var lGt=s(UCe);a6r=r(lGt,"layoutlm"),lGt.forEach(t),n6r=r(UOe," \u2014 "),JY=n(UOe,"A",{href:!0});var iGt=s(JY);s6r=r(iGt,"TFLayoutLMModel"),iGt.forEach(t),l6r=r(UOe," (LayoutLM model)"),UOe.forEach(t),i6r=i(I),GC=n(I,"LI",{});var HOe=s(GC);HCe=n(HOe,"STRONG",{});var dGt=s(HCe);d6r=r(dGt,"layoutlmv3"),dGt.forEach(t),c6r=r(HOe," \u2014 "),YY=n(HOe,"A",{href:!0});var cGt=s(YY);m6r=r(cGt,"TFLayoutLMv3Model"),cGt.forEach(t),f6r=r(HOe," (LayoutLMv3 model)"),HOe.forEach(t),g6r=i(I),OC=n(I,"LI",{});var JOe=s(OC);JCe=n(JOe,"STRONG",{});var mGt=s(JCe);h6r=r(mGt,"led"),mGt.forEach(t),u6r=r(JOe," \u2014 "),KY=n(JOe,"A",{href:!0});var fGt=s(KY);p6r=r(fGt,"TFLEDModel"),fGt.forEach(t),_6r=r(JOe," (LED model)"),JOe.forEach(t),b6r=i(I),VC=n(I,"LI",{});var YOe=s(VC);YCe=n(YOe,"STRONG",{});var gGt=s(YCe);v6r=r(gGt,"longformer"),gGt.forEach(t),F6r=r(YOe," \u2014 "),ZY=n(YOe,"A",{href:!0});var hGt=s(ZY);T6r=r(hGt,"TFLongformerModel"),hGt.forEach(t),M6r=r(YOe," (Longformer model)"),YOe.forEach(t),E6r=i(I),XC=n(I,"LI",{});var KOe=s(XC);KCe=n(KOe,"STRONG",{});var uGt=s(KCe);C6r=r(uGt,"lxmert"),uGt.forEach(t),w6r=r(KOe," \u2014 "),eK=n(KOe,"A",{href:!0});var pGt=s(eK);A6r=r(pGt,"TFLxmertModel"),pGt.forEach(t),L6r=r(KOe," (LXMERT model)"),KOe.forEach(t),y6r=i(I),zC=n(I,"LI",{});var ZOe=s(zC);ZCe=n(ZOe,"STRONG",{});var _Gt=s(ZCe);x6r=r(_Gt,"marian"),_Gt.forEach(t),$6r=r(ZOe," \u2014 "),oK=n(ZOe,"A",{href:!0});var bGt=s(oK);k6r=r(bGt,"TFMarianModel"),bGt.forEach(t),S6r=r(ZOe," (Marian model)"),ZOe.forEach(t),R6r=i(I),WC=n(I,"LI",{});var eVe=s(WC);e3e=n(eVe,"STRONG",{});var vGt=s(e3e);P6r=r(vGt,"mbart"),vGt.forEach(t),B6r=r(eVe," \u2014 "),rK=n(eVe,"A",{href:!0});var FGt=s(rK);I6r=r(FGt,"TFMBartModel"),FGt.forEach(t),N6r=r(eVe," (mBART model)"),eVe.forEach(t),q6r=i(I),QC=n(I,"LI",{});var oVe=s(QC);o3e=n(oVe,"STRONG",{});var TGt=s(o3e);j6r=r(TGt,"mobilebert"),TGt.forEach(t),D6r=r(oVe," \u2014 "),tK=n(oVe,"A",{href:!0});var MGt=s(tK);G6r=r(MGt,"TFMobileBertModel"),MGt.forEach(t),O6r=r(oVe," (MobileBERT model)"),oVe.forEach(t),V6r=i(I),UC=n(I,"LI",{});var rVe=s(UC);r3e=n(rVe,"STRONG",{});var EGt=s(r3e);X6r=r(EGt,"mobilevit"),EGt.forEach(t),z6r=r(rVe," \u2014 "),aK=n(rVe,"A",{href:!0});var CGt=s(aK);W6r=r(CGt,"TFMobileViTModel"),CGt.forEach(t),Q6r=r(rVe," (MobileViT model)"),rVe.forEach(t),U6r=i(I),HC=n(I,"LI",{});var tVe=s(HC);t3e=n(tVe,"STRONG",{});var wGt=s(t3e);H6r=r(wGt,"mpnet"),wGt.forEach(t),J6r=r(tVe," \u2014 "),nK=n(tVe,"A",{href:!0});var AGt=s(nK);Y6r=r(AGt,"TFMPNetModel"),AGt.forEach(t),K6r=r(tVe," (MPNet model)"),tVe.forEach(t),Z6r=i(I),JC=n(I,"LI",{});var aVe=s(JC);a3e=n(aVe,"STRONG",{});var LGt=s(a3e);eAr=r(LGt,"mt5"),LGt.forEach(t),oAr=r(aVe," \u2014 "),sK=n(aVe,"A",{href:!0});var yGt=s(sK);rAr=r(yGt,"TFMT5Model"),yGt.forEach(t),tAr=r(aVe," (MT5 model)"),aVe.forEach(t),aAr=i(I),YC=n(I,"LI",{});var nVe=s(YC);n3e=n(nVe,"STRONG",{});var xGt=s(n3e);nAr=r(xGt,"openai-gpt"),xGt.forEach(t),sAr=r(nVe," \u2014 "),lK=n(nVe,"A",{href:!0});var $Gt=s(lK);lAr=r($Gt,"TFOpenAIGPTModel"),$Gt.forEach(t),iAr=r(nVe," (OpenAI GPT model)"),nVe.forEach(t),dAr=i(I),KC=n(I,"LI",{});var sVe=s(KC);s3e=n(sVe,"STRONG",{});var kGt=s(s3e);cAr=r(kGt,"opt"),kGt.forEach(t),mAr=r(sVe," \u2014 "),iK=n(sVe,"A",{href:!0});var SGt=s(iK);fAr=r(SGt,"TFOPTModel"),SGt.forEach(t),gAr=r(sVe," (OPT model)"),sVe.forEach(t),hAr=i(I),ZC=n(I,"LI",{});var lVe=s(ZC);l3e=n(lVe,"STRONG",{});var RGt=s(l3e);uAr=r(RGt,"pegasus"),RGt.forEach(t),pAr=r(lVe," \u2014 "),dK=n(lVe,"A",{href:!0});var PGt=s(dK);_Ar=r(PGt,"TFPegasusModel"),PGt.forEach(t),bAr=r(lVe," (Pegasus model)"),lVe.forEach(t),vAr=i(I),e3=n(I,"LI",{});var iVe=s(e3);i3e=n(iVe,"STRONG",{});var BGt=s(i3e);FAr=r(BGt,"regnet"),BGt.forEach(t),TAr=r(iVe," \u2014 "),cK=n(iVe,"A",{href:!0});var IGt=s(cK);MAr=r(IGt,"TFRegNetModel"),IGt.forEach(t),EAr=r(iVe," (RegNet model)"),iVe.forEach(t),CAr=i(I),o3=n(I,"LI",{});var dVe=s(o3);d3e=n(dVe,"STRONG",{});var NGt=s(d3e);wAr=r(NGt,"rembert"),NGt.forEach(t),AAr=r(dVe," \u2014 "),mK=n(dVe,"A",{href:!0});var qGt=s(mK);LAr=r(qGt,"TFRemBertModel"),qGt.forEach(t),yAr=r(dVe," (RemBERT model)"),dVe.forEach(t),xAr=i(I),r3=n(I,"LI",{});var cVe=s(r3);c3e=n(cVe,"STRONG",{});var jGt=s(c3e);$Ar=r(jGt,"resnet"),jGt.forEach(t),kAr=r(cVe," \u2014 "),fK=n(cVe,"A",{href:!0});var DGt=s(fK);SAr=r(DGt,"TFResNetModel"),DGt.forEach(t),RAr=r(cVe," (ResNet model)"),cVe.forEach(t),PAr=i(I),t3=n(I,"LI",{});var mVe=s(t3);m3e=n(mVe,"STRONG",{});var GGt=s(m3e);BAr=r(GGt,"roberta"),GGt.forEach(t),IAr=r(mVe," \u2014 "),gK=n(mVe,"A",{href:!0});var OGt=s(gK);NAr=r(OGt,"TFRobertaModel"),OGt.forEach(t),qAr=r(mVe," (RoBERTa model)"),mVe.forEach(t),jAr=i(I),a3=n(I,"LI",{});var fVe=s(a3);f3e=n(fVe,"STRONG",{});var VGt=s(f3e);DAr=r(VGt,"roformer"),VGt.forEach(t),GAr=r(fVe," \u2014 "),hK=n(fVe,"A",{href:!0});var XGt=s(hK);OAr=r(XGt,"TFRoFormerModel"),XGt.forEach(t),VAr=r(fVe," (RoFormer model)"),fVe.forEach(t),XAr=i(I),n3=n(I,"LI",{});var gVe=s(n3);g3e=n(gVe,"STRONG",{});var zGt=s(g3e);zAr=r(zGt,"segformer"),zGt.forEach(t),WAr=r(gVe," \u2014 "),uK=n(gVe,"A",{href:!0});var WGt=s(uK);QAr=r(WGt,"TFSegformerModel"),WGt.forEach(t),UAr=r(gVe," (SegFormer model)"),gVe.forEach(t),HAr=i(I),s3=n(I,"LI",{});var hVe=s(s3);h3e=n(hVe,"STRONG",{});var QGt=s(h3e);JAr=r(QGt,"speech_to_text"),QGt.forEach(t),YAr=r(hVe," \u2014 "),pK=n(hVe,"A",{href:!0});var UGt=s(pK);KAr=r(UGt,"TFSpeech2TextModel"),UGt.forEach(t),ZAr=r(hVe," (Speech2Text model)"),hVe.forEach(t),e7r=i(I),l3=n(I,"LI",{});var uVe=s(l3);u3e=n(uVe,"STRONG",{});var HGt=s(u3e);o7r=r(HGt,"swin"),HGt.forEach(t),r7r=r(uVe," \u2014 "),_K=n(uVe,"A",{href:!0});var JGt=s(_K);t7r=r(JGt,"TFSwinModel"),JGt.forEach(t),a7r=r(uVe," (Swin Transformer model)"),uVe.forEach(t),n7r=i(I),i3=n(I,"LI",{});var pVe=s(i3);p3e=n(pVe,"STRONG",{});var YGt=s(p3e);s7r=r(YGt,"t5"),YGt.forEach(t),l7r=r(pVe," \u2014 "),bK=n(pVe,"A",{href:!0});var KGt=s(bK);i7r=r(KGt,"TFT5Model"),KGt.forEach(t),d7r=r(pVe," (T5 model)"),pVe.forEach(t),c7r=i(I),d3=n(I,"LI",{});var _Ve=s(d3);_3e=n(_Ve,"STRONG",{});var ZGt=s(_3e);m7r=r(ZGt,"tapas"),ZGt.forEach(t),f7r=r(_Ve," \u2014 "),vK=n(_Ve,"A",{href:!0});var eOt=s(vK);g7r=r(eOt,"TFTapasModel"),eOt.forEach(t),h7r=r(_Ve," (TAPAS model)"),_Ve.forEach(t),u7r=i(I),c3=n(I,"LI",{});var bVe=s(c3);b3e=n(bVe,"STRONG",{});var oOt=s(b3e);p7r=r(oOt,"transfo-xl"),oOt.forEach(t),_7r=r(bVe," \u2014 "),FK=n(bVe,"A",{href:!0});var rOt=s(FK);b7r=r(rOt,"TFTransfoXLModel"),rOt.forEach(t),v7r=r(bVe," (Transformer-XL model)"),bVe.forEach(t),F7r=i(I),m3=n(I,"LI",{});var vVe=s(m3);v3e=n(vVe,"STRONG",{});var tOt=s(v3e);T7r=r(tOt,"vit"),tOt.forEach(t),M7r=r(vVe," \u2014 "),TK=n(vVe,"A",{href:!0});var aOt=s(TK);E7r=r(aOt,"TFViTModel"),aOt.forEach(t),C7r=r(vVe," (ViT model)"),vVe.forEach(t),w7r=i(I),f3=n(I,"LI",{});var FVe=s(f3);F3e=n(FVe,"STRONG",{});var nOt=s(F3e);A7r=r(nOt,"vit_mae"),nOt.forEach(t),L7r=r(FVe," \u2014 "),MK=n(FVe,"A",{href:!0});var sOt=s(MK);y7r=r(sOt,"TFViTMAEModel"),sOt.forEach(t),x7r=r(FVe," (ViTMAE model)"),FVe.forEach(t),$7r=i(I),g3=n(I,"LI",{});var TVe=s(g3);T3e=n(TVe,"STRONG",{});var lOt=s(T3e);k7r=r(lOt,"wav2vec2"),lOt.forEach(t),S7r=r(TVe," \u2014 "),EK=n(TVe,"A",{href:!0});var iOt=s(EK);R7r=r(iOt,"TFWav2Vec2Model"),iOt.forEach(t),P7r=r(TVe," (Wav2Vec2 model)"),TVe.forEach(t),B7r=i(I),h3=n(I,"LI",{});var MVe=s(h3);M3e=n(MVe,"STRONG",{});var dOt=s(M3e);I7r=r(dOt,"xglm"),dOt.forEach(t),N7r=r(MVe," \u2014 "),CK=n(MVe,"A",{href:!0});var cOt=s(CK);q7r=r(cOt,"TFXGLMModel"),cOt.forEach(t),j7r=r(MVe," (XGLM model)"),MVe.forEach(t),D7r=i(I),u3=n(I,"LI",{});var EVe=s(u3);E3e=n(EVe,"STRONG",{});var mOt=s(E3e);G7r=r(mOt,"xlm"),mOt.forEach(t),O7r=r(EVe," \u2014 "),wK=n(EVe,"A",{href:!0});var fOt=s(wK);V7r=r(fOt,"TFXLMModel"),fOt.forEach(t),X7r=r(EVe," (XLM model)"),EVe.forEach(t),z7r=i(I),p3=n(I,"LI",{});var CVe=s(p3);C3e=n(CVe,"STRONG",{});var gOt=s(C3e);W7r=r(gOt,"xlm-roberta"),gOt.forEach(t),Q7r=r(CVe," \u2014 "),AK=n(CVe,"A",{href:!0});var hOt=s(AK);U7r=r(hOt,"TFXLMRobertaModel"),hOt.forEach(t),H7r=r(CVe," (XLM-RoBERTa model)"),CVe.forEach(t),J7r=i(I),_3=n(I,"LI",{});var wVe=s(_3);w3e=n(wVe,"STRONG",{});var uOt=s(w3e);Y7r=r(uOt,"xlnet"),uOt.forEach(t),K7r=r(wVe," \u2014 "),LK=n(wVe,"A",{href:!0});var pOt=s(LK);Z7r=r(pOt,"TFXLNetModel"),pOt.forEach(t),eLr=r(wVe," (XLNet model)"),wVe.forEach(t),I.forEach(t),oLr=i(Vl),T(b3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),WHe=i(m),Ac=n(m,"H2",{class:!0});var aKe=s(Ac);v3=n(aKe,"A",{id:!0,class:!0,href:!0});var _Ot=s(v3);A3e=n(_Ot,"SPAN",{});var bOt=s(A3e);T(M$.$$.fragment,bOt),bOt.forEach(t),_Ot.forEach(t),rLr=i(aKe),L3e=n(aKe,"SPAN",{});var vOt=s(L3e);tLr=r(vOt,"TFAutoModelForPreTraining"),vOt.forEach(t),aKe.forEach(t),QHe=i(m),nr=n(m,"DIV",{class:!0});var Xl=s(nr);T(E$.$$.fragment,Xl),aLr=i(Xl),Lc=n(Xl,"P",{});var ise=s(Lc);nLr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yK=n(ise,"A",{href:!0});var FOt=s(yK);sLr=r(FOt,"from_pretrained()"),FOt.forEach(t),lLr=r(ise," class method or the "),xK=n(ise,"A",{href:!0});var TOt=s(xK);iLr=r(TOt,"from_config()"),TOt.forEach(t),dLr=r(ise,` class
method.`),ise.forEach(t),cLr=i(Xl),C$=n(Xl,"P",{});var nKe=s(C$);mLr=r(nKe,"This class cannot be instantiated directly using "),y3e=n(nKe,"CODE",{});var MOt=s(y3e);fLr=r(MOt,"__init__()"),MOt.forEach(t),gLr=r(nKe," (throws an error)."),nKe.forEach(t),hLr=i(Xl),jt=n(Xl,"DIV",{class:!0});var Cy=s(jt);T(w$.$$.fragment,Cy),uLr=i(Cy),x3e=n(Cy,"P",{});var EOt=s(x3e);pLr=r(EOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EOt.forEach(t),_Lr=i(Cy),yc=n(Cy,"P",{});var dse=s(yc);bLr=r(dse,`Note:
Loading a model from its configuration file does `),$3e=n(dse,"STRONG",{});var COt=s($3e);vLr=r(COt,"not"),COt.forEach(t),FLr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(dse,"A",{href:!0});var wOt=s($K);TLr=r(wOt,"from_pretrained()"),wOt.forEach(t),MLr=r(dse," to load the model weights."),dse.forEach(t),ELr=i(Cy),T(F3.$$.fragment,Cy),Cy.forEach(t),CLr=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(A$.$$.fragment,zl),wLr=i(zl),k3e=n(zl,"P",{});var AOt=s(k3e);ALr=r(AOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AOt.forEach(t),LLr=i(zl),_n=n(zl,"P",{});var wy=s(_n);yLr=r(wy,"The model class to instantiate is selected based on the "),S3e=n(wy,"CODE",{});var LOt=s(S3e);xLr=r(LOt,"model_type"),LOt.forEach(t),$Lr=r(wy,` property of the config object (either
passed as an argument or loaded from `),R3e=n(wy,"CODE",{});var yOt=s(R3e);kLr=r(yOt,"pretrained_model_name_or_path"),yOt.forEach(t),SLr=r(wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(wy,"CODE",{});var xOt=s(P3e);RLr=r(xOt,"pretrained_model_name_or_path"),xOt.forEach(t),PLr=r(wy,":"),wy.forEach(t),BLr=i(zl),se=n(zl,"UL",{});var le=s(se);T3=n(le,"LI",{});var AVe=s(T3);B3e=n(AVe,"STRONG",{});var $Ot=s(B3e);ILr=r($Ot,"albert"),$Ot.forEach(t),NLr=r(AVe," \u2014 "),kK=n(AVe,"A",{href:!0});var kOt=s(kK);qLr=r(kOt,"TFAlbertForPreTraining"),kOt.forEach(t),jLr=r(AVe," (ALBERT model)"),AVe.forEach(t),DLr=i(le),M3=n(le,"LI",{});var LVe=s(M3);I3e=n(LVe,"STRONG",{});var SOt=s(I3e);GLr=r(SOt,"bart"),SOt.forEach(t),OLr=r(LVe," \u2014 "),SK=n(LVe,"A",{href:!0});var ROt=s(SK);VLr=r(ROt,"TFBartForConditionalGeneration"),ROt.forEach(t),XLr=r(LVe," (BART model)"),LVe.forEach(t),zLr=i(le),E3=n(le,"LI",{});var yVe=s(E3);N3e=n(yVe,"STRONG",{});var POt=s(N3e);WLr=r(POt,"bert"),POt.forEach(t),QLr=r(yVe," \u2014 "),RK=n(yVe,"A",{href:!0});var BOt=s(RK);ULr=r(BOt,"TFBertForPreTraining"),BOt.forEach(t),HLr=r(yVe," (BERT model)"),yVe.forEach(t),JLr=i(le),C3=n(le,"LI",{});var xVe=s(C3);q3e=n(xVe,"STRONG",{});var IOt=s(q3e);YLr=r(IOt,"camembert"),IOt.forEach(t),KLr=r(xVe," \u2014 "),PK=n(xVe,"A",{href:!0});var NOt=s(PK);ZLr=r(NOt,"TFCamembertForMaskedLM"),NOt.forEach(t),eyr=r(xVe," (CamemBERT model)"),xVe.forEach(t),oyr=i(le),w3=n(le,"LI",{});var $Ve=s(w3);j3e=n($Ve,"STRONG",{});var qOt=s(j3e);ryr=r(qOt,"ctrl"),qOt.forEach(t),tyr=r($Ve," \u2014 "),BK=n($Ve,"A",{href:!0});var jOt=s(BK);ayr=r(jOt,"TFCTRLLMHeadModel"),jOt.forEach(t),nyr=r($Ve," (CTRL model)"),$Ve.forEach(t),syr=i(le),A3=n(le,"LI",{});var kVe=s(A3);D3e=n(kVe,"STRONG",{});var DOt=s(D3e);lyr=r(DOt,"distilbert"),DOt.forEach(t),iyr=r(kVe," \u2014 "),IK=n(kVe,"A",{href:!0});var GOt=s(IK);dyr=r(GOt,"TFDistilBertForMaskedLM"),GOt.forEach(t),cyr=r(kVe," (DistilBERT model)"),kVe.forEach(t),myr=i(le),L3=n(le,"LI",{});var SVe=s(L3);G3e=n(SVe,"STRONG",{});var OOt=s(G3e);fyr=r(OOt,"electra"),OOt.forEach(t),gyr=r(SVe," \u2014 "),NK=n(SVe,"A",{href:!0});var VOt=s(NK);hyr=r(VOt,"TFElectraForPreTraining"),VOt.forEach(t),uyr=r(SVe," (ELECTRA model)"),SVe.forEach(t),pyr=i(le),y3=n(le,"LI",{});var RVe=s(y3);O3e=n(RVe,"STRONG",{});var XOt=s(O3e);_yr=r(XOt,"flaubert"),XOt.forEach(t),byr=r(RVe," \u2014 "),qK=n(RVe,"A",{href:!0});var zOt=s(qK);vyr=r(zOt,"TFFlaubertWithLMHeadModel"),zOt.forEach(t),Fyr=r(RVe," (FlauBERT model)"),RVe.forEach(t),Tyr=i(le),x3=n(le,"LI",{});var PVe=s(x3);V3e=n(PVe,"STRONG",{});var WOt=s(V3e);Myr=r(WOt,"funnel"),WOt.forEach(t),Eyr=r(PVe," \u2014 "),jK=n(PVe,"A",{href:!0});var QOt=s(jK);Cyr=r(QOt,"TFFunnelForPreTraining"),QOt.forEach(t),wyr=r(PVe," (Funnel Transformer model)"),PVe.forEach(t),Ayr=i(le),$3=n(le,"LI",{});var BVe=s($3);X3e=n(BVe,"STRONG",{});var UOt=s(X3e);Lyr=r(UOt,"gpt2"),UOt.forEach(t),yyr=r(BVe," \u2014 "),DK=n(BVe,"A",{href:!0});var HOt=s(DK);xyr=r(HOt,"TFGPT2LMHeadModel"),HOt.forEach(t),$yr=r(BVe," (OpenAI GPT-2 model)"),BVe.forEach(t),kyr=i(le),k3=n(le,"LI",{});var IVe=s(k3);z3e=n(IVe,"STRONG",{});var JOt=s(z3e);Syr=r(JOt,"layoutlm"),JOt.forEach(t),Ryr=r(IVe," \u2014 "),GK=n(IVe,"A",{href:!0});var YOt=s(GK);Pyr=r(YOt,"TFLayoutLMForMaskedLM"),YOt.forEach(t),Byr=r(IVe," (LayoutLM model)"),IVe.forEach(t),Iyr=i(le),S3=n(le,"LI",{});var NVe=s(S3);W3e=n(NVe,"STRONG",{});var KOt=s(W3e);Nyr=r(KOt,"lxmert"),KOt.forEach(t),qyr=r(NVe," \u2014 "),OK=n(NVe,"A",{href:!0});var ZOt=s(OK);jyr=r(ZOt,"TFLxmertForPreTraining"),ZOt.forEach(t),Dyr=r(NVe," (LXMERT model)"),NVe.forEach(t),Gyr=i(le),R3=n(le,"LI",{});var qVe=s(R3);Q3e=n(qVe,"STRONG",{});var eVt=s(Q3e);Oyr=r(eVt,"mobilebert"),eVt.forEach(t),Vyr=r(qVe," \u2014 "),VK=n(qVe,"A",{href:!0});var oVt=s(VK);Xyr=r(oVt,"TFMobileBertForPreTraining"),oVt.forEach(t),zyr=r(qVe," (MobileBERT model)"),qVe.forEach(t),Wyr=i(le),P3=n(le,"LI",{});var jVe=s(P3);U3e=n(jVe,"STRONG",{});var rVt=s(U3e);Qyr=r(rVt,"mpnet"),rVt.forEach(t),Uyr=r(jVe," \u2014 "),XK=n(jVe,"A",{href:!0});var tVt=s(XK);Hyr=r(tVt,"TFMPNetForMaskedLM"),tVt.forEach(t),Jyr=r(jVe," (MPNet model)"),jVe.forEach(t),Yyr=i(le),B3=n(le,"LI",{});var DVe=s(B3);H3e=n(DVe,"STRONG",{});var aVt=s(H3e);Kyr=r(aVt,"openai-gpt"),aVt.forEach(t),Zyr=r(DVe," \u2014 "),zK=n(DVe,"A",{href:!0});var nVt=s(zK);e8r=r(nVt,"TFOpenAIGPTLMHeadModel"),nVt.forEach(t),o8r=r(DVe," (OpenAI GPT model)"),DVe.forEach(t),r8r=i(le),I3=n(le,"LI",{});var GVe=s(I3);J3e=n(GVe,"STRONG",{});var sVt=s(J3e);t8r=r(sVt,"roberta"),sVt.forEach(t),a8r=r(GVe," \u2014 "),WK=n(GVe,"A",{href:!0});var lVt=s(WK);n8r=r(lVt,"TFRobertaForMaskedLM"),lVt.forEach(t),s8r=r(GVe," (RoBERTa model)"),GVe.forEach(t),l8r=i(le),N3=n(le,"LI",{});var OVe=s(N3);Y3e=n(OVe,"STRONG",{});var iVt=s(Y3e);i8r=r(iVt,"t5"),iVt.forEach(t),d8r=r(OVe," \u2014 "),QK=n(OVe,"A",{href:!0});var dVt=s(QK);c8r=r(dVt,"TFT5ForConditionalGeneration"),dVt.forEach(t),m8r=r(OVe," (T5 model)"),OVe.forEach(t),f8r=i(le),q3=n(le,"LI",{});var VVe=s(q3);K3e=n(VVe,"STRONG",{});var cVt=s(K3e);g8r=r(cVt,"tapas"),cVt.forEach(t),h8r=r(VVe," \u2014 "),UK=n(VVe,"A",{href:!0});var mVt=s(UK);u8r=r(mVt,"TFTapasForMaskedLM"),mVt.forEach(t),p8r=r(VVe," (TAPAS model)"),VVe.forEach(t),_8r=i(le),j3=n(le,"LI",{});var XVe=s(j3);Z3e=n(XVe,"STRONG",{});var fVt=s(Z3e);b8r=r(fVt,"transfo-xl"),fVt.forEach(t),v8r=r(XVe," \u2014 "),HK=n(XVe,"A",{href:!0});var gVt=s(HK);F8r=r(gVt,"TFTransfoXLLMHeadModel"),gVt.forEach(t),T8r=r(XVe," (Transformer-XL model)"),XVe.forEach(t),M8r=i(le),D3=n(le,"LI",{});var zVe=s(D3);e5e=n(zVe,"STRONG",{});var hVt=s(e5e);E8r=r(hVt,"vit_mae"),hVt.forEach(t),C8r=r(zVe," \u2014 "),JK=n(zVe,"A",{href:!0});var uVt=s(JK);w8r=r(uVt,"TFViTMAEForPreTraining"),uVt.forEach(t),A8r=r(zVe," (ViTMAE model)"),zVe.forEach(t),L8r=i(le),G3=n(le,"LI",{});var WVe=s(G3);o5e=n(WVe,"STRONG",{});var pVt=s(o5e);y8r=r(pVt,"xlm"),pVt.forEach(t),x8r=r(WVe," \u2014 "),YK=n(WVe,"A",{href:!0});var _Vt=s(YK);$8r=r(_Vt,"TFXLMWithLMHeadModel"),_Vt.forEach(t),k8r=r(WVe," (XLM model)"),WVe.forEach(t),S8r=i(le),O3=n(le,"LI",{});var QVe=s(O3);r5e=n(QVe,"STRONG",{});var bVt=s(r5e);R8r=r(bVt,"xlm-roberta"),bVt.forEach(t),P8r=r(QVe," \u2014 "),KK=n(QVe,"A",{href:!0});var vVt=s(KK);B8r=r(vVt,"TFXLMRobertaForMaskedLM"),vVt.forEach(t),I8r=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),N8r=i(le),V3=n(le,"LI",{});var UVe=s(V3);t5e=n(UVe,"STRONG",{});var FVt=s(t5e);q8r=r(FVt,"xlnet"),FVt.forEach(t),j8r=r(UVe," \u2014 "),ZK=n(UVe,"A",{href:!0});var TVt=s(ZK);D8r=r(TVt,"TFXLNetLMHeadModel"),TVt.forEach(t),G8r=r(UVe," (XLNet model)"),UVe.forEach(t),le.forEach(t),O8r=i(zl),T(X3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),UHe=i(m),xc=n(m,"H2",{class:!0});var sKe=s(xc);z3=n(sKe,"A",{id:!0,class:!0,href:!0});var MVt=s(z3);a5e=n(MVt,"SPAN",{});var EVt=s(a5e);T(L$.$$.fragment,EVt),EVt.forEach(t),MVt.forEach(t),V8r=i(sKe),n5e=n(sKe,"SPAN",{});var CVt=s(n5e);X8r=r(CVt,"TFAutoModelForCausalLM"),CVt.forEach(t),sKe.forEach(t),HHe=i(m),sr=n(m,"DIV",{class:!0});var Wl=s(sr);T(y$.$$.fragment,Wl),z8r=i(Wl),$c=n(Wl,"P",{});var cse=s($c);W8r=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eZ=n(cse,"A",{href:!0});var wVt=s(eZ);Q8r=r(wVt,"from_pretrained()"),wVt.forEach(t),U8r=r(cse," class method or the "),oZ=n(cse,"A",{href:!0});var AVt=s(oZ);H8r=r(AVt,"from_config()"),AVt.forEach(t),J8r=r(cse,` class
method.`),cse.forEach(t),Y8r=i(Wl),x$=n(Wl,"P",{});var lKe=s(x$);K8r=r(lKe,"This class cannot be instantiated directly using "),s5e=n(lKe,"CODE",{});var LVt=s(s5e);Z8r=r(LVt,"__init__()"),LVt.forEach(t),e9r=r(lKe," (throws an error)."),lKe.forEach(t),o9r=i(Wl),Dt=n(Wl,"DIV",{class:!0});var Ay=s(Dt);T($$.$$.fragment,Ay),r9r=i(Ay),l5e=n(Ay,"P",{});var yVt=s(l5e);t9r=r(yVt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yVt.forEach(t),a9r=i(Ay),kc=n(Ay,"P",{});var mse=s(kc);n9r=r(mse,`Note:
Loading a model from its configuration file does `),i5e=n(mse,"STRONG",{});var xVt=s(i5e);s9r=r(xVt,"not"),xVt.forEach(t),l9r=r(mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(mse,"A",{href:!0});var $Vt=s(rZ);i9r=r($Vt,"from_pretrained()"),$Vt.forEach(t),d9r=r(mse," to load the model weights."),mse.forEach(t),c9r=i(Ay),T(W3.$$.fragment,Ay),Ay.forEach(t),m9r=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(k$.$$.fragment,Ql),f9r=i(Ql),d5e=n(Ql,"P",{});var kVt=s(d5e);g9r=r(kVt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kVt.forEach(t),h9r=i(Ql),bn=n(Ql,"P",{});var Ly=s(bn);u9r=r(Ly,"The model class to instantiate is selected based on the "),c5e=n(Ly,"CODE",{});var SVt=s(c5e);p9r=r(SVt,"model_type"),SVt.forEach(t),_9r=r(Ly,` property of the config object (either
passed as an argument or loaded from `),m5e=n(Ly,"CODE",{});var RVt=s(m5e);b9r=r(RVt,"pretrained_model_name_or_path"),RVt.forEach(t),v9r=r(Ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(Ly,"CODE",{});var PVt=s(f5e);F9r=r(PVt,"pretrained_model_name_or_path"),PVt.forEach(t),T9r=r(Ly,":"),Ly.forEach(t),M9r=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);Q3=n(Ce,"LI",{});var HVe=s(Q3);g5e=n(HVe,"STRONG",{});var BVt=s(g5e);E9r=r(BVt,"bert"),BVt.forEach(t),C9r=r(HVe," \u2014 "),tZ=n(HVe,"A",{href:!0});var IVt=s(tZ);w9r=r(IVt,"TFBertLMHeadModel"),IVt.forEach(t),A9r=r(HVe," (BERT model)"),HVe.forEach(t),L9r=i(Ce),U3=n(Ce,"LI",{});var JVe=s(U3);h5e=n(JVe,"STRONG",{});var NVt=s(h5e);y9r=r(NVt,"camembert"),NVt.forEach(t),x9r=r(JVe," \u2014 "),aZ=n(JVe,"A",{href:!0});var qVt=s(aZ);$9r=r(qVt,"TFCamembertForCausalLM"),qVt.forEach(t),k9r=r(JVe," (CamemBERT model)"),JVe.forEach(t),S9r=i(Ce),H3=n(Ce,"LI",{});var YVe=s(H3);u5e=n(YVe,"STRONG",{});var jVt=s(u5e);R9r=r(jVt,"ctrl"),jVt.forEach(t),P9r=r(YVe," \u2014 "),nZ=n(YVe,"A",{href:!0});var DVt=s(nZ);B9r=r(DVt,"TFCTRLLMHeadModel"),DVt.forEach(t),I9r=r(YVe," (CTRL model)"),YVe.forEach(t),N9r=i(Ce),J3=n(Ce,"LI",{});var KVe=s(J3);p5e=n(KVe,"STRONG",{});var GVt=s(p5e);q9r=r(GVt,"gpt2"),GVt.forEach(t),j9r=r(KVe," \u2014 "),sZ=n(KVe,"A",{href:!0});var OVt=s(sZ);D9r=r(OVt,"TFGPT2LMHeadModel"),OVt.forEach(t),G9r=r(KVe," (OpenAI GPT-2 model)"),KVe.forEach(t),O9r=i(Ce),Y3=n(Ce,"LI",{});var ZVe=s(Y3);_5e=n(ZVe,"STRONG",{});var VVt=s(_5e);V9r=r(VVt,"gptj"),VVt.forEach(t),X9r=r(ZVe," \u2014 "),lZ=n(ZVe,"A",{href:!0});var XVt=s(lZ);z9r=r(XVt,"TFGPTJForCausalLM"),XVt.forEach(t),W9r=r(ZVe," (GPT-J model)"),ZVe.forEach(t),Q9r=i(Ce),K3=n(Ce,"LI",{});var eXe=s(K3);b5e=n(eXe,"STRONG",{});var zVt=s(b5e);U9r=r(zVt,"openai-gpt"),zVt.forEach(t),H9r=r(eXe," \u2014 "),iZ=n(eXe,"A",{href:!0});var WVt=s(iZ);J9r=r(WVt,"TFOpenAIGPTLMHeadModel"),WVt.forEach(t),Y9r=r(eXe," (OpenAI GPT model)"),eXe.forEach(t),K9r=i(Ce),Z3=n(Ce,"LI",{});var oXe=s(Z3);v5e=n(oXe,"STRONG",{});var QVt=s(v5e);Z9r=r(QVt,"opt"),QVt.forEach(t),exr=r(oXe," \u2014 "),dZ=n(oXe,"A",{href:!0});var UVt=s(dZ);oxr=r(UVt,"TFOPTForCausalLM"),UVt.forEach(t),rxr=r(oXe," (OPT model)"),oXe.forEach(t),txr=i(Ce),e5=n(Ce,"LI",{});var rXe=s(e5);F5e=n(rXe,"STRONG",{});var HVt=s(F5e);axr=r(HVt,"rembert"),HVt.forEach(t),nxr=r(rXe," \u2014 "),cZ=n(rXe,"A",{href:!0});var JVt=s(cZ);sxr=r(JVt,"TFRemBertForCausalLM"),JVt.forEach(t),lxr=r(rXe," (RemBERT model)"),rXe.forEach(t),ixr=i(Ce),o5=n(Ce,"LI",{});var tXe=s(o5);T5e=n(tXe,"STRONG",{});var YVt=s(T5e);dxr=r(YVt,"roberta"),YVt.forEach(t),cxr=r(tXe," \u2014 "),mZ=n(tXe,"A",{href:!0});var KVt=s(mZ);mxr=r(KVt,"TFRobertaForCausalLM"),KVt.forEach(t),fxr=r(tXe," (RoBERTa model)"),tXe.forEach(t),gxr=i(Ce),r5=n(Ce,"LI",{});var aXe=s(r5);M5e=n(aXe,"STRONG",{});var ZVt=s(M5e);hxr=r(ZVt,"roformer"),ZVt.forEach(t),uxr=r(aXe," \u2014 "),fZ=n(aXe,"A",{href:!0});var eXt=s(fZ);pxr=r(eXt,"TFRoFormerForCausalLM"),eXt.forEach(t),_xr=r(aXe," (RoFormer model)"),aXe.forEach(t),bxr=i(Ce),t5=n(Ce,"LI",{});var nXe=s(t5);E5e=n(nXe,"STRONG",{});var oXt=s(E5e);vxr=r(oXt,"transfo-xl"),oXt.forEach(t),Fxr=r(nXe," \u2014 "),gZ=n(nXe,"A",{href:!0});var rXt=s(gZ);Txr=r(rXt,"TFTransfoXLLMHeadModel"),rXt.forEach(t),Mxr=r(nXe," (Transformer-XL model)"),nXe.forEach(t),Exr=i(Ce),a5=n(Ce,"LI",{});var sXe=s(a5);C5e=n(sXe,"STRONG",{});var tXt=s(C5e);Cxr=r(tXt,"xglm"),tXt.forEach(t),wxr=r(sXe," \u2014 "),hZ=n(sXe,"A",{href:!0});var aXt=s(hZ);Axr=r(aXt,"TFXGLMForCausalLM"),aXt.forEach(t),Lxr=r(sXe," (XGLM model)"),sXe.forEach(t),yxr=i(Ce),n5=n(Ce,"LI",{});var lXe=s(n5);w5e=n(lXe,"STRONG",{});var nXt=s(w5e);xxr=r(nXt,"xlm"),nXt.forEach(t),$xr=r(lXe," \u2014 "),uZ=n(lXe,"A",{href:!0});var sXt=s(uZ);kxr=r(sXt,"TFXLMWithLMHeadModel"),sXt.forEach(t),Sxr=r(lXe," (XLM model)"),lXe.forEach(t),Rxr=i(Ce),s5=n(Ce,"LI",{});var iXe=s(s5);A5e=n(iXe,"STRONG",{});var lXt=s(A5e);Pxr=r(lXt,"xlnet"),lXt.forEach(t),Bxr=r(iXe," \u2014 "),pZ=n(iXe,"A",{href:!0});var iXt=s(pZ);Ixr=r(iXt,"TFXLNetLMHeadModel"),iXt.forEach(t),Nxr=r(iXe," (XLNet model)"),iXe.forEach(t),Ce.forEach(t),qxr=i(Ql),T(l5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),JHe=i(m),Sc=n(m,"H2",{class:!0});var iKe=s(Sc);i5=n(iKe,"A",{id:!0,class:!0,href:!0});var dXt=s(i5);L5e=n(dXt,"SPAN",{});var cXt=s(L5e);T(S$.$$.fragment,cXt),cXt.forEach(t),dXt.forEach(t),jxr=i(iKe),y5e=n(iKe,"SPAN",{});var mXt=s(y5e);Dxr=r(mXt,"TFAutoModelForImageClassification"),mXt.forEach(t),iKe.forEach(t),YHe=i(m),lr=n(m,"DIV",{class:!0});var Ul=s(lr);T(R$.$$.fragment,Ul),Gxr=i(Ul),Rc=n(Ul,"P",{});var fse=s(Rc);Oxr=r(fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Z=n(fse,"A",{href:!0});var fXt=s(_Z);Vxr=r(fXt,"from_pretrained()"),fXt.forEach(t),Xxr=r(fse," class method or the "),bZ=n(fse,"A",{href:!0});var gXt=s(bZ);zxr=r(gXt,"from_config()"),gXt.forEach(t),Wxr=r(fse,` class
method.`),fse.forEach(t),Qxr=i(Ul),P$=n(Ul,"P",{});var dKe=s(P$);Uxr=r(dKe,"This class cannot be instantiated directly using "),x5e=n(dKe,"CODE",{});var hXt=s(x5e);Hxr=r(hXt,"__init__()"),hXt.forEach(t),Jxr=r(dKe," (throws an error)."),dKe.forEach(t),Yxr=i(Ul),Gt=n(Ul,"DIV",{class:!0});var yy=s(Gt);T(B$.$$.fragment,yy),Kxr=i(yy),$5e=n(yy,"P",{});var uXt=s($5e);Zxr=r(uXt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uXt.forEach(t),e$r=i(yy),Pc=n(yy,"P",{});var gse=s(Pc);o$r=r(gse,`Note:
Loading a model from its configuration file does `),k5e=n(gse,"STRONG",{});var pXt=s(k5e);r$r=r(pXt,"not"),pXt.forEach(t),t$r=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(gse,"A",{href:!0});var _Xt=s(vZ);a$r=r(_Xt,"from_pretrained()"),_Xt.forEach(t),n$r=r(gse," to load the model weights."),gse.forEach(t),s$r=i(yy),T(d5.$$.fragment,yy),yy.forEach(t),l$r=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(I$.$$.fragment,Hl),i$r=i(Hl),S5e=n(Hl,"P",{});var bXt=s(S5e);d$r=r(bXt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bXt.forEach(t),c$r=i(Hl),vn=n(Hl,"P",{});var xy=s(vn);m$r=r(xy,"The model class to instantiate is selected based on the "),R5e=n(xy,"CODE",{});var vXt=s(R5e);f$r=r(vXt,"model_type"),vXt.forEach(t),g$r=r(xy,` property of the config object (either
passed as an argument or loaded from `),P5e=n(xy,"CODE",{});var FXt=s(P5e);h$r=r(FXt,"pretrained_model_name_or_path"),FXt.forEach(t),u$r=r(xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(xy,"CODE",{});var TXt=s(B5e);p$r=r(TXt,"pretrained_model_name_or_path"),TXt.forEach(t),_$r=r(xy,":"),xy.forEach(t),b$r=i(Hl),Be=n(Hl,"UL",{});var Qe=s(Be);c5=n(Qe,"LI",{});var dXe=s(c5);I5e=n(dXe,"STRONG",{});var MXt=s(I5e);v$r=r(MXt,"convnext"),MXt.forEach(t),F$r=r(dXe," \u2014 "),FZ=n(dXe,"A",{href:!0});var EXt=s(FZ);T$r=r(EXt,"TFConvNextForImageClassification"),EXt.forEach(t),M$r=r(dXe," (ConvNeXT model)"),dXe.forEach(t),E$r=i(Qe),m5=n(Qe,"LI",{});var cXe=s(m5);N5e=n(cXe,"STRONG",{});var CXt=s(N5e);C$r=r(CXt,"data2vec-vision"),CXt.forEach(t),w$r=r(cXe," \u2014 "),TZ=n(cXe,"A",{href:!0});var wXt=s(TZ);A$r=r(wXt,"TFData2VecVisionForImageClassification"),wXt.forEach(t),L$r=r(cXe," (Data2VecVision model)"),cXe.forEach(t),y$r=i(Qe),dl=n(Qe,"LI",{});var hP=s(dl);q5e=n(hP,"STRONG",{});var AXt=s(q5e);x$r=r(AXt,"deit"),AXt.forEach(t),$$r=r(hP," \u2014 "),MZ=n(hP,"A",{href:!0});var LXt=s(MZ);k$r=r(LXt,"TFDeiTForImageClassification"),LXt.forEach(t),S$r=r(hP," or "),EZ=n(hP,"A",{href:!0});var yXt=s(EZ);R$r=r(yXt,"TFDeiTForImageClassificationWithTeacher"),yXt.forEach(t),P$r=r(hP," (DeiT model)"),hP.forEach(t),B$r=i(Qe),f5=n(Qe,"LI",{});var mXe=s(f5);j5e=n(mXe,"STRONG",{});var xXt=s(j5e);I$r=r(xXt,"mobilevit"),xXt.forEach(t),N$r=r(mXe," \u2014 "),CZ=n(mXe,"A",{href:!0});var $Xt=s(CZ);q$r=r($Xt,"TFMobileViTForImageClassification"),$Xt.forEach(t),j$r=r(mXe," (MobileViT model)"),mXe.forEach(t),D$r=i(Qe),g5=n(Qe,"LI",{});var fXe=s(g5);D5e=n(fXe,"STRONG",{});var kXt=s(D5e);G$r=r(kXt,"regnet"),kXt.forEach(t),O$r=r(fXe," \u2014 "),wZ=n(fXe,"A",{href:!0});var SXt=s(wZ);V$r=r(SXt,"TFRegNetForImageClassification"),SXt.forEach(t),X$r=r(fXe," (RegNet model)"),fXe.forEach(t),z$r=i(Qe),h5=n(Qe,"LI",{});var gXe=s(h5);G5e=n(gXe,"STRONG",{});var RXt=s(G5e);W$r=r(RXt,"resnet"),RXt.forEach(t),Q$r=r(gXe," \u2014 "),AZ=n(gXe,"A",{href:!0});var PXt=s(AZ);U$r=r(PXt,"TFResNetForImageClassification"),PXt.forEach(t),H$r=r(gXe," (ResNet model)"),gXe.forEach(t),J$r=i(Qe),u5=n(Qe,"LI",{});var hXe=s(u5);O5e=n(hXe,"STRONG",{});var BXt=s(O5e);Y$r=r(BXt,"segformer"),BXt.forEach(t),K$r=r(hXe," \u2014 "),LZ=n(hXe,"A",{href:!0});var IXt=s(LZ);Z$r=r(IXt,"TFSegformerForImageClassification"),IXt.forEach(t),ekr=r(hXe," (SegFormer model)"),hXe.forEach(t),okr=i(Qe),p5=n(Qe,"LI",{});var uXe=s(p5);V5e=n(uXe,"STRONG",{});var NXt=s(V5e);rkr=r(NXt,"swin"),NXt.forEach(t),tkr=r(uXe," \u2014 "),yZ=n(uXe,"A",{href:!0});var qXt=s(yZ);akr=r(qXt,"TFSwinForImageClassification"),qXt.forEach(t),nkr=r(uXe," (Swin Transformer model)"),uXe.forEach(t),skr=i(Qe),_5=n(Qe,"LI",{});var pXe=s(_5);X5e=n(pXe,"STRONG",{});var jXt=s(X5e);lkr=r(jXt,"vit"),jXt.forEach(t),ikr=r(pXe," \u2014 "),xZ=n(pXe,"A",{href:!0});var DXt=s(xZ);dkr=r(DXt,"TFViTForImageClassification"),DXt.forEach(t),ckr=r(pXe," (ViT model)"),pXe.forEach(t),Qe.forEach(t),mkr=i(Hl),T(b5.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),KHe=i(m),Bc=n(m,"H2",{class:!0});var cKe=s(Bc);v5=n(cKe,"A",{id:!0,class:!0,href:!0});var GXt=s(v5);z5e=n(GXt,"SPAN",{});var OXt=s(z5e);T(N$.$$.fragment,OXt),OXt.forEach(t),GXt.forEach(t),fkr=i(cKe),W5e=n(cKe,"SPAN",{});var VXt=s(W5e);gkr=r(VXt,"TFAutoModelForSemanticSegmentation"),VXt.forEach(t),cKe.forEach(t),ZHe=i(m),ir=n(m,"DIV",{class:!0});var Jl=s(ir);T(q$.$$.fragment,Jl),hkr=i(Jl),Ic=n(Jl,"P",{});var hse=s(Ic);ukr=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$Z=n(hse,"A",{href:!0});var XXt=s($Z);pkr=r(XXt,"from_pretrained()"),XXt.forEach(t),_kr=r(hse," class method or the "),kZ=n(hse,"A",{href:!0});var zXt=s(kZ);bkr=r(zXt,"from_config()"),zXt.forEach(t),vkr=r(hse,` class
method.`),hse.forEach(t),Fkr=i(Jl),j$=n(Jl,"P",{});var mKe=s(j$);Tkr=r(mKe,"This class cannot be instantiated directly using "),Q5e=n(mKe,"CODE",{});var WXt=s(Q5e);Mkr=r(WXt,"__init__()"),WXt.forEach(t),Ekr=r(mKe," (throws an error)."),mKe.forEach(t),Ckr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var $y=s(Ot);T(D$.$$.fragment,$y),wkr=i($y),U5e=n($y,"P",{});var QXt=s(U5e);Akr=r(QXt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),QXt.forEach(t),Lkr=i($y),Nc=n($y,"P",{});var use=s(Nc);ykr=r(use,`Note:
Loading a model from its configuration file does `),H5e=n(use,"STRONG",{});var UXt=s(H5e);xkr=r(UXt,"not"),UXt.forEach(t),$kr=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(use,"A",{href:!0});var HXt=s(SZ);kkr=r(HXt,"from_pretrained()"),HXt.forEach(t),Skr=r(use," to load the model weights."),use.forEach(t),Rkr=i($y),T(F5.$$.fragment,$y),$y.forEach(t),Pkr=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(G$.$$.fragment,Yl),Bkr=i(Yl),J5e=n(Yl,"P",{});var JXt=s(J5e);Ikr=r(JXt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JXt.forEach(t),Nkr=i(Yl),Fn=n(Yl,"P",{});var ky=s(Fn);qkr=r(ky,"The model class to instantiate is selected based on the "),Y5e=n(ky,"CODE",{});var YXt=s(Y5e);jkr=r(YXt,"model_type"),YXt.forEach(t),Dkr=r(ky,` property of the config object (either
passed as an argument or loaded from `),K5e=n(ky,"CODE",{});var KXt=s(K5e);Gkr=r(KXt,"pretrained_model_name_or_path"),KXt.forEach(t),Okr=r(ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n(ky,"CODE",{});var ZXt=s(Z5e);Vkr=r(ZXt,"pretrained_model_name_or_path"),ZXt.forEach(t),Xkr=r(ky,":"),ky.forEach(t),zkr=i(Yl),qc=n(Yl,"UL",{});var pse=s(qc);T5=n(pse,"LI",{});var _Xe=s(T5);e0e=n(_Xe,"STRONG",{});var ezt=s(e0e);Wkr=r(ezt,"data2vec-vision"),ezt.forEach(t),Qkr=r(_Xe," \u2014 "),RZ=n(_Xe,"A",{href:!0});var ozt=s(RZ);Ukr=r(ozt,"TFData2VecVisionForSemanticSegmentation"),ozt.forEach(t),Hkr=r(_Xe," (Data2VecVision model)"),_Xe.forEach(t),Jkr=i(pse),M5=n(pse,"LI",{});var bXe=s(M5);o0e=n(bXe,"STRONG",{});var rzt=s(o0e);Ykr=r(rzt,"mobilevit"),rzt.forEach(t),Kkr=r(bXe," \u2014 "),PZ=n(bXe,"A",{href:!0});var tzt=s(PZ);Zkr=r(tzt,"TFMobileViTForSemanticSegmentation"),tzt.forEach(t),eSr=r(bXe," (MobileViT model)"),bXe.forEach(t),oSr=i(pse),E5=n(pse,"LI",{});var vXe=s(E5);r0e=n(vXe,"STRONG",{});var azt=s(r0e);rSr=r(azt,"segformer"),azt.forEach(t),tSr=r(vXe," \u2014 "),BZ=n(vXe,"A",{href:!0});var nzt=s(BZ);aSr=r(nzt,"TFSegformerForSemanticSegmentation"),nzt.forEach(t),nSr=r(vXe," (SegFormer model)"),vXe.forEach(t),pse.forEach(t),sSr=i(Yl),T(C5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),eJe=i(m),jc=n(m,"H2",{class:!0});var fKe=s(jc);w5=n(fKe,"A",{id:!0,class:!0,href:!0});var szt=s(w5);t0e=n(szt,"SPAN",{});var lzt=s(t0e);T(O$.$$.fragment,lzt),lzt.forEach(t),szt.forEach(t),lSr=i(fKe),a0e=n(fKe,"SPAN",{});var izt=s(a0e);iSr=r(izt,"TFAutoModelForMaskedLM"),izt.forEach(t),fKe.forEach(t),oJe=i(m),dr=n(m,"DIV",{class:!0});var Kl=s(dr);T(V$.$$.fragment,Kl),dSr=i(Kl),Dc=n(Kl,"P",{});var _se=s(Dc);cSr=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IZ=n(_se,"A",{href:!0});var dzt=s(IZ);mSr=r(dzt,"from_pretrained()"),dzt.forEach(t),fSr=r(_se," class method or the "),NZ=n(_se,"A",{href:!0});var czt=s(NZ);gSr=r(czt,"from_config()"),czt.forEach(t),hSr=r(_se,` class
method.`),_se.forEach(t),uSr=i(Kl),X$=n(Kl,"P",{});var gKe=s(X$);pSr=r(gKe,"This class cannot be instantiated directly using "),n0e=n(gKe,"CODE",{});var mzt=s(n0e);_Sr=r(mzt,"__init__()"),mzt.forEach(t),bSr=r(gKe," (throws an error)."),gKe.forEach(t),vSr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var Sy=s(Vt);T(z$.$$.fragment,Sy),FSr=i(Sy),s0e=n(Sy,"P",{});var fzt=s(s0e);TSr=r(fzt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fzt.forEach(t),MSr=i(Sy),Gc=n(Sy,"P",{});var bse=s(Gc);ESr=r(bse,`Note:
Loading a model from its configuration file does `),l0e=n(bse,"STRONG",{});var gzt=s(l0e);CSr=r(gzt,"not"),gzt.forEach(t),wSr=r(bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(bse,"A",{href:!0});var hzt=s(qZ);ASr=r(hzt,"from_pretrained()"),hzt.forEach(t),LSr=r(bse," to load the model weights."),bse.forEach(t),ySr=i(Sy),T(A5.$$.fragment,Sy),Sy.forEach(t),xSr=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(W$.$$.fragment,Zl),$Sr=i(Zl),i0e=n(Zl,"P",{});var uzt=s(i0e);kSr=r(uzt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uzt.forEach(t),SSr=i(Zl),Tn=n(Zl,"P",{});var Ry=s(Tn);RSr=r(Ry,"The model class to instantiate is selected based on the "),d0e=n(Ry,"CODE",{});var pzt=s(d0e);PSr=r(pzt,"model_type"),pzt.forEach(t),BSr=r(Ry,` property of the config object (either
passed as an argument or loaded from `),c0e=n(Ry,"CODE",{});var _zt=s(c0e);ISr=r(_zt,"pretrained_model_name_or_path"),_zt.forEach(t),NSr=r(Ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(Ry,"CODE",{});var bzt=s(m0e);qSr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),jSr=r(Ry,":"),Ry.forEach(t),DSr=i(Zl),fe=n(Zl,"UL",{});var _e=s(fe);L5=n(_e,"LI",{});var FXe=s(L5);f0e=n(FXe,"STRONG",{});var vzt=s(f0e);GSr=r(vzt,"albert"),vzt.forEach(t),OSr=r(FXe," \u2014 "),jZ=n(FXe,"A",{href:!0});var Fzt=s(jZ);VSr=r(Fzt,"TFAlbertForMaskedLM"),Fzt.forEach(t),XSr=r(FXe," (ALBERT model)"),FXe.forEach(t),zSr=i(_e),y5=n(_e,"LI",{});var TXe=s(y5);g0e=n(TXe,"STRONG",{});var Tzt=s(g0e);WSr=r(Tzt,"bert"),Tzt.forEach(t),QSr=r(TXe," \u2014 "),DZ=n(TXe,"A",{href:!0});var Mzt=s(DZ);USr=r(Mzt,"TFBertForMaskedLM"),Mzt.forEach(t),HSr=r(TXe," (BERT model)"),TXe.forEach(t),JSr=i(_e),x5=n(_e,"LI",{});var MXe=s(x5);h0e=n(MXe,"STRONG",{});var Ezt=s(h0e);YSr=r(Ezt,"camembert"),Ezt.forEach(t),KSr=r(MXe," \u2014 "),GZ=n(MXe,"A",{href:!0});var Czt=s(GZ);ZSr=r(Czt,"TFCamembertForMaskedLM"),Czt.forEach(t),eRr=r(MXe," (CamemBERT model)"),MXe.forEach(t),oRr=i(_e),$5=n(_e,"LI",{});var EXe=s($5);u0e=n(EXe,"STRONG",{});var wzt=s(u0e);rRr=r(wzt,"convbert"),wzt.forEach(t),tRr=r(EXe," \u2014 "),OZ=n(EXe,"A",{href:!0});var Azt=s(OZ);aRr=r(Azt,"TFConvBertForMaskedLM"),Azt.forEach(t),nRr=r(EXe," (ConvBERT model)"),EXe.forEach(t),sRr=i(_e),k5=n(_e,"LI",{});var CXe=s(k5);p0e=n(CXe,"STRONG",{});var Lzt=s(p0e);lRr=r(Lzt,"deberta"),Lzt.forEach(t),iRr=r(CXe," \u2014 "),VZ=n(CXe,"A",{href:!0});var yzt=s(VZ);dRr=r(yzt,"TFDebertaForMaskedLM"),yzt.forEach(t),cRr=r(CXe," (DeBERTa model)"),CXe.forEach(t),mRr=i(_e),S5=n(_e,"LI",{});var wXe=s(S5);_0e=n(wXe,"STRONG",{});var xzt=s(_0e);fRr=r(xzt,"deberta-v2"),xzt.forEach(t),gRr=r(wXe," \u2014 "),XZ=n(wXe,"A",{href:!0});var $zt=s(XZ);hRr=r($zt,"TFDebertaV2ForMaskedLM"),$zt.forEach(t),uRr=r(wXe," (DeBERTa-v2 model)"),wXe.forEach(t),pRr=i(_e),R5=n(_e,"LI",{});var AXe=s(R5);b0e=n(AXe,"STRONG",{});var kzt=s(b0e);_Rr=r(kzt,"distilbert"),kzt.forEach(t),bRr=r(AXe," \u2014 "),zZ=n(AXe,"A",{href:!0});var Szt=s(zZ);vRr=r(Szt,"TFDistilBertForMaskedLM"),Szt.forEach(t),FRr=r(AXe," (DistilBERT model)"),AXe.forEach(t),TRr=i(_e),P5=n(_e,"LI",{});var LXe=s(P5);v0e=n(LXe,"STRONG",{});var Rzt=s(v0e);MRr=r(Rzt,"electra"),Rzt.forEach(t),ERr=r(LXe," \u2014 "),WZ=n(LXe,"A",{href:!0});var Pzt=s(WZ);CRr=r(Pzt,"TFElectraForMaskedLM"),Pzt.forEach(t),wRr=r(LXe," (ELECTRA model)"),LXe.forEach(t),ARr=i(_e),B5=n(_e,"LI",{});var yXe=s(B5);F0e=n(yXe,"STRONG",{});var Bzt=s(F0e);LRr=r(Bzt,"flaubert"),Bzt.forEach(t),yRr=r(yXe," \u2014 "),QZ=n(yXe,"A",{href:!0});var Izt=s(QZ);xRr=r(Izt,"TFFlaubertWithLMHeadModel"),Izt.forEach(t),$Rr=r(yXe," (FlauBERT model)"),yXe.forEach(t),kRr=i(_e),I5=n(_e,"LI",{});var xXe=s(I5);T0e=n(xXe,"STRONG",{});var Nzt=s(T0e);SRr=r(Nzt,"funnel"),Nzt.forEach(t),RRr=r(xXe," \u2014 "),UZ=n(xXe,"A",{href:!0});var qzt=s(UZ);PRr=r(qzt,"TFFunnelForMaskedLM"),qzt.forEach(t),BRr=r(xXe," (Funnel Transformer model)"),xXe.forEach(t),IRr=i(_e),N5=n(_e,"LI",{});var $Xe=s(N5);M0e=n($Xe,"STRONG",{});var jzt=s(M0e);NRr=r(jzt,"layoutlm"),jzt.forEach(t),qRr=r($Xe," \u2014 "),HZ=n($Xe,"A",{href:!0});var Dzt=s(HZ);jRr=r(Dzt,"TFLayoutLMForMaskedLM"),Dzt.forEach(t),DRr=r($Xe," (LayoutLM model)"),$Xe.forEach(t),GRr=i(_e),q5=n(_e,"LI",{});var kXe=s(q5);E0e=n(kXe,"STRONG",{});var Gzt=s(E0e);ORr=r(Gzt,"longformer"),Gzt.forEach(t),VRr=r(kXe," \u2014 "),JZ=n(kXe,"A",{href:!0});var Ozt=s(JZ);XRr=r(Ozt,"TFLongformerForMaskedLM"),Ozt.forEach(t),zRr=r(kXe," (Longformer model)"),kXe.forEach(t),WRr=i(_e),j5=n(_e,"LI",{});var SXe=s(j5);C0e=n(SXe,"STRONG",{});var Vzt=s(C0e);QRr=r(Vzt,"mobilebert"),Vzt.forEach(t),URr=r(SXe," \u2014 "),YZ=n(SXe,"A",{href:!0});var Xzt=s(YZ);HRr=r(Xzt,"TFMobileBertForMaskedLM"),Xzt.forEach(t),JRr=r(SXe," (MobileBERT model)"),SXe.forEach(t),YRr=i(_e),D5=n(_e,"LI",{});var RXe=s(D5);w0e=n(RXe,"STRONG",{});var zzt=s(w0e);KRr=r(zzt,"mpnet"),zzt.forEach(t),ZRr=r(RXe," \u2014 "),KZ=n(RXe,"A",{href:!0});var Wzt=s(KZ);ePr=r(Wzt,"TFMPNetForMaskedLM"),Wzt.forEach(t),oPr=r(RXe," (MPNet model)"),RXe.forEach(t),rPr=i(_e),G5=n(_e,"LI",{});var PXe=s(G5);A0e=n(PXe,"STRONG",{});var Qzt=s(A0e);tPr=r(Qzt,"rembert"),Qzt.forEach(t),aPr=r(PXe," \u2014 "),ZZ=n(PXe,"A",{href:!0});var Uzt=s(ZZ);nPr=r(Uzt,"TFRemBertForMaskedLM"),Uzt.forEach(t),sPr=r(PXe," (RemBERT model)"),PXe.forEach(t),lPr=i(_e),O5=n(_e,"LI",{});var BXe=s(O5);L0e=n(BXe,"STRONG",{});var Hzt=s(L0e);iPr=r(Hzt,"roberta"),Hzt.forEach(t),dPr=r(BXe," \u2014 "),eee=n(BXe,"A",{href:!0});var Jzt=s(eee);cPr=r(Jzt,"TFRobertaForMaskedLM"),Jzt.forEach(t),mPr=r(BXe," (RoBERTa model)"),BXe.forEach(t),fPr=i(_e),V5=n(_e,"LI",{});var IXe=s(V5);y0e=n(IXe,"STRONG",{});var Yzt=s(y0e);gPr=r(Yzt,"roformer"),Yzt.forEach(t),hPr=r(IXe," \u2014 "),oee=n(IXe,"A",{href:!0});var Kzt=s(oee);uPr=r(Kzt,"TFRoFormerForMaskedLM"),Kzt.forEach(t),pPr=r(IXe," (RoFormer model)"),IXe.forEach(t),_Pr=i(_e),X5=n(_e,"LI",{});var NXe=s(X5);x0e=n(NXe,"STRONG",{});var Zzt=s(x0e);bPr=r(Zzt,"tapas"),Zzt.forEach(t),vPr=r(NXe," \u2014 "),ree=n(NXe,"A",{href:!0});var eWt=s(ree);FPr=r(eWt,"TFTapasForMaskedLM"),eWt.forEach(t),TPr=r(NXe," (TAPAS model)"),NXe.forEach(t),MPr=i(_e),z5=n(_e,"LI",{});var qXe=s(z5);$0e=n(qXe,"STRONG",{});var oWt=s($0e);EPr=r(oWt,"xlm"),oWt.forEach(t),CPr=r(qXe," \u2014 "),tee=n(qXe,"A",{href:!0});var rWt=s(tee);wPr=r(rWt,"TFXLMWithLMHeadModel"),rWt.forEach(t),APr=r(qXe," (XLM model)"),qXe.forEach(t),LPr=i(_e),W5=n(_e,"LI",{});var jXe=s(W5);k0e=n(jXe,"STRONG",{});var tWt=s(k0e);yPr=r(tWt,"xlm-roberta"),tWt.forEach(t),xPr=r(jXe," \u2014 "),aee=n(jXe,"A",{href:!0});var aWt=s(aee);$Pr=r(aWt,"TFXLMRobertaForMaskedLM"),aWt.forEach(t),kPr=r(jXe," (XLM-RoBERTa model)"),jXe.forEach(t),_e.forEach(t),SPr=i(Zl),T(Q5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),rJe=i(m),Oc=n(m,"H2",{class:!0});var hKe=s(Oc);U5=n(hKe,"A",{id:!0,class:!0,href:!0});var nWt=s(U5);S0e=n(nWt,"SPAN",{});var sWt=s(S0e);T(Q$.$$.fragment,sWt),sWt.forEach(t),nWt.forEach(t),RPr=i(hKe),R0e=n(hKe,"SPAN",{});var lWt=s(R0e);PPr=r(lWt,"TFAutoModelForSeq2SeqLM"),lWt.forEach(t),hKe.forEach(t),tJe=i(m),cr=n(m,"DIV",{class:!0});var ei=s(cr);T(U$.$$.fragment,ei),BPr=i(ei),Vc=n(ei,"P",{});var vse=s(Vc);IPr=r(vse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nee=n(vse,"A",{href:!0});var iWt=s(nee);NPr=r(iWt,"from_pretrained()"),iWt.forEach(t),qPr=r(vse," class method or the "),see=n(vse,"A",{href:!0});var dWt=s(see);jPr=r(dWt,"from_config()"),dWt.forEach(t),DPr=r(vse,` class
method.`),vse.forEach(t),GPr=i(ei),H$=n(ei,"P",{});var uKe=s(H$);OPr=r(uKe,"This class cannot be instantiated directly using "),P0e=n(uKe,"CODE",{});var cWt=s(P0e);VPr=r(cWt,"__init__()"),cWt.forEach(t),XPr=r(uKe," (throws an error)."),uKe.forEach(t),zPr=i(ei),Xt=n(ei,"DIV",{class:!0});var Py=s(Xt);T(J$.$$.fragment,Py),WPr=i(Py),B0e=n(Py,"P",{});var mWt=s(B0e);QPr=r(mWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mWt.forEach(t),UPr=i(Py),Xc=n(Py,"P",{});var Fse=s(Xc);HPr=r(Fse,`Note:
Loading a model from its configuration file does `),I0e=n(Fse,"STRONG",{});var fWt=s(I0e);JPr=r(fWt,"not"),fWt.forEach(t),YPr=r(Fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=n(Fse,"A",{href:!0});var gWt=s(lee);KPr=r(gWt,"from_pretrained()"),gWt.forEach(t),ZPr=r(Fse," to load the model weights."),Fse.forEach(t),eBr=i(Py),T(H5.$$.fragment,Py),Py.forEach(t),oBr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(Y$.$$.fragment,oi),rBr=i(oi),N0e=n(oi,"P",{});var hWt=s(N0e);tBr=r(hWt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hWt.forEach(t),aBr=i(oi),Mn=n(oi,"P",{});var By=s(Mn);nBr=r(By,"The model class to instantiate is selected based on the "),q0e=n(By,"CODE",{});var uWt=s(q0e);sBr=r(uWt,"model_type"),uWt.forEach(t),lBr=r(By,` property of the config object (either
passed as an argument or loaded from `),j0e=n(By,"CODE",{});var pWt=s(j0e);iBr=r(pWt,"pretrained_model_name_or_path"),pWt.forEach(t),dBr=r(By,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=n(By,"CODE",{});var _Wt=s(D0e);cBr=r(_Wt,"pretrained_model_name_or_path"),_Wt.forEach(t),mBr=r(By,":"),By.forEach(t),fBr=i(oi),ye=n(oi,"UL",{});var Ne=s(ye);J5=n(Ne,"LI",{});var DXe=s(J5);G0e=n(DXe,"STRONG",{});var bWt=s(G0e);gBr=r(bWt,"bart"),bWt.forEach(t),hBr=r(DXe," \u2014 "),iee=n(DXe,"A",{href:!0});var vWt=s(iee);uBr=r(vWt,"TFBartForConditionalGeneration"),vWt.forEach(t),pBr=r(DXe," (BART model)"),DXe.forEach(t),_Br=i(Ne),Y5=n(Ne,"LI",{});var GXe=s(Y5);O0e=n(GXe,"STRONG",{});var FWt=s(O0e);bBr=r(FWt,"blenderbot"),FWt.forEach(t),vBr=r(GXe," \u2014 "),dee=n(GXe,"A",{href:!0});var TWt=s(dee);FBr=r(TWt,"TFBlenderbotForConditionalGeneration"),TWt.forEach(t),TBr=r(GXe," (Blenderbot model)"),GXe.forEach(t),MBr=i(Ne),K5=n(Ne,"LI",{});var OXe=s(K5);V0e=n(OXe,"STRONG",{});var MWt=s(V0e);EBr=r(MWt,"blenderbot-small"),MWt.forEach(t),CBr=r(OXe," \u2014 "),cee=n(OXe,"A",{href:!0});var EWt=s(cee);wBr=r(EWt,"TFBlenderbotSmallForConditionalGeneration"),EWt.forEach(t),ABr=r(OXe," (BlenderbotSmall model)"),OXe.forEach(t),LBr=i(Ne),Z5=n(Ne,"LI",{});var VXe=s(Z5);X0e=n(VXe,"STRONG",{});var CWt=s(X0e);yBr=r(CWt,"encoder-decoder"),CWt.forEach(t),xBr=r(VXe," \u2014 "),mee=n(VXe,"A",{href:!0});var wWt=s(mee);$Br=r(wWt,"TFEncoderDecoderModel"),wWt.forEach(t),kBr=r(VXe," (Encoder decoder model)"),VXe.forEach(t),SBr=i(Ne),e0=n(Ne,"LI",{});var XXe=s(e0);z0e=n(XXe,"STRONG",{});var AWt=s(z0e);RBr=r(AWt,"led"),AWt.forEach(t),PBr=r(XXe," \u2014 "),fee=n(XXe,"A",{href:!0});var LWt=s(fee);BBr=r(LWt,"TFLEDForConditionalGeneration"),LWt.forEach(t),IBr=r(XXe," (LED model)"),XXe.forEach(t),NBr=i(Ne),o0=n(Ne,"LI",{});var zXe=s(o0);W0e=n(zXe,"STRONG",{});var yWt=s(W0e);qBr=r(yWt,"marian"),yWt.forEach(t),jBr=r(zXe," \u2014 "),gee=n(zXe,"A",{href:!0});var xWt=s(gee);DBr=r(xWt,"TFMarianMTModel"),xWt.forEach(t),GBr=r(zXe," (Marian model)"),zXe.forEach(t),OBr=i(Ne),r0=n(Ne,"LI",{});var WXe=s(r0);Q0e=n(WXe,"STRONG",{});var $Wt=s(Q0e);VBr=r($Wt,"mbart"),$Wt.forEach(t),XBr=r(WXe," \u2014 "),hee=n(WXe,"A",{href:!0});var kWt=s(hee);zBr=r(kWt,"TFMBartForConditionalGeneration"),kWt.forEach(t),WBr=r(WXe," (mBART model)"),WXe.forEach(t),QBr=i(Ne),t0=n(Ne,"LI",{});var QXe=s(t0);U0e=n(QXe,"STRONG",{});var SWt=s(U0e);UBr=r(SWt,"mt5"),SWt.forEach(t),HBr=r(QXe," \u2014 "),uee=n(QXe,"A",{href:!0});var RWt=s(uee);JBr=r(RWt,"TFMT5ForConditionalGeneration"),RWt.forEach(t),YBr=r(QXe," (MT5 model)"),QXe.forEach(t),KBr=i(Ne),a0=n(Ne,"LI",{});var UXe=s(a0);H0e=n(UXe,"STRONG",{});var PWt=s(H0e);ZBr=r(PWt,"pegasus"),PWt.forEach(t),eIr=r(UXe," \u2014 "),pee=n(UXe,"A",{href:!0});var BWt=s(pee);oIr=r(BWt,"TFPegasusForConditionalGeneration"),BWt.forEach(t),rIr=r(UXe," (Pegasus model)"),UXe.forEach(t),tIr=i(Ne),n0=n(Ne,"LI",{});var HXe=s(n0);J0e=n(HXe,"STRONG",{});var IWt=s(J0e);aIr=r(IWt,"t5"),IWt.forEach(t),nIr=r(HXe," \u2014 "),_ee=n(HXe,"A",{href:!0});var NWt=s(_ee);sIr=r(NWt,"TFT5ForConditionalGeneration"),NWt.forEach(t),lIr=r(HXe," (T5 model)"),HXe.forEach(t),Ne.forEach(t),iIr=i(oi),T(s0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),aJe=i(m),zc=n(m,"H2",{class:!0});var pKe=s(zc);l0=n(pKe,"A",{id:!0,class:!0,href:!0});var qWt=s(l0);Y0e=n(qWt,"SPAN",{});var jWt=s(Y0e);T(K$.$$.fragment,jWt),jWt.forEach(t),qWt.forEach(t),dIr=i(pKe),K0e=n(pKe,"SPAN",{});var DWt=s(K0e);cIr=r(DWt,"TFAutoModelForSequenceClassification"),DWt.forEach(t),pKe.forEach(t),nJe=i(m),mr=n(m,"DIV",{class:!0});var ri=s(mr);T(Z$.$$.fragment,ri),mIr=i(ri),Wc=n(ri,"P",{});var Tse=s(Wc);fIr=r(Tse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bee=n(Tse,"A",{href:!0});var GWt=s(bee);gIr=r(GWt,"from_pretrained()"),GWt.forEach(t),hIr=r(Tse," class method or the "),vee=n(Tse,"A",{href:!0});var OWt=s(vee);uIr=r(OWt,"from_config()"),OWt.forEach(t),pIr=r(Tse,` class
method.`),Tse.forEach(t),_Ir=i(ri),ek=n(ri,"P",{});var _Ke=s(ek);bIr=r(_Ke,"This class cannot be instantiated directly using "),Z0e=n(_Ke,"CODE",{});var VWt=s(Z0e);vIr=r(VWt,"__init__()"),VWt.forEach(t),FIr=r(_Ke," (throws an error)."),_Ke.forEach(t),TIr=i(ri),zt=n(ri,"DIV",{class:!0});var Iy=s(zt);T(ok.$$.fragment,Iy),MIr=i(Iy),ewe=n(Iy,"P",{});var XWt=s(ewe);EIr=r(XWt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XWt.forEach(t),CIr=i(Iy),Qc=n(Iy,"P",{});var Mse=s(Qc);wIr=r(Mse,`Note:
Loading a model from its configuration file does `),owe=n(Mse,"STRONG",{});var zWt=s(owe);AIr=r(zWt,"not"),zWt.forEach(t),LIr=r(Mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=n(Mse,"A",{href:!0});var WWt=s(Fee);yIr=r(WWt,"from_pretrained()"),WWt.forEach(t),xIr=r(Mse," to load the model weights."),Mse.forEach(t),$Ir=i(Iy),T(i0.$$.fragment,Iy),Iy.forEach(t),kIr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(rk.$$.fragment,ti),SIr=i(ti),rwe=n(ti,"P",{});var QWt=s(rwe);RIr=r(QWt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QWt.forEach(t),PIr=i(ti),En=n(ti,"P",{});var Ny=s(En);BIr=r(Ny,"The model class to instantiate is selected based on the "),twe=n(Ny,"CODE",{});var UWt=s(twe);IIr=r(UWt,"model_type"),UWt.forEach(t),NIr=r(Ny,` property of the config object (either
passed as an argument or loaded from `),awe=n(Ny,"CODE",{});var HWt=s(awe);qIr=r(HWt,"pretrained_model_name_or_path"),HWt.forEach(t),jIr=r(Ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=n(Ny,"CODE",{});var JWt=s(nwe);DIr=r(JWt,"pretrained_model_name_or_path"),JWt.forEach(t),GIr=r(Ny,":"),Ny.forEach(t),OIr=i(ti),re=n(ti,"UL",{});var ae=s(re);d0=n(ae,"LI",{});var JXe=s(d0);swe=n(JXe,"STRONG",{});var YWt=s(swe);VIr=r(YWt,"albert"),YWt.forEach(t),XIr=r(JXe," \u2014 "),Tee=n(JXe,"A",{href:!0});var KWt=s(Tee);zIr=r(KWt,"TFAlbertForSequenceClassification"),KWt.forEach(t),WIr=r(JXe," (ALBERT model)"),JXe.forEach(t),QIr=i(ae),c0=n(ae,"LI",{});var YXe=s(c0);lwe=n(YXe,"STRONG",{});var ZWt=s(lwe);UIr=r(ZWt,"bert"),ZWt.forEach(t),HIr=r(YXe," \u2014 "),Mee=n(YXe,"A",{href:!0});var eQt=s(Mee);JIr=r(eQt,"TFBertForSequenceClassification"),eQt.forEach(t),YIr=r(YXe," (BERT model)"),YXe.forEach(t),KIr=i(ae),m0=n(ae,"LI",{});var KXe=s(m0);iwe=n(KXe,"STRONG",{});var oQt=s(iwe);ZIr=r(oQt,"camembert"),oQt.forEach(t),eNr=r(KXe," \u2014 "),Eee=n(KXe,"A",{href:!0});var rQt=s(Eee);oNr=r(rQt,"TFCamembertForSequenceClassification"),rQt.forEach(t),rNr=r(KXe," (CamemBERT model)"),KXe.forEach(t),tNr=i(ae),f0=n(ae,"LI",{});var ZXe=s(f0);dwe=n(ZXe,"STRONG",{});var tQt=s(dwe);aNr=r(tQt,"convbert"),tQt.forEach(t),nNr=r(ZXe," \u2014 "),Cee=n(ZXe,"A",{href:!0});var aQt=s(Cee);sNr=r(aQt,"TFConvBertForSequenceClassification"),aQt.forEach(t),lNr=r(ZXe," (ConvBERT model)"),ZXe.forEach(t),iNr=i(ae),g0=n(ae,"LI",{});var eze=s(g0);cwe=n(eze,"STRONG",{});var nQt=s(cwe);dNr=r(nQt,"ctrl"),nQt.forEach(t),cNr=r(eze," \u2014 "),wee=n(eze,"A",{href:!0});var sQt=s(wee);mNr=r(sQt,"TFCTRLForSequenceClassification"),sQt.forEach(t),fNr=r(eze," (CTRL model)"),eze.forEach(t),gNr=i(ae),h0=n(ae,"LI",{});var oze=s(h0);mwe=n(oze,"STRONG",{});var lQt=s(mwe);hNr=r(lQt,"deberta"),lQt.forEach(t),uNr=r(oze," \u2014 "),Aee=n(oze,"A",{href:!0});var iQt=s(Aee);pNr=r(iQt,"TFDebertaForSequenceClassification"),iQt.forEach(t),_Nr=r(oze," (DeBERTa model)"),oze.forEach(t),bNr=i(ae),u0=n(ae,"LI",{});var rze=s(u0);fwe=n(rze,"STRONG",{});var dQt=s(fwe);vNr=r(dQt,"deberta-v2"),dQt.forEach(t),FNr=r(rze," \u2014 "),Lee=n(rze,"A",{href:!0});var cQt=s(Lee);TNr=r(cQt,"TFDebertaV2ForSequenceClassification"),cQt.forEach(t),MNr=r(rze," (DeBERTa-v2 model)"),rze.forEach(t),ENr=i(ae),p0=n(ae,"LI",{});var tze=s(p0);gwe=n(tze,"STRONG",{});var mQt=s(gwe);CNr=r(mQt,"distilbert"),mQt.forEach(t),wNr=r(tze," \u2014 "),yee=n(tze,"A",{href:!0});var fQt=s(yee);ANr=r(fQt,"TFDistilBertForSequenceClassification"),fQt.forEach(t),LNr=r(tze," (DistilBERT model)"),tze.forEach(t),yNr=i(ae),_0=n(ae,"LI",{});var aze=s(_0);hwe=n(aze,"STRONG",{});var gQt=s(hwe);xNr=r(gQt,"electra"),gQt.forEach(t),$Nr=r(aze," \u2014 "),xee=n(aze,"A",{href:!0});var hQt=s(xee);kNr=r(hQt,"TFElectraForSequenceClassification"),hQt.forEach(t),SNr=r(aze," (ELECTRA model)"),aze.forEach(t),RNr=i(ae),b0=n(ae,"LI",{});var nze=s(b0);uwe=n(nze,"STRONG",{});var uQt=s(uwe);PNr=r(uQt,"flaubert"),uQt.forEach(t),BNr=r(nze," \u2014 "),$ee=n(nze,"A",{href:!0});var pQt=s($ee);INr=r(pQt,"TFFlaubertForSequenceClassification"),pQt.forEach(t),NNr=r(nze," (FlauBERT model)"),nze.forEach(t),qNr=i(ae),v0=n(ae,"LI",{});var sze=s(v0);pwe=n(sze,"STRONG",{});var _Qt=s(pwe);jNr=r(_Qt,"funnel"),_Qt.forEach(t),DNr=r(sze," \u2014 "),kee=n(sze,"A",{href:!0});var bQt=s(kee);GNr=r(bQt,"TFFunnelForSequenceClassification"),bQt.forEach(t),ONr=r(sze," (Funnel Transformer model)"),sze.forEach(t),VNr=i(ae),F0=n(ae,"LI",{});var lze=s(F0);_we=n(lze,"STRONG",{});var vQt=s(_we);XNr=r(vQt,"gpt2"),vQt.forEach(t),zNr=r(lze," \u2014 "),See=n(lze,"A",{href:!0});var FQt=s(See);WNr=r(FQt,"TFGPT2ForSequenceClassification"),FQt.forEach(t),QNr=r(lze," (OpenAI GPT-2 model)"),lze.forEach(t),UNr=i(ae),T0=n(ae,"LI",{});var ize=s(T0);bwe=n(ize,"STRONG",{});var TQt=s(bwe);HNr=r(TQt,"gptj"),TQt.forEach(t),JNr=r(ize," \u2014 "),Ree=n(ize,"A",{href:!0});var MQt=s(Ree);YNr=r(MQt,"TFGPTJForSequenceClassification"),MQt.forEach(t),KNr=r(ize," (GPT-J model)"),ize.forEach(t),ZNr=i(ae),M0=n(ae,"LI",{});var dze=s(M0);vwe=n(dze,"STRONG",{});var EQt=s(vwe);eqr=r(EQt,"layoutlm"),EQt.forEach(t),oqr=r(dze," \u2014 "),Pee=n(dze,"A",{href:!0});var CQt=s(Pee);rqr=r(CQt,"TFLayoutLMForSequenceClassification"),CQt.forEach(t),tqr=r(dze," (LayoutLM model)"),dze.forEach(t),aqr=i(ae),E0=n(ae,"LI",{});var cze=s(E0);Fwe=n(cze,"STRONG",{});var wQt=s(Fwe);nqr=r(wQt,"layoutlmv3"),wQt.forEach(t),sqr=r(cze," \u2014 "),Bee=n(cze,"A",{href:!0});var AQt=s(Bee);lqr=r(AQt,"TFLayoutLMv3ForSequenceClassification"),AQt.forEach(t),iqr=r(cze," (LayoutLMv3 model)"),cze.forEach(t),dqr=i(ae),C0=n(ae,"LI",{});var mze=s(C0);Twe=n(mze,"STRONG",{});var LQt=s(Twe);cqr=r(LQt,"longformer"),LQt.forEach(t),mqr=r(mze," \u2014 "),Iee=n(mze,"A",{href:!0});var yQt=s(Iee);fqr=r(yQt,"TFLongformerForSequenceClassification"),yQt.forEach(t),gqr=r(mze," (Longformer model)"),mze.forEach(t),hqr=i(ae),w0=n(ae,"LI",{});var fze=s(w0);Mwe=n(fze,"STRONG",{});var xQt=s(Mwe);uqr=r(xQt,"mobilebert"),xQt.forEach(t),pqr=r(fze," \u2014 "),Nee=n(fze,"A",{href:!0});var $Qt=s(Nee);_qr=r($Qt,"TFMobileBertForSequenceClassification"),$Qt.forEach(t),bqr=r(fze," (MobileBERT model)"),fze.forEach(t),vqr=i(ae),A0=n(ae,"LI",{});var gze=s(A0);Ewe=n(gze,"STRONG",{});var kQt=s(Ewe);Fqr=r(kQt,"mpnet"),kQt.forEach(t),Tqr=r(gze," \u2014 "),qee=n(gze,"A",{href:!0});var SQt=s(qee);Mqr=r(SQt,"TFMPNetForSequenceClassification"),SQt.forEach(t),Eqr=r(gze," (MPNet model)"),gze.forEach(t),Cqr=i(ae),L0=n(ae,"LI",{});var hze=s(L0);Cwe=n(hze,"STRONG",{});var RQt=s(Cwe);wqr=r(RQt,"openai-gpt"),RQt.forEach(t),Aqr=r(hze," \u2014 "),jee=n(hze,"A",{href:!0});var PQt=s(jee);Lqr=r(PQt,"TFOpenAIGPTForSequenceClassification"),PQt.forEach(t),yqr=r(hze," (OpenAI GPT model)"),hze.forEach(t),xqr=i(ae),y0=n(ae,"LI",{});var uze=s(y0);wwe=n(uze,"STRONG",{});var BQt=s(wwe);$qr=r(BQt,"rembert"),BQt.forEach(t),kqr=r(uze," \u2014 "),Dee=n(uze,"A",{href:!0});var IQt=s(Dee);Sqr=r(IQt,"TFRemBertForSequenceClassification"),IQt.forEach(t),Rqr=r(uze," (RemBERT model)"),uze.forEach(t),Pqr=i(ae),x0=n(ae,"LI",{});var pze=s(x0);Awe=n(pze,"STRONG",{});var NQt=s(Awe);Bqr=r(NQt,"roberta"),NQt.forEach(t),Iqr=r(pze," \u2014 "),Gee=n(pze,"A",{href:!0});var qQt=s(Gee);Nqr=r(qQt,"TFRobertaForSequenceClassification"),qQt.forEach(t),qqr=r(pze," (RoBERTa model)"),pze.forEach(t),jqr=i(ae),$0=n(ae,"LI",{});var _ze=s($0);Lwe=n(_ze,"STRONG",{});var jQt=s(Lwe);Dqr=r(jQt,"roformer"),jQt.forEach(t),Gqr=r(_ze," \u2014 "),Oee=n(_ze,"A",{href:!0});var DQt=s(Oee);Oqr=r(DQt,"TFRoFormerForSequenceClassification"),DQt.forEach(t),Vqr=r(_ze," (RoFormer model)"),_ze.forEach(t),Xqr=i(ae),k0=n(ae,"LI",{});var bze=s(k0);ywe=n(bze,"STRONG",{});var GQt=s(ywe);zqr=r(GQt,"tapas"),GQt.forEach(t),Wqr=r(bze," \u2014 "),Vee=n(bze,"A",{href:!0});var OQt=s(Vee);Qqr=r(OQt,"TFTapasForSequenceClassification"),OQt.forEach(t),Uqr=r(bze," (TAPAS model)"),bze.forEach(t),Hqr=i(ae),S0=n(ae,"LI",{});var vze=s(S0);xwe=n(vze,"STRONG",{});var VQt=s(xwe);Jqr=r(VQt,"transfo-xl"),VQt.forEach(t),Yqr=r(vze," \u2014 "),Xee=n(vze,"A",{href:!0});var XQt=s(Xee);Kqr=r(XQt,"TFTransfoXLForSequenceClassification"),XQt.forEach(t),Zqr=r(vze," (Transformer-XL model)"),vze.forEach(t),ejr=i(ae),R0=n(ae,"LI",{});var Fze=s(R0);$we=n(Fze,"STRONG",{});var zQt=s($we);ojr=r(zQt,"xlm"),zQt.forEach(t),rjr=r(Fze," \u2014 "),zee=n(Fze,"A",{href:!0});var WQt=s(zee);tjr=r(WQt,"TFXLMForSequenceClassification"),WQt.forEach(t),ajr=r(Fze," (XLM model)"),Fze.forEach(t),njr=i(ae),P0=n(ae,"LI",{});var Tze=s(P0);kwe=n(Tze,"STRONG",{});var QQt=s(kwe);sjr=r(QQt,"xlm-roberta"),QQt.forEach(t),ljr=r(Tze," \u2014 "),Wee=n(Tze,"A",{href:!0});var UQt=s(Wee);ijr=r(UQt,"TFXLMRobertaForSequenceClassification"),UQt.forEach(t),djr=r(Tze," (XLM-RoBERTa model)"),Tze.forEach(t),cjr=i(ae),B0=n(ae,"LI",{});var Mze=s(B0);Swe=n(Mze,"STRONG",{});var HQt=s(Swe);mjr=r(HQt,"xlnet"),HQt.forEach(t),fjr=r(Mze," \u2014 "),Qee=n(Mze,"A",{href:!0});var JQt=s(Qee);gjr=r(JQt,"TFXLNetForSequenceClassification"),JQt.forEach(t),hjr=r(Mze," (XLNet model)"),Mze.forEach(t),ae.forEach(t),ujr=i(ti),T(I0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),sJe=i(m),Uc=n(m,"H2",{class:!0});var bKe=s(Uc);N0=n(bKe,"A",{id:!0,class:!0,href:!0});var YQt=s(N0);Rwe=n(YQt,"SPAN",{});var KQt=s(Rwe);T(tk.$$.fragment,KQt),KQt.forEach(t),YQt.forEach(t),pjr=i(bKe),Pwe=n(bKe,"SPAN",{});var ZQt=s(Pwe);_jr=r(ZQt,"TFAutoModelForMultipleChoice"),ZQt.forEach(t),bKe.forEach(t),lJe=i(m),fr=n(m,"DIV",{class:!0});var ai=s(fr);T(ak.$$.fragment,ai),bjr=i(ai),Hc=n(ai,"P",{});var Ese=s(Hc);vjr=r(Ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Uee=n(Ese,"A",{href:!0});var eUt=s(Uee);Fjr=r(eUt,"from_pretrained()"),eUt.forEach(t),Tjr=r(Ese," class method or the "),Hee=n(Ese,"A",{href:!0});var oUt=s(Hee);Mjr=r(oUt,"from_config()"),oUt.forEach(t),Ejr=r(Ese,` class
method.`),Ese.forEach(t),Cjr=i(ai),nk=n(ai,"P",{});var vKe=s(nk);wjr=r(vKe,"This class cannot be instantiated directly using "),Bwe=n(vKe,"CODE",{});var rUt=s(Bwe);Ajr=r(rUt,"__init__()"),rUt.forEach(t),Ljr=r(vKe," (throws an error)."),vKe.forEach(t),yjr=i(ai),Wt=n(ai,"DIV",{class:!0});var qy=s(Wt);T(sk.$$.fragment,qy),xjr=i(qy),Iwe=n(qy,"P",{});var tUt=s(Iwe);$jr=r(tUt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tUt.forEach(t),kjr=i(qy),Jc=n(qy,"P",{});var Cse=s(Jc);Sjr=r(Cse,`Note:
Loading a model from its configuration file does `),Nwe=n(Cse,"STRONG",{});var aUt=s(Nwe);Rjr=r(aUt,"not"),aUt.forEach(t),Pjr=r(Cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=n(Cse,"A",{href:!0});var nUt=s(Jee);Bjr=r(nUt,"from_pretrained()"),nUt.forEach(t),Ijr=r(Cse," to load the model weights."),Cse.forEach(t),Njr=i(qy),T(q0.$$.fragment,qy),qy.forEach(t),qjr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(lk.$$.fragment,ni),jjr=i(ni),qwe=n(ni,"P",{});var sUt=s(qwe);Djr=r(sUt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sUt.forEach(t),Gjr=i(ni),Cn=n(ni,"P",{});var jy=s(Cn);Ojr=r(jy,"The model class to instantiate is selected based on the "),jwe=n(jy,"CODE",{});var lUt=s(jwe);Vjr=r(lUt,"model_type"),lUt.forEach(t),Xjr=r(jy,` property of the config object (either
passed as an argument or loaded from `),Dwe=n(jy,"CODE",{});var iUt=s(Dwe);zjr=r(iUt,"pretrained_model_name_or_path"),iUt.forEach(t),Wjr=r(jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gwe=n(jy,"CODE",{});var dUt=s(Gwe);Qjr=r(dUt,"pretrained_model_name_or_path"),dUt.forEach(t),Ujr=r(jy,":"),jy.forEach(t),Hjr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);j0=n(Te,"LI",{});var Eze=s(j0);Owe=n(Eze,"STRONG",{});var cUt=s(Owe);Jjr=r(cUt,"albert"),cUt.forEach(t),Yjr=r(Eze," \u2014 "),Yee=n(Eze,"A",{href:!0});var mUt=s(Yee);Kjr=r(mUt,"TFAlbertForMultipleChoice"),mUt.forEach(t),Zjr=r(Eze," (ALBERT model)"),Eze.forEach(t),eDr=i(Te),D0=n(Te,"LI",{});var Cze=s(D0);Vwe=n(Cze,"STRONG",{});var fUt=s(Vwe);oDr=r(fUt,"bert"),fUt.forEach(t),rDr=r(Cze," \u2014 "),Kee=n(Cze,"A",{href:!0});var gUt=s(Kee);tDr=r(gUt,"TFBertForMultipleChoice"),gUt.forEach(t),aDr=r(Cze," (BERT model)"),Cze.forEach(t),nDr=i(Te),G0=n(Te,"LI",{});var wze=s(G0);Xwe=n(wze,"STRONG",{});var hUt=s(Xwe);sDr=r(hUt,"camembert"),hUt.forEach(t),lDr=r(wze," \u2014 "),Zee=n(wze,"A",{href:!0});var uUt=s(Zee);iDr=r(uUt,"TFCamembertForMultipleChoice"),uUt.forEach(t),dDr=r(wze," (CamemBERT model)"),wze.forEach(t),cDr=i(Te),O0=n(Te,"LI",{});var Aze=s(O0);zwe=n(Aze,"STRONG",{});var pUt=s(zwe);mDr=r(pUt,"convbert"),pUt.forEach(t),fDr=r(Aze," \u2014 "),eoe=n(Aze,"A",{href:!0});var _Ut=s(eoe);gDr=r(_Ut,"TFConvBertForMultipleChoice"),_Ut.forEach(t),hDr=r(Aze," (ConvBERT model)"),Aze.forEach(t),uDr=i(Te),V0=n(Te,"LI",{});var Lze=s(V0);Wwe=n(Lze,"STRONG",{});var bUt=s(Wwe);pDr=r(bUt,"distilbert"),bUt.forEach(t),_Dr=r(Lze," \u2014 "),ooe=n(Lze,"A",{href:!0});var vUt=s(ooe);bDr=r(vUt,"TFDistilBertForMultipleChoice"),vUt.forEach(t),vDr=r(Lze," (DistilBERT model)"),Lze.forEach(t),FDr=i(Te),X0=n(Te,"LI",{});var yze=s(X0);Qwe=n(yze,"STRONG",{});var FUt=s(Qwe);TDr=r(FUt,"electra"),FUt.forEach(t),MDr=r(yze," \u2014 "),roe=n(yze,"A",{href:!0});var TUt=s(roe);EDr=r(TUt,"TFElectraForMultipleChoice"),TUt.forEach(t),CDr=r(yze," (ELECTRA model)"),yze.forEach(t),wDr=i(Te),z0=n(Te,"LI",{});var xze=s(z0);Uwe=n(xze,"STRONG",{});var MUt=s(Uwe);ADr=r(MUt,"flaubert"),MUt.forEach(t),LDr=r(xze," \u2014 "),toe=n(xze,"A",{href:!0});var EUt=s(toe);yDr=r(EUt,"TFFlaubertForMultipleChoice"),EUt.forEach(t),xDr=r(xze," (FlauBERT model)"),xze.forEach(t),$Dr=i(Te),W0=n(Te,"LI",{});var $ze=s(W0);Hwe=n($ze,"STRONG",{});var CUt=s(Hwe);kDr=r(CUt,"funnel"),CUt.forEach(t),SDr=r($ze," \u2014 "),aoe=n($ze,"A",{href:!0});var wUt=s(aoe);RDr=r(wUt,"TFFunnelForMultipleChoice"),wUt.forEach(t),PDr=r($ze," (Funnel Transformer model)"),$ze.forEach(t),BDr=i(Te),Q0=n(Te,"LI",{});var kze=s(Q0);Jwe=n(kze,"STRONG",{});var AUt=s(Jwe);IDr=r(AUt,"longformer"),AUt.forEach(t),NDr=r(kze," \u2014 "),noe=n(kze,"A",{href:!0});var LUt=s(noe);qDr=r(LUt,"TFLongformerForMultipleChoice"),LUt.forEach(t),jDr=r(kze," (Longformer model)"),kze.forEach(t),DDr=i(Te),U0=n(Te,"LI",{});var Sze=s(U0);Ywe=n(Sze,"STRONG",{});var yUt=s(Ywe);GDr=r(yUt,"mobilebert"),yUt.forEach(t),ODr=r(Sze," \u2014 "),soe=n(Sze,"A",{href:!0});var xUt=s(soe);VDr=r(xUt,"TFMobileBertForMultipleChoice"),xUt.forEach(t),XDr=r(Sze," (MobileBERT model)"),Sze.forEach(t),zDr=i(Te),H0=n(Te,"LI",{});var Rze=s(H0);Kwe=n(Rze,"STRONG",{});var $Ut=s(Kwe);WDr=r($Ut,"mpnet"),$Ut.forEach(t),QDr=r(Rze," \u2014 "),loe=n(Rze,"A",{href:!0});var kUt=s(loe);UDr=r(kUt,"TFMPNetForMultipleChoice"),kUt.forEach(t),HDr=r(Rze," (MPNet model)"),Rze.forEach(t),JDr=i(Te),J0=n(Te,"LI",{});var Pze=s(J0);Zwe=n(Pze,"STRONG",{});var SUt=s(Zwe);YDr=r(SUt,"rembert"),SUt.forEach(t),KDr=r(Pze," \u2014 "),ioe=n(Pze,"A",{href:!0});var RUt=s(ioe);ZDr=r(RUt,"TFRemBertForMultipleChoice"),RUt.forEach(t),eGr=r(Pze," (RemBERT model)"),Pze.forEach(t),oGr=i(Te),Y0=n(Te,"LI",{});var Bze=s(Y0);e6e=n(Bze,"STRONG",{});var PUt=s(e6e);rGr=r(PUt,"roberta"),PUt.forEach(t),tGr=r(Bze," \u2014 "),doe=n(Bze,"A",{href:!0});var BUt=s(doe);aGr=r(BUt,"TFRobertaForMultipleChoice"),BUt.forEach(t),nGr=r(Bze," (RoBERTa model)"),Bze.forEach(t),sGr=i(Te),K0=n(Te,"LI",{});var Ize=s(K0);o6e=n(Ize,"STRONG",{});var IUt=s(o6e);lGr=r(IUt,"roformer"),IUt.forEach(t),iGr=r(Ize," \u2014 "),coe=n(Ize,"A",{href:!0});var NUt=s(coe);dGr=r(NUt,"TFRoFormerForMultipleChoice"),NUt.forEach(t),cGr=r(Ize," (RoFormer model)"),Ize.forEach(t),mGr=i(Te),Z0=n(Te,"LI",{});var Nze=s(Z0);r6e=n(Nze,"STRONG",{});var qUt=s(r6e);fGr=r(qUt,"xlm"),qUt.forEach(t),gGr=r(Nze," \u2014 "),moe=n(Nze,"A",{href:!0});var jUt=s(moe);hGr=r(jUt,"TFXLMForMultipleChoice"),jUt.forEach(t),uGr=r(Nze," (XLM model)"),Nze.forEach(t),pGr=i(Te),ew=n(Te,"LI",{});var qze=s(ew);t6e=n(qze,"STRONG",{});var DUt=s(t6e);_Gr=r(DUt,"xlm-roberta"),DUt.forEach(t),bGr=r(qze," \u2014 "),foe=n(qze,"A",{href:!0});var GUt=s(foe);vGr=r(GUt,"TFXLMRobertaForMultipleChoice"),GUt.forEach(t),FGr=r(qze," (XLM-RoBERTa model)"),qze.forEach(t),TGr=i(Te),ow=n(Te,"LI",{});var jze=s(ow);a6e=n(jze,"STRONG",{});var OUt=s(a6e);MGr=r(OUt,"xlnet"),OUt.forEach(t),EGr=r(jze," \u2014 "),goe=n(jze,"A",{href:!0});var VUt=s(goe);CGr=r(VUt,"TFXLNetForMultipleChoice"),VUt.forEach(t),wGr=r(jze," (XLNet model)"),jze.forEach(t),Te.forEach(t),AGr=i(ni),T(rw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),iJe=i(m),Yc=n(m,"H2",{class:!0});var FKe=s(Yc);tw=n(FKe,"A",{id:!0,class:!0,href:!0});var XUt=s(tw);n6e=n(XUt,"SPAN",{});var zUt=s(n6e);T(ik.$$.fragment,zUt),zUt.forEach(t),XUt.forEach(t),LGr=i(FKe),s6e=n(FKe,"SPAN",{});var WUt=s(s6e);yGr=r(WUt,"TFAutoModelForNextSentencePrediction"),WUt.forEach(t),FKe.forEach(t),dJe=i(m),gr=n(m,"DIV",{class:!0});var si=s(gr);T(dk.$$.fragment,si),xGr=i(si),Kc=n(si,"P",{});var wse=s(Kc);$Gr=r(wse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hoe=n(wse,"A",{href:!0});var QUt=s(hoe);kGr=r(QUt,"from_pretrained()"),QUt.forEach(t),SGr=r(wse," class method or the "),uoe=n(wse,"A",{href:!0});var UUt=s(uoe);RGr=r(UUt,"from_config()"),UUt.forEach(t),PGr=r(wse,` class
method.`),wse.forEach(t),BGr=i(si),ck=n(si,"P",{});var TKe=s(ck);IGr=r(TKe,"This class cannot be instantiated directly using "),l6e=n(TKe,"CODE",{});var HUt=s(l6e);NGr=r(HUt,"__init__()"),HUt.forEach(t),qGr=r(TKe," (throws an error)."),TKe.forEach(t),jGr=i(si),Qt=n(si,"DIV",{class:!0});var Dy=s(Qt);T(mk.$$.fragment,Dy),DGr=i(Dy),i6e=n(Dy,"P",{});var JUt=s(i6e);GGr=r(JUt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JUt.forEach(t),OGr=i(Dy),Zc=n(Dy,"P",{});var Ase=s(Zc);VGr=r(Ase,`Note:
Loading a model from its configuration file does `),d6e=n(Ase,"STRONG",{});var YUt=s(d6e);XGr=r(YUt,"not"),YUt.forEach(t),zGr=r(Ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=n(Ase,"A",{href:!0});var KUt=s(poe);WGr=r(KUt,"from_pretrained()"),KUt.forEach(t),QGr=r(Ase," to load the model weights."),Ase.forEach(t),UGr=i(Dy),T(aw.$$.fragment,Dy),Dy.forEach(t),HGr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(fk.$$.fragment,li),JGr=i(li),c6e=n(li,"P",{});var ZUt=s(c6e);YGr=r(ZUt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZUt.forEach(t),KGr=i(li),wn=n(li,"P",{});var Gy=s(wn);ZGr=r(Gy,"The model class to instantiate is selected based on the "),m6e=n(Gy,"CODE",{});var eHt=s(m6e);eOr=r(eHt,"model_type"),eHt.forEach(t),oOr=r(Gy,` property of the config object (either
passed as an argument or loaded from `),f6e=n(Gy,"CODE",{});var oHt=s(f6e);rOr=r(oHt,"pretrained_model_name_or_path"),oHt.forEach(t),tOr=r(Gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(Gy,"CODE",{});var rHt=s(g6e);aOr=r(rHt,"pretrained_model_name_or_path"),rHt.forEach(t),nOr=r(Gy,":"),Gy.forEach(t),sOr=i(li),gk=n(li,"UL",{});var MKe=s(gk);nw=n(MKe,"LI",{});var Dze=s(nw);h6e=n(Dze,"STRONG",{});var tHt=s(h6e);lOr=r(tHt,"bert"),tHt.forEach(t),iOr=r(Dze," \u2014 "),_oe=n(Dze,"A",{href:!0});var aHt=s(_oe);dOr=r(aHt,"TFBertForNextSentencePrediction"),aHt.forEach(t),cOr=r(Dze," (BERT model)"),Dze.forEach(t),mOr=i(MKe),sw=n(MKe,"LI",{});var Gze=s(sw);u6e=n(Gze,"STRONG",{});var nHt=s(u6e);fOr=r(nHt,"mobilebert"),nHt.forEach(t),gOr=r(Gze," \u2014 "),boe=n(Gze,"A",{href:!0});var sHt=s(boe);hOr=r(sHt,"TFMobileBertForNextSentencePrediction"),sHt.forEach(t),uOr=r(Gze," (MobileBERT model)"),Gze.forEach(t),MKe.forEach(t),pOr=i(li),T(lw.$$.fragment,li),li.forEach(t),si.forEach(t),cJe=i(m),em=n(m,"H2",{class:!0});var EKe=s(em);iw=n(EKe,"A",{id:!0,class:!0,href:!0});var lHt=s(iw);p6e=n(lHt,"SPAN",{});var iHt=s(p6e);T(hk.$$.fragment,iHt),iHt.forEach(t),lHt.forEach(t),_Or=i(EKe),_6e=n(EKe,"SPAN",{});var dHt=s(_6e);bOr=r(dHt,"TFAutoModelForTableQuestionAnswering"),dHt.forEach(t),EKe.forEach(t),mJe=i(m),hr=n(m,"DIV",{class:!0});var ii=s(hr);T(uk.$$.fragment,ii),vOr=i(ii),om=n(ii,"P",{});var Lse=s(om);FOr=r(Lse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),voe=n(Lse,"A",{href:!0});var cHt=s(voe);TOr=r(cHt,"from_pretrained()"),cHt.forEach(t),MOr=r(Lse," class method or the "),Foe=n(Lse,"A",{href:!0});var mHt=s(Foe);EOr=r(mHt,"from_config()"),mHt.forEach(t),COr=r(Lse,` class
method.`),Lse.forEach(t),wOr=i(ii),pk=n(ii,"P",{});var CKe=s(pk);AOr=r(CKe,"This class cannot be instantiated directly using "),b6e=n(CKe,"CODE",{});var fHt=s(b6e);LOr=r(fHt,"__init__()"),fHt.forEach(t),yOr=r(CKe," (throws an error)."),CKe.forEach(t),xOr=i(ii),Ut=n(ii,"DIV",{class:!0});var Oy=s(Ut);T(_k.$$.fragment,Oy),$Or=i(Oy),v6e=n(Oy,"P",{});var gHt=s(v6e);kOr=r(gHt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gHt.forEach(t),SOr=i(Oy),rm=n(Oy,"P",{});var yse=s(rm);ROr=r(yse,`Note:
Loading a model from its configuration file does `),F6e=n(yse,"STRONG",{});var hHt=s(F6e);POr=r(hHt,"not"),hHt.forEach(t),BOr=r(yse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(yse,"A",{href:!0});var uHt=s(Toe);IOr=r(uHt,"from_pretrained()"),uHt.forEach(t),NOr=r(yse," to load the model weights."),yse.forEach(t),qOr=i(Oy),T(dw.$$.fragment,Oy),Oy.forEach(t),jOr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(bk.$$.fragment,di),DOr=i(di),T6e=n(di,"P",{});var pHt=s(T6e);GOr=r(pHt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pHt.forEach(t),OOr=i(di),An=n(di,"P",{});var Vy=s(An);VOr=r(Vy,"The model class to instantiate is selected based on the "),M6e=n(Vy,"CODE",{});var _Ht=s(M6e);XOr=r(_Ht,"model_type"),_Ht.forEach(t),zOr=r(Vy,` property of the config object (either
passed as an argument or loaded from `),E6e=n(Vy,"CODE",{});var bHt=s(E6e);WOr=r(bHt,"pretrained_model_name_or_path"),bHt.forEach(t),QOr=r(Vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(Vy,"CODE",{});var vHt=s(C6e);UOr=r(vHt,"pretrained_model_name_or_path"),vHt.forEach(t),HOr=r(Vy,":"),Vy.forEach(t),JOr=i(di),w6e=n(di,"UL",{});var FHt=s(w6e);cw=n(FHt,"LI",{});var Oze=s(cw);A6e=n(Oze,"STRONG",{});var THt=s(A6e);YOr=r(THt,"tapas"),THt.forEach(t),KOr=r(Oze," \u2014 "),Moe=n(Oze,"A",{href:!0});var MHt=s(Moe);ZOr=r(MHt,"TFTapasForQuestionAnswering"),MHt.forEach(t),eVr=r(Oze," (TAPAS model)"),Oze.forEach(t),FHt.forEach(t),oVr=i(di),T(mw.$$.fragment,di),di.forEach(t),ii.forEach(t),fJe=i(m),tm=n(m,"H2",{class:!0});var wKe=s(tm);fw=n(wKe,"A",{id:!0,class:!0,href:!0});var EHt=s(fw);L6e=n(EHt,"SPAN",{});var CHt=s(L6e);T(vk.$$.fragment,CHt),CHt.forEach(t),EHt.forEach(t),rVr=i(wKe),y6e=n(wKe,"SPAN",{});var wHt=s(y6e);tVr=r(wHt,"TFAutoModelForTokenClassification"),wHt.forEach(t),wKe.forEach(t),gJe=i(m),ur=n(m,"DIV",{class:!0});var ci=s(ur);T(Fk.$$.fragment,ci),aVr=i(ci),am=n(ci,"P",{});var xse=s(am);nVr=r(xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Eoe=n(xse,"A",{href:!0});var AHt=s(Eoe);sVr=r(AHt,"from_pretrained()"),AHt.forEach(t),lVr=r(xse," class method or the "),Coe=n(xse,"A",{href:!0});var LHt=s(Coe);iVr=r(LHt,"from_config()"),LHt.forEach(t),dVr=r(xse,` class
method.`),xse.forEach(t),cVr=i(ci),Tk=n(ci,"P",{});var AKe=s(Tk);mVr=r(AKe,"This class cannot be instantiated directly using "),x6e=n(AKe,"CODE",{});var yHt=s(x6e);fVr=r(yHt,"__init__()"),yHt.forEach(t),gVr=r(AKe," (throws an error)."),AKe.forEach(t),hVr=i(ci),Ht=n(ci,"DIV",{class:!0});var Xy=s(Ht);T(Mk.$$.fragment,Xy),uVr=i(Xy),$6e=n(Xy,"P",{});var xHt=s($6e);pVr=r(xHt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xHt.forEach(t),_Vr=i(Xy),nm=n(Xy,"P",{});var $se=s(nm);bVr=r($se,`Note:
Loading a model from its configuration file does `),k6e=n($se,"STRONG",{});var $Ht=s(k6e);vVr=r($Ht,"not"),$Ht.forEach(t),FVr=r($se,` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=n($se,"A",{href:!0});var kHt=s(woe);TVr=r(kHt,"from_pretrained()"),kHt.forEach(t),MVr=r($se," to load the model weights."),$se.forEach(t),EVr=i(Xy),T(gw.$$.fragment,Xy),Xy.forEach(t),CVr=i(ci),Xr=n(ci,"DIV",{class:!0});var mi=s(Xr);T(Ek.$$.fragment,mi),wVr=i(mi),S6e=n(mi,"P",{});var SHt=s(S6e);AVr=r(SHt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SHt.forEach(t),LVr=i(mi),Ln=n(mi,"P",{});var zy=s(Ln);yVr=r(zy,"The model class to instantiate is selected based on the "),R6e=n(zy,"CODE",{});var RHt=s(R6e);xVr=r(RHt,"model_type"),RHt.forEach(t),$Vr=r(zy,` property of the config object (either
passed as an argument or loaded from `),P6e=n(zy,"CODE",{});var PHt=s(P6e);kVr=r(PHt,"pretrained_model_name_or_path"),PHt.forEach(t),SVr=r(zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=n(zy,"CODE",{});var BHt=s(B6e);RVr=r(BHt,"pretrained_model_name_or_path"),BHt.forEach(t),PVr=r(zy,":"),zy.forEach(t),BVr=i(mi),ie=n(mi,"UL",{});var ge=s(ie);hw=n(ge,"LI",{});var Vze=s(hw);I6e=n(Vze,"STRONG",{});var IHt=s(I6e);IVr=r(IHt,"albert"),IHt.forEach(t),NVr=r(Vze," \u2014 "),Aoe=n(Vze,"A",{href:!0});var NHt=s(Aoe);qVr=r(NHt,"TFAlbertForTokenClassification"),NHt.forEach(t),jVr=r(Vze," (ALBERT model)"),Vze.forEach(t),DVr=i(ge),uw=n(ge,"LI",{});var Xze=s(uw);N6e=n(Xze,"STRONG",{});var qHt=s(N6e);GVr=r(qHt,"bert"),qHt.forEach(t),OVr=r(Xze," \u2014 "),Loe=n(Xze,"A",{href:!0});var jHt=s(Loe);VVr=r(jHt,"TFBertForTokenClassification"),jHt.forEach(t),XVr=r(Xze," (BERT model)"),Xze.forEach(t),zVr=i(ge),pw=n(ge,"LI",{});var zze=s(pw);q6e=n(zze,"STRONG",{});var DHt=s(q6e);WVr=r(DHt,"camembert"),DHt.forEach(t),QVr=r(zze," \u2014 "),yoe=n(zze,"A",{href:!0});var GHt=s(yoe);UVr=r(GHt,"TFCamembertForTokenClassification"),GHt.forEach(t),HVr=r(zze," (CamemBERT model)"),zze.forEach(t),JVr=i(ge),_w=n(ge,"LI",{});var Wze=s(_w);j6e=n(Wze,"STRONG",{});var OHt=s(j6e);YVr=r(OHt,"convbert"),OHt.forEach(t),KVr=r(Wze," \u2014 "),xoe=n(Wze,"A",{href:!0});var VHt=s(xoe);ZVr=r(VHt,"TFConvBertForTokenClassification"),VHt.forEach(t),eXr=r(Wze," (ConvBERT model)"),Wze.forEach(t),oXr=i(ge),bw=n(ge,"LI",{});var Qze=s(bw);D6e=n(Qze,"STRONG",{});var XHt=s(D6e);rXr=r(XHt,"deberta"),XHt.forEach(t),tXr=r(Qze," \u2014 "),$oe=n(Qze,"A",{href:!0});var zHt=s($oe);aXr=r(zHt,"TFDebertaForTokenClassification"),zHt.forEach(t),nXr=r(Qze," (DeBERTa model)"),Qze.forEach(t),sXr=i(ge),vw=n(ge,"LI",{});var Uze=s(vw);G6e=n(Uze,"STRONG",{});var WHt=s(G6e);lXr=r(WHt,"deberta-v2"),WHt.forEach(t),iXr=r(Uze," \u2014 "),koe=n(Uze,"A",{href:!0});var QHt=s(koe);dXr=r(QHt,"TFDebertaV2ForTokenClassification"),QHt.forEach(t),cXr=r(Uze," (DeBERTa-v2 model)"),Uze.forEach(t),mXr=i(ge),Fw=n(ge,"LI",{});var Hze=s(Fw);O6e=n(Hze,"STRONG",{});var UHt=s(O6e);fXr=r(UHt,"distilbert"),UHt.forEach(t),gXr=r(Hze," \u2014 "),Soe=n(Hze,"A",{href:!0});var HHt=s(Soe);hXr=r(HHt,"TFDistilBertForTokenClassification"),HHt.forEach(t),uXr=r(Hze," (DistilBERT model)"),Hze.forEach(t),pXr=i(ge),Tw=n(ge,"LI",{});var Jze=s(Tw);V6e=n(Jze,"STRONG",{});var JHt=s(V6e);_Xr=r(JHt,"electra"),JHt.forEach(t),bXr=r(Jze," \u2014 "),Roe=n(Jze,"A",{href:!0});var YHt=s(Roe);vXr=r(YHt,"TFElectraForTokenClassification"),YHt.forEach(t),FXr=r(Jze," (ELECTRA model)"),Jze.forEach(t),TXr=i(ge),Mw=n(ge,"LI",{});var Yze=s(Mw);X6e=n(Yze,"STRONG",{});var KHt=s(X6e);MXr=r(KHt,"flaubert"),KHt.forEach(t),EXr=r(Yze," \u2014 "),Poe=n(Yze,"A",{href:!0});var ZHt=s(Poe);CXr=r(ZHt,"TFFlaubertForTokenClassification"),ZHt.forEach(t),wXr=r(Yze," (FlauBERT model)"),Yze.forEach(t),AXr=i(ge),Ew=n(ge,"LI",{});var Kze=s(Ew);z6e=n(Kze,"STRONG",{});var eJt=s(z6e);LXr=r(eJt,"funnel"),eJt.forEach(t),yXr=r(Kze," \u2014 "),Boe=n(Kze,"A",{href:!0});var oJt=s(Boe);xXr=r(oJt,"TFFunnelForTokenClassification"),oJt.forEach(t),$Xr=r(Kze," (Funnel Transformer model)"),Kze.forEach(t),kXr=i(ge),Cw=n(ge,"LI",{});var Zze=s(Cw);W6e=n(Zze,"STRONG",{});var rJt=s(W6e);SXr=r(rJt,"layoutlm"),rJt.forEach(t),RXr=r(Zze," \u2014 "),Ioe=n(Zze,"A",{href:!0});var tJt=s(Ioe);PXr=r(tJt,"TFLayoutLMForTokenClassification"),tJt.forEach(t),BXr=r(Zze," (LayoutLM model)"),Zze.forEach(t),IXr=i(ge),ww=n(ge,"LI",{});var eWe=s(ww);Q6e=n(eWe,"STRONG",{});var aJt=s(Q6e);NXr=r(aJt,"layoutlmv3"),aJt.forEach(t),qXr=r(eWe," \u2014 "),Noe=n(eWe,"A",{href:!0});var nJt=s(Noe);jXr=r(nJt,"TFLayoutLMv3ForTokenClassification"),nJt.forEach(t),DXr=r(eWe," (LayoutLMv3 model)"),eWe.forEach(t),GXr=i(ge),Aw=n(ge,"LI",{});var oWe=s(Aw);U6e=n(oWe,"STRONG",{});var sJt=s(U6e);OXr=r(sJt,"longformer"),sJt.forEach(t),VXr=r(oWe," \u2014 "),qoe=n(oWe,"A",{href:!0});var lJt=s(qoe);XXr=r(lJt,"TFLongformerForTokenClassification"),lJt.forEach(t),zXr=r(oWe," (Longformer model)"),oWe.forEach(t),WXr=i(ge),Lw=n(ge,"LI",{});var rWe=s(Lw);H6e=n(rWe,"STRONG",{});var iJt=s(H6e);QXr=r(iJt,"mobilebert"),iJt.forEach(t),UXr=r(rWe," \u2014 "),joe=n(rWe,"A",{href:!0});var dJt=s(joe);HXr=r(dJt,"TFMobileBertForTokenClassification"),dJt.forEach(t),JXr=r(rWe," (MobileBERT model)"),rWe.forEach(t),YXr=i(ge),yw=n(ge,"LI",{});var tWe=s(yw);J6e=n(tWe,"STRONG",{});var cJt=s(J6e);KXr=r(cJt,"mpnet"),cJt.forEach(t),ZXr=r(tWe," \u2014 "),Doe=n(tWe,"A",{href:!0});var mJt=s(Doe);ezr=r(mJt,"TFMPNetForTokenClassification"),mJt.forEach(t),ozr=r(tWe," (MPNet model)"),tWe.forEach(t),rzr=i(ge),xw=n(ge,"LI",{});var aWe=s(xw);Y6e=n(aWe,"STRONG",{});var fJt=s(Y6e);tzr=r(fJt,"rembert"),fJt.forEach(t),azr=r(aWe," \u2014 "),Goe=n(aWe,"A",{href:!0});var gJt=s(Goe);nzr=r(gJt,"TFRemBertForTokenClassification"),gJt.forEach(t),szr=r(aWe," (RemBERT model)"),aWe.forEach(t),lzr=i(ge),$w=n(ge,"LI",{});var nWe=s($w);K6e=n(nWe,"STRONG",{});var hJt=s(K6e);izr=r(hJt,"roberta"),hJt.forEach(t),dzr=r(nWe," \u2014 "),Ooe=n(nWe,"A",{href:!0});var uJt=s(Ooe);czr=r(uJt,"TFRobertaForTokenClassification"),uJt.forEach(t),mzr=r(nWe," (RoBERTa model)"),nWe.forEach(t),fzr=i(ge),kw=n(ge,"LI",{});var sWe=s(kw);Z6e=n(sWe,"STRONG",{});var pJt=s(Z6e);gzr=r(pJt,"roformer"),pJt.forEach(t),hzr=r(sWe," \u2014 "),Voe=n(sWe,"A",{href:!0});var _Jt=s(Voe);uzr=r(_Jt,"TFRoFormerForTokenClassification"),_Jt.forEach(t),pzr=r(sWe," (RoFormer model)"),sWe.forEach(t),_zr=i(ge),Sw=n(ge,"LI",{});var lWe=s(Sw);eAe=n(lWe,"STRONG",{});var bJt=s(eAe);bzr=r(bJt,"xlm"),bJt.forEach(t),vzr=r(lWe," \u2014 "),Xoe=n(lWe,"A",{href:!0});var vJt=s(Xoe);Fzr=r(vJt,"TFXLMForTokenClassification"),vJt.forEach(t),Tzr=r(lWe," (XLM model)"),lWe.forEach(t),Mzr=i(ge),Rw=n(ge,"LI",{});var iWe=s(Rw);oAe=n(iWe,"STRONG",{});var FJt=s(oAe);Ezr=r(FJt,"xlm-roberta"),FJt.forEach(t),Czr=r(iWe," \u2014 "),zoe=n(iWe,"A",{href:!0});var TJt=s(zoe);wzr=r(TJt,"TFXLMRobertaForTokenClassification"),TJt.forEach(t),Azr=r(iWe," (XLM-RoBERTa model)"),iWe.forEach(t),Lzr=i(ge),Pw=n(ge,"LI",{});var dWe=s(Pw);rAe=n(dWe,"STRONG",{});var MJt=s(rAe);yzr=r(MJt,"xlnet"),MJt.forEach(t),xzr=r(dWe," \u2014 "),Woe=n(dWe,"A",{href:!0});var EJt=s(Woe);$zr=r(EJt,"TFXLNetForTokenClassification"),EJt.forEach(t),kzr=r(dWe," (XLNet model)"),dWe.forEach(t),ge.forEach(t),Szr=i(mi),T(Bw.$$.fragment,mi),mi.forEach(t),ci.forEach(t),hJe=i(m),sm=n(m,"H2",{class:!0});var LKe=s(sm);Iw=n(LKe,"A",{id:!0,class:!0,href:!0});var CJt=s(Iw);tAe=n(CJt,"SPAN",{});var wJt=s(tAe);T(Ck.$$.fragment,wJt),wJt.forEach(t),CJt.forEach(t),Rzr=i(LKe),aAe=n(LKe,"SPAN",{});var AJt=s(aAe);Pzr=r(AJt,"TFAutoModelForQuestionAnswering"),AJt.forEach(t),LKe.forEach(t),uJe=i(m),pr=n(m,"DIV",{class:!0});var fi=s(pr);T(wk.$$.fragment,fi),Bzr=i(fi),lm=n(fi,"P",{});var kse=s(lm);Izr=r(kse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qoe=n(kse,"A",{href:!0});var LJt=s(Qoe);Nzr=r(LJt,"from_pretrained()"),LJt.forEach(t),qzr=r(kse," class method or the "),Uoe=n(kse,"A",{href:!0});var yJt=s(Uoe);jzr=r(yJt,"from_config()"),yJt.forEach(t),Dzr=r(kse,` class
method.`),kse.forEach(t),Gzr=i(fi),Ak=n(fi,"P",{});var yKe=s(Ak);Ozr=r(yKe,"This class cannot be instantiated directly using "),nAe=n(yKe,"CODE",{});var xJt=s(nAe);Vzr=r(xJt,"__init__()"),xJt.forEach(t),Xzr=r(yKe," (throws an error)."),yKe.forEach(t),zzr=i(fi),Jt=n(fi,"DIV",{class:!0});var Wy=s(Jt);T(Lk.$$.fragment,Wy),Wzr=i(Wy),sAe=n(Wy,"P",{});var $Jt=s(sAe);Qzr=r($Jt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Jt.forEach(t),Uzr=i(Wy),im=n(Wy,"P",{});var Sse=s(im);Hzr=r(Sse,`Note:
Loading a model from its configuration file does `),lAe=n(Sse,"STRONG",{});var kJt=s(lAe);Jzr=r(kJt,"not"),kJt.forEach(t),Yzr=r(Sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=n(Sse,"A",{href:!0});var SJt=s(Hoe);Kzr=r(SJt,"from_pretrained()"),SJt.forEach(t),Zzr=r(Sse," to load the model weights."),Sse.forEach(t),eWr=i(Wy),T(Nw.$$.fragment,Wy),Wy.forEach(t),oWr=i(fi),zr=n(fi,"DIV",{class:!0});var gi=s(zr);T(yk.$$.fragment,gi),rWr=i(gi),iAe=n(gi,"P",{});var RJt=s(iAe);tWr=r(RJt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RJt.forEach(t),aWr=i(gi),yn=n(gi,"P",{});var Qy=s(yn);nWr=r(Qy,"The model class to instantiate is selected based on the "),dAe=n(Qy,"CODE",{});var PJt=s(dAe);sWr=r(PJt,"model_type"),PJt.forEach(t),lWr=r(Qy,` property of the config object (either
passed as an argument or loaded from `),cAe=n(Qy,"CODE",{});var BJt=s(cAe);iWr=r(BJt,"pretrained_model_name_or_path"),BJt.forEach(t),dWr=r(Qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mAe=n(Qy,"CODE",{});var IJt=s(mAe);cWr=r(IJt,"pretrained_model_name_or_path"),IJt.forEach(t),mWr=r(Qy,":"),Qy.forEach(t),fWr=i(gi),de=n(gi,"UL",{});var he=s(de);qw=n(he,"LI",{});var cWe=s(qw);fAe=n(cWe,"STRONG",{});var NJt=s(fAe);gWr=r(NJt,"albert"),NJt.forEach(t),hWr=r(cWe," \u2014 "),Joe=n(cWe,"A",{href:!0});var qJt=s(Joe);uWr=r(qJt,"TFAlbertForQuestionAnswering"),qJt.forEach(t),pWr=r(cWe," (ALBERT model)"),cWe.forEach(t),_Wr=i(he),jw=n(he,"LI",{});var mWe=s(jw);gAe=n(mWe,"STRONG",{});var jJt=s(gAe);bWr=r(jJt,"bert"),jJt.forEach(t),vWr=r(mWe," \u2014 "),Yoe=n(mWe,"A",{href:!0});var DJt=s(Yoe);FWr=r(DJt,"TFBertForQuestionAnswering"),DJt.forEach(t),TWr=r(mWe," (BERT model)"),mWe.forEach(t),MWr=i(he),Dw=n(he,"LI",{});var fWe=s(Dw);hAe=n(fWe,"STRONG",{});var GJt=s(hAe);EWr=r(GJt,"camembert"),GJt.forEach(t),CWr=r(fWe," \u2014 "),Koe=n(fWe,"A",{href:!0});var OJt=s(Koe);wWr=r(OJt,"TFCamembertForQuestionAnswering"),OJt.forEach(t),AWr=r(fWe," (CamemBERT model)"),fWe.forEach(t),LWr=i(he),Gw=n(he,"LI",{});var gWe=s(Gw);uAe=n(gWe,"STRONG",{});var VJt=s(uAe);yWr=r(VJt,"convbert"),VJt.forEach(t),xWr=r(gWe," \u2014 "),Zoe=n(gWe,"A",{href:!0});var XJt=s(Zoe);$Wr=r(XJt,"TFConvBertForQuestionAnswering"),XJt.forEach(t),kWr=r(gWe," (ConvBERT model)"),gWe.forEach(t),SWr=i(he),Ow=n(he,"LI",{});var hWe=s(Ow);pAe=n(hWe,"STRONG",{});var zJt=s(pAe);RWr=r(zJt,"deberta"),zJt.forEach(t),PWr=r(hWe," \u2014 "),ere=n(hWe,"A",{href:!0});var WJt=s(ere);BWr=r(WJt,"TFDebertaForQuestionAnswering"),WJt.forEach(t),IWr=r(hWe," (DeBERTa model)"),hWe.forEach(t),NWr=i(he),Vw=n(he,"LI",{});var uWe=s(Vw);_Ae=n(uWe,"STRONG",{});var QJt=s(_Ae);qWr=r(QJt,"deberta-v2"),QJt.forEach(t),jWr=r(uWe," \u2014 "),ore=n(uWe,"A",{href:!0});var UJt=s(ore);DWr=r(UJt,"TFDebertaV2ForQuestionAnswering"),UJt.forEach(t),GWr=r(uWe," (DeBERTa-v2 model)"),uWe.forEach(t),OWr=i(he),Xw=n(he,"LI",{});var pWe=s(Xw);bAe=n(pWe,"STRONG",{});var HJt=s(bAe);VWr=r(HJt,"distilbert"),HJt.forEach(t),XWr=r(pWe," \u2014 "),rre=n(pWe,"A",{href:!0});var JJt=s(rre);zWr=r(JJt,"TFDistilBertForQuestionAnswering"),JJt.forEach(t),WWr=r(pWe," (DistilBERT model)"),pWe.forEach(t),QWr=i(he),zw=n(he,"LI",{});var _We=s(zw);vAe=n(_We,"STRONG",{});var YJt=s(vAe);UWr=r(YJt,"electra"),YJt.forEach(t),HWr=r(_We," \u2014 "),tre=n(_We,"A",{href:!0});var KJt=s(tre);JWr=r(KJt,"TFElectraForQuestionAnswering"),KJt.forEach(t),YWr=r(_We," (ELECTRA model)"),_We.forEach(t),KWr=i(he),Ww=n(he,"LI",{});var bWe=s(Ww);FAe=n(bWe,"STRONG",{});var ZJt=s(FAe);ZWr=r(ZJt,"flaubert"),ZJt.forEach(t),eQr=r(bWe," \u2014 "),are=n(bWe,"A",{href:!0});var eYt=s(are);oQr=r(eYt,"TFFlaubertForQuestionAnsweringSimple"),eYt.forEach(t),rQr=r(bWe," (FlauBERT model)"),bWe.forEach(t),tQr=i(he),Qw=n(he,"LI",{});var vWe=s(Qw);TAe=n(vWe,"STRONG",{});var oYt=s(TAe);aQr=r(oYt,"funnel"),oYt.forEach(t),nQr=r(vWe," \u2014 "),nre=n(vWe,"A",{href:!0});var rYt=s(nre);sQr=r(rYt,"TFFunnelForQuestionAnswering"),rYt.forEach(t),lQr=r(vWe," (Funnel Transformer model)"),vWe.forEach(t),iQr=i(he),Uw=n(he,"LI",{});var FWe=s(Uw);MAe=n(FWe,"STRONG",{});var tYt=s(MAe);dQr=r(tYt,"gptj"),tYt.forEach(t),cQr=r(FWe," \u2014 "),sre=n(FWe,"A",{href:!0});var aYt=s(sre);mQr=r(aYt,"TFGPTJForQuestionAnswering"),aYt.forEach(t),fQr=r(FWe," (GPT-J model)"),FWe.forEach(t),gQr=i(he),Hw=n(he,"LI",{});var TWe=s(Hw);EAe=n(TWe,"STRONG",{});var nYt=s(EAe);hQr=r(nYt,"layoutlmv3"),nYt.forEach(t),uQr=r(TWe," \u2014 "),lre=n(TWe,"A",{href:!0});var sYt=s(lre);pQr=r(sYt,"TFLayoutLMv3ForQuestionAnswering"),sYt.forEach(t),_Qr=r(TWe," (LayoutLMv3 model)"),TWe.forEach(t),bQr=i(he),Jw=n(he,"LI",{});var MWe=s(Jw);CAe=n(MWe,"STRONG",{});var lYt=s(CAe);vQr=r(lYt,"longformer"),lYt.forEach(t),FQr=r(MWe," \u2014 "),ire=n(MWe,"A",{href:!0});var iYt=s(ire);TQr=r(iYt,"TFLongformerForQuestionAnswering"),iYt.forEach(t),MQr=r(MWe," (Longformer model)"),MWe.forEach(t),EQr=i(he),Yw=n(he,"LI",{});var EWe=s(Yw);wAe=n(EWe,"STRONG",{});var dYt=s(wAe);CQr=r(dYt,"mobilebert"),dYt.forEach(t),wQr=r(EWe," \u2014 "),dre=n(EWe,"A",{href:!0});var cYt=s(dre);AQr=r(cYt,"TFMobileBertForQuestionAnswering"),cYt.forEach(t),LQr=r(EWe," (MobileBERT model)"),EWe.forEach(t),yQr=i(he),Kw=n(he,"LI",{});var CWe=s(Kw);AAe=n(CWe,"STRONG",{});var mYt=s(AAe);xQr=r(mYt,"mpnet"),mYt.forEach(t),$Qr=r(CWe," \u2014 "),cre=n(CWe,"A",{href:!0});var fYt=s(cre);kQr=r(fYt,"TFMPNetForQuestionAnswering"),fYt.forEach(t),SQr=r(CWe," (MPNet model)"),CWe.forEach(t),RQr=i(he),Zw=n(he,"LI",{});var wWe=s(Zw);LAe=n(wWe,"STRONG",{});var gYt=s(LAe);PQr=r(gYt,"rembert"),gYt.forEach(t),BQr=r(wWe," \u2014 "),mre=n(wWe,"A",{href:!0});var hYt=s(mre);IQr=r(hYt,"TFRemBertForQuestionAnswering"),hYt.forEach(t),NQr=r(wWe," (RemBERT model)"),wWe.forEach(t),qQr=i(he),e6=n(he,"LI",{});var AWe=s(e6);yAe=n(AWe,"STRONG",{});var uYt=s(yAe);jQr=r(uYt,"roberta"),uYt.forEach(t),DQr=r(AWe," \u2014 "),fre=n(AWe,"A",{href:!0});var pYt=s(fre);GQr=r(pYt,"TFRobertaForQuestionAnswering"),pYt.forEach(t),OQr=r(AWe," (RoBERTa model)"),AWe.forEach(t),VQr=i(he),o6=n(he,"LI",{});var LWe=s(o6);xAe=n(LWe,"STRONG",{});var _Yt=s(xAe);XQr=r(_Yt,"roformer"),_Yt.forEach(t),zQr=r(LWe," \u2014 "),gre=n(LWe,"A",{href:!0});var bYt=s(gre);WQr=r(bYt,"TFRoFormerForQuestionAnswering"),bYt.forEach(t),QQr=r(LWe," (RoFormer model)"),LWe.forEach(t),UQr=i(he),r6=n(he,"LI",{});var yWe=s(r6);$Ae=n(yWe,"STRONG",{});var vYt=s($Ae);HQr=r(vYt,"xlm"),vYt.forEach(t),JQr=r(yWe," \u2014 "),hre=n(yWe,"A",{href:!0});var FYt=s(hre);YQr=r(FYt,"TFXLMForQuestionAnsweringSimple"),FYt.forEach(t),KQr=r(yWe," (XLM model)"),yWe.forEach(t),ZQr=i(he),t6=n(he,"LI",{});var xWe=s(t6);kAe=n(xWe,"STRONG",{});var TYt=s(kAe);eUr=r(TYt,"xlm-roberta"),TYt.forEach(t),oUr=r(xWe," \u2014 "),ure=n(xWe,"A",{href:!0});var MYt=s(ure);rUr=r(MYt,"TFXLMRobertaForQuestionAnswering"),MYt.forEach(t),tUr=r(xWe," (XLM-RoBERTa model)"),xWe.forEach(t),aUr=i(he),a6=n(he,"LI",{});var $We=s(a6);SAe=n($We,"STRONG",{});var EYt=s(SAe);nUr=r(EYt,"xlnet"),EYt.forEach(t),sUr=r($We," \u2014 "),pre=n($We,"A",{href:!0});var CYt=s(pre);lUr=r(CYt,"TFXLNetForQuestionAnsweringSimple"),CYt.forEach(t),iUr=r($We," (XLNet model)"),$We.forEach(t),he.forEach(t),dUr=i(gi),T(n6.$$.fragment,gi),gi.forEach(t),fi.forEach(t),pJe=i(m),dm=n(m,"H2",{class:!0});var xKe=s(dm);s6=n(xKe,"A",{id:!0,class:!0,href:!0});var wYt=s(s6);RAe=n(wYt,"SPAN",{});var AYt=s(RAe);T(xk.$$.fragment,AYt),AYt.forEach(t),wYt.forEach(t),cUr=i(xKe),PAe=n(xKe,"SPAN",{});var LYt=s(PAe);mUr=r(LYt,"TFAutoModelForVision2Seq"),LYt.forEach(t),xKe.forEach(t),_Je=i(m),_r=n(m,"DIV",{class:!0});var hi=s(_r);T($k.$$.fragment,hi),fUr=i(hi),cm=n(hi,"P",{});var Rse=s(cm);gUr=r(Rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_re=n(Rse,"A",{href:!0});var yYt=s(_re);hUr=r(yYt,"from_pretrained()"),yYt.forEach(t),uUr=r(Rse," class method or the "),bre=n(Rse,"A",{href:!0});var xYt=s(bre);pUr=r(xYt,"from_config()"),xYt.forEach(t),_Ur=r(Rse,` class
method.`),Rse.forEach(t),bUr=i(hi),kk=n(hi,"P",{});var $Ke=s(kk);vUr=r($Ke,"This class cannot be instantiated directly using "),BAe=n($Ke,"CODE",{});var $Yt=s(BAe);FUr=r($Yt,"__init__()"),$Yt.forEach(t),TUr=r($Ke," (throws an error)."),$Ke.forEach(t),MUr=i(hi),Yt=n(hi,"DIV",{class:!0});var Uy=s(Yt);T(Sk.$$.fragment,Uy),EUr=i(Uy),IAe=n(Uy,"P",{});var kYt=s(IAe);CUr=r(kYt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kYt.forEach(t),wUr=i(Uy),mm=n(Uy,"P",{});var Pse=s(mm);AUr=r(Pse,`Note:
Loading a model from its configuration file does `),NAe=n(Pse,"STRONG",{});var SYt=s(NAe);LUr=r(SYt,"not"),SYt.forEach(t),yUr=r(Pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(Pse,"A",{href:!0});var RYt=s(vre);xUr=r(RYt,"from_pretrained()"),RYt.forEach(t),$Ur=r(Pse," to load the model weights."),Pse.forEach(t),kUr=i(Uy),T(l6.$$.fragment,Uy),Uy.forEach(t),SUr=i(hi),Wr=n(hi,"DIV",{class:!0});var ui=s(Wr);T(Rk.$$.fragment,ui),RUr=i(ui),qAe=n(ui,"P",{});var PYt=s(qAe);PUr=r(PYt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PYt.forEach(t),BUr=i(ui),xn=n(ui,"P",{});var Hy=s(xn);IUr=r(Hy,"The model class to instantiate is selected based on the "),jAe=n(Hy,"CODE",{});var BYt=s(jAe);NUr=r(BYt,"model_type"),BYt.forEach(t),qUr=r(Hy,` property of the config object (either
passed as an argument or loaded from `),DAe=n(Hy,"CODE",{});var IYt=s(DAe);jUr=r(IYt,"pretrained_model_name_or_path"),IYt.forEach(t),DUr=r(Hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GAe=n(Hy,"CODE",{});var NYt=s(GAe);GUr=r(NYt,"pretrained_model_name_or_path"),NYt.forEach(t),OUr=r(Hy,":"),Hy.forEach(t),VUr=i(ui),OAe=n(ui,"UL",{});var qYt=s(OAe);i6=n(qYt,"LI",{});var kWe=s(i6);VAe=n(kWe,"STRONG",{});var jYt=s(VAe);XUr=r(jYt,"vision-encoder-decoder"),jYt.forEach(t),zUr=r(kWe," \u2014 "),Fre=n(kWe,"A",{href:!0});var DYt=s(Fre);WUr=r(DYt,"TFVisionEncoderDecoderModel"),DYt.forEach(t),QUr=r(kWe," (Vision Encoder decoder model)"),kWe.forEach(t),qYt.forEach(t),UUr=i(ui),T(d6.$$.fragment,ui),ui.forEach(t),hi.forEach(t),bJe=i(m),fm=n(m,"H2",{class:!0});var kKe=s(fm);c6=n(kKe,"A",{id:!0,class:!0,href:!0});var GYt=s(c6);XAe=n(GYt,"SPAN",{});var OYt=s(XAe);T(Pk.$$.fragment,OYt),OYt.forEach(t),GYt.forEach(t),HUr=i(kKe),zAe=n(kKe,"SPAN",{});var VYt=s(zAe);JUr=r(VYt,"TFAutoModelForSpeechSeq2Seq"),VYt.forEach(t),kKe.forEach(t),vJe=i(m),br=n(m,"DIV",{class:!0});var pi=s(br);T(Bk.$$.fragment,pi),YUr=i(pi),gm=n(pi,"P",{});var Bse=s(gm);KUr=r(Bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tre=n(Bse,"A",{href:!0});var XYt=s(Tre);ZUr=r(XYt,"from_pretrained()"),XYt.forEach(t),eHr=r(Bse," class method or the "),Mre=n(Bse,"A",{href:!0});var zYt=s(Mre);oHr=r(zYt,"from_config()"),zYt.forEach(t),rHr=r(Bse,` class
method.`),Bse.forEach(t),tHr=i(pi),Ik=n(pi,"P",{});var SKe=s(Ik);aHr=r(SKe,"This class cannot be instantiated directly using "),WAe=n(SKe,"CODE",{});var WYt=s(WAe);nHr=r(WYt,"__init__()"),WYt.forEach(t),sHr=r(SKe," (throws an error)."),SKe.forEach(t),lHr=i(pi),Kt=n(pi,"DIV",{class:!0});var Jy=s(Kt);T(Nk.$$.fragment,Jy),iHr=i(Jy),QAe=n(Jy,"P",{});var QYt=s(QAe);dHr=r(QYt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),QYt.forEach(t),cHr=i(Jy),hm=n(Jy,"P",{});var Ise=s(hm);mHr=r(Ise,`Note:
Loading a model from its configuration file does `),UAe=n(Ise,"STRONG",{});var UYt=s(UAe);fHr=r(UYt,"not"),UYt.forEach(t),gHr=r(Ise,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(Ise,"A",{href:!0});var HYt=s(Ere);hHr=r(HYt,"from_pretrained()"),HYt.forEach(t),uHr=r(Ise," to load the model weights."),Ise.forEach(t),pHr=i(Jy),T(m6.$$.fragment,Jy),Jy.forEach(t),_Hr=i(pi),Qr=n(pi,"DIV",{class:!0});var _i=s(Qr);T(qk.$$.fragment,_i),bHr=i(_i),HAe=n(_i,"P",{});var JYt=s(HAe);vHr=r(JYt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JYt.forEach(t),FHr=i(_i),$n=n(_i,"P",{});var Yy=s($n);THr=r(Yy,"The model class to instantiate is selected based on the "),JAe=n(Yy,"CODE",{});var YYt=s(JAe);MHr=r(YYt,"model_type"),YYt.forEach(t),EHr=r(Yy,` property of the config object (either
passed as an argument or loaded from `),YAe=n(Yy,"CODE",{});var KYt=s(YAe);CHr=r(KYt,"pretrained_model_name_or_path"),KYt.forEach(t),wHr=r(Yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=n(Yy,"CODE",{});var ZYt=s(KAe);AHr=r(ZYt,"pretrained_model_name_or_path"),ZYt.forEach(t),LHr=r(Yy,":"),Yy.forEach(t),yHr=i(_i),ZAe=n(_i,"UL",{});var eKt=s(ZAe);f6=n(eKt,"LI",{});var SWe=s(f6);e7e=n(SWe,"STRONG",{});var oKt=s(e7e);xHr=r(oKt,"speech_to_text"),oKt.forEach(t),$Hr=r(SWe," \u2014 "),Cre=n(SWe,"A",{href:!0});var rKt=s(Cre);kHr=r(rKt,"TFSpeech2TextForConditionalGeneration"),rKt.forEach(t),SHr=r(SWe," (Speech2Text model)"),SWe.forEach(t),eKt.forEach(t),RHr=i(_i),T(g6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),FJe=i(m),um=n(m,"H2",{class:!0});var RKe=s(um);h6=n(RKe,"A",{id:!0,class:!0,href:!0});var tKt=s(h6);o7e=n(tKt,"SPAN",{});var aKt=s(o7e);T(jk.$$.fragment,aKt),aKt.forEach(t),tKt.forEach(t),PHr=i(RKe),r7e=n(RKe,"SPAN",{});var nKt=s(r7e);BHr=r(nKt,"FlaxAutoModel"),nKt.forEach(t),RKe.forEach(t),TJe=i(m),vr=n(m,"DIV",{class:!0});var bi=s(vr);T(Dk.$$.fragment,bi),IHr=i(bi),pm=n(bi,"P",{});var Nse=s(pm);NHr=r(Nse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wre=n(Nse,"A",{href:!0});var sKt=s(wre);qHr=r(sKt,"from_pretrained()"),sKt.forEach(t),jHr=r(Nse," class method or the "),Are=n(Nse,"A",{href:!0});var lKt=s(Are);DHr=r(lKt,"from_config()"),lKt.forEach(t),GHr=r(Nse,` class
method.`),Nse.forEach(t),OHr=i(bi),Gk=n(bi,"P",{});var PKe=s(Gk);VHr=r(PKe,"This class cannot be instantiated directly using "),t7e=n(PKe,"CODE",{});var iKt=s(t7e);XHr=r(iKt,"__init__()"),iKt.forEach(t),zHr=r(PKe," (throws an error)."),PKe.forEach(t),WHr=i(bi),Zt=n(bi,"DIV",{class:!0});var Ky=s(Zt);T(Ok.$$.fragment,Ky),QHr=i(Ky),a7e=n(Ky,"P",{});var dKt=s(a7e);UHr=r(dKt,"Instantiates one of the base model classes of the library from a configuration."),dKt.forEach(t),HHr=i(Ky),_m=n(Ky,"P",{});var qse=s(_m);JHr=r(qse,`Note:
Loading a model from its configuration file does `),n7e=n(qse,"STRONG",{});var cKt=s(n7e);YHr=r(cKt,"not"),cKt.forEach(t),KHr=r(qse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(qse,"A",{href:!0});var mKt=s(Lre);ZHr=r(mKt,"from_pretrained()"),mKt.forEach(t),eJr=r(qse," to load the model weights."),qse.forEach(t),oJr=i(Ky),T(u6.$$.fragment,Ky),Ky.forEach(t),rJr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Vk.$$.fragment,vi),tJr=i(vi),s7e=n(vi,"P",{});var fKt=s(s7e);aJr=r(fKt,"Instantiate one of the base model classes of the library from a pretrained model."),fKt.forEach(t),nJr=i(vi),kn=n(vi,"P",{});var Zy=s(kn);sJr=r(Zy,"The model class to instantiate is selected based on the "),l7e=n(Zy,"CODE",{});var gKt=s(l7e);lJr=r(gKt,"model_type"),gKt.forEach(t),iJr=r(Zy,` property of the config object (either
passed as an argument or loaded from `),i7e=n(Zy,"CODE",{});var hKt=s(i7e);dJr=r(hKt,"pretrained_model_name_or_path"),hKt.forEach(t),cJr=r(Zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=n(Zy,"CODE",{});var uKt=s(d7e);mJr=r(uKt,"pretrained_model_name_or_path"),uKt.forEach(t),fJr=r(Zy,":"),Zy.forEach(t),gJr=i(vi),te=n(vi,"UL",{});var ne=s(te);p6=n(ne,"LI",{});var RWe=s(p6);c7e=n(RWe,"STRONG",{});var pKt=s(c7e);hJr=r(pKt,"albert"),pKt.forEach(t),uJr=r(RWe," \u2014 "),yre=n(RWe,"A",{href:!0});var _Kt=s(yre);pJr=r(_Kt,"FlaxAlbertModel"),_Kt.forEach(t),_Jr=r(RWe," (ALBERT model)"),RWe.forEach(t),bJr=i(ne),_6=n(ne,"LI",{});var PWe=s(_6);m7e=n(PWe,"STRONG",{});var bKt=s(m7e);vJr=r(bKt,"bart"),bKt.forEach(t),FJr=r(PWe," \u2014 "),xre=n(PWe,"A",{href:!0});var vKt=s(xre);TJr=r(vKt,"FlaxBartModel"),vKt.forEach(t),MJr=r(PWe," (BART model)"),PWe.forEach(t),EJr=i(ne),b6=n(ne,"LI",{});var BWe=s(b6);f7e=n(BWe,"STRONG",{});var FKt=s(f7e);CJr=r(FKt,"beit"),FKt.forEach(t),wJr=r(BWe," \u2014 "),$re=n(BWe,"A",{href:!0});var TKt=s($re);AJr=r(TKt,"FlaxBeitModel"),TKt.forEach(t),LJr=r(BWe," (BEiT model)"),BWe.forEach(t),yJr=i(ne),v6=n(ne,"LI",{});var IWe=s(v6);g7e=n(IWe,"STRONG",{});var MKt=s(g7e);xJr=r(MKt,"bert"),MKt.forEach(t),$Jr=r(IWe," \u2014 "),kre=n(IWe,"A",{href:!0});var EKt=s(kre);kJr=r(EKt,"FlaxBertModel"),EKt.forEach(t),SJr=r(IWe," (BERT model)"),IWe.forEach(t),RJr=i(ne),F6=n(ne,"LI",{});var NWe=s(F6);h7e=n(NWe,"STRONG",{});var CKt=s(h7e);PJr=r(CKt,"big_bird"),CKt.forEach(t),BJr=r(NWe," \u2014 "),Sre=n(NWe,"A",{href:!0});var wKt=s(Sre);IJr=r(wKt,"FlaxBigBirdModel"),wKt.forEach(t),NJr=r(NWe," (BigBird model)"),NWe.forEach(t),qJr=i(ne),T6=n(ne,"LI",{});var qWe=s(T6);u7e=n(qWe,"STRONG",{});var AKt=s(u7e);jJr=r(AKt,"blenderbot"),AKt.forEach(t),DJr=r(qWe," \u2014 "),Rre=n(qWe,"A",{href:!0});var LKt=s(Rre);GJr=r(LKt,"FlaxBlenderbotModel"),LKt.forEach(t),OJr=r(qWe," (Blenderbot model)"),qWe.forEach(t),VJr=i(ne),M6=n(ne,"LI",{});var jWe=s(M6);p7e=n(jWe,"STRONG",{});var yKt=s(p7e);XJr=r(yKt,"blenderbot-small"),yKt.forEach(t),zJr=r(jWe," \u2014 "),Pre=n(jWe,"A",{href:!0});var xKt=s(Pre);WJr=r(xKt,"FlaxBlenderbotSmallModel"),xKt.forEach(t),QJr=r(jWe," (BlenderbotSmall model)"),jWe.forEach(t),UJr=i(ne),E6=n(ne,"LI",{});var DWe=s(E6);_7e=n(DWe,"STRONG",{});var $Kt=s(_7e);HJr=r($Kt,"clip"),$Kt.forEach(t),JJr=r(DWe," \u2014 "),Bre=n(DWe,"A",{href:!0});var kKt=s(Bre);YJr=r(kKt,"FlaxCLIPModel"),kKt.forEach(t),KJr=r(DWe," (CLIP model)"),DWe.forEach(t),ZJr=i(ne),C6=n(ne,"LI",{});var GWe=s(C6);b7e=n(GWe,"STRONG",{});var SKt=s(b7e);eYr=r(SKt,"distilbert"),SKt.forEach(t),oYr=r(GWe," \u2014 "),Ire=n(GWe,"A",{href:!0});var RKt=s(Ire);rYr=r(RKt,"FlaxDistilBertModel"),RKt.forEach(t),tYr=r(GWe," (DistilBERT model)"),GWe.forEach(t),aYr=i(ne),w6=n(ne,"LI",{});var OWe=s(w6);v7e=n(OWe,"STRONG",{});var PKt=s(v7e);nYr=r(PKt,"electra"),PKt.forEach(t),sYr=r(OWe," \u2014 "),Nre=n(OWe,"A",{href:!0});var BKt=s(Nre);lYr=r(BKt,"FlaxElectraModel"),BKt.forEach(t),iYr=r(OWe," (ELECTRA model)"),OWe.forEach(t),dYr=i(ne),A6=n(ne,"LI",{});var VWe=s(A6);F7e=n(VWe,"STRONG",{});var IKt=s(F7e);cYr=r(IKt,"gpt2"),IKt.forEach(t),mYr=r(VWe," \u2014 "),qre=n(VWe,"A",{href:!0});var NKt=s(qre);fYr=r(NKt,"FlaxGPT2Model"),NKt.forEach(t),gYr=r(VWe," (OpenAI GPT-2 model)"),VWe.forEach(t),hYr=i(ne),L6=n(ne,"LI",{});var XWe=s(L6);T7e=n(XWe,"STRONG",{});var qKt=s(T7e);uYr=r(qKt,"gpt_neo"),qKt.forEach(t),pYr=r(XWe," \u2014 "),jre=n(XWe,"A",{href:!0});var jKt=s(jre);_Yr=r(jKt,"FlaxGPTNeoModel"),jKt.forEach(t),bYr=r(XWe," (GPT Neo model)"),XWe.forEach(t),vYr=i(ne),y6=n(ne,"LI",{});var zWe=s(y6);M7e=n(zWe,"STRONG",{});var DKt=s(M7e);FYr=r(DKt,"gptj"),DKt.forEach(t),TYr=r(zWe," \u2014 "),Dre=n(zWe,"A",{href:!0});var GKt=s(Dre);MYr=r(GKt,"FlaxGPTJModel"),GKt.forEach(t),EYr=r(zWe," (GPT-J model)"),zWe.forEach(t),CYr=i(ne),x6=n(ne,"LI",{});var WWe=s(x6);E7e=n(WWe,"STRONG",{});var OKt=s(E7e);wYr=r(OKt,"longt5"),OKt.forEach(t),AYr=r(WWe," \u2014 "),Gre=n(WWe,"A",{href:!0});var VKt=s(Gre);LYr=r(VKt,"FlaxLongT5Model"),VKt.forEach(t),yYr=r(WWe," (LongT5 model)"),WWe.forEach(t),xYr=i(ne),$6=n(ne,"LI",{});var QWe=s($6);C7e=n(QWe,"STRONG",{});var XKt=s(C7e);$Yr=r(XKt,"marian"),XKt.forEach(t),kYr=r(QWe," \u2014 "),Ore=n(QWe,"A",{href:!0});var zKt=s(Ore);SYr=r(zKt,"FlaxMarianModel"),zKt.forEach(t),RYr=r(QWe," (Marian model)"),QWe.forEach(t),PYr=i(ne),k6=n(ne,"LI",{});var UWe=s(k6);w7e=n(UWe,"STRONG",{});var WKt=s(w7e);BYr=r(WKt,"mbart"),WKt.forEach(t),IYr=r(UWe," \u2014 "),Vre=n(UWe,"A",{href:!0});var QKt=s(Vre);NYr=r(QKt,"FlaxMBartModel"),QKt.forEach(t),qYr=r(UWe," (mBART model)"),UWe.forEach(t),jYr=i(ne),S6=n(ne,"LI",{});var HWe=s(S6);A7e=n(HWe,"STRONG",{});var UKt=s(A7e);DYr=r(UKt,"mt5"),UKt.forEach(t),GYr=r(HWe," \u2014 "),Xre=n(HWe,"A",{href:!0});var HKt=s(Xre);OYr=r(HKt,"FlaxMT5Model"),HKt.forEach(t),VYr=r(HWe," (MT5 model)"),HWe.forEach(t),XYr=i(ne),R6=n(ne,"LI",{});var JWe=s(R6);L7e=n(JWe,"STRONG",{});var JKt=s(L7e);zYr=r(JKt,"opt"),JKt.forEach(t),WYr=r(JWe," \u2014 "),zre=n(JWe,"A",{href:!0});var YKt=s(zre);QYr=r(YKt,"FlaxOPTModel"),YKt.forEach(t),UYr=r(JWe," (OPT model)"),JWe.forEach(t),HYr=i(ne),P6=n(ne,"LI",{});var YWe=s(P6);y7e=n(YWe,"STRONG",{});var KKt=s(y7e);JYr=r(KKt,"pegasus"),KKt.forEach(t),YYr=r(YWe," \u2014 "),Wre=n(YWe,"A",{href:!0});var ZKt=s(Wre);KYr=r(ZKt,"FlaxPegasusModel"),ZKt.forEach(t),ZYr=r(YWe," (Pegasus model)"),YWe.forEach(t),eKr=i(ne),B6=n(ne,"LI",{});var KWe=s(B6);x7e=n(KWe,"STRONG",{});var eZt=s(x7e);oKr=r(eZt,"roberta"),eZt.forEach(t),rKr=r(KWe," \u2014 "),Qre=n(KWe,"A",{href:!0});var oZt=s(Qre);tKr=r(oZt,"FlaxRobertaModel"),oZt.forEach(t),aKr=r(KWe," (RoBERTa model)"),KWe.forEach(t),nKr=i(ne),I6=n(ne,"LI",{});var ZWe=s(I6);$7e=n(ZWe,"STRONG",{});var rZt=s($7e);sKr=r(rZt,"roformer"),rZt.forEach(t),lKr=r(ZWe," \u2014 "),Ure=n(ZWe,"A",{href:!0});var tZt=s(Ure);iKr=r(tZt,"FlaxRoFormerModel"),tZt.forEach(t),dKr=r(ZWe," (RoFormer model)"),ZWe.forEach(t),cKr=i(ne),N6=n(ne,"LI",{});var eQe=s(N6);k7e=n(eQe,"STRONG",{});var aZt=s(k7e);mKr=r(aZt,"t5"),aZt.forEach(t),fKr=r(eQe," \u2014 "),Hre=n(eQe,"A",{href:!0});var nZt=s(Hre);gKr=r(nZt,"FlaxT5Model"),nZt.forEach(t),hKr=r(eQe," (T5 model)"),eQe.forEach(t),uKr=i(ne),q6=n(ne,"LI",{});var oQe=s(q6);S7e=n(oQe,"STRONG",{});var sZt=s(S7e);pKr=r(sZt,"vision-text-dual-encoder"),sZt.forEach(t),_Kr=r(oQe," \u2014 "),Jre=n(oQe,"A",{href:!0});var lZt=s(Jre);bKr=r(lZt,"FlaxVisionTextDualEncoderModel"),lZt.forEach(t),vKr=r(oQe," (VisionTextDualEncoder model)"),oQe.forEach(t),FKr=i(ne),j6=n(ne,"LI",{});var rQe=s(j6);R7e=n(rQe,"STRONG",{});var iZt=s(R7e);TKr=r(iZt,"vit"),iZt.forEach(t),MKr=r(rQe," \u2014 "),Yre=n(rQe,"A",{href:!0});var dZt=s(Yre);EKr=r(dZt,"FlaxViTModel"),dZt.forEach(t),CKr=r(rQe," (ViT model)"),rQe.forEach(t),wKr=i(ne),D6=n(ne,"LI",{});var tQe=s(D6);P7e=n(tQe,"STRONG",{});var cZt=s(P7e);AKr=r(cZt,"wav2vec2"),cZt.forEach(t),LKr=r(tQe," \u2014 "),Kre=n(tQe,"A",{href:!0});var mZt=s(Kre);yKr=r(mZt,"FlaxWav2Vec2Model"),mZt.forEach(t),xKr=r(tQe," (Wav2Vec2 model)"),tQe.forEach(t),$Kr=i(ne),G6=n(ne,"LI",{});var aQe=s(G6);B7e=n(aQe,"STRONG",{});var fZt=s(B7e);kKr=r(fZt,"xglm"),fZt.forEach(t),SKr=r(aQe," \u2014 "),Zre=n(aQe,"A",{href:!0});var gZt=s(Zre);RKr=r(gZt,"FlaxXGLMModel"),gZt.forEach(t),PKr=r(aQe," (XGLM model)"),aQe.forEach(t),BKr=i(ne),O6=n(ne,"LI",{});var nQe=s(O6);I7e=n(nQe,"STRONG",{});var hZt=s(I7e);IKr=r(hZt,"xlm-roberta"),hZt.forEach(t),NKr=r(nQe," \u2014 "),ete=n(nQe,"A",{href:!0});var uZt=s(ete);qKr=r(uZt,"FlaxXLMRobertaModel"),uZt.forEach(t),jKr=r(nQe," (XLM-RoBERTa model)"),nQe.forEach(t),ne.forEach(t),DKr=i(vi),T(V6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),MJe=i(m),bm=n(m,"H2",{class:!0});var BKe=s(bm);X6=n(BKe,"A",{id:!0,class:!0,href:!0});var pZt=s(X6);N7e=n(pZt,"SPAN",{});var _Zt=s(N7e);T(Xk.$$.fragment,_Zt),_Zt.forEach(t),pZt.forEach(t),GKr=i(BKe),q7e=n(BKe,"SPAN",{});var bZt=s(q7e);OKr=r(bZt,"FlaxAutoModelForCausalLM"),bZt.forEach(t),BKe.forEach(t),EJe=i(m),Fr=n(m,"DIV",{class:!0});var Fi=s(Fr);T(zk.$$.fragment,Fi),VKr=i(Fi),vm=n(Fi,"P",{});var jse=s(vm);XKr=r(jse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ote=n(jse,"A",{href:!0});var vZt=s(ote);zKr=r(vZt,"from_pretrained()"),vZt.forEach(t),WKr=r(jse," class method or the "),rte=n(jse,"A",{href:!0});var FZt=s(rte);QKr=r(FZt,"from_config()"),FZt.forEach(t),UKr=r(jse,` class
method.`),jse.forEach(t),HKr=i(Fi),Wk=n(Fi,"P",{});var IKe=s(Wk);JKr=r(IKe,"This class cannot be instantiated directly using "),j7e=n(IKe,"CODE",{});var TZt=s(j7e);YKr=r(TZt,"__init__()"),TZt.forEach(t),KKr=r(IKe," (throws an error)."),IKe.forEach(t),ZKr=i(Fi),ea=n(Fi,"DIV",{class:!0});var e8=s(ea);T(Qk.$$.fragment,e8),eZr=i(e8),D7e=n(e8,"P",{});var MZt=s(D7e);oZr=r(MZt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MZt.forEach(t),rZr=i(e8),Fm=n(e8,"P",{});var Dse=s(Fm);tZr=r(Dse,`Note:
Loading a model from its configuration file does `),G7e=n(Dse,"STRONG",{});var EZt=s(G7e);aZr=r(EZt,"not"),EZt.forEach(t),nZr=r(Dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=n(Dse,"A",{href:!0});var CZt=s(tte);sZr=r(CZt,"from_pretrained()"),CZt.forEach(t),lZr=r(Dse," to load the model weights."),Dse.forEach(t),iZr=i(e8),T(z6.$$.fragment,e8),e8.forEach(t),dZr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(Uk.$$.fragment,Ti),cZr=i(Ti),O7e=n(Ti,"P",{});var wZt=s(O7e);mZr=r(wZt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wZt.forEach(t),fZr=i(Ti),Sn=n(Ti,"P",{});var o8=s(Sn);gZr=r(o8,"The model class to instantiate is selected based on the "),V7e=n(o8,"CODE",{});var AZt=s(V7e);hZr=r(AZt,"model_type"),AZt.forEach(t),uZr=r(o8,` property of the config object (either
passed as an argument or loaded from `),X7e=n(o8,"CODE",{});var LZt=s(X7e);pZr=r(LZt,"pretrained_model_name_or_path"),LZt.forEach(t),_Zr=r(o8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(o8,"CODE",{});var yZt=s(z7e);bZr=r(yZt,"pretrained_model_name_or_path"),yZt.forEach(t),vZr=r(o8,":"),o8.forEach(t),FZr=i(Ti),xe=n(Ti,"UL",{});var qe=s(xe);W6=n(qe,"LI",{});var sQe=s(W6);W7e=n(sQe,"STRONG",{});var xZt=s(W7e);TZr=r(xZt,"bart"),xZt.forEach(t),MZr=r(sQe," \u2014 "),ate=n(sQe,"A",{href:!0});var $Zt=s(ate);EZr=r($Zt,"FlaxBartForCausalLM"),$Zt.forEach(t),CZr=r(sQe," (BART model)"),sQe.forEach(t),wZr=i(qe),Q6=n(qe,"LI",{});var lQe=s(Q6);Q7e=n(lQe,"STRONG",{});var kZt=s(Q7e);AZr=r(kZt,"bert"),kZt.forEach(t),LZr=r(lQe," \u2014 "),nte=n(lQe,"A",{href:!0});var SZt=s(nte);yZr=r(SZt,"FlaxBertForCausalLM"),SZt.forEach(t),xZr=r(lQe," (BERT model)"),lQe.forEach(t),$Zr=i(qe),U6=n(qe,"LI",{});var iQe=s(U6);U7e=n(iQe,"STRONG",{});var RZt=s(U7e);kZr=r(RZt,"big_bird"),RZt.forEach(t),SZr=r(iQe," \u2014 "),ste=n(iQe,"A",{href:!0});var PZt=s(ste);RZr=r(PZt,"FlaxBigBirdForCausalLM"),PZt.forEach(t),PZr=r(iQe," (BigBird model)"),iQe.forEach(t),BZr=i(qe),H6=n(qe,"LI",{});var dQe=s(H6);H7e=n(dQe,"STRONG",{});var BZt=s(H7e);IZr=r(BZt,"electra"),BZt.forEach(t),NZr=r(dQe," \u2014 "),lte=n(dQe,"A",{href:!0});var IZt=s(lte);qZr=r(IZt,"FlaxElectraForCausalLM"),IZt.forEach(t),jZr=r(dQe," (ELECTRA model)"),dQe.forEach(t),DZr=i(qe),J6=n(qe,"LI",{});var cQe=s(J6);J7e=n(cQe,"STRONG",{});var NZt=s(J7e);GZr=r(NZt,"gpt2"),NZt.forEach(t),OZr=r(cQe," \u2014 "),ite=n(cQe,"A",{href:!0});var qZt=s(ite);VZr=r(qZt,"FlaxGPT2LMHeadModel"),qZt.forEach(t),XZr=r(cQe," (OpenAI GPT-2 model)"),cQe.forEach(t),zZr=i(qe),Y6=n(qe,"LI",{});var mQe=s(Y6);Y7e=n(mQe,"STRONG",{});var jZt=s(Y7e);WZr=r(jZt,"gpt_neo"),jZt.forEach(t),QZr=r(mQe," \u2014 "),dte=n(mQe,"A",{href:!0});var DZt=s(dte);UZr=r(DZt,"FlaxGPTNeoForCausalLM"),DZt.forEach(t),HZr=r(mQe," (GPT Neo model)"),mQe.forEach(t),JZr=i(qe),K6=n(qe,"LI",{});var fQe=s(K6);K7e=n(fQe,"STRONG",{});var GZt=s(K7e);YZr=r(GZt,"gptj"),GZt.forEach(t),KZr=r(fQe," \u2014 "),cte=n(fQe,"A",{href:!0});var OZt=s(cte);ZZr=r(OZt,"FlaxGPTJForCausalLM"),OZt.forEach(t),eet=r(fQe," (GPT-J model)"),fQe.forEach(t),oet=i(qe),Z6=n(qe,"LI",{});var gQe=s(Z6);Z7e=n(gQe,"STRONG",{});var VZt=s(Z7e);ret=r(VZt,"opt"),VZt.forEach(t),tet=r(gQe," \u2014 "),mte=n(gQe,"A",{href:!0});var XZt=s(mte);aet=r(XZt,"FlaxOPTForCausalLM"),XZt.forEach(t),net=r(gQe," (OPT model)"),gQe.forEach(t),set=i(qe),eA=n(qe,"LI",{});var hQe=s(eA);eLe=n(hQe,"STRONG",{});var zZt=s(eLe);iet=r(zZt,"roberta"),zZt.forEach(t),det=r(hQe," \u2014 "),fte=n(hQe,"A",{href:!0});var WZt=s(fte);cet=r(WZt,"FlaxRobertaForCausalLM"),WZt.forEach(t),met=r(hQe," (RoBERTa model)"),hQe.forEach(t),fet=i(qe),oA=n(qe,"LI",{});var uQe=s(oA);oLe=n(uQe,"STRONG",{});var QZt=s(oLe);get=r(QZt,"xglm"),QZt.forEach(t),het=r(uQe," \u2014 "),gte=n(uQe,"A",{href:!0});var UZt=s(gte);uet=r(UZt,"FlaxXGLMForCausalLM"),UZt.forEach(t),pet=r(uQe," (XGLM model)"),uQe.forEach(t),qe.forEach(t),_et=i(Ti),T(rA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),CJe=i(m),Tm=n(m,"H2",{class:!0});var NKe=s(Tm);tA=n(NKe,"A",{id:!0,class:!0,href:!0});var HZt=s(tA);rLe=n(HZt,"SPAN",{});var JZt=s(rLe);T(Hk.$$.fragment,JZt),JZt.forEach(t),HZt.forEach(t),bet=i(NKe),tLe=n(NKe,"SPAN",{});var YZt=s(tLe);vet=r(YZt,"FlaxAutoModelForPreTraining"),YZt.forEach(t),NKe.forEach(t),wJe=i(m),Tr=n(m,"DIV",{class:!0});var Mi=s(Tr);T(Jk.$$.fragment,Mi),Fet=i(Mi),Mm=n(Mi,"P",{});var Gse=s(Mm);Tet=r(Gse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hte=n(Gse,"A",{href:!0});var KZt=s(hte);Met=r(KZt,"from_pretrained()"),KZt.forEach(t),Eet=r(Gse," class method or the "),ute=n(Gse,"A",{href:!0});var ZZt=s(ute);Cet=r(ZZt,"from_config()"),ZZt.forEach(t),wet=r(Gse,` class
method.`),Gse.forEach(t),Aet=i(Mi),Yk=n(Mi,"P",{});var qKe=s(Yk);Let=r(qKe,"This class cannot be instantiated directly using "),aLe=n(qKe,"CODE",{});var eea=s(aLe);yet=r(eea,"__init__()"),eea.forEach(t),xet=r(qKe," (throws an error)."),qKe.forEach(t),$et=i(Mi),oa=n(Mi,"DIV",{class:!0});var r8=s(oa);T(Kk.$$.fragment,r8),ket=i(r8),nLe=n(r8,"P",{});var oea=s(nLe);Set=r(oea,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oea.forEach(t),Ret=i(r8),Em=n(r8,"P",{});var Ose=s(Em);Pet=r(Ose,`Note:
Loading a model from its configuration file does `),sLe=n(Ose,"STRONG",{});var rea=s(sLe);Bet=r(rea,"not"),rea.forEach(t),Iet=r(Ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),pte=n(Ose,"A",{href:!0});var tea=s(pte);Net=r(tea,"from_pretrained()"),tea.forEach(t),qet=r(Ose," to load the model weights."),Ose.forEach(t),jet=i(r8),T(aA.$$.fragment,r8),r8.forEach(t),Det=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Zk.$$.fragment,Ei),Get=i(Ei),lLe=n(Ei,"P",{});var aea=s(lLe);Oet=r(aea,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aea.forEach(t),Vet=i(Ei),Rn=n(Ei,"P",{});var t8=s(Rn);Xet=r(t8,"The model class to instantiate is selected based on the "),iLe=n(t8,"CODE",{});var nea=s(iLe);zet=r(nea,"model_type"),nea.forEach(t),Wet=r(t8,` property of the config object (either
passed as an argument or loaded from `),dLe=n(t8,"CODE",{});var sea=s(dLe);Qet=r(sea,"pretrained_model_name_or_path"),sea.forEach(t),Uet=r(t8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cLe=n(t8,"CODE",{});var lea=s(cLe);Het=r(lea,"pretrained_model_name_or_path"),lea.forEach(t),Jet=r(t8,":"),t8.forEach(t),Yet=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);nA=n(we,"LI",{});var pQe=s(nA);mLe=n(pQe,"STRONG",{});var iea=s(mLe);Ket=r(iea,"albert"),iea.forEach(t),Zet=r(pQe," \u2014 "),_te=n(pQe,"A",{href:!0});var dea=s(_te);eot=r(dea,"FlaxAlbertForPreTraining"),dea.forEach(t),oot=r(pQe," (ALBERT model)"),pQe.forEach(t),rot=i(we),sA=n(we,"LI",{});var _Qe=s(sA);fLe=n(_Qe,"STRONG",{});var cea=s(fLe);tot=r(cea,"bart"),cea.forEach(t),aot=r(_Qe," \u2014 "),bte=n(_Qe,"A",{href:!0});var mea=s(bte);not=r(mea,"FlaxBartForConditionalGeneration"),mea.forEach(t),sot=r(_Qe," (BART model)"),_Qe.forEach(t),lot=i(we),lA=n(we,"LI",{});var bQe=s(lA);gLe=n(bQe,"STRONG",{});var fea=s(gLe);iot=r(fea,"bert"),fea.forEach(t),dot=r(bQe," \u2014 "),vte=n(bQe,"A",{href:!0});var gea=s(vte);cot=r(gea,"FlaxBertForPreTraining"),gea.forEach(t),mot=r(bQe," (BERT model)"),bQe.forEach(t),fot=i(we),iA=n(we,"LI",{});var vQe=s(iA);hLe=n(vQe,"STRONG",{});var hea=s(hLe);got=r(hea,"big_bird"),hea.forEach(t),hot=r(vQe," \u2014 "),Fte=n(vQe,"A",{href:!0});var uea=s(Fte);uot=r(uea,"FlaxBigBirdForPreTraining"),uea.forEach(t),pot=r(vQe," (BigBird model)"),vQe.forEach(t),_ot=i(we),dA=n(we,"LI",{});var FQe=s(dA);uLe=n(FQe,"STRONG",{});var pea=s(uLe);bot=r(pea,"electra"),pea.forEach(t),vot=r(FQe," \u2014 "),Tte=n(FQe,"A",{href:!0});var _ea=s(Tte);Fot=r(_ea,"FlaxElectraForPreTraining"),_ea.forEach(t),Tot=r(FQe," (ELECTRA model)"),FQe.forEach(t),Mot=i(we),cA=n(we,"LI",{});var TQe=s(cA);pLe=n(TQe,"STRONG",{});var bea=s(pLe);Eot=r(bea,"longt5"),bea.forEach(t),Cot=r(TQe," \u2014 "),Mte=n(TQe,"A",{href:!0});var vea=s(Mte);wot=r(vea,"FlaxLongT5ForConditionalGeneration"),vea.forEach(t),Aot=r(TQe," (LongT5 model)"),TQe.forEach(t),Lot=i(we),mA=n(we,"LI",{});var MQe=s(mA);_Le=n(MQe,"STRONG",{});var Fea=s(_Le);yot=r(Fea,"mbart"),Fea.forEach(t),xot=r(MQe," \u2014 "),Ete=n(MQe,"A",{href:!0});var Tea=s(Ete);$ot=r(Tea,"FlaxMBartForConditionalGeneration"),Tea.forEach(t),kot=r(MQe," (mBART model)"),MQe.forEach(t),Sot=i(we),fA=n(we,"LI",{});var EQe=s(fA);bLe=n(EQe,"STRONG",{});var Mea=s(bLe);Rot=r(Mea,"mt5"),Mea.forEach(t),Pot=r(EQe," \u2014 "),Cte=n(EQe,"A",{href:!0});var Eea=s(Cte);Bot=r(Eea,"FlaxMT5ForConditionalGeneration"),Eea.forEach(t),Iot=r(EQe," (MT5 model)"),EQe.forEach(t),Not=i(we),gA=n(we,"LI",{});var CQe=s(gA);vLe=n(CQe,"STRONG",{});var Cea=s(vLe);qot=r(Cea,"roberta"),Cea.forEach(t),jot=r(CQe," \u2014 "),wte=n(CQe,"A",{href:!0});var wea=s(wte);Dot=r(wea,"FlaxRobertaForMaskedLM"),wea.forEach(t),Got=r(CQe," (RoBERTa model)"),CQe.forEach(t),Oot=i(we),hA=n(we,"LI",{});var wQe=s(hA);FLe=n(wQe,"STRONG",{});var Aea=s(FLe);Vot=r(Aea,"roformer"),Aea.forEach(t),Xot=r(wQe," \u2014 "),Ate=n(wQe,"A",{href:!0});var Lea=s(Ate);zot=r(Lea,"FlaxRoFormerForMaskedLM"),Lea.forEach(t),Wot=r(wQe," (RoFormer model)"),wQe.forEach(t),Qot=i(we),uA=n(we,"LI",{});var AQe=s(uA);TLe=n(AQe,"STRONG",{});var yea=s(TLe);Uot=r(yea,"t5"),yea.forEach(t),Hot=r(AQe," \u2014 "),Lte=n(AQe,"A",{href:!0});var xea=s(Lte);Jot=r(xea,"FlaxT5ForConditionalGeneration"),xea.forEach(t),Yot=r(AQe," (T5 model)"),AQe.forEach(t),Kot=i(we),pA=n(we,"LI",{});var LQe=s(pA);MLe=n(LQe,"STRONG",{});var $ea=s(MLe);Zot=r($ea,"wav2vec2"),$ea.forEach(t),ert=r(LQe," \u2014 "),yte=n(LQe,"A",{href:!0});var kea=s(yte);ort=r(kea,"FlaxWav2Vec2ForPreTraining"),kea.forEach(t),rrt=r(LQe," (Wav2Vec2 model)"),LQe.forEach(t),trt=i(we),_A=n(we,"LI",{});var yQe=s(_A);ELe=n(yQe,"STRONG",{});var Sea=s(ELe);art=r(Sea,"xlm-roberta"),Sea.forEach(t),nrt=r(yQe," \u2014 "),xte=n(yQe,"A",{href:!0});var Rea=s(xte);srt=r(Rea,"FlaxXLMRobertaForMaskedLM"),Rea.forEach(t),lrt=r(yQe," (XLM-RoBERTa model)"),yQe.forEach(t),we.forEach(t),irt=i(Ei),T(bA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),AJe=i(m),Cm=n(m,"H2",{class:!0});var jKe=s(Cm);vA=n(jKe,"A",{id:!0,class:!0,href:!0});var Pea=s(vA);CLe=n(Pea,"SPAN",{});var Bea=s(CLe);T(eS.$$.fragment,Bea),Bea.forEach(t),Pea.forEach(t),drt=i(jKe),wLe=n(jKe,"SPAN",{});var Iea=s(wLe);crt=r(Iea,"FlaxAutoModelForMaskedLM"),Iea.forEach(t),jKe.forEach(t),LJe=i(m),Mr=n(m,"DIV",{class:!0});var Ci=s(Mr);T(oS.$$.fragment,Ci),mrt=i(Ci),wm=n(Ci,"P",{});var Vse=s(wm);frt=r(Vse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$te=n(Vse,"A",{href:!0});var Nea=s($te);grt=r(Nea,"from_pretrained()"),Nea.forEach(t),hrt=r(Vse," class method or the "),kte=n(Vse,"A",{href:!0});var qea=s(kte);urt=r(qea,"from_config()"),qea.forEach(t),prt=r(Vse,` class
method.`),Vse.forEach(t),_rt=i(Ci),rS=n(Ci,"P",{});var DKe=s(rS);brt=r(DKe,"This class cannot be instantiated directly using "),ALe=n(DKe,"CODE",{});var jea=s(ALe);vrt=r(jea,"__init__()"),jea.forEach(t),Frt=r(DKe," (throws an error)."),DKe.forEach(t),Trt=i(Ci),ra=n(Ci,"DIV",{class:!0});var a8=s(ra);T(tS.$$.fragment,a8),Mrt=i(a8),LLe=n(a8,"P",{});var Dea=s(LLe);Ert=r(Dea,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Dea.forEach(t),Crt=i(a8),Am=n(a8,"P",{});var Xse=s(Am);wrt=r(Xse,`Note:
Loading a model from its configuration file does `),yLe=n(Xse,"STRONG",{});var Gea=s(yLe);Art=r(Gea,"not"),Gea.forEach(t),Lrt=r(Xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ste=n(Xse,"A",{href:!0});var Oea=s(Ste);yrt=r(Oea,"from_pretrained()"),Oea.forEach(t),xrt=r(Xse," to load the model weights."),Xse.forEach(t),$rt=i(a8),T(FA.$$.fragment,a8),a8.forEach(t),krt=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(aS.$$.fragment,wi),Srt=i(wi),xLe=n(wi,"P",{});var Vea=s(xLe);Rrt=r(Vea,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vea.forEach(t),Prt=i(wi),Pn=n(wi,"P",{});var n8=s(Pn);Brt=r(n8,"The model class to instantiate is selected based on the "),$Le=n(n8,"CODE",{});var Xea=s($Le);Irt=r(Xea,"model_type"),Xea.forEach(t),Nrt=r(n8,` property of the config object (either
passed as an argument or loaded from `),kLe=n(n8,"CODE",{});var zea=s(kLe);qrt=r(zea,"pretrained_model_name_or_path"),zea.forEach(t),jrt=r(n8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SLe=n(n8,"CODE",{});var Wea=s(SLe);Drt=r(Wea,"pretrained_model_name_or_path"),Wea.forEach(t),Grt=r(n8,":"),n8.forEach(t),Ort=i(wi),$e=n(wi,"UL",{});var je=s($e);TA=n(je,"LI",{});var xQe=s(TA);RLe=n(xQe,"STRONG",{});var Qea=s(RLe);Vrt=r(Qea,"albert"),Qea.forEach(t),Xrt=r(xQe," \u2014 "),Rte=n(xQe,"A",{href:!0});var Uea=s(Rte);zrt=r(Uea,"FlaxAlbertForMaskedLM"),Uea.forEach(t),Wrt=r(xQe," (ALBERT model)"),xQe.forEach(t),Qrt=i(je),MA=n(je,"LI",{});var $Qe=s(MA);PLe=n($Qe,"STRONG",{});var Hea=s(PLe);Urt=r(Hea,"bart"),Hea.forEach(t),Hrt=r($Qe," \u2014 "),Pte=n($Qe,"A",{href:!0});var Jea=s(Pte);Jrt=r(Jea,"FlaxBartForConditionalGeneration"),Jea.forEach(t),Yrt=r($Qe," (BART model)"),$Qe.forEach(t),Krt=i(je),EA=n(je,"LI",{});var kQe=s(EA);BLe=n(kQe,"STRONG",{});var Yea=s(BLe);Zrt=r(Yea,"bert"),Yea.forEach(t),ett=r(kQe," \u2014 "),Bte=n(kQe,"A",{href:!0});var Kea=s(Bte);ott=r(Kea,"FlaxBertForMaskedLM"),Kea.forEach(t),rtt=r(kQe," (BERT model)"),kQe.forEach(t),ttt=i(je),CA=n(je,"LI",{});var SQe=s(CA);ILe=n(SQe,"STRONG",{});var Zea=s(ILe);att=r(Zea,"big_bird"),Zea.forEach(t),ntt=r(SQe," \u2014 "),Ite=n(SQe,"A",{href:!0});var eoa=s(Ite);stt=r(eoa,"FlaxBigBirdForMaskedLM"),eoa.forEach(t),ltt=r(SQe," (BigBird model)"),SQe.forEach(t),itt=i(je),wA=n(je,"LI",{});var RQe=s(wA);NLe=n(RQe,"STRONG",{});var ooa=s(NLe);dtt=r(ooa,"distilbert"),ooa.forEach(t),ctt=r(RQe," \u2014 "),Nte=n(RQe,"A",{href:!0});var roa=s(Nte);mtt=r(roa,"FlaxDistilBertForMaskedLM"),roa.forEach(t),ftt=r(RQe," (DistilBERT model)"),RQe.forEach(t),gtt=i(je),AA=n(je,"LI",{});var PQe=s(AA);qLe=n(PQe,"STRONG",{});var toa=s(qLe);htt=r(toa,"electra"),toa.forEach(t),utt=r(PQe," \u2014 "),qte=n(PQe,"A",{href:!0});var aoa=s(qte);ptt=r(aoa,"FlaxElectraForMaskedLM"),aoa.forEach(t),_tt=r(PQe," (ELECTRA model)"),PQe.forEach(t),btt=i(je),LA=n(je,"LI",{});var BQe=s(LA);jLe=n(BQe,"STRONG",{});var noa=s(jLe);vtt=r(noa,"mbart"),noa.forEach(t),Ftt=r(BQe," \u2014 "),jte=n(BQe,"A",{href:!0});var soa=s(jte);Ttt=r(soa,"FlaxMBartForConditionalGeneration"),soa.forEach(t),Mtt=r(BQe," (mBART model)"),BQe.forEach(t),Ett=i(je),yA=n(je,"LI",{});var IQe=s(yA);DLe=n(IQe,"STRONG",{});var loa=s(DLe);Ctt=r(loa,"roberta"),loa.forEach(t),wtt=r(IQe," \u2014 "),Dte=n(IQe,"A",{href:!0});var ioa=s(Dte);Att=r(ioa,"FlaxRobertaForMaskedLM"),ioa.forEach(t),Ltt=r(IQe," (RoBERTa model)"),IQe.forEach(t),ytt=i(je),xA=n(je,"LI",{});var NQe=s(xA);GLe=n(NQe,"STRONG",{});var doa=s(GLe);xtt=r(doa,"roformer"),doa.forEach(t),$tt=r(NQe," \u2014 "),Gte=n(NQe,"A",{href:!0});var coa=s(Gte);ktt=r(coa,"FlaxRoFormerForMaskedLM"),coa.forEach(t),Stt=r(NQe," (RoFormer model)"),NQe.forEach(t),Rtt=i(je),$A=n(je,"LI",{});var qQe=s($A);OLe=n(qQe,"STRONG",{});var moa=s(OLe);Ptt=r(moa,"xlm-roberta"),moa.forEach(t),Btt=r(qQe," \u2014 "),Ote=n(qQe,"A",{href:!0});var foa=s(Ote);Itt=r(foa,"FlaxXLMRobertaForMaskedLM"),foa.forEach(t),Ntt=r(qQe," (XLM-RoBERTa model)"),qQe.forEach(t),je.forEach(t),qtt=i(wi),T(kA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),yJe=i(m),Lm=n(m,"H2",{class:!0});var GKe=s(Lm);SA=n(GKe,"A",{id:!0,class:!0,href:!0});var goa=s(SA);VLe=n(goa,"SPAN",{});var hoa=s(VLe);T(nS.$$.fragment,hoa),hoa.forEach(t),goa.forEach(t),jtt=i(GKe),XLe=n(GKe,"SPAN",{});var uoa=s(XLe);Dtt=r(uoa,"FlaxAutoModelForSeq2SeqLM"),uoa.forEach(t),GKe.forEach(t),xJe=i(m),Er=n(m,"DIV",{class:!0});var Ai=s(Er);T(sS.$$.fragment,Ai),Gtt=i(Ai),ym=n(Ai,"P",{});var zse=s(ym);Ott=r(zse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Vte=n(zse,"A",{href:!0});var poa=s(Vte);Vtt=r(poa,"from_pretrained()"),poa.forEach(t),Xtt=r(zse," class method or the "),Xte=n(zse,"A",{href:!0});var _oa=s(Xte);ztt=r(_oa,"from_config()"),_oa.forEach(t),Wtt=r(zse,` class
method.`),zse.forEach(t),Qtt=i(Ai),lS=n(Ai,"P",{});var OKe=s(lS);Utt=r(OKe,"This class cannot be instantiated directly using "),zLe=n(OKe,"CODE",{});var boa=s(zLe);Htt=r(boa,"__init__()"),boa.forEach(t),Jtt=r(OKe," (throws an error)."),OKe.forEach(t),Ytt=i(Ai),ta=n(Ai,"DIV",{class:!0});var s8=s(ta);T(iS.$$.fragment,s8),Ktt=i(s8),WLe=n(s8,"P",{});var voa=s(WLe);Ztt=r(voa,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),voa.forEach(t),eat=i(s8),xm=n(s8,"P",{});var Wse=s(xm);oat=r(Wse,`Note:
Loading a model from its configuration file does `),QLe=n(Wse,"STRONG",{});var Foa=s(QLe);rat=r(Foa,"not"),Foa.forEach(t),tat=r(Wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),zte=n(Wse,"A",{href:!0});var Toa=s(zte);aat=r(Toa,"from_pretrained()"),Toa.forEach(t),nat=r(Wse," to load the model weights."),Wse.forEach(t),sat=i(s8),T(RA.$$.fragment,s8),s8.forEach(t),lat=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(dS.$$.fragment,Li),iat=i(Li),ULe=n(Li,"P",{});var Moa=s(ULe);dat=r(Moa,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Moa.forEach(t),cat=i(Li),Bn=n(Li,"P",{});var l8=s(Bn);mat=r(l8,"The model class to instantiate is selected based on the "),HLe=n(l8,"CODE",{});var Eoa=s(HLe);fat=r(Eoa,"model_type"),Eoa.forEach(t),gat=r(l8,` property of the config object (either
passed as an argument or loaded from `),JLe=n(l8,"CODE",{});var Coa=s(JLe);hat=r(Coa,"pretrained_model_name_or_path"),Coa.forEach(t),uat=r(l8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YLe=n(l8,"CODE",{});var woa=s(YLe);pat=r(woa,"pretrained_model_name_or_path"),woa.forEach(t),_at=r(l8,":"),l8.forEach(t),bat=i(Li),ke=n(Li,"UL",{});var De=s(ke);PA=n(De,"LI",{});var jQe=s(PA);KLe=n(jQe,"STRONG",{});var Aoa=s(KLe);vat=r(Aoa,"bart"),Aoa.forEach(t),Fat=r(jQe," \u2014 "),Wte=n(jQe,"A",{href:!0});var Loa=s(Wte);Tat=r(Loa,"FlaxBartForConditionalGeneration"),Loa.forEach(t),Mat=r(jQe," (BART model)"),jQe.forEach(t),Eat=i(De),BA=n(De,"LI",{});var DQe=s(BA);ZLe=n(DQe,"STRONG",{});var yoa=s(ZLe);Cat=r(yoa,"blenderbot"),yoa.forEach(t),wat=r(DQe," \u2014 "),Qte=n(DQe,"A",{href:!0});var xoa=s(Qte);Aat=r(xoa,"FlaxBlenderbotForConditionalGeneration"),xoa.forEach(t),Lat=r(DQe," (Blenderbot model)"),DQe.forEach(t),yat=i(De),IA=n(De,"LI",{});var GQe=s(IA);eye=n(GQe,"STRONG",{});var $oa=s(eye);xat=r($oa,"blenderbot-small"),$oa.forEach(t),$at=r(GQe," \u2014 "),Ute=n(GQe,"A",{href:!0});var koa=s(Ute);kat=r(koa,"FlaxBlenderbotSmallForConditionalGeneration"),koa.forEach(t),Sat=r(GQe," (BlenderbotSmall model)"),GQe.forEach(t),Rat=i(De),NA=n(De,"LI",{});var OQe=s(NA);oye=n(OQe,"STRONG",{});var Soa=s(oye);Pat=r(Soa,"encoder-decoder"),Soa.forEach(t),Bat=r(OQe," \u2014 "),Hte=n(OQe,"A",{href:!0});var Roa=s(Hte);Iat=r(Roa,"FlaxEncoderDecoderModel"),Roa.forEach(t),Nat=r(OQe," (Encoder decoder model)"),OQe.forEach(t),qat=i(De),qA=n(De,"LI",{});var VQe=s(qA);rye=n(VQe,"STRONG",{});var Poa=s(rye);jat=r(Poa,"longt5"),Poa.forEach(t),Dat=r(VQe," \u2014 "),Jte=n(VQe,"A",{href:!0});var Boa=s(Jte);Gat=r(Boa,"FlaxLongT5ForConditionalGeneration"),Boa.forEach(t),Oat=r(VQe," (LongT5 model)"),VQe.forEach(t),Vat=i(De),jA=n(De,"LI",{});var XQe=s(jA);tye=n(XQe,"STRONG",{});var Ioa=s(tye);Xat=r(Ioa,"marian"),Ioa.forEach(t),zat=r(XQe," \u2014 "),Yte=n(XQe,"A",{href:!0});var Noa=s(Yte);Wat=r(Noa,"FlaxMarianMTModel"),Noa.forEach(t),Qat=r(XQe," (Marian model)"),XQe.forEach(t),Uat=i(De),DA=n(De,"LI",{});var zQe=s(DA);aye=n(zQe,"STRONG",{});var qoa=s(aye);Hat=r(qoa,"mbart"),qoa.forEach(t),Jat=r(zQe," \u2014 "),Kte=n(zQe,"A",{href:!0});var joa=s(Kte);Yat=r(joa,"FlaxMBartForConditionalGeneration"),joa.forEach(t),Kat=r(zQe," (mBART model)"),zQe.forEach(t),Zat=i(De),GA=n(De,"LI",{});var WQe=s(GA);nye=n(WQe,"STRONG",{});var Doa=s(nye);ent=r(Doa,"mt5"),Doa.forEach(t),ont=r(WQe," \u2014 "),Zte=n(WQe,"A",{href:!0});var Goa=s(Zte);rnt=r(Goa,"FlaxMT5ForConditionalGeneration"),Goa.forEach(t),tnt=r(WQe," (MT5 model)"),WQe.forEach(t),ant=i(De),OA=n(De,"LI",{});var QQe=s(OA);sye=n(QQe,"STRONG",{});var Ooa=s(sye);nnt=r(Ooa,"pegasus"),Ooa.forEach(t),snt=r(QQe," \u2014 "),eae=n(QQe,"A",{href:!0});var Voa=s(eae);lnt=r(Voa,"FlaxPegasusForConditionalGeneration"),Voa.forEach(t),int=r(QQe," (Pegasus model)"),QQe.forEach(t),dnt=i(De),VA=n(De,"LI",{});var UQe=s(VA);lye=n(UQe,"STRONG",{});var Xoa=s(lye);cnt=r(Xoa,"t5"),Xoa.forEach(t),mnt=r(UQe," \u2014 "),oae=n(UQe,"A",{href:!0});var zoa=s(oae);fnt=r(zoa,"FlaxT5ForConditionalGeneration"),zoa.forEach(t),gnt=r(UQe," (T5 model)"),UQe.forEach(t),De.forEach(t),hnt=i(Li),T(XA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),$Je=i(m),$m=n(m,"H2",{class:!0});var VKe=s($m);zA=n(VKe,"A",{id:!0,class:!0,href:!0});var Woa=s(zA);iye=n(Woa,"SPAN",{});var Qoa=s(iye);T(cS.$$.fragment,Qoa),Qoa.forEach(t),Woa.forEach(t),unt=i(VKe),dye=n(VKe,"SPAN",{});var Uoa=s(dye);pnt=r(Uoa,"FlaxAutoModelForSequenceClassification"),Uoa.forEach(t),VKe.forEach(t),kJe=i(m),Cr=n(m,"DIV",{class:!0});var yi=s(Cr);T(mS.$$.fragment,yi),_nt=i(yi),km=n(yi,"P",{});var Qse=s(km);bnt=r(Qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rae=n(Qse,"A",{href:!0});var Hoa=s(rae);vnt=r(Hoa,"from_pretrained()"),Hoa.forEach(t),Fnt=r(Qse," class method or the "),tae=n(Qse,"A",{href:!0});var Joa=s(tae);Tnt=r(Joa,"from_config()"),Joa.forEach(t),Mnt=r(Qse,` class
method.`),Qse.forEach(t),Ent=i(yi),fS=n(yi,"P",{});var XKe=s(fS);Cnt=r(XKe,"This class cannot be instantiated directly using "),cye=n(XKe,"CODE",{});var Yoa=s(cye);wnt=r(Yoa,"__init__()"),Yoa.forEach(t),Ant=r(XKe," (throws an error)."),XKe.forEach(t),Lnt=i(yi),aa=n(yi,"DIV",{class:!0});var i8=s(aa);T(gS.$$.fragment,i8),ynt=i(i8),mye=n(i8,"P",{});var Koa=s(mye);xnt=r(Koa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Koa.forEach(t),$nt=i(i8),Sm=n(i8,"P",{});var Use=s(Sm);knt=r(Use,`Note:
Loading a model from its configuration file does `),fye=n(Use,"STRONG",{});var Zoa=s(fye);Snt=r(Zoa,"not"),Zoa.forEach(t),Rnt=r(Use,` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=n(Use,"A",{href:!0});var era=s(aae);Pnt=r(era,"from_pretrained()"),era.forEach(t),Bnt=r(Use," to load the model weights."),Use.forEach(t),Int=i(i8),T(WA.$$.fragment,i8),i8.forEach(t),Nnt=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(hS.$$.fragment,xi),qnt=i(xi),gye=n(xi,"P",{});var ora=s(gye);jnt=r(ora,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ora.forEach(t),Dnt=i(xi),In=n(xi,"P",{});var d8=s(In);Gnt=r(d8,"The model class to instantiate is selected based on the "),hye=n(d8,"CODE",{});var rra=s(hye);Ont=r(rra,"model_type"),rra.forEach(t),Vnt=r(d8,` property of the config object (either
passed as an argument or loaded from `),uye=n(d8,"CODE",{});var tra=s(uye);Xnt=r(tra,"pretrained_model_name_or_path"),tra.forEach(t),znt=r(d8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pye=n(d8,"CODE",{});var ara=s(pye);Wnt=r(ara,"pretrained_model_name_or_path"),ara.forEach(t),Qnt=r(d8,":"),d8.forEach(t),Unt=i(xi),Se=n(xi,"UL",{});var Ge=s(Se);QA=n(Ge,"LI",{});var HQe=s(QA);_ye=n(HQe,"STRONG",{});var nra=s(_ye);Hnt=r(nra,"albert"),nra.forEach(t),Jnt=r(HQe," \u2014 "),nae=n(HQe,"A",{href:!0});var sra=s(nae);Ynt=r(sra,"FlaxAlbertForSequenceClassification"),sra.forEach(t),Knt=r(HQe," (ALBERT model)"),HQe.forEach(t),Znt=i(Ge),UA=n(Ge,"LI",{});var JQe=s(UA);bye=n(JQe,"STRONG",{});var lra=s(bye);est=r(lra,"bart"),lra.forEach(t),ost=r(JQe," \u2014 "),sae=n(JQe,"A",{href:!0});var ira=s(sae);rst=r(ira,"FlaxBartForSequenceClassification"),ira.forEach(t),tst=r(JQe," (BART model)"),JQe.forEach(t),ast=i(Ge),HA=n(Ge,"LI",{});var YQe=s(HA);vye=n(YQe,"STRONG",{});var dra=s(vye);nst=r(dra,"bert"),dra.forEach(t),sst=r(YQe," \u2014 "),lae=n(YQe,"A",{href:!0});var cra=s(lae);lst=r(cra,"FlaxBertForSequenceClassification"),cra.forEach(t),ist=r(YQe," (BERT model)"),YQe.forEach(t),dst=i(Ge),JA=n(Ge,"LI",{});var KQe=s(JA);Fye=n(KQe,"STRONG",{});var mra=s(Fye);cst=r(mra,"big_bird"),mra.forEach(t),mst=r(KQe," \u2014 "),iae=n(KQe,"A",{href:!0});var fra=s(iae);fst=r(fra,"FlaxBigBirdForSequenceClassification"),fra.forEach(t),gst=r(KQe," (BigBird model)"),KQe.forEach(t),hst=i(Ge),YA=n(Ge,"LI",{});var ZQe=s(YA);Tye=n(ZQe,"STRONG",{});var gra=s(Tye);ust=r(gra,"distilbert"),gra.forEach(t),pst=r(ZQe," \u2014 "),dae=n(ZQe,"A",{href:!0});var hra=s(dae);_st=r(hra,"FlaxDistilBertForSequenceClassification"),hra.forEach(t),bst=r(ZQe," (DistilBERT model)"),ZQe.forEach(t),vst=i(Ge),KA=n(Ge,"LI",{});var eUe=s(KA);Mye=n(eUe,"STRONG",{});var ura=s(Mye);Fst=r(ura,"electra"),ura.forEach(t),Tst=r(eUe," \u2014 "),cae=n(eUe,"A",{href:!0});var pra=s(cae);Mst=r(pra,"FlaxElectraForSequenceClassification"),pra.forEach(t),Est=r(eUe," (ELECTRA model)"),eUe.forEach(t),Cst=i(Ge),ZA=n(Ge,"LI",{});var oUe=s(ZA);Eye=n(oUe,"STRONG",{});var _ra=s(Eye);wst=r(_ra,"mbart"),_ra.forEach(t),Ast=r(oUe," \u2014 "),mae=n(oUe,"A",{href:!0});var bra=s(mae);Lst=r(bra,"FlaxMBartForSequenceClassification"),bra.forEach(t),yst=r(oUe," (mBART model)"),oUe.forEach(t),xst=i(Ge),e7=n(Ge,"LI",{});var rUe=s(e7);Cye=n(rUe,"STRONG",{});var vra=s(Cye);$st=r(vra,"roberta"),vra.forEach(t),kst=r(rUe," \u2014 "),fae=n(rUe,"A",{href:!0});var Fra=s(fae);Sst=r(Fra,"FlaxRobertaForSequenceClassification"),Fra.forEach(t),Rst=r(rUe," (RoBERTa model)"),rUe.forEach(t),Pst=i(Ge),o7=n(Ge,"LI",{});var tUe=s(o7);wye=n(tUe,"STRONG",{});var Tra=s(wye);Bst=r(Tra,"roformer"),Tra.forEach(t),Ist=r(tUe," \u2014 "),gae=n(tUe,"A",{href:!0});var Mra=s(gae);Nst=r(Mra,"FlaxRoFormerForSequenceClassification"),Mra.forEach(t),qst=r(tUe," (RoFormer model)"),tUe.forEach(t),jst=i(Ge),r7=n(Ge,"LI",{});var aUe=s(r7);Aye=n(aUe,"STRONG",{});var Era=s(Aye);Dst=r(Era,"xlm-roberta"),Era.forEach(t),Gst=r(aUe," \u2014 "),hae=n(aUe,"A",{href:!0});var Cra=s(hae);Ost=r(Cra,"FlaxXLMRobertaForSequenceClassification"),Cra.forEach(t),Vst=r(aUe," (XLM-RoBERTa model)"),aUe.forEach(t),Ge.forEach(t),Xst=i(xi),T(t7.$$.fragment,xi),xi.forEach(t),yi.forEach(t),SJe=i(m),Rm=n(m,"H2",{class:!0});var zKe=s(Rm);a7=n(zKe,"A",{id:!0,class:!0,href:!0});var wra=s(a7);Lye=n(wra,"SPAN",{});var Ara=s(Lye);T(uS.$$.fragment,Ara),Ara.forEach(t),wra.forEach(t),zst=i(zKe),yye=n(zKe,"SPAN",{});var Lra=s(yye);Wst=r(Lra,"FlaxAutoModelForQuestionAnswering"),Lra.forEach(t),zKe.forEach(t),RJe=i(m),wr=n(m,"DIV",{class:!0});var $i=s(wr);T(pS.$$.fragment,$i),Qst=i($i),Pm=n($i,"P",{});var Hse=s(Pm);Ust=r(Hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uae=n(Hse,"A",{href:!0});var yra=s(uae);Hst=r(yra,"from_pretrained()"),yra.forEach(t),Jst=r(Hse," class method or the "),pae=n(Hse,"A",{href:!0});var xra=s(pae);Yst=r(xra,"from_config()"),xra.forEach(t),Kst=r(Hse,` class
method.`),Hse.forEach(t),Zst=i($i),_S=n($i,"P",{});var WKe=s(_S);elt=r(WKe,"This class cannot be instantiated directly using "),xye=n(WKe,"CODE",{});var $ra=s(xye);olt=r($ra,"__init__()"),$ra.forEach(t),rlt=r(WKe," (throws an error)."),WKe.forEach(t),tlt=i($i),na=n($i,"DIV",{class:!0});var c8=s(na);T(bS.$$.fragment,c8),alt=i(c8),$ye=n(c8,"P",{});var kra=s($ye);nlt=r(kra,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kra.forEach(t),slt=i(c8),Bm=n(c8,"P",{});var Jse=s(Bm);llt=r(Jse,`Note:
Loading a model from its configuration file does `),kye=n(Jse,"STRONG",{});var Sra=s(kye);ilt=r(Sra,"not"),Sra.forEach(t),dlt=r(Jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ae=n(Jse,"A",{href:!0});var Rra=s(_ae);clt=r(Rra,"from_pretrained()"),Rra.forEach(t),mlt=r(Jse," to load the model weights."),Jse.forEach(t),flt=i(c8),T(n7.$$.fragment,c8),c8.forEach(t),glt=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(vS.$$.fragment,ki),hlt=i(ki),Sye=n(ki,"P",{});var Pra=s(Sye);ult=r(Pra,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pra.forEach(t),plt=i(ki),Nn=n(ki,"P",{});var m8=s(Nn);_lt=r(m8,"The model class to instantiate is selected based on the "),Rye=n(m8,"CODE",{});var Bra=s(Rye);blt=r(Bra,"model_type"),Bra.forEach(t),vlt=r(m8,` property of the config object (either
passed as an argument or loaded from `),Pye=n(m8,"CODE",{});var Ira=s(Pye);Flt=r(Ira,"pretrained_model_name_or_path"),Ira.forEach(t),Tlt=r(m8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bye=n(m8,"CODE",{});var Nra=s(Bye);Mlt=r(Nra,"pretrained_model_name_or_path"),Nra.forEach(t),Elt=r(m8,":"),m8.forEach(t),Clt=i(ki),Re=n(ki,"UL",{});var Oe=s(Re);s7=n(Oe,"LI",{});var nUe=s(s7);Iye=n(nUe,"STRONG",{});var qra=s(Iye);wlt=r(qra,"albert"),qra.forEach(t),Alt=r(nUe," \u2014 "),bae=n(nUe,"A",{href:!0});var jra=s(bae);Llt=r(jra,"FlaxAlbertForQuestionAnswering"),jra.forEach(t),ylt=r(nUe," (ALBERT model)"),nUe.forEach(t),xlt=i(Oe),l7=n(Oe,"LI",{});var sUe=s(l7);Nye=n(sUe,"STRONG",{});var Dra=s(Nye);$lt=r(Dra,"bart"),Dra.forEach(t),klt=r(sUe," \u2014 "),vae=n(sUe,"A",{href:!0});var Gra=s(vae);Slt=r(Gra,"FlaxBartForQuestionAnswering"),Gra.forEach(t),Rlt=r(sUe," (BART model)"),sUe.forEach(t),Plt=i(Oe),i7=n(Oe,"LI",{});var lUe=s(i7);qye=n(lUe,"STRONG",{});var Ora=s(qye);Blt=r(Ora,"bert"),Ora.forEach(t),Ilt=r(lUe," \u2014 "),Fae=n(lUe,"A",{href:!0});var Vra=s(Fae);Nlt=r(Vra,"FlaxBertForQuestionAnswering"),Vra.forEach(t),qlt=r(lUe," (BERT model)"),lUe.forEach(t),jlt=i(Oe),d7=n(Oe,"LI",{});var iUe=s(d7);jye=n(iUe,"STRONG",{});var Xra=s(jye);Dlt=r(Xra,"big_bird"),Xra.forEach(t),Glt=r(iUe," \u2014 "),Tae=n(iUe,"A",{href:!0});var zra=s(Tae);Olt=r(zra,"FlaxBigBirdForQuestionAnswering"),zra.forEach(t),Vlt=r(iUe," (BigBird model)"),iUe.forEach(t),Xlt=i(Oe),c7=n(Oe,"LI",{});var dUe=s(c7);Dye=n(dUe,"STRONG",{});var Wra=s(Dye);zlt=r(Wra,"distilbert"),Wra.forEach(t),Wlt=r(dUe," \u2014 "),Mae=n(dUe,"A",{href:!0});var Qra=s(Mae);Qlt=r(Qra,"FlaxDistilBertForQuestionAnswering"),Qra.forEach(t),Ult=r(dUe," (DistilBERT model)"),dUe.forEach(t),Hlt=i(Oe),m7=n(Oe,"LI",{});var cUe=s(m7);Gye=n(cUe,"STRONG",{});var Ura=s(Gye);Jlt=r(Ura,"electra"),Ura.forEach(t),Ylt=r(cUe," \u2014 "),Eae=n(cUe,"A",{href:!0});var Hra=s(Eae);Klt=r(Hra,"FlaxElectraForQuestionAnswering"),Hra.forEach(t),Zlt=r(cUe," (ELECTRA model)"),cUe.forEach(t),eit=i(Oe),f7=n(Oe,"LI",{});var mUe=s(f7);Oye=n(mUe,"STRONG",{});var Jra=s(Oye);oit=r(Jra,"mbart"),Jra.forEach(t),rit=r(mUe," \u2014 "),Cae=n(mUe,"A",{href:!0});var Yra=s(Cae);tit=r(Yra,"FlaxMBartForQuestionAnswering"),Yra.forEach(t),ait=r(mUe," (mBART model)"),mUe.forEach(t),nit=i(Oe),g7=n(Oe,"LI",{});var fUe=s(g7);Vye=n(fUe,"STRONG",{});var Kra=s(Vye);sit=r(Kra,"roberta"),Kra.forEach(t),lit=r(fUe," \u2014 "),wae=n(fUe,"A",{href:!0});var Zra=s(wae);iit=r(Zra,"FlaxRobertaForQuestionAnswering"),Zra.forEach(t),dit=r(fUe," (RoBERTa model)"),fUe.forEach(t),cit=i(Oe),h7=n(Oe,"LI",{});var gUe=s(h7);Xye=n(gUe,"STRONG",{});var eta=s(Xye);mit=r(eta,"roformer"),eta.forEach(t),fit=r(gUe," \u2014 "),Aae=n(gUe,"A",{href:!0});var ota=s(Aae);git=r(ota,"FlaxRoFormerForQuestionAnswering"),ota.forEach(t),hit=r(gUe," (RoFormer model)"),gUe.forEach(t),uit=i(Oe),u7=n(Oe,"LI",{});var hUe=s(u7);zye=n(hUe,"STRONG",{});var rta=s(zye);pit=r(rta,"xlm-roberta"),rta.forEach(t),_it=r(hUe," \u2014 "),Lae=n(hUe,"A",{href:!0});var tta=s(Lae);bit=r(tta,"FlaxXLMRobertaForQuestionAnswering"),tta.forEach(t),vit=r(hUe," (XLM-RoBERTa model)"),hUe.forEach(t),Oe.forEach(t),Fit=i(ki),T(p7.$$.fragment,ki),ki.forEach(t),$i.forEach(t),PJe=i(m),Im=n(m,"H2",{class:!0});var QKe=s(Im);_7=n(QKe,"A",{id:!0,class:!0,href:!0});var ata=s(_7);Wye=n(ata,"SPAN",{});var nta=s(Wye);T(FS.$$.fragment,nta),nta.forEach(t),ata.forEach(t),Tit=i(QKe),Qye=n(QKe,"SPAN",{});var sta=s(Qye);Mit=r(sta,"FlaxAutoModelForTokenClassification"),sta.forEach(t),QKe.forEach(t),BJe=i(m),Ar=n(m,"DIV",{class:!0});var Si=s(Ar);T(TS.$$.fragment,Si),Eit=i(Si),Nm=n(Si,"P",{});var Yse=s(Nm);Cit=r(Yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yae=n(Yse,"A",{href:!0});var lta=s(yae);wit=r(lta,"from_pretrained()"),lta.forEach(t),Ait=r(Yse," class method or the "),xae=n(Yse,"A",{href:!0});var ita=s(xae);Lit=r(ita,"from_config()"),ita.forEach(t),yit=r(Yse,` class
method.`),Yse.forEach(t),xit=i(Si),MS=n(Si,"P",{});var UKe=s(MS);$it=r(UKe,"This class cannot be instantiated directly using "),Uye=n(UKe,"CODE",{});var dta=s(Uye);kit=r(dta,"__init__()"),dta.forEach(t),Sit=r(UKe," (throws an error)."),UKe.forEach(t),Rit=i(Si),sa=n(Si,"DIV",{class:!0});var f8=s(sa);T(ES.$$.fragment,f8),Pit=i(f8),Hye=n(f8,"P",{});var cta=s(Hye);Bit=r(cta,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cta.forEach(t),Iit=i(f8),qm=n(f8,"P",{});var Kse=s(qm);Nit=r(Kse,`Note:
Loading a model from its configuration file does `),Jye=n(Kse,"STRONG",{});var mta=s(Jye);qit=r(mta,"not"),mta.forEach(t),jit=r(Kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=n(Kse,"A",{href:!0});var fta=s($ae);Dit=r(fta,"from_pretrained()"),fta.forEach(t),Git=r(Kse," to load the model weights."),Kse.forEach(t),Oit=i(f8),T(b7.$$.fragment,f8),f8.forEach(t),Vit=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(CS.$$.fragment,Ri),Xit=i(Ri),Yye=n(Ri,"P",{});var gta=s(Yye);zit=r(gta,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gta.forEach(t),Wit=i(Ri),qn=n(Ri,"P",{});var g8=s(qn);Qit=r(g8,"The model class to instantiate is selected based on the "),Kye=n(g8,"CODE",{});var hta=s(Kye);Uit=r(hta,"model_type"),hta.forEach(t),Hit=r(g8,` property of the config object (either
passed as an argument or loaded from `),Zye=n(g8,"CODE",{});var uta=s(Zye);Jit=r(uta,"pretrained_model_name_or_path"),uta.forEach(t),Yit=r(g8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=n(g8,"CODE",{});var pta=s(e8e);Kit=r(pta,"pretrained_model_name_or_path"),pta.forEach(t),Zit=r(g8,":"),g8.forEach(t),edt=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);v7=n(Co,"LI",{});var uUe=s(v7);o8e=n(uUe,"STRONG",{});var _ta=s(o8e);odt=r(_ta,"albert"),_ta.forEach(t),rdt=r(uUe," \u2014 "),kae=n(uUe,"A",{href:!0});var bta=s(kae);tdt=r(bta,"FlaxAlbertForTokenClassification"),bta.forEach(t),adt=r(uUe," (ALBERT model)"),uUe.forEach(t),ndt=i(Co),F7=n(Co,"LI",{});var pUe=s(F7);r8e=n(pUe,"STRONG",{});var vta=s(r8e);sdt=r(vta,"bert"),vta.forEach(t),ldt=r(pUe," \u2014 "),Sae=n(pUe,"A",{href:!0});var Fta=s(Sae);idt=r(Fta,"FlaxBertForTokenClassification"),Fta.forEach(t),ddt=r(pUe," (BERT model)"),pUe.forEach(t),cdt=i(Co),T7=n(Co,"LI",{});var _Ue=s(T7);t8e=n(_Ue,"STRONG",{});var Tta=s(t8e);mdt=r(Tta,"big_bird"),Tta.forEach(t),fdt=r(_Ue," \u2014 "),Rae=n(_Ue,"A",{href:!0});var Mta=s(Rae);gdt=r(Mta,"FlaxBigBirdForTokenClassification"),Mta.forEach(t),hdt=r(_Ue," (BigBird model)"),_Ue.forEach(t),udt=i(Co),M7=n(Co,"LI",{});var bUe=s(M7);a8e=n(bUe,"STRONG",{});var Eta=s(a8e);pdt=r(Eta,"distilbert"),Eta.forEach(t),_dt=r(bUe," \u2014 "),Pae=n(bUe,"A",{href:!0});var Cta=s(Pae);bdt=r(Cta,"FlaxDistilBertForTokenClassification"),Cta.forEach(t),vdt=r(bUe," (DistilBERT model)"),bUe.forEach(t),Fdt=i(Co),E7=n(Co,"LI",{});var vUe=s(E7);n8e=n(vUe,"STRONG",{});var wta=s(n8e);Tdt=r(wta,"electra"),wta.forEach(t),Mdt=r(vUe," \u2014 "),Bae=n(vUe,"A",{href:!0});var Ata=s(Bae);Edt=r(Ata,"FlaxElectraForTokenClassification"),Ata.forEach(t),Cdt=r(vUe," (ELECTRA model)"),vUe.forEach(t),wdt=i(Co),C7=n(Co,"LI",{});var FUe=s(C7);s8e=n(FUe,"STRONG",{});var Lta=s(s8e);Adt=r(Lta,"roberta"),Lta.forEach(t),Ldt=r(FUe," \u2014 "),Iae=n(FUe,"A",{href:!0});var yta=s(Iae);ydt=r(yta,"FlaxRobertaForTokenClassification"),yta.forEach(t),xdt=r(FUe," (RoBERTa model)"),FUe.forEach(t),$dt=i(Co),w7=n(Co,"LI",{});var TUe=s(w7);l8e=n(TUe,"STRONG",{});var xta=s(l8e);kdt=r(xta,"roformer"),xta.forEach(t),Sdt=r(TUe," \u2014 "),Nae=n(TUe,"A",{href:!0});var $ta=s(Nae);Rdt=r($ta,"FlaxRoFormerForTokenClassification"),$ta.forEach(t),Pdt=r(TUe," (RoFormer model)"),TUe.forEach(t),Bdt=i(Co),A7=n(Co,"LI",{});var MUe=s(A7);i8e=n(MUe,"STRONG",{});var kta=s(i8e);Idt=r(kta,"xlm-roberta"),kta.forEach(t),Ndt=r(MUe," \u2014 "),qae=n(MUe,"A",{href:!0});var Sta=s(qae);qdt=r(Sta,"FlaxXLMRobertaForTokenClassification"),Sta.forEach(t),jdt=r(MUe," (XLM-RoBERTa model)"),MUe.forEach(t),Co.forEach(t),Ddt=i(Ri),T(L7.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),IJe=i(m),jm=n(m,"H2",{class:!0});var HKe=s(jm);y7=n(HKe,"A",{id:!0,class:!0,href:!0});var Rta=s(y7);d8e=n(Rta,"SPAN",{});var Pta=s(d8e);T(wS.$$.fragment,Pta),Pta.forEach(t),Rta.forEach(t),Gdt=i(HKe),c8e=n(HKe,"SPAN",{});var Bta=s(c8e);Odt=r(Bta,"FlaxAutoModelForMultipleChoice"),Bta.forEach(t),HKe.forEach(t),NJe=i(m),Lr=n(m,"DIV",{class:!0});var Pi=s(Lr);T(AS.$$.fragment,Pi),Vdt=i(Pi),Dm=n(Pi,"P",{});var Zse=s(Dm);Xdt=r(Zse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jae=n(Zse,"A",{href:!0});var Ita=s(jae);zdt=r(Ita,"from_pretrained()"),Ita.forEach(t),Wdt=r(Zse," class method or the "),Dae=n(Zse,"A",{href:!0});var Nta=s(Dae);Qdt=r(Nta,"from_config()"),Nta.forEach(t),Udt=r(Zse,` class
method.`),Zse.forEach(t),Hdt=i(Pi),LS=n(Pi,"P",{});var JKe=s(LS);Jdt=r(JKe,"This class cannot be instantiated directly using "),m8e=n(JKe,"CODE",{});var qta=s(m8e);Ydt=r(qta,"__init__()"),qta.forEach(t),Kdt=r(JKe," (throws an error)."),JKe.forEach(t),Zdt=i(Pi),la=n(Pi,"DIV",{class:!0});var h8=s(la);T(yS.$$.fragment,h8),ect=i(h8),f8e=n(h8,"P",{});var jta=s(f8e);oct=r(jta,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jta.forEach(t),rct=i(h8),Gm=n(h8,"P",{});var ele=s(Gm);tct=r(ele,`Note:
Loading a model from its configuration file does `),g8e=n(ele,"STRONG",{});var Dta=s(g8e);act=r(Dta,"not"),Dta.forEach(t),nct=r(ele,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=n(ele,"A",{href:!0});var Gta=s(Gae);sct=r(Gta,"from_pretrained()"),Gta.forEach(t),lct=r(ele," to load the model weights."),ele.forEach(t),ict=i(h8),T(x7.$$.fragment,h8),h8.forEach(t),dct=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(xS.$$.fragment,Bi),cct=i(Bi),h8e=n(Bi,"P",{});var Ota=s(h8e);mct=r(Ota,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ota.forEach(t),fct=i(Bi),jn=n(Bi,"P",{});var u8=s(jn);gct=r(u8,"The model class to instantiate is selected based on the "),u8e=n(u8,"CODE",{});var Vta=s(u8e);hct=r(Vta,"model_type"),Vta.forEach(t),uct=r(u8,` property of the config object (either
passed as an argument or loaded from `),p8e=n(u8,"CODE",{});var Xta=s(p8e);pct=r(Xta,"pretrained_model_name_or_path"),Xta.forEach(t),_ct=r(u8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=n(u8,"CODE",{});var zta=s(_8e);bct=r(zta,"pretrained_model_name_or_path"),zta.forEach(t),vct=r(u8,":"),u8.forEach(t),Fct=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);$7=n(wo,"LI",{});var EUe=s($7);b8e=n(EUe,"STRONG",{});var Wta=s(b8e);Tct=r(Wta,"albert"),Wta.forEach(t),Mct=r(EUe," \u2014 "),Oae=n(EUe,"A",{href:!0});var Qta=s(Oae);Ect=r(Qta,"FlaxAlbertForMultipleChoice"),Qta.forEach(t),Cct=r(EUe," (ALBERT model)"),EUe.forEach(t),wct=i(wo),k7=n(wo,"LI",{});var CUe=s(k7);v8e=n(CUe,"STRONG",{});var Uta=s(v8e);Act=r(Uta,"bert"),Uta.forEach(t),Lct=r(CUe," \u2014 "),Vae=n(CUe,"A",{href:!0});var Hta=s(Vae);yct=r(Hta,"FlaxBertForMultipleChoice"),Hta.forEach(t),xct=r(CUe," (BERT model)"),CUe.forEach(t),$ct=i(wo),S7=n(wo,"LI",{});var wUe=s(S7);F8e=n(wUe,"STRONG",{});var Jta=s(F8e);kct=r(Jta,"big_bird"),Jta.forEach(t),Sct=r(wUe," \u2014 "),Xae=n(wUe,"A",{href:!0});var Yta=s(Xae);Rct=r(Yta,"FlaxBigBirdForMultipleChoice"),Yta.forEach(t),Pct=r(wUe," (BigBird model)"),wUe.forEach(t),Bct=i(wo),R7=n(wo,"LI",{});var AUe=s(R7);T8e=n(AUe,"STRONG",{});var Kta=s(T8e);Ict=r(Kta,"distilbert"),Kta.forEach(t),Nct=r(AUe," \u2014 "),zae=n(AUe,"A",{href:!0});var Zta=s(zae);qct=r(Zta,"FlaxDistilBertForMultipleChoice"),Zta.forEach(t),jct=r(AUe," (DistilBERT model)"),AUe.forEach(t),Dct=i(wo),P7=n(wo,"LI",{});var LUe=s(P7);M8e=n(LUe,"STRONG",{});var eaa=s(M8e);Gct=r(eaa,"electra"),eaa.forEach(t),Oct=r(LUe," \u2014 "),Wae=n(LUe,"A",{href:!0});var oaa=s(Wae);Vct=r(oaa,"FlaxElectraForMultipleChoice"),oaa.forEach(t),Xct=r(LUe," (ELECTRA model)"),LUe.forEach(t),zct=i(wo),B7=n(wo,"LI",{});var yUe=s(B7);E8e=n(yUe,"STRONG",{});var raa=s(E8e);Wct=r(raa,"roberta"),raa.forEach(t),Qct=r(yUe," \u2014 "),Qae=n(yUe,"A",{href:!0});var taa=s(Qae);Uct=r(taa,"FlaxRobertaForMultipleChoice"),taa.forEach(t),Hct=r(yUe," (RoBERTa model)"),yUe.forEach(t),Jct=i(wo),I7=n(wo,"LI",{});var xUe=s(I7);C8e=n(xUe,"STRONG",{});var aaa=s(C8e);Yct=r(aaa,"roformer"),aaa.forEach(t),Kct=r(xUe," \u2014 "),Uae=n(xUe,"A",{href:!0});var naa=s(Uae);Zct=r(naa,"FlaxRoFormerForMultipleChoice"),naa.forEach(t),emt=r(xUe," (RoFormer model)"),xUe.forEach(t),omt=i(wo),N7=n(wo,"LI",{});var $Ue=s(N7);w8e=n($Ue,"STRONG",{});var saa=s(w8e);rmt=r(saa,"xlm-roberta"),saa.forEach(t),tmt=r($Ue," \u2014 "),Hae=n($Ue,"A",{href:!0});var laa=s(Hae);amt=r(laa,"FlaxXLMRobertaForMultipleChoice"),laa.forEach(t),nmt=r($Ue," (XLM-RoBERTa model)"),$Ue.forEach(t),wo.forEach(t),smt=i(Bi),T(q7.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),qJe=i(m),Om=n(m,"H2",{class:!0});var YKe=s(Om);j7=n(YKe,"A",{id:!0,class:!0,href:!0});var iaa=s(j7);A8e=n(iaa,"SPAN",{});var daa=s(A8e);T($S.$$.fragment,daa),daa.forEach(t),iaa.forEach(t),lmt=i(YKe),L8e=n(YKe,"SPAN",{});var caa=s(L8e);imt=r(caa,"FlaxAutoModelForNextSentencePrediction"),caa.forEach(t),YKe.forEach(t),jJe=i(m),yr=n(m,"DIV",{class:!0});var Ii=s(yr);T(kS.$$.fragment,Ii),dmt=i(Ii),Vm=n(Ii,"P",{});var ole=s(Vm);cmt=r(ole,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jae=n(ole,"A",{href:!0});var maa=s(Jae);mmt=r(maa,"from_pretrained()"),maa.forEach(t),fmt=r(ole," class method or the "),Yae=n(ole,"A",{href:!0});var faa=s(Yae);gmt=r(faa,"from_config()"),faa.forEach(t),hmt=r(ole,` class
method.`),ole.forEach(t),umt=i(Ii),SS=n(Ii,"P",{});var KKe=s(SS);pmt=r(KKe,"This class cannot be instantiated directly using "),y8e=n(KKe,"CODE",{});var gaa=s(y8e);_mt=r(gaa,"__init__()"),gaa.forEach(t),bmt=r(KKe," (throws an error)."),KKe.forEach(t),vmt=i(Ii),ia=n(Ii,"DIV",{class:!0});var p8=s(ia);T(RS.$$.fragment,p8),Fmt=i(p8),x8e=n(p8,"P",{});var haa=s(x8e);Tmt=r(haa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),haa.forEach(t),Mmt=i(p8),Xm=n(p8,"P",{});var rle=s(Xm);Emt=r(rle,`Note:
Loading a model from its configuration file does `),$8e=n(rle,"STRONG",{});var uaa=s($8e);Cmt=r(uaa,"not"),uaa.forEach(t),wmt=r(rle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kae=n(rle,"A",{href:!0});var paa=s(Kae);Amt=r(paa,"from_pretrained()"),paa.forEach(t),Lmt=r(rle," to load the model weights."),rle.forEach(t),ymt=i(p8),T(D7.$$.fragment,p8),p8.forEach(t),xmt=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(PS.$$.fragment,Ni),$mt=i(Ni),k8e=n(Ni,"P",{});var _aa=s(k8e);kmt=r(_aa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_aa.forEach(t),Smt=i(Ni),Dn=n(Ni,"P",{});var _8=s(Dn);Rmt=r(_8,"The model class to instantiate is selected based on the "),S8e=n(_8,"CODE",{});var baa=s(S8e);Pmt=r(baa,"model_type"),baa.forEach(t),Bmt=r(_8,` property of the config object (either
passed as an argument or loaded from `),R8e=n(_8,"CODE",{});var vaa=s(R8e);Imt=r(vaa,"pretrained_model_name_or_path"),vaa.forEach(t),Nmt=r(_8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=n(_8,"CODE",{});var Faa=s(P8e);qmt=r(Faa,"pretrained_model_name_or_path"),Faa.forEach(t),jmt=r(_8,":"),_8.forEach(t),Dmt=i(Ni),B8e=n(Ni,"UL",{});var Taa=s(B8e);G7=n(Taa,"LI",{});var kUe=s(G7);I8e=n(kUe,"STRONG",{});var Maa=s(I8e);Gmt=r(Maa,"bert"),Maa.forEach(t),Omt=r(kUe," \u2014 "),Zae=n(kUe,"A",{href:!0});var Eaa=s(Zae);Vmt=r(Eaa,"FlaxBertForNextSentencePrediction"),Eaa.forEach(t),Xmt=r(kUe," (BERT model)"),kUe.forEach(t),Taa.forEach(t),zmt=i(Ni),T(O7.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),DJe=i(m),zm=n(m,"H2",{class:!0});var ZKe=s(zm);V7=n(ZKe,"A",{id:!0,class:!0,href:!0});var Caa=s(V7);N8e=n(Caa,"SPAN",{});var waa=s(N8e);T(BS.$$.fragment,waa),waa.forEach(t),Caa.forEach(t),Wmt=i(ZKe),q8e=n(ZKe,"SPAN",{});var Aaa=s(q8e);Qmt=r(Aaa,"FlaxAutoModelForImageClassification"),Aaa.forEach(t),ZKe.forEach(t),GJe=i(m),xr=n(m,"DIV",{class:!0});var qi=s(xr);T(IS.$$.fragment,qi),Umt=i(qi),Wm=n(qi,"P",{});var tle=s(Wm);Hmt=r(tle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ene=n(tle,"A",{href:!0});var Laa=s(ene);Jmt=r(Laa,"from_pretrained()"),Laa.forEach(t),Ymt=r(tle," class method or the "),one=n(tle,"A",{href:!0});var yaa=s(one);Kmt=r(yaa,"from_config()"),yaa.forEach(t),Zmt=r(tle,` class
method.`),tle.forEach(t),eft=i(qi),NS=n(qi,"P",{});var eZe=s(NS);oft=r(eZe,"This class cannot be instantiated directly using "),j8e=n(eZe,"CODE",{});var xaa=s(j8e);rft=r(xaa,"__init__()"),xaa.forEach(t),tft=r(eZe," (throws an error)."),eZe.forEach(t),aft=i(qi),da=n(qi,"DIV",{class:!0});var b8=s(da);T(qS.$$.fragment,b8),nft=i(b8),D8e=n(b8,"P",{});var $aa=s(D8e);sft=r($aa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$aa.forEach(t),lft=i(b8),Qm=n(b8,"P",{});var ale=s(Qm);ift=r(ale,`Note:
Loading a model from its configuration file does `),G8e=n(ale,"STRONG",{});var kaa=s(G8e);dft=r(kaa,"not"),kaa.forEach(t),cft=r(ale,` load the model weights. It only affects the
model\u2019s configuration. Use `),rne=n(ale,"A",{href:!0});var Saa=s(rne);mft=r(Saa,"from_pretrained()"),Saa.forEach(t),fft=r(ale," to load the model weights."),ale.forEach(t),gft=i(b8),T(X7.$$.fragment,b8),b8.forEach(t),hft=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(jS.$$.fragment,ji),uft=i(ji),O8e=n(ji,"P",{});var Raa=s(O8e);pft=r(Raa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Raa.forEach(t),_ft=i(ji),Gn=n(ji,"P",{});var v8=s(Gn);bft=r(v8,"The model class to instantiate is selected based on the "),V8e=n(v8,"CODE",{});var Paa=s(V8e);vft=r(Paa,"model_type"),Paa.forEach(t),Fft=r(v8,` property of the config object (either
passed as an argument or loaded from `),X8e=n(v8,"CODE",{});var Baa=s(X8e);Tft=r(Baa,"pretrained_model_name_or_path"),Baa.forEach(t),Mft=r(v8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=n(v8,"CODE",{});var Iaa=s(z8e);Eft=r(Iaa,"pretrained_model_name_or_path"),Iaa.forEach(t),Cft=r(v8,":"),v8.forEach(t),wft=i(ji),DS=n(ji,"UL",{});var oZe=s(DS);z7=n(oZe,"LI",{});var SUe=s(z7);W8e=n(SUe,"STRONG",{});var Naa=s(W8e);Aft=r(Naa,"beit"),Naa.forEach(t),Lft=r(SUe," \u2014 "),tne=n(SUe,"A",{href:!0});var qaa=s(tne);yft=r(qaa,"FlaxBeitForImageClassification"),qaa.forEach(t),xft=r(SUe," (BEiT model)"),SUe.forEach(t),$ft=i(oZe),W7=n(oZe,"LI",{});var RUe=s(W7);Q8e=n(RUe,"STRONG",{});var jaa=s(Q8e);kft=r(jaa,"vit"),jaa.forEach(t),Sft=r(RUe," \u2014 "),ane=n(RUe,"A",{href:!0});var Daa=s(ane);Rft=r(Daa,"FlaxViTForImageClassification"),Daa.forEach(t),Pft=r(RUe," (ViT model)"),RUe.forEach(t),oZe.forEach(t),Bft=i(ji),T(Q7.$$.fragment,ji),ji.forEach(t),qi.forEach(t),OJe=i(m),Um=n(m,"H2",{class:!0});var rZe=s(Um);U7=n(rZe,"A",{id:!0,class:!0,href:!0});var Gaa=s(U7);U8e=n(Gaa,"SPAN",{});var Oaa=s(U8e);T(GS.$$.fragment,Oaa),Oaa.forEach(t),Gaa.forEach(t),Ift=i(rZe),H8e=n(rZe,"SPAN",{});var Vaa=s(H8e);Nft=r(Vaa,"FlaxAutoModelForVision2Seq"),Vaa.forEach(t),rZe.forEach(t),VJe=i(m),$r=n(m,"DIV",{class:!0});var Di=s($r);T(OS.$$.fragment,Di),qft=i(Di),Hm=n(Di,"P",{});var nle=s(Hm);jft=r(nle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nne=n(nle,"A",{href:!0});var Xaa=s(nne);Dft=r(Xaa,"from_pretrained()"),Xaa.forEach(t),Gft=r(nle," class method or the "),sne=n(nle,"A",{href:!0});var zaa=s(sne);Oft=r(zaa,"from_config()"),zaa.forEach(t),Vft=r(nle,` class
method.`),nle.forEach(t),Xft=i(Di),VS=n(Di,"P",{});var tZe=s(VS);zft=r(tZe,"This class cannot be instantiated directly using "),J8e=n(tZe,"CODE",{});var Waa=s(J8e);Wft=r(Waa,"__init__()"),Waa.forEach(t),Qft=r(tZe," (throws an error)."),tZe.forEach(t),Uft=i(Di),ca=n(Di,"DIV",{class:!0});var F8=s(ca);T(XS.$$.fragment,F8),Hft=i(F8),Y8e=n(F8,"P",{});var Qaa=s(Y8e);Jft=r(Qaa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qaa.forEach(t),Yft=i(F8),Jm=n(F8,"P",{});var sle=s(Jm);Kft=r(sle,`Note:
Loading a model from its configuration file does `),K8e=n(sle,"STRONG",{});var Uaa=s(K8e);Zft=r(Uaa,"not"),Uaa.forEach(t),egt=r(sle,` load the model weights. It only affects the
model\u2019s configuration. Use `),lne=n(sle,"A",{href:!0});var Haa=s(lne);ogt=r(Haa,"from_pretrained()"),Haa.forEach(t),rgt=r(sle," to load the model weights."),sle.forEach(t),tgt=i(F8),T(H7.$$.fragment,F8),F8.forEach(t),agt=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(zS.$$.fragment,Gi),ngt=i(Gi),Z8e=n(Gi,"P",{});var Jaa=s(Z8e);sgt=r(Jaa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jaa.forEach(t),lgt=i(Gi),On=n(Gi,"P",{});var T8=s(On);igt=r(T8,"The model class to instantiate is selected based on the "),e9e=n(T8,"CODE",{});var Yaa=s(e9e);dgt=r(Yaa,"model_type"),Yaa.forEach(t),cgt=r(T8,` property of the config object (either
passed as an argument or loaded from `),o9e=n(T8,"CODE",{});var Kaa=s(o9e);mgt=r(Kaa,"pretrained_model_name_or_path"),Kaa.forEach(t),fgt=r(T8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r9e=n(T8,"CODE",{});var Zaa=s(r9e);ggt=r(Zaa,"pretrained_model_name_or_path"),Zaa.forEach(t),hgt=r(T8,":"),T8.forEach(t),ugt=i(Gi),t9e=n(Gi,"UL",{});var ena=s(t9e);J7=n(ena,"LI",{});var PUe=s(J7);a9e=n(PUe,"STRONG",{});var ona=s(a9e);pgt=r(ona,"vision-encoder-decoder"),ona.forEach(t),_gt=r(PUe," \u2014 "),ine=n(PUe,"A",{href:!0});var rna=s(ine);bgt=r(rna,"FlaxVisionEncoderDecoderModel"),rna.forEach(t),vgt=r(PUe," (Vision Encoder decoder model)"),PUe.forEach(t),ena.forEach(t),Fgt=i(Gi),T(Y7.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(fla)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(af,"id","extending-the-auto-classes"),c(af,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(af,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sf,"id","transformers.AutoConfig"),c(sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sf,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(TP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(MP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(yP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(xP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c($P,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(kP,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(SP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(RP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(BP,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(qP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(jP,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(OP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(XP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(zP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(WP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(QP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(UP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(JP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(YP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(KP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(ZP,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(eB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(oB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(rB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(tB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(aB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(nB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(sB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(lB,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(iB,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(dB,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(cB,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(mB,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(fB,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(gB,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(hB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(uB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(pB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(_B,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(bB,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(vB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(FB,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(TB,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(MB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(EB,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(CB,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(wB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(AB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(LB,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(yB,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(xB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c($B,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(kB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(SB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(RB,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(PB,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(BB,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(IB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(NB,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(qB,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(jB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(DB,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(GB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(OB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(VB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(XB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(zB,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(WB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(QB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(UB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(KB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(eI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(tI,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(aI,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(nI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(lI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(iI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(mI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(fI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(hI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(bI,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(vI,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(FI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(TI,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(EI,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(CI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(AI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(LI,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(xI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c($I,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(kI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(SI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(RI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(PI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(BI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(II,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoTokenizer"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(NI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(qI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(OI,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(VI,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(XI,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(zI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(QI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(UI,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(HI,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(JI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(KI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(oN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(rN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(tN,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(aN,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(nN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(lN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(iN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(dN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(cN,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(mN,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(fN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(hN,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(uN,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(pN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(_N,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(FN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(TN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(MN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(EN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(CN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(wN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(AN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(LN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(yN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(xN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c($N,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(kN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(SN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(RN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(BN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(DN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ON,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(VN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(XN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(zN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(WN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(QN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(JN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(YN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(KN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(ZN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(eq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(oq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(rq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(tq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(aq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(nq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(sq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(lq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(iq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(dq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(cq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(mq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(fq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(gq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(hq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(uq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(pq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(_q,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(bq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(vq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Fq,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Tq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Mq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Eq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Cq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(wq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(Aq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(Lq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(yq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(xq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c($q,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(kq,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Bq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Nq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(jq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Dq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Gq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Oq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Vq,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Xq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Wq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Qq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Uq,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(Hq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(Jq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Yq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Kq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Zq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(ej,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(oj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(rj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(tj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(sj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(lj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(ij,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(dj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(cj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(mj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(fj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(gj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(hj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(uj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(pj,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(bj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Fj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Tj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Mj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Ej,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Cj,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(wj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Aj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Lj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(yj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(xj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c($j,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(kj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Sj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Rj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Pj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Bj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(Ij,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lu,"id","transformers.AutoFeatureExtractor"),c(lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lu,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(Nj,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(qj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(jj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Dj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Gj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Oj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Vj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Xj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(zj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Wj,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Qj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(Uj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(Hj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Jj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Yj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Kj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Zj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(eD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(oD,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(rD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(tD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(aD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(nD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(sD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(lD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(iD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(mD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(fD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uD,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(pD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(_D,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TD,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hu,"id","transformers.AutoProcessor"),c(Hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hu,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(MD,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ED,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(CD,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(wD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(AD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(LD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(xD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c($D,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(kD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(PD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(BD,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(ID,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ND,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(jD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(DD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"id","transformers.AutoModel"),c(vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vp,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(VD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(QD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(UD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(HD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(JD,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(YD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(KD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(eG,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(oG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(rG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(tG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(aG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(nG,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(sG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(lG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(iG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(dG,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(cG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(mG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(fG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(gG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(hG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(uG,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(pG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(_G,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(bG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(vG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(FG,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(TG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(MG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(EG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(CG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(wG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(AG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(LG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(yG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(xG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c($G,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(kG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(SG,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(RG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(PG,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(BG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(IG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(NG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(jG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(DG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(GG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(OG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(VG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(XG,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(zG,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(WG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(QG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(UG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(HG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(JG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(YG,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(KG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(ZG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(eO,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(oO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(rO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(tO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(aO,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(nO,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(sO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(lO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(iO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(dO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(cO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(mO,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(fO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(gO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(hO,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(uO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(pO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(_O,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(bO,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(vO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(FO,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(TO,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(MO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(EO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(CO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(wO,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(AO,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(LO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(yO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(xO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c($O,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(kO,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(SO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(RO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(PO,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(BO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(IO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(NO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qO,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(jO,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(DO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(GO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(OO,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(VO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(XO,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(zO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(WO,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(QO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(UO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(HO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(JO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(YO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(KO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(ZO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(eV,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(oV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForPreTraining"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(rV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(sV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(iV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(dV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(cV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(fV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(gV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(pV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(_V,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(vV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(FV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(TV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(MV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(LV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(yV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(xV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c($V,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(SV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(RV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(PV,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(BV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(IV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(NV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(jV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(DV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(GV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(OV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(VV,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(XV,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(zV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(WV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(QV,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(UV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(HV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(JV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(YV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yb,"id","transformers.AutoModelForCausalLM"),c(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yb,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(KV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(rX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(tX,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(aX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(nX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(sX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(lX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(iX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(dX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(cX,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(mX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(fX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(gX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(hX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(pX,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(_X,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(bX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(vX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(FX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(TX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(MX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(EX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(CX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(wX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(AX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(LX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(yX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(xX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c($X,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(kX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(SX,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(RX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(PX,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(BX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(IX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(qX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(jX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(DX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bv,"id","transformers.AutoModelForMaskedLM"),c(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bv,"href","#transformers.AutoModelForMaskedLM"),c(md,"class","relative group"),c(GX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(zX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(QX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(UX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(HX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(JX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(YX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(KX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ZX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ez,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(oz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(rz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(tz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(az,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(iz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(cz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(mz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(fz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(gz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(hz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(uz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(pz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(_z,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(bz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(vz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Fz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Tz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Mz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Ez,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(wz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Az,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s1,"id","transformers.AutoModelForSeq2SeqLM"),c(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s1,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(Lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(kz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Sz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Rz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Pz,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Iz,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Nz,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(qz,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(jz,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Gz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Oz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Vz,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Xz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(zz,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(Wz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Qz,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Uz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Hz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSequenceClassification"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSequenceClassification"),c(_d,"class","relative group"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(nW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(sW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(lW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(iW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(dW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(FW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(JW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForMultipleChoice"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(oQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(rQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(tQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(aQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(nQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(sQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(lQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(iQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(dQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(cQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(mQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(fQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(gQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(hQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(pQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(_Q,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(bQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(vQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(FQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(TQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(MQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(EQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(CQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(wQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(AQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(LQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(yQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(xQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c($Q,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForNextSentencePrediction"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(kQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(BQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(IQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(NQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(qQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(jQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForTokenClassification"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(DQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(XQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(zQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(WQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(MU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(EU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(CU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.AutoModelForQuestionAnswering"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(AU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($U,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(SU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(RU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(PU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(BU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(IU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(NU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(DU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(GU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(OU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(VU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(XU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(WU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(QU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(UU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(HU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(JU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(YU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(KU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(ZU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(eH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(oH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(rH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(tH,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(aH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(nH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(sH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(lH,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(iH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(dH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(cH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(mH,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(fH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(gH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(hH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(uH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(pH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(_H,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.AutoModelForTableQuestionAnswering"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.AutoModelForImageClassification"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c($H,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(kH,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(PH,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(IH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(NH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(qH,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.AutoModelForVideoClassification"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.AutoModelForVision2Seq"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.AutoModelForVisualQuestionAnswering"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(eJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.AutoModelForAudioClassification"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.AutoModelForAudioFrameClassification"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(pJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(FJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(TJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(MJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(EJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.AutoModelForCTC"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(CJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(yJ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(xJ,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c($J,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(kJ,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(SJ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(RJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(PJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(BJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(IJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(NJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(GJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.AutoModelForAudioXVector"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(WJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(QJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(UJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(HJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.AutoModelForMaskedImageModeling"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(eY,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(oY,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(rY,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.AutoModelForObjectDetection"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.AutoModelForObjectDetection"),c(mc,"class","relative group"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(lY,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K4,"id","transformers.AutoModelForImageSegmentation"),c(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K4,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.AutoModelForSemanticSegmentation"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.AutoModelForSemanticSegmentation"),c(_c,"class","relative group"),c(fY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(pY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(_Y,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(bY,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(vY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.AutoModelForInstanceSegmentation"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(FY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.TFAutoModel"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(CY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(yY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(xY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c($Y,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(kY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(SY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(RY,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(PY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(BY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(IY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(NY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(qY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(jY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(DY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(GY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(OY,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(VY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(XY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(zY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(WY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(QY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(UY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(HY,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(JY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(YY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(KY,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(ZY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(eK,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(oK,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(rK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(tK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(aK,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(nK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(sK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(lK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(iK,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(dK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(cK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(mK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(fK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(gK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(hK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(uK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(pK,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(_K,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(bK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(vK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(FK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(TK,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(MK,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(EK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(CK,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(wK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(AK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(LK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.TFAutoModelForPreTraining"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(SK,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(RK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(PK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(BK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(qK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(jK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(DK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(GK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(OK,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(VK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(XK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(zK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(QK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(UK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(HK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JK,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(YK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(ZK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.TFAutoModelForCausalLM"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(aZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(nZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(sZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(lZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(iZ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(cZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(mZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(fZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(gZ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(uZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.TFAutoModelForImageClassification"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(_Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(TZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(MZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(EZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(CZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(wZ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(AZ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(LZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(yZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(xZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.TFAutoModelForSemanticSegmentation"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c($Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(PZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(BZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.TFAutoModelForMaskedLM"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.TFAutoModelForMaskedLM"),c(jc,"class","relative group"),c(IZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(DZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(GZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(OZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(VZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(XZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(zZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(WZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(QZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(UZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(HZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(JZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(YZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(KZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ZZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(eee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(oee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(ree,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(tee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.TFAutoModelForSeq2SeqLM"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(see,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iee,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(cee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(mee,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(fee,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(gee,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(hee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(uee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(pee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(_ee,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.TFAutoModelForSequenceClassification"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.TFAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Mee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Eee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Cee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(wee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Aee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Lee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(yee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(xee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c($ee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(kee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(See,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Ree,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(Pee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Bee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(Iee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Nee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(qee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(jee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Dee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Gee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Oee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Vee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Xee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(zee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Wee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Qee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.TFAutoModelForMultipleChoice"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.TFAutoModelForMultipleChoice"),c(Uc,"class","relative group"),c(Uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Kee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Zee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(eoe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(ooe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(roe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(toe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(aoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(noe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(soe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(loe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(ioe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(doe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(coe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(moe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(foe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(goe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.TFAutoModelForNextSentencePrediction"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Yc,"class","relative group"),c(hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_oe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(boe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(em,"class","relative group"),c(voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.TFAutoModelForTokenClassification"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.TFAutoModelForTokenClassification"),c(tm,"class","relative group"),c(Eoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(woe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Loe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(yoe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(xoe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c($oe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(koe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Soe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Roe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Poe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Boe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Ioe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Noe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(qoe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(joe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Doe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Goe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Ooe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Voe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Xoe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(zoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Woe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.TFAutoModelForQuestionAnswering"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.TFAutoModelForQuestionAnswering"),c(sm,"class","relative group"),c(Qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Joe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Yoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Koe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Zoe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(ere,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(ore,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(rre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(tre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(are,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(nre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(sre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(lre,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(ire,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(dre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(cre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(mre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(fre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(gre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(hre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ure,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(pre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.TFAutoModelForVision2Seq"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.TFAutoModelForVision2Seq"),c(dm,"class","relative group"),c(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fre,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c6,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(fm,"class","relative group"),c(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h6,"id","transformers.FlaxAutoModel"),c(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h6,"href","#transformers.FlaxAutoModel"),c(um,"class","relative group"),c(wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(xre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c($re,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(kre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(Sre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Rre,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Pre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Bre,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Ire,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Nre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(qre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(jre,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Dre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Gre,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Ore,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Vre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Xre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(zre,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(Wre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Qre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Ure,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Hre,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(Jre,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Yre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Kre,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Zre,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(ete,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X6,"id","transformers.FlaxAutoModelForCausalLM"),c(X6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X6,"href","#transformers.FlaxAutoModelForCausalLM"),c(bm,"class","relative group"),c(ote,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ate,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(nte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(ste,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(lte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(ite,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(dte,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(cte,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(mte,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(fte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(gte,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tA,"id","transformers.FlaxAutoModelForPreTraining"),c(tA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tA,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tm,"class","relative group"),c(hte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ute,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_te,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(bte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Fte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Tte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Mte,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Ete,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Cte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Ate,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Lte,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(yte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(xte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vA,"id","transformers.FlaxAutoModelForMaskedLM"),c(vA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cm,"class","relative group"),c($te,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Pte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Bte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Ite,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Nte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(qte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(jte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Dte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Gte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ote,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(SA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lm,"class","relative group"),c(Vte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Qte,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Ute,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Hte,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Jte,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Yte,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Kte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Zte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(eae,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(oae,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(zA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($m,"class","relative group"),c(rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(sae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(lae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(iae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(dae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(cae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(mae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(fae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(gae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(hae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rm,"class","relative group"),c(uae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(vae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Fae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Tae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Mae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Eae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Cae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(wae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Aae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Lae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_7,"id","transformers.FlaxAutoModelForTokenClassification"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Im,"class","relative group"),c(yae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($ae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Sae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Rae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Pae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Bae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Iae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Nae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(qae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y7,"id","transformers.FlaxAutoModelForMultipleChoice"),c(y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y7,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jm,"class","relative group"),c(jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Vae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Xae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(zae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Wae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Qae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Uae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Hae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j7,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Om,"class","relative group"),c(Jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V7,"id","transformers.FlaxAutoModelForImageClassification"),c(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V7,"href","#transformers.FlaxAutoModelForImageClassification"),c(zm,"class","relative group"),c(ene,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(one,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tne,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(ane,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U7,"id","transformers.FlaxAutoModelForVision2Seq"),c(U7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U7,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Um,"class","relative group"),c(nne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ine,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Ao),e(Ao,Oi),b(m,ef,_),b(m,mt,_),e(mt,Vi),e(mt,Xi),e(Xi,M8),e(mt,of),b(m,Ve,_),b(m,Ue,_),e(Ue,zi),e(Ue,Xn),e(Xn,E8),e(Ue,zn),e(Ue,Wn),e(Wn,C8),e(Ue,Wi),e(Ue,Qn),e(Qn,w8),e(Ue,Qi),b(m,rf,_),M(ja,m,_),b(m,He,_),b(m,Ae,_),e(Ae,uP),e(Ae,Ui),e(Ui,pP),e(Ae,_P),b(m,Lo,_),b(m,Da,_),e(Da,bP),e(Da,tf),e(tf,vP),e(Da,aZe),b(m,BUe,_),b(m,Hi,_),e(Hi,af),e(af,lle),M(A8,lle,null),e(Hi,nZe),e(Hi,ile),e(ile,sZe),b(m,IUe,_),b(m,Un,_),e(Un,lZe),e(Un,dle),e(dle,iZe),e(Un,dZe),e(Un,cle),e(cle,cZe),e(Un,mZe),b(m,NUe,_),M(L8,m,_),b(m,qUe,_),b(m,FP,_),e(FP,fZe),b(m,jUe,_),M(nf,m,_),b(m,DUe,_),b(m,Ji,_),e(Ji,sf),e(sf,mle),M(y8,mle,null),e(Ji,gZe),e(Ji,fle),e(fle,hZe),b(m,GUe,_),b(m,yo,_),M(x8,yo,null),e(yo,uZe),e(yo,$8),e($8,pZe),e($8,TP),e(TP,_Ze),e($8,bZe),e(yo,vZe),e(yo,k8),e(k8,FZe),e(k8,gle),e(gle,TZe),e(k8,MZe),e(yo,EZe),e(yo,kr),M(S8,kr,null),e(kr,CZe),e(kr,hle),e(hle,wZe),e(kr,AZe),e(kr,Yi),e(Yi,LZe),e(Yi,ule),e(ule,yZe),e(Yi,xZe),e(Yi,ple),e(ple,$Ze),e(Yi,kZe),e(kr,SZe),e(kr,A),e(A,lf),e(lf,_le),e(_le,RZe),e(lf,PZe),e(lf,MP),e(MP,BZe),e(lf,IZe),e(A,NZe),e(A,df),e(df,ble),e(ble,qZe),e(df,jZe),e(df,EP),e(EP,DZe),e(df,GZe),e(A,OZe),e(A,cf),e(cf,vle),e(vle,VZe),e(cf,XZe),e(cf,CP),e(CP,zZe),e(cf,WZe),e(A,QZe),e(A,mf),e(mf,Fle),e(Fle,UZe),e(mf,HZe),e(mf,wP),e(wP,JZe),e(mf,YZe),e(A,KZe),e(A,ff),e(ff,Tle),e(Tle,ZZe),e(ff,eeo),e(ff,AP),e(AP,oeo),e(ff,reo),e(A,teo),e(A,gf),e(gf,Mle),e(Mle,aeo),e(gf,neo),e(gf,LP),e(LP,seo),e(gf,leo),e(A,ieo),e(A,hf),e(hf,Ele),e(Ele,deo),e(hf,ceo),e(hf,yP),e(yP,meo),e(hf,feo),e(A,geo),e(A,uf),e(uf,Cle),e(Cle,heo),e(uf,ueo),e(uf,xP),e(xP,peo),e(uf,_eo),e(A,beo),e(A,pf),e(pf,wle),e(wle,veo),e(pf,Feo),e(pf,$P),e($P,Teo),e(pf,Meo),e(A,Eeo),e(A,_f),e(_f,Ale),e(Ale,Ceo),e(_f,weo),e(_f,kP),e(kP,Aeo),e(_f,Leo),e(A,yeo),e(A,bf),e(bf,Lle),e(Lle,xeo),e(bf,$eo),e(bf,SP),e(SP,keo),e(bf,Seo),e(A,Reo),e(A,vf),e(vf,yle),e(yle,Peo),e(vf,Beo),e(vf,RP),e(RP,Ieo),e(vf,Neo),e(A,qeo),e(A,Ff),e(Ff,xle),e(xle,jeo),e(Ff,Deo),e(Ff,PP),e(PP,Geo),e(Ff,Oeo),e(A,Veo),e(A,Tf),e(Tf,$le),e($le,Xeo),e(Tf,zeo),e(Tf,BP),e(BP,Weo),e(Tf,Qeo),e(A,Ueo),e(A,Mf),e(Mf,kle),e(kle,Heo),e(Mf,Jeo),e(Mf,IP),e(IP,Yeo),e(Mf,Keo),e(A,Zeo),e(A,Ef),e(Ef,Sle),e(Sle,eoo),e(Ef,ooo),e(Ef,NP),e(NP,roo),e(Ef,too),e(A,aoo),e(A,Cf),e(Cf,Rle),e(Rle,noo),e(Cf,soo),e(Cf,qP),e(qP,loo),e(Cf,ioo),e(A,doo),e(A,wf),e(wf,Ple),e(Ple,coo),e(wf,moo),e(wf,jP),e(jP,foo),e(wf,goo),e(A,hoo),e(A,Af),e(Af,Ble),e(Ble,uoo),e(Af,poo),e(Af,DP),e(DP,_oo),e(Af,boo),e(A,voo),e(A,Lf),e(Lf,Ile),e(Ile,Foo),e(Lf,Too),e(Lf,GP),e(GP,Moo),e(Lf,Eoo),e(A,Coo),e(A,yf),e(yf,Nle),e(Nle,woo),e(yf,Aoo),e(yf,OP),e(OP,Loo),e(yf,yoo),e(A,xoo),e(A,xf),e(xf,qle),e(qle,$oo),e(xf,koo),e(xf,VP),e(VP,Soo),e(xf,Roo),e(A,Poo),e(A,$f),e($f,jle),e(jle,Boo),e($f,Ioo),e($f,XP),e(XP,Noo),e($f,qoo),e(A,joo),e(A,kf),e(kf,Dle),e(Dle,Doo),e(kf,Goo),e(kf,zP),e(zP,Ooo),e(kf,Voo),e(A,Xoo),e(A,Sf),e(Sf,Gle),e(Gle,zoo),e(Sf,Woo),e(Sf,WP),e(WP,Qoo),e(Sf,Uoo),e(A,Hoo),e(A,Rf),e(Rf,Ole),e(Ole,Joo),e(Rf,Yoo),e(Rf,QP),e(QP,Koo),e(Rf,Zoo),e(A,ero),e(A,Pf),e(Pf,Vle),e(Vle,oro),e(Pf,rro),e(Pf,UP),e(UP,tro),e(Pf,aro),e(A,nro),e(A,Bf),e(Bf,Xle),e(Xle,sro),e(Bf,lro),e(Bf,HP),e(HP,iro),e(Bf,dro),e(A,cro),e(A,If),e(If,zle),e(zle,mro),e(If,fro),e(If,JP),e(JP,gro),e(If,hro),e(A,uro),e(A,Nf),e(Nf,Wle),e(Wle,pro),e(Nf,_ro),e(Nf,YP),e(YP,bro),e(Nf,vro),e(A,Fro),e(A,qf),e(qf,Qle),e(Qle,Tro),e(qf,Mro),e(qf,KP),e(KP,Ero),e(qf,Cro),e(A,wro),e(A,jf),e(jf,Ule),e(Ule,Aro),e(jf,Lro),e(jf,ZP),e(ZP,yro),e(jf,xro),e(A,$ro),e(A,Df),e(Df,Hle),e(Hle,kro),e(Df,Sro),e(Df,eB),e(eB,Rro),e(Df,Pro),e(A,Bro),e(A,Gf),e(Gf,Jle),e(Jle,Iro),e(Gf,Nro),e(Gf,oB),e(oB,qro),e(Gf,jro),e(A,Dro),e(A,Of),e(Of,Yle),e(Yle,Gro),e(Of,Oro),e(Of,rB),e(rB,Vro),e(Of,Xro),e(A,zro),e(A,Vf),e(Vf,Kle),e(Kle,Wro),e(Vf,Qro),e(Vf,tB),e(tB,Uro),e(Vf,Hro),e(A,Jro),e(A,Xf),e(Xf,Zle),e(Zle,Yro),e(Xf,Kro),e(Xf,aB),e(aB,Zro),e(Xf,eto),e(A,oto),e(A,zf),e(zf,eie),e(eie,rto),e(zf,tto),e(zf,nB),e(nB,ato),e(zf,nto),e(A,sto),e(A,Wf),e(Wf,oie),e(oie,lto),e(Wf,ito),e(Wf,sB),e(sB,dto),e(Wf,cto),e(A,mto),e(A,Qf),e(Qf,rie),e(rie,fto),e(Qf,gto),e(Qf,lB),e(lB,hto),e(Qf,uto),e(A,pto),e(A,Uf),e(Uf,tie),e(tie,_to),e(Uf,bto),e(Uf,iB),e(iB,vto),e(Uf,Fto),e(A,Tto),e(A,Hf),e(Hf,aie),e(aie,Mto),e(Hf,Eto),e(Hf,dB),e(dB,Cto),e(Hf,wto),e(A,Ato),e(A,Jf),e(Jf,nie),e(nie,Lto),e(Jf,yto),e(Jf,cB),e(cB,xto),e(Jf,$to),e(A,kto),e(A,Yf),e(Yf,sie),e(sie,Sto),e(Yf,Rto),e(Yf,mB),e(mB,Pto),e(Yf,Bto),e(A,Ito),e(A,Kf),e(Kf,lie),e(lie,Nto),e(Kf,qto),e(Kf,fB),e(fB,jto),e(Kf,Dto),e(A,Gto),e(A,Zf),e(Zf,iie),e(iie,Oto),e(Zf,Vto),e(Zf,gB),e(gB,Xto),e(Zf,zto),e(A,Wto),e(A,eg),e(eg,die),e(die,Qto),e(eg,Uto),e(eg,hB),e(hB,Hto),e(eg,Jto),e(A,Yto),e(A,og),e(og,cie),e(cie,Kto),e(og,Zto),e(og,uB),e(uB,eao),e(og,oao),e(A,rao),e(A,rg),e(rg,mie),e(mie,tao),e(rg,aao),e(rg,pB),e(pB,nao),e(rg,sao),e(A,lao),e(A,tg),e(tg,fie),e(fie,iao),e(tg,dao),e(tg,_B),e(_B,cao),e(tg,mao),e(A,fao),e(A,ag),e(ag,gie),e(gie,gao),e(ag,hao),e(ag,bB),e(bB,uao),e(ag,pao),e(A,_ao),e(A,ng),e(ng,hie),e(hie,bao),e(ng,vao),e(ng,vB),e(vB,Fao),e(ng,Tao),e(A,Mao),e(A,sg),e(sg,uie),e(uie,Eao),e(sg,Cao),e(sg,FB),e(FB,wao),e(sg,Aao),e(A,Lao),e(A,lg),e(lg,pie),e(pie,yao),e(lg,xao),e(lg,TB),e(TB,$ao),e(lg,kao),e(A,Sao),e(A,ig),e(ig,_ie),e(_ie,Rao),e(ig,Pao),e(ig,MB),e(MB,Bao),e(ig,Iao),e(A,Nao),e(A,dg),e(dg,bie),e(bie,qao),e(dg,jao),e(dg,EB),e(EB,Dao),e(dg,Gao),e(A,Oao),e(A,cg),e(cg,vie),e(vie,Vao),e(cg,Xao),e(cg,CB),e(CB,zao),e(cg,Wao),e(A,Qao),e(A,mg),e(mg,Fie),e(Fie,Uao),e(mg,Hao),e(mg,wB),e(wB,Jao),e(mg,Yao),e(A,Kao),e(A,fg),e(fg,Tie),e(Tie,Zao),e(fg,eno),e(fg,AB),e(AB,ono),e(fg,rno),e(A,tno),e(A,gg),e(gg,Mie),e(Mie,ano),e(gg,nno),e(gg,LB),e(LB,sno),e(gg,lno),e(A,ino),e(A,hg),e(hg,Eie),e(Eie,dno),e(hg,cno),e(hg,yB),e(yB,mno),e(hg,fno),e(A,gno),e(A,ug),e(ug,Cie),e(Cie,hno),e(ug,uno),e(ug,xB),e(xB,pno),e(ug,_no),e(A,bno),e(A,pg),e(pg,wie),e(wie,vno),e(pg,Fno),e(pg,$B),e($B,Tno),e(pg,Mno),e(A,Eno),e(A,_g),e(_g,Aie),e(Aie,Cno),e(_g,wno),e(_g,kB),e(kB,Ano),e(_g,Lno),e(A,yno),e(A,bg),e(bg,Lie),e(Lie,xno),e(bg,$no),e(bg,SB),e(SB,kno),e(bg,Sno),e(A,Rno),e(A,vg),e(vg,yie),e(yie,Pno),e(vg,Bno),e(vg,RB),e(RB,Ino),e(vg,Nno),e(A,qno),e(A,Fg),e(Fg,xie),e(xie,jno),e(Fg,Dno),e(Fg,PB),e(PB,Gno),e(Fg,Ono),e(A,Vno),e(A,Tg),e(Tg,$ie),e($ie,Xno),e(Tg,zno),e(Tg,BB),e(BB,Wno),e(Tg,Qno),e(A,Uno),e(A,Mg),e(Mg,kie),e(kie,Hno),e(Mg,Jno),e(Mg,IB),e(IB,Yno),e(Mg,Kno),e(A,Zno),e(A,Eg),e(Eg,Sie),e(Sie,eso),e(Eg,oso),e(Eg,NB),e(NB,rso),e(Eg,tso),e(A,aso),e(A,Cg),e(Cg,Rie),e(Rie,nso),e(Cg,sso),e(Cg,qB),e(qB,lso),e(Cg,iso),e(A,dso),e(A,wg),e(wg,Pie),e(Pie,cso),e(wg,mso),e(wg,jB),e(jB,fso),e(wg,gso),e(A,hso),e(A,Ag),e(Ag,Bie),e(Bie,uso),e(Ag,pso),e(Ag,DB),e(DB,_so),e(Ag,bso),e(A,vso),e(A,Lg),e(Lg,Iie),e(Iie,Fso),e(Lg,Tso),e(Lg,GB),e(GB,Mso),e(Lg,Eso),e(A,Cso),e(A,yg),e(yg,Nie),e(Nie,wso),e(yg,Aso),e(yg,OB),e(OB,Lso),e(yg,yso),e(A,xso),e(A,xg),e(xg,qie),e(qie,$so),e(xg,kso),e(xg,VB),e(VB,Sso),e(xg,Rso),e(A,Pso),e(A,$g),e($g,jie),e(jie,Bso),e($g,Iso),e($g,XB),e(XB,Nso),e($g,qso),e(A,jso),e(A,kg),e(kg,Die),e(Die,Dso),e(kg,Gso),e(kg,zB),e(zB,Oso),e(kg,Vso),e(A,Xso),e(A,Sg),e(Sg,Gie),e(Gie,zso),e(Sg,Wso),e(Sg,WB),e(WB,Qso),e(Sg,Uso),e(A,Hso),e(A,Rg),e(Rg,Oie),e(Oie,Jso),e(Rg,Yso),e(Rg,QB),e(QB,Kso),e(Rg,Zso),e(A,elo),e(A,Pg),e(Pg,Vie),e(Vie,olo),e(Pg,rlo),e(Pg,UB),e(UB,tlo),e(Pg,alo),e(A,nlo),e(A,Bg),e(Bg,Xie),e(Xie,slo),e(Bg,llo),e(Bg,HB),e(HB,ilo),e(Bg,dlo),e(A,clo),e(A,Ig),e(Ig,zie),e(zie,mlo),e(Ig,flo),e(Ig,JB),e(JB,glo),e(Ig,hlo),e(A,ulo),e(A,Ng),e(Ng,Wie),e(Wie,plo),e(Ng,_lo),e(Ng,YB),e(YB,blo),e(Ng,vlo),e(A,Flo),e(A,qg),e(qg,Qie),e(Qie,Tlo),e(qg,Mlo),e(qg,KB),e(KB,Elo),e(qg,Clo),e(A,wlo),e(A,jg),e(jg,Uie),e(Uie,Alo),e(jg,Llo),e(jg,ZB),e(ZB,ylo),e(jg,xlo),e(A,$lo),e(A,Dg),e(Dg,Hie),e(Hie,klo),e(Dg,Slo),e(Dg,eI),e(eI,Rlo),e(Dg,Plo),e(A,Blo),e(A,Gg),e(Gg,Jie),e(Jie,Ilo),e(Gg,Nlo),e(Gg,oI),e(oI,qlo),e(Gg,jlo),e(A,Dlo),e(A,Og),e(Og,Yie),e(Yie,Glo),e(Og,Olo),e(Og,rI),e(rI,Vlo),e(Og,Xlo),e(A,zlo),e(A,Vg),e(Vg,Kie),e(Kie,Wlo),e(Vg,Qlo),e(Vg,tI),e(tI,Ulo),e(Vg,Hlo),e(A,Jlo),e(A,Xg),e(Xg,Zie),e(Zie,Ylo),e(Xg,Klo),e(Xg,aI),e(aI,Zlo),e(Xg,eio),e(A,oio),e(A,zg),e(zg,ede),e(ede,rio),e(zg,tio),e(zg,nI),e(nI,aio),e(zg,nio),e(A,sio),e(A,Wg),e(Wg,ode),e(ode,lio),e(Wg,iio),e(Wg,sI),e(sI,dio),e(Wg,cio),e(A,mio),e(A,Qg),e(Qg,rde),e(rde,fio),e(Qg,gio),e(Qg,lI),e(lI,hio),e(Qg,uio),e(A,pio),e(A,Ug),e(Ug,tde),e(tde,_io),e(Ug,bio),e(Ug,iI),e(iI,vio),e(Ug,Fio),e(A,Tio),e(A,Hg),e(Hg,ade),e(ade,Mio),e(Hg,Eio),e(Hg,dI),e(dI,Cio),e(Hg,wio),e(A,Aio),e(A,Jg),e(Jg,nde),e(nde,Lio),e(Jg,yio),e(Jg,cI),e(cI,xio),e(Jg,$io),e(A,kio),e(A,Yg),e(Yg,sde),e(sde,Sio),e(Yg,Rio),e(Yg,mI),e(mI,Pio),e(Yg,Bio),e(A,Iio),e(A,Kg),e(Kg,lde),e(lde,Nio),e(Kg,qio),e(Kg,fI),e(fI,jio),e(Kg,Dio),e(A,Gio),e(A,Zg),e(Zg,ide),e(ide,Oio),e(Zg,Vio),e(Zg,gI),e(gI,Xio),e(Zg,zio),e(A,Wio),e(A,eh),e(eh,dde),e(dde,Qio),e(eh,Uio),e(eh,hI),e(hI,Hio),e(eh,Jio),e(A,Yio),e(A,oh),e(oh,cde),e(cde,Kio),e(oh,Zio),e(oh,uI),e(uI,edo),e(oh,odo),e(A,rdo),e(A,rh),e(rh,mde),e(mde,tdo),e(rh,ado),e(rh,pI),e(pI,ndo),e(rh,sdo),e(A,ldo),e(A,th),e(th,fde),e(fde,ido),e(th,ddo),e(th,_I),e(_I,cdo),e(th,mdo),e(A,fdo),e(A,ah),e(ah,gde),e(gde,gdo),e(ah,hdo),e(ah,bI),e(bI,udo),e(ah,pdo),e(A,_do),e(A,nh),e(nh,hde),e(hde,bdo),e(nh,vdo),e(nh,vI),e(vI,Fdo),e(nh,Tdo),e(A,Mdo),e(A,sh),e(sh,ude),e(ude,Edo),e(sh,Cdo),e(sh,FI),e(FI,wdo),e(sh,Ado),e(A,Ldo),e(A,lh),e(lh,pde),e(pde,ydo),e(lh,xdo),e(lh,TI),e(TI,$do),e(lh,kdo),e(A,Sdo),e(A,ih),e(ih,_de),e(_de,Rdo),e(ih,Pdo),e(ih,MI),e(MI,Bdo),e(ih,Ido),e(A,Ndo),e(A,dh),e(dh,bde),e(bde,qdo),e(dh,jdo),e(dh,EI),e(EI,Ddo),e(dh,Gdo),e(A,Odo),e(A,ch),e(ch,vde),e(vde,Vdo),e(ch,Xdo),e(ch,CI),e(CI,zdo),e(ch,Wdo),e(A,Qdo),e(A,mh),e(mh,Fde),e(Fde,Udo),e(mh,Hdo),e(mh,wI),e(wI,Jdo),e(mh,Ydo),e(A,Kdo),e(A,fh),e(fh,Tde),e(Tde,Zdo),e(fh,eco),e(fh,AI),e(AI,oco),e(fh,rco),e(A,tco),e(A,gh),e(gh,Mde),e(Mde,aco),e(gh,nco),e(gh,LI),e(LI,sco),e(gh,lco),e(A,ico),e(A,hh),e(hh,Ede),e(Ede,dco),e(hh,cco),e(hh,yI),e(yI,mco),e(hh,fco),e(A,gco),e(A,uh),e(uh,Cde),e(Cde,hco),e(uh,uco),e(uh,xI),e(xI,pco),e(uh,_co),e(A,bco),e(A,ph),e(ph,wde),e(wde,vco),e(ph,Fco),e(ph,$I),e($I,Tco),e(ph,Mco),e(A,Eco),e(A,_h),e(_h,Ade),e(Ade,Cco),e(_h,wco),e(_h,kI),e(kI,Aco),e(_h,Lco),e(A,yco),e(A,bh),e(bh,Lde),e(Lde,xco),e(bh,$co),e(bh,SI),e(SI,kco),e(bh,Sco),e(A,Rco),e(A,vh),e(vh,yde),e(yde,Pco),e(vh,Bco),e(vh,RI),e(RI,Ico),e(vh,Nco),e(A,qco),e(A,Fh),e(Fh,xde),e(xde,jco),e(Fh,Dco),e(Fh,PI),e(PI,Gco),e(Fh,Oco),e(A,Vco),e(A,Th),e(Th,$de),e($de,Xco),e(Th,zco),e(Th,BI),e(BI,Wco),e(Th,Qco),e(A,Uco),e(A,Mh),e(Mh,kde),e(kde,Hco),e(Mh,Jco),e(Mh,II),e(II,Yco),e(Mh,Kco),e(kr,Zco),M(Eh,kr,null),e(yo,emo),e(yo,Ch),M(R8,Ch,null),e(Ch,omo),e(Ch,Sde),e(Sde,rmo),b(m,OUe,_),b(m,Ki,_),e(Ki,wh),e(wh,Rde),M(P8,Rde,null),e(Ki,tmo),e(Ki,Pde),e(Pde,amo),b(m,VUe,_),b(m,xo,_),M(B8,xo,null),e(xo,nmo),e(xo,I8),e(I8,smo),e(I8,NI),e(NI,lmo),e(I8,imo),e(xo,dmo),e(xo,N8),e(N8,cmo),e(N8,Bde),e(Bde,mmo),e(N8,fmo),e(xo,gmo),e(xo,Sr),M(q8,Sr,null),e(Sr,hmo),e(Sr,Ide),e(Ide,umo),e(Sr,pmo),e(Sr,Ga),e(Ga,_mo),e(Ga,Nde),e(Nde,bmo),e(Ga,vmo),e(Ga,qde),e(qde,Fmo),e(Ga,Tmo),e(Ga,jde),e(jde,Mmo),e(Ga,Emo),e(Sr,Cmo),e(Sr,k),e(k,Hn),e(Hn,Dde),e(Dde,wmo),e(Hn,Amo),e(Hn,qI),e(qI,Lmo),e(Hn,ymo),e(Hn,jI),e(jI,xmo),e(Hn,$mo),e(k,kmo),e(k,Jn),e(Jn,Gde),e(Gde,Smo),e(Jn,Rmo),e(Jn,DI),e(DI,Pmo),e(Jn,Bmo),e(Jn,GI),e(GI,Imo),e(Jn,Nmo),e(k,qmo),e(k,Yn),e(Yn,Ode),e(Ode,jmo),e(Yn,Dmo),e(Yn,OI),e(OI,Gmo),e(Yn,Omo),e(Yn,VI),e(VI,Vmo),e(Yn,Xmo),e(k,zmo),e(k,Ah),e(Ah,Vde),e(Vde,Wmo),e(Ah,Qmo),e(Ah,XI),e(XI,Umo),e(Ah,Hmo),e(k,Jmo),e(k,Kn),e(Kn,Xde),e(Xde,Ymo),e(Kn,Kmo),e(Kn,zI),e(zI,Zmo),e(Kn,efo),e(Kn,WI),e(WI,ofo),e(Kn,rfo),e(k,tfo),e(k,Lh),e(Lh,zde),e(zde,afo),e(Lh,nfo),e(Lh,QI),e(QI,sfo),e(Lh,lfo),e(k,ifo),e(k,yh),e(yh,Wde),e(Wde,dfo),e(yh,cfo),e(yh,UI),e(UI,mfo),e(yh,ffo),e(k,gfo),e(k,xh),e(xh,Qde),e(Qde,hfo),e(xh,ufo),e(xh,HI),e(HI,pfo),e(xh,_fo),e(k,bfo),e(k,Zn),e(Zn,Ude),e(Ude,vfo),e(Zn,Ffo),e(Zn,JI),e(JI,Tfo),e(Zn,Mfo),e(Zn,YI),e(YI,Efo),e(Zn,Cfo),e(k,wfo),e(k,es),e(es,Hde),e(Hde,Afo),e(es,Lfo),e(es,KI),e(KI,yfo),e(es,xfo),e(es,ZI),e(ZI,$fo),e(es,kfo),e(k,Sfo),e(k,os),e(os,Jde),e(Jde,Rfo),e(os,Pfo),e(os,eN),e(eN,Bfo),e(os,Ifo),e(os,oN),e(oN,Nfo),e(os,qfo),e(k,jfo),e(k,$h),e($h,Yde),e(Yde,Dfo),e($h,Gfo),e($h,rN),e(rN,Ofo),e($h,Vfo),e(k,Xfo),e(k,kh),e(kh,Kde),e(Kde,zfo),e(kh,Wfo),e(kh,tN),e(tN,Qfo),e(kh,Ufo),e(k,Hfo),e(k,Sh),e(Sh,Zde),e(Zde,Jfo),e(Sh,Yfo),e(Sh,aN),e(aN,Kfo),e(Sh,Zfo),e(k,ego),e(k,rs),e(rs,ece),e(ece,ogo),e(rs,rgo),e(rs,nN),e(nN,tgo),e(rs,ago),e(rs,sN),e(sN,ngo),e(rs,sgo),e(k,lgo),e(k,Rh),e(Rh,oce),e(oce,igo),e(Rh,dgo),e(Rh,lN),e(lN,cgo),e(Rh,mgo),e(k,fgo),e(k,ts),e(ts,rce),e(rce,ggo),e(ts,hgo),e(ts,iN),e(iN,ugo),e(ts,pgo),e(ts,dN),e(dN,_go),e(ts,bgo),e(k,vgo),e(k,as),e(as,tce),e(tce,Fgo),e(as,Tgo),e(as,cN),e(cN,Mgo),e(as,Ego),e(as,mN),e(mN,Cgo),e(as,wgo),e(k,Ago),e(k,ns),e(ns,ace),e(ace,Lgo),e(ns,ygo),e(ns,fN),e(fN,xgo),e(ns,$go),e(ns,gN),e(gN,kgo),e(ns,Sgo),e(k,Rgo),e(k,ss),e(ss,nce),e(nce,Pgo),e(ss,Bgo),e(ss,hN),e(hN,Igo),e(ss,Ngo),e(ss,uN),e(uN,qgo),e(ss,jgo),e(k,Dgo),e(k,Ph),e(Ph,sce),e(sce,Ggo),e(Ph,Ogo),e(Ph,pN),e(pN,Vgo),e(Ph,Xgo),e(k,zgo),e(k,ls),e(ls,lce),e(lce,Wgo),e(ls,Qgo),e(ls,_N),e(_N,Ugo),e(ls,Hgo),e(ls,bN),e(bN,Jgo),e(ls,Ygo),e(k,Kgo),e(k,is),e(is,ice),e(ice,Zgo),e(is,eho),e(is,vN),e(vN,oho),e(is,rho),e(is,FN),e(FN,tho),e(is,aho),e(k,nho),e(k,ds),e(ds,dce),e(dce,sho),e(ds,lho),e(ds,TN),e(TN,iho),e(ds,dho),e(ds,MN),e(MN,cho),e(ds,mho),e(k,fho),e(k,cs),e(cs,cce),e(cce,gho),e(cs,hho),e(cs,EN),e(EN,uho),e(cs,pho),e(cs,CN),e(CN,_ho),e(cs,bho),e(k,vho),e(k,ms),e(ms,mce),e(mce,Fho),e(ms,Tho),e(ms,wN),e(wN,Mho),e(ms,Eho),e(ms,AN),e(AN,Cho),e(ms,who),e(k,Aho),e(k,fs),e(fs,fce),e(fce,Lho),e(fs,yho),e(fs,LN),e(LN,xho),e(fs,$ho),e(fs,yN),e(yN,kho),e(fs,Sho),e(k,Rho),e(k,Bh),e(Bh,gce),e(gce,Pho),e(Bh,Bho),e(Bh,xN),e(xN,Iho),e(Bh,Nho),e(k,qho),e(k,gs),e(gs,hce),e(hce,jho),e(gs,Dho),e(gs,$N),e($N,Gho),e(gs,Oho),e(gs,kN),e(kN,Vho),e(gs,Xho),e(k,zho),e(k,Ih),e(Ih,uce),e(uce,Who),e(Ih,Qho),e(Ih,SN),e(SN,Uho),e(Ih,Hho),e(k,Jho),e(k,hs),e(hs,pce),e(pce,Yho),e(hs,Kho),e(hs,RN),e(RN,Zho),e(hs,euo),e(hs,PN),e(PN,ouo),e(hs,ruo),e(k,tuo),e(k,us),e(us,_ce),e(_ce,auo),e(us,nuo),e(us,BN),e(BN,suo),e(us,luo),e(us,IN),e(IN,iuo),e(us,duo),e(k,cuo),e(k,ps),e(ps,bce),e(bce,muo),e(ps,fuo),e(ps,NN),e(NN,guo),e(ps,huo),e(ps,qN),e(qN,uuo),e(ps,puo),e(k,_uo),e(k,Nh),e(Nh,vce),e(vce,buo),e(Nh,vuo),e(Nh,jN),e(jN,Fuo),e(Nh,Tuo),e(k,Muo),e(k,_s),e(_s,Fce),e(Fce,Euo),e(_s,Cuo),e(_s,DN),e(DN,wuo),e(_s,Auo),e(_s,GN),e(GN,Luo),e(_s,yuo),e(k,xuo),e(k,bs),e(bs,Tce),e(Tce,$uo),e(bs,kuo),e(bs,ON),e(ON,Suo),e(bs,Ruo),e(bs,VN),e(VN,Puo),e(bs,Buo),e(k,Iuo),e(k,vs),e(vs,Mce),e(Mce,Nuo),e(vs,quo),e(vs,XN),e(XN,juo),e(vs,Duo),e(vs,zN),e(zN,Guo),e(vs,Ouo),e(k,Vuo),e(k,qh),e(qh,Ece),e(Ece,Xuo),e(qh,zuo),e(qh,WN),e(WN,Wuo),e(qh,Quo),e(k,Uuo),e(k,Fs),e(Fs,Cce),e(Cce,Huo),e(Fs,Juo),e(Fs,QN),e(QN,Yuo),e(Fs,Kuo),e(Fs,UN),e(UN,Zuo),e(Fs,epo),e(k,opo),e(k,Ts),e(Ts,wce),e(wce,rpo),e(Ts,tpo),e(Ts,HN),e(HN,apo),e(Ts,npo),e(Ts,JN),e(JN,spo),e(Ts,lpo),e(k,ipo),e(k,Ms),e(Ms,Ace),e(Ace,dpo),e(Ms,cpo),e(Ms,YN),e(YN,mpo),e(Ms,fpo),e(Ms,KN),e(KN,gpo),e(Ms,hpo),e(k,upo),e(k,Es),e(Es,Lce),e(Lce,ppo),e(Es,_po),e(Es,ZN),e(ZN,bpo),e(Es,vpo),e(Es,eq),e(eq,Fpo),e(Es,Tpo),e(k,Mpo),e(k,Cs),e(Cs,yce),e(yce,Epo),e(Cs,Cpo),e(Cs,oq),e(oq,wpo),e(Cs,Apo),e(Cs,rq),e(rq,Lpo),e(Cs,ypo),e(k,xpo),e(k,ws),e(ws,xce),e(xce,$po),e(ws,kpo),e(ws,tq),e(tq,Spo),e(ws,Rpo),e(ws,aq),e(aq,Ppo),e(ws,Bpo),e(k,Ipo),e(k,As),e(As,$ce),e($ce,Npo),e(As,qpo),e(As,nq),e(nq,jpo),e(As,Dpo),e(As,sq),e(sq,Gpo),e(As,Opo),e(k,Vpo),e(k,Ls),e(Ls,kce),e(kce,Xpo),e(Ls,zpo),e(Ls,lq),e(lq,Wpo),e(Ls,Qpo),e(Ls,iq),e(iq,Upo),e(Ls,Hpo),e(k,Jpo),e(k,jh),e(jh,Sce),e(Sce,Ypo),e(jh,Kpo),e(jh,dq),e(dq,Zpo),e(jh,e_o),e(k,o_o),e(k,ys),e(ys,Rce),e(Rce,r_o),e(ys,t_o),e(ys,cq),e(cq,a_o),e(ys,n_o),e(ys,mq),e(mq,s_o),e(ys,l_o),e(k,i_o),e(k,Dh),e(Dh,Pce),e(Pce,d_o),e(Dh,c_o),e(Dh,fq),e(fq,m_o),e(Dh,f_o),e(k,g_o),e(k,Gh),e(Gh,Bce),e(Bce,h_o),e(Gh,u_o),e(Gh,gq),e(gq,p_o),e(Gh,__o),e(k,b_o),e(k,xs),e(xs,Ice),e(Ice,v_o),e(xs,F_o),e(xs,hq),e(hq,T_o),e(xs,M_o),e(xs,uq),e(uq,E_o),e(xs,C_o),e(k,w_o),e(k,$s),e($s,Nce),e(Nce,A_o),e($s,L_o),e($s,pq),e(pq,y_o),e($s,x_o),e($s,_q),e(_q,$_o),e($s,k_o),e(k,S_o),e(k,ks),e(ks,qce),e(qce,R_o),e(ks,P_o),e(ks,bq),e(bq,B_o),e(ks,I_o),e(ks,vq),e(vq,N_o),e(ks,q_o),e(k,j_o),e(k,Oh),e(Oh,jce),e(jce,D_o),e(Oh,G_o),e(Oh,Fq),e(Fq,O_o),e(Oh,V_o),e(k,X_o),e(k,Ss),e(Ss,Dce),e(Dce,z_o),e(Ss,W_o),e(Ss,Tq),e(Tq,Q_o),e(Ss,U_o),e(Ss,Mq),e(Mq,H_o),e(Ss,J_o),e(k,Y_o),e(k,Rs),e(Rs,Gce),e(Gce,K_o),e(Rs,Z_o),e(Rs,Eq),e(Eq,e2o),e(Rs,o2o),e(Rs,Cq),e(Cq,r2o),e(Rs,t2o),e(k,a2o),e(k,Ps),e(Ps,Oce),e(Oce,n2o),e(Ps,s2o),e(Ps,wq),e(wq,l2o),e(Ps,i2o),e(Ps,Aq),e(Aq,d2o),e(Ps,c2o),e(k,m2o),e(k,Bs),e(Bs,Vce),e(Vce,f2o),e(Bs,g2o),e(Bs,Lq),e(Lq,h2o),e(Bs,u2o),e(Bs,yq),e(yq,p2o),e(Bs,_2o),e(k,b2o),e(k,Is),e(Is,Xce),e(Xce,v2o),e(Is,F2o),e(Is,xq),e(xq,T2o),e(Is,M2o),e(Is,$q),e($q,E2o),e(Is,C2o),e(k,w2o),e(k,Ns),e(Ns,zce),e(zce,A2o),e(Ns,L2o),e(Ns,kq),e(kq,y2o),e(Ns,x2o),e(Ns,Sq),e(Sq,$2o),e(Ns,k2o),e(k,S2o),e(k,qs),e(qs,Wce),e(Wce,R2o),e(qs,P2o),e(qs,Rq),e(Rq,B2o),e(qs,I2o),e(qs,Pq),e(Pq,N2o),e(qs,q2o),e(k,j2o),e(k,js),e(js,Qce),e(Qce,D2o),e(js,G2o),e(js,Bq),e(Bq,O2o),e(js,V2o),e(js,Iq),e(Iq,X2o),e(js,z2o),e(k,W2o),e(k,Vh),e(Vh,Uce),e(Uce,Q2o),e(Vh,U2o),e(Vh,Nq),e(Nq,H2o),e(Vh,J2o),e(k,Y2o),e(k,Ds),e(Ds,Hce),e(Hce,K2o),e(Ds,Z2o),e(Ds,qq),e(qq,ebo),e(Ds,obo),e(Ds,jq),e(jq,rbo),e(Ds,tbo),e(k,abo),e(k,Gs),e(Gs,Jce),e(Jce,nbo),e(Gs,sbo),e(Gs,Dq),e(Dq,lbo),e(Gs,ibo),e(Gs,Gq),e(Gq,dbo),e(Gs,cbo),e(k,mbo),e(k,Xh),e(Xh,Yce),e(Yce,fbo),e(Xh,gbo),e(Xh,Oq),e(Oq,hbo),e(Xh,ubo),e(k,pbo),e(k,zh),e(zh,Kce),e(Kce,_bo),e(zh,bbo),e(zh,Vq),e(Vq,vbo),e(zh,Fbo),e(k,Tbo),e(k,Wh),e(Wh,Zce),e(Zce,Mbo),e(Wh,Ebo),e(Wh,Xq),e(Xq,Cbo),e(Wh,wbo),e(k,Abo),e(k,Qh),e(Qh,eme),e(eme,Lbo),e(Qh,ybo),e(Qh,zq),e(zq,xbo),e(Qh,$bo),e(k,kbo),e(k,Os),e(Os,ome),e(ome,Sbo),e(Os,Rbo),e(Os,Wq),e(Wq,Pbo),e(Os,Bbo),e(Os,Qq),e(Qq,Ibo),e(Os,Nbo),e(k,qbo),e(k,Uh),e(Uh,rme),e(rme,jbo),e(Uh,Dbo),e(Uh,Uq),e(Uq,Gbo),e(Uh,Obo),e(k,Vbo),e(k,Vs),e(Vs,tme),e(tme,Xbo),e(Vs,zbo),e(Vs,Hq),e(Hq,Wbo),e(Vs,Qbo),e(Vs,Jq),e(Jq,Ubo),e(Vs,Hbo),e(k,Jbo),e(k,Xs),e(Xs,ame),e(ame,Ybo),e(Xs,Kbo),e(Xs,Yq),e(Yq,Zbo),e(Xs,evo),e(Xs,Kq),e(Kq,ovo),e(Xs,rvo),e(k,tvo),e(k,zs),e(zs,nme),e(nme,avo),e(zs,nvo),e(zs,Zq),e(Zq,svo),e(zs,lvo),e(zs,ej),e(ej,ivo),e(zs,dvo),e(k,cvo),e(k,Ws),e(Ws,sme),e(sme,mvo),e(Ws,fvo),e(Ws,oj),e(oj,gvo),e(Ws,hvo),e(Ws,rj),e(rj,uvo),e(Ws,pvo),e(k,_vo),e(k,Qs),e(Qs,lme),e(lme,bvo),e(Qs,vvo),e(Qs,tj),e(tj,Fvo),e(Qs,Tvo),e(Qs,aj),e(aj,Mvo),e(Qs,Evo),e(k,Cvo),e(k,Us),e(Us,ime),e(ime,wvo),e(Us,Avo),e(Us,nj),e(nj,Lvo),e(Us,yvo),e(Us,sj),e(sj,xvo),e(Us,$vo),e(k,kvo),e(k,Hh),e(Hh,dme),e(dme,Svo),e(Hh,Rvo),e(Hh,lj),e(lj,Pvo),e(Hh,Bvo),e(k,Ivo),e(k,Jh),e(Jh,cme),e(cme,Nvo),e(Jh,qvo),e(Jh,ij),e(ij,jvo),e(Jh,Dvo),e(k,Gvo),e(k,Hs),e(Hs,mme),e(mme,Ovo),e(Hs,Vvo),e(Hs,dj),e(dj,Xvo),e(Hs,zvo),e(Hs,cj),e(cj,Wvo),e(Hs,Qvo),e(k,Uvo),e(k,Js),e(Js,fme),e(fme,Hvo),e(Js,Jvo),e(Js,mj),e(mj,Yvo),e(Js,Kvo),e(Js,fj),e(fj,Zvo),e(Js,e1o),e(k,o1o),e(k,Ys),e(Ys,gme),e(gme,r1o),e(Ys,t1o),e(Ys,gj),e(gj,a1o),e(Ys,n1o),e(Ys,hj),e(hj,s1o),e(Ys,l1o),e(k,i1o),e(k,Yh),e(Yh,hme),e(hme,d1o),e(Yh,c1o),e(Yh,uj),e(uj,m1o),e(Yh,f1o),e(k,g1o),e(k,Kh),e(Kh,ume),e(ume,h1o),e(Kh,u1o),e(Kh,pj),e(pj,p1o),e(Kh,_1o),e(k,b1o),e(k,Zh),e(Zh,pme),e(pme,v1o),e(Zh,F1o),e(Zh,_j),e(_j,T1o),e(Zh,M1o),e(k,E1o),e(k,Ks),e(Ks,_me),e(_me,C1o),e(Ks,w1o),e(Ks,bj),e(bj,A1o),e(Ks,L1o),e(Ks,vj),e(vj,y1o),e(Ks,x1o),e(k,$1o),e(k,Zs),e(Zs,bme),e(bme,k1o),e(Zs,S1o),e(Zs,Fj),e(Fj,R1o),e(Zs,P1o),e(Zs,Tj),e(Tj,B1o),e(Zs,I1o),e(k,N1o),e(k,eu),e(eu,vme),e(vme,q1o),e(eu,j1o),e(eu,Mj),e(Mj,D1o),e(eu,G1o),e(k,O1o),e(k,ou),e(ou,Fme),e(Fme,V1o),e(ou,X1o),e(ou,Ej),e(Ej,z1o),e(ou,W1o),e(k,Q1o),e(k,ru),e(ru,Tme),e(Tme,U1o),e(ru,H1o),e(ru,Cj),e(Cj,J1o),e(ru,Y1o),e(k,K1o),e(k,el),e(el,Mme),e(Mme,Z1o),e(el,eFo),e(el,wj),e(wj,oFo),e(el,rFo),e(el,Aj),e(Aj,tFo),e(el,aFo),e(k,nFo),e(k,tu),e(tu,Eme),e(Eme,sFo),e(tu,lFo),e(tu,Lj),e(Lj,iFo),e(tu,dFo),e(k,cFo),e(k,au),e(au,Cme),e(Cme,mFo),e(au,fFo),e(au,yj),e(yj,gFo),e(au,hFo),e(k,uFo),e(k,ol),e(ol,wme),e(wme,pFo),e(ol,_Fo),e(ol,xj),e(xj,bFo),e(ol,vFo),e(ol,$j),e($j,FFo),e(ol,TFo),e(k,MFo),e(k,rl),e(rl,Ame),e(Ame,EFo),e(rl,CFo),e(rl,kj),e(kj,wFo),e(rl,AFo),e(rl,Sj),e(Sj,LFo),e(rl,yFo),e(k,xFo),e(k,tl),e(tl,Lme),e(Lme,$Fo),e(tl,kFo),e(tl,Rj),e(Rj,SFo),e(tl,RFo),e(tl,Pj),e(Pj,PFo),e(tl,BFo),e(k,IFo),e(k,al),e(al,yme),e(yme,NFo),e(al,qFo),e(al,Bj),e(Bj,jFo),e(al,DFo),e(al,Ij),e(Ij,GFo),e(al,OFo),e(Sr,VFo),M(nu,Sr,null),e(xo,XFo),e(xo,su),M(j8,su,null),e(su,zFo),e(su,xme),e(xme,WFo),b(m,XUe,_),b(m,Zi,_),e(Zi,lu),e(lu,$me),M(D8,$me,null),e(Zi,QFo),e(Zi,kme),e(kme,UFo),b(m,zUe,_),b(m,$o,_),M(G8,$o,null),e($o,HFo),e($o,O8),e(O8,JFo),e(O8,Nj),e(Nj,YFo),e(O8,KFo),e($o,ZFo),e($o,V8),e(V8,eTo),e(V8,Sme),e(Sme,oTo),e(V8,rTo),e($o,tTo),e($o,Je),M(X8,Je,null),e(Je,aTo),e(Je,Rme),e(Rme,nTo),e(Je,sTo),e(Je,Oa),e(Oa,lTo),e(Oa,Pme),e(Pme,iTo),e(Oa,dTo),e(Oa,Bme),e(Bme,cTo),e(Oa,mTo),e(Oa,Ime),e(Ime,fTo),e(Oa,gTo),e(Je,hTo),e(Je,Q),e(Q,iu),e(iu,Nme),e(Nme,uTo),e(iu,pTo),e(iu,qj),e(qj,_To),e(iu,bTo),e(Q,vTo),e(Q,du),e(du,qme),e(qme,FTo),e(du,TTo),e(du,jj),e(jj,MTo),e(du,ETo),e(Q,CTo),e(Q,cu),e(cu,jme),e(jme,wTo),e(cu,ATo),e(cu,Dj),e(Dj,LTo),e(cu,yTo),e(Q,xTo),e(Q,mu),e(mu,Dme),e(Dme,$To),e(mu,kTo),e(mu,Gj),e(Gj,STo),e(mu,RTo),e(Q,PTo),e(Q,fu),e(fu,Gme),e(Gme,BTo),e(fu,ITo),e(fu,Oj),e(Oj,NTo),e(fu,qTo),e(Q,jTo),e(Q,gu),e(gu,Ome),e(Ome,DTo),e(gu,GTo),e(gu,Vj),e(Vj,OTo),e(gu,VTo),e(Q,XTo),e(Q,hu),e(hu,Vme),e(Vme,zTo),e(hu,WTo),e(hu,Xj),e(Xj,QTo),e(hu,UTo),e(Q,HTo),e(Q,uu),e(uu,Xme),e(Xme,JTo),e(uu,YTo),e(uu,zj),e(zj,KTo),e(uu,ZTo),e(Q,eMo),e(Q,pu),e(pu,zme),e(zme,oMo),e(pu,rMo),e(pu,Wj),e(Wj,tMo),e(pu,aMo),e(Q,nMo),e(Q,_u),e(_u,Wme),e(Wme,sMo),e(_u,lMo),e(_u,Qj),e(Qj,iMo),e(_u,dMo),e(Q,cMo),e(Q,bu),e(bu,Qme),e(Qme,mMo),e(bu,fMo),e(bu,Uj),e(Uj,gMo),e(bu,hMo),e(Q,uMo),e(Q,vu),e(vu,Ume),e(Ume,pMo),e(vu,_Mo),e(vu,Hj),e(Hj,bMo),e(vu,vMo),e(Q,FMo),e(Q,Fu),e(Fu,Hme),e(Hme,TMo),e(Fu,MMo),e(Fu,Jj),e(Jj,EMo),e(Fu,CMo),e(Q,wMo),e(Q,Tu),e(Tu,Jme),e(Jme,AMo),e(Tu,LMo),e(Tu,Yj),e(Yj,yMo),e(Tu,xMo),e(Q,$Mo),e(Q,Mu),e(Mu,Yme),e(Yme,kMo),e(Mu,SMo),e(Mu,Kj),e(Kj,RMo),e(Mu,PMo),e(Q,BMo),e(Q,Eu),e(Eu,Kme),e(Kme,IMo),e(Eu,NMo),e(Eu,Zj),e(Zj,qMo),e(Eu,jMo),e(Q,DMo),e(Q,Cu),e(Cu,Zme),e(Zme,GMo),e(Cu,OMo),e(Cu,eD),e(eD,VMo),e(Cu,XMo),e(Q,zMo),e(Q,wu),e(wu,efe),e(efe,WMo),e(wu,QMo),e(wu,oD),e(oD,UMo),e(wu,HMo),e(Q,JMo),e(Q,Au),e(Au,ofe),e(ofe,YMo),e(Au,KMo),e(Au,rD),e(rD,ZMo),e(Au,eEo),e(Q,oEo),e(Q,Lu),e(Lu,rfe),e(rfe,rEo),e(Lu,tEo),e(Lu,tD),e(tD,aEo),e(Lu,nEo),e(Q,sEo),e(Q,yu),e(yu,tfe),e(tfe,lEo),e(yu,iEo),e(yu,aD),e(aD,dEo),e(yu,cEo),e(Q,mEo),e(Q,xu),e(xu,afe),e(afe,fEo),e(xu,gEo),e(xu,nD),e(nD,hEo),e(xu,uEo),e(Q,pEo),e(Q,$u),e($u,nfe),e(nfe,_Eo),e($u,bEo),e($u,sD),e(sD,vEo),e($u,FEo),e(Q,TEo),e(Q,ku),e(ku,sfe),e(sfe,MEo),e(ku,EEo),e(ku,lD),e(lD,CEo),e(ku,wEo),e(Q,AEo),e(Q,Su),e(Su,lfe),e(lfe,LEo),e(Su,yEo),e(Su,iD),e(iD,xEo),e(Su,$Eo),e(Q,kEo),e(Q,Ru),e(Ru,ife),e(ife,SEo),e(Ru,REo),e(Ru,dD),e(dD,PEo),e(Ru,BEo),e(Q,IEo),e(Q,Pu),e(Pu,dfe),e(dfe,NEo),e(Pu,qEo),e(Pu,cD),e(cD,jEo),e(Pu,DEo),e(Q,GEo),e(Q,Bu),e(Bu,cfe),e(cfe,OEo),e(Bu,VEo),e(Bu,mD),e(mD,XEo),e(Bu,zEo),e(Q,WEo),e(Q,Iu),e(Iu,mfe),e(mfe,QEo),e(Iu,UEo),e(Iu,fD),e(fD,HEo),e(Iu,JEo),e(Q,YEo),e(Q,Nu),e(Nu,ffe),e(ffe,KEo),e(Nu,ZEo),e(Nu,gD),e(gD,e4o),e(Nu,o4o),e(Q,r4o),e(Q,qu),e(qu,gfe),e(gfe,t4o),e(qu,a4o),e(qu,hD),e(hD,n4o),e(qu,s4o),e(Q,l4o),e(Q,ju),e(ju,hfe),e(hfe,i4o),e(ju,d4o),e(ju,uD),e(uD,c4o),e(ju,m4o),e(Q,f4o),e(Q,Du),e(Du,ufe),e(ufe,g4o),e(Du,h4o),e(Du,pD),e(pD,u4o),e(Du,p4o),e(Q,_4o),e(Q,Gu),e(Gu,pfe),e(pfe,b4o),e(Gu,v4o),e(Gu,_D),e(_D,F4o),e(Gu,T4o),e(Q,M4o),e(Q,Ou),e(Ou,_fe),e(_fe,E4o),e(Ou,C4o),e(Ou,bD),e(bD,w4o),e(Ou,A4o),e(Q,L4o),e(Q,Vu),e(Vu,bfe),e(bfe,y4o),e(Vu,x4o),e(Vu,vD),e(vD,$4o),e(Vu,k4o),e(Q,S4o),e(Q,Xu),e(Xu,vfe),e(vfe,R4o),e(Xu,P4o),e(Xu,FD),e(FD,B4o),e(Xu,I4o),e(Q,N4o),e(Q,zu),e(zu,Ffe),e(Ffe,q4o),e(zu,j4o),e(zu,TD),e(TD,D4o),e(zu,G4o),e(Je,O4o),M(Wu,Je,null),e(Je,V4o),M(Qu,Je,null),e($o,X4o),e($o,Uu),M(z8,Uu,null),e(Uu,z4o),e(Uu,Tfe),e(Tfe,W4o),b(m,WUe,_),b(m,ed,_),e(ed,Hu),e(Hu,Mfe),M(W8,Mfe,null),e(ed,Q4o),e(ed,Efe),e(Efe,U4o),b(m,QUe,_),b(m,ko,_),M(Q8,ko,null),e(ko,H4o),e(ko,U8),e(U8,J4o),e(U8,MD),e(MD,Y4o),e(U8,K4o),e(ko,Z4o),e(ko,H8),e(H8,eCo),e(H8,Cfe),e(Cfe,oCo),e(H8,rCo),e(ko,tCo),e(ko,Ye),M(J8,Ye,null),e(Ye,aCo),e(Ye,wfe),e(wfe,nCo),e(Ye,sCo),e(Ye,od),e(od,lCo),e(od,Afe),e(Afe,iCo),e(od,dCo),e(od,Lfe),e(Lfe,cCo),e(od,mCo),e(Ye,fCo),e(Ye,ce),e(ce,Ju),e(Ju,yfe),e(yfe,gCo),e(Ju,hCo),e(Ju,ED),e(ED,uCo),e(Ju,pCo),e(ce,_Co),e(ce,Yu),e(Yu,xfe),e(xfe,bCo),e(Yu,vCo),e(Yu,CD),e(CD,FCo),e(Yu,TCo),e(ce,MCo),e(ce,Ku),e(Ku,$fe),e($fe,ECo),e(Ku,CCo),e(Ku,wD),e(wD,wCo),e(Ku,ACo),e(ce,LCo),e(ce,Zu),e(Zu,kfe),e(kfe,yCo),e(Zu,xCo),e(Zu,AD),e(AD,$Co),e(Zu,kCo),e(ce,SCo),e(ce,ep),e(ep,Sfe),e(Sfe,RCo),e(ep,PCo),e(ep,LD),e(LD,BCo),e(ep,ICo),e(ce,NCo),e(ce,op),e(op,Rfe),e(Rfe,qCo),e(op,jCo),e(op,yD),e(yD,DCo),e(op,GCo),e(ce,OCo),e(ce,rp),e(rp,Pfe),e(Pfe,VCo),e(rp,XCo),e(rp,xD),e(xD,zCo),e(rp,WCo),e(ce,QCo),e(ce,tp),e(tp,Bfe),e(Bfe,UCo),e(tp,HCo),e(tp,$D),e($D,JCo),e(tp,YCo),e(ce,KCo),e(ce,ap),e(ap,Ife),e(Ife,ZCo),e(ap,e3o),e(ap,kD),e(kD,o3o),e(ap,r3o),e(ce,t3o),e(ce,np),e(np,Nfe),e(Nfe,a3o),e(np,n3o),e(np,SD),e(SD,s3o),e(np,l3o),e(ce,i3o),e(ce,sp),e(sp,qfe),e(qfe,d3o),e(sp,c3o),e(sp,RD),e(RD,m3o),e(sp,f3o),e(ce,g3o),e(ce,lp),e(lp,jfe),e(jfe,h3o),e(lp,u3o),e(lp,PD),e(PD,p3o),e(lp,_3o),e(ce,b3o),e(ce,ip),e(ip,Dfe),e(Dfe,v3o),e(ip,F3o),e(ip,BD),e(BD,T3o),e(ip,M3o),e(ce,E3o),e(ce,dp),e(dp,Gfe),e(Gfe,C3o),e(dp,w3o),e(dp,ID),e(ID,A3o),e(dp,L3o),e(ce,y3o),e(ce,cp),e(cp,Ofe),e(Ofe,x3o),e(cp,$3o),e(cp,ND),e(ND,k3o),e(cp,S3o),e(ce,R3o),e(ce,mp),e(mp,Vfe),e(Vfe,P3o),e(mp,B3o),e(mp,qD),e(qD,I3o),e(mp,N3o),e(ce,q3o),e(ce,fp),e(fp,Xfe),e(Xfe,j3o),e(fp,D3o),e(fp,jD),e(jD,G3o),e(fp,O3o),e(ce,V3o),e(ce,gp),e(gp,zfe),e(zfe,X3o),e(gp,z3o),e(gp,DD),e(DD,W3o),e(gp,Q3o),e(ce,U3o),e(ce,hp),e(hp,Wfe),e(Wfe,H3o),e(hp,J3o),e(hp,GD),e(GD,Y3o),e(hp,K3o),e(ce,Z3o),e(ce,up),e(up,Qfe),e(Qfe,e5o),e(up,o5o),e(up,OD),e(OD,r5o),e(up,t5o),e(Ye,a5o),M(pp,Ye,null),e(Ye,n5o),M(_p,Ye,null),e(ko,s5o),e(ko,bp),M(Y8,bp,null),e(bp,l5o),e(bp,Ufe),e(Ufe,i5o),b(m,UUe,_),b(m,rd,_),e(rd,vp),e(vp,Hfe),M(K8,Hfe,null),e(rd,d5o),e(rd,Jfe),e(Jfe,c5o),b(m,HUe,_),b(m,So,_),M(Z8,So,null),e(So,m5o),e(So,td),e(td,f5o),e(td,VD),e(VD,g5o),e(td,h5o),e(td,XD),e(XD,u5o),e(td,p5o),e(So,_5o),e(So,e9),e(e9,b5o),e(e9,Yfe),e(Yfe,v5o),e(e9,F5o),e(So,T5o),e(So,ft),M(o9,ft,null),e(ft,M5o),e(ft,Kfe),e(Kfe,E5o),e(ft,C5o),e(ft,ad),e(ad,w5o),e(ad,Zfe),e(Zfe,A5o),e(ad,L5o),e(ad,zD),e(zD,y5o),e(ad,x5o),e(ft,$5o),M(Fp,ft,null),e(So,k5o),e(So,Ke),M(r9,Ke,null),e(Ke,S5o),e(Ke,ege),e(ege,R5o),e(Ke,P5o),e(Ke,Va),e(Va,B5o),e(Va,oge),e(oge,I5o),e(Va,N5o),e(Va,rge),e(rge,q5o),e(Va,j5o),e(Va,tge),e(tge,D5o),e(Va,G5o),e(Ke,O5o),e(Ke,y),e(y,Tp),e(Tp,age),e(age,V5o),e(Tp,X5o),e(Tp,WD),e(WD,z5o),e(Tp,W5o),e(y,Q5o),e(y,Mp),e(Mp,nge),e(nge,U5o),e(Mp,H5o),e(Mp,QD),e(QD,J5o),e(Mp,Y5o),e(y,K5o),e(y,Ep),e(Ep,sge),e(sge,Z5o),e(Ep,e0o),e(Ep,UD),e(UD,o0o),e(Ep,r0o),e(y,t0o),e(y,Cp),e(Cp,lge),e(lge,a0o),e(Cp,n0o),e(Cp,HD),e(HD,s0o),e(Cp,l0o),e(y,i0o),e(y,wp),e(wp,ige),e(ige,d0o),e(wp,c0o),e(wp,JD),e(JD,m0o),e(wp,f0o),e(y,g0o),e(y,Ap),e(Ap,dge),e(dge,h0o),e(Ap,u0o),e(Ap,YD),e(YD,p0o),e(Ap,_0o),e(y,b0o),e(y,Lp),e(Lp,cge),e(cge,v0o),e(Lp,F0o),e(Lp,KD),e(KD,T0o),e(Lp,M0o),e(y,E0o),e(y,yp),e(yp,mge),e(mge,C0o),e(yp,w0o),e(yp,ZD),e(ZD,A0o),e(yp,L0o),e(y,y0o),e(y,xp),e(xp,fge),e(fge,x0o),e(xp,$0o),e(xp,eG),e(eG,k0o),e(xp,S0o),e(y,R0o),e(y,$p),e($p,gge),e(gge,P0o),e($p,B0o),e($p,oG),e(oG,I0o),e($p,N0o),e(y,q0o),e(y,kp),e(kp,hge),e(hge,j0o),e(kp,D0o),e(kp,rG),e(rG,G0o),e(kp,O0o),e(y,V0o),e(y,Sp),e(Sp,uge),e(uge,X0o),e(Sp,z0o),e(Sp,tG),e(tG,W0o),e(Sp,Q0o),e(y,U0o),e(y,Rp),e(Rp,pge),e(pge,H0o),e(Rp,J0o),e(Rp,aG),e(aG,Y0o),e(Rp,K0o),e(y,Z0o),e(y,Pp),e(Pp,_ge),e(_ge,ewo),e(Pp,owo),e(Pp,nG),e(nG,rwo),e(Pp,two),e(y,awo),e(y,Bp),e(Bp,bge),e(bge,nwo),e(Bp,swo),e(Bp,sG),e(sG,lwo),e(Bp,iwo),e(y,dwo),e(y,Ip),e(Ip,vge),e(vge,cwo),e(Ip,mwo),e(Ip,lG),e(lG,fwo),e(Ip,gwo),e(y,hwo),e(y,Np),e(Np,Fge),e(Fge,uwo),e(Np,pwo),e(Np,iG),e(iG,_wo),e(Np,bwo),e(y,vwo),e(y,qp),e(qp,Tge),e(Tge,Fwo),e(qp,Two),e(qp,dG),e(dG,Mwo),e(qp,Ewo),e(y,Cwo),e(y,jp),e(jp,Mge),e(Mge,wwo),e(jp,Awo),e(jp,cG),e(cG,Lwo),e(jp,ywo),e(y,xwo),e(y,Dp),e(Dp,Ege),e(Ege,$wo),e(Dp,kwo),e(Dp,mG),e(mG,Swo),e(Dp,Rwo),e(y,Pwo),e(y,Gp),e(Gp,Cge),e(Cge,Bwo),e(Gp,Iwo),e(Gp,fG),e(fG,Nwo),e(Gp,qwo),e(y,jwo),e(y,Op),e(Op,wge),e(wge,Dwo),e(Op,Gwo),e(Op,gG),e(gG,Owo),e(Op,Vwo),e(y,Xwo),e(y,Vp),e(Vp,Age),e(Age,zwo),e(Vp,Wwo),e(Vp,hG),e(hG,Qwo),e(Vp,Uwo),e(y,Hwo),e(y,Xp),e(Xp,Lge),e(Lge,Jwo),e(Xp,Ywo),e(Xp,uG),e(uG,Kwo),e(Xp,Zwo),e(y,e6o),e(y,zp),e(zp,yge),e(yge,o6o),e(zp,r6o),e(zp,pG),e(pG,t6o),e(zp,a6o),e(y,n6o),e(y,Wp),e(Wp,xge),e(xge,s6o),e(Wp,l6o),e(Wp,_G),e(_G,i6o),e(Wp,d6o),e(y,c6o),e(y,Qp),e(Qp,$ge),e($ge,m6o),e(Qp,f6o),e(Qp,bG),e(bG,g6o),e(Qp,h6o),e(y,u6o),e(y,Up),e(Up,kge),e(kge,p6o),e(Up,_6o),e(Up,vG),e(vG,b6o),e(Up,v6o),e(y,F6o),e(y,Hp),e(Hp,Sge),e(Sge,T6o),e(Hp,M6o),e(Hp,FG),e(FG,E6o),e(Hp,C6o),e(y,w6o),e(y,Jp),e(Jp,Rge),e(Rge,A6o),e(Jp,L6o),e(Jp,TG),e(TG,y6o),e(Jp,x6o),e(y,$6o),e(y,Yp),e(Yp,Pge),e(Pge,k6o),e(Yp,S6o),e(Yp,MG),e(MG,R6o),e(Yp,P6o),e(y,B6o),e(y,Kp),e(Kp,Bge),e(Bge,I6o),e(Kp,N6o),e(Kp,EG),e(EG,q6o),e(Kp,j6o),e(y,D6o),e(y,Zp),e(Zp,Ige),e(Ige,G6o),e(Zp,O6o),e(Zp,CG),e(CG,V6o),e(Zp,X6o),e(y,z6o),e(y,e_),e(e_,Nge),e(Nge,W6o),e(e_,Q6o),e(e_,wG),e(wG,U6o),e(e_,H6o),e(y,J6o),e(y,o_),e(o_,qge),e(qge,Y6o),e(o_,K6o),e(o_,AG),e(AG,Z6o),e(o_,eAo),e(y,oAo),e(y,nl),e(nl,jge),e(jge,rAo),e(nl,tAo),e(nl,LG),e(LG,aAo),e(nl,nAo),e(nl,yG),e(yG,sAo),e(nl,lAo),e(y,iAo),e(y,r_),e(r_,Dge),e(Dge,dAo),e(r_,cAo),e(r_,xG),e(xG,mAo),e(r_,fAo),e(y,gAo),e(y,t_),e(t_,Gge),e(Gge,hAo),e(t_,uAo),e(t_,$G),e($G,pAo),e(t_,_Ao),e(y,bAo),e(y,a_),e(a_,Oge),e(Oge,vAo),e(a_,FAo),e(a_,kG),e(kG,TAo),e(a_,MAo),e(y,EAo),e(y,n_),e(n_,Vge),e(Vge,CAo),e(n_,wAo),e(n_,SG),e(SG,AAo),e(n_,LAo),e(y,yAo),e(y,s_),e(s_,Xge),e(Xge,xAo),e(s_,$Ao),e(s_,RG),e(RG,kAo),e(s_,SAo),e(y,RAo),e(y,l_),e(l_,zge),e(zge,PAo),e(l_,BAo),e(l_,PG),e(PG,IAo),e(l_,NAo),e(y,qAo),e(y,i_),e(i_,Wge),e(Wge,jAo),e(i_,DAo),e(i_,BG),e(BG,GAo),e(i_,OAo),e(y,VAo),e(y,d_),e(d_,Qge),e(Qge,XAo),e(d_,zAo),e(d_,IG),e(IG,WAo),e(d_,QAo),e(y,UAo),e(y,c_),e(c_,Uge),e(Uge,HAo),e(c_,JAo),e(c_,NG),e(NG,YAo),e(c_,KAo),e(y,ZAo),e(y,m_),e(m_,Hge),e(Hge,e7o),e(m_,o7o),e(m_,qG),e(qG,r7o),e(m_,t7o),e(y,a7o),e(y,f_),e(f_,Jge),e(Jge,n7o),e(f_,s7o),e(f_,jG),e(jG,l7o),e(f_,i7o),e(y,d7o),e(y,g_),e(g_,Yge),e(Yge,c7o),e(g_,m7o),e(g_,DG),e(DG,f7o),e(g_,g7o),e(y,h7o),e(y,h_),e(h_,Kge),e(Kge,u7o),e(h_,p7o),e(h_,GG),e(GG,_7o),e(h_,b7o),e(y,v7o),e(y,u_),e(u_,Zge),e(Zge,F7o),e(u_,T7o),e(u_,OG),e(OG,M7o),e(u_,E7o),e(y,C7o),e(y,p_),e(p_,ehe),e(ehe,w7o),e(p_,A7o),e(p_,VG),e(VG,L7o),e(p_,y7o),e(y,x7o),e(y,__),e(__,ohe),e(ohe,$7o),e(__,k7o),e(__,XG),e(XG,S7o),e(__,R7o),e(y,P7o),e(y,b_),e(b_,rhe),e(rhe,B7o),e(b_,I7o),e(b_,zG),e(zG,N7o),e(b_,q7o),e(y,j7o),e(y,v_),e(v_,the),e(the,D7o),e(v_,G7o),e(v_,WG),e(WG,O7o),e(v_,V7o),e(y,X7o),e(y,F_),e(F_,ahe),e(ahe,z7o),e(F_,W7o),e(F_,QG),e(QG,Q7o),e(F_,U7o),e(y,H7o),e(y,T_),e(T_,nhe),e(nhe,J7o),e(T_,Y7o),e(T_,UG),e(UG,K7o),e(T_,Z7o),e(y,eLo),e(y,M_),e(M_,she),e(she,oLo),e(M_,rLo),e(M_,HG),e(HG,tLo),e(M_,aLo),e(y,nLo),e(y,E_),e(E_,lhe),e(lhe,sLo),e(E_,lLo),e(E_,JG),e(JG,iLo),e(E_,dLo),e(y,cLo),e(y,C_),e(C_,ihe),e(ihe,mLo),e(C_,fLo),e(C_,YG),e(YG,gLo),e(C_,hLo),e(y,uLo),e(y,w_),e(w_,dhe),e(dhe,pLo),e(w_,_Lo),e(w_,KG),e(KG,bLo),e(w_,vLo),e(y,FLo),e(y,A_),e(A_,che),e(che,TLo),e(A_,MLo),e(A_,ZG),e(ZG,ELo),e(A_,CLo),e(y,wLo),e(y,L_),e(L_,mhe),e(mhe,ALo),e(L_,LLo),e(L_,eO),e(eO,yLo),e(L_,xLo),e(y,$Lo),e(y,y_),e(y_,fhe),e(fhe,kLo),e(y_,SLo),e(y_,oO),e(oO,RLo),e(y_,PLo),e(y,BLo),e(y,x_),e(x_,ghe),e(ghe,ILo),e(x_,NLo),e(x_,rO),e(rO,qLo),e(x_,jLo),e(y,DLo),e(y,$_),e($_,hhe),e(hhe,GLo),e($_,OLo),e($_,tO),e(tO,VLo),e($_,XLo),e(y,zLo),e(y,k_),e(k_,uhe),e(uhe,WLo),e(k_,QLo),e(k_,aO),e(aO,ULo),e(k_,HLo),e(y,JLo),e(y,S_),e(S_,phe),e(phe,YLo),e(S_,KLo),e(S_,nO),e(nO,ZLo),e(S_,eyo),e(y,oyo),e(y,R_),e(R_,_he),e(_he,ryo),e(R_,tyo),e(R_,sO),e(sO,ayo),e(R_,nyo),e(y,syo),e(y,P_),e(P_,bhe),e(bhe,lyo),e(P_,iyo),e(P_,lO),e(lO,dyo),e(P_,cyo),e(y,myo),e(y,B_),e(B_,vhe),e(vhe,fyo),e(B_,gyo),e(B_,iO),e(iO,hyo),e(B_,uyo),e(y,pyo),e(y,I_),e(I_,Fhe),e(Fhe,_yo),e(I_,byo),e(I_,dO),e(dO,vyo),e(I_,Fyo),e(y,Tyo),e(y,N_),e(N_,The),e(The,Myo),e(N_,Eyo),e(N_,cO),e(cO,Cyo),e(N_,wyo),e(y,Ayo),e(y,q_),e(q_,Mhe),e(Mhe,Lyo),e(q_,yyo),e(q_,mO),e(mO,xyo),e(q_,$yo),e(y,kyo),e(y,j_),e(j_,Ehe),e(Ehe,Syo),e(j_,Ryo),e(j_,fO),e(fO,Pyo),e(j_,Byo),e(y,Iyo),e(y,D_),e(D_,Che),e(Che,Nyo),e(D_,qyo),e(D_,gO),e(gO,jyo),e(D_,Dyo),e(y,Gyo),e(y,G_),e(G_,whe),e(whe,Oyo),e(G_,Vyo),e(G_,hO),e(hO,Xyo),e(G_,zyo),e(y,Wyo),e(y,O_),e(O_,Ahe),e(Ahe,Qyo),e(O_,Uyo),e(O_,uO),e(uO,Hyo),e(O_,Jyo),e(y,Yyo),e(y,V_),e(V_,Lhe),e(Lhe,Kyo),e(V_,Zyo),e(V_,pO),e(pO,e8o),e(V_,o8o),e(y,r8o),e(y,X_),e(X_,yhe),e(yhe,t8o),e(X_,a8o),e(X_,_O),e(_O,n8o),e(X_,s8o),e(y,l8o),e(y,z_),e(z_,xhe),e(xhe,i8o),e(z_,d8o),e(z_,bO),e(bO,c8o),e(z_,m8o),e(y,f8o),e(y,W_),e(W_,$he),e($he,g8o),e(W_,h8o),e(W_,vO),e(vO,u8o),e(W_,p8o),e(y,_8o),e(y,Q_),e(Q_,khe),e(khe,b8o),e(Q_,v8o),e(Q_,FO),e(FO,F8o),e(Q_,T8o),e(y,M8o),e(y,U_),e(U_,She),e(She,E8o),e(U_,C8o),e(U_,TO),e(TO,w8o),e(U_,A8o),e(y,L8o),e(y,H_),e(H_,Rhe),e(Rhe,y8o),e(H_,x8o),e(H_,MO),e(MO,$8o),e(H_,k8o),e(y,S8o),e(y,J_),e(J_,Phe),e(Phe,R8o),e(J_,P8o),e(J_,EO),e(EO,B8o),e(J_,I8o),e(y,N8o),e(y,Y_),e(Y_,Bhe),e(Bhe,q8o),e(Y_,j8o),e(Y_,CO),e(CO,D8o),e(Y_,G8o),e(y,O8o),e(y,K_),e(K_,Ihe),e(Ihe,V8o),e(K_,X8o),e(K_,wO),e(wO,z8o),e(K_,W8o),e(y,Q8o),e(y,Z_),e(Z_,Nhe),e(Nhe,U8o),e(Z_,H8o),e(Z_,AO),e(AO,J8o),e(Z_,Y8o),e(y,K8o),e(y,e2),e(e2,qhe),e(qhe,Z8o),e(e2,e9o),e(e2,LO),e(LO,o9o),e(e2,r9o),e(y,t9o),e(y,o2),e(o2,jhe),e(jhe,a9o),e(o2,n9o),e(o2,yO),e(yO,s9o),e(o2,l9o),e(y,i9o),e(y,r2),e(r2,Dhe),e(Dhe,d9o),e(r2,c9o),e(r2,xO),e(xO,m9o),e(r2,f9o),e(y,g9o),e(y,t2),e(t2,Ghe),e(Ghe,h9o),e(t2,u9o),e(t2,$O),e($O,p9o),e(t2,_9o),e(y,b9o),e(y,a2),e(a2,Ohe),e(Ohe,v9o),e(a2,F9o),e(a2,kO),e(kO,T9o),e(a2,M9o),e(y,E9o),e(y,n2),e(n2,Vhe),e(Vhe,C9o),e(n2,w9o),e(n2,SO),e(SO,A9o),e(n2,L9o),e(y,y9o),e(y,s2),e(s2,Xhe),e(Xhe,x9o),e(s2,$9o),e(s2,RO),e(RO,k9o),e(s2,S9o),e(y,R9o),e(y,l2),e(l2,zhe),e(zhe,P9o),e(l2,B9o),e(l2,PO),e(PO,I9o),e(l2,N9o),e(y,q9o),e(y,i2),e(i2,Whe),e(Whe,j9o),e(i2,D9o),e(i2,BO),e(BO,G9o),e(i2,O9o),e(y,V9o),e(y,d2),e(d2,Qhe),e(Qhe,X9o),e(d2,z9o),e(d2,IO),e(IO,W9o),e(d2,Q9o),e(y,U9o),e(y,c2),e(c2,Uhe),e(Uhe,H9o),e(c2,J9o),e(c2,NO),e(NO,Y9o),e(c2,K9o),e(y,Z9o),e(y,m2),e(m2,Hhe),e(Hhe,exo),e(m2,oxo),e(m2,qO),e(qO,rxo),e(m2,txo),e(y,axo),e(y,f2),e(f2,Jhe),e(Jhe,nxo),e(f2,sxo),e(f2,jO),e(jO,lxo),e(f2,ixo),e(y,dxo),e(y,g2),e(g2,Yhe),e(Yhe,cxo),e(g2,mxo),e(g2,DO),e(DO,fxo),e(g2,gxo),e(y,hxo),e(y,h2),e(h2,Khe),e(Khe,uxo),e(h2,pxo),e(h2,GO),e(GO,_xo),e(h2,bxo),e(y,vxo),e(y,u2),e(u2,Zhe),e(Zhe,Fxo),e(u2,Txo),e(u2,OO),e(OO,Mxo),e(u2,Exo),e(y,Cxo),e(y,p2),e(p2,eue),e(eue,wxo),e(p2,Axo),e(p2,VO),e(VO,Lxo),e(p2,yxo),e(y,xxo),e(y,_2),e(_2,oue),e(oue,$xo),e(_2,kxo),e(_2,XO),e(XO,Sxo),e(_2,Rxo),e(y,Pxo),e(y,b2),e(b2,rue),e(rue,Bxo),e(b2,Ixo),e(b2,zO),e(zO,Nxo),e(b2,qxo),e(y,jxo),e(y,v2),e(v2,tue),e(tue,Dxo),e(v2,Gxo),e(v2,WO),e(WO,Oxo),e(v2,Vxo),e(y,Xxo),e(y,F2),e(F2,aue),e(aue,zxo),e(F2,Wxo),e(F2,QO),e(QO,Qxo),e(F2,Uxo),e(y,Hxo),e(y,T2),e(T2,nue),e(nue,Jxo),e(T2,Yxo),e(T2,UO),e(UO,Kxo),e(T2,Zxo),e(y,e$o),e(y,M2),e(M2,sue),e(sue,o$o),e(M2,r$o),e(M2,HO),e(HO,t$o),e(M2,a$o),e(y,n$o),e(y,E2),e(E2,lue),e(lue,s$o),e(E2,l$o),e(E2,JO),e(JO,i$o),e(E2,d$o),e(y,c$o),e(y,C2),e(C2,iue),e(iue,m$o),e(C2,f$o),e(C2,YO),e(YO,g$o),e(C2,h$o),e(y,u$o),e(y,w2),e(w2,due),e(due,p$o),e(w2,_$o),e(w2,KO),e(KO,b$o),e(w2,v$o),e(y,F$o),e(y,A2),e(A2,cue),e(cue,T$o),e(A2,M$o),e(A2,ZO),e(ZO,E$o),e(A2,C$o),e(y,w$o),e(y,L2),e(L2,mue),e(mue,A$o),e(L2,L$o),e(L2,eV),e(eV,y$o),e(L2,x$o),e(y,$$o),e(y,y2),e(y2,fue),e(fue,k$o),e(y2,S$o),e(y2,oV),e(oV,R$o),e(y2,P$o),e(Ke,B$o),e(Ke,x2),e(x2,I$o),e(x2,gue),e(gue,N$o),e(x2,q$o),e(x2,hue),e(hue,j$o),e(Ke,D$o),M($2,Ke,null),b(m,JUe,_),b(m,nd,_),e(nd,k2),e(k2,uue),M(t9,uue,null),e(nd,G$o),e(nd,pue),e(pue,O$o),b(m,YUe,_),b(m,Ro,_),M(a9,Ro,null),e(Ro,V$o),e(Ro,sd),e(sd,X$o),e(sd,rV),e(rV,z$o),e(sd,W$o),e(sd,tV),e(tV,Q$o),e(sd,U$o),e(Ro,H$o),e(Ro,n9),e(n9,J$o),e(n9,_ue),e(_ue,Y$o),e(n9,K$o),e(Ro,Z$o),e(Ro,gt),M(s9,gt,null),e(gt,eko),e(gt,bue),e(bue,oko),e(gt,rko),e(gt,ld),e(ld,tko),e(ld,vue),e(vue,ako),e(ld,nko),e(ld,aV),e(aV,sko),e(ld,lko),e(gt,iko),M(S2,gt,null),e(Ro,dko),e(Ro,Ze),M(l9,Ze,null),e(Ze,cko),e(Ze,Fue),e(Fue,mko),e(Ze,fko),e(Ze,Xa),e(Xa,gko),e(Xa,Tue),e(Tue,hko),e(Xa,uko),e(Xa,Mue),e(Mue,pko),e(Xa,_ko),e(Xa,Eue),e(Eue,bko),e(Xa,vko),e(Ze,Fko),e(Ze,G),e(G,R2),e(R2,Cue),e(Cue,Tko),e(R2,Mko),e(R2,nV),e(nV,Eko),e(R2,Cko),e(G,wko),e(G,P2),e(P2,wue),e(wue,Ako),e(P2,Lko),e(P2,sV),e(sV,yko),e(P2,xko),e(G,$ko),e(G,B2),e(B2,Aue),e(Aue,kko),e(B2,Sko),e(B2,lV),e(lV,Rko),e(B2,Pko),e(G,Bko),e(G,I2),e(I2,Lue),e(Lue,Iko),e(I2,Nko),e(I2,iV),e(iV,qko),e(I2,jko),e(G,Dko),e(G,N2),e(N2,yue),e(yue,Gko),e(N2,Oko),e(N2,dV),e(dV,Vko),e(N2,Xko),e(G,zko),e(G,q2),e(q2,xue),e(xue,Wko),e(q2,Qko),e(q2,cV),e(cV,Uko),e(q2,Hko),e(G,Jko),e(G,j2),e(j2,$ue),e($ue,Yko),e(j2,Kko),e(j2,mV),e(mV,Zko),e(j2,eSo),e(G,oSo),e(G,D2),e(D2,kue),e(kue,rSo),e(D2,tSo),e(D2,fV),e(fV,aSo),e(D2,nSo),e(G,sSo),e(G,G2),e(G2,Sue),e(Sue,lSo),e(G2,iSo),e(G2,gV),e(gV,dSo),e(G2,cSo),e(G,mSo),e(G,O2),e(O2,Rue),e(Rue,fSo),e(O2,gSo),e(O2,hV),e(hV,hSo),e(O2,uSo),e(G,pSo),e(G,V2),e(V2,Pue),e(Pue,_So),e(V2,bSo),e(V2,uV),e(uV,vSo),e(V2,FSo),e(G,TSo),e(G,X2),e(X2,Bue),e(Bue,MSo),e(X2,ESo),e(X2,pV),e(pV,CSo),e(X2,wSo),e(G,ASo),e(G,z2),e(z2,Iue),e(Iue,LSo),e(z2,ySo),e(z2,_V),e(_V,xSo),e(z2,$So),e(G,kSo),e(G,W2),e(W2,Nue),e(Nue,SSo),e(W2,RSo),e(W2,bV),e(bV,PSo),e(W2,BSo),e(G,ISo),e(G,Q2),e(Q2,que),e(que,NSo),e(Q2,qSo),e(Q2,vV),e(vV,jSo),e(Q2,DSo),e(G,GSo),e(G,U2),e(U2,jue),e(jue,OSo),e(U2,VSo),e(U2,FV),e(FV,XSo),e(U2,zSo),e(G,WSo),e(G,H2),e(H2,Due),e(Due,QSo),e(H2,USo),e(H2,TV),e(TV,HSo),e(H2,JSo),e(G,YSo),e(G,J2),e(J2,Gue),e(Gue,KSo),e(J2,ZSo),e(J2,MV),e(MV,eRo),e(J2,oRo),e(G,rRo),e(G,Y2),e(Y2,Oue),e(Oue,tRo),e(Y2,aRo),e(Y2,EV),e(EV,nRo),e(Y2,sRo),e(G,lRo),e(G,K2),e(K2,Vue),e(Vue,iRo),e(K2,dRo),e(K2,CV),e(CV,cRo),e(K2,mRo),e(G,fRo),e(G,Z2),e(Z2,Xue),e(Xue,gRo),e(Z2,hRo),e(Z2,wV),e(wV,uRo),e(Z2,pRo),e(G,_Ro),e(G,eb),e(eb,zue),e(zue,bRo),e(eb,vRo),e(eb,AV),e(AV,FRo),e(eb,TRo),e(G,MRo),e(G,ob),e(ob,Wue),e(Wue,ERo),e(ob,CRo),e(ob,LV),e(LV,wRo),e(ob,ARo),e(G,LRo),e(G,rb),e(rb,Que),e(Que,yRo),e(rb,xRo),e(rb,yV),e(yV,$Ro),e(rb,kRo),e(G,SRo),e(G,tb),e(tb,Uue),e(Uue,RRo),e(tb,PRo),e(tb,xV),e(xV,BRo),e(tb,IRo),e(G,NRo),e(G,ab),e(ab,Hue),e(Hue,qRo),e(ab,jRo),e(ab,$V),e($V,DRo),e(ab,GRo),e(G,ORo),e(G,nb),e(nb,Jue),e(Jue,VRo),e(nb,XRo),e(nb,kV),e(kV,zRo),e(nb,WRo),e(G,QRo),e(G,sb),e(sb,Yue),e(Yue,URo),e(sb,HRo),e(sb,SV),e(SV,JRo),e(sb,YRo),e(G,KRo),e(G,lb),e(lb,Kue),e(Kue,ZRo),e(lb,ePo),e(lb,RV),e(RV,oPo),e(lb,rPo),e(G,tPo),e(G,ib),e(ib,Zue),e(Zue,aPo),e(ib,nPo),e(ib,PV),e(PV,sPo),e(ib,lPo),e(G,iPo),e(G,db),e(db,epe),e(epe,dPo),e(db,cPo),e(db,BV),e(BV,mPo),e(db,fPo),e(G,gPo),e(G,cb),e(cb,ope),e(ope,hPo),e(cb,uPo),e(cb,IV),e(IV,pPo),e(cb,_Po),e(G,bPo),e(G,mb),e(mb,rpe),e(rpe,vPo),e(mb,FPo),e(mb,NV),e(NV,TPo),e(mb,MPo),e(G,EPo),e(G,fb),e(fb,tpe),e(tpe,CPo),e(fb,wPo),e(fb,qV),e(qV,APo),e(fb,LPo),e(G,yPo),e(G,gb),e(gb,ape),e(ape,xPo),e(gb,$Po),e(gb,jV),e(jV,kPo),e(gb,SPo),e(G,RPo),e(G,hb),e(hb,npe),e(npe,PPo),e(hb,BPo),e(hb,DV),e(DV,IPo),e(hb,NPo),e(G,qPo),e(G,ub),e(ub,spe),e(spe,jPo),e(ub,DPo),e(ub,GV),e(GV,GPo),e(ub,OPo),e(G,VPo),e(G,pb),e(pb,lpe),e(lpe,XPo),e(pb,zPo),e(pb,OV),e(OV,WPo),e(pb,QPo),e(G,UPo),e(G,_b),e(_b,ipe),e(ipe,HPo),e(_b,JPo),e(_b,VV),e(VV,YPo),e(_b,KPo),e(G,ZPo),e(G,bb),e(bb,dpe),e(dpe,eBo),e(bb,oBo),e(bb,XV),e(XV,rBo),e(bb,tBo),e(G,aBo),e(G,vb),e(vb,cpe),e(cpe,nBo),e(vb,sBo),e(vb,zV),e(zV,lBo),e(vb,iBo),e(G,dBo),e(G,Fb),e(Fb,mpe),e(mpe,cBo),e(Fb,mBo),e(Fb,WV),e(WV,fBo),e(Fb,gBo),e(G,hBo),e(G,Tb),e(Tb,fpe),e(fpe,uBo),e(Tb,pBo),e(Tb,QV),e(QV,_Bo),e(Tb,bBo),e(G,vBo),e(G,Mb),e(Mb,gpe),e(gpe,FBo),e(Mb,TBo),e(Mb,UV),e(UV,MBo),e(Mb,EBo),e(G,CBo),e(G,Eb),e(Eb,hpe),e(hpe,wBo),e(Eb,ABo),e(Eb,HV),e(HV,LBo),e(Eb,yBo),e(G,xBo),e(G,Cb),e(Cb,upe),e(upe,$Bo),e(Cb,kBo),e(Cb,JV),e(JV,SBo),e(Cb,RBo),e(G,PBo),e(G,wb),e(wb,ppe),e(ppe,BBo),e(wb,IBo),e(wb,YV),e(YV,NBo),e(wb,qBo),e(Ze,jBo),e(Ze,Ab),e(Ab,DBo),e(Ab,_pe),e(_pe,GBo),e(Ab,OBo),e(Ab,bpe),e(bpe,VBo),e(Ze,XBo),M(Lb,Ze,null),b(m,KUe,_),b(m,id,_),e(id,yb),e(yb,vpe),M(i9,vpe,null),e(id,zBo),e(id,Fpe),e(Fpe,WBo),b(m,ZUe,_),b(m,Po,_),M(d9,Po,null),e(Po,QBo),e(Po,dd),e(dd,UBo),e(dd,KV),e(KV,HBo),e(dd,JBo),e(dd,ZV),e(ZV,YBo),e(dd,KBo),e(Po,ZBo),e(Po,c9),e(c9,eIo),e(c9,Tpe),e(Tpe,oIo),e(c9,rIo),e(Po,tIo),e(Po,ht),M(m9,ht,null),e(ht,aIo),e(ht,Mpe),e(Mpe,nIo),e(ht,sIo),e(ht,cd),e(cd,lIo),e(cd,Epe),e(Epe,iIo),e(cd,dIo),e(cd,eX),e(eX,cIo),e(cd,mIo),e(ht,fIo),M(xb,ht,null),e(Po,gIo),e(Po,eo),M(f9,eo,null),e(eo,hIo),e(eo,Cpe),e(Cpe,uIo),e(eo,pIo),e(eo,za),e(za,_Io),e(za,wpe),e(wpe,bIo),e(za,vIo),e(za,Ape),e(Ape,FIo),e(za,TIo),e(za,Lpe),e(Lpe,MIo),e(za,EIo),e(eo,CIo),e(eo,z),e(z,$b),e($b,ype),e(ype,wIo),e($b,AIo),e($b,oX),e(oX,LIo),e($b,yIo),e(z,xIo),e(z,kb),e(kb,xpe),e(xpe,$Io),e(kb,kIo),e(kb,rX),e(rX,SIo),e(kb,RIo),e(z,PIo),e(z,Sb),e(Sb,$pe),e($pe,BIo),e(Sb,IIo),e(Sb,tX),e(tX,NIo),e(Sb,qIo),e(z,jIo),e(z,Rb),e(Rb,kpe),e(kpe,DIo),e(Rb,GIo),e(Rb,aX),e(aX,OIo),e(Rb,VIo),e(z,XIo),e(z,Pb),e(Pb,Spe),e(Spe,zIo),e(Pb,WIo),e(Pb,nX),e(nX,QIo),e(Pb,UIo),e(z,HIo),e(z,Bb),e(Bb,Rpe),e(Rpe,JIo),e(Bb,YIo),e(Bb,sX),e(sX,KIo),e(Bb,ZIo),e(z,eNo),e(z,Ib),e(Ib,Ppe),e(Ppe,oNo),e(Ib,rNo),e(Ib,lX),e(lX,tNo),e(Ib,aNo),e(z,nNo),e(z,Nb),e(Nb,Bpe),e(Bpe,sNo),e(Nb,lNo),e(Nb,iX),e(iX,iNo),e(Nb,dNo),e(z,cNo),e(z,qb),e(qb,Ipe),e(Ipe,mNo),e(qb,fNo),e(qb,dX),e(dX,gNo),e(qb,hNo),e(z,uNo),e(z,jb),e(jb,Npe),e(Npe,pNo),e(jb,_No),e(jb,cX),e(cX,bNo),e(jb,vNo),e(z,FNo),e(z,Db),e(Db,qpe),e(qpe,TNo),e(Db,MNo),e(Db,mX),e(mX,ENo),e(Db,CNo),e(z,wNo),e(z,Gb),e(Gb,jpe),e(jpe,ANo),e(Gb,LNo),e(Gb,fX),e(fX,yNo),e(Gb,xNo),e(z,$No),e(z,Ob),e(Ob,Dpe),e(Dpe,kNo),e(Ob,SNo),e(Ob,gX),e(gX,RNo),e(Ob,PNo),e(z,BNo),e(z,Vb),e(Vb,Gpe),e(Gpe,INo),e(Vb,NNo),e(Vb,hX),e(hX,qNo),e(Vb,jNo),e(z,DNo),e(z,Xb),e(Xb,Ope),e(Ope,GNo),e(Xb,ONo),e(Xb,uX),e(uX,VNo),e(Xb,XNo),e(z,zNo),e(z,zb),e(zb,Vpe),e(Vpe,WNo),e(zb,QNo),e(zb,pX),e(pX,UNo),e(zb,HNo),e(z,JNo),e(z,Wb),e(Wb,Xpe),e(Xpe,YNo),e(Wb,KNo),e(Wb,_X),e(_X,ZNo),e(Wb,eqo),e(z,oqo),e(z,Qb),e(Qb,zpe),e(zpe,rqo),e(Qb,tqo),e(Qb,bX),e(bX,aqo),e(Qb,nqo),e(z,sqo),e(z,Ub),e(Ub,Wpe),e(Wpe,lqo),e(Ub,iqo),e(Ub,vX),e(vX,dqo),e(Ub,cqo),e(z,mqo),e(z,Hb),e(Hb,Qpe),e(Qpe,fqo),e(Hb,gqo),e(Hb,FX),e(FX,hqo),e(Hb,uqo),e(z,pqo),e(z,Jb),e(Jb,Upe),e(Upe,_qo),e(Jb,bqo),e(Jb,TX),e(TX,vqo),e(Jb,Fqo),e(z,Tqo),e(z,Yb),e(Yb,Hpe),e(Hpe,Mqo),e(Yb,Eqo),e(Yb,MX),e(MX,Cqo),e(Yb,wqo),e(z,Aqo),e(z,Kb),e(Kb,Jpe),e(Jpe,Lqo),e(Kb,yqo),e(Kb,EX),e(EX,xqo),e(Kb,$qo),e(z,kqo),e(z,Zb),e(Zb,Ype),e(Ype,Sqo),e(Zb,Rqo),e(Zb,CX),e(CX,Pqo),e(Zb,Bqo),e(z,Iqo),e(z,ev),e(ev,Kpe),e(Kpe,Nqo),e(ev,qqo),e(ev,wX),e(wX,jqo),e(ev,Dqo),e(z,Gqo),e(z,ov),e(ov,Zpe),e(Zpe,Oqo),e(ov,Vqo),e(ov,AX),e(AX,Xqo),e(ov,zqo),e(z,Wqo),e(z,rv),e(rv,e_e),e(e_e,Qqo),e(rv,Uqo),e(rv,LX),e(LX,Hqo),e(rv,Jqo),e(z,Yqo),e(z,tv),e(tv,o_e),e(o_e,Kqo),e(tv,Zqo),e(tv,yX),e(yX,ejo),e(tv,ojo),e(z,rjo),e(z,av),e(av,r_e),e(r_e,tjo),e(av,ajo),e(av,xX),e(xX,njo),e(av,sjo),e(z,ljo),e(z,nv),e(nv,t_e),e(t_e,ijo),e(nv,djo),e(nv,$X),e($X,cjo),e(nv,mjo),e(z,fjo),e(z,sv),e(sv,a_e),e(a_e,gjo),e(sv,hjo),e(sv,kX),e(kX,ujo),e(sv,pjo),e(z,_jo),e(z,lv),e(lv,n_e),e(n_e,bjo),e(lv,vjo),e(lv,SX),e(SX,Fjo),e(lv,Tjo),e(z,Mjo),e(z,iv),e(iv,s_e),e(s_e,Ejo),e(iv,Cjo),e(iv,RX),e(RX,wjo),e(iv,Ajo),e(z,Ljo),e(z,dv),e(dv,l_e),e(l_e,yjo),e(dv,xjo),e(dv,PX),e(PX,$jo),e(dv,kjo),e(z,Sjo),e(z,cv),e(cv,i_e),e(i_e,Rjo),e(cv,Pjo),e(cv,BX),e(BX,Bjo),e(cv,Ijo),e(z,Njo),e(z,mv),e(mv,d_e),e(d_e,qjo),e(mv,jjo),e(mv,IX),e(IX,Djo),e(mv,Gjo),e(z,Ojo),e(z,fv),e(fv,c_e),e(c_e,Vjo),e(fv,Xjo),e(fv,NX),e(NX,zjo),e(fv,Wjo),e(z,Qjo),e(z,gv),e(gv,m_e),e(m_e,Ujo),e(gv,Hjo),e(gv,qX),e(qX,Jjo),e(gv,Yjo),e(z,Kjo),e(z,hv),e(hv,f_e),e(f_e,Zjo),e(hv,eDo),e(hv,jX),e(jX,oDo),e(hv,rDo),e(z,tDo),e(z,uv),e(uv,g_e),e(g_e,aDo),e(uv,nDo),e(uv,DX),e(DX,sDo),e(uv,lDo),e(eo,iDo),e(eo,pv),e(pv,dDo),e(pv,h_e),e(h_e,cDo),e(pv,mDo),e(pv,u_e),e(u_e,fDo),e(eo,gDo),M(_v,eo,null),b(m,eHe,_),b(m,md,_),e(md,bv),e(bv,p_e),M(g9,p_e,null),e(md,hDo),e(md,__e),e(__e,uDo),b(m,oHe,_),b(m,Bo,_),M(h9,Bo,null),e(Bo,pDo),e(Bo,fd),e(fd,_Do),e(fd,GX),e(GX,bDo),e(fd,vDo),e(fd,OX),e(OX,FDo),e(fd,TDo),e(Bo,MDo),e(Bo,u9),e(u9,EDo),e(u9,b_e),e(b_e,CDo),e(u9,wDo),e(Bo,ADo),e(Bo,ut),M(p9,ut,null),e(ut,LDo),e(ut,v_e),e(v_e,yDo),e(ut,xDo),e(ut,gd),e(gd,$Do),e(gd,F_e),e(F_e,kDo),e(gd,SDo),e(gd,VX),e(VX,RDo),e(gd,PDo),e(ut,BDo),M(vv,ut,null),e(Bo,IDo),e(Bo,oo),M(_9,oo,null),e(oo,NDo),e(oo,T_e),e(T_e,qDo),e(oo,jDo),e(oo,Wa),e(Wa,DDo),e(Wa,M_e),e(M_e,GDo),e(Wa,ODo),e(Wa,E_e),e(E_e,VDo),e(Wa,XDo),e(Wa,C_e),e(C_e,zDo),e(Wa,WDo),e(oo,QDo),e(oo,U),e(U,Fv),e(Fv,w_e),e(w_e,UDo),e(Fv,HDo),e(Fv,XX),e(XX,JDo),e(Fv,YDo),e(U,KDo),e(U,Tv),e(Tv,A_e),e(A_e,ZDo),e(Tv,eGo),e(Tv,zX),e(zX,oGo),e(Tv,rGo),e(U,tGo),e(U,Mv),e(Mv,L_e),e(L_e,aGo),e(Mv,nGo),e(Mv,WX),e(WX,sGo),e(Mv,lGo),e(U,iGo),e(U,Ev),e(Ev,y_e),e(y_e,dGo),e(Ev,cGo),e(Ev,QX),e(QX,mGo),e(Ev,fGo),e(U,gGo),e(U,Cv),e(Cv,x_e),e(x_e,hGo),e(Cv,uGo),e(Cv,UX),e(UX,pGo),e(Cv,_Go),e(U,bGo),e(U,wv),e(wv,$_e),e($_e,vGo),e(wv,FGo),e(wv,HX),e(HX,TGo),e(wv,MGo),e(U,EGo),e(U,Av),e(Av,k_e),e(k_e,CGo),e(Av,wGo),e(Av,JX),e(JX,AGo),e(Av,LGo),e(U,yGo),e(U,Lv),e(Lv,S_e),e(S_e,xGo),e(Lv,$Go),e(Lv,YX),e(YX,kGo),e(Lv,SGo),e(U,RGo),e(U,yv),e(yv,R_e),e(R_e,PGo),e(yv,BGo),e(yv,KX),e(KX,IGo),e(yv,NGo),e(U,qGo),e(U,xv),e(xv,P_e),e(P_e,jGo),e(xv,DGo),e(xv,ZX),e(ZX,GGo),e(xv,OGo),e(U,VGo),e(U,$v),e($v,B_e),e(B_e,XGo),e($v,zGo),e($v,ez),e(ez,WGo),e($v,QGo),e(U,UGo),e(U,kv),e(kv,I_e),e(I_e,HGo),e(kv,JGo),e(kv,oz),e(oz,YGo),e(kv,KGo),e(U,ZGo),e(U,Sv),e(Sv,N_e),e(N_e,eOo),e(Sv,oOo),e(Sv,rz),e(rz,rOo),e(Sv,tOo),e(U,aOo),e(U,Rv),e(Rv,q_e),e(q_e,nOo),e(Rv,sOo),e(Rv,tz),e(tz,lOo),e(Rv,iOo),e(U,dOo),e(U,Pv),e(Pv,j_e),e(j_e,cOo),e(Pv,mOo),e(Pv,az),e(az,fOo),e(Pv,gOo),e(U,hOo),e(U,Bv),e(Bv,D_e),e(D_e,uOo),e(Bv,pOo),e(Bv,nz),e(nz,_Oo),e(Bv,bOo),e(U,vOo),e(U,Iv),e(Iv,G_e),e(G_e,FOo),e(Iv,TOo),e(Iv,sz),e(sz,MOo),e(Iv,EOo),e(U,COo),e(U,Nv),e(Nv,O_e),e(O_e,wOo),e(Nv,AOo),e(Nv,lz),e(lz,LOo),e(Nv,yOo),e(U,xOo),e(U,qv),e(qv,V_e),e(V_e,$Oo),e(qv,kOo),e(qv,iz),e(iz,SOo),e(qv,ROo),e(U,POo),e(U,jv),e(jv,X_e),e(X_e,BOo),e(jv,IOo),e(jv,dz),e(dz,NOo),e(jv,qOo),e(U,jOo),e(U,Dv),e(Dv,z_e),e(z_e,DOo),e(Dv,GOo),e(Dv,cz),e(cz,OOo),e(Dv,VOo),e(U,XOo),e(U,Gv),e(Gv,W_e),e(W_e,zOo),e(Gv,WOo),e(Gv,mz),e(mz,QOo),e(Gv,UOo),e(U,HOo),e(U,Ov),e(Ov,Q_e),e(Q_e,JOo),e(Ov,YOo),e(Ov,fz),e(fz,KOo),e(Ov,ZOo),e(U,eVo),e(U,Vv),e(Vv,U_e),e(U_e,oVo),e(Vv,rVo),e(Vv,gz),e(gz,tVo),e(Vv,aVo),e(U,nVo),e(U,Xv),e(Xv,H_e),e(H_e,sVo),e(Xv,lVo),e(Xv,hz),e(hz,iVo),e(Xv,dVo),e(U,cVo),e(U,zv),e(zv,J_e),e(J_e,mVo),e(zv,fVo),e(zv,uz),e(uz,gVo),e(zv,hVo),e(U,uVo),e(U,Wv),e(Wv,Y_e),e(Y_e,pVo),e(Wv,_Vo),e(Wv,pz),e(pz,bVo),e(Wv,vVo),e(U,FVo),e(U,Qv),e(Qv,K_e),e(K_e,TVo),e(Qv,MVo),e(Qv,_z),e(_z,EVo),e(Qv,CVo),e(U,wVo),e(U,Uv),e(Uv,Z_e),e(Z_e,AVo),e(Uv,LVo),e(Uv,bz),e(bz,yVo),e(Uv,xVo),e(U,$Vo),e(U,Hv),e(Hv,e2e),e(e2e,kVo),e(Hv,SVo),e(Hv,vz),e(vz,RVo),e(Hv,PVo),e(U,BVo),e(U,Jv),e(Jv,o2e),e(o2e,IVo),e(Jv,NVo),e(Jv,Fz),e(Fz,qVo),e(Jv,jVo),e(U,DVo),e(U,Yv),e(Yv,r2e),e(r2e,GVo),e(Yv,OVo),e(Yv,Tz),e(Tz,VVo),e(Yv,XVo),e(U,zVo),e(U,Kv),e(Kv,t2e),e(t2e,WVo),e(Kv,QVo),e(Kv,Mz),e(Mz,UVo),e(Kv,HVo),e(U,JVo),e(U,Zv),e(Zv,a2e),e(a2e,YVo),e(Zv,KVo),e(Zv,n2e),e(n2e,ZVo),e(Zv,eXo),e(U,oXo),e(U,e1),e(e1,s2e),e(s2e,rXo),e(e1,tXo),e(e1,Ez),e(Ez,aXo),e(e1,nXo),e(U,sXo),e(U,o1),e(o1,l2e),e(l2e,lXo),e(o1,iXo),e(o1,Cz),e(Cz,dXo),e(o1,cXo),e(U,mXo),e(U,r1),e(r1,i2e),e(i2e,fXo),e(r1,gXo),e(r1,wz),e(wz,hXo),e(r1,uXo),e(U,pXo),e(U,t1),e(t1,d2e),e(d2e,_Xo),e(t1,bXo),e(t1,Az),e(Az,vXo),e(t1,FXo),e(oo,TXo),e(oo,a1),e(a1,MXo),e(a1,c2e),e(c2e,EXo),e(a1,CXo),e(a1,m2e),e(m2e,wXo),e(oo,AXo),M(n1,oo,null),b(m,rHe,_),b(m,hd,_),e(hd,s1),e(s1,f2e),M(b9,f2e,null),e(hd,LXo),e(hd,g2e),e(g2e,yXo),b(m,tHe,_),b(m,Io,_),M(v9,Io,null),e(Io,xXo),e(Io,ud),e(ud,$Xo),e(ud,Lz),e(Lz,kXo),e(ud,SXo),e(ud,yz),e(yz,RXo),e(ud,PXo),e(Io,BXo),e(Io,F9),e(F9,IXo),e(F9,h2e),e(h2e,NXo),e(F9,qXo),e(Io,jXo),e(Io,pt),M(T9,pt,null),e(pt,DXo),e(pt,u2e),e(u2e,GXo),e(pt,OXo),e(pt,pd),e(pd,VXo),e(pd,p2e),e(p2e,XXo),e(pd,zXo),e(pd,xz),e(xz,WXo),e(pd,QXo),e(pt,UXo),M(l1,pt,null),e(Io,HXo),e(Io,ro),M(M9,ro,null),e(ro,JXo),e(ro,_2e),e(_2e,YXo),e(ro,KXo),e(ro,Qa),e(Qa,ZXo),e(Qa,b2e),e(b2e,ezo),e(Qa,ozo),e(Qa,v2e),e(v2e,rzo),e(Qa,tzo),e(Qa,F2e),e(F2e,azo),e(Qa,nzo),e(ro,szo),e(ro,me),e(me,i1),e(i1,T2e),e(T2e,lzo),e(i1,izo),e(i1,$z),e($z,dzo),e(i1,czo),e(me,mzo),e(me,d1),e(d1,M2e),e(M2e,fzo),e(d1,gzo),e(d1,kz),e(kz,hzo),e(d1,uzo),e(me,pzo),e(me,c1),e(c1,E2e),e(E2e,_zo),e(c1,bzo),e(c1,Sz),e(Sz,vzo),e(c1,Fzo),e(me,Tzo),e(me,m1),e(m1,C2e),e(C2e,Mzo),e(m1,Ezo),e(m1,Rz),e(Rz,Czo),e(m1,wzo),e(me,Azo),e(me,f1),e(f1,w2e),e(w2e,Lzo),e(f1,yzo),e(f1,Pz),e(Pz,xzo),e(f1,$zo),e(me,kzo),e(me,g1),e(g1,A2e),e(A2e,Szo),e(g1,Rzo),e(g1,Bz),e(Bz,Pzo),e(g1,Bzo),e(me,Izo),e(me,h1),e(h1,L2e),e(L2e,Nzo),e(h1,qzo),e(h1,Iz),e(Iz,jzo),e(h1,Dzo),e(me,Gzo),e(me,u1),e(u1,y2e),e(y2e,Ozo),e(u1,Vzo),e(u1,Nz),e(Nz,Xzo),e(u1,zzo),e(me,Wzo),e(me,p1),e(p1,x2e),e(x2e,Qzo),e(p1,Uzo),e(p1,qz),e(qz,Hzo),e(p1,Jzo),e(me,Yzo),e(me,_1),e(_1,$2e),e($2e,Kzo),e(_1,Zzo),e(_1,jz),e(jz,eWo),e(_1,oWo),e(me,rWo),e(me,b1),e(b1,k2e),e(k2e,tWo),e(b1,aWo),e(b1,Dz),e(Dz,nWo),e(b1,sWo),e(me,lWo),e(me,v1),e(v1,S2e),e(S2e,iWo),e(v1,dWo),e(v1,Gz),e(Gz,cWo),e(v1,mWo),e(me,fWo),e(me,F1),e(F1,R2e),e(R2e,gWo),e(F1,hWo),e(F1,Oz),e(Oz,uWo),e(F1,pWo),e(me,_Wo),e(me,T1),e(T1,P2e),e(P2e,bWo),e(T1,vWo),e(T1,Vz),e(Vz,FWo),e(T1,TWo),e(me,MWo),e(me,M1),e(M1,B2e),e(B2e,EWo),e(M1,CWo),e(M1,Xz),e(Xz,wWo),e(M1,AWo),e(me,LWo),e(me,E1),e(E1,I2e),e(I2e,yWo),e(E1,xWo),e(E1,zz),e(zz,$Wo),e(E1,kWo),e(me,SWo),e(me,C1),e(C1,N2e),e(N2e,RWo),e(C1,PWo),e(C1,Wz),e(Wz,BWo),e(C1,IWo),e(me,NWo),e(me,w1),e(w1,q2e),e(q2e,qWo),e(w1,jWo),e(w1,Qz),e(Qz,DWo),e(w1,GWo),e(me,OWo),e(me,A1),e(A1,j2e),e(j2e,VWo),e(A1,XWo),e(A1,Uz),e(Uz,zWo),e(A1,WWo),e(me,QWo),e(me,L1),e(L1,D2e),e(D2e,UWo),e(L1,HWo),e(L1,Hz),e(Hz,JWo),e(L1,YWo),e(ro,KWo),e(ro,y1),e(y1,ZWo),e(y1,G2e),e(G2e,eQo),e(y1,oQo),e(y1,O2e),e(O2e,rQo),e(ro,tQo),M(x1,ro,null),b(m,aHe,_),b(m,_d,_),e(_d,$1),e($1,V2e),M(E9,V2e,null),e(_d,aQo),e(_d,X2e),e(X2e,nQo),b(m,nHe,_),b(m,No,_),M(C9,No,null),e(No,sQo),e(No,bd),e(bd,lQo),e(bd,Jz),e(Jz,iQo),e(bd,dQo),e(bd,Yz),e(Yz,cQo),e(bd,mQo),e(No,fQo),e(No,w9),e(w9,gQo),e(w9,z2e),e(z2e,hQo),e(w9,uQo),e(No,pQo),e(No,_t),M(A9,_t,null),e(_t,_Qo),e(_t,W2e),e(W2e,bQo),e(_t,vQo),e(_t,vd),e(vd,FQo),e(vd,Q2e),e(Q2e,TQo),e(vd,MQo),e(vd,Kz),e(Kz,EQo),e(vd,CQo),e(_t,wQo),M(k1,_t,null),e(No,AQo),e(No,to),M(L9,to,null),e(to,LQo),e(to,U2e),e(U2e,yQo),e(to,xQo),e(to,Ua),e(Ua,$Qo),e(Ua,H2e),e(H2e,kQo),e(Ua,SQo),e(Ua,J2e),e(J2e,RQo),e(Ua,PQo),e(Ua,Y2e),e(Y2e,BQo),e(Ua,IQo),e(to,NQo),e(to,j),e(j,S1),e(S1,K2e),e(K2e,qQo),e(S1,jQo),e(S1,Zz),e(Zz,DQo),e(S1,GQo),e(j,OQo),e(j,R1),e(R1,Z2e),e(Z2e,VQo),e(R1,XQo),e(R1,eW),e(eW,zQo),e(R1,WQo),e(j,QQo),e(j,P1),e(P1,ebe),e(ebe,UQo),e(P1,HQo),e(P1,oW),e(oW,JQo),e(P1,YQo),e(j,KQo),e(j,B1),e(B1,obe),e(obe,ZQo),e(B1,eUo),e(B1,rW),e(rW,oUo),e(B1,rUo),e(j,tUo),e(j,I1),e(I1,rbe),e(rbe,aUo),e(I1,nUo),e(I1,tW),e(tW,sUo),e(I1,lUo),e(j,iUo),e(j,N1),e(N1,tbe),e(tbe,dUo),e(N1,cUo),e(N1,aW),e(aW,mUo),e(N1,fUo),e(j,gUo),e(j,q1),e(q1,abe),e(abe,hUo),e(q1,uUo),e(q1,nW),e(nW,pUo),e(q1,_Uo),e(j,bUo),e(j,j1),e(j1,nbe),e(nbe,vUo),e(j1,FUo),e(j1,sW),e(sW,TUo),e(j1,MUo),e(j,EUo),e(j,D1),e(D1,sbe),e(sbe,CUo),e(D1,wUo),e(D1,lW),e(lW,AUo),e(D1,LUo),e(j,yUo),e(j,G1),e(G1,lbe),e(lbe,xUo),e(G1,$Uo),e(G1,iW),e(iW,kUo),e(G1,SUo),e(j,RUo),e(j,O1),e(O1,ibe),e(ibe,PUo),e(O1,BUo),e(O1,dW),e(dW,IUo),e(O1,NUo),e(j,qUo),e(j,V1),e(V1,dbe),e(dbe,jUo),e(V1,DUo),e(V1,cW),e(cW,GUo),e(V1,OUo),e(j,VUo),e(j,X1),e(X1,cbe),e(cbe,XUo),e(X1,zUo),e(X1,mW),e(mW,WUo),e(X1,QUo),e(j,UUo),e(j,z1),e(z1,mbe),e(mbe,HUo),e(z1,JUo),e(z1,fW),e(fW,YUo),e(z1,KUo),e(j,ZUo),e(j,W1),e(W1,fbe),e(fbe,eHo),e(W1,oHo),e(W1,gW),e(gW,rHo),e(W1,tHo),e(j,aHo),e(j,Q1),e(Q1,gbe),e(gbe,nHo),e(Q1,sHo),e(Q1,hW),e(hW,lHo),e(Q1,iHo),e(j,dHo),e(j,U1),e(U1,hbe),e(hbe,cHo),e(U1,mHo),e(U1,uW),e(uW,fHo),e(U1,gHo),e(j,hHo),e(j,H1),e(H1,ube),e(ube,uHo),e(H1,pHo),e(H1,pW),e(pW,_Ho),e(H1,bHo),e(j,vHo),e(j,J1),e(J1,pbe),e(pbe,FHo),e(J1,THo),e(J1,_W),e(_W,MHo),e(J1,EHo),e(j,CHo),e(j,Y1),e(Y1,_be),e(_be,wHo),e(Y1,AHo),e(Y1,bW),e(bW,LHo),e(Y1,yHo),e(j,xHo),e(j,K1),e(K1,bbe),e(bbe,$Ho),e(K1,kHo),e(K1,vW),e(vW,SHo),e(K1,RHo),e(j,PHo),e(j,Z1),e(Z1,vbe),e(vbe,BHo),e(Z1,IHo),e(Z1,FW),e(FW,NHo),e(Z1,qHo),e(j,jHo),e(j,eF),e(eF,Fbe),e(Fbe,DHo),e(eF,GHo),e(eF,TW),e(TW,OHo),e(eF,VHo),e(j,XHo),e(j,oF),e(oF,Tbe),e(Tbe,zHo),e(oF,WHo),e(oF,MW),e(MW,QHo),e(oF,UHo),e(j,HHo),e(j,rF),e(rF,Mbe),e(Mbe,JHo),e(rF,YHo),e(rF,EW),e(EW,KHo),e(rF,ZHo),e(j,eJo),e(j,tF),e(tF,Ebe),e(Ebe,oJo),e(tF,rJo),e(tF,CW),e(CW,tJo),e(tF,aJo),e(j,nJo),e(j,aF),e(aF,Cbe),e(Cbe,sJo),e(aF,lJo),e(aF,wW),e(wW,iJo),e(aF,dJo),e(j,cJo),e(j,nF),e(nF,wbe),e(wbe,mJo),e(nF,fJo),e(nF,AW),e(AW,gJo),e(nF,hJo),e(j,uJo),e(j,sF),e(sF,Abe),e(Abe,pJo),e(sF,_Jo),e(sF,LW),e(LW,bJo),e(sF,vJo),e(j,FJo),e(j,lF),e(lF,Lbe),e(Lbe,TJo),e(lF,MJo),e(lF,yW),e(yW,EJo),e(lF,CJo),e(j,wJo),e(j,iF),e(iF,ybe),e(ybe,AJo),e(iF,LJo),e(iF,xW),e(xW,yJo),e(iF,xJo),e(j,$Jo),e(j,dF),e(dF,xbe),e(xbe,kJo),e(dF,SJo),e(dF,$W),e($W,RJo),e(dF,PJo),e(j,BJo),e(j,cF),e(cF,$be),e($be,IJo),e(cF,NJo),e(cF,kW),e(kW,qJo),e(cF,jJo),e(j,DJo),e(j,mF),e(mF,kbe),e(kbe,GJo),e(mF,OJo),e(mF,SW),e(SW,VJo),e(mF,XJo),e(j,zJo),e(j,fF),e(fF,Sbe),e(Sbe,WJo),e(fF,QJo),e(fF,RW),e(RW,UJo),e(fF,HJo),e(j,JJo),e(j,gF),e(gF,Rbe),e(Rbe,YJo),e(gF,KJo),e(gF,PW),e(PW,ZJo),e(gF,eYo),e(j,oYo),e(j,hF),e(hF,Pbe),e(Pbe,rYo),e(hF,tYo),e(hF,BW),e(BW,aYo),e(hF,nYo),e(j,sYo),e(j,uF),e(uF,Bbe),e(Bbe,lYo),e(uF,iYo),e(uF,IW),e(IW,dYo),e(uF,cYo),e(j,mYo),e(j,pF),e(pF,Ibe),e(Ibe,fYo),e(pF,gYo),e(pF,NW),e(NW,hYo),e(pF,uYo),e(j,pYo),e(j,_F),e(_F,Nbe),e(Nbe,_Yo),e(_F,bYo),e(_F,qW),e(qW,vYo),e(_F,FYo),e(j,TYo),e(j,bF),e(bF,qbe),e(qbe,MYo),e(bF,EYo),e(bF,jW),e(jW,CYo),e(bF,wYo),e(j,AYo),e(j,vF),e(vF,jbe),e(jbe,LYo),e(vF,yYo),e(vF,DW),e(DW,xYo),e(vF,$Yo),e(j,kYo),e(j,FF),e(FF,Dbe),e(Dbe,SYo),e(FF,RYo),e(FF,GW),e(GW,PYo),e(FF,BYo),e(j,IYo),e(j,TF),e(TF,Gbe),e(Gbe,NYo),e(TF,qYo),e(TF,OW),e(OW,jYo),e(TF,DYo),e(j,GYo),e(j,MF),e(MF,Obe),e(Obe,OYo),e(MF,VYo),e(MF,VW),e(VW,XYo),e(MF,zYo),e(j,WYo),e(j,EF),e(EF,Vbe),e(Vbe,QYo),e(EF,UYo),e(EF,XW),e(XW,HYo),e(EF,JYo),e(j,YYo),e(j,CF),e(CF,Xbe),e(Xbe,KYo),e(CF,ZYo),e(CF,zW),e(zW,eKo),e(CF,oKo),e(j,rKo),e(j,wF),e(wF,zbe),e(zbe,tKo),e(wF,aKo),e(wF,WW),e(WW,nKo),e(wF,sKo),e(j,lKo),e(j,AF),e(AF,Wbe),e(Wbe,iKo),e(AF,dKo),e(AF,QW),e(QW,cKo),e(AF,mKo),e(j,fKo),e(j,LF),e(LF,Qbe),e(Qbe,gKo),e(LF,hKo),e(LF,UW),e(UW,uKo),e(LF,pKo),e(j,_Ko),e(j,yF),e(yF,Ube),e(Ube,bKo),e(yF,vKo),e(yF,HW),e(HW,FKo),e(yF,TKo),e(j,MKo),e(j,xF),e(xF,Hbe),e(Hbe,EKo),e(xF,CKo),e(xF,JW),e(JW,wKo),e(xF,AKo),e(to,LKo),e(to,$F),e($F,yKo),e($F,Jbe),e(Jbe,xKo),e($F,$Ko),e($F,Ybe),e(Ybe,kKo),e(to,SKo),M(kF,to,null),b(m,sHe,_),b(m,Fd,_),e(Fd,SF),e(SF,Kbe),M(y9,Kbe,null),e(Fd,RKo),e(Fd,Zbe),e(Zbe,PKo),b(m,lHe,_),b(m,qo,_),M(x9,qo,null),e(qo,BKo),e(qo,Td),e(Td,IKo),e(Td,YW),e(YW,NKo),e(Td,qKo),e(Td,KW),e(KW,jKo),e(Td,DKo),e(qo,GKo),e(qo,$9),e($9,OKo),e($9,eve),e(eve,VKo),e($9,XKo),e(qo,zKo),e(qo,bt),M(k9,bt,null),e(bt,WKo),e(bt,ove),e(ove,QKo),e(bt,UKo),e(bt,Md),e(Md,HKo),e(Md,rve),e(rve,JKo),e(Md,YKo),e(Md,ZW),e(ZW,KKo),e(Md,ZKo),e(bt,eZo),M(RF,bt,null),e(qo,oZo),e(qo,ao),M(S9,ao,null),e(ao,rZo),e(ao,tve),e(tve,tZo),e(ao,aZo),e(ao,Ha),e(Ha,nZo),e(Ha,ave),e(ave,sZo),e(Ha,lZo),e(Ha,nve),e(nve,iZo),e(Ha,dZo),e(Ha,sve),e(sve,cZo),e(Ha,mZo),e(ao,fZo),e(ao,Z),e(Z,PF),e(PF,lve),e(lve,gZo),e(PF,hZo),e(PF,eQ),e(eQ,uZo),e(PF,pZo),e(Z,_Zo),e(Z,BF),e(BF,ive),e(ive,bZo),e(BF,vZo),e(BF,oQ),e(oQ,FZo),e(BF,TZo),e(Z,MZo),e(Z,IF),e(IF,dve),e(dve,EZo),e(IF,CZo),e(IF,rQ),e(rQ,wZo),e(IF,AZo),e(Z,LZo),e(Z,NF),e(NF,cve),e(cve,yZo),e(NF,xZo),e(NF,tQ),e(tQ,$Zo),e(NF,kZo),e(Z,SZo),e(Z,qF),e(qF,mve),e(mve,RZo),e(qF,PZo),e(qF,aQ),e(aQ,BZo),e(qF,IZo),e(Z,NZo),e(Z,jF),e(jF,fve),e(fve,qZo),e(jF,jZo),e(jF,nQ),e(nQ,DZo),e(jF,GZo),e(Z,OZo),e(Z,DF),e(DF,gve),e(gve,VZo),e(DF,XZo),e(DF,sQ),e(sQ,zZo),e(DF,WZo),e(Z,QZo),e(Z,GF),e(GF,hve),e(hve,UZo),e(GF,HZo),e(GF,lQ),e(lQ,JZo),e(GF,YZo),e(Z,KZo),e(Z,OF),e(OF,uve),e(uve,ZZo),e(OF,eer),e(OF,iQ),e(iQ,oer),e(OF,rer),e(Z,ter),e(Z,VF),e(VF,pve),e(pve,aer),e(VF,ner),e(VF,dQ),e(dQ,ser),e(VF,ler),e(Z,ier),e(Z,XF),e(XF,_ve),e(_ve,der),e(XF,cer),e(XF,cQ),e(cQ,mer),e(XF,fer),e(Z,ger),e(Z,zF),e(zF,bve),e(bve,her),e(zF,uer),e(zF,mQ),e(mQ,per),e(zF,_er),e(Z,ber),e(Z,WF),e(WF,vve),e(vve,ver),e(WF,Fer),e(WF,fQ),e(fQ,Ter),e(WF,Mer),e(Z,Eer),e(Z,QF),e(QF,Fve),e(Fve,Cer),e(QF,wer),e(QF,gQ),e(gQ,Aer),e(QF,Ler),e(Z,yer),e(Z,UF),e(UF,Tve),e(Tve,xer),e(UF,$er),e(UF,hQ),e(hQ,ker),e(UF,Ser),e(Z,Rer),e(Z,HF),e(HF,Mve),e(Mve,Per),e(HF,Ber),e(HF,uQ),e(uQ,Ier),e(HF,Ner),e(Z,qer),e(Z,JF),e(JF,Eve),e(Eve,jer),e(JF,Der),e(JF,pQ),e(pQ,Ger),e(JF,Oer),e(Z,Ver),e(Z,YF),e(YF,Cve),e(Cve,Xer),e(YF,zer),e(YF,_Q),e(_Q,Wer),e(YF,Qer),e(Z,Uer),e(Z,KF),e(KF,wve),e(wve,Her),e(KF,Jer),e(KF,bQ),e(bQ,Yer),e(KF,Ker),e(Z,Zer),e(Z,ZF),e(ZF,Ave),e(Ave,eor),e(ZF,oor),e(ZF,vQ),e(vQ,ror),e(ZF,tor),e(Z,aor),e(Z,eT),e(eT,Lve),e(Lve,nor),e(eT,sor),e(eT,FQ),e(FQ,lor),e(eT,ior),e(Z,dor),e(Z,oT),e(oT,yve),e(yve,cor),e(oT,mor),e(oT,TQ),e(TQ,gor),e(oT,hor),e(Z,uor),e(Z,rT),e(rT,xve),e(xve,por),e(rT,_or),e(rT,MQ),e(MQ,bor),e(rT,vor),e(Z,For),e(Z,tT),e(tT,$ve),e($ve,Tor),e(tT,Mor),e(tT,EQ),e(EQ,Eor),e(tT,Cor),e(Z,wor),e(Z,aT),e(aT,kve),e(kve,Aor),e(aT,Lor),e(aT,CQ),e(CQ,yor),e(aT,xor),e(Z,$or),e(Z,nT),e(nT,Sve),e(Sve,kor),e(nT,Sor),e(nT,wQ),e(wQ,Ror),e(nT,Por),e(Z,Bor),e(Z,sT),e(sT,Rve),e(Rve,Ior),e(sT,Nor),e(sT,AQ),e(AQ,qor),e(sT,jor),e(Z,Dor),e(Z,lT),e(lT,Pve),e(Pve,Gor),e(lT,Oor),e(lT,LQ),e(LQ,Vor),e(lT,Xor),e(Z,zor),e(Z,iT),e(iT,Bve),e(Bve,Wor),e(iT,Qor),e(iT,yQ),e(yQ,Uor),e(iT,Hor),e(Z,Jor),e(Z,dT),e(dT,Ive),e(Ive,Yor),e(dT,Kor),e(dT,xQ),e(xQ,Zor),e(dT,err),e(Z,orr),e(Z,cT),e(cT,Nve),e(Nve,rrr),e(cT,trr),e(cT,$Q),e($Q,arr),e(cT,nrr),e(ao,srr),e(ao,mT),e(mT,lrr),e(mT,qve),e(qve,irr),e(mT,drr),e(mT,jve),e(jve,crr),e(ao,mrr),M(fT,ao,null),b(m,iHe,_),b(m,Ed,_),e(Ed,gT),e(gT,Dve),M(R9,Dve,null),e(Ed,frr),e(Ed,Gve),e(Gve,grr),b(m,dHe,_),b(m,jo,_),M(P9,jo,null),e(jo,hrr),e(jo,Cd),e(Cd,urr),e(Cd,kQ),e(kQ,prr),e(Cd,_rr),e(Cd,SQ),e(SQ,brr),e(Cd,vrr),e(jo,Frr),e(jo,B9),e(B9,Trr),e(B9,Ove),e(Ove,Mrr),e(B9,Err),e(jo,Crr),e(jo,vt),M(I9,vt,null),e(vt,wrr),e(vt,Vve),e(Vve,Arr),e(vt,Lrr),e(vt,wd),e(wd,yrr),e(wd,Xve),e(Xve,xrr),e(wd,$rr),e(wd,RQ),e(RQ,krr),e(wd,Srr),e(vt,Rrr),M(hT,vt,null),e(jo,Prr),e(jo,no),M(N9,no,null),e(no,Brr),e(no,zve),e(zve,Irr),e(no,Nrr),e(no,Ja),e(Ja,qrr),e(Ja,Wve),e(Wve,jrr),e(Ja,Drr),e(Ja,Qve),e(Qve,Grr),e(Ja,Orr),e(Ja,Uve),e(Uve,Vrr),e(Ja,Xrr),e(no,zrr),e(no,Do),e(Do,uT),e(uT,Hve),e(Hve,Wrr),e(uT,Qrr),e(uT,PQ),e(PQ,Urr),e(uT,Hrr),e(Do,Jrr),e(Do,pT),e(pT,Jve),e(Jve,Yrr),e(pT,Krr),e(pT,BQ),e(BQ,Zrr),e(pT,etr),e(Do,otr),e(Do,_T),e(_T,Yve),e(Yve,rtr),e(_T,ttr),e(_T,IQ),e(IQ,atr),e(_T,ntr),e(Do,str),e(Do,bT),e(bT,Kve),e(Kve,ltr),e(bT,itr),e(bT,NQ),e(NQ,dtr),e(bT,ctr),e(Do,mtr),e(Do,vT),e(vT,Zve),e(Zve,ftr),e(vT,gtr),e(vT,qQ),e(qQ,htr),e(vT,utr),e(Do,ptr),e(Do,FT),e(FT,e1e),e(e1e,_tr),e(FT,btr),e(FT,jQ),e(jQ,vtr),e(FT,Ftr),e(no,Ttr),e(no,TT),e(TT,Mtr),e(TT,o1e),e(o1e,Etr),e(TT,Ctr),e(TT,r1e),e(r1e,wtr),e(no,Atr),M(MT,no,null),b(m,cHe,_),b(m,Ad,_),e(Ad,ET),e(ET,t1e),M(q9,t1e,null),e(Ad,Ltr),e(Ad,a1e),e(a1e,ytr),b(m,mHe,_),b(m,Go,_),M(j9,Go,null),e(Go,xtr),e(Go,Ld),e(Ld,$tr),e(Ld,DQ),e(DQ,ktr),e(Ld,Str),e(Ld,GQ),e(GQ,Rtr),e(Ld,Ptr),e(Go,Btr),e(Go,D9),e(D9,Itr),e(D9,n1e),e(n1e,Ntr),e(D9,qtr),e(Go,jtr),e(Go,Ft),M(G9,Ft,null),e(Ft,Dtr),e(Ft,s1e),e(s1e,Gtr),e(Ft,Otr),e(Ft,yd),e(yd,Vtr),e(yd,l1e),e(l1e,Xtr),e(yd,ztr),e(yd,OQ),e(OQ,Wtr),e(yd,Qtr),e(Ft,Utr),M(CT,Ft,null),e(Go,Htr),e(Go,so),M(O9,so,null),e(so,Jtr),e(so,i1e),e(i1e,Ytr),e(so,Ktr),e(so,Ya),e(Ya,Ztr),e(Ya,d1e),e(d1e,ear),e(Ya,oar),e(Ya,c1e),e(c1e,rar),e(Ya,tar),e(Ya,m1e),e(m1e,aar),e(Ya,nar),e(so,sar),e(so,H),e(H,wT),e(wT,f1e),e(f1e,lar),e(wT,iar),e(wT,VQ),e(VQ,dar),e(wT,car),e(H,mar),e(H,AT),e(AT,g1e),e(g1e,far),e(AT,gar),e(AT,XQ),e(XQ,har),e(AT,uar),e(H,par),e(H,LT),e(LT,h1e),e(h1e,_ar),e(LT,bar),e(LT,zQ),e(zQ,Far),e(LT,Tar),e(H,Mar),e(H,yT),e(yT,u1e),e(u1e,Ear),e(yT,Car),e(yT,WQ),e(WQ,war),e(yT,Aar),e(H,Lar),e(H,xT),e(xT,p1e),e(p1e,yar),e(xT,xar),e(xT,QQ),e(QQ,$ar),e(xT,kar),e(H,Sar),e(H,$T),e($T,_1e),e(_1e,Rar),e($T,Par),e($T,UQ),e(UQ,Bar),e($T,Iar),e(H,Nar),e(H,kT),e(kT,b1e),e(b1e,qar),e(kT,jar),e(kT,HQ),e(HQ,Dar),e(kT,Gar),e(H,Oar),e(H,ST),e(ST,v1e),e(v1e,Var),e(ST,Xar),e(ST,JQ),e(JQ,zar),e(ST,War),e(H,Qar),e(H,RT),e(RT,F1e),e(F1e,Uar),e(RT,Har),e(RT,YQ),e(YQ,Jar),e(RT,Yar),e(H,Kar),e(H,PT),e(PT,T1e),e(T1e,Zar),e(PT,enr),e(PT,KQ),e(KQ,onr),e(PT,rnr),e(H,tnr),e(H,BT),e(BT,M1e),e(M1e,anr),e(BT,nnr),e(BT,ZQ),e(ZQ,snr),e(BT,lnr),e(H,inr),e(H,IT),e(IT,E1e),e(E1e,dnr),e(IT,cnr),e(IT,eU),e(eU,mnr),e(IT,fnr),e(H,gnr),e(H,NT),e(NT,C1e),e(C1e,hnr),e(NT,unr),e(NT,oU),e(oU,pnr),e(NT,_nr),e(H,bnr),e(H,qT),e(qT,w1e),e(w1e,vnr),e(qT,Fnr),e(qT,rU),e(rU,Tnr),e(qT,Mnr),e(H,Enr),e(H,jT),e(jT,A1e),e(A1e,Cnr),e(jT,wnr),e(jT,tU),e(tU,Anr),e(jT,Lnr),e(H,ynr),e(H,DT),e(DT,L1e),e(L1e,xnr),e(DT,$nr),e(DT,aU),e(aU,knr),e(DT,Snr),e(H,Rnr),e(H,GT),e(GT,y1e),e(y1e,Pnr),e(GT,Bnr),e(GT,nU),e(nU,Inr),e(GT,Nnr),e(H,qnr),e(H,OT),e(OT,x1e),e(x1e,jnr),e(OT,Dnr),e(OT,sU),e(sU,Gnr),e(OT,Onr),e(H,Vnr),e(H,VT),e(VT,$1e),e($1e,Xnr),e(VT,znr),e(VT,lU),e(lU,Wnr),e(VT,Qnr),e(H,Unr),e(H,XT),e(XT,k1e),e(k1e,Hnr),e(XT,Jnr),e(XT,iU),e(iU,Ynr),e(XT,Knr),e(H,Znr),e(H,zT),e(zT,S1e),e(S1e,esr),e(zT,osr),e(zT,dU),e(dU,rsr),e(zT,tsr),e(H,asr),e(H,WT),e(WT,R1e),e(R1e,nsr),e(WT,ssr),e(WT,cU),e(cU,lsr),e(WT,isr),e(H,dsr),e(H,QT),e(QT,P1e),e(P1e,csr),e(QT,msr),e(QT,mU),e(mU,fsr),e(QT,gsr),e(H,hsr),e(H,UT),e(UT,B1e),e(B1e,usr),e(UT,psr),e(UT,fU),e(fU,_sr),e(UT,bsr),e(H,vsr),e(H,HT),e(HT,I1e),e(I1e,Fsr),e(HT,Tsr),e(HT,gU),e(gU,Msr),e(HT,Esr),e(H,Csr),e(H,JT),e(JT,N1e),e(N1e,wsr),e(JT,Asr),e(JT,hU),e(hU,Lsr),e(JT,ysr),e(H,xsr),e(H,YT),e(YT,q1e),e(q1e,$sr),e(YT,ksr),e(YT,uU),e(uU,Ssr),e(YT,Rsr),e(H,Psr),e(H,KT),e(KT,j1e),e(j1e,Bsr),e(KT,Isr),e(KT,pU),e(pU,Nsr),e(KT,qsr),e(H,jsr),e(H,ZT),e(ZT,D1e),e(D1e,Dsr),e(ZT,Gsr),e(ZT,_U),e(_U,Osr),e(ZT,Vsr),e(H,Xsr),e(H,eM),e(eM,G1e),e(G1e,zsr),e(eM,Wsr),e(eM,bU),e(bU,Qsr),e(eM,Usr),e(H,Hsr),e(H,oM),e(oM,O1e),e(O1e,Jsr),e(oM,Ysr),e(oM,vU),e(vU,Ksr),e(oM,Zsr),e(H,elr),e(H,rM),e(rM,V1e),e(V1e,olr),e(rM,rlr),e(rM,FU),e(FU,tlr),e(rM,alr),e(H,nlr),e(H,tM),e(tM,X1e),e(X1e,slr),e(tM,llr),e(tM,TU),e(TU,ilr),e(tM,dlr),e(H,clr),e(H,aM),e(aM,z1e),e(z1e,mlr),e(aM,flr),e(aM,MU),e(MU,glr),e(aM,hlr),e(H,ulr),e(H,nM),e(nM,W1e),e(W1e,plr),e(nM,_lr),e(nM,EU),e(EU,blr),e(nM,vlr),e(H,Flr),e(H,sM),e(sM,Q1e),e(Q1e,Tlr),e(sM,Mlr),e(sM,CU),e(CU,Elr),e(sM,Clr),e(H,wlr),e(H,lM),e(lM,U1e),e(U1e,Alr),e(lM,Llr),e(lM,wU),e(wU,ylr),e(lM,xlr),e(so,$lr),e(so,iM),e(iM,klr),e(iM,H1e),e(H1e,Slr),e(iM,Rlr),e(iM,J1e),e(J1e,Plr),e(so,Blr),M(dM,so,null),b(m,fHe,_),b(m,xd,_),e(xd,cM),e(cM,Y1e),M(V9,Y1e,null),e(xd,Ilr),e(xd,K1e),e(K1e,Nlr),b(m,gHe,_),b(m,Oo,_),M(X9,Oo,null),e(Oo,qlr),e(Oo,$d),e($d,jlr),e($d,AU),e(AU,Dlr),e($d,Glr),e($d,LU),e(LU,Olr),e($d,Vlr),e(Oo,Xlr),e(Oo,z9),e(z9,zlr),e(z9,Z1e),e(Z1e,Wlr),e(z9,Qlr),e(Oo,Ulr),e(Oo,Tt),M(W9,Tt,null),e(Tt,Hlr),e(Tt,eFe),e(eFe,Jlr),e(Tt,Ylr),e(Tt,kd),e(kd,Klr),e(kd,oFe),e(oFe,Zlr),e(kd,eir),e(kd,yU),e(yU,oir),e(kd,rir),e(Tt,tir),M(mM,Tt,null),e(Oo,air),e(Oo,lo),M(Q9,lo,null),e(lo,nir),e(lo,rFe),e(rFe,sir),e(lo,lir),e(lo,Ka),e(Ka,iir),e(Ka,tFe),e(tFe,dir),e(Ka,cir),e(Ka,aFe),e(aFe,mir),e(Ka,fir),e(Ka,nFe),e(nFe,gir),e(Ka,hir),e(lo,uir),e(lo,V),e(V,fM),e(fM,sFe),e(sFe,pir),e(fM,_ir),e(fM,xU),e(xU,bir),e(fM,vir),e(V,Fir),e(V,gM),e(gM,lFe),e(lFe,Tir),e(gM,Mir),e(gM,$U),e($U,Eir),e(gM,Cir),e(V,wir),e(V,hM),e(hM,iFe),e(iFe,Air),e(hM,Lir),e(hM,kU),e(kU,yir),e(hM,xir),e(V,$ir),e(V,uM),e(uM,dFe),e(dFe,kir),e(uM,Sir),e(uM,SU),e(SU,Rir),e(uM,Pir),e(V,Bir),e(V,pM),e(pM,cFe),e(cFe,Iir),e(pM,Nir),e(pM,RU),e(RU,qir),e(pM,jir),e(V,Dir),e(V,_M),e(_M,mFe),e(mFe,Gir),e(_M,Oir),e(_M,PU),e(PU,Vir),e(_M,Xir),e(V,zir),e(V,bM),e(bM,fFe),e(fFe,Wir),e(bM,Qir),e(bM,BU),e(BU,Uir),e(bM,Hir),e(V,Jir),e(V,vM),e(vM,gFe),e(gFe,Yir),e(vM,Kir),e(vM,IU),e(IU,Zir),e(vM,edr),e(V,odr),e(V,FM),e(FM,hFe),e(hFe,rdr),e(FM,tdr),e(FM,NU),e(NU,adr),e(FM,ndr),e(V,sdr),e(V,TM),e(TM,uFe),e(uFe,ldr),e(TM,idr),e(TM,qU),e(qU,ddr),e(TM,cdr),e(V,mdr),e(V,MM),e(MM,pFe),e(pFe,fdr),e(MM,gdr),e(MM,jU),e(jU,hdr),e(MM,udr),e(V,pdr),e(V,EM),e(EM,_Fe),e(_Fe,_dr),e(EM,bdr),e(EM,DU),e(DU,vdr),e(EM,Fdr),e(V,Tdr),e(V,CM),e(CM,bFe),e(bFe,Mdr),e(CM,Edr),e(CM,GU),e(GU,Cdr),e(CM,wdr),e(V,Adr),e(V,wM),e(wM,vFe),e(vFe,Ldr),e(wM,ydr),e(wM,OU),e(OU,xdr),e(wM,$dr),e(V,kdr),e(V,AM),e(AM,FFe),e(FFe,Sdr),e(AM,Rdr),e(AM,VU),e(VU,Pdr),e(AM,Bdr),e(V,Idr),e(V,LM),e(LM,TFe),e(TFe,Ndr),e(LM,qdr),e(LM,XU),e(XU,jdr),e(LM,Ddr),e(V,Gdr),e(V,yM),e(yM,MFe),e(MFe,Odr),e(yM,Vdr),e(yM,zU),e(zU,Xdr),e(yM,zdr),e(V,Wdr),e(V,xM),e(xM,EFe),e(EFe,Qdr),e(xM,Udr),e(xM,WU),e(WU,Hdr),e(xM,Jdr),e(V,Ydr),e(V,$M),e($M,CFe),e(CFe,Kdr),e($M,Zdr),e($M,QU),e(QU,ecr),e($M,ocr),e(V,rcr),e(V,kM),e(kM,wFe),e(wFe,tcr),e(kM,acr),e(kM,UU),e(UU,ncr),e(kM,scr),e(V,lcr),e(V,SM),e(SM,AFe),e(AFe,icr),e(SM,dcr),e(SM,HU),e(HU,ccr),e(SM,mcr),e(V,fcr),e(V,RM),e(RM,LFe),e(LFe,gcr),e(RM,hcr),e(RM,JU),e(JU,ucr),e(RM,pcr),e(V,_cr),e(V,PM),e(PM,yFe),e(yFe,bcr),e(PM,vcr),e(PM,YU),e(YU,Fcr),e(PM,Tcr),e(V,Mcr),e(V,BM),e(BM,xFe),e(xFe,Ecr),e(BM,Ccr),e(BM,KU),e(KU,wcr),e(BM,Acr),e(V,Lcr),e(V,IM),e(IM,$Fe),e($Fe,ycr),e(IM,xcr),e(IM,ZU),e(ZU,$cr),e(IM,kcr),e(V,Scr),e(V,NM),e(NM,kFe),e(kFe,Rcr),e(NM,Pcr),e(NM,eH),e(eH,Bcr),e(NM,Icr),e(V,Ncr),e(V,qM),e(qM,SFe),e(SFe,qcr),e(qM,jcr),e(qM,oH),e(oH,Dcr),e(qM,Gcr),e(V,Ocr),e(V,jM),e(jM,RFe),e(RFe,Vcr),e(jM,Xcr),e(jM,rH),e(rH,zcr),e(jM,Wcr),e(V,Qcr),e(V,DM),e(DM,PFe),e(PFe,Ucr),e(DM,Hcr),e(DM,tH),e(tH,Jcr),e(DM,Ycr),e(V,Kcr),e(V,GM),e(GM,BFe),e(BFe,Zcr),e(GM,emr),e(GM,aH),e(aH,omr),e(GM,rmr),e(V,tmr),e(V,OM),e(OM,IFe),e(IFe,amr),e(OM,nmr),e(OM,nH),e(nH,smr),e(OM,lmr),e(V,imr),e(V,VM),e(VM,NFe),e(NFe,dmr),e(VM,cmr),e(VM,sH),e(sH,mmr),e(VM,fmr),e(V,gmr),e(V,XM),e(XM,qFe),e(qFe,hmr),e(XM,umr),e(XM,lH),e(lH,pmr),e(XM,_mr),e(V,bmr),e(V,zM),e(zM,jFe),e(jFe,vmr),e(zM,Fmr),e(zM,iH),e(iH,Tmr),e(zM,Mmr),e(V,Emr),e(V,WM),e(WM,DFe),e(DFe,Cmr),e(WM,wmr),e(WM,dH),e(dH,Amr),e(WM,Lmr),e(V,ymr),e(V,QM),e(QM,GFe),e(GFe,xmr),e(QM,$mr),e(QM,cH),e(cH,kmr),e(QM,Smr),e(V,Rmr),e(V,UM),e(UM,OFe),e(OFe,Pmr),e(UM,Bmr),e(UM,mH),e(mH,Imr),e(UM,Nmr),e(V,qmr),e(V,HM),e(HM,VFe),e(VFe,jmr),e(HM,Dmr),e(HM,fH),e(fH,Gmr),e(HM,Omr),e(V,Vmr),e(V,JM),e(JM,XFe),e(XFe,Xmr),e(JM,zmr),e(JM,gH),e(gH,Wmr),e(JM,Qmr),e(V,Umr),e(V,YM),e(YM,zFe),e(zFe,Hmr),e(YM,Jmr),e(YM,hH),e(hH,Ymr),e(YM,Kmr),e(V,Zmr),e(V,KM),e(KM,WFe),e(WFe,efr),e(KM,ofr),e(KM,uH),e(uH,rfr),e(KM,tfr),e(V,afr),e(V,ZM),e(ZM,QFe),e(QFe,nfr),e(ZM,sfr),e(ZM,pH),e(pH,lfr),e(ZM,ifr),e(V,dfr),e(V,eE),e(eE,UFe),e(UFe,cfr),e(eE,mfr),e(eE,_H),e(_H,ffr),e(eE,gfr),e(lo,hfr),e(lo,oE),e(oE,ufr),e(oE,HFe),e(HFe,pfr),e(oE,_fr),e(oE,JFe),e(JFe,bfr),e(lo,vfr),M(rE,lo,null),b(m,hHe,_),b(m,Sd,_),e(Sd,tE),e(tE,YFe),M(U9,YFe,null),e(Sd,Ffr),e(Sd,KFe),e(KFe,Tfr),b(m,uHe,_),b(m,Vo,_),M(H9,Vo,null),e(Vo,Mfr),e(Vo,Rd),e(Rd,Efr),e(Rd,bH),e(bH,Cfr),e(Rd,wfr),e(Rd,vH),e(vH,Afr),e(Rd,Lfr),e(Vo,yfr),e(Vo,J9),e(J9,xfr),e(J9,ZFe),e(ZFe,$fr),e(J9,kfr),e(Vo,Sfr),e(Vo,Mt),M(Y9,Mt,null),e(Mt,Rfr),e(Mt,eTe),e(eTe,Pfr),e(Mt,Bfr),e(Mt,Pd),e(Pd,Ifr),e(Pd,oTe),e(oTe,Nfr),e(Pd,qfr),e(Pd,FH),e(FH,jfr),e(Pd,Dfr),e(Mt,Gfr),M(aE,Mt,null),e(Vo,Ofr),e(Vo,io),M(K9,io,null),e(io,Vfr),e(io,rTe),e(rTe,Xfr),e(io,zfr),e(io,Za),e(Za,Wfr),e(Za,tTe),e(tTe,Qfr),e(Za,Ufr),e(Za,aTe),e(aTe,Hfr),e(Za,Jfr),e(Za,nTe),e(nTe,Yfr),e(Za,Kfr),e(io,Zfr),e(io,sTe),e(sTe,nE),e(nE,lTe),e(lTe,egr),e(nE,ogr),e(nE,TH),e(TH,rgr),e(nE,tgr),e(io,agr),e(io,sE),e(sE,ngr),e(sE,iTe),e(iTe,sgr),e(sE,lgr),e(sE,dTe),e(dTe,igr),e(io,dgr),M(lE,io,null),b(m,pHe,_),b(m,Bd,_),e(Bd,iE),e(iE,cTe),M(Z9,cTe,null),e(Bd,cgr),e(Bd,mTe),e(mTe,mgr),b(m,_He,_),b(m,Xo,_),M(ex,Xo,null),e(Xo,fgr),e(Xo,Id),e(Id,ggr),e(Id,MH),e(MH,hgr),e(Id,ugr),e(Id,EH),e(EH,pgr),e(Id,_gr),e(Xo,bgr),e(Xo,ox),e(ox,vgr),e(ox,fTe),e(fTe,Fgr),e(ox,Tgr),e(Xo,Mgr),e(Xo,Et),M(rx,Et,null),e(Et,Egr),e(Et,gTe),e(gTe,Cgr),e(Et,wgr),e(Et,Nd),e(Nd,Agr),e(Nd,hTe),e(hTe,Lgr),e(Nd,ygr),e(Nd,CH),e(CH,xgr),e(Nd,$gr),e(Et,kgr),M(dE,Et,null),e(Xo,Sgr),e(Xo,co),M(tx,co,null),e(co,Rgr),e(co,uTe),e(uTe,Pgr),e(co,Bgr),e(co,en),e(en,Igr),e(en,pTe),e(pTe,Ngr),e(en,qgr),e(en,_Te),e(_Te,jgr),e(en,Dgr),e(en,bTe),e(bTe,Ggr),e(en,Ogr),e(co,Vgr),e(co,be),e(be,cE),e(cE,vTe),e(vTe,Xgr),e(cE,zgr),e(cE,wH),e(wH,Wgr),e(cE,Qgr),e(be,Ugr),e(be,mE),e(mE,FTe),e(FTe,Hgr),e(mE,Jgr),e(mE,AH),e(AH,Ygr),e(mE,Kgr),e(be,Zgr),e(be,fE),e(fE,TTe),e(TTe,ehr),e(fE,ohr),e(fE,LH),e(LH,rhr),e(fE,thr),e(be,ahr),e(be,gE),e(gE,MTe),e(MTe,nhr),e(gE,shr),e(gE,yH),e(yH,lhr),e(gE,ihr),e(be,dhr),e(be,sl),e(sl,ETe),e(ETe,chr),e(sl,mhr),e(sl,xH),e(xH,fhr),e(sl,ghr),e(sl,$H),e($H,hhr),e(sl,uhr),e(be,phr),e(be,hE),e(hE,CTe),e(CTe,_hr),e(hE,bhr),e(hE,kH),e(kH,vhr),e(hE,Fhr),e(be,Thr),e(be,ll),e(ll,wTe),e(wTe,Mhr),e(ll,Ehr),e(ll,SH),e(SH,Chr),e(ll,whr),e(ll,RH),e(RH,Ahr),e(ll,Lhr),e(be,yhr),e(be,uE),e(uE,ATe),e(ATe,xhr),e(uE,$hr),e(uE,PH),e(PH,khr),e(uE,Shr),e(be,Rhr),e(be,Ct),e(Ct,LTe),e(LTe,Phr),e(Ct,Bhr),e(Ct,BH),e(BH,Ihr),e(Ct,Nhr),e(Ct,IH),e(IH,qhr),e(Ct,jhr),e(Ct,NH),e(NH,Dhr),e(Ct,Ghr),e(be,Ohr),e(be,pE),e(pE,yTe),e(yTe,Vhr),e(pE,Xhr),e(pE,qH),e(qH,zhr),e(pE,Whr),e(be,Qhr),e(be,_E),e(_E,xTe),e(xTe,Uhr),e(_E,Hhr),e(_E,jH),e(jH,Jhr),e(_E,Yhr),e(be,Khr),e(be,bE),e(bE,$Te),e($Te,Zhr),e(bE,eur),e(bE,DH),e(DH,our),e(bE,rur),e(be,tur),e(be,vE),e(vE,kTe),e(kTe,aur),e(vE,nur),e(vE,GH),e(GH,sur),e(vE,lur),e(be,iur),e(be,FE),e(FE,STe),e(STe,dur),e(FE,cur),e(FE,OH),e(OH,mur),e(FE,fur),e(be,gur),e(be,TE),e(TE,RTe),e(RTe,hur),e(TE,uur),e(TE,VH),e(VH,pur),e(TE,_ur),e(be,bur),e(be,ME),e(ME,PTe),e(PTe,vur),e(ME,Fur),e(ME,XH),e(XH,Tur),e(ME,Mur),e(be,Eur),e(be,EE),e(EE,BTe),e(BTe,Cur),e(EE,wur),e(EE,zH),e(zH,Aur),e(EE,Lur),e(co,yur),e(co,CE),e(CE,xur),e(CE,ITe),e(ITe,$ur),e(CE,kur),e(CE,NTe),e(NTe,Sur),e(co,Rur),M(wE,co,null),b(m,bHe,_),b(m,qd,_),e(qd,AE),e(AE,qTe),M(ax,qTe,null),e(qd,Pur),e(qd,jTe),e(jTe,Bur),b(m,vHe,_),b(m,zo,_),M(nx,zo,null),e(zo,Iur),e(zo,jd),e(jd,Nur),e(jd,WH),e(WH,qur),e(jd,jur),e(jd,QH),e(QH,Dur),e(jd,Gur),e(zo,Our),e(zo,sx),e(sx,Vur),e(sx,DTe),e(DTe,Xur),e(sx,zur),e(zo,Wur),e(zo,wt),M(lx,wt,null),e(wt,Qur),e(wt,GTe),e(GTe,Uur),e(wt,Hur),e(wt,Dd),e(Dd,Jur),e(Dd,OTe),e(OTe,Yur),e(Dd,Kur),e(Dd,UH),e(UH,Zur),e(Dd,epr),e(wt,opr),M(LE,wt,null),e(zo,rpr),e(zo,mo),M(ix,mo,null),e(mo,tpr),e(mo,VTe),e(VTe,apr),e(mo,npr),e(mo,on),e(on,spr),e(on,XTe),e(XTe,lpr),e(on,ipr),e(on,zTe),e(zTe,dpr),e(on,cpr),e(on,WTe),e(WTe,mpr),e(on,fpr),e(mo,gpr),e(mo,QTe),e(QTe,yE),e(yE,UTe),e(UTe,hpr),e(yE,upr),e(yE,HH),e(HH,ppr),e(yE,_pr),e(mo,bpr),e(mo,xE),e(xE,vpr),e(xE,HTe),e(HTe,Fpr),e(xE,Tpr),e(xE,JTe),e(JTe,Mpr),e(mo,Epr),M($E,mo,null),b(m,FHe,_),b(m,Gd,_),e(Gd,kE),e(kE,YTe),M(dx,YTe,null),e(Gd,Cpr),e(Gd,KTe),e(KTe,wpr),b(m,THe,_),b(m,Wo,_),M(cx,Wo,null),e(Wo,Apr),e(Wo,Od),e(Od,Lpr),e(Od,JH),e(JH,ypr),e(Od,xpr),e(Od,YH),e(YH,$pr),e(Od,kpr),e(Wo,Spr),e(Wo,mx),e(mx,Rpr),e(mx,ZTe),e(ZTe,Ppr),e(mx,Bpr),e(Wo,Ipr),e(Wo,At),M(fx,At,null),e(At,Npr),e(At,eMe),e(eMe,qpr),e(At,jpr),e(At,Vd),e(Vd,Dpr),e(Vd,oMe),e(oMe,Gpr),e(Vd,Opr),e(Vd,KH),e(KH,Vpr),e(Vd,Xpr),e(At,zpr),M(SE,At,null),e(Wo,Wpr),e(Wo,fo),M(gx,fo,null),e(fo,Qpr),e(fo,rMe),e(rMe,Upr),e(fo,Hpr),e(fo,rn),e(rn,Jpr),e(rn,tMe),e(tMe,Ypr),e(rn,Kpr),e(rn,aMe),e(aMe,Zpr),e(rn,e_r),e(rn,nMe),e(nMe,o_r),e(rn,r_r),e(fo,t_r),e(fo,sMe),e(sMe,RE),e(RE,lMe),e(lMe,a_r),e(RE,n_r),e(RE,ZH),e(ZH,s_r),e(RE,l_r),e(fo,i_r),e(fo,PE),e(PE,d_r),e(PE,iMe),e(iMe,c_r),e(PE,m_r),e(PE,dMe),e(dMe,f_r),e(fo,g_r),M(BE,fo,null),b(m,MHe,_),b(m,Xd,_),e(Xd,IE),e(IE,cMe),M(hx,cMe,null),e(Xd,h_r),e(Xd,mMe),e(mMe,u_r),b(m,EHe,_),b(m,Qo,_),M(ux,Qo,null),e(Qo,p_r),e(Qo,zd),e(zd,__r),e(zd,eJ),e(eJ,b_r),e(zd,v_r),e(zd,oJ),e(oJ,F_r),e(zd,T_r),e(Qo,M_r),e(Qo,px),e(px,E_r),e(px,fMe),e(fMe,C_r),e(px,w_r),e(Qo,A_r),e(Qo,Lt),M(_x,Lt,null),e(Lt,L_r),e(Lt,gMe),e(gMe,y_r),e(Lt,x_r),e(Lt,Wd),e(Wd,$_r),e(Wd,hMe),e(hMe,k_r),e(Wd,S_r),e(Wd,rJ),e(rJ,R_r),e(Wd,P_r),e(Lt,B_r),M(NE,Lt,null),e(Qo,I_r),e(Qo,go),M(bx,go,null),e(go,N_r),e(go,uMe),e(uMe,q_r),e(go,j_r),e(go,tn),e(tn,D_r),e(tn,pMe),e(pMe,G_r),e(tn,O_r),e(tn,_Me),e(_Me,V_r),e(tn,X_r),e(tn,bMe),e(bMe,z_r),e(tn,W_r),e(go,Q_r),e(go,vMe),e(vMe,qE),e(qE,FMe),e(FMe,U_r),e(qE,H_r),e(qE,tJ),e(tJ,J_r),e(qE,Y_r),e(go,K_r),e(go,jE),e(jE,Z_r),e(jE,TMe),e(TMe,e2r),e(jE,o2r),e(jE,MMe),e(MMe,r2r),e(go,t2r),M(DE,go,null),b(m,CHe,_),b(m,Qd,_),e(Qd,GE),e(GE,EMe),M(vx,EMe,null),e(Qd,a2r),e(Qd,CMe),e(CMe,n2r),b(m,wHe,_),b(m,Uo,_),M(Fx,Uo,null),e(Uo,s2r),e(Uo,Ud),e(Ud,l2r),e(Ud,aJ),e(aJ,i2r),e(Ud,d2r),e(Ud,nJ),e(nJ,c2r),e(Ud,m2r),e(Uo,f2r),e(Uo,Tx),e(Tx,g2r),e(Tx,wMe),e(wMe,h2r),e(Tx,u2r),e(Uo,p2r),e(Uo,yt),M(Mx,yt,null),e(yt,_2r),e(yt,AMe),e(AMe,b2r),e(yt,v2r),e(yt,Hd),e(Hd,F2r),e(Hd,LMe),e(LMe,T2r),e(Hd,M2r),e(Hd,sJ),e(sJ,E2r),e(Hd,C2r),e(yt,w2r),M(OE,yt,null),e(Uo,A2r),e(Uo,ho),M(Ex,ho,null),e(ho,L2r),e(ho,yMe),e(yMe,y2r),e(ho,x2r),e(ho,an),e(an,$2r),e(an,xMe),e(xMe,k2r),e(an,S2r),e(an,$Me),e($Me,R2r),e(an,P2r),e(an,kMe),e(kMe,B2r),e(an,I2r),e(ho,N2r),e(ho,Pe),e(Pe,VE),e(VE,SMe),e(SMe,q2r),e(VE,j2r),e(VE,lJ),e(lJ,D2r),e(VE,G2r),e(Pe,O2r),e(Pe,XE),e(XE,RMe),e(RMe,V2r),e(XE,X2r),e(XE,iJ),e(iJ,z2r),e(XE,W2r),e(Pe,Q2r),e(Pe,zE),e(zE,PMe),e(PMe,U2r),e(zE,H2r),e(zE,dJ),e(dJ,J2r),e(zE,Y2r),e(Pe,K2r),e(Pe,WE),e(WE,BMe),e(BMe,Z2r),e(WE,ebr),e(WE,cJ),e(cJ,obr),e(WE,rbr),e(Pe,tbr),e(Pe,QE),e(QE,IMe),e(IMe,abr),e(QE,nbr),e(QE,mJ),e(mJ,sbr),e(QE,lbr),e(Pe,ibr),e(Pe,UE),e(UE,NMe),e(NMe,dbr),e(UE,cbr),e(UE,fJ),e(fJ,mbr),e(UE,fbr),e(Pe,gbr),e(Pe,HE),e(HE,qMe),e(qMe,hbr),e(HE,ubr),e(HE,gJ),e(gJ,pbr),e(HE,_br),e(Pe,bbr),e(Pe,JE),e(JE,jMe),e(jMe,vbr),e(JE,Fbr),e(JE,hJ),e(hJ,Tbr),e(JE,Mbr),e(Pe,Ebr),e(Pe,YE),e(YE,DMe),e(DMe,Cbr),e(YE,wbr),e(YE,uJ),e(uJ,Abr),e(YE,Lbr),e(ho,ybr),e(ho,KE),e(KE,xbr),e(KE,GMe),e(GMe,$br),e(KE,kbr),e(KE,OMe),e(OMe,Sbr),e(ho,Rbr),M(ZE,ho,null),b(m,AHe,_),b(m,Jd,_),e(Jd,e4),e(e4,VMe),M(Cx,VMe,null),e(Jd,Pbr),e(Jd,XMe),e(XMe,Bbr),b(m,LHe,_),b(m,Ho,_),M(wx,Ho,null),e(Ho,Ibr),e(Ho,Yd),e(Yd,Nbr),e(Yd,pJ),e(pJ,qbr),e(Yd,jbr),e(Yd,_J),e(_J,Dbr),e(Yd,Gbr),e(Ho,Obr),e(Ho,Ax),e(Ax,Vbr),e(Ax,zMe),e(zMe,Xbr),e(Ax,zbr),e(Ho,Wbr),e(Ho,xt),M(Lx,xt,null),e(xt,Qbr),e(xt,WMe),e(WMe,Ubr),e(xt,Hbr),e(xt,Kd),e(Kd,Jbr),e(Kd,QMe),e(QMe,Ybr),e(Kd,Kbr),e(Kd,bJ),e(bJ,Zbr),e(Kd,evr),e(xt,ovr),M(o4,xt,null),e(Ho,rvr),e(Ho,uo),M(yx,uo,null),e(uo,tvr),e(uo,UMe),e(UMe,avr),e(uo,nvr),e(uo,nn),e(nn,svr),e(nn,HMe),e(HMe,lvr),e(nn,ivr),e(nn,JMe),e(JMe,dvr),e(nn,cvr),e(nn,YMe),e(YMe,mvr),e(nn,fvr),e(uo,gvr),e(uo,st),e(st,r4),e(r4,KMe),e(KMe,hvr),e(r4,uvr),e(r4,vJ),e(vJ,pvr),e(r4,_vr),e(st,bvr),e(st,t4),e(t4,ZMe),e(ZMe,vvr),e(t4,Fvr),e(t4,FJ),e(FJ,Tvr),e(t4,Mvr),e(st,Evr),e(st,a4),e(a4,eEe),e(eEe,Cvr),e(a4,wvr),e(a4,TJ),e(TJ,Avr),e(a4,Lvr),e(st,yvr),e(st,n4),e(n4,oEe),e(oEe,xvr),e(n4,$vr),e(n4,MJ),e(MJ,kvr),e(n4,Svr),e(st,Rvr),e(st,s4),e(s4,rEe),e(rEe,Pvr),e(s4,Bvr),e(s4,EJ),e(EJ,Ivr),e(s4,Nvr),e(uo,qvr),e(uo,l4),e(l4,jvr),e(l4,tEe),e(tEe,Dvr),e(l4,Gvr),e(l4,aEe),e(aEe,Ovr),e(uo,Vvr),M(i4,uo,null),b(m,yHe,_),b(m,Zd,_),e(Zd,d4),e(d4,nEe),M(xx,nEe,null),e(Zd,Xvr),e(Zd,sEe),e(sEe,zvr),b(m,xHe,_),b(m,Jo,_),M($x,Jo,null),e(Jo,Wvr),e(Jo,ec),e(ec,Qvr),e(ec,CJ),e(CJ,Uvr),e(ec,Hvr),e(ec,wJ),e(wJ,Jvr),e(ec,Yvr),e(Jo,Kvr),e(Jo,kx),e(kx,Zvr),e(kx,lEe),e(lEe,e1r),e(kx,o1r),e(Jo,r1r),e(Jo,$t),M(Sx,$t,null),e($t,t1r),e($t,iEe),e(iEe,a1r),e($t,n1r),e($t,oc),e(oc,s1r),e(oc,dEe),e(dEe,l1r),e(oc,i1r),e(oc,AJ),e(AJ,d1r),e(oc,c1r),e($t,m1r),M(c4,$t,null),e(Jo,f1r),e(Jo,po),M(Rx,po,null),e(po,g1r),e(po,cEe),e(cEe,h1r),e(po,u1r),e(po,sn),e(sn,p1r),e(sn,mEe),e(mEe,_1r),e(sn,b1r),e(sn,fEe),e(fEe,v1r),e(sn,F1r),e(sn,gEe),e(gEe,T1r),e(sn,M1r),e(po,E1r),e(po,Le),e(Le,m4),e(m4,hEe),e(hEe,C1r),e(m4,w1r),e(m4,LJ),e(LJ,A1r),e(m4,L1r),e(Le,y1r),e(Le,f4),e(f4,uEe),e(uEe,x1r),e(f4,$1r),e(f4,yJ),e(yJ,k1r),e(f4,S1r),e(Le,R1r),e(Le,g4),e(g4,pEe),e(pEe,P1r),e(g4,B1r),e(g4,xJ),e(xJ,I1r),e(g4,N1r),e(Le,q1r),e(Le,h4),e(h4,_Ee),e(_Ee,j1r),e(h4,D1r),e(h4,$J),e($J,G1r),e(h4,O1r),e(Le,V1r),e(Le,u4),e(u4,bEe),e(bEe,X1r),e(u4,z1r),e(u4,kJ),e(kJ,W1r),e(u4,Q1r),e(Le,U1r),e(Le,p4),e(p4,vEe),e(vEe,H1r),e(p4,J1r),e(p4,SJ),e(SJ,Y1r),e(p4,K1r),e(Le,Z1r),e(Le,_4),e(_4,FEe),e(FEe,eFr),e(_4,oFr),e(_4,RJ),e(RJ,rFr),e(_4,tFr),e(Le,aFr),e(Le,b4),e(b4,TEe),e(TEe,nFr),e(b4,sFr),e(b4,PJ),e(PJ,lFr),e(b4,iFr),e(Le,dFr),e(Le,v4),e(v4,MEe),e(MEe,cFr),e(v4,mFr),e(v4,BJ),e(BJ,fFr),e(v4,gFr),e(Le,hFr),e(Le,F4),e(F4,EEe),e(EEe,uFr),e(F4,pFr),e(F4,IJ),e(IJ,_Fr),e(F4,bFr),e(po,vFr),e(po,T4),e(T4,FFr),e(T4,CEe),e(CEe,TFr),e(T4,MFr),e(T4,wEe),e(wEe,EFr),e(po,CFr),M(M4,po,null),b(m,$He,_),b(m,rc,_),e(rc,E4),e(E4,AEe),M(Px,AEe,null),e(rc,wFr),e(rc,LEe),e(LEe,AFr),b(m,kHe,_),b(m,Yo,_),M(Bx,Yo,null),e(Yo,LFr),e(Yo,tc),e(tc,yFr),e(tc,NJ),e(NJ,xFr),e(tc,$Fr),e(tc,qJ),e(qJ,kFr),e(tc,SFr),e(Yo,RFr),e(Yo,Ix),e(Ix,PFr),e(Ix,yEe),e(yEe,BFr),e(Ix,IFr),e(Yo,NFr),e(Yo,kt),M(Nx,kt,null),e(kt,qFr),e(kt,xEe),e(xEe,jFr),e(kt,DFr),e(kt,ac),e(ac,GFr),e(ac,$Ee),e($Ee,OFr),e(ac,VFr),e(ac,jJ),e(jJ,XFr),e(ac,zFr),e(kt,WFr),M(C4,kt,null),e(Yo,QFr),e(Yo,_o),M(qx,_o,null),e(_o,UFr),e(_o,kEe),e(kEe,HFr),e(_o,JFr),e(_o,ln),e(ln,YFr),e(ln,SEe),e(SEe,KFr),e(ln,ZFr),e(ln,REe),e(REe,eTr),e(ln,oTr),e(ln,PEe),e(PEe,rTr),e(ln,tTr),e(_o,aTr),e(_o,jx),e(jx,w4),e(w4,BEe),e(BEe,nTr),e(w4,sTr),e(w4,DJ),e(DJ,lTr),e(w4,iTr),e(jx,dTr),e(jx,A4),e(A4,IEe),e(IEe,cTr),e(A4,mTr),e(A4,GJ),e(GJ,fTr),e(A4,gTr),e(_o,hTr),e(_o,L4),e(L4,uTr),e(L4,NEe),e(NEe,pTr),e(L4,_Tr),e(L4,qEe),e(qEe,bTr),e(_o,vTr),M(y4,_o,null),b(m,SHe,_),b(m,nc,_),e(nc,x4),e(x4,jEe),M(Dx,jEe,null),e(nc,FTr),e(nc,DEe),e(DEe,TTr),b(m,RHe,_),b(m,Ko,_),M(Gx,Ko,null),e(Ko,MTr),e(Ko,sc),e(sc,ETr),e(sc,OJ),e(OJ,CTr),e(sc,wTr),e(sc,VJ),e(VJ,ATr),e(sc,LTr),e(Ko,yTr),e(Ko,Ox),e(Ox,xTr),e(Ox,GEe),e(GEe,$Tr),e(Ox,kTr),e(Ko,STr),e(Ko,St),M(Vx,St,null),e(St,RTr),e(St,OEe),e(OEe,PTr),e(St,BTr),e(St,lc),e(lc,ITr),e(lc,VEe),e(VEe,NTr),e(lc,qTr),e(lc,XJ),e(XJ,jTr),e(lc,DTr),e(St,GTr),M($4,St,null),e(Ko,OTr),e(Ko,bo),M(Xx,bo,null),e(bo,VTr),e(bo,XEe),e(XEe,XTr),e(bo,zTr),e(bo,dn),e(dn,WTr),e(dn,zEe),e(zEe,QTr),e(dn,UTr),e(dn,WEe),e(WEe,HTr),e(dn,JTr),e(dn,QEe),e(QEe,YTr),e(dn,KTr),e(bo,ZTr),e(bo,lt),e(lt,k4),e(k4,UEe),e(UEe,eMr),e(k4,oMr),e(k4,zJ),e(zJ,rMr),e(k4,tMr),e(lt,aMr),e(lt,S4),e(S4,HEe),e(HEe,nMr),e(S4,sMr),e(S4,WJ),e(WJ,lMr),e(S4,iMr),e(lt,dMr),e(lt,R4),e(R4,JEe),e(JEe,cMr),e(R4,mMr),e(R4,QJ),e(QJ,fMr),e(R4,gMr),e(lt,hMr),e(lt,P4),e(P4,YEe),e(YEe,uMr),e(P4,pMr),e(P4,UJ),e(UJ,_Mr),e(P4,bMr),e(lt,vMr),e(lt,B4),e(B4,KEe),e(KEe,FMr),e(B4,TMr),e(B4,HJ),e(HJ,MMr),e(B4,EMr),e(bo,CMr),e(bo,I4),e(I4,wMr),e(I4,ZEe),e(ZEe,AMr),e(I4,LMr),e(I4,e4e),e(e4e,yMr),e(bo,xMr),M(N4,bo,null),b(m,PHe,_),b(m,ic,_),e(ic,q4),e(q4,o4e),M(zx,o4e,null),e(ic,$Mr),e(ic,r4e),e(r4e,kMr),b(m,BHe,_),b(m,Zo,_),M(Wx,Zo,null),e(Zo,SMr),e(Zo,dc),e(dc,RMr),e(dc,JJ),e(JJ,PMr),e(dc,BMr),e(dc,YJ),e(YJ,IMr),e(dc,NMr),e(Zo,qMr),e(Zo,Qx),e(Qx,jMr),e(Qx,t4e),e(t4e,DMr),e(Qx,GMr),e(Zo,OMr),e(Zo,Rt),M(Ux,Rt,null),e(Rt,VMr),e(Rt,a4e),e(a4e,XMr),e(Rt,zMr),e(Rt,cc),e(cc,WMr),e(cc,n4e),e(n4e,QMr),e(cc,UMr),e(cc,KJ),e(KJ,HMr),e(cc,JMr),e(Rt,YMr),M(j4,Rt,null),e(Zo,KMr),e(Zo,vo),M(Hx,vo,null),e(vo,ZMr),e(vo,s4e),e(s4e,eEr),e(vo,oEr),e(vo,cn),e(cn,rEr),e(cn,l4e),e(l4e,tEr),e(cn,aEr),e(cn,i4e),e(i4e,nEr),e(cn,sEr),e(cn,d4e),e(d4e,lEr),e(cn,iEr),e(vo,dEr),e(vo,mn),e(mn,D4),e(D4,c4e),e(c4e,cEr),e(D4,mEr),e(D4,ZJ),e(ZJ,fEr),e(D4,gEr),e(mn,hEr),e(mn,G4),e(G4,m4e),e(m4e,uEr),e(G4,pEr),e(G4,eY),e(eY,_Er),e(G4,bEr),e(mn,vEr),e(mn,O4),e(O4,f4e),e(f4e,FEr),e(O4,TEr),e(O4,oY),e(oY,MEr),e(O4,EEr),e(mn,CEr),e(mn,V4),e(V4,g4e),e(g4e,wEr),e(V4,AEr),e(V4,rY),e(rY,LEr),e(V4,yEr),e(vo,xEr),e(vo,X4),e(X4,$Er),e(X4,h4e),e(h4e,kEr),e(X4,SEr),e(X4,u4e),e(u4e,REr),e(vo,PEr),M(z4,vo,null),b(m,IHe,_),b(m,mc,_),e(mc,W4),e(W4,p4e),M(Jx,p4e,null),e(mc,BEr),e(mc,_4e),e(_4e,IEr),b(m,NHe,_),b(m,er,_),M(Yx,er,null),e(er,NEr),e(er,fc),e(fc,qEr),e(fc,tY),e(tY,jEr),e(fc,DEr),e(fc,aY),e(aY,GEr),e(fc,OEr),e(er,VEr),e(er,Kx),e(Kx,XEr),e(Kx,b4e),e(b4e,zEr),e(Kx,WEr),e(er,QEr),e(er,Pt),M(Zx,Pt,null),e(Pt,UEr),e(Pt,v4e),e(v4e,HEr),e(Pt,JEr),e(Pt,gc),e(gc,YEr),e(gc,F4e),e(F4e,KEr),e(gc,ZEr),e(gc,nY),e(nY,e4r),e(gc,o4r),e(Pt,r4r),M(Q4,Pt,null),e(er,t4r),e(er,Fo),M(e$,Fo,null),e(Fo,a4r),e(Fo,T4e),e(T4e,n4r),e(Fo,s4r),e(Fo,fn),e(fn,l4r),e(fn,M4e),e(M4e,i4r),e(fn,d4r),e(fn,E4e),e(E4e,c4r),e(fn,m4r),e(fn,C4e),e(C4e,f4r),e(fn,g4r),e(Fo,h4r),e(Fo,o$),e(o$,U4),e(U4,w4e),e(w4e,u4r),e(U4,p4r),e(U4,sY),e(sY,_4r),e(U4,b4r),e(o$,v4r),e(o$,H4),e(H4,A4e),e(A4e,F4r),e(H4,T4r),e(H4,lY),e(lY,M4r),e(H4,E4r),e(Fo,C4r),e(Fo,J4),e(J4,w4r),e(J4,L4e),e(L4e,A4r),e(J4,L4r),e(J4,y4e),e(y4e,y4r),e(Fo,x4r),M(Y4,Fo,null),b(m,qHe,_),b(m,hc,_),e(hc,K4),e(K4,x4e),M(r$,x4e,null),e(hc,$4r),e(hc,$4e),e($4e,k4r),b(m,jHe,_),b(m,or,_),M(t$,or,null),e(or,S4r),e(or,uc),e(uc,R4r),e(uc,iY),e(iY,P4r),e(uc,B4r),e(uc,dY),e(dY,I4r),e(uc,N4r),e(or,q4r),e(or,a$),e(a$,j4r),e(a$,k4e),e(k4e,D4r),e(a$,G4r),e(or,O4r),e(or,Bt),M(n$,Bt,null),e(Bt,V4r),e(Bt,S4e),e(S4e,X4r),e(Bt,z4r),e(Bt,pc),e(pc,W4r),e(pc,R4e),e(R4e,Q4r),e(pc,U4r),e(pc,cY),e(cY,H4r),e(pc,J4r),e(Bt,Y4r),M(Z4,Bt,null),e(or,K4r),e(or,To),M(s$,To,null),e(To,Z4r),e(To,P4e),e(P4e,eCr),e(To,oCr),e(To,gn),e(gn,rCr),e(gn,B4e),e(B4e,tCr),e(gn,aCr),e(gn,I4e),e(I4e,nCr),e(gn,sCr),e(gn,N4e),e(N4e,lCr),e(gn,iCr),e(To,dCr),e(To,q4e),e(q4e,eC),e(eC,j4e),e(j4e,cCr),e(eC,mCr),e(eC,mY),e(mY,fCr),e(eC,gCr),e(To,hCr),e(To,oC),e(oC,uCr),e(oC,D4e),e(D4e,pCr),e(oC,_Cr),e(oC,G4e),e(G4e,bCr),e(To,vCr),M(rC,To,null),b(m,DHe,_),b(m,_c,_),e(_c,tC),e(tC,O4e),M(l$,O4e,null),e(_c,FCr),e(_c,V4e),e(V4e,TCr),b(m,GHe,_),b(m,rr,_),M(i$,rr,null),e(rr,MCr),e(rr,bc),e(bc,ECr),e(bc,fY),e(fY,CCr),e(bc,wCr),e(bc,gY),e(gY,ACr),e(bc,LCr),e(rr,yCr),e(rr,d$),e(d$,xCr),e(d$,X4e),e(X4e,$Cr),e(d$,kCr),e(rr,SCr),e(rr,It),M(c$,It,null),e(It,RCr),e(It,z4e),e(z4e,PCr),e(It,BCr),e(It,vc),e(vc,ICr),e(vc,W4e),e(W4e,NCr),e(vc,qCr),e(vc,hY),e(hY,jCr),e(vc,DCr),e(It,GCr),M(aC,It,null),e(rr,OCr),e(rr,Mo),M(m$,Mo,null),e(Mo,VCr),e(Mo,Q4e),e(Q4e,XCr),e(Mo,zCr),e(Mo,hn),e(hn,WCr),e(hn,U4e),e(U4e,QCr),e(hn,UCr),e(hn,H4e),e(H4e,HCr),e(hn,JCr),e(hn,J4e),e(J4e,YCr),e(hn,KCr),e(Mo,ZCr),e(Mo,it),e(it,nC),e(nC,Y4e),e(Y4e,e3r),e(nC,o3r),e(nC,uY),e(uY,r3r),e(nC,t3r),e(it,a3r),e(it,sC),e(sC,K4e),e(K4e,n3r),e(sC,s3r),e(sC,pY),e(pY,l3r),e(sC,i3r),e(it,d3r),e(it,lC),e(lC,Z4e),e(Z4e,c3r),e(lC,m3r),e(lC,_Y),e(_Y,f3r),e(lC,g3r),e(it,h3r),e(it,iC),e(iC,eCe),e(eCe,u3r),e(iC,p3r),e(iC,bY),e(bY,_3r),e(iC,b3r),e(it,v3r),e(it,dC),e(dC,oCe),e(oCe,F3r),e(dC,T3r),e(dC,vY),e(vY,M3r),e(dC,E3r),e(Mo,C3r),e(Mo,cC),e(cC,w3r),e(cC,rCe),e(rCe,A3r),e(cC,L3r),e(cC,tCe),e(tCe,y3r),e(Mo,x3r),M(mC,Mo,null),b(m,OHe,_),b(m,Fc,_),e(Fc,fC),e(fC,aCe),M(f$,aCe,null),e(Fc,$3r),e(Fc,nCe),e(nCe,k3r),b(m,VHe,_),b(m,tr,_),M(g$,tr,null),e(tr,S3r),e(tr,Tc),e(Tc,R3r),e(Tc,FY),e(FY,P3r),e(Tc,B3r),e(Tc,TY),e(TY,I3r),e(Tc,N3r),e(tr,q3r),e(tr,h$),e(h$,j3r),e(h$,sCe),e(sCe,D3r),e(h$,G3r),e(tr,O3r),e(tr,Nt),M(u$,Nt,null),e(Nt,V3r),e(Nt,lCe),e(lCe,X3r),e(Nt,z3r),e(Nt,Mc),e(Mc,W3r),e(Mc,iCe),e(iCe,Q3r),e(Mc,U3r),e(Mc,MY),e(MY,H3r),e(Mc,J3r),e(Nt,Y3r),M(gC,Nt,null),e(tr,K3r),e(tr,Eo),M(p$,Eo,null),e(Eo,Z3r),e(Eo,dCe),e(dCe,e5r),e(Eo,o5r),e(Eo,un),e(un,r5r),e(un,cCe),e(cCe,t5r),e(un,a5r),e(un,mCe),e(mCe,n5r),e(un,s5r),e(un,fCe),e(fCe,l5r),e(un,i5r),e(Eo,d5r),e(Eo,gCe),e(gCe,hC),e(hC,hCe),e(hCe,c5r),e(hC,m5r),e(hC,EY),e(EY,f5r),e(hC,g5r),e(Eo,h5r),e(Eo,uC),e(uC,u5r),e(uC,uCe),e(uCe,p5r),e(uC,_5r),e(uC,pCe),e(pCe,b5r),e(Eo,v5r),M(pC,Eo,null),b(m,XHe,_),b(m,Ec,_),e(Ec,_C),e(_C,_Ce),M(_$,_Ce,null),e(Ec,F5r),e(Ec,bCe),e(bCe,T5r),b(m,zHe,_),b(m,ar,_),M(b$,ar,null),e(ar,M5r),e(ar,Cc),e(Cc,E5r),e(Cc,CY),e(CY,C5r),e(Cc,w5r),e(Cc,wY),e(wY,A5r),e(Cc,L5r),e(ar,y5r),e(ar,v$),e(v$,x5r),e(v$,vCe),e(vCe,$5r),e(v$,k5r),e(ar,S5r),e(ar,qt),M(F$,qt,null),e(qt,R5r),e(qt,FCe),e(FCe,P5r),e(qt,B5r),e(qt,wc),e(wc,I5r),e(wc,TCe),e(TCe,N5r),e(wc,q5r),e(wc,AY),e(AY,j5r),e(wc,D5r),e(qt,G5r),M(bC,qt,null),e(ar,O5r),e(ar,Rr),M(T$,Rr,null),e(Rr,V5r),e(Rr,MCe),e(MCe,X5r),e(Rr,z5r),e(Rr,pn),e(pn,W5r),e(pn,ECe),e(ECe,Q5r),e(pn,U5r),e(pn,CCe),e(CCe,H5r),e(pn,J5r),e(pn,wCe),e(wCe,Y5r),e(pn,K5r),e(Rr,Z5r),e(Rr,P),e(P,vC),e(vC,ACe),e(ACe,e0r),e(vC,o0r),e(vC,LY),e(LY,r0r),e(vC,t0r),e(P,a0r),e(P,FC),e(FC,LCe),e(LCe,n0r),e(FC,s0r),e(FC,yY),e(yY,l0r),e(FC,i0r),e(P,d0r),e(P,TC),e(TC,yCe),e(yCe,c0r),e(TC,m0r),e(TC,xY),e(xY,f0r),e(TC,g0r),e(P,h0r),e(P,MC),e(MC,xCe),e(xCe,u0r),e(MC,p0r),e(MC,$Y),e($Y,_0r),e(MC,b0r),e(P,v0r),e(P,EC),e(EC,$Ce),e($Ce,F0r),e(EC,T0r),e(EC,kY),e(kY,M0r),e(EC,E0r),e(P,C0r),e(P,CC),e(CC,kCe),e(kCe,w0r),e(CC,A0r),e(CC,SY),e(SY,L0r),e(CC,y0r),e(P,x0r),e(P,wC),e(wC,SCe),e(SCe,$0r),e(wC,k0r),e(wC,RY),e(RY,S0r),e(wC,R0r),e(P,P0r),e(P,AC),e(AC,RCe),e(RCe,B0r),e(AC,I0r),e(AC,PY),e(PY,N0r),e(AC,q0r),e(P,j0r),e(P,LC),e(LC,PCe),e(PCe,D0r),e(LC,G0r),e(LC,BY),e(BY,O0r),e(LC,V0r),e(P,X0r),e(P,yC),e(yC,BCe),e(BCe,z0r),e(yC,W0r),e(yC,IY),e(IY,Q0r),e(yC,U0r),e(P,H0r),e(P,xC),e(xC,ICe),e(ICe,J0r),e(xC,Y0r),e(xC,NY),e(NY,K0r),e(xC,Z0r),e(P,ewr),e(P,$C),e($C,NCe),e(NCe,owr),e($C,rwr),e($C,qY),e(qY,twr),e($C,awr),e(P,nwr),e(P,kC),e(kC,qCe),e(qCe,swr),e(kC,lwr),e(kC,jY),e(jY,iwr),e(kC,dwr),e(P,cwr),e(P,SC),e(SC,jCe),e(jCe,mwr),e(SC,fwr),e(SC,DY),e(DY,gwr),e(SC,hwr),e(P,uwr),e(P,RC),e(RC,DCe),e(DCe,pwr),e(RC,_wr),e(RC,GY),e(GY,bwr),e(RC,vwr),e(P,Fwr),e(P,PC),e(PC,GCe),e(GCe,Twr),e(PC,Mwr),e(PC,OY),e(OY,Ewr),e(PC,Cwr),e(P,wwr),e(P,BC),e(BC,OCe),e(OCe,Awr),e(BC,Lwr),e(BC,VY),e(VY,ywr),e(BC,xwr),e(P,$wr),e(P,IC),e(IC,VCe),e(VCe,kwr),e(IC,Swr),e(IC,XY),e(XY,Rwr),e(IC,Pwr),e(P,Bwr),e(P,il),e(il,XCe),e(XCe,Iwr),e(il,Nwr),e(il,zY),e(zY,qwr),e(il,jwr),e(il,WY),e(WY,Dwr),e(il,Gwr),e(P,Owr),e(P,NC),e(NC,zCe),e(zCe,Vwr),e(NC,Xwr),e(NC,QY),e(QY,zwr),e(NC,Wwr),e(P,Qwr),e(P,qC),e(qC,WCe),e(WCe,Uwr),e(qC,Hwr),e(qC,UY),e(UY,Jwr),e(qC,Ywr),e(P,Kwr),e(P,jC),e(jC,QCe),e(QCe,Zwr),e(jC,e6r),e(jC,HY),e(HY,o6r),e(jC,r6r),e(P,t6r),e(P,DC),e(DC,UCe),e(UCe,a6r),e(DC,n6r),e(DC,JY),e(JY,s6r),e(DC,l6r),e(P,i6r),e(P,GC),e(GC,HCe),e(HCe,d6r),e(GC,c6r),e(GC,YY),e(YY,m6r),e(GC,f6r),e(P,g6r),e(P,OC),e(OC,JCe),e(JCe,h6r),e(OC,u6r),e(OC,KY),e(KY,p6r),e(OC,_6r),e(P,b6r),e(P,VC),e(VC,YCe),e(YCe,v6r),e(VC,F6r),e(VC,ZY),e(ZY,T6r),e(VC,M6r),e(P,E6r),e(P,XC),e(XC,KCe),e(KCe,C6r),e(XC,w6r),e(XC,eK),e(eK,A6r),e(XC,L6r),e(P,y6r),e(P,zC),e(zC,ZCe),e(ZCe,x6r),e(zC,$6r),e(zC,oK),e(oK,k6r),e(zC,S6r),e(P,R6r),e(P,WC),e(WC,e3e),e(e3e,P6r),e(WC,B6r),e(WC,rK),e(rK,I6r),e(WC,N6r),e(P,q6r),e(P,QC),e(QC,o3e),e(o3e,j6r),e(QC,D6r),e(QC,tK),e(tK,G6r),e(QC,O6r),e(P,V6r),e(P,UC),e(UC,r3e),e(r3e,X6r),e(UC,z6r),e(UC,aK),e(aK,W6r),e(UC,Q6r),e(P,U6r),e(P,HC),e(HC,t3e),e(t3e,H6r),e(HC,J6r),e(HC,nK),e(nK,Y6r),e(HC,K6r),e(P,Z6r),e(P,JC),e(JC,a3e),e(a3e,eAr),e(JC,oAr),e(JC,sK),e(sK,rAr),e(JC,tAr),e(P,aAr),e(P,YC),e(YC,n3e),e(n3e,nAr),e(YC,sAr),e(YC,lK),e(lK,lAr),e(YC,iAr),e(P,dAr),e(P,KC),e(KC,s3e),e(s3e,cAr),e(KC,mAr),e(KC,iK),e(iK,fAr),e(KC,gAr),e(P,hAr),e(P,ZC),e(ZC,l3e),e(l3e,uAr),e(ZC,pAr),e(ZC,dK),e(dK,_Ar),e(ZC,bAr),e(P,vAr),e(P,e3),e(e3,i3e),e(i3e,FAr),e(e3,TAr),e(e3,cK),e(cK,MAr),e(e3,EAr),e(P,CAr),e(P,o3),e(o3,d3e),e(d3e,wAr),e(o3,AAr),e(o3,mK),e(mK,LAr),e(o3,yAr),e(P,xAr),e(P,r3),e(r3,c3e),e(c3e,$Ar),e(r3,kAr),e(r3,fK),e(fK,SAr),e(r3,RAr),e(P,PAr),e(P,t3),e(t3,m3e),e(m3e,BAr),e(t3,IAr),e(t3,gK),e(gK,NAr),e(t3,qAr),e(P,jAr),e(P,a3),e(a3,f3e),e(f3e,DAr),e(a3,GAr),e(a3,hK),e(hK,OAr),e(a3,VAr),e(P,XAr),e(P,n3),e(n3,g3e),e(g3e,zAr),e(n3,WAr),e(n3,uK),e(uK,QAr),e(n3,UAr),e(P,HAr),e(P,s3),e(s3,h3e),e(h3e,JAr),e(s3,YAr),e(s3,pK),e(pK,KAr),e(s3,ZAr),e(P,e7r),e(P,l3),e(l3,u3e),e(u3e,o7r),e(l3,r7r),e(l3,_K),e(_K,t7r),e(l3,a7r),e(P,n7r),e(P,i3),e(i3,p3e),e(p3e,s7r),e(i3,l7r),e(i3,bK),e(bK,i7r),e(i3,d7r),e(P,c7r),e(P,d3),e(d3,_3e),e(_3e,m7r),e(d3,f7r),e(d3,vK),e(vK,g7r),e(d3,h7r),e(P,u7r),e(P,c3),e(c3,b3e),e(b3e,p7r),e(c3,_7r),e(c3,FK),e(FK,b7r),e(c3,v7r),e(P,F7r),e(P,m3),e(m3,v3e),e(v3e,T7r),e(m3,M7r),e(m3,TK),e(TK,E7r),e(m3,C7r),e(P,w7r),e(P,f3),e(f3,F3e),e(F3e,A7r),e(f3,L7r),e(f3,MK),e(MK,y7r),e(f3,x7r),e(P,$7r),e(P,g3),e(g3,T3e),e(T3e,k7r),e(g3,S7r),e(g3,EK),e(EK,R7r),e(g3,P7r),e(P,B7r),e(P,h3),e(h3,M3e),e(M3e,I7r),e(h3,N7r),e(h3,CK),e(CK,q7r),e(h3,j7r),e(P,D7r),e(P,u3),e(u3,E3e),e(E3e,G7r),e(u3,O7r),e(u3,wK),e(wK,V7r),e(u3,X7r),e(P,z7r),e(P,p3),e(p3,C3e),e(C3e,W7r),e(p3,Q7r),e(p3,AK),e(AK,U7r),e(p3,H7r),e(P,J7r),e(P,_3),e(_3,w3e),e(w3e,Y7r),e(_3,K7r),e(_3,LK),e(LK,Z7r),e(_3,eLr),e(Rr,oLr),M(b3,Rr,null),b(m,WHe,_),b(m,Ac,_),e(Ac,v3),e(v3,A3e),M(M$,A3e,null),e(Ac,rLr),e(Ac,L3e),e(L3e,tLr),b(m,QHe,_),b(m,nr,_),M(E$,nr,null),e(nr,aLr),e(nr,Lc),e(Lc,nLr),e(Lc,yK),e(yK,sLr),e(Lc,lLr),e(Lc,xK),e(xK,iLr),e(Lc,dLr),e(nr,cLr),e(nr,C$),e(C$,mLr),e(C$,y3e),e(y3e,fLr),e(C$,gLr),e(nr,hLr),e(nr,jt),M(w$,jt,null),e(jt,uLr),e(jt,x3e),e(x3e,pLr),e(jt,_Lr),e(jt,yc),e(yc,bLr),e(yc,$3e),e($3e,vLr),e(yc,FLr),e(yc,$K),e($K,TLr),e(yc,MLr),e(jt,ELr),M(F3,jt,null),e(nr,CLr),e(nr,Pr),M(A$,Pr,null),e(Pr,wLr),e(Pr,k3e),e(k3e,ALr),e(Pr,LLr),e(Pr,_n),e(_n,yLr),e(_n,S3e),e(S3e,xLr),e(_n,$Lr),e(_n,R3e),e(R3e,kLr),e(_n,SLr),e(_n,P3e),e(P3e,RLr),e(_n,PLr),e(Pr,BLr),e(Pr,se),e(se,T3),e(T3,B3e),e(B3e,ILr),e(T3,NLr),e(T3,kK),e(kK,qLr),e(T3,jLr),e(se,DLr),e(se,M3),e(M3,I3e),e(I3e,GLr),e(M3,OLr),e(M3,SK),e(SK,VLr),e(M3,XLr),e(se,zLr),e(se,E3),e(E3,N3e),e(N3e,WLr),e(E3,QLr),e(E3,RK),e(RK,ULr),e(E3,HLr),e(se,JLr),e(se,C3),e(C3,q3e),e(q3e,YLr),e(C3,KLr),e(C3,PK),e(PK,ZLr),e(C3,eyr),e(se,oyr),e(se,w3),e(w3,j3e),e(j3e,ryr),e(w3,tyr),e(w3,BK),e(BK,ayr),e(w3,nyr),e(se,syr),e(se,A3),e(A3,D3e),e(D3e,lyr),e(A3,iyr),e(A3,IK),e(IK,dyr),e(A3,cyr),e(se,myr),e(se,L3),e(L3,G3e),e(G3e,fyr),e(L3,gyr),e(L3,NK),e(NK,hyr),e(L3,uyr),e(se,pyr),e(se,y3),e(y3,O3e),e(O3e,_yr),e(y3,byr),e(y3,qK),e(qK,vyr),e(y3,Fyr),e(se,Tyr),e(se,x3),e(x3,V3e),e(V3e,Myr),e(x3,Eyr),e(x3,jK),e(jK,Cyr),e(x3,wyr),e(se,Ayr),e(se,$3),e($3,X3e),e(X3e,Lyr),e($3,yyr),e($3,DK),e(DK,xyr),e($3,$yr),e(se,kyr),e(se,k3),e(k3,z3e),e(z3e,Syr),e(k3,Ryr),e(k3,GK),e(GK,Pyr),e(k3,Byr),e(se,Iyr),e(se,S3),e(S3,W3e),e(W3e,Nyr),e(S3,qyr),e(S3,OK),e(OK,jyr),e(S3,Dyr),e(se,Gyr),e(se,R3),e(R3,Q3e),e(Q3e,Oyr),e(R3,Vyr),e(R3,VK),e(VK,Xyr),e(R3,zyr),e(se,Wyr),e(se,P3),e(P3,U3e),e(U3e,Qyr),e(P3,Uyr),e(P3,XK),e(XK,Hyr),e(P3,Jyr),e(se,Yyr),e(se,B3),e(B3,H3e),e(H3e,Kyr),e(B3,Zyr),e(B3,zK),e(zK,e8r),e(B3,o8r),e(se,r8r),e(se,I3),e(I3,J3e),e(J3e,t8r),e(I3,a8r),e(I3,WK),e(WK,n8r),e(I3,s8r),e(se,l8r),e(se,N3),e(N3,Y3e),e(Y3e,i8r),e(N3,d8r),e(N3,QK),e(QK,c8r),e(N3,m8r),e(se,f8r),e(se,q3),e(q3,K3e),e(K3e,g8r),e(q3,h8r),e(q3,UK),e(UK,u8r),e(q3,p8r),e(se,_8r),e(se,j3),e(j3,Z3e),e(Z3e,b8r),e(j3,v8r),e(j3,HK),e(HK,F8r),e(j3,T8r),e(se,M8r),e(se,D3),e(D3,e5e),e(e5e,E8r),e(D3,C8r),e(D3,JK),e(JK,w8r),e(D3,A8r),e(se,L8r),e(se,G3),e(G3,o5e),e(o5e,y8r),e(G3,x8r),e(G3,YK),e(YK,$8r),e(G3,k8r),e(se,S8r),e(se,O3),e(O3,r5e),e(r5e,R8r),e(O3,P8r),e(O3,KK),e(KK,B8r),e(O3,I8r),e(se,N8r),e(se,V3),e(V3,t5e),e(t5e,q8r),e(V3,j8r),e(V3,ZK),e(ZK,D8r),e(V3,G8r),e(Pr,O8r),M(X3,Pr,null),b(m,UHe,_),b(m,xc,_),e(xc,z3),e(z3,a5e),M(L$,a5e,null),e(xc,V8r),e(xc,n5e),e(n5e,X8r),b(m,HHe,_),b(m,sr,_),M(y$,sr,null),e(sr,z8r),e(sr,$c),e($c,W8r),e($c,eZ),e(eZ,Q8r),e($c,U8r),e($c,oZ),e(oZ,H8r),e($c,J8r),e(sr,Y8r),e(sr,x$),e(x$,K8r),e(x$,s5e),e(s5e,Z8r),e(x$,e9r),e(sr,o9r),e(sr,Dt),M($$,Dt,null),e(Dt,r9r),e(Dt,l5e),e(l5e,t9r),e(Dt,a9r),e(Dt,kc),e(kc,n9r),e(kc,i5e),e(i5e,s9r),e(kc,l9r),e(kc,rZ),e(rZ,i9r),e(kc,d9r),e(Dt,c9r),M(W3,Dt,null),e(sr,m9r),e(sr,Br),M(k$,Br,null),e(Br,f9r),e(Br,d5e),e(d5e,g9r),e(Br,h9r),e(Br,bn),e(bn,u9r),e(bn,c5e),e(c5e,p9r),e(bn,_9r),e(bn,m5e),e(m5e,b9r),e(bn,v9r),e(bn,f5e),e(f5e,F9r),e(bn,T9r),e(Br,M9r),e(Br,Me),e(Me,Q3),e(Q3,g5e),e(g5e,E9r),e(Q3,C9r),e(Q3,tZ),e(tZ,w9r),e(Q3,A9r),e(Me,L9r),e(Me,U3),e(U3,h5e),e(h5e,y9r),e(U3,x9r),e(U3,aZ),e(aZ,$9r),e(U3,k9r),e(Me,S9r),e(Me,H3),e(H3,u5e),e(u5e,R9r),e(H3,P9r),e(H3,nZ),e(nZ,B9r),e(H3,I9r),e(Me,N9r),e(Me,J3),e(J3,p5e),e(p5e,q9r),e(J3,j9r),e(J3,sZ),e(sZ,D9r),e(J3,G9r),e(Me,O9r),e(Me,Y3),e(Y3,_5e),e(_5e,V9r),e(Y3,X9r),e(Y3,lZ),e(lZ,z9r),e(Y3,W9r),e(Me,Q9r),e(Me,K3),e(K3,b5e),e(b5e,U9r),e(K3,H9r),e(K3,iZ),e(iZ,J9r),e(K3,Y9r),e(Me,K9r),e(Me,Z3),e(Z3,v5e),e(v5e,Z9r),e(Z3,exr),e(Z3,dZ),e(dZ,oxr),e(Z3,rxr),e(Me,txr),e(Me,e5),e(e5,F5e),e(F5e,axr),e(e5,nxr),e(e5,cZ),e(cZ,sxr),e(e5,lxr),e(Me,ixr),e(Me,o5),e(o5,T5e),e(T5e,dxr),e(o5,cxr),e(o5,mZ),e(mZ,mxr),e(o5,fxr),e(Me,gxr),e(Me,r5),e(r5,M5e),e(M5e,hxr),e(r5,uxr),e(r5,fZ),e(fZ,pxr),e(r5,_xr),e(Me,bxr),e(Me,t5),e(t5,E5e),e(E5e,vxr),e(t5,Fxr),e(t5,gZ),e(gZ,Txr),e(t5,Mxr),e(Me,Exr),e(Me,a5),e(a5,C5e),e(C5e,Cxr),e(a5,wxr),e(a5,hZ),e(hZ,Axr),e(a5,Lxr),e(Me,yxr),e(Me,n5),e(n5,w5e),e(w5e,xxr),e(n5,$xr),e(n5,uZ),e(uZ,kxr),e(n5,Sxr),e(Me,Rxr),e(Me,s5),e(s5,A5e),e(A5e,Pxr),e(s5,Bxr),e(s5,pZ),e(pZ,Ixr),e(s5,Nxr),e(Br,qxr),M(l5,Br,null),b(m,JHe,_),b(m,Sc,_),e(Sc,i5),e(i5,L5e),M(S$,L5e,null),e(Sc,jxr),e(Sc,y5e),e(y5e,Dxr),b(m,YHe,_),b(m,lr,_),M(R$,lr,null),e(lr,Gxr),e(lr,Rc),e(Rc,Oxr),e(Rc,_Z),e(_Z,Vxr),e(Rc,Xxr),e(Rc,bZ),e(bZ,zxr),e(Rc,Wxr),e(lr,Qxr),e(lr,P$),e(P$,Uxr),e(P$,x5e),e(x5e,Hxr),e(P$,Jxr),e(lr,Yxr),e(lr,Gt),M(B$,Gt,null),e(Gt,Kxr),e(Gt,$5e),e($5e,Zxr),e(Gt,e$r),e(Gt,Pc),e(Pc,o$r),e(Pc,k5e),e(k5e,r$r),e(Pc,t$r),e(Pc,vZ),e(vZ,a$r),e(Pc,n$r),e(Gt,s$r),M(d5,Gt,null),e(lr,l$r),e(lr,Ir),M(I$,Ir,null),e(Ir,i$r),e(Ir,S5e),e(S5e,d$r),e(Ir,c$r),e(Ir,vn),e(vn,m$r),e(vn,R5e),e(R5e,f$r),e(vn,g$r),e(vn,P5e),e(P5e,h$r),e(vn,u$r),e(vn,B5e),e(B5e,p$r),e(vn,_$r),e(Ir,b$r),e(Ir,Be),e(Be,c5),e(c5,I5e),e(I5e,v$r),e(c5,F$r),e(c5,FZ),e(FZ,T$r),e(c5,M$r),e(Be,E$r),e(Be,m5),e(m5,N5e),e(N5e,C$r),e(m5,w$r),e(m5,TZ),e(TZ,A$r),e(m5,L$r),e(Be,y$r),e(Be,dl),e(dl,q5e),e(q5e,x$r),e(dl,$$r),e(dl,MZ),e(MZ,k$r),e(dl,S$r),e(dl,EZ),e(EZ,R$r),e(dl,P$r),e(Be,B$r),e(Be,f5),e(f5,j5e),e(j5e,I$r),e(f5,N$r),e(f5,CZ),e(CZ,q$r),e(f5,j$r),e(Be,D$r),e(Be,g5),e(g5,D5e),e(D5e,G$r),e(g5,O$r),e(g5,wZ),e(wZ,V$r),e(g5,X$r),e(Be,z$r),e(Be,h5),e(h5,G5e),e(G5e,W$r),e(h5,Q$r),e(h5,AZ),e(AZ,U$r),e(h5,H$r),e(Be,J$r),e(Be,u5),e(u5,O5e),e(O5e,Y$r),e(u5,K$r),e(u5,LZ),e(LZ,Z$r),e(u5,ekr),e(Be,okr),e(Be,p5),e(p5,V5e),e(V5e,rkr),e(p5,tkr),e(p5,yZ),e(yZ,akr),e(p5,nkr),e(Be,skr),e(Be,_5),e(_5,X5e),e(X5e,lkr),e(_5,ikr),e(_5,xZ),e(xZ,dkr),e(_5,ckr),e(Ir,mkr),M(b5,Ir,null),b(m,KHe,_),b(m,Bc,_),e(Bc,v5),e(v5,z5e),M(N$,z5e,null),e(Bc,fkr),e(Bc,W5e),e(W5e,gkr),b(m,ZHe,_),b(m,ir,_),M(q$,ir,null),e(ir,hkr),e(ir,Ic),e(Ic,ukr),e(Ic,$Z),e($Z,pkr),e(Ic,_kr),e(Ic,kZ),e(kZ,bkr),e(Ic,vkr),e(ir,Fkr),e(ir,j$),e(j$,Tkr),e(j$,Q5e),e(Q5e,Mkr),e(j$,Ekr),e(ir,Ckr),e(ir,Ot),M(D$,Ot,null),e(Ot,wkr),e(Ot,U5e),e(U5e,Akr),e(Ot,Lkr),e(Ot,Nc),e(Nc,ykr),e(Nc,H5e),e(H5e,xkr),e(Nc,$kr),e(Nc,SZ),e(SZ,kkr),e(Nc,Skr),e(Ot,Rkr),M(F5,Ot,null),e(ir,Pkr),e(ir,Nr),M(G$,Nr,null),e(Nr,Bkr),e(Nr,J5e),e(J5e,Ikr),e(Nr,Nkr),e(Nr,Fn),e(Fn,qkr),e(Fn,Y5e),e(Y5e,jkr),e(Fn,Dkr),e(Fn,K5e),e(K5e,Gkr),e(Fn,Okr),e(Fn,Z5e),e(Z5e,Vkr),e(Fn,Xkr),e(Nr,zkr),e(Nr,qc),e(qc,T5),e(T5,e0e),e(e0e,Wkr),e(T5,Qkr),e(T5,RZ),e(RZ,Ukr),e(T5,Hkr),e(qc,Jkr),e(qc,M5),e(M5,o0e),e(o0e,Ykr),e(M5,Kkr),e(M5,PZ),e(PZ,Zkr),e(M5,eSr),e(qc,oSr),e(qc,E5),e(E5,r0e),e(r0e,rSr),e(E5,tSr),e(E5,BZ),e(BZ,aSr),e(E5,nSr),e(Nr,sSr),M(C5,Nr,null),b(m,eJe,_),b(m,jc,_),e(jc,w5),e(w5,t0e),M(O$,t0e,null),e(jc,lSr),e(jc,a0e),e(a0e,iSr),b(m,oJe,_),b(m,dr,_),M(V$,dr,null),e(dr,dSr),e(dr,Dc),e(Dc,cSr),e(Dc,IZ),e(IZ,mSr),e(Dc,fSr),e(Dc,NZ),e(NZ,gSr),e(Dc,hSr),e(dr,uSr),e(dr,X$),e(X$,pSr),e(X$,n0e),e(n0e,_Sr),e(X$,bSr),e(dr,vSr),e(dr,Vt),M(z$,Vt,null),e(Vt,FSr),e(Vt,s0e),e(s0e,TSr),e(Vt,MSr),e(Vt,Gc),e(Gc,ESr),e(Gc,l0e),e(l0e,CSr),e(Gc,wSr),e(Gc,qZ),e(qZ,ASr),e(Gc,LSr),e(Vt,ySr),M(A5,Vt,null),e(dr,xSr),e(dr,qr),M(W$,qr,null),e(qr,$Sr),e(qr,i0e),e(i0e,kSr),e(qr,SSr),e(qr,Tn),e(Tn,RSr),e(Tn,d0e),e(d0e,PSr),e(Tn,BSr),e(Tn,c0e),e(c0e,ISr),e(Tn,NSr),e(Tn,m0e),e(m0e,qSr),e(Tn,jSr),e(qr,DSr),e(qr,fe),e(fe,L5),e(L5,f0e),e(f0e,GSr),e(L5,OSr),e(L5,jZ),e(jZ,VSr),e(L5,XSr),e(fe,zSr),e(fe,y5),e(y5,g0e),e(g0e,WSr),e(y5,QSr),e(y5,DZ),e(DZ,USr),e(y5,HSr),e(fe,JSr),e(fe,x5),e(x5,h0e),e(h0e,YSr),e(x5,KSr),e(x5,GZ),e(GZ,ZSr),e(x5,eRr),e(fe,oRr),e(fe,$5),e($5,u0e),e(u0e,rRr),e($5,tRr),e($5,OZ),e(OZ,aRr),e($5,nRr),e(fe,sRr),e(fe,k5),e(k5,p0e),e(p0e,lRr),e(k5,iRr),e(k5,VZ),e(VZ,dRr),e(k5,cRr),e(fe,mRr),e(fe,S5),e(S5,_0e),e(_0e,fRr),e(S5,gRr),e(S5,XZ),e(XZ,hRr),e(S5,uRr),e(fe,pRr),e(fe,R5),e(R5,b0e),e(b0e,_Rr),e(R5,bRr),e(R5,zZ),e(zZ,vRr),e(R5,FRr),e(fe,TRr),e(fe,P5),e(P5,v0e),e(v0e,MRr),e(P5,ERr),e(P5,WZ),e(WZ,CRr),e(P5,wRr),e(fe,ARr),e(fe,B5),e(B5,F0e),e(F0e,LRr),e(B5,yRr),e(B5,QZ),e(QZ,xRr),e(B5,$Rr),e(fe,kRr),e(fe,I5),e(I5,T0e),e(T0e,SRr),e(I5,RRr),e(I5,UZ),e(UZ,PRr),e(I5,BRr),e(fe,IRr),e(fe,N5),e(N5,M0e),e(M0e,NRr),e(N5,qRr),e(N5,HZ),e(HZ,jRr),e(N5,DRr),e(fe,GRr),e(fe,q5),e(q5,E0e),e(E0e,ORr),e(q5,VRr),e(q5,JZ),e(JZ,XRr),e(q5,zRr),e(fe,WRr),e(fe,j5),e(j5,C0e),e(C0e,QRr),e(j5,URr),e(j5,YZ),e(YZ,HRr),e(j5,JRr),e(fe,YRr),e(fe,D5),e(D5,w0e),e(w0e,KRr),e(D5,ZRr),e(D5,KZ),e(KZ,ePr),e(D5,oPr),e(fe,rPr),e(fe,G5),e(G5,A0e),e(A0e,tPr),e(G5,aPr),e(G5,ZZ),e(ZZ,nPr),e(G5,sPr),e(fe,lPr),e(fe,O5),e(O5,L0e),e(L0e,iPr),e(O5,dPr),e(O5,eee),e(eee,cPr),e(O5,mPr),e(fe,fPr),e(fe,V5),e(V5,y0e),e(y0e,gPr),e(V5,hPr),e(V5,oee),e(oee,uPr),e(V5,pPr),e(fe,_Pr),e(fe,X5),e(X5,x0e),e(x0e,bPr),e(X5,vPr),e(X5,ree),e(ree,FPr),e(X5,TPr),e(fe,MPr),e(fe,z5),e(z5,$0e),e($0e,EPr),e(z5,CPr),e(z5,tee),e(tee,wPr),e(z5,APr),e(fe,LPr),e(fe,W5),e(W5,k0e),e(k0e,yPr),e(W5,xPr),e(W5,aee),e(aee,$Pr),e(W5,kPr),e(qr,SPr),M(Q5,qr,null),b(m,rJe,_),b(m,Oc,_),e(Oc,U5),e(U5,S0e),M(Q$,S0e,null),e(Oc,RPr),e(Oc,R0e),e(R0e,PPr),b(m,tJe,_),b(m,cr,_),M(U$,cr,null),e(cr,BPr),e(cr,Vc),e(Vc,IPr),e(Vc,nee),e(nee,NPr),e(Vc,qPr),e(Vc,see),e(see,jPr),e(Vc,DPr),e(cr,GPr),e(cr,H$),e(H$,OPr),e(H$,P0e),e(P0e,VPr),e(H$,XPr),e(cr,zPr),e(cr,Xt),M(J$,Xt,null),e(Xt,WPr),e(Xt,B0e),e(B0e,QPr),e(Xt,UPr),e(Xt,Xc),e(Xc,HPr),e(Xc,I0e),e(I0e,JPr),e(Xc,YPr),e(Xc,lee),e(lee,KPr),e(Xc,ZPr),e(Xt,eBr),M(H5,Xt,null),e(cr,oBr),e(cr,jr),M(Y$,jr,null),e(jr,rBr),e(jr,N0e),e(N0e,tBr),e(jr,aBr),e(jr,Mn),e(Mn,nBr),e(Mn,q0e),e(q0e,sBr),e(Mn,lBr),e(Mn,j0e),e(j0e,iBr),e(Mn,dBr),e(Mn,D0e),e(D0e,cBr),e(Mn,mBr),e(jr,fBr),e(jr,ye),e(ye,J5),e(J5,G0e),e(G0e,gBr),e(J5,hBr),e(J5,iee),e(iee,uBr),e(J5,pBr),e(ye,_Br),e(ye,Y5),e(Y5,O0e),e(O0e,bBr),e(Y5,vBr),e(Y5,dee),e(dee,FBr),e(Y5,TBr),e(ye,MBr),e(ye,K5),e(K5,V0e),e(V0e,EBr),e(K5,CBr),e(K5,cee),e(cee,wBr),e(K5,ABr),e(ye,LBr),e(ye,Z5),e(Z5,X0e),e(X0e,yBr),e(Z5,xBr),e(Z5,mee),e(mee,$Br),e(Z5,kBr),e(ye,SBr),e(ye,e0),e(e0,z0e),e(z0e,RBr),e(e0,PBr),e(e0,fee),e(fee,BBr),e(e0,IBr),e(ye,NBr),e(ye,o0),e(o0,W0e),e(W0e,qBr),e(o0,jBr),e(o0,gee),e(gee,DBr),e(o0,GBr),e(ye,OBr),e(ye,r0),e(r0,Q0e),e(Q0e,VBr),e(r0,XBr),e(r0,hee),e(hee,zBr),e(r0,WBr),e(ye,QBr),e(ye,t0),e(t0,U0e),e(U0e,UBr),e(t0,HBr),e(t0,uee),e(uee,JBr),e(t0,YBr),e(ye,KBr),e(ye,a0),e(a0,H0e),e(H0e,ZBr),e(a0,eIr),e(a0,pee),e(pee,oIr),e(a0,rIr),e(ye,tIr),e(ye,n0),e(n0,J0e),e(J0e,aIr),e(n0,nIr),e(n0,_ee),e(_ee,sIr),e(n0,lIr),e(jr,iIr),M(s0,jr,null),b(m,aJe,_),b(m,zc,_),e(zc,l0),e(l0,Y0e),M(K$,Y0e,null),e(zc,dIr),e(zc,K0e),e(K0e,cIr),b(m,nJe,_),b(m,mr,_),M(Z$,mr,null),e(mr,mIr),e(mr,Wc),e(Wc,fIr),e(Wc,bee),e(bee,gIr),e(Wc,hIr),e(Wc,vee),e(vee,uIr),e(Wc,pIr),e(mr,_Ir),e(mr,ek),e(ek,bIr),e(ek,Z0e),e(Z0e,vIr),e(ek,FIr),e(mr,TIr),e(mr,zt),M(ok,zt,null),e(zt,MIr),e(zt,ewe),e(ewe,EIr),e(zt,CIr),e(zt,Qc),e(Qc,wIr),e(Qc,owe),e(owe,AIr),e(Qc,LIr),e(Qc,Fee),e(Fee,yIr),e(Qc,xIr),e(zt,$Ir),M(i0,zt,null),e(mr,kIr),e(mr,Dr),M(rk,Dr,null),e(Dr,SIr),e(Dr,rwe),e(rwe,RIr),e(Dr,PIr),e(Dr,En),e(En,BIr),e(En,twe),e(twe,IIr),e(En,NIr),e(En,awe),e(awe,qIr),e(En,jIr),e(En,nwe),e(nwe,DIr),e(En,GIr),e(Dr,OIr),e(Dr,re),e(re,d0),e(d0,swe),e(swe,VIr),e(d0,XIr),e(d0,Tee),e(Tee,zIr),e(d0,WIr),e(re,QIr),e(re,c0),e(c0,lwe),e(lwe,UIr),e(c0,HIr),e(c0,Mee),e(Mee,JIr),e(c0,YIr),e(re,KIr),e(re,m0),e(m0,iwe),e(iwe,ZIr),e(m0,eNr),e(m0,Eee),e(Eee,oNr),e(m0,rNr),e(re,tNr),e(re,f0),e(f0,dwe),e(dwe,aNr),e(f0,nNr),e(f0,Cee),e(Cee,sNr),e(f0,lNr),e(re,iNr),e(re,g0),e(g0,cwe),e(cwe,dNr),e(g0,cNr),e(g0,wee),e(wee,mNr),e(g0,fNr),e(re,gNr),e(re,h0),e(h0,mwe),e(mwe,hNr),e(h0,uNr),e(h0,Aee),e(Aee,pNr),e(h0,_Nr),e(re,bNr),e(re,u0),e(u0,fwe),e(fwe,vNr),e(u0,FNr),e(u0,Lee),e(Lee,TNr),e(u0,MNr),e(re,ENr),e(re,p0),e(p0,gwe),e(gwe,CNr),e(p0,wNr),e(p0,yee),e(yee,ANr),e(p0,LNr),e(re,yNr),e(re,_0),e(_0,hwe),e(hwe,xNr),e(_0,$Nr),e(_0,xee),e(xee,kNr),e(_0,SNr),e(re,RNr),e(re,b0),e(b0,uwe),e(uwe,PNr),e(b0,BNr),e(b0,$ee),e($ee,INr),e(b0,NNr),e(re,qNr),e(re,v0),e(v0,pwe),e(pwe,jNr),e(v0,DNr),e(v0,kee),e(kee,GNr),e(v0,ONr),e(re,VNr),e(re,F0),e(F0,_we),e(_we,XNr),e(F0,zNr),e(F0,See),e(See,WNr),e(F0,QNr),e(re,UNr),e(re,T0),e(T0,bwe),e(bwe,HNr),e(T0,JNr),e(T0,Ree),e(Ree,YNr),e(T0,KNr),e(re,ZNr),e(re,M0),e(M0,vwe),e(vwe,eqr),e(M0,oqr),e(M0,Pee),e(Pee,rqr),e(M0,tqr),e(re,aqr),e(re,E0),e(E0,Fwe),e(Fwe,nqr),e(E0,sqr),e(E0,Bee),e(Bee,lqr),e(E0,iqr),e(re,dqr),e(re,C0),e(C0,Twe),e(Twe,cqr),e(C0,mqr),e(C0,Iee),e(Iee,fqr),e(C0,gqr),e(re,hqr),e(re,w0),e(w0,Mwe),e(Mwe,uqr),e(w0,pqr),e(w0,Nee),e(Nee,_qr),e(w0,bqr),e(re,vqr),e(re,A0),e(A0,Ewe),e(Ewe,Fqr),e(A0,Tqr),e(A0,qee),e(qee,Mqr),e(A0,Eqr),e(re,Cqr),e(re,L0),e(L0,Cwe),e(Cwe,wqr),e(L0,Aqr),e(L0,jee),e(jee,Lqr),e(L0,yqr),e(re,xqr),e(re,y0),e(y0,wwe),e(wwe,$qr),e(y0,kqr),e(y0,Dee),e(Dee,Sqr),e(y0,Rqr),e(re,Pqr),e(re,x0),e(x0,Awe),e(Awe,Bqr),e(x0,Iqr),e(x0,Gee),e(Gee,Nqr),e(x0,qqr),e(re,jqr),e(re,$0),e($0,Lwe),e(Lwe,Dqr),e($0,Gqr),e($0,Oee),e(Oee,Oqr),e($0,Vqr),e(re,Xqr),e(re,k0),e(k0,ywe),e(ywe,zqr),e(k0,Wqr),e(k0,Vee),e(Vee,Qqr),e(k0,Uqr),e(re,Hqr),e(re,S0),e(S0,xwe),e(xwe,Jqr),e(S0,Yqr),e(S0,Xee),e(Xee,Kqr),e(S0,Zqr),e(re,ejr),e(re,R0),e(R0,$we),e($we,ojr),e(R0,rjr),e(R0,zee),e(zee,tjr),e(R0,ajr),e(re,njr),e(re,P0),e(P0,kwe),e(kwe,sjr),e(P0,ljr),e(P0,Wee),e(Wee,ijr),e(P0,djr),e(re,cjr),e(re,B0),e(B0,Swe),e(Swe,mjr),e(B0,fjr),e(B0,Qee),e(Qee,gjr),e(B0,hjr),e(Dr,ujr),M(I0,Dr,null),b(m,sJe,_),b(m,Uc,_),e(Uc,N0),e(N0,Rwe),M(tk,Rwe,null),e(Uc,pjr),e(Uc,Pwe),e(Pwe,_jr),b(m,lJe,_),b(m,fr,_),M(ak,fr,null),e(fr,bjr),e(fr,Hc),e(Hc,vjr),e(Hc,Uee),e(Uee,Fjr),e(Hc,Tjr),e(Hc,Hee),e(Hee,Mjr),e(Hc,Ejr),e(fr,Cjr),e(fr,nk),e(nk,wjr),e(nk,Bwe),e(Bwe,Ajr),e(nk,Ljr),e(fr,yjr),e(fr,Wt),M(sk,Wt,null),e(Wt,xjr),e(Wt,Iwe),e(Iwe,$jr),e(Wt,kjr),e(Wt,Jc),e(Jc,Sjr),e(Jc,Nwe),e(Nwe,Rjr),e(Jc,Pjr),e(Jc,Jee),e(Jee,Bjr),e(Jc,Ijr),e(Wt,Njr),M(q0,Wt,null),e(fr,qjr),e(fr,Gr),M(lk,Gr,null),e(Gr,jjr),e(Gr,qwe),e(qwe,Djr),e(Gr,Gjr),e(Gr,Cn),e(Cn,Ojr),e(Cn,jwe),e(jwe,Vjr),e(Cn,Xjr),e(Cn,Dwe),e(Dwe,zjr),e(Cn,Wjr),e(Cn,Gwe),e(Gwe,Qjr),e(Cn,Ujr),e(Gr,Hjr),e(Gr,ve),e(ve,j0),e(j0,Owe),e(Owe,Jjr),e(j0,Yjr),e(j0,Yee),e(Yee,Kjr),e(j0,Zjr),e(ve,eDr),e(ve,D0),e(D0,Vwe),e(Vwe,oDr),e(D0,rDr),e(D0,Kee),e(Kee,tDr),e(D0,aDr),e(ve,nDr),e(ve,G0),e(G0,Xwe),e(Xwe,sDr),e(G0,lDr),e(G0,Zee),e(Zee,iDr),e(G0,dDr),e(ve,cDr),e(ve,O0),e(O0,zwe),e(zwe,mDr),e(O0,fDr),e(O0,eoe),e(eoe,gDr),e(O0,hDr),e(ve,uDr),e(ve,V0),e(V0,Wwe),e(Wwe,pDr),e(V0,_Dr),e(V0,ooe),e(ooe,bDr),e(V0,vDr),e(ve,FDr),e(ve,X0),e(X0,Qwe),e(Qwe,TDr),e(X0,MDr),e(X0,roe),e(roe,EDr),e(X0,CDr),e(ve,wDr),e(ve,z0),e(z0,Uwe),e(Uwe,ADr),e(z0,LDr),e(z0,toe),e(toe,yDr),e(z0,xDr),e(ve,$Dr),e(ve,W0),e(W0,Hwe),e(Hwe,kDr),e(W0,SDr),e(W0,aoe),e(aoe,RDr),e(W0,PDr),e(ve,BDr),e(ve,Q0),e(Q0,Jwe),e(Jwe,IDr),e(Q0,NDr),e(Q0,noe),e(noe,qDr),e(Q0,jDr),e(ve,DDr),e(ve,U0),e(U0,Ywe),e(Ywe,GDr),e(U0,ODr),e(U0,soe),e(soe,VDr),e(U0,XDr),e(ve,zDr),e(ve,H0),e(H0,Kwe),e(Kwe,WDr),e(H0,QDr),e(H0,loe),e(loe,UDr),e(H0,HDr),e(ve,JDr),e(ve,J0),e(J0,Zwe),e(Zwe,YDr),e(J0,KDr),e(J0,ioe),e(ioe,ZDr),e(J0,eGr),e(ve,oGr),e(ve,Y0),e(Y0,e6e),e(e6e,rGr),e(Y0,tGr),e(Y0,doe),e(doe,aGr),e(Y0,nGr),e(ve,sGr),e(ve,K0),e(K0,o6e),e(o6e,lGr),e(K0,iGr),e(K0,coe),e(coe,dGr),e(K0,cGr),e(ve,mGr),e(ve,Z0),e(Z0,r6e),e(r6e,fGr),e(Z0,gGr),e(Z0,moe),e(moe,hGr),e(Z0,uGr),e(ve,pGr),e(ve,ew),e(ew,t6e),e(t6e,_Gr),e(ew,bGr),e(ew,foe),e(foe,vGr),e(ew,FGr),e(ve,TGr),e(ve,ow),e(ow,a6e),e(a6e,MGr),e(ow,EGr),e(ow,goe),e(goe,CGr),e(ow,wGr),e(Gr,AGr),M(rw,Gr,null),b(m,iJe,_),b(m,Yc,_),e(Yc,tw),e(tw,n6e),M(ik,n6e,null),e(Yc,LGr),e(Yc,s6e),e(s6e,yGr),b(m,dJe,_),b(m,gr,_),M(dk,gr,null),e(gr,xGr),e(gr,Kc),e(Kc,$Gr),e(Kc,hoe),e(hoe,kGr),e(Kc,SGr),e(Kc,uoe),e(uoe,RGr),e(Kc,PGr),e(gr,BGr),e(gr,ck),e(ck,IGr),e(ck,l6e),e(l6e,NGr),e(ck,qGr),e(gr,jGr),e(gr,Qt),M(mk,Qt,null),e(Qt,DGr),e(Qt,i6e),e(i6e,GGr),e(Qt,OGr),e(Qt,Zc),e(Zc,VGr),e(Zc,d6e),e(d6e,XGr),e(Zc,zGr),e(Zc,poe),e(poe,WGr),e(Zc,QGr),e(Qt,UGr),M(aw,Qt,null),e(gr,HGr),e(gr,Or),M(fk,Or,null),e(Or,JGr),e(Or,c6e),e(c6e,YGr),e(Or,KGr),e(Or,wn),e(wn,ZGr),e(wn,m6e),e(m6e,eOr),e(wn,oOr),e(wn,f6e),e(f6e,rOr),e(wn,tOr),e(wn,g6e),e(g6e,aOr),e(wn,nOr),e(Or,sOr),e(Or,gk),e(gk,nw),e(nw,h6e),e(h6e,lOr),e(nw,iOr),e(nw,_oe),e(_oe,dOr),e(nw,cOr),e(gk,mOr),e(gk,sw),e(sw,u6e),e(u6e,fOr),e(sw,gOr),e(sw,boe),e(boe,hOr),e(sw,uOr),e(Or,pOr),M(lw,Or,null),b(m,cJe,_),b(m,em,_),e(em,iw),e(iw,p6e),M(hk,p6e,null),e(em,_Or),e(em,_6e),e(_6e,bOr),b(m,mJe,_),b(m,hr,_),M(uk,hr,null),e(hr,vOr),e(hr,om),e(om,FOr),e(om,voe),e(voe,TOr),e(om,MOr),e(om,Foe),e(Foe,EOr),e(om,COr),e(hr,wOr),e(hr,pk),e(pk,AOr),e(pk,b6e),e(b6e,LOr),e(pk,yOr),e(hr,xOr),e(hr,Ut),M(_k,Ut,null),e(Ut,$Or),e(Ut,v6e),e(v6e,kOr),e(Ut,SOr),e(Ut,rm),e(rm,ROr),e(rm,F6e),e(F6e,POr),e(rm,BOr),e(rm,Toe),e(Toe,IOr),e(rm,NOr),e(Ut,qOr),M(dw,Ut,null),e(hr,jOr),e(hr,Vr),M(bk,Vr,null),e(Vr,DOr),e(Vr,T6e),e(T6e,GOr),e(Vr,OOr),e(Vr,An),e(An,VOr),e(An,M6e),e(M6e,XOr),e(An,zOr),e(An,E6e),e(E6e,WOr),e(An,QOr),e(An,C6e),e(C6e,UOr),e(An,HOr),e(Vr,JOr),e(Vr,w6e),e(w6e,cw),e(cw,A6e),e(A6e,YOr),e(cw,KOr),e(cw,Moe),e(Moe,ZOr),e(cw,eVr),e(Vr,oVr),M(mw,Vr,null),b(m,fJe,_),b(m,tm,_),e(tm,fw),e(fw,L6e),M(vk,L6e,null),e(tm,rVr),e(tm,y6e),e(y6e,tVr),b(m,gJe,_),b(m,ur,_),M(Fk,ur,null),e(ur,aVr),e(ur,am),e(am,nVr),e(am,Eoe),e(Eoe,sVr),e(am,lVr),e(am,Coe),e(Coe,iVr),e(am,dVr),e(ur,cVr),e(ur,Tk),e(Tk,mVr),e(Tk,x6e),e(x6e,fVr),e(Tk,gVr),e(ur,hVr),e(ur,Ht),M(Mk,Ht,null),e(Ht,uVr),e(Ht,$6e),e($6e,pVr),e(Ht,_Vr),e(Ht,nm),e(nm,bVr),e(nm,k6e),e(k6e,vVr),e(nm,FVr),e(nm,woe),e(woe,TVr),e(nm,MVr),e(Ht,EVr),M(gw,Ht,null),e(ur,CVr),e(ur,Xr),M(Ek,Xr,null),e(Xr,wVr),e(Xr,S6e),e(S6e,AVr),e(Xr,LVr),e(Xr,Ln),e(Ln,yVr),e(Ln,R6e),e(R6e,xVr),e(Ln,$Vr),e(Ln,P6e),e(P6e,kVr),e(Ln,SVr),e(Ln,B6e),e(B6e,RVr),e(Ln,PVr),e(Xr,BVr),e(Xr,ie),e(ie,hw),e(hw,I6e),e(I6e,IVr),e(hw,NVr),e(hw,Aoe),e(Aoe,qVr),e(hw,jVr),e(ie,DVr),e(ie,uw),e(uw,N6e),e(N6e,GVr),e(uw,OVr),e(uw,Loe),e(Loe,VVr),e(uw,XVr),e(ie,zVr),e(ie,pw),e(pw,q6e),e(q6e,WVr),e(pw,QVr),e(pw,yoe),e(yoe,UVr),e(pw,HVr),e(ie,JVr),e(ie,_w),e(_w,j6e),e(j6e,YVr),e(_w,KVr),e(_w,xoe),e(xoe,ZVr),e(_w,eXr),e(ie,oXr),e(ie,bw),e(bw,D6e),e(D6e,rXr),e(bw,tXr),e(bw,$oe),e($oe,aXr),e(bw,nXr),e(ie,sXr),e(ie,vw),e(vw,G6e),e(G6e,lXr),e(vw,iXr),e(vw,koe),e(koe,dXr),e(vw,cXr),e(ie,mXr),e(ie,Fw),e(Fw,O6e),e(O6e,fXr),e(Fw,gXr),e(Fw,Soe),e(Soe,hXr),e(Fw,uXr),e(ie,pXr),e(ie,Tw),e(Tw,V6e),e(V6e,_Xr),e(Tw,bXr),e(Tw,Roe),e(Roe,vXr),e(Tw,FXr),e(ie,TXr),e(ie,Mw),e(Mw,X6e),e(X6e,MXr),e(Mw,EXr),e(Mw,Poe),e(Poe,CXr),e(Mw,wXr),e(ie,AXr),e(ie,Ew),e(Ew,z6e),e(z6e,LXr),e(Ew,yXr),e(Ew,Boe),e(Boe,xXr),e(Ew,$Xr),e(ie,kXr),e(ie,Cw),e(Cw,W6e),e(W6e,SXr),e(Cw,RXr),e(Cw,Ioe),e(Ioe,PXr),e(Cw,BXr),e(ie,IXr),e(ie,ww),e(ww,Q6e),e(Q6e,NXr),e(ww,qXr),e(ww,Noe),e(Noe,jXr),e(ww,DXr),e(ie,GXr),e(ie,Aw),e(Aw,U6e),e(U6e,OXr),e(Aw,VXr),e(Aw,qoe),e(qoe,XXr),e(Aw,zXr),e(ie,WXr),e(ie,Lw),e(Lw,H6e),e(H6e,QXr),e(Lw,UXr),e(Lw,joe),e(joe,HXr),e(Lw,JXr),e(ie,YXr),e(ie,yw),e(yw,J6e),e(J6e,KXr),e(yw,ZXr),e(yw,Doe),e(Doe,ezr),e(yw,ozr),e(ie,rzr),e(ie,xw),e(xw,Y6e),e(Y6e,tzr),e(xw,azr),e(xw,Goe),e(Goe,nzr),e(xw,szr),e(ie,lzr),e(ie,$w),e($w,K6e),e(K6e,izr),e($w,dzr),e($w,Ooe),e(Ooe,czr),e($w,mzr),e(ie,fzr),e(ie,kw),e(kw,Z6e),e(Z6e,gzr),e(kw,hzr),e(kw,Voe),e(Voe,uzr),e(kw,pzr),e(ie,_zr),e(ie,Sw),e(Sw,eAe),e(eAe,bzr),e(Sw,vzr),e(Sw,Xoe),e(Xoe,Fzr),e(Sw,Tzr),e(ie,Mzr),e(ie,Rw),e(Rw,oAe),e(oAe,Ezr),e(Rw,Czr),e(Rw,zoe),e(zoe,wzr),e(Rw,Azr),e(ie,Lzr),e(ie,Pw),e(Pw,rAe),e(rAe,yzr),e(Pw,xzr),e(Pw,Woe),e(Woe,$zr),e(Pw,kzr),e(Xr,Szr),M(Bw,Xr,null),b(m,hJe,_),b(m,sm,_),e(sm,Iw),e(Iw,tAe),M(Ck,tAe,null),e(sm,Rzr),e(sm,aAe),e(aAe,Pzr),b(m,uJe,_),b(m,pr,_),M(wk,pr,null),e(pr,Bzr),e(pr,lm),e(lm,Izr),e(lm,Qoe),e(Qoe,Nzr),e(lm,qzr),e(lm,Uoe),e(Uoe,jzr),e(lm,Dzr),e(pr,Gzr),e(pr,Ak),e(Ak,Ozr),e(Ak,nAe),e(nAe,Vzr),e(Ak,Xzr),e(pr,zzr),e(pr,Jt),M(Lk,Jt,null),e(Jt,Wzr),e(Jt,sAe),e(sAe,Qzr),e(Jt,Uzr),e(Jt,im),e(im,Hzr),e(im,lAe),e(lAe,Jzr),e(im,Yzr),e(im,Hoe),e(Hoe,Kzr),e(im,Zzr),e(Jt,eWr),M(Nw,Jt,null),e(pr,oWr),e(pr,zr),M(yk,zr,null),e(zr,rWr),e(zr,iAe),e(iAe,tWr),e(zr,aWr),e(zr,yn),e(yn,nWr),e(yn,dAe),e(dAe,sWr),e(yn,lWr),e(yn,cAe),e(cAe,iWr),e(yn,dWr),e(yn,mAe),e(mAe,cWr),e(yn,mWr),e(zr,fWr),e(zr,de),e(de,qw),e(qw,fAe),e(fAe,gWr),e(qw,hWr),e(qw,Joe),e(Joe,uWr),e(qw,pWr),e(de,_Wr),e(de,jw),e(jw,gAe),e(gAe,bWr),e(jw,vWr),e(jw,Yoe),e(Yoe,FWr),e(jw,TWr),e(de,MWr),e(de,Dw),e(Dw,hAe),e(hAe,EWr),e(Dw,CWr),e(Dw,Koe),e(Koe,wWr),e(Dw,AWr),e(de,LWr),e(de,Gw),e(Gw,uAe),e(uAe,yWr),e(Gw,xWr),e(Gw,Zoe),e(Zoe,$Wr),e(Gw,kWr),e(de,SWr),e(de,Ow),e(Ow,pAe),e(pAe,RWr),e(Ow,PWr),e(Ow,ere),e(ere,BWr),e(Ow,IWr),e(de,NWr),e(de,Vw),e(Vw,_Ae),e(_Ae,qWr),e(Vw,jWr),e(Vw,ore),e(ore,DWr),e(Vw,GWr),e(de,OWr),e(de,Xw),e(Xw,bAe),e(bAe,VWr),e(Xw,XWr),e(Xw,rre),e(rre,zWr),e(Xw,WWr),e(de,QWr),e(de,zw),e(zw,vAe),e(vAe,UWr),e(zw,HWr),e(zw,tre),e(tre,JWr),e(zw,YWr),e(de,KWr),e(de,Ww),e(Ww,FAe),e(FAe,ZWr),e(Ww,eQr),e(Ww,are),e(are,oQr),e(Ww,rQr),e(de,tQr),e(de,Qw),e(Qw,TAe),e(TAe,aQr),e(Qw,nQr),e(Qw,nre),e(nre,sQr),e(Qw,lQr),e(de,iQr),e(de,Uw),e(Uw,MAe),e(MAe,dQr),e(Uw,cQr),e(Uw,sre),e(sre,mQr),e(Uw,fQr),e(de,gQr),e(de,Hw),e(Hw,EAe),e(EAe,hQr),e(Hw,uQr),e(Hw,lre),e(lre,pQr),e(Hw,_Qr),e(de,bQr),e(de,Jw),e(Jw,CAe),e(CAe,vQr),e(Jw,FQr),e(Jw,ire),e(ire,TQr),e(Jw,MQr),e(de,EQr),e(de,Yw),e(Yw,wAe),e(wAe,CQr),e(Yw,wQr),e(Yw,dre),e(dre,AQr),e(Yw,LQr),e(de,yQr),e(de,Kw),e(Kw,AAe),e(AAe,xQr),e(Kw,$Qr),e(Kw,cre),e(cre,kQr),e(Kw,SQr),e(de,RQr),e(de,Zw),e(Zw,LAe),e(LAe,PQr),e(Zw,BQr),e(Zw,mre),e(mre,IQr),e(Zw,NQr),e(de,qQr),e(de,e6),e(e6,yAe),e(yAe,jQr),e(e6,DQr),e(e6,fre),e(fre,GQr),e(e6,OQr),e(de,VQr),e(de,o6),e(o6,xAe),e(xAe,XQr),e(o6,zQr),e(o6,gre),e(gre,WQr),e(o6,QQr),e(de,UQr),e(de,r6),e(r6,$Ae),e($Ae,HQr),e(r6,JQr),e(r6,hre),e(hre,YQr),e(r6,KQr),e(de,ZQr),e(de,t6),e(t6,kAe),e(kAe,eUr),e(t6,oUr),e(t6,ure),e(ure,rUr),e(t6,tUr),e(de,aUr),e(de,a6),e(a6,SAe),e(SAe,nUr),e(a6,sUr),e(a6,pre),e(pre,lUr),e(a6,iUr),e(zr,dUr),M(n6,zr,null),b(m,pJe,_),b(m,dm,_),e(dm,s6),e(s6,RAe),M(xk,RAe,null),e(dm,cUr),e(dm,PAe),e(PAe,mUr),b(m,_Je,_),b(m,_r,_),M($k,_r,null),e(_r,fUr),e(_r,cm),e(cm,gUr),e(cm,_re),e(_re,hUr),e(cm,uUr),e(cm,bre),e(bre,pUr),e(cm,_Ur),e(_r,bUr),e(_r,kk),e(kk,vUr),e(kk,BAe),e(BAe,FUr),e(kk,TUr),e(_r,MUr),e(_r,Yt),M(Sk,Yt,null),e(Yt,EUr),e(Yt,IAe),e(IAe,CUr),e(Yt,wUr),e(Yt,mm),e(mm,AUr),e(mm,NAe),e(NAe,LUr),e(mm,yUr),e(mm,vre),e(vre,xUr),e(mm,$Ur),e(Yt,kUr),M(l6,Yt,null),e(_r,SUr),e(_r,Wr),M(Rk,Wr,null),e(Wr,RUr),e(Wr,qAe),e(qAe,PUr),e(Wr,BUr),e(Wr,xn),e(xn,IUr),e(xn,jAe),e(jAe,NUr),e(xn,qUr),e(xn,DAe),e(DAe,jUr),e(xn,DUr),e(xn,GAe),e(GAe,GUr),e(xn,OUr),e(Wr,VUr),e(Wr,OAe),e(OAe,i6),e(i6,VAe),e(VAe,XUr),e(i6,zUr),e(i6,Fre),e(Fre,WUr),e(i6,QUr),e(Wr,UUr),M(d6,Wr,null),b(m,bJe,_),b(m,fm,_),e(fm,c6),e(c6,XAe),M(Pk,XAe,null),e(fm,HUr),e(fm,zAe),e(zAe,JUr),b(m,vJe,_),b(m,br,_),M(Bk,br,null),e(br,YUr),e(br,gm),e(gm,KUr),e(gm,Tre),e(Tre,ZUr),e(gm,eHr),e(gm,Mre),e(Mre,oHr),e(gm,rHr),e(br,tHr),e(br,Ik),e(Ik,aHr),e(Ik,WAe),e(WAe,nHr),e(Ik,sHr),e(br,lHr),e(br,Kt),M(Nk,Kt,null),e(Kt,iHr),e(Kt,QAe),e(QAe,dHr),e(Kt,cHr),e(Kt,hm),e(hm,mHr),e(hm,UAe),e(UAe,fHr),e(hm,gHr),e(hm,Ere),e(Ere,hHr),e(hm,uHr),e(Kt,pHr),M(m6,Kt,null),e(br,_Hr),e(br,Qr),M(qk,Qr,null),e(Qr,bHr),e(Qr,HAe),e(HAe,vHr),e(Qr,FHr),e(Qr,$n),e($n,THr),e($n,JAe),e(JAe,MHr),e($n,EHr),e($n,YAe),e(YAe,CHr),e($n,wHr),e($n,KAe),e(KAe,AHr),e($n,LHr),e(Qr,yHr),e(Qr,ZAe),e(ZAe,f6),e(f6,e7e),e(e7e,xHr),e(f6,$Hr),e(f6,Cre),e(Cre,kHr),e(f6,SHr),e(Qr,RHr),M(g6,Qr,null),b(m,FJe,_),b(m,um,_),e(um,h6),e(h6,o7e),M(jk,o7e,null),e(um,PHr),e(um,r7e),e(r7e,BHr),b(m,TJe,_),b(m,vr,_),M(Dk,vr,null),e(vr,IHr),e(vr,pm),e(pm,NHr),e(pm,wre),e(wre,qHr),e(pm,jHr),e(pm,Are),e(Are,DHr),e(pm,GHr),e(vr,OHr),e(vr,Gk),e(Gk,VHr),e(Gk,t7e),e(t7e,XHr),e(Gk,zHr),e(vr,WHr),e(vr,Zt),M(Ok,Zt,null),e(Zt,QHr),e(Zt,a7e),e(a7e,UHr),e(Zt,HHr),e(Zt,_m),e(_m,JHr),e(_m,n7e),e(n7e,YHr),e(_m,KHr),e(_m,Lre),e(Lre,ZHr),e(_m,eJr),e(Zt,oJr),M(u6,Zt,null),e(vr,rJr),e(vr,Ur),M(Vk,Ur,null),e(Ur,tJr),e(Ur,s7e),e(s7e,aJr),e(Ur,nJr),e(Ur,kn),e(kn,sJr),e(kn,l7e),e(l7e,lJr),e(kn,iJr),e(kn,i7e),e(i7e,dJr),e(kn,cJr),e(kn,d7e),e(d7e,mJr),e(kn,fJr),e(Ur,gJr),e(Ur,te),e(te,p6),e(p6,c7e),e(c7e,hJr),e(p6,uJr),e(p6,yre),e(yre,pJr),e(p6,_Jr),e(te,bJr),e(te,_6),e(_6,m7e),e(m7e,vJr),e(_6,FJr),e(_6,xre),e(xre,TJr),e(_6,MJr),e(te,EJr),e(te,b6),e(b6,f7e),e(f7e,CJr),e(b6,wJr),e(b6,$re),e($re,AJr),e(b6,LJr),e(te,yJr),e(te,v6),e(v6,g7e),e(g7e,xJr),e(v6,$Jr),e(v6,kre),e(kre,kJr),e(v6,SJr),e(te,RJr),e(te,F6),e(F6,h7e),e(h7e,PJr),e(F6,BJr),e(F6,Sre),e(Sre,IJr),e(F6,NJr),e(te,qJr),e(te,T6),e(T6,u7e),e(u7e,jJr),e(T6,DJr),e(T6,Rre),e(Rre,GJr),e(T6,OJr),e(te,VJr),e(te,M6),e(M6,p7e),e(p7e,XJr),e(M6,zJr),e(M6,Pre),e(Pre,WJr),e(M6,QJr),e(te,UJr),e(te,E6),e(E6,_7e),e(_7e,HJr),e(E6,JJr),e(E6,Bre),e(Bre,YJr),e(E6,KJr),e(te,ZJr),e(te,C6),e(C6,b7e),e(b7e,eYr),e(C6,oYr),e(C6,Ire),e(Ire,rYr),e(C6,tYr),e(te,aYr),e(te,w6),e(w6,v7e),e(v7e,nYr),e(w6,sYr),e(w6,Nre),e(Nre,lYr),e(w6,iYr),e(te,dYr),e(te,A6),e(A6,F7e),e(F7e,cYr),e(A6,mYr),e(A6,qre),e(qre,fYr),e(A6,gYr),e(te,hYr),e(te,L6),e(L6,T7e),e(T7e,uYr),e(L6,pYr),e(L6,jre),e(jre,_Yr),e(L6,bYr),e(te,vYr),e(te,y6),e(y6,M7e),e(M7e,FYr),e(y6,TYr),e(y6,Dre),e(Dre,MYr),e(y6,EYr),e(te,CYr),e(te,x6),e(x6,E7e),e(E7e,wYr),e(x6,AYr),e(x6,Gre),e(Gre,LYr),e(x6,yYr),e(te,xYr),e(te,$6),e($6,C7e),e(C7e,$Yr),e($6,kYr),e($6,Ore),e(Ore,SYr),e($6,RYr),e(te,PYr),e(te,k6),e(k6,w7e),e(w7e,BYr),e(k6,IYr),e(k6,Vre),e(Vre,NYr),e(k6,qYr),e(te,jYr),e(te,S6),e(S6,A7e),e(A7e,DYr),e(S6,GYr),e(S6,Xre),e(Xre,OYr),e(S6,VYr),e(te,XYr),e(te,R6),e(R6,L7e),e(L7e,zYr),e(R6,WYr),e(R6,zre),e(zre,QYr),e(R6,UYr),e(te,HYr),e(te,P6),e(P6,y7e),e(y7e,JYr),e(P6,YYr),e(P6,Wre),e(Wre,KYr),e(P6,ZYr),e(te,eKr),e(te,B6),e(B6,x7e),e(x7e,oKr),e(B6,rKr),e(B6,Qre),e(Qre,tKr),e(B6,aKr),e(te,nKr),e(te,I6),e(I6,$7e),e($7e,sKr),e(I6,lKr),e(I6,Ure),e(Ure,iKr),e(I6,dKr),e(te,cKr),e(te,N6),e(N6,k7e),e(k7e,mKr),e(N6,fKr),e(N6,Hre),e(Hre,gKr),e(N6,hKr),e(te,uKr),e(te,q6),e(q6,S7e),e(S7e,pKr),e(q6,_Kr),e(q6,Jre),e(Jre,bKr),e(q6,vKr),e(te,FKr),e(te,j6),e(j6,R7e),e(R7e,TKr),e(j6,MKr),e(j6,Yre),e(Yre,EKr),e(j6,CKr),e(te,wKr),e(te,D6),e(D6,P7e),e(P7e,AKr),e(D6,LKr),e(D6,Kre),e(Kre,yKr),e(D6,xKr),e(te,$Kr),e(te,G6),e(G6,B7e),e(B7e,kKr),e(G6,SKr),e(G6,Zre),e(Zre,RKr),e(G6,PKr),e(te,BKr),e(te,O6),e(O6,I7e),e(I7e,IKr),e(O6,NKr),e(O6,ete),e(ete,qKr),e(O6,jKr),e(Ur,DKr),M(V6,Ur,null),b(m,MJe,_),b(m,bm,_),e(bm,X6),e(X6,N7e),M(Xk,N7e,null),e(bm,GKr),e(bm,q7e),e(q7e,OKr),b(m,EJe,_),b(m,Fr,_),M(zk,Fr,null),e(Fr,VKr),e(Fr,vm),e(vm,XKr),e(vm,ote),e(ote,zKr),e(vm,WKr),e(vm,rte),e(rte,QKr),e(vm,UKr),e(Fr,HKr),e(Fr,Wk),e(Wk,JKr),e(Wk,j7e),e(j7e,YKr),e(Wk,KKr),e(Fr,ZKr),e(Fr,ea),M(Qk,ea,null),e(ea,eZr),e(ea,D7e),e(D7e,oZr),e(ea,rZr),e(ea,Fm),e(Fm,tZr),e(Fm,G7e),e(G7e,aZr),e(Fm,nZr),e(Fm,tte),e(tte,sZr),e(Fm,lZr),e(ea,iZr),M(z6,ea,null),e(Fr,dZr),e(Fr,Hr),M(Uk,Hr,null),e(Hr,cZr),e(Hr,O7e),e(O7e,mZr),e(Hr,fZr),e(Hr,Sn),e(Sn,gZr),e(Sn,V7e),e(V7e,hZr),e(Sn,uZr),e(Sn,X7e),e(X7e,pZr),e(Sn,_Zr),e(Sn,z7e),e(z7e,bZr),e(Sn,vZr),e(Hr,FZr),e(Hr,xe),e(xe,W6),e(W6,W7e),e(W7e,TZr),e(W6,MZr),e(W6,ate),e(ate,EZr),e(W6,CZr),e(xe,wZr),e(xe,Q6),e(Q6,Q7e),e(Q7e,AZr),e(Q6,LZr),e(Q6,nte),e(nte,yZr),e(Q6,xZr),e(xe,$Zr),e(xe,U6),e(U6,U7e),e(U7e,kZr),e(U6,SZr),e(U6,ste),e(ste,RZr),e(U6,PZr),e(xe,BZr),e(xe,H6),e(H6,H7e),e(H7e,IZr),e(H6,NZr),e(H6,lte),e(lte,qZr),e(H6,jZr),e(xe,DZr),e(xe,J6),e(J6,J7e),e(J7e,GZr),e(J6,OZr),e(J6,ite),e(ite,VZr),e(J6,XZr),e(xe,zZr),e(xe,Y6),e(Y6,Y7e),e(Y7e,WZr),e(Y6,QZr),e(Y6,dte),e(dte,UZr),e(Y6,HZr),e(xe,JZr),e(xe,K6),e(K6,K7e),e(K7e,YZr),e(K6,KZr),e(K6,cte),e(cte,ZZr),e(K6,eet),e(xe,oet),e(xe,Z6),e(Z6,Z7e),e(Z7e,ret),e(Z6,tet),e(Z6,mte),e(mte,aet),e(Z6,net),e(xe,set),e(xe,eA),e(eA,eLe),e(eLe,iet),e(eA,det),e(eA,fte),e(fte,cet),e(eA,met),e(xe,fet),e(xe,oA),e(oA,oLe),e(oLe,get),e(oA,het),e(oA,gte),e(gte,uet),e(oA,pet),e(Hr,_et),M(rA,Hr,null),b(m,CJe,_),b(m,Tm,_),e(Tm,tA),e(tA,rLe),M(Hk,rLe,null),e(Tm,bet),e(Tm,tLe),e(tLe,vet),b(m,wJe,_),b(m,Tr,_),M(Jk,Tr,null),e(Tr,Fet),e(Tr,Mm),e(Mm,Tet),e(Mm,hte),e(hte,Met),e(Mm,Eet),e(Mm,ute),e(ute,Cet),e(Mm,wet),e(Tr,Aet),e(Tr,Yk),e(Yk,Let),e(Yk,aLe),e(aLe,yet),e(Yk,xet),e(Tr,$et),e(Tr,oa),M(Kk,oa,null),e(oa,ket),e(oa,nLe),e(nLe,Set),e(oa,Ret),e(oa,Em),e(Em,Pet),e(Em,sLe),e(sLe,Bet),e(Em,Iet),e(Em,pte),e(pte,Net),e(Em,qet),e(oa,jet),M(aA,oa,null),e(Tr,Det),e(Tr,Jr),M(Zk,Jr,null),e(Jr,Get),e(Jr,lLe),e(lLe,Oet),e(Jr,Vet),e(Jr,Rn),e(Rn,Xet),e(Rn,iLe),e(iLe,zet),e(Rn,Wet),e(Rn,dLe),e(dLe,Qet),e(Rn,Uet),e(Rn,cLe),e(cLe,Het),e(Rn,Jet),e(Jr,Yet),e(Jr,Ee),e(Ee,nA),e(nA,mLe),e(mLe,Ket),e(nA,Zet),e(nA,_te),e(_te,eot),e(nA,oot),e(Ee,rot),e(Ee,sA),e(sA,fLe),e(fLe,tot),e(sA,aot),e(sA,bte),e(bte,not),e(sA,sot),e(Ee,lot),e(Ee,lA),e(lA,gLe),e(gLe,iot),e(lA,dot),e(lA,vte),e(vte,cot),e(lA,mot),e(Ee,fot),e(Ee,iA),e(iA,hLe),e(hLe,got),e(iA,hot),e(iA,Fte),e(Fte,uot),e(iA,pot),e(Ee,_ot),e(Ee,dA),e(dA,uLe),e(uLe,bot),e(dA,vot),e(dA,Tte),e(Tte,Fot),e(dA,Tot),e(Ee,Mot),e(Ee,cA),e(cA,pLe),e(pLe,Eot),e(cA,Cot),e(cA,Mte),e(Mte,wot),e(cA,Aot),e(Ee,Lot),e(Ee,mA),e(mA,_Le),e(_Le,yot),e(mA,xot),e(mA,Ete),e(Ete,$ot),e(mA,kot),e(Ee,Sot),e(Ee,fA),e(fA,bLe),e(bLe,Rot),e(fA,Pot),e(fA,Cte),e(Cte,Bot),e(fA,Iot),e(Ee,Not),e(Ee,gA),e(gA,vLe),e(vLe,qot),e(gA,jot),e(gA,wte),e(wte,Dot),e(gA,Got),e(Ee,Oot),e(Ee,hA),e(hA,FLe),e(FLe,Vot),e(hA,Xot),e(hA,Ate),e(Ate,zot),e(hA,Wot),e(Ee,Qot),e(Ee,uA),e(uA,TLe),e(TLe,Uot),e(uA,Hot),e(uA,Lte),e(Lte,Jot),e(uA,Yot),e(Ee,Kot),e(Ee,pA),e(pA,MLe),e(MLe,Zot),e(pA,ert),e(pA,yte),e(yte,ort),e(pA,rrt),e(Ee,trt),e(Ee,_A),e(_A,ELe),e(ELe,art),e(_A,nrt),e(_A,xte),e(xte,srt),e(_A,lrt),e(Jr,irt),M(bA,Jr,null),b(m,AJe,_),b(m,Cm,_),e(Cm,vA),e(vA,CLe),M(eS,CLe,null),e(Cm,drt),e(Cm,wLe),e(wLe,crt),b(m,LJe,_),b(m,Mr,_),M(oS,Mr,null),e(Mr,mrt),e(Mr,wm),e(wm,frt),e(wm,$te),e($te,grt),e(wm,hrt),e(wm,kte),e(kte,urt),e(wm,prt),e(Mr,_rt),e(Mr,rS),e(rS,brt),e(rS,ALe),e(ALe,vrt),e(rS,Frt),e(Mr,Trt),e(Mr,ra),M(tS,ra,null),e(ra,Mrt),e(ra,LLe),e(LLe,Ert),e(ra,Crt),e(ra,Am),e(Am,wrt),e(Am,yLe),e(yLe,Art),e(Am,Lrt),e(Am,Ste),e(Ste,yrt),e(Am,xrt),e(ra,$rt),M(FA,ra,null),e(Mr,krt),e(Mr,Yr),M(aS,Yr,null),e(Yr,Srt),e(Yr,xLe),e(xLe,Rrt),e(Yr,Prt),e(Yr,Pn),e(Pn,Brt),e(Pn,$Le),e($Le,Irt),e(Pn,Nrt),e(Pn,kLe),e(kLe,qrt),e(Pn,jrt),e(Pn,SLe),e(SLe,Drt),e(Pn,Grt),e(Yr,Ort),e(Yr,$e),e($e,TA),e(TA,RLe),e(RLe,Vrt),e(TA,Xrt),e(TA,Rte),e(Rte,zrt),e(TA,Wrt),e($e,Qrt),e($e,MA),e(MA,PLe),e(PLe,Urt),e(MA,Hrt),e(MA,Pte),e(Pte,Jrt),e(MA,Yrt),e($e,Krt),e($e,EA),e(EA,BLe),e(BLe,Zrt),e(EA,ett),e(EA,Bte),e(Bte,ott),e(EA,rtt),e($e,ttt),e($e,CA),e(CA,ILe),e(ILe,att),e(CA,ntt),e(CA,Ite),e(Ite,stt),e(CA,ltt),e($e,itt),e($e,wA),e(wA,NLe),e(NLe,dtt),e(wA,ctt),e(wA,Nte),e(Nte,mtt),e(wA,ftt),e($e,gtt),e($e,AA),e(AA,qLe),e(qLe,htt),e(AA,utt),e(AA,qte),e(qte,ptt),e(AA,_tt),e($e,btt),e($e,LA),e(LA,jLe),e(jLe,vtt),e(LA,Ftt),e(LA,jte),e(jte,Ttt),e(LA,Mtt),e($e,Ett),e($e,yA),e(yA,DLe),e(DLe,Ctt),e(yA,wtt),e(yA,Dte),e(Dte,Att),e(yA,Ltt),e($e,ytt),e($e,xA),e(xA,GLe),e(GLe,xtt),e(xA,$tt),e(xA,Gte),e(Gte,ktt),e(xA,Stt),e($e,Rtt),e($e,$A),e($A,OLe),e(OLe,Ptt),e($A,Btt),e($A,Ote),e(Ote,Itt),e($A,Ntt),e(Yr,qtt),M(kA,Yr,null),b(m,yJe,_),b(m,Lm,_),e(Lm,SA),e(SA,VLe),M(nS,VLe,null),e(Lm,jtt),e(Lm,XLe),e(XLe,Dtt),b(m,xJe,_),b(m,Er,_),M(sS,Er,null),e(Er,Gtt),e(Er,ym),e(ym,Ott),e(ym,Vte),e(Vte,Vtt),e(ym,Xtt),e(ym,Xte),e(Xte,ztt),e(ym,Wtt),e(Er,Qtt),e(Er,lS),e(lS,Utt),e(lS,zLe),e(zLe,Htt),e(lS,Jtt),e(Er,Ytt),e(Er,ta),M(iS,ta,null),e(ta,Ktt),e(ta,WLe),e(WLe,Ztt),e(ta,eat),e(ta,xm),e(xm,oat),e(xm,QLe),e(QLe,rat),e(xm,tat),e(xm,zte),e(zte,aat),e(xm,nat),e(ta,sat),M(RA,ta,null),e(Er,lat),e(Er,Kr),M(dS,Kr,null),e(Kr,iat),e(Kr,ULe),e(ULe,dat),e(Kr,cat),e(Kr,Bn),e(Bn,mat),e(Bn,HLe),e(HLe,fat),e(Bn,gat),e(Bn,JLe),e(JLe,hat),e(Bn,uat),e(Bn,YLe),e(YLe,pat),e(Bn,_at),e(Kr,bat),e(Kr,ke),e(ke,PA),e(PA,KLe),e(KLe,vat),e(PA,Fat),e(PA,Wte),e(Wte,Tat),e(PA,Mat),e(ke,Eat),e(ke,BA),e(BA,ZLe),e(ZLe,Cat),e(BA,wat),e(BA,Qte),e(Qte,Aat),e(BA,Lat),e(ke,yat),e(ke,IA),e(IA,eye),e(eye,xat),e(IA,$at),e(IA,Ute),e(Ute,kat),e(IA,Sat),e(ke,Rat),e(ke,NA),e(NA,oye),e(oye,Pat),e(NA,Bat),e(NA,Hte),e(Hte,Iat),e(NA,Nat),e(ke,qat),e(ke,qA),e(qA,rye),e(rye,jat),e(qA,Dat),e(qA,Jte),e(Jte,Gat),e(qA,Oat),e(ke,Vat),e(ke,jA),e(jA,tye),e(tye,Xat),e(jA,zat),e(jA,Yte),e(Yte,Wat),e(jA,Qat),e(ke,Uat),e(ke,DA),e(DA,aye),e(aye,Hat),e(DA,Jat),e(DA,Kte),e(Kte,Yat),e(DA,Kat),e(ke,Zat),e(ke,GA),e(GA,nye),e(nye,ent),e(GA,ont),e(GA,Zte),e(Zte,rnt),e(GA,tnt),e(ke,ant),e(ke,OA),e(OA,sye),e(sye,nnt),e(OA,snt),e(OA,eae),e(eae,lnt),e(OA,int),e(ke,dnt),e(ke,VA),e(VA,lye),e(lye,cnt),e(VA,mnt),e(VA,oae),e(oae,fnt),e(VA,gnt),e(Kr,hnt),M(XA,Kr,null),b(m,$Je,_),b(m,$m,_),e($m,zA),e(zA,iye),M(cS,iye,null),e($m,unt),e($m,dye),e(dye,pnt),b(m,kJe,_),b(m,Cr,_),M(mS,Cr,null),e(Cr,_nt),e(Cr,km),e(km,bnt),e(km,rae),e(rae,vnt),e(km,Fnt),e(km,tae),e(tae,Tnt),e(km,Mnt),e(Cr,Ent),e(Cr,fS),e(fS,Cnt),e(fS,cye),e(cye,wnt),e(fS,Ant),e(Cr,Lnt),e(Cr,aa),M(gS,aa,null),e(aa,ynt),e(aa,mye),e(mye,xnt),e(aa,$nt),e(aa,Sm),e(Sm,knt),e(Sm,fye),e(fye,Snt),e(Sm,Rnt),e(Sm,aae),e(aae,Pnt),e(Sm,Bnt),e(aa,Int),M(WA,aa,null),e(Cr,Nnt),e(Cr,Zr),M(hS,Zr,null),e(Zr,qnt),e(Zr,gye),e(gye,jnt),e(Zr,Dnt),e(Zr,In),e(In,Gnt),e(In,hye),e(hye,Ont),e(In,Vnt),e(In,uye),e(uye,Xnt),e(In,znt),e(In,pye),e(pye,Wnt),e(In,Qnt),e(Zr,Unt),e(Zr,Se),e(Se,QA),e(QA,_ye),e(_ye,Hnt),e(QA,Jnt),e(QA,nae),e(nae,Ynt),e(QA,Knt),e(Se,Znt),e(Se,UA),e(UA,bye),e(bye,est),e(UA,ost),e(UA,sae),e(sae,rst),e(UA,tst),e(Se,ast),e(Se,HA),e(HA,vye),e(vye,nst),e(HA,sst),e(HA,lae),e(lae,lst),e(HA,ist),e(Se,dst),e(Se,JA),e(JA,Fye),e(Fye,cst),e(JA,mst),e(JA,iae),e(iae,fst),e(JA,gst),e(Se,hst),e(Se,YA),e(YA,Tye),e(Tye,ust),e(YA,pst),e(YA,dae),e(dae,_st),e(YA,bst),e(Se,vst),e(Se,KA),e(KA,Mye),e(Mye,Fst),e(KA,Tst),e(KA,cae),e(cae,Mst),e(KA,Est),e(Se,Cst),e(Se,ZA),e(ZA,Eye),e(Eye,wst),e(ZA,Ast),e(ZA,mae),e(mae,Lst),e(ZA,yst),e(Se,xst),e(Se,e7),e(e7,Cye),e(Cye,$st),e(e7,kst),e(e7,fae),e(fae,Sst),e(e7,Rst),e(Se,Pst),e(Se,o7),e(o7,wye),e(wye,Bst),e(o7,Ist),e(o7,gae),e(gae,Nst),e(o7,qst),e(Se,jst),e(Se,r7),e(r7,Aye),e(Aye,Dst),e(r7,Gst),e(r7,hae),e(hae,Ost),e(r7,Vst),e(Zr,Xst),M(t7,Zr,null),b(m,SJe,_),b(m,Rm,_),e(Rm,a7),e(a7,Lye),M(uS,Lye,null),e(Rm,zst),e(Rm,yye),e(yye,Wst),b(m,RJe,_),b(m,wr,_),M(pS,wr,null),e(wr,Qst),e(wr,Pm),e(Pm,Ust),e(Pm,uae),e(uae,Hst),e(Pm,Jst),e(Pm,pae),e(pae,Yst),e(Pm,Kst),e(wr,Zst),e(wr,_S),e(_S,elt),e(_S,xye),e(xye,olt),e(_S,rlt),e(wr,tlt),e(wr,na),M(bS,na,null),e(na,alt),e(na,$ye),e($ye,nlt),e(na,slt),e(na,Bm),e(Bm,llt),e(Bm,kye),e(kye,ilt),e(Bm,dlt),e(Bm,_ae),e(_ae,clt),e(Bm,mlt),e(na,flt),M(n7,na,null),e(wr,glt),e(wr,et),M(vS,et,null),e(et,hlt),e(et,Sye),e(Sye,ult),e(et,plt),e(et,Nn),e(Nn,_lt),e(Nn,Rye),e(Rye,blt),e(Nn,vlt),e(Nn,Pye),e(Pye,Flt),e(Nn,Tlt),e(Nn,Bye),e(Bye,Mlt),e(Nn,Elt),e(et,Clt),e(et,Re),e(Re,s7),e(s7,Iye),e(Iye,wlt),e(s7,Alt),e(s7,bae),e(bae,Llt),e(s7,ylt),e(Re,xlt),e(Re,l7),e(l7,Nye),e(Nye,$lt),e(l7,klt),e(l7,vae),e(vae,Slt),e(l7,Rlt),e(Re,Plt),e(Re,i7),e(i7,qye),e(qye,Blt),e(i7,Ilt),e(i7,Fae),e(Fae,Nlt),e(i7,qlt),e(Re,jlt),e(Re,d7),e(d7,jye),e(jye,Dlt),e(d7,Glt),e(d7,Tae),e(Tae,Olt),e(d7,Vlt),e(Re,Xlt),e(Re,c7),e(c7,Dye),e(Dye,zlt),e(c7,Wlt),e(c7,Mae),e(Mae,Qlt),e(c7,Ult),e(Re,Hlt),e(Re,m7),e(m7,Gye),e(Gye,Jlt),e(m7,Ylt),e(m7,Eae),e(Eae,Klt),e(m7,Zlt),e(Re,eit),e(Re,f7),e(f7,Oye),e(Oye,oit),e(f7,rit),e(f7,Cae),e(Cae,tit),e(f7,ait),e(Re,nit),e(Re,g7),e(g7,Vye),e(Vye,sit),e(g7,lit),e(g7,wae),e(wae,iit),e(g7,dit),e(Re,cit),e(Re,h7),e(h7,Xye),e(Xye,mit),e(h7,fit),e(h7,Aae),e(Aae,git),e(h7,hit),e(Re,uit),e(Re,u7),e(u7,zye),e(zye,pit),e(u7,_it),e(u7,Lae),e(Lae,bit),e(u7,vit),e(et,Fit),M(p7,et,null),b(m,PJe,_),b(m,Im,_),e(Im,_7),e(_7,Wye),M(FS,Wye,null),e(Im,Tit),e(Im,Qye),e(Qye,Mit),b(m,BJe,_),b(m,Ar,_),M(TS,Ar,null),e(Ar,Eit),e(Ar,Nm),e(Nm,Cit),e(Nm,yae),e(yae,wit),e(Nm,Ait),e(Nm,xae),e(xae,Lit),e(Nm,yit),e(Ar,xit),e(Ar,MS),e(MS,$it),e(MS,Uye),e(Uye,kit),e(MS,Sit),e(Ar,Rit),e(Ar,sa),M(ES,sa,null),e(sa,Pit),e(sa,Hye),e(Hye,Bit),e(sa,Iit),e(sa,qm),e(qm,Nit),e(qm,Jye),e(Jye,qit),e(qm,jit),e(qm,$ae),e($ae,Dit),e(qm,Git),e(sa,Oit),M(b7,sa,null),e(Ar,Vit),e(Ar,ot),M(CS,ot,null),e(ot,Xit),e(ot,Yye),e(Yye,zit),e(ot,Wit),e(ot,qn),e(qn,Qit),e(qn,Kye),e(Kye,Uit),e(qn,Hit),e(qn,Zye),e(Zye,Jit),e(qn,Yit),e(qn,e8e),e(e8e,Kit),e(qn,Zit),e(ot,edt),e(ot,Xe),e(Xe,v7),e(v7,o8e),e(o8e,odt),e(v7,rdt),e(v7,kae),e(kae,tdt),e(v7,adt),e(Xe,ndt),e(Xe,F7),e(F7,r8e),e(r8e,sdt),e(F7,ldt),e(F7,Sae),e(Sae,idt),e(F7,ddt),e(Xe,cdt),e(Xe,T7),e(T7,t8e),e(t8e,mdt),e(T7,fdt),e(T7,Rae),e(Rae,gdt),e(T7,hdt),e(Xe,udt),e(Xe,M7),e(M7,a8e),e(a8e,pdt),e(M7,_dt),e(M7,Pae),e(Pae,bdt),e(M7,vdt),e(Xe,Fdt),e(Xe,E7),e(E7,n8e),e(n8e,Tdt),e(E7,Mdt),e(E7,Bae),e(Bae,Edt),e(E7,Cdt),e(Xe,wdt),e(Xe,C7),e(C7,s8e),e(s8e,Adt),e(C7,Ldt),e(C7,Iae),e(Iae,ydt),e(C7,xdt),e(Xe,$dt),e(Xe,w7),e(w7,l8e),e(l8e,kdt),e(w7,Sdt),e(w7,Nae),e(Nae,Rdt),e(w7,Pdt),e(Xe,Bdt),e(Xe,A7),e(A7,i8e),e(i8e,Idt),e(A7,Ndt),e(A7,qae),e(qae,qdt),e(A7,jdt),e(ot,Ddt),M(L7,ot,null),b(m,IJe,_),b(m,jm,_),e(jm,y7),e(y7,d8e),M(wS,d8e,null),e(jm,Gdt),e(jm,c8e),e(c8e,Odt),b(m,NJe,_),b(m,Lr,_),M(AS,Lr,null),e(Lr,Vdt),e(Lr,Dm),e(Dm,Xdt),e(Dm,jae),e(jae,zdt),e(Dm,Wdt),e(Dm,Dae),e(Dae,Qdt),e(Dm,Udt),e(Lr,Hdt),e(Lr,LS),e(LS,Jdt),e(LS,m8e),e(m8e,Ydt),e(LS,Kdt),e(Lr,Zdt),e(Lr,la),M(yS,la,null),e(la,ect),e(la,f8e),e(f8e,oct),e(la,rct),e(la,Gm),e(Gm,tct),e(Gm,g8e),e(g8e,act),e(Gm,nct),e(Gm,Gae),e(Gae,sct),e(Gm,lct),e(la,ict),M(x7,la,null),e(Lr,dct),e(Lr,rt),M(xS,rt,null),e(rt,cct),e(rt,h8e),e(h8e,mct),e(rt,fct),e(rt,jn),e(jn,gct),e(jn,u8e),e(u8e,hct),e(jn,uct),e(jn,p8e),e(p8e,pct),e(jn,_ct),e(jn,_8e),e(_8e,bct),e(jn,vct),e(rt,Fct),e(rt,ze),e(ze,$7),e($7,b8e),e(b8e,Tct),e($7,Mct),e($7,Oae),e(Oae,Ect),e($7,Cct),e(ze,wct),e(ze,k7),e(k7,v8e),e(v8e,Act),e(k7,Lct),e(k7,Vae),e(Vae,yct),e(k7,xct),e(ze,$ct),e(ze,S7),e(S7,F8e),e(F8e,kct),e(S7,Sct),e(S7,Xae),e(Xae,Rct),e(S7,Pct),e(ze,Bct),e(ze,R7),e(R7,T8e),e(T8e,Ict),e(R7,Nct),e(R7,zae),e(zae,qct),e(R7,jct),e(ze,Dct),e(ze,P7),e(P7,M8e),e(M8e,Gct),e(P7,Oct),e(P7,Wae),e(Wae,Vct),e(P7,Xct),e(ze,zct),e(ze,B7),e(B7,E8e),e(E8e,Wct),e(B7,Qct),e(B7,Qae),e(Qae,Uct),e(B7,Hct),e(ze,Jct),e(ze,I7),e(I7,C8e),e(C8e,Yct),e(I7,Kct),e(I7,Uae),e(Uae,Zct),e(I7,emt),e(ze,omt),e(ze,N7),e(N7,w8e),e(w8e,rmt),e(N7,tmt),e(N7,Hae),e(Hae,amt),e(N7,nmt),e(rt,smt),M(q7,rt,null),b(m,qJe,_),b(m,Om,_),e(Om,j7),e(j7,A8e),M($S,A8e,null),e(Om,lmt),e(Om,L8e),e(L8e,imt),b(m,jJe,_),b(m,yr,_),M(kS,yr,null),e(yr,dmt),e(yr,Vm),e(Vm,cmt),e(Vm,Jae),e(Jae,mmt),e(Vm,fmt),e(Vm,Yae),e(Yae,gmt),e(Vm,hmt),e(yr,umt),e(yr,SS),e(SS,pmt),e(SS,y8e),e(y8e,_mt),e(SS,bmt),e(yr,vmt),e(yr,ia),M(RS,ia,null),e(ia,Fmt),e(ia,x8e),e(x8e,Tmt),e(ia,Mmt),e(ia,Xm),e(Xm,Emt),e(Xm,$8e),e($8e,Cmt),e(Xm,wmt),e(Xm,Kae),e(Kae,Amt),e(Xm,Lmt),e(ia,ymt),M(D7,ia,null),e(yr,xmt),e(yr,tt),M(PS,tt,null),e(tt,$mt),e(tt,k8e),e(k8e,kmt),e(tt,Smt),e(tt,Dn),e(Dn,Rmt),e(Dn,S8e),e(S8e,Pmt),e(Dn,Bmt),e(Dn,R8e),e(R8e,Imt),e(Dn,Nmt),e(Dn,P8e),e(P8e,qmt),e(Dn,jmt),e(tt,Dmt),e(tt,B8e),e(B8e,G7),e(G7,I8e),e(I8e,Gmt),e(G7,Omt),e(G7,Zae),e(Zae,Vmt),e(G7,Xmt),e(tt,zmt),M(O7,tt,null),b(m,DJe,_),b(m,zm,_),e(zm,V7),e(V7,N8e),M(BS,N8e,null),e(zm,Wmt),e(zm,q8e),e(q8e,Qmt),b(m,GJe,_),b(m,xr,_),M(IS,xr,null),e(xr,Umt),e(xr,Wm),e(Wm,Hmt),e(Wm,ene),e(ene,Jmt),e(Wm,Ymt),e(Wm,one),e(one,Kmt),e(Wm,Zmt),e(xr,eft),e(xr,NS),e(NS,oft),e(NS,j8e),e(j8e,rft),e(NS,tft),e(xr,aft),e(xr,da),M(qS,da,null),e(da,nft),e(da,D8e),e(D8e,sft),e(da,lft),e(da,Qm),e(Qm,ift),e(Qm,G8e),e(G8e,dft),e(Qm,cft),e(Qm,rne),e(rne,mft),e(Qm,fft),e(da,gft),M(X7,da,null),e(xr,hft),e(xr,at),M(jS,at,null),e(at,uft),e(at,O8e),e(O8e,pft),e(at,_ft),e(at,Gn),e(Gn,bft),e(Gn,V8e),e(V8e,vft),e(Gn,Fft),e(Gn,X8e),e(X8e,Tft),e(Gn,Mft),e(Gn,z8e),e(z8e,Eft),e(Gn,Cft),e(at,wft),e(at,DS),e(DS,z7),e(z7,W8e),e(W8e,Aft),e(z7,Lft),e(z7,tne),e(tne,yft),e(z7,xft),e(DS,$ft),e(DS,W7),e(W7,Q8e),e(Q8e,kft),e(W7,Sft),e(W7,ane),e(ane,Rft),e(W7,Pft),e(at,Bft),M(Q7,at,null),b(m,OJe,_),b(m,Um,_),e(Um,U7),e(U7,U8e),M(GS,U8e,null),e(Um,Ift),e(Um,H8e),e(H8e,Nft),b(m,VJe,_),b(m,$r,_),M(OS,$r,null),e($r,qft),e($r,Hm),e(Hm,jft),e(Hm,nne),e(nne,Dft),e(Hm,Gft),e(Hm,sne),e(sne,Oft),e(Hm,Vft),e($r,Xft),e($r,VS),e(VS,zft),e(VS,J8e),e(J8e,Wft),e(VS,Qft),e($r,Uft),e($r,ca),M(XS,ca,null),e(ca,Hft),e(ca,Y8e),e(Y8e,Jft),e(ca,Yft),e(ca,Jm),e(Jm,Kft),e(Jm,K8e),e(K8e,Zft),e(Jm,egt),e(Jm,lne),e(lne,ogt),e(Jm,rgt),e(ca,tgt),M(H7,ca,null),e($r,agt),e($r,nt),M(zS,nt,null),e(nt,ngt),e(nt,Z8e),e(Z8e,sgt),e(nt,lgt),e(nt,On),e(On,igt),e(On,e9e),e(e9e,dgt),e(On,cgt),e(On,o9e),e(o9e,mgt),e(On,fgt),e(On,r9e),e(r9e,ggt),e(On,hgt),e(nt,ugt),e(nt,t9e),e(t9e,J7),e(J7,a9e),e(a9e,pgt),e(J7,_gt),e(J7,ine),e(ine,bgt),e(J7,vgt),e(nt,Fgt),M(Y7,nt,null),XJe=!0},p(m,[_]){const WS={};_&2&&(WS.$$scope={dirty:_,ctx:m}),nf.$set(WS);const n9e={};_&2&&(n9e.$$scope={dirty:_,ctx:m}),Eh.$set(n9e);const s9e={};_&2&&(s9e.$$scope={dirty:_,ctx:m}),nu.$set(s9e);const l9e={};_&2&&(l9e.$$scope={dirty:_,ctx:m}),Wu.$set(l9e);const QS={};_&2&&(QS.$$scope={dirty:_,ctx:m}),Qu.$set(QS);const i9e={};_&2&&(i9e.$$scope={dirty:_,ctx:m}),pp.$set(i9e);const Vn={};_&2&&(Vn.$$scope={dirty:_,ctx:m}),_p.$set(Vn);const d9e={};_&2&&(d9e.$$scope={dirty:_,ctx:m}),Fp.$set(d9e);const c9e={};_&2&&(c9e.$$scope={dirty:_,ctx:m}),$2.$set(c9e);const m9e={};_&2&&(m9e.$$scope={dirty:_,ctx:m}),S2.$set(m9e);const US={};_&2&&(US.$$scope={dirty:_,ctx:m}),Lb.$set(US);const f9e={};_&2&&(f9e.$$scope={dirty:_,ctx:m}),xb.$set(f9e);const HS={};_&2&&(HS.$$scope={dirty:_,ctx:m}),_v.$set(HS);const g9e={};_&2&&(g9e.$$scope={dirty:_,ctx:m}),vv.$set(g9e);const JS={};_&2&&(JS.$$scope={dirty:_,ctx:m}),n1.$set(JS);const h9e={};_&2&&(h9e.$$scope={dirty:_,ctx:m}),l1.$set(h9e);const u9e={};_&2&&(u9e.$$scope={dirty:_,ctx:m}),x1.$set(u9e);const p9e={};_&2&&(p9e.$$scope={dirty:_,ctx:m}),k1.$set(p9e);const Ym={};_&2&&(Ym.$$scope={dirty:_,ctx:m}),kF.$set(Ym);const _9e={};_&2&&(_9e.$$scope={dirty:_,ctx:m}),RF.$set(_9e);const b9e={};_&2&&(b9e.$$scope={dirty:_,ctx:m}),fT.$set(b9e);const v9e={};_&2&&(v9e.$$scope={dirty:_,ctx:m}),hT.$set(v9e);const YS={};_&2&&(YS.$$scope={dirty:_,ctx:m}),MT.$set(YS);const F9e={};_&2&&(F9e.$$scope={dirty:_,ctx:m}),CT.$set(F9e);const T9e={};_&2&&(T9e.$$scope={dirty:_,ctx:m}),dM.$set(T9e);const M9e={};_&2&&(M9e.$$scope={dirty:_,ctx:m}),mM.$set(M9e);const dt={};_&2&&(dt.$$scope={dirty:_,ctx:m}),rE.$set(dt);const KS={};_&2&&(KS.$$scope={dirty:_,ctx:m}),aE.$set(KS);const E9e={};_&2&&(E9e.$$scope={dirty:_,ctx:m}),lE.$set(E9e);const ZS={};_&2&&(ZS.$$scope={dirty:_,ctx:m}),dE.$set(ZS);const C9e={};_&2&&(C9e.$$scope={dirty:_,ctx:m}),wE.$set(C9e);const ct={};_&2&&(ct.$$scope={dirty:_,ctx:m}),LE.$set(ct);const w9e={};_&2&&(w9e.$$scope={dirty:_,ctx:m}),$E.$set(w9e);const Km={};_&2&&(Km.$$scope={dirty:_,ctx:m}),SE.$set(Km);const A9e={};_&2&&(A9e.$$scope={dirty:_,ctx:m}),BE.$set(A9e);const L9e={};_&2&&(L9e.$$scope={dirty:_,ctx:m}),NE.$set(L9e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),DE.$set(L);const K7={};_&2&&(K7.$$scope={dirty:_,ctx:m}),OE.$set(K7);const y9e={};_&2&&(y9e.$$scope={dirty:_,ctx:m}),ZE.$set(y9e);const x9e={};_&2&&(x9e.$$scope={dirty:_,ctx:m}),o4.$set(x9e);const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:m}),i4.$set(Z7);const $9e={};_&2&&($9e.$$scope={dirty:_,ctx:m}),c4.$set($9e);const k9e={};_&2&&(k9e.$$scope={dirty:_,ctx:m}),M4.$set(k9e);const eL={};_&2&&(eL.$$scope={dirty:_,ctx:m}),C4.$set(eL);const S9e={};_&2&&(S9e.$$scope={dirty:_,ctx:m}),y4.$set(S9e);const R9e={};_&2&&(R9e.$$scope={dirty:_,ctx:m}),$4.$set(R9e);const oL={};_&2&&(oL.$$scope={dirty:_,ctx:m}),N4.$set(oL);const P9e={};_&2&&(P9e.$$scope={dirty:_,ctx:m}),j4.$set(P9e);const B9e={};_&2&&(B9e.$$scope={dirty:_,ctx:m}),z4.$set(B9e);const rL={};_&2&&(rL.$$scope={dirty:_,ctx:m}),Q4.$set(rL);const I9e={};_&2&&(I9e.$$scope={dirty:_,ctx:m}),Y4.$set(I9e);const N9e={};_&2&&(N9e.$$scope={dirty:_,ctx:m}),Z4.$set(N9e);const tL={};_&2&&(tL.$$scope={dirty:_,ctx:m}),rC.$set(tL);const q9e={};_&2&&(q9e.$$scope={dirty:_,ctx:m}),aC.$set(q9e);const j9e={};_&2&&(j9e.$$scope={dirty:_,ctx:m}),mC.$set(j9e);const aL={};_&2&&(aL.$$scope={dirty:_,ctx:m}),gC.$set(aL);const D9e={};_&2&&(D9e.$$scope={dirty:_,ctx:m}),pC.$set(D9e);const G9e={};_&2&&(G9e.$$scope={dirty:_,ctx:m}),bC.$set(G9e);const nL={};_&2&&(nL.$$scope={dirty:_,ctx:m}),b3.$set(nL);const O9e={};_&2&&(O9e.$$scope={dirty:_,ctx:m}),F3.$set(O9e);const V9e={};_&2&&(V9e.$$scope={dirty:_,ctx:m}),X3.$set(V9e);const sL={};_&2&&(sL.$$scope={dirty:_,ctx:m}),W3.$set(sL);const X9e={};_&2&&(X9e.$$scope={dirty:_,ctx:m}),l5.$set(X9e);const z9e={};_&2&&(z9e.$$scope={dirty:_,ctx:m}),d5.$set(z9e);const lL={};_&2&&(lL.$$scope={dirty:_,ctx:m}),b5.$set(lL);const W9e={};_&2&&(W9e.$$scope={dirty:_,ctx:m}),F5.$set(W9e);const Q9e={};_&2&&(Q9e.$$scope={dirty:_,ctx:m}),C5.$set(Q9e);const iL={};_&2&&(iL.$$scope={dirty:_,ctx:m}),A5.$set(iL);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:m}),Q5.$set(U9e);const H9e={};_&2&&(H9e.$$scope={dirty:_,ctx:m}),H5.$set(H9e);const dL={};_&2&&(dL.$$scope={dirty:_,ctx:m}),s0.$set(dL);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:m}),i0.$set(J9e);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:m}),I0.$set(Y9e);const cL={};_&2&&(cL.$$scope={dirty:_,ctx:m}),q0.$set(cL);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:m}),rw.$set(K9e);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:m}),aw.$set(Z9e);const mL={};_&2&&(mL.$$scope={dirty:_,ctx:m}),lw.$set(mL);const exe={};_&2&&(exe.$$scope={dirty:_,ctx:m}),dw.$set(exe);const oxe={};_&2&&(oxe.$$scope={dirty:_,ctx:m}),mw.$set(oxe);const fL={};_&2&&(fL.$$scope={dirty:_,ctx:m}),gw.$set(fL);const rxe={};_&2&&(rxe.$$scope={dirty:_,ctx:m}),Bw.$set(rxe);const txe={};_&2&&(txe.$$scope={dirty:_,ctx:m}),Nw.$set(txe);const gL={};_&2&&(gL.$$scope={dirty:_,ctx:m}),n6.$set(gL);const axe={};_&2&&(axe.$$scope={dirty:_,ctx:m}),l6.$set(axe);const nxe={};_&2&&(nxe.$$scope={dirty:_,ctx:m}),d6.$set(nxe);const hL={};_&2&&(hL.$$scope={dirty:_,ctx:m}),m6.$set(hL);const sxe={};_&2&&(sxe.$$scope={dirty:_,ctx:m}),g6.$set(sxe);const lxe={};_&2&&(lxe.$$scope={dirty:_,ctx:m}),u6.$set(lxe);const uL={};_&2&&(uL.$$scope={dirty:_,ctx:m}),V6.$set(uL);const ixe={};_&2&&(ixe.$$scope={dirty:_,ctx:m}),z6.$set(ixe);const dxe={};_&2&&(dxe.$$scope={dirty:_,ctx:m}),rA.$set(dxe);const pL={};_&2&&(pL.$$scope={dirty:_,ctx:m}),aA.$set(pL);const cxe={};_&2&&(cxe.$$scope={dirty:_,ctx:m}),bA.$set(cxe);const mxe={};_&2&&(mxe.$$scope={dirty:_,ctx:m}),FA.$set(mxe);const _L={};_&2&&(_L.$$scope={dirty:_,ctx:m}),kA.$set(_L);const fxe={};_&2&&(fxe.$$scope={dirty:_,ctx:m}),RA.$set(fxe);const gxe={};_&2&&(gxe.$$scope={dirty:_,ctx:m}),XA.$set(gxe);const bL={};_&2&&(bL.$$scope={dirty:_,ctx:m}),WA.$set(bL);const hxe={};_&2&&(hxe.$$scope={dirty:_,ctx:m}),t7.$set(hxe);const uxe={};_&2&&(uxe.$$scope={dirty:_,ctx:m}),n7.$set(uxe);const vL={};_&2&&(vL.$$scope={dirty:_,ctx:m}),p7.$set(vL);const pxe={};_&2&&(pxe.$$scope={dirty:_,ctx:m}),b7.$set(pxe);const _xe={};_&2&&(_xe.$$scope={dirty:_,ctx:m}),L7.$set(_xe);const FL={};_&2&&(FL.$$scope={dirty:_,ctx:m}),x7.$set(FL);const bxe={};_&2&&(bxe.$$scope={dirty:_,ctx:m}),q7.$set(bxe);const vxe={};_&2&&(vxe.$$scope={dirty:_,ctx:m}),D7.$set(vxe);const TL={};_&2&&(TL.$$scope={dirty:_,ctx:m}),O7.$set(TL);const Fxe={};_&2&&(Fxe.$$scope={dirty:_,ctx:m}),X7.$set(Fxe);const Txe={};_&2&&(Txe.$$scope={dirty:_,ctx:m}),Q7.$set(Txe);const ML={};_&2&&(ML.$$scope={dirty:_,ctx:m}),H7.$set(ML);const Mxe={};_&2&&(Mxe.$$scope={dirty:_,ctx:m}),Y7.$set(Mxe)},i(m){XJe||(E(d.$$.fragment,m),E(ja.$$.fragment,m),E(A8.$$.fragment,m),E(L8.$$.fragment,m),E(nf.$$.fragment,m),E(y8.$$.fragment,m),E(x8.$$.fragment,m),E(S8.$$.fragment,m),E(Eh.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(B8.$$.fragment,m),E(q8.$$.fragment,m),E(nu.$$.fragment,m),E(j8.$$.fragment,m),E(D8.$$.fragment,m),E(G8.$$.fragment,m),E(X8.$$.fragment,m),E(Wu.$$.fragment,m),E(Qu.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(Q8.$$.fragment,m),E(J8.$$.fragment,m),E(pp.$$.fragment,m),E(_p.$$.fragment,m),E(Y8.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(o9.$$.fragment,m),E(Fp.$$.fragment,m),E(r9.$$.fragment,m),E($2.$$.fragment,m),E(t9.$$.fragment,m),E(a9.$$.fragment,m),E(s9.$$.fragment,m),E(S2.$$.fragment,m),E(l9.$$.fragment,m),E(Lb.$$.fragment,m),E(i9.$$.fragment,m),E(d9.$$.fragment,m),E(m9.$$.fragment,m),E(xb.$$.fragment,m),E(f9.$$.fragment,m),E(_v.$$.fragment,m),E(g9.$$.fragment,m),E(h9.$$.fragment,m),E(p9.$$.fragment,m),E(vv.$$.fragment,m),E(_9.$$.fragment,m),E(n1.$$.fragment,m),E(b9.$$.fragment,m),E(v9.$$.fragment,m),E(T9.$$.fragment,m),E(l1.$$.fragment,m),E(M9.$$.fragment,m),E(x1.$$.fragment,m),E(E9.$$.fragment,m),E(C9.$$.fragment,m),E(A9.$$.fragment,m),E(k1.$$.fragment,m),E(L9.$$.fragment,m),E(kF.$$.fragment,m),E(y9.$$.fragment,m),E(x9.$$.fragment,m),E(k9.$$.fragment,m),E(RF.$$.fragment,m),E(S9.$$.fragment,m),E(fT.$$.fragment,m),E(R9.$$.fragment,m),E(P9.$$.fragment,m),E(I9.$$.fragment,m),E(hT.$$.fragment,m),E(N9.$$.fragment,m),E(MT.$$.fragment,m),E(q9.$$.fragment,m),E(j9.$$.fragment,m),E(G9.$$.fragment,m),E(CT.$$.fragment,m),E(O9.$$.fragment,m),E(dM.$$.fragment,m),E(V9.$$.fragment,m),E(X9.$$.fragment,m),E(W9.$$.fragment,m),E(mM.$$.fragment,m),E(Q9.$$.fragment,m),E(rE.$$.fragment,m),E(U9.$$.fragment,m),E(H9.$$.fragment,m),E(Y9.$$.fragment,m),E(aE.$$.fragment,m),E(K9.$$.fragment,m),E(lE.$$.fragment,m),E(Z9.$$.fragment,m),E(ex.$$.fragment,m),E(rx.$$.fragment,m),E(dE.$$.fragment,m),E(tx.$$.fragment,m),E(wE.$$.fragment,m),E(ax.$$.fragment,m),E(nx.$$.fragment,m),E(lx.$$.fragment,m),E(LE.$$.fragment,m),E(ix.$$.fragment,m),E($E.$$.fragment,m),E(dx.$$.fragment,m),E(cx.$$.fragment,m),E(fx.$$.fragment,m),E(SE.$$.fragment,m),E(gx.$$.fragment,m),E(BE.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(NE.$$.fragment,m),E(bx.$$.fragment,m),E(DE.$$.fragment,m),E(vx.$$.fragment,m),E(Fx.$$.fragment,m),E(Mx.$$.fragment,m),E(OE.$$.fragment,m),E(Ex.$$.fragment,m),E(ZE.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(Lx.$$.fragment,m),E(o4.$$.fragment,m),E(yx.$$.fragment,m),E(i4.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(c4.$$.fragment,m),E(Rx.$$.fragment,m),E(M4.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Nx.$$.fragment,m),E(C4.$$.fragment,m),E(qx.$$.fragment,m),E(y4.$$.fragment,m),E(Dx.$$.fragment,m),E(Gx.$$.fragment,m),E(Vx.$$.fragment,m),E($4.$$.fragment,m),E(Xx.$$.fragment,m),E(N4.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(Ux.$$.fragment,m),E(j4.$$.fragment,m),E(Hx.$$.fragment,m),E(z4.$$.fragment,m),E(Jx.$$.fragment,m),E(Yx.$$.fragment,m),E(Zx.$$.fragment,m),E(Q4.$$.fragment,m),E(e$.$$.fragment,m),E(Y4.$$.fragment,m),E(r$.$$.fragment,m),E(t$.$$.fragment,m),E(n$.$$.fragment,m),E(Z4.$$.fragment,m),E(s$.$$.fragment,m),E(rC.$$.fragment,m),E(l$.$$.fragment,m),E(i$.$$.fragment,m),E(c$.$$.fragment,m),E(aC.$$.fragment,m),E(m$.$$.fragment,m),E(mC.$$.fragment,m),E(f$.$$.fragment,m),E(g$.$$.fragment,m),E(u$.$$.fragment,m),E(gC.$$.fragment,m),E(p$.$$.fragment,m),E(pC.$$.fragment,m),E(_$.$$.fragment,m),E(b$.$$.fragment,m),E(F$.$$.fragment,m),E(bC.$$.fragment,m),E(T$.$$.fragment,m),E(b3.$$.fragment,m),E(M$.$$.fragment,m),E(E$.$$.fragment,m),E(w$.$$.fragment,m),E(F3.$$.fragment,m),E(A$.$$.fragment,m),E(X3.$$.fragment,m),E(L$.$$.fragment,m),E(y$.$$.fragment,m),E($$.$$.fragment,m),E(W3.$$.fragment,m),E(k$.$$.fragment,m),E(l5.$$.fragment,m),E(S$.$$.fragment,m),E(R$.$$.fragment,m),E(B$.$$.fragment,m),E(d5.$$.fragment,m),E(I$.$$.fragment,m),E(b5.$$.fragment,m),E(N$.$$.fragment,m),E(q$.$$.fragment,m),E(D$.$$.fragment,m),E(F5.$$.fragment,m),E(G$.$$.fragment,m),E(C5.$$.fragment,m),E(O$.$$.fragment,m),E(V$.$$.fragment,m),E(z$.$$.fragment,m),E(A5.$$.fragment,m),E(W$.$$.fragment,m),E(Q5.$$.fragment,m),E(Q$.$$.fragment,m),E(U$.$$.fragment,m),E(J$.$$.fragment,m),E(H5.$$.fragment,m),E(Y$.$$.fragment,m),E(s0.$$.fragment,m),E(K$.$$.fragment,m),E(Z$.$$.fragment,m),E(ok.$$.fragment,m),E(i0.$$.fragment,m),E(rk.$$.fragment,m),E(I0.$$.fragment,m),E(tk.$$.fragment,m),E(ak.$$.fragment,m),E(sk.$$.fragment,m),E(q0.$$.fragment,m),E(lk.$$.fragment,m),E(rw.$$.fragment,m),E(ik.$$.fragment,m),E(dk.$$.fragment,m),E(mk.$$.fragment,m),E(aw.$$.fragment,m),E(fk.$$.fragment,m),E(lw.$$.fragment,m),E(hk.$$.fragment,m),E(uk.$$.fragment,m),E(_k.$$.fragment,m),E(dw.$$.fragment,m),E(bk.$$.fragment,m),E(mw.$$.fragment,m),E(vk.$$.fragment,m),E(Fk.$$.fragment,m),E(Mk.$$.fragment,m),E(gw.$$.fragment,m),E(Ek.$$.fragment,m),E(Bw.$$.fragment,m),E(Ck.$$.fragment,m),E(wk.$$.fragment,m),E(Lk.$$.fragment,m),E(Nw.$$.fragment,m),E(yk.$$.fragment,m),E(n6.$$.fragment,m),E(xk.$$.fragment,m),E($k.$$.fragment,m),E(Sk.$$.fragment,m),E(l6.$$.fragment,m),E(Rk.$$.fragment,m),E(d6.$$.fragment,m),E(Pk.$$.fragment,m),E(Bk.$$.fragment,m),E(Nk.$$.fragment,m),E(m6.$$.fragment,m),E(qk.$$.fragment,m),E(g6.$$.fragment,m),E(jk.$$.fragment,m),E(Dk.$$.fragment,m),E(Ok.$$.fragment,m),E(u6.$$.fragment,m),E(Vk.$$.fragment,m),E(V6.$$.fragment,m),E(Xk.$$.fragment,m),E(zk.$$.fragment,m),E(Qk.$$.fragment,m),E(z6.$$.fragment,m),E(Uk.$$.fragment,m),E(rA.$$.fragment,m),E(Hk.$$.fragment,m),E(Jk.$$.fragment,m),E(Kk.$$.fragment,m),E(aA.$$.fragment,m),E(Zk.$$.fragment,m),E(bA.$$.fragment,m),E(eS.$$.fragment,m),E(oS.$$.fragment,m),E(tS.$$.fragment,m),E(FA.$$.fragment,m),E(aS.$$.fragment,m),E(kA.$$.fragment,m),E(nS.$$.fragment,m),E(sS.$$.fragment,m),E(iS.$$.fragment,m),E(RA.$$.fragment,m),E(dS.$$.fragment,m),E(XA.$$.fragment,m),E(cS.$$.fragment,m),E(mS.$$.fragment,m),E(gS.$$.fragment,m),E(WA.$$.fragment,m),E(hS.$$.fragment,m),E(t7.$$.fragment,m),E(uS.$$.fragment,m),E(pS.$$.fragment,m),E(bS.$$.fragment,m),E(n7.$$.fragment,m),E(vS.$$.fragment,m),E(p7.$$.fragment,m),E(FS.$$.fragment,m),E(TS.$$.fragment,m),E(ES.$$.fragment,m),E(b7.$$.fragment,m),E(CS.$$.fragment,m),E(L7.$$.fragment,m),E(wS.$$.fragment,m),E(AS.$$.fragment,m),E(yS.$$.fragment,m),E(x7.$$.fragment,m),E(xS.$$.fragment,m),E(q7.$$.fragment,m),E($S.$$.fragment,m),E(kS.$$.fragment,m),E(RS.$$.fragment,m),E(D7.$$.fragment,m),E(PS.$$.fragment,m),E(O7.$$.fragment,m),E(BS.$$.fragment,m),E(IS.$$.fragment,m),E(qS.$$.fragment,m),E(X7.$$.fragment,m),E(jS.$$.fragment,m),E(Q7.$$.fragment,m),E(GS.$$.fragment,m),E(OS.$$.fragment,m),E(XS.$$.fragment,m),E(H7.$$.fragment,m),E(zS.$$.fragment,m),E(Y7.$$.fragment,m),XJe=!0)},o(m){C(d.$$.fragment,m),C(ja.$$.fragment,m),C(A8.$$.fragment,m),C(L8.$$.fragment,m),C(nf.$$.fragment,m),C(y8.$$.fragment,m),C(x8.$$.fragment,m),C(S8.$$.fragment,m),C(Eh.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(B8.$$.fragment,m),C(q8.$$.fragment,m),C(nu.$$.fragment,m),C(j8.$$.fragment,m),C(D8.$$.fragment,m),C(G8.$$.fragment,m),C(X8.$$.fragment,m),C(Wu.$$.fragment,m),C(Qu.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(Q8.$$.fragment,m),C(J8.$$.fragment,m),C(pp.$$.fragment,m),C(_p.$$.fragment,m),C(Y8.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(o9.$$.fragment,m),C(Fp.$$.fragment,m),C(r9.$$.fragment,m),C($2.$$.fragment,m),C(t9.$$.fragment,m),C(a9.$$.fragment,m),C(s9.$$.fragment,m),C(S2.$$.fragment,m),C(l9.$$.fragment,m),C(Lb.$$.fragment,m),C(i9.$$.fragment,m),C(d9.$$.fragment,m),C(m9.$$.fragment,m),C(xb.$$.fragment,m),C(f9.$$.fragment,m),C(_v.$$.fragment,m),C(g9.$$.fragment,m),C(h9.$$.fragment,m),C(p9.$$.fragment,m),C(vv.$$.fragment,m),C(_9.$$.fragment,m),C(n1.$$.fragment,m),C(b9.$$.fragment,m),C(v9.$$.fragment,m),C(T9.$$.fragment,m),C(l1.$$.fragment,m),C(M9.$$.fragment,m),C(x1.$$.fragment,m),C(E9.$$.fragment,m),C(C9.$$.fragment,m),C(A9.$$.fragment,m),C(k1.$$.fragment,m),C(L9.$$.fragment,m),C(kF.$$.fragment,m),C(y9.$$.fragment,m),C(x9.$$.fragment,m),C(k9.$$.fragment,m),C(RF.$$.fragment,m),C(S9.$$.fragment,m),C(fT.$$.fragment,m),C(R9.$$.fragment,m),C(P9.$$.fragment,m),C(I9.$$.fragment,m),C(hT.$$.fragment,m),C(N9.$$.fragment,m),C(MT.$$.fragment,m),C(q9.$$.fragment,m),C(j9.$$.fragment,m),C(G9.$$.fragment,m),C(CT.$$.fragment,m),C(O9.$$.fragment,m),C(dM.$$.fragment,m),C(V9.$$.fragment,m),C(X9.$$.fragment,m),C(W9.$$.fragment,m),C(mM.$$.fragment,m),C(Q9.$$.fragment,m),C(rE.$$.fragment,m),C(U9.$$.fragment,m),C(H9.$$.fragment,m),C(Y9.$$.fragment,m),C(aE.$$.fragment,m),C(K9.$$.fragment,m),C(lE.$$.fragment,m),C(Z9.$$.fragment,m),C(ex.$$.fragment,m),C(rx.$$.fragment,m),C(dE.$$.fragment,m),C(tx.$$.fragment,m),C(wE.$$.fragment,m),C(ax.$$.fragment,m),C(nx.$$.fragment,m),C(lx.$$.fragment,m),C(LE.$$.fragment,m),C(ix.$$.fragment,m),C($E.$$.fragment,m),C(dx.$$.fragment,m),C(cx.$$.fragment,m),C(fx.$$.fragment,m),C(SE.$$.fragment,m),C(gx.$$.fragment,m),C(BE.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(NE.$$.fragment,m),C(bx.$$.fragment,m),C(DE.$$.fragment,m),C(vx.$$.fragment,m),C(Fx.$$.fragment,m),C(Mx.$$.fragment,m),C(OE.$$.fragment,m),C(Ex.$$.fragment,m),C(ZE.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(Lx.$$.fragment,m),C(o4.$$.fragment,m),C(yx.$$.fragment,m),C(i4.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(c4.$$.fragment,m),C(Rx.$$.fragment,m),C(M4.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Nx.$$.fragment,m),C(C4.$$.fragment,m),C(qx.$$.fragment,m),C(y4.$$.fragment,m),C(Dx.$$.fragment,m),C(Gx.$$.fragment,m),C(Vx.$$.fragment,m),C($4.$$.fragment,m),C(Xx.$$.fragment,m),C(N4.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(Ux.$$.fragment,m),C(j4.$$.fragment,m),C(Hx.$$.fragment,m),C(z4.$$.fragment,m),C(Jx.$$.fragment,m),C(Yx.$$.fragment,m),C(Zx.$$.fragment,m),C(Q4.$$.fragment,m),C(e$.$$.fragment,m),C(Y4.$$.fragment,m),C(r$.$$.fragment,m),C(t$.$$.fragment,m),C(n$.$$.fragment,m),C(Z4.$$.fragment,m),C(s$.$$.fragment,m),C(rC.$$.fragment,m),C(l$.$$.fragment,m),C(i$.$$.fragment,m),C(c$.$$.fragment,m),C(aC.$$.fragment,m),C(m$.$$.fragment,m),C(mC.$$.fragment,m),C(f$.$$.fragment,m),C(g$.$$.fragment,m),C(u$.$$.fragment,m),C(gC.$$.fragment,m),C(p$.$$.fragment,m),C(pC.$$.fragment,m),C(_$.$$.fragment,m),C(b$.$$.fragment,m),C(F$.$$.fragment,m),C(bC.$$.fragment,m),C(T$.$$.fragment,m),C(b3.$$.fragment,m),C(M$.$$.fragment,m),C(E$.$$.fragment,m),C(w$.$$.fragment,m),C(F3.$$.fragment,m),C(A$.$$.fragment,m),C(X3.$$.fragment,m),C(L$.$$.fragment,m),C(y$.$$.fragment,m),C($$.$$.fragment,m),C(W3.$$.fragment,m),C(k$.$$.fragment,m),C(l5.$$.fragment,m),C(S$.$$.fragment,m),C(R$.$$.fragment,m),C(B$.$$.fragment,m),C(d5.$$.fragment,m),C(I$.$$.fragment,m),C(b5.$$.fragment,m),C(N$.$$.fragment,m),C(q$.$$.fragment,m),C(D$.$$.fragment,m),C(F5.$$.fragment,m),C(G$.$$.fragment,m),C(C5.$$.fragment,m),C(O$.$$.fragment,m),C(V$.$$.fragment,m),C(z$.$$.fragment,m),C(A5.$$.fragment,m),C(W$.$$.fragment,m),C(Q5.$$.fragment,m),C(Q$.$$.fragment,m),C(U$.$$.fragment,m),C(J$.$$.fragment,m),C(H5.$$.fragment,m),C(Y$.$$.fragment,m),C(s0.$$.fragment,m),C(K$.$$.fragment,m),C(Z$.$$.fragment,m),C(ok.$$.fragment,m),C(i0.$$.fragment,m),C(rk.$$.fragment,m),C(I0.$$.fragment,m),C(tk.$$.fragment,m),C(ak.$$.fragment,m),C(sk.$$.fragment,m),C(q0.$$.fragment,m),C(lk.$$.fragment,m),C(rw.$$.fragment,m),C(ik.$$.fragment,m),C(dk.$$.fragment,m),C(mk.$$.fragment,m),C(aw.$$.fragment,m),C(fk.$$.fragment,m),C(lw.$$.fragment,m),C(hk.$$.fragment,m),C(uk.$$.fragment,m),C(_k.$$.fragment,m),C(dw.$$.fragment,m),C(bk.$$.fragment,m),C(mw.$$.fragment,m),C(vk.$$.fragment,m),C(Fk.$$.fragment,m),C(Mk.$$.fragment,m),C(gw.$$.fragment,m),C(Ek.$$.fragment,m),C(Bw.$$.fragment,m),C(Ck.$$.fragment,m),C(wk.$$.fragment,m),C(Lk.$$.fragment,m),C(Nw.$$.fragment,m),C(yk.$$.fragment,m),C(n6.$$.fragment,m),C(xk.$$.fragment,m),C($k.$$.fragment,m),C(Sk.$$.fragment,m),C(l6.$$.fragment,m),C(Rk.$$.fragment,m),C(d6.$$.fragment,m),C(Pk.$$.fragment,m),C(Bk.$$.fragment,m),C(Nk.$$.fragment,m),C(m6.$$.fragment,m),C(qk.$$.fragment,m),C(g6.$$.fragment,m),C(jk.$$.fragment,m),C(Dk.$$.fragment,m),C(Ok.$$.fragment,m),C(u6.$$.fragment,m),C(Vk.$$.fragment,m),C(V6.$$.fragment,m),C(Xk.$$.fragment,m),C(zk.$$.fragment,m),C(Qk.$$.fragment,m),C(z6.$$.fragment,m),C(Uk.$$.fragment,m),C(rA.$$.fragment,m),C(Hk.$$.fragment,m),C(Jk.$$.fragment,m),C(Kk.$$.fragment,m),C(aA.$$.fragment,m),C(Zk.$$.fragment,m),C(bA.$$.fragment,m),C(eS.$$.fragment,m),C(oS.$$.fragment,m),C(tS.$$.fragment,m),C(FA.$$.fragment,m),C(aS.$$.fragment,m),C(kA.$$.fragment,m),C(nS.$$.fragment,m),C(sS.$$.fragment,m),C(iS.$$.fragment,m),C(RA.$$.fragment,m),C(dS.$$.fragment,m),C(XA.$$.fragment,m),C(cS.$$.fragment,m),C(mS.$$.fragment,m),C(gS.$$.fragment,m),C(WA.$$.fragment,m),C(hS.$$.fragment,m),C(t7.$$.fragment,m),C(uS.$$.fragment,m),C(pS.$$.fragment,m),C(bS.$$.fragment,m),C(n7.$$.fragment,m),C(vS.$$.fragment,m),C(p7.$$.fragment,m),C(FS.$$.fragment,m),C(TS.$$.fragment,m),C(ES.$$.fragment,m),C(b7.$$.fragment,m),C(CS.$$.fragment,m),C(L7.$$.fragment,m),C(wS.$$.fragment,m),C(AS.$$.fragment,m),C(yS.$$.fragment,m),C(x7.$$.fragment,m),C(xS.$$.fragment,m),C(q7.$$.fragment,m),C($S.$$.fragment,m),C(kS.$$.fragment,m),C(RS.$$.fragment,m),C(D7.$$.fragment,m),C(PS.$$.fragment,m),C(O7.$$.fragment,m),C(BS.$$.fragment,m),C(IS.$$.fragment,m),C(qS.$$.fragment,m),C(X7.$$.fragment,m),C(jS.$$.fragment,m),C(Q7.$$.fragment,m),C(GS.$$.fragment,m),C(OS.$$.fragment,m),C(XS.$$.fragment,m),C(H7.$$.fragment,m),C(zS.$$.fragment,m),C(Y7.$$.fragment,m),XJe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(ef),m&&t(mt),m&&t(Ve),m&&t(Ue),m&&t(rf),w(ja,m),m&&t(He),m&&t(Ae),m&&t(Lo),m&&t(Da),m&&t(BUe),m&&t(Hi),w(A8),m&&t(IUe),m&&t(Un),m&&t(NUe),w(L8,m),m&&t(qUe),m&&t(FP),m&&t(jUe),w(nf,m),m&&t(DUe),m&&t(Ji),w(y8),m&&t(GUe),m&&t(yo),w(x8),w(S8),w(Eh),w(R8),m&&t(OUe),m&&t(Ki),w(P8),m&&t(VUe),m&&t(xo),w(B8),w(q8),w(nu),w(j8),m&&t(XUe),m&&t(Zi),w(D8),m&&t(zUe),m&&t($o),w(G8),w(X8),w(Wu),w(Qu),w(z8),m&&t(WUe),m&&t(ed),w(W8),m&&t(QUe),m&&t(ko),w(Q8),w(J8),w(pp),w(_p),w(Y8),m&&t(UUe),m&&t(rd),w(K8),m&&t(HUe),m&&t(So),w(Z8),w(o9),w(Fp),w(r9),w($2),m&&t(JUe),m&&t(nd),w(t9),m&&t(YUe),m&&t(Ro),w(a9),w(s9),w(S2),w(l9),w(Lb),m&&t(KUe),m&&t(id),w(i9),m&&t(ZUe),m&&t(Po),w(d9),w(m9),w(xb),w(f9),w(_v),m&&t(eHe),m&&t(md),w(g9),m&&t(oHe),m&&t(Bo),w(h9),w(p9),w(vv),w(_9),w(n1),m&&t(rHe),m&&t(hd),w(b9),m&&t(tHe),m&&t(Io),w(v9),w(T9),w(l1),w(M9),w(x1),m&&t(aHe),m&&t(_d),w(E9),m&&t(nHe),m&&t(No),w(C9),w(A9),w(k1),w(L9),w(kF),m&&t(sHe),m&&t(Fd),w(y9),m&&t(lHe),m&&t(qo),w(x9),w(k9),w(RF),w(S9),w(fT),m&&t(iHe),m&&t(Ed),w(R9),m&&t(dHe),m&&t(jo),w(P9),w(I9),w(hT),w(N9),w(MT),m&&t(cHe),m&&t(Ad),w(q9),m&&t(mHe),m&&t(Go),w(j9),w(G9),w(CT),w(O9),w(dM),m&&t(fHe),m&&t(xd),w(V9),m&&t(gHe),m&&t(Oo),w(X9),w(W9),w(mM),w(Q9),w(rE),m&&t(hHe),m&&t(Sd),w(U9),m&&t(uHe),m&&t(Vo),w(H9),w(Y9),w(aE),w(K9),w(lE),m&&t(pHe),m&&t(Bd),w(Z9),m&&t(_He),m&&t(Xo),w(ex),w(rx),w(dE),w(tx),w(wE),m&&t(bHe),m&&t(qd),w(ax),m&&t(vHe),m&&t(zo),w(nx),w(lx),w(LE),w(ix),w($E),m&&t(FHe),m&&t(Gd),w(dx),m&&t(THe),m&&t(Wo),w(cx),w(fx),w(SE),w(gx),w(BE),m&&t(MHe),m&&t(Xd),w(hx),m&&t(EHe),m&&t(Qo),w(ux),w(_x),w(NE),w(bx),w(DE),m&&t(CHe),m&&t(Qd),w(vx),m&&t(wHe),m&&t(Uo),w(Fx),w(Mx),w(OE),w(Ex),w(ZE),m&&t(AHe),m&&t(Jd),w(Cx),m&&t(LHe),m&&t(Ho),w(wx),w(Lx),w(o4),w(yx),w(i4),m&&t(yHe),m&&t(Zd),w(xx),m&&t(xHe),m&&t(Jo),w($x),w(Sx),w(c4),w(Rx),w(M4),m&&t($He),m&&t(rc),w(Px),m&&t(kHe),m&&t(Yo),w(Bx),w(Nx),w(C4),w(qx),w(y4),m&&t(SHe),m&&t(nc),w(Dx),m&&t(RHe),m&&t(Ko),w(Gx),w(Vx),w($4),w(Xx),w(N4),m&&t(PHe),m&&t(ic),w(zx),m&&t(BHe),m&&t(Zo),w(Wx),w(Ux),w(j4),w(Hx),w(z4),m&&t(IHe),m&&t(mc),w(Jx),m&&t(NHe),m&&t(er),w(Yx),w(Zx),w(Q4),w(e$),w(Y4),m&&t(qHe),m&&t(hc),w(r$),m&&t(jHe),m&&t(or),w(t$),w(n$),w(Z4),w(s$),w(rC),m&&t(DHe),m&&t(_c),w(l$),m&&t(GHe),m&&t(rr),w(i$),w(c$),w(aC),w(m$),w(mC),m&&t(OHe),m&&t(Fc),w(f$),m&&t(VHe),m&&t(tr),w(g$),w(u$),w(gC),w(p$),w(pC),m&&t(XHe),m&&t(Ec),w(_$),m&&t(zHe),m&&t(ar),w(b$),w(F$),w(bC),w(T$),w(b3),m&&t(WHe),m&&t(Ac),w(M$),m&&t(QHe),m&&t(nr),w(E$),w(w$),w(F3),w(A$),w(X3),m&&t(UHe),m&&t(xc),w(L$),m&&t(HHe),m&&t(sr),w(y$),w($$),w(W3),w(k$),w(l5),m&&t(JHe),m&&t(Sc),w(S$),m&&t(YHe),m&&t(lr),w(R$),w(B$),w(d5),w(I$),w(b5),m&&t(KHe),m&&t(Bc),w(N$),m&&t(ZHe),m&&t(ir),w(q$),w(D$),w(F5),w(G$),w(C5),m&&t(eJe),m&&t(jc),w(O$),m&&t(oJe),m&&t(dr),w(V$),w(z$),w(A5),w(W$),w(Q5),m&&t(rJe),m&&t(Oc),w(Q$),m&&t(tJe),m&&t(cr),w(U$),w(J$),w(H5),w(Y$),w(s0),m&&t(aJe),m&&t(zc),w(K$),m&&t(nJe),m&&t(mr),w(Z$),w(ok),w(i0),w(rk),w(I0),m&&t(sJe),m&&t(Uc),w(tk),m&&t(lJe),m&&t(fr),w(ak),w(sk),w(q0),w(lk),w(rw),m&&t(iJe),m&&t(Yc),w(ik),m&&t(dJe),m&&t(gr),w(dk),w(mk),w(aw),w(fk),w(lw),m&&t(cJe),m&&t(em),w(hk),m&&t(mJe),m&&t(hr),w(uk),w(_k),w(dw),w(bk),w(mw),m&&t(fJe),m&&t(tm),w(vk),m&&t(gJe),m&&t(ur),w(Fk),w(Mk),w(gw),w(Ek),w(Bw),m&&t(hJe),m&&t(sm),w(Ck),m&&t(uJe),m&&t(pr),w(wk),w(Lk),w(Nw),w(yk),w(n6),m&&t(pJe),m&&t(dm),w(xk),m&&t(_Je),m&&t(_r),w($k),w(Sk),w(l6),w(Rk),w(d6),m&&t(bJe),m&&t(fm),w(Pk),m&&t(vJe),m&&t(br),w(Bk),w(Nk),w(m6),w(qk),w(g6),m&&t(FJe),m&&t(um),w(jk),m&&t(TJe),m&&t(vr),w(Dk),w(Ok),w(u6),w(Vk),w(V6),m&&t(MJe),m&&t(bm),w(Xk),m&&t(EJe),m&&t(Fr),w(zk),w(Qk),w(z6),w(Uk),w(rA),m&&t(CJe),m&&t(Tm),w(Hk),m&&t(wJe),m&&t(Tr),w(Jk),w(Kk),w(aA),w(Zk),w(bA),m&&t(AJe),m&&t(Cm),w(eS),m&&t(LJe),m&&t(Mr),w(oS),w(tS),w(FA),w(aS),w(kA),m&&t(yJe),m&&t(Lm),w(nS),m&&t(xJe),m&&t(Er),w(sS),w(iS),w(RA),w(dS),w(XA),m&&t($Je),m&&t($m),w(cS),m&&t(kJe),m&&t(Cr),w(mS),w(gS),w(WA),w(hS),w(t7),m&&t(SJe),m&&t(Rm),w(uS),m&&t(RJe),m&&t(wr),w(pS),w(bS),w(n7),w(vS),w(p7),m&&t(PJe),m&&t(Im),w(FS),m&&t(BJe),m&&t(Ar),w(TS),w(ES),w(b7),w(CS),w(L7),m&&t(IJe),m&&t(jm),w(wS),m&&t(NJe),m&&t(Lr),w(AS),w(yS),w(x7),w(xS),w(q7),m&&t(qJe),m&&t(Om),w($S),m&&t(jJe),m&&t(yr),w(kS),w(RS),w(D7),w(PS),w(O7),m&&t(DJe),m&&t(zm),w(BS),m&&t(GJe),m&&t(xr),w(IS),w(qS),w(X7),w(jS),w(Q7),m&&t(OJe),m&&t(Um),w(GS),m&&t(VJe),m&&t($r),w(OS),w(XS),w(H7),w(zS),w(Y7)}}}const fla={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function gla($){return lna(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Fla extends tna{constructor(g){super();ana(this,g,gla,mla,nna,{})}}export{Fla as default,fla as metadata};
