import{S as gGt,i as hGt,s as uGt,e as a,k as l,w as F,t as o,M as pGt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as _Gt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as NKr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function bGt(x){let g,v,u,f,p,d,h,Eo,Mi,ym,at,Ei,Ci,x7,xm,Oe,Qe,wi,Rn,$7,Pn,Bn,k7,Ai,In,S7,Li,$m,xa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Mi=a("code"),ym=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ei=a("code"),Ci=o('"new-model"'),x7=o(")."),xm=l(),Oe=a("p"),Qe=o("Likewise, if your "),wi=a("code"),Rn=o("NewModel"),$7=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),k7=o(`, make sure its
`),Ai=a("code"),In=o("config_class"),S7=o(` attribute is set to the same class you use when registering the model (here
`),Li=a("code"),$m=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var lS=s(u);f=r(lS,"NewModelConfig"),lS.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var yi=s(d);h=r(yi,"PretrainedConfig"),yi.forEach(t),Eo=r(Ae,`, make sure its
`),Mi=n(Ae,"CODE",{});var iS=s(Mi);ym=r(iS,"model_type"),iS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ei=n(Ae,"CODE",{});var dS=s(Ei);Ci=r(dS,'"new-model"'),dS.forEach(t),x7=r(Ae,")."),Ae.forEach(t),xm=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),wi=n(Co,"CODE",{});var $a=s(wi);Rn=r($a,"NewModel"),$a.forEach(t),$7=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var cS=s(Pn);Bn=r(cS,"PreTrainedModel"),cS.forEach(t),k7=r(Co,`, make sure its
`),Ai=n(Co,"CODE",{});var km=s(Ai);In=r(km,"config_class"),km.forEach(t),S7=r(Co,` attribute is set to the same class you use when registering the model (here
`),Li=n(Co,"CODE",{});var mS=s(Li);$m=r(mS,"NewModelConfig"),mS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Eo),e(g,Mi),e(Mi,ym),e(g,at),e(g,Ei),e(Ei,Ci),e(g,x7),b(We,xm,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,wi),e(wi,Rn),e(Oe,$7),e(Oe,Pn),e(Pn,Bn),e(Oe,k7),e(Oe,Ai),e(Ai,In),e(Oe,S7),e(Oe,Li),e(Li,$m),e(Oe,xa)},d(We){We&&t(g),We&&t(xm),We&&t(Oe)}}}function vGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TGt(x){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function MGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EGt(x){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function CGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Gt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZGt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ot(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function COt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ot(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ROt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function POt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZOt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pVt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Vt(x){let g,v,u,f,p,d,h,Eo,Mi,ym,at,Ei,Ci,x7,xm,Oe,Qe,wi,Rn,$7,Pn,Bn,k7,Ai,In,S7,Li,$m,xa,We,Ae,lS,yi,iS,dS,Co,$a,cS,km,mS,_Qe,rOe,xi,Sm,Mte,R7,bQe,Ete,vQe,tOe,Nn,FQe,Cte,TQe,MQe,wte,EQe,CQe,aOe,P7,nOe,fS,wQe,sOe,Rm,lOe,$i,Pm,Ate,B7,AQe,Lte,LQe,iOe,wo,I7,yQe,N7,xQe,gS,$Qe,kQe,SQe,q7,RQe,yte,PQe,BQe,IQe,Ar,j7,NQe,xte,qQe,jQe,ki,DQe,$te,GQe,OQe,kte,VQe,XQe,zQe,A,Bm,Ste,QQe,WQe,hS,HQe,UQe,JQe,Im,Rte,YQe,KQe,uS,ZQe,eWe,oWe,Nm,Pte,rWe,tWe,pS,aWe,nWe,sWe,qm,Bte,lWe,iWe,_S,dWe,cWe,mWe,jm,Ite,fWe,gWe,bS,hWe,uWe,pWe,Dm,Nte,_We,bWe,vS,vWe,FWe,TWe,Gm,qte,MWe,EWe,FS,CWe,wWe,AWe,Om,jte,LWe,yWe,TS,xWe,$We,kWe,Vm,Dte,SWe,RWe,MS,PWe,BWe,IWe,Xm,Gte,NWe,qWe,ES,jWe,DWe,GWe,zm,Ote,OWe,VWe,CS,XWe,zWe,QWe,Qm,Vte,WWe,HWe,wS,UWe,JWe,YWe,Wm,Xte,KWe,ZWe,AS,eHe,oHe,rHe,Hm,zte,tHe,aHe,LS,nHe,sHe,lHe,Um,Qte,iHe,dHe,yS,cHe,mHe,fHe,Jm,Wte,gHe,hHe,xS,uHe,pHe,_He,Ym,Hte,bHe,vHe,$S,FHe,THe,MHe,Km,Ute,EHe,CHe,kS,wHe,AHe,LHe,Zm,Jte,yHe,xHe,SS,$He,kHe,SHe,ef,Yte,RHe,PHe,RS,BHe,IHe,NHe,of,Kte,qHe,jHe,PS,DHe,GHe,OHe,rf,Zte,VHe,XHe,BS,zHe,QHe,WHe,tf,eae,HHe,UHe,IS,JHe,YHe,KHe,af,oae,ZHe,eUe,NS,oUe,rUe,tUe,nf,rae,aUe,nUe,qS,sUe,lUe,iUe,sf,tae,dUe,cUe,jS,mUe,fUe,gUe,lf,aae,hUe,uUe,DS,pUe,_Ue,bUe,df,nae,vUe,FUe,GS,TUe,MUe,EUe,cf,sae,CUe,wUe,OS,AUe,LUe,yUe,mf,lae,xUe,$Ue,VS,kUe,SUe,RUe,ff,iae,PUe,BUe,XS,IUe,NUe,qUe,gf,dae,jUe,DUe,zS,GUe,OUe,VUe,hf,cae,XUe,zUe,QS,QUe,WUe,HUe,uf,mae,UUe,JUe,WS,YUe,KUe,ZUe,pf,fae,eJe,oJe,HS,rJe,tJe,aJe,_f,gae,nJe,sJe,US,lJe,iJe,dJe,bf,hae,cJe,mJe,JS,fJe,gJe,hJe,vf,uae,uJe,pJe,YS,_Je,bJe,vJe,Ff,pae,FJe,TJe,KS,MJe,EJe,CJe,Tf,_ae,wJe,AJe,ZS,LJe,yJe,xJe,Mf,bae,$Je,kJe,eR,SJe,RJe,PJe,Ef,vae,BJe,IJe,oR,NJe,qJe,jJe,Cf,Fae,DJe,GJe,rR,OJe,VJe,XJe,wf,Tae,zJe,QJe,tR,WJe,HJe,UJe,Af,Mae,JJe,YJe,aR,KJe,ZJe,eYe,Lf,Eae,oYe,rYe,nR,tYe,aYe,nYe,yf,Cae,sYe,lYe,sR,iYe,dYe,cYe,xf,wae,mYe,fYe,lR,gYe,hYe,uYe,$f,Aae,pYe,_Ye,iR,bYe,vYe,FYe,kf,Lae,TYe,MYe,dR,EYe,CYe,wYe,Sf,yae,AYe,LYe,cR,yYe,xYe,$Ye,Rf,xae,kYe,SYe,mR,RYe,PYe,BYe,Pf,$ae,IYe,NYe,fR,qYe,jYe,DYe,Bf,kae,GYe,OYe,gR,VYe,XYe,zYe,If,Sae,QYe,WYe,hR,HYe,UYe,JYe,Nf,Rae,YYe,KYe,uR,ZYe,eKe,oKe,qf,Pae,rKe,tKe,pR,aKe,nKe,sKe,jf,Bae,lKe,iKe,_R,dKe,cKe,mKe,Df,Iae,fKe,gKe,bR,hKe,uKe,pKe,Gf,Nae,_Ke,bKe,vR,vKe,FKe,TKe,Of,qae,MKe,EKe,FR,CKe,wKe,AKe,Vf,jae,LKe,yKe,TR,xKe,$Ke,kKe,Xf,Dae,SKe,RKe,MR,PKe,BKe,IKe,zf,Gae,NKe,qKe,ER,jKe,DKe,GKe,Qf,Oae,OKe,VKe,CR,XKe,zKe,QKe,Wf,Vae,WKe,HKe,wR,UKe,JKe,YKe,Hf,Xae,KKe,ZKe,AR,eZe,oZe,rZe,Uf,zae,tZe,aZe,LR,nZe,sZe,lZe,Jf,Qae,iZe,dZe,yR,cZe,mZe,fZe,Yf,Wae,gZe,hZe,xR,uZe,pZe,_Ze,Kf,Hae,bZe,vZe,$R,FZe,TZe,MZe,Zf,Uae,EZe,CZe,kR,wZe,AZe,LZe,eg,Jae,yZe,xZe,SR,$Ze,kZe,SZe,og,Yae,RZe,PZe,RR,BZe,IZe,NZe,rg,Kae,qZe,jZe,PR,DZe,GZe,OZe,tg,Zae,VZe,XZe,BR,zZe,QZe,WZe,ag,ene,HZe,UZe,IR,JZe,YZe,KZe,ng,one,ZZe,eeo,NR,oeo,reo,teo,sg,rne,aeo,neo,qR,seo,leo,ieo,lg,tne,deo,ceo,jR,meo,feo,geo,ig,ane,heo,ueo,DR,peo,_eo,beo,dg,nne,veo,Feo,GR,Teo,Meo,Eeo,cg,sne,Ceo,weo,OR,Aeo,Leo,yeo,mg,lne,xeo,$eo,VR,keo,Seo,Reo,fg,ine,Peo,Beo,XR,Ieo,Neo,qeo,gg,dne,jeo,Deo,zR,Geo,Oeo,Veo,hg,cne,Xeo,zeo,QR,Qeo,Weo,Heo,ug,mne,Ueo,Jeo,WR,Yeo,Keo,Zeo,pg,fne,eoo,ooo,HR,roo,too,aoo,_g,gne,noo,soo,UR,loo,ioo,doo,bg,hne,coo,moo,JR,foo,goo,hoo,vg,une,uoo,poo,YR,_oo,boo,voo,Fg,pne,Foo,Too,KR,Moo,Eoo,Coo,Tg,_ne,woo,Aoo,ZR,Loo,yoo,xoo,Mg,bne,$oo,koo,eP,Soo,Roo,Poo,Eg,vne,Boo,Ioo,oP,Noo,qoo,joo,Cg,Fne,Doo,Goo,rP,Ooo,Voo,Xoo,wg,Tne,zoo,Qoo,tP,Woo,Hoo,Uoo,Ag,Mne,Joo,Yoo,aP,Koo,Zoo,ero,Lg,Ene,oro,rro,nP,tro,aro,nro,yg,Cne,sro,lro,sP,iro,dro,cro,xg,wne,mro,fro,lP,gro,hro,uro,$g,Ane,pro,_ro,iP,bro,vro,Fro,kg,Lne,Tro,Mro,dP,Ero,Cro,wro,Sg,yne,Aro,Lro,cP,yro,xro,$ro,Rg,xne,kro,Sro,mP,Rro,Pro,Bro,Pg,$ne,Iro,Nro,fP,qro,jro,Dro,Bg,kne,Gro,Oro,gP,Vro,Xro,zro,Ig,Sne,Qro,Wro,hP,Hro,Uro,Jro,Ng,Rne,Yro,Kro,uP,Zro,eto,oto,qg,Pne,rto,tto,pP,ato,nto,sto,jg,Bne,lto,ito,_P,dto,cto,mto,Dg,Ine,fto,gto,bP,hto,uto,pto,Gg,Nne,_to,bto,vP,vto,Fto,Tto,Og,qne,Mto,Eto,FP,Cto,wto,Ato,Vg,Lto,Xg,D7,yto,jne,xto,dOe,Si,zg,Dne,G7,$to,Gne,kto,cOe,Ao,O7,Sto,V7,Rto,TP,Pto,Bto,Ito,X7,Nto,One,qto,jto,Dto,Lr,z7,Gto,Vne,Oto,Vto,ka,Xto,Xne,zto,Qto,zne,Wto,Hto,Qne,Uto,Jto,Yto,k,qn,Wne,Kto,Zto,MP,eao,oao,EP,rao,tao,aao,jn,Hne,nao,sao,CP,lao,iao,wP,dao,cao,mao,Dn,Une,fao,gao,AP,hao,uao,LP,pao,_ao,bao,Qg,Jne,vao,Fao,yP,Tao,Mao,Eao,Gn,Yne,Cao,wao,xP,Aao,Lao,$P,yao,xao,$ao,Wg,Kne,kao,Sao,kP,Rao,Pao,Bao,Hg,Zne,Iao,Nao,SP,qao,jao,Dao,Ug,ese,Gao,Oao,RP,Vao,Xao,zao,On,ose,Qao,Wao,PP,Hao,Uao,BP,Jao,Yao,Kao,Vn,rse,Zao,eno,IP,ono,rno,NP,tno,ano,nno,Xn,tse,sno,lno,qP,ino,dno,jP,cno,mno,fno,Jg,ase,gno,hno,DP,uno,pno,_no,Yg,nse,bno,vno,GP,Fno,Tno,Mno,Kg,sse,Eno,Cno,OP,wno,Ano,Lno,zn,lse,yno,xno,VP,$no,kno,XP,Sno,Rno,Pno,Zg,ise,Bno,Ino,zP,Nno,qno,jno,Qn,dse,Dno,Gno,QP,Ono,Vno,WP,Xno,zno,Qno,Wn,cse,Wno,Hno,HP,Uno,Jno,UP,Yno,Kno,Zno,Hn,mse,eso,oso,JP,rso,tso,YP,aso,nso,sso,Un,fse,lso,iso,KP,dso,cso,ZP,mso,fso,gso,eh,gse,hso,uso,eB,pso,_so,bso,Jn,hse,vso,Fso,oB,Tso,Mso,rB,Eso,Cso,wso,Yn,use,Aso,Lso,tB,yso,xso,aB,$so,kso,Sso,Kn,pse,Rso,Pso,nB,Bso,Iso,sB,Nso,qso,jso,Zn,_se,Dso,Gso,lB,Oso,Vso,iB,Xso,zso,Qso,es,bse,Wso,Hso,dB,Uso,Jso,cB,Yso,Kso,Zso,os,vse,elo,olo,mB,rlo,tlo,fB,alo,nlo,slo,oh,Fse,llo,ilo,gB,dlo,clo,mlo,rs,Tse,flo,glo,hB,hlo,ulo,uB,plo,_lo,blo,rh,Mse,vlo,Flo,pB,Tlo,Mlo,Elo,ts,Ese,Clo,wlo,_B,Alo,Llo,bB,ylo,xlo,$lo,as,Cse,klo,Slo,vB,Rlo,Plo,FB,Blo,Ilo,Nlo,ns,wse,qlo,jlo,TB,Dlo,Glo,MB,Olo,Vlo,Xlo,th,Ase,zlo,Qlo,EB,Wlo,Hlo,Ulo,ss,Lse,Jlo,Ylo,CB,Klo,Zlo,wB,eio,oio,rio,ls,yse,tio,aio,AB,nio,sio,LB,lio,iio,dio,ah,xse,cio,mio,yB,fio,gio,hio,is,$se,uio,pio,xB,_io,bio,$B,vio,Fio,Tio,ds,kse,Mio,Eio,kB,Cio,wio,SB,Aio,Lio,yio,cs,Sse,xio,$io,RB,kio,Sio,PB,Rio,Pio,Bio,ms,Rse,Iio,Nio,BB,qio,jio,IB,Dio,Gio,Oio,fs,Pse,Vio,Xio,NB,zio,Qio,qB,Wio,Hio,Uio,gs,Bse,Jio,Yio,jB,Kio,Zio,DB,edo,odo,rdo,hs,Ise,tdo,ado,GB,ndo,sdo,OB,ldo,ido,ddo,us,Nse,cdo,mdo,VB,fdo,gdo,XB,hdo,udo,pdo,nh,qse,_do,bdo,zB,vdo,Fdo,Tdo,ps,jse,Mdo,Edo,QB,Cdo,wdo,WB,Ado,Ldo,ydo,sh,Dse,xdo,$do,HB,kdo,Sdo,Rdo,lh,Gse,Pdo,Bdo,UB,Ido,Ndo,qdo,_s,Ose,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,bs,Vse,Qdo,Wdo,KB,Hdo,Udo,ZB,Jdo,Ydo,Kdo,vs,Xse,Zdo,eco,eI,oco,rco,oI,tco,aco,nco,ih,zse,sco,lco,rI,ico,dco,cco,Fs,Qse,mco,fco,tI,gco,hco,aI,uco,pco,_co,Ts,Wse,bco,vco,nI,Fco,Tco,sI,Mco,Eco,Cco,Ms,Hse,wco,Aco,lI,Lco,yco,iI,xco,$co,kco,Es,Use,Sco,Rco,dI,Pco,Bco,cI,Ico,Nco,qco,Cs,Jse,jco,Dco,mI,Gco,Oco,fI,Vco,Xco,zco,ws,Yse,Qco,Wco,gI,Hco,Uco,hI,Jco,Yco,Kco,dh,Kse,Zco,emo,uI,omo,rmo,tmo,As,Zse,amo,nmo,pI,smo,lmo,_I,imo,dmo,cmo,ch,ele,mmo,fmo,bI,gmo,hmo,umo,mh,ole,pmo,_mo,vI,bmo,vmo,Fmo,fh,rle,Tmo,Mmo,FI,Emo,Cmo,wmo,gh,tle,Amo,Lmo,TI,ymo,xmo,$mo,Ls,ale,kmo,Smo,MI,Rmo,Pmo,EI,Bmo,Imo,Nmo,hh,nle,qmo,jmo,CI,Dmo,Gmo,Omo,ys,sle,Vmo,Xmo,wI,zmo,Qmo,AI,Wmo,Hmo,Umo,xs,lle,Jmo,Ymo,LI,Kmo,Zmo,yI,efo,ofo,rfo,$s,ile,tfo,afo,xI,nfo,sfo,$I,lfo,ifo,dfo,ks,dle,cfo,mfo,kI,ffo,gfo,SI,hfo,ufo,pfo,Ss,cle,_fo,bfo,RI,vfo,Ffo,PI,Tfo,Mfo,Efo,Rs,mle,Cfo,wfo,BI,Afo,Lfo,II,yfo,xfo,$fo,uh,fle,kfo,Sfo,NI,Rfo,Pfo,Bfo,ph,gle,Ifo,Nfo,qI,qfo,jfo,Dfo,Ps,hle,Gfo,Ofo,jI,Vfo,Xfo,DI,zfo,Qfo,Wfo,Bs,ule,Hfo,Ufo,GI,Jfo,Yfo,OI,Kfo,Zfo,ego,Is,ple,ogo,rgo,VI,tgo,ago,XI,ngo,sgo,lgo,_h,_le,igo,dgo,zI,cgo,mgo,fgo,bh,ble,ggo,hgo,QI,ugo,pgo,_go,vh,vle,bgo,vgo,WI,Fgo,Tgo,Mgo,Ns,Fle,Ego,Cgo,HI,wgo,Ago,UI,Lgo,ygo,xgo,qs,Tle,$go,kgo,JI,Sgo,Rgo,YI,Pgo,Bgo,Igo,Fh,Mle,Ngo,qgo,KI,jgo,Dgo,Ggo,Th,Ele,Ogo,Vgo,ZI,Xgo,zgo,Qgo,Mh,Cle,Wgo,Hgo,eN,Ugo,Jgo,Ygo,js,wle,Kgo,Zgo,oN,eho,oho,rN,rho,tho,aho,Eh,Ale,nho,sho,tN,lho,iho,dho,Ch,Lle,cho,mho,aN,fho,gho,hho,Ds,yle,uho,pho,nN,_ho,bho,sN,vho,Fho,Tho,Gs,xle,Mho,Eho,lN,Cho,who,iN,Aho,Lho,yho,Os,$le,xho,$ho,dN,kho,Sho,cN,Rho,Pho,Bho,Vs,kle,Iho,Nho,mN,qho,jho,fN,Dho,Gho,Oho,wh,Vho,Ah,Q7,Xho,Sle,zho,mOe,Ri,Lh,Rle,W7,Qho,Ple,Who,fOe,Lo,H7,Hho,U7,Uho,gN,Jho,Yho,Kho,J7,Zho,Ble,euo,ouo,ruo,He,Y7,tuo,Ile,auo,nuo,Sa,suo,Nle,luo,iuo,qle,duo,cuo,jle,muo,fuo,guo,Y,yh,Dle,huo,uuo,hN,puo,_uo,buo,xh,Gle,vuo,Fuo,uN,Tuo,Muo,Euo,$h,Ole,Cuo,wuo,pN,Auo,Luo,yuo,kh,Vle,xuo,$uo,_N,kuo,Suo,Ruo,Sh,Xle,Puo,Buo,bN,Iuo,Nuo,quo,Rh,zle,juo,Duo,vN,Guo,Ouo,Vuo,Ph,Qle,Xuo,zuo,FN,Quo,Wuo,Huo,Bh,Wle,Uuo,Juo,TN,Yuo,Kuo,Zuo,Ih,Hle,epo,opo,MN,rpo,tpo,apo,Nh,Ule,npo,spo,EN,lpo,ipo,dpo,qh,Jle,cpo,mpo,CN,fpo,gpo,hpo,jh,Yle,upo,ppo,wN,_po,bpo,vpo,Dh,Kle,Fpo,Tpo,AN,Mpo,Epo,Cpo,Gh,Zle,wpo,Apo,LN,Lpo,ypo,xpo,Oh,eie,$po,kpo,yN,Spo,Rpo,Ppo,Vh,oie,Bpo,Ipo,xN,Npo,qpo,jpo,Xh,rie,Dpo,Gpo,$N,Opo,Vpo,Xpo,zh,tie,zpo,Qpo,kN,Wpo,Hpo,Upo,Qh,aie,Jpo,Ypo,SN,Kpo,Zpo,e_o,Wh,nie,o_o,r_o,RN,t_o,a_o,n_o,Hh,sie,s_o,l_o,PN,i_o,d_o,c_o,Uh,lie,m_o,f_o,BN,g_o,h_o,u_o,Jh,iie,p_o,__o,IN,b_o,v_o,F_o,Yh,die,T_o,M_o,NN,E_o,C_o,w_o,Kh,cie,A_o,L_o,qN,y_o,x_o,$_o,Zh,mie,k_o,S_o,jN,R_o,P_o,B_o,eu,fie,I_o,N_o,DN,q_o,j_o,D_o,ou,gie,G_o,O_o,GN,V_o,X_o,z_o,ru,hie,Q_o,W_o,ON,H_o,U_o,J_o,tu,uie,Y_o,K_o,VN,Z_o,e2o,o2o,au,pie,r2o,t2o,XN,a2o,n2o,s2o,nu,_ie,l2o,i2o,zN,d2o,c2o,m2o,su,f2o,lu,g2o,iu,K7,h2o,bie,u2o,gOe,Pi,du,vie,Z7,p2o,Fie,_2o,hOe,yo,ey,b2o,oy,v2o,QN,F2o,T2o,M2o,ry,E2o,Tie,C2o,w2o,A2o,Ue,ty,L2o,Mie,y2o,x2o,Bi,$2o,Eie,k2o,S2o,Cie,R2o,P2o,B2o,he,cu,wie,I2o,N2o,WN,q2o,j2o,D2o,mu,Aie,G2o,O2o,Lie,V2o,X2o,z2o,fu,yie,Q2o,W2o,HN,H2o,U2o,J2o,gu,xie,Y2o,K2o,UN,Z2o,ebo,obo,hu,$ie,rbo,tbo,JN,abo,nbo,sbo,uu,kie,lbo,ibo,YN,dbo,cbo,mbo,pu,Sie,fbo,gbo,KN,hbo,ubo,pbo,_u,Rie,_bo,bbo,ZN,vbo,Fbo,Tbo,bu,Pie,Mbo,Ebo,eq,Cbo,wbo,Abo,vu,Bie,Lbo,ybo,oq,xbo,$bo,kbo,Fu,Iie,Sbo,Rbo,rq,Pbo,Bbo,Ibo,Tu,Nie,Nbo,qbo,tq,jbo,Dbo,Gbo,Mu,qie,Obo,Vbo,aq,Xbo,zbo,Qbo,Eu,jie,Wbo,Hbo,nq,Ubo,Jbo,Ybo,Cu,Die,Kbo,Zbo,sq,evo,ovo,rvo,wu,Gie,tvo,avo,lq,nvo,svo,lvo,Au,Oie,ivo,dvo,iq,cvo,mvo,fvo,Lu,gvo,yu,hvo,xu,ay,uvo,Vie,pvo,uOe,Ii,$u,Xie,ny,_vo,zie,bvo,pOe,xo,sy,vvo,Ni,Fvo,dq,Tvo,Mvo,cq,Evo,Cvo,wvo,ly,Avo,Qie,Lvo,yvo,xvo,nt,iy,$vo,Wie,kvo,Svo,qi,Rvo,Hie,Pvo,Bvo,mq,Ivo,Nvo,qvo,ku,jvo,Je,dy,Dvo,Uie,Gvo,Ovo,Ra,Vvo,Jie,Xvo,zvo,Yie,Qvo,Wvo,Kie,Hvo,Uvo,Jvo,y,Su,Zie,Yvo,Kvo,fq,Zvo,eFo,oFo,Ru,ede,rFo,tFo,gq,aFo,nFo,sFo,Pu,ode,lFo,iFo,hq,dFo,cFo,mFo,Bu,rde,fFo,gFo,uq,hFo,uFo,pFo,Iu,tde,_Fo,bFo,pq,vFo,FFo,TFo,Nu,ade,MFo,EFo,_q,CFo,wFo,AFo,qu,nde,LFo,yFo,bq,xFo,$Fo,kFo,ju,sde,SFo,RFo,vq,PFo,BFo,IFo,Du,lde,NFo,qFo,Fq,jFo,DFo,GFo,Gu,ide,OFo,VFo,Tq,XFo,zFo,QFo,Ou,dde,WFo,HFo,Mq,UFo,JFo,YFo,Vu,cde,KFo,ZFo,Eq,e1o,o1o,r1o,Xu,mde,t1o,a1o,Cq,n1o,s1o,l1o,zu,fde,i1o,d1o,wq,c1o,m1o,f1o,Qu,gde,g1o,h1o,Aq,u1o,p1o,_1o,Wu,hde,b1o,v1o,Lq,F1o,T1o,M1o,Hu,ude,E1o,C1o,yq,w1o,A1o,L1o,Uu,pde,y1o,x1o,xq,$1o,k1o,S1o,Ju,_de,R1o,P1o,$q,B1o,I1o,N1o,Yu,bde,q1o,j1o,kq,D1o,G1o,O1o,Ku,vde,V1o,X1o,Sq,z1o,Q1o,W1o,Zu,Fde,H1o,U1o,Rq,J1o,Y1o,K1o,ep,Tde,Z1o,eTo,Pq,oTo,rTo,tTo,op,Mde,aTo,nTo,Bq,sTo,lTo,iTo,rp,Ede,dTo,cTo,Iq,mTo,fTo,gTo,tp,Cde,hTo,uTo,Nq,pTo,_To,bTo,ap,wde,vTo,FTo,qq,TTo,MTo,ETo,np,Ade,CTo,wTo,jq,ATo,LTo,yTo,sp,Lde,xTo,$To,Dq,kTo,STo,RTo,lp,yde,PTo,BTo,Gq,ITo,NTo,qTo,ip,xde,jTo,DTo,Oq,GTo,OTo,VTo,dp,$de,XTo,zTo,Vq,QTo,WTo,HTo,cp,kde,UTo,JTo,Xq,YTo,KTo,ZTo,mp,Sde,eMo,oMo,zq,rMo,tMo,aMo,Xs,Rde,nMo,sMo,Qq,lMo,iMo,Wq,dMo,cMo,mMo,fp,Pde,fMo,gMo,Hq,hMo,uMo,pMo,gp,Bde,_Mo,bMo,Uq,vMo,FMo,TMo,hp,Ide,MMo,EMo,Jq,CMo,wMo,AMo,up,Nde,LMo,yMo,Yq,xMo,$Mo,kMo,pp,qde,SMo,RMo,Kq,PMo,BMo,IMo,_p,jde,NMo,qMo,Zq,jMo,DMo,GMo,bp,Dde,OMo,VMo,ej,XMo,zMo,QMo,vp,Gde,WMo,HMo,oj,UMo,JMo,YMo,Fp,Ode,KMo,ZMo,rj,eEo,oEo,rEo,Tp,Vde,tEo,aEo,tj,nEo,sEo,lEo,Mp,Xde,iEo,dEo,aj,cEo,mEo,fEo,Ep,zde,gEo,hEo,nj,uEo,pEo,_Eo,Cp,Qde,bEo,vEo,sj,FEo,TEo,MEo,wp,Wde,EEo,CEo,lj,wEo,AEo,LEo,Ap,Hde,yEo,xEo,ij,$Eo,kEo,SEo,Lp,Ude,REo,PEo,dj,BEo,IEo,NEo,yp,Jde,qEo,jEo,cj,DEo,GEo,OEo,xp,Yde,VEo,XEo,mj,zEo,QEo,WEo,$p,Kde,HEo,UEo,fj,JEo,YEo,KEo,kp,Zde,ZEo,e4o,gj,o4o,r4o,t4o,Sp,ece,a4o,n4o,hj,s4o,l4o,i4o,Rp,oce,d4o,c4o,uj,m4o,f4o,g4o,Pp,rce,h4o,u4o,pj,p4o,_4o,b4o,Bp,tce,v4o,F4o,_j,T4o,M4o,E4o,Ip,ace,C4o,w4o,bj,A4o,L4o,y4o,Np,nce,x4o,$4o,vj,k4o,S4o,R4o,qp,sce,P4o,B4o,Fj,I4o,N4o,q4o,jp,lce,j4o,D4o,Tj,G4o,O4o,V4o,Dp,ice,X4o,z4o,Mj,Q4o,W4o,H4o,Gp,dce,U4o,J4o,Ej,Y4o,K4o,Z4o,Op,cce,eCo,oCo,Cj,rCo,tCo,aCo,Vp,mce,nCo,sCo,wj,lCo,iCo,dCo,Xp,fce,cCo,mCo,Aj,fCo,gCo,hCo,zp,gce,uCo,pCo,Lj,_Co,bCo,vCo,Qp,hce,FCo,TCo,yj,MCo,ECo,CCo,Wp,uce,wCo,ACo,xj,LCo,yCo,xCo,Hp,pce,$Co,kCo,$j,SCo,RCo,PCo,Up,_ce,BCo,ICo,kj,NCo,qCo,jCo,Jp,bce,DCo,GCo,Sj,OCo,VCo,XCo,Yp,vce,zCo,QCo,Rj,WCo,HCo,UCo,Kp,Fce,JCo,YCo,Pj,KCo,ZCo,e5o,Zp,Tce,o5o,r5o,Bj,t5o,a5o,n5o,e_,Mce,s5o,l5o,Ij,i5o,d5o,c5o,o_,Ece,m5o,f5o,Nj,g5o,h5o,u5o,r_,Cce,p5o,_5o,qj,b5o,v5o,F5o,t_,wce,T5o,M5o,jj,E5o,C5o,w5o,a_,Ace,A5o,L5o,Dj,y5o,x5o,$5o,n_,Lce,k5o,S5o,Gj,R5o,P5o,B5o,s_,yce,I5o,N5o,Oj,q5o,j5o,D5o,l_,xce,G5o,O5o,Vj,V5o,X5o,z5o,i_,$ce,Q5o,W5o,Xj,H5o,U5o,J5o,d_,kce,Y5o,K5o,zj,Z5o,e3o,o3o,c_,Sce,r3o,t3o,Qj,a3o,n3o,s3o,m_,Rce,l3o,i3o,Wj,d3o,c3o,m3o,f_,Pce,f3o,g3o,Hj,h3o,u3o,p3o,g_,Bce,_3o,b3o,Uj,v3o,F3o,T3o,h_,Ice,M3o,E3o,Jj,C3o,w3o,A3o,u_,Nce,L3o,y3o,Yj,x3o,$3o,k3o,p_,qce,S3o,R3o,Kj,P3o,B3o,I3o,__,jce,N3o,q3o,Zj,j3o,D3o,G3o,b_,Dce,O3o,V3o,eD,X3o,z3o,Q3o,v_,Gce,W3o,H3o,oD,U3o,J3o,Y3o,F_,Oce,K3o,Z3o,rD,e0o,o0o,r0o,T_,Vce,t0o,a0o,tD,n0o,s0o,l0o,M_,Xce,i0o,d0o,aD,c0o,m0o,f0o,E_,zce,g0o,h0o,nD,u0o,p0o,_0o,C_,Qce,b0o,v0o,sD,F0o,T0o,M0o,w_,Wce,E0o,C0o,lD,w0o,A0o,L0o,A_,Hce,y0o,x0o,iD,$0o,k0o,S0o,L_,Uce,R0o,P0o,dD,B0o,I0o,N0o,y_,Jce,q0o,j0o,cD,D0o,G0o,O0o,x_,Yce,V0o,X0o,mD,z0o,Q0o,W0o,$_,Kce,H0o,U0o,fD,J0o,Y0o,K0o,k_,Z0o,Zce,ewo,owo,eme,rwo,two,S_,_Oe,ji,R_,ome,cy,awo,rme,nwo,bOe,$o,my,swo,Di,lwo,gD,iwo,dwo,hD,cwo,mwo,fwo,fy,gwo,tme,hwo,uwo,pwo,st,gy,_wo,ame,bwo,vwo,Gi,Fwo,nme,Two,Mwo,uD,Ewo,Cwo,wwo,P_,Awo,Ye,hy,Lwo,sme,ywo,xwo,Pa,$wo,lme,kwo,Swo,ime,Rwo,Pwo,dme,Bwo,Iwo,Nwo,G,B_,cme,qwo,jwo,pD,Dwo,Gwo,Owo,I_,mme,Vwo,Xwo,_D,zwo,Qwo,Wwo,N_,fme,Hwo,Uwo,bD,Jwo,Ywo,Kwo,q_,gme,Zwo,eAo,vD,oAo,rAo,tAo,j_,hme,aAo,nAo,FD,sAo,lAo,iAo,D_,ume,dAo,cAo,TD,mAo,fAo,gAo,G_,pme,hAo,uAo,MD,pAo,_Ao,bAo,O_,_me,vAo,FAo,ED,TAo,MAo,EAo,V_,bme,CAo,wAo,CD,AAo,LAo,yAo,X_,vme,xAo,$Ao,wD,kAo,SAo,RAo,z_,Fme,PAo,BAo,AD,IAo,NAo,qAo,Q_,Tme,jAo,DAo,LD,GAo,OAo,VAo,W_,Mme,XAo,zAo,yD,QAo,WAo,HAo,H_,Eme,UAo,JAo,xD,YAo,KAo,ZAo,U_,Cme,e6o,o6o,$D,r6o,t6o,a6o,J_,wme,n6o,s6o,kD,l6o,i6o,d6o,Y_,Ame,c6o,m6o,SD,f6o,g6o,h6o,K_,Lme,u6o,p6o,RD,_6o,b6o,v6o,Z_,yme,F6o,T6o,PD,M6o,E6o,C6o,e2,xme,w6o,A6o,BD,L6o,y6o,x6o,o2,$me,$6o,k6o,ID,S6o,R6o,P6o,r2,kme,B6o,I6o,ND,N6o,q6o,j6o,t2,Sme,D6o,G6o,qD,O6o,V6o,X6o,a2,Rme,z6o,Q6o,jD,W6o,H6o,U6o,n2,Pme,J6o,Y6o,DD,K6o,Z6o,eLo,s2,Bme,oLo,rLo,GD,tLo,aLo,nLo,l2,Ime,sLo,lLo,OD,iLo,dLo,cLo,i2,Nme,mLo,fLo,VD,gLo,hLo,uLo,d2,qme,pLo,_Lo,XD,bLo,vLo,FLo,c2,jme,TLo,MLo,zD,ELo,CLo,wLo,m2,Dme,ALo,LLo,QD,yLo,xLo,$Lo,f2,Gme,kLo,SLo,WD,RLo,PLo,BLo,g2,Ome,ILo,NLo,HD,qLo,jLo,DLo,h2,Vme,GLo,OLo,UD,VLo,XLo,zLo,u2,Xme,QLo,WLo,JD,HLo,ULo,JLo,p2,zme,YLo,KLo,YD,ZLo,e7o,o7o,_2,Qme,r7o,t7o,KD,a7o,n7o,s7o,b2,Wme,l7o,i7o,ZD,d7o,c7o,m7o,v2,Hme,f7o,g7o,eG,h7o,u7o,p7o,F2,Ume,_7o,b7o,oG,v7o,F7o,T7o,T2,Jme,M7o,E7o,rG,C7o,w7o,A7o,M2,Yme,L7o,y7o,tG,x7o,$7o,k7o,E2,Kme,S7o,R7o,aG,P7o,B7o,I7o,C2,Zme,N7o,q7o,nG,j7o,D7o,G7o,w2,O7o,efe,V7o,X7o,ofe,z7o,Q7o,A2,vOe,Oi,L2,rfe,uy,W7o,tfe,H7o,FOe,ko,py,U7o,Vi,J7o,sG,Y7o,K7o,lG,Z7o,eyo,oyo,_y,ryo,afe,tyo,ayo,nyo,lt,by,syo,nfe,lyo,iyo,Xi,dyo,sfe,cyo,myo,iG,fyo,gyo,hyo,y2,uyo,Ke,vy,pyo,lfe,_yo,byo,Ba,vyo,ife,Fyo,Tyo,dfe,Myo,Eyo,cfe,Cyo,wyo,Ayo,z,x2,mfe,Lyo,yyo,dG,xyo,$yo,kyo,$2,ffe,Syo,Ryo,cG,Pyo,Byo,Iyo,k2,gfe,Nyo,qyo,mG,jyo,Dyo,Gyo,S2,hfe,Oyo,Vyo,fG,Xyo,zyo,Qyo,R2,ufe,Wyo,Hyo,gG,Uyo,Jyo,Yyo,P2,pfe,Kyo,Zyo,hG,e8o,o8o,r8o,B2,_fe,t8o,a8o,uG,n8o,s8o,l8o,I2,bfe,i8o,d8o,pG,c8o,m8o,f8o,N2,vfe,g8o,h8o,_G,u8o,p8o,_8o,q2,Ffe,b8o,v8o,bG,F8o,T8o,M8o,j2,Tfe,E8o,C8o,vG,w8o,A8o,L8o,D2,Mfe,y8o,x8o,FG,$8o,k8o,S8o,G2,Efe,R8o,P8o,TG,B8o,I8o,N8o,O2,Cfe,q8o,j8o,MG,D8o,G8o,O8o,V2,wfe,V8o,X8o,EG,z8o,Q8o,W8o,X2,Afe,H8o,U8o,CG,J8o,Y8o,K8o,z2,Lfe,Z8o,e9o,wG,o9o,r9o,t9o,Q2,yfe,a9o,n9o,AG,s9o,l9o,i9o,W2,xfe,d9o,c9o,LG,m9o,f9o,g9o,H2,$fe,h9o,u9o,yG,p9o,_9o,b9o,U2,kfe,v9o,F9o,xG,T9o,M9o,E9o,J2,Sfe,C9o,w9o,$G,A9o,L9o,y9o,Y2,Rfe,x9o,$9o,kG,k9o,S9o,R9o,K2,Pfe,P9o,B9o,SG,I9o,N9o,q9o,Z2,Bfe,j9o,D9o,RG,G9o,O9o,V9o,eb,Ife,X9o,z9o,PG,Q9o,W9o,H9o,ob,Nfe,U9o,J9o,BG,Y9o,K9o,Z9o,rb,qfe,exo,oxo,IG,rxo,txo,axo,tb,jfe,nxo,sxo,NG,lxo,ixo,dxo,ab,Dfe,cxo,mxo,qG,fxo,gxo,hxo,nb,Gfe,uxo,pxo,jG,_xo,bxo,vxo,sb,Ofe,Fxo,Txo,DG,Mxo,Exo,Cxo,lb,Vfe,wxo,Axo,GG,Lxo,yxo,xxo,ib,Xfe,$xo,kxo,OG,Sxo,Rxo,Pxo,db,zfe,Bxo,Ixo,VG,Nxo,qxo,jxo,cb,Qfe,Dxo,Gxo,XG,Oxo,Vxo,Xxo,mb,Wfe,zxo,Qxo,zG,Wxo,Hxo,Uxo,fb,Hfe,Jxo,Yxo,QG,Kxo,Zxo,e$o,gb,Ufe,o$o,r$o,WG,t$o,a$o,n$o,hb,s$o,Jfe,l$o,i$o,Yfe,d$o,c$o,ub,TOe,zi,pb,Kfe,Fy,m$o,Zfe,f$o,MOe,So,Ty,g$o,Qi,h$o,HG,u$o,p$o,UG,_$o,b$o,v$o,My,F$o,ege,T$o,M$o,E$o,it,Ey,C$o,oge,w$o,A$o,Wi,L$o,rge,y$o,x$o,JG,$$o,k$o,S$o,_b,R$o,Ze,Cy,P$o,tge,B$o,I$o,Ia,N$o,age,q$o,j$o,nge,D$o,G$o,sge,O$o,V$o,X$o,W,bb,lge,z$o,Q$o,YG,W$o,H$o,U$o,vb,ige,J$o,Y$o,KG,K$o,Z$o,eko,Fb,dge,oko,rko,ZG,tko,ako,nko,Tb,cge,sko,lko,eO,iko,dko,cko,Mb,mge,mko,fko,oO,gko,hko,uko,Eb,fge,pko,_ko,rO,bko,vko,Fko,Cb,gge,Tko,Mko,tO,Eko,Cko,wko,wb,hge,Ako,Lko,aO,yko,xko,$ko,Ab,uge,kko,Sko,nO,Rko,Pko,Bko,Lb,pge,Iko,Nko,sO,qko,jko,Dko,yb,_ge,Gko,Oko,lO,Vko,Xko,zko,xb,bge,Qko,Wko,iO,Hko,Uko,Jko,$b,vge,Yko,Kko,dO,Zko,eSo,oSo,kb,Fge,rSo,tSo,cO,aSo,nSo,sSo,Sb,Tge,lSo,iSo,mO,dSo,cSo,mSo,Rb,Mge,fSo,gSo,fO,hSo,uSo,pSo,Pb,Ege,_So,bSo,gO,vSo,FSo,TSo,Bb,Cge,MSo,ESo,hO,CSo,wSo,ASo,Ib,wge,LSo,ySo,uO,xSo,$So,kSo,Nb,Age,SSo,RSo,pO,PSo,BSo,ISo,qb,Lge,NSo,qSo,_O,jSo,DSo,GSo,jb,yge,OSo,VSo,bO,XSo,zSo,QSo,Db,xge,WSo,HSo,vO,USo,JSo,YSo,Gb,$ge,KSo,ZSo,FO,eRo,oRo,rRo,Ob,kge,tRo,aRo,TO,nRo,sRo,lRo,Vb,Sge,iRo,dRo,MO,cRo,mRo,fRo,Xb,Rge,gRo,hRo,EO,uRo,pRo,_Ro,zb,Pge,bRo,vRo,CO,FRo,TRo,MRo,Qb,Bge,ERo,CRo,wO,wRo,ARo,LRo,Wb,Ige,yRo,xRo,AO,$Ro,kRo,SRo,Hb,Nge,RRo,PRo,LO,BRo,IRo,NRo,Ub,qge,qRo,jRo,yO,DRo,GRo,ORo,Jb,jge,VRo,XRo,Dge,zRo,QRo,WRo,Yb,Gge,HRo,URo,xO,JRo,YRo,KRo,Kb,Oge,ZRo,ePo,$O,oPo,rPo,tPo,Zb,Vge,aPo,nPo,kO,sPo,lPo,iPo,ev,Xge,dPo,cPo,SO,mPo,fPo,gPo,ov,hPo,zge,uPo,pPo,Qge,_Po,bPo,rv,EOe,Hi,tv,Wge,wy,vPo,Hge,FPo,COe,Ro,Ay,TPo,Ui,MPo,RO,EPo,CPo,PO,wPo,APo,LPo,Ly,yPo,Uge,xPo,$Po,kPo,dt,yy,SPo,Jge,RPo,PPo,Ji,BPo,Yge,IPo,NPo,BO,qPo,jPo,DPo,av,GPo,eo,xy,OPo,Kge,VPo,XPo,Na,zPo,Zge,QPo,WPo,ehe,HPo,UPo,ohe,JPo,YPo,KPo,ue,nv,rhe,ZPo,eBo,IO,oBo,rBo,tBo,sv,the,aBo,nBo,NO,sBo,lBo,iBo,lv,ahe,dBo,cBo,qO,mBo,fBo,gBo,iv,nhe,hBo,uBo,jO,pBo,_Bo,bBo,dv,she,vBo,FBo,DO,TBo,MBo,EBo,cv,lhe,CBo,wBo,GO,ABo,LBo,yBo,mv,ihe,xBo,$Bo,OO,kBo,SBo,RBo,fv,dhe,PBo,BBo,VO,IBo,NBo,qBo,gv,che,jBo,DBo,XO,GBo,OBo,VBo,hv,mhe,XBo,zBo,zO,QBo,WBo,HBo,uv,fhe,UBo,JBo,QO,YBo,KBo,ZBo,pv,ghe,eIo,oIo,WO,rIo,tIo,aIo,_v,hhe,nIo,sIo,HO,lIo,iIo,dIo,bv,uhe,cIo,mIo,UO,fIo,gIo,hIo,vv,phe,uIo,pIo,JO,_Io,bIo,vIo,Fv,_he,FIo,TIo,YO,MIo,EIo,CIo,Tv,bhe,wIo,AIo,KO,LIo,yIo,xIo,Mv,$Io,vhe,kIo,SIo,Fhe,RIo,PIo,Ev,wOe,Yi,Cv,The,$y,BIo,Mhe,IIo,AOe,Po,ky,NIo,Ki,qIo,ZO,jIo,DIo,eV,GIo,OIo,VIo,Sy,XIo,Ehe,zIo,QIo,WIo,ct,Ry,HIo,Che,UIo,JIo,Zi,YIo,whe,KIo,ZIo,oV,eNo,oNo,rNo,wv,tNo,oo,Py,aNo,Ahe,nNo,sNo,qa,lNo,Lhe,iNo,dNo,yhe,cNo,mNo,xhe,fNo,gNo,hNo,N,Av,$he,uNo,pNo,rV,_No,bNo,vNo,Lv,khe,FNo,TNo,tV,MNo,ENo,CNo,yv,She,wNo,ANo,aV,LNo,yNo,xNo,xv,Rhe,$No,kNo,nV,SNo,RNo,PNo,$v,Phe,BNo,INo,sV,NNo,qNo,jNo,kv,Bhe,DNo,GNo,lV,ONo,VNo,XNo,Sv,Ihe,zNo,QNo,iV,WNo,HNo,UNo,Rv,Nhe,JNo,YNo,dV,KNo,ZNo,eqo,Pv,qhe,oqo,rqo,cV,tqo,aqo,nqo,Bv,jhe,sqo,lqo,mV,iqo,dqo,cqo,Iv,Dhe,mqo,fqo,fV,gqo,hqo,uqo,Nv,Ghe,pqo,_qo,gV,bqo,vqo,Fqo,qv,Ohe,Tqo,Mqo,hV,Eqo,Cqo,wqo,jv,Vhe,Aqo,Lqo,uV,yqo,xqo,$qo,Dv,Xhe,kqo,Sqo,pV,Rqo,Pqo,Bqo,Gv,zhe,Iqo,Nqo,_V,qqo,jqo,Dqo,Ov,Qhe,Gqo,Oqo,bV,Vqo,Xqo,zqo,Vv,Whe,Qqo,Wqo,vV,Hqo,Uqo,Jqo,Xv,Hhe,Yqo,Kqo,FV,Zqo,ejo,ojo,zv,Uhe,rjo,tjo,TV,ajo,njo,sjo,Qv,Jhe,ljo,ijo,MV,djo,cjo,mjo,Wv,Yhe,fjo,gjo,EV,hjo,ujo,pjo,Hv,Khe,_jo,bjo,CV,vjo,Fjo,Tjo,Uv,Zhe,Mjo,Ejo,wV,Cjo,wjo,Ajo,Jv,eue,Ljo,yjo,AV,xjo,$jo,kjo,Yv,oue,Sjo,Rjo,LV,Pjo,Bjo,Ijo,Kv,rue,Njo,qjo,yV,jjo,Djo,Gjo,Zv,tue,Ojo,Vjo,xV,Xjo,zjo,Qjo,eF,aue,Wjo,Hjo,$V,Ujo,Jjo,Yjo,oF,nue,Kjo,Zjo,kV,eDo,oDo,rDo,rF,sue,tDo,aDo,SV,nDo,sDo,lDo,tF,lue,iDo,dDo,RV,cDo,mDo,fDo,aF,iue,gDo,hDo,PV,uDo,pDo,_Do,nF,due,bDo,vDo,BV,FDo,TDo,MDo,sF,cue,EDo,CDo,IV,wDo,ADo,LDo,lF,mue,yDo,xDo,NV,$Do,kDo,SDo,iF,fue,RDo,PDo,qV,BDo,IDo,NDo,dF,gue,qDo,jDo,jV,DDo,GDo,ODo,cF,hue,VDo,XDo,DV,zDo,QDo,WDo,mF,uue,HDo,UDo,GV,JDo,YDo,KDo,fF,pue,ZDo,eGo,OV,oGo,rGo,tGo,gF,_ue,aGo,nGo,VV,sGo,lGo,iGo,hF,bue,dGo,cGo,XV,mGo,fGo,gGo,uF,vue,hGo,uGo,zV,pGo,_Go,bGo,pF,Fue,vGo,FGo,QV,TGo,MGo,EGo,_F,Tue,CGo,wGo,WV,AGo,LGo,yGo,bF,Mue,xGo,$Go,HV,kGo,SGo,RGo,vF,Eue,PGo,BGo,UV,IGo,NGo,qGo,FF,Cue,jGo,DGo,JV,GGo,OGo,VGo,TF,XGo,wue,zGo,QGo,Aue,WGo,HGo,MF,LOe,ed,EF,Lue,By,UGo,yue,JGo,yOe,Bo,Iy,YGo,od,KGo,YV,ZGo,eOo,KV,oOo,rOo,tOo,Ny,aOo,xue,nOo,sOo,lOo,mt,qy,iOo,$ue,dOo,cOo,rd,mOo,kue,fOo,gOo,ZV,hOo,uOo,pOo,CF,_Oo,ro,jy,bOo,Sue,vOo,FOo,ja,TOo,Rue,MOo,EOo,Pue,COo,wOo,Bue,AOo,LOo,yOo,Z,wF,Iue,xOo,$Oo,eX,kOo,SOo,ROo,AF,Nue,POo,BOo,oX,IOo,NOo,qOo,LF,que,jOo,DOo,rX,GOo,OOo,VOo,yF,jue,XOo,zOo,tX,QOo,WOo,HOo,xF,Due,UOo,JOo,aX,YOo,KOo,ZOo,$F,Gue,eVo,oVo,nX,rVo,tVo,aVo,kF,Oue,nVo,sVo,sX,lVo,iVo,dVo,SF,Vue,cVo,mVo,lX,fVo,gVo,hVo,RF,Xue,uVo,pVo,iX,_Vo,bVo,vVo,PF,zue,FVo,TVo,dX,MVo,EVo,CVo,BF,Que,wVo,AVo,cX,LVo,yVo,xVo,IF,Wue,$Vo,kVo,mX,SVo,RVo,PVo,NF,Hue,BVo,IVo,fX,NVo,qVo,jVo,qF,Uue,DVo,GVo,gX,OVo,VVo,XVo,jF,Jue,zVo,QVo,hX,WVo,HVo,UVo,DF,Yue,JVo,YVo,uX,KVo,ZVo,eXo,GF,Kue,oXo,rXo,pX,tXo,aXo,nXo,OF,Zue,sXo,lXo,_X,iXo,dXo,cXo,VF,epe,mXo,fXo,bX,gXo,hXo,uXo,XF,ope,pXo,_Xo,vX,bXo,vXo,FXo,zF,rpe,TXo,MXo,FX,EXo,CXo,wXo,QF,tpe,AXo,LXo,TX,yXo,xXo,$Xo,WF,ape,kXo,SXo,MX,RXo,PXo,BXo,HF,npe,IXo,NXo,EX,qXo,jXo,DXo,UF,spe,GXo,OXo,CX,VXo,XXo,zXo,JF,lpe,QXo,WXo,wX,HXo,UXo,JXo,YF,ipe,YXo,KXo,AX,ZXo,ezo,ozo,KF,dpe,rzo,tzo,LX,azo,nzo,szo,ZF,cpe,lzo,izo,yX,dzo,czo,mzo,e1,mpe,fzo,gzo,xX,hzo,uzo,pzo,o1,_zo,fpe,bzo,vzo,gpe,Fzo,Tzo,r1,xOe,td,t1,hpe,Dy,Mzo,upe,Ezo,$Oe,Io,Gy,Czo,ad,wzo,$X,Azo,Lzo,kX,yzo,xzo,$zo,Oy,kzo,ppe,Szo,Rzo,Pzo,ft,Vy,Bzo,_pe,Izo,Nzo,nd,qzo,bpe,jzo,Dzo,SX,Gzo,Ozo,Vzo,a1,Xzo,to,Xy,zzo,vpe,Qzo,Wzo,Da,Hzo,Fpe,Uzo,Jzo,Tpe,Yzo,Kzo,Mpe,Zzo,eQo,oQo,No,n1,Epe,rQo,tQo,RX,aQo,nQo,sQo,s1,Cpe,lQo,iQo,PX,dQo,cQo,mQo,l1,wpe,fQo,gQo,BX,hQo,uQo,pQo,i1,Ape,_Qo,bQo,IX,vQo,FQo,TQo,d1,Lpe,MQo,EQo,NX,CQo,wQo,AQo,c1,ype,LQo,yQo,qX,xQo,$Qo,kQo,m1,SQo,xpe,RQo,PQo,$pe,BQo,IQo,f1,kOe,sd,g1,kpe,zy,NQo,Spe,qQo,SOe,qo,Qy,jQo,ld,DQo,jX,GQo,OQo,DX,VQo,XQo,zQo,Wy,QQo,Rpe,WQo,HQo,UQo,gt,Hy,JQo,Ppe,YQo,KQo,id,ZQo,Bpe,eWo,oWo,GX,rWo,tWo,aWo,h1,nWo,ao,Uy,sWo,Ipe,lWo,iWo,Ga,dWo,Npe,cWo,mWo,qpe,fWo,gWo,jpe,hWo,uWo,pWo,H,u1,Dpe,_Wo,bWo,OX,vWo,FWo,TWo,p1,Gpe,MWo,EWo,VX,CWo,wWo,AWo,_1,Ope,LWo,yWo,XX,xWo,$Wo,kWo,b1,Vpe,SWo,RWo,zX,PWo,BWo,IWo,v1,Xpe,NWo,qWo,QX,jWo,DWo,GWo,F1,zpe,OWo,VWo,WX,XWo,zWo,QWo,T1,Qpe,WWo,HWo,HX,UWo,JWo,YWo,M1,Wpe,KWo,ZWo,UX,eHo,oHo,rHo,E1,Hpe,tHo,aHo,JX,nHo,sHo,lHo,C1,Upe,iHo,dHo,YX,cHo,mHo,fHo,w1,Jpe,gHo,hHo,KX,uHo,pHo,_Ho,A1,Ype,bHo,vHo,ZX,FHo,THo,MHo,L1,Kpe,EHo,CHo,ez,wHo,AHo,LHo,y1,Zpe,yHo,xHo,oz,$Ho,kHo,SHo,x1,e_e,RHo,PHo,rz,BHo,IHo,NHo,$1,o_e,qHo,jHo,tz,DHo,GHo,OHo,k1,r_e,VHo,XHo,az,zHo,QHo,WHo,S1,t_e,HHo,UHo,nz,JHo,YHo,KHo,R1,a_e,ZHo,eUo,sz,oUo,rUo,tUo,P1,n_e,aUo,nUo,lz,sUo,lUo,iUo,B1,s_e,dUo,cUo,iz,mUo,fUo,gUo,I1,l_e,hUo,uUo,dz,pUo,_Uo,bUo,N1,i_e,vUo,FUo,cz,TUo,MUo,EUo,q1,d_e,CUo,wUo,mz,AUo,LUo,yUo,j1,c_e,xUo,$Uo,fz,kUo,SUo,RUo,D1,m_e,PUo,BUo,gz,IUo,NUo,qUo,G1,f_e,jUo,DUo,hz,GUo,OUo,VUo,O1,g_e,XUo,zUo,uz,QUo,WUo,HUo,V1,h_e,UUo,JUo,pz,YUo,KUo,ZUo,X1,u_e,eJo,oJo,_z,rJo,tJo,aJo,z1,p_e,nJo,sJo,bz,lJo,iJo,dJo,Q1,__e,cJo,mJo,vz,fJo,gJo,hJo,W1,b_e,uJo,pJo,Fz,_Jo,bJo,vJo,H1,v_e,FJo,TJo,Tz,MJo,EJo,CJo,U1,F_e,wJo,AJo,Mz,LJo,yJo,xJo,J1,T_e,$Jo,kJo,Ez,SJo,RJo,PJo,Y1,BJo,M_e,IJo,NJo,E_e,qJo,jJo,K1,ROe,dd,Z1,C_e,Jy,DJo,w_e,GJo,POe,jo,Yy,OJo,cd,VJo,Cz,XJo,zJo,wz,QJo,WJo,HJo,Ky,UJo,A_e,JJo,YJo,KJo,ht,Zy,ZJo,L_e,eYo,oYo,md,rYo,y_e,tYo,aYo,Az,nYo,sYo,lYo,eT,iYo,no,e8,dYo,x_e,cYo,mYo,Oa,fYo,$_e,gYo,hYo,k_e,uYo,pYo,S_e,_Yo,bYo,vYo,V,oT,R_e,FYo,TYo,Lz,MYo,EYo,CYo,rT,P_e,wYo,AYo,yz,LYo,yYo,xYo,tT,B_e,$Yo,kYo,xz,SYo,RYo,PYo,aT,I_e,BYo,IYo,$z,NYo,qYo,jYo,nT,N_e,DYo,GYo,kz,OYo,VYo,XYo,sT,q_e,zYo,QYo,Sz,WYo,HYo,UYo,lT,j_e,JYo,YYo,Rz,KYo,ZYo,eKo,iT,D_e,oKo,rKo,Pz,tKo,aKo,nKo,dT,G_e,sKo,lKo,Bz,iKo,dKo,cKo,cT,O_e,mKo,fKo,Iz,gKo,hKo,uKo,mT,V_e,pKo,_Ko,Nz,bKo,vKo,FKo,fT,X_e,TKo,MKo,qz,EKo,CKo,wKo,gT,z_e,AKo,LKo,jz,yKo,xKo,$Ko,hT,Q_e,kKo,SKo,Dz,RKo,PKo,BKo,uT,W_e,IKo,NKo,Gz,qKo,jKo,DKo,pT,H_e,GKo,OKo,Oz,VKo,XKo,zKo,_T,U_e,QKo,WKo,Vz,HKo,UKo,JKo,bT,J_e,YKo,KKo,Xz,ZKo,eZo,oZo,vT,Y_e,rZo,tZo,zz,aZo,nZo,sZo,FT,K_e,lZo,iZo,Qz,dZo,cZo,mZo,TT,Z_e,fZo,gZo,Wz,hZo,uZo,pZo,MT,e2e,_Zo,bZo,Hz,vZo,FZo,TZo,ET,o2e,MZo,EZo,Uz,CZo,wZo,AZo,CT,r2e,LZo,yZo,Jz,xZo,$Zo,kZo,wT,t2e,SZo,RZo,Yz,PZo,BZo,IZo,AT,a2e,NZo,qZo,Kz,jZo,DZo,GZo,LT,n2e,OZo,VZo,Zz,XZo,zZo,QZo,yT,s2e,WZo,HZo,eQ,UZo,JZo,YZo,xT,l2e,KZo,ZZo,oQ,eer,oer,rer,$T,i2e,ter,aer,rQ,ner,ser,ler,kT,d2e,ier,der,tQ,cer,mer,fer,ST,c2e,ger,her,aQ,uer,per,_er,RT,m2e,ber,ver,nQ,Fer,Ter,Mer,PT,f2e,Eer,Cer,sQ,wer,Aer,Ler,BT,g2e,yer,xer,lQ,$er,ker,Ser,IT,h2e,Rer,Per,iQ,Ber,Ier,Ner,NT,u2e,qer,jer,dQ,Der,Ger,Oer,qT,p2e,Ver,Xer,cQ,zer,Qer,Wer,jT,_2e,Her,Uer,mQ,Jer,Yer,Ker,DT,b2e,Zer,eor,fQ,oor,ror,tor,GT,v2e,aor,nor,gQ,sor,lor,ior,OT,dor,F2e,cor,mor,T2e,gor,hor,VT,BOe,fd,XT,M2e,o8,uor,E2e,por,IOe,Do,r8,_or,gd,bor,hQ,vor,For,uQ,Tor,Mor,Eor,t8,Cor,C2e,wor,Aor,Lor,ut,a8,yor,w2e,xor,$or,hd,kor,A2e,Sor,Ror,pQ,Por,Bor,Ior,zT,Nor,so,n8,qor,L2e,jor,Dor,Va,Gor,y2e,Oor,Vor,x2e,Xor,zor,$2e,Qor,Wor,Hor,k2e,QT,S2e,Uor,Jor,_Q,Yor,Kor,Zor,WT,err,R2e,orr,rrr,P2e,trr,arr,HT,NOe,ud,UT,B2e,s8,nrr,I2e,srr,qOe,Go,l8,lrr,pd,irr,bQ,drr,crr,vQ,mrr,frr,grr,i8,hrr,N2e,urr,prr,_rr,pt,d8,brr,q2e,vrr,Frr,_d,Trr,j2e,Mrr,Err,FQ,Crr,wrr,Arr,JT,Lrr,lo,c8,yrr,D2e,xrr,$rr,Xa,krr,G2e,Srr,Rrr,O2e,Prr,Brr,V2e,Irr,Nrr,qrr,Fe,YT,X2e,jrr,Drr,TQ,Grr,Orr,Vrr,KT,z2e,Xrr,zrr,MQ,Qrr,Wrr,Hrr,ZT,Q2e,Urr,Jrr,EQ,Yrr,Krr,Zrr,eM,W2e,etr,otr,CQ,rtr,ttr,atr,zs,H2e,ntr,str,wQ,ltr,itr,AQ,dtr,ctr,mtr,oM,U2e,ftr,gtr,LQ,htr,utr,ptr,Qs,J2e,_tr,btr,yQ,vtr,Ftr,xQ,Ttr,Mtr,Etr,_t,Y2e,Ctr,wtr,$Q,Atr,Ltr,kQ,ytr,xtr,SQ,$tr,ktr,Str,rM,K2e,Rtr,Ptr,RQ,Btr,Itr,Ntr,tM,Z2e,qtr,jtr,PQ,Dtr,Gtr,Otr,aM,ebe,Vtr,Xtr,BQ,ztr,Qtr,Wtr,nM,obe,Htr,Utr,IQ,Jtr,Ytr,Ktr,sM,rbe,Ztr,ear,NQ,oar,rar,tar,lM,tbe,aar,nar,qQ,sar,lar,iar,iM,abe,dar,car,jQ,mar,far,gar,dM,har,nbe,uar,par,sbe,_ar,bar,cM,jOe,bd,mM,lbe,m8,Far,ibe,Tar,DOe,Oo,f8,Mar,vd,Ear,DQ,Car,war,GQ,Aar,Lar,yar,g8,xar,dbe,$ar,kar,Sar,bt,h8,Rar,cbe,Par,Bar,Fd,Iar,mbe,Nar,qar,OQ,jar,Dar,Gar,fM,Oar,io,u8,Var,fbe,Xar,zar,za,Qar,gbe,War,Har,hbe,Uar,Jar,ube,Yar,Kar,Zar,pbe,gM,_be,enr,onr,VQ,rnr,tnr,anr,hM,nnr,bbe,snr,lnr,vbe,inr,dnr,uM,GOe,Td,pM,Fbe,p8,cnr,Tbe,mnr,OOe,Vo,_8,fnr,Md,gnr,XQ,hnr,unr,zQ,pnr,_nr,bnr,b8,vnr,Mbe,Fnr,Tnr,Mnr,vt,v8,Enr,Ebe,Cnr,wnr,Ed,Anr,Cbe,Lnr,ynr,QQ,xnr,$nr,knr,_M,Snr,co,F8,Rnr,wbe,Pnr,Bnr,Qa,Inr,Abe,Nnr,qnr,Lbe,jnr,Dnr,ybe,Gnr,Onr,Vnr,xbe,bM,$be,Xnr,znr,WQ,Qnr,Wnr,Hnr,vM,Unr,kbe,Jnr,Ynr,Sbe,Knr,Znr,FM,VOe,Cd,TM,Rbe,T8,esr,Pbe,osr,XOe,Xo,M8,rsr,wd,tsr,HQ,asr,nsr,UQ,ssr,lsr,isr,E8,dsr,Bbe,csr,msr,fsr,Ft,C8,gsr,Ibe,hsr,usr,Ad,psr,Nbe,_sr,bsr,JQ,vsr,Fsr,Tsr,MM,Msr,mo,w8,Esr,qbe,Csr,wsr,Wa,Asr,jbe,Lsr,ysr,Dbe,xsr,$sr,Gbe,ksr,Ssr,Rsr,Pe,EM,Obe,Psr,Bsr,YQ,Isr,Nsr,qsr,CM,Vbe,jsr,Dsr,KQ,Gsr,Osr,Vsr,wM,Xbe,Xsr,zsr,ZQ,Qsr,Wsr,Hsr,AM,zbe,Usr,Jsr,eW,Ysr,Ksr,Zsr,LM,Qbe,elr,olr,oW,rlr,tlr,alr,yM,Wbe,nlr,slr,rW,llr,ilr,dlr,xM,Hbe,clr,mlr,tW,flr,glr,hlr,$M,Ube,ulr,plr,aW,_lr,blr,vlr,kM,Jbe,Flr,Tlr,nW,Mlr,Elr,Clr,SM,wlr,Ybe,Alr,Llr,Kbe,ylr,xlr,RM,zOe,Ld,PM,Zbe,A8,$lr,eve,klr,QOe,zo,L8,Slr,yd,Rlr,sW,Plr,Blr,lW,Ilr,Nlr,qlr,y8,jlr,ove,Dlr,Glr,Olr,Tt,x8,Vlr,rve,Xlr,zlr,xd,Qlr,tve,Wlr,Hlr,iW,Ulr,Jlr,Ylr,BM,Klr,fo,$8,Zlr,ave,eir,oir,Ha,rir,nve,tir,air,sve,nir,sir,lve,lir,iir,dir,et,IM,ive,cir,mir,dW,fir,gir,hir,NM,dve,uir,pir,cW,_ir,bir,vir,qM,cve,Fir,Tir,mW,Mir,Eir,Cir,jM,mve,wir,Air,fW,Lir,yir,xir,DM,fve,$ir,kir,gW,Sir,Rir,Pir,GM,Bir,gve,Iir,Nir,hve,qir,jir,OM,WOe,$d,VM,uve,k8,Dir,pve,Gir,HOe,Qo,S8,Oir,kd,Vir,hW,Xir,zir,uW,Qir,Wir,Hir,R8,Uir,_ve,Jir,Yir,Kir,Mt,P8,Zir,bve,edr,odr,Sd,rdr,vve,tdr,adr,pW,ndr,sdr,ldr,XM,idr,go,B8,ddr,Fve,cdr,mdr,Ua,fdr,Tve,gdr,hdr,Mve,udr,pdr,Eve,_dr,bdr,vdr,Le,zM,Cve,Fdr,Tdr,_W,Mdr,Edr,Cdr,QM,wve,wdr,Adr,bW,Ldr,ydr,xdr,WM,Ave,$dr,kdr,vW,Sdr,Rdr,Pdr,HM,Lve,Bdr,Idr,FW,Ndr,qdr,jdr,UM,yve,Ddr,Gdr,TW,Odr,Vdr,Xdr,JM,xve,zdr,Qdr,MW,Wdr,Hdr,Udr,YM,$ve,Jdr,Ydr,EW,Kdr,Zdr,ecr,KM,kve,ocr,rcr,CW,tcr,acr,ncr,ZM,Sve,scr,lcr,wW,icr,dcr,ccr,eE,Rve,mcr,fcr,AW,gcr,hcr,ucr,oE,pcr,Pve,_cr,bcr,Bve,vcr,Fcr,rE,UOe,Rd,tE,Ive,I8,Tcr,Nve,Mcr,JOe,Wo,N8,Ecr,Pd,Ccr,LW,wcr,Acr,yW,Lcr,ycr,xcr,q8,$cr,qve,kcr,Scr,Rcr,Et,j8,Pcr,jve,Bcr,Icr,Bd,Ncr,Dve,qcr,jcr,xW,Dcr,Gcr,Ocr,aE,Vcr,ho,D8,Xcr,Gve,zcr,Qcr,Ja,Wcr,Ove,Hcr,Ucr,Vve,Jcr,Ycr,Xve,Kcr,Zcr,emr,G8,nE,zve,omr,rmr,$W,tmr,amr,nmr,sE,Qve,smr,lmr,kW,imr,dmr,cmr,lE,mmr,Wve,fmr,gmr,Hve,hmr,umr,iE,YOe,Id,dE,Uve,O8,pmr,Jve,_mr,KOe,Ho,V8,bmr,Nd,vmr,SW,Fmr,Tmr,RW,Mmr,Emr,Cmr,X8,wmr,Yve,Amr,Lmr,ymr,Ct,z8,xmr,Kve,$mr,kmr,qd,Smr,Zve,Rmr,Pmr,PW,Bmr,Imr,Nmr,cE,qmr,uo,Q8,jmr,eFe,Dmr,Gmr,Ya,Omr,oFe,Vmr,Xmr,rFe,zmr,Qmr,tFe,Wmr,Hmr,Umr,ot,mE,aFe,Jmr,Ymr,BW,Kmr,Zmr,efr,fE,nFe,ofr,rfr,IW,tfr,afr,nfr,gE,sFe,sfr,lfr,NW,ifr,dfr,cfr,hE,lFe,mfr,ffr,qW,gfr,hfr,ufr,uE,iFe,pfr,_fr,jW,bfr,vfr,Ffr,pE,Tfr,dFe,Mfr,Efr,cFe,Cfr,wfr,_E,ZOe,jd,bE,mFe,W8,Afr,fFe,Lfr,eVe,Uo,H8,yfr,Dd,xfr,DW,$fr,kfr,GW,Sfr,Rfr,Pfr,U8,Bfr,gFe,Ifr,Nfr,qfr,wt,J8,jfr,hFe,Dfr,Gfr,Gd,Ofr,uFe,Vfr,Xfr,OW,zfr,Qfr,Wfr,vE,Hfr,po,Y8,Ufr,pFe,Jfr,Yfr,Ka,Kfr,_Fe,Zfr,egr,bFe,ogr,rgr,vFe,tgr,agr,ngr,Od,FE,FFe,sgr,lgr,VW,igr,dgr,cgr,TE,TFe,mgr,fgr,XW,ggr,hgr,ugr,ME,MFe,pgr,_gr,zW,bgr,vgr,Fgr,EE,Tgr,EFe,Mgr,Egr,CFe,Cgr,wgr,CE,oVe,Vd,wE,wFe,K8,Agr,AFe,Lgr,rVe,Jo,Z8,ygr,Xd,xgr,QW,$gr,kgr,WW,Sgr,Rgr,Pgr,e9,Bgr,LFe,Igr,Ngr,qgr,At,o9,jgr,yFe,Dgr,Ggr,zd,Ogr,xFe,Vgr,Xgr,HW,zgr,Qgr,Wgr,AE,Hgr,_o,r9,Ugr,$Fe,Jgr,Ygr,Za,Kgr,kFe,Zgr,ehr,SFe,ohr,rhr,RFe,thr,ahr,nhr,t9,LE,PFe,shr,lhr,UW,ihr,dhr,chr,yE,BFe,mhr,fhr,JW,ghr,hhr,uhr,xE,phr,IFe,_hr,bhr,NFe,vhr,Fhr,$E,tVe,Qd,kE,qFe,a9,Thr,jFe,Mhr,aVe,Yo,n9,Ehr,Wd,Chr,YW,whr,Ahr,KW,Lhr,yhr,xhr,s9,$hr,DFe,khr,Shr,Rhr,Lt,l9,Phr,GFe,Bhr,Ihr,Hd,Nhr,OFe,qhr,jhr,ZW,Dhr,Ghr,Ohr,SE,Vhr,bo,i9,Xhr,VFe,zhr,Qhr,en,Whr,XFe,Hhr,Uhr,zFe,Jhr,Yhr,QFe,Khr,Zhr,eur,WFe,RE,HFe,our,rur,eH,tur,aur,nur,PE,sur,UFe,lur,iur,JFe,dur,cur,BE,nVe,Ud,IE,YFe,d9,mur,KFe,fur,sVe,Ko,c9,gur,Jd,hur,oH,uur,pur,rH,_ur,bur,vur,m9,Fur,ZFe,Tur,Mur,Eur,yt,f9,Cur,e1e,wur,Aur,Yd,Lur,o1e,yur,xur,tH,$ur,kur,Sur,NE,Rur,vo,g9,Pur,r1e,Bur,Iur,on,Nur,t1e,qur,jur,a1e,Dur,Gur,n1e,Our,Vur,Xur,rn,qE,s1e,zur,Qur,aH,Wur,Hur,Uur,jE,l1e,Jur,Yur,nH,Kur,Zur,epr,DE,i1e,opr,rpr,sH,tpr,apr,npr,GE,d1e,spr,lpr,lH,ipr,dpr,cpr,OE,mpr,c1e,fpr,gpr,m1e,hpr,upr,VE,lVe,Kd,XE,f1e,h9,ppr,g1e,_pr,iVe,Zo,u9,bpr,Zd,vpr,iH,Fpr,Tpr,dH,Mpr,Epr,Cpr,p9,wpr,h1e,Apr,Lpr,ypr,xt,_9,xpr,u1e,$pr,kpr,ec,Spr,p1e,Rpr,Ppr,cH,Bpr,Ipr,Npr,zE,qpr,Fo,b9,jpr,_1e,Dpr,Gpr,tn,Opr,b1e,Vpr,Xpr,v1e,zpr,Qpr,F1e,Wpr,Hpr,Upr,T1e,QE,M1e,Jpr,Ypr,mH,Kpr,Zpr,e_r,WE,o_r,E1e,r_r,t_r,C1e,a_r,n_r,HE,dVe,oc,UE,w1e,v9,s_r,A1e,l_r,cVe,er,F9,i_r,rc,d_r,fH,c_r,m_r,gH,f_r,g_r,h_r,T9,u_r,L1e,p_r,__r,b_r,$t,M9,v_r,y1e,F_r,T_r,tc,M_r,x1e,E_r,C_r,hH,w_r,A_r,L_r,JE,y_r,yr,E9,x_r,$1e,$_r,k_r,an,S_r,k1e,R_r,P_r,S1e,B_r,I_r,R1e,N_r,q_r,j_r,j,YE,P1e,D_r,G_r,uH,O_r,V_r,X_r,KE,B1e,z_r,Q_r,pH,W_r,H_r,U_r,ZE,I1e,J_r,Y_r,_H,K_r,Z_r,e2r,e4,N1e,o2r,r2r,bH,t2r,a2r,n2r,o4,q1e,s2r,l2r,vH,i2r,d2r,c2r,r4,j1e,m2r,f2r,FH,g2r,h2r,u2r,t4,D1e,p2r,_2r,TH,b2r,v2r,F2r,a4,G1e,T2r,M2r,MH,E2r,C2r,w2r,n4,O1e,A2r,L2r,EH,y2r,x2r,$2r,s4,V1e,k2r,S2r,CH,R2r,P2r,B2r,l4,X1e,I2r,N2r,wH,q2r,j2r,D2r,i4,z1e,G2r,O2r,AH,V2r,X2r,z2r,d4,Q1e,Q2r,W2r,LH,H2r,U2r,J2r,c4,W1e,Y2r,K2r,yH,Z2r,ebr,obr,m4,H1e,rbr,tbr,xH,abr,nbr,sbr,f4,U1e,lbr,ibr,$H,dbr,cbr,mbr,g4,J1e,fbr,gbr,kH,hbr,ubr,pbr,Ws,Y1e,_br,bbr,SH,vbr,Fbr,RH,Tbr,Mbr,Ebr,h4,K1e,Cbr,wbr,PH,Abr,Lbr,ybr,u4,Z1e,xbr,$br,BH,kbr,Sbr,Rbr,p4,eTe,Pbr,Bbr,IH,Ibr,Nbr,qbr,_4,oTe,jbr,Dbr,NH,Gbr,Obr,Vbr,b4,rTe,Xbr,zbr,qH,Qbr,Wbr,Hbr,v4,tTe,Ubr,Jbr,jH,Ybr,Kbr,Zbr,F4,aTe,evr,ovr,DH,rvr,tvr,avr,T4,nTe,nvr,svr,GH,lvr,ivr,dvr,M4,sTe,cvr,mvr,OH,fvr,gvr,hvr,E4,lTe,uvr,pvr,VH,_vr,bvr,vvr,C4,iTe,Fvr,Tvr,XH,Mvr,Evr,Cvr,w4,dTe,wvr,Avr,zH,Lvr,yvr,xvr,A4,cTe,$vr,kvr,QH,Svr,Rvr,Pvr,L4,mTe,Bvr,Ivr,WH,Nvr,qvr,jvr,y4,fTe,Dvr,Gvr,HH,Ovr,Vvr,Xvr,x4,gTe,zvr,Qvr,UH,Wvr,Hvr,Uvr,$4,hTe,Jvr,Yvr,JH,Kvr,Zvr,eFr,k4,uTe,oFr,rFr,YH,tFr,aFr,nFr,S4,pTe,sFr,lFr,KH,iFr,dFr,cFr,R4,_Te,mFr,fFr,ZH,gFr,hFr,uFr,P4,bTe,pFr,_Fr,eU,bFr,vFr,FFr,B4,vTe,TFr,MFr,oU,EFr,CFr,wFr,I4,FTe,AFr,LFr,rU,yFr,xFr,$Fr,N4,TTe,kFr,SFr,tU,RFr,PFr,BFr,q4,MTe,IFr,NFr,aU,qFr,jFr,DFr,j4,ETe,GFr,OFr,nU,VFr,XFr,zFr,D4,CTe,QFr,WFr,sU,HFr,UFr,JFr,G4,wTe,YFr,KFr,lU,ZFr,e1r,o1r,O4,ATe,r1r,t1r,iU,a1r,n1r,s1r,V4,mVe,ac,X4,LTe,C9,l1r,yTe,i1r,fVe,or,w9,d1r,nc,c1r,dU,m1r,f1r,cU,g1r,h1r,u1r,A9,p1r,xTe,_1r,b1r,v1r,kt,L9,F1r,$Te,T1r,M1r,sc,E1r,kTe,C1r,w1r,mU,A1r,L1r,y1r,z4,x1r,xr,y9,$1r,STe,k1r,S1r,nn,R1r,RTe,P1r,B1r,PTe,I1r,N1r,BTe,q1r,j1r,D1r,se,Q4,ITe,G1r,O1r,fU,V1r,X1r,z1r,W4,NTe,Q1r,W1r,gU,H1r,U1r,J1r,H4,qTe,Y1r,K1r,hU,Z1r,eTr,oTr,U4,jTe,rTr,tTr,uU,aTr,nTr,sTr,J4,DTe,lTr,iTr,pU,dTr,cTr,mTr,Y4,GTe,fTr,gTr,_U,hTr,uTr,pTr,K4,OTe,_Tr,bTr,bU,vTr,FTr,TTr,Z4,VTe,MTr,ETr,vU,CTr,wTr,ATr,eC,XTe,LTr,yTr,FU,xTr,$Tr,kTr,oC,zTe,STr,RTr,TU,PTr,BTr,ITr,rC,QTe,NTr,qTr,MU,jTr,DTr,GTr,tC,WTe,OTr,VTr,EU,XTr,zTr,QTr,aC,HTe,WTr,HTr,CU,UTr,JTr,YTr,nC,UTe,KTr,ZTr,wU,eMr,oMr,rMr,sC,JTe,tMr,aMr,AU,nMr,sMr,lMr,lC,YTe,iMr,dMr,LU,cMr,mMr,fMr,iC,KTe,gMr,hMr,yU,uMr,pMr,_Mr,dC,ZTe,bMr,vMr,xU,FMr,TMr,MMr,cC,eMe,EMr,CMr,$U,wMr,AMr,LMr,mC,oMe,yMr,xMr,kU,$Mr,kMr,SMr,fC,rMe,RMr,PMr,SU,BMr,IMr,NMr,gC,tMe,qMr,jMr,RU,DMr,GMr,OMr,hC,aMe,VMr,XMr,PU,zMr,QMr,WMr,uC,gVe,lc,pC,nMe,x9,HMr,sMe,UMr,hVe,rr,$9,JMr,ic,YMr,BU,KMr,ZMr,IU,eEr,oEr,rEr,k9,tEr,lMe,aEr,nEr,sEr,St,S9,lEr,iMe,iEr,dEr,dc,cEr,dMe,mEr,fEr,NU,gEr,hEr,uEr,_C,pEr,$r,R9,_Er,cMe,bEr,vEr,sn,FEr,mMe,TEr,MEr,fMe,EEr,CEr,gMe,wEr,AEr,LEr,Me,bC,hMe,yEr,xEr,qU,$Er,kEr,SEr,vC,uMe,REr,PEr,jU,BEr,IEr,NEr,FC,pMe,qEr,jEr,DU,DEr,GEr,OEr,TC,_Me,VEr,XEr,GU,zEr,QEr,WEr,MC,bMe,HEr,UEr,OU,JEr,YEr,KEr,EC,vMe,ZEr,e4r,VU,o4r,r4r,t4r,CC,FMe,a4r,n4r,XU,s4r,l4r,i4r,wC,TMe,d4r,c4r,zU,m4r,f4r,g4r,AC,MMe,h4r,u4r,QU,p4r,_4r,b4r,LC,EMe,v4r,F4r,WU,T4r,M4r,E4r,yC,CMe,C4r,w4r,HU,A4r,L4r,y4r,xC,wMe,x4r,$4r,UU,k4r,S4r,R4r,$C,AMe,P4r,B4r,JU,I4r,N4r,q4r,kC,uVe,cc,SC,LMe,P9,j4r,yMe,D4r,pVe,tr,B9,G4r,mc,O4r,YU,V4r,X4r,KU,z4r,Q4r,W4r,I9,H4r,xMe,U4r,J4r,Y4r,Rt,N9,K4r,$Me,Z4r,eCr,fc,oCr,kMe,rCr,tCr,ZU,aCr,nCr,sCr,RC,lCr,kr,q9,iCr,SMe,dCr,cCr,ln,mCr,RMe,fCr,gCr,PMe,hCr,uCr,BMe,pCr,_Cr,bCr,dn,PC,IMe,vCr,FCr,eJ,TCr,MCr,ECr,BC,NMe,CCr,wCr,oJ,ACr,LCr,yCr,IC,qMe,xCr,$Cr,rJ,kCr,SCr,RCr,NC,jMe,PCr,BCr,tJ,ICr,NCr,qCr,qC,_Ve,gc,jC,DMe,j9,jCr,GMe,DCr,bVe,ar,D9,GCr,hc,OCr,aJ,VCr,XCr,nJ,zCr,QCr,WCr,G9,HCr,OMe,UCr,JCr,YCr,Pt,O9,KCr,VMe,ZCr,e5r,uc,o5r,XMe,r5r,t5r,sJ,a5r,n5r,s5r,DC,l5r,Sr,V9,i5r,zMe,d5r,c5r,cn,m5r,QMe,f5r,g5r,WMe,h5r,u5r,HMe,p5r,_5r,b5r,ie,GC,UMe,v5r,F5r,lJ,T5r,M5r,E5r,OC,JMe,C5r,w5r,iJ,A5r,L5r,y5r,VC,YMe,x5r,$5r,dJ,k5r,S5r,R5r,XC,KMe,P5r,B5r,cJ,I5r,N5r,q5r,zC,ZMe,j5r,D5r,mJ,G5r,O5r,V5r,QC,eEe,X5r,z5r,fJ,Q5r,W5r,H5r,WC,oEe,U5r,J5r,gJ,Y5r,K5r,Z5r,HC,rEe,e3r,o3r,hJ,r3r,t3r,a3r,UC,tEe,n3r,s3r,uJ,l3r,i3r,d3r,JC,aEe,c3r,m3r,pJ,f3r,g3r,h3r,YC,nEe,u3r,p3r,_J,_3r,b3r,v3r,KC,sEe,F3r,T3r,bJ,M3r,E3r,C3r,ZC,lEe,w3r,A3r,vJ,L3r,y3r,x3r,e5,iEe,$3r,k3r,FJ,S3r,R3r,P3r,o5,dEe,B3r,I3r,TJ,N3r,q3r,j3r,r5,cEe,D3r,G3r,MJ,O3r,V3r,X3r,t5,mEe,z3r,Q3r,EJ,W3r,H3r,U3r,a5,fEe,J3r,Y3r,CJ,K3r,Z3r,e0r,n5,gEe,o0r,r0r,wJ,t0r,a0r,n0r,s5,hEe,s0r,l0r,AJ,i0r,d0r,c0r,l5,vVe,pc,i5,uEe,X9,m0r,pEe,f0r,FVe,nr,z9,g0r,_c,h0r,LJ,u0r,p0r,yJ,_0r,b0r,v0r,Q9,F0r,_Ee,T0r,M0r,E0r,Bt,W9,C0r,bEe,w0r,A0r,bc,L0r,vEe,y0r,x0r,xJ,$0r,k0r,S0r,d5,R0r,Rr,H9,P0r,FEe,B0r,I0r,mn,N0r,TEe,q0r,j0r,MEe,D0r,G0r,EEe,O0r,V0r,X0r,ye,c5,CEe,z0r,Q0r,$J,W0r,H0r,U0r,m5,wEe,J0r,Y0r,kJ,K0r,Z0r,ewr,f5,AEe,owr,rwr,SJ,twr,awr,nwr,g5,LEe,swr,lwr,RJ,iwr,dwr,cwr,h5,yEe,mwr,fwr,PJ,gwr,hwr,uwr,u5,xEe,pwr,_wr,BJ,bwr,vwr,Fwr,p5,$Ee,Twr,Mwr,IJ,Ewr,Cwr,wwr,_5,kEe,Awr,Lwr,NJ,ywr,xwr,$wr,b5,SEe,kwr,Swr,qJ,Rwr,Pwr,Bwr,v5,REe,Iwr,Nwr,jJ,qwr,jwr,Dwr,F5,TVe,vc,T5,PEe,U9,Gwr,BEe,Owr,MVe,sr,J9,Vwr,Fc,Xwr,DJ,zwr,Qwr,GJ,Wwr,Hwr,Uwr,Y9,Jwr,IEe,Ywr,Kwr,Zwr,It,K9,eAr,NEe,oAr,rAr,Tc,tAr,qEe,aAr,nAr,OJ,sAr,lAr,iAr,M5,dAr,Pr,Z9,cAr,jEe,mAr,fAr,fn,gAr,DEe,hAr,uAr,GEe,pAr,_Ar,OEe,bAr,vAr,FAr,te,E5,VEe,TAr,MAr,VJ,EAr,CAr,wAr,C5,XEe,AAr,LAr,XJ,yAr,xAr,$Ar,w5,zEe,kAr,SAr,zJ,RAr,PAr,BAr,A5,QEe,IAr,NAr,QJ,qAr,jAr,DAr,L5,WEe,GAr,OAr,WJ,VAr,XAr,zAr,y5,HEe,QAr,WAr,HJ,HAr,UAr,JAr,x5,UEe,YAr,KAr,UJ,ZAr,e6r,o6r,$5,JEe,r6r,t6r,JJ,a6r,n6r,s6r,k5,YEe,l6r,i6r,YJ,d6r,c6r,m6r,S5,KEe,f6r,g6r,KJ,h6r,u6r,p6r,R5,ZEe,_6r,b6r,ZJ,v6r,F6r,T6r,P5,e4e,M6r,E6r,eY,C6r,w6r,A6r,B5,o4e,L6r,y6r,oY,x6r,$6r,k6r,I5,r4e,S6r,R6r,rY,P6r,B6r,I6r,N5,t4e,N6r,q6r,tY,j6r,D6r,G6r,q5,a4e,O6r,V6r,aY,X6r,z6r,Q6r,j5,n4e,W6r,H6r,nY,U6r,J6r,Y6r,D5,s4e,K6r,Z6r,sY,eLr,oLr,rLr,G5,l4e,tLr,aLr,lY,nLr,sLr,lLr,O5,i4e,iLr,dLr,iY,cLr,mLr,fLr,V5,d4e,gLr,hLr,dY,uLr,pLr,_Lr,X5,c4e,bLr,vLr,cY,FLr,TLr,MLr,z5,m4e,ELr,CLr,mY,wLr,ALr,LLr,Q5,f4e,yLr,xLr,fY,$Lr,kLr,SLr,W5,g4e,RLr,PLr,gY,BLr,ILr,NLr,H5,h4e,qLr,jLr,hY,DLr,GLr,OLr,U5,EVe,Mc,J5,u4e,ex,VLr,p4e,XLr,CVe,lr,ox,zLr,Ec,QLr,uY,WLr,HLr,pY,ULr,JLr,YLr,rx,KLr,_4e,ZLr,e7r,o7r,Nt,tx,r7r,b4e,t7r,a7r,Cc,n7r,v4e,s7r,l7r,_Y,i7r,d7r,c7r,Y5,m7r,Br,ax,f7r,F4e,g7r,h7r,gn,u7r,T4e,p7r,_7r,M4e,b7r,v7r,E4e,F7r,T7r,M7r,pe,K5,C4e,E7r,C7r,bY,w7r,A7r,L7r,Z5,w4e,y7r,x7r,vY,$7r,k7r,S7r,e3,A4e,R7r,P7r,FY,B7r,I7r,N7r,o3,L4e,q7r,j7r,TY,D7r,G7r,O7r,r3,y4e,V7r,X7r,MY,z7r,Q7r,W7r,t3,x4e,H7r,U7r,EY,J7r,Y7r,K7r,a3,$4e,Z7r,eyr,CY,oyr,ryr,tyr,n3,k4e,ayr,nyr,wY,syr,lyr,iyr,s3,S4e,dyr,cyr,AY,myr,fyr,gyr,l3,R4e,hyr,uyr,LY,pyr,_yr,byr,i3,P4e,vyr,Fyr,yY,Tyr,Myr,Eyr,d3,B4e,Cyr,wyr,xY,Ayr,Lyr,yyr,c3,I4e,xyr,$yr,$Y,kyr,Syr,Ryr,m3,N4e,Pyr,Byr,kY,Iyr,Nyr,qyr,f3,q4e,jyr,Dyr,SY,Gyr,Oyr,Vyr,g3,j4e,Xyr,zyr,RY,Qyr,Wyr,Hyr,h3,D4e,Uyr,Jyr,PY,Yyr,Kyr,Zyr,u3,wVe,wc,p3,G4e,nx,e8r,O4e,o8r,AVe,ir,sx,r8r,Ac,t8r,BY,a8r,n8r,IY,s8r,l8r,i8r,lx,d8r,V4e,c8r,m8r,f8r,qt,ix,g8r,X4e,h8r,u8r,Lc,p8r,z4e,_8r,b8r,NY,v8r,F8r,T8r,_3,M8r,Ir,dx,E8r,Q4e,C8r,w8r,hn,A8r,W4e,L8r,y8r,H4e,x8r,$8r,U4e,k8r,S8r,R8r,cx,b3,J4e,P8r,B8r,qY,I8r,N8r,q8r,v3,Y4e,j8r,D8r,jY,G8r,O8r,V8r,F3,LVe,yc,T3,K4e,mx,X8r,Z4e,z8r,yVe,dr,fx,Q8r,xc,W8r,DY,H8r,U8r,GY,J8r,Y8r,K8r,gx,Z8r,eCe,e9r,o9r,r9r,jt,hx,t9r,oCe,a9r,n9r,$c,s9r,rCe,l9r,i9r,OY,d9r,c9r,m9r,M3,f9r,Nr,ux,g9r,tCe,h9r,u9r,un,p9r,aCe,_9r,b9r,nCe,v9r,F9r,sCe,T9r,M9r,E9r,lCe,E3,iCe,C9r,w9r,VY,A9r,L9r,y9r,C3,xVe,kc,w3,dCe,px,x9r,cCe,$9r,$Ve,cr,_x,k9r,Sc,S9r,XY,R9r,P9r,zY,B9r,I9r,N9r,bx,q9r,mCe,j9r,D9r,G9r,Dt,vx,O9r,fCe,V9r,X9r,Rc,z9r,gCe,Q9r,W9r,QY,H9r,U9r,J9r,A3,Y9r,qr,Fx,K9r,hCe,Z9r,exr,pn,oxr,uCe,rxr,txr,pCe,axr,nxr,_Ce,sxr,lxr,ixr,de,L3,bCe,dxr,cxr,WY,mxr,fxr,gxr,y3,vCe,hxr,uxr,HY,pxr,_xr,bxr,x3,FCe,vxr,Fxr,UY,Txr,Mxr,Exr,$3,TCe,Cxr,wxr,JY,Axr,Lxr,yxr,k3,MCe,xxr,$xr,YY,kxr,Sxr,Rxr,S3,ECe,Pxr,Bxr,KY,Ixr,Nxr,qxr,R3,CCe,jxr,Dxr,ZY,Gxr,Oxr,Vxr,P3,wCe,Xxr,zxr,eK,Qxr,Wxr,Hxr,B3,ACe,Uxr,Jxr,oK,Yxr,Kxr,Zxr,I3,LCe,e$r,o$r,rK,r$r,t$r,a$r,N3,yCe,n$r,s$r,tK,l$r,i$r,d$r,q3,xCe,c$r,m$r,aK,f$r,g$r,h$r,j3,$Ce,u$r,p$r,nK,_$r,b$r,v$r,D3,kCe,F$r,T$r,sK,M$r,E$r,C$r,G3,SCe,w$r,A$r,lK,L$r,y$r,x$r,O3,RCe,$$r,k$r,iK,S$r,R$r,P$r,V3,PCe,B$r,I$r,dK,N$r,q$r,j$r,X3,BCe,D$r,G$r,cK,O$r,V$r,X$r,z3,ICe,z$r,Q$r,mK,W$r,H$r,U$r,Q3,NCe,J$r,Y$r,fK,K$r,Z$r,ekr,W3,kVe,Pc,H3,qCe,Tx,okr,jCe,rkr,SVe,mr,Mx,tkr,Bc,akr,gK,nkr,skr,hK,lkr,ikr,dkr,Ex,ckr,DCe,mkr,fkr,gkr,Gt,Cx,hkr,GCe,ukr,pkr,Ic,_kr,OCe,bkr,vkr,uK,Fkr,Tkr,Mkr,U3,Ekr,jr,wx,Ckr,VCe,wkr,Akr,_n,Lkr,XCe,ykr,xkr,zCe,$kr,kkr,QCe,Skr,Rkr,Pkr,ce,J3,WCe,Bkr,Ikr,pK,Nkr,qkr,jkr,Y3,HCe,Dkr,Gkr,_K,Okr,Vkr,Xkr,K3,UCe,zkr,Qkr,bK,Wkr,Hkr,Ukr,Z3,JCe,Jkr,Ykr,vK,Kkr,Zkr,eSr,e0,YCe,oSr,rSr,FK,tSr,aSr,nSr,o0,KCe,sSr,lSr,TK,iSr,dSr,cSr,r0,ZCe,mSr,fSr,MK,gSr,hSr,uSr,t0,e5e,pSr,_Sr,EK,bSr,vSr,FSr,a0,o5e,TSr,MSr,CK,ESr,CSr,wSr,n0,r5e,ASr,LSr,wK,ySr,xSr,$Sr,s0,t5e,kSr,SSr,AK,RSr,PSr,BSr,l0,a5e,ISr,NSr,LK,qSr,jSr,DSr,i0,n5e,GSr,OSr,yK,VSr,XSr,zSr,d0,s5e,QSr,WSr,xK,HSr,USr,JSr,c0,l5e,YSr,KSr,$K,ZSr,eRr,oRr,m0,i5e,rRr,tRr,kK,aRr,nRr,sRr,f0,d5e,lRr,iRr,SK,dRr,cRr,mRr,g0,c5e,fRr,gRr,RK,hRr,uRr,pRr,h0,m5e,_Rr,bRr,PK,vRr,FRr,TRr,u0,f5e,MRr,ERr,BK,CRr,wRr,ARr,p0,RVe,Nc,_0,g5e,Ax,LRr,h5e,yRr,PVe,fr,Lx,xRr,qc,$Rr,IK,kRr,SRr,NK,RRr,PRr,BRr,yx,IRr,u5e,NRr,qRr,jRr,Ot,xx,DRr,p5e,GRr,ORr,jc,VRr,_5e,XRr,zRr,qK,QRr,WRr,HRr,b0,URr,Dr,$x,JRr,b5e,YRr,KRr,bn,ZRr,v5e,ePr,oPr,F5e,rPr,tPr,T5e,aPr,nPr,sPr,M5e,v0,E5e,lPr,iPr,jK,dPr,cPr,mPr,F0,BVe,Dc,T0,C5e,kx,fPr,w5e,gPr,IVe,gr,Sx,hPr,Gc,uPr,DK,pPr,_Pr,GK,bPr,vPr,FPr,Rx,TPr,A5e,MPr,EPr,CPr,Vt,Px,wPr,L5e,APr,LPr,Oc,yPr,y5e,xPr,$Pr,OK,kPr,SPr,RPr,M0,PPr,Gr,Bx,BPr,x5e,IPr,NPr,vn,qPr,$5e,jPr,DPr,k5e,GPr,OPr,S5e,VPr,XPr,zPr,R5e,E0,P5e,QPr,WPr,VK,HPr,UPr,JPr,C0,NVe,Vc,w0,B5e,Ix,YPr,I5e,KPr,qVe,hr,Nx,ZPr,Xc,eBr,XK,oBr,rBr,zK,tBr,aBr,nBr,qx,sBr,N5e,lBr,iBr,dBr,Xt,jx,cBr,q5e,mBr,fBr,zc,gBr,j5e,hBr,uBr,QK,pBr,_Br,bBr,A0,vBr,Or,Dx,FBr,D5e,TBr,MBr,Fn,EBr,G5e,CBr,wBr,O5e,ABr,LBr,V5e,yBr,xBr,$Br,oe,L0,X5e,kBr,SBr,WK,RBr,PBr,BBr,y0,z5e,IBr,NBr,HK,qBr,jBr,DBr,x0,Q5e,GBr,OBr,UK,VBr,XBr,zBr,$0,W5e,QBr,WBr,JK,HBr,UBr,JBr,k0,H5e,YBr,KBr,YK,ZBr,eIr,oIr,S0,U5e,rIr,tIr,KK,aIr,nIr,sIr,R0,J5e,lIr,iIr,ZK,dIr,cIr,mIr,P0,Y5e,fIr,gIr,eZ,hIr,uIr,pIr,B0,K5e,_Ir,bIr,oZ,vIr,FIr,TIr,I0,Z5e,MIr,EIr,rZ,CIr,wIr,AIr,N0,e3e,LIr,yIr,tZ,xIr,$Ir,kIr,q0,o3e,SIr,RIr,aZ,PIr,BIr,IIr,j0,r3e,NIr,qIr,nZ,jIr,DIr,GIr,D0,t3e,OIr,VIr,sZ,XIr,zIr,QIr,G0,a3e,WIr,HIr,lZ,UIr,JIr,YIr,O0,n3e,KIr,ZIr,iZ,eNr,oNr,rNr,V0,s3e,tNr,aNr,dZ,nNr,sNr,lNr,X0,l3e,iNr,dNr,cZ,cNr,mNr,fNr,z0,i3e,gNr,hNr,mZ,uNr,pNr,_Nr,Q0,d3e,bNr,vNr,fZ,FNr,TNr,MNr,W0,c3e,ENr,CNr,gZ,wNr,ANr,LNr,H0,m3e,yNr,xNr,hZ,$Nr,kNr,SNr,U0,f3e,RNr,PNr,uZ,BNr,INr,NNr,J0,g3e,qNr,jNr,pZ,DNr,GNr,ONr,Y0,h3e,VNr,XNr,_Z,zNr,QNr,WNr,K0,u3e,HNr,UNr,bZ,JNr,YNr,KNr,Z0,p3e,ZNr,eqr,vZ,oqr,rqr,tqr,ew,jVe,Qc,ow,_3e,Gx,aqr,b3e,nqr,DVe,ur,Ox,sqr,Wc,lqr,FZ,iqr,dqr,TZ,cqr,mqr,fqr,Vx,gqr,v3e,hqr,uqr,pqr,zt,Xx,_qr,F3e,bqr,vqr,Hc,Fqr,T3e,Tqr,Mqr,MZ,Eqr,Cqr,wqr,rw,Aqr,Vr,zx,Lqr,M3e,yqr,xqr,Tn,$qr,E3e,kqr,Sqr,C3e,Rqr,Pqr,w3e,Bqr,Iqr,Nqr,xe,tw,A3e,qqr,jqr,EZ,Dqr,Gqr,Oqr,aw,L3e,Vqr,Xqr,CZ,zqr,Qqr,Wqr,nw,y3e,Hqr,Uqr,wZ,Jqr,Yqr,Kqr,sw,x3e,Zqr,ejr,AZ,ojr,rjr,tjr,lw,$3e,ajr,njr,LZ,sjr,ljr,ijr,iw,k3e,djr,cjr,yZ,mjr,fjr,gjr,dw,S3e,hjr,ujr,xZ,pjr,_jr,bjr,cw,R3e,vjr,Fjr,$Z,Tjr,Mjr,Ejr,mw,P3e,Cjr,wjr,kZ,Ajr,Ljr,yjr,fw,B3e,xjr,$jr,SZ,kjr,Sjr,Rjr,gw,GVe,Uc,hw,I3e,Qx,Pjr,N3e,Bjr,OVe,pr,Wx,Ijr,Jc,Njr,RZ,qjr,jjr,PZ,Djr,Gjr,Ojr,Hx,Vjr,q3e,Xjr,zjr,Qjr,Qt,Ux,Wjr,j3e,Hjr,Ujr,Yc,Jjr,D3e,Yjr,Kjr,BZ,Zjr,eDr,oDr,uw,rDr,Xr,Jx,tDr,G3e,aDr,nDr,Mn,sDr,O3e,lDr,iDr,V3e,dDr,cDr,X3e,mDr,fDr,gDr,Ee,pw,z3e,hDr,uDr,IZ,pDr,_Dr,bDr,_w,Q3e,vDr,FDr,NZ,TDr,MDr,EDr,bw,W3e,CDr,wDr,qZ,ADr,LDr,yDr,vw,H3e,xDr,$Dr,jZ,kDr,SDr,RDr,Fw,U3e,PDr,BDr,DZ,IDr,NDr,qDr,Tw,J3e,jDr,DDr,GZ,GDr,ODr,VDr,Mw,Y3e,XDr,zDr,OZ,QDr,WDr,HDr,Ew,K3e,UDr,JDr,VZ,YDr,KDr,ZDr,Cw,Z3e,eGr,oGr,XZ,rGr,tGr,aGr,ww,e0e,nGr,sGr,zZ,lGr,iGr,dGr,Aw,o0e,cGr,mGr,QZ,fGr,gGr,hGr,Lw,r0e,uGr,pGr,WZ,_Gr,bGr,vGr,yw,t0e,FGr,TGr,HZ,MGr,EGr,CGr,xw,VVe,Kc,$w,a0e,Yx,wGr,n0e,AGr,XVe,_r,Kx,LGr,Zc,yGr,UZ,xGr,$Gr,JZ,kGr,SGr,RGr,Zx,PGr,s0e,BGr,IGr,NGr,Wt,e$,qGr,l0e,jGr,DGr,em,GGr,i0e,OGr,VGr,YZ,XGr,zGr,QGr,kw,WGr,zr,o$,HGr,d0e,UGr,JGr,En,YGr,c0e,KGr,ZGr,m0e,eOr,oOr,f0e,rOr,tOr,aOr,$e,Sw,g0e,nOr,sOr,KZ,lOr,iOr,dOr,Rw,h0e,cOr,mOr,ZZ,fOr,gOr,hOr,Pw,u0e,uOr,pOr,eee,_Or,bOr,vOr,Bw,p0e,FOr,TOr,oee,MOr,EOr,COr,Iw,_0e,wOr,AOr,ree,LOr,yOr,xOr,Nw,b0e,$Or,kOr,tee,SOr,ROr,POr,qw,v0e,BOr,IOr,aee,NOr,qOr,jOr,jw,F0e,DOr,GOr,nee,OOr,VOr,XOr,Dw,T0e,zOr,QOr,see,WOr,HOr,UOr,Gw,M0e,JOr,YOr,lee,KOr,ZOr,eVr,Ow,zVe,om,Vw,E0e,r$,oVr,C0e,rVr,QVe,br,t$,tVr,rm,aVr,iee,nVr,sVr,dee,lVr,iVr,dVr,a$,cVr,w0e,mVr,fVr,gVr,Ht,n$,hVr,A0e,uVr,pVr,tm,_Vr,L0e,bVr,vVr,cee,FVr,TVr,MVr,Xw,EVr,Qr,s$,CVr,y0e,wVr,AVr,Cn,LVr,x0e,yVr,xVr,$0e,$Vr,kVr,k0e,SVr,RVr,PVr,ke,zw,S0e,BVr,IVr,mee,NVr,qVr,jVr,Qw,R0e,DVr,GVr,fee,OVr,VVr,XVr,Ww,P0e,zVr,QVr,gee,WVr,HVr,UVr,Hw,B0e,JVr,YVr,hee,KVr,ZVr,eXr,Uw,I0e,oXr,rXr,uee,tXr,aXr,nXr,Jw,N0e,sXr,lXr,pee,iXr,dXr,cXr,Yw,q0e,mXr,fXr,_ee,gXr,hXr,uXr,Kw,j0e,pXr,_Xr,bee,bXr,vXr,FXr,Zw,D0e,TXr,MXr,vee,EXr,CXr,wXr,eA,G0e,AXr,LXr,Fee,yXr,xXr,$Xr,oA,WVe,am,rA,O0e,l$,kXr,V0e,SXr,HVe,vr,i$,RXr,nm,PXr,Tee,BXr,IXr,Mee,NXr,qXr,jXr,d$,DXr,X0e,GXr,OXr,VXr,Ut,c$,XXr,z0e,zXr,QXr,sm,WXr,Q0e,HXr,UXr,Eee,JXr,YXr,KXr,tA,ZXr,Wr,m$,ezr,W0e,ozr,rzr,wn,tzr,H0e,azr,nzr,U0e,szr,lzr,J0e,izr,dzr,czr,Se,aA,Y0e,mzr,fzr,Cee,gzr,hzr,uzr,nA,K0e,pzr,_zr,wee,bzr,vzr,Fzr,sA,Z0e,Tzr,Mzr,Aee,Ezr,Czr,wzr,lA,ewe,Azr,Lzr,Lee,yzr,xzr,$zr,iA,owe,kzr,Szr,yee,Rzr,Pzr,Bzr,dA,rwe,Izr,Nzr,xee,qzr,jzr,Dzr,cA,twe,Gzr,Ozr,$ee,Vzr,Xzr,zzr,mA,awe,Qzr,Wzr,kee,Hzr,Uzr,Jzr,fA,nwe,Yzr,Kzr,See,Zzr,eQr,oQr,gA,swe,rQr,tQr,Ree,aQr,nQr,sQr,hA,UVe,lm,uA,lwe,f$,lQr,iwe,iQr,JVe,Fr,g$,dQr,im,cQr,Pee,mQr,fQr,Bee,gQr,hQr,uQr,h$,pQr,dwe,_Qr,bQr,vQr,Jt,u$,FQr,cwe,TQr,MQr,dm,EQr,mwe,CQr,wQr,Iee,AQr,LQr,yQr,pA,xQr,Hr,p$,$Qr,fwe,kQr,SQr,An,RQr,gwe,PQr,BQr,hwe,IQr,NQr,uwe,qQr,jQr,DQr,Re,_A,pwe,GQr,OQr,Nee,VQr,XQr,zQr,bA,_we,QQr,WQr,qee,HQr,UQr,JQr,vA,bwe,YQr,KQr,jee,ZQr,eWr,oWr,FA,vwe,rWr,tWr,Dee,aWr,nWr,sWr,TA,Fwe,lWr,iWr,Gee,dWr,cWr,mWr,MA,Twe,fWr,gWr,Oee,hWr,uWr,pWr,EA,Mwe,_Wr,bWr,Vee,vWr,FWr,TWr,CA,Ewe,MWr,EWr,Xee,CWr,wWr,AWr,wA,Cwe,LWr,yWr,zee,xWr,$Wr,kWr,AA,wwe,SWr,RWr,Qee,PWr,BWr,IWr,LA,YVe,cm,yA,Awe,_$,NWr,Lwe,qWr,KVe,Tr,b$,jWr,mm,DWr,Wee,GWr,OWr,Hee,VWr,XWr,zWr,v$,QWr,ywe,WWr,HWr,UWr,Yt,F$,JWr,xwe,YWr,KWr,fm,ZWr,$we,eHr,oHr,Uee,rHr,tHr,aHr,xA,nHr,Ur,T$,sHr,kwe,lHr,iHr,Ln,dHr,Swe,cHr,mHr,Rwe,fHr,gHr,Pwe,hHr,uHr,pHr,Ve,$A,Bwe,_Hr,bHr,Jee,vHr,FHr,THr,kA,Iwe,MHr,EHr,Yee,CHr,wHr,AHr,SA,Nwe,LHr,yHr,Kee,xHr,$Hr,kHr,RA,qwe,SHr,RHr,Zee,PHr,BHr,IHr,PA,jwe,NHr,qHr,eoe,jHr,DHr,GHr,BA,Dwe,OHr,VHr,ooe,XHr,zHr,QHr,IA,Gwe,WHr,HHr,roe,UHr,JHr,YHr,NA,Owe,KHr,ZHr,toe,eUr,oUr,rUr,qA,ZVe,gm,jA,Vwe,M$,tUr,Xwe,aUr,eXe,Mr,E$,nUr,hm,sUr,aoe,lUr,iUr,noe,dUr,cUr,mUr,C$,fUr,zwe,gUr,hUr,uUr,Kt,w$,pUr,Qwe,_Ur,bUr,um,vUr,Wwe,FUr,TUr,soe,MUr,EUr,CUr,DA,wUr,Jr,A$,AUr,Hwe,LUr,yUr,yn,xUr,Uwe,$Ur,kUr,Jwe,SUr,RUr,Ywe,PUr,BUr,IUr,Xe,GA,Kwe,NUr,qUr,loe,jUr,DUr,GUr,OA,Zwe,OUr,VUr,ioe,XUr,zUr,QUr,VA,eAe,WUr,HUr,doe,UUr,JUr,YUr,XA,oAe,KUr,ZUr,coe,eJr,oJr,rJr,zA,rAe,tJr,aJr,moe,nJr,sJr,lJr,QA,tAe,iJr,dJr,foe,cJr,mJr,fJr,WA,aAe,gJr,hJr,goe,uJr,pJr,_Jr,HA,nAe,bJr,vJr,hoe,FJr,TJr,MJr,UA,oXe,pm,JA,sAe,L$,EJr,lAe,CJr,rXe,Er,y$,wJr,_m,AJr,uoe,LJr,yJr,poe,xJr,$Jr,kJr,x$,SJr,iAe,RJr,PJr,BJr,Zt,$$,IJr,dAe,NJr,qJr,bm,jJr,cAe,DJr,GJr,_oe,OJr,VJr,XJr,YA,zJr,Yr,k$,QJr,mAe,WJr,HJr,xn,UJr,fAe,JJr,YJr,gAe,KJr,ZJr,hAe,eYr,oYr,rYr,uAe,KA,pAe,tYr,aYr,boe,nYr,sYr,lYr,ZA,tXe,vm,e6,_Ae,S$,iYr,bAe,dYr,aXe,Cr,R$,cYr,Fm,mYr,voe,fYr,gYr,Foe,hYr,uYr,pYr,P$,_Yr,vAe,bYr,vYr,FYr,ea,B$,TYr,FAe,MYr,EYr,Tm,CYr,TAe,wYr,AYr,Toe,LYr,yYr,xYr,o6,$Yr,Kr,I$,kYr,MAe,SYr,RYr,$n,PYr,EAe,BYr,IYr,CAe,NYr,qYr,wAe,jYr,DYr,GYr,N$,r6,AAe,OYr,VYr,Moe,XYr,zYr,QYr,t6,LAe,WYr,HYr,Eoe,UYr,JYr,YYr,a6,nXe,Mm,n6,yAe,q$,KYr,xAe,ZYr,sXe,wr,j$,eKr,Em,oKr,Coe,rKr,tKr,woe,aKr,nKr,sKr,D$,lKr,$Ae,iKr,dKr,cKr,oa,G$,mKr,kAe,fKr,gKr,Cm,hKr,SAe,uKr,pKr,Aoe,_Kr,bKr,vKr,s6,FKr,Zr,O$,TKr,RAe,MKr,EKr,kn,CKr,PAe,wKr,AKr,BAe,LKr,yKr,IAe,xKr,$Kr,kKr,NAe,l6,qAe,SKr,RKr,Loe,PKr,BKr,IKr,i6,lXe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),R7=new re({}),P7=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Rm=new NKr({props:{warning:!0,$$slots:{default:[bGt]},$$scope:{ctx:x}}}),B7=new re({}),I7=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L601"}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L624"}}),Vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[vGt]},$$scope:{ctx:x}}}),D7=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L747"}}),G7=new re({}),O7=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L401"}}),z7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L415"}}),wh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[FGt]},$$scope:{ctx:x}}}),Q7=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L614"}}),W7=new re({}),H7=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),Y7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),su=new NKr({props:{$$slots:{default:[TGt]},$$scope:{ctx:x}}}),lu=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[MGt]},$$scope:{ctx:x}}}),K7=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),Z7=new re({}),ey=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L88"}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L102"}}),Lu=new NKr({props:{$$slots:{default:[EGt]},$$scope:{ctx:x}}}),yu=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[CGt]},$$scope:{ctx:x}}}),ay=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L255"}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L770"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ku=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[wGt]},$$scope:{ctx:x}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[AGt]},$$scope:{ctx:x}}}),cy=new re({}),my=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L777"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[LGt]},$$scope:{ctx:x}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yGt]},$$scope:{ctx:x}}}),uy=new re({}),py=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L792"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[xGt]},$$scope:{ctx:x}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ub=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$Gt]},$$scope:{ctx:x}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L799"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_b=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[kGt]},$$scope:{ctx:x}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[SGt]},$$scope:{ctx:x}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L806"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),av=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[RGt]},$$scope:{ctx:x}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[PGt]},$$scope:{ctx:x}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L815"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[BGt]},$$scope:{ctx:x}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[IGt]},$$scope:{ctx:x}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[NGt]},$$scope:{ctx:x}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r1=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qGt]},$$scope:{ctx:x}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L867"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a1=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jGt]},$$scope:{ctx:x}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f1=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[DGt]},$$scope:{ctx:x}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[GGt]},$$scope:{ctx:x}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[OGt]},$$scope:{ctx:x}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L824"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VGt]},$$scope:{ctx:x}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XGt]},$$scope:{ctx:x}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L831"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[zGt]},$$scope:{ctx:x}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[QGt]},$$scope:{ctx:x}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L876"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[WGt]},$$scope:{ctx:x}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[HGt]},$$scope:{ctx:x}}}),m8=new re({}),f8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L915"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[UGt]},$$scope:{ctx:x}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[JGt]},$$scope:{ctx:x}}}),p8=new re({}),_8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L842"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[YGt]},$$scope:{ctx:x}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[KGt]},$$scope:{ctx:x}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L922"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ZGt]},$$scope:{ctx:x}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[eOt]},$$scope:{ctx:x}}}),A8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L945"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[oOt]},$$scope:{ctx:x}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[rOt]},$$scope:{ctx:x}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L929"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[tOt]},$$scope:{ctx:x}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[aOt]},$$scope:{ctx:x}}}),I8=new re({}),N8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L936"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nOt]},$$scope:{ctx:x}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sOt]},$$scope:{ctx:x}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L954"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[lOt]},$$scope:{ctx:x}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[iOt]},$$scope:{ctx:x}}}),W8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L961"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[dOt]},$$scope:{ctx:x}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[cOt]},$$scope:{ctx:x}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L908"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[mOt]},$$scope:{ctx:x}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[fOt]},$$scope:{ctx:x}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L883"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[gOt]},$$scope:{ctx:x}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[hOt]},$$scope:{ctx:x}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L890"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[uOt]},$$scope:{ctx:x}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[pOt]},$$scope:{ctx:x}}}),h9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L899"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[_Ot]},$$scope:{ctx:x}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[bOt]},$$scope:{ctx:x}}}),v9=new re({}),F9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[vOt]},$$scope:{ctx:x}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[FOt]},$$scope:{ctx:x}}}),C9=new re({}),w9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[TOt]},$$scope:{ctx:x}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[MOt]},$$scope:{ctx:x}}}),x9=new re({}),$9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[EOt]},$$scope:{ctx:x}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[COt]},$$scope:{ctx:x}}}),P9=new re({}),B9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[wOt]},$$scope:{ctx:x}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[AOt]},$$scope:{ctx:x}}}),j9=new re({}),D9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),O9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[LOt]},$$scope:{ctx:x}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yOt]},$$scope:{ctx:x}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xOt]},$$scope:{ctx:x}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$Ot]},$$scope:{ctx:x}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[kOt]},$$scope:{ctx:x}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[SOt]},$$scope:{ctx:x}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ROt]},$$scope:{ctx:x}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[POt]},$$scope:{ctx:x}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[BOt]},$$scope:{ctx:x}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[IOt]},$$scope:{ctx:x}}}),mx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[NOt]},$$scope:{ctx:x}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[qOt]},$$scope:{ctx:x}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[jOt]},$$scope:{ctx:x}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[DOt]},$$scope:{ctx:x}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[GOt]},$$scope:{ctx:x}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[OOt]},$$scope:{ctx:x}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[VOt]},$$scope:{ctx:x}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[XOt]},$$scope:{ctx:x}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zOt]},$$scope:{ctx:x}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[QOt]},$$scope:{ctx:x}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[WOt]},$$scope:{ctx:x}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[HOt]},$$scope:{ctx:x}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[UOt]},$$scope:{ctx:x}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[JOt]},$$scope:{ctx:x}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[YOt]},$$scope:{ctx:x}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[KOt]},$$scope:{ctx:x}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[ZOt]},$$scope:{ctx:x}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eVt]},$$scope:{ctx:x}}}),r$=new re({}),t$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),n$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oVt]},$$scope:{ctx:x}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rVt]},$$scope:{ctx:x}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[tVt]},$$scope:{ctx:x}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aVt]},$$scope:{ctx:x}}}),f$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nVt]},$$scope:{ctx:x}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sVt]},$$scope:{ctx:x}}}),_$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[lVt]},$$scope:{ctx:x}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iVt]},$$scope:{ctx:x}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[dVt]},$$scope:{ctx:x}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cVt]},$$scope:{ctx:x}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mVt]},$$scope:{ctx:x}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[fVt]},$$scope:{ctx:x}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[gVt]},$$scope:{ctx:x}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hVt]},$$scope:{ctx:x}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[uVt]},$$scope:{ctx:x}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[pVt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Mi=o("Auto Classes"),ym=l(),at=a("p"),Ei=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=a("code"),x7=o("from_pretrained()"),xm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),wi=o("Instantiating one of "),Rn=a("a"),$7=o("AutoConfig"),Pn=o(", "),Bn=a("a"),k7=o("AutoModel"),Ai=o(`, and
`),In=a("a"),S7=o("AutoTokenizer"),Li=o(" will directly create a class of the relevant architecture. For instance"),$m=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),lS=o("will create a model that is an instance of "),yi=a("a"),iS=o("BertModel"),dS=o("."),Co=l(),$a=a("p"),cS=o("There is one class of "),km=a("code"),mS=o("AutoModel"),_Qe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rOe=l(),xi=a("h2"),Sm=a("a"),Mte=a("span"),F(R7.$$.fragment),bQe=l(),Ete=a("span"),vQe=o("Extending the Auto Classes"),tOe=l(),Nn=a("p"),FQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cte=a("code"),TQe=o("NewModel"),MQe=o(", make sure you have a "),wte=a("code"),EQe=o("NewModelConfig"),CQe=o(` then you can add those to the auto
classes like this:`),aOe=l(),F(P7.$$.fragment),nOe=l(),fS=a("p"),wQe=o("You will then be able to use the auto classes like you would usually do!"),sOe=l(),F(Rm.$$.fragment),lOe=l(),$i=a("h2"),Pm=a("a"),Ate=a("span"),F(B7.$$.fragment),AQe=l(),Lte=a("span"),LQe=o("AutoConfig"),iOe=l(),wo=a("div"),F(I7.$$.fragment),yQe=l(),N7=a("p"),xQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gS=a("a"),$Qe=o("from_pretrained()"),kQe=o(" class method."),SQe=l(),q7=a("p"),RQe=o("This class cannot be instantiated directly using "),yte=a("code"),PQe=o("__init__()"),BQe=o(" (throws an error)."),IQe=l(),Ar=a("div"),F(j7.$$.fragment),NQe=l(),xte=a("p"),qQe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),jQe=l(),ki=a("p"),DQe=o("The configuration class to instantiate is selected based on the "),$te=a("code"),GQe=o("model_type"),OQe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kte=a("code"),VQe=o("pretrained_model_name_or_path"),XQe=o(":"),zQe=l(),A=a("ul"),Bm=a("li"),Ste=a("strong"),QQe=o("albert"),WQe=o(" \u2014 "),hS=a("a"),HQe=o("AlbertConfig"),UQe=o(" (ALBERT model)"),JQe=l(),Im=a("li"),Rte=a("strong"),YQe=o("bart"),KQe=o(" \u2014 "),uS=a("a"),ZQe=o("BartConfig"),eWe=o(" (BART model)"),oWe=l(),Nm=a("li"),Pte=a("strong"),rWe=o("beit"),tWe=o(" \u2014 "),pS=a("a"),aWe=o("BeitConfig"),nWe=o(" (BEiT model)"),sWe=l(),qm=a("li"),Bte=a("strong"),lWe=o("bert"),iWe=o(" \u2014 "),_S=a("a"),dWe=o("BertConfig"),cWe=o(" (BERT model)"),mWe=l(),jm=a("li"),Ite=a("strong"),fWe=o("bert-generation"),gWe=o(" \u2014 "),bS=a("a"),hWe=o("BertGenerationConfig"),uWe=o(" (Bert Generation model)"),pWe=l(),Dm=a("li"),Nte=a("strong"),_We=o("big_bird"),bWe=o(" \u2014 "),vS=a("a"),vWe=o("BigBirdConfig"),FWe=o(" (BigBird model)"),TWe=l(),Gm=a("li"),qte=a("strong"),MWe=o("bigbird_pegasus"),EWe=o(" \u2014 "),FS=a("a"),CWe=o("BigBirdPegasusConfig"),wWe=o(" (BigBird-Pegasus model)"),AWe=l(),Om=a("li"),jte=a("strong"),LWe=o("blenderbot"),yWe=o(" \u2014 "),TS=a("a"),xWe=o("BlenderbotConfig"),$We=o(" (Blenderbot model)"),kWe=l(),Vm=a("li"),Dte=a("strong"),SWe=o("blenderbot-small"),RWe=o(" \u2014 "),MS=a("a"),PWe=o("BlenderbotSmallConfig"),BWe=o(" (BlenderbotSmall model)"),IWe=l(),Xm=a("li"),Gte=a("strong"),NWe=o("bloom"),qWe=o(" \u2014 "),ES=a("a"),jWe=o("BloomConfig"),DWe=o(" (BLOOM model)"),GWe=l(),zm=a("li"),Ote=a("strong"),OWe=o("camembert"),VWe=o(" \u2014 "),CS=a("a"),XWe=o("CamembertConfig"),zWe=o(" (CamemBERT model)"),QWe=l(),Qm=a("li"),Vte=a("strong"),WWe=o("canine"),HWe=o(" \u2014 "),wS=a("a"),UWe=o("CanineConfig"),JWe=o(" (CANINE model)"),YWe=l(),Wm=a("li"),Xte=a("strong"),KWe=o("clip"),ZWe=o(" \u2014 "),AS=a("a"),eHe=o("CLIPConfig"),oHe=o(" (CLIP model)"),rHe=l(),Hm=a("li"),zte=a("strong"),tHe=o("codegen"),aHe=o(" \u2014 "),LS=a("a"),nHe=o("CodeGenConfig"),sHe=o(" (CodeGen model)"),lHe=l(),Um=a("li"),Qte=a("strong"),iHe=o("convbert"),dHe=o(" \u2014 "),yS=a("a"),cHe=o("ConvBertConfig"),mHe=o(" (ConvBERT model)"),fHe=l(),Jm=a("li"),Wte=a("strong"),gHe=o("convnext"),hHe=o(" \u2014 "),xS=a("a"),uHe=o("ConvNextConfig"),pHe=o(" (ConvNeXT model)"),_He=l(),Ym=a("li"),Hte=a("strong"),bHe=o("ctrl"),vHe=o(" \u2014 "),$S=a("a"),FHe=o("CTRLConfig"),THe=o(" (CTRL model)"),MHe=l(),Km=a("li"),Ute=a("strong"),EHe=o("cvt"),CHe=o(" \u2014 "),kS=a("a"),wHe=o("CvtConfig"),AHe=o(" (CvT model)"),LHe=l(),Zm=a("li"),Jte=a("strong"),yHe=o("data2vec-audio"),xHe=o(" \u2014 "),SS=a("a"),$He=o("Data2VecAudioConfig"),kHe=o(" (Data2VecAudio model)"),SHe=l(),ef=a("li"),Yte=a("strong"),RHe=o("data2vec-text"),PHe=o(" \u2014 "),RS=a("a"),BHe=o("Data2VecTextConfig"),IHe=o(" (Data2VecText model)"),NHe=l(),of=a("li"),Kte=a("strong"),qHe=o("data2vec-vision"),jHe=o(" \u2014 "),PS=a("a"),DHe=o("Data2VecVisionConfig"),GHe=o(" (Data2VecVision model)"),OHe=l(),rf=a("li"),Zte=a("strong"),VHe=o("deberta"),XHe=o(" \u2014 "),BS=a("a"),zHe=o("DebertaConfig"),QHe=o(" (DeBERTa model)"),WHe=l(),tf=a("li"),eae=a("strong"),HHe=o("deberta-v2"),UHe=o(" \u2014 "),IS=a("a"),JHe=o("DebertaV2Config"),YHe=o(" (DeBERTa-v2 model)"),KHe=l(),af=a("li"),oae=a("strong"),ZHe=o("decision_transformer"),eUe=o(" \u2014 "),NS=a("a"),oUe=o("DecisionTransformerConfig"),rUe=o(" (Decision Transformer model)"),tUe=l(),nf=a("li"),rae=a("strong"),aUe=o("deit"),nUe=o(" \u2014 "),qS=a("a"),sUe=o("DeiTConfig"),lUe=o(" (DeiT model)"),iUe=l(),sf=a("li"),tae=a("strong"),dUe=o("detr"),cUe=o(" \u2014 "),jS=a("a"),mUe=o("DetrConfig"),fUe=o(" (DETR model)"),gUe=l(),lf=a("li"),aae=a("strong"),hUe=o("distilbert"),uUe=o(" \u2014 "),DS=a("a"),pUe=o("DistilBertConfig"),_Ue=o(" (DistilBERT model)"),bUe=l(),df=a("li"),nae=a("strong"),vUe=o("dpr"),FUe=o(" \u2014 "),GS=a("a"),TUe=o("DPRConfig"),MUe=o(" (DPR model)"),EUe=l(),cf=a("li"),sae=a("strong"),CUe=o("dpt"),wUe=o(" \u2014 "),OS=a("a"),AUe=o("DPTConfig"),LUe=o(" (DPT model)"),yUe=l(),mf=a("li"),lae=a("strong"),xUe=o("electra"),$Ue=o(" \u2014 "),VS=a("a"),kUe=o("ElectraConfig"),SUe=o(" (ELECTRA model)"),RUe=l(),ff=a("li"),iae=a("strong"),PUe=o("encoder-decoder"),BUe=o(" \u2014 "),XS=a("a"),IUe=o("EncoderDecoderConfig"),NUe=o(" (Encoder decoder model)"),qUe=l(),gf=a("li"),dae=a("strong"),jUe=o("flaubert"),DUe=o(" \u2014 "),zS=a("a"),GUe=o("FlaubertConfig"),OUe=o(" (FlauBERT model)"),VUe=l(),hf=a("li"),cae=a("strong"),XUe=o("flava"),zUe=o(" \u2014 "),QS=a("a"),QUe=o("FlavaConfig"),WUe=o(" (FLAVA model)"),HUe=l(),uf=a("li"),mae=a("strong"),UUe=o("fnet"),JUe=o(" \u2014 "),WS=a("a"),YUe=o("FNetConfig"),KUe=o(" (FNet model)"),ZUe=l(),pf=a("li"),fae=a("strong"),eJe=o("fsmt"),oJe=o(" \u2014 "),HS=a("a"),rJe=o("FSMTConfig"),tJe=o(" (FairSeq Machine-Translation model)"),aJe=l(),_f=a("li"),gae=a("strong"),nJe=o("funnel"),sJe=o(" \u2014 "),US=a("a"),lJe=o("FunnelConfig"),iJe=o(" (Funnel Transformer model)"),dJe=l(),bf=a("li"),hae=a("strong"),cJe=o("glpn"),mJe=o(" \u2014 "),JS=a("a"),fJe=o("GLPNConfig"),gJe=o(" (GLPN model)"),hJe=l(),vf=a("li"),uae=a("strong"),uJe=o("gpt2"),pJe=o(" \u2014 "),YS=a("a"),_Je=o("GPT2Config"),bJe=o(" (OpenAI GPT-2 model)"),vJe=l(),Ff=a("li"),pae=a("strong"),FJe=o("gpt_neo"),TJe=o(" \u2014 "),KS=a("a"),MJe=o("GPTNeoConfig"),EJe=o(" (GPT Neo model)"),CJe=l(),Tf=a("li"),_ae=a("strong"),wJe=o("gpt_neox"),AJe=o(" \u2014 "),ZS=a("a"),LJe=o("GPTNeoXConfig"),yJe=o(" (GPT NeoX model)"),xJe=l(),Mf=a("li"),bae=a("strong"),$Je=o("gptj"),kJe=o(" \u2014 "),eR=a("a"),SJe=o("GPTJConfig"),RJe=o(" (GPT-J model)"),PJe=l(),Ef=a("li"),vae=a("strong"),BJe=o("hubert"),IJe=o(" \u2014 "),oR=a("a"),NJe=o("HubertConfig"),qJe=o(" (Hubert model)"),jJe=l(),Cf=a("li"),Fae=a("strong"),DJe=o("ibert"),GJe=o(" \u2014 "),rR=a("a"),OJe=o("IBertConfig"),VJe=o(" (I-BERT model)"),XJe=l(),wf=a("li"),Tae=a("strong"),zJe=o("imagegpt"),QJe=o(" \u2014 "),tR=a("a"),WJe=o("ImageGPTConfig"),HJe=o(" (ImageGPT model)"),UJe=l(),Af=a("li"),Mae=a("strong"),JJe=o("layoutlm"),YJe=o(" \u2014 "),aR=a("a"),KJe=o("LayoutLMConfig"),ZJe=o(" (LayoutLM model)"),eYe=l(),Lf=a("li"),Eae=a("strong"),oYe=o("layoutlmv2"),rYe=o(" \u2014 "),nR=a("a"),tYe=o("LayoutLMv2Config"),aYe=o(" (LayoutLMv2 model)"),nYe=l(),yf=a("li"),Cae=a("strong"),sYe=o("layoutlmv3"),lYe=o(" \u2014 "),sR=a("a"),iYe=o("LayoutLMv3Config"),dYe=o(" (LayoutLMv3 model)"),cYe=l(),xf=a("li"),wae=a("strong"),mYe=o("led"),fYe=o(" \u2014 "),lR=a("a"),gYe=o("LEDConfig"),hYe=o(" (LED model)"),uYe=l(),$f=a("li"),Aae=a("strong"),pYe=o("levit"),_Ye=o(" \u2014 "),iR=a("a"),bYe=o("LevitConfig"),vYe=o(" (LeViT model)"),FYe=l(),kf=a("li"),Lae=a("strong"),TYe=o("longformer"),MYe=o(" \u2014 "),dR=a("a"),EYe=o("LongformerConfig"),CYe=o(" (Longformer model)"),wYe=l(),Sf=a("li"),yae=a("strong"),AYe=o("longt5"),LYe=o(" \u2014 "),cR=a("a"),yYe=o("LongT5Config"),xYe=o(" (LongT5 model)"),$Ye=l(),Rf=a("li"),xae=a("strong"),kYe=o("luke"),SYe=o(" \u2014 "),mR=a("a"),RYe=o("LukeConfig"),PYe=o(" (LUKE model)"),BYe=l(),Pf=a("li"),$ae=a("strong"),IYe=o("lxmert"),NYe=o(" \u2014 "),fR=a("a"),qYe=o("LxmertConfig"),jYe=o(" (LXMERT model)"),DYe=l(),Bf=a("li"),kae=a("strong"),GYe=o("m2m_100"),OYe=o(" \u2014 "),gR=a("a"),VYe=o("M2M100Config"),XYe=o(" (M2M100 model)"),zYe=l(),If=a("li"),Sae=a("strong"),QYe=o("marian"),WYe=o(" \u2014 "),hR=a("a"),HYe=o("MarianConfig"),UYe=o(" (Marian model)"),JYe=l(),Nf=a("li"),Rae=a("strong"),YYe=o("maskformer"),KYe=o(" \u2014 "),uR=a("a"),ZYe=o("MaskFormerConfig"),eKe=o(" (MaskFormer model)"),oKe=l(),qf=a("li"),Pae=a("strong"),rKe=o("mbart"),tKe=o(" \u2014 "),pR=a("a"),aKe=o("MBartConfig"),nKe=o(" (mBART model)"),sKe=l(),jf=a("li"),Bae=a("strong"),lKe=o("mctct"),iKe=o(" \u2014 "),_R=a("a"),dKe=o("MCTCTConfig"),cKe=o(" (M-CTC-T model)"),mKe=l(),Df=a("li"),Iae=a("strong"),fKe=o("megatron-bert"),gKe=o(" \u2014 "),bR=a("a"),hKe=o("MegatronBertConfig"),uKe=o(" (Megatron-BERT model)"),pKe=l(),Gf=a("li"),Nae=a("strong"),_Ke=o("mobilebert"),bKe=o(" \u2014 "),vR=a("a"),vKe=o("MobileBertConfig"),FKe=o(" (MobileBERT model)"),TKe=l(),Of=a("li"),qae=a("strong"),MKe=o("mpnet"),EKe=o(" \u2014 "),FR=a("a"),CKe=o("MPNetConfig"),wKe=o(" (MPNet model)"),AKe=l(),Vf=a("li"),jae=a("strong"),LKe=o("mt5"),yKe=o(" \u2014 "),TR=a("a"),xKe=o("MT5Config"),$Ke=o(" (MT5 model)"),kKe=l(),Xf=a("li"),Dae=a("strong"),SKe=o("nezha"),RKe=o(" \u2014 "),MR=a("a"),PKe=o("NezhaConfig"),BKe=o(" (Nezha model)"),IKe=l(),zf=a("li"),Gae=a("strong"),NKe=o("nystromformer"),qKe=o(" \u2014 "),ER=a("a"),jKe=o("NystromformerConfig"),DKe=o(" (Nystr\xF6mformer model)"),GKe=l(),Qf=a("li"),Oae=a("strong"),OKe=o("openai-gpt"),VKe=o(" \u2014 "),CR=a("a"),XKe=o("OpenAIGPTConfig"),zKe=o(" (OpenAI GPT model)"),QKe=l(),Wf=a("li"),Vae=a("strong"),WKe=o("opt"),HKe=o(" \u2014 "),wR=a("a"),UKe=o("OPTConfig"),JKe=o(" (OPT model)"),YKe=l(),Hf=a("li"),Xae=a("strong"),KKe=o("pegasus"),ZKe=o(" \u2014 "),AR=a("a"),eZe=o("PegasusConfig"),oZe=o(" (Pegasus model)"),rZe=l(),Uf=a("li"),zae=a("strong"),tZe=o("perceiver"),aZe=o(" \u2014 "),LR=a("a"),nZe=o("PerceiverConfig"),sZe=o(" (Perceiver model)"),lZe=l(),Jf=a("li"),Qae=a("strong"),iZe=o("plbart"),dZe=o(" \u2014 "),yR=a("a"),cZe=o("PLBartConfig"),mZe=o(" (PLBart model)"),fZe=l(),Yf=a("li"),Wae=a("strong"),gZe=o("poolformer"),hZe=o(" \u2014 "),xR=a("a"),uZe=o("PoolFormerConfig"),pZe=o(" (PoolFormer model)"),_Ze=l(),Kf=a("li"),Hae=a("strong"),bZe=o("prophetnet"),vZe=o(" \u2014 "),$R=a("a"),FZe=o("ProphetNetConfig"),TZe=o(" (ProphetNet model)"),MZe=l(),Zf=a("li"),Uae=a("strong"),EZe=o("qdqbert"),CZe=o(" \u2014 "),kR=a("a"),wZe=o("QDQBertConfig"),AZe=o(" (QDQBert model)"),LZe=l(),eg=a("li"),Jae=a("strong"),yZe=o("rag"),xZe=o(" \u2014 "),SR=a("a"),$Ze=o("RagConfig"),kZe=o(" (RAG model)"),SZe=l(),og=a("li"),Yae=a("strong"),RZe=o("realm"),PZe=o(" \u2014 "),RR=a("a"),BZe=o("RealmConfig"),IZe=o(" (REALM model)"),NZe=l(),rg=a("li"),Kae=a("strong"),qZe=o("reformer"),jZe=o(" \u2014 "),PR=a("a"),DZe=o("ReformerConfig"),GZe=o(" (Reformer model)"),OZe=l(),tg=a("li"),Zae=a("strong"),VZe=o("regnet"),XZe=o(" \u2014 "),BR=a("a"),zZe=o("RegNetConfig"),QZe=o(" (RegNet model)"),WZe=l(),ag=a("li"),ene=a("strong"),HZe=o("rembert"),UZe=o(" \u2014 "),IR=a("a"),JZe=o("RemBertConfig"),YZe=o(" (RemBERT model)"),KZe=l(),ng=a("li"),one=a("strong"),ZZe=o("resnet"),eeo=o(" \u2014 "),NR=a("a"),oeo=o("ResNetConfig"),reo=o(" (ResNet model)"),teo=l(),sg=a("li"),rne=a("strong"),aeo=o("retribert"),neo=o(" \u2014 "),qR=a("a"),seo=o("RetriBertConfig"),leo=o(" (RetriBERT model)"),ieo=l(),lg=a("li"),tne=a("strong"),deo=o("roberta"),ceo=o(" \u2014 "),jR=a("a"),meo=o("RobertaConfig"),feo=o(" (RoBERTa model)"),geo=l(),ig=a("li"),ane=a("strong"),heo=o("roformer"),ueo=o(" \u2014 "),DR=a("a"),peo=o("RoFormerConfig"),_eo=o(" (RoFormer model)"),beo=l(),dg=a("li"),nne=a("strong"),veo=o("segformer"),Feo=o(" \u2014 "),GR=a("a"),Teo=o("SegformerConfig"),Meo=o(" (SegFormer model)"),Eeo=l(),cg=a("li"),sne=a("strong"),Ceo=o("sew"),weo=o(" \u2014 "),OR=a("a"),Aeo=o("SEWConfig"),Leo=o(" (SEW model)"),yeo=l(),mg=a("li"),lne=a("strong"),xeo=o("sew-d"),$eo=o(" \u2014 "),VR=a("a"),keo=o("SEWDConfig"),Seo=o(" (SEW-D model)"),Reo=l(),fg=a("li"),ine=a("strong"),Peo=o("speech-encoder-decoder"),Beo=o(" \u2014 "),XR=a("a"),Ieo=o("SpeechEncoderDecoderConfig"),Neo=o(" (Speech Encoder decoder model)"),qeo=l(),gg=a("li"),dne=a("strong"),jeo=o("speech_to_text"),Deo=o(" \u2014 "),zR=a("a"),Geo=o("Speech2TextConfig"),Oeo=o(" (Speech2Text model)"),Veo=l(),hg=a("li"),cne=a("strong"),Xeo=o("speech_to_text_2"),zeo=o(" \u2014 "),QR=a("a"),Qeo=o("Speech2Text2Config"),Weo=o(" (Speech2Text2 model)"),Heo=l(),ug=a("li"),mne=a("strong"),Ueo=o("splinter"),Jeo=o(" \u2014 "),WR=a("a"),Yeo=o("SplinterConfig"),Keo=o(" (Splinter model)"),Zeo=l(),pg=a("li"),fne=a("strong"),eoo=o("squeezebert"),ooo=o(" \u2014 "),HR=a("a"),roo=o("SqueezeBertConfig"),too=o(" (SqueezeBERT model)"),aoo=l(),_g=a("li"),gne=a("strong"),noo=o("swin"),soo=o(" \u2014 "),UR=a("a"),loo=o("SwinConfig"),ioo=o(" (Swin Transformer model)"),doo=l(),bg=a("li"),hne=a("strong"),coo=o("t5"),moo=o(" \u2014 "),JR=a("a"),foo=o("T5Config"),goo=o(" (T5 model)"),hoo=l(),vg=a("li"),une=a("strong"),uoo=o("tapas"),poo=o(" \u2014 "),YR=a("a"),_oo=o("TapasConfig"),boo=o(" (TAPAS model)"),voo=l(),Fg=a("li"),pne=a("strong"),Foo=o("trajectory_transformer"),Too=o(" \u2014 "),KR=a("a"),Moo=o("TrajectoryTransformerConfig"),Eoo=o(" (Trajectory Transformer model)"),Coo=l(),Tg=a("li"),_ne=a("strong"),woo=o("transfo-xl"),Aoo=o(" \u2014 "),ZR=a("a"),Loo=o("TransfoXLConfig"),yoo=o(" (Transformer-XL model)"),xoo=l(),Mg=a("li"),bne=a("strong"),$oo=o("trocr"),koo=o(" \u2014 "),eP=a("a"),Soo=o("TrOCRConfig"),Roo=o(" (TrOCR model)"),Poo=l(),Eg=a("li"),vne=a("strong"),Boo=o("unispeech"),Ioo=o(" \u2014 "),oP=a("a"),Noo=o("UniSpeechConfig"),qoo=o(" (UniSpeech model)"),joo=l(),Cg=a("li"),Fne=a("strong"),Doo=o("unispeech-sat"),Goo=o(" \u2014 "),rP=a("a"),Ooo=o("UniSpeechSatConfig"),Voo=o(" (UniSpeechSat model)"),Xoo=l(),wg=a("li"),Tne=a("strong"),zoo=o("van"),Qoo=o(" \u2014 "),tP=a("a"),Woo=o("VanConfig"),Hoo=o(" (VAN model)"),Uoo=l(),Ag=a("li"),Mne=a("strong"),Joo=o("vilt"),Yoo=o(" \u2014 "),aP=a("a"),Koo=o("ViltConfig"),Zoo=o(" (ViLT model)"),ero=l(),Lg=a("li"),Ene=a("strong"),oro=o("vision-encoder-decoder"),rro=o(" \u2014 "),nP=a("a"),tro=o("VisionEncoderDecoderConfig"),aro=o(" (Vision Encoder decoder model)"),nro=l(),yg=a("li"),Cne=a("strong"),sro=o("vision-text-dual-encoder"),lro=o(" \u2014 "),sP=a("a"),iro=o("VisionTextDualEncoderConfig"),dro=o(" (VisionTextDualEncoder model)"),cro=l(),xg=a("li"),wne=a("strong"),mro=o("visual_bert"),fro=o(" \u2014 "),lP=a("a"),gro=o("VisualBertConfig"),hro=o(" (VisualBERT model)"),uro=l(),$g=a("li"),Ane=a("strong"),pro=o("vit"),_ro=o(" \u2014 "),iP=a("a"),bro=o("ViTConfig"),vro=o(" (ViT model)"),Fro=l(),kg=a("li"),Lne=a("strong"),Tro=o("vit_mae"),Mro=o(" \u2014 "),dP=a("a"),Ero=o("ViTMAEConfig"),Cro=o(" (ViTMAE model)"),wro=l(),Sg=a("li"),yne=a("strong"),Aro=o("wav2vec2"),Lro=o(" \u2014 "),cP=a("a"),yro=o("Wav2Vec2Config"),xro=o(" (Wav2Vec2 model)"),$ro=l(),Rg=a("li"),xne=a("strong"),kro=o("wav2vec2-conformer"),Sro=o(" \u2014 "),mP=a("a"),Rro=o("Wav2Vec2ConformerConfig"),Pro=o(" (Wav2Vec2-Conformer model)"),Bro=l(),Pg=a("li"),$ne=a("strong"),Iro=o("wavlm"),Nro=o(" \u2014 "),fP=a("a"),qro=o("WavLMConfig"),jro=o(" (WavLM model)"),Dro=l(),Bg=a("li"),kne=a("strong"),Gro=o("xglm"),Oro=o(" \u2014 "),gP=a("a"),Vro=o("XGLMConfig"),Xro=o(" (XGLM model)"),zro=l(),Ig=a("li"),Sne=a("strong"),Qro=o("xlm"),Wro=o(" \u2014 "),hP=a("a"),Hro=o("XLMConfig"),Uro=o(" (XLM model)"),Jro=l(),Ng=a("li"),Rne=a("strong"),Yro=o("xlm-prophetnet"),Kro=o(" \u2014 "),uP=a("a"),Zro=o("XLMProphetNetConfig"),eto=o(" (XLM-ProphetNet model)"),oto=l(),qg=a("li"),Pne=a("strong"),rto=o("xlm-roberta"),tto=o(" \u2014 "),pP=a("a"),ato=o("XLMRobertaConfig"),nto=o(" (XLM-RoBERTa model)"),sto=l(),jg=a("li"),Bne=a("strong"),lto=o("xlm-roberta-xl"),ito=o(" \u2014 "),_P=a("a"),dto=o("XLMRobertaXLConfig"),cto=o(" (XLM-RoBERTa-XL model)"),mto=l(),Dg=a("li"),Ine=a("strong"),fto=o("xlnet"),gto=o(" \u2014 "),bP=a("a"),hto=o("XLNetConfig"),uto=o(" (XLNet model)"),pto=l(),Gg=a("li"),Nne=a("strong"),_to=o("yolos"),bto=o(" \u2014 "),vP=a("a"),vto=o("YolosConfig"),Fto=o(" (YOLOS model)"),Tto=l(),Og=a("li"),qne=a("strong"),Mto=o("yoso"),Eto=o(" \u2014 "),FP=a("a"),Cto=o("YosoConfig"),wto=o(" (YOSO model)"),Ato=l(),F(Vg.$$.fragment),Lto=l(),Xg=a("div"),F(D7.$$.fragment),yto=l(),jne=a("p"),xto=o("Register a new configuration for this class."),dOe=l(),Si=a("h2"),zg=a("a"),Dne=a("span"),F(G7.$$.fragment),$to=l(),Gne=a("span"),kto=o("AutoTokenizer"),cOe=l(),Ao=a("div"),F(O7.$$.fragment),Sto=l(),V7=a("p"),Rto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TP=a("a"),Pto=o("AutoTokenizer.from_pretrained()"),Bto=o(" class method."),Ito=l(),X7=a("p"),Nto=o("This class cannot be instantiated directly using "),One=a("code"),qto=o("__init__()"),jto=o(" (throws an error)."),Dto=l(),Lr=a("div"),F(z7.$$.fragment),Gto=l(),Vne=a("p"),Oto=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Vto=l(),ka=a("p"),Xto=o("The tokenizer class to instantiate is selected based on the "),Xne=a("code"),zto=o("model_type"),Qto=o(` property of the config object (either
passed as an argument or loaded from `),zne=a("code"),Wto=o("pretrained_model_name_or_path"),Hto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=a("code"),Uto=o("pretrained_model_name_or_path"),Jto=o(":"),Yto=l(),k=a("ul"),qn=a("li"),Wne=a("strong"),Kto=o("albert"),Zto=o(" \u2014 "),MP=a("a"),eao=o("AlbertTokenizer"),oao=o(" or "),EP=a("a"),rao=o("AlbertTokenizerFast"),tao=o(" (ALBERT model)"),aao=l(),jn=a("li"),Hne=a("strong"),nao=o("bart"),sao=o(" \u2014 "),CP=a("a"),lao=o("BartTokenizer"),iao=o(" or "),wP=a("a"),dao=o("BartTokenizerFast"),cao=o(" (BART model)"),mao=l(),Dn=a("li"),Une=a("strong"),fao=o("barthez"),gao=o(" \u2014 "),AP=a("a"),hao=o("BarthezTokenizer"),uao=o(" or "),LP=a("a"),pao=o("BarthezTokenizerFast"),_ao=o(" (BARThez model)"),bao=l(),Qg=a("li"),Jne=a("strong"),vao=o("bartpho"),Fao=o(" \u2014 "),yP=a("a"),Tao=o("BartphoTokenizer"),Mao=o(" (BARTpho model)"),Eao=l(),Gn=a("li"),Yne=a("strong"),Cao=o("bert"),wao=o(" \u2014 "),xP=a("a"),Aao=o("BertTokenizer"),Lao=o(" or "),$P=a("a"),yao=o("BertTokenizerFast"),xao=o(" (BERT model)"),$ao=l(),Wg=a("li"),Kne=a("strong"),kao=o("bert-generation"),Sao=o(" \u2014 "),kP=a("a"),Rao=o("BertGenerationTokenizer"),Pao=o(" (Bert Generation model)"),Bao=l(),Hg=a("li"),Zne=a("strong"),Iao=o("bert-japanese"),Nao=o(" \u2014 "),SP=a("a"),qao=o("BertJapaneseTokenizer"),jao=o(" (BertJapanese model)"),Dao=l(),Ug=a("li"),ese=a("strong"),Gao=o("bertweet"),Oao=o(" \u2014 "),RP=a("a"),Vao=o("BertweetTokenizer"),Xao=o(" (BERTweet model)"),zao=l(),On=a("li"),ose=a("strong"),Qao=o("big_bird"),Wao=o(" \u2014 "),PP=a("a"),Hao=o("BigBirdTokenizer"),Uao=o(" or "),BP=a("a"),Jao=o("BigBirdTokenizerFast"),Yao=o(" (BigBird model)"),Kao=l(),Vn=a("li"),rse=a("strong"),Zao=o("bigbird_pegasus"),eno=o(" \u2014 "),IP=a("a"),ono=o("PegasusTokenizer"),rno=o(" or "),NP=a("a"),tno=o("PegasusTokenizerFast"),ano=o(" (BigBird-Pegasus model)"),nno=l(),Xn=a("li"),tse=a("strong"),sno=o("blenderbot"),lno=o(" \u2014 "),qP=a("a"),ino=o("BlenderbotTokenizer"),dno=o(" or "),jP=a("a"),cno=o("BlenderbotTokenizerFast"),mno=o(" (Blenderbot model)"),fno=l(),Jg=a("li"),ase=a("strong"),gno=o("blenderbot-small"),hno=o(" \u2014 "),DP=a("a"),uno=o("BlenderbotSmallTokenizer"),pno=o(" (BlenderbotSmall model)"),_no=l(),Yg=a("li"),nse=a("strong"),bno=o("bloom"),vno=o(" \u2014 "),GP=a("a"),Fno=o("BloomTokenizerFast"),Tno=o(" (BLOOM model)"),Mno=l(),Kg=a("li"),sse=a("strong"),Eno=o("byt5"),Cno=o(" \u2014 "),OP=a("a"),wno=o("ByT5Tokenizer"),Ano=o(" (ByT5 model)"),Lno=l(),zn=a("li"),lse=a("strong"),yno=o("camembert"),xno=o(" \u2014 "),VP=a("a"),$no=o("CamembertTokenizer"),kno=o(" or "),XP=a("a"),Sno=o("CamembertTokenizerFast"),Rno=o(" (CamemBERT model)"),Pno=l(),Zg=a("li"),ise=a("strong"),Bno=o("canine"),Ino=o(" \u2014 "),zP=a("a"),Nno=o("CanineTokenizer"),qno=o(" (CANINE model)"),jno=l(),Qn=a("li"),dse=a("strong"),Dno=o("clip"),Gno=o(" \u2014 "),QP=a("a"),Ono=o("CLIPTokenizer"),Vno=o(" or "),WP=a("a"),Xno=o("CLIPTokenizerFast"),zno=o(" (CLIP model)"),Qno=l(),Wn=a("li"),cse=a("strong"),Wno=o("codegen"),Hno=o(" \u2014 "),HP=a("a"),Uno=o("CodeGenTokenizer"),Jno=o(" or "),UP=a("a"),Yno=o("CodeGenTokenizerFast"),Kno=o(" (CodeGen model)"),Zno=l(),Hn=a("li"),mse=a("strong"),eso=o("convbert"),oso=o(" \u2014 "),JP=a("a"),rso=o("ConvBertTokenizer"),tso=o(" or "),YP=a("a"),aso=o("ConvBertTokenizerFast"),nso=o(" (ConvBERT model)"),sso=l(),Un=a("li"),fse=a("strong"),lso=o("cpm"),iso=o(" \u2014 "),KP=a("a"),dso=o("CpmTokenizer"),cso=o(" or "),ZP=a("a"),mso=o("CpmTokenizerFast"),fso=o(" (CPM model)"),gso=l(),eh=a("li"),gse=a("strong"),hso=o("ctrl"),uso=o(" \u2014 "),eB=a("a"),pso=o("CTRLTokenizer"),_so=o(" (CTRL model)"),bso=l(),Jn=a("li"),hse=a("strong"),vso=o("data2vec-text"),Fso=o(" \u2014 "),oB=a("a"),Tso=o("RobertaTokenizer"),Mso=o(" or "),rB=a("a"),Eso=o("RobertaTokenizerFast"),Cso=o(" (Data2VecText model)"),wso=l(),Yn=a("li"),use=a("strong"),Aso=o("deberta"),Lso=o(" \u2014 "),tB=a("a"),yso=o("DebertaTokenizer"),xso=o(" or "),aB=a("a"),$so=o("DebertaTokenizerFast"),kso=o(" (DeBERTa model)"),Sso=l(),Kn=a("li"),pse=a("strong"),Rso=o("deberta-v2"),Pso=o(" \u2014 "),nB=a("a"),Bso=o("DebertaV2Tokenizer"),Iso=o(" or "),sB=a("a"),Nso=o("DebertaV2TokenizerFast"),qso=o(" (DeBERTa-v2 model)"),jso=l(),Zn=a("li"),_se=a("strong"),Dso=o("distilbert"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("DistilBertTokenizer"),Vso=o(" or "),iB=a("a"),Xso=o("DistilBertTokenizerFast"),zso=o(" (DistilBERT model)"),Qso=l(),es=a("li"),bse=a("strong"),Wso=o("dpr"),Hso=o(" \u2014 "),dB=a("a"),Uso=o("DPRQuestionEncoderTokenizer"),Jso=o(" or "),cB=a("a"),Yso=o("DPRQuestionEncoderTokenizerFast"),Kso=o(" (DPR model)"),Zso=l(),os=a("li"),vse=a("strong"),elo=o("electra"),olo=o(" \u2014 "),mB=a("a"),rlo=o("ElectraTokenizer"),tlo=o(" or "),fB=a("a"),alo=o("ElectraTokenizerFast"),nlo=o(" (ELECTRA model)"),slo=l(),oh=a("li"),Fse=a("strong"),llo=o("flaubert"),ilo=o(" \u2014 "),gB=a("a"),dlo=o("FlaubertTokenizer"),clo=o(" (FlauBERT model)"),mlo=l(),rs=a("li"),Tse=a("strong"),flo=o("fnet"),glo=o(" \u2014 "),hB=a("a"),hlo=o("FNetTokenizer"),ulo=o(" or "),uB=a("a"),plo=o("FNetTokenizerFast"),_lo=o(" (FNet model)"),blo=l(),rh=a("li"),Mse=a("strong"),vlo=o("fsmt"),Flo=o(" \u2014 "),pB=a("a"),Tlo=o("FSMTTokenizer"),Mlo=o(" (FairSeq Machine-Translation model)"),Elo=l(),ts=a("li"),Ese=a("strong"),Clo=o("funnel"),wlo=o(" \u2014 "),_B=a("a"),Alo=o("FunnelTokenizer"),Llo=o(" or "),bB=a("a"),ylo=o("FunnelTokenizerFast"),xlo=o(" (Funnel Transformer model)"),$lo=l(),as=a("li"),Cse=a("strong"),klo=o("gpt2"),Slo=o(" \u2014 "),vB=a("a"),Rlo=o("GPT2Tokenizer"),Plo=o(" or "),FB=a("a"),Blo=o("GPT2TokenizerFast"),Ilo=o(" (OpenAI GPT-2 model)"),Nlo=l(),ns=a("li"),wse=a("strong"),qlo=o("gpt_neo"),jlo=o(" \u2014 "),TB=a("a"),Dlo=o("GPT2Tokenizer"),Glo=o(" or "),MB=a("a"),Olo=o("GPT2TokenizerFast"),Vlo=o(" (GPT Neo model)"),Xlo=l(),th=a("li"),Ase=a("strong"),zlo=o("gpt_neox"),Qlo=o(" \u2014 "),EB=a("a"),Wlo=o("GPTNeoXTokenizerFast"),Hlo=o(" (GPT NeoX model)"),Ulo=l(),ss=a("li"),Lse=a("strong"),Jlo=o("gptj"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("GPT2Tokenizer"),Zlo=o(" or "),wB=a("a"),eio=o("GPT2TokenizerFast"),oio=o(" (GPT-J model)"),rio=l(),ls=a("li"),yse=a("strong"),tio=o("herbert"),aio=o(" \u2014 "),AB=a("a"),nio=o("HerbertTokenizer"),sio=o(" or "),LB=a("a"),lio=o("HerbertTokenizerFast"),iio=o(" (HerBERT model)"),dio=l(),ah=a("li"),xse=a("strong"),cio=o("hubert"),mio=o(" \u2014 "),yB=a("a"),fio=o("Wav2Vec2CTCTokenizer"),gio=o(" (Hubert model)"),hio=l(),is=a("li"),$se=a("strong"),uio=o("ibert"),pio=o(" \u2014 "),xB=a("a"),_io=o("RobertaTokenizer"),bio=o(" or "),$B=a("a"),vio=o("RobertaTokenizerFast"),Fio=o(" (I-BERT model)"),Tio=l(),ds=a("li"),kse=a("strong"),Mio=o("layoutlm"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("LayoutLMTokenizer"),wio=o(" or "),SB=a("a"),Aio=o("LayoutLMTokenizerFast"),Lio=o(" (LayoutLM model)"),yio=l(),cs=a("li"),Sse=a("strong"),xio=o("layoutlmv2"),$io=o(" \u2014 "),RB=a("a"),kio=o("LayoutLMv2Tokenizer"),Sio=o(" or "),PB=a("a"),Rio=o("LayoutLMv2TokenizerFast"),Pio=o(" (LayoutLMv2 model)"),Bio=l(),ms=a("li"),Rse=a("strong"),Iio=o("layoutlmv3"),Nio=o(" \u2014 "),BB=a("a"),qio=o("LayoutLMv3Tokenizer"),jio=o(" or "),IB=a("a"),Dio=o("LayoutLMv3TokenizerFast"),Gio=o(" (LayoutLMv3 model)"),Oio=l(),fs=a("li"),Pse=a("strong"),Vio=o("layoutxlm"),Xio=o(" \u2014 "),NB=a("a"),zio=o("LayoutXLMTokenizer"),Qio=o(" or "),qB=a("a"),Wio=o("LayoutXLMTokenizerFast"),Hio=o(" (LayoutXLM model)"),Uio=l(),gs=a("li"),Bse=a("strong"),Jio=o("led"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("LEDTokenizer"),Zio=o(" or "),DB=a("a"),edo=o("LEDTokenizerFast"),odo=o(" (LED model)"),rdo=l(),hs=a("li"),Ise=a("strong"),tdo=o("longformer"),ado=o(" \u2014 "),GB=a("a"),ndo=o("LongformerTokenizer"),sdo=o(" or "),OB=a("a"),ldo=o("LongformerTokenizerFast"),ido=o(" (Longformer model)"),ddo=l(),us=a("li"),Nse=a("strong"),cdo=o("longt5"),mdo=o(" \u2014 "),VB=a("a"),fdo=o("T5Tokenizer"),gdo=o(" or "),XB=a("a"),hdo=o("T5TokenizerFast"),udo=o(" (LongT5 model)"),pdo=l(),nh=a("li"),qse=a("strong"),_do=o("luke"),bdo=o(" \u2014 "),zB=a("a"),vdo=o("LukeTokenizer"),Fdo=o(" (LUKE model)"),Tdo=l(),ps=a("li"),jse=a("strong"),Mdo=o("lxmert"),Edo=o(" \u2014 "),QB=a("a"),Cdo=o("LxmertTokenizer"),wdo=o(" or "),WB=a("a"),Ado=o("LxmertTokenizerFast"),Ldo=o(" (LXMERT model)"),ydo=l(),sh=a("li"),Dse=a("strong"),xdo=o("m2m_100"),$do=o(" \u2014 "),HB=a("a"),kdo=o("M2M100Tokenizer"),Sdo=o(" (M2M100 model)"),Rdo=l(),lh=a("li"),Gse=a("strong"),Pdo=o("marian"),Bdo=o(" \u2014 "),UB=a("a"),Ido=o("MarianTokenizer"),Ndo=o(" (Marian model)"),qdo=l(),_s=a("li"),Ose=a("strong"),jdo=o("mbart"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("MBartTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("MBartTokenizerFast"),Xdo=o(" (mBART model)"),zdo=l(),bs=a("li"),Vse=a("strong"),Qdo=o("mbart50"),Wdo=o(" \u2014 "),KB=a("a"),Hdo=o("MBart50Tokenizer"),Udo=o(" or "),ZB=a("a"),Jdo=o("MBart50TokenizerFast"),Ydo=o(" (mBART-50 model)"),Kdo=l(),vs=a("li"),Xse=a("strong"),Zdo=o("megatron-bert"),eco=o(" \u2014 "),eI=a("a"),oco=o("BertTokenizer"),rco=o(" or "),oI=a("a"),tco=o("BertTokenizerFast"),aco=o(" (Megatron-BERT model)"),nco=l(),ih=a("li"),zse=a("strong"),sco=o("mluke"),lco=o(" \u2014 "),rI=a("a"),ico=o("MLukeTokenizer"),dco=o(" (mLUKE model)"),cco=l(),Fs=a("li"),Qse=a("strong"),mco=o("mobilebert"),fco=o(" \u2014 "),tI=a("a"),gco=o("MobileBertTokenizer"),hco=o(" or "),aI=a("a"),uco=o("MobileBertTokenizerFast"),pco=o(" (MobileBERT model)"),_co=l(),Ts=a("li"),Wse=a("strong"),bco=o("mpnet"),vco=o(" \u2014 "),nI=a("a"),Fco=o("MPNetTokenizer"),Tco=o(" or "),sI=a("a"),Mco=o("MPNetTokenizerFast"),Eco=o(" (MPNet model)"),Cco=l(),Ms=a("li"),Hse=a("strong"),wco=o("mt5"),Aco=o(" \u2014 "),lI=a("a"),Lco=o("MT5Tokenizer"),yco=o(" or "),iI=a("a"),xco=o("MT5TokenizerFast"),$co=o(" (MT5 model)"),kco=l(),Es=a("li"),Use=a("strong"),Sco=o("nezha"),Rco=o(" \u2014 "),dI=a("a"),Pco=o("BertTokenizer"),Bco=o(" or "),cI=a("a"),Ico=o("BertTokenizerFast"),Nco=o(" (Nezha model)"),qco=l(),Cs=a("li"),Jse=a("strong"),jco=o("nystromformer"),Dco=o(" \u2014 "),mI=a("a"),Gco=o("AlbertTokenizer"),Oco=o(" or "),fI=a("a"),Vco=o("AlbertTokenizerFast"),Xco=o(" (Nystr\xF6mformer model)"),zco=l(),ws=a("li"),Yse=a("strong"),Qco=o("openai-gpt"),Wco=o(" \u2014 "),gI=a("a"),Hco=o("OpenAIGPTTokenizer"),Uco=o(" or "),hI=a("a"),Jco=o("OpenAIGPTTokenizerFast"),Yco=o(" (OpenAI GPT model)"),Kco=l(),dh=a("li"),Kse=a("strong"),Zco=o("opt"),emo=o(" \u2014 "),uI=a("a"),omo=o("GPT2Tokenizer"),rmo=o(" (OPT model)"),tmo=l(),As=a("li"),Zse=a("strong"),amo=o("pegasus"),nmo=o(" \u2014 "),pI=a("a"),smo=o("PegasusTokenizer"),lmo=o(" or "),_I=a("a"),imo=o("PegasusTokenizerFast"),dmo=o(" (Pegasus model)"),cmo=l(),ch=a("li"),ele=a("strong"),mmo=o("perceiver"),fmo=o(" \u2014 "),bI=a("a"),gmo=o("PerceiverTokenizer"),hmo=o(" (Perceiver model)"),umo=l(),mh=a("li"),ole=a("strong"),pmo=o("phobert"),_mo=o(" \u2014 "),vI=a("a"),bmo=o("PhobertTokenizer"),vmo=o(" (PhoBERT model)"),Fmo=l(),fh=a("li"),rle=a("strong"),Tmo=o("plbart"),Mmo=o(" \u2014 "),FI=a("a"),Emo=o("PLBartTokenizer"),Cmo=o(" (PLBart model)"),wmo=l(),gh=a("li"),tle=a("strong"),Amo=o("prophetnet"),Lmo=o(" \u2014 "),TI=a("a"),ymo=o("ProphetNetTokenizer"),xmo=o(" (ProphetNet model)"),$mo=l(),Ls=a("li"),ale=a("strong"),kmo=o("qdqbert"),Smo=o(" \u2014 "),MI=a("a"),Rmo=o("BertTokenizer"),Pmo=o(" or "),EI=a("a"),Bmo=o("BertTokenizerFast"),Imo=o(" (QDQBert model)"),Nmo=l(),hh=a("li"),nle=a("strong"),qmo=o("rag"),jmo=o(" \u2014 "),CI=a("a"),Dmo=o("RagTokenizer"),Gmo=o(" (RAG model)"),Omo=l(),ys=a("li"),sle=a("strong"),Vmo=o("realm"),Xmo=o(" \u2014 "),wI=a("a"),zmo=o("RealmTokenizer"),Qmo=o(" or "),AI=a("a"),Wmo=o("RealmTokenizerFast"),Hmo=o(" (REALM model)"),Umo=l(),xs=a("li"),lle=a("strong"),Jmo=o("reformer"),Ymo=o(" \u2014 "),LI=a("a"),Kmo=o("ReformerTokenizer"),Zmo=o(" or "),yI=a("a"),efo=o("ReformerTokenizerFast"),ofo=o(" (Reformer model)"),rfo=l(),$s=a("li"),ile=a("strong"),tfo=o("rembert"),afo=o(" \u2014 "),xI=a("a"),nfo=o("RemBertTokenizer"),sfo=o(" or "),$I=a("a"),lfo=o("RemBertTokenizerFast"),ifo=o(" (RemBERT model)"),dfo=l(),ks=a("li"),dle=a("strong"),cfo=o("retribert"),mfo=o(" \u2014 "),kI=a("a"),ffo=o("RetriBertTokenizer"),gfo=o(" or "),SI=a("a"),hfo=o("RetriBertTokenizerFast"),ufo=o(" (RetriBERT model)"),pfo=l(),Ss=a("li"),cle=a("strong"),_fo=o("roberta"),bfo=o(" \u2014 "),RI=a("a"),vfo=o("RobertaTokenizer"),Ffo=o(" or "),PI=a("a"),Tfo=o("RobertaTokenizerFast"),Mfo=o(" (RoBERTa model)"),Efo=l(),Rs=a("li"),mle=a("strong"),Cfo=o("roformer"),wfo=o(" \u2014 "),BI=a("a"),Afo=o("RoFormerTokenizer"),Lfo=o(" or "),II=a("a"),yfo=o("RoFormerTokenizerFast"),xfo=o(" (RoFormer model)"),$fo=l(),uh=a("li"),fle=a("strong"),kfo=o("speech_to_text"),Sfo=o(" \u2014 "),NI=a("a"),Rfo=o("Speech2TextTokenizer"),Pfo=o(" (Speech2Text model)"),Bfo=l(),ph=a("li"),gle=a("strong"),Ifo=o("speech_to_text_2"),Nfo=o(" \u2014 "),qI=a("a"),qfo=o("Speech2Text2Tokenizer"),jfo=o(" (Speech2Text2 model)"),Dfo=l(),Ps=a("li"),hle=a("strong"),Gfo=o("splinter"),Ofo=o(" \u2014 "),jI=a("a"),Vfo=o("SplinterTokenizer"),Xfo=o(" or "),DI=a("a"),zfo=o("SplinterTokenizerFast"),Qfo=o(" (Splinter model)"),Wfo=l(),Bs=a("li"),ule=a("strong"),Hfo=o("squeezebert"),Ufo=o(" \u2014 "),GI=a("a"),Jfo=o("SqueezeBertTokenizer"),Yfo=o(" or "),OI=a("a"),Kfo=o("SqueezeBertTokenizerFast"),Zfo=o(" (SqueezeBERT model)"),ego=l(),Is=a("li"),ple=a("strong"),ogo=o("t5"),rgo=o(" \u2014 "),VI=a("a"),tgo=o("T5Tokenizer"),ago=o(" or "),XI=a("a"),ngo=o("T5TokenizerFast"),sgo=o(" (T5 model)"),lgo=l(),_h=a("li"),_le=a("strong"),igo=o("tapas"),dgo=o(" \u2014 "),zI=a("a"),cgo=o("TapasTokenizer"),mgo=o(" (TAPAS model)"),fgo=l(),bh=a("li"),ble=a("strong"),ggo=o("tapex"),hgo=o(" \u2014 "),QI=a("a"),ugo=o("TapexTokenizer"),pgo=o(" (TAPEX model)"),_go=l(),vh=a("li"),vle=a("strong"),bgo=o("transfo-xl"),vgo=o(" \u2014 "),WI=a("a"),Fgo=o("TransfoXLTokenizer"),Tgo=o(" (Transformer-XL model)"),Mgo=l(),Ns=a("li"),Fle=a("strong"),Ego=o("vilt"),Cgo=o(" \u2014 "),HI=a("a"),wgo=o("BertTokenizer"),Ago=o(" or "),UI=a("a"),Lgo=o("BertTokenizerFast"),ygo=o(" (ViLT model)"),xgo=l(),qs=a("li"),Tle=a("strong"),$go=o("visual_bert"),kgo=o(" \u2014 "),JI=a("a"),Sgo=o("BertTokenizer"),Rgo=o(" or "),YI=a("a"),Pgo=o("BertTokenizerFast"),Bgo=o(" (VisualBERT model)"),Igo=l(),Fh=a("li"),Mle=a("strong"),Ngo=o("wav2vec2"),qgo=o(" \u2014 "),KI=a("a"),jgo=o("Wav2Vec2CTCTokenizer"),Dgo=o(" (Wav2Vec2 model)"),Ggo=l(),Th=a("li"),Ele=a("strong"),Ogo=o("wav2vec2-conformer"),Vgo=o(" \u2014 "),ZI=a("a"),Xgo=o("Wav2Vec2CTCTokenizer"),zgo=o(" (Wav2Vec2-Conformer model)"),Qgo=l(),Mh=a("li"),Cle=a("strong"),Wgo=o("wav2vec2_phoneme"),Hgo=o(" \u2014 "),eN=a("a"),Ugo=o("Wav2Vec2PhonemeCTCTokenizer"),Jgo=o(" (Wav2Vec2Phoneme model)"),Ygo=l(),js=a("li"),wle=a("strong"),Kgo=o("xglm"),Zgo=o(" \u2014 "),oN=a("a"),eho=o("XGLMTokenizer"),oho=o(" or "),rN=a("a"),rho=o("XGLMTokenizerFast"),tho=o(" (XGLM model)"),aho=l(),Eh=a("li"),Ale=a("strong"),nho=o("xlm"),sho=o(" \u2014 "),tN=a("a"),lho=o("XLMTokenizer"),iho=o(" (XLM model)"),dho=l(),Ch=a("li"),Lle=a("strong"),cho=o("xlm-prophetnet"),mho=o(" \u2014 "),aN=a("a"),fho=o("XLMProphetNetTokenizer"),gho=o(" (XLM-ProphetNet model)"),hho=l(),Ds=a("li"),yle=a("strong"),uho=o("xlm-roberta"),pho=o(" \u2014 "),nN=a("a"),_ho=o("XLMRobertaTokenizer"),bho=o(" or "),sN=a("a"),vho=o("XLMRobertaTokenizerFast"),Fho=o(" (XLM-RoBERTa model)"),Tho=l(),Gs=a("li"),xle=a("strong"),Mho=o("xlm-roberta-xl"),Eho=o(" \u2014 "),lN=a("a"),Cho=o("RobertaTokenizer"),who=o(" or "),iN=a("a"),Aho=o("RobertaTokenizerFast"),Lho=o(" (XLM-RoBERTa-XL model)"),yho=l(),Os=a("li"),$le=a("strong"),xho=o("xlnet"),$ho=o(" \u2014 "),dN=a("a"),kho=o("XLNetTokenizer"),Sho=o(" or "),cN=a("a"),Rho=o("XLNetTokenizerFast"),Pho=o(" (XLNet model)"),Bho=l(),Vs=a("li"),kle=a("strong"),Iho=o("yoso"),Nho=o(" \u2014 "),mN=a("a"),qho=o("AlbertTokenizer"),jho=o(" or "),fN=a("a"),Dho=o("AlbertTokenizerFast"),Gho=o(" (YOSO model)"),Oho=l(),F(wh.$$.fragment),Vho=l(),Ah=a("div"),F(Q7.$$.fragment),Xho=l(),Sle=a("p"),zho=o("Register a new tokenizer in this mapping."),mOe=l(),Ri=a("h2"),Lh=a("a"),Rle=a("span"),F(W7.$$.fragment),Qho=l(),Ple=a("span"),Who=o("AutoFeatureExtractor"),fOe=l(),Lo=a("div"),F(H7.$$.fragment),Hho=l(),U7=a("p"),Uho=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gN=a("a"),Jho=o("AutoFeatureExtractor.from_pretrained()"),Yho=o(" class method."),Kho=l(),J7=a("p"),Zho=o("This class cannot be instantiated directly using "),Ble=a("code"),euo=o("__init__()"),ouo=o(" (throws an error)."),ruo=l(),He=a("div"),F(Y7.$$.fragment),tuo=l(),Ile=a("p"),auo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),nuo=l(),Sa=a("p"),suo=o("The feature extractor class to instantiate is selected based on the "),Nle=a("code"),luo=o("model_type"),iuo=o(` property of the config object
(either passed as an argument or loaded from `),qle=a("code"),duo=o("pretrained_model_name_or_path"),cuo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jle=a("code"),muo=o("pretrained_model_name_or_path"),fuo=o(":"),guo=l(),Y=a("ul"),yh=a("li"),Dle=a("strong"),huo=o("beit"),uuo=o(" \u2014 "),hN=a("a"),puo=o("BeitFeatureExtractor"),_uo=o(" (BEiT model)"),buo=l(),xh=a("li"),Gle=a("strong"),vuo=o("clip"),Fuo=o(" \u2014 "),uN=a("a"),Tuo=o("CLIPFeatureExtractor"),Muo=o(" (CLIP model)"),Euo=l(),$h=a("li"),Ole=a("strong"),Cuo=o("convnext"),wuo=o(" \u2014 "),pN=a("a"),Auo=o("ConvNextFeatureExtractor"),Luo=o(" (ConvNeXT model)"),yuo=l(),kh=a("li"),Vle=a("strong"),xuo=o("cvt"),$uo=o(" \u2014 "),_N=a("a"),kuo=o("ConvNextFeatureExtractor"),Suo=o(" (CvT model)"),Ruo=l(),Sh=a("li"),Xle=a("strong"),Puo=o("data2vec-audio"),Buo=o(" \u2014 "),bN=a("a"),Iuo=o("Wav2Vec2FeatureExtractor"),Nuo=o(" (Data2VecAudio model)"),quo=l(),Rh=a("li"),zle=a("strong"),juo=o("data2vec-vision"),Duo=o(" \u2014 "),vN=a("a"),Guo=o("BeitFeatureExtractor"),Ouo=o(" (Data2VecVision model)"),Vuo=l(),Ph=a("li"),Qle=a("strong"),Xuo=o("deit"),zuo=o(" \u2014 "),FN=a("a"),Quo=o("DeiTFeatureExtractor"),Wuo=o(" (DeiT model)"),Huo=l(),Bh=a("li"),Wle=a("strong"),Uuo=o("detr"),Juo=o(" \u2014 "),TN=a("a"),Yuo=o("DetrFeatureExtractor"),Kuo=o(" (DETR model)"),Zuo=l(),Ih=a("li"),Hle=a("strong"),epo=o("dpt"),opo=o(" \u2014 "),MN=a("a"),rpo=o("DPTFeatureExtractor"),tpo=o(" (DPT model)"),apo=l(),Nh=a("li"),Ule=a("strong"),npo=o("flava"),spo=o(" \u2014 "),EN=a("a"),lpo=o("FlavaFeatureExtractor"),ipo=o(" (FLAVA model)"),dpo=l(),qh=a("li"),Jle=a("strong"),cpo=o("glpn"),mpo=o(" \u2014 "),CN=a("a"),fpo=o("GLPNFeatureExtractor"),gpo=o(" (GLPN model)"),hpo=l(),jh=a("li"),Yle=a("strong"),upo=o("hubert"),ppo=o(" \u2014 "),wN=a("a"),_po=o("Wav2Vec2FeatureExtractor"),bpo=o(" (Hubert model)"),vpo=l(),Dh=a("li"),Kle=a("strong"),Fpo=o("imagegpt"),Tpo=o(" \u2014 "),AN=a("a"),Mpo=o("ImageGPTFeatureExtractor"),Epo=o(" (ImageGPT model)"),Cpo=l(),Gh=a("li"),Zle=a("strong"),wpo=o("layoutlmv2"),Apo=o(" \u2014 "),LN=a("a"),Lpo=o("LayoutLMv2FeatureExtractor"),ypo=o(" (LayoutLMv2 model)"),xpo=l(),Oh=a("li"),eie=a("strong"),$po=o("layoutlmv3"),kpo=o(" \u2014 "),yN=a("a"),Spo=o("LayoutLMv3FeatureExtractor"),Rpo=o(" (LayoutLMv3 model)"),Ppo=l(),Vh=a("li"),oie=a("strong"),Bpo=o("levit"),Ipo=o(" \u2014 "),xN=a("a"),Npo=o("LevitFeatureExtractor"),qpo=o(" (LeViT model)"),jpo=l(),Xh=a("li"),rie=a("strong"),Dpo=o("maskformer"),Gpo=o(" \u2014 "),$N=a("a"),Opo=o("MaskFormerFeatureExtractor"),Vpo=o(" (MaskFormer model)"),Xpo=l(),zh=a("li"),tie=a("strong"),zpo=o("mctct"),Qpo=o(" \u2014 "),kN=a("a"),Wpo=o("MCTCTFeatureExtractor"),Hpo=o(" (M-CTC-T model)"),Upo=l(),Qh=a("li"),aie=a("strong"),Jpo=o("perceiver"),Ypo=o(" \u2014 "),SN=a("a"),Kpo=o("PerceiverFeatureExtractor"),Zpo=o(" (Perceiver model)"),e_o=l(),Wh=a("li"),nie=a("strong"),o_o=o("poolformer"),r_o=o(" \u2014 "),RN=a("a"),t_o=o("PoolFormerFeatureExtractor"),a_o=o(" (PoolFormer model)"),n_o=l(),Hh=a("li"),sie=a("strong"),s_o=o("regnet"),l_o=o(" \u2014 "),PN=a("a"),i_o=o("ConvNextFeatureExtractor"),d_o=o(" (RegNet model)"),c_o=l(),Uh=a("li"),lie=a("strong"),m_o=o("resnet"),f_o=o(" \u2014 "),BN=a("a"),g_o=o("ConvNextFeatureExtractor"),h_o=o(" (ResNet model)"),u_o=l(),Jh=a("li"),iie=a("strong"),p_o=o("segformer"),__o=o(" \u2014 "),IN=a("a"),b_o=o("SegformerFeatureExtractor"),v_o=o(" (SegFormer model)"),F_o=l(),Yh=a("li"),die=a("strong"),T_o=o("speech_to_text"),M_o=o(" \u2014 "),NN=a("a"),E_o=o("Speech2TextFeatureExtractor"),C_o=o(" (Speech2Text model)"),w_o=l(),Kh=a("li"),cie=a("strong"),A_o=o("swin"),L_o=o(" \u2014 "),qN=a("a"),y_o=o("ViTFeatureExtractor"),x_o=o(" (Swin Transformer model)"),$_o=l(),Zh=a("li"),mie=a("strong"),k_o=o("van"),S_o=o(" \u2014 "),jN=a("a"),R_o=o("ConvNextFeatureExtractor"),P_o=o(" (VAN model)"),B_o=l(),eu=a("li"),fie=a("strong"),I_o=o("vilt"),N_o=o(" \u2014 "),DN=a("a"),q_o=o("ViltFeatureExtractor"),j_o=o(" (ViLT model)"),D_o=l(),ou=a("li"),gie=a("strong"),G_o=o("vit"),O_o=o(" \u2014 "),GN=a("a"),V_o=o("ViTFeatureExtractor"),X_o=o(" (ViT model)"),z_o=l(),ru=a("li"),hie=a("strong"),Q_o=o("vit_mae"),W_o=o(" \u2014 "),ON=a("a"),H_o=o("ViTFeatureExtractor"),U_o=o(" (ViTMAE model)"),J_o=l(),tu=a("li"),uie=a("strong"),Y_o=o("wav2vec2"),K_o=o(" \u2014 "),VN=a("a"),Z_o=o("Wav2Vec2FeatureExtractor"),e2o=o(" (Wav2Vec2 model)"),o2o=l(),au=a("li"),pie=a("strong"),r2o=o("wav2vec2-conformer"),t2o=o(" \u2014 "),XN=a("a"),a2o=o("Wav2Vec2FeatureExtractor"),n2o=o(" (Wav2Vec2-Conformer model)"),s2o=l(),nu=a("li"),_ie=a("strong"),l2o=o("yolos"),i2o=o(" \u2014 "),zN=a("a"),d2o=o("YolosFeatureExtractor"),c2o=o(" (YOLOS model)"),m2o=l(),F(su.$$.fragment),f2o=l(),F(lu.$$.fragment),g2o=l(),iu=a("div"),F(K7.$$.fragment),h2o=l(),bie=a("p"),u2o=o("Register a new feature extractor for this class."),gOe=l(),Pi=a("h2"),du=a("a"),vie=a("span"),F(Z7.$$.fragment),p2o=l(),Fie=a("span"),_2o=o("AutoProcessor"),hOe=l(),yo=a("div"),F(ey.$$.fragment),b2o=l(),oy=a("p"),v2o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QN=a("a"),F2o=o("AutoProcessor.from_pretrained()"),T2o=o(" class method."),M2o=l(),ry=a("p"),E2o=o("This class cannot be instantiated directly using "),Tie=a("code"),C2o=o("__init__()"),w2o=o(" (throws an error)."),A2o=l(),Ue=a("div"),F(ty.$$.fragment),L2o=l(),Mie=a("p"),y2o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),x2o=l(),Bi=a("p"),$2o=o("The processor class to instantiate is selected based on the "),Eie=a("code"),k2o=o("model_type"),S2o=o(` property of the config object (either
passed as an argument or loaded from `),Cie=a("code"),R2o=o("pretrained_model_name_or_path"),P2o=o(" if possible):"),B2o=l(),he=a("ul"),cu=a("li"),wie=a("strong"),I2o=o("clip"),N2o=o(" \u2014 "),WN=a("a"),q2o=o("CLIPProcessor"),j2o=o(" (CLIP model)"),D2o=l(),mu=a("li"),Aie=a("strong"),G2o=o("flava"),O2o=o(" \u2014 "),Lie=a("code"),V2o=o("FLAVAProcessor"),X2o=o(" (FLAVA model)"),z2o=l(),fu=a("li"),yie=a("strong"),Q2o=o("layoutlmv2"),W2o=o(" \u2014 "),HN=a("a"),H2o=o("LayoutLMv2Processor"),U2o=o(" (LayoutLMv2 model)"),J2o=l(),gu=a("li"),xie=a("strong"),Y2o=o("layoutlmv3"),K2o=o(" \u2014 "),UN=a("a"),Z2o=o("LayoutLMv3Processor"),ebo=o(" (LayoutLMv3 model)"),obo=l(),hu=a("li"),$ie=a("strong"),rbo=o("layoutxlm"),tbo=o(" \u2014 "),JN=a("a"),abo=o("LayoutXLMProcessor"),nbo=o(" (LayoutXLM model)"),sbo=l(),uu=a("li"),kie=a("strong"),lbo=o("sew"),ibo=o(" \u2014 "),YN=a("a"),dbo=o("Wav2Vec2Processor"),cbo=o(" (SEW model)"),mbo=l(),pu=a("li"),Sie=a("strong"),fbo=o("sew-d"),gbo=o(" \u2014 "),KN=a("a"),hbo=o("Wav2Vec2Processor"),ubo=o(" (SEW-D model)"),pbo=l(),_u=a("li"),Rie=a("strong"),_bo=o("speech_to_text"),bbo=o(" \u2014 "),ZN=a("a"),vbo=o("Speech2TextProcessor"),Fbo=o(" (Speech2Text model)"),Tbo=l(),bu=a("li"),Pie=a("strong"),Mbo=o("speech_to_text_2"),Ebo=o(" \u2014 "),eq=a("a"),Cbo=o("Speech2Text2Processor"),wbo=o(" (Speech2Text2 model)"),Abo=l(),vu=a("li"),Bie=a("strong"),Lbo=o("trocr"),ybo=o(" \u2014 "),oq=a("a"),xbo=o("TrOCRProcessor"),$bo=o(" (TrOCR model)"),kbo=l(),Fu=a("li"),Iie=a("strong"),Sbo=o("unispeech"),Rbo=o(" \u2014 "),rq=a("a"),Pbo=o("Wav2Vec2Processor"),Bbo=o(" (UniSpeech model)"),Ibo=l(),Tu=a("li"),Nie=a("strong"),Nbo=o("unispeech-sat"),qbo=o(" \u2014 "),tq=a("a"),jbo=o("Wav2Vec2Processor"),Dbo=o(" (UniSpeechSat model)"),Gbo=l(),Mu=a("li"),qie=a("strong"),Obo=o("vilt"),Vbo=o(" \u2014 "),aq=a("a"),Xbo=o("ViltProcessor"),zbo=o(" (ViLT model)"),Qbo=l(),Eu=a("li"),jie=a("strong"),Wbo=o("vision-text-dual-encoder"),Hbo=o(" \u2014 "),nq=a("a"),Ubo=o("VisionTextDualEncoderProcessor"),Jbo=o(" (VisionTextDualEncoder model)"),Ybo=l(),Cu=a("li"),Die=a("strong"),Kbo=o("wav2vec2"),Zbo=o(" \u2014 "),sq=a("a"),evo=o("Wav2Vec2Processor"),ovo=o(" (Wav2Vec2 model)"),rvo=l(),wu=a("li"),Gie=a("strong"),tvo=o("wav2vec2-conformer"),avo=o(" \u2014 "),lq=a("a"),nvo=o("Wav2Vec2Processor"),svo=o(" (Wav2Vec2-Conformer model)"),lvo=l(),Au=a("li"),Oie=a("strong"),ivo=o("wavlm"),dvo=o(" \u2014 "),iq=a("a"),cvo=o("Wav2Vec2Processor"),mvo=o(" (WavLM model)"),fvo=l(),F(Lu.$$.fragment),gvo=l(),F(yu.$$.fragment),hvo=l(),xu=a("div"),F(ay.$$.fragment),uvo=l(),Vie=a("p"),pvo=o("Register a new processor for this class."),uOe=l(),Ii=a("h2"),$u=a("a"),Xie=a("span"),F(ny.$$.fragment),_vo=l(),zie=a("span"),bvo=o("AutoModel"),pOe=l(),xo=a("div"),F(sy.$$.fragment),vvo=l(),Ni=a("p"),Fvo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dq=a("a"),Tvo=o("from_pretrained()"),Mvo=o(" class method or the "),cq=a("a"),Evo=o("from_config()"),Cvo=o(` class
method.`),wvo=l(),ly=a("p"),Avo=o("This class cannot be instantiated directly using "),Qie=a("code"),Lvo=o("__init__()"),yvo=o(" (throws an error)."),xvo=l(),nt=a("div"),F(iy.$$.fragment),$vo=l(),Wie=a("p"),kvo=o("Instantiates one of the base model classes of the library from a configuration."),Svo=l(),qi=a("p"),Rvo=o(`Note:
Loading a model from its configuration file does `),Hie=a("strong"),Pvo=o("not"),Bvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=a("a"),Ivo=o("from_pretrained()"),Nvo=o(" to load the model weights."),qvo=l(),F(ku.$$.fragment),jvo=l(),Je=a("div"),F(dy.$$.fragment),Dvo=l(),Uie=a("p"),Gvo=o("Instantiate one of the base model classes of the library from a pretrained model."),Ovo=l(),Ra=a("p"),Vvo=o("The model class to instantiate is selected based on the "),Jie=a("code"),Xvo=o("model_type"),zvo=o(` property of the config object (either
passed as an argument or loaded from `),Yie=a("code"),Qvo=o("pretrained_model_name_or_path"),Wvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=a("code"),Hvo=o("pretrained_model_name_or_path"),Uvo=o(":"),Jvo=l(),y=a("ul"),Su=a("li"),Zie=a("strong"),Yvo=o("albert"),Kvo=o(" \u2014 "),fq=a("a"),Zvo=o("AlbertModel"),eFo=o(" (ALBERT model)"),oFo=l(),Ru=a("li"),ede=a("strong"),rFo=o("bart"),tFo=o(" \u2014 "),gq=a("a"),aFo=o("BartModel"),nFo=o(" (BART model)"),sFo=l(),Pu=a("li"),ode=a("strong"),lFo=o("beit"),iFo=o(" \u2014 "),hq=a("a"),dFo=o("BeitModel"),cFo=o(" (BEiT model)"),mFo=l(),Bu=a("li"),rde=a("strong"),fFo=o("bert"),gFo=o(" \u2014 "),uq=a("a"),hFo=o("BertModel"),uFo=o(" (BERT model)"),pFo=l(),Iu=a("li"),tde=a("strong"),_Fo=o("bert-generation"),bFo=o(" \u2014 "),pq=a("a"),vFo=o("BertGenerationEncoder"),FFo=o(" (Bert Generation model)"),TFo=l(),Nu=a("li"),ade=a("strong"),MFo=o("big_bird"),EFo=o(" \u2014 "),_q=a("a"),CFo=o("BigBirdModel"),wFo=o(" (BigBird model)"),AFo=l(),qu=a("li"),nde=a("strong"),LFo=o("bigbird_pegasus"),yFo=o(" \u2014 "),bq=a("a"),xFo=o("BigBirdPegasusModel"),$Fo=o(" (BigBird-Pegasus model)"),kFo=l(),ju=a("li"),sde=a("strong"),SFo=o("blenderbot"),RFo=o(" \u2014 "),vq=a("a"),PFo=o("BlenderbotModel"),BFo=o(" (Blenderbot model)"),IFo=l(),Du=a("li"),lde=a("strong"),NFo=o("blenderbot-small"),qFo=o(" \u2014 "),Fq=a("a"),jFo=o("BlenderbotSmallModel"),DFo=o(" (BlenderbotSmall model)"),GFo=l(),Gu=a("li"),ide=a("strong"),OFo=o("bloom"),VFo=o(" \u2014 "),Tq=a("a"),XFo=o("BloomModel"),zFo=o(" (BLOOM model)"),QFo=l(),Ou=a("li"),dde=a("strong"),WFo=o("camembert"),HFo=o(" \u2014 "),Mq=a("a"),UFo=o("CamembertModel"),JFo=o(" (CamemBERT model)"),YFo=l(),Vu=a("li"),cde=a("strong"),KFo=o("canine"),ZFo=o(" \u2014 "),Eq=a("a"),e1o=o("CanineModel"),o1o=o(" (CANINE model)"),r1o=l(),Xu=a("li"),mde=a("strong"),t1o=o("clip"),a1o=o(" \u2014 "),Cq=a("a"),n1o=o("CLIPModel"),s1o=o(" (CLIP model)"),l1o=l(),zu=a("li"),fde=a("strong"),i1o=o("codegen"),d1o=o(" \u2014 "),wq=a("a"),c1o=o("CodeGenModel"),m1o=o(" (CodeGen model)"),f1o=l(),Qu=a("li"),gde=a("strong"),g1o=o("convbert"),h1o=o(" \u2014 "),Aq=a("a"),u1o=o("ConvBertModel"),p1o=o(" (ConvBERT model)"),_1o=l(),Wu=a("li"),hde=a("strong"),b1o=o("convnext"),v1o=o(" \u2014 "),Lq=a("a"),F1o=o("ConvNextModel"),T1o=o(" (ConvNeXT model)"),M1o=l(),Hu=a("li"),ude=a("strong"),E1o=o("ctrl"),C1o=o(" \u2014 "),yq=a("a"),w1o=o("CTRLModel"),A1o=o(" (CTRL model)"),L1o=l(),Uu=a("li"),pde=a("strong"),y1o=o("cvt"),x1o=o(" \u2014 "),xq=a("a"),$1o=o("CvtModel"),k1o=o(" (CvT model)"),S1o=l(),Ju=a("li"),_de=a("strong"),R1o=o("data2vec-audio"),P1o=o(" \u2014 "),$q=a("a"),B1o=o("Data2VecAudioModel"),I1o=o(" (Data2VecAudio model)"),N1o=l(),Yu=a("li"),bde=a("strong"),q1o=o("data2vec-text"),j1o=o(" \u2014 "),kq=a("a"),D1o=o("Data2VecTextModel"),G1o=o(" (Data2VecText model)"),O1o=l(),Ku=a("li"),vde=a("strong"),V1o=o("data2vec-vision"),X1o=o(" \u2014 "),Sq=a("a"),z1o=o("Data2VecVisionModel"),Q1o=o(" (Data2VecVision model)"),W1o=l(),Zu=a("li"),Fde=a("strong"),H1o=o("deberta"),U1o=o(" \u2014 "),Rq=a("a"),J1o=o("DebertaModel"),Y1o=o(" (DeBERTa model)"),K1o=l(),ep=a("li"),Tde=a("strong"),Z1o=o("deberta-v2"),eTo=o(" \u2014 "),Pq=a("a"),oTo=o("DebertaV2Model"),rTo=o(" (DeBERTa-v2 model)"),tTo=l(),op=a("li"),Mde=a("strong"),aTo=o("decision_transformer"),nTo=o(" \u2014 "),Bq=a("a"),sTo=o("DecisionTransformerModel"),lTo=o(" (Decision Transformer model)"),iTo=l(),rp=a("li"),Ede=a("strong"),dTo=o("deit"),cTo=o(" \u2014 "),Iq=a("a"),mTo=o("DeiTModel"),fTo=o(" (DeiT model)"),gTo=l(),tp=a("li"),Cde=a("strong"),hTo=o("detr"),uTo=o(" \u2014 "),Nq=a("a"),pTo=o("DetrModel"),_To=o(" (DETR model)"),bTo=l(),ap=a("li"),wde=a("strong"),vTo=o("distilbert"),FTo=o(" \u2014 "),qq=a("a"),TTo=o("DistilBertModel"),MTo=o(" (DistilBERT model)"),ETo=l(),np=a("li"),Ade=a("strong"),CTo=o("dpr"),wTo=o(" \u2014 "),jq=a("a"),ATo=o("DPRQuestionEncoder"),LTo=o(" (DPR model)"),yTo=l(),sp=a("li"),Lde=a("strong"),xTo=o("dpt"),$To=o(" \u2014 "),Dq=a("a"),kTo=o("DPTModel"),STo=o(" (DPT model)"),RTo=l(),lp=a("li"),yde=a("strong"),PTo=o("electra"),BTo=o(" \u2014 "),Gq=a("a"),ITo=o("ElectraModel"),NTo=o(" (ELECTRA model)"),qTo=l(),ip=a("li"),xde=a("strong"),jTo=o("flaubert"),DTo=o(" \u2014 "),Oq=a("a"),GTo=o("FlaubertModel"),OTo=o(" (FlauBERT model)"),VTo=l(),dp=a("li"),$de=a("strong"),XTo=o("flava"),zTo=o(" \u2014 "),Vq=a("a"),QTo=o("FlavaModel"),WTo=o(" (FLAVA model)"),HTo=l(),cp=a("li"),kde=a("strong"),UTo=o("fnet"),JTo=o(" \u2014 "),Xq=a("a"),YTo=o("FNetModel"),KTo=o(" (FNet model)"),ZTo=l(),mp=a("li"),Sde=a("strong"),eMo=o("fsmt"),oMo=o(" \u2014 "),zq=a("a"),rMo=o("FSMTModel"),tMo=o(" (FairSeq Machine-Translation model)"),aMo=l(),Xs=a("li"),Rde=a("strong"),nMo=o("funnel"),sMo=o(" \u2014 "),Qq=a("a"),lMo=o("FunnelModel"),iMo=o(" or "),Wq=a("a"),dMo=o("FunnelBaseModel"),cMo=o(" (Funnel Transformer model)"),mMo=l(),fp=a("li"),Pde=a("strong"),fMo=o("glpn"),gMo=o(" \u2014 "),Hq=a("a"),hMo=o("GLPNModel"),uMo=o(" (GLPN model)"),pMo=l(),gp=a("li"),Bde=a("strong"),_Mo=o("gpt2"),bMo=o(" \u2014 "),Uq=a("a"),vMo=o("GPT2Model"),FMo=o(" (OpenAI GPT-2 model)"),TMo=l(),hp=a("li"),Ide=a("strong"),MMo=o("gpt_neo"),EMo=o(" \u2014 "),Jq=a("a"),CMo=o("GPTNeoModel"),wMo=o(" (GPT Neo model)"),AMo=l(),up=a("li"),Nde=a("strong"),LMo=o("gpt_neox"),yMo=o(" \u2014 "),Yq=a("a"),xMo=o("GPTNeoXModel"),$Mo=o(" (GPT NeoX model)"),kMo=l(),pp=a("li"),qde=a("strong"),SMo=o("gptj"),RMo=o(" \u2014 "),Kq=a("a"),PMo=o("GPTJModel"),BMo=o(" (GPT-J model)"),IMo=l(),_p=a("li"),jde=a("strong"),NMo=o("hubert"),qMo=o(" \u2014 "),Zq=a("a"),jMo=o("HubertModel"),DMo=o(" (Hubert model)"),GMo=l(),bp=a("li"),Dde=a("strong"),OMo=o("ibert"),VMo=o(" \u2014 "),ej=a("a"),XMo=o("IBertModel"),zMo=o(" (I-BERT model)"),QMo=l(),vp=a("li"),Gde=a("strong"),WMo=o("imagegpt"),HMo=o(" \u2014 "),oj=a("a"),UMo=o("ImageGPTModel"),JMo=o(" (ImageGPT model)"),YMo=l(),Fp=a("li"),Ode=a("strong"),KMo=o("layoutlm"),ZMo=o(" \u2014 "),rj=a("a"),eEo=o("LayoutLMModel"),oEo=o(" (LayoutLM model)"),rEo=l(),Tp=a("li"),Vde=a("strong"),tEo=o("layoutlmv2"),aEo=o(" \u2014 "),tj=a("a"),nEo=o("LayoutLMv2Model"),sEo=o(" (LayoutLMv2 model)"),lEo=l(),Mp=a("li"),Xde=a("strong"),iEo=o("layoutlmv3"),dEo=o(" \u2014 "),aj=a("a"),cEo=o("LayoutLMv3Model"),mEo=o(" (LayoutLMv3 model)"),fEo=l(),Ep=a("li"),zde=a("strong"),gEo=o("led"),hEo=o(" \u2014 "),nj=a("a"),uEo=o("LEDModel"),pEo=o(" (LED model)"),_Eo=l(),Cp=a("li"),Qde=a("strong"),bEo=o("levit"),vEo=o(" \u2014 "),sj=a("a"),FEo=o("LevitModel"),TEo=o(" (LeViT model)"),MEo=l(),wp=a("li"),Wde=a("strong"),EEo=o("longformer"),CEo=o(" \u2014 "),lj=a("a"),wEo=o("LongformerModel"),AEo=o(" (Longformer model)"),LEo=l(),Ap=a("li"),Hde=a("strong"),yEo=o("longt5"),xEo=o(" \u2014 "),ij=a("a"),$Eo=o("LongT5Model"),kEo=o(" (LongT5 model)"),SEo=l(),Lp=a("li"),Ude=a("strong"),REo=o("luke"),PEo=o(" \u2014 "),dj=a("a"),BEo=o("LukeModel"),IEo=o(" (LUKE model)"),NEo=l(),yp=a("li"),Jde=a("strong"),qEo=o("lxmert"),jEo=o(" \u2014 "),cj=a("a"),DEo=o("LxmertModel"),GEo=o(" (LXMERT model)"),OEo=l(),xp=a("li"),Yde=a("strong"),VEo=o("m2m_100"),XEo=o(" \u2014 "),mj=a("a"),zEo=o("M2M100Model"),QEo=o(" (M2M100 model)"),WEo=l(),$p=a("li"),Kde=a("strong"),HEo=o("marian"),UEo=o(" \u2014 "),fj=a("a"),JEo=o("MarianModel"),YEo=o(" (Marian model)"),KEo=l(),kp=a("li"),Zde=a("strong"),ZEo=o("maskformer"),e4o=o(" \u2014 "),gj=a("a"),o4o=o("MaskFormerModel"),r4o=o(" (MaskFormer model)"),t4o=l(),Sp=a("li"),ece=a("strong"),a4o=o("mbart"),n4o=o(" \u2014 "),hj=a("a"),s4o=o("MBartModel"),l4o=o(" (mBART model)"),i4o=l(),Rp=a("li"),oce=a("strong"),d4o=o("mctct"),c4o=o(" \u2014 "),uj=a("a"),m4o=o("MCTCTModel"),f4o=o(" (M-CTC-T model)"),g4o=l(),Pp=a("li"),rce=a("strong"),h4o=o("megatron-bert"),u4o=o(" \u2014 "),pj=a("a"),p4o=o("MegatronBertModel"),_4o=o(" (Megatron-BERT model)"),b4o=l(),Bp=a("li"),tce=a("strong"),v4o=o("mobilebert"),F4o=o(" \u2014 "),_j=a("a"),T4o=o("MobileBertModel"),M4o=o(" (MobileBERT model)"),E4o=l(),Ip=a("li"),ace=a("strong"),C4o=o("mpnet"),w4o=o(" \u2014 "),bj=a("a"),A4o=o("MPNetModel"),L4o=o(" (MPNet model)"),y4o=l(),Np=a("li"),nce=a("strong"),x4o=o("mt5"),$4o=o(" \u2014 "),vj=a("a"),k4o=o("MT5Model"),S4o=o(" (MT5 model)"),R4o=l(),qp=a("li"),sce=a("strong"),P4o=o("nezha"),B4o=o(" \u2014 "),Fj=a("a"),I4o=o("NezhaModel"),N4o=o(" (Nezha model)"),q4o=l(),jp=a("li"),lce=a("strong"),j4o=o("nystromformer"),D4o=o(" \u2014 "),Tj=a("a"),G4o=o("NystromformerModel"),O4o=o(" (Nystr\xF6mformer model)"),V4o=l(),Dp=a("li"),ice=a("strong"),X4o=o("openai-gpt"),z4o=o(" \u2014 "),Mj=a("a"),Q4o=o("OpenAIGPTModel"),W4o=o(" (OpenAI GPT model)"),H4o=l(),Gp=a("li"),dce=a("strong"),U4o=o("opt"),J4o=o(" \u2014 "),Ej=a("a"),Y4o=o("OPTModel"),K4o=o(" (OPT model)"),Z4o=l(),Op=a("li"),cce=a("strong"),eCo=o("pegasus"),oCo=o(" \u2014 "),Cj=a("a"),rCo=o("PegasusModel"),tCo=o(" (Pegasus model)"),aCo=l(),Vp=a("li"),mce=a("strong"),nCo=o("perceiver"),sCo=o(" \u2014 "),wj=a("a"),lCo=o("PerceiverModel"),iCo=o(" (Perceiver model)"),dCo=l(),Xp=a("li"),fce=a("strong"),cCo=o("plbart"),mCo=o(" \u2014 "),Aj=a("a"),fCo=o("PLBartModel"),gCo=o(" (PLBart model)"),hCo=l(),zp=a("li"),gce=a("strong"),uCo=o("poolformer"),pCo=o(" \u2014 "),Lj=a("a"),_Co=o("PoolFormerModel"),bCo=o(" (PoolFormer model)"),vCo=l(),Qp=a("li"),hce=a("strong"),FCo=o("prophetnet"),TCo=o(" \u2014 "),yj=a("a"),MCo=o("ProphetNetModel"),ECo=o(" (ProphetNet model)"),CCo=l(),Wp=a("li"),uce=a("strong"),wCo=o("qdqbert"),ACo=o(" \u2014 "),xj=a("a"),LCo=o("QDQBertModel"),yCo=o(" (QDQBert model)"),xCo=l(),Hp=a("li"),pce=a("strong"),$Co=o("reformer"),kCo=o(" \u2014 "),$j=a("a"),SCo=o("ReformerModel"),RCo=o(" (Reformer model)"),PCo=l(),Up=a("li"),_ce=a("strong"),BCo=o("regnet"),ICo=o(" \u2014 "),kj=a("a"),NCo=o("RegNetModel"),qCo=o(" (RegNet model)"),jCo=l(),Jp=a("li"),bce=a("strong"),DCo=o("rembert"),GCo=o(" \u2014 "),Sj=a("a"),OCo=o("RemBertModel"),VCo=o(" (RemBERT model)"),XCo=l(),Yp=a("li"),vce=a("strong"),zCo=o("resnet"),QCo=o(" \u2014 "),Rj=a("a"),WCo=o("ResNetModel"),HCo=o(" (ResNet model)"),UCo=l(),Kp=a("li"),Fce=a("strong"),JCo=o("retribert"),YCo=o(" \u2014 "),Pj=a("a"),KCo=o("RetriBertModel"),ZCo=o(" (RetriBERT model)"),e5o=l(),Zp=a("li"),Tce=a("strong"),o5o=o("roberta"),r5o=o(" \u2014 "),Bj=a("a"),t5o=o("RobertaModel"),a5o=o(" (RoBERTa model)"),n5o=l(),e_=a("li"),Mce=a("strong"),s5o=o("roformer"),l5o=o(" \u2014 "),Ij=a("a"),i5o=o("RoFormerModel"),d5o=o(" (RoFormer model)"),c5o=l(),o_=a("li"),Ece=a("strong"),m5o=o("segformer"),f5o=o(" \u2014 "),Nj=a("a"),g5o=o("SegformerModel"),h5o=o(" (SegFormer model)"),u5o=l(),r_=a("li"),Cce=a("strong"),p5o=o("sew"),_5o=o(" \u2014 "),qj=a("a"),b5o=o("SEWModel"),v5o=o(" (SEW model)"),F5o=l(),t_=a("li"),wce=a("strong"),T5o=o("sew-d"),M5o=o(" \u2014 "),jj=a("a"),E5o=o("SEWDModel"),C5o=o(" (SEW-D model)"),w5o=l(),a_=a("li"),Ace=a("strong"),A5o=o("speech_to_text"),L5o=o(" \u2014 "),Dj=a("a"),y5o=o("Speech2TextModel"),x5o=o(" (Speech2Text model)"),$5o=l(),n_=a("li"),Lce=a("strong"),k5o=o("splinter"),S5o=o(" \u2014 "),Gj=a("a"),R5o=o("SplinterModel"),P5o=o(" (Splinter model)"),B5o=l(),s_=a("li"),yce=a("strong"),I5o=o("squeezebert"),N5o=o(" \u2014 "),Oj=a("a"),q5o=o("SqueezeBertModel"),j5o=o(" (SqueezeBERT model)"),D5o=l(),l_=a("li"),xce=a("strong"),G5o=o("swin"),O5o=o(" \u2014 "),Vj=a("a"),V5o=o("SwinModel"),X5o=o(" (Swin Transformer model)"),z5o=l(),i_=a("li"),$ce=a("strong"),Q5o=o("t5"),W5o=o(" \u2014 "),Xj=a("a"),H5o=o("T5Model"),U5o=o(" (T5 model)"),J5o=l(),d_=a("li"),kce=a("strong"),Y5o=o("tapas"),K5o=o(" \u2014 "),zj=a("a"),Z5o=o("TapasModel"),e3o=o(" (TAPAS model)"),o3o=l(),c_=a("li"),Sce=a("strong"),r3o=o("trajectory_transformer"),t3o=o(" \u2014 "),Qj=a("a"),a3o=o("TrajectoryTransformerModel"),n3o=o(" (Trajectory Transformer model)"),s3o=l(),m_=a("li"),Rce=a("strong"),l3o=o("transfo-xl"),i3o=o(" \u2014 "),Wj=a("a"),d3o=o("TransfoXLModel"),c3o=o(" (Transformer-XL model)"),m3o=l(),f_=a("li"),Pce=a("strong"),f3o=o("unispeech"),g3o=o(" \u2014 "),Hj=a("a"),h3o=o("UniSpeechModel"),u3o=o(" (UniSpeech model)"),p3o=l(),g_=a("li"),Bce=a("strong"),_3o=o("unispeech-sat"),b3o=o(" \u2014 "),Uj=a("a"),v3o=o("UniSpeechSatModel"),F3o=o(" (UniSpeechSat model)"),T3o=l(),h_=a("li"),Ice=a("strong"),M3o=o("van"),E3o=o(" \u2014 "),Jj=a("a"),C3o=o("VanModel"),w3o=o(" (VAN model)"),A3o=l(),u_=a("li"),Nce=a("strong"),L3o=o("vilt"),y3o=o(" \u2014 "),Yj=a("a"),x3o=o("ViltModel"),$3o=o(" (ViLT model)"),k3o=l(),p_=a("li"),qce=a("strong"),S3o=o("vision-text-dual-encoder"),R3o=o(" \u2014 "),Kj=a("a"),P3o=o("VisionTextDualEncoderModel"),B3o=o(" (VisionTextDualEncoder model)"),I3o=l(),__=a("li"),jce=a("strong"),N3o=o("visual_bert"),q3o=o(" \u2014 "),Zj=a("a"),j3o=o("VisualBertModel"),D3o=o(" (VisualBERT model)"),G3o=l(),b_=a("li"),Dce=a("strong"),O3o=o("vit"),V3o=o(" \u2014 "),eD=a("a"),X3o=o("ViTModel"),z3o=o(" (ViT model)"),Q3o=l(),v_=a("li"),Gce=a("strong"),W3o=o("vit_mae"),H3o=o(" \u2014 "),oD=a("a"),U3o=o("ViTMAEModel"),J3o=o(" (ViTMAE model)"),Y3o=l(),F_=a("li"),Oce=a("strong"),K3o=o("wav2vec2"),Z3o=o(" \u2014 "),rD=a("a"),e0o=o("Wav2Vec2Model"),o0o=o(" (Wav2Vec2 model)"),r0o=l(),T_=a("li"),Vce=a("strong"),t0o=o("wav2vec2-conformer"),a0o=o(" \u2014 "),tD=a("a"),n0o=o("Wav2Vec2ConformerModel"),s0o=o(" (Wav2Vec2-Conformer model)"),l0o=l(),M_=a("li"),Xce=a("strong"),i0o=o("wavlm"),d0o=o(" \u2014 "),aD=a("a"),c0o=o("WavLMModel"),m0o=o(" (WavLM model)"),f0o=l(),E_=a("li"),zce=a("strong"),g0o=o("xglm"),h0o=o(" \u2014 "),nD=a("a"),u0o=o("XGLMModel"),p0o=o(" (XGLM model)"),_0o=l(),C_=a("li"),Qce=a("strong"),b0o=o("xlm"),v0o=o(" \u2014 "),sD=a("a"),F0o=o("XLMModel"),T0o=o(" (XLM model)"),M0o=l(),w_=a("li"),Wce=a("strong"),E0o=o("xlm-prophetnet"),C0o=o(" \u2014 "),lD=a("a"),w0o=o("XLMProphetNetModel"),A0o=o(" (XLM-ProphetNet model)"),L0o=l(),A_=a("li"),Hce=a("strong"),y0o=o("xlm-roberta"),x0o=o(" \u2014 "),iD=a("a"),$0o=o("XLMRobertaModel"),k0o=o(" (XLM-RoBERTa model)"),S0o=l(),L_=a("li"),Uce=a("strong"),R0o=o("xlm-roberta-xl"),P0o=o(" \u2014 "),dD=a("a"),B0o=o("XLMRobertaXLModel"),I0o=o(" (XLM-RoBERTa-XL model)"),N0o=l(),y_=a("li"),Jce=a("strong"),q0o=o("xlnet"),j0o=o(" \u2014 "),cD=a("a"),D0o=o("XLNetModel"),G0o=o(" (XLNet model)"),O0o=l(),x_=a("li"),Yce=a("strong"),V0o=o("yolos"),X0o=o(" \u2014 "),mD=a("a"),z0o=o("YolosModel"),Q0o=o(" (YOLOS model)"),W0o=l(),$_=a("li"),Kce=a("strong"),H0o=o("yoso"),U0o=o(" \u2014 "),fD=a("a"),J0o=o("YosoModel"),Y0o=o(" (YOSO model)"),K0o=l(),k_=a("p"),Z0o=o("The model is set in evaluation mode by default using "),Zce=a("code"),ewo=o("model.eval()"),owo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),rwo=o("model.train()"),two=l(),F(S_.$$.fragment),_Oe=l(),ji=a("h2"),R_=a("a"),ome=a("span"),F(cy.$$.fragment),awo=l(),rme=a("span"),nwo=o("AutoModelForPreTraining"),bOe=l(),$o=a("div"),F(my.$$.fragment),swo=l(),Di=a("p"),lwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gD=a("a"),iwo=o("from_pretrained()"),dwo=o(" class method or the "),hD=a("a"),cwo=o("from_config()"),mwo=o(` class
method.`),fwo=l(),fy=a("p"),gwo=o("This class cannot be instantiated directly using "),tme=a("code"),hwo=o("__init__()"),uwo=o(" (throws an error)."),pwo=l(),st=a("div"),F(gy.$$.fragment),_wo=l(),ame=a("p"),bwo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vwo=l(),Gi=a("p"),Fwo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),Two=o("not"),Mwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uD=a("a"),Ewo=o("from_pretrained()"),Cwo=o(" to load the model weights."),wwo=l(),F(P_.$$.fragment),Awo=l(),Ye=a("div"),F(hy.$$.fragment),Lwo=l(),sme=a("p"),ywo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xwo=l(),Pa=a("p"),$wo=o("The model class to instantiate is selected based on the "),lme=a("code"),kwo=o("model_type"),Swo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),Rwo=o("pretrained_model_name_or_path"),Pwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),Bwo=o("pretrained_model_name_or_path"),Iwo=o(":"),Nwo=l(),G=a("ul"),B_=a("li"),cme=a("strong"),qwo=o("albert"),jwo=o(" \u2014 "),pD=a("a"),Dwo=o("AlbertForPreTraining"),Gwo=o(" (ALBERT model)"),Owo=l(),I_=a("li"),mme=a("strong"),Vwo=o("bart"),Xwo=o(" \u2014 "),_D=a("a"),zwo=o("BartForConditionalGeneration"),Qwo=o(" (BART model)"),Wwo=l(),N_=a("li"),fme=a("strong"),Hwo=o("bert"),Uwo=o(" \u2014 "),bD=a("a"),Jwo=o("BertForPreTraining"),Ywo=o(" (BERT model)"),Kwo=l(),q_=a("li"),gme=a("strong"),Zwo=o("big_bird"),eAo=o(" \u2014 "),vD=a("a"),oAo=o("BigBirdForPreTraining"),rAo=o(" (BigBird model)"),tAo=l(),j_=a("li"),hme=a("strong"),aAo=o("bloom"),nAo=o(" \u2014 "),FD=a("a"),sAo=o("BloomForCausalLM"),lAo=o(" (BLOOM model)"),iAo=l(),D_=a("li"),ume=a("strong"),dAo=o("camembert"),cAo=o(" \u2014 "),TD=a("a"),mAo=o("CamembertForMaskedLM"),fAo=o(" (CamemBERT model)"),gAo=l(),G_=a("li"),pme=a("strong"),hAo=o("ctrl"),uAo=o(" \u2014 "),MD=a("a"),pAo=o("CTRLLMHeadModel"),_Ao=o(" (CTRL model)"),bAo=l(),O_=a("li"),_me=a("strong"),vAo=o("data2vec-text"),FAo=o(" \u2014 "),ED=a("a"),TAo=o("Data2VecTextForMaskedLM"),MAo=o(" (Data2VecText model)"),EAo=l(),V_=a("li"),bme=a("strong"),CAo=o("deberta"),wAo=o(" \u2014 "),CD=a("a"),AAo=o("DebertaForMaskedLM"),LAo=o(" (DeBERTa model)"),yAo=l(),X_=a("li"),vme=a("strong"),xAo=o("deberta-v2"),$Ao=o(" \u2014 "),wD=a("a"),kAo=o("DebertaV2ForMaskedLM"),SAo=o(" (DeBERTa-v2 model)"),RAo=l(),z_=a("li"),Fme=a("strong"),PAo=o("distilbert"),BAo=o(" \u2014 "),AD=a("a"),IAo=o("DistilBertForMaskedLM"),NAo=o(" (DistilBERT model)"),qAo=l(),Q_=a("li"),Tme=a("strong"),jAo=o("electra"),DAo=o(" \u2014 "),LD=a("a"),GAo=o("ElectraForPreTraining"),OAo=o(" (ELECTRA model)"),VAo=l(),W_=a("li"),Mme=a("strong"),XAo=o("flaubert"),zAo=o(" \u2014 "),yD=a("a"),QAo=o("FlaubertWithLMHeadModel"),WAo=o(" (FlauBERT model)"),HAo=l(),H_=a("li"),Eme=a("strong"),UAo=o("flava"),JAo=o(" \u2014 "),xD=a("a"),YAo=o("FlavaForPreTraining"),KAo=o(" (FLAVA model)"),ZAo=l(),U_=a("li"),Cme=a("strong"),e6o=o("fnet"),o6o=o(" \u2014 "),$D=a("a"),r6o=o("FNetForPreTraining"),t6o=o(" (FNet model)"),a6o=l(),J_=a("li"),wme=a("strong"),n6o=o("fsmt"),s6o=o(" \u2014 "),kD=a("a"),l6o=o("FSMTForConditionalGeneration"),i6o=o(" (FairSeq Machine-Translation model)"),d6o=l(),Y_=a("li"),Ame=a("strong"),c6o=o("funnel"),m6o=o(" \u2014 "),SD=a("a"),f6o=o("FunnelForPreTraining"),g6o=o(" (Funnel Transformer model)"),h6o=l(),K_=a("li"),Lme=a("strong"),u6o=o("gpt2"),p6o=o(" \u2014 "),RD=a("a"),_6o=o("GPT2LMHeadModel"),b6o=o(" (OpenAI GPT-2 model)"),v6o=l(),Z_=a("li"),yme=a("strong"),F6o=o("ibert"),T6o=o(" \u2014 "),PD=a("a"),M6o=o("IBertForMaskedLM"),E6o=o(" (I-BERT model)"),C6o=l(),e2=a("li"),xme=a("strong"),w6o=o("layoutlm"),A6o=o(" \u2014 "),BD=a("a"),L6o=o("LayoutLMForMaskedLM"),y6o=o(" (LayoutLM model)"),x6o=l(),o2=a("li"),$me=a("strong"),$6o=o("longformer"),k6o=o(" \u2014 "),ID=a("a"),S6o=o("LongformerForMaskedLM"),R6o=o(" (Longformer model)"),P6o=l(),r2=a("li"),kme=a("strong"),B6o=o("lxmert"),I6o=o(" \u2014 "),ND=a("a"),N6o=o("LxmertForPreTraining"),q6o=o(" (LXMERT model)"),j6o=l(),t2=a("li"),Sme=a("strong"),D6o=o("megatron-bert"),G6o=o(" \u2014 "),qD=a("a"),O6o=o("MegatronBertForPreTraining"),V6o=o(" (Megatron-BERT model)"),X6o=l(),a2=a("li"),Rme=a("strong"),z6o=o("mobilebert"),Q6o=o(" \u2014 "),jD=a("a"),W6o=o("MobileBertForPreTraining"),H6o=o(" (MobileBERT model)"),U6o=l(),n2=a("li"),Pme=a("strong"),J6o=o("mpnet"),Y6o=o(" \u2014 "),DD=a("a"),K6o=o("MPNetForMaskedLM"),Z6o=o(" (MPNet model)"),eLo=l(),s2=a("li"),Bme=a("strong"),oLo=o("nezha"),rLo=o(" \u2014 "),GD=a("a"),tLo=o("NezhaForPreTraining"),aLo=o(" (Nezha model)"),nLo=l(),l2=a("li"),Ime=a("strong"),sLo=o("openai-gpt"),lLo=o(" \u2014 "),OD=a("a"),iLo=o("OpenAIGPTLMHeadModel"),dLo=o(" (OpenAI GPT model)"),cLo=l(),i2=a("li"),Nme=a("strong"),mLo=o("retribert"),fLo=o(" \u2014 "),VD=a("a"),gLo=o("RetriBertModel"),hLo=o(" (RetriBERT model)"),uLo=l(),d2=a("li"),qme=a("strong"),pLo=o("roberta"),_Lo=o(" \u2014 "),XD=a("a"),bLo=o("RobertaForMaskedLM"),vLo=o(" (RoBERTa model)"),FLo=l(),c2=a("li"),jme=a("strong"),TLo=o("splinter"),MLo=o(" \u2014 "),zD=a("a"),ELo=o("SplinterForPreTraining"),CLo=o(" (Splinter model)"),wLo=l(),m2=a("li"),Dme=a("strong"),ALo=o("squeezebert"),LLo=o(" \u2014 "),QD=a("a"),yLo=o("SqueezeBertForMaskedLM"),xLo=o(" (SqueezeBERT model)"),$Lo=l(),f2=a("li"),Gme=a("strong"),kLo=o("t5"),SLo=o(" \u2014 "),WD=a("a"),RLo=o("T5ForConditionalGeneration"),PLo=o(" (T5 model)"),BLo=l(),g2=a("li"),Ome=a("strong"),ILo=o("tapas"),NLo=o(" \u2014 "),HD=a("a"),qLo=o("TapasForMaskedLM"),jLo=o(" (TAPAS model)"),DLo=l(),h2=a("li"),Vme=a("strong"),GLo=o("transfo-xl"),OLo=o(" \u2014 "),UD=a("a"),VLo=o("TransfoXLLMHeadModel"),XLo=o(" (Transformer-XL model)"),zLo=l(),u2=a("li"),Xme=a("strong"),QLo=o("unispeech"),WLo=o(" \u2014 "),JD=a("a"),HLo=o("UniSpeechForPreTraining"),ULo=o(" (UniSpeech model)"),JLo=l(),p2=a("li"),zme=a("strong"),YLo=o("unispeech-sat"),KLo=o(" \u2014 "),YD=a("a"),ZLo=o("UniSpeechSatForPreTraining"),e7o=o(" (UniSpeechSat model)"),o7o=l(),_2=a("li"),Qme=a("strong"),r7o=o("visual_bert"),t7o=o(" \u2014 "),KD=a("a"),a7o=o("VisualBertForPreTraining"),n7o=o(" (VisualBERT model)"),s7o=l(),b2=a("li"),Wme=a("strong"),l7o=o("vit_mae"),i7o=o(" \u2014 "),ZD=a("a"),d7o=o("ViTMAEForPreTraining"),c7o=o(" (ViTMAE model)"),m7o=l(),v2=a("li"),Hme=a("strong"),f7o=o("wav2vec2"),g7o=o(" \u2014 "),eG=a("a"),h7o=o("Wav2Vec2ForPreTraining"),u7o=o(" (Wav2Vec2 model)"),p7o=l(),F2=a("li"),Ume=a("strong"),_7o=o("wav2vec2-conformer"),b7o=o(" \u2014 "),oG=a("a"),v7o=o("Wav2Vec2ConformerForPreTraining"),F7o=o(" (Wav2Vec2-Conformer model)"),T7o=l(),T2=a("li"),Jme=a("strong"),M7o=o("xlm"),E7o=o(" \u2014 "),rG=a("a"),C7o=o("XLMWithLMHeadModel"),w7o=o(" (XLM model)"),A7o=l(),M2=a("li"),Yme=a("strong"),L7o=o("xlm-roberta"),y7o=o(" \u2014 "),tG=a("a"),x7o=o("XLMRobertaForMaskedLM"),$7o=o(" (XLM-RoBERTa model)"),k7o=l(),E2=a("li"),Kme=a("strong"),S7o=o("xlm-roberta-xl"),R7o=o(" \u2014 "),aG=a("a"),P7o=o("XLMRobertaXLForMaskedLM"),B7o=o(" (XLM-RoBERTa-XL model)"),I7o=l(),C2=a("li"),Zme=a("strong"),N7o=o("xlnet"),q7o=o(" \u2014 "),nG=a("a"),j7o=o("XLNetLMHeadModel"),D7o=o(" (XLNet model)"),G7o=l(),w2=a("p"),O7o=o("The model is set in evaluation mode by default using "),efe=a("code"),V7o=o("model.eval()"),X7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),z7o=o("model.train()"),Q7o=l(),F(A2.$$.fragment),vOe=l(),Oi=a("h2"),L2=a("a"),rfe=a("span"),F(uy.$$.fragment),W7o=l(),tfe=a("span"),H7o=o("AutoModelForCausalLM"),FOe=l(),ko=a("div"),F(py.$$.fragment),U7o=l(),Vi=a("p"),J7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sG=a("a"),Y7o=o("from_pretrained()"),K7o=o(" class method or the "),lG=a("a"),Z7o=o("from_config()"),eyo=o(` class
method.`),oyo=l(),_y=a("p"),ryo=o("This class cannot be instantiated directly using "),afe=a("code"),tyo=o("__init__()"),ayo=o(" (throws an error)."),nyo=l(),lt=a("div"),F(by.$$.fragment),syo=l(),nfe=a("p"),lyo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iyo=l(),Xi=a("p"),dyo=o(`Note:
Loading a model from its configuration file does `),sfe=a("strong"),cyo=o("not"),myo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=a("a"),fyo=o("from_pretrained()"),gyo=o(" to load the model weights."),hyo=l(),F(y2.$$.fragment),uyo=l(),Ke=a("div"),F(vy.$$.fragment),pyo=l(),lfe=a("p"),_yo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),byo=l(),Ba=a("p"),vyo=o("The model class to instantiate is selected based on the "),ife=a("code"),Fyo=o("model_type"),Tyo=o(` property of the config object (either
passed as an argument or loaded from `),dfe=a("code"),Myo=o("pretrained_model_name_or_path"),Eyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=a("code"),Cyo=o("pretrained_model_name_or_path"),wyo=o(":"),Ayo=l(),z=a("ul"),x2=a("li"),mfe=a("strong"),Lyo=o("bart"),yyo=o(" \u2014 "),dG=a("a"),xyo=o("BartForCausalLM"),$yo=o(" (BART model)"),kyo=l(),$2=a("li"),ffe=a("strong"),Syo=o("bert"),Ryo=o(" \u2014 "),cG=a("a"),Pyo=o("BertLMHeadModel"),Byo=o(" (BERT model)"),Iyo=l(),k2=a("li"),gfe=a("strong"),Nyo=o("bert-generation"),qyo=o(" \u2014 "),mG=a("a"),jyo=o("BertGenerationDecoder"),Dyo=o(" (Bert Generation model)"),Gyo=l(),S2=a("li"),hfe=a("strong"),Oyo=o("big_bird"),Vyo=o(" \u2014 "),fG=a("a"),Xyo=o("BigBirdForCausalLM"),zyo=o(" (BigBird model)"),Qyo=l(),R2=a("li"),ufe=a("strong"),Wyo=o("bigbird_pegasus"),Hyo=o(" \u2014 "),gG=a("a"),Uyo=o("BigBirdPegasusForCausalLM"),Jyo=o(" (BigBird-Pegasus model)"),Yyo=l(),P2=a("li"),pfe=a("strong"),Kyo=o("blenderbot"),Zyo=o(" \u2014 "),hG=a("a"),e8o=o("BlenderbotForCausalLM"),o8o=o(" (Blenderbot model)"),r8o=l(),B2=a("li"),_fe=a("strong"),t8o=o("blenderbot-small"),a8o=o(" \u2014 "),uG=a("a"),n8o=o("BlenderbotSmallForCausalLM"),s8o=o(" (BlenderbotSmall model)"),l8o=l(),I2=a("li"),bfe=a("strong"),i8o=o("bloom"),d8o=o(" \u2014 "),pG=a("a"),c8o=o("BloomForCausalLM"),m8o=o(" (BLOOM model)"),f8o=l(),N2=a("li"),vfe=a("strong"),g8o=o("camembert"),h8o=o(" \u2014 "),_G=a("a"),u8o=o("CamembertForCausalLM"),p8o=o(" (CamemBERT model)"),_8o=l(),q2=a("li"),Ffe=a("strong"),b8o=o("codegen"),v8o=o(" \u2014 "),bG=a("a"),F8o=o("CodeGenForCausalLM"),T8o=o(" (CodeGen model)"),M8o=l(),j2=a("li"),Tfe=a("strong"),E8o=o("ctrl"),C8o=o(" \u2014 "),vG=a("a"),w8o=o("CTRLLMHeadModel"),A8o=o(" (CTRL model)"),L8o=l(),D2=a("li"),Mfe=a("strong"),y8o=o("data2vec-text"),x8o=o(" \u2014 "),FG=a("a"),$8o=o("Data2VecTextForCausalLM"),k8o=o(" (Data2VecText model)"),S8o=l(),G2=a("li"),Efe=a("strong"),R8o=o("electra"),P8o=o(" \u2014 "),TG=a("a"),B8o=o("ElectraForCausalLM"),I8o=o(" (ELECTRA model)"),N8o=l(),O2=a("li"),Cfe=a("strong"),q8o=o("gpt2"),j8o=o(" \u2014 "),MG=a("a"),D8o=o("GPT2LMHeadModel"),G8o=o(" (OpenAI GPT-2 model)"),O8o=l(),V2=a("li"),wfe=a("strong"),V8o=o("gpt_neo"),X8o=o(" \u2014 "),EG=a("a"),z8o=o("GPTNeoForCausalLM"),Q8o=o(" (GPT Neo model)"),W8o=l(),X2=a("li"),Afe=a("strong"),H8o=o("gpt_neox"),U8o=o(" \u2014 "),CG=a("a"),J8o=o("GPTNeoXForCausalLM"),Y8o=o(" (GPT NeoX model)"),K8o=l(),z2=a("li"),Lfe=a("strong"),Z8o=o("gptj"),e9o=o(" \u2014 "),wG=a("a"),o9o=o("GPTJForCausalLM"),r9o=o(" (GPT-J model)"),t9o=l(),Q2=a("li"),yfe=a("strong"),a9o=o("marian"),n9o=o(" \u2014 "),AG=a("a"),s9o=o("MarianForCausalLM"),l9o=o(" (Marian model)"),i9o=l(),W2=a("li"),xfe=a("strong"),d9o=o("mbart"),c9o=o(" \u2014 "),LG=a("a"),m9o=o("MBartForCausalLM"),f9o=o(" (mBART model)"),g9o=l(),H2=a("li"),$fe=a("strong"),h9o=o("megatron-bert"),u9o=o(" \u2014 "),yG=a("a"),p9o=o("MegatronBertForCausalLM"),_9o=o(" (Megatron-BERT model)"),b9o=l(),U2=a("li"),kfe=a("strong"),v9o=o("openai-gpt"),F9o=o(" \u2014 "),xG=a("a"),T9o=o("OpenAIGPTLMHeadModel"),M9o=o(" (OpenAI GPT model)"),E9o=l(),J2=a("li"),Sfe=a("strong"),C9o=o("opt"),w9o=o(" \u2014 "),$G=a("a"),A9o=o("OPTForCausalLM"),L9o=o(" (OPT model)"),y9o=l(),Y2=a("li"),Rfe=a("strong"),x9o=o("pegasus"),$9o=o(" \u2014 "),kG=a("a"),k9o=o("PegasusForCausalLM"),S9o=o(" (Pegasus model)"),R9o=l(),K2=a("li"),Pfe=a("strong"),P9o=o("plbart"),B9o=o(" \u2014 "),SG=a("a"),I9o=o("PLBartForCausalLM"),N9o=o(" (PLBart model)"),q9o=l(),Z2=a("li"),Bfe=a("strong"),j9o=o("prophetnet"),D9o=o(" \u2014 "),RG=a("a"),G9o=o("ProphetNetForCausalLM"),O9o=o(" (ProphetNet model)"),V9o=l(),eb=a("li"),Ife=a("strong"),X9o=o("qdqbert"),z9o=o(" \u2014 "),PG=a("a"),Q9o=o("QDQBertLMHeadModel"),W9o=o(" (QDQBert model)"),H9o=l(),ob=a("li"),Nfe=a("strong"),U9o=o("reformer"),J9o=o(" \u2014 "),BG=a("a"),Y9o=o("ReformerModelWithLMHead"),K9o=o(" (Reformer model)"),Z9o=l(),rb=a("li"),qfe=a("strong"),exo=o("rembert"),oxo=o(" \u2014 "),IG=a("a"),rxo=o("RemBertForCausalLM"),txo=o(" (RemBERT model)"),axo=l(),tb=a("li"),jfe=a("strong"),nxo=o("roberta"),sxo=o(" \u2014 "),NG=a("a"),lxo=o("RobertaForCausalLM"),ixo=o(" (RoBERTa model)"),dxo=l(),ab=a("li"),Dfe=a("strong"),cxo=o("roformer"),mxo=o(" \u2014 "),qG=a("a"),fxo=o("RoFormerForCausalLM"),gxo=o(" (RoFormer model)"),hxo=l(),nb=a("li"),Gfe=a("strong"),uxo=o("speech_to_text_2"),pxo=o(" \u2014 "),jG=a("a"),_xo=o("Speech2Text2ForCausalLM"),bxo=o(" (Speech2Text2 model)"),vxo=l(),sb=a("li"),Ofe=a("strong"),Fxo=o("transfo-xl"),Txo=o(" \u2014 "),DG=a("a"),Mxo=o("TransfoXLLMHeadModel"),Exo=o(" (Transformer-XL model)"),Cxo=l(),lb=a("li"),Vfe=a("strong"),wxo=o("trocr"),Axo=o(" \u2014 "),GG=a("a"),Lxo=o("TrOCRForCausalLM"),yxo=o(" (TrOCR model)"),xxo=l(),ib=a("li"),Xfe=a("strong"),$xo=o("xglm"),kxo=o(" \u2014 "),OG=a("a"),Sxo=o("XGLMForCausalLM"),Rxo=o(" (XGLM model)"),Pxo=l(),db=a("li"),zfe=a("strong"),Bxo=o("xlm"),Ixo=o(" \u2014 "),VG=a("a"),Nxo=o("XLMWithLMHeadModel"),qxo=o(" (XLM model)"),jxo=l(),cb=a("li"),Qfe=a("strong"),Dxo=o("xlm-prophetnet"),Gxo=o(" \u2014 "),XG=a("a"),Oxo=o("XLMProphetNetForCausalLM"),Vxo=o(" (XLM-ProphetNet model)"),Xxo=l(),mb=a("li"),Wfe=a("strong"),zxo=o("xlm-roberta"),Qxo=o(" \u2014 "),zG=a("a"),Wxo=o("XLMRobertaForCausalLM"),Hxo=o(" (XLM-RoBERTa model)"),Uxo=l(),fb=a("li"),Hfe=a("strong"),Jxo=o("xlm-roberta-xl"),Yxo=o(" \u2014 "),QG=a("a"),Kxo=o("XLMRobertaXLForCausalLM"),Zxo=o(" (XLM-RoBERTa-XL model)"),e$o=l(),gb=a("li"),Ufe=a("strong"),o$o=o("xlnet"),r$o=o(" \u2014 "),WG=a("a"),t$o=o("XLNetLMHeadModel"),a$o=o(" (XLNet model)"),n$o=l(),hb=a("p"),s$o=o("The model is set in evaluation mode by default using "),Jfe=a("code"),l$o=o("model.eval()"),i$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yfe=a("code"),d$o=o("model.train()"),c$o=l(),F(ub.$$.fragment),TOe=l(),zi=a("h2"),pb=a("a"),Kfe=a("span"),F(Fy.$$.fragment),m$o=l(),Zfe=a("span"),f$o=o("AutoModelForMaskedLM"),MOe=l(),So=a("div"),F(Ty.$$.fragment),g$o=l(),Qi=a("p"),h$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HG=a("a"),u$o=o("from_pretrained()"),p$o=o(" class method or the "),UG=a("a"),_$o=o("from_config()"),b$o=o(` class
method.`),v$o=l(),My=a("p"),F$o=o("This class cannot be instantiated directly using "),ege=a("code"),T$o=o("__init__()"),M$o=o(" (throws an error)."),E$o=l(),it=a("div"),F(Ey.$$.fragment),C$o=l(),oge=a("p"),w$o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A$o=l(),Wi=a("p"),L$o=o(`Note:
Loading a model from its configuration file does `),rge=a("strong"),y$o=o("not"),x$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),$$o=o("from_pretrained()"),k$o=o(" to load the model weights."),S$o=l(),F(_b.$$.fragment),R$o=l(),Ze=a("div"),F(Cy.$$.fragment),P$o=l(),tge=a("p"),B$o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I$o=l(),Ia=a("p"),N$o=o("The model class to instantiate is selected based on the "),age=a("code"),q$o=o("model_type"),j$o=o(` property of the config object (either
passed as an argument or loaded from `),nge=a("code"),D$o=o("pretrained_model_name_or_path"),G$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=a("code"),O$o=o("pretrained_model_name_or_path"),V$o=o(":"),X$o=l(),W=a("ul"),bb=a("li"),lge=a("strong"),z$o=o("albert"),Q$o=o(" \u2014 "),YG=a("a"),W$o=o("AlbertForMaskedLM"),H$o=o(" (ALBERT model)"),U$o=l(),vb=a("li"),ige=a("strong"),J$o=o("bart"),Y$o=o(" \u2014 "),KG=a("a"),K$o=o("BartForConditionalGeneration"),Z$o=o(" (BART model)"),eko=l(),Fb=a("li"),dge=a("strong"),oko=o("bert"),rko=o(" \u2014 "),ZG=a("a"),tko=o("BertForMaskedLM"),ako=o(" (BERT model)"),nko=l(),Tb=a("li"),cge=a("strong"),sko=o("big_bird"),lko=o(" \u2014 "),eO=a("a"),iko=o("BigBirdForMaskedLM"),dko=o(" (BigBird model)"),cko=l(),Mb=a("li"),mge=a("strong"),mko=o("camembert"),fko=o(" \u2014 "),oO=a("a"),gko=o("CamembertForMaskedLM"),hko=o(" (CamemBERT model)"),uko=l(),Eb=a("li"),fge=a("strong"),pko=o("convbert"),_ko=o(" \u2014 "),rO=a("a"),bko=o("ConvBertForMaskedLM"),vko=o(" (ConvBERT model)"),Fko=l(),Cb=a("li"),gge=a("strong"),Tko=o("data2vec-text"),Mko=o(" \u2014 "),tO=a("a"),Eko=o("Data2VecTextForMaskedLM"),Cko=o(" (Data2VecText model)"),wko=l(),wb=a("li"),hge=a("strong"),Ako=o("deberta"),Lko=o(" \u2014 "),aO=a("a"),yko=o("DebertaForMaskedLM"),xko=o(" (DeBERTa model)"),$ko=l(),Ab=a("li"),uge=a("strong"),kko=o("deberta-v2"),Sko=o(" \u2014 "),nO=a("a"),Rko=o("DebertaV2ForMaskedLM"),Pko=o(" (DeBERTa-v2 model)"),Bko=l(),Lb=a("li"),pge=a("strong"),Iko=o("distilbert"),Nko=o(" \u2014 "),sO=a("a"),qko=o("DistilBertForMaskedLM"),jko=o(" (DistilBERT model)"),Dko=l(),yb=a("li"),_ge=a("strong"),Gko=o("electra"),Oko=o(" \u2014 "),lO=a("a"),Vko=o("ElectraForMaskedLM"),Xko=o(" (ELECTRA model)"),zko=l(),xb=a("li"),bge=a("strong"),Qko=o("flaubert"),Wko=o(" \u2014 "),iO=a("a"),Hko=o("FlaubertWithLMHeadModel"),Uko=o(" (FlauBERT model)"),Jko=l(),$b=a("li"),vge=a("strong"),Yko=o("fnet"),Kko=o(" \u2014 "),dO=a("a"),Zko=o("FNetForMaskedLM"),eSo=o(" (FNet model)"),oSo=l(),kb=a("li"),Fge=a("strong"),rSo=o("funnel"),tSo=o(" \u2014 "),cO=a("a"),aSo=o("FunnelForMaskedLM"),nSo=o(" (Funnel Transformer model)"),sSo=l(),Sb=a("li"),Tge=a("strong"),lSo=o("ibert"),iSo=o(" \u2014 "),mO=a("a"),dSo=o("IBertForMaskedLM"),cSo=o(" (I-BERT model)"),mSo=l(),Rb=a("li"),Mge=a("strong"),fSo=o("layoutlm"),gSo=o(" \u2014 "),fO=a("a"),hSo=o("LayoutLMForMaskedLM"),uSo=o(" (LayoutLM model)"),pSo=l(),Pb=a("li"),Ege=a("strong"),_So=o("longformer"),bSo=o(" \u2014 "),gO=a("a"),vSo=o("LongformerForMaskedLM"),FSo=o(" (Longformer model)"),TSo=l(),Bb=a("li"),Cge=a("strong"),MSo=o("luke"),ESo=o(" \u2014 "),hO=a("a"),CSo=o("LukeForMaskedLM"),wSo=o(" (LUKE model)"),ASo=l(),Ib=a("li"),wge=a("strong"),LSo=o("mbart"),ySo=o(" \u2014 "),uO=a("a"),xSo=o("MBartForConditionalGeneration"),$So=o(" (mBART model)"),kSo=l(),Nb=a("li"),Age=a("strong"),SSo=o("megatron-bert"),RSo=o(" \u2014 "),pO=a("a"),PSo=o("MegatronBertForMaskedLM"),BSo=o(" (Megatron-BERT model)"),ISo=l(),qb=a("li"),Lge=a("strong"),NSo=o("mobilebert"),qSo=o(" \u2014 "),_O=a("a"),jSo=o("MobileBertForMaskedLM"),DSo=o(" (MobileBERT model)"),GSo=l(),jb=a("li"),yge=a("strong"),OSo=o("mpnet"),VSo=o(" \u2014 "),bO=a("a"),XSo=o("MPNetForMaskedLM"),zSo=o(" (MPNet model)"),QSo=l(),Db=a("li"),xge=a("strong"),WSo=o("nezha"),HSo=o(" \u2014 "),vO=a("a"),USo=o("NezhaForMaskedLM"),JSo=o(" (Nezha model)"),YSo=l(),Gb=a("li"),$ge=a("strong"),KSo=o("nystromformer"),ZSo=o(" \u2014 "),FO=a("a"),eRo=o("NystromformerForMaskedLM"),oRo=o(" (Nystr\xF6mformer model)"),rRo=l(),Ob=a("li"),kge=a("strong"),tRo=o("perceiver"),aRo=o(" \u2014 "),TO=a("a"),nRo=o("PerceiverForMaskedLM"),sRo=o(" (Perceiver model)"),lRo=l(),Vb=a("li"),Sge=a("strong"),iRo=o("qdqbert"),dRo=o(" \u2014 "),MO=a("a"),cRo=o("QDQBertForMaskedLM"),mRo=o(" (QDQBert model)"),fRo=l(),Xb=a("li"),Rge=a("strong"),gRo=o("reformer"),hRo=o(" \u2014 "),EO=a("a"),uRo=o("ReformerForMaskedLM"),pRo=o(" (Reformer model)"),_Ro=l(),zb=a("li"),Pge=a("strong"),bRo=o("rembert"),vRo=o(" \u2014 "),CO=a("a"),FRo=o("RemBertForMaskedLM"),TRo=o(" (RemBERT model)"),MRo=l(),Qb=a("li"),Bge=a("strong"),ERo=o("roberta"),CRo=o(" \u2014 "),wO=a("a"),wRo=o("RobertaForMaskedLM"),ARo=o(" (RoBERTa model)"),LRo=l(),Wb=a("li"),Ige=a("strong"),yRo=o("roformer"),xRo=o(" \u2014 "),AO=a("a"),$Ro=o("RoFormerForMaskedLM"),kRo=o(" (RoFormer model)"),SRo=l(),Hb=a("li"),Nge=a("strong"),RRo=o("squeezebert"),PRo=o(" \u2014 "),LO=a("a"),BRo=o("SqueezeBertForMaskedLM"),IRo=o(" (SqueezeBERT model)"),NRo=l(),Ub=a("li"),qge=a("strong"),qRo=o("tapas"),jRo=o(" \u2014 "),yO=a("a"),DRo=o("TapasForMaskedLM"),GRo=o(" (TAPAS model)"),ORo=l(),Jb=a("li"),jge=a("strong"),VRo=o("wav2vec2"),XRo=o(" \u2014 "),Dge=a("code"),zRo=o("Wav2Vec2ForMaskedLM"),QRo=o(" (Wav2Vec2 model)"),WRo=l(),Yb=a("li"),Gge=a("strong"),HRo=o("xlm"),URo=o(" \u2014 "),xO=a("a"),JRo=o("XLMWithLMHeadModel"),YRo=o(" (XLM model)"),KRo=l(),Kb=a("li"),Oge=a("strong"),ZRo=o("xlm-roberta"),ePo=o(" \u2014 "),$O=a("a"),oPo=o("XLMRobertaForMaskedLM"),rPo=o(" (XLM-RoBERTa model)"),tPo=l(),Zb=a("li"),Vge=a("strong"),aPo=o("xlm-roberta-xl"),nPo=o(" \u2014 "),kO=a("a"),sPo=o("XLMRobertaXLForMaskedLM"),lPo=o(" (XLM-RoBERTa-XL model)"),iPo=l(),ev=a("li"),Xge=a("strong"),dPo=o("yoso"),cPo=o(" \u2014 "),SO=a("a"),mPo=o("YosoForMaskedLM"),fPo=o(" (YOSO model)"),gPo=l(),ov=a("p"),hPo=o("The model is set in evaluation mode by default using "),zge=a("code"),uPo=o("model.eval()"),pPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),_Po=o("model.train()"),bPo=l(),F(rv.$$.fragment),EOe=l(),Hi=a("h2"),tv=a("a"),Wge=a("span"),F(wy.$$.fragment),vPo=l(),Hge=a("span"),FPo=o("AutoModelForSeq2SeqLM"),COe=l(),Ro=a("div"),F(Ay.$$.fragment),TPo=l(),Ui=a("p"),MPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RO=a("a"),EPo=o("from_pretrained()"),CPo=o(" class method or the "),PO=a("a"),wPo=o("from_config()"),APo=o(` class
method.`),LPo=l(),Ly=a("p"),yPo=o("This class cannot be instantiated directly using "),Uge=a("code"),xPo=o("__init__()"),$Po=o(" (throws an error)."),kPo=l(),dt=a("div"),F(yy.$$.fragment),SPo=l(),Jge=a("p"),RPo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PPo=l(),Ji=a("p"),BPo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),IPo=o("not"),NPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=a("a"),qPo=o("from_pretrained()"),jPo=o(" to load the model weights."),DPo=l(),F(av.$$.fragment),GPo=l(),eo=a("div"),F(xy.$$.fragment),OPo=l(),Kge=a("p"),VPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XPo=l(),Na=a("p"),zPo=o("The model class to instantiate is selected based on the "),Zge=a("code"),QPo=o("model_type"),WPo=o(` property of the config object (either
passed as an argument or loaded from `),ehe=a("code"),HPo=o("pretrained_model_name_or_path"),UPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=a("code"),JPo=o("pretrained_model_name_or_path"),YPo=o(":"),KPo=l(),ue=a("ul"),nv=a("li"),rhe=a("strong"),ZPo=o("bart"),eBo=o(" \u2014 "),IO=a("a"),oBo=o("BartForConditionalGeneration"),rBo=o(" (BART model)"),tBo=l(),sv=a("li"),the=a("strong"),aBo=o("bigbird_pegasus"),nBo=o(" \u2014 "),NO=a("a"),sBo=o("BigBirdPegasusForConditionalGeneration"),lBo=o(" (BigBird-Pegasus model)"),iBo=l(),lv=a("li"),ahe=a("strong"),dBo=o("blenderbot"),cBo=o(" \u2014 "),qO=a("a"),mBo=o("BlenderbotForConditionalGeneration"),fBo=o(" (Blenderbot model)"),gBo=l(),iv=a("li"),nhe=a("strong"),hBo=o("blenderbot-small"),uBo=o(" \u2014 "),jO=a("a"),pBo=o("BlenderbotSmallForConditionalGeneration"),_Bo=o(" (BlenderbotSmall model)"),bBo=l(),dv=a("li"),she=a("strong"),vBo=o("encoder-decoder"),FBo=o(" \u2014 "),DO=a("a"),TBo=o("EncoderDecoderModel"),MBo=o(" (Encoder decoder model)"),EBo=l(),cv=a("li"),lhe=a("strong"),CBo=o("fsmt"),wBo=o(" \u2014 "),GO=a("a"),ABo=o("FSMTForConditionalGeneration"),LBo=o(" (FairSeq Machine-Translation model)"),yBo=l(),mv=a("li"),ihe=a("strong"),xBo=o("led"),$Bo=o(" \u2014 "),OO=a("a"),kBo=o("LEDForConditionalGeneration"),SBo=o(" (LED model)"),RBo=l(),fv=a("li"),dhe=a("strong"),PBo=o("longt5"),BBo=o(" \u2014 "),VO=a("a"),IBo=o("LongT5ForConditionalGeneration"),NBo=o(" (LongT5 model)"),qBo=l(),gv=a("li"),che=a("strong"),jBo=o("m2m_100"),DBo=o(" \u2014 "),XO=a("a"),GBo=o("M2M100ForConditionalGeneration"),OBo=o(" (M2M100 model)"),VBo=l(),hv=a("li"),mhe=a("strong"),XBo=o("marian"),zBo=o(" \u2014 "),zO=a("a"),QBo=o("MarianMTModel"),WBo=o(" (Marian model)"),HBo=l(),uv=a("li"),fhe=a("strong"),UBo=o("mbart"),JBo=o(" \u2014 "),QO=a("a"),YBo=o("MBartForConditionalGeneration"),KBo=o(" (mBART model)"),ZBo=l(),pv=a("li"),ghe=a("strong"),eIo=o("mt5"),oIo=o(" \u2014 "),WO=a("a"),rIo=o("MT5ForConditionalGeneration"),tIo=o(" (MT5 model)"),aIo=l(),_v=a("li"),hhe=a("strong"),nIo=o("pegasus"),sIo=o(" \u2014 "),HO=a("a"),lIo=o("PegasusForConditionalGeneration"),iIo=o(" (Pegasus model)"),dIo=l(),bv=a("li"),uhe=a("strong"),cIo=o("plbart"),mIo=o(" \u2014 "),UO=a("a"),fIo=o("PLBartForConditionalGeneration"),gIo=o(" (PLBart model)"),hIo=l(),vv=a("li"),phe=a("strong"),uIo=o("prophetnet"),pIo=o(" \u2014 "),JO=a("a"),_Io=o("ProphetNetForConditionalGeneration"),bIo=o(" (ProphetNet model)"),vIo=l(),Fv=a("li"),_he=a("strong"),FIo=o("t5"),TIo=o(" \u2014 "),YO=a("a"),MIo=o("T5ForConditionalGeneration"),EIo=o(" (T5 model)"),CIo=l(),Tv=a("li"),bhe=a("strong"),wIo=o("xlm-prophetnet"),AIo=o(" \u2014 "),KO=a("a"),LIo=o("XLMProphetNetForConditionalGeneration"),yIo=o(" (XLM-ProphetNet model)"),xIo=l(),Mv=a("p"),$Io=o("The model is set in evaluation mode by default using "),vhe=a("code"),kIo=o("model.eval()"),SIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=a("code"),RIo=o("model.train()"),PIo=l(),F(Ev.$$.fragment),wOe=l(),Yi=a("h2"),Cv=a("a"),The=a("span"),F($y.$$.fragment),BIo=l(),Mhe=a("span"),IIo=o("AutoModelForSequenceClassification"),AOe=l(),Po=a("div"),F(ky.$$.fragment),NIo=l(),Ki=a("p"),qIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZO=a("a"),jIo=o("from_pretrained()"),DIo=o(" class method or the "),eV=a("a"),GIo=o("from_config()"),OIo=o(` class
method.`),VIo=l(),Sy=a("p"),XIo=o("This class cannot be instantiated directly using "),Ehe=a("code"),zIo=o("__init__()"),QIo=o(" (throws an error)."),WIo=l(),ct=a("div"),F(Ry.$$.fragment),HIo=l(),Che=a("p"),UIo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JIo=l(),Zi=a("p"),YIo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),KIo=o("not"),ZIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=a("a"),eNo=o("from_pretrained()"),oNo=o(" to load the model weights."),rNo=l(),F(wv.$$.fragment),tNo=l(),oo=a("div"),F(Py.$$.fragment),aNo=l(),Ahe=a("p"),nNo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sNo=l(),qa=a("p"),lNo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),iNo=o("model_type"),dNo=o(` property of the config object (either
passed as an argument or loaded from `),yhe=a("code"),cNo=o("pretrained_model_name_or_path"),mNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=a("code"),fNo=o("pretrained_model_name_or_path"),gNo=o(":"),hNo=l(),N=a("ul"),Av=a("li"),$he=a("strong"),uNo=o("albert"),pNo=o(" \u2014 "),rV=a("a"),_No=o("AlbertForSequenceClassification"),bNo=o(" (ALBERT model)"),vNo=l(),Lv=a("li"),khe=a("strong"),FNo=o("bart"),TNo=o(" \u2014 "),tV=a("a"),MNo=o("BartForSequenceClassification"),ENo=o(" (BART model)"),CNo=l(),yv=a("li"),She=a("strong"),wNo=o("bert"),ANo=o(" \u2014 "),aV=a("a"),LNo=o("BertForSequenceClassification"),yNo=o(" (BERT model)"),xNo=l(),xv=a("li"),Rhe=a("strong"),$No=o("big_bird"),kNo=o(" \u2014 "),nV=a("a"),SNo=o("BigBirdForSequenceClassification"),RNo=o(" (BigBird model)"),PNo=l(),$v=a("li"),Phe=a("strong"),BNo=o("bigbird_pegasus"),INo=o(" \u2014 "),sV=a("a"),NNo=o("BigBirdPegasusForSequenceClassification"),qNo=o(" (BigBird-Pegasus model)"),jNo=l(),kv=a("li"),Bhe=a("strong"),DNo=o("bloom"),GNo=o(" \u2014 "),lV=a("a"),ONo=o("BloomForSequenceClassification"),VNo=o(" (BLOOM model)"),XNo=l(),Sv=a("li"),Ihe=a("strong"),zNo=o("camembert"),QNo=o(" \u2014 "),iV=a("a"),WNo=o("CamembertForSequenceClassification"),HNo=o(" (CamemBERT model)"),UNo=l(),Rv=a("li"),Nhe=a("strong"),JNo=o("canine"),YNo=o(" \u2014 "),dV=a("a"),KNo=o("CanineForSequenceClassification"),ZNo=o(" (CANINE model)"),eqo=l(),Pv=a("li"),qhe=a("strong"),oqo=o("convbert"),rqo=o(" \u2014 "),cV=a("a"),tqo=o("ConvBertForSequenceClassification"),aqo=o(" (ConvBERT model)"),nqo=l(),Bv=a("li"),jhe=a("strong"),sqo=o("ctrl"),lqo=o(" \u2014 "),mV=a("a"),iqo=o("CTRLForSequenceClassification"),dqo=o(" (CTRL model)"),cqo=l(),Iv=a("li"),Dhe=a("strong"),mqo=o("data2vec-text"),fqo=o(" \u2014 "),fV=a("a"),gqo=o("Data2VecTextForSequenceClassification"),hqo=o(" (Data2VecText model)"),uqo=l(),Nv=a("li"),Ghe=a("strong"),pqo=o("deberta"),_qo=o(" \u2014 "),gV=a("a"),bqo=o("DebertaForSequenceClassification"),vqo=o(" (DeBERTa model)"),Fqo=l(),qv=a("li"),Ohe=a("strong"),Tqo=o("deberta-v2"),Mqo=o(" \u2014 "),hV=a("a"),Eqo=o("DebertaV2ForSequenceClassification"),Cqo=o(" (DeBERTa-v2 model)"),wqo=l(),jv=a("li"),Vhe=a("strong"),Aqo=o("distilbert"),Lqo=o(" \u2014 "),uV=a("a"),yqo=o("DistilBertForSequenceClassification"),xqo=o(" (DistilBERT model)"),$qo=l(),Dv=a("li"),Xhe=a("strong"),kqo=o("electra"),Sqo=o(" \u2014 "),pV=a("a"),Rqo=o("ElectraForSequenceClassification"),Pqo=o(" (ELECTRA model)"),Bqo=l(),Gv=a("li"),zhe=a("strong"),Iqo=o("flaubert"),Nqo=o(" \u2014 "),_V=a("a"),qqo=o("FlaubertForSequenceClassification"),jqo=o(" (FlauBERT model)"),Dqo=l(),Ov=a("li"),Qhe=a("strong"),Gqo=o("fnet"),Oqo=o(" \u2014 "),bV=a("a"),Vqo=o("FNetForSequenceClassification"),Xqo=o(" (FNet model)"),zqo=l(),Vv=a("li"),Whe=a("strong"),Qqo=o("funnel"),Wqo=o(" \u2014 "),vV=a("a"),Hqo=o("FunnelForSequenceClassification"),Uqo=o(" (Funnel Transformer model)"),Jqo=l(),Xv=a("li"),Hhe=a("strong"),Yqo=o("gpt2"),Kqo=o(" \u2014 "),FV=a("a"),Zqo=o("GPT2ForSequenceClassification"),ejo=o(" (OpenAI GPT-2 model)"),ojo=l(),zv=a("li"),Uhe=a("strong"),rjo=o("gpt_neo"),tjo=o(" \u2014 "),TV=a("a"),ajo=o("GPTNeoForSequenceClassification"),njo=o(" (GPT Neo model)"),sjo=l(),Qv=a("li"),Jhe=a("strong"),ljo=o("gptj"),ijo=o(" \u2014 "),MV=a("a"),djo=o("GPTJForSequenceClassification"),cjo=o(" (GPT-J model)"),mjo=l(),Wv=a("li"),Yhe=a("strong"),fjo=o("ibert"),gjo=o(" \u2014 "),EV=a("a"),hjo=o("IBertForSequenceClassification"),ujo=o(" (I-BERT model)"),pjo=l(),Hv=a("li"),Khe=a("strong"),_jo=o("layoutlm"),bjo=o(" \u2014 "),CV=a("a"),vjo=o("LayoutLMForSequenceClassification"),Fjo=o(" (LayoutLM model)"),Tjo=l(),Uv=a("li"),Zhe=a("strong"),Mjo=o("layoutlmv2"),Ejo=o(" \u2014 "),wV=a("a"),Cjo=o("LayoutLMv2ForSequenceClassification"),wjo=o(" (LayoutLMv2 model)"),Ajo=l(),Jv=a("li"),eue=a("strong"),Ljo=o("layoutlmv3"),yjo=o(" \u2014 "),AV=a("a"),xjo=o("LayoutLMv3ForSequenceClassification"),$jo=o(" (LayoutLMv3 model)"),kjo=l(),Yv=a("li"),oue=a("strong"),Sjo=o("led"),Rjo=o(" \u2014 "),LV=a("a"),Pjo=o("LEDForSequenceClassification"),Bjo=o(" (LED model)"),Ijo=l(),Kv=a("li"),rue=a("strong"),Njo=o("longformer"),qjo=o(" \u2014 "),yV=a("a"),jjo=o("LongformerForSequenceClassification"),Djo=o(" (Longformer model)"),Gjo=l(),Zv=a("li"),tue=a("strong"),Ojo=o("mbart"),Vjo=o(" \u2014 "),xV=a("a"),Xjo=o("MBartForSequenceClassification"),zjo=o(" (mBART model)"),Qjo=l(),eF=a("li"),aue=a("strong"),Wjo=o("megatron-bert"),Hjo=o(" \u2014 "),$V=a("a"),Ujo=o("MegatronBertForSequenceClassification"),Jjo=o(" (Megatron-BERT model)"),Yjo=l(),oF=a("li"),nue=a("strong"),Kjo=o("mobilebert"),Zjo=o(" \u2014 "),kV=a("a"),eDo=o("MobileBertForSequenceClassification"),oDo=o(" (MobileBERT model)"),rDo=l(),rF=a("li"),sue=a("strong"),tDo=o("mpnet"),aDo=o(" \u2014 "),SV=a("a"),nDo=o("MPNetForSequenceClassification"),sDo=o(" (MPNet model)"),lDo=l(),tF=a("li"),lue=a("strong"),iDo=o("nezha"),dDo=o(" \u2014 "),RV=a("a"),cDo=o("NezhaForSequenceClassification"),mDo=o(" (Nezha model)"),fDo=l(),aF=a("li"),iue=a("strong"),gDo=o("nystromformer"),hDo=o(" \u2014 "),PV=a("a"),uDo=o("NystromformerForSequenceClassification"),pDo=o(" (Nystr\xF6mformer model)"),_Do=l(),nF=a("li"),due=a("strong"),bDo=o("openai-gpt"),vDo=o(" \u2014 "),BV=a("a"),FDo=o("OpenAIGPTForSequenceClassification"),TDo=o(" (OpenAI GPT model)"),MDo=l(),sF=a("li"),cue=a("strong"),EDo=o("perceiver"),CDo=o(" \u2014 "),IV=a("a"),wDo=o("PerceiverForSequenceClassification"),ADo=o(" (Perceiver model)"),LDo=l(),lF=a("li"),mue=a("strong"),yDo=o("plbart"),xDo=o(" \u2014 "),NV=a("a"),$Do=o("PLBartForSequenceClassification"),kDo=o(" (PLBart model)"),SDo=l(),iF=a("li"),fue=a("strong"),RDo=o("qdqbert"),PDo=o(" \u2014 "),qV=a("a"),BDo=o("QDQBertForSequenceClassification"),IDo=o(" (QDQBert model)"),NDo=l(),dF=a("li"),gue=a("strong"),qDo=o("reformer"),jDo=o(" \u2014 "),jV=a("a"),DDo=o("ReformerForSequenceClassification"),GDo=o(" (Reformer model)"),ODo=l(),cF=a("li"),hue=a("strong"),VDo=o("rembert"),XDo=o(" \u2014 "),DV=a("a"),zDo=o("RemBertForSequenceClassification"),QDo=o(" (RemBERT model)"),WDo=l(),mF=a("li"),uue=a("strong"),HDo=o("roberta"),UDo=o(" \u2014 "),GV=a("a"),JDo=o("RobertaForSequenceClassification"),YDo=o(" (RoBERTa model)"),KDo=l(),fF=a("li"),pue=a("strong"),ZDo=o("roformer"),eGo=o(" \u2014 "),OV=a("a"),oGo=o("RoFormerForSequenceClassification"),rGo=o(" (RoFormer model)"),tGo=l(),gF=a("li"),_ue=a("strong"),aGo=o("squeezebert"),nGo=o(" \u2014 "),VV=a("a"),sGo=o("SqueezeBertForSequenceClassification"),lGo=o(" (SqueezeBERT model)"),iGo=l(),hF=a("li"),bue=a("strong"),dGo=o("tapas"),cGo=o(" \u2014 "),XV=a("a"),mGo=o("TapasForSequenceClassification"),fGo=o(" (TAPAS model)"),gGo=l(),uF=a("li"),vue=a("strong"),hGo=o("transfo-xl"),uGo=o(" \u2014 "),zV=a("a"),pGo=o("TransfoXLForSequenceClassification"),_Go=o(" (Transformer-XL model)"),bGo=l(),pF=a("li"),Fue=a("strong"),vGo=o("xlm"),FGo=o(" \u2014 "),QV=a("a"),TGo=o("XLMForSequenceClassification"),MGo=o(" (XLM model)"),EGo=l(),_F=a("li"),Tue=a("strong"),CGo=o("xlm-roberta"),wGo=o(" \u2014 "),WV=a("a"),AGo=o("XLMRobertaForSequenceClassification"),LGo=o(" (XLM-RoBERTa model)"),yGo=l(),bF=a("li"),Mue=a("strong"),xGo=o("xlm-roberta-xl"),$Go=o(" \u2014 "),HV=a("a"),kGo=o("XLMRobertaXLForSequenceClassification"),SGo=o(" (XLM-RoBERTa-XL model)"),RGo=l(),vF=a("li"),Eue=a("strong"),PGo=o("xlnet"),BGo=o(" \u2014 "),UV=a("a"),IGo=o("XLNetForSequenceClassification"),NGo=o(" (XLNet model)"),qGo=l(),FF=a("li"),Cue=a("strong"),jGo=o("yoso"),DGo=o(" \u2014 "),JV=a("a"),GGo=o("YosoForSequenceClassification"),OGo=o(" (YOSO model)"),VGo=l(),TF=a("p"),XGo=o("The model is set in evaluation mode by default using "),wue=a("code"),zGo=o("model.eval()"),QGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),WGo=o("model.train()"),HGo=l(),F(MF.$$.fragment),LOe=l(),ed=a("h2"),EF=a("a"),Lue=a("span"),F(By.$$.fragment),UGo=l(),yue=a("span"),JGo=o("AutoModelForMultipleChoice"),yOe=l(),Bo=a("div"),F(Iy.$$.fragment),YGo=l(),od=a("p"),KGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YV=a("a"),ZGo=o("from_pretrained()"),eOo=o(" class method or the "),KV=a("a"),oOo=o("from_config()"),rOo=o(` class
method.`),tOo=l(),Ny=a("p"),aOo=o("This class cannot be instantiated directly using "),xue=a("code"),nOo=o("__init__()"),sOo=o(" (throws an error)."),lOo=l(),mt=a("div"),F(qy.$$.fragment),iOo=l(),$ue=a("p"),dOo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cOo=l(),rd=a("p"),mOo=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),fOo=o("not"),gOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),hOo=o("from_pretrained()"),uOo=o(" to load the model weights."),pOo=l(),F(CF.$$.fragment),_Oo=l(),ro=a("div"),F(jy.$$.fragment),bOo=l(),Sue=a("p"),vOo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FOo=l(),ja=a("p"),TOo=o("The model class to instantiate is selected based on the "),Rue=a("code"),MOo=o("model_type"),EOo=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),COo=o("pretrained_model_name_or_path"),wOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),AOo=o("pretrained_model_name_or_path"),LOo=o(":"),yOo=l(),Z=a("ul"),wF=a("li"),Iue=a("strong"),xOo=o("albert"),$Oo=o(" \u2014 "),eX=a("a"),kOo=o("AlbertForMultipleChoice"),SOo=o(" (ALBERT model)"),ROo=l(),AF=a("li"),Nue=a("strong"),POo=o("bert"),BOo=o(" \u2014 "),oX=a("a"),IOo=o("BertForMultipleChoice"),NOo=o(" (BERT model)"),qOo=l(),LF=a("li"),que=a("strong"),jOo=o("big_bird"),DOo=o(" \u2014 "),rX=a("a"),GOo=o("BigBirdForMultipleChoice"),OOo=o(" (BigBird model)"),VOo=l(),yF=a("li"),jue=a("strong"),XOo=o("camembert"),zOo=o(" \u2014 "),tX=a("a"),QOo=o("CamembertForMultipleChoice"),WOo=o(" (CamemBERT model)"),HOo=l(),xF=a("li"),Due=a("strong"),UOo=o("canine"),JOo=o(" \u2014 "),aX=a("a"),YOo=o("CanineForMultipleChoice"),KOo=o(" (CANINE model)"),ZOo=l(),$F=a("li"),Gue=a("strong"),eVo=o("convbert"),oVo=o(" \u2014 "),nX=a("a"),rVo=o("ConvBertForMultipleChoice"),tVo=o(" (ConvBERT model)"),aVo=l(),kF=a("li"),Oue=a("strong"),nVo=o("data2vec-text"),sVo=o(" \u2014 "),sX=a("a"),lVo=o("Data2VecTextForMultipleChoice"),iVo=o(" (Data2VecText model)"),dVo=l(),SF=a("li"),Vue=a("strong"),cVo=o("deberta-v2"),mVo=o(" \u2014 "),lX=a("a"),fVo=o("DebertaV2ForMultipleChoice"),gVo=o(" (DeBERTa-v2 model)"),hVo=l(),RF=a("li"),Xue=a("strong"),uVo=o("distilbert"),pVo=o(" \u2014 "),iX=a("a"),_Vo=o("DistilBertForMultipleChoice"),bVo=o(" (DistilBERT model)"),vVo=l(),PF=a("li"),zue=a("strong"),FVo=o("electra"),TVo=o(" \u2014 "),dX=a("a"),MVo=o("ElectraForMultipleChoice"),EVo=o(" (ELECTRA model)"),CVo=l(),BF=a("li"),Que=a("strong"),wVo=o("flaubert"),AVo=o(" \u2014 "),cX=a("a"),LVo=o("FlaubertForMultipleChoice"),yVo=o(" (FlauBERT model)"),xVo=l(),IF=a("li"),Wue=a("strong"),$Vo=o("fnet"),kVo=o(" \u2014 "),mX=a("a"),SVo=o("FNetForMultipleChoice"),RVo=o(" (FNet model)"),PVo=l(),NF=a("li"),Hue=a("strong"),BVo=o("funnel"),IVo=o(" \u2014 "),fX=a("a"),NVo=o("FunnelForMultipleChoice"),qVo=o(" (Funnel Transformer model)"),jVo=l(),qF=a("li"),Uue=a("strong"),DVo=o("ibert"),GVo=o(" \u2014 "),gX=a("a"),OVo=o("IBertForMultipleChoice"),VVo=o(" (I-BERT model)"),XVo=l(),jF=a("li"),Jue=a("strong"),zVo=o("longformer"),QVo=o(" \u2014 "),hX=a("a"),WVo=o("LongformerForMultipleChoice"),HVo=o(" (Longformer model)"),UVo=l(),DF=a("li"),Yue=a("strong"),JVo=o("megatron-bert"),YVo=o(" \u2014 "),uX=a("a"),KVo=o("MegatronBertForMultipleChoice"),ZVo=o(" (Megatron-BERT model)"),eXo=l(),GF=a("li"),Kue=a("strong"),oXo=o("mobilebert"),rXo=o(" \u2014 "),pX=a("a"),tXo=o("MobileBertForMultipleChoice"),aXo=o(" (MobileBERT model)"),nXo=l(),OF=a("li"),Zue=a("strong"),sXo=o("mpnet"),lXo=o(" \u2014 "),_X=a("a"),iXo=o("MPNetForMultipleChoice"),dXo=o(" (MPNet model)"),cXo=l(),VF=a("li"),epe=a("strong"),mXo=o("nezha"),fXo=o(" \u2014 "),bX=a("a"),gXo=o("NezhaForMultipleChoice"),hXo=o(" (Nezha model)"),uXo=l(),XF=a("li"),ope=a("strong"),pXo=o("nystromformer"),_Xo=o(" \u2014 "),vX=a("a"),bXo=o("NystromformerForMultipleChoice"),vXo=o(" (Nystr\xF6mformer model)"),FXo=l(),zF=a("li"),rpe=a("strong"),TXo=o("qdqbert"),MXo=o(" \u2014 "),FX=a("a"),EXo=o("QDQBertForMultipleChoice"),CXo=o(" (QDQBert model)"),wXo=l(),QF=a("li"),tpe=a("strong"),AXo=o("rembert"),LXo=o(" \u2014 "),TX=a("a"),yXo=o("RemBertForMultipleChoice"),xXo=o(" (RemBERT model)"),$Xo=l(),WF=a("li"),ape=a("strong"),kXo=o("roberta"),SXo=o(" \u2014 "),MX=a("a"),RXo=o("RobertaForMultipleChoice"),PXo=o(" (RoBERTa model)"),BXo=l(),HF=a("li"),npe=a("strong"),IXo=o("roformer"),NXo=o(" \u2014 "),EX=a("a"),qXo=o("RoFormerForMultipleChoice"),jXo=o(" (RoFormer model)"),DXo=l(),UF=a("li"),spe=a("strong"),GXo=o("squeezebert"),OXo=o(" \u2014 "),CX=a("a"),VXo=o("SqueezeBertForMultipleChoice"),XXo=o(" (SqueezeBERT model)"),zXo=l(),JF=a("li"),lpe=a("strong"),QXo=o("xlm"),WXo=o(" \u2014 "),wX=a("a"),HXo=o("XLMForMultipleChoice"),UXo=o(" (XLM model)"),JXo=l(),YF=a("li"),ipe=a("strong"),YXo=o("xlm-roberta"),KXo=o(" \u2014 "),AX=a("a"),ZXo=o("XLMRobertaForMultipleChoice"),ezo=o(" (XLM-RoBERTa model)"),ozo=l(),KF=a("li"),dpe=a("strong"),rzo=o("xlm-roberta-xl"),tzo=o(" \u2014 "),LX=a("a"),azo=o("XLMRobertaXLForMultipleChoice"),nzo=o(" (XLM-RoBERTa-XL model)"),szo=l(),ZF=a("li"),cpe=a("strong"),lzo=o("xlnet"),izo=o(" \u2014 "),yX=a("a"),dzo=o("XLNetForMultipleChoice"),czo=o(" (XLNet model)"),mzo=l(),e1=a("li"),mpe=a("strong"),fzo=o("yoso"),gzo=o(" \u2014 "),xX=a("a"),hzo=o("YosoForMultipleChoice"),uzo=o(" (YOSO model)"),pzo=l(),o1=a("p"),_zo=o("The model is set in evaluation mode by default using "),fpe=a("code"),bzo=o("model.eval()"),vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=a("code"),Fzo=o("model.train()"),Tzo=l(),F(r1.$$.fragment),xOe=l(),td=a("h2"),t1=a("a"),hpe=a("span"),F(Dy.$$.fragment),Mzo=l(),upe=a("span"),Ezo=o("AutoModelForNextSentencePrediction"),$Oe=l(),Io=a("div"),F(Gy.$$.fragment),Czo=l(),ad=a("p"),wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$X=a("a"),Azo=o("from_pretrained()"),Lzo=o(" class method or the "),kX=a("a"),yzo=o("from_config()"),xzo=o(` class
method.`),$zo=l(),Oy=a("p"),kzo=o("This class cannot be instantiated directly using "),ppe=a("code"),Szo=o("__init__()"),Rzo=o(" (throws an error)."),Pzo=l(),ft=a("div"),F(Vy.$$.fragment),Bzo=l(),_pe=a("p"),Izo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Nzo=l(),nd=a("p"),qzo=o(`Note:
Loading a model from its configuration file does `),bpe=a("strong"),jzo=o("not"),Dzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),Gzo=o("from_pretrained()"),Ozo=o(" to load the model weights."),Vzo=l(),F(a1.$$.fragment),Xzo=l(),to=a("div"),F(Xy.$$.fragment),zzo=l(),vpe=a("p"),Qzo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wzo=l(),Da=a("p"),Hzo=o("The model class to instantiate is selected based on the "),Fpe=a("code"),Uzo=o("model_type"),Jzo=o(` property of the config object (either
passed as an argument or loaded from `),Tpe=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),Zzo=o("pretrained_model_name_or_path"),eQo=o(":"),oQo=l(),No=a("ul"),n1=a("li"),Epe=a("strong"),rQo=o("bert"),tQo=o(" \u2014 "),RX=a("a"),aQo=o("BertForNextSentencePrediction"),nQo=o(" (BERT model)"),sQo=l(),s1=a("li"),Cpe=a("strong"),lQo=o("fnet"),iQo=o(" \u2014 "),PX=a("a"),dQo=o("FNetForNextSentencePrediction"),cQo=o(" (FNet model)"),mQo=l(),l1=a("li"),wpe=a("strong"),fQo=o("megatron-bert"),gQo=o(" \u2014 "),BX=a("a"),hQo=o("MegatronBertForNextSentencePrediction"),uQo=o(" (Megatron-BERT model)"),pQo=l(),i1=a("li"),Ape=a("strong"),_Qo=o("mobilebert"),bQo=o(" \u2014 "),IX=a("a"),vQo=o("MobileBertForNextSentencePrediction"),FQo=o(" (MobileBERT model)"),TQo=l(),d1=a("li"),Lpe=a("strong"),MQo=o("nezha"),EQo=o(" \u2014 "),NX=a("a"),CQo=o("NezhaForNextSentencePrediction"),wQo=o(" (Nezha model)"),AQo=l(),c1=a("li"),ype=a("strong"),LQo=o("qdqbert"),yQo=o(" \u2014 "),qX=a("a"),xQo=o("QDQBertForNextSentencePrediction"),$Qo=o(" (QDQBert model)"),kQo=l(),m1=a("p"),SQo=o("The model is set in evaluation mode by default using "),xpe=a("code"),RQo=o("model.eval()"),PQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),BQo=o("model.train()"),IQo=l(),F(f1.$$.fragment),kOe=l(),sd=a("h2"),g1=a("a"),kpe=a("span"),F(zy.$$.fragment),NQo=l(),Spe=a("span"),qQo=o("AutoModelForTokenClassification"),SOe=l(),qo=a("div"),F(Qy.$$.fragment),jQo=l(),ld=a("p"),DQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jX=a("a"),GQo=o("from_pretrained()"),OQo=o(" class method or the "),DX=a("a"),VQo=o("from_config()"),XQo=o(` class
method.`),zQo=l(),Wy=a("p"),QQo=o("This class cannot be instantiated directly using "),Rpe=a("code"),WQo=o("__init__()"),HQo=o(" (throws an error)."),UQo=l(),gt=a("div"),F(Hy.$$.fragment),JQo=l(),Ppe=a("p"),YQo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KQo=l(),id=a("p"),ZQo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),eWo=o("not"),oWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),rWo=o("from_pretrained()"),tWo=o(" to load the model weights."),aWo=l(),F(h1.$$.fragment),nWo=l(),ao=a("div"),F(Uy.$$.fragment),sWo=l(),Ipe=a("p"),lWo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iWo=l(),Ga=a("p"),dWo=o("The model class to instantiate is selected based on the "),Npe=a("code"),cWo=o("model_type"),mWo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),fWo=o("pretrained_model_name_or_path"),gWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),hWo=o("pretrained_model_name_or_path"),uWo=o(":"),pWo=l(),H=a("ul"),u1=a("li"),Dpe=a("strong"),_Wo=o("albert"),bWo=o(" \u2014 "),OX=a("a"),vWo=o("AlbertForTokenClassification"),FWo=o(" (ALBERT model)"),TWo=l(),p1=a("li"),Gpe=a("strong"),MWo=o("bert"),EWo=o(" \u2014 "),VX=a("a"),CWo=o("BertForTokenClassification"),wWo=o(" (BERT model)"),AWo=l(),_1=a("li"),Ope=a("strong"),LWo=o("big_bird"),yWo=o(" \u2014 "),XX=a("a"),xWo=o("BigBirdForTokenClassification"),$Wo=o(" (BigBird model)"),kWo=l(),b1=a("li"),Vpe=a("strong"),SWo=o("bloom"),RWo=o(" \u2014 "),zX=a("a"),PWo=o("BloomForTokenClassification"),BWo=o(" (BLOOM model)"),IWo=l(),v1=a("li"),Xpe=a("strong"),NWo=o("camembert"),qWo=o(" \u2014 "),QX=a("a"),jWo=o("CamembertForTokenClassification"),DWo=o(" (CamemBERT model)"),GWo=l(),F1=a("li"),zpe=a("strong"),OWo=o("canine"),VWo=o(" \u2014 "),WX=a("a"),XWo=o("CanineForTokenClassification"),zWo=o(" (CANINE model)"),QWo=l(),T1=a("li"),Qpe=a("strong"),WWo=o("convbert"),HWo=o(" \u2014 "),HX=a("a"),UWo=o("ConvBertForTokenClassification"),JWo=o(" (ConvBERT model)"),YWo=l(),M1=a("li"),Wpe=a("strong"),KWo=o("data2vec-text"),ZWo=o(" \u2014 "),UX=a("a"),eHo=o("Data2VecTextForTokenClassification"),oHo=o(" (Data2VecText model)"),rHo=l(),E1=a("li"),Hpe=a("strong"),tHo=o("deberta"),aHo=o(" \u2014 "),JX=a("a"),nHo=o("DebertaForTokenClassification"),sHo=o(" (DeBERTa model)"),lHo=l(),C1=a("li"),Upe=a("strong"),iHo=o("deberta-v2"),dHo=o(" \u2014 "),YX=a("a"),cHo=o("DebertaV2ForTokenClassification"),mHo=o(" (DeBERTa-v2 model)"),fHo=l(),w1=a("li"),Jpe=a("strong"),gHo=o("distilbert"),hHo=o(" \u2014 "),KX=a("a"),uHo=o("DistilBertForTokenClassification"),pHo=o(" (DistilBERT model)"),_Ho=l(),A1=a("li"),Ype=a("strong"),bHo=o("electra"),vHo=o(" \u2014 "),ZX=a("a"),FHo=o("ElectraForTokenClassification"),THo=o(" (ELECTRA model)"),MHo=l(),L1=a("li"),Kpe=a("strong"),EHo=o("flaubert"),CHo=o(" \u2014 "),ez=a("a"),wHo=o("FlaubertForTokenClassification"),AHo=o(" (FlauBERT model)"),LHo=l(),y1=a("li"),Zpe=a("strong"),yHo=o("fnet"),xHo=o(" \u2014 "),oz=a("a"),$Ho=o("FNetForTokenClassification"),kHo=o(" (FNet model)"),SHo=l(),x1=a("li"),e_e=a("strong"),RHo=o("funnel"),PHo=o(" \u2014 "),rz=a("a"),BHo=o("FunnelForTokenClassification"),IHo=o(" (Funnel Transformer model)"),NHo=l(),$1=a("li"),o_e=a("strong"),qHo=o("gpt2"),jHo=o(" \u2014 "),tz=a("a"),DHo=o("GPT2ForTokenClassification"),GHo=o(" (OpenAI GPT-2 model)"),OHo=l(),k1=a("li"),r_e=a("strong"),VHo=o("ibert"),XHo=o(" \u2014 "),az=a("a"),zHo=o("IBertForTokenClassification"),QHo=o(" (I-BERT model)"),WHo=l(),S1=a("li"),t_e=a("strong"),HHo=o("layoutlm"),UHo=o(" \u2014 "),nz=a("a"),JHo=o("LayoutLMForTokenClassification"),YHo=o(" (LayoutLM model)"),KHo=l(),R1=a("li"),a_e=a("strong"),ZHo=o("layoutlmv2"),eUo=o(" \u2014 "),sz=a("a"),oUo=o("LayoutLMv2ForTokenClassification"),rUo=o(" (LayoutLMv2 model)"),tUo=l(),P1=a("li"),n_e=a("strong"),aUo=o("layoutlmv3"),nUo=o(" \u2014 "),lz=a("a"),sUo=o("LayoutLMv3ForTokenClassification"),lUo=o(" (LayoutLMv3 model)"),iUo=l(),B1=a("li"),s_e=a("strong"),dUo=o("longformer"),cUo=o(" \u2014 "),iz=a("a"),mUo=o("LongformerForTokenClassification"),fUo=o(" (Longformer model)"),gUo=l(),I1=a("li"),l_e=a("strong"),hUo=o("megatron-bert"),uUo=o(" \u2014 "),dz=a("a"),pUo=o("MegatronBertForTokenClassification"),_Uo=o(" (Megatron-BERT model)"),bUo=l(),N1=a("li"),i_e=a("strong"),vUo=o("mobilebert"),FUo=o(" \u2014 "),cz=a("a"),TUo=o("MobileBertForTokenClassification"),MUo=o(" (MobileBERT model)"),EUo=l(),q1=a("li"),d_e=a("strong"),CUo=o("mpnet"),wUo=o(" \u2014 "),mz=a("a"),AUo=o("MPNetForTokenClassification"),LUo=o(" (MPNet model)"),yUo=l(),j1=a("li"),c_e=a("strong"),xUo=o("nezha"),$Uo=o(" \u2014 "),fz=a("a"),kUo=o("NezhaForTokenClassification"),SUo=o(" (Nezha model)"),RUo=l(),D1=a("li"),m_e=a("strong"),PUo=o("nystromformer"),BUo=o(" \u2014 "),gz=a("a"),IUo=o("NystromformerForTokenClassification"),NUo=o(" (Nystr\xF6mformer model)"),qUo=l(),G1=a("li"),f_e=a("strong"),jUo=o("qdqbert"),DUo=o(" \u2014 "),hz=a("a"),GUo=o("QDQBertForTokenClassification"),OUo=o(" (QDQBert model)"),VUo=l(),O1=a("li"),g_e=a("strong"),XUo=o("rembert"),zUo=o(" \u2014 "),uz=a("a"),QUo=o("RemBertForTokenClassification"),WUo=o(" (RemBERT model)"),HUo=l(),V1=a("li"),h_e=a("strong"),UUo=o("roberta"),JUo=o(" \u2014 "),pz=a("a"),YUo=o("RobertaForTokenClassification"),KUo=o(" (RoBERTa model)"),ZUo=l(),X1=a("li"),u_e=a("strong"),eJo=o("roformer"),oJo=o(" \u2014 "),_z=a("a"),rJo=o("RoFormerForTokenClassification"),tJo=o(" (RoFormer model)"),aJo=l(),z1=a("li"),p_e=a("strong"),nJo=o("squeezebert"),sJo=o(" \u2014 "),bz=a("a"),lJo=o("SqueezeBertForTokenClassification"),iJo=o(" (SqueezeBERT model)"),dJo=l(),Q1=a("li"),__e=a("strong"),cJo=o("xlm"),mJo=o(" \u2014 "),vz=a("a"),fJo=o("XLMForTokenClassification"),gJo=o(" (XLM model)"),hJo=l(),W1=a("li"),b_e=a("strong"),uJo=o("xlm-roberta"),pJo=o(" \u2014 "),Fz=a("a"),_Jo=o("XLMRobertaForTokenClassification"),bJo=o(" (XLM-RoBERTa model)"),vJo=l(),H1=a("li"),v_e=a("strong"),FJo=o("xlm-roberta-xl"),TJo=o(" \u2014 "),Tz=a("a"),MJo=o("XLMRobertaXLForTokenClassification"),EJo=o(" (XLM-RoBERTa-XL model)"),CJo=l(),U1=a("li"),F_e=a("strong"),wJo=o("xlnet"),AJo=o(" \u2014 "),Mz=a("a"),LJo=o("XLNetForTokenClassification"),yJo=o(" (XLNet model)"),xJo=l(),J1=a("li"),T_e=a("strong"),$Jo=o("yoso"),kJo=o(" \u2014 "),Ez=a("a"),SJo=o("YosoForTokenClassification"),RJo=o(" (YOSO model)"),PJo=l(),Y1=a("p"),BJo=o("The model is set in evaluation mode by default using "),M_e=a("code"),IJo=o("model.eval()"),NJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=a("code"),qJo=o("model.train()"),jJo=l(),F(K1.$$.fragment),ROe=l(),dd=a("h2"),Z1=a("a"),C_e=a("span"),F(Jy.$$.fragment),DJo=l(),w_e=a("span"),GJo=o("AutoModelForQuestionAnswering"),POe=l(),jo=a("div"),F(Yy.$$.fragment),OJo=l(),cd=a("p"),VJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cz=a("a"),XJo=o("from_pretrained()"),zJo=o(" class method or the "),wz=a("a"),QJo=o("from_config()"),WJo=o(` class
method.`),HJo=l(),Ky=a("p"),UJo=o("This class cannot be instantiated directly using "),A_e=a("code"),JJo=o("__init__()"),YJo=o(" (throws an error)."),KJo=l(),ht=a("div"),F(Zy.$$.fragment),ZJo=l(),L_e=a("p"),eYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oYo=l(),md=a("p"),rYo=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),tYo=o("not"),aYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),nYo=o("from_pretrained()"),sYo=o(" to load the model weights."),lYo=l(),F(eT.$$.fragment),iYo=l(),no=a("div"),F(e8.$$.fragment),dYo=l(),x_e=a("p"),cYo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mYo=l(),Oa=a("p"),fYo=o("The model class to instantiate is selected based on the "),$_e=a("code"),gYo=o("model_type"),hYo=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),uYo=o("pretrained_model_name_or_path"),pYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),_Yo=o("pretrained_model_name_or_path"),bYo=o(":"),vYo=l(),V=a("ul"),oT=a("li"),R_e=a("strong"),FYo=o("albert"),TYo=o(" \u2014 "),Lz=a("a"),MYo=o("AlbertForQuestionAnswering"),EYo=o(" (ALBERT model)"),CYo=l(),rT=a("li"),P_e=a("strong"),wYo=o("bart"),AYo=o(" \u2014 "),yz=a("a"),LYo=o("BartForQuestionAnswering"),yYo=o(" (BART model)"),xYo=l(),tT=a("li"),B_e=a("strong"),$Yo=o("bert"),kYo=o(" \u2014 "),xz=a("a"),SYo=o("BertForQuestionAnswering"),RYo=o(" (BERT model)"),PYo=l(),aT=a("li"),I_e=a("strong"),BYo=o("big_bird"),IYo=o(" \u2014 "),$z=a("a"),NYo=o("BigBirdForQuestionAnswering"),qYo=o(" (BigBird model)"),jYo=l(),nT=a("li"),N_e=a("strong"),DYo=o("bigbird_pegasus"),GYo=o(" \u2014 "),kz=a("a"),OYo=o("BigBirdPegasusForQuestionAnswering"),VYo=o(" (BigBird-Pegasus model)"),XYo=l(),sT=a("li"),q_e=a("strong"),zYo=o("camembert"),QYo=o(" \u2014 "),Sz=a("a"),WYo=o("CamembertForQuestionAnswering"),HYo=o(" (CamemBERT model)"),UYo=l(),lT=a("li"),j_e=a("strong"),JYo=o("canine"),YYo=o(" \u2014 "),Rz=a("a"),KYo=o("CanineForQuestionAnswering"),ZYo=o(" (CANINE model)"),eKo=l(),iT=a("li"),D_e=a("strong"),oKo=o("convbert"),rKo=o(" \u2014 "),Pz=a("a"),tKo=o("ConvBertForQuestionAnswering"),aKo=o(" (ConvBERT model)"),nKo=l(),dT=a("li"),G_e=a("strong"),sKo=o("data2vec-text"),lKo=o(" \u2014 "),Bz=a("a"),iKo=o("Data2VecTextForQuestionAnswering"),dKo=o(" (Data2VecText model)"),cKo=l(),cT=a("li"),O_e=a("strong"),mKo=o("deberta"),fKo=o(" \u2014 "),Iz=a("a"),gKo=o("DebertaForQuestionAnswering"),hKo=o(" (DeBERTa model)"),uKo=l(),mT=a("li"),V_e=a("strong"),pKo=o("deberta-v2"),_Ko=o(" \u2014 "),Nz=a("a"),bKo=o("DebertaV2ForQuestionAnswering"),vKo=o(" (DeBERTa-v2 model)"),FKo=l(),fT=a("li"),X_e=a("strong"),TKo=o("distilbert"),MKo=o(" \u2014 "),qz=a("a"),EKo=o("DistilBertForQuestionAnswering"),CKo=o(" (DistilBERT model)"),wKo=l(),gT=a("li"),z_e=a("strong"),AKo=o("electra"),LKo=o(" \u2014 "),jz=a("a"),yKo=o("ElectraForQuestionAnswering"),xKo=o(" (ELECTRA model)"),$Ko=l(),hT=a("li"),Q_e=a("strong"),kKo=o("flaubert"),SKo=o(" \u2014 "),Dz=a("a"),RKo=o("FlaubertForQuestionAnsweringSimple"),PKo=o(" (FlauBERT model)"),BKo=l(),uT=a("li"),W_e=a("strong"),IKo=o("fnet"),NKo=o(" \u2014 "),Gz=a("a"),qKo=o("FNetForQuestionAnswering"),jKo=o(" (FNet model)"),DKo=l(),pT=a("li"),H_e=a("strong"),GKo=o("funnel"),OKo=o(" \u2014 "),Oz=a("a"),VKo=o("FunnelForQuestionAnswering"),XKo=o(" (Funnel Transformer model)"),zKo=l(),_T=a("li"),U_e=a("strong"),QKo=o("gptj"),WKo=o(" \u2014 "),Vz=a("a"),HKo=o("GPTJForQuestionAnswering"),UKo=o(" (GPT-J model)"),JKo=l(),bT=a("li"),J_e=a("strong"),YKo=o("ibert"),KKo=o(" \u2014 "),Xz=a("a"),ZKo=o("IBertForQuestionAnswering"),eZo=o(" (I-BERT model)"),oZo=l(),vT=a("li"),Y_e=a("strong"),rZo=o("layoutlmv2"),tZo=o(" \u2014 "),zz=a("a"),aZo=o("LayoutLMv2ForQuestionAnswering"),nZo=o(" (LayoutLMv2 model)"),sZo=l(),FT=a("li"),K_e=a("strong"),lZo=o("layoutlmv3"),iZo=o(" \u2014 "),Qz=a("a"),dZo=o("LayoutLMv3ForQuestionAnswering"),cZo=o(" (LayoutLMv3 model)"),mZo=l(),TT=a("li"),Z_e=a("strong"),fZo=o("led"),gZo=o(" \u2014 "),Wz=a("a"),hZo=o("LEDForQuestionAnswering"),uZo=o(" (LED model)"),pZo=l(),MT=a("li"),e2e=a("strong"),_Zo=o("longformer"),bZo=o(" \u2014 "),Hz=a("a"),vZo=o("LongformerForQuestionAnswering"),FZo=o(" (Longformer model)"),TZo=l(),ET=a("li"),o2e=a("strong"),MZo=o("lxmert"),EZo=o(" \u2014 "),Uz=a("a"),CZo=o("LxmertForQuestionAnswering"),wZo=o(" (LXMERT model)"),AZo=l(),CT=a("li"),r2e=a("strong"),LZo=o("mbart"),yZo=o(" \u2014 "),Jz=a("a"),xZo=o("MBartForQuestionAnswering"),$Zo=o(" (mBART model)"),kZo=l(),wT=a("li"),t2e=a("strong"),SZo=o("megatron-bert"),RZo=o(" \u2014 "),Yz=a("a"),PZo=o("MegatronBertForQuestionAnswering"),BZo=o(" (Megatron-BERT model)"),IZo=l(),AT=a("li"),a2e=a("strong"),NZo=o("mobilebert"),qZo=o(" \u2014 "),Kz=a("a"),jZo=o("MobileBertForQuestionAnswering"),DZo=o(" (MobileBERT model)"),GZo=l(),LT=a("li"),n2e=a("strong"),OZo=o("mpnet"),VZo=o(" \u2014 "),Zz=a("a"),XZo=o("MPNetForQuestionAnswering"),zZo=o(" (MPNet model)"),QZo=l(),yT=a("li"),s2e=a("strong"),WZo=o("nezha"),HZo=o(" \u2014 "),eQ=a("a"),UZo=o("NezhaForQuestionAnswering"),JZo=o(" (Nezha model)"),YZo=l(),xT=a("li"),l2e=a("strong"),KZo=o("nystromformer"),ZZo=o(" \u2014 "),oQ=a("a"),eer=o("NystromformerForQuestionAnswering"),oer=o(" (Nystr\xF6mformer model)"),rer=l(),$T=a("li"),i2e=a("strong"),ter=o("qdqbert"),aer=o(" \u2014 "),rQ=a("a"),ner=o("QDQBertForQuestionAnswering"),ser=o(" (QDQBert model)"),ler=l(),kT=a("li"),d2e=a("strong"),ier=o("reformer"),der=o(" \u2014 "),tQ=a("a"),cer=o("ReformerForQuestionAnswering"),mer=o(" (Reformer model)"),fer=l(),ST=a("li"),c2e=a("strong"),ger=o("rembert"),her=o(" \u2014 "),aQ=a("a"),uer=o("RemBertForQuestionAnswering"),per=o(" (RemBERT model)"),_er=l(),RT=a("li"),m2e=a("strong"),ber=o("roberta"),ver=o(" \u2014 "),nQ=a("a"),Fer=o("RobertaForQuestionAnswering"),Ter=o(" (RoBERTa model)"),Mer=l(),PT=a("li"),f2e=a("strong"),Eer=o("roformer"),Cer=o(" \u2014 "),sQ=a("a"),wer=o("RoFormerForQuestionAnswering"),Aer=o(" (RoFormer model)"),Ler=l(),BT=a("li"),g2e=a("strong"),yer=o("splinter"),xer=o(" \u2014 "),lQ=a("a"),$er=o("SplinterForQuestionAnswering"),ker=o(" (Splinter model)"),Ser=l(),IT=a("li"),h2e=a("strong"),Rer=o("squeezebert"),Per=o(" \u2014 "),iQ=a("a"),Ber=o("SqueezeBertForQuestionAnswering"),Ier=o(" (SqueezeBERT model)"),Ner=l(),NT=a("li"),u2e=a("strong"),qer=o("xlm"),jer=o(" \u2014 "),dQ=a("a"),Der=o("XLMForQuestionAnsweringSimple"),Ger=o(" (XLM model)"),Oer=l(),qT=a("li"),p2e=a("strong"),Ver=o("xlm-roberta"),Xer=o(" \u2014 "),cQ=a("a"),zer=o("XLMRobertaForQuestionAnswering"),Qer=o(" (XLM-RoBERTa model)"),Wer=l(),jT=a("li"),_2e=a("strong"),Her=o("xlm-roberta-xl"),Uer=o(" \u2014 "),mQ=a("a"),Jer=o("XLMRobertaXLForQuestionAnswering"),Yer=o(" (XLM-RoBERTa-XL model)"),Ker=l(),DT=a("li"),b2e=a("strong"),Zer=o("xlnet"),eor=o(" \u2014 "),fQ=a("a"),oor=o("XLNetForQuestionAnsweringSimple"),ror=o(" (XLNet model)"),tor=l(),GT=a("li"),v2e=a("strong"),aor=o("yoso"),nor=o(" \u2014 "),gQ=a("a"),sor=o("YosoForQuestionAnswering"),lor=o(" (YOSO model)"),ior=l(),OT=a("p"),dor=o("The model is set in evaluation mode by default using "),F2e=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),gor=o("model.train()"),hor=l(),F(VT.$$.fragment),BOe=l(),fd=a("h2"),XT=a("a"),M2e=a("span"),F(o8.$$.fragment),uor=l(),E2e=a("span"),por=o("AutoModelForTableQuestionAnswering"),IOe=l(),Do=a("div"),F(r8.$$.fragment),_or=l(),gd=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hQ=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),uQ=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),t8=a("p"),Cor=o("This class cannot be instantiated directly using "),C2e=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),Lor=l(),ut=a("div"),F(a8.$$.fragment),yor=l(),w2e=a("p"),xor=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$or=l(),hd=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Por=o("from_pretrained()"),Bor=o(" to load the model weights."),Ior=l(),F(zT.$$.fragment),Nor=l(),so=a("div"),F(n8.$$.fragment),qor=l(),L2e=a("p"),jor=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dor=l(),Va=a("p"),Gor=o("The model class to instantiate is selected based on the "),y2e=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),Qor=o("pretrained_model_name_or_path"),Wor=o(":"),Hor=l(),k2e=a("ul"),QT=a("li"),S2e=a("strong"),Uor=o("tapas"),Jor=o(" \u2014 "),_Q=a("a"),Yor=o("TapasForQuestionAnswering"),Kor=o(" (TAPAS model)"),Zor=l(),WT=a("p"),err=o("The model is set in evaluation mode by default using "),R2e=a("code"),orr=o("model.eval()"),rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=a("code"),trr=o("model.train()"),arr=l(),F(HT.$$.fragment),NOe=l(),ud=a("h2"),UT=a("a"),B2e=a("span"),F(s8.$$.fragment),nrr=l(),I2e=a("span"),srr=o("AutoModelForImageClassification"),qOe=l(),Go=a("div"),F(l8.$$.fragment),lrr=l(),pd=a("p"),irr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bQ=a("a"),drr=o("from_pretrained()"),crr=o(" class method or the "),vQ=a("a"),mrr=o("from_config()"),frr=o(` class
method.`),grr=l(),i8=a("p"),hrr=o("This class cannot be instantiated directly using "),N2e=a("code"),urr=o("__init__()"),prr=o(" (throws an error)."),_rr=l(),pt=a("div"),F(d8.$$.fragment),brr=l(),q2e=a("p"),vrr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Frr=l(),_d=a("p"),Trr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),Mrr=o("not"),Err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),Crr=o("from_pretrained()"),wrr=o(" to load the model weights."),Arr=l(),F(JT.$$.fragment),Lrr=l(),lo=a("div"),F(c8.$$.fragment),yrr=l(),D2e=a("p"),xrr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$rr=l(),Xa=a("p"),krr=o("The model class to instantiate is selected based on the "),G2e=a("code"),Srr=o("model_type"),Rrr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),Prr=o("pretrained_model_name_or_path"),Brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),Irr=o("pretrained_model_name_or_path"),Nrr=o(":"),qrr=l(),Fe=a("ul"),YT=a("li"),X2e=a("strong"),jrr=o("beit"),Drr=o(" \u2014 "),TQ=a("a"),Grr=o("BeitForImageClassification"),Orr=o(" (BEiT model)"),Vrr=l(),KT=a("li"),z2e=a("strong"),Xrr=o("convnext"),zrr=o(" \u2014 "),MQ=a("a"),Qrr=o("ConvNextForImageClassification"),Wrr=o(" (ConvNeXT model)"),Hrr=l(),ZT=a("li"),Q2e=a("strong"),Urr=o("cvt"),Jrr=o(" \u2014 "),EQ=a("a"),Yrr=o("CvtForImageClassification"),Krr=o(" (CvT model)"),Zrr=l(),eM=a("li"),W2e=a("strong"),etr=o("data2vec-vision"),otr=o(" \u2014 "),CQ=a("a"),rtr=o("Data2VecVisionForImageClassification"),ttr=o(" (Data2VecVision model)"),atr=l(),zs=a("li"),H2e=a("strong"),ntr=o("deit"),str=o(" \u2014 "),wQ=a("a"),ltr=o("DeiTForImageClassification"),itr=o(" or "),AQ=a("a"),dtr=o("DeiTForImageClassificationWithTeacher"),ctr=o(" (DeiT model)"),mtr=l(),oM=a("li"),U2e=a("strong"),ftr=o("imagegpt"),gtr=o(" \u2014 "),LQ=a("a"),htr=o("ImageGPTForImageClassification"),utr=o(" (ImageGPT model)"),ptr=l(),Qs=a("li"),J2e=a("strong"),_tr=o("levit"),btr=o(" \u2014 "),yQ=a("a"),vtr=o("LevitForImageClassification"),Ftr=o(" or "),xQ=a("a"),Ttr=o("LevitForImageClassificationWithTeacher"),Mtr=o(" (LeViT model)"),Etr=l(),_t=a("li"),Y2e=a("strong"),Ctr=o("perceiver"),wtr=o(" \u2014 "),$Q=a("a"),Atr=o("PerceiverForImageClassificationLearned"),Ltr=o(" or "),kQ=a("a"),ytr=o("PerceiverForImageClassificationFourier"),xtr=o(" or "),SQ=a("a"),$tr=o("PerceiverForImageClassificationConvProcessing"),ktr=o(" (Perceiver model)"),Str=l(),rM=a("li"),K2e=a("strong"),Rtr=o("poolformer"),Ptr=o(" \u2014 "),RQ=a("a"),Btr=o("PoolFormerForImageClassification"),Itr=o(" (PoolFormer model)"),Ntr=l(),tM=a("li"),Z2e=a("strong"),qtr=o("regnet"),jtr=o(" \u2014 "),PQ=a("a"),Dtr=o("RegNetForImageClassification"),Gtr=o(" (RegNet model)"),Otr=l(),aM=a("li"),ebe=a("strong"),Vtr=o("resnet"),Xtr=o(" \u2014 "),BQ=a("a"),ztr=o("ResNetForImageClassification"),Qtr=o(" (ResNet model)"),Wtr=l(),nM=a("li"),obe=a("strong"),Htr=o("segformer"),Utr=o(" \u2014 "),IQ=a("a"),Jtr=o("SegformerForImageClassification"),Ytr=o(" (SegFormer model)"),Ktr=l(),sM=a("li"),rbe=a("strong"),Ztr=o("swin"),ear=o(" \u2014 "),NQ=a("a"),oar=o("SwinForImageClassification"),rar=o(" (Swin Transformer model)"),tar=l(),lM=a("li"),tbe=a("strong"),aar=o("van"),nar=o(" \u2014 "),qQ=a("a"),sar=o("VanForImageClassification"),lar=o(" (VAN model)"),iar=l(),iM=a("li"),abe=a("strong"),dar=o("vit"),car=o(" \u2014 "),jQ=a("a"),mar=o("ViTForImageClassification"),far=o(" (ViT model)"),gar=l(),dM=a("p"),har=o("The model is set in evaluation mode by default using "),nbe=a("code"),uar=o("model.eval()"),par=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=a("code"),_ar=o("model.train()"),bar=l(),F(cM.$$.fragment),jOe=l(),bd=a("h2"),mM=a("a"),lbe=a("span"),F(m8.$$.fragment),Far=l(),ibe=a("span"),Tar=o("AutoModelForVision2Seq"),DOe=l(),Oo=a("div"),F(f8.$$.fragment),Mar=l(),vd=a("p"),Ear=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=a("a"),Car=o("from_pretrained()"),war=o(" class method or the "),GQ=a("a"),Aar=o("from_config()"),Lar=o(` class
method.`),yar=l(),g8=a("p"),xar=o("This class cannot be instantiated directly using "),dbe=a("code"),$ar=o("__init__()"),kar=o(" (throws an error)."),Sar=l(),bt=a("div"),F(h8.$$.fragment),Rar=l(),cbe=a("p"),Par=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bar=l(),Fd=a("p"),Iar=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),Nar=o("not"),qar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),jar=o("from_pretrained()"),Dar=o(" to load the model weights."),Gar=l(),F(fM.$$.fragment),Oar=l(),io=a("div"),F(u8.$$.fragment),Var=l(),fbe=a("p"),Xar=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zar=l(),za=a("p"),Qar=o("The model class to instantiate is selected based on the "),gbe=a("code"),War=o("model_type"),Har=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),Uar=o("pretrained_model_name_or_path"),Jar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),Yar=o("pretrained_model_name_or_path"),Kar=o(":"),Zar=l(),pbe=a("ul"),gM=a("li"),_be=a("strong"),enr=o("vision-encoder-decoder"),onr=o(" \u2014 "),VQ=a("a"),rnr=o("VisionEncoderDecoderModel"),tnr=o(" (Vision Encoder decoder model)"),anr=l(),hM=a("p"),nnr=o("The model is set in evaluation mode by default using "),bbe=a("code"),snr=o("model.eval()"),lnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vbe=a("code"),inr=o("model.train()"),dnr=l(),F(uM.$$.fragment),GOe=l(),Td=a("h2"),pM=a("a"),Fbe=a("span"),F(p8.$$.fragment),cnr=l(),Tbe=a("span"),mnr=o("AutoModelForVisualQuestionAnswering"),OOe=l(),Vo=a("div"),F(_8.$$.fragment),fnr=l(),Md=a("p"),gnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),XQ=a("a"),hnr=o("from_pretrained()"),unr=o(" class method or the "),zQ=a("a"),pnr=o("from_config()"),_nr=o(` class
method.`),bnr=l(),b8=a("p"),vnr=o("This class cannot be instantiated directly using "),Mbe=a("code"),Fnr=o("__init__()"),Tnr=o(" (throws an error)."),Mnr=l(),vt=a("div"),F(v8.$$.fragment),Enr=l(),Ebe=a("p"),Cnr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),wnr=l(),Ed=a("p"),Anr=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),Lnr=o("not"),ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),xnr=o("from_pretrained()"),$nr=o(" to load the model weights."),knr=l(),F(_M.$$.fragment),Snr=l(),co=a("div"),F(F8.$$.fragment),Rnr=l(),wbe=a("p"),Pnr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Bnr=l(),Qa=a("p"),Inr=o("The model class to instantiate is selected based on the "),Abe=a("code"),Nnr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),Gnr=o("pretrained_model_name_or_path"),Onr=o(":"),Vnr=l(),xbe=a("ul"),bM=a("li"),$be=a("strong"),Xnr=o("vilt"),znr=o(" \u2014 "),WQ=a("a"),Qnr=o("ViltForQuestionAnswering"),Wnr=o(" (ViLT model)"),Hnr=l(),vM=a("p"),Unr=o("The model is set in evaluation mode by default using "),kbe=a("code"),Jnr=o("model.eval()"),Ynr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=a("code"),Knr=o("model.train()"),Znr=l(),F(FM.$$.fragment),VOe=l(),Cd=a("h2"),TM=a("a"),Rbe=a("span"),F(T8.$$.fragment),esr=l(),Pbe=a("span"),osr=o("AutoModelForAudioClassification"),XOe=l(),Xo=a("div"),F(M8.$$.fragment),rsr=l(),wd=a("p"),tsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HQ=a("a"),asr=o("from_pretrained()"),nsr=o(" class method or the "),UQ=a("a"),ssr=o("from_config()"),lsr=o(` class
method.`),isr=l(),E8=a("p"),dsr=o("This class cannot be instantiated directly using "),Bbe=a("code"),csr=o("__init__()"),msr=o(" (throws an error)."),fsr=l(),Ft=a("div"),F(C8.$$.fragment),gsr=l(),Ibe=a("p"),hsr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),usr=l(),Ad=a("p"),psr=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),_sr=o("not"),bsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),vsr=o("from_pretrained()"),Fsr=o(" to load the model weights."),Tsr=l(),F(MM.$$.fragment),Msr=l(),mo=a("div"),F(w8.$$.fragment),Esr=l(),qbe=a("p"),Csr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wsr=l(),Wa=a("p"),Asr=o("The model class to instantiate is selected based on the "),jbe=a("code"),Lsr=o("model_type"),ysr=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),ksr=o("pretrained_model_name_or_path"),Ssr=o(":"),Rsr=l(),Pe=a("ul"),EM=a("li"),Obe=a("strong"),Psr=o("data2vec-audio"),Bsr=o(" \u2014 "),YQ=a("a"),Isr=o("Data2VecAudioForSequenceClassification"),Nsr=o(" (Data2VecAudio model)"),qsr=l(),CM=a("li"),Vbe=a("strong"),jsr=o("hubert"),Dsr=o(" \u2014 "),KQ=a("a"),Gsr=o("HubertForSequenceClassification"),Osr=o(" (Hubert model)"),Vsr=l(),wM=a("li"),Xbe=a("strong"),Xsr=o("sew"),zsr=o(" \u2014 "),ZQ=a("a"),Qsr=o("SEWForSequenceClassification"),Wsr=o(" (SEW model)"),Hsr=l(),AM=a("li"),zbe=a("strong"),Usr=o("sew-d"),Jsr=o(" \u2014 "),eW=a("a"),Ysr=o("SEWDForSequenceClassification"),Ksr=o(" (SEW-D model)"),Zsr=l(),LM=a("li"),Qbe=a("strong"),elr=o("unispeech"),olr=o(" \u2014 "),oW=a("a"),rlr=o("UniSpeechForSequenceClassification"),tlr=o(" (UniSpeech model)"),alr=l(),yM=a("li"),Wbe=a("strong"),nlr=o("unispeech-sat"),slr=o(" \u2014 "),rW=a("a"),llr=o("UniSpeechSatForSequenceClassification"),ilr=o(" (UniSpeechSat model)"),dlr=l(),xM=a("li"),Hbe=a("strong"),clr=o("wav2vec2"),mlr=o(" \u2014 "),tW=a("a"),flr=o("Wav2Vec2ForSequenceClassification"),glr=o(" (Wav2Vec2 model)"),hlr=l(),$M=a("li"),Ube=a("strong"),ulr=o("wav2vec2-conformer"),plr=o(" \u2014 "),aW=a("a"),_lr=o("Wav2Vec2ConformerForSequenceClassification"),blr=o(" (Wav2Vec2-Conformer model)"),vlr=l(),kM=a("li"),Jbe=a("strong"),Flr=o("wavlm"),Tlr=o(" \u2014 "),nW=a("a"),Mlr=o("WavLMForSequenceClassification"),Elr=o(" (WavLM model)"),Clr=l(),SM=a("p"),wlr=o("The model is set in evaluation mode by default using "),Ybe=a("code"),Alr=o("model.eval()"),Llr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=a("code"),ylr=o("model.train()"),xlr=l(),F(RM.$$.fragment),zOe=l(),Ld=a("h2"),PM=a("a"),Zbe=a("span"),F(A8.$$.fragment),$lr=l(),eve=a("span"),klr=o("AutoModelForAudioFrameClassification"),QOe=l(),zo=a("div"),F(L8.$$.fragment),Slr=l(),yd=a("p"),Rlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sW=a("a"),Plr=o("from_pretrained()"),Blr=o(" class method or the "),lW=a("a"),Ilr=o("from_config()"),Nlr=o(` class
method.`),qlr=l(),y8=a("p"),jlr=o("This class cannot be instantiated directly using "),ove=a("code"),Dlr=o("__init__()"),Glr=o(" (throws an error)."),Olr=l(),Tt=a("div"),F(x8.$$.fragment),Vlr=l(),rve=a("p"),Xlr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),zlr=l(),xd=a("p"),Qlr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),Wlr=o("not"),Hlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" to load the model weights."),Ylr=l(),F(BM.$$.fragment),Klr=l(),fo=a("div"),F($8.$$.fragment),Zlr=l(),ave=a("p"),eir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),oir=l(),Ha=a("p"),rir=o("The model class to instantiate is selected based on the "),nve=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),et=a("ul"),IM=a("li"),ive=a("strong"),cir=o("data2vec-audio"),mir=o(" \u2014 "),dW=a("a"),fir=o("Data2VecAudioForAudioFrameClassification"),gir=o(" (Data2VecAudio model)"),hir=l(),NM=a("li"),dve=a("strong"),uir=o("unispeech-sat"),pir=o(" \u2014 "),cW=a("a"),_ir=o("UniSpeechSatForAudioFrameClassification"),bir=o(" (UniSpeechSat model)"),vir=l(),qM=a("li"),cve=a("strong"),Fir=o("wav2vec2"),Tir=o(" \u2014 "),mW=a("a"),Mir=o("Wav2Vec2ForAudioFrameClassification"),Eir=o(" (Wav2Vec2 model)"),Cir=l(),jM=a("li"),mve=a("strong"),wir=o("wav2vec2-conformer"),Air=o(" \u2014 "),fW=a("a"),Lir=o("Wav2Vec2ConformerForAudioFrameClassification"),yir=o(" (Wav2Vec2-Conformer model)"),xir=l(),DM=a("li"),fve=a("strong"),$ir=o("wavlm"),kir=o(" \u2014 "),gW=a("a"),Sir=o("WavLMForAudioFrameClassification"),Rir=o(" (WavLM model)"),Pir=l(),GM=a("p"),Bir=o("The model is set in evaluation mode by default using "),gve=a("code"),Iir=o("model.eval()"),Nir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hve=a("code"),qir=o("model.train()"),jir=l(),F(OM.$$.fragment),WOe=l(),$d=a("h2"),VM=a("a"),uve=a("span"),F(k8.$$.fragment),Dir=l(),pve=a("span"),Gir=o("AutoModelForCTC"),HOe=l(),Qo=a("div"),F(S8.$$.fragment),Oir=l(),kd=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hW=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),uW=a("a"),Qir=o("from_config()"),Wir=o(` class
method.`),Hir=l(),R8=a("p"),Uir=o("This class cannot be instantiated directly using "),_ve=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),Mt=a("div"),F(P8.$$.fragment),Zir=l(),bve=a("p"),edr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),odr=l(),Sd=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(XM.$$.fragment),idr=l(),go=a("div"),F(B8.$$.fragment),ddr=l(),Fve=a("p"),cdr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mdr=l(),Ua=a("p"),fdr=o("The model class to instantiate is selected based on the "),Tve=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),udr=o("pretrained_model_name_or_path"),pdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),_dr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),Le=a("ul"),zM=a("li"),Cve=a("strong"),Fdr=o("data2vec-audio"),Tdr=o(" \u2014 "),_W=a("a"),Mdr=o("Data2VecAudioForCTC"),Edr=o(" (Data2VecAudio model)"),Cdr=l(),QM=a("li"),wve=a("strong"),wdr=o("hubert"),Adr=o(" \u2014 "),bW=a("a"),Ldr=o("HubertForCTC"),ydr=o(" (Hubert model)"),xdr=l(),WM=a("li"),Ave=a("strong"),$dr=o("mctct"),kdr=o(" \u2014 "),vW=a("a"),Sdr=o("MCTCTForCTC"),Rdr=o(" (M-CTC-T model)"),Pdr=l(),HM=a("li"),Lve=a("strong"),Bdr=o("sew"),Idr=o(" \u2014 "),FW=a("a"),Ndr=o("SEWForCTC"),qdr=o(" (SEW model)"),jdr=l(),UM=a("li"),yve=a("strong"),Ddr=o("sew-d"),Gdr=o(" \u2014 "),TW=a("a"),Odr=o("SEWDForCTC"),Vdr=o(" (SEW-D model)"),Xdr=l(),JM=a("li"),xve=a("strong"),zdr=o("unispeech"),Qdr=o(" \u2014 "),MW=a("a"),Wdr=o("UniSpeechForCTC"),Hdr=o(" (UniSpeech model)"),Udr=l(),YM=a("li"),$ve=a("strong"),Jdr=o("unispeech-sat"),Ydr=o(" \u2014 "),EW=a("a"),Kdr=o("UniSpeechSatForCTC"),Zdr=o(" (UniSpeechSat model)"),ecr=l(),KM=a("li"),kve=a("strong"),ocr=o("wav2vec2"),rcr=o(" \u2014 "),CW=a("a"),tcr=o("Wav2Vec2ForCTC"),acr=o(" (Wav2Vec2 model)"),ncr=l(),ZM=a("li"),Sve=a("strong"),scr=o("wav2vec2-conformer"),lcr=o(" \u2014 "),wW=a("a"),icr=o("Wav2Vec2ConformerForCTC"),dcr=o(" (Wav2Vec2-Conformer model)"),ccr=l(),eE=a("li"),Rve=a("strong"),mcr=o("wavlm"),fcr=o(" \u2014 "),AW=a("a"),gcr=o("WavLMForCTC"),hcr=o(" (WavLM model)"),ucr=l(),oE=a("p"),pcr=o("The model is set in evaluation mode by default using "),Pve=a("code"),_cr=o("model.eval()"),bcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=a("code"),vcr=o("model.train()"),Fcr=l(),F(rE.$$.fragment),UOe=l(),Rd=a("h2"),tE=a("a"),Ive=a("span"),F(I8.$$.fragment),Tcr=l(),Nve=a("span"),Mcr=o("AutoModelForSpeechSeq2Seq"),JOe=l(),Wo=a("div"),F(N8.$$.fragment),Ecr=l(),Pd=a("p"),Ccr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LW=a("a"),wcr=o("from_pretrained()"),Acr=o(" class method or the "),yW=a("a"),Lcr=o("from_config()"),ycr=o(` class
method.`),xcr=l(),q8=a("p"),$cr=o("This class cannot be instantiated directly using "),qve=a("code"),kcr=o("__init__()"),Scr=o(" (throws an error)."),Rcr=l(),Et=a("div"),F(j8.$$.fragment),Pcr=l(),jve=a("p"),Bcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Icr=l(),Bd=a("p"),Ncr=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),qcr=o("not"),jcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),Dcr=o("from_pretrained()"),Gcr=o(" to load the model weights."),Ocr=l(),F(aE.$$.fragment),Vcr=l(),ho=a("div"),F(D8.$$.fragment),Xcr=l(),Gve=a("p"),zcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qcr=l(),Ja=a("p"),Wcr=o("The model class to instantiate is selected based on the "),Ove=a("code"),Hcr=o("model_type"),Ucr=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),Kcr=o("pretrained_model_name_or_path"),Zcr=o(":"),emr=l(),G8=a("ul"),nE=a("li"),zve=a("strong"),omr=o("speech-encoder-decoder"),rmr=o(" \u2014 "),$W=a("a"),tmr=o("SpeechEncoderDecoderModel"),amr=o(" (Speech Encoder decoder model)"),nmr=l(),sE=a("li"),Qve=a("strong"),smr=o("speech_to_text"),lmr=o(" \u2014 "),kW=a("a"),imr=o("Speech2TextForConditionalGeneration"),dmr=o(" (Speech2Text model)"),cmr=l(),lE=a("p"),mmr=o("The model is set in evaluation mode by default using "),Wve=a("code"),fmr=o("model.eval()"),gmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hve=a("code"),hmr=o("model.train()"),umr=l(),F(iE.$$.fragment),YOe=l(),Id=a("h2"),dE=a("a"),Uve=a("span"),F(O8.$$.fragment),pmr=l(),Jve=a("span"),_mr=o("AutoModelForAudioXVector"),KOe=l(),Ho=a("div"),F(V8.$$.fragment),bmr=l(),Nd=a("p"),vmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),SW=a("a"),Fmr=o("from_pretrained()"),Tmr=o(" class method or the "),RW=a("a"),Mmr=o("from_config()"),Emr=o(` class
method.`),Cmr=l(),X8=a("p"),wmr=o("This class cannot be instantiated directly using "),Yve=a("code"),Amr=o("__init__()"),Lmr=o(" (throws an error)."),ymr=l(),Ct=a("div"),F(z8.$$.fragment),xmr=l(),Kve=a("p"),$mr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),kmr=l(),qd=a("p"),Smr=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),Rmr=o("not"),Pmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),Bmr=o("from_pretrained()"),Imr=o(" to load the model weights."),Nmr=l(),F(cE.$$.fragment),qmr=l(),uo=a("div"),F(Q8.$$.fragment),jmr=l(),eFe=a("p"),Dmr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Gmr=l(),Ya=a("p"),Omr=o("The model class to instantiate is selected based on the "),oFe=a("code"),Vmr=o("model_type"),Xmr=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),zmr=o("pretrained_model_name_or_path"),Qmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),Wmr=o("pretrained_model_name_or_path"),Hmr=o(":"),Umr=l(),ot=a("ul"),mE=a("li"),aFe=a("strong"),Jmr=o("data2vec-audio"),Ymr=o(" \u2014 "),BW=a("a"),Kmr=o("Data2VecAudioForXVector"),Zmr=o(" (Data2VecAudio model)"),efr=l(),fE=a("li"),nFe=a("strong"),ofr=o("unispeech-sat"),rfr=o(" \u2014 "),IW=a("a"),tfr=o("UniSpeechSatForXVector"),afr=o(" (UniSpeechSat model)"),nfr=l(),gE=a("li"),sFe=a("strong"),sfr=o("wav2vec2"),lfr=o(" \u2014 "),NW=a("a"),ifr=o("Wav2Vec2ForXVector"),dfr=o(" (Wav2Vec2 model)"),cfr=l(),hE=a("li"),lFe=a("strong"),mfr=o("wav2vec2-conformer"),ffr=o(" \u2014 "),qW=a("a"),gfr=o("Wav2Vec2ConformerForXVector"),hfr=o(" (Wav2Vec2-Conformer model)"),ufr=l(),uE=a("li"),iFe=a("strong"),pfr=o("wavlm"),_fr=o(" \u2014 "),jW=a("a"),bfr=o("WavLMForXVector"),vfr=o(" (WavLM model)"),Ffr=l(),pE=a("p"),Tfr=o("The model is set in evaluation mode by default using "),dFe=a("code"),Mfr=o("model.eval()"),Efr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cFe=a("code"),Cfr=o("model.train()"),wfr=l(),F(_E.$$.fragment),ZOe=l(),jd=a("h2"),bE=a("a"),mFe=a("span"),F(W8.$$.fragment),Afr=l(),fFe=a("span"),Lfr=o("AutoModelForMaskedImageModeling"),eVe=l(),Uo=a("div"),F(H8.$$.fragment),yfr=l(),Dd=a("p"),xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DW=a("a"),$fr=o("from_pretrained()"),kfr=o(" class method or the "),GW=a("a"),Sfr=o("from_config()"),Rfr=o(` class
method.`),Pfr=l(),U8=a("p"),Bfr=o("This class cannot be instantiated directly using "),gFe=a("code"),Ifr=o("__init__()"),Nfr=o(" (throws an error)."),qfr=l(),wt=a("div"),F(J8.$$.fragment),jfr=l(),hFe=a("p"),Dfr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Gfr=l(),Gd=a("p"),Ofr=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),Vfr=o("not"),Xfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),zfr=o("from_pretrained()"),Qfr=o(" to load the model weights."),Wfr=l(),F(vE.$$.fragment),Hfr=l(),po=a("div"),F(Y8.$$.fragment),Ufr=l(),pFe=a("p"),Jfr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Yfr=l(),Ka=a("p"),Kfr=o("The model class to instantiate is selected based on the "),_Fe=a("code"),Zfr=o("model_type"),egr=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),ogr=o("pretrained_model_name_or_path"),rgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),tgr=o("pretrained_model_name_or_path"),agr=o(":"),ngr=l(),Od=a("ul"),FE=a("li"),FFe=a("strong"),sgr=o("deit"),lgr=o(" \u2014 "),VW=a("a"),igr=o("DeiTForMaskedImageModeling"),dgr=o(" (DeiT model)"),cgr=l(),TE=a("li"),TFe=a("strong"),mgr=o("swin"),fgr=o(" \u2014 "),XW=a("a"),ggr=o("SwinForMaskedImageModeling"),hgr=o(" (Swin Transformer model)"),ugr=l(),ME=a("li"),MFe=a("strong"),pgr=o("vit"),_gr=o(" \u2014 "),zW=a("a"),bgr=o("ViTForMaskedImageModeling"),vgr=o(" (ViT model)"),Fgr=l(),EE=a("p"),Tgr=o("The model is set in evaluation mode by default using "),EFe=a("code"),Mgr=o("model.eval()"),Egr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CFe=a("code"),Cgr=o("model.train()"),wgr=l(),F(CE.$$.fragment),oVe=l(),Vd=a("h2"),wE=a("a"),wFe=a("span"),F(K8.$$.fragment),Agr=l(),AFe=a("span"),Lgr=o("AutoModelForObjectDetection"),rVe=l(),Jo=a("div"),F(Z8.$$.fragment),ygr=l(),Xd=a("p"),xgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QW=a("a"),$gr=o("from_pretrained()"),kgr=o(" class method or the "),WW=a("a"),Sgr=o("from_config()"),Rgr=o(` class
method.`),Pgr=l(),e9=a("p"),Bgr=o("This class cannot be instantiated directly using "),LFe=a("code"),Igr=o("__init__()"),Ngr=o(" (throws an error)."),qgr=l(),At=a("div"),F(o9.$$.fragment),jgr=l(),yFe=a("p"),Dgr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ggr=l(),zd=a("p"),Ogr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),Vgr=o("not"),Xgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),zgr=o("from_pretrained()"),Qgr=o(" to load the model weights."),Wgr=l(),F(AE.$$.fragment),Hgr=l(),_o=a("div"),F(r9.$$.fragment),Ugr=l(),$Fe=a("p"),Jgr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ygr=l(),Za=a("p"),Kgr=o("The model class to instantiate is selected based on the "),kFe=a("code"),Zgr=o("model_type"),ehr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),thr=o("pretrained_model_name_or_path"),ahr=o(":"),nhr=l(),t9=a("ul"),LE=a("li"),PFe=a("strong"),shr=o("detr"),lhr=o(" \u2014 "),UW=a("a"),ihr=o("DetrForObjectDetection"),dhr=o(" (DETR model)"),chr=l(),yE=a("li"),BFe=a("strong"),mhr=o("yolos"),fhr=o(" \u2014 "),JW=a("a"),ghr=o("YolosForObjectDetection"),hhr=o(" (YOLOS model)"),uhr=l(),xE=a("p"),phr=o("The model is set in evaluation mode by default using "),IFe=a("code"),_hr=o("model.eval()"),bhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NFe=a("code"),vhr=o("model.train()"),Fhr=l(),F($E.$$.fragment),tVe=l(),Qd=a("h2"),kE=a("a"),qFe=a("span"),F(a9.$$.fragment),Thr=l(),jFe=a("span"),Mhr=o("AutoModelForImageSegmentation"),aVe=l(),Yo=a("div"),F(n9.$$.fragment),Ehr=l(),Wd=a("p"),Chr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YW=a("a"),whr=o("from_pretrained()"),Ahr=o(" class method or the "),KW=a("a"),Lhr=o("from_config()"),yhr=o(` class
method.`),xhr=l(),s9=a("p"),$hr=o("This class cannot be instantiated directly using "),DFe=a("code"),khr=o("__init__()"),Shr=o(" (throws an error)."),Rhr=l(),Lt=a("div"),F(l9.$$.fragment),Phr=l(),GFe=a("p"),Bhr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ihr=l(),Hd=a("p"),Nhr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),qhr=o("not"),jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" to load the model weights."),Ohr=l(),F(SE.$$.fragment),Vhr=l(),bo=a("div"),F(i9.$$.fragment),Xhr=l(),VFe=a("p"),zhr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qhr=l(),en=a("p"),Whr=o("The model class to instantiate is selected based on the "),XFe=a("code"),Hhr=o("model_type"),Uhr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),Jhr=o("pretrained_model_name_or_path"),Yhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),Khr=o("pretrained_model_name_or_path"),Zhr=o(":"),eur=l(),WFe=a("ul"),RE=a("li"),HFe=a("strong"),our=o("detr"),rur=o(" \u2014 "),eH=a("a"),tur=o("DetrForSegmentation"),aur=o(" (DETR model)"),nur=l(),PE=a("p"),sur=o("The model is set in evaluation mode by default using "),UFe=a("code"),lur=o("model.eval()"),iur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=a("code"),dur=o("model.train()"),cur=l(),F(BE.$$.fragment),nVe=l(),Ud=a("h2"),IE=a("a"),YFe=a("span"),F(d9.$$.fragment),mur=l(),KFe=a("span"),fur=o("AutoModelForSemanticSegmentation"),sVe=l(),Ko=a("div"),F(c9.$$.fragment),gur=l(),Jd=a("p"),hur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oH=a("a"),uur=o("from_pretrained()"),pur=o(" class method or the "),rH=a("a"),_ur=o("from_config()"),bur=o(` class
method.`),vur=l(),m9=a("p"),Fur=o("This class cannot be instantiated directly using "),ZFe=a("code"),Tur=o("__init__()"),Mur=o(" (throws an error)."),Eur=l(),yt=a("div"),F(f9.$$.fragment),Cur=l(),e1e=a("p"),wur=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Aur=l(),Yd=a("p"),Lur=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),yur=o("not"),xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),$ur=o("from_pretrained()"),kur=o(" to load the model weights."),Sur=l(),F(NE.$$.fragment),Rur=l(),vo=a("div"),F(g9.$$.fragment),Pur=l(),r1e=a("p"),Bur=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Iur=l(),on=a("p"),Nur=o("The model class to instantiate is selected based on the "),t1e=a("code"),qur=o("model_type"),jur=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),Dur=o("pretrained_model_name_or_path"),Gur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),Our=o("pretrained_model_name_or_path"),Vur=o(":"),Xur=l(),rn=a("ul"),qE=a("li"),s1e=a("strong"),zur=o("beit"),Qur=o(" \u2014 "),aH=a("a"),Wur=o("BeitForSemanticSegmentation"),Hur=o(" (BEiT model)"),Uur=l(),jE=a("li"),l1e=a("strong"),Jur=o("data2vec-vision"),Yur=o(" \u2014 "),nH=a("a"),Kur=o("Data2VecVisionForSemanticSegmentation"),Zur=o(" (Data2VecVision model)"),epr=l(),DE=a("li"),i1e=a("strong"),opr=o("dpt"),rpr=o(" \u2014 "),sH=a("a"),tpr=o("DPTForSemanticSegmentation"),apr=o(" (DPT model)"),npr=l(),GE=a("li"),d1e=a("strong"),spr=o("segformer"),lpr=o(" \u2014 "),lH=a("a"),ipr=o("SegformerForSemanticSegmentation"),dpr=o(" (SegFormer model)"),cpr=l(),OE=a("p"),mpr=o("The model is set in evaluation mode by default using "),c1e=a("code"),fpr=o("model.eval()"),gpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=a("code"),hpr=o("model.train()"),upr=l(),F(VE.$$.fragment),lVe=l(),Kd=a("h2"),XE=a("a"),f1e=a("span"),F(h9.$$.fragment),ppr=l(),g1e=a("span"),_pr=o("AutoModelForInstanceSegmentation"),iVe=l(),Zo=a("div"),F(u9.$$.fragment),bpr=l(),Zd=a("p"),vpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iH=a("a"),Fpr=o("from_pretrained()"),Tpr=o(" class method or the "),dH=a("a"),Mpr=o("from_config()"),Epr=o(` class
method.`),Cpr=l(),p9=a("p"),wpr=o("This class cannot be instantiated directly using "),h1e=a("code"),Apr=o("__init__()"),Lpr=o(" (throws an error)."),ypr=l(),xt=a("div"),F(_9.$$.fragment),xpr=l(),u1e=a("p"),$pr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kpr=l(),ec=a("p"),Spr=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),Rpr=o("not"),Ppr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),Bpr=o("from_pretrained()"),Ipr=o(" to load the model weights."),Npr=l(),F(zE.$$.fragment),qpr=l(),Fo=a("div"),F(b9.$$.fragment),jpr=l(),_1e=a("p"),Dpr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Gpr=l(),tn=a("p"),Opr=o("The model class to instantiate is selected based on the "),b1e=a("code"),Vpr=o("model_type"),Xpr=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),zpr=o("pretrained_model_name_or_path"),Qpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),Wpr=o("pretrained_model_name_or_path"),Hpr=o(":"),Upr=l(),T1e=a("ul"),QE=a("li"),M1e=a("strong"),Jpr=o("maskformer"),Ypr=o(" \u2014 "),mH=a("a"),Kpr=o("MaskFormerForInstanceSegmentation"),Zpr=o(" (MaskFormer model)"),e_r=l(),WE=a("p"),o_r=o("The model is set in evaluation mode by default using "),E1e=a("code"),r_r=o("model.eval()"),t_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=a("code"),a_r=o("model.train()"),n_r=l(),F(HE.$$.fragment),dVe=l(),oc=a("h2"),UE=a("a"),w1e=a("span"),F(v9.$$.fragment),s_r=l(),A1e=a("span"),l_r=o("TFAutoModel"),cVe=l(),er=a("div"),F(F9.$$.fragment),i_r=l(),rc=a("p"),d_r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fH=a("a"),c_r=o("from_pretrained()"),m_r=o(" class method or the "),gH=a("a"),f_r=o("from_config()"),g_r=o(` class
method.`),h_r=l(),T9=a("p"),u_r=o("This class cannot be instantiated directly using "),L1e=a("code"),p_r=o("__init__()"),__r=o(" (throws an error)."),b_r=l(),$t=a("div"),F(M9.$$.fragment),v_r=l(),y1e=a("p"),F_r=o("Instantiates one of the base model classes of the library from a configuration."),T_r=l(),tc=a("p"),M_r=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),E_r=o("not"),C_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),w_r=o("from_pretrained()"),A_r=o(" to load the model weights."),L_r=l(),F(JE.$$.fragment),y_r=l(),yr=a("div"),F(E9.$$.fragment),x_r=l(),$1e=a("p"),$_r=o("Instantiate one of the base model classes of the library from a pretrained model."),k_r=l(),an=a("p"),S_r=o("The model class to instantiate is selected based on the "),k1e=a("code"),R_r=o("model_type"),P_r=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),B_r=o("pretrained_model_name_or_path"),I_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),N_r=o("pretrained_model_name_or_path"),q_r=o(":"),j_r=l(),j=a("ul"),YE=a("li"),P1e=a("strong"),D_r=o("albert"),G_r=o(" \u2014 "),uH=a("a"),O_r=o("TFAlbertModel"),V_r=o(" (ALBERT model)"),X_r=l(),KE=a("li"),B1e=a("strong"),z_r=o("bart"),Q_r=o(" \u2014 "),pH=a("a"),W_r=o("TFBartModel"),H_r=o(" (BART model)"),U_r=l(),ZE=a("li"),I1e=a("strong"),J_r=o("bert"),Y_r=o(" \u2014 "),_H=a("a"),K_r=o("TFBertModel"),Z_r=o(" (BERT model)"),e2r=l(),e4=a("li"),N1e=a("strong"),o2r=o("blenderbot"),r2r=o(" \u2014 "),bH=a("a"),t2r=o("TFBlenderbotModel"),a2r=o(" (Blenderbot model)"),n2r=l(),o4=a("li"),q1e=a("strong"),s2r=o("blenderbot-small"),l2r=o(" \u2014 "),vH=a("a"),i2r=o("TFBlenderbotSmallModel"),d2r=o(" (BlenderbotSmall model)"),c2r=l(),r4=a("li"),j1e=a("strong"),m2r=o("camembert"),f2r=o(" \u2014 "),FH=a("a"),g2r=o("TFCamembertModel"),h2r=o(" (CamemBERT model)"),u2r=l(),t4=a("li"),D1e=a("strong"),p2r=o("clip"),_2r=o(" \u2014 "),TH=a("a"),b2r=o("TFCLIPModel"),v2r=o(" (CLIP model)"),F2r=l(),a4=a("li"),G1e=a("strong"),T2r=o("convbert"),M2r=o(" \u2014 "),MH=a("a"),E2r=o("TFConvBertModel"),C2r=o(" (ConvBERT model)"),w2r=l(),n4=a("li"),O1e=a("strong"),A2r=o("convnext"),L2r=o(" \u2014 "),EH=a("a"),y2r=o("TFConvNextModel"),x2r=o(" (ConvNeXT model)"),$2r=l(),s4=a("li"),V1e=a("strong"),k2r=o("ctrl"),S2r=o(" \u2014 "),CH=a("a"),R2r=o("TFCTRLModel"),P2r=o(" (CTRL model)"),B2r=l(),l4=a("li"),X1e=a("strong"),I2r=o("data2vec-vision"),N2r=o(" \u2014 "),wH=a("a"),q2r=o("TFData2VecVisionModel"),j2r=o(" (Data2VecVision model)"),D2r=l(),i4=a("li"),z1e=a("strong"),G2r=o("deberta"),O2r=o(" \u2014 "),AH=a("a"),V2r=o("TFDebertaModel"),X2r=o(" (DeBERTa model)"),z2r=l(),d4=a("li"),Q1e=a("strong"),Q2r=o("deberta-v2"),W2r=o(" \u2014 "),LH=a("a"),H2r=o("TFDebertaV2Model"),U2r=o(" (DeBERTa-v2 model)"),J2r=l(),c4=a("li"),W1e=a("strong"),Y2r=o("distilbert"),K2r=o(" \u2014 "),yH=a("a"),Z2r=o("TFDistilBertModel"),ebr=o(" (DistilBERT model)"),obr=l(),m4=a("li"),H1e=a("strong"),rbr=o("dpr"),tbr=o(" \u2014 "),xH=a("a"),abr=o("TFDPRQuestionEncoder"),nbr=o(" (DPR model)"),sbr=l(),f4=a("li"),U1e=a("strong"),lbr=o("electra"),ibr=o(" \u2014 "),$H=a("a"),dbr=o("TFElectraModel"),cbr=o(" (ELECTRA model)"),mbr=l(),g4=a("li"),J1e=a("strong"),fbr=o("flaubert"),gbr=o(" \u2014 "),kH=a("a"),hbr=o("TFFlaubertModel"),ubr=o(" (FlauBERT model)"),pbr=l(),Ws=a("li"),Y1e=a("strong"),_br=o("funnel"),bbr=o(" \u2014 "),SH=a("a"),vbr=o("TFFunnelModel"),Fbr=o(" or "),RH=a("a"),Tbr=o("TFFunnelBaseModel"),Mbr=o(" (Funnel Transformer model)"),Ebr=l(),h4=a("li"),K1e=a("strong"),Cbr=o("gpt2"),wbr=o(" \u2014 "),PH=a("a"),Abr=o("TFGPT2Model"),Lbr=o(" (OpenAI GPT-2 model)"),ybr=l(),u4=a("li"),Z1e=a("strong"),xbr=o("gptj"),$br=o(" \u2014 "),BH=a("a"),kbr=o("TFGPTJModel"),Sbr=o(" (GPT-J model)"),Rbr=l(),p4=a("li"),eTe=a("strong"),Pbr=o("hubert"),Bbr=o(" \u2014 "),IH=a("a"),Ibr=o("TFHubertModel"),Nbr=o(" (Hubert model)"),qbr=l(),_4=a("li"),oTe=a("strong"),jbr=o("layoutlm"),Dbr=o(" \u2014 "),NH=a("a"),Gbr=o("TFLayoutLMModel"),Obr=o(" (LayoutLM model)"),Vbr=l(),b4=a("li"),rTe=a("strong"),Xbr=o("led"),zbr=o(" \u2014 "),qH=a("a"),Qbr=o("TFLEDModel"),Wbr=o(" (LED model)"),Hbr=l(),v4=a("li"),tTe=a("strong"),Ubr=o("longformer"),Jbr=o(" \u2014 "),jH=a("a"),Ybr=o("TFLongformerModel"),Kbr=o(" (Longformer model)"),Zbr=l(),F4=a("li"),aTe=a("strong"),evr=o("lxmert"),ovr=o(" \u2014 "),DH=a("a"),rvr=o("TFLxmertModel"),tvr=o(" (LXMERT model)"),avr=l(),T4=a("li"),nTe=a("strong"),nvr=o("marian"),svr=o(" \u2014 "),GH=a("a"),lvr=o("TFMarianModel"),ivr=o(" (Marian model)"),dvr=l(),M4=a("li"),sTe=a("strong"),cvr=o("mbart"),mvr=o(" \u2014 "),OH=a("a"),fvr=o("TFMBartModel"),gvr=o(" (mBART model)"),hvr=l(),E4=a("li"),lTe=a("strong"),uvr=o("mobilebert"),pvr=o(" \u2014 "),VH=a("a"),_vr=o("TFMobileBertModel"),bvr=o(" (MobileBERT model)"),vvr=l(),C4=a("li"),iTe=a("strong"),Fvr=o("mpnet"),Tvr=o(" \u2014 "),XH=a("a"),Mvr=o("TFMPNetModel"),Evr=o(" (MPNet model)"),Cvr=l(),w4=a("li"),dTe=a("strong"),wvr=o("mt5"),Avr=o(" \u2014 "),zH=a("a"),Lvr=o("TFMT5Model"),yvr=o(" (MT5 model)"),xvr=l(),A4=a("li"),cTe=a("strong"),$vr=o("openai-gpt"),kvr=o(" \u2014 "),QH=a("a"),Svr=o("TFOpenAIGPTModel"),Rvr=o(" (OpenAI GPT model)"),Pvr=l(),L4=a("li"),mTe=a("strong"),Bvr=o("opt"),Ivr=o(" \u2014 "),WH=a("a"),Nvr=o("TFOPTModel"),qvr=o(" (OPT model)"),jvr=l(),y4=a("li"),fTe=a("strong"),Dvr=o("pegasus"),Gvr=o(" \u2014 "),HH=a("a"),Ovr=o("TFPegasusModel"),Vvr=o(" (Pegasus model)"),Xvr=l(),x4=a("li"),gTe=a("strong"),zvr=o("rembert"),Qvr=o(" \u2014 "),UH=a("a"),Wvr=o("TFRemBertModel"),Hvr=o(" (RemBERT model)"),Uvr=l(),$4=a("li"),hTe=a("strong"),Jvr=o("roberta"),Yvr=o(" \u2014 "),JH=a("a"),Kvr=o("TFRobertaModel"),Zvr=o(" (RoBERTa model)"),eFr=l(),k4=a("li"),uTe=a("strong"),oFr=o("roformer"),rFr=o(" \u2014 "),YH=a("a"),tFr=o("TFRoFormerModel"),aFr=o(" (RoFormer model)"),nFr=l(),S4=a("li"),pTe=a("strong"),sFr=o("speech_to_text"),lFr=o(" \u2014 "),KH=a("a"),iFr=o("TFSpeech2TextModel"),dFr=o(" (Speech2Text model)"),cFr=l(),R4=a("li"),_Te=a("strong"),mFr=o("swin"),fFr=o(" \u2014 "),ZH=a("a"),gFr=o("TFSwinModel"),hFr=o(" (Swin Transformer model)"),uFr=l(),P4=a("li"),bTe=a("strong"),pFr=o("t5"),_Fr=o(" \u2014 "),eU=a("a"),bFr=o("TFT5Model"),vFr=o(" (T5 model)"),FFr=l(),B4=a("li"),vTe=a("strong"),TFr=o("tapas"),MFr=o(" \u2014 "),oU=a("a"),EFr=o("TFTapasModel"),CFr=o(" (TAPAS model)"),wFr=l(),I4=a("li"),FTe=a("strong"),AFr=o("transfo-xl"),LFr=o(" \u2014 "),rU=a("a"),yFr=o("TFTransfoXLModel"),xFr=o(" (Transformer-XL model)"),$Fr=l(),N4=a("li"),TTe=a("strong"),kFr=o("vit"),SFr=o(" \u2014 "),tU=a("a"),RFr=o("TFViTModel"),PFr=o(" (ViT model)"),BFr=l(),q4=a("li"),MTe=a("strong"),IFr=o("vit_mae"),NFr=o(" \u2014 "),aU=a("a"),qFr=o("TFViTMAEModel"),jFr=o(" (ViTMAE model)"),DFr=l(),j4=a("li"),ETe=a("strong"),GFr=o("wav2vec2"),OFr=o(" \u2014 "),nU=a("a"),VFr=o("TFWav2Vec2Model"),XFr=o(" (Wav2Vec2 model)"),zFr=l(),D4=a("li"),CTe=a("strong"),QFr=o("xlm"),WFr=o(" \u2014 "),sU=a("a"),HFr=o("TFXLMModel"),UFr=o(" (XLM model)"),JFr=l(),G4=a("li"),wTe=a("strong"),YFr=o("xlm-roberta"),KFr=o(" \u2014 "),lU=a("a"),ZFr=o("TFXLMRobertaModel"),e1r=o(" (XLM-RoBERTa model)"),o1r=l(),O4=a("li"),ATe=a("strong"),r1r=o("xlnet"),t1r=o(" \u2014 "),iU=a("a"),a1r=o("TFXLNetModel"),n1r=o(" (XLNet model)"),s1r=l(),F(V4.$$.fragment),mVe=l(),ac=a("h2"),X4=a("a"),LTe=a("span"),F(C9.$$.fragment),l1r=l(),yTe=a("span"),i1r=o("TFAutoModelForPreTraining"),fVe=l(),or=a("div"),F(w9.$$.fragment),d1r=l(),nc=a("p"),c1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dU=a("a"),m1r=o("from_pretrained()"),f1r=o(" class method or the "),cU=a("a"),g1r=o("from_config()"),h1r=o(` class
method.`),u1r=l(),A9=a("p"),p1r=o("This class cannot be instantiated directly using "),xTe=a("code"),_1r=o("__init__()"),b1r=o(" (throws an error)."),v1r=l(),kt=a("div"),F(L9.$$.fragment),F1r=l(),$Te=a("p"),T1r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),M1r=l(),sc=a("p"),E1r=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),C1r=o("not"),w1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),A1r=o("from_pretrained()"),L1r=o(" to load the model weights."),y1r=l(),F(z4.$$.fragment),x1r=l(),xr=a("div"),F(y9.$$.fragment),$1r=l(),STe=a("p"),k1r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),S1r=l(),nn=a("p"),R1r=o("The model class to instantiate is selected based on the "),RTe=a("code"),P1r=o("model_type"),B1r=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),I1r=o("pretrained_model_name_or_path"),N1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),q1r=o("pretrained_model_name_or_path"),j1r=o(":"),D1r=l(),se=a("ul"),Q4=a("li"),ITe=a("strong"),G1r=o("albert"),O1r=o(" \u2014 "),fU=a("a"),V1r=o("TFAlbertForPreTraining"),X1r=o(" (ALBERT model)"),z1r=l(),W4=a("li"),NTe=a("strong"),Q1r=o("bart"),W1r=o(" \u2014 "),gU=a("a"),H1r=o("TFBartForConditionalGeneration"),U1r=o(" (BART model)"),J1r=l(),H4=a("li"),qTe=a("strong"),Y1r=o("bert"),K1r=o(" \u2014 "),hU=a("a"),Z1r=o("TFBertForPreTraining"),eTr=o(" (BERT model)"),oTr=l(),U4=a("li"),jTe=a("strong"),rTr=o("camembert"),tTr=o(" \u2014 "),uU=a("a"),aTr=o("TFCamembertForMaskedLM"),nTr=o(" (CamemBERT model)"),sTr=l(),J4=a("li"),DTe=a("strong"),lTr=o("ctrl"),iTr=o(" \u2014 "),pU=a("a"),dTr=o("TFCTRLLMHeadModel"),cTr=o(" (CTRL model)"),mTr=l(),Y4=a("li"),GTe=a("strong"),fTr=o("distilbert"),gTr=o(" \u2014 "),_U=a("a"),hTr=o("TFDistilBertForMaskedLM"),uTr=o(" (DistilBERT model)"),pTr=l(),K4=a("li"),OTe=a("strong"),_Tr=o("electra"),bTr=o(" \u2014 "),bU=a("a"),vTr=o("TFElectraForPreTraining"),FTr=o(" (ELECTRA model)"),TTr=l(),Z4=a("li"),VTe=a("strong"),MTr=o("flaubert"),ETr=o(" \u2014 "),vU=a("a"),CTr=o("TFFlaubertWithLMHeadModel"),wTr=o(" (FlauBERT model)"),ATr=l(),eC=a("li"),XTe=a("strong"),LTr=o("funnel"),yTr=o(" \u2014 "),FU=a("a"),xTr=o("TFFunnelForPreTraining"),$Tr=o(" (Funnel Transformer model)"),kTr=l(),oC=a("li"),zTe=a("strong"),STr=o("gpt2"),RTr=o(" \u2014 "),TU=a("a"),PTr=o("TFGPT2LMHeadModel"),BTr=o(" (OpenAI GPT-2 model)"),ITr=l(),rC=a("li"),QTe=a("strong"),NTr=o("layoutlm"),qTr=o(" \u2014 "),MU=a("a"),jTr=o("TFLayoutLMForMaskedLM"),DTr=o(" (LayoutLM model)"),GTr=l(),tC=a("li"),WTe=a("strong"),OTr=o("lxmert"),VTr=o(" \u2014 "),EU=a("a"),XTr=o("TFLxmertForPreTraining"),zTr=o(" (LXMERT model)"),QTr=l(),aC=a("li"),HTe=a("strong"),WTr=o("mobilebert"),HTr=o(" \u2014 "),CU=a("a"),UTr=o("TFMobileBertForPreTraining"),JTr=o(" (MobileBERT model)"),YTr=l(),nC=a("li"),UTe=a("strong"),KTr=o("mpnet"),ZTr=o(" \u2014 "),wU=a("a"),eMr=o("TFMPNetForMaskedLM"),oMr=o(" (MPNet model)"),rMr=l(),sC=a("li"),JTe=a("strong"),tMr=o("openai-gpt"),aMr=o(" \u2014 "),AU=a("a"),nMr=o("TFOpenAIGPTLMHeadModel"),sMr=o(" (OpenAI GPT model)"),lMr=l(),lC=a("li"),YTe=a("strong"),iMr=o("roberta"),dMr=o(" \u2014 "),LU=a("a"),cMr=o("TFRobertaForMaskedLM"),mMr=o(" (RoBERTa model)"),fMr=l(),iC=a("li"),KTe=a("strong"),gMr=o("t5"),hMr=o(" \u2014 "),yU=a("a"),uMr=o("TFT5ForConditionalGeneration"),pMr=o(" (T5 model)"),_Mr=l(),dC=a("li"),ZTe=a("strong"),bMr=o("tapas"),vMr=o(" \u2014 "),xU=a("a"),FMr=o("TFTapasForMaskedLM"),TMr=o(" (TAPAS model)"),MMr=l(),cC=a("li"),eMe=a("strong"),EMr=o("transfo-xl"),CMr=o(" \u2014 "),$U=a("a"),wMr=o("TFTransfoXLLMHeadModel"),AMr=o(" (Transformer-XL model)"),LMr=l(),mC=a("li"),oMe=a("strong"),yMr=o("vit_mae"),xMr=o(" \u2014 "),kU=a("a"),$Mr=o("TFViTMAEForPreTraining"),kMr=o(" (ViTMAE model)"),SMr=l(),fC=a("li"),rMe=a("strong"),RMr=o("xlm"),PMr=o(" \u2014 "),SU=a("a"),BMr=o("TFXLMWithLMHeadModel"),IMr=o(" (XLM model)"),NMr=l(),gC=a("li"),tMe=a("strong"),qMr=o("xlm-roberta"),jMr=o(" \u2014 "),RU=a("a"),DMr=o("TFXLMRobertaForMaskedLM"),GMr=o(" (XLM-RoBERTa model)"),OMr=l(),hC=a("li"),aMe=a("strong"),VMr=o("xlnet"),XMr=o(" \u2014 "),PU=a("a"),zMr=o("TFXLNetLMHeadModel"),QMr=o(" (XLNet model)"),WMr=l(),F(uC.$$.fragment),gVe=l(),lc=a("h2"),pC=a("a"),nMe=a("span"),F(x9.$$.fragment),HMr=l(),sMe=a("span"),UMr=o("TFAutoModelForCausalLM"),hVe=l(),rr=a("div"),F($9.$$.fragment),JMr=l(),ic=a("p"),YMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BU=a("a"),KMr=o("from_pretrained()"),ZMr=o(" class method or the "),IU=a("a"),eEr=o("from_config()"),oEr=o(` class
method.`),rEr=l(),k9=a("p"),tEr=o("This class cannot be instantiated directly using "),lMe=a("code"),aEr=o("__init__()"),nEr=o(" (throws an error)."),sEr=l(),St=a("div"),F(S9.$$.fragment),lEr=l(),iMe=a("p"),iEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dEr=l(),dc=a("p"),cEr=o(`Note:
Loading a model from its configuration file does `),dMe=a("strong"),mEr=o("not"),fEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),gEr=o("from_pretrained()"),hEr=o(" to load the model weights."),uEr=l(),F(_C.$$.fragment),pEr=l(),$r=a("div"),F(R9.$$.fragment),_Er=l(),cMe=a("p"),bEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vEr=l(),sn=a("p"),FEr=o("The model class to instantiate is selected based on the "),mMe=a("code"),TEr=o("model_type"),MEr=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),EEr=o("pretrained_model_name_or_path"),CEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(":"),LEr=l(),Me=a("ul"),bC=a("li"),hMe=a("strong"),yEr=o("bert"),xEr=o(" \u2014 "),qU=a("a"),$Er=o("TFBertLMHeadModel"),kEr=o(" (BERT model)"),SEr=l(),vC=a("li"),uMe=a("strong"),REr=o("camembert"),PEr=o(" \u2014 "),jU=a("a"),BEr=o("TFCamembertForCausalLM"),IEr=o(" (CamemBERT model)"),NEr=l(),FC=a("li"),pMe=a("strong"),qEr=o("ctrl"),jEr=o(" \u2014 "),DU=a("a"),DEr=o("TFCTRLLMHeadModel"),GEr=o(" (CTRL model)"),OEr=l(),TC=a("li"),_Me=a("strong"),VEr=o("gpt2"),XEr=o(" \u2014 "),GU=a("a"),zEr=o("TFGPT2LMHeadModel"),QEr=o(" (OpenAI GPT-2 model)"),WEr=l(),MC=a("li"),bMe=a("strong"),HEr=o("gptj"),UEr=o(" \u2014 "),OU=a("a"),JEr=o("TFGPTJForCausalLM"),YEr=o(" (GPT-J model)"),KEr=l(),EC=a("li"),vMe=a("strong"),ZEr=o("openai-gpt"),e4r=o(" \u2014 "),VU=a("a"),o4r=o("TFOpenAIGPTLMHeadModel"),r4r=o(" (OpenAI GPT model)"),t4r=l(),CC=a("li"),FMe=a("strong"),a4r=o("opt"),n4r=o(" \u2014 "),XU=a("a"),s4r=o("TFOPTForCausalLM"),l4r=o(" (OPT model)"),i4r=l(),wC=a("li"),TMe=a("strong"),d4r=o("rembert"),c4r=o(" \u2014 "),zU=a("a"),m4r=o("TFRemBertForCausalLM"),f4r=o(" (RemBERT model)"),g4r=l(),AC=a("li"),MMe=a("strong"),h4r=o("roberta"),u4r=o(" \u2014 "),QU=a("a"),p4r=o("TFRobertaForCausalLM"),_4r=o(" (RoBERTa model)"),b4r=l(),LC=a("li"),EMe=a("strong"),v4r=o("roformer"),F4r=o(" \u2014 "),WU=a("a"),T4r=o("TFRoFormerForCausalLM"),M4r=o(" (RoFormer model)"),E4r=l(),yC=a("li"),CMe=a("strong"),C4r=o("transfo-xl"),w4r=o(" \u2014 "),HU=a("a"),A4r=o("TFTransfoXLLMHeadModel"),L4r=o(" (Transformer-XL model)"),y4r=l(),xC=a("li"),wMe=a("strong"),x4r=o("xlm"),$4r=o(" \u2014 "),UU=a("a"),k4r=o("TFXLMWithLMHeadModel"),S4r=o(" (XLM model)"),R4r=l(),$C=a("li"),AMe=a("strong"),P4r=o("xlnet"),B4r=o(" \u2014 "),JU=a("a"),I4r=o("TFXLNetLMHeadModel"),N4r=o(" (XLNet model)"),q4r=l(),F(kC.$$.fragment),uVe=l(),cc=a("h2"),SC=a("a"),LMe=a("span"),F(P9.$$.fragment),j4r=l(),yMe=a("span"),D4r=o("TFAutoModelForImageClassification"),pVe=l(),tr=a("div"),F(B9.$$.fragment),G4r=l(),mc=a("p"),O4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YU=a("a"),V4r=o("from_pretrained()"),X4r=o(" class method or the "),KU=a("a"),z4r=o("from_config()"),Q4r=o(` class
method.`),W4r=l(),I9=a("p"),H4r=o("This class cannot be instantiated directly using "),xMe=a("code"),U4r=o("__init__()"),J4r=o(" (throws an error)."),Y4r=l(),Rt=a("div"),F(N9.$$.fragment),K4r=l(),$Me=a("p"),Z4r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eCr=l(),fc=a("p"),oCr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),rCr=o("not"),tCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),aCr=o("from_pretrained()"),nCr=o(" to load the model weights."),sCr=l(),F(RC.$$.fragment),lCr=l(),kr=a("div"),F(q9.$$.fragment),iCr=l(),SMe=a("p"),dCr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cCr=l(),ln=a("p"),mCr=o("The model class to instantiate is selected based on the "),RMe=a("code"),fCr=o("model_type"),gCr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),hCr=o("pretrained_model_name_or_path"),uCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),pCr=o("pretrained_model_name_or_path"),_Cr=o(":"),bCr=l(),dn=a("ul"),PC=a("li"),IMe=a("strong"),vCr=o("convnext"),FCr=o(" \u2014 "),eJ=a("a"),TCr=o("TFConvNextForImageClassification"),MCr=o(" (ConvNeXT model)"),ECr=l(),BC=a("li"),NMe=a("strong"),CCr=o("data2vec-vision"),wCr=o(" \u2014 "),oJ=a("a"),ACr=o("TFData2VecVisionForImageClassification"),LCr=o(" (Data2VecVision model)"),yCr=l(),IC=a("li"),qMe=a("strong"),xCr=o("swin"),$Cr=o(" \u2014 "),rJ=a("a"),kCr=o("TFSwinForImageClassification"),SCr=o(" (Swin Transformer model)"),RCr=l(),NC=a("li"),jMe=a("strong"),PCr=o("vit"),BCr=o(" \u2014 "),tJ=a("a"),ICr=o("TFViTForImageClassification"),NCr=o(" (ViT model)"),qCr=l(),F(qC.$$.fragment),_Ve=l(),gc=a("h2"),jC=a("a"),DMe=a("span"),F(j9.$$.fragment),jCr=l(),GMe=a("span"),DCr=o("TFAutoModelForMaskedLM"),bVe=l(),ar=a("div"),F(D9.$$.fragment),GCr=l(),hc=a("p"),OCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aJ=a("a"),VCr=o("from_pretrained()"),XCr=o(" class method or the "),nJ=a("a"),zCr=o("from_config()"),QCr=o(` class
method.`),WCr=l(),G9=a("p"),HCr=o("This class cannot be instantiated directly using "),OMe=a("code"),UCr=o("__init__()"),JCr=o(" (throws an error)."),YCr=l(),Pt=a("div"),F(O9.$$.fragment),KCr=l(),VMe=a("p"),ZCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e5r=l(),uc=a("p"),o5r=o(`Note:
Loading a model from its configuration file does `),XMe=a("strong"),r5r=o("not"),t5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),a5r=o("from_pretrained()"),n5r=o(" to load the model weights."),s5r=l(),F(DC.$$.fragment),l5r=l(),Sr=a("div"),F(V9.$$.fragment),i5r=l(),zMe=a("p"),d5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c5r=l(),cn=a("p"),m5r=o("The model class to instantiate is selected based on the "),QMe=a("code"),f5r=o("model_type"),g5r=o(` property of the config object (either
passed as an argument or loaded from `),WMe=a("code"),h5r=o("pretrained_model_name_or_path"),u5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=a("code"),p5r=o("pretrained_model_name_or_path"),_5r=o(":"),b5r=l(),ie=a("ul"),GC=a("li"),UMe=a("strong"),v5r=o("albert"),F5r=o(" \u2014 "),lJ=a("a"),T5r=o("TFAlbertForMaskedLM"),M5r=o(" (ALBERT model)"),E5r=l(),OC=a("li"),JMe=a("strong"),C5r=o("bert"),w5r=o(" \u2014 "),iJ=a("a"),A5r=o("TFBertForMaskedLM"),L5r=o(" (BERT model)"),y5r=l(),VC=a("li"),YMe=a("strong"),x5r=o("camembert"),$5r=o(" \u2014 "),dJ=a("a"),k5r=o("TFCamembertForMaskedLM"),S5r=o(" (CamemBERT model)"),R5r=l(),XC=a("li"),KMe=a("strong"),P5r=o("convbert"),B5r=o(" \u2014 "),cJ=a("a"),I5r=o("TFConvBertForMaskedLM"),N5r=o(" (ConvBERT model)"),q5r=l(),zC=a("li"),ZMe=a("strong"),j5r=o("deberta"),D5r=o(" \u2014 "),mJ=a("a"),G5r=o("TFDebertaForMaskedLM"),O5r=o(" (DeBERTa model)"),V5r=l(),QC=a("li"),eEe=a("strong"),X5r=o("deberta-v2"),z5r=o(" \u2014 "),fJ=a("a"),Q5r=o("TFDebertaV2ForMaskedLM"),W5r=o(" (DeBERTa-v2 model)"),H5r=l(),WC=a("li"),oEe=a("strong"),U5r=o("distilbert"),J5r=o(" \u2014 "),gJ=a("a"),Y5r=o("TFDistilBertForMaskedLM"),K5r=o(" (DistilBERT model)"),Z5r=l(),HC=a("li"),rEe=a("strong"),e3r=o("electra"),o3r=o(" \u2014 "),hJ=a("a"),r3r=o("TFElectraForMaskedLM"),t3r=o(" (ELECTRA model)"),a3r=l(),UC=a("li"),tEe=a("strong"),n3r=o("flaubert"),s3r=o(" \u2014 "),uJ=a("a"),l3r=o("TFFlaubertWithLMHeadModel"),i3r=o(" (FlauBERT model)"),d3r=l(),JC=a("li"),aEe=a("strong"),c3r=o("funnel"),m3r=o(" \u2014 "),pJ=a("a"),f3r=o("TFFunnelForMaskedLM"),g3r=o(" (Funnel Transformer model)"),h3r=l(),YC=a("li"),nEe=a("strong"),u3r=o("layoutlm"),p3r=o(" \u2014 "),_J=a("a"),_3r=o("TFLayoutLMForMaskedLM"),b3r=o(" (LayoutLM model)"),v3r=l(),KC=a("li"),sEe=a("strong"),F3r=o("longformer"),T3r=o(" \u2014 "),bJ=a("a"),M3r=o("TFLongformerForMaskedLM"),E3r=o(" (Longformer model)"),C3r=l(),ZC=a("li"),lEe=a("strong"),w3r=o("mobilebert"),A3r=o(" \u2014 "),vJ=a("a"),L3r=o("TFMobileBertForMaskedLM"),y3r=o(" (MobileBERT model)"),x3r=l(),e5=a("li"),iEe=a("strong"),$3r=o("mpnet"),k3r=o(" \u2014 "),FJ=a("a"),S3r=o("TFMPNetForMaskedLM"),R3r=o(" (MPNet model)"),P3r=l(),o5=a("li"),dEe=a("strong"),B3r=o("rembert"),I3r=o(" \u2014 "),TJ=a("a"),N3r=o("TFRemBertForMaskedLM"),q3r=o(" (RemBERT model)"),j3r=l(),r5=a("li"),cEe=a("strong"),D3r=o("roberta"),G3r=o(" \u2014 "),MJ=a("a"),O3r=o("TFRobertaForMaskedLM"),V3r=o(" (RoBERTa model)"),X3r=l(),t5=a("li"),mEe=a("strong"),z3r=o("roformer"),Q3r=o(" \u2014 "),EJ=a("a"),W3r=o("TFRoFormerForMaskedLM"),H3r=o(" (RoFormer model)"),U3r=l(),a5=a("li"),fEe=a("strong"),J3r=o("tapas"),Y3r=o(" \u2014 "),CJ=a("a"),K3r=o("TFTapasForMaskedLM"),Z3r=o(" (TAPAS model)"),e0r=l(),n5=a("li"),gEe=a("strong"),o0r=o("xlm"),r0r=o(" \u2014 "),wJ=a("a"),t0r=o("TFXLMWithLMHeadModel"),a0r=o(" (XLM model)"),n0r=l(),s5=a("li"),hEe=a("strong"),s0r=o("xlm-roberta"),l0r=o(" \u2014 "),AJ=a("a"),i0r=o("TFXLMRobertaForMaskedLM"),d0r=o(" (XLM-RoBERTa model)"),c0r=l(),F(l5.$$.fragment),vVe=l(),pc=a("h2"),i5=a("a"),uEe=a("span"),F(X9.$$.fragment),m0r=l(),pEe=a("span"),f0r=o("TFAutoModelForSeq2SeqLM"),FVe=l(),nr=a("div"),F(z9.$$.fragment),g0r=l(),_c=a("p"),h0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LJ=a("a"),u0r=o("from_pretrained()"),p0r=o(" class method or the "),yJ=a("a"),_0r=o("from_config()"),b0r=o(` class
method.`),v0r=l(),Q9=a("p"),F0r=o("This class cannot be instantiated directly using "),_Ee=a("code"),T0r=o("__init__()"),M0r=o(" (throws an error)."),E0r=l(),Bt=a("div"),F(W9.$$.fragment),C0r=l(),bEe=a("p"),w0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A0r=l(),bc=a("p"),L0r=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),y0r=o("not"),x0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),$0r=o("from_pretrained()"),k0r=o(" to load the model weights."),S0r=l(),F(d5.$$.fragment),R0r=l(),Rr=a("div"),F(H9.$$.fragment),P0r=l(),FEe=a("p"),B0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),I0r=l(),mn=a("p"),N0r=o("The model class to instantiate is selected based on the "),TEe=a("code"),q0r=o("model_type"),j0r=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),D0r=o("pretrained_model_name_or_path"),G0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),O0r=o("pretrained_model_name_or_path"),V0r=o(":"),X0r=l(),ye=a("ul"),c5=a("li"),CEe=a("strong"),z0r=o("bart"),Q0r=o(" \u2014 "),$J=a("a"),W0r=o("TFBartForConditionalGeneration"),H0r=o(" (BART model)"),U0r=l(),m5=a("li"),wEe=a("strong"),J0r=o("blenderbot"),Y0r=o(" \u2014 "),kJ=a("a"),K0r=o("TFBlenderbotForConditionalGeneration"),Z0r=o(" (Blenderbot model)"),ewr=l(),f5=a("li"),AEe=a("strong"),owr=o("blenderbot-small"),rwr=o(" \u2014 "),SJ=a("a"),twr=o("TFBlenderbotSmallForConditionalGeneration"),awr=o(" (BlenderbotSmall model)"),nwr=l(),g5=a("li"),LEe=a("strong"),swr=o("encoder-decoder"),lwr=o(" \u2014 "),RJ=a("a"),iwr=o("TFEncoderDecoderModel"),dwr=o(" (Encoder decoder model)"),cwr=l(),h5=a("li"),yEe=a("strong"),mwr=o("led"),fwr=o(" \u2014 "),PJ=a("a"),gwr=o("TFLEDForConditionalGeneration"),hwr=o(" (LED model)"),uwr=l(),u5=a("li"),xEe=a("strong"),pwr=o("marian"),_wr=o(" \u2014 "),BJ=a("a"),bwr=o("TFMarianMTModel"),vwr=o(" (Marian model)"),Fwr=l(),p5=a("li"),$Ee=a("strong"),Twr=o("mbart"),Mwr=o(" \u2014 "),IJ=a("a"),Ewr=o("TFMBartForConditionalGeneration"),Cwr=o(" (mBART model)"),wwr=l(),_5=a("li"),kEe=a("strong"),Awr=o("mt5"),Lwr=o(" \u2014 "),NJ=a("a"),ywr=o("TFMT5ForConditionalGeneration"),xwr=o(" (MT5 model)"),$wr=l(),b5=a("li"),SEe=a("strong"),kwr=o("pegasus"),Swr=o(" \u2014 "),qJ=a("a"),Rwr=o("TFPegasusForConditionalGeneration"),Pwr=o(" (Pegasus model)"),Bwr=l(),v5=a("li"),REe=a("strong"),Iwr=o("t5"),Nwr=o(" \u2014 "),jJ=a("a"),qwr=o("TFT5ForConditionalGeneration"),jwr=o(" (T5 model)"),Dwr=l(),F(F5.$$.fragment),TVe=l(),vc=a("h2"),T5=a("a"),PEe=a("span"),F(U9.$$.fragment),Gwr=l(),BEe=a("span"),Owr=o("TFAutoModelForSequenceClassification"),MVe=l(),sr=a("div"),F(J9.$$.fragment),Vwr=l(),Fc=a("p"),Xwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DJ=a("a"),zwr=o("from_pretrained()"),Qwr=o(" class method or the "),GJ=a("a"),Wwr=o("from_config()"),Hwr=o(` class
method.`),Uwr=l(),Y9=a("p"),Jwr=o("This class cannot be instantiated directly using "),IEe=a("code"),Ywr=o("__init__()"),Kwr=o(" (throws an error)."),Zwr=l(),It=a("div"),F(K9.$$.fragment),eAr=l(),NEe=a("p"),oAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rAr=l(),Tc=a("p"),tAr=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),aAr=o("not"),nAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),sAr=o("from_pretrained()"),lAr=o(" to load the model weights."),iAr=l(),F(M5.$$.fragment),dAr=l(),Pr=a("div"),F(Z9.$$.fragment),cAr=l(),jEe=a("p"),mAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fAr=l(),fn=a("p"),gAr=o("The model class to instantiate is selected based on the "),DEe=a("code"),hAr=o("model_type"),uAr=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),pAr=o("pretrained_model_name_or_path"),_Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(":"),FAr=l(),te=a("ul"),E5=a("li"),VEe=a("strong"),TAr=o("albert"),MAr=o(" \u2014 "),VJ=a("a"),EAr=o("TFAlbertForSequenceClassification"),CAr=o(" (ALBERT model)"),wAr=l(),C5=a("li"),XEe=a("strong"),AAr=o("bert"),LAr=o(" \u2014 "),XJ=a("a"),yAr=o("TFBertForSequenceClassification"),xAr=o(" (BERT model)"),$Ar=l(),w5=a("li"),zEe=a("strong"),kAr=o("camembert"),SAr=o(" \u2014 "),zJ=a("a"),RAr=o("TFCamembertForSequenceClassification"),PAr=o(" (CamemBERT model)"),BAr=l(),A5=a("li"),QEe=a("strong"),IAr=o("convbert"),NAr=o(" \u2014 "),QJ=a("a"),qAr=o("TFConvBertForSequenceClassification"),jAr=o(" (ConvBERT model)"),DAr=l(),L5=a("li"),WEe=a("strong"),GAr=o("ctrl"),OAr=o(" \u2014 "),WJ=a("a"),VAr=o("TFCTRLForSequenceClassification"),XAr=o(" (CTRL model)"),zAr=l(),y5=a("li"),HEe=a("strong"),QAr=o("deberta"),WAr=o(" \u2014 "),HJ=a("a"),HAr=o("TFDebertaForSequenceClassification"),UAr=o(" (DeBERTa model)"),JAr=l(),x5=a("li"),UEe=a("strong"),YAr=o("deberta-v2"),KAr=o(" \u2014 "),UJ=a("a"),ZAr=o("TFDebertaV2ForSequenceClassification"),e6r=o(" (DeBERTa-v2 model)"),o6r=l(),$5=a("li"),JEe=a("strong"),r6r=o("distilbert"),t6r=o(" \u2014 "),JJ=a("a"),a6r=o("TFDistilBertForSequenceClassification"),n6r=o(" (DistilBERT model)"),s6r=l(),k5=a("li"),YEe=a("strong"),l6r=o("electra"),i6r=o(" \u2014 "),YJ=a("a"),d6r=o("TFElectraForSequenceClassification"),c6r=o(" (ELECTRA model)"),m6r=l(),S5=a("li"),KEe=a("strong"),f6r=o("flaubert"),g6r=o(" \u2014 "),KJ=a("a"),h6r=o("TFFlaubertForSequenceClassification"),u6r=o(" (FlauBERT model)"),p6r=l(),R5=a("li"),ZEe=a("strong"),_6r=o("funnel"),b6r=o(" \u2014 "),ZJ=a("a"),v6r=o("TFFunnelForSequenceClassification"),F6r=o(" (Funnel Transformer model)"),T6r=l(),P5=a("li"),e4e=a("strong"),M6r=o("gpt2"),E6r=o(" \u2014 "),eY=a("a"),C6r=o("TFGPT2ForSequenceClassification"),w6r=o(" (OpenAI GPT-2 model)"),A6r=l(),B5=a("li"),o4e=a("strong"),L6r=o("gptj"),y6r=o(" \u2014 "),oY=a("a"),x6r=o("TFGPTJForSequenceClassification"),$6r=o(" (GPT-J model)"),k6r=l(),I5=a("li"),r4e=a("strong"),S6r=o("layoutlm"),R6r=o(" \u2014 "),rY=a("a"),P6r=o("TFLayoutLMForSequenceClassification"),B6r=o(" (LayoutLM model)"),I6r=l(),N5=a("li"),t4e=a("strong"),N6r=o("longformer"),q6r=o(" \u2014 "),tY=a("a"),j6r=o("TFLongformerForSequenceClassification"),D6r=o(" (Longformer model)"),G6r=l(),q5=a("li"),a4e=a("strong"),O6r=o("mobilebert"),V6r=o(" \u2014 "),aY=a("a"),X6r=o("TFMobileBertForSequenceClassification"),z6r=o(" (MobileBERT model)"),Q6r=l(),j5=a("li"),n4e=a("strong"),W6r=o("mpnet"),H6r=o(" \u2014 "),nY=a("a"),U6r=o("TFMPNetForSequenceClassification"),J6r=o(" (MPNet model)"),Y6r=l(),D5=a("li"),s4e=a("strong"),K6r=o("openai-gpt"),Z6r=o(" \u2014 "),sY=a("a"),eLr=o("TFOpenAIGPTForSequenceClassification"),oLr=o(" (OpenAI GPT model)"),rLr=l(),G5=a("li"),l4e=a("strong"),tLr=o("rembert"),aLr=o(" \u2014 "),lY=a("a"),nLr=o("TFRemBertForSequenceClassification"),sLr=o(" (RemBERT model)"),lLr=l(),O5=a("li"),i4e=a("strong"),iLr=o("roberta"),dLr=o(" \u2014 "),iY=a("a"),cLr=o("TFRobertaForSequenceClassification"),mLr=o(" (RoBERTa model)"),fLr=l(),V5=a("li"),d4e=a("strong"),gLr=o("roformer"),hLr=o(" \u2014 "),dY=a("a"),uLr=o("TFRoFormerForSequenceClassification"),pLr=o(" (RoFormer model)"),_Lr=l(),X5=a("li"),c4e=a("strong"),bLr=o("tapas"),vLr=o(" \u2014 "),cY=a("a"),FLr=o("TFTapasForSequenceClassification"),TLr=o(" (TAPAS model)"),MLr=l(),z5=a("li"),m4e=a("strong"),ELr=o("transfo-xl"),CLr=o(" \u2014 "),mY=a("a"),wLr=o("TFTransfoXLForSequenceClassification"),ALr=o(" (Transformer-XL model)"),LLr=l(),Q5=a("li"),f4e=a("strong"),yLr=o("xlm"),xLr=o(" \u2014 "),fY=a("a"),$Lr=o("TFXLMForSequenceClassification"),kLr=o(" (XLM model)"),SLr=l(),W5=a("li"),g4e=a("strong"),RLr=o("xlm-roberta"),PLr=o(" \u2014 "),gY=a("a"),BLr=o("TFXLMRobertaForSequenceClassification"),ILr=o(" (XLM-RoBERTa model)"),NLr=l(),H5=a("li"),h4e=a("strong"),qLr=o("xlnet"),jLr=o(" \u2014 "),hY=a("a"),DLr=o("TFXLNetForSequenceClassification"),GLr=o(" (XLNet model)"),OLr=l(),F(U5.$$.fragment),EVe=l(),Mc=a("h2"),J5=a("a"),u4e=a("span"),F(ex.$$.fragment),VLr=l(),p4e=a("span"),XLr=o("TFAutoModelForMultipleChoice"),CVe=l(),lr=a("div"),F(ox.$$.fragment),zLr=l(),Ec=a("p"),QLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uY=a("a"),WLr=o("from_pretrained()"),HLr=o(" class method or the "),pY=a("a"),ULr=o("from_config()"),JLr=o(` class
method.`),YLr=l(),rx=a("p"),KLr=o("This class cannot be instantiated directly using "),_4e=a("code"),ZLr=o("__init__()"),e7r=o(" (throws an error)."),o7r=l(),Nt=a("div"),F(tx.$$.fragment),r7r=l(),b4e=a("p"),t7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),a7r=l(),Cc=a("p"),n7r=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),s7r=o("not"),l7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=a("a"),i7r=o("from_pretrained()"),d7r=o(" to load the model weights."),c7r=l(),F(Y5.$$.fragment),m7r=l(),Br=a("div"),F(ax.$$.fragment),f7r=l(),F4e=a("p"),g7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h7r=l(),gn=a("p"),u7r=o("The model class to instantiate is selected based on the "),T4e=a("code"),p7r=o("model_type"),_7r=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),F7r=o("pretrained_model_name_or_path"),T7r=o(":"),M7r=l(),pe=a("ul"),K5=a("li"),C4e=a("strong"),E7r=o("albert"),C7r=o(" \u2014 "),bY=a("a"),w7r=o("TFAlbertForMultipleChoice"),A7r=o(" (ALBERT model)"),L7r=l(),Z5=a("li"),w4e=a("strong"),y7r=o("bert"),x7r=o(" \u2014 "),vY=a("a"),$7r=o("TFBertForMultipleChoice"),k7r=o(" (BERT model)"),S7r=l(),e3=a("li"),A4e=a("strong"),R7r=o("camembert"),P7r=o(" \u2014 "),FY=a("a"),B7r=o("TFCamembertForMultipleChoice"),I7r=o(" (CamemBERT model)"),N7r=l(),o3=a("li"),L4e=a("strong"),q7r=o("convbert"),j7r=o(" \u2014 "),TY=a("a"),D7r=o("TFConvBertForMultipleChoice"),G7r=o(" (ConvBERT model)"),O7r=l(),r3=a("li"),y4e=a("strong"),V7r=o("distilbert"),X7r=o(" \u2014 "),MY=a("a"),z7r=o("TFDistilBertForMultipleChoice"),Q7r=o(" (DistilBERT model)"),W7r=l(),t3=a("li"),x4e=a("strong"),H7r=o("electra"),U7r=o(" \u2014 "),EY=a("a"),J7r=o("TFElectraForMultipleChoice"),Y7r=o(" (ELECTRA model)"),K7r=l(),a3=a("li"),$4e=a("strong"),Z7r=o("flaubert"),eyr=o(" \u2014 "),CY=a("a"),oyr=o("TFFlaubertForMultipleChoice"),ryr=o(" (FlauBERT model)"),tyr=l(),n3=a("li"),k4e=a("strong"),ayr=o("funnel"),nyr=o(" \u2014 "),wY=a("a"),syr=o("TFFunnelForMultipleChoice"),lyr=o(" (Funnel Transformer model)"),iyr=l(),s3=a("li"),S4e=a("strong"),dyr=o("longformer"),cyr=o(" \u2014 "),AY=a("a"),myr=o("TFLongformerForMultipleChoice"),fyr=o(" (Longformer model)"),gyr=l(),l3=a("li"),R4e=a("strong"),hyr=o("mobilebert"),uyr=o(" \u2014 "),LY=a("a"),pyr=o("TFMobileBertForMultipleChoice"),_yr=o(" (MobileBERT model)"),byr=l(),i3=a("li"),P4e=a("strong"),vyr=o("mpnet"),Fyr=o(" \u2014 "),yY=a("a"),Tyr=o("TFMPNetForMultipleChoice"),Myr=o(" (MPNet model)"),Eyr=l(),d3=a("li"),B4e=a("strong"),Cyr=o("rembert"),wyr=o(" \u2014 "),xY=a("a"),Ayr=o("TFRemBertForMultipleChoice"),Lyr=o(" (RemBERT model)"),yyr=l(),c3=a("li"),I4e=a("strong"),xyr=o("roberta"),$yr=o(" \u2014 "),$Y=a("a"),kyr=o("TFRobertaForMultipleChoice"),Syr=o(" (RoBERTa model)"),Ryr=l(),m3=a("li"),N4e=a("strong"),Pyr=o("roformer"),Byr=o(" \u2014 "),kY=a("a"),Iyr=o("TFRoFormerForMultipleChoice"),Nyr=o(" (RoFormer model)"),qyr=l(),f3=a("li"),q4e=a("strong"),jyr=o("xlm"),Dyr=o(" \u2014 "),SY=a("a"),Gyr=o("TFXLMForMultipleChoice"),Oyr=o(" (XLM model)"),Vyr=l(),g3=a("li"),j4e=a("strong"),Xyr=o("xlm-roberta"),zyr=o(" \u2014 "),RY=a("a"),Qyr=o("TFXLMRobertaForMultipleChoice"),Wyr=o(" (XLM-RoBERTa model)"),Hyr=l(),h3=a("li"),D4e=a("strong"),Uyr=o("xlnet"),Jyr=o(" \u2014 "),PY=a("a"),Yyr=o("TFXLNetForMultipleChoice"),Kyr=o(" (XLNet model)"),Zyr=l(),F(u3.$$.fragment),wVe=l(),wc=a("h2"),p3=a("a"),G4e=a("span"),F(nx.$$.fragment),e8r=l(),O4e=a("span"),o8r=o("TFAutoModelForNextSentencePrediction"),AVe=l(),ir=a("div"),F(sx.$$.fragment),r8r=l(),Ac=a("p"),t8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BY=a("a"),a8r=o("from_pretrained()"),n8r=o(" class method or the "),IY=a("a"),s8r=o("from_config()"),l8r=o(` class
method.`),i8r=l(),lx=a("p"),d8r=o("This class cannot be instantiated directly using "),V4e=a("code"),c8r=o("__init__()"),m8r=o(" (throws an error)."),f8r=l(),qt=a("div"),F(ix.$$.fragment),g8r=l(),X4e=a("p"),h8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u8r=l(),Lc=a("p"),p8r=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),_8r=o("not"),b8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),v8r=o("from_pretrained()"),F8r=o(" to load the model weights."),T8r=l(),F(_3.$$.fragment),M8r=l(),Ir=a("div"),F(dx.$$.fragment),E8r=l(),Q4e=a("p"),C8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w8r=l(),hn=a("p"),A8r=o("The model class to instantiate is selected based on the "),W4e=a("code"),L8r=o("model_type"),y8r=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),x8r=o("pretrained_model_name_or_path"),$8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(":"),R8r=l(),cx=a("ul"),b3=a("li"),J4e=a("strong"),P8r=o("bert"),B8r=o(" \u2014 "),qY=a("a"),I8r=o("TFBertForNextSentencePrediction"),N8r=o(" (BERT model)"),q8r=l(),v3=a("li"),Y4e=a("strong"),j8r=o("mobilebert"),D8r=o(" \u2014 "),jY=a("a"),G8r=o("TFMobileBertForNextSentencePrediction"),O8r=o(" (MobileBERT model)"),V8r=l(),F(F3.$$.fragment),LVe=l(),yc=a("h2"),T3=a("a"),K4e=a("span"),F(mx.$$.fragment),X8r=l(),Z4e=a("span"),z8r=o("TFAutoModelForTableQuestionAnswering"),yVe=l(),dr=a("div"),F(fx.$$.fragment),Q8r=l(),xc=a("p"),W8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DY=a("a"),H8r=o("from_pretrained()"),U8r=o(" class method or the "),GY=a("a"),J8r=o("from_config()"),Y8r=o(` class
method.`),K8r=l(),gx=a("p"),Z8r=o("This class cannot be instantiated directly using "),eCe=a("code"),e9r=o("__init__()"),o9r=o(" (throws an error)."),r9r=l(),jt=a("div"),F(hx.$$.fragment),t9r=l(),oCe=a("p"),a9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n9r=l(),$c=a("p"),s9r=o(`Note:
Loading a model from its configuration file does `),rCe=a("strong"),l9r=o("not"),i9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),d9r=o("from_pretrained()"),c9r=o(" to load the model weights."),m9r=l(),F(M3.$$.fragment),f9r=l(),Nr=a("div"),F(ux.$$.fragment),g9r=l(),tCe=a("p"),h9r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),u9r=l(),un=a("p"),p9r=o("The model class to instantiate is selected based on the "),aCe=a("code"),_9r=o("model_type"),b9r=o(` property of the config object (either
passed as an argument or loaded from `),nCe=a("code"),v9r=o("pretrained_model_name_or_path"),F9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=a("code"),T9r=o("pretrained_model_name_or_path"),M9r=o(":"),E9r=l(),lCe=a("ul"),E3=a("li"),iCe=a("strong"),C9r=o("tapas"),w9r=o(" \u2014 "),VY=a("a"),A9r=o("TFTapasForQuestionAnswering"),L9r=o(" (TAPAS model)"),y9r=l(),F(C3.$$.fragment),xVe=l(),kc=a("h2"),w3=a("a"),dCe=a("span"),F(px.$$.fragment),x9r=l(),cCe=a("span"),$9r=o("TFAutoModelForTokenClassification"),$Ve=l(),cr=a("div"),F(_x.$$.fragment),k9r=l(),Sc=a("p"),S9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XY=a("a"),R9r=o("from_pretrained()"),P9r=o(" class method or the "),zY=a("a"),B9r=o("from_config()"),I9r=o(` class
method.`),N9r=l(),bx=a("p"),q9r=o("This class cannot be instantiated directly using "),mCe=a("code"),j9r=o("__init__()"),D9r=o(" (throws an error)."),G9r=l(),Dt=a("div"),F(vx.$$.fragment),O9r=l(),fCe=a("p"),V9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X9r=l(),Rc=a("p"),z9r=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),Q9r=o("not"),W9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),H9r=o("from_pretrained()"),U9r=o(" to load the model weights."),J9r=l(),F(A3.$$.fragment),Y9r=l(),qr=a("div"),F(Fx.$$.fragment),K9r=l(),hCe=a("p"),Z9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),exr=l(),pn=a("p"),oxr=o("The model class to instantiate is selected based on the "),uCe=a("code"),rxr=o("model_type"),txr=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(":"),ixr=l(),de=a("ul"),L3=a("li"),bCe=a("strong"),dxr=o("albert"),cxr=o(" \u2014 "),WY=a("a"),mxr=o("TFAlbertForTokenClassification"),fxr=o(" (ALBERT model)"),gxr=l(),y3=a("li"),vCe=a("strong"),hxr=o("bert"),uxr=o(" \u2014 "),HY=a("a"),pxr=o("TFBertForTokenClassification"),_xr=o(" (BERT model)"),bxr=l(),x3=a("li"),FCe=a("strong"),vxr=o("camembert"),Fxr=o(" \u2014 "),UY=a("a"),Txr=o("TFCamembertForTokenClassification"),Mxr=o(" (CamemBERT model)"),Exr=l(),$3=a("li"),TCe=a("strong"),Cxr=o("convbert"),wxr=o(" \u2014 "),JY=a("a"),Axr=o("TFConvBertForTokenClassification"),Lxr=o(" (ConvBERT model)"),yxr=l(),k3=a("li"),MCe=a("strong"),xxr=o("deberta"),$xr=o(" \u2014 "),YY=a("a"),kxr=o("TFDebertaForTokenClassification"),Sxr=o(" (DeBERTa model)"),Rxr=l(),S3=a("li"),ECe=a("strong"),Pxr=o("deberta-v2"),Bxr=o(" \u2014 "),KY=a("a"),Ixr=o("TFDebertaV2ForTokenClassification"),Nxr=o(" (DeBERTa-v2 model)"),qxr=l(),R3=a("li"),CCe=a("strong"),jxr=o("distilbert"),Dxr=o(" \u2014 "),ZY=a("a"),Gxr=o("TFDistilBertForTokenClassification"),Oxr=o(" (DistilBERT model)"),Vxr=l(),P3=a("li"),wCe=a("strong"),Xxr=o("electra"),zxr=o(" \u2014 "),eK=a("a"),Qxr=o("TFElectraForTokenClassification"),Wxr=o(" (ELECTRA model)"),Hxr=l(),B3=a("li"),ACe=a("strong"),Uxr=o("flaubert"),Jxr=o(" \u2014 "),oK=a("a"),Yxr=o("TFFlaubertForTokenClassification"),Kxr=o(" (FlauBERT model)"),Zxr=l(),I3=a("li"),LCe=a("strong"),e$r=o("funnel"),o$r=o(" \u2014 "),rK=a("a"),r$r=o("TFFunnelForTokenClassification"),t$r=o(" (Funnel Transformer model)"),a$r=l(),N3=a("li"),yCe=a("strong"),n$r=o("layoutlm"),s$r=o(" \u2014 "),tK=a("a"),l$r=o("TFLayoutLMForTokenClassification"),i$r=o(" (LayoutLM model)"),d$r=l(),q3=a("li"),xCe=a("strong"),c$r=o("longformer"),m$r=o(" \u2014 "),aK=a("a"),f$r=o("TFLongformerForTokenClassification"),g$r=o(" (Longformer model)"),h$r=l(),j3=a("li"),$Ce=a("strong"),u$r=o("mobilebert"),p$r=o(" \u2014 "),nK=a("a"),_$r=o("TFMobileBertForTokenClassification"),b$r=o(" (MobileBERT model)"),v$r=l(),D3=a("li"),kCe=a("strong"),F$r=o("mpnet"),T$r=o(" \u2014 "),sK=a("a"),M$r=o("TFMPNetForTokenClassification"),E$r=o(" (MPNet model)"),C$r=l(),G3=a("li"),SCe=a("strong"),w$r=o("rembert"),A$r=o(" \u2014 "),lK=a("a"),L$r=o("TFRemBertForTokenClassification"),y$r=o(" (RemBERT model)"),x$r=l(),O3=a("li"),RCe=a("strong"),$$r=o("roberta"),k$r=o(" \u2014 "),iK=a("a"),S$r=o("TFRobertaForTokenClassification"),R$r=o(" (RoBERTa model)"),P$r=l(),V3=a("li"),PCe=a("strong"),B$r=o("roformer"),I$r=o(" \u2014 "),dK=a("a"),N$r=o("TFRoFormerForTokenClassification"),q$r=o(" (RoFormer model)"),j$r=l(),X3=a("li"),BCe=a("strong"),D$r=o("xlm"),G$r=o(" \u2014 "),cK=a("a"),O$r=o("TFXLMForTokenClassification"),V$r=o(" (XLM model)"),X$r=l(),z3=a("li"),ICe=a("strong"),z$r=o("xlm-roberta"),Q$r=o(" \u2014 "),mK=a("a"),W$r=o("TFXLMRobertaForTokenClassification"),H$r=o(" (XLM-RoBERTa model)"),U$r=l(),Q3=a("li"),NCe=a("strong"),J$r=o("xlnet"),Y$r=o(" \u2014 "),fK=a("a"),K$r=o("TFXLNetForTokenClassification"),Z$r=o(" (XLNet model)"),ekr=l(),F(W3.$$.fragment),kVe=l(),Pc=a("h2"),H3=a("a"),qCe=a("span"),F(Tx.$$.fragment),okr=l(),jCe=a("span"),rkr=o("TFAutoModelForQuestionAnswering"),SVe=l(),mr=a("div"),F(Mx.$$.fragment),tkr=l(),Bc=a("p"),akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gK=a("a"),nkr=o("from_pretrained()"),skr=o(" class method or the "),hK=a("a"),lkr=o("from_config()"),ikr=o(` class
method.`),dkr=l(),Ex=a("p"),ckr=o("This class cannot be instantiated directly using "),DCe=a("code"),mkr=o("__init__()"),fkr=o(" (throws an error)."),gkr=l(),Gt=a("div"),F(Cx.$$.fragment),hkr=l(),GCe=a("p"),ukr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pkr=l(),Ic=a("p"),_kr=o(`Note:
Loading a model from its configuration file does `),OCe=a("strong"),bkr=o("not"),vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),Fkr=o("from_pretrained()"),Tkr=o(" to load the model weights."),Mkr=l(),F(U3.$$.fragment),Ekr=l(),jr=a("div"),F(wx.$$.fragment),Ckr=l(),VCe=a("p"),wkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Akr=l(),_n=a("p"),Lkr=o("The model class to instantiate is selected based on the "),XCe=a("code"),ykr=o("model_type"),xkr=o(` property of the config object (either
passed as an argument or loaded from `),zCe=a("code"),$kr=o("pretrained_model_name_or_path"),kkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(":"),Pkr=l(),ce=a("ul"),J3=a("li"),WCe=a("strong"),Bkr=o("albert"),Ikr=o(" \u2014 "),pK=a("a"),Nkr=o("TFAlbertForQuestionAnswering"),qkr=o(" (ALBERT model)"),jkr=l(),Y3=a("li"),HCe=a("strong"),Dkr=o("bert"),Gkr=o(" \u2014 "),_K=a("a"),Okr=o("TFBertForQuestionAnswering"),Vkr=o(" (BERT model)"),Xkr=l(),K3=a("li"),UCe=a("strong"),zkr=o("camembert"),Qkr=o(" \u2014 "),bK=a("a"),Wkr=o("TFCamembertForQuestionAnswering"),Hkr=o(" (CamemBERT model)"),Ukr=l(),Z3=a("li"),JCe=a("strong"),Jkr=o("convbert"),Ykr=o(" \u2014 "),vK=a("a"),Kkr=o("TFConvBertForQuestionAnswering"),Zkr=o(" (ConvBERT model)"),eSr=l(),e0=a("li"),YCe=a("strong"),oSr=o("deberta"),rSr=o(" \u2014 "),FK=a("a"),tSr=o("TFDebertaForQuestionAnswering"),aSr=o(" (DeBERTa model)"),nSr=l(),o0=a("li"),KCe=a("strong"),sSr=o("deberta-v2"),lSr=o(" \u2014 "),TK=a("a"),iSr=o("TFDebertaV2ForQuestionAnswering"),dSr=o(" (DeBERTa-v2 model)"),cSr=l(),r0=a("li"),ZCe=a("strong"),mSr=o("distilbert"),fSr=o(" \u2014 "),MK=a("a"),gSr=o("TFDistilBertForQuestionAnswering"),hSr=o(" (DistilBERT model)"),uSr=l(),t0=a("li"),e5e=a("strong"),pSr=o("electra"),_Sr=o(" \u2014 "),EK=a("a"),bSr=o("TFElectraForQuestionAnswering"),vSr=o(" (ELECTRA model)"),FSr=l(),a0=a("li"),o5e=a("strong"),TSr=o("flaubert"),MSr=o(" \u2014 "),CK=a("a"),ESr=o("TFFlaubertForQuestionAnsweringSimple"),CSr=o(" (FlauBERT model)"),wSr=l(),n0=a("li"),r5e=a("strong"),ASr=o("funnel"),LSr=o(" \u2014 "),wK=a("a"),ySr=o("TFFunnelForQuestionAnswering"),xSr=o(" (Funnel Transformer model)"),$Sr=l(),s0=a("li"),t5e=a("strong"),kSr=o("gptj"),SSr=o(" \u2014 "),AK=a("a"),RSr=o("TFGPTJForQuestionAnswering"),PSr=o(" (GPT-J model)"),BSr=l(),l0=a("li"),a5e=a("strong"),ISr=o("longformer"),NSr=o(" \u2014 "),LK=a("a"),qSr=o("TFLongformerForQuestionAnswering"),jSr=o(" (Longformer model)"),DSr=l(),i0=a("li"),n5e=a("strong"),GSr=o("mobilebert"),OSr=o(" \u2014 "),yK=a("a"),VSr=o("TFMobileBertForQuestionAnswering"),XSr=o(" (MobileBERT model)"),zSr=l(),d0=a("li"),s5e=a("strong"),QSr=o("mpnet"),WSr=o(" \u2014 "),xK=a("a"),HSr=o("TFMPNetForQuestionAnswering"),USr=o(" (MPNet model)"),JSr=l(),c0=a("li"),l5e=a("strong"),YSr=o("rembert"),KSr=o(" \u2014 "),$K=a("a"),ZSr=o("TFRemBertForQuestionAnswering"),eRr=o(" (RemBERT model)"),oRr=l(),m0=a("li"),i5e=a("strong"),rRr=o("roberta"),tRr=o(" \u2014 "),kK=a("a"),aRr=o("TFRobertaForQuestionAnswering"),nRr=o(" (RoBERTa model)"),sRr=l(),f0=a("li"),d5e=a("strong"),lRr=o("roformer"),iRr=o(" \u2014 "),SK=a("a"),dRr=o("TFRoFormerForQuestionAnswering"),cRr=o(" (RoFormer model)"),mRr=l(),g0=a("li"),c5e=a("strong"),fRr=o("xlm"),gRr=o(" \u2014 "),RK=a("a"),hRr=o("TFXLMForQuestionAnsweringSimple"),uRr=o(" (XLM model)"),pRr=l(),h0=a("li"),m5e=a("strong"),_Rr=o("xlm-roberta"),bRr=o(" \u2014 "),PK=a("a"),vRr=o("TFXLMRobertaForQuestionAnswering"),FRr=o(" (XLM-RoBERTa model)"),TRr=l(),u0=a("li"),f5e=a("strong"),MRr=o("xlnet"),ERr=o(" \u2014 "),BK=a("a"),CRr=o("TFXLNetForQuestionAnsweringSimple"),wRr=o(" (XLNet model)"),ARr=l(),F(p0.$$.fragment),RVe=l(),Nc=a("h2"),_0=a("a"),g5e=a("span"),F(Ax.$$.fragment),LRr=l(),h5e=a("span"),yRr=o("TFAutoModelForVision2Seq"),PVe=l(),fr=a("div"),F(Lx.$$.fragment),xRr=l(),qc=a("p"),$Rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IK=a("a"),kRr=o("from_pretrained()"),SRr=o(" class method or the "),NK=a("a"),RRr=o("from_config()"),PRr=o(` class
method.`),BRr=l(),yx=a("p"),IRr=o("This class cannot be instantiated directly using "),u5e=a("code"),NRr=o("__init__()"),qRr=o(" (throws an error)."),jRr=l(),Ot=a("div"),F(xx.$$.fragment),DRr=l(),p5e=a("p"),GRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ORr=l(),jc=a("p"),VRr=o(`Note:
Loading a model from its configuration file does `),_5e=a("strong"),XRr=o("not"),zRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),QRr=o("from_pretrained()"),WRr=o(" to load the model weights."),HRr=l(),F(b0.$$.fragment),URr=l(),Dr=a("div"),F($x.$$.fragment),JRr=l(),b5e=a("p"),YRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KRr=l(),bn=a("p"),ZRr=o("The model class to instantiate is selected based on the "),v5e=a("code"),ePr=o("model_type"),oPr=o(` property of the config object (either
passed as an argument or loaded from `),F5e=a("code"),rPr=o("pretrained_model_name_or_path"),tPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=a("code"),aPr=o("pretrained_model_name_or_path"),nPr=o(":"),sPr=l(),M5e=a("ul"),v0=a("li"),E5e=a("strong"),lPr=o("vision-encoder-decoder"),iPr=o(" \u2014 "),jK=a("a"),dPr=o("TFVisionEncoderDecoderModel"),cPr=o(" (Vision Encoder decoder model)"),mPr=l(),F(F0.$$.fragment),BVe=l(),Dc=a("h2"),T0=a("a"),C5e=a("span"),F(kx.$$.fragment),fPr=l(),w5e=a("span"),gPr=o("TFAutoModelForSpeechSeq2Seq"),IVe=l(),gr=a("div"),F(Sx.$$.fragment),hPr=l(),Gc=a("p"),uPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DK=a("a"),pPr=o("from_pretrained()"),_Pr=o(" class method or the "),GK=a("a"),bPr=o("from_config()"),vPr=o(` class
method.`),FPr=l(),Rx=a("p"),TPr=o("This class cannot be instantiated directly using "),A5e=a("code"),MPr=o("__init__()"),EPr=o(" (throws an error)."),CPr=l(),Vt=a("div"),F(Px.$$.fragment),wPr=l(),L5e=a("p"),APr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LPr=l(),Oc=a("p"),yPr=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),xPr=o("not"),$Pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),kPr=o("from_pretrained()"),SPr=o(" to load the model weights."),RPr=l(),F(M0.$$.fragment),PPr=l(),Gr=a("div"),F(Bx.$$.fragment),BPr=l(),x5e=a("p"),IPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),NPr=l(),vn=a("p"),qPr=o("The model class to instantiate is selected based on the "),$5e=a("code"),jPr=o("model_type"),DPr=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),GPr=o("pretrained_model_name_or_path"),OPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),VPr=o("pretrained_model_name_or_path"),XPr=o(":"),zPr=l(),R5e=a("ul"),E0=a("li"),P5e=a("strong"),QPr=o("speech_to_text"),WPr=o(" \u2014 "),VK=a("a"),HPr=o("TFSpeech2TextForConditionalGeneration"),UPr=o(" (Speech2Text model)"),JPr=l(),F(C0.$$.fragment),NVe=l(),Vc=a("h2"),w0=a("a"),B5e=a("span"),F(Ix.$$.fragment),YPr=l(),I5e=a("span"),KPr=o("FlaxAutoModel"),qVe=l(),hr=a("div"),F(Nx.$$.fragment),ZPr=l(),Xc=a("p"),eBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XK=a("a"),oBr=o("from_pretrained()"),rBr=o(" class method or the "),zK=a("a"),tBr=o("from_config()"),aBr=o(` class
method.`),nBr=l(),qx=a("p"),sBr=o("This class cannot be instantiated directly using "),N5e=a("code"),lBr=o("__init__()"),iBr=o(" (throws an error)."),dBr=l(),Xt=a("div"),F(jx.$$.fragment),cBr=l(),q5e=a("p"),mBr=o("Instantiates one of the base model classes of the library from a configuration."),fBr=l(),zc=a("p"),gBr=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),hBr=o("not"),uBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),pBr=o("from_pretrained()"),_Br=o(" to load the model weights."),bBr=l(),F(A0.$$.fragment),vBr=l(),Or=a("div"),F(Dx.$$.fragment),FBr=l(),D5e=a("p"),TBr=o("Instantiate one of the base model classes of the library from a pretrained model."),MBr=l(),Fn=a("p"),EBr=o("The model class to instantiate is selected based on the "),G5e=a("code"),CBr=o("model_type"),wBr=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),ABr=o("pretrained_model_name_or_path"),LBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),yBr=o("pretrained_model_name_or_path"),xBr=o(":"),$Br=l(),oe=a("ul"),L0=a("li"),X5e=a("strong"),kBr=o("albert"),SBr=o(" \u2014 "),WK=a("a"),RBr=o("FlaxAlbertModel"),PBr=o(" (ALBERT model)"),BBr=l(),y0=a("li"),z5e=a("strong"),IBr=o("bart"),NBr=o(" \u2014 "),HK=a("a"),qBr=o("FlaxBartModel"),jBr=o(" (BART model)"),DBr=l(),x0=a("li"),Q5e=a("strong"),GBr=o("beit"),OBr=o(" \u2014 "),UK=a("a"),VBr=o("FlaxBeitModel"),XBr=o(" (BEiT model)"),zBr=l(),$0=a("li"),W5e=a("strong"),QBr=o("bert"),WBr=o(" \u2014 "),JK=a("a"),HBr=o("FlaxBertModel"),UBr=o(" (BERT model)"),JBr=l(),k0=a("li"),H5e=a("strong"),YBr=o("big_bird"),KBr=o(" \u2014 "),YK=a("a"),ZBr=o("FlaxBigBirdModel"),eIr=o(" (BigBird model)"),oIr=l(),S0=a("li"),U5e=a("strong"),rIr=o("blenderbot"),tIr=o(" \u2014 "),KK=a("a"),aIr=o("FlaxBlenderbotModel"),nIr=o(" (Blenderbot model)"),sIr=l(),R0=a("li"),J5e=a("strong"),lIr=o("blenderbot-small"),iIr=o(" \u2014 "),ZK=a("a"),dIr=o("FlaxBlenderbotSmallModel"),cIr=o(" (BlenderbotSmall model)"),mIr=l(),P0=a("li"),Y5e=a("strong"),fIr=o("clip"),gIr=o(" \u2014 "),eZ=a("a"),hIr=o("FlaxCLIPModel"),uIr=o(" (CLIP model)"),pIr=l(),B0=a("li"),K5e=a("strong"),_Ir=o("distilbert"),bIr=o(" \u2014 "),oZ=a("a"),vIr=o("FlaxDistilBertModel"),FIr=o(" (DistilBERT model)"),TIr=l(),I0=a("li"),Z5e=a("strong"),MIr=o("electra"),EIr=o(" \u2014 "),rZ=a("a"),CIr=o("FlaxElectraModel"),wIr=o(" (ELECTRA model)"),AIr=l(),N0=a("li"),e3e=a("strong"),LIr=o("gpt2"),yIr=o(" \u2014 "),tZ=a("a"),xIr=o("FlaxGPT2Model"),$Ir=o(" (OpenAI GPT-2 model)"),kIr=l(),q0=a("li"),o3e=a("strong"),SIr=o("gpt_neo"),RIr=o(" \u2014 "),aZ=a("a"),PIr=o("FlaxGPTNeoModel"),BIr=o(" (GPT Neo model)"),IIr=l(),j0=a("li"),r3e=a("strong"),NIr=o("gptj"),qIr=o(" \u2014 "),nZ=a("a"),jIr=o("FlaxGPTJModel"),DIr=o(" (GPT-J model)"),GIr=l(),D0=a("li"),t3e=a("strong"),OIr=o("longt5"),VIr=o(" \u2014 "),sZ=a("a"),XIr=o("FlaxLongT5Model"),zIr=o(" (LongT5 model)"),QIr=l(),G0=a("li"),a3e=a("strong"),WIr=o("marian"),HIr=o(" \u2014 "),lZ=a("a"),UIr=o("FlaxMarianModel"),JIr=o(" (Marian model)"),YIr=l(),O0=a("li"),n3e=a("strong"),KIr=o("mbart"),ZIr=o(" \u2014 "),iZ=a("a"),eNr=o("FlaxMBartModel"),oNr=o(" (mBART model)"),rNr=l(),V0=a("li"),s3e=a("strong"),tNr=o("mt5"),aNr=o(" \u2014 "),dZ=a("a"),nNr=o("FlaxMT5Model"),sNr=o(" (MT5 model)"),lNr=l(),X0=a("li"),l3e=a("strong"),iNr=o("opt"),dNr=o(" \u2014 "),cZ=a("a"),cNr=o("FlaxOPTModel"),mNr=o(" (OPT model)"),fNr=l(),z0=a("li"),i3e=a("strong"),gNr=o("pegasus"),hNr=o(" \u2014 "),mZ=a("a"),uNr=o("FlaxPegasusModel"),pNr=o(" (Pegasus model)"),_Nr=l(),Q0=a("li"),d3e=a("strong"),bNr=o("roberta"),vNr=o(" \u2014 "),fZ=a("a"),FNr=o("FlaxRobertaModel"),TNr=o(" (RoBERTa model)"),MNr=l(),W0=a("li"),c3e=a("strong"),ENr=o("roformer"),CNr=o(" \u2014 "),gZ=a("a"),wNr=o("FlaxRoFormerModel"),ANr=o(" (RoFormer model)"),LNr=l(),H0=a("li"),m3e=a("strong"),yNr=o("t5"),xNr=o(" \u2014 "),hZ=a("a"),$Nr=o("FlaxT5Model"),kNr=o(" (T5 model)"),SNr=l(),U0=a("li"),f3e=a("strong"),RNr=o("vision-text-dual-encoder"),PNr=o(" \u2014 "),uZ=a("a"),BNr=o("FlaxVisionTextDualEncoderModel"),INr=o(" (VisionTextDualEncoder model)"),NNr=l(),J0=a("li"),g3e=a("strong"),qNr=o("vit"),jNr=o(" \u2014 "),pZ=a("a"),DNr=o("FlaxViTModel"),GNr=o(" (ViT model)"),ONr=l(),Y0=a("li"),h3e=a("strong"),VNr=o("wav2vec2"),XNr=o(" \u2014 "),_Z=a("a"),zNr=o("FlaxWav2Vec2Model"),QNr=o(" (Wav2Vec2 model)"),WNr=l(),K0=a("li"),u3e=a("strong"),HNr=o("xglm"),UNr=o(" \u2014 "),bZ=a("a"),JNr=o("FlaxXGLMModel"),YNr=o(" (XGLM model)"),KNr=l(),Z0=a("li"),p3e=a("strong"),ZNr=o("xlm-roberta"),eqr=o(" \u2014 "),vZ=a("a"),oqr=o("FlaxXLMRobertaModel"),rqr=o(" (XLM-RoBERTa model)"),tqr=l(),F(ew.$$.fragment),jVe=l(),Qc=a("h2"),ow=a("a"),_3e=a("span"),F(Gx.$$.fragment),aqr=l(),b3e=a("span"),nqr=o("FlaxAutoModelForCausalLM"),DVe=l(),ur=a("div"),F(Ox.$$.fragment),sqr=l(),Wc=a("p"),lqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FZ=a("a"),iqr=o("from_pretrained()"),dqr=o(" class method or the "),TZ=a("a"),cqr=o("from_config()"),mqr=o(` class
method.`),fqr=l(),Vx=a("p"),gqr=o("This class cannot be instantiated directly using "),v3e=a("code"),hqr=o("__init__()"),uqr=o(" (throws an error)."),pqr=l(),zt=a("div"),F(Xx.$$.fragment),_qr=l(),F3e=a("p"),bqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vqr=l(),Hc=a("p"),Fqr=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),Tqr=o("not"),Mqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),Eqr=o("from_pretrained()"),Cqr=o(" to load the model weights."),wqr=l(),F(rw.$$.fragment),Aqr=l(),Vr=a("div"),F(zx.$$.fragment),Lqr=l(),M3e=a("p"),yqr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xqr=l(),Tn=a("p"),$qr=o("The model class to instantiate is selected based on the "),E3e=a("code"),kqr=o("model_type"),Sqr=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),Rqr=o("pretrained_model_name_or_path"),Pqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),Bqr=o("pretrained_model_name_or_path"),Iqr=o(":"),Nqr=l(),xe=a("ul"),tw=a("li"),A3e=a("strong"),qqr=o("bart"),jqr=o(" \u2014 "),EZ=a("a"),Dqr=o("FlaxBartForCausalLM"),Gqr=o(" (BART model)"),Oqr=l(),aw=a("li"),L3e=a("strong"),Vqr=o("bert"),Xqr=o(" \u2014 "),CZ=a("a"),zqr=o("FlaxBertForCausalLM"),Qqr=o(" (BERT model)"),Wqr=l(),nw=a("li"),y3e=a("strong"),Hqr=o("big_bird"),Uqr=o(" \u2014 "),wZ=a("a"),Jqr=o("FlaxBigBirdForCausalLM"),Yqr=o(" (BigBird model)"),Kqr=l(),sw=a("li"),x3e=a("strong"),Zqr=o("electra"),ejr=o(" \u2014 "),AZ=a("a"),ojr=o("FlaxElectraForCausalLM"),rjr=o(" (ELECTRA model)"),tjr=l(),lw=a("li"),$3e=a("strong"),ajr=o("gpt2"),njr=o(" \u2014 "),LZ=a("a"),sjr=o("FlaxGPT2LMHeadModel"),ljr=o(" (OpenAI GPT-2 model)"),ijr=l(),iw=a("li"),k3e=a("strong"),djr=o("gpt_neo"),cjr=o(" \u2014 "),yZ=a("a"),mjr=o("FlaxGPTNeoForCausalLM"),fjr=o(" (GPT Neo model)"),gjr=l(),dw=a("li"),S3e=a("strong"),hjr=o("gptj"),ujr=o(" \u2014 "),xZ=a("a"),pjr=o("FlaxGPTJForCausalLM"),_jr=o(" (GPT-J model)"),bjr=l(),cw=a("li"),R3e=a("strong"),vjr=o("opt"),Fjr=o(" \u2014 "),$Z=a("a"),Tjr=o("FlaxOPTForCausalLM"),Mjr=o(" (OPT model)"),Ejr=l(),mw=a("li"),P3e=a("strong"),Cjr=o("roberta"),wjr=o(" \u2014 "),kZ=a("a"),Ajr=o("FlaxRobertaForCausalLM"),Ljr=o(" (RoBERTa model)"),yjr=l(),fw=a("li"),B3e=a("strong"),xjr=o("xglm"),$jr=o(" \u2014 "),SZ=a("a"),kjr=o("FlaxXGLMForCausalLM"),Sjr=o(" (XGLM model)"),Rjr=l(),F(gw.$$.fragment),GVe=l(),Uc=a("h2"),hw=a("a"),I3e=a("span"),F(Qx.$$.fragment),Pjr=l(),N3e=a("span"),Bjr=o("FlaxAutoModelForPreTraining"),OVe=l(),pr=a("div"),F(Wx.$$.fragment),Ijr=l(),Jc=a("p"),Njr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RZ=a("a"),qjr=o("from_pretrained()"),jjr=o(" class method or the "),PZ=a("a"),Djr=o("from_config()"),Gjr=o(` class
method.`),Ojr=l(),Hx=a("p"),Vjr=o("This class cannot be instantiated directly using "),q3e=a("code"),Xjr=o("__init__()"),zjr=o(" (throws an error)."),Qjr=l(),Qt=a("div"),F(Ux.$$.fragment),Wjr=l(),j3e=a("p"),Hjr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ujr=l(),Yc=a("p"),Jjr=o(`Note:
Loading a model from its configuration file does `),D3e=a("strong"),Yjr=o("not"),Kjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=a("a"),Zjr=o("from_pretrained()"),eDr=o(" to load the model weights."),oDr=l(),F(uw.$$.fragment),rDr=l(),Xr=a("div"),F(Jx.$$.fragment),tDr=l(),G3e=a("p"),aDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nDr=l(),Mn=a("p"),sDr=o("The model class to instantiate is selected based on the "),O3e=a("code"),lDr=o("model_type"),iDr=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),dDr=o("pretrained_model_name_or_path"),cDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),mDr=o("pretrained_model_name_or_path"),fDr=o(":"),gDr=l(),Ee=a("ul"),pw=a("li"),z3e=a("strong"),hDr=o("albert"),uDr=o(" \u2014 "),IZ=a("a"),pDr=o("FlaxAlbertForPreTraining"),_Dr=o(" (ALBERT model)"),bDr=l(),_w=a("li"),Q3e=a("strong"),vDr=o("bart"),FDr=o(" \u2014 "),NZ=a("a"),TDr=o("FlaxBartForConditionalGeneration"),MDr=o(" (BART model)"),EDr=l(),bw=a("li"),W3e=a("strong"),CDr=o("bert"),wDr=o(" \u2014 "),qZ=a("a"),ADr=o("FlaxBertForPreTraining"),LDr=o(" (BERT model)"),yDr=l(),vw=a("li"),H3e=a("strong"),xDr=o("big_bird"),$Dr=o(" \u2014 "),jZ=a("a"),kDr=o("FlaxBigBirdForPreTraining"),SDr=o(" (BigBird model)"),RDr=l(),Fw=a("li"),U3e=a("strong"),PDr=o("electra"),BDr=o(" \u2014 "),DZ=a("a"),IDr=o("FlaxElectraForPreTraining"),NDr=o(" (ELECTRA model)"),qDr=l(),Tw=a("li"),J3e=a("strong"),jDr=o("longt5"),DDr=o(" \u2014 "),GZ=a("a"),GDr=o("FlaxLongT5ForConditionalGeneration"),ODr=o(" (LongT5 model)"),VDr=l(),Mw=a("li"),Y3e=a("strong"),XDr=o("mbart"),zDr=o(" \u2014 "),OZ=a("a"),QDr=o("FlaxMBartForConditionalGeneration"),WDr=o(" (mBART model)"),HDr=l(),Ew=a("li"),K3e=a("strong"),UDr=o("mt5"),JDr=o(" \u2014 "),VZ=a("a"),YDr=o("FlaxMT5ForConditionalGeneration"),KDr=o(" (MT5 model)"),ZDr=l(),Cw=a("li"),Z3e=a("strong"),eGr=o("roberta"),oGr=o(" \u2014 "),XZ=a("a"),rGr=o("FlaxRobertaForMaskedLM"),tGr=o(" (RoBERTa model)"),aGr=l(),ww=a("li"),e0e=a("strong"),nGr=o("roformer"),sGr=o(" \u2014 "),zZ=a("a"),lGr=o("FlaxRoFormerForMaskedLM"),iGr=o(" (RoFormer model)"),dGr=l(),Aw=a("li"),o0e=a("strong"),cGr=o("t5"),mGr=o(" \u2014 "),QZ=a("a"),fGr=o("FlaxT5ForConditionalGeneration"),gGr=o(" (T5 model)"),hGr=l(),Lw=a("li"),r0e=a("strong"),uGr=o("wav2vec2"),pGr=o(" \u2014 "),WZ=a("a"),_Gr=o("FlaxWav2Vec2ForPreTraining"),bGr=o(" (Wav2Vec2 model)"),vGr=l(),yw=a("li"),t0e=a("strong"),FGr=o("xlm-roberta"),TGr=o(" \u2014 "),HZ=a("a"),MGr=o("FlaxXLMRobertaForMaskedLM"),EGr=o(" (XLM-RoBERTa model)"),CGr=l(),F(xw.$$.fragment),VVe=l(),Kc=a("h2"),$w=a("a"),a0e=a("span"),F(Yx.$$.fragment),wGr=l(),n0e=a("span"),AGr=o("FlaxAutoModelForMaskedLM"),XVe=l(),_r=a("div"),F(Kx.$$.fragment),LGr=l(),Zc=a("p"),yGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UZ=a("a"),xGr=o("from_pretrained()"),$Gr=o(" class method or the "),JZ=a("a"),kGr=o("from_config()"),SGr=o(` class
method.`),RGr=l(),Zx=a("p"),PGr=o("This class cannot be instantiated directly using "),s0e=a("code"),BGr=o("__init__()"),IGr=o(" (throws an error)."),NGr=l(),Wt=a("div"),F(e$.$$.fragment),qGr=l(),l0e=a("p"),jGr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DGr=l(),em=a("p"),GGr=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),OGr=o("not"),VGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=a("a"),XGr=o("from_pretrained()"),zGr=o(" to load the model weights."),QGr=l(),F(kw.$$.fragment),WGr=l(),zr=a("div"),F(o$.$$.fragment),HGr=l(),d0e=a("p"),UGr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),JGr=l(),En=a("p"),YGr=o("The model class to instantiate is selected based on the "),c0e=a("code"),KGr=o("model_type"),ZGr=o(` property of the config object (either
passed as an argument or loaded from `),m0e=a("code"),eOr=o("pretrained_model_name_or_path"),oOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=a("code"),rOr=o("pretrained_model_name_or_path"),tOr=o(":"),aOr=l(),$e=a("ul"),Sw=a("li"),g0e=a("strong"),nOr=o("albert"),sOr=o(" \u2014 "),KZ=a("a"),lOr=o("FlaxAlbertForMaskedLM"),iOr=o(" (ALBERT model)"),dOr=l(),Rw=a("li"),h0e=a("strong"),cOr=o("bart"),mOr=o(" \u2014 "),ZZ=a("a"),fOr=o("FlaxBartForConditionalGeneration"),gOr=o(" (BART model)"),hOr=l(),Pw=a("li"),u0e=a("strong"),uOr=o("bert"),pOr=o(" \u2014 "),eee=a("a"),_Or=o("FlaxBertForMaskedLM"),bOr=o(" (BERT model)"),vOr=l(),Bw=a("li"),p0e=a("strong"),FOr=o("big_bird"),TOr=o(" \u2014 "),oee=a("a"),MOr=o("FlaxBigBirdForMaskedLM"),EOr=o(" (BigBird model)"),COr=l(),Iw=a("li"),_0e=a("strong"),wOr=o("distilbert"),AOr=o(" \u2014 "),ree=a("a"),LOr=o("FlaxDistilBertForMaskedLM"),yOr=o(" (DistilBERT model)"),xOr=l(),Nw=a("li"),b0e=a("strong"),$Or=o("electra"),kOr=o(" \u2014 "),tee=a("a"),SOr=o("FlaxElectraForMaskedLM"),ROr=o(" (ELECTRA model)"),POr=l(),qw=a("li"),v0e=a("strong"),BOr=o("mbart"),IOr=o(" \u2014 "),aee=a("a"),NOr=o("FlaxMBartForConditionalGeneration"),qOr=o(" (mBART model)"),jOr=l(),jw=a("li"),F0e=a("strong"),DOr=o("roberta"),GOr=o(" \u2014 "),nee=a("a"),OOr=o("FlaxRobertaForMaskedLM"),VOr=o(" (RoBERTa model)"),XOr=l(),Dw=a("li"),T0e=a("strong"),zOr=o("roformer"),QOr=o(" \u2014 "),see=a("a"),WOr=o("FlaxRoFormerForMaskedLM"),HOr=o(" (RoFormer model)"),UOr=l(),Gw=a("li"),M0e=a("strong"),JOr=o("xlm-roberta"),YOr=o(" \u2014 "),lee=a("a"),KOr=o("FlaxXLMRobertaForMaskedLM"),ZOr=o(" (XLM-RoBERTa model)"),eVr=l(),F(Ow.$$.fragment),zVe=l(),om=a("h2"),Vw=a("a"),E0e=a("span"),F(r$.$$.fragment),oVr=l(),C0e=a("span"),rVr=o("FlaxAutoModelForSeq2SeqLM"),QVe=l(),br=a("div"),F(t$.$$.fragment),tVr=l(),rm=a("p"),aVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iee=a("a"),nVr=o("from_pretrained()"),sVr=o(" class method or the "),dee=a("a"),lVr=o("from_config()"),iVr=o(` class
method.`),dVr=l(),a$=a("p"),cVr=o("This class cannot be instantiated directly using "),w0e=a("code"),mVr=o("__init__()"),fVr=o(" (throws an error)."),gVr=l(),Ht=a("div"),F(n$.$$.fragment),hVr=l(),A0e=a("p"),uVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pVr=l(),tm=a("p"),_Vr=o(`Note:
Loading a model from its configuration file does `),L0e=a("strong"),bVr=o("not"),vVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=a("a"),FVr=o("from_pretrained()"),TVr=o(" to load the model weights."),MVr=l(),F(Xw.$$.fragment),EVr=l(),Qr=a("div"),F(s$.$$.fragment),CVr=l(),y0e=a("p"),wVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AVr=l(),Cn=a("p"),LVr=o("The model class to instantiate is selected based on the "),x0e=a("code"),yVr=o("model_type"),xVr=o(` property of the config object (either
passed as an argument or loaded from `),$0e=a("code"),$Vr=o("pretrained_model_name_or_path"),kVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=a("code"),SVr=o("pretrained_model_name_or_path"),RVr=o(":"),PVr=l(),ke=a("ul"),zw=a("li"),S0e=a("strong"),BVr=o("bart"),IVr=o(" \u2014 "),mee=a("a"),NVr=o("FlaxBartForConditionalGeneration"),qVr=o(" (BART model)"),jVr=l(),Qw=a("li"),R0e=a("strong"),DVr=o("blenderbot"),GVr=o(" \u2014 "),fee=a("a"),OVr=o("FlaxBlenderbotForConditionalGeneration"),VVr=o(" (Blenderbot model)"),XVr=l(),Ww=a("li"),P0e=a("strong"),zVr=o("blenderbot-small"),QVr=o(" \u2014 "),gee=a("a"),WVr=o("FlaxBlenderbotSmallForConditionalGeneration"),HVr=o(" (BlenderbotSmall model)"),UVr=l(),Hw=a("li"),B0e=a("strong"),JVr=o("encoder-decoder"),YVr=o(" \u2014 "),hee=a("a"),KVr=o("FlaxEncoderDecoderModel"),ZVr=o(" (Encoder decoder model)"),eXr=l(),Uw=a("li"),I0e=a("strong"),oXr=o("longt5"),rXr=o(" \u2014 "),uee=a("a"),tXr=o("FlaxLongT5ForConditionalGeneration"),aXr=o(" (LongT5 model)"),nXr=l(),Jw=a("li"),N0e=a("strong"),sXr=o("marian"),lXr=o(" \u2014 "),pee=a("a"),iXr=o("FlaxMarianMTModel"),dXr=o(" (Marian model)"),cXr=l(),Yw=a("li"),q0e=a("strong"),mXr=o("mbart"),fXr=o(" \u2014 "),_ee=a("a"),gXr=o("FlaxMBartForConditionalGeneration"),hXr=o(" (mBART model)"),uXr=l(),Kw=a("li"),j0e=a("strong"),pXr=o("mt5"),_Xr=o(" \u2014 "),bee=a("a"),bXr=o("FlaxMT5ForConditionalGeneration"),vXr=o(" (MT5 model)"),FXr=l(),Zw=a("li"),D0e=a("strong"),TXr=o("pegasus"),MXr=o(" \u2014 "),vee=a("a"),EXr=o("FlaxPegasusForConditionalGeneration"),CXr=o(" (Pegasus model)"),wXr=l(),eA=a("li"),G0e=a("strong"),AXr=o("t5"),LXr=o(" \u2014 "),Fee=a("a"),yXr=o("FlaxT5ForConditionalGeneration"),xXr=o(" (T5 model)"),$Xr=l(),F(oA.$$.fragment),WVe=l(),am=a("h2"),rA=a("a"),O0e=a("span"),F(l$.$$.fragment),kXr=l(),V0e=a("span"),SXr=o("FlaxAutoModelForSequenceClassification"),HVe=l(),vr=a("div"),F(i$.$$.fragment),RXr=l(),nm=a("p"),PXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Tee=a("a"),BXr=o("from_pretrained()"),IXr=o(" class method or the "),Mee=a("a"),NXr=o("from_config()"),qXr=o(` class
method.`),jXr=l(),d$=a("p"),DXr=o("This class cannot be instantiated directly using "),X0e=a("code"),GXr=o("__init__()"),OXr=o(" (throws an error)."),VXr=l(),Ut=a("div"),F(c$.$$.fragment),XXr=l(),z0e=a("p"),zXr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QXr=l(),sm=a("p"),WXr=o(`Note:
Loading a model from its configuration file does `),Q0e=a("strong"),HXr=o("not"),UXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=a("a"),JXr=o("from_pretrained()"),YXr=o(" to load the model weights."),KXr=l(),F(tA.$$.fragment),ZXr=l(),Wr=a("div"),F(m$.$$.fragment),ezr=l(),W0e=a("p"),ozr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rzr=l(),wn=a("p"),tzr=o("The model class to instantiate is selected based on the "),H0e=a("code"),azr=o("model_type"),nzr=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),szr=o("pretrained_model_name_or_path"),lzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),izr=o("pretrained_model_name_or_path"),dzr=o(":"),czr=l(),Se=a("ul"),aA=a("li"),Y0e=a("strong"),mzr=o("albert"),fzr=o(" \u2014 "),Cee=a("a"),gzr=o("FlaxAlbertForSequenceClassification"),hzr=o(" (ALBERT model)"),uzr=l(),nA=a("li"),K0e=a("strong"),pzr=o("bart"),_zr=o(" \u2014 "),wee=a("a"),bzr=o("FlaxBartForSequenceClassification"),vzr=o(" (BART model)"),Fzr=l(),sA=a("li"),Z0e=a("strong"),Tzr=o("bert"),Mzr=o(" \u2014 "),Aee=a("a"),Ezr=o("FlaxBertForSequenceClassification"),Czr=o(" (BERT model)"),wzr=l(),lA=a("li"),ewe=a("strong"),Azr=o("big_bird"),Lzr=o(" \u2014 "),Lee=a("a"),yzr=o("FlaxBigBirdForSequenceClassification"),xzr=o(" (BigBird model)"),$zr=l(),iA=a("li"),owe=a("strong"),kzr=o("distilbert"),Szr=o(" \u2014 "),yee=a("a"),Rzr=o("FlaxDistilBertForSequenceClassification"),Pzr=o(" (DistilBERT model)"),Bzr=l(),dA=a("li"),rwe=a("strong"),Izr=o("electra"),Nzr=o(" \u2014 "),xee=a("a"),qzr=o("FlaxElectraForSequenceClassification"),jzr=o(" (ELECTRA model)"),Dzr=l(),cA=a("li"),twe=a("strong"),Gzr=o("mbart"),Ozr=o(" \u2014 "),$ee=a("a"),Vzr=o("FlaxMBartForSequenceClassification"),Xzr=o(" (mBART model)"),zzr=l(),mA=a("li"),awe=a("strong"),Qzr=o("roberta"),Wzr=o(" \u2014 "),kee=a("a"),Hzr=o("FlaxRobertaForSequenceClassification"),Uzr=o(" (RoBERTa model)"),Jzr=l(),fA=a("li"),nwe=a("strong"),Yzr=o("roformer"),Kzr=o(" \u2014 "),See=a("a"),Zzr=o("FlaxRoFormerForSequenceClassification"),eQr=o(" (RoFormer model)"),oQr=l(),gA=a("li"),swe=a("strong"),rQr=o("xlm-roberta"),tQr=o(" \u2014 "),Ree=a("a"),aQr=o("FlaxXLMRobertaForSequenceClassification"),nQr=o(" (XLM-RoBERTa model)"),sQr=l(),F(hA.$$.fragment),UVe=l(),lm=a("h2"),uA=a("a"),lwe=a("span"),F(f$.$$.fragment),lQr=l(),iwe=a("span"),iQr=o("FlaxAutoModelForQuestionAnswering"),JVe=l(),Fr=a("div"),F(g$.$$.fragment),dQr=l(),im=a("p"),cQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Pee=a("a"),mQr=o("from_pretrained()"),fQr=o(" class method or the "),Bee=a("a"),gQr=o("from_config()"),hQr=o(` class
method.`),uQr=l(),h$=a("p"),pQr=o("This class cannot be instantiated directly using "),dwe=a("code"),_Qr=o("__init__()"),bQr=o(" (throws an error)."),vQr=l(),Jt=a("div"),F(u$.$$.fragment),FQr=l(),cwe=a("p"),TQr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MQr=l(),dm=a("p"),EQr=o(`Note:
Loading a model from its configuration file does `),mwe=a("strong"),CQr=o("not"),wQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=a("a"),AQr=o("from_pretrained()"),LQr=o(" to load the model weights."),yQr=l(),F(pA.$$.fragment),xQr=l(),Hr=a("div"),F(p$.$$.fragment),$Qr=l(),fwe=a("p"),kQr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SQr=l(),An=a("p"),RQr=o("The model class to instantiate is selected based on the "),gwe=a("code"),PQr=o("model_type"),BQr=o(` property of the config object (either
passed as an argument or loaded from `),hwe=a("code"),IQr=o("pretrained_model_name_or_path"),NQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uwe=a("code"),qQr=o("pretrained_model_name_or_path"),jQr=o(":"),DQr=l(),Re=a("ul"),_A=a("li"),pwe=a("strong"),GQr=o("albert"),OQr=o(" \u2014 "),Nee=a("a"),VQr=o("FlaxAlbertForQuestionAnswering"),XQr=o(" (ALBERT model)"),zQr=l(),bA=a("li"),_we=a("strong"),QQr=o("bart"),WQr=o(" \u2014 "),qee=a("a"),HQr=o("FlaxBartForQuestionAnswering"),UQr=o(" (BART model)"),JQr=l(),vA=a("li"),bwe=a("strong"),YQr=o("bert"),KQr=o(" \u2014 "),jee=a("a"),ZQr=o("FlaxBertForQuestionAnswering"),eWr=o(" (BERT model)"),oWr=l(),FA=a("li"),vwe=a("strong"),rWr=o("big_bird"),tWr=o(" \u2014 "),Dee=a("a"),aWr=o("FlaxBigBirdForQuestionAnswering"),nWr=o(" (BigBird model)"),sWr=l(),TA=a("li"),Fwe=a("strong"),lWr=o("distilbert"),iWr=o(" \u2014 "),Gee=a("a"),dWr=o("FlaxDistilBertForQuestionAnswering"),cWr=o(" (DistilBERT model)"),mWr=l(),MA=a("li"),Twe=a("strong"),fWr=o("electra"),gWr=o(" \u2014 "),Oee=a("a"),hWr=o("FlaxElectraForQuestionAnswering"),uWr=o(" (ELECTRA model)"),pWr=l(),EA=a("li"),Mwe=a("strong"),_Wr=o("mbart"),bWr=o(" \u2014 "),Vee=a("a"),vWr=o("FlaxMBartForQuestionAnswering"),FWr=o(" (mBART model)"),TWr=l(),CA=a("li"),Ewe=a("strong"),MWr=o("roberta"),EWr=o(" \u2014 "),Xee=a("a"),CWr=o("FlaxRobertaForQuestionAnswering"),wWr=o(" (RoBERTa model)"),AWr=l(),wA=a("li"),Cwe=a("strong"),LWr=o("roformer"),yWr=o(" \u2014 "),zee=a("a"),xWr=o("FlaxRoFormerForQuestionAnswering"),$Wr=o(" (RoFormer model)"),kWr=l(),AA=a("li"),wwe=a("strong"),SWr=o("xlm-roberta"),RWr=o(" \u2014 "),Qee=a("a"),PWr=o("FlaxXLMRobertaForQuestionAnswering"),BWr=o(" (XLM-RoBERTa model)"),IWr=l(),F(LA.$$.fragment),YVe=l(),cm=a("h2"),yA=a("a"),Awe=a("span"),F(_$.$$.fragment),NWr=l(),Lwe=a("span"),qWr=o("FlaxAutoModelForTokenClassification"),KVe=l(),Tr=a("div"),F(b$.$$.fragment),jWr=l(),mm=a("p"),DWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Wee=a("a"),GWr=o("from_pretrained()"),OWr=o(" class method or the "),Hee=a("a"),VWr=o("from_config()"),XWr=o(` class
method.`),zWr=l(),v$=a("p"),QWr=o("This class cannot be instantiated directly using "),ywe=a("code"),WWr=o("__init__()"),HWr=o(" (throws an error)."),UWr=l(),Yt=a("div"),F(F$.$$.fragment),JWr=l(),xwe=a("p"),YWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KWr=l(),fm=a("p"),ZWr=o(`Note:
Loading a model from its configuration file does `),$we=a("strong"),eHr=o("not"),oHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),rHr=o("from_pretrained()"),tHr=o(" to load the model weights."),aHr=l(),F(xA.$$.fragment),nHr=l(),Ur=a("div"),F(T$.$$.fragment),sHr=l(),kwe=a("p"),lHr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iHr=l(),Ln=a("p"),dHr=o("The model class to instantiate is selected based on the "),Swe=a("code"),cHr=o("model_type"),mHr=o(` property of the config object (either
passed as an argument or loaded from `),Rwe=a("code"),fHr=o("pretrained_model_name_or_path"),gHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pwe=a("code"),hHr=o("pretrained_model_name_or_path"),uHr=o(":"),pHr=l(),Ve=a("ul"),$A=a("li"),Bwe=a("strong"),_Hr=o("albert"),bHr=o(" \u2014 "),Jee=a("a"),vHr=o("FlaxAlbertForTokenClassification"),FHr=o(" (ALBERT model)"),THr=l(),kA=a("li"),Iwe=a("strong"),MHr=o("bert"),EHr=o(" \u2014 "),Yee=a("a"),CHr=o("FlaxBertForTokenClassification"),wHr=o(" (BERT model)"),AHr=l(),SA=a("li"),Nwe=a("strong"),LHr=o("big_bird"),yHr=o(" \u2014 "),Kee=a("a"),xHr=o("FlaxBigBirdForTokenClassification"),$Hr=o(" (BigBird model)"),kHr=l(),RA=a("li"),qwe=a("strong"),SHr=o("distilbert"),RHr=o(" \u2014 "),Zee=a("a"),PHr=o("FlaxDistilBertForTokenClassification"),BHr=o(" (DistilBERT model)"),IHr=l(),PA=a("li"),jwe=a("strong"),NHr=o("electra"),qHr=o(" \u2014 "),eoe=a("a"),jHr=o("FlaxElectraForTokenClassification"),DHr=o(" (ELECTRA model)"),GHr=l(),BA=a("li"),Dwe=a("strong"),OHr=o("roberta"),VHr=o(" \u2014 "),ooe=a("a"),XHr=o("FlaxRobertaForTokenClassification"),zHr=o(" (RoBERTa model)"),QHr=l(),IA=a("li"),Gwe=a("strong"),WHr=o("roformer"),HHr=o(" \u2014 "),roe=a("a"),UHr=o("FlaxRoFormerForTokenClassification"),JHr=o(" (RoFormer model)"),YHr=l(),NA=a("li"),Owe=a("strong"),KHr=o("xlm-roberta"),ZHr=o(" \u2014 "),toe=a("a"),eUr=o("FlaxXLMRobertaForTokenClassification"),oUr=o(" (XLM-RoBERTa model)"),rUr=l(),F(qA.$$.fragment),ZVe=l(),gm=a("h2"),jA=a("a"),Vwe=a("span"),F(M$.$$.fragment),tUr=l(),Xwe=a("span"),aUr=o("FlaxAutoModelForMultipleChoice"),eXe=l(),Mr=a("div"),F(E$.$$.fragment),nUr=l(),hm=a("p"),sUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aoe=a("a"),lUr=o("from_pretrained()"),iUr=o(" class method or the "),noe=a("a"),dUr=o("from_config()"),cUr=o(` class
method.`),mUr=l(),C$=a("p"),fUr=o("This class cannot be instantiated directly using "),zwe=a("code"),gUr=o("__init__()"),hUr=o(" (throws an error)."),uUr=l(),Kt=a("div"),F(w$.$$.fragment),pUr=l(),Qwe=a("p"),_Ur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bUr=l(),um=a("p"),vUr=o(`Note:
Loading a model from its configuration file does `),Wwe=a("strong"),FUr=o("not"),TUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=a("a"),MUr=o("from_pretrained()"),EUr=o(" to load the model weights."),CUr=l(),F(DA.$$.fragment),wUr=l(),Jr=a("div"),F(A$.$$.fragment),AUr=l(),Hwe=a("p"),LUr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yUr=l(),yn=a("p"),xUr=o("The model class to instantiate is selected based on the "),Uwe=a("code"),$Ur=o("model_type"),kUr=o(` property of the config object (either
passed as an argument or loaded from `),Jwe=a("code"),SUr=o("pretrained_model_name_or_path"),RUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=a("code"),PUr=o("pretrained_model_name_or_path"),BUr=o(":"),IUr=l(),Xe=a("ul"),GA=a("li"),Kwe=a("strong"),NUr=o("albert"),qUr=o(" \u2014 "),loe=a("a"),jUr=o("FlaxAlbertForMultipleChoice"),DUr=o(" (ALBERT model)"),GUr=l(),OA=a("li"),Zwe=a("strong"),OUr=o("bert"),VUr=o(" \u2014 "),ioe=a("a"),XUr=o("FlaxBertForMultipleChoice"),zUr=o(" (BERT model)"),QUr=l(),VA=a("li"),eAe=a("strong"),WUr=o("big_bird"),HUr=o(" \u2014 "),doe=a("a"),UUr=o("FlaxBigBirdForMultipleChoice"),JUr=o(" (BigBird model)"),YUr=l(),XA=a("li"),oAe=a("strong"),KUr=o("distilbert"),ZUr=o(" \u2014 "),coe=a("a"),eJr=o("FlaxDistilBertForMultipleChoice"),oJr=o(" (DistilBERT model)"),rJr=l(),zA=a("li"),rAe=a("strong"),tJr=o("electra"),aJr=o(" \u2014 "),moe=a("a"),nJr=o("FlaxElectraForMultipleChoice"),sJr=o(" (ELECTRA model)"),lJr=l(),QA=a("li"),tAe=a("strong"),iJr=o("roberta"),dJr=o(" \u2014 "),foe=a("a"),cJr=o("FlaxRobertaForMultipleChoice"),mJr=o(" (RoBERTa model)"),fJr=l(),WA=a("li"),aAe=a("strong"),gJr=o("roformer"),hJr=o(" \u2014 "),goe=a("a"),uJr=o("FlaxRoFormerForMultipleChoice"),pJr=o(" (RoFormer model)"),_Jr=l(),HA=a("li"),nAe=a("strong"),bJr=o("xlm-roberta"),vJr=o(" \u2014 "),hoe=a("a"),FJr=o("FlaxXLMRobertaForMultipleChoice"),TJr=o(" (XLM-RoBERTa model)"),MJr=l(),F(UA.$$.fragment),oXe=l(),pm=a("h2"),JA=a("a"),sAe=a("span"),F(L$.$$.fragment),EJr=l(),lAe=a("span"),CJr=o("FlaxAutoModelForNextSentencePrediction"),rXe=l(),Er=a("div"),F(y$.$$.fragment),wJr=l(),_m=a("p"),AJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uoe=a("a"),LJr=o("from_pretrained()"),yJr=o(" class method or the "),poe=a("a"),xJr=o("from_config()"),$Jr=o(` class
method.`),kJr=l(),x$=a("p"),SJr=o("This class cannot be instantiated directly using "),iAe=a("code"),RJr=o("__init__()"),PJr=o(" (throws an error)."),BJr=l(),Zt=a("div"),F($$.$$.fragment),IJr=l(),dAe=a("p"),NJr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qJr=l(),bm=a("p"),jJr=o(`Note:
Loading a model from its configuration file does `),cAe=a("strong"),DJr=o("not"),GJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=a("a"),OJr=o("from_pretrained()"),VJr=o(" to load the model weights."),XJr=l(),F(YA.$$.fragment),zJr=l(),Yr=a("div"),F(k$.$$.fragment),QJr=l(),mAe=a("p"),WJr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HJr=l(),xn=a("p"),UJr=o("The model class to instantiate is selected based on the "),fAe=a("code"),JJr=o("model_type"),YJr=o(` property of the config object (either
passed as an argument or loaded from `),gAe=a("code"),KJr=o("pretrained_model_name_or_path"),ZJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=a("code"),eYr=o("pretrained_model_name_or_path"),oYr=o(":"),rYr=l(),uAe=a("ul"),KA=a("li"),pAe=a("strong"),tYr=o("bert"),aYr=o(" \u2014 "),boe=a("a"),nYr=o("FlaxBertForNextSentencePrediction"),sYr=o(" (BERT model)"),lYr=l(),F(ZA.$$.fragment),tXe=l(),vm=a("h2"),e6=a("a"),_Ae=a("span"),F(S$.$$.fragment),iYr=l(),bAe=a("span"),dYr=o("FlaxAutoModelForImageClassification"),aXe=l(),Cr=a("div"),F(R$.$$.fragment),cYr=l(),Fm=a("p"),mYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),voe=a("a"),fYr=o("from_pretrained()"),gYr=o(" class method or the "),Foe=a("a"),hYr=o("from_config()"),uYr=o(` class
method.`),pYr=l(),P$=a("p"),_Yr=o("This class cannot be instantiated directly using "),vAe=a("code"),bYr=o("__init__()"),vYr=o(" (throws an error)."),FYr=l(),ea=a("div"),F(B$.$$.fragment),TYr=l(),FAe=a("p"),MYr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EYr=l(),Tm=a("p"),CYr=o(`Note:
Loading a model from its configuration file does `),TAe=a("strong"),wYr=o("not"),AYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),LYr=o("from_pretrained()"),yYr=o(" to load the model weights."),xYr=l(),F(o6.$$.fragment),$Yr=l(),Kr=a("div"),F(I$.$$.fragment),kYr=l(),MAe=a("p"),SYr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RYr=l(),$n=a("p"),PYr=o("The model class to instantiate is selected based on the "),EAe=a("code"),BYr=o("model_type"),IYr=o(` property of the config object (either
passed as an argument or loaded from `),CAe=a("code"),NYr=o("pretrained_model_name_or_path"),qYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wAe=a("code"),jYr=o("pretrained_model_name_or_path"),DYr=o(":"),GYr=l(),N$=a("ul"),r6=a("li"),AAe=a("strong"),OYr=o("beit"),VYr=o(" \u2014 "),Moe=a("a"),XYr=o("FlaxBeitForImageClassification"),zYr=o(" (BEiT model)"),QYr=l(),t6=a("li"),LAe=a("strong"),WYr=o("vit"),HYr=o(" \u2014 "),Eoe=a("a"),UYr=o("FlaxViTForImageClassification"),JYr=o(" (ViT model)"),YYr=l(),F(a6.$$.fragment),nXe=l(),Mm=a("h2"),n6=a("a"),yAe=a("span"),F(q$.$$.fragment),KYr=l(),xAe=a("span"),ZYr=o("FlaxAutoModelForVision2Seq"),sXe=l(),wr=a("div"),F(j$.$$.fragment),eKr=l(),Em=a("p"),oKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Coe=a("a"),rKr=o("from_pretrained()"),tKr=o(" class method or the "),woe=a("a"),aKr=o("from_config()"),nKr=o(` class
method.`),sKr=l(),D$=a("p"),lKr=o("This class cannot be instantiated directly using "),$Ae=a("code"),iKr=o("__init__()"),dKr=o(" (throws an error)."),cKr=l(),oa=a("div"),F(G$.$$.fragment),mKr=l(),kAe=a("p"),fKr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gKr=l(),Cm=a("p"),hKr=o(`Note:
Loading a model from its configuration file does `),SAe=a("strong"),uKr=o("not"),pKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("a"),_Kr=o("from_pretrained()"),bKr=o(" to load the model weights."),vKr=l(),F(s6.$$.fragment),FKr=l(),Zr=a("div"),F(O$.$$.fragment),TKr=l(),RAe=a("p"),MKr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EKr=l(),kn=a("p"),CKr=o("The model class to instantiate is selected based on the "),PAe=a("code"),wKr=o("model_type"),AKr=o(` property of the config object (either
passed as an argument or loaded from `),BAe=a("code"),LKr=o("pretrained_model_name_or_path"),yKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=a("code"),xKr=o("pretrained_model_name_or_path"),$Kr=o(":"),kKr=l(),NAe=a("ul"),l6=a("li"),qAe=a("strong"),SKr=o("vision-encoder-decoder"),RKr=o(" \u2014 "),Loe=a("a"),PKr=o("FlaxVisionEncoderDecoderModel"),BKr=o(" (Vision Encoder decoder model)"),IKr=l(),F(i6.$$.fragment),this.h()},l(m){const _=pGt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var V$=s(u);f=n(V$,"A",{id:!0,class:!0,href:!0});var jAe=s(f);p=n(jAe,"SPAN",{});var DAe=s(p);T(d.$$.fragment,DAe),DAe.forEach(t),jAe.forEach(t),h=i(V$),Eo=n(V$,"SPAN",{});var GAe=s(Eo);Mi=r(GAe,"Auto Classes"),GAe.forEach(t),V$.forEach(t),ym=i(m),at=n(m,"P",{});var X$=s(at);Ei=r(X$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=n(X$,"CODE",{});var OAe=s(Ci);x7=r(OAe,"from_pretrained()"),OAe.forEach(t),xm=r(X$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),X$.forEach(t),Oe=i(m),Qe=n(m,"P",{});var Sn=s(Qe);wi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var VAe=s(Rn);$7=r(VAe,"AutoConfig"),VAe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var XAe=s(Bn);k7=r(XAe,"AutoModel"),XAe.forEach(t),Ai=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var zAe=s(In);S7=r(zAe,"AutoTokenizer"),zAe.forEach(t),Li=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),$m=i(m),T(xa.$$.fragment,m),We=i(m),Ae=n(m,"P",{});var z$=s(Ae);lS=r(z$,"will create a model that is an instance of "),yi=n(z$,"A",{href:!0});var QAe=s(yi);iS=r(QAe,"BertModel"),QAe.forEach(t),dS=r(z$,"."),z$.forEach(t),Co=i(m),$a=n(m,"P",{});var Q$=s($a);cS=r(Q$,"There is one class of "),km=n(Q$,"CODE",{});var WAe=s(km);mS=r(WAe,"AutoModel"),WAe.forEach(t),_Qe=r(Q$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Q$.forEach(t),rOe=i(m),xi=n(m,"H2",{class:!0});var W$=s(xi);Sm=n(W$,"A",{id:!0,class:!0,href:!0});var HAe=s(Sm);Mte=n(HAe,"SPAN",{});var UAe=s(Mte);T(R7.$$.fragment,UAe),UAe.forEach(t),HAe.forEach(t),bQe=i(W$),Ete=n(W$,"SPAN",{});var JAe=s(Ete);vQe=r(JAe,"Extending the Auto Classes"),JAe.forEach(t),W$.forEach(t),tOe=i(m),Nn=n(m,"P",{});var wm=s(Nn);FQe=r(wm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cte=n(wm,"CODE",{});var YAe=s(Cte);TQe=r(YAe,"NewModel"),YAe.forEach(t),MQe=r(wm,", make sure you have a "),wte=n(wm,"CODE",{});var KAe=s(wte);EQe=r(KAe,"NewModelConfig"),KAe.forEach(t),CQe=r(wm,` then you can add those to the auto
classes like this:`),wm.forEach(t),aOe=i(m),T(P7.$$.fragment,m),nOe=i(m),fS=n(m,"P",{});var ZAe=s(fS);wQe=r(ZAe,"You will then be able to use the auto classes like you would usually do!"),ZAe.forEach(t),sOe=i(m),T(Rm.$$.fragment,m),lOe=i(m),$i=n(m,"H2",{class:!0});var H$=s($i);Pm=n(H$,"A",{id:!0,class:!0,href:!0});var e6e=s(Pm);Ate=n(e6e,"SPAN",{});var o6e=s(Ate);T(B7.$$.fragment,o6e),o6e.forEach(t),e6e.forEach(t),AQe=i(H$),Lte=n(H$,"SPAN",{});var r6e=s(Lte);LQe=r(r6e,"AutoConfig"),r6e.forEach(t),H$.forEach(t),iOe=i(m),wo=n(m,"DIV",{class:!0});var rt=s(wo);T(I7.$$.fragment,rt),yQe=i(rt),N7=n(rt,"P",{});var U$=s(N7);xQe=r(U$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gS=n(U$,"A",{href:!0});var t6e=s(gS);$Qe=r(t6e,"from_pretrained()"),t6e.forEach(t),kQe=r(U$," class method."),U$.forEach(t),SQe=i(rt),q7=n(rt,"P",{});var J$=s(q7);RQe=r(J$,"This class cannot be instantiated directly using "),yte=n(J$,"CODE",{});var a6e=s(yte);PQe=r(a6e,"__init__()"),a6e.forEach(t),BQe=r(J$," (throws an error)."),J$.forEach(t),IQe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(j7.$$.fragment,tt),NQe=i(tt),xte=n(tt,"P",{});var n6e=s(xte);qQe=r(n6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),n6e.forEach(t),jQe=i(tt),ki=n(tt,"P",{});var Am=s(ki);DQe=r(Am,"The configuration class to instantiate is selected based on the "),$te=n(Am,"CODE",{});var s6e=s($te);GQe=r(s6e,"model_type"),s6e.forEach(t),OQe=r(Am,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kte=n(Am,"CODE",{});var l6e=s(kte);VQe=r(l6e,"pretrained_model_name_or_path"),l6e.forEach(t),XQe=r(Am,":"),Am.forEach(t),zQe=i(tt),A=n(tt,"UL",{});var L=s(A);Bm=n(L,"LI",{});var d6=s(Bm);Ste=n(d6,"STRONG",{});var i6e=s(Ste);QQe=r(i6e,"albert"),i6e.forEach(t),WQe=r(d6," \u2014 "),hS=n(d6,"A",{href:!0});var d6e=s(hS);HQe=r(d6e,"AlbertConfig"),d6e.forEach(t),UQe=r(d6," (ALBERT model)"),d6.forEach(t),JQe=i(L),Im=n(L,"LI",{});var c6=s(Im);Rte=n(c6,"STRONG",{});var c6e=s(Rte);YQe=r(c6e,"bart"),c6e.forEach(t),KQe=r(c6," \u2014 "),uS=n(c6,"A",{href:!0});var m6e=s(uS);ZQe=r(m6e,"BartConfig"),m6e.forEach(t),eWe=r(c6," (BART model)"),c6.forEach(t),oWe=i(L),Nm=n(L,"LI",{});var m6=s(Nm);Pte=n(m6,"STRONG",{});var f6e=s(Pte);rWe=r(f6e,"beit"),f6e.forEach(t),tWe=r(m6," \u2014 "),pS=n(m6,"A",{href:!0});var g6e=s(pS);aWe=r(g6e,"BeitConfig"),g6e.forEach(t),nWe=r(m6," (BEiT model)"),m6.forEach(t),sWe=i(L),qm=n(L,"LI",{});var f6=s(qm);Bte=n(f6,"STRONG",{});var h6e=s(Bte);lWe=r(h6e,"bert"),h6e.forEach(t),iWe=r(f6," \u2014 "),_S=n(f6,"A",{href:!0});var u6e=s(_S);dWe=r(u6e,"BertConfig"),u6e.forEach(t),cWe=r(f6," (BERT model)"),f6.forEach(t),mWe=i(L),jm=n(L,"LI",{});var g6=s(jm);Ite=n(g6,"STRONG",{});var p6e=s(Ite);fWe=r(p6e,"bert-generation"),p6e.forEach(t),gWe=r(g6," \u2014 "),bS=n(g6,"A",{href:!0});var _6e=s(bS);hWe=r(_6e,"BertGenerationConfig"),_6e.forEach(t),uWe=r(g6," (Bert Generation model)"),g6.forEach(t),pWe=i(L),Dm=n(L,"LI",{});var h6=s(Dm);Nte=n(h6,"STRONG",{});var b6e=s(Nte);_We=r(b6e,"big_bird"),b6e.forEach(t),bWe=r(h6," \u2014 "),vS=n(h6,"A",{href:!0});var v6e=s(vS);vWe=r(v6e,"BigBirdConfig"),v6e.forEach(t),FWe=r(h6," (BigBird model)"),h6.forEach(t),TWe=i(L),Gm=n(L,"LI",{});var u6=s(Gm);qte=n(u6,"STRONG",{});var F6e=s(qte);MWe=r(F6e,"bigbird_pegasus"),F6e.forEach(t),EWe=r(u6," \u2014 "),FS=n(u6,"A",{href:!0});var T6e=s(FS);CWe=r(T6e,"BigBirdPegasusConfig"),T6e.forEach(t),wWe=r(u6," (BigBird-Pegasus model)"),u6.forEach(t),AWe=i(L),Om=n(L,"LI",{});var p6=s(Om);jte=n(p6,"STRONG",{});var M6e=s(jte);LWe=r(M6e,"blenderbot"),M6e.forEach(t),yWe=r(p6," \u2014 "),TS=n(p6,"A",{href:!0});var E6e=s(TS);xWe=r(E6e,"BlenderbotConfig"),E6e.forEach(t),$We=r(p6," (Blenderbot model)"),p6.forEach(t),kWe=i(L),Vm=n(L,"LI",{});var _6=s(Vm);Dte=n(_6,"STRONG",{});var C6e=s(Dte);SWe=r(C6e,"blenderbot-small"),C6e.forEach(t),RWe=r(_6," \u2014 "),MS=n(_6,"A",{href:!0});var w6e=s(MS);PWe=r(w6e,"BlenderbotSmallConfig"),w6e.forEach(t),BWe=r(_6," (BlenderbotSmall model)"),_6.forEach(t),IWe=i(L),Xm=n(L,"LI",{});var b6=s(Xm);Gte=n(b6,"STRONG",{});var A6e=s(Gte);NWe=r(A6e,"bloom"),A6e.forEach(t),qWe=r(b6," \u2014 "),ES=n(b6,"A",{href:!0});var L6e=s(ES);jWe=r(L6e,"BloomConfig"),L6e.forEach(t),DWe=r(b6," (BLOOM model)"),b6.forEach(t),GWe=i(L),zm=n(L,"LI",{});var v6=s(zm);Ote=n(v6,"STRONG",{});var y6e=s(Ote);OWe=r(y6e,"camembert"),y6e.forEach(t),VWe=r(v6," \u2014 "),CS=n(v6,"A",{href:!0});var x6e=s(CS);XWe=r(x6e,"CamembertConfig"),x6e.forEach(t),zWe=r(v6," (CamemBERT model)"),v6.forEach(t),QWe=i(L),Qm=n(L,"LI",{});var F6=s(Qm);Vte=n(F6,"STRONG",{});var $6e=s(Vte);WWe=r($6e,"canine"),$6e.forEach(t),HWe=r(F6," \u2014 "),wS=n(F6,"A",{href:!0});var k6e=s(wS);UWe=r(k6e,"CanineConfig"),k6e.forEach(t),JWe=r(F6," (CANINE model)"),F6.forEach(t),YWe=i(L),Wm=n(L,"LI",{});var T6=s(Wm);Xte=n(T6,"STRONG",{});var S6e=s(Xte);KWe=r(S6e,"clip"),S6e.forEach(t),ZWe=r(T6," \u2014 "),AS=n(T6,"A",{href:!0});var R6e=s(AS);eHe=r(R6e,"CLIPConfig"),R6e.forEach(t),oHe=r(T6," (CLIP model)"),T6.forEach(t),rHe=i(L),Hm=n(L,"LI",{});var M6=s(Hm);zte=n(M6,"STRONG",{});var P6e=s(zte);tHe=r(P6e,"codegen"),P6e.forEach(t),aHe=r(M6," \u2014 "),LS=n(M6,"A",{href:!0});var B6e=s(LS);nHe=r(B6e,"CodeGenConfig"),B6e.forEach(t),sHe=r(M6," (CodeGen model)"),M6.forEach(t),lHe=i(L),Um=n(L,"LI",{});var E6=s(Um);Qte=n(E6,"STRONG",{});var I6e=s(Qte);iHe=r(I6e,"convbert"),I6e.forEach(t),dHe=r(E6," \u2014 "),yS=n(E6,"A",{href:!0});var N6e=s(yS);cHe=r(N6e,"ConvBertConfig"),N6e.forEach(t),mHe=r(E6," (ConvBERT model)"),E6.forEach(t),fHe=i(L),Jm=n(L,"LI",{});var C6=s(Jm);Wte=n(C6,"STRONG",{});var q6e=s(Wte);gHe=r(q6e,"convnext"),q6e.forEach(t),hHe=r(C6," \u2014 "),xS=n(C6,"A",{href:!0});var j6e=s(xS);uHe=r(j6e,"ConvNextConfig"),j6e.forEach(t),pHe=r(C6," (ConvNeXT model)"),C6.forEach(t),_He=i(L),Ym=n(L,"LI",{});var w6=s(Ym);Hte=n(w6,"STRONG",{});var D6e=s(Hte);bHe=r(D6e,"ctrl"),D6e.forEach(t),vHe=r(w6," \u2014 "),$S=n(w6,"A",{href:!0});var G6e=s($S);FHe=r(G6e,"CTRLConfig"),G6e.forEach(t),THe=r(w6," (CTRL model)"),w6.forEach(t),MHe=i(L),Km=n(L,"LI",{});var A6=s(Km);Ute=n(A6,"STRONG",{});var O6e=s(Ute);EHe=r(O6e,"cvt"),O6e.forEach(t),CHe=r(A6," \u2014 "),kS=n(A6,"A",{href:!0});var V6e=s(kS);wHe=r(V6e,"CvtConfig"),V6e.forEach(t),AHe=r(A6," (CvT model)"),A6.forEach(t),LHe=i(L),Zm=n(L,"LI",{});var L6=s(Zm);Jte=n(L6,"STRONG",{});var X6e=s(Jte);yHe=r(X6e,"data2vec-audio"),X6e.forEach(t),xHe=r(L6," \u2014 "),SS=n(L6,"A",{href:!0});var z6e=s(SS);$He=r(z6e,"Data2VecAudioConfig"),z6e.forEach(t),kHe=r(L6," (Data2VecAudio model)"),L6.forEach(t),SHe=i(L),ef=n(L,"LI",{});var y6=s(ef);Yte=n(y6,"STRONG",{});var Q6e=s(Yte);RHe=r(Q6e,"data2vec-text"),Q6e.forEach(t),PHe=r(y6," \u2014 "),RS=n(y6,"A",{href:!0});var W6e=s(RS);BHe=r(W6e,"Data2VecTextConfig"),W6e.forEach(t),IHe=r(y6," (Data2VecText model)"),y6.forEach(t),NHe=i(L),of=n(L,"LI",{});var x6=s(of);Kte=n(x6,"STRONG",{});var H6e=s(Kte);qHe=r(H6e,"data2vec-vision"),H6e.forEach(t),jHe=r(x6," \u2014 "),PS=n(x6,"A",{href:!0});var U6e=s(PS);DHe=r(U6e,"Data2VecVisionConfig"),U6e.forEach(t),GHe=r(x6," (Data2VecVision model)"),x6.forEach(t),OHe=i(L),rf=n(L,"LI",{});var $6=s(rf);Zte=n($6,"STRONG",{});var J6e=s(Zte);VHe=r(J6e,"deberta"),J6e.forEach(t),XHe=r($6," \u2014 "),BS=n($6,"A",{href:!0});var Y6e=s(BS);zHe=r(Y6e,"DebertaConfig"),Y6e.forEach(t),QHe=r($6," (DeBERTa model)"),$6.forEach(t),WHe=i(L),tf=n(L,"LI",{});var k6=s(tf);eae=n(k6,"STRONG",{});var K6e=s(eae);HHe=r(K6e,"deberta-v2"),K6e.forEach(t),UHe=r(k6," \u2014 "),IS=n(k6,"A",{href:!0});var Z6e=s(IS);JHe=r(Z6e,"DebertaV2Config"),Z6e.forEach(t),YHe=r(k6," (DeBERTa-v2 model)"),k6.forEach(t),KHe=i(L),af=n(L,"LI",{});var S6=s(af);oae=n(S6,"STRONG",{});var qKr=s(oae);ZHe=r(qKr,"decision_transformer"),qKr.forEach(t),eUe=r(S6," \u2014 "),NS=n(S6,"A",{href:!0});var jKr=s(NS);oUe=r(jKr,"DecisionTransformerConfig"),jKr.forEach(t),rUe=r(S6," (Decision Transformer model)"),S6.forEach(t),tUe=i(L),nf=n(L,"LI",{});var eLe=s(nf);rae=n(eLe,"STRONG",{});var DKr=s(rae);aUe=r(DKr,"deit"),DKr.forEach(t),nUe=r(eLe," \u2014 "),qS=n(eLe,"A",{href:!0});var GKr=s(qS);sUe=r(GKr,"DeiTConfig"),GKr.forEach(t),lUe=r(eLe," (DeiT model)"),eLe.forEach(t),iUe=i(L),sf=n(L,"LI",{});var oLe=s(sf);tae=n(oLe,"STRONG",{});var OKr=s(tae);dUe=r(OKr,"detr"),OKr.forEach(t),cUe=r(oLe," \u2014 "),jS=n(oLe,"A",{href:!0});var VKr=s(jS);mUe=r(VKr,"DetrConfig"),VKr.forEach(t),fUe=r(oLe," (DETR model)"),oLe.forEach(t),gUe=i(L),lf=n(L,"LI",{});var rLe=s(lf);aae=n(rLe,"STRONG",{});var XKr=s(aae);hUe=r(XKr,"distilbert"),XKr.forEach(t),uUe=r(rLe," \u2014 "),DS=n(rLe,"A",{href:!0});var zKr=s(DS);pUe=r(zKr,"DistilBertConfig"),zKr.forEach(t),_Ue=r(rLe," (DistilBERT model)"),rLe.forEach(t),bUe=i(L),df=n(L,"LI",{});var tLe=s(df);nae=n(tLe,"STRONG",{});var QKr=s(nae);vUe=r(QKr,"dpr"),QKr.forEach(t),FUe=r(tLe," \u2014 "),GS=n(tLe,"A",{href:!0});var WKr=s(GS);TUe=r(WKr,"DPRConfig"),WKr.forEach(t),MUe=r(tLe," (DPR model)"),tLe.forEach(t),EUe=i(L),cf=n(L,"LI",{});var aLe=s(cf);sae=n(aLe,"STRONG",{});var HKr=s(sae);CUe=r(HKr,"dpt"),HKr.forEach(t),wUe=r(aLe," \u2014 "),OS=n(aLe,"A",{href:!0});var UKr=s(OS);AUe=r(UKr,"DPTConfig"),UKr.forEach(t),LUe=r(aLe," (DPT model)"),aLe.forEach(t),yUe=i(L),mf=n(L,"LI",{});var nLe=s(mf);lae=n(nLe,"STRONG",{});var JKr=s(lae);xUe=r(JKr,"electra"),JKr.forEach(t),$Ue=r(nLe," \u2014 "),VS=n(nLe,"A",{href:!0});var YKr=s(VS);kUe=r(YKr,"ElectraConfig"),YKr.forEach(t),SUe=r(nLe," (ELECTRA model)"),nLe.forEach(t),RUe=i(L),ff=n(L,"LI",{});var sLe=s(ff);iae=n(sLe,"STRONG",{});var KKr=s(iae);PUe=r(KKr,"encoder-decoder"),KKr.forEach(t),BUe=r(sLe," \u2014 "),XS=n(sLe,"A",{href:!0});var ZKr=s(XS);IUe=r(ZKr,"EncoderDecoderConfig"),ZKr.forEach(t),NUe=r(sLe," (Encoder decoder model)"),sLe.forEach(t),qUe=i(L),gf=n(L,"LI",{});var lLe=s(gf);dae=n(lLe,"STRONG",{});var eZr=s(dae);jUe=r(eZr,"flaubert"),eZr.forEach(t),DUe=r(lLe," \u2014 "),zS=n(lLe,"A",{href:!0});var oZr=s(zS);GUe=r(oZr,"FlaubertConfig"),oZr.forEach(t),OUe=r(lLe," (FlauBERT model)"),lLe.forEach(t),VUe=i(L),hf=n(L,"LI",{});var iLe=s(hf);cae=n(iLe,"STRONG",{});var rZr=s(cae);XUe=r(rZr,"flava"),rZr.forEach(t),zUe=r(iLe," \u2014 "),QS=n(iLe,"A",{href:!0});var tZr=s(QS);QUe=r(tZr,"FlavaConfig"),tZr.forEach(t),WUe=r(iLe," (FLAVA model)"),iLe.forEach(t),HUe=i(L),uf=n(L,"LI",{});var dLe=s(uf);mae=n(dLe,"STRONG",{});var aZr=s(mae);UUe=r(aZr,"fnet"),aZr.forEach(t),JUe=r(dLe," \u2014 "),WS=n(dLe,"A",{href:!0});var nZr=s(WS);YUe=r(nZr,"FNetConfig"),nZr.forEach(t),KUe=r(dLe," (FNet model)"),dLe.forEach(t),ZUe=i(L),pf=n(L,"LI",{});var cLe=s(pf);fae=n(cLe,"STRONG",{});var sZr=s(fae);eJe=r(sZr,"fsmt"),sZr.forEach(t),oJe=r(cLe," \u2014 "),HS=n(cLe,"A",{href:!0});var lZr=s(HS);rJe=r(lZr,"FSMTConfig"),lZr.forEach(t),tJe=r(cLe," (FairSeq Machine-Translation model)"),cLe.forEach(t),aJe=i(L),_f=n(L,"LI",{});var mLe=s(_f);gae=n(mLe,"STRONG",{});var iZr=s(gae);nJe=r(iZr,"funnel"),iZr.forEach(t),sJe=r(mLe," \u2014 "),US=n(mLe,"A",{href:!0});var dZr=s(US);lJe=r(dZr,"FunnelConfig"),dZr.forEach(t),iJe=r(mLe," (Funnel Transformer model)"),mLe.forEach(t),dJe=i(L),bf=n(L,"LI",{});var fLe=s(bf);hae=n(fLe,"STRONG",{});var cZr=s(hae);cJe=r(cZr,"glpn"),cZr.forEach(t),mJe=r(fLe," \u2014 "),JS=n(fLe,"A",{href:!0});var mZr=s(JS);fJe=r(mZr,"GLPNConfig"),mZr.forEach(t),gJe=r(fLe," (GLPN model)"),fLe.forEach(t),hJe=i(L),vf=n(L,"LI",{});var gLe=s(vf);uae=n(gLe,"STRONG",{});var fZr=s(uae);uJe=r(fZr,"gpt2"),fZr.forEach(t),pJe=r(gLe," \u2014 "),YS=n(gLe,"A",{href:!0});var gZr=s(YS);_Je=r(gZr,"GPT2Config"),gZr.forEach(t),bJe=r(gLe," (OpenAI GPT-2 model)"),gLe.forEach(t),vJe=i(L),Ff=n(L,"LI",{});var hLe=s(Ff);pae=n(hLe,"STRONG",{});var hZr=s(pae);FJe=r(hZr,"gpt_neo"),hZr.forEach(t),TJe=r(hLe," \u2014 "),KS=n(hLe,"A",{href:!0});var uZr=s(KS);MJe=r(uZr,"GPTNeoConfig"),uZr.forEach(t),EJe=r(hLe," (GPT Neo model)"),hLe.forEach(t),CJe=i(L),Tf=n(L,"LI",{});var uLe=s(Tf);_ae=n(uLe,"STRONG",{});var pZr=s(_ae);wJe=r(pZr,"gpt_neox"),pZr.forEach(t),AJe=r(uLe," \u2014 "),ZS=n(uLe,"A",{href:!0});var _Zr=s(ZS);LJe=r(_Zr,"GPTNeoXConfig"),_Zr.forEach(t),yJe=r(uLe," (GPT NeoX model)"),uLe.forEach(t),xJe=i(L),Mf=n(L,"LI",{});var pLe=s(Mf);bae=n(pLe,"STRONG",{});var bZr=s(bae);$Je=r(bZr,"gptj"),bZr.forEach(t),kJe=r(pLe," \u2014 "),eR=n(pLe,"A",{href:!0});var vZr=s(eR);SJe=r(vZr,"GPTJConfig"),vZr.forEach(t),RJe=r(pLe," (GPT-J model)"),pLe.forEach(t),PJe=i(L),Ef=n(L,"LI",{});var _Le=s(Ef);vae=n(_Le,"STRONG",{});var FZr=s(vae);BJe=r(FZr,"hubert"),FZr.forEach(t),IJe=r(_Le," \u2014 "),oR=n(_Le,"A",{href:!0});var TZr=s(oR);NJe=r(TZr,"HubertConfig"),TZr.forEach(t),qJe=r(_Le," (Hubert model)"),_Le.forEach(t),jJe=i(L),Cf=n(L,"LI",{});var bLe=s(Cf);Fae=n(bLe,"STRONG",{});var MZr=s(Fae);DJe=r(MZr,"ibert"),MZr.forEach(t),GJe=r(bLe," \u2014 "),rR=n(bLe,"A",{href:!0});var EZr=s(rR);OJe=r(EZr,"IBertConfig"),EZr.forEach(t),VJe=r(bLe," (I-BERT model)"),bLe.forEach(t),XJe=i(L),wf=n(L,"LI",{});var vLe=s(wf);Tae=n(vLe,"STRONG",{});var CZr=s(Tae);zJe=r(CZr,"imagegpt"),CZr.forEach(t),QJe=r(vLe," \u2014 "),tR=n(vLe,"A",{href:!0});var wZr=s(tR);WJe=r(wZr,"ImageGPTConfig"),wZr.forEach(t),HJe=r(vLe," (ImageGPT model)"),vLe.forEach(t),UJe=i(L),Af=n(L,"LI",{});var FLe=s(Af);Mae=n(FLe,"STRONG",{});var AZr=s(Mae);JJe=r(AZr,"layoutlm"),AZr.forEach(t),YJe=r(FLe," \u2014 "),aR=n(FLe,"A",{href:!0});var LZr=s(aR);KJe=r(LZr,"LayoutLMConfig"),LZr.forEach(t),ZJe=r(FLe," (LayoutLM model)"),FLe.forEach(t),eYe=i(L),Lf=n(L,"LI",{});var TLe=s(Lf);Eae=n(TLe,"STRONG",{});var yZr=s(Eae);oYe=r(yZr,"layoutlmv2"),yZr.forEach(t),rYe=r(TLe," \u2014 "),nR=n(TLe,"A",{href:!0});var xZr=s(nR);tYe=r(xZr,"LayoutLMv2Config"),xZr.forEach(t),aYe=r(TLe," (LayoutLMv2 model)"),TLe.forEach(t),nYe=i(L),yf=n(L,"LI",{});var MLe=s(yf);Cae=n(MLe,"STRONG",{});var $Zr=s(Cae);sYe=r($Zr,"layoutlmv3"),$Zr.forEach(t),lYe=r(MLe," \u2014 "),sR=n(MLe,"A",{href:!0});var kZr=s(sR);iYe=r(kZr,"LayoutLMv3Config"),kZr.forEach(t),dYe=r(MLe," (LayoutLMv3 model)"),MLe.forEach(t),cYe=i(L),xf=n(L,"LI",{});var ELe=s(xf);wae=n(ELe,"STRONG",{});var SZr=s(wae);mYe=r(SZr,"led"),SZr.forEach(t),fYe=r(ELe," \u2014 "),lR=n(ELe,"A",{href:!0});var RZr=s(lR);gYe=r(RZr,"LEDConfig"),RZr.forEach(t),hYe=r(ELe," (LED model)"),ELe.forEach(t),uYe=i(L),$f=n(L,"LI",{});var CLe=s($f);Aae=n(CLe,"STRONG",{});var PZr=s(Aae);pYe=r(PZr,"levit"),PZr.forEach(t),_Ye=r(CLe," \u2014 "),iR=n(CLe,"A",{href:!0});var BZr=s(iR);bYe=r(BZr,"LevitConfig"),BZr.forEach(t),vYe=r(CLe," (LeViT model)"),CLe.forEach(t),FYe=i(L),kf=n(L,"LI",{});var wLe=s(kf);Lae=n(wLe,"STRONG",{});var IZr=s(Lae);TYe=r(IZr,"longformer"),IZr.forEach(t),MYe=r(wLe," \u2014 "),dR=n(wLe,"A",{href:!0});var NZr=s(dR);EYe=r(NZr,"LongformerConfig"),NZr.forEach(t),CYe=r(wLe," (Longformer model)"),wLe.forEach(t),wYe=i(L),Sf=n(L,"LI",{});var ALe=s(Sf);yae=n(ALe,"STRONG",{});var qZr=s(yae);AYe=r(qZr,"longt5"),qZr.forEach(t),LYe=r(ALe," \u2014 "),cR=n(ALe,"A",{href:!0});var jZr=s(cR);yYe=r(jZr,"LongT5Config"),jZr.forEach(t),xYe=r(ALe," (LongT5 model)"),ALe.forEach(t),$Ye=i(L),Rf=n(L,"LI",{});var LLe=s(Rf);xae=n(LLe,"STRONG",{});var DZr=s(xae);kYe=r(DZr,"luke"),DZr.forEach(t),SYe=r(LLe," \u2014 "),mR=n(LLe,"A",{href:!0});var GZr=s(mR);RYe=r(GZr,"LukeConfig"),GZr.forEach(t),PYe=r(LLe," (LUKE model)"),LLe.forEach(t),BYe=i(L),Pf=n(L,"LI",{});var yLe=s(Pf);$ae=n(yLe,"STRONG",{});var OZr=s($ae);IYe=r(OZr,"lxmert"),OZr.forEach(t),NYe=r(yLe," \u2014 "),fR=n(yLe,"A",{href:!0});var VZr=s(fR);qYe=r(VZr,"LxmertConfig"),VZr.forEach(t),jYe=r(yLe," (LXMERT model)"),yLe.forEach(t),DYe=i(L),Bf=n(L,"LI",{});var xLe=s(Bf);kae=n(xLe,"STRONG",{});var XZr=s(kae);GYe=r(XZr,"m2m_100"),XZr.forEach(t),OYe=r(xLe," \u2014 "),gR=n(xLe,"A",{href:!0});var zZr=s(gR);VYe=r(zZr,"M2M100Config"),zZr.forEach(t),XYe=r(xLe," (M2M100 model)"),xLe.forEach(t),zYe=i(L),If=n(L,"LI",{});var $Le=s(If);Sae=n($Le,"STRONG",{});var QZr=s(Sae);QYe=r(QZr,"marian"),QZr.forEach(t),WYe=r($Le," \u2014 "),hR=n($Le,"A",{href:!0});var WZr=s(hR);HYe=r(WZr,"MarianConfig"),WZr.forEach(t),UYe=r($Le," (Marian model)"),$Le.forEach(t),JYe=i(L),Nf=n(L,"LI",{});var kLe=s(Nf);Rae=n(kLe,"STRONG",{});var HZr=s(Rae);YYe=r(HZr,"maskformer"),HZr.forEach(t),KYe=r(kLe," \u2014 "),uR=n(kLe,"A",{href:!0});var UZr=s(uR);ZYe=r(UZr,"MaskFormerConfig"),UZr.forEach(t),eKe=r(kLe," (MaskFormer model)"),kLe.forEach(t),oKe=i(L),qf=n(L,"LI",{});var SLe=s(qf);Pae=n(SLe,"STRONG",{});var JZr=s(Pae);rKe=r(JZr,"mbart"),JZr.forEach(t),tKe=r(SLe," \u2014 "),pR=n(SLe,"A",{href:!0});var YZr=s(pR);aKe=r(YZr,"MBartConfig"),YZr.forEach(t),nKe=r(SLe," (mBART model)"),SLe.forEach(t),sKe=i(L),jf=n(L,"LI",{});var RLe=s(jf);Bae=n(RLe,"STRONG",{});var KZr=s(Bae);lKe=r(KZr,"mctct"),KZr.forEach(t),iKe=r(RLe," \u2014 "),_R=n(RLe,"A",{href:!0});var ZZr=s(_R);dKe=r(ZZr,"MCTCTConfig"),ZZr.forEach(t),cKe=r(RLe," (M-CTC-T model)"),RLe.forEach(t),mKe=i(L),Df=n(L,"LI",{});var PLe=s(Df);Iae=n(PLe,"STRONG",{});var eet=s(Iae);fKe=r(eet,"megatron-bert"),eet.forEach(t),gKe=r(PLe," \u2014 "),bR=n(PLe,"A",{href:!0});var oet=s(bR);hKe=r(oet,"MegatronBertConfig"),oet.forEach(t),uKe=r(PLe," (Megatron-BERT model)"),PLe.forEach(t),pKe=i(L),Gf=n(L,"LI",{});var BLe=s(Gf);Nae=n(BLe,"STRONG",{});var ret=s(Nae);_Ke=r(ret,"mobilebert"),ret.forEach(t),bKe=r(BLe," \u2014 "),vR=n(BLe,"A",{href:!0});var tet=s(vR);vKe=r(tet,"MobileBertConfig"),tet.forEach(t),FKe=r(BLe," (MobileBERT model)"),BLe.forEach(t),TKe=i(L),Of=n(L,"LI",{});var ILe=s(Of);qae=n(ILe,"STRONG",{});var aet=s(qae);MKe=r(aet,"mpnet"),aet.forEach(t),EKe=r(ILe," \u2014 "),FR=n(ILe,"A",{href:!0});var net=s(FR);CKe=r(net,"MPNetConfig"),net.forEach(t),wKe=r(ILe," (MPNet model)"),ILe.forEach(t),AKe=i(L),Vf=n(L,"LI",{});var NLe=s(Vf);jae=n(NLe,"STRONG",{});var set=s(jae);LKe=r(set,"mt5"),set.forEach(t),yKe=r(NLe," \u2014 "),TR=n(NLe,"A",{href:!0});var iet=s(TR);xKe=r(iet,"MT5Config"),iet.forEach(t),$Ke=r(NLe," (MT5 model)"),NLe.forEach(t),kKe=i(L),Xf=n(L,"LI",{});var qLe=s(Xf);Dae=n(qLe,"STRONG",{});var det=s(Dae);SKe=r(det,"nezha"),det.forEach(t),RKe=r(qLe," \u2014 "),MR=n(qLe,"A",{href:!0});var cet=s(MR);PKe=r(cet,"NezhaConfig"),cet.forEach(t),BKe=r(qLe," (Nezha model)"),qLe.forEach(t),IKe=i(L),zf=n(L,"LI",{});var jLe=s(zf);Gae=n(jLe,"STRONG",{});var met=s(Gae);NKe=r(met,"nystromformer"),met.forEach(t),qKe=r(jLe," \u2014 "),ER=n(jLe,"A",{href:!0});var fet=s(ER);jKe=r(fet,"NystromformerConfig"),fet.forEach(t),DKe=r(jLe," (Nystr\xF6mformer model)"),jLe.forEach(t),GKe=i(L),Qf=n(L,"LI",{});var DLe=s(Qf);Oae=n(DLe,"STRONG",{});var get=s(Oae);OKe=r(get,"openai-gpt"),get.forEach(t),VKe=r(DLe," \u2014 "),CR=n(DLe,"A",{href:!0});var het=s(CR);XKe=r(het,"OpenAIGPTConfig"),het.forEach(t),zKe=r(DLe," (OpenAI GPT model)"),DLe.forEach(t),QKe=i(L),Wf=n(L,"LI",{});var GLe=s(Wf);Vae=n(GLe,"STRONG",{});var uet=s(Vae);WKe=r(uet,"opt"),uet.forEach(t),HKe=r(GLe," \u2014 "),wR=n(GLe,"A",{href:!0});var pet=s(wR);UKe=r(pet,"OPTConfig"),pet.forEach(t),JKe=r(GLe," (OPT model)"),GLe.forEach(t),YKe=i(L),Hf=n(L,"LI",{});var OLe=s(Hf);Xae=n(OLe,"STRONG",{});var _et=s(Xae);KKe=r(_et,"pegasus"),_et.forEach(t),ZKe=r(OLe," \u2014 "),AR=n(OLe,"A",{href:!0});var bet=s(AR);eZe=r(bet,"PegasusConfig"),bet.forEach(t),oZe=r(OLe," (Pegasus model)"),OLe.forEach(t),rZe=i(L),Uf=n(L,"LI",{});var VLe=s(Uf);zae=n(VLe,"STRONG",{});var vet=s(zae);tZe=r(vet,"perceiver"),vet.forEach(t),aZe=r(VLe," \u2014 "),LR=n(VLe,"A",{href:!0});var Fet=s(LR);nZe=r(Fet,"PerceiverConfig"),Fet.forEach(t),sZe=r(VLe," (Perceiver model)"),VLe.forEach(t),lZe=i(L),Jf=n(L,"LI",{});var XLe=s(Jf);Qae=n(XLe,"STRONG",{});var Tet=s(Qae);iZe=r(Tet,"plbart"),Tet.forEach(t),dZe=r(XLe," \u2014 "),yR=n(XLe,"A",{href:!0});var Met=s(yR);cZe=r(Met,"PLBartConfig"),Met.forEach(t),mZe=r(XLe," (PLBart model)"),XLe.forEach(t),fZe=i(L),Yf=n(L,"LI",{});var zLe=s(Yf);Wae=n(zLe,"STRONG",{});var Eet=s(Wae);gZe=r(Eet,"poolformer"),Eet.forEach(t),hZe=r(zLe," \u2014 "),xR=n(zLe,"A",{href:!0});var Cet=s(xR);uZe=r(Cet,"PoolFormerConfig"),Cet.forEach(t),pZe=r(zLe," (PoolFormer model)"),zLe.forEach(t),_Ze=i(L),Kf=n(L,"LI",{});var QLe=s(Kf);Hae=n(QLe,"STRONG",{});var wet=s(Hae);bZe=r(wet,"prophetnet"),wet.forEach(t),vZe=r(QLe," \u2014 "),$R=n(QLe,"A",{href:!0});var Aet=s($R);FZe=r(Aet,"ProphetNetConfig"),Aet.forEach(t),TZe=r(QLe," (ProphetNet model)"),QLe.forEach(t),MZe=i(L),Zf=n(L,"LI",{});var WLe=s(Zf);Uae=n(WLe,"STRONG",{});var Let=s(Uae);EZe=r(Let,"qdqbert"),Let.forEach(t),CZe=r(WLe," \u2014 "),kR=n(WLe,"A",{href:!0});var yet=s(kR);wZe=r(yet,"QDQBertConfig"),yet.forEach(t),AZe=r(WLe," (QDQBert model)"),WLe.forEach(t),LZe=i(L),eg=n(L,"LI",{});var HLe=s(eg);Jae=n(HLe,"STRONG",{});var xet=s(Jae);yZe=r(xet,"rag"),xet.forEach(t),xZe=r(HLe," \u2014 "),SR=n(HLe,"A",{href:!0});var $et=s(SR);$Ze=r($et,"RagConfig"),$et.forEach(t),kZe=r(HLe," (RAG model)"),HLe.forEach(t),SZe=i(L),og=n(L,"LI",{});var ULe=s(og);Yae=n(ULe,"STRONG",{});var ket=s(Yae);RZe=r(ket,"realm"),ket.forEach(t),PZe=r(ULe," \u2014 "),RR=n(ULe,"A",{href:!0});var Set=s(RR);BZe=r(Set,"RealmConfig"),Set.forEach(t),IZe=r(ULe," (REALM model)"),ULe.forEach(t),NZe=i(L),rg=n(L,"LI",{});var JLe=s(rg);Kae=n(JLe,"STRONG",{});var Ret=s(Kae);qZe=r(Ret,"reformer"),Ret.forEach(t),jZe=r(JLe," \u2014 "),PR=n(JLe,"A",{href:!0});var Pet=s(PR);DZe=r(Pet,"ReformerConfig"),Pet.forEach(t),GZe=r(JLe," (Reformer model)"),JLe.forEach(t),OZe=i(L),tg=n(L,"LI",{});var YLe=s(tg);Zae=n(YLe,"STRONG",{});var Bet=s(Zae);VZe=r(Bet,"regnet"),Bet.forEach(t),XZe=r(YLe," \u2014 "),BR=n(YLe,"A",{href:!0});var Iet=s(BR);zZe=r(Iet,"RegNetConfig"),Iet.forEach(t),QZe=r(YLe," (RegNet model)"),YLe.forEach(t),WZe=i(L),ag=n(L,"LI",{});var KLe=s(ag);ene=n(KLe,"STRONG",{});var Net=s(ene);HZe=r(Net,"rembert"),Net.forEach(t),UZe=r(KLe," \u2014 "),IR=n(KLe,"A",{href:!0});var qet=s(IR);JZe=r(qet,"RemBertConfig"),qet.forEach(t),YZe=r(KLe," (RemBERT model)"),KLe.forEach(t),KZe=i(L),ng=n(L,"LI",{});var ZLe=s(ng);one=n(ZLe,"STRONG",{});var jet=s(one);ZZe=r(jet,"resnet"),jet.forEach(t),eeo=r(ZLe," \u2014 "),NR=n(ZLe,"A",{href:!0});var Det=s(NR);oeo=r(Det,"ResNetConfig"),Det.forEach(t),reo=r(ZLe," (ResNet model)"),ZLe.forEach(t),teo=i(L),sg=n(L,"LI",{});var e7e=s(sg);rne=n(e7e,"STRONG",{});var Get=s(rne);aeo=r(Get,"retribert"),Get.forEach(t),neo=r(e7e," \u2014 "),qR=n(e7e,"A",{href:!0});var Oet=s(qR);seo=r(Oet,"RetriBertConfig"),Oet.forEach(t),leo=r(e7e," (RetriBERT model)"),e7e.forEach(t),ieo=i(L),lg=n(L,"LI",{});var o7e=s(lg);tne=n(o7e,"STRONG",{});var Vet=s(tne);deo=r(Vet,"roberta"),Vet.forEach(t),ceo=r(o7e," \u2014 "),jR=n(o7e,"A",{href:!0});var Xet=s(jR);meo=r(Xet,"RobertaConfig"),Xet.forEach(t),feo=r(o7e," (RoBERTa model)"),o7e.forEach(t),geo=i(L),ig=n(L,"LI",{});var r7e=s(ig);ane=n(r7e,"STRONG",{});var zet=s(ane);heo=r(zet,"roformer"),zet.forEach(t),ueo=r(r7e," \u2014 "),DR=n(r7e,"A",{href:!0});var Qet=s(DR);peo=r(Qet,"RoFormerConfig"),Qet.forEach(t),_eo=r(r7e," (RoFormer model)"),r7e.forEach(t),beo=i(L),dg=n(L,"LI",{});var t7e=s(dg);nne=n(t7e,"STRONG",{});var Wet=s(nne);veo=r(Wet,"segformer"),Wet.forEach(t),Feo=r(t7e," \u2014 "),GR=n(t7e,"A",{href:!0});var Het=s(GR);Teo=r(Het,"SegformerConfig"),Het.forEach(t),Meo=r(t7e," (SegFormer model)"),t7e.forEach(t),Eeo=i(L),cg=n(L,"LI",{});var a7e=s(cg);sne=n(a7e,"STRONG",{});var Uet=s(sne);Ceo=r(Uet,"sew"),Uet.forEach(t),weo=r(a7e," \u2014 "),OR=n(a7e,"A",{href:!0});var Jet=s(OR);Aeo=r(Jet,"SEWConfig"),Jet.forEach(t),Leo=r(a7e," (SEW model)"),a7e.forEach(t),yeo=i(L),mg=n(L,"LI",{});var n7e=s(mg);lne=n(n7e,"STRONG",{});var Yet=s(lne);xeo=r(Yet,"sew-d"),Yet.forEach(t),$eo=r(n7e," \u2014 "),VR=n(n7e,"A",{href:!0});var Ket=s(VR);keo=r(Ket,"SEWDConfig"),Ket.forEach(t),Seo=r(n7e," (SEW-D model)"),n7e.forEach(t),Reo=i(L),fg=n(L,"LI",{});var s7e=s(fg);ine=n(s7e,"STRONG",{});var Zet=s(ine);Peo=r(Zet,"speech-encoder-decoder"),Zet.forEach(t),Beo=r(s7e," \u2014 "),XR=n(s7e,"A",{href:!0});var eot=s(XR);Ieo=r(eot,"SpeechEncoderDecoderConfig"),eot.forEach(t),Neo=r(s7e," (Speech Encoder decoder model)"),s7e.forEach(t),qeo=i(L),gg=n(L,"LI",{});var l7e=s(gg);dne=n(l7e,"STRONG",{});var oot=s(dne);jeo=r(oot,"speech_to_text"),oot.forEach(t),Deo=r(l7e," \u2014 "),zR=n(l7e,"A",{href:!0});var rot=s(zR);Geo=r(rot,"Speech2TextConfig"),rot.forEach(t),Oeo=r(l7e," (Speech2Text model)"),l7e.forEach(t),Veo=i(L),hg=n(L,"LI",{});var i7e=s(hg);cne=n(i7e,"STRONG",{});var tot=s(cne);Xeo=r(tot,"speech_to_text_2"),tot.forEach(t),zeo=r(i7e," \u2014 "),QR=n(i7e,"A",{href:!0});var aot=s(QR);Qeo=r(aot,"Speech2Text2Config"),aot.forEach(t),Weo=r(i7e," (Speech2Text2 model)"),i7e.forEach(t),Heo=i(L),ug=n(L,"LI",{});var d7e=s(ug);mne=n(d7e,"STRONG",{});var not=s(mne);Ueo=r(not,"splinter"),not.forEach(t),Jeo=r(d7e," \u2014 "),WR=n(d7e,"A",{href:!0});var sot=s(WR);Yeo=r(sot,"SplinterConfig"),sot.forEach(t),Keo=r(d7e," (Splinter model)"),d7e.forEach(t),Zeo=i(L),pg=n(L,"LI",{});var c7e=s(pg);fne=n(c7e,"STRONG",{});var lot=s(fne);eoo=r(lot,"squeezebert"),lot.forEach(t),ooo=r(c7e," \u2014 "),HR=n(c7e,"A",{href:!0});var iot=s(HR);roo=r(iot,"SqueezeBertConfig"),iot.forEach(t),too=r(c7e," (SqueezeBERT model)"),c7e.forEach(t),aoo=i(L),_g=n(L,"LI",{});var m7e=s(_g);gne=n(m7e,"STRONG",{});var dot=s(gne);noo=r(dot,"swin"),dot.forEach(t),soo=r(m7e," \u2014 "),UR=n(m7e,"A",{href:!0});var cot=s(UR);loo=r(cot,"SwinConfig"),cot.forEach(t),ioo=r(m7e," (Swin Transformer model)"),m7e.forEach(t),doo=i(L),bg=n(L,"LI",{});var f7e=s(bg);hne=n(f7e,"STRONG",{});var mot=s(hne);coo=r(mot,"t5"),mot.forEach(t),moo=r(f7e," \u2014 "),JR=n(f7e,"A",{href:!0});var fot=s(JR);foo=r(fot,"T5Config"),fot.forEach(t),goo=r(f7e," (T5 model)"),f7e.forEach(t),hoo=i(L),vg=n(L,"LI",{});var g7e=s(vg);une=n(g7e,"STRONG",{});var got=s(une);uoo=r(got,"tapas"),got.forEach(t),poo=r(g7e," \u2014 "),YR=n(g7e,"A",{href:!0});var hot=s(YR);_oo=r(hot,"TapasConfig"),hot.forEach(t),boo=r(g7e," (TAPAS model)"),g7e.forEach(t),voo=i(L),Fg=n(L,"LI",{});var h7e=s(Fg);pne=n(h7e,"STRONG",{});var uot=s(pne);Foo=r(uot,"trajectory_transformer"),uot.forEach(t),Too=r(h7e," \u2014 "),KR=n(h7e,"A",{href:!0});var pot=s(KR);Moo=r(pot,"TrajectoryTransformerConfig"),pot.forEach(t),Eoo=r(h7e," (Trajectory Transformer model)"),h7e.forEach(t),Coo=i(L),Tg=n(L,"LI",{});var u7e=s(Tg);_ne=n(u7e,"STRONG",{});var _ot=s(_ne);woo=r(_ot,"transfo-xl"),_ot.forEach(t),Aoo=r(u7e," \u2014 "),ZR=n(u7e,"A",{href:!0});var bot=s(ZR);Loo=r(bot,"TransfoXLConfig"),bot.forEach(t),yoo=r(u7e," (Transformer-XL model)"),u7e.forEach(t),xoo=i(L),Mg=n(L,"LI",{});var p7e=s(Mg);bne=n(p7e,"STRONG",{});var vot=s(bne);$oo=r(vot,"trocr"),vot.forEach(t),koo=r(p7e," \u2014 "),eP=n(p7e,"A",{href:!0});var Fot=s(eP);Soo=r(Fot,"TrOCRConfig"),Fot.forEach(t),Roo=r(p7e," (TrOCR model)"),p7e.forEach(t),Poo=i(L),Eg=n(L,"LI",{});var _7e=s(Eg);vne=n(_7e,"STRONG",{});var Tot=s(vne);Boo=r(Tot,"unispeech"),Tot.forEach(t),Ioo=r(_7e," \u2014 "),oP=n(_7e,"A",{href:!0});var Mot=s(oP);Noo=r(Mot,"UniSpeechConfig"),Mot.forEach(t),qoo=r(_7e," (UniSpeech model)"),_7e.forEach(t),joo=i(L),Cg=n(L,"LI",{});var b7e=s(Cg);Fne=n(b7e,"STRONG",{});var Eot=s(Fne);Doo=r(Eot,"unispeech-sat"),Eot.forEach(t),Goo=r(b7e," \u2014 "),rP=n(b7e,"A",{href:!0});var Cot=s(rP);Ooo=r(Cot,"UniSpeechSatConfig"),Cot.forEach(t),Voo=r(b7e," (UniSpeechSat model)"),b7e.forEach(t),Xoo=i(L),wg=n(L,"LI",{});var v7e=s(wg);Tne=n(v7e,"STRONG",{});var wot=s(Tne);zoo=r(wot,"van"),wot.forEach(t),Qoo=r(v7e," \u2014 "),tP=n(v7e,"A",{href:!0});var Aot=s(tP);Woo=r(Aot,"VanConfig"),Aot.forEach(t),Hoo=r(v7e," (VAN model)"),v7e.forEach(t),Uoo=i(L),Ag=n(L,"LI",{});var F7e=s(Ag);Mne=n(F7e,"STRONG",{});var Lot=s(Mne);Joo=r(Lot,"vilt"),Lot.forEach(t),Yoo=r(F7e," \u2014 "),aP=n(F7e,"A",{href:!0});var yot=s(aP);Koo=r(yot,"ViltConfig"),yot.forEach(t),Zoo=r(F7e," (ViLT model)"),F7e.forEach(t),ero=i(L),Lg=n(L,"LI",{});var T7e=s(Lg);Ene=n(T7e,"STRONG",{});var xot=s(Ene);oro=r(xot,"vision-encoder-decoder"),xot.forEach(t),rro=r(T7e," \u2014 "),nP=n(T7e,"A",{href:!0});var $ot=s(nP);tro=r($ot,"VisionEncoderDecoderConfig"),$ot.forEach(t),aro=r(T7e," (Vision Encoder decoder model)"),T7e.forEach(t),nro=i(L),yg=n(L,"LI",{});var M7e=s(yg);Cne=n(M7e,"STRONG",{});var kot=s(Cne);sro=r(kot,"vision-text-dual-encoder"),kot.forEach(t),lro=r(M7e," \u2014 "),sP=n(M7e,"A",{href:!0});var Sot=s(sP);iro=r(Sot,"VisionTextDualEncoderConfig"),Sot.forEach(t),dro=r(M7e," (VisionTextDualEncoder model)"),M7e.forEach(t),cro=i(L),xg=n(L,"LI",{});var E7e=s(xg);wne=n(E7e,"STRONG",{});var Rot=s(wne);mro=r(Rot,"visual_bert"),Rot.forEach(t),fro=r(E7e," \u2014 "),lP=n(E7e,"A",{href:!0});var Pot=s(lP);gro=r(Pot,"VisualBertConfig"),Pot.forEach(t),hro=r(E7e," (VisualBERT model)"),E7e.forEach(t),uro=i(L),$g=n(L,"LI",{});var C7e=s($g);Ane=n(C7e,"STRONG",{});var Bot=s(Ane);pro=r(Bot,"vit"),Bot.forEach(t),_ro=r(C7e," \u2014 "),iP=n(C7e,"A",{href:!0});var Iot=s(iP);bro=r(Iot,"ViTConfig"),Iot.forEach(t),vro=r(C7e," (ViT model)"),C7e.forEach(t),Fro=i(L),kg=n(L,"LI",{});var w7e=s(kg);Lne=n(w7e,"STRONG",{});var Not=s(Lne);Tro=r(Not,"vit_mae"),Not.forEach(t),Mro=r(w7e," \u2014 "),dP=n(w7e,"A",{href:!0});var qot=s(dP);Ero=r(qot,"ViTMAEConfig"),qot.forEach(t),Cro=r(w7e," (ViTMAE model)"),w7e.forEach(t),wro=i(L),Sg=n(L,"LI",{});var A7e=s(Sg);yne=n(A7e,"STRONG",{});var jot=s(yne);Aro=r(jot,"wav2vec2"),jot.forEach(t),Lro=r(A7e," \u2014 "),cP=n(A7e,"A",{href:!0});var Dot=s(cP);yro=r(Dot,"Wav2Vec2Config"),Dot.forEach(t),xro=r(A7e," (Wav2Vec2 model)"),A7e.forEach(t),$ro=i(L),Rg=n(L,"LI",{});var L7e=s(Rg);xne=n(L7e,"STRONG",{});var Got=s(xne);kro=r(Got,"wav2vec2-conformer"),Got.forEach(t),Sro=r(L7e," \u2014 "),mP=n(L7e,"A",{href:!0});var Oot=s(mP);Rro=r(Oot,"Wav2Vec2ConformerConfig"),Oot.forEach(t),Pro=r(L7e," (Wav2Vec2-Conformer model)"),L7e.forEach(t),Bro=i(L),Pg=n(L,"LI",{});var y7e=s(Pg);$ne=n(y7e,"STRONG",{});var Vot=s($ne);Iro=r(Vot,"wavlm"),Vot.forEach(t),Nro=r(y7e," \u2014 "),fP=n(y7e,"A",{href:!0});var Xot=s(fP);qro=r(Xot,"WavLMConfig"),Xot.forEach(t),jro=r(y7e," (WavLM model)"),y7e.forEach(t),Dro=i(L),Bg=n(L,"LI",{});var x7e=s(Bg);kne=n(x7e,"STRONG",{});var zot=s(kne);Gro=r(zot,"xglm"),zot.forEach(t),Oro=r(x7e," \u2014 "),gP=n(x7e,"A",{href:!0});var Qot=s(gP);Vro=r(Qot,"XGLMConfig"),Qot.forEach(t),Xro=r(x7e," (XGLM model)"),x7e.forEach(t),zro=i(L),Ig=n(L,"LI",{});var $7e=s(Ig);Sne=n($7e,"STRONG",{});var Wot=s(Sne);Qro=r(Wot,"xlm"),Wot.forEach(t),Wro=r($7e," \u2014 "),hP=n($7e,"A",{href:!0});var Hot=s(hP);Hro=r(Hot,"XLMConfig"),Hot.forEach(t),Uro=r($7e," (XLM model)"),$7e.forEach(t),Jro=i(L),Ng=n(L,"LI",{});var k7e=s(Ng);Rne=n(k7e,"STRONG",{});var Uot=s(Rne);Yro=r(Uot,"xlm-prophetnet"),Uot.forEach(t),Kro=r(k7e," \u2014 "),uP=n(k7e,"A",{href:!0});var Jot=s(uP);Zro=r(Jot,"XLMProphetNetConfig"),Jot.forEach(t),eto=r(k7e," (XLM-ProphetNet model)"),k7e.forEach(t),oto=i(L),qg=n(L,"LI",{});var S7e=s(qg);Pne=n(S7e,"STRONG",{});var Yot=s(Pne);rto=r(Yot,"xlm-roberta"),Yot.forEach(t),tto=r(S7e," \u2014 "),pP=n(S7e,"A",{href:!0});var Kot=s(pP);ato=r(Kot,"XLMRobertaConfig"),Kot.forEach(t),nto=r(S7e," (XLM-RoBERTa model)"),S7e.forEach(t),sto=i(L),jg=n(L,"LI",{});var R7e=s(jg);Bne=n(R7e,"STRONG",{});var Zot=s(Bne);lto=r(Zot,"xlm-roberta-xl"),Zot.forEach(t),ito=r(R7e," \u2014 "),_P=n(R7e,"A",{href:!0});var ert=s(_P);dto=r(ert,"XLMRobertaXLConfig"),ert.forEach(t),cto=r(R7e," (XLM-RoBERTa-XL model)"),R7e.forEach(t),mto=i(L),Dg=n(L,"LI",{});var P7e=s(Dg);Ine=n(P7e,"STRONG",{});var ort=s(Ine);fto=r(ort,"xlnet"),ort.forEach(t),gto=r(P7e," \u2014 "),bP=n(P7e,"A",{href:!0});var rrt=s(bP);hto=r(rrt,"XLNetConfig"),rrt.forEach(t),uto=r(P7e," (XLNet model)"),P7e.forEach(t),pto=i(L),Gg=n(L,"LI",{});var B7e=s(Gg);Nne=n(B7e,"STRONG",{});var trt=s(Nne);_to=r(trt,"yolos"),trt.forEach(t),bto=r(B7e," \u2014 "),vP=n(B7e,"A",{href:!0});var art=s(vP);vto=r(art,"YolosConfig"),art.forEach(t),Fto=r(B7e," (YOLOS model)"),B7e.forEach(t),Tto=i(L),Og=n(L,"LI",{});var I7e=s(Og);qne=n(I7e,"STRONG",{});var nrt=s(qne);Mto=r(nrt,"yoso"),nrt.forEach(t),Eto=r(I7e," \u2014 "),FP=n(I7e,"A",{href:!0});var srt=s(FP);Cto=r(srt,"YosoConfig"),srt.forEach(t),wto=r(I7e," (YOSO model)"),I7e.forEach(t),L.forEach(t),Ato=i(tt),T(Vg.$$.fragment,tt),tt.forEach(t),Lto=i(rt),Xg=n(rt,"DIV",{class:!0});var iXe=s(Xg);T(D7.$$.fragment,iXe),yto=i(iXe),jne=n(iXe,"P",{});var lrt=s(jne);xto=r(lrt,"Register a new configuration for this class."),lrt.forEach(t),iXe.forEach(t),rt.forEach(t),dOe=i(m),Si=n(m,"H2",{class:!0});var dXe=s(Si);zg=n(dXe,"A",{id:!0,class:!0,href:!0});var irt=s(zg);Dne=n(irt,"SPAN",{});var drt=s(Dne);T(G7.$$.fragment,drt),drt.forEach(t),irt.forEach(t),$to=i(dXe),Gne=n(dXe,"SPAN",{});var crt=s(Gne);kto=r(crt,"AutoTokenizer"),crt.forEach(t),dXe.forEach(t),cOe=i(m),Ao=n(m,"DIV",{class:!0});var Hs=s(Ao);T(O7.$$.fragment,Hs),Sto=i(Hs),V7=n(Hs,"P",{});var cXe=s(V7);Rto=r(cXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TP=n(cXe,"A",{href:!0});var mrt=s(TP);Pto=r(mrt,"AutoTokenizer.from_pretrained()"),mrt.forEach(t),Bto=r(cXe," class method."),cXe.forEach(t),Ito=i(Hs),X7=n(Hs,"P",{});var mXe=s(X7);Nto=r(mXe,"This class cannot be instantiated directly using "),One=n(mXe,"CODE",{});var frt=s(One);qto=r(frt,"__init__()"),frt.forEach(t),jto=r(mXe," (throws an error)."),mXe.forEach(t),Dto=i(Hs),Lr=n(Hs,"DIV",{class:!0});var Us=s(Lr);T(z7.$$.fragment,Us),Gto=i(Us),Vne=n(Us,"P",{});var grt=s(Vne);Oto=r(grt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),grt.forEach(t),Vto=i(Us),ka=n(Us,"P",{});var R6=s(ka);Xto=r(R6,"The tokenizer class to instantiate is selected based on the "),Xne=n(R6,"CODE",{});var hrt=s(Xne);zto=r(hrt,"model_type"),hrt.forEach(t),Qto=r(R6,` property of the config object (either
passed as an argument or loaded from `),zne=n(R6,"CODE",{});var urt=s(zne);Wto=r(urt,"pretrained_model_name_or_path"),urt.forEach(t),Hto=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=n(R6,"CODE",{});var prt=s(Qne);Uto=r(prt,"pretrained_model_name_or_path"),prt.forEach(t),Jto=r(R6,":"),R6.forEach(t),Yto=i(Us),k=n(Us,"UL",{});var S=s(k);qn=n(S,"LI",{});var Y$=s(qn);Wne=n(Y$,"STRONG",{});var _rt=s(Wne);Kto=r(_rt,"albert"),_rt.forEach(t),Zto=r(Y$," \u2014 "),MP=n(Y$,"A",{href:!0});var brt=s(MP);eao=r(brt,"AlbertTokenizer"),brt.forEach(t),oao=r(Y$," or "),EP=n(Y$,"A",{href:!0});var vrt=s(EP);rao=r(vrt,"AlbertTokenizerFast"),vrt.forEach(t),tao=r(Y$," (ALBERT model)"),Y$.forEach(t),aao=i(S),jn=n(S,"LI",{});var K$=s(jn);Hne=n(K$,"STRONG",{});var Frt=s(Hne);nao=r(Frt,"bart"),Frt.forEach(t),sao=r(K$," \u2014 "),CP=n(K$,"A",{href:!0});var Trt=s(CP);lao=r(Trt,"BartTokenizer"),Trt.forEach(t),iao=r(K$," or "),wP=n(K$,"A",{href:!0});var Mrt=s(wP);dao=r(Mrt,"BartTokenizerFast"),Mrt.forEach(t),cao=r(K$," (BART model)"),K$.forEach(t),mao=i(S),Dn=n(S,"LI",{});var Z$=s(Dn);Une=n(Z$,"STRONG",{});var Ert=s(Une);fao=r(Ert,"barthez"),Ert.forEach(t),gao=r(Z$," \u2014 "),AP=n(Z$,"A",{href:!0});var Crt=s(AP);hao=r(Crt,"BarthezTokenizer"),Crt.forEach(t),uao=r(Z$," or "),LP=n(Z$,"A",{href:!0});var wrt=s(LP);pao=r(wrt,"BarthezTokenizerFast"),wrt.forEach(t),_ao=r(Z$," (BARThez model)"),Z$.forEach(t),bao=i(S),Qg=n(S,"LI",{});var N7e=s(Qg);Jne=n(N7e,"STRONG",{});var Art=s(Jne);vao=r(Art,"bartpho"),Art.forEach(t),Fao=r(N7e," \u2014 "),yP=n(N7e,"A",{href:!0});var Lrt=s(yP);Tao=r(Lrt,"BartphoTokenizer"),Lrt.forEach(t),Mao=r(N7e," (BARTpho model)"),N7e.forEach(t),Eao=i(S),Gn=n(S,"LI",{});var ek=s(Gn);Yne=n(ek,"STRONG",{});var yrt=s(Yne);Cao=r(yrt,"bert"),yrt.forEach(t),wao=r(ek," \u2014 "),xP=n(ek,"A",{href:!0});var xrt=s(xP);Aao=r(xrt,"BertTokenizer"),xrt.forEach(t),Lao=r(ek," or "),$P=n(ek,"A",{href:!0});var $rt=s($P);yao=r($rt,"BertTokenizerFast"),$rt.forEach(t),xao=r(ek," (BERT model)"),ek.forEach(t),$ao=i(S),Wg=n(S,"LI",{});var q7e=s(Wg);Kne=n(q7e,"STRONG",{});var krt=s(Kne);kao=r(krt,"bert-generation"),krt.forEach(t),Sao=r(q7e," \u2014 "),kP=n(q7e,"A",{href:!0});var Srt=s(kP);Rao=r(Srt,"BertGenerationTokenizer"),Srt.forEach(t),Pao=r(q7e," (Bert Generation model)"),q7e.forEach(t),Bao=i(S),Hg=n(S,"LI",{});var j7e=s(Hg);Zne=n(j7e,"STRONG",{});var Rrt=s(Zne);Iao=r(Rrt,"bert-japanese"),Rrt.forEach(t),Nao=r(j7e," \u2014 "),SP=n(j7e,"A",{href:!0});var Prt=s(SP);qao=r(Prt,"BertJapaneseTokenizer"),Prt.forEach(t),jao=r(j7e," (BertJapanese model)"),j7e.forEach(t),Dao=i(S),Ug=n(S,"LI",{});var D7e=s(Ug);ese=n(D7e,"STRONG",{});var Brt=s(ese);Gao=r(Brt,"bertweet"),Brt.forEach(t),Oao=r(D7e," \u2014 "),RP=n(D7e,"A",{href:!0});var Irt=s(RP);Vao=r(Irt,"BertweetTokenizer"),Irt.forEach(t),Xao=r(D7e," (BERTweet model)"),D7e.forEach(t),zao=i(S),On=n(S,"LI",{});var ok=s(On);ose=n(ok,"STRONG",{});var Nrt=s(ose);Qao=r(Nrt,"big_bird"),Nrt.forEach(t),Wao=r(ok," \u2014 "),PP=n(ok,"A",{href:!0});var qrt=s(PP);Hao=r(qrt,"BigBirdTokenizer"),qrt.forEach(t),Uao=r(ok," or "),BP=n(ok,"A",{href:!0});var jrt=s(BP);Jao=r(jrt,"BigBirdTokenizerFast"),jrt.forEach(t),Yao=r(ok," (BigBird model)"),ok.forEach(t),Kao=i(S),Vn=n(S,"LI",{});var rk=s(Vn);rse=n(rk,"STRONG",{});var Drt=s(rse);Zao=r(Drt,"bigbird_pegasus"),Drt.forEach(t),eno=r(rk," \u2014 "),IP=n(rk,"A",{href:!0});var Grt=s(IP);ono=r(Grt,"PegasusTokenizer"),Grt.forEach(t),rno=r(rk," or "),NP=n(rk,"A",{href:!0});var Ort=s(NP);tno=r(Ort,"PegasusTokenizerFast"),Ort.forEach(t),ano=r(rk," (BigBird-Pegasus model)"),rk.forEach(t),nno=i(S),Xn=n(S,"LI",{});var tk=s(Xn);tse=n(tk,"STRONG",{});var Vrt=s(tse);sno=r(Vrt,"blenderbot"),Vrt.forEach(t),lno=r(tk," \u2014 "),qP=n(tk,"A",{href:!0});var Xrt=s(qP);ino=r(Xrt,"BlenderbotTokenizer"),Xrt.forEach(t),dno=r(tk," or "),jP=n(tk,"A",{href:!0});var zrt=s(jP);cno=r(zrt,"BlenderbotTokenizerFast"),zrt.forEach(t),mno=r(tk," (Blenderbot model)"),tk.forEach(t),fno=i(S),Jg=n(S,"LI",{});var G7e=s(Jg);ase=n(G7e,"STRONG",{});var Qrt=s(ase);gno=r(Qrt,"blenderbot-small"),Qrt.forEach(t),hno=r(G7e," \u2014 "),DP=n(G7e,"A",{href:!0});var Wrt=s(DP);uno=r(Wrt,"BlenderbotSmallTokenizer"),Wrt.forEach(t),pno=r(G7e," (BlenderbotSmall model)"),G7e.forEach(t),_no=i(S),Yg=n(S,"LI",{});var O7e=s(Yg);nse=n(O7e,"STRONG",{});var Hrt=s(nse);bno=r(Hrt,"bloom"),Hrt.forEach(t),vno=r(O7e," \u2014 "),GP=n(O7e,"A",{href:!0});var Urt=s(GP);Fno=r(Urt,"BloomTokenizerFast"),Urt.forEach(t),Tno=r(O7e," (BLOOM model)"),O7e.forEach(t),Mno=i(S),Kg=n(S,"LI",{});var V7e=s(Kg);sse=n(V7e,"STRONG",{});var Jrt=s(sse);Eno=r(Jrt,"byt5"),Jrt.forEach(t),Cno=r(V7e," \u2014 "),OP=n(V7e,"A",{href:!0});var Yrt=s(OP);wno=r(Yrt,"ByT5Tokenizer"),Yrt.forEach(t),Ano=r(V7e," (ByT5 model)"),V7e.forEach(t),Lno=i(S),zn=n(S,"LI",{});var ak=s(zn);lse=n(ak,"STRONG",{});var Krt=s(lse);yno=r(Krt,"camembert"),Krt.forEach(t),xno=r(ak," \u2014 "),VP=n(ak,"A",{href:!0});var Zrt=s(VP);$no=r(Zrt,"CamembertTokenizer"),Zrt.forEach(t),kno=r(ak," or "),XP=n(ak,"A",{href:!0});var ett=s(XP);Sno=r(ett,"CamembertTokenizerFast"),ett.forEach(t),Rno=r(ak," (CamemBERT model)"),ak.forEach(t),Pno=i(S),Zg=n(S,"LI",{});var X7e=s(Zg);ise=n(X7e,"STRONG",{});var ott=s(ise);Bno=r(ott,"canine"),ott.forEach(t),Ino=r(X7e," \u2014 "),zP=n(X7e,"A",{href:!0});var rtt=s(zP);Nno=r(rtt,"CanineTokenizer"),rtt.forEach(t),qno=r(X7e," (CANINE model)"),X7e.forEach(t),jno=i(S),Qn=n(S,"LI",{});var nk=s(Qn);dse=n(nk,"STRONG",{});var ttt=s(dse);Dno=r(ttt,"clip"),ttt.forEach(t),Gno=r(nk," \u2014 "),QP=n(nk,"A",{href:!0});var att=s(QP);Ono=r(att,"CLIPTokenizer"),att.forEach(t),Vno=r(nk," or "),WP=n(nk,"A",{href:!0});var ntt=s(WP);Xno=r(ntt,"CLIPTokenizerFast"),ntt.forEach(t),zno=r(nk," (CLIP model)"),nk.forEach(t),Qno=i(S),Wn=n(S,"LI",{});var sk=s(Wn);cse=n(sk,"STRONG",{});var stt=s(cse);Wno=r(stt,"codegen"),stt.forEach(t),Hno=r(sk," \u2014 "),HP=n(sk,"A",{href:!0});var ltt=s(HP);Uno=r(ltt,"CodeGenTokenizer"),ltt.forEach(t),Jno=r(sk," or "),UP=n(sk,"A",{href:!0});var itt=s(UP);Yno=r(itt,"CodeGenTokenizerFast"),itt.forEach(t),Kno=r(sk," (CodeGen model)"),sk.forEach(t),Zno=i(S),Hn=n(S,"LI",{});var lk=s(Hn);mse=n(lk,"STRONG",{});var dtt=s(mse);eso=r(dtt,"convbert"),dtt.forEach(t),oso=r(lk," \u2014 "),JP=n(lk,"A",{href:!0});var ctt=s(JP);rso=r(ctt,"ConvBertTokenizer"),ctt.forEach(t),tso=r(lk," or "),YP=n(lk,"A",{href:!0});var mtt=s(YP);aso=r(mtt,"ConvBertTokenizerFast"),mtt.forEach(t),nso=r(lk," (ConvBERT model)"),lk.forEach(t),sso=i(S),Un=n(S,"LI",{});var ik=s(Un);fse=n(ik,"STRONG",{});var ftt=s(fse);lso=r(ftt,"cpm"),ftt.forEach(t),iso=r(ik," \u2014 "),KP=n(ik,"A",{href:!0});var gtt=s(KP);dso=r(gtt,"CpmTokenizer"),gtt.forEach(t),cso=r(ik," or "),ZP=n(ik,"A",{href:!0});var htt=s(ZP);mso=r(htt,"CpmTokenizerFast"),htt.forEach(t),fso=r(ik," (CPM model)"),ik.forEach(t),gso=i(S),eh=n(S,"LI",{});var z7e=s(eh);gse=n(z7e,"STRONG",{});var utt=s(gse);hso=r(utt,"ctrl"),utt.forEach(t),uso=r(z7e," \u2014 "),eB=n(z7e,"A",{href:!0});var ptt=s(eB);pso=r(ptt,"CTRLTokenizer"),ptt.forEach(t),_so=r(z7e," (CTRL model)"),z7e.forEach(t),bso=i(S),Jn=n(S,"LI",{});var dk=s(Jn);hse=n(dk,"STRONG",{});var _tt=s(hse);vso=r(_tt,"data2vec-text"),_tt.forEach(t),Fso=r(dk," \u2014 "),oB=n(dk,"A",{href:!0});var btt=s(oB);Tso=r(btt,"RobertaTokenizer"),btt.forEach(t),Mso=r(dk," or "),rB=n(dk,"A",{href:!0});var vtt=s(rB);Eso=r(vtt,"RobertaTokenizerFast"),vtt.forEach(t),Cso=r(dk," (Data2VecText model)"),dk.forEach(t),wso=i(S),Yn=n(S,"LI",{});var ck=s(Yn);use=n(ck,"STRONG",{});var Ftt=s(use);Aso=r(Ftt,"deberta"),Ftt.forEach(t),Lso=r(ck," \u2014 "),tB=n(ck,"A",{href:!0});var Ttt=s(tB);yso=r(Ttt,"DebertaTokenizer"),Ttt.forEach(t),xso=r(ck," or "),aB=n(ck,"A",{href:!0});var Mtt=s(aB);$so=r(Mtt,"DebertaTokenizerFast"),Mtt.forEach(t),kso=r(ck," (DeBERTa model)"),ck.forEach(t),Sso=i(S),Kn=n(S,"LI",{});var mk=s(Kn);pse=n(mk,"STRONG",{});var Ett=s(pse);Rso=r(Ett,"deberta-v2"),Ett.forEach(t),Pso=r(mk," \u2014 "),nB=n(mk,"A",{href:!0});var Ctt=s(nB);Bso=r(Ctt,"DebertaV2Tokenizer"),Ctt.forEach(t),Iso=r(mk," or "),sB=n(mk,"A",{href:!0});var wtt=s(sB);Nso=r(wtt,"DebertaV2TokenizerFast"),wtt.forEach(t),qso=r(mk," (DeBERTa-v2 model)"),mk.forEach(t),jso=i(S),Zn=n(S,"LI",{});var fk=s(Zn);_se=n(fk,"STRONG",{});var Att=s(_se);Dso=r(Att,"distilbert"),Att.forEach(t),Gso=r(fk," \u2014 "),lB=n(fk,"A",{href:!0});var Ltt=s(lB);Oso=r(Ltt,"DistilBertTokenizer"),Ltt.forEach(t),Vso=r(fk," or "),iB=n(fk,"A",{href:!0});var ytt=s(iB);Xso=r(ytt,"DistilBertTokenizerFast"),ytt.forEach(t),zso=r(fk," (DistilBERT model)"),fk.forEach(t),Qso=i(S),es=n(S,"LI",{});var gk=s(es);bse=n(gk,"STRONG",{});var xtt=s(bse);Wso=r(xtt,"dpr"),xtt.forEach(t),Hso=r(gk," \u2014 "),dB=n(gk,"A",{href:!0});var $tt=s(dB);Uso=r($tt,"DPRQuestionEncoderTokenizer"),$tt.forEach(t),Jso=r(gk," or "),cB=n(gk,"A",{href:!0});var ktt=s(cB);Yso=r(ktt,"DPRQuestionEncoderTokenizerFast"),ktt.forEach(t),Kso=r(gk," (DPR model)"),gk.forEach(t),Zso=i(S),os=n(S,"LI",{});var hk=s(os);vse=n(hk,"STRONG",{});var Stt=s(vse);elo=r(Stt,"electra"),Stt.forEach(t),olo=r(hk," \u2014 "),mB=n(hk,"A",{href:!0});var Rtt=s(mB);rlo=r(Rtt,"ElectraTokenizer"),Rtt.forEach(t),tlo=r(hk," or "),fB=n(hk,"A",{href:!0});var Ptt=s(fB);alo=r(Ptt,"ElectraTokenizerFast"),Ptt.forEach(t),nlo=r(hk," (ELECTRA model)"),hk.forEach(t),slo=i(S),oh=n(S,"LI",{});var Q7e=s(oh);Fse=n(Q7e,"STRONG",{});var Btt=s(Fse);llo=r(Btt,"flaubert"),Btt.forEach(t),ilo=r(Q7e," \u2014 "),gB=n(Q7e,"A",{href:!0});var Itt=s(gB);dlo=r(Itt,"FlaubertTokenizer"),Itt.forEach(t),clo=r(Q7e," (FlauBERT model)"),Q7e.forEach(t),mlo=i(S),rs=n(S,"LI",{});var uk=s(rs);Tse=n(uk,"STRONG",{});var Ntt=s(Tse);flo=r(Ntt,"fnet"),Ntt.forEach(t),glo=r(uk," \u2014 "),hB=n(uk,"A",{href:!0});var qtt=s(hB);hlo=r(qtt,"FNetTokenizer"),qtt.forEach(t),ulo=r(uk," or "),uB=n(uk,"A",{href:!0});var jtt=s(uB);plo=r(jtt,"FNetTokenizerFast"),jtt.forEach(t),_lo=r(uk," (FNet model)"),uk.forEach(t),blo=i(S),rh=n(S,"LI",{});var W7e=s(rh);Mse=n(W7e,"STRONG",{});var Dtt=s(Mse);vlo=r(Dtt,"fsmt"),Dtt.forEach(t),Flo=r(W7e," \u2014 "),pB=n(W7e,"A",{href:!0});var Gtt=s(pB);Tlo=r(Gtt,"FSMTTokenizer"),Gtt.forEach(t),Mlo=r(W7e," (FairSeq Machine-Translation model)"),W7e.forEach(t),Elo=i(S),ts=n(S,"LI",{});var pk=s(ts);Ese=n(pk,"STRONG",{});var Ott=s(Ese);Clo=r(Ott,"funnel"),Ott.forEach(t),wlo=r(pk," \u2014 "),_B=n(pk,"A",{href:!0});var Vtt=s(_B);Alo=r(Vtt,"FunnelTokenizer"),Vtt.forEach(t),Llo=r(pk," or "),bB=n(pk,"A",{href:!0});var Xtt=s(bB);ylo=r(Xtt,"FunnelTokenizerFast"),Xtt.forEach(t),xlo=r(pk," (Funnel Transformer model)"),pk.forEach(t),$lo=i(S),as=n(S,"LI",{});var _k=s(as);Cse=n(_k,"STRONG",{});var ztt=s(Cse);klo=r(ztt,"gpt2"),ztt.forEach(t),Slo=r(_k," \u2014 "),vB=n(_k,"A",{href:!0});var Qtt=s(vB);Rlo=r(Qtt,"GPT2Tokenizer"),Qtt.forEach(t),Plo=r(_k," or "),FB=n(_k,"A",{href:!0});var Wtt=s(FB);Blo=r(Wtt,"GPT2TokenizerFast"),Wtt.forEach(t),Ilo=r(_k," (OpenAI GPT-2 model)"),_k.forEach(t),Nlo=i(S),ns=n(S,"LI",{});var bk=s(ns);wse=n(bk,"STRONG",{});var Htt=s(wse);qlo=r(Htt,"gpt_neo"),Htt.forEach(t),jlo=r(bk," \u2014 "),TB=n(bk,"A",{href:!0});var Utt=s(TB);Dlo=r(Utt,"GPT2Tokenizer"),Utt.forEach(t),Glo=r(bk," or "),MB=n(bk,"A",{href:!0});var Jtt=s(MB);Olo=r(Jtt,"GPT2TokenizerFast"),Jtt.forEach(t),Vlo=r(bk," (GPT Neo model)"),bk.forEach(t),Xlo=i(S),th=n(S,"LI",{});var H7e=s(th);Ase=n(H7e,"STRONG",{});var Ytt=s(Ase);zlo=r(Ytt,"gpt_neox"),Ytt.forEach(t),Qlo=r(H7e," \u2014 "),EB=n(H7e,"A",{href:!0});var Ktt=s(EB);Wlo=r(Ktt,"GPTNeoXTokenizerFast"),Ktt.forEach(t),Hlo=r(H7e," (GPT NeoX model)"),H7e.forEach(t),Ulo=i(S),ss=n(S,"LI",{});var vk=s(ss);Lse=n(vk,"STRONG",{});var Ztt=s(Lse);Jlo=r(Ztt,"gptj"),Ztt.forEach(t),Ylo=r(vk," \u2014 "),CB=n(vk,"A",{href:!0});var eat=s(CB);Klo=r(eat,"GPT2Tokenizer"),eat.forEach(t),Zlo=r(vk," or "),wB=n(vk,"A",{href:!0});var oat=s(wB);eio=r(oat,"GPT2TokenizerFast"),oat.forEach(t),oio=r(vk," (GPT-J model)"),vk.forEach(t),rio=i(S),ls=n(S,"LI",{});var Fk=s(ls);yse=n(Fk,"STRONG",{});var rat=s(yse);tio=r(rat,"herbert"),rat.forEach(t),aio=r(Fk," \u2014 "),AB=n(Fk,"A",{href:!0});var tat=s(AB);nio=r(tat,"HerbertTokenizer"),tat.forEach(t),sio=r(Fk," or "),LB=n(Fk,"A",{href:!0});var aat=s(LB);lio=r(aat,"HerbertTokenizerFast"),aat.forEach(t),iio=r(Fk," (HerBERT model)"),Fk.forEach(t),dio=i(S),ah=n(S,"LI",{});var U7e=s(ah);xse=n(U7e,"STRONG",{});var nat=s(xse);cio=r(nat,"hubert"),nat.forEach(t),mio=r(U7e," \u2014 "),yB=n(U7e,"A",{href:!0});var sat=s(yB);fio=r(sat,"Wav2Vec2CTCTokenizer"),sat.forEach(t),gio=r(U7e," (Hubert model)"),U7e.forEach(t),hio=i(S),is=n(S,"LI",{});var Tk=s(is);$se=n(Tk,"STRONG",{});var lat=s($se);uio=r(lat,"ibert"),lat.forEach(t),pio=r(Tk," \u2014 "),xB=n(Tk,"A",{href:!0});var iat=s(xB);_io=r(iat,"RobertaTokenizer"),iat.forEach(t),bio=r(Tk," or "),$B=n(Tk,"A",{href:!0});var dat=s($B);vio=r(dat,"RobertaTokenizerFast"),dat.forEach(t),Fio=r(Tk," (I-BERT model)"),Tk.forEach(t),Tio=i(S),ds=n(S,"LI",{});var Mk=s(ds);kse=n(Mk,"STRONG",{});var cat=s(kse);Mio=r(cat,"layoutlm"),cat.forEach(t),Eio=r(Mk," \u2014 "),kB=n(Mk,"A",{href:!0});var mat=s(kB);Cio=r(mat,"LayoutLMTokenizer"),mat.forEach(t),wio=r(Mk," or "),SB=n(Mk,"A",{href:!0});var fat=s(SB);Aio=r(fat,"LayoutLMTokenizerFast"),fat.forEach(t),Lio=r(Mk," (LayoutLM model)"),Mk.forEach(t),yio=i(S),cs=n(S,"LI",{});var Ek=s(cs);Sse=n(Ek,"STRONG",{});var gat=s(Sse);xio=r(gat,"layoutlmv2"),gat.forEach(t),$io=r(Ek," \u2014 "),RB=n(Ek,"A",{href:!0});var hat=s(RB);kio=r(hat,"LayoutLMv2Tokenizer"),hat.forEach(t),Sio=r(Ek," or "),PB=n(Ek,"A",{href:!0});var uat=s(PB);Rio=r(uat,"LayoutLMv2TokenizerFast"),uat.forEach(t),Pio=r(Ek," (LayoutLMv2 model)"),Ek.forEach(t),Bio=i(S),ms=n(S,"LI",{});var Ck=s(ms);Rse=n(Ck,"STRONG",{});var pat=s(Rse);Iio=r(pat,"layoutlmv3"),pat.forEach(t),Nio=r(Ck," \u2014 "),BB=n(Ck,"A",{href:!0});var _at=s(BB);qio=r(_at,"LayoutLMv3Tokenizer"),_at.forEach(t),jio=r(Ck," or "),IB=n(Ck,"A",{href:!0});var bat=s(IB);Dio=r(bat,"LayoutLMv3TokenizerFast"),bat.forEach(t),Gio=r(Ck," (LayoutLMv3 model)"),Ck.forEach(t),Oio=i(S),fs=n(S,"LI",{});var wk=s(fs);Pse=n(wk,"STRONG",{});var vat=s(Pse);Vio=r(vat,"layoutxlm"),vat.forEach(t),Xio=r(wk," \u2014 "),NB=n(wk,"A",{href:!0});var Fat=s(NB);zio=r(Fat,"LayoutXLMTokenizer"),Fat.forEach(t),Qio=r(wk," or "),qB=n(wk,"A",{href:!0});var Tat=s(qB);Wio=r(Tat,"LayoutXLMTokenizerFast"),Tat.forEach(t),Hio=r(wk," (LayoutXLM model)"),wk.forEach(t),Uio=i(S),gs=n(S,"LI",{});var Ak=s(gs);Bse=n(Ak,"STRONG",{});var Mat=s(Bse);Jio=r(Mat,"led"),Mat.forEach(t),Yio=r(Ak," \u2014 "),jB=n(Ak,"A",{href:!0});var Eat=s(jB);Kio=r(Eat,"LEDTokenizer"),Eat.forEach(t),Zio=r(Ak," or "),DB=n(Ak,"A",{href:!0});var Cat=s(DB);edo=r(Cat,"LEDTokenizerFast"),Cat.forEach(t),odo=r(Ak," (LED model)"),Ak.forEach(t),rdo=i(S),hs=n(S,"LI",{});var Lk=s(hs);Ise=n(Lk,"STRONG",{});var wat=s(Ise);tdo=r(wat,"longformer"),wat.forEach(t),ado=r(Lk," \u2014 "),GB=n(Lk,"A",{href:!0});var Aat=s(GB);ndo=r(Aat,"LongformerTokenizer"),Aat.forEach(t),sdo=r(Lk," or "),OB=n(Lk,"A",{href:!0});var Lat=s(OB);ldo=r(Lat,"LongformerTokenizerFast"),Lat.forEach(t),ido=r(Lk," (Longformer model)"),Lk.forEach(t),ddo=i(S),us=n(S,"LI",{});var yk=s(us);Nse=n(yk,"STRONG",{});var yat=s(Nse);cdo=r(yat,"longt5"),yat.forEach(t),mdo=r(yk," \u2014 "),VB=n(yk,"A",{href:!0});var xat=s(VB);fdo=r(xat,"T5Tokenizer"),xat.forEach(t),gdo=r(yk," or "),XB=n(yk,"A",{href:!0});var $at=s(XB);hdo=r($at,"T5TokenizerFast"),$at.forEach(t),udo=r(yk," (LongT5 model)"),yk.forEach(t),pdo=i(S),nh=n(S,"LI",{});var J7e=s(nh);qse=n(J7e,"STRONG",{});var kat=s(qse);_do=r(kat,"luke"),kat.forEach(t),bdo=r(J7e," \u2014 "),zB=n(J7e,"A",{href:!0});var Sat=s(zB);vdo=r(Sat,"LukeTokenizer"),Sat.forEach(t),Fdo=r(J7e," (LUKE model)"),J7e.forEach(t),Tdo=i(S),ps=n(S,"LI",{});var xk=s(ps);jse=n(xk,"STRONG",{});var Rat=s(jse);Mdo=r(Rat,"lxmert"),Rat.forEach(t),Edo=r(xk," \u2014 "),QB=n(xk,"A",{href:!0});var Pat=s(QB);Cdo=r(Pat,"LxmertTokenizer"),Pat.forEach(t),wdo=r(xk," or "),WB=n(xk,"A",{href:!0});var Bat=s(WB);Ado=r(Bat,"LxmertTokenizerFast"),Bat.forEach(t),Ldo=r(xk," (LXMERT model)"),xk.forEach(t),ydo=i(S),sh=n(S,"LI",{});var Y7e=s(sh);Dse=n(Y7e,"STRONG",{});var Iat=s(Dse);xdo=r(Iat,"m2m_100"),Iat.forEach(t),$do=r(Y7e," \u2014 "),HB=n(Y7e,"A",{href:!0});var Nat=s(HB);kdo=r(Nat,"M2M100Tokenizer"),Nat.forEach(t),Sdo=r(Y7e," (M2M100 model)"),Y7e.forEach(t),Rdo=i(S),lh=n(S,"LI",{});var K7e=s(lh);Gse=n(K7e,"STRONG",{});var qat=s(Gse);Pdo=r(qat,"marian"),qat.forEach(t),Bdo=r(K7e," \u2014 "),UB=n(K7e,"A",{href:!0});var jat=s(UB);Ido=r(jat,"MarianTokenizer"),jat.forEach(t),Ndo=r(K7e," (Marian model)"),K7e.forEach(t),qdo=i(S),_s=n(S,"LI",{});var $k=s(_s);Ose=n($k,"STRONG",{});var Dat=s(Ose);jdo=r(Dat,"mbart"),Dat.forEach(t),Ddo=r($k," \u2014 "),JB=n($k,"A",{href:!0});var Gat=s(JB);Gdo=r(Gat,"MBartTokenizer"),Gat.forEach(t),Odo=r($k," or "),YB=n($k,"A",{href:!0});var Oat=s(YB);Vdo=r(Oat,"MBartTokenizerFast"),Oat.forEach(t),Xdo=r($k," (mBART model)"),$k.forEach(t),zdo=i(S),bs=n(S,"LI",{});var kk=s(bs);Vse=n(kk,"STRONG",{});var Vat=s(Vse);Qdo=r(Vat,"mbart50"),Vat.forEach(t),Wdo=r(kk," \u2014 "),KB=n(kk,"A",{href:!0});var Xat=s(KB);Hdo=r(Xat,"MBart50Tokenizer"),Xat.forEach(t),Udo=r(kk," or "),ZB=n(kk,"A",{href:!0});var zat=s(ZB);Jdo=r(zat,"MBart50TokenizerFast"),zat.forEach(t),Ydo=r(kk," (mBART-50 model)"),kk.forEach(t),Kdo=i(S),vs=n(S,"LI",{});var Sk=s(vs);Xse=n(Sk,"STRONG",{});var Qat=s(Xse);Zdo=r(Qat,"megatron-bert"),Qat.forEach(t),eco=r(Sk," \u2014 "),eI=n(Sk,"A",{href:!0});var Wat=s(eI);oco=r(Wat,"BertTokenizer"),Wat.forEach(t),rco=r(Sk," or "),oI=n(Sk,"A",{href:!0});var Hat=s(oI);tco=r(Hat,"BertTokenizerFast"),Hat.forEach(t),aco=r(Sk," (Megatron-BERT model)"),Sk.forEach(t),nco=i(S),ih=n(S,"LI",{});var Z7e=s(ih);zse=n(Z7e,"STRONG",{});var Uat=s(zse);sco=r(Uat,"mluke"),Uat.forEach(t),lco=r(Z7e," \u2014 "),rI=n(Z7e,"A",{href:!0});var Jat=s(rI);ico=r(Jat,"MLukeTokenizer"),Jat.forEach(t),dco=r(Z7e," (mLUKE model)"),Z7e.forEach(t),cco=i(S),Fs=n(S,"LI",{});var Rk=s(Fs);Qse=n(Rk,"STRONG",{});var Yat=s(Qse);mco=r(Yat,"mobilebert"),Yat.forEach(t),fco=r(Rk," \u2014 "),tI=n(Rk,"A",{href:!0});var Kat=s(tI);gco=r(Kat,"MobileBertTokenizer"),Kat.forEach(t),hco=r(Rk," or "),aI=n(Rk,"A",{href:!0});var Zat=s(aI);uco=r(Zat,"MobileBertTokenizerFast"),Zat.forEach(t),pco=r(Rk," (MobileBERT model)"),Rk.forEach(t),_co=i(S),Ts=n(S,"LI",{});var Pk=s(Ts);Wse=n(Pk,"STRONG",{});var ent=s(Wse);bco=r(ent,"mpnet"),ent.forEach(t),vco=r(Pk," \u2014 "),nI=n(Pk,"A",{href:!0});var ont=s(nI);Fco=r(ont,"MPNetTokenizer"),ont.forEach(t),Tco=r(Pk," or "),sI=n(Pk,"A",{href:!0});var rnt=s(sI);Mco=r(rnt,"MPNetTokenizerFast"),rnt.forEach(t),Eco=r(Pk," (MPNet model)"),Pk.forEach(t),Cco=i(S),Ms=n(S,"LI",{});var Bk=s(Ms);Hse=n(Bk,"STRONG",{});var tnt=s(Hse);wco=r(tnt,"mt5"),tnt.forEach(t),Aco=r(Bk," \u2014 "),lI=n(Bk,"A",{href:!0});var ant=s(lI);Lco=r(ant,"MT5Tokenizer"),ant.forEach(t),yco=r(Bk," or "),iI=n(Bk,"A",{href:!0});var nnt=s(iI);xco=r(nnt,"MT5TokenizerFast"),nnt.forEach(t),$co=r(Bk," (MT5 model)"),Bk.forEach(t),kco=i(S),Es=n(S,"LI",{});var Ik=s(Es);Use=n(Ik,"STRONG",{});var snt=s(Use);Sco=r(snt,"nezha"),snt.forEach(t),Rco=r(Ik," \u2014 "),dI=n(Ik,"A",{href:!0});var lnt=s(dI);Pco=r(lnt,"BertTokenizer"),lnt.forEach(t),Bco=r(Ik," or "),cI=n(Ik,"A",{href:!0});var int=s(cI);Ico=r(int,"BertTokenizerFast"),int.forEach(t),Nco=r(Ik," (Nezha model)"),Ik.forEach(t),qco=i(S),Cs=n(S,"LI",{});var Nk=s(Cs);Jse=n(Nk,"STRONG",{});var dnt=s(Jse);jco=r(dnt,"nystromformer"),dnt.forEach(t),Dco=r(Nk," \u2014 "),mI=n(Nk,"A",{href:!0});var cnt=s(mI);Gco=r(cnt,"AlbertTokenizer"),cnt.forEach(t),Oco=r(Nk," or "),fI=n(Nk,"A",{href:!0});var mnt=s(fI);Vco=r(mnt,"AlbertTokenizerFast"),mnt.forEach(t),Xco=r(Nk," (Nystr\xF6mformer model)"),Nk.forEach(t),zco=i(S),ws=n(S,"LI",{});var qk=s(ws);Yse=n(qk,"STRONG",{});var fnt=s(Yse);Qco=r(fnt,"openai-gpt"),fnt.forEach(t),Wco=r(qk," \u2014 "),gI=n(qk,"A",{href:!0});var gnt=s(gI);Hco=r(gnt,"OpenAIGPTTokenizer"),gnt.forEach(t),Uco=r(qk," or "),hI=n(qk,"A",{href:!0});var hnt=s(hI);Jco=r(hnt,"OpenAIGPTTokenizerFast"),hnt.forEach(t),Yco=r(qk," (OpenAI GPT model)"),qk.forEach(t),Kco=i(S),dh=n(S,"LI",{});var eye=s(dh);Kse=n(eye,"STRONG",{});var unt=s(Kse);Zco=r(unt,"opt"),unt.forEach(t),emo=r(eye," \u2014 "),uI=n(eye,"A",{href:!0});var pnt=s(uI);omo=r(pnt,"GPT2Tokenizer"),pnt.forEach(t),rmo=r(eye," (OPT model)"),eye.forEach(t),tmo=i(S),As=n(S,"LI",{});var jk=s(As);Zse=n(jk,"STRONG",{});var _nt=s(Zse);amo=r(_nt,"pegasus"),_nt.forEach(t),nmo=r(jk," \u2014 "),pI=n(jk,"A",{href:!0});var bnt=s(pI);smo=r(bnt,"PegasusTokenizer"),bnt.forEach(t),lmo=r(jk," or "),_I=n(jk,"A",{href:!0});var vnt=s(_I);imo=r(vnt,"PegasusTokenizerFast"),vnt.forEach(t),dmo=r(jk," (Pegasus model)"),jk.forEach(t),cmo=i(S),ch=n(S,"LI",{});var oye=s(ch);ele=n(oye,"STRONG",{});var Fnt=s(ele);mmo=r(Fnt,"perceiver"),Fnt.forEach(t),fmo=r(oye," \u2014 "),bI=n(oye,"A",{href:!0});var Tnt=s(bI);gmo=r(Tnt,"PerceiverTokenizer"),Tnt.forEach(t),hmo=r(oye," (Perceiver model)"),oye.forEach(t),umo=i(S),mh=n(S,"LI",{});var rye=s(mh);ole=n(rye,"STRONG",{});var Mnt=s(ole);pmo=r(Mnt,"phobert"),Mnt.forEach(t),_mo=r(rye," \u2014 "),vI=n(rye,"A",{href:!0});var Ent=s(vI);bmo=r(Ent,"PhobertTokenizer"),Ent.forEach(t),vmo=r(rye," (PhoBERT model)"),rye.forEach(t),Fmo=i(S),fh=n(S,"LI",{});var tye=s(fh);rle=n(tye,"STRONG",{});var Cnt=s(rle);Tmo=r(Cnt,"plbart"),Cnt.forEach(t),Mmo=r(tye," \u2014 "),FI=n(tye,"A",{href:!0});var wnt=s(FI);Emo=r(wnt,"PLBartTokenizer"),wnt.forEach(t),Cmo=r(tye," (PLBart model)"),tye.forEach(t),wmo=i(S),gh=n(S,"LI",{});var aye=s(gh);tle=n(aye,"STRONG",{});var Ant=s(tle);Amo=r(Ant,"prophetnet"),Ant.forEach(t),Lmo=r(aye," \u2014 "),TI=n(aye,"A",{href:!0});var Lnt=s(TI);ymo=r(Lnt,"ProphetNetTokenizer"),Lnt.forEach(t),xmo=r(aye," (ProphetNet model)"),aye.forEach(t),$mo=i(S),Ls=n(S,"LI",{});var Dk=s(Ls);ale=n(Dk,"STRONG",{});var ynt=s(ale);kmo=r(ynt,"qdqbert"),ynt.forEach(t),Smo=r(Dk," \u2014 "),MI=n(Dk,"A",{href:!0});var xnt=s(MI);Rmo=r(xnt,"BertTokenizer"),xnt.forEach(t),Pmo=r(Dk," or "),EI=n(Dk,"A",{href:!0});var $nt=s(EI);Bmo=r($nt,"BertTokenizerFast"),$nt.forEach(t),Imo=r(Dk," (QDQBert model)"),Dk.forEach(t),Nmo=i(S),hh=n(S,"LI",{});var nye=s(hh);nle=n(nye,"STRONG",{});var knt=s(nle);qmo=r(knt,"rag"),knt.forEach(t),jmo=r(nye," \u2014 "),CI=n(nye,"A",{href:!0});var Snt=s(CI);Dmo=r(Snt,"RagTokenizer"),Snt.forEach(t),Gmo=r(nye," (RAG model)"),nye.forEach(t),Omo=i(S),ys=n(S,"LI",{});var Gk=s(ys);sle=n(Gk,"STRONG",{});var Rnt=s(sle);Vmo=r(Rnt,"realm"),Rnt.forEach(t),Xmo=r(Gk," \u2014 "),wI=n(Gk,"A",{href:!0});var Pnt=s(wI);zmo=r(Pnt,"RealmTokenizer"),Pnt.forEach(t),Qmo=r(Gk," or "),AI=n(Gk,"A",{href:!0});var Bnt=s(AI);Wmo=r(Bnt,"RealmTokenizerFast"),Bnt.forEach(t),Hmo=r(Gk," (REALM model)"),Gk.forEach(t),Umo=i(S),xs=n(S,"LI",{});var Ok=s(xs);lle=n(Ok,"STRONG",{});var Int=s(lle);Jmo=r(Int,"reformer"),Int.forEach(t),Ymo=r(Ok," \u2014 "),LI=n(Ok,"A",{href:!0});var Nnt=s(LI);Kmo=r(Nnt,"ReformerTokenizer"),Nnt.forEach(t),Zmo=r(Ok," or "),yI=n(Ok,"A",{href:!0});var qnt=s(yI);efo=r(qnt,"ReformerTokenizerFast"),qnt.forEach(t),ofo=r(Ok," (Reformer model)"),Ok.forEach(t),rfo=i(S),$s=n(S,"LI",{});var Vk=s($s);ile=n(Vk,"STRONG",{});var jnt=s(ile);tfo=r(jnt,"rembert"),jnt.forEach(t),afo=r(Vk," \u2014 "),xI=n(Vk,"A",{href:!0});var Dnt=s(xI);nfo=r(Dnt,"RemBertTokenizer"),Dnt.forEach(t),sfo=r(Vk," or "),$I=n(Vk,"A",{href:!0});var Gnt=s($I);lfo=r(Gnt,"RemBertTokenizerFast"),Gnt.forEach(t),ifo=r(Vk," (RemBERT model)"),Vk.forEach(t),dfo=i(S),ks=n(S,"LI",{});var Xk=s(ks);dle=n(Xk,"STRONG",{});var Ont=s(dle);cfo=r(Ont,"retribert"),Ont.forEach(t),mfo=r(Xk," \u2014 "),kI=n(Xk,"A",{href:!0});var Vnt=s(kI);ffo=r(Vnt,"RetriBertTokenizer"),Vnt.forEach(t),gfo=r(Xk," or "),SI=n(Xk,"A",{href:!0});var Xnt=s(SI);hfo=r(Xnt,"RetriBertTokenizerFast"),Xnt.forEach(t),ufo=r(Xk," (RetriBERT model)"),Xk.forEach(t),pfo=i(S),Ss=n(S,"LI",{});var zk=s(Ss);cle=n(zk,"STRONG",{});var znt=s(cle);_fo=r(znt,"roberta"),znt.forEach(t),bfo=r(zk," \u2014 "),RI=n(zk,"A",{href:!0});var Qnt=s(RI);vfo=r(Qnt,"RobertaTokenizer"),Qnt.forEach(t),Ffo=r(zk," or "),PI=n(zk,"A",{href:!0});var Wnt=s(PI);Tfo=r(Wnt,"RobertaTokenizerFast"),Wnt.forEach(t),Mfo=r(zk," (RoBERTa model)"),zk.forEach(t),Efo=i(S),Rs=n(S,"LI",{});var Qk=s(Rs);mle=n(Qk,"STRONG",{});var Hnt=s(mle);Cfo=r(Hnt,"roformer"),Hnt.forEach(t),wfo=r(Qk," \u2014 "),BI=n(Qk,"A",{href:!0});var Unt=s(BI);Afo=r(Unt,"RoFormerTokenizer"),Unt.forEach(t),Lfo=r(Qk," or "),II=n(Qk,"A",{href:!0});var Jnt=s(II);yfo=r(Jnt,"RoFormerTokenizerFast"),Jnt.forEach(t),xfo=r(Qk," (RoFormer model)"),Qk.forEach(t),$fo=i(S),uh=n(S,"LI",{});var sye=s(uh);fle=n(sye,"STRONG",{});var Ynt=s(fle);kfo=r(Ynt,"speech_to_text"),Ynt.forEach(t),Sfo=r(sye," \u2014 "),NI=n(sye,"A",{href:!0});var Knt=s(NI);Rfo=r(Knt,"Speech2TextTokenizer"),Knt.forEach(t),Pfo=r(sye," (Speech2Text model)"),sye.forEach(t),Bfo=i(S),ph=n(S,"LI",{});var lye=s(ph);gle=n(lye,"STRONG",{});var Znt=s(gle);Ifo=r(Znt,"speech_to_text_2"),Znt.forEach(t),Nfo=r(lye," \u2014 "),qI=n(lye,"A",{href:!0});var est=s(qI);qfo=r(est,"Speech2Text2Tokenizer"),est.forEach(t),jfo=r(lye," (Speech2Text2 model)"),lye.forEach(t),Dfo=i(S),Ps=n(S,"LI",{});var Wk=s(Ps);hle=n(Wk,"STRONG",{});var ost=s(hle);Gfo=r(ost,"splinter"),ost.forEach(t),Ofo=r(Wk," \u2014 "),jI=n(Wk,"A",{href:!0});var rst=s(jI);Vfo=r(rst,"SplinterTokenizer"),rst.forEach(t),Xfo=r(Wk," or "),DI=n(Wk,"A",{href:!0});var tst=s(DI);zfo=r(tst,"SplinterTokenizerFast"),tst.forEach(t),Qfo=r(Wk," (Splinter model)"),Wk.forEach(t),Wfo=i(S),Bs=n(S,"LI",{});var Hk=s(Bs);ule=n(Hk,"STRONG",{});var ast=s(ule);Hfo=r(ast,"squeezebert"),ast.forEach(t),Ufo=r(Hk," \u2014 "),GI=n(Hk,"A",{href:!0});var nst=s(GI);Jfo=r(nst,"SqueezeBertTokenizer"),nst.forEach(t),Yfo=r(Hk," or "),OI=n(Hk,"A",{href:!0});var sst=s(OI);Kfo=r(sst,"SqueezeBertTokenizerFast"),sst.forEach(t),Zfo=r(Hk," (SqueezeBERT model)"),Hk.forEach(t),ego=i(S),Is=n(S,"LI",{});var Uk=s(Is);ple=n(Uk,"STRONG",{});var lst=s(ple);ogo=r(lst,"t5"),lst.forEach(t),rgo=r(Uk," \u2014 "),VI=n(Uk,"A",{href:!0});var ist=s(VI);tgo=r(ist,"T5Tokenizer"),ist.forEach(t),ago=r(Uk," or "),XI=n(Uk,"A",{href:!0});var dst=s(XI);ngo=r(dst,"T5TokenizerFast"),dst.forEach(t),sgo=r(Uk," (T5 model)"),Uk.forEach(t),lgo=i(S),_h=n(S,"LI",{});var iye=s(_h);_le=n(iye,"STRONG",{});var cst=s(_le);igo=r(cst,"tapas"),cst.forEach(t),dgo=r(iye," \u2014 "),zI=n(iye,"A",{href:!0});var mst=s(zI);cgo=r(mst,"TapasTokenizer"),mst.forEach(t),mgo=r(iye," (TAPAS model)"),iye.forEach(t),fgo=i(S),bh=n(S,"LI",{});var dye=s(bh);ble=n(dye,"STRONG",{});var fst=s(ble);ggo=r(fst,"tapex"),fst.forEach(t),hgo=r(dye," \u2014 "),QI=n(dye,"A",{href:!0});var gst=s(QI);ugo=r(gst,"TapexTokenizer"),gst.forEach(t),pgo=r(dye," (TAPEX model)"),dye.forEach(t),_go=i(S),vh=n(S,"LI",{});var cye=s(vh);vle=n(cye,"STRONG",{});var hst=s(vle);bgo=r(hst,"transfo-xl"),hst.forEach(t),vgo=r(cye," \u2014 "),WI=n(cye,"A",{href:!0});var ust=s(WI);Fgo=r(ust,"TransfoXLTokenizer"),ust.forEach(t),Tgo=r(cye," (Transformer-XL model)"),cye.forEach(t),Mgo=i(S),Ns=n(S,"LI",{});var Jk=s(Ns);Fle=n(Jk,"STRONG",{});var pst=s(Fle);Ego=r(pst,"vilt"),pst.forEach(t),Cgo=r(Jk," \u2014 "),HI=n(Jk,"A",{href:!0});var _st=s(HI);wgo=r(_st,"BertTokenizer"),_st.forEach(t),Ago=r(Jk," or "),UI=n(Jk,"A",{href:!0});var bst=s(UI);Lgo=r(bst,"BertTokenizerFast"),bst.forEach(t),ygo=r(Jk," (ViLT model)"),Jk.forEach(t),xgo=i(S),qs=n(S,"LI",{});var Yk=s(qs);Tle=n(Yk,"STRONG",{});var vst=s(Tle);$go=r(vst,"visual_bert"),vst.forEach(t),kgo=r(Yk," \u2014 "),JI=n(Yk,"A",{href:!0});var Fst=s(JI);Sgo=r(Fst,"BertTokenizer"),Fst.forEach(t),Rgo=r(Yk," or "),YI=n(Yk,"A",{href:!0});var Tst=s(YI);Pgo=r(Tst,"BertTokenizerFast"),Tst.forEach(t),Bgo=r(Yk," (VisualBERT model)"),Yk.forEach(t),Igo=i(S),Fh=n(S,"LI",{});var mye=s(Fh);Mle=n(mye,"STRONG",{});var Mst=s(Mle);Ngo=r(Mst,"wav2vec2"),Mst.forEach(t),qgo=r(mye," \u2014 "),KI=n(mye,"A",{href:!0});var Est=s(KI);jgo=r(Est,"Wav2Vec2CTCTokenizer"),Est.forEach(t),Dgo=r(mye," (Wav2Vec2 model)"),mye.forEach(t),Ggo=i(S),Th=n(S,"LI",{});var fye=s(Th);Ele=n(fye,"STRONG",{});var Cst=s(Ele);Ogo=r(Cst,"wav2vec2-conformer"),Cst.forEach(t),Vgo=r(fye," \u2014 "),ZI=n(fye,"A",{href:!0});var wst=s(ZI);Xgo=r(wst,"Wav2Vec2CTCTokenizer"),wst.forEach(t),zgo=r(fye," (Wav2Vec2-Conformer model)"),fye.forEach(t),Qgo=i(S),Mh=n(S,"LI",{});var gye=s(Mh);Cle=n(gye,"STRONG",{});var Ast=s(Cle);Wgo=r(Ast,"wav2vec2_phoneme"),Ast.forEach(t),Hgo=r(gye," \u2014 "),eN=n(gye,"A",{href:!0});var Lst=s(eN);Ugo=r(Lst,"Wav2Vec2PhonemeCTCTokenizer"),Lst.forEach(t),Jgo=r(gye," (Wav2Vec2Phoneme model)"),gye.forEach(t),Ygo=i(S),js=n(S,"LI",{});var Kk=s(js);wle=n(Kk,"STRONG",{});var yst=s(wle);Kgo=r(yst,"xglm"),yst.forEach(t),Zgo=r(Kk," \u2014 "),oN=n(Kk,"A",{href:!0});var xst=s(oN);eho=r(xst,"XGLMTokenizer"),xst.forEach(t),oho=r(Kk," or "),rN=n(Kk,"A",{href:!0});var $st=s(rN);rho=r($st,"XGLMTokenizerFast"),$st.forEach(t),tho=r(Kk," (XGLM model)"),Kk.forEach(t),aho=i(S),Eh=n(S,"LI",{});var hye=s(Eh);Ale=n(hye,"STRONG",{});var kst=s(Ale);nho=r(kst,"xlm"),kst.forEach(t),sho=r(hye," \u2014 "),tN=n(hye,"A",{href:!0});var Sst=s(tN);lho=r(Sst,"XLMTokenizer"),Sst.forEach(t),iho=r(hye," (XLM model)"),hye.forEach(t),dho=i(S),Ch=n(S,"LI",{});var uye=s(Ch);Lle=n(uye,"STRONG",{});var Rst=s(Lle);cho=r(Rst,"xlm-prophetnet"),Rst.forEach(t),mho=r(uye," \u2014 "),aN=n(uye,"A",{href:!0});var Pst=s(aN);fho=r(Pst,"XLMProphetNetTokenizer"),Pst.forEach(t),gho=r(uye," (XLM-ProphetNet model)"),uye.forEach(t),hho=i(S),Ds=n(S,"LI",{});var Zk=s(Ds);yle=n(Zk,"STRONG",{});var Bst=s(yle);uho=r(Bst,"xlm-roberta"),Bst.forEach(t),pho=r(Zk," \u2014 "),nN=n(Zk,"A",{href:!0});var Ist=s(nN);_ho=r(Ist,"XLMRobertaTokenizer"),Ist.forEach(t),bho=r(Zk," or "),sN=n(Zk,"A",{href:!0});var Nst=s(sN);vho=r(Nst,"XLMRobertaTokenizerFast"),Nst.forEach(t),Fho=r(Zk," (XLM-RoBERTa model)"),Zk.forEach(t),Tho=i(S),Gs=n(S,"LI",{});var eS=s(Gs);xle=n(eS,"STRONG",{});var qst=s(xle);Mho=r(qst,"xlm-roberta-xl"),qst.forEach(t),Eho=r(eS," \u2014 "),lN=n(eS,"A",{href:!0});var jst=s(lN);Cho=r(jst,"RobertaTokenizer"),jst.forEach(t),who=r(eS," or "),iN=n(eS,"A",{href:!0});var Dst=s(iN);Aho=r(Dst,"RobertaTokenizerFast"),Dst.forEach(t),Lho=r(eS," (XLM-RoBERTa-XL model)"),eS.forEach(t),yho=i(S),Os=n(S,"LI",{});var oS=s(Os);$le=n(oS,"STRONG",{});var Gst=s($le);xho=r(Gst,"xlnet"),Gst.forEach(t),$ho=r(oS," \u2014 "),dN=n(oS,"A",{href:!0});var Ost=s(dN);kho=r(Ost,"XLNetTokenizer"),Ost.forEach(t),Sho=r(oS," or "),cN=n(oS,"A",{href:!0});var Vst=s(cN);Rho=r(Vst,"XLNetTokenizerFast"),Vst.forEach(t),Pho=r(oS," (XLNet model)"),oS.forEach(t),Bho=i(S),Vs=n(S,"LI",{});var rS=s(Vs);kle=n(rS,"STRONG",{});var Xst=s(kle);Iho=r(Xst,"yoso"),Xst.forEach(t),Nho=r(rS," \u2014 "),mN=n(rS,"A",{href:!0});var zst=s(mN);qho=r(zst,"AlbertTokenizer"),zst.forEach(t),jho=r(rS," or "),fN=n(rS,"A",{href:!0});var Qst=s(fN);Dho=r(Qst,"AlbertTokenizerFast"),Qst.forEach(t),Gho=r(rS," (YOSO model)"),rS.forEach(t),S.forEach(t),Oho=i(Us),T(wh.$$.fragment,Us),Us.forEach(t),Vho=i(Hs),Ah=n(Hs,"DIV",{class:!0});var fXe=s(Ah);T(Q7.$$.fragment,fXe),Xho=i(fXe),Sle=n(fXe,"P",{});var Wst=s(Sle);zho=r(Wst,"Register a new tokenizer in this mapping."),Wst.forEach(t),fXe.forEach(t),Hs.forEach(t),mOe=i(m),Ri=n(m,"H2",{class:!0});var gXe=s(Ri);Lh=n(gXe,"A",{id:!0,class:!0,href:!0});var Hst=s(Lh);Rle=n(Hst,"SPAN",{});var Ust=s(Rle);T(W7.$$.fragment,Ust),Ust.forEach(t),Hst.forEach(t),Qho=i(gXe),Ple=n(gXe,"SPAN",{});var Jst=s(Ple);Who=r(Jst,"AutoFeatureExtractor"),Jst.forEach(t),gXe.forEach(t),fOe=i(m),Lo=n(m,"DIV",{class:!0});var Js=s(Lo);T(H7.$$.fragment,Js),Hho=i(Js),U7=n(Js,"P",{});var hXe=s(U7);Uho=r(hXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gN=n(hXe,"A",{href:!0});var Yst=s(gN);Jho=r(Yst,"AutoFeatureExtractor.from_pretrained()"),Yst.forEach(t),Yho=r(hXe," class method."),hXe.forEach(t),Kho=i(Js),J7=n(Js,"P",{});var uXe=s(J7);Zho=r(uXe,"This class cannot be instantiated directly using "),Ble=n(uXe,"CODE",{});var Kst=s(Ble);euo=r(Kst,"__init__()"),Kst.forEach(t),ouo=r(uXe," (throws an error)."),uXe.forEach(t),ruo=i(Js),He=n(Js,"DIV",{class:!0});var ra=s(He);T(Y7.$$.fragment,ra),tuo=i(ra),Ile=n(ra,"P",{});var Zst=s(Ile);auo=r(Zst,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zst.forEach(t),nuo=i(ra),Sa=n(ra,"P",{});var P6=s(Sa);suo=r(P6,"The feature extractor class to instantiate is selected based on the "),Nle=n(P6,"CODE",{});var elt=s(Nle);luo=r(elt,"model_type"),elt.forEach(t),iuo=r(P6,` property of the config object
(either passed as an argument or loaded from `),qle=n(P6,"CODE",{});var olt=s(qle);duo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),cuo=r(P6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jle=n(P6,"CODE",{});var rlt=s(jle);muo=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),fuo=r(P6,":"),P6.forEach(t),guo=i(ra),Y=n(ra,"UL",{});var K=s(Y);yh=n(K,"LI",{});var pye=s(yh);Dle=n(pye,"STRONG",{});var tlt=s(Dle);huo=r(tlt,"beit"),tlt.forEach(t),uuo=r(pye," \u2014 "),hN=n(pye,"A",{href:!0});var alt=s(hN);puo=r(alt,"BeitFeatureExtractor"),alt.forEach(t),_uo=r(pye," (BEiT model)"),pye.forEach(t),buo=i(K),xh=n(K,"LI",{});var _ye=s(xh);Gle=n(_ye,"STRONG",{});var nlt=s(Gle);vuo=r(nlt,"clip"),nlt.forEach(t),Fuo=r(_ye," \u2014 "),uN=n(_ye,"A",{href:!0});var slt=s(uN);Tuo=r(slt,"CLIPFeatureExtractor"),slt.forEach(t),Muo=r(_ye," (CLIP model)"),_ye.forEach(t),Euo=i(K),$h=n(K,"LI",{});var bye=s($h);Ole=n(bye,"STRONG",{});var llt=s(Ole);Cuo=r(llt,"convnext"),llt.forEach(t),wuo=r(bye," \u2014 "),pN=n(bye,"A",{href:!0});var ilt=s(pN);Auo=r(ilt,"ConvNextFeatureExtractor"),ilt.forEach(t),Luo=r(bye," (ConvNeXT model)"),bye.forEach(t),yuo=i(K),kh=n(K,"LI",{});var vye=s(kh);Vle=n(vye,"STRONG",{});var dlt=s(Vle);xuo=r(dlt,"cvt"),dlt.forEach(t),$uo=r(vye," \u2014 "),_N=n(vye,"A",{href:!0});var clt=s(_N);kuo=r(clt,"ConvNextFeatureExtractor"),clt.forEach(t),Suo=r(vye," (CvT model)"),vye.forEach(t),Ruo=i(K),Sh=n(K,"LI",{});var Fye=s(Sh);Xle=n(Fye,"STRONG",{});var mlt=s(Xle);Puo=r(mlt,"data2vec-audio"),mlt.forEach(t),Buo=r(Fye," \u2014 "),bN=n(Fye,"A",{href:!0});var flt=s(bN);Iuo=r(flt,"Wav2Vec2FeatureExtractor"),flt.forEach(t),Nuo=r(Fye," (Data2VecAudio model)"),Fye.forEach(t),quo=i(K),Rh=n(K,"LI",{});var Tye=s(Rh);zle=n(Tye,"STRONG",{});var glt=s(zle);juo=r(glt,"data2vec-vision"),glt.forEach(t),Duo=r(Tye," \u2014 "),vN=n(Tye,"A",{href:!0});var hlt=s(vN);Guo=r(hlt,"BeitFeatureExtractor"),hlt.forEach(t),Ouo=r(Tye," (Data2VecVision model)"),Tye.forEach(t),Vuo=i(K),Ph=n(K,"LI",{});var Mye=s(Ph);Qle=n(Mye,"STRONG",{});var ult=s(Qle);Xuo=r(ult,"deit"),ult.forEach(t),zuo=r(Mye," \u2014 "),FN=n(Mye,"A",{href:!0});var plt=s(FN);Quo=r(plt,"DeiTFeatureExtractor"),plt.forEach(t),Wuo=r(Mye," (DeiT model)"),Mye.forEach(t),Huo=i(K),Bh=n(K,"LI",{});var Eye=s(Bh);Wle=n(Eye,"STRONG",{});var _lt=s(Wle);Uuo=r(_lt,"detr"),_lt.forEach(t),Juo=r(Eye," \u2014 "),TN=n(Eye,"A",{href:!0});var blt=s(TN);Yuo=r(blt,"DetrFeatureExtractor"),blt.forEach(t),Kuo=r(Eye," (DETR model)"),Eye.forEach(t),Zuo=i(K),Ih=n(K,"LI",{});var Cye=s(Ih);Hle=n(Cye,"STRONG",{});var vlt=s(Hle);epo=r(vlt,"dpt"),vlt.forEach(t),opo=r(Cye," \u2014 "),MN=n(Cye,"A",{href:!0});var Flt=s(MN);rpo=r(Flt,"DPTFeatureExtractor"),Flt.forEach(t),tpo=r(Cye," (DPT model)"),Cye.forEach(t),apo=i(K),Nh=n(K,"LI",{});var wye=s(Nh);Ule=n(wye,"STRONG",{});var Tlt=s(Ule);npo=r(Tlt,"flava"),Tlt.forEach(t),spo=r(wye," \u2014 "),EN=n(wye,"A",{href:!0});var Mlt=s(EN);lpo=r(Mlt,"FlavaFeatureExtractor"),Mlt.forEach(t),ipo=r(wye," (FLAVA model)"),wye.forEach(t),dpo=i(K),qh=n(K,"LI",{});var Aye=s(qh);Jle=n(Aye,"STRONG",{});var Elt=s(Jle);cpo=r(Elt,"glpn"),Elt.forEach(t),mpo=r(Aye," \u2014 "),CN=n(Aye,"A",{href:!0});var Clt=s(CN);fpo=r(Clt,"GLPNFeatureExtractor"),Clt.forEach(t),gpo=r(Aye," (GLPN model)"),Aye.forEach(t),hpo=i(K),jh=n(K,"LI",{});var Lye=s(jh);Yle=n(Lye,"STRONG",{});var wlt=s(Yle);upo=r(wlt,"hubert"),wlt.forEach(t),ppo=r(Lye," \u2014 "),wN=n(Lye,"A",{href:!0});var Alt=s(wN);_po=r(Alt,"Wav2Vec2FeatureExtractor"),Alt.forEach(t),bpo=r(Lye," (Hubert model)"),Lye.forEach(t),vpo=i(K),Dh=n(K,"LI",{});var yye=s(Dh);Kle=n(yye,"STRONG",{});var Llt=s(Kle);Fpo=r(Llt,"imagegpt"),Llt.forEach(t),Tpo=r(yye," \u2014 "),AN=n(yye,"A",{href:!0});var ylt=s(AN);Mpo=r(ylt,"ImageGPTFeatureExtractor"),ylt.forEach(t),Epo=r(yye," (ImageGPT model)"),yye.forEach(t),Cpo=i(K),Gh=n(K,"LI",{});var xye=s(Gh);Zle=n(xye,"STRONG",{});var xlt=s(Zle);wpo=r(xlt,"layoutlmv2"),xlt.forEach(t),Apo=r(xye," \u2014 "),LN=n(xye,"A",{href:!0});var $lt=s(LN);Lpo=r($lt,"LayoutLMv2FeatureExtractor"),$lt.forEach(t),ypo=r(xye," (LayoutLMv2 model)"),xye.forEach(t),xpo=i(K),Oh=n(K,"LI",{});var $ye=s(Oh);eie=n($ye,"STRONG",{});var klt=s(eie);$po=r(klt,"layoutlmv3"),klt.forEach(t),kpo=r($ye," \u2014 "),yN=n($ye,"A",{href:!0});var Slt=s(yN);Spo=r(Slt,"LayoutLMv3FeatureExtractor"),Slt.forEach(t),Rpo=r($ye," (LayoutLMv3 model)"),$ye.forEach(t),Ppo=i(K),Vh=n(K,"LI",{});var kye=s(Vh);oie=n(kye,"STRONG",{});var Rlt=s(oie);Bpo=r(Rlt,"levit"),Rlt.forEach(t),Ipo=r(kye," \u2014 "),xN=n(kye,"A",{href:!0});var Plt=s(xN);Npo=r(Plt,"LevitFeatureExtractor"),Plt.forEach(t),qpo=r(kye," (LeViT model)"),kye.forEach(t),jpo=i(K),Xh=n(K,"LI",{});var Sye=s(Xh);rie=n(Sye,"STRONG",{});var Blt=s(rie);Dpo=r(Blt,"maskformer"),Blt.forEach(t),Gpo=r(Sye," \u2014 "),$N=n(Sye,"A",{href:!0});var Ilt=s($N);Opo=r(Ilt,"MaskFormerFeatureExtractor"),Ilt.forEach(t),Vpo=r(Sye," (MaskFormer model)"),Sye.forEach(t),Xpo=i(K),zh=n(K,"LI",{});var Rye=s(zh);tie=n(Rye,"STRONG",{});var Nlt=s(tie);zpo=r(Nlt,"mctct"),Nlt.forEach(t),Qpo=r(Rye," \u2014 "),kN=n(Rye,"A",{href:!0});var qlt=s(kN);Wpo=r(qlt,"MCTCTFeatureExtractor"),qlt.forEach(t),Hpo=r(Rye," (M-CTC-T model)"),Rye.forEach(t),Upo=i(K),Qh=n(K,"LI",{});var Pye=s(Qh);aie=n(Pye,"STRONG",{});var jlt=s(aie);Jpo=r(jlt,"perceiver"),jlt.forEach(t),Ypo=r(Pye," \u2014 "),SN=n(Pye,"A",{href:!0});var Dlt=s(SN);Kpo=r(Dlt,"PerceiverFeatureExtractor"),Dlt.forEach(t),Zpo=r(Pye," (Perceiver model)"),Pye.forEach(t),e_o=i(K),Wh=n(K,"LI",{});var Bye=s(Wh);nie=n(Bye,"STRONG",{});var Glt=s(nie);o_o=r(Glt,"poolformer"),Glt.forEach(t),r_o=r(Bye," \u2014 "),RN=n(Bye,"A",{href:!0});var Olt=s(RN);t_o=r(Olt,"PoolFormerFeatureExtractor"),Olt.forEach(t),a_o=r(Bye," (PoolFormer model)"),Bye.forEach(t),n_o=i(K),Hh=n(K,"LI",{});var Iye=s(Hh);sie=n(Iye,"STRONG",{});var Vlt=s(sie);s_o=r(Vlt,"regnet"),Vlt.forEach(t),l_o=r(Iye," \u2014 "),PN=n(Iye,"A",{href:!0});var Xlt=s(PN);i_o=r(Xlt,"ConvNextFeatureExtractor"),Xlt.forEach(t),d_o=r(Iye," (RegNet model)"),Iye.forEach(t),c_o=i(K),Uh=n(K,"LI",{});var Nye=s(Uh);lie=n(Nye,"STRONG",{});var zlt=s(lie);m_o=r(zlt,"resnet"),zlt.forEach(t),f_o=r(Nye," \u2014 "),BN=n(Nye,"A",{href:!0});var Qlt=s(BN);g_o=r(Qlt,"ConvNextFeatureExtractor"),Qlt.forEach(t),h_o=r(Nye," (ResNet model)"),Nye.forEach(t),u_o=i(K),Jh=n(K,"LI",{});var qye=s(Jh);iie=n(qye,"STRONG",{});var Wlt=s(iie);p_o=r(Wlt,"segformer"),Wlt.forEach(t),__o=r(qye," \u2014 "),IN=n(qye,"A",{href:!0});var Hlt=s(IN);b_o=r(Hlt,"SegformerFeatureExtractor"),Hlt.forEach(t),v_o=r(qye," (SegFormer model)"),qye.forEach(t),F_o=i(K),Yh=n(K,"LI",{});var jye=s(Yh);die=n(jye,"STRONG",{});var Ult=s(die);T_o=r(Ult,"speech_to_text"),Ult.forEach(t),M_o=r(jye," \u2014 "),NN=n(jye,"A",{href:!0});var Jlt=s(NN);E_o=r(Jlt,"Speech2TextFeatureExtractor"),Jlt.forEach(t),C_o=r(jye," (Speech2Text model)"),jye.forEach(t),w_o=i(K),Kh=n(K,"LI",{});var Dye=s(Kh);cie=n(Dye,"STRONG",{});var Ylt=s(cie);A_o=r(Ylt,"swin"),Ylt.forEach(t),L_o=r(Dye," \u2014 "),qN=n(Dye,"A",{href:!0});var Klt=s(qN);y_o=r(Klt,"ViTFeatureExtractor"),Klt.forEach(t),x_o=r(Dye," (Swin Transformer model)"),Dye.forEach(t),$_o=i(K),Zh=n(K,"LI",{});var Gye=s(Zh);mie=n(Gye,"STRONG",{});var Zlt=s(mie);k_o=r(Zlt,"van"),Zlt.forEach(t),S_o=r(Gye," \u2014 "),jN=n(Gye,"A",{href:!0});var eit=s(jN);R_o=r(eit,"ConvNextFeatureExtractor"),eit.forEach(t),P_o=r(Gye," (VAN model)"),Gye.forEach(t),B_o=i(K),eu=n(K,"LI",{});var Oye=s(eu);fie=n(Oye,"STRONG",{});var oit=s(fie);I_o=r(oit,"vilt"),oit.forEach(t),N_o=r(Oye," \u2014 "),DN=n(Oye,"A",{href:!0});var rit=s(DN);q_o=r(rit,"ViltFeatureExtractor"),rit.forEach(t),j_o=r(Oye," (ViLT model)"),Oye.forEach(t),D_o=i(K),ou=n(K,"LI",{});var Vye=s(ou);gie=n(Vye,"STRONG",{});var tit=s(gie);G_o=r(tit,"vit"),tit.forEach(t),O_o=r(Vye," \u2014 "),GN=n(Vye,"A",{href:!0});var ait=s(GN);V_o=r(ait,"ViTFeatureExtractor"),ait.forEach(t),X_o=r(Vye," (ViT model)"),Vye.forEach(t),z_o=i(K),ru=n(K,"LI",{});var Xye=s(ru);hie=n(Xye,"STRONG",{});var nit=s(hie);Q_o=r(nit,"vit_mae"),nit.forEach(t),W_o=r(Xye," \u2014 "),ON=n(Xye,"A",{href:!0});var sit=s(ON);H_o=r(sit,"ViTFeatureExtractor"),sit.forEach(t),U_o=r(Xye," (ViTMAE model)"),Xye.forEach(t),J_o=i(K),tu=n(K,"LI",{});var zye=s(tu);uie=n(zye,"STRONG",{});var lit=s(uie);Y_o=r(lit,"wav2vec2"),lit.forEach(t),K_o=r(zye," \u2014 "),VN=n(zye,"A",{href:!0});var iit=s(VN);Z_o=r(iit,"Wav2Vec2FeatureExtractor"),iit.forEach(t),e2o=r(zye," (Wav2Vec2 model)"),zye.forEach(t),o2o=i(K),au=n(K,"LI",{});var Qye=s(au);pie=n(Qye,"STRONG",{});var dit=s(pie);r2o=r(dit,"wav2vec2-conformer"),dit.forEach(t),t2o=r(Qye," \u2014 "),XN=n(Qye,"A",{href:!0});var cit=s(XN);a2o=r(cit,"Wav2Vec2FeatureExtractor"),cit.forEach(t),n2o=r(Qye," (Wav2Vec2-Conformer model)"),Qye.forEach(t),s2o=i(K),nu=n(K,"LI",{});var Wye=s(nu);_ie=n(Wye,"STRONG",{});var mit=s(_ie);l2o=r(mit,"yolos"),mit.forEach(t),i2o=r(Wye," \u2014 "),zN=n(Wye,"A",{href:!0});var fit=s(zN);d2o=r(fit,"YolosFeatureExtractor"),fit.forEach(t),c2o=r(Wye," (YOLOS model)"),Wye.forEach(t),K.forEach(t),m2o=i(ra),T(su.$$.fragment,ra),f2o=i(ra),T(lu.$$.fragment,ra),ra.forEach(t),g2o=i(Js),iu=n(Js,"DIV",{class:!0});var pXe=s(iu);T(K7.$$.fragment,pXe),h2o=i(pXe),bie=n(pXe,"P",{});var git=s(bie);u2o=r(git,"Register a new feature extractor for this class."),git.forEach(t),pXe.forEach(t),Js.forEach(t),gOe=i(m),Pi=n(m,"H2",{class:!0});var _Xe=s(Pi);du=n(_Xe,"A",{id:!0,class:!0,href:!0});var hit=s(du);vie=n(hit,"SPAN",{});var uit=s(vie);T(Z7.$$.fragment,uit),uit.forEach(t),hit.forEach(t),p2o=i(_Xe),Fie=n(_Xe,"SPAN",{});var pit=s(Fie);_2o=r(pit,"AutoProcessor"),pit.forEach(t),_Xe.forEach(t),hOe=i(m),yo=n(m,"DIV",{class:!0});var Ys=s(yo);T(ey.$$.fragment,Ys),b2o=i(Ys),oy=n(Ys,"P",{});var bXe=s(oy);v2o=r(bXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QN=n(bXe,"A",{href:!0});var _it=s(QN);F2o=r(_it,"AutoProcessor.from_pretrained()"),_it.forEach(t),T2o=r(bXe," class method."),bXe.forEach(t),M2o=i(Ys),ry=n(Ys,"P",{});var vXe=s(ry);E2o=r(vXe,"This class cannot be instantiated directly using "),Tie=n(vXe,"CODE",{});var bit=s(Tie);C2o=r(bit,"__init__()"),bit.forEach(t),w2o=r(vXe," (throws an error)."),vXe.forEach(t),A2o=i(Ys),Ue=n(Ys,"DIV",{class:!0});var ta=s(Ue);T(ty.$$.fragment,ta),L2o=i(ta),Mie=n(ta,"P",{});var vit=s(Mie);y2o=r(vit,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vit.forEach(t),x2o=i(ta),Bi=n(ta,"P",{});var yoe=s(Bi);$2o=r(yoe,"The processor class to instantiate is selected based on the "),Eie=n(yoe,"CODE",{});var Fit=s(Eie);k2o=r(Fit,"model_type"),Fit.forEach(t),S2o=r(yoe,` property of the config object (either
passed as an argument or loaded from `),Cie=n(yoe,"CODE",{});var Tit=s(Cie);R2o=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),P2o=r(yoe," if possible):"),yoe.forEach(t),B2o=i(ta),he=n(ta,"UL",{});var _e=s(he);cu=n(_e,"LI",{});var Hye=s(cu);wie=n(Hye,"STRONG",{});var Mit=s(wie);I2o=r(Mit,"clip"),Mit.forEach(t),N2o=r(Hye," \u2014 "),WN=n(Hye,"A",{href:!0});var Eit=s(WN);q2o=r(Eit,"CLIPProcessor"),Eit.forEach(t),j2o=r(Hye," (CLIP model)"),Hye.forEach(t),D2o=i(_e),mu=n(_e,"LI",{});var Uye=s(mu);Aie=n(Uye,"STRONG",{});var Cit=s(Aie);G2o=r(Cit,"flava"),Cit.forEach(t),O2o=r(Uye," \u2014 "),Lie=n(Uye,"CODE",{});var wit=s(Lie);V2o=r(wit,"FLAVAProcessor"),wit.forEach(t),X2o=r(Uye," (FLAVA model)"),Uye.forEach(t),z2o=i(_e),fu=n(_e,"LI",{});var Jye=s(fu);yie=n(Jye,"STRONG",{});var Ait=s(yie);Q2o=r(Ait,"layoutlmv2"),Ait.forEach(t),W2o=r(Jye," \u2014 "),HN=n(Jye,"A",{href:!0});var Lit=s(HN);H2o=r(Lit,"LayoutLMv2Processor"),Lit.forEach(t),U2o=r(Jye," (LayoutLMv2 model)"),Jye.forEach(t),J2o=i(_e),gu=n(_e,"LI",{});var Yye=s(gu);xie=n(Yye,"STRONG",{});var yit=s(xie);Y2o=r(yit,"layoutlmv3"),yit.forEach(t),K2o=r(Yye," \u2014 "),UN=n(Yye,"A",{href:!0});var xit=s(UN);Z2o=r(xit,"LayoutLMv3Processor"),xit.forEach(t),ebo=r(Yye," (LayoutLMv3 model)"),Yye.forEach(t),obo=i(_e),hu=n(_e,"LI",{});var Kye=s(hu);$ie=n(Kye,"STRONG",{});var $it=s($ie);rbo=r($it,"layoutxlm"),$it.forEach(t),tbo=r(Kye," \u2014 "),JN=n(Kye,"A",{href:!0});var kit=s(JN);abo=r(kit,"LayoutXLMProcessor"),kit.forEach(t),nbo=r(Kye," (LayoutXLM model)"),Kye.forEach(t),sbo=i(_e),uu=n(_e,"LI",{});var Zye=s(uu);kie=n(Zye,"STRONG",{});var Sit=s(kie);lbo=r(Sit,"sew"),Sit.forEach(t),ibo=r(Zye," \u2014 "),YN=n(Zye,"A",{href:!0});var Rit=s(YN);dbo=r(Rit,"Wav2Vec2Processor"),Rit.forEach(t),cbo=r(Zye," (SEW model)"),Zye.forEach(t),mbo=i(_e),pu=n(_e,"LI",{});var e8e=s(pu);Sie=n(e8e,"STRONG",{});var Pit=s(Sie);fbo=r(Pit,"sew-d"),Pit.forEach(t),gbo=r(e8e," \u2014 "),KN=n(e8e,"A",{href:!0});var Bit=s(KN);hbo=r(Bit,"Wav2Vec2Processor"),Bit.forEach(t),ubo=r(e8e," (SEW-D model)"),e8e.forEach(t),pbo=i(_e),_u=n(_e,"LI",{});var o8e=s(_u);Rie=n(o8e,"STRONG",{});var Iit=s(Rie);_bo=r(Iit,"speech_to_text"),Iit.forEach(t),bbo=r(o8e," \u2014 "),ZN=n(o8e,"A",{href:!0});var Nit=s(ZN);vbo=r(Nit,"Speech2TextProcessor"),Nit.forEach(t),Fbo=r(o8e," (Speech2Text model)"),o8e.forEach(t),Tbo=i(_e),bu=n(_e,"LI",{});var r8e=s(bu);Pie=n(r8e,"STRONG",{});var qit=s(Pie);Mbo=r(qit,"speech_to_text_2"),qit.forEach(t),Ebo=r(r8e," \u2014 "),eq=n(r8e,"A",{href:!0});var jit=s(eq);Cbo=r(jit,"Speech2Text2Processor"),jit.forEach(t),wbo=r(r8e," (Speech2Text2 model)"),r8e.forEach(t),Abo=i(_e),vu=n(_e,"LI",{});var t8e=s(vu);Bie=n(t8e,"STRONG",{});var Dit=s(Bie);Lbo=r(Dit,"trocr"),Dit.forEach(t),ybo=r(t8e," \u2014 "),oq=n(t8e,"A",{href:!0});var Git=s(oq);xbo=r(Git,"TrOCRProcessor"),Git.forEach(t),$bo=r(t8e," (TrOCR model)"),t8e.forEach(t),kbo=i(_e),Fu=n(_e,"LI",{});var a8e=s(Fu);Iie=n(a8e,"STRONG",{});var Oit=s(Iie);Sbo=r(Oit,"unispeech"),Oit.forEach(t),Rbo=r(a8e," \u2014 "),rq=n(a8e,"A",{href:!0});var Vit=s(rq);Pbo=r(Vit,"Wav2Vec2Processor"),Vit.forEach(t),Bbo=r(a8e," (UniSpeech model)"),a8e.forEach(t),Ibo=i(_e),Tu=n(_e,"LI",{});var n8e=s(Tu);Nie=n(n8e,"STRONG",{});var Xit=s(Nie);Nbo=r(Xit,"unispeech-sat"),Xit.forEach(t),qbo=r(n8e," \u2014 "),tq=n(n8e,"A",{href:!0});var zit=s(tq);jbo=r(zit,"Wav2Vec2Processor"),zit.forEach(t),Dbo=r(n8e," (UniSpeechSat model)"),n8e.forEach(t),Gbo=i(_e),Mu=n(_e,"LI",{});var s8e=s(Mu);qie=n(s8e,"STRONG",{});var Qit=s(qie);Obo=r(Qit,"vilt"),Qit.forEach(t),Vbo=r(s8e," \u2014 "),aq=n(s8e,"A",{href:!0});var Wit=s(aq);Xbo=r(Wit,"ViltProcessor"),Wit.forEach(t),zbo=r(s8e," (ViLT model)"),s8e.forEach(t),Qbo=i(_e),Eu=n(_e,"LI",{});var l8e=s(Eu);jie=n(l8e,"STRONG",{});var Hit=s(jie);Wbo=r(Hit,"vision-text-dual-encoder"),Hit.forEach(t),Hbo=r(l8e," \u2014 "),nq=n(l8e,"A",{href:!0});var Uit=s(nq);Ubo=r(Uit,"VisionTextDualEncoderProcessor"),Uit.forEach(t),Jbo=r(l8e," (VisionTextDualEncoder model)"),l8e.forEach(t),Ybo=i(_e),Cu=n(_e,"LI",{});var i8e=s(Cu);Die=n(i8e,"STRONG",{});var Jit=s(Die);Kbo=r(Jit,"wav2vec2"),Jit.forEach(t),Zbo=r(i8e," \u2014 "),sq=n(i8e,"A",{href:!0});var Yit=s(sq);evo=r(Yit,"Wav2Vec2Processor"),Yit.forEach(t),ovo=r(i8e," (Wav2Vec2 model)"),i8e.forEach(t),rvo=i(_e),wu=n(_e,"LI",{});var d8e=s(wu);Gie=n(d8e,"STRONG",{});var Kit=s(Gie);tvo=r(Kit,"wav2vec2-conformer"),Kit.forEach(t),avo=r(d8e," \u2014 "),lq=n(d8e,"A",{href:!0});var Zit=s(lq);nvo=r(Zit,"Wav2Vec2Processor"),Zit.forEach(t),svo=r(d8e," (Wav2Vec2-Conformer model)"),d8e.forEach(t),lvo=i(_e),Au=n(_e,"LI",{});var c8e=s(Au);Oie=n(c8e,"STRONG",{});var edt=s(Oie);ivo=r(edt,"wavlm"),edt.forEach(t),dvo=r(c8e," \u2014 "),iq=n(c8e,"A",{href:!0});var odt=s(iq);cvo=r(odt,"Wav2Vec2Processor"),odt.forEach(t),mvo=r(c8e," (WavLM model)"),c8e.forEach(t),_e.forEach(t),fvo=i(ta),T(Lu.$$.fragment,ta),gvo=i(ta),T(yu.$$.fragment,ta),ta.forEach(t),hvo=i(Ys),xu=n(Ys,"DIV",{class:!0});var FXe=s(xu);T(ay.$$.fragment,FXe),uvo=i(FXe),Vie=n(FXe,"P",{});var rdt=s(Vie);pvo=r(rdt,"Register a new processor for this class."),rdt.forEach(t),FXe.forEach(t),Ys.forEach(t),uOe=i(m),Ii=n(m,"H2",{class:!0});var TXe=s(Ii);$u=n(TXe,"A",{id:!0,class:!0,href:!0});var tdt=s($u);Xie=n(tdt,"SPAN",{});var adt=s(Xie);T(ny.$$.fragment,adt),adt.forEach(t),tdt.forEach(t),_vo=i(TXe),zie=n(TXe,"SPAN",{});var ndt=s(zie);bvo=r(ndt,"AutoModel"),ndt.forEach(t),TXe.forEach(t),pOe=i(m),xo=n(m,"DIV",{class:!0});var Ks=s(xo);T(sy.$$.fragment,Ks),vvo=i(Ks),Ni=n(Ks,"P",{});var xoe=s(Ni);Fvo=r(xoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dq=n(xoe,"A",{href:!0});var sdt=s(dq);Tvo=r(sdt,"from_pretrained()"),sdt.forEach(t),Mvo=r(xoe," class method or the "),cq=n(xoe,"A",{href:!0});var ldt=s(cq);Evo=r(ldt,"from_config()"),ldt.forEach(t),Cvo=r(xoe,` class
method.`),xoe.forEach(t),wvo=i(Ks),ly=n(Ks,"P",{});var MXe=s(ly);Avo=r(MXe,"This class cannot be instantiated directly using "),Qie=n(MXe,"CODE",{});var idt=s(Qie);Lvo=r(idt,"__init__()"),idt.forEach(t),yvo=r(MXe," (throws an error)."),MXe.forEach(t),xvo=i(Ks),nt=n(Ks,"DIV",{class:!0});var B6=s(nt);T(iy.$$.fragment,B6),$vo=i(B6),Wie=n(B6,"P",{});var ddt=s(Wie);kvo=r(ddt,"Instantiates one of the base model classes of the library from a configuration."),ddt.forEach(t),Svo=i(B6),qi=n(B6,"P",{});var $oe=s(qi);Rvo=r($oe,`Note:
Loading a model from its configuration file does `),Hie=n($oe,"STRONG",{});var cdt=s(Hie);Pvo=r(cdt,"not"),cdt.forEach(t),Bvo=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=n($oe,"A",{href:!0});var mdt=s(mq);Ivo=r(mdt,"from_pretrained()"),mdt.forEach(t),Nvo=r($oe," to load the model weights."),$oe.forEach(t),qvo=i(B6),T(ku.$$.fragment,B6),B6.forEach(t),jvo=i(Ks),Je=n(Ks,"DIV",{class:!0});var aa=s(Je);T(dy.$$.fragment,aa),Dvo=i(aa),Uie=n(aa,"P",{});var fdt=s(Uie);Gvo=r(fdt,"Instantiate one of the base model classes of the library from a pretrained model."),fdt.forEach(t),Ovo=i(aa),Ra=n(aa,"P",{});var I6=s(Ra);Vvo=r(I6,"The model class to instantiate is selected based on the "),Jie=n(I6,"CODE",{});var gdt=s(Jie);Xvo=r(gdt,"model_type"),gdt.forEach(t),zvo=r(I6,` property of the config object (either
passed as an argument or loaded from `),Yie=n(I6,"CODE",{});var hdt=s(Yie);Qvo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),Wvo=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=n(I6,"CODE",{});var udt=s(Kie);Hvo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),Uvo=r(I6,":"),I6.forEach(t),Jvo=i(aa),y=n(aa,"UL",{});var $=s(y);Su=n($,"LI",{});var m8e=s(Su);Zie=n(m8e,"STRONG",{});var pdt=s(Zie);Yvo=r(pdt,"albert"),pdt.forEach(t),Kvo=r(m8e," \u2014 "),fq=n(m8e,"A",{href:!0});var _dt=s(fq);Zvo=r(_dt,"AlbertModel"),_dt.forEach(t),eFo=r(m8e," (ALBERT model)"),m8e.forEach(t),oFo=i($),Ru=n($,"LI",{});var f8e=s(Ru);ede=n(f8e,"STRONG",{});var bdt=s(ede);rFo=r(bdt,"bart"),bdt.forEach(t),tFo=r(f8e," \u2014 "),gq=n(f8e,"A",{href:!0});var vdt=s(gq);aFo=r(vdt,"BartModel"),vdt.forEach(t),nFo=r(f8e," (BART model)"),f8e.forEach(t),sFo=i($),Pu=n($,"LI",{});var g8e=s(Pu);ode=n(g8e,"STRONG",{});var Fdt=s(ode);lFo=r(Fdt,"beit"),Fdt.forEach(t),iFo=r(g8e," \u2014 "),hq=n(g8e,"A",{href:!0});var Tdt=s(hq);dFo=r(Tdt,"BeitModel"),Tdt.forEach(t),cFo=r(g8e," (BEiT model)"),g8e.forEach(t),mFo=i($),Bu=n($,"LI",{});var h8e=s(Bu);rde=n(h8e,"STRONG",{});var Mdt=s(rde);fFo=r(Mdt,"bert"),Mdt.forEach(t),gFo=r(h8e," \u2014 "),uq=n(h8e,"A",{href:!0});var Edt=s(uq);hFo=r(Edt,"BertModel"),Edt.forEach(t),uFo=r(h8e," (BERT model)"),h8e.forEach(t),pFo=i($),Iu=n($,"LI",{});var u8e=s(Iu);tde=n(u8e,"STRONG",{});var Cdt=s(tde);_Fo=r(Cdt,"bert-generation"),Cdt.forEach(t),bFo=r(u8e," \u2014 "),pq=n(u8e,"A",{href:!0});var wdt=s(pq);vFo=r(wdt,"BertGenerationEncoder"),wdt.forEach(t),FFo=r(u8e," (Bert Generation model)"),u8e.forEach(t),TFo=i($),Nu=n($,"LI",{});var p8e=s(Nu);ade=n(p8e,"STRONG",{});var Adt=s(ade);MFo=r(Adt,"big_bird"),Adt.forEach(t),EFo=r(p8e," \u2014 "),_q=n(p8e,"A",{href:!0});var Ldt=s(_q);CFo=r(Ldt,"BigBirdModel"),Ldt.forEach(t),wFo=r(p8e," (BigBird model)"),p8e.forEach(t),AFo=i($),qu=n($,"LI",{});var _8e=s(qu);nde=n(_8e,"STRONG",{});var ydt=s(nde);LFo=r(ydt,"bigbird_pegasus"),ydt.forEach(t),yFo=r(_8e," \u2014 "),bq=n(_8e,"A",{href:!0});var xdt=s(bq);xFo=r(xdt,"BigBirdPegasusModel"),xdt.forEach(t),$Fo=r(_8e," (BigBird-Pegasus model)"),_8e.forEach(t),kFo=i($),ju=n($,"LI",{});var b8e=s(ju);sde=n(b8e,"STRONG",{});var $dt=s(sde);SFo=r($dt,"blenderbot"),$dt.forEach(t),RFo=r(b8e," \u2014 "),vq=n(b8e,"A",{href:!0});var kdt=s(vq);PFo=r(kdt,"BlenderbotModel"),kdt.forEach(t),BFo=r(b8e," (Blenderbot model)"),b8e.forEach(t),IFo=i($),Du=n($,"LI",{});var v8e=s(Du);lde=n(v8e,"STRONG",{});var Sdt=s(lde);NFo=r(Sdt,"blenderbot-small"),Sdt.forEach(t),qFo=r(v8e," \u2014 "),Fq=n(v8e,"A",{href:!0});var Rdt=s(Fq);jFo=r(Rdt,"BlenderbotSmallModel"),Rdt.forEach(t),DFo=r(v8e," (BlenderbotSmall model)"),v8e.forEach(t),GFo=i($),Gu=n($,"LI",{});var F8e=s(Gu);ide=n(F8e,"STRONG",{});var Pdt=s(ide);OFo=r(Pdt,"bloom"),Pdt.forEach(t),VFo=r(F8e," \u2014 "),Tq=n(F8e,"A",{href:!0});var Bdt=s(Tq);XFo=r(Bdt,"BloomModel"),Bdt.forEach(t),zFo=r(F8e," (BLOOM model)"),F8e.forEach(t),QFo=i($),Ou=n($,"LI",{});var T8e=s(Ou);dde=n(T8e,"STRONG",{});var Idt=s(dde);WFo=r(Idt,"camembert"),Idt.forEach(t),HFo=r(T8e," \u2014 "),Mq=n(T8e,"A",{href:!0});var Ndt=s(Mq);UFo=r(Ndt,"CamembertModel"),Ndt.forEach(t),JFo=r(T8e," (CamemBERT model)"),T8e.forEach(t),YFo=i($),Vu=n($,"LI",{});var M8e=s(Vu);cde=n(M8e,"STRONG",{});var qdt=s(cde);KFo=r(qdt,"canine"),qdt.forEach(t),ZFo=r(M8e," \u2014 "),Eq=n(M8e,"A",{href:!0});var jdt=s(Eq);e1o=r(jdt,"CanineModel"),jdt.forEach(t),o1o=r(M8e," (CANINE model)"),M8e.forEach(t),r1o=i($),Xu=n($,"LI",{});var E8e=s(Xu);mde=n(E8e,"STRONG",{});var Ddt=s(mde);t1o=r(Ddt,"clip"),Ddt.forEach(t),a1o=r(E8e," \u2014 "),Cq=n(E8e,"A",{href:!0});var Gdt=s(Cq);n1o=r(Gdt,"CLIPModel"),Gdt.forEach(t),s1o=r(E8e," (CLIP model)"),E8e.forEach(t),l1o=i($),zu=n($,"LI",{});var C8e=s(zu);fde=n(C8e,"STRONG",{});var Odt=s(fde);i1o=r(Odt,"codegen"),Odt.forEach(t),d1o=r(C8e," \u2014 "),wq=n(C8e,"A",{href:!0});var Vdt=s(wq);c1o=r(Vdt,"CodeGenModel"),Vdt.forEach(t),m1o=r(C8e," (CodeGen model)"),C8e.forEach(t),f1o=i($),Qu=n($,"LI",{});var w8e=s(Qu);gde=n(w8e,"STRONG",{});var Xdt=s(gde);g1o=r(Xdt,"convbert"),Xdt.forEach(t),h1o=r(w8e," \u2014 "),Aq=n(w8e,"A",{href:!0});var zdt=s(Aq);u1o=r(zdt,"ConvBertModel"),zdt.forEach(t),p1o=r(w8e," (ConvBERT model)"),w8e.forEach(t),_1o=i($),Wu=n($,"LI",{});var A8e=s(Wu);hde=n(A8e,"STRONG",{});var Qdt=s(hde);b1o=r(Qdt,"convnext"),Qdt.forEach(t),v1o=r(A8e," \u2014 "),Lq=n(A8e,"A",{href:!0});var Wdt=s(Lq);F1o=r(Wdt,"ConvNextModel"),Wdt.forEach(t),T1o=r(A8e," (ConvNeXT model)"),A8e.forEach(t),M1o=i($),Hu=n($,"LI",{});var L8e=s(Hu);ude=n(L8e,"STRONG",{});var Hdt=s(ude);E1o=r(Hdt,"ctrl"),Hdt.forEach(t),C1o=r(L8e," \u2014 "),yq=n(L8e,"A",{href:!0});var Udt=s(yq);w1o=r(Udt,"CTRLModel"),Udt.forEach(t),A1o=r(L8e," (CTRL model)"),L8e.forEach(t),L1o=i($),Uu=n($,"LI",{});var y8e=s(Uu);pde=n(y8e,"STRONG",{});var Jdt=s(pde);y1o=r(Jdt,"cvt"),Jdt.forEach(t),x1o=r(y8e," \u2014 "),xq=n(y8e,"A",{href:!0});var Ydt=s(xq);$1o=r(Ydt,"CvtModel"),Ydt.forEach(t),k1o=r(y8e," (CvT model)"),y8e.forEach(t),S1o=i($),Ju=n($,"LI",{});var x8e=s(Ju);_de=n(x8e,"STRONG",{});var Kdt=s(_de);R1o=r(Kdt,"data2vec-audio"),Kdt.forEach(t),P1o=r(x8e," \u2014 "),$q=n(x8e,"A",{href:!0});var Zdt=s($q);B1o=r(Zdt,"Data2VecAudioModel"),Zdt.forEach(t),I1o=r(x8e," (Data2VecAudio model)"),x8e.forEach(t),N1o=i($),Yu=n($,"LI",{});var $8e=s(Yu);bde=n($8e,"STRONG",{});var ect=s(bde);q1o=r(ect,"data2vec-text"),ect.forEach(t),j1o=r($8e," \u2014 "),kq=n($8e,"A",{href:!0});var oct=s(kq);D1o=r(oct,"Data2VecTextModel"),oct.forEach(t),G1o=r($8e," (Data2VecText model)"),$8e.forEach(t),O1o=i($),Ku=n($,"LI",{});var k8e=s(Ku);vde=n(k8e,"STRONG",{});var rct=s(vde);V1o=r(rct,"data2vec-vision"),rct.forEach(t),X1o=r(k8e," \u2014 "),Sq=n(k8e,"A",{href:!0});var tct=s(Sq);z1o=r(tct,"Data2VecVisionModel"),tct.forEach(t),Q1o=r(k8e," (Data2VecVision model)"),k8e.forEach(t),W1o=i($),Zu=n($,"LI",{});var S8e=s(Zu);Fde=n(S8e,"STRONG",{});var act=s(Fde);H1o=r(act,"deberta"),act.forEach(t),U1o=r(S8e," \u2014 "),Rq=n(S8e,"A",{href:!0});var nct=s(Rq);J1o=r(nct,"DebertaModel"),nct.forEach(t),Y1o=r(S8e," (DeBERTa model)"),S8e.forEach(t),K1o=i($),ep=n($,"LI",{});var R8e=s(ep);Tde=n(R8e,"STRONG",{});var sct=s(Tde);Z1o=r(sct,"deberta-v2"),sct.forEach(t),eTo=r(R8e," \u2014 "),Pq=n(R8e,"A",{href:!0});var lct=s(Pq);oTo=r(lct,"DebertaV2Model"),lct.forEach(t),rTo=r(R8e," (DeBERTa-v2 model)"),R8e.forEach(t),tTo=i($),op=n($,"LI",{});var P8e=s(op);Mde=n(P8e,"STRONG",{});var ict=s(Mde);aTo=r(ict,"decision_transformer"),ict.forEach(t),nTo=r(P8e," \u2014 "),Bq=n(P8e,"A",{href:!0});var dct=s(Bq);sTo=r(dct,"DecisionTransformerModel"),dct.forEach(t),lTo=r(P8e," (Decision Transformer model)"),P8e.forEach(t),iTo=i($),rp=n($,"LI",{});var B8e=s(rp);Ede=n(B8e,"STRONG",{});var cct=s(Ede);dTo=r(cct,"deit"),cct.forEach(t),cTo=r(B8e," \u2014 "),Iq=n(B8e,"A",{href:!0});var mct=s(Iq);mTo=r(mct,"DeiTModel"),mct.forEach(t),fTo=r(B8e," (DeiT model)"),B8e.forEach(t),gTo=i($),tp=n($,"LI",{});var I8e=s(tp);Cde=n(I8e,"STRONG",{});var fct=s(Cde);hTo=r(fct,"detr"),fct.forEach(t),uTo=r(I8e," \u2014 "),Nq=n(I8e,"A",{href:!0});var gct=s(Nq);pTo=r(gct,"DetrModel"),gct.forEach(t),_To=r(I8e," (DETR model)"),I8e.forEach(t),bTo=i($),ap=n($,"LI",{});var N8e=s(ap);wde=n(N8e,"STRONG",{});var hct=s(wde);vTo=r(hct,"distilbert"),hct.forEach(t),FTo=r(N8e," \u2014 "),qq=n(N8e,"A",{href:!0});var uct=s(qq);TTo=r(uct,"DistilBertModel"),uct.forEach(t),MTo=r(N8e," (DistilBERT model)"),N8e.forEach(t),ETo=i($),np=n($,"LI",{});var q8e=s(np);Ade=n(q8e,"STRONG",{});var pct=s(Ade);CTo=r(pct,"dpr"),pct.forEach(t),wTo=r(q8e," \u2014 "),jq=n(q8e,"A",{href:!0});var _ct=s(jq);ATo=r(_ct,"DPRQuestionEncoder"),_ct.forEach(t),LTo=r(q8e," (DPR model)"),q8e.forEach(t),yTo=i($),sp=n($,"LI",{});var j8e=s(sp);Lde=n(j8e,"STRONG",{});var bct=s(Lde);xTo=r(bct,"dpt"),bct.forEach(t),$To=r(j8e," \u2014 "),Dq=n(j8e,"A",{href:!0});var vct=s(Dq);kTo=r(vct,"DPTModel"),vct.forEach(t),STo=r(j8e," (DPT model)"),j8e.forEach(t),RTo=i($),lp=n($,"LI",{});var D8e=s(lp);yde=n(D8e,"STRONG",{});var Fct=s(yde);PTo=r(Fct,"electra"),Fct.forEach(t),BTo=r(D8e," \u2014 "),Gq=n(D8e,"A",{href:!0});var Tct=s(Gq);ITo=r(Tct,"ElectraModel"),Tct.forEach(t),NTo=r(D8e," (ELECTRA model)"),D8e.forEach(t),qTo=i($),ip=n($,"LI",{});var G8e=s(ip);xde=n(G8e,"STRONG",{});var Mct=s(xde);jTo=r(Mct,"flaubert"),Mct.forEach(t),DTo=r(G8e," \u2014 "),Oq=n(G8e,"A",{href:!0});var Ect=s(Oq);GTo=r(Ect,"FlaubertModel"),Ect.forEach(t),OTo=r(G8e," (FlauBERT model)"),G8e.forEach(t),VTo=i($),dp=n($,"LI",{});var O8e=s(dp);$de=n(O8e,"STRONG",{});var Cct=s($de);XTo=r(Cct,"flava"),Cct.forEach(t),zTo=r(O8e," \u2014 "),Vq=n(O8e,"A",{href:!0});var wct=s(Vq);QTo=r(wct,"FlavaModel"),wct.forEach(t),WTo=r(O8e," (FLAVA model)"),O8e.forEach(t),HTo=i($),cp=n($,"LI",{});var V8e=s(cp);kde=n(V8e,"STRONG",{});var Act=s(kde);UTo=r(Act,"fnet"),Act.forEach(t),JTo=r(V8e," \u2014 "),Xq=n(V8e,"A",{href:!0});var Lct=s(Xq);YTo=r(Lct,"FNetModel"),Lct.forEach(t),KTo=r(V8e," (FNet model)"),V8e.forEach(t),ZTo=i($),mp=n($,"LI",{});var X8e=s(mp);Sde=n(X8e,"STRONG",{});var yct=s(Sde);eMo=r(yct,"fsmt"),yct.forEach(t),oMo=r(X8e," \u2014 "),zq=n(X8e,"A",{href:!0});var xct=s(zq);rMo=r(xct,"FSMTModel"),xct.forEach(t),tMo=r(X8e," (FairSeq Machine-Translation model)"),X8e.forEach(t),aMo=i($),Xs=n($,"LI",{});var tS=s(Xs);Rde=n(tS,"STRONG",{});var $ct=s(Rde);nMo=r($ct,"funnel"),$ct.forEach(t),sMo=r(tS," \u2014 "),Qq=n(tS,"A",{href:!0});var kct=s(Qq);lMo=r(kct,"FunnelModel"),kct.forEach(t),iMo=r(tS," or "),Wq=n(tS,"A",{href:!0});var Sct=s(Wq);dMo=r(Sct,"FunnelBaseModel"),Sct.forEach(t),cMo=r(tS," (Funnel Transformer model)"),tS.forEach(t),mMo=i($),fp=n($,"LI",{});var z8e=s(fp);Pde=n(z8e,"STRONG",{});var Rct=s(Pde);fMo=r(Rct,"glpn"),Rct.forEach(t),gMo=r(z8e," \u2014 "),Hq=n(z8e,"A",{href:!0});var Pct=s(Hq);hMo=r(Pct,"GLPNModel"),Pct.forEach(t),uMo=r(z8e," (GLPN model)"),z8e.forEach(t),pMo=i($),gp=n($,"LI",{});var Q8e=s(gp);Bde=n(Q8e,"STRONG",{});var Bct=s(Bde);_Mo=r(Bct,"gpt2"),Bct.forEach(t),bMo=r(Q8e," \u2014 "),Uq=n(Q8e,"A",{href:!0});var Ict=s(Uq);vMo=r(Ict,"GPT2Model"),Ict.forEach(t),FMo=r(Q8e," (OpenAI GPT-2 model)"),Q8e.forEach(t),TMo=i($),hp=n($,"LI",{});var W8e=s(hp);Ide=n(W8e,"STRONG",{});var Nct=s(Ide);MMo=r(Nct,"gpt_neo"),Nct.forEach(t),EMo=r(W8e," \u2014 "),Jq=n(W8e,"A",{href:!0});var qct=s(Jq);CMo=r(qct,"GPTNeoModel"),qct.forEach(t),wMo=r(W8e," (GPT Neo model)"),W8e.forEach(t),AMo=i($),up=n($,"LI",{});var H8e=s(up);Nde=n(H8e,"STRONG",{});var jct=s(Nde);LMo=r(jct,"gpt_neox"),jct.forEach(t),yMo=r(H8e," \u2014 "),Yq=n(H8e,"A",{href:!0});var Dct=s(Yq);xMo=r(Dct,"GPTNeoXModel"),Dct.forEach(t),$Mo=r(H8e," (GPT NeoX model)"),H8e.forEach(t),kMo=i($),pp=n($,"LI",{});var U8e=s(pp);qde=n(U8e,"STRONG",{});var Gct=s(qde);SMo=r(Gct,"gptj"),Gct.forEach(t),RMo=r(U8e," \u2014 "),Kq=n(U8e,"A",{href:!0});var Oct=s(Kq);PMo=r(Oct,"GPTJModel"),Oct.forEach(t),BMo=r(U8e," (GPT-J model)"),U8e.forEach(t),IMo=i($),_p=n($,"LI",{});var J8e=s(_p);jde=n(J8e,"STRONG",{});var Vct=s(jde);NMo=r(Vct,"hubert"),Vct.forEach(t),qMo=r(J8e," \u2014 "),Zq=n(J8e,"A",{href:!0});var Xct=s(Zq);jMo=r(Xct,"HubertModel"),Xct.forEach(t),DMo=r(J8e," (Hubert model)"),J8e.forEach(t),GMo=i($),bp=n($,"LI",{});var Y8e=s(bp);Dde=n(Y8e,"STRONG",{});var zct=s(Dde);OMo=r(zct,"ibert"),zct.forEach(t),VMo=r(Y8e," \u2014 "),ej=n(Y8e,"A",{href:!0});var Qct=s(ej);XMo=r(Qct,"IBertModel"),Qct.forEach(t),zMo=r(Y8e," (I-BERT model)"),Y8e.forEach(t),QMo=i($),vp=n($,"LI",{});var K8e=s(vp);Gde=n(K8e,"STRONG",{});var Wct=s(Gde);WMo=r(Wct,"imagegpt"),Wct.forEach(t),HMo=r(K8e," \u2014 "),oj=n(K8e,"A",{href:!0});var Hct=s(oj);UMo=r(Hct,"ImageGPTModel"),Hct.forEach(t),JMo=r(K8e," (ImageGPT model)"),K8e.forEach(t),YMo=i($),Fp=n($,"LI",{});var Z8e=s(Fp);Ode=n(Z8e,"STRONG",{});var Uct=s(Ode);KMo=r(Uct,"layoutlm"),Uct.forEach(t),ZMo=r(Z8e," \u2014 "),rj=n(Z8e,"A",{href:!0});var Jct=s(rj);eEo=r(Jct,"LayoutLMModel"),Jct.forEach(t),oEo=r(Z8e," (LayoutLM model)"),Z8e.forEach(t),rEo=i($),Tp=n($,"LI",{});var e9e=s(Tp);Vde=n(e9e,"STRONG",{});var Yct=s(Vde);tEo=r(Yct,"layoutlmv2"),Yct.forEach(t),aEo=r(e9e," \u2014 "),tj=n(e9e,"A",{href:!0});var Kct=s(tj);nEo=r(Kct,"LayoutLMv2Model"),Kct.forEach(t),sEo=r(e9e," (LayoutLMv2 model)"),e9e.forEach(t),lEo=i($),Mp=n($,"LI",{});var o9e=s(Mp);Xde=n(o9e,"STRONG",{});var Zct=s(Xde);iEo=r(Zct,"layoutlmv3"),Zct.forEach(t),dEo=r(o9e," \u2014 "),aj=n(o9e,"A",{href:!0});var emt=s(aj);cEo=r(emt,"LayoutLMv3Model"),emt.forEach(t),mEo=r(o9e," (LayoutLMv3 model)"),o9e.forEach(t),fEo=i($),Ep=n($,"LI",{});var r9e=s(Ep);zde=n(r9e,"STRONG",{});var omt=s(zde);gEo=r(omt,"led"),omt.forEach(t),hEo=r(r9e," \u2014 "),nj=n(r9e,"A",{href:!0});var rmt=s(nj);uEo=r(rmt,"LEDModel"),rmt.forEach(t),pEo=r(r9e," (LED model)"),r9e.forEach(t),_Eo=i($),Cp=n($,"LI",{});var t9e=s(Cp);Qde=n(t9e,"STRONG",{});var tmt=s(Qde);bEo=r(tmt,"levit"),tmt.forEach(t),vEo=r(t9e," \u2014 "),sj=n(t9e,"A",{href:!0});var amt=s(sj);FEo=r(amt,"LevitModel"),amt.forEach(t),TEo=r(t9e," (LeViT model)"),t9e.forEach(t),MEo=i($),wp=n($,"LI",{});var a9e=s(wp);Wde=n(a9e,"STRONG",{});var nmt=s(Wde);EEo=r(nmt,"longformer"),nmt.forEach(t),CEo=r(a9e," \u2014 "),lj=n(a9e,"A",{href:!0});var smt=s(lj);wEo=r(smt,"LongformerModel"),smt.forEach(t),AEo=r(a9e," (Longformer model)"),a9e.forEach(t),LEo=i($),Ap=n($,"LI",{});var n9e=s(Ap);Hde=n(n9e,"STRONG",{});var lmt=s(Hde);yEo=r(lmt,"longt5"),lmt.forEach(t),xEo=r(n9e," \u2014 "),ij=n(n9e,"A",{href:!0});var imt=s(ij);$Eo=r(imt,"LongT5Model"),imt.forEach(t),kEo=r(n9e," (LongT5 model)"),n9e.forEach(t),SEo=i($),Lp=n($,"LI",{});var s9e=s(Lp);Ude=n(s9e,"STRONG",{});var dmt=s(Ude);REo=r(dmt,"luke"),dmt.forEach(t),PEo=r(s9e," \u2014 "),dj=n(s9e,"A",{href:!0});var cmt=s(dj);BEo=r(cmt,"LukeModel"),cmt.forEach(t),IEo=r(s9e," (LUKE model)"),s9e.forEach(t),NEo=i($),yp=n($,"LI",{});var l9e=s(yp);Jde=n(l9e,"STRONG",{});var mmt=s(Jde);qEo=r(mmt,"lxmert"),mmt.forEach(t),jEo=r(l9e," \u2014 "),cj=n(l9e,"A",{href:!0});var fmt=s(cj);DEo=r(fmt,"LxmertModel"),fmt.forEach(t),GEo=r(l9e," (LXMERT model)"),l9e.forEach(t),OEo=i($),xp=n($,"LI",{});var i9e=s(xp);Yde=n(i9e,"STRONG",{});var gmt=s(Yde);VEo=r(gmt,"m2m_100"),gmt.forEach(t),XEo=r(i9e," \u2014 "),mj=n(i9e,"A",{href:!0});var hmt=s(mj);zEo=r(hmt,"M2M100Model"),hmt.forEach(t),QEo=r(i9e," (M2M100 model)"),i9e.forEach(t),WEo=i($),$p=n($,"LI",{});var d9e=s($p);Kde=n(d9e,"STRONG",{});var umt=s(Kde);HEo=r(umt,"marian"),umt.forEach(t),UEo=r(d9e," \u2014 "),fj=n(d9e,"A",{href:!0});var pmt=s(fj);JEo=r(pmt,"MarianModel"),pmt.forEach(t),YEo=r(d9e," (Marian model)"),d9e.forEach(t),KEo=i($),kp=n($,"LI",{});var c9e=s(kp);Zde=n(c9e,"STRONG",{});var _mt=s(Zde);ZEo=r(_mt,"maskformer"),_mt.forEach(t),e4o=r(c9e," \u2014 "),gj=n(c9e,"A",{href:!0});var bmt=s(gj);o4o=r(bmt,"MaskFormerModel"),bmt.forEach(t),r4o=r(c9e," (MaskFormer model)"),c9e.forEach(t),t4o=i($),Sp=n($,"LI",{});var m9e=s(Sp);ece=n(m9e,"STRONG",{});var vmt=s(ece);a4o=r(vmt,"mbart"),vmt.forEach(t),n4o=r(m9e," \u2014 "),hj=n(m9e,"A",{href:!0});var Fmt=s(hj);s4o=r(Fmt,"MBartModel"),Fmt.forEach(t),l4o=r(m9e," (mBART model)"),m9e.forEach(t),i4o=i($),Rp=n($,"LI",{});var f9e=s(Rp);oce=n(f9e,"STRONG",{});var Tmt=s(oce);d4o=r(Tmt,"mctct"),Tmt.forEach(t),c4o=r(f9e," \u2014 "),uj=n(f9e,"A",{href:!0});var Mmt=s(uj);m4o=r(Mmt,"MCTCTModel"),Mmt.forEach(t),f4o=r(f9e," (M-CTC-T model)"),f9e.forEach(t),g4o=i($),Pp=n($,"LI",{});var g9e=s(Pp);rce=n(g9e,"STRONG",{});var Emt=s(rce);h4o=r(Emt,"megatron-bert"),Emt.forEach(t),u4o=r(g9e," \u2014 "),pj=n(g9e,"A",{href:!0});var Cmt=s(pj);p4o=r(Cmt,"MegatronBertModel"),Cmt.forEach(t),_4o=r(g9e," (Megatron-BERT model)"),g9e.forEach(t),b4o=i($),Bp=n($,"LI",{});var h9e=s(Bp);tce=n(h9e,"STRONG",{});var wmt=s(tce);v4o=r(wmt,"mobilebert"),wmt.forEach(t),F4o=r(h9e," \u2014 "),_j=n(h9e,"A",{href:!0});var Amt=s(_j);T4o=r(Amt,"MobileBertModel"),Amt.forEach(t),M4o=r(h9e," (MobileBERT model)"),h9e.forEach(t),E4o=i($),Ip=n($,"LI",{});var u9e=s(Ip);ace=n(u9e,"STRONG",{});var Lmt=s(ace);C4o=r(Lmt,"mpnet"),Lmt.forEach(t),w4o=r(u9e," \u2014 "),bj=n(u9e,"A",{href:!0});var ymt=s(bj);A4o=r(ymt,"MPNetModel"),ymt.forEach(t),L4o=r(u9e," (MPNet model)"),u9e.forEach(t),y4o=i($),Np=n($,"LI",{});var p9e=s(Np);nce=n(p9e,"STRONG",{});var xmt=s(nce);x4o=r(xmt,"mt5"),xmt.forEach(t),$4o=r(p9e," \u2014 "),vj=n(p9e,"A",{href:!0});var $mt=s(vj);k4o=r($mt,"MT5Model"),$mt.forEach(t),S4o=r(p9e," (MT5 model)"),p9e.forEach(t),R4o=i($),qp=n($,"LI",{});var _9e=s(qp);sce=n(_9e,"STRONG",{});var kmt=s(sce);P4o=r(kmt,"nezha"),kmt.forEach(t),B4o=r(_9e," \u2014 "),Fj=n(_9e,"A",{href:!0});var Smt=s(Fj);I4o=r(Smt,"NezhaModel"),Smt.forEach(t),N4o=r(_9e," (Nezha model)"),_9e.forEach(t),q4o=i($),jp=n($,"LI",{});var b9e=s(jp);lce=n(b9e,"STRONG",{});var Rmt=s(lce);j4o=r(Rmt,"nystromformer"),Rmt.forEach(t),D4o=r(b9e," \u2014 "),Tj=n(b9e,"A",{href:!0});var Pmt=s(Tj);G4o=r(Pmt,"NystromformerModel"),Pmt.forEach(t),O4o=r(b9e," (Nystr\xF6mformer model)"),b9e.forEach(t),V4o=i($),Dp=n($,"LI",{});var v9e=s(Dp);ice=n(v9e,"STRONG",{});var Bmt=s(ice);X4o=r(Bmt,"openai-gpt"),Bmt.forEach(t),z4o=r(v9e," \u2014 "),Mj=n(v9e,"A",{href:!0});var Imt=s(Mj);Q4o=r(Imt,"OpenAIGPTModel"),Imt.forEach(t),W4o=r(v9e," (OpenAI GPT model)"),v9e.forEach(t),H4o=i($),Gp=n($,"LI",{});var F9e=s(Gp);dce=n(F9e,"STRONG",{});var Nmt=s(dce);U4o=r(Nmt,"opt"),Nmt.forEach(t),J4o=r(F9e," \u2014 "),Ej=n(F9e,"A",{href:!0});var qmt=s(Ej);Y4o=r(qmt,"OPTModel"),qmt.forEach(t),K4o=r(F9e," (OPT model)"),F9e.forEach(t),Z4o=i($),Op=n($,"LI",{});var T9e=s(Op);cce=n(T9e,"STRONG",{});var jmt=s(cce);eCo=r(jmt,"pegasus"),jmt.forEach(t),oCo=r(T9e," \u2014 "),Cj=n(T9e,"A",{href:!0});var Dmt=s(Cj);rCo=r(Dmt,"PegasusModel"),Dmt.forEach(t),tCo=r(T9e," (Pegasus model)"),T9e.forEach(t),aCo=i($),Vp=n($,"LI",{});var M9e=s(Vp);mce=n(M9e,"STRONG",{});var Gmt=s(mce);nCo=r(Gmt,"perceiver"),Gmt.forEach(t),sCo=r(M9e," \u2014 "),wj=n(M9e,"A",{href:!0});var Omt=s(wj);lCo=r(Omt,"PerceiverModel"),Omt.forEach(t),iCo=r(M9e," (Perceiver model)"),M9e.forEach(t),dCo=i($),Xp=n($,"LI",{});var E9e=s(Xp);fce=n(E9e,"STRONG",{});var Vmt=s(fce);cCo=r(Vmt,"plbart"),Vmt.forEach(t),mCo=r(E9e," \u2014 "),Aj=n(E9e,"A",{href:!0});var Xmt=s(Aj);fCo=r(Xmt,"PLBartModel"),Xmt.forEach(t),gCo=r(E9e," (PLBart model)"),E9e.forEach(t),hCo=i($),zp=n($,"LI",{});var C9e=s(zp);gce=n(C9e,"STRONG",{});var zmt=s(gce);uCo=r(zmt,"poolformer"),zmt.forEach(t),pCo=r(C9e," \u2014 "),Lj=n(C9e,"A",{href:!0});var Qmt=s(Lj);_Co=r(Qmt,"PoolFormerModel"),Qmt.forEach(t),bCo=r(C9e," (PoolFormer model)"),C9e.forEach(t),vCo=i($),Qp=n($,"LI",{});var w9e=s(Qp);hce=n(w9e,"STRONG",{});var Wmt=s(hce);FCo=r(Wmt,"prophetnet"),Wmt.forEach(t),TCo=r(w9e," \u2014 "),yj=n(w9e,"A",{href:!0});var Hmt=s(yj);MCo=r(Hmt,"ProphetNetModel"),Hmt.forEach(t),ECo=r(w9e," (ProphetNet model)"),w9e.forEach(t),CCo=i($),Wp=n($,"LI",{});var A9e=s(Wp);uce=n(A9e,"STRONG",{});var Umt=s(uce);wCo=r(Umt,"qdqbert"),Umt.forEach(t),ACo=r(A9e," \u2014 "),xj=n(A9e,"A",{href:!0});var Jmt=s(xj);LCo=r(Jmt,"QDQBertModel"),Jmt.forEach(t),yCo=r(A9e," (QDQBert model)"),A9e.forEach(t),xCo=i($),Hp=n($,"LI",{});var L9e=s(Hp);pce=n(L9e,"STRONG",{});var Ymt=s(pce);$Co=r(Ymt,"reformer"),Ymt.forEach(t),kCo=r(L9e," \u2014 "),$j=n(L9e,"A",{href:!0});var Kmt=s($j);SCo=r(Kmt,"ReformerModel"),Kmt.forEach(t),RCo=r(L9e," (Reformer model)"),L9e.forEach(t),PCo=i($),Up=n($,"LI",{});var y9e=s(Up);_ce=n(y9e,"STRONG",{});var Zmt=s(_ce);BCo=r(Zmt,"regnet"),Zmt.forEach(t),ICo=r(y9e," \u2014 "),kj=n(y9e,"A",{href:!0});var eft=s(kj);NCo=r(eft,"RegNetModel"),eft.forEach(t),qCo=r(y9e," (RegNet model)"),y9e.forEach(t),jCo=i($),Jp=n($,"LI",{});var x9e=s(Jp);bce=n(x9e,"STRONG",{});var oft=s(bce);DCo=r(oft,"rembert"),oft.forEach(t),GCo=r(x9e," \u2014 "),Sj=n(x9e,"A",{href:!0});var rft=s(Sj);OCo=r(rft,"RemBertModel"),rft.forEach(t),VCo=r(x9e," (RemBERT model)"),x9e.forEach(t),XCo=i($),Yp=n($,"LI",{});var $9e=s(Yp);vce=n($9e,"STRONG",{});var tft=s(vce);zCo=r(tft,"resnet"),tft.forEach(t),QCo=r($9e," \u2014 "),Rj=n($9e,"A",{href:!0});var aft=s(Rj);WCo=r(aft,"ResNetModel"),aft.forEach(t),HCo=r($9e," (ResNet model)"),$9e.forEach(t),UCo=i($),Kp=n($,"LI",{});var k9e=s(Kp);Fce=n(k9e,"STRONG",{});var nft=s(Fce);JCo=r(nft,"retribert"),nft.forEach(t),YCo=r(k9e," \u2014 "),Pj=n(k9e,"A",{href:!0});var sft=s(Pj);KCo=r(sft,"RetriBertModel"),sft.forEach(t),ZCo=r(k9e," (RetriBERT model)"),k9e.forEach(t),e5o=i($),Zp=n($,"LI",{});var S9e=s(Zp);Tce=n(S9e,"STRONG",{});var lft=s(Tce);o5o=r(lft,"roberta"),lft.forEach(t),r5o=r(S9e," \u2014 "),Bj=n(S9e,"A",{href:!0});var ift=s(Bj);t5o=r(ift,"RobertaModel"),ift.forEach(t),a5o=r(S9e," (RoBERTa model)"),S9e.forEach(t),n5o=i($),e_=n($,"LI",{});var R9e=s(e_);Mce=n(R9e,"STRONG",{});var dft=s(Mce);s5o=r(dft,"roformer"),dft.forEach(t),l5o=r(R9e," \u2014 "),Ij=n(R9e,"A",{href:!0});var cft=s(Ij);i5o=r(cft,"RoFormerModel"),cft.forEach(t),d5o=r(R9e," (RoFormer model)"),R9e.forEach(t),c5o=i($),o_=n($,"LI",{});var P9e=s(o_);Ece=n(P9e,"STRONG",{});var mft=s(Ece);m5o=r(mft,"segformer"),mft.forEach(t),f5o=r(P9e," \u2014 "),Nj=n(P9e,"A",{href:!0});var fft=s(Nj);g5o=r(fft,"SegformerModel"),fft.forEach(t),h5o=r(P9e," (SegFormer model)"),P9e.forEach(t),u5o=i($),r_=n($,"LI",{});var B9e=s(r_);Cce=n(B9e,"STRONG",{});var gft=s(Cce);p5o=r(gft,"sew"),gft.forEach(t),_5o=r(B9e," \u2014 "),qj=n(B9e,"A",{href:!0});var hft=s(qj);b5o=r(hft,"SEWModel"),hft.forEach(t),v5o=r(B9e," (SEW model)"),B9e.forEach(t),F5o=i($),t_=n($,"LI",{});var I9e=s(t_);wce=n(I9e,"STRONG",{});var uft=s(wce);T5o=r(uft,"sew-d"),uft.forEach(t),M5o=r(I9e," \u2014 "),jj=n(I9e,"A",{href:!0});var pft=s(jj);E5o=r(pft,"SEWDModel"),pft.forEach(t),C5o=r(I9e," (SEW-D model)"),I9e.forEach(t),w5o=i($),a_=n($,"LI",{});var N9e=s(a_);Ace=n(N9e,"STRONG",{});var _ft=s(Ace);A5o=r(_ft,"speech_to_text"),_ft.forEach(t),L5o=r(N9e," \u2014 "),Dj=n(N9e,"A",{href:!0});var bft=s(Dj);y5o=r(bft,"Speech2TextModel"),bft.forEach(t),x5o=r(N9e," (Speech2Text model)"),N9e.forEach(t),$5o=i($),n_=n($,"LI",{});var q9e=s(n_);Lce=n(q9e,"STRONG",{});var vft=s(Lce);k5o=r(vft,"splinter"),vft.forEach(t),S5o=r(q9e," \u2014 "),Gj=n(q9e,"A",{href:!0});var Fft=s(Gj);R5o=r(Fft,"SplinterModel"),Fft.forEach(t),P5o=r(q9e," (Splinter model)"),q9e.forEach(t),B5o=i($),s_=n($,"LI",{});var j9e=s(s_);yce=n(j9e,"STRONG",{});var Tft=s(yce);I5o=r(Tft,"squeezebert"),Tft.forEach(t),N5o=r(j9e," \u2014 "),Oj=n(j9e,"A",{href:!0});var Mft=s(Oj);q5o=r(Mft,"SqueezeBertModel"),Mft.forEach(t),j5o=r(j9e," (SqueezeBERT model)"),j9e.forEach(t),D5o=i($),l_=n($,"LI",{});var D9e=s(l_);xce=n(D9e,"STRONG",{});var Eft=s(xce);G5o=r(Eft,"swin"),Eft.forEach(t),O5o=r(D9e," \u2014 "),Vj=n(D9e,"A",{href:!0});var Cft=s(Vj);V5o=r(Cft,"SwinModel"),Cft.forEach(t),X5o=r(D9e," (Swin Transformer model)"),D9e.forEach(t),z5o=i($),i_=n($,"LI",{});var G9e=s(i_);$ce=n(G9e,"STRONG",{});var wft=s($ce);Q5o=r(wft,"t5"),wft.forEach(t),W5o=r(G9e," \u2014 "),Xj=n(G9e,"A",{href:!0});var Aft=s(Xj);H5o=r(Aft,"T5Model"),Aft.forEach(t),U5o=r(G9e," (T5 model)"),G9e.forEach(t),J5o=i($),d_=n($,"LI",{});var O9e=s(d_);kce=n(O9e,"STRONG",{});var Lft=s(kce);Y5o=r(Lft,"tapas"),Lft.forEach(t),K5o=r(O9e," \u2014 "),zj=n(O9e,"A",{href:!0});var yft=s(zj);Z5o=r(yft,"TapasModel"),yft.forEach(t),e3o=r(O9e," (TAPAS model)"),O9e.forEach(t),o3o=i($),c_=n($,"LI",{});var V9e=s(c_);Sce=n(V9e,"STRONG",{});var xft=s(Sce);r3o=r(xft,"trajectory_transformer"),xft.forEach(t),t3o=r(V9e," \u2014 "),Qj=n(V9e,"A",{href:!0});var $ft=s(Qj);a3o=r($ft,"TrajectoryTransformerModel"),$ft.forEach(t),n3o=r(V9e," (Trajectory Transformer model)"),V9e.forEach(t),s3o=i($),m_=n($,"LI",{});var X9e=s(m_);Rce=n(X9e,"STRONG",{});var kft=s(Rce);l3o=r(kft,"transfo-xl"),kft.forEach(t),i3o=r(X9e," \u2014 "),Wj=n(X9e,"A",{href:!0});var Sft=s(Wj);d3o=r(Sft,"TransfoXLModel"),Sft.forEach(t),c3o=r(X9e," (Transformer-XL model)"),X9e.forEach(t),m3o=i($),f_=n($,"LI",{});var z9e=s(f_);Pce=n(z9e,"STRONG",{});var Rft=s(Pce);f3o=r(Rft,"unispeech"),Rft.forEach(t),g3o=r(z9e," \u2014 "),Hj=n(z9e,"A",{href:!0});var Pft=s(Hj);h3o=r(Pft,"UniSpeechModel"),Pft.forEach(t),u3o=r(z9e," (UniSpeech model)"),z9e.forEach(t),p3o=i($),g_=n($,"LI",{});var Q9e=s(g_);Bce=n(Q9e,"STRONG",{});var Bft=s(Bce);_3o=r(Bft,"unispeech-sat"),Bft.forEach(t),b3o=r(Q9e," \u2014 "),Uj=n(Q9e,"A",{href:!0});var Ift=s(Uj);v3o=r(Ift,"UniSpeechSatModel"),Ift.forEach(t),F3o=r(Q9e," (UniSpeechSat model)"),Q9e.forEach(t),T3o=i($),h_=n($,"LI",{});var W9e=s(h_);Ice=n(W9e,"STRONG",{});var Nft=s(Ice);M3o=r(Nft,"van"),Nft.forEach(t),E3o=r(W9e," \u2014 "),Jj=n(W9e,"A",{href:!0});var qft=s(Jj);C3o=r(qft,"VanModel"),qft.forEach(t),w3o=r(W9e," (VAN model)"),W9e.forEach(t),A3o=i($),u_=n($,"LI",{});var H9e=s(u_);Nce=n(H9e,"STRONG",{});var jft=s(Nce);L3o=r(jft,"vilt"),jft.forEach(t),y3o=r(H9e," \u2014 "),Yj=n(H9e,"A",{href:!0});var Dft=s(Yj);x3o=r(Dft,"ViltModel"),Dft.forEach(t),$3o=r(H9e," (ViLT model)"),H9e.forEach(t),k3o=i($),p_=n($,"LI",{});var U9e=s(p_);qce=n(U9e,"STRONG",{});var Gft=s(qce);S3o=r(Gft,"vision-text-dual-encoder"),Gft.forEach(t),R3o=r(U9e," \u2014 "),Kj=n(U9e,"A",{href:!0});var Oft=s(Kj);P3o=r(Oft,"VisionTextDualEncoderModel"),Oft.forEach(t),B3o=r(U9e," (VisionTextDualEncoder model)"),U9e.forEach(t),I3o=i($),__=n($,"LI",{});var J9e=s(__);jce=n(J9e,"STRONG",{});var Vft=s(jce);N3o=r(Vft,"visual_bert"),Vft.forEach(t),q3o=r(J9e," \u2014 "),Zj=n(J9e,"A",{href:!0});var Xft=s(Zj);j3o=r(Xft,"VisualBertModel"),Xft.forEach(t),D3o=r(J9e," (VisualBERT model)"),J9e.forEach(t),G3o=i($),b_=n($,"LI",{});var Y9e=s(b_);Dce=n(Y9e,"STRONG",{});var zft=s(Dce);O3o=r(zft,"vit"),zft.forEach(t),V3o=r(Y9e," \u2014 "),eD=n(Y9e,"A",{href:!0});var Qft=s(eD);X3o=r(Qft,"ViTModel"),Qft.forEach(t),z3o=r(Y9e," (ViT model)"),Y9e.forEach(t),Q3o=i($),v_=n($,"LI",{});var K9e=s(v_);Gce=n(K9e,"STRONG",{});var Wft=s(Gce);W3o=r(Wft,"vit_mae"),Wft.forEach(t),H3o=r(K9e," \u2014 "),oD=n(K9e,"A",{href:!0});var Hft=s(oD);U3o=r(Hft,"ViTMAEModel"),Hft.forEach(t),J3o=r(K9e," (ViTMAE model)"),K9e.forEach(t),Y3o=i($),F_=n($,"LI",{});var Z9e=s(F_);Oce=n(Z9e,"STRONG",{});var Uft=s(Oce);K3o=r(Uft,"wav2vec2"),Uft.forEach(t),Z3o=r(Z9e," \u2014 "),rD=n(Z9e,"A",{href:!0});var Jft=s(rD);e0o=r(Jft,"Wav2Vec2Model"),Jft.forEach(t),o0o=r(Z9e," (Wav2Vec2 model)"),Z9e.forEach(t),r0o=i($),T_=n($,"LI",{});var exe=s(T_);Vce=n(exe,"STRONG",{});var Yft=s(Vce);t0o=r(Yft,"wav2vec2-conformer"),Yft.forEach(t),a0o=r(exe," \u2014 "),tD=n(exe,"A",{href:!0});var Kft=s(tD);n0o=r(Kft,"Wav2Vec2ConformerModel"),Kft.forEach(t),s0o=r(exe," (Wav2Vec2-Conformer model)"),exe.forEach(t),l0o=i($),M_=n($,"LI",{});var oxe=s(M_);Xce=n(oxe,"STRONG",{});var Zft=s(Xce);i0o=r(Zft,"wavlm"),Zft.forEach(t),d0o=r(oxe," \u2014 "),aD=n(oxe,"A",{href:!0});var egt=s(aD);c0o=r(egt,"WavLMModel"),egt.forEach(t),m0o=r(oxe," (WavLM model)"),oxe.forEach(t),f0o=i($),E_=n($,"LI",{});var rxe=s(E_);zce=n(rxe,"STRONG",{});var ogt=s(zce);g0o=r(ogt,"xglm"),ogt.forEach(t),h0o=r(rxe," \u2014 "),nD=n(rxe,"A",{href:!0});var rgt=s(nD);u0o=r(rgt,"XGLMModel"),rgt.forEach(t),p0o=r(rxe," (XGLM model)"),rxe.forEach(t),_0o=i($),C_=n($,"LI",{});var txe=s(C_);Qce=n(txe,"STRONG",{});var tgt=s(Qce);b0o=r(tgt,"xlm"),tgt.forEach(t),v0o=r(txe," \u2014 "),sD=n(txe,"A",{href:!0});var agt=s(sD);F0o=r(agt,"XLMModel"),agt.forEach(t),T0o=r(txe," (XLM model)"),txe.forEach(t),M0o=i($),w_=n($,"LI",{});var axe=s(w_);Wce=n(axe,"STRONG",{});var ngt=s(Wce);E0o=r(ngt,"xlm-prophetnet"),ngt.forEach(t),C0o=r(axe," \u2014 "),lD=n(axe,"A",{href:!0});var sgt=s(lD);w0o=r(sgt,"XLMProphetNetModel"),sgt.forEach(t),A0o=r(axe," (XLM-ProphetNet model)"),axe.forEach(t),L0o=i($),A_=n($,"LI",{});var nxe=s(A_);Hce=n(nxe,"STRONG",{});var lgt=s(Hce);y0o=r(lgt,"xlm-roberta"),lgt.forEach(t),x0o=r(nxe," \u2014 "),iD=n(nxe,"A",{href:!0});var igt=s(iD);$0o=r(igt,"XLMRobertaModel"),igt.forEach(t),k0o=r(nxe," (XLM-RoBERTa model)"),nxe.forEach(t),S0o=i($),L_=n($,"LI",{});var sxe=s(L_);Uce=n(sxe,"STRONG",{});var dgt=s(Uce);R0o=r(dgt,"xlm-roberta-xl"),dgt.forEach(t),P0o=r(sxe," \u2014 "),dD=n(sxe,"A",{href:!0});var cgt=s(dD);B0o=r(cgt,"XLMRobertaXLModel"),cgt.forEach(t),I0o=r(sxe," (XLM-RoBERTa-XL model)"),sxe.forEach(t),N0o=i($),y_=n($,"LI",{});var lxe=s(y_);Jce=n(lxe,"STRONG",{});var mgt=s(Jce);q0o=r(mgt,"xlnet"),mgt.forEach(t),j0o=r(lxe," \u2014 "),cD=n(lxe,"A",{href:!0});var fgt=s(cD);D0o=r(fgt,"XLNetModel"),fgt.forEach(t),G0o=r(lxe," (XLNet model)"),lxe.forEach(t),O0o=i($),x_=n($,"LI",{});var ixe=s(x_);Yce=n(ixe,"STRONG",{});var ggt=s(Yce);V0o=r(ggt,"yolos"),ggt.forEach(t),X0o=r(ixe," \u2014 "),mD=n(ixe,"A",{href:!0});var hgt=s(mD);z0o=r(hgt,"YolosModel"),hgt.forEach(t),Q0o=r(ixe," (YOLOS model)"),ixe.forEach(t),W0o=i($),$_=n($,"LI",{});var dxe=s($_);Kce=n(dxe,"STRONG",{});var ugt=s(Kce);H0o=r(ugt,"yoso"),ugt.forEach(t),U0o=r(dxe," \u2014 "),fD=n(dxe,"A",{href:!0});var pgt=s(fD);J0o=r(pgt,"YosoModel"),pgt.forEach(t),Y0o=r(dxe," (YOSO model)"),dxe.forEach(t),$.forEach(t),K0o=i(aa),k_=n(aa,"P",{});var cxe=s(k_);Z0o=r(cxe,"The model is set in evaluation mode by default using "),Zce=n(cxe,"CODE",{});var _gt=s(Zce);ewo=r(_gt,"model.eval()"),_gt.forEach(t),owo=r(cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(cxe,"CODE",{});var bgt=s(eme);rwo=r(bgt,"model.train()"),bgt.forEach(t),cxe.forEach(t),two=i(aa),T(S_.$$.fragment,aa),aa.forEach(t),Ks.forEach(t),_Oe=i(m),ji=n(m,"H2",{class:!0});var EXe=s(ji);R_=n(EXe,"A",{id:!0,class:!0,href:!0});var vgt=s(R_);ome=n(vgt,"SPAN",{});var Fgt=s(ome);T(cy.$$.fragment,Fgt),Fgt.forEach(t),vgt.forEach(t),awo=i(EXe),rme=n(EXe,"SPAN",{});var Tgt=s(rme);nwo=r(Tgt,"AutoModelForPreTraining"),Tgt.forEach(t),EXe.forEach(t),bOe=i(m),$o=n(m,"DIV",{class:!0});var Zs=s($o);T(my.$$.fragment,Zs),swo=i(Zs),Di=n(Zs,"P",{});var koe=s(Di);lwo=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gD=n(koe,"A",{href:!0});var Mgt=s(gD);iwo=r(Mgt,"from_pretrained()"),Mgt.forEach(t),dwo=r(koe," class method or the "),hD=n(koe,"A",{href:!0});var Egt=s(hD);cwo=r(Egt,"from_config()"),Egt.forEach(t),mwo=r(koe,` class
method.`),koe.forEach(t),fwo=i(Zs),fy=n(Zs,"P",{});var CXe=s(fy);gwo=r(CXe,"This class cannot be instantiated directly using "),tme=n(CXe,"CODE",{});var Cgt=s(tme);hwo=r(Cgt,"__init__()"),Cgt.forEach(t),uwo=r(CXe," (throws an error)."),CXe.forEach(t),pwo=i(Zs),st=n(Zs,"DIV",{class:!0});var N6=s(st);T(gy.$$.fragment,N6),_wo=i(N6),ame=n(N6,"P",{});var wgt=s(ame);bwo=r(wgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wgt.forEach(t),vwo=i(N6),Gi=n(N6,"P",{});var Soe=s(Gi);Fwo=r(Soe,`Note:
Loading a model from its configuration file does `),nme=n(Soe,"STRONG",{});var Agt=s(nme);Two=r(Agt,"not"),Agt.forEach(t),Mwo=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uD=n(Soe,"A",{href:!0});var Lgt=s(uD);Ewo=r(Lgt,"from_pretrained()"),Lgt.forEach(t),Cwo=r(Soe," to load the model weights."),Soe.forEach(t),wwo=i(N6),T(P_.$$.fragment,N6),N6.forEach(t),Awo=i(Zs),Ye=n(Zs,"DIV",{class:!0});var na=s(Ye);T(hy.$$.fragment,na),Lwo=i(na),sme=n(na,"P",{});var ygt=s(sme);ywo=r(ygt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ygt.forEach(t),xwo=i(na),Pa=n(na,"P",{});var q6=s(Pa);$wo=r(q6,"The model class to instantiate is selected based on the "),lme=n(q6,"CODE",{});var xgt=s(lme);kwo=r(xgt,"model_type"),xgt.forEach(t),Swo=r(q6,` property of the config object (either
passed as an argument or loaded from `),ime=n(q6,"CODE",{});var $gt=s(ime);Rwo=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),Pwo=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(q6,"CODE",{});var kgt=s(dme);Bwo=r(kgt,"pretrained_model_name_or_path"),kgt.forEach(t),Iwo=r(q6,":"),q6.forEach(t),Nwo=i(na),G=n(na,"UL",{});var O=s(G);B_=n(O,"LI",{});var mxe=s(B_);cme=n(mxe,"STRONG",{});var Sgt=s(cme);qwo=r(Sgt,"albert"),Sgt.forEach(t),jwo=r(mxe," \u2014 "),pD=n(mxe,"A",{href:!0});var Rgt=s(pD);Dwo=r(Rgt,"AlbertForPreTraining"),Rgt.forEach(t),Gwo=r(mxe," (ALBERT model)"),mxe.forEach(t),Owo=i(O),I_=n(O,"LI",{});var fxe=s(I_);mme=n(fxe,"STRONG",{});var Pgt=s(mme);Vwo=r(Pgt,"bart"),Pgt.forEach(t),Xwo=r(fxe," \u2014 "),_D=n(fxe,"A",{href:!0});var Bgt=s(_D);zwo=r(Bgt,"BartForConditionalGeneration"),Bgt.forEach(t),Qwo=r(fxe," (BART model)"),fxe.forEach(t),Wwo=i(O),N_=n(O,"LI",{});var gxe=s(N_);fme=n(gxe,"STRONG",{});var Igt=s(fme);Hwo=r(Igt,"bert"),Igt.forEach(t),Uwo=r(gxe," \u2014 "),bD=n(gxe,"A",{href:!0});var Ngt=s(bD);Jwo=r(Ngt,"BertForPreTraining"),Ngt.forEach(t),Ywo=r(gxe," (BERT model)"),gxe.forEach(t),Kwo=i(O),q_=n(O,"LI",{});var hxe=s(q_);gme=n(hxe,"STRONG",{});var qgt=s(gme);Zwo=r(qgt,"big_bird"),qgt.forEach(t),eAo=r(hxe," \u2014 "),vD=n(hxe,"A",{href:!0});var jgt=s(vD);oAo=r(jgt,"BigBirdForPreTraining"),jgt.forEach(t),rAo=r(hxe," (BigBird model)"),hxe.forEach(t),tAo=i(O),j_=n(O,"LI",{});var uxe=s(j_);hme=n(uxe,"STRONG",{});var Dgt=s(hme);aAo=r(Dgt,"bloom"),Dgt.forEach(t),nAo=r(uxe," \u2014 "),FD=n(uxe,"A",{href:!0});var Ggt=s(FD);sAo=r(Ggt,"BloomForCausalLM"),Ggt.forEach(t),lAo=r(uxe," (BLOOM model)"),uxe.forEach(t),iAo=i(O),D_=n(O,"LI",{});var pxe=s(D_);ume=n(pxe,"STRONG",{});var Ogt=s(ume);dAo=r(Ogt,"camembert"),Ogt.forEach(t),cAo=r(pxe," \u2014 "),TD=n(pxe,"A",{href:!0});var Vgt=s(TD);mAo=r(Vgt,"CamembertForMaskedLM"),Vgt.forEach(t),fAo=r(pxe," (CamemBERT model)"),pxe.forEach(t),gAo=i(O),G_=n(O,"LI",{});var _xe=s(G_);pme=n(_xe,"STRONG",{});var Xgt=s(pme);hAo=r(Xgt,"ctrl"),Xgt.forEach(t),uAo=r(_xe," \u2014 "),MD=n(_xe,"A",{href:!0});var zgt=s(MD);pAo=r(zgt,"CTRLLMHeadModel"),zgt.forEach(t),_Ao=r(_xe," (CTRL model)"),_xe.forEach(t),bAo=i(O),O_=n(O,"LI",{});var bxe=s(O_);_me=n(bxe,"STRONG",{});var Qgt=s(_me);vAo=r(Qgt,"data2vec-text"),Qgt.forEach(t),FAo=r(bxe," \u2014 "),ED=n(bxe,"A",{href:!0});var Wgt=s(ED);TAo=r(Wgt,"Data2VecTextForMaskedLM"),Wgt.forEach(t),MAo=r(bxe," (Data2VecText model)"),bxe.forEach(t),EAo=i(O),V_=n(O,"LI",{});var vxe=s(V_);bme=n(vxe,"STRONG",{});var Hgt=s(bme);CAo=r(Hgt,"deberta"),Hgt.forEach(t),wAo=r(vxe," \u2014 "),CD=n(vxe,"A",{href:!0});var Ugt=s(CD);AAo=r(Ugt,"DebertaForMaskedLM"),Ugt.forEach(t),LAo=r(vxe," (DeBERTa model)"),vxe.forEach(t),yAo=i(O),X_=n(O,"LI",{});var Fxe=s(X_);vme=n(Fxe,"STRONG",{});var Jgt=s(vme);xAo=r(Jgt,"deberta-v2"),Jgt.forEach(t),$Ao=r(Fxe," \u2014 "),wD=n(Fxe,"A",{href:!0});var Ygt=s(wD);kAo=r(Ygt,"DebertaV2ForMaskedLM"),Ygt.forEach(t),SAo=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),RAo=i(O),z_=n(O,"LI",{});var Txe=s(z_);Fme=n(Txe,"STRONG",{});var Kgt=s(Fme);PAo=r(Kgt,"distilbert"),Kgt.forEach(t),BAo=r(Txe," \u2014 "),AD=n(Txe,"A",{href:!0});var Zgt=s(AD);IAo=r(Zgt,"DistilBertForMaskedLM"),Zgt.forEach(t),NAo=r(Txe," (DistilBERT model)"),Txe.forEach(t),qAo=i(O),Q_=n(O,"LI",{});var Mxe=s(Q_);Tme=n(Mxe,"STRONG",{});var eht=s(Tme);jAo=r(eht,"electra"),eht.forEach(t),DAo=r(Mxe," \u2014 "),LD=n(Mxe,"A",{href:!0});var oht=s(LD);GAo=r(oht,"ElectraForPreTraining"),oht.forEach(t),OAo=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),VAo=i(O),W_=n(O,"LI",{});var Exe=s(W_);Mme=n(Exe,"STRONG",{});var rht=s(Mme);XAo=r(rht,"flaubert"),rht.forEach(t),zAo=r(Exe," \u2014 "),yD=n(Exe,"A",{href:!0});var tht=s(yD);QAo=r(tht,"FlaubertWithLMHeadModel"),tht.forEach(t),WAo=r(Exe," (FlauBERT model)"),Exe.forEach(t),HAo=i(O),H_=n(O,"LI",{});var Cxe=s(H_);Eme=n(Cxe,"STRONG",{});var aht=s(Eme);UAo=r(aht,"flava"),aht.forEach(t),JAo=r(Cxe," \u2014 "),xD=n(Cxe,"A",{href:!0});var nht=s(xD);YAo=r(nht,"FlavaForPreTraining"),nht.forEach(t),KAo=r(Cxe," (FLAVA model)"),Cxe.forEach(t),ZAo=i(O),U_=n(O,"LI",{});var wxe=s(U_);Cme=n(wxe,"STRONG",{});var sht=s(Cme);e6o=r(sht,"fnet"),sht.forEach(t),o6o=r(wxe," \u2014 "),$D=n(wxe,"A",{href:!0});var lht=s($D);r6o=r(lht,"FNetForPreTraining"),lht.forEach(t),t6o=r(wxe," (FNet model)"),wxe.forEach(t),a6o=i(O),J_=n(O,"LI",{});var Axe=s(J_);wme=n(Axe,"STRONG",{});var iht=s(wme);n6o=r(iht,"fsmt"),iht.forEach(t),s6o=r(Axe," \u2014 "),kD=n(Axe,"A",{href:!0});var dht=s(kD);l6o=r(dht,"FSMTForConditionalGeneration"),dht.forEach(t),i6o=r(Axe," (FairSeq Machine-Translation model)"),Axe.forEach(t),d6o=i(O),Y_=n(O,"LI",{});var Lxe=s(Y_);Ame=n(Lxe,"STRONG",{});var cht=s(Ame);c6o=r(cht,"funnel"),cht.forEach(t),m6o=r(Lxe," \u2014 "),SD=n(Lxe,"A",{href:!0});var mht=s(SD);f6o=r(mht,"FunnelForPreTraining"),mht.forEach(t),g6o=r(Lxe," (Funnel Transformer model)"),Lxe.forEach(t),h6o=i(O),K_=n(O,"LI",{});var yxe=s(K_);Lme=n(yxe,"STRONG",{});var fht=s(Lme);u6o=r(fht,"gpt2"),fht.forEach(t),p6o=r(yxe," \u2014 "),RD=n(yxe,"A",{href:!0});var ght=s(RD);_6o=r(ght,"GPT2LMHeadModel"),ght.forEach(t),b6o=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),v6o=i(O),Z_=n(O,"LI",{});var xxe=s(Z_);yme=n(xxe,"STRONG",{});var hht=s(yme);F6o=r(hht,"ibert"),hht.forEach(t),T6o=r(xxe," \u2014 "),PD=n(xxe,"A",{href:!0});var uht=s(PD);M6o=r(uht,"IBertForMaskedLM"),uht.forEach(t),E6o=r(xxe," (I-BERT model)"),xxe.forEach(t),C6o=i(O),e2=n(O,"LI",{});var $xe=s(e2);xme=n($xe,"STRONG",{});var pht=s(xme);w6o=r(pht,"layoutlm"),pht.forEach(t),A6o=r($xe," \u2014 "),BD=n($xe,"A",{href:!0});var _ht=s(BD);L6o=r(_ht,"LayoutLMForMaskedLM"),_ht.forEach(t),y6o=r($xe," (LayoutLM model)"),$xe.forEach(t),x6o=i(O),o2=n(O,"LI",{});var kxe=s(o2);$me=n(kxe,"STRONG",{});var bht=s($me);$6o=r(bht,"longformer"),bht.forEach(t),k6o=r(kxe," \u2014 "),ID=n(kxe,"A",{href:!0});var vht=s(ID);S6o=r(vht,"LongformerForMaskedLM"),vht.forEach(t),R6o=r(kxe," (Longformer model)"),kxe.forEach(t),P6o=i(O),r2=n(O,"LI",{});var Sxe=s(r2);kme=n(Sxe,"STRONG",{});var Fht=s(kme);B6o=r(Fht,"lxmert"),Fht.forEach(t),I6o=r(Sxe," \u2014 "),ND=n(Sxe,"A",{href:!0});var Tht=s(ND);N6o=r(Tht,"LxmertForPreTraining"),Tht.forEach(t),q6o=r(Sxe," (LXMERT model)"),Sxe.forEach(t),j6o=i(O),t2=n(O,"LI",{});var Rxe=s(t2);Sme=n(Rxe,"STRONG",{});var Mht=s(Sme);D6o=r(Mht,"megatron-bert"),Mht.forEach(t),G6o=r(Rxe," \u2014 "),qD=n(Rxe,"A",{href:!0});var Eht=s(qD);O6o=r(Eht,"MegatronBertForPreTraining"),Eht.forEach(t),V6o=r(Rxe," (Megatron-BERT model)"),Rxe.forEach(t),X6o=i(O),a2=n(O,"LI",{});var Pxe=s(a2);Rme=n(Pxe,"STRONG",{});var Cht=s(Rme);z6o=r(Cht,"mobilebert"),Cht.forEach(t),Q6o=r(Pxe," \u2014 "),jD=n(Pxe,"A",{href:!0});var wht=s(jD);W6o=r(wht,"MobileBertForPreTraining"),wht.forEach(t),H6o=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),U6o=i(O),n2=n(O,"LI",{});var Bxe=s(n2);Pme=n(Bxe,"STRONG",{});var Aht=s(Pme);J6o=r(Aht,"mpnet"),Aht.forEach(t),Y6o=r(Bxe," \u2014 "),DD=n(Bxe,"A",{href:!0});var Lht=s(DD);K6o=r(Lht,"MPNetForMaskedLM"),Lht.forEach(t),Z6o=r(Bxe," (MPNet model)"),Bxe.forEach(t),eLo=i(O),s2=n(O,"LI",{});var Ixe=s(s2);Bme=n(Ixe,"STRONG",{});var yht=s(Bme);oLo=r(yht,"nezha"),yht.forEach(t),rLo=r(Ixe," \u2014 "),GD=n(Ixe,"A",{href:!0});var xht=s(GD);tLo=r(xht,"NezhaForPreTraining"),xht.forEach(t),aLo=r(Ixe," (Nezha model)"),Ixe.forEach(t),nLo=i(O),l2=n(O,"LI",{});var Nxe=s(l2);Ime=n(Nxe,"STRONG",{});var $ht=s(Ime);sLo=r($ht,"openai-gpt"),$ht.forEach(t),lLo=r(Nxe," \u2014 "),OD=n(Nxe,"A",{href:!0});var kht=s(OD);iLo=r(kht,"OpenAIGPTLMHeadModel"),kht.forEach(t),dLo=r(Nxe," (OpenAI GPT model)"),Nxe.forEach(t),cLo=i(O),i2=n(O,"LI",{});var qxe=s(i2);Nme=n(qxe,"STRONG",{});var Sht=s(Nme);mLo=r(Sht,"retribert"),Sht.forEach(t),fLo=r(qxe," \u2014 "),VD=n(qxe,"A",{href:!0});var Rht=s(VD);gLo=r(Rht,"RetriBertModel"),Rht.forEach(t),hLo=r(qxe," (RetriBERT model)"),qxe.forEach(t),uLo=i(O),d2=n(O,"LI",{});var jxe=s(d2);qme=n(jxe,"STRONG",{});var Pht=s(qme);pLo=r(Pht,"roberta"),Pht.forEach(t),_Lo=r(jxe," \u2014 "),XD=n(jxe,"A",{href:!0});var Bht=s(XD);bLo=r(Bht,"RobertaForMaskedLM"),Bht.forEach(t),vLo=r(jxe," (RoBERTa model)"),jxe.forEach(t),FLo=i(O),c2=n(O,"LI",{});var Dxe=s(c2);jme=n(Dxe,"STRONG",{});var Iht=s(jme);TLo=r(Iht,"splinter"),Iht.forEach(t),MLo=r(Dxe," \u2014 "),zD=n(Dxe,"A",{href:!0});var Nht=s(zD);ELo=r(Nht,"SplinterForPreTraining"),Nht.forEach(t),CLo=r(Dxe," (Splinter model)"),Dxe.forEach(t),wLo=i(O),m2=n(O,"LI",{});var Gxe=s(m2);Dme=n(Gxe,"STRONG",{});var qht=s(Dme);ALo=r(qht,"squeezebert"),qht.forEach(t),LLo=r(Gxe," \u2014 "),QD=n(Gxe,"A",{href:!0});var jht=s(QD);yLo=r(jht,"SqueezeBertForMaskedLM"),jht.forEach(t),xLo=r(Gxe," (SqueezeBERT model)"),Gxe.forEach(t),$Lo=i(O),f2=n(O,"LI",{});var Oxe=s(f2);Gme=n(Oxe,"STRONG",{});var Dht=s(Gme);kLo=r(Dht,"t5"),Dht.forEach(t),SLo=r(Oxe," \u2014 "),WD=n(Oxe,"A",{href:!0});var Ght=s(WD);RLo=r(Ght,"T5ForConditionalGeneration"),Ght.forEach(t),PLo=r(Oxe," (T5 model)"),Oxe.forEach(t),BLo=i(O),g2=n(O,"LI",{});var Vxe=s(g2);Ome=n(Vxe,"STRONG",{});var Oht=s(Ome);ILo=r(Oht,"tapas"),Oht.forEach(t),NLo=r(Vxe," \u2014 "),HD=n(Vxe,"A",{href:!0});var Vht=s(HD);qLo=r(Vht,"TapasForMaskedLM"),Vht.forEach(t),jLo=r(Vxe," (TAPAS model)"),Vxe.forEach(t),DLo=i(O),h2=n(O,"LI",{});var Xxe=s(h2);Vme=n(Xxe,"STRONG",{});var Xht=s(Vme);GLo=r(Xht,"transfo-xl"),Xht.forEach(t),OLo=r(Xxe," \u2014 "),UD=n(Xxe,"A",{href:!0});var zht=s(UD);VLo=r(zht,"TransfoXLLMHeadModel"),zht.forEach(t),XLo=r(Xxe," (Transformer-XL model)"),Xxe.forEach(t),zLo=i(O),u2=n(O,"LI",{});var zxe=s(u2);Xme=n(zxe,"STRONG",{});var Qht=s(Xme);QLo=r(Qht,"unispeech"),Qht.forEach(t),WLo=r(zxe," \u2014 "),JD=n(zxe,"A",{href:!0});var Wht=s(JD);HLo=r(Wht,"UniSpeechForPreTraining"),Wht.forEach(t),ULo=r(zxe," (UniSpeech model)"),zxe.forEach(t),JLo=i(O),p2=n(O,"LI",{});var Qxe=s(p2);zme=n(Qxe,"STRONG",{});var Hht=s(zme);YLo=r(Hht,"unispeech-sat"),Hht.forEach(t),KLo=r(Qxe," \u2014 "),YD=n(Qxe,"A",{href:!0});var Uht=s(YD);ZLo=r(Uht,"UniSpeechSatForPreTraining"),Uht.forEach(t),e7o=r(Qxe," (UniSpeechSat model)"),Qxe.forEach(t),o7o=i(O),_2=n(O,"LI",{});var Wxe=s(_2);Qme=n(Wxe,"STRONG",{});var Jht=s(Qme);r7o=r(Jht,"visual_bert"),Jht.forEach(t),t7o=r(Wxe," \u2014 "),KD=n(Wxe,"A",{href:!0});var Yht=s(KD);a7o=r(Yht,"VisualBertForPreTraining"),Yht.forEach(t),n7o=r(Wxe," (VisualBERT model)"),Wxe.forEach(t),s7o=i(O),b2=n(O,"LI",{});var Hxe=s(b2);Wme=n(Hxe,"STRONG",{});var Kht=s(Wme);l7o=r(Kht,"vit_mae"),Kht.forEach(t),i7o=r(Hxe," \u2014 "),ZD=n(Hxe,"A",{href:!0});var Zht=s(ZD);d7o=r(Zht,"ViTMAEForPreTraining"),Zht.forEach(t),c7o=r(Hxe," (ViTMAE model)"),Hxe.forEach(t),m7o=i(O),v2=n(O,"LI",{});var Uxe=s(v2);Hme=n(Uxe,"STRONG",{});var eut=s(Hme);f7o=r(eut,"wav2vec2"),eut.forEach(t),g7o=r(Uxe," \u2014 "),eG=n(Uxe,"A",{href:!0});var out=s(eG);h7o=r(out,"Wav2Vec2ForPreTraining"),out.forEach(t),u7o=r(Uxe," (Wav2Vec2 model)"),Uxe.forEach(t),p7o=i(O),F2=n(O,"LI",{});var Jxe=s(F2);Ume=n(Jxe,"STRONG",{});var rut=s(Ume);_7o=r(rut,"wav2vec2-conformer"),rut.forEach(t),b7o=r(Jxe," \u2014 "),oG=n(Jxe,"A",{href:!0});var tut=s(oG);v7o=r(tut,"Wav2Vec2ConformerForPreTraining"),tut.forEach(t),F7o=r(Jxe," (Wav2Vec2-Conformer model)"),Jxe.forEach(t),T7o=i(O),T2=n(O,"LI",{});var Yxe=s(T2);Jme=n(Yxe,"STRONG",{});var aut=s(Jme);M7o=r(aut,"xlm"),aut.forEach(t),E7o=r(Yxe," \u2014 "),rG=n(Yxe,"A",{href:!0});var nut=s(rG);C7o=r(nut,"XLMWithLMHeadModel"),nut.forEach(t),w7o=r(Yxe," (XLM model)"),Yxe.forEach(t),A7o=i(O),M2=n(O,"LI",{});var Kxe=s(M2);Yme=n(Kxe,"STRONG",{});var sut=s(Yme);L7o=r(sut,"xlm-roberta"),sut.forEach(t),y7o=r(Kxe," \u2014 "),tG=n(Kxe,"A",{href:!0});var lut=s(tG);x7o=r(lut,"XLMRobertaForMaskedLM"),lut.forEach(t),$7o=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),k7o=i(O),E2=n(O,"LI",{});var Zxe=s(E2);Kme=n(Zxe,"STRONG",{});var iut=s(Kme);S7o=r(iut,"xlm-roberta-xl"),iut.forEach(t),R7o=r(Zxe," \u2014 "),aG=n(Zxe,"A",{href:!0});var dut=s(aG);P7o=r(dut,"XLMRobertaXLForMaskedLM"),dut.forEach(t),B7o=r(Zxe," (XLM-RoBERTa-XL model)"),Zxe.forEach(t),I7o=i(O),C2=n(O,"LI",{});var e$e=s(C2);Zme=n(e$e,"STRONG",{});var cut=s(Zme);N7o=r(cut,"xlnet"),cut.forEach(t),q7o=r(e$e," \u2014 "),nG=n(e$e,"A",{href:!0});var mut=s(nG);j7o=r(mut,"XLNetLMHeadModel"),mut.forEach(t),D7o=r(e$e," (XLNet model)"),e$e.forEach(t),O.forEach(t),G7o=i(na),w2=n(na,"P",{});var o$e=s(w2);O7o=r(o$e,"The model is set in evaluation mode by default using "),efe=n(o$e,"CODE",{});var fut=s(efe);V7o=r(fut,"model.eval()"),fut.forEach(t),X7o=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(o$e,"CODE",{});var gut=s(ofe);z7o=r(gut,"model.train()"),gut.forEach(t),o$e.forEach(t),Q7o=i(na),T(A2.$$.fragment,na),na.forEach(t),Zs.forEach(t),vOe=i(m),Oi=n(m,"H2",{class:!0});var wXe=s(Oi);L2=n(wXe,"A",{id:!0,class:!0,href:!0});var hut=s(L2);rfe=n(hut,"SPAN",{});var uut=s(rfe);T(uy.$$.fragment,uut),uut.forEach(t),hut.forEach(t),W7o=i(wXe),tfe=n(wXe,"SPAN",{});var put=s(tfe);H7o=r(put,"AutoModelForCausalLM"),put.forEach(t),wXe.forEach(t),FOe=i(m),ko=n(m,"DIV",{class:!0});var el=s(ko);T(py.$$.fragment,el),U7o=i(el),Vi=n(el,"P",{});var Roe=s(Vi);J7o=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sG=n(Roe,"A",{href:!0});var _ut=s(sG);Y7o=r(_ut,"from_pretrained()"),_ut.forEach(t),K7o=r(Roe," class method or the "),lG=n(Roe,"A",{href:!0});var but=s(lG);Z7o=r(but,"from_config()"),but.forEach(t),eyo=r(Roe,` class
method.`),Roe.forEach(t),oyo=i(el),_y=n(el,"P",{});var AXe=s(_y);ryo=r(AXe,"This class cannot be instantiated directly using "),afe=n(AXe,"CODE",{});var vut=s(afe);tyo=r(vut,"__init__()"),vut.forEach(t),ayo=r(AXe," (throws an error)."),AXe.forEach(t),nyo=i(el),lt=n(el,"DIV",{class:!0});var j6=s(lt);T(by.$$.fragment,j6),syo=i(j6),nfe=n(j6,"P",{});var Fut=s(nfe);lyo=r(Fut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fut.forEach(t),iyo=i(j6),Xi=n(j6,"P",{});var Poe=s(Xi);dyo=r(Poe,`Note:
Loading a model from its configuration file does `),sfe=n(Poe,"STRONG",{});var Tut=s(sfe);cyo=r(Tut,"not"),Tut.forEach(t),myo=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=n(Poe,"A",{href:!0});var Mut=s(iG);fyo=r(Mut,"from_pretrained()"),Mut.forEach(t),gyo=r(Poe," to load the model weights."),Poe.forEach(t),hyo=i(j6),T(y2.$$.fragment,j6),j6.forEach(t),uyo=i(el),Ke=n(el,"DIV",{class:!0});var sa=s(Ke);T(vy.$$.fragment,sa),pyo=i(sa),lfe=n(sa,"P",{});var Eut=s(lfe);_yo=r(Eut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Eut.forEach(t),byo=i(sa),Ba=n(sa,"P",{});var D6=s(Ba);vyo=r(D6,"The model class to instantiate is selected based on the "),ife=n(D6,"CODE",{});var Cut=s(ife);Fyo=r(Cut,"model_type"),Cut.forEach(t),Tyo=r(D6,` property of the config object (either
passed as an argument or loaded from `),dfe=n(D6,"CODE",{});var wut=s(dfe);Myo=r(wut,"pretrained_model_name_or_path"),wut.forEach(t),Eyo=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=n(D6,"CODE",{});var Aut=s(cfe);Cyo=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),wyo=r(D6,":"),D6.forEach(t),Ayo=i(sa),z=n(sa,"UL",{});var Q=s(z);x2=n(Q,"LI",{});var r$e=s(x2);mfe=n(r$e,"STRONG",{});var Lut=s(mfe);Lyo=r(Lut,"bart"),Lut.forEach(t),yyo=r(r$e," \u2014 "),dG=n(r$e,"A",{href:!0});var yut=s(dG);xyo=r(yut,"BartForCausalLM"),yut.forEach(t),$yo=r(r$e," (BART model)"),r$e.forEach(t),kyo=i(Q),$2=n(Q,"LI",{});var t$e=s($2);ffe=n(t$e,"STRONG",{});var xut=s(ffe);Syo=r(xut,"bert"),xut.forEach(t),Ryo=r(t$e," \u2014 "),cG=n(t$e,"A",{href:!0});var $ut=s(cG);Pyo=r($ut,"BertLMHeadModel"),$ut.forEach(t),Byo=r(t$e," (BERT model)"),t$e.forEach(t),Iyo=i(Q),k2=n(Q,"LI",{});var a$e=s(k2);gfe=n(a$e,"STRONG",{});var kut=s(gfe);Nyo=r(kut,"bert-generation"),kut.forEach(t),qyo=r(a$e," \u2014 "),mG=n(a$e,"A",{href:!0});var Sut=s(mG);jyo=r(Sut,"BertGenerationDecoder"),Sut.forEach(t),Dyo=r(a$e," (Bert Generation model)"),a$e.forEach(t),Gyo=i(Q),S2=n(Q,"LI",{});var n$e=s(S2);hfe=n(n$e,"STRONG",{});var Rut=s(hfe);Oyo=r(Rut,"big_bird"),Rut.forEach(t),Vyo=r(n$e," \u2014 "),fG=n(n$e,"A",{href:!0});var Put=s(fG);Xyo=r(Put,"BigBirdForCausalLM"),Put.forEach(t),zyo=r(n$e," (BigBird model)"),n$e.forEach(t),Qyo=i(Q),R2=n(Q,"LI",{});var s$e=s(R2);ufe=n(s$e,"STRONG",{});var But=s(ufe);Wyo=r(But,"bigbird_pegasus"),But.forEach(t),Hyo=r(s$e," \u2014 "),gG=n(s$e,"A",{href:!0});var Iut=s(gG);Uyo=r(Iut,"BigBirdPegasusForCausalLM"),Iut.forEach(t),Jyo=r(s$e," (BigBird-Pegasus model)"),s$e.forEach(t),Yyo=i(Q),P2=n(Q,"LI",{});var l$e=s(P2);pfe=n(l$e,"STRONG",{});var Nut=s(pfe);Kyo=r(Nut,"blenderbot"),Nut.forEach(t),Zyo=r(l$e," \u2014 "),hG=n(l$e,"A",{href:!0});var qut=s(hG);e8o=r(qut,"BlenderbotForCausalLM"),qut.forEach(t),o8o=r(l$e," (Blenderbot model)"),l$e.forEach(t),r8o=i(Q),B2=n(Q,"LI",{});var i$e=s(B2);_fe=n(i$e,"STRONG",{});var jut=s(_fe);t8o=r(jut,"blenderbot-small"),jut.forEach(t),a8o=r(i$e," \u2014 "),uG=n(i$e,"A",{href:!0});var Dut=s(uG);n8o=r(Dut,"BlenderbotSmallForCausalLM"),Dut.forEach(t),s8o=r(i$e," (BlenderbotSmall model)"),i$e.forEach(t),l8o=i(Q),I2=n(Q,"LI",{});var d$e=s(I2);bfe=n(d$e,"STRONG",{});var Gut=s(bfe);i8o=r(Gut,"bloom"),Gut.forEach(t),d8o=r(d$e," \u2014 "),pG=n(d$e,"A",{href:!0});var Out=s(pG);c8o=r(Out,"BloomForCausalLM"),Out.forEach(t),m8o=r(d$e," (BLOOM model)"),d$e.forEach(t),f8o=i(Q),N2=n(Q,"LI",{});var c$e=s(N2);vfe=n(c$e,"STRONG",{});var Vut=s(vfe);g8o=r(Vut,"camembert"),Vut.forEach(t),h8o=r(c$e," \u2014 "),_G=n(c$e,"A",{href:!0});var Xut=s(_G);u8o=r(Xut,"CamembertForCausalLM"),Xut.forEach(t),p8o=r(c$e," (CamemBERT model)"),c$e.forEach(t),_8o=i(Q),q2=n(Q,"LI",{});var m$e=s(q2);Ffe=n(m$e,"STRONG",{});var zut=s(Ffe);b8o=r(zut,"codegen"),zut.forEach(t),v8o=r(m$e," \u2014 "),bG=n(m$e,"A",{href:!0});var Qut=s(bG);F8o=r(Qut,"CodeGenForCausalLM"),Qut.forEach(t),T8o=r(m$e," (CodeGen model)"),m$e.forEach(t),M8o=i(Q),j2=n(Q,"LI",{});var f$e=s(j2);Tfe=n(f$e,"STRONG",{});var Wut=s(Tfe);E8o=r(Wut,"ctrl"),Wut.forEach(t),C8o=r(f$e," \u2014 "),vG=n(f$e,"A",{href:!0});var Hut=s(vG);w8o=r(Hut,"CTRLLMHeadModel"),Hut.forEach(t),A8o=r(f$e," (CTRL model)"),f$e.forEach(t),L8o=i(Q),D2=n(Q,"LI",{});var g$e=s(D2);Mfe=n(g$e,"STRONG",{});var Uut=s(Mfe);y8o=r(Uut,"data2vec-text"),Uut.forEach(t),x8o=r(g$e," \u2014 "),FG=n(g$e,"A",{href:!0});var Jut=s(FG);$8o=r(Jut,"Data2VecTextForCausalLM"),Jut.forEach(t),k8o=r(g$e," (Data2VecText model)"),g$e.forEach(t),S8o=i(Q),G2=n(Q,"LI",{});var h$e=s(G2);Efe=n(h$e,"STRONG",{});var Yut=s(Efe);R8o=r(Yut,"electra"),Yut.forEach(t),P8o=r(h$e," \u2014 "),TG=n(h$e,"A",{href:!0});var Kut=s(TG);B8o=r(Kut,"ElectraForCausalLM"),Kut.forEach(t),I8o=r(h$e," (ELECTRA model)"),h$e.forEach(t),N8o=i(Q),O2=n(Q,"LI",{});var u$e=s(O2);Cfe=n(u$e,"STRONG",{});var Zut=s(Cfe);q8o=r(Zut,"gpt2"),Zut.forEach(t),j8o=r(u$e," \u2014 "),MG=n(u$e,"A",{href:!0});var ept=s(MG);D8o=r(ept,"GPT2LMHeadModel"),ept.forEach(t),G8o=r(u$e," (OpenAI GPT-2 model)"),u$e.forEach(t),O8o=i(Q),V2=n(Q,"LI",{});var p$e=s(V2);wfe=n(p$e,"STRONG",{});var opt=s(wfe);V8o=r(opt,"gpt_neo"),opt.forEach(t),X8o=r(p$e," \u2014 "),EG=n(p$e,"A",{href:!0});var rpt=s(EG);z8o=r(rpt,"GPTNeoForCausalLM"),rpt.forEach(t),Q8o=r(p$e," (GPT Neo model)"),p$e.forEach(t),W8o=i(Q),X2=n(Q,"LI",{});var _$e=s(X2);Afe=n(_$e,"STRONG",{});var tpt=s(Afe);H8o=r(tpt,"gpt_neox"),tpt.forEach(t),U8o=r(_$e," \u2014 "),CG=n(_$e,"A",{href:!0});var apt=s(CG);J8o=r(apt,"GPTNeoXForCausalLM"),apt.forEach(t),Y8o=r(_$e," (GPT NeoX model)"),_$e.forEach(t),K8o=i(Q),z2=n(Q,"LI",{});var b$e=s(z2);Lfe=n(b$e,"STRONG",{});var npt=s(Lfe);Z8o=r(npt,"gptj"),npt.forEach(t),e9o=r(b$e," \u2014 "),wG=n(b$e,"A",{href:!0});var spt=s(wG);o9o=r(spt,"GPTJForCausalLM"),spt.forEach(t),r9o=r(b$e," (GPT-J model)"),b$e.forEach(t),t9o=i(Q),Q2=n(Q,"LI",{});var v$e=s(Q2);yfe=n(v$e,"STRONG",{});var lpt=s(yfe);a9o=r(lpt,"marian"),lpt.forEach(t),n9o=r(v$e," \u2014 "),AG=n(v$e,"A",{href:!0});var ipt=s(AG);s9o=r(ipt,"MarianForCausalLM"),ipt.forEach(t),l9o=r(v$e," (Marian model)"),v$e.forEach(t),i9o=i(Q),W2=n(Q,"LI",{});var F$e=s(W2);xfe=n(F$e,"STRONG",{});var dpt=s(xfe);d9o=r(dpt,"mbart"),dpt.forEach(t),c9o=r(F$e," \u2014 "),LG=n(F$e,"A",{href:!0});var cpt=s(LG);m9o=r(cpt,"MBartForCausalLM"),cpt.forEach(t),f9o=r(F$e," (mBART model)"),F$e.forEach(t),g9o=i(Q),H2=n(Q,"LI",{});var T$e=s(H2);$fe=n(T$e,"STRONG",{});var mpt=s($fe);h9o=r(mpt,"megatron-bert"),mpt.forEach(t),u9o=r(T$e," \u2014 "),yG=n(T$e,"A",{href:!0});var fpt=s(yG);p9o=r(fpt,"MegatronBertForCausalLM"),fpt.forEach(t),_9o=r(T$e," (Megatron-BERT model)"),T$e.forEach(t),b9o=i(Q),U2=n(Q,"LI",{});var M$e=s(U2);kfe=n(M$e,"STRONG",{});var gpt=s(kfe);v9o=r(gpt,"openai-gpt"),gpt.forEach(t),F9o=r(M$e," \u2014 "),xG=n(M$e,"A",{href:!0});var hpt=s(xG);T9o=r(hpt,"OpenAIGPTLMHeadModel"),hpt.forEach(t),M9o=r(M$e," (OpenAI GPT model)"),M$e.forEach(t),E9o=i(Q),J2=n(Q,"LI",{});var E$e=s(J2);Sfe=n(E$e,"STRONG",{});var upt=s(Sfe);C9o=r(upt,"opt"),upt.forEach(t),w9o=r(E$e," \u2014 "),$G=n(E$e,"A",{href:!0});var ppt=s($G);A9o=r(ppt,"OPTForCausalLM"),ppt.forEach(t),L9o=r(E$e," (OPT model)"),E$e.forEach(t),y9o=i(Q),Y2=n(Q,"LI",{});var C$e=s(Y2);Rfe=n(C$e,"STRONG",{});var _pt=s(Rfe);x9o=r(_pt,"pegasus"),_pt.forEach(t),$9o=r(C$e," \u2014 "),kG=n(C$e,"A",{href:!0});var bpt=s(kG);k9o=r(bpt,"PegasusForCausalLM"),bpt.forEach(t),S9o=r(C$e," (Pegasus model)"),C$e.forEach(t),R9o=i(Q),K2=n(Q,"LI",{});var w$e=s(K2);Pfe=n(w$e,"STRONG",{});var vpt=s(Pfe);P9o=r(vpt,"plbart"),vpt.forEach(t),B9o=r(w$e," \u2014 "),SG=n(w$e,"A",{href:!0});var Fpt=s(SG);I9o=r(Fpt,"PLBartForCausalLM"),Fpt.forEach(t),N9o=r(w$e," (PLBart model)"),w$e.forEach(t),q9o=i(Q),Z2=n(Q,"LI",{});var A$e=s(Z2);Bfe=n(A$e,"STRONG",{});var Tpt=s(Bfe);j9o=r(Tpt,"prophetnet"),Tpt.forEach(t),D9o=r(A$e," \u2014 "),RG=n(A$e,"A",{href:!0});var Mpt=s(RG);G9o=r(Mpt,"ProphetNetForCausalLM"),Mpt.forEach(t),O9o=r(A$e," (ProphetNet model)"),A$e.forEach(t),V9o=i(Q),eb=n(Q,"LI",{});var L$e=s(eb);Ife=n(L$e,"STRONG",{});var Ept=s(Ife);X9o=r(Ept,"qdqbert"),Ept.forEach(t),z9o=r(L$e," \u2014 "),PG=n(L$e,"A",{href:!0});var Cpt=s(PG);Q9o=r(Cpt,"QDQBertLMHeadModel"),Cpt.forEach(t),W9o=r(L$e," (QDQBert model)"),L$e.forEach(t),H9o=i(Q),ob=n(Q,"LI",{});var y$e=s(ob);Nfe=n(y$e,"STRONG",{});var wpt=s(Nfe);U9o=r(wpt,"reformer"),wpt.forEach(t),J9o=r(y$e," \u2014 "),BG=n(y$e,"A",{href:!0});var Apt=s(BG);Y9o=r(Apt,"ReformerModelWithLMHead"),Apt.forEach(t),K9o=r(y$e," (Reformer model)"),y$e.forEach(t),Z9o=i(Q),rb=n(Q,"LI",{});var x$e=s(rb);qfe=n(x$e,"STRONG",{});var Lpt=s(qfe);exo=r(Lpt,"rembert"),Lpt.forEach(t),oxo=r(x$e," \u2014 "),IG=n(x$e,"A",{href:!0});var ypt=s(IG);rxo=r(ypt,"RemBertForCausalLM"),ypt.forEach(t),txo=r(x$e," (RemBERT model)"),x$e.forEach(t),axo=i(Q),tb=n(Q,"LI",{});var $$e=s(tb);jfe=n($$e,"STRONG",{});var xpt=s(jfe);nxo=r(xpt,"roberta"),xpt.forEach(t),sxo=r($$e," \u2014 "),NG=n($$e,"A",{href:!0});var $pt=s(NG);lxo=r($pt,"RobertaForCausalLM"),$pt.forEach(t),ixo=r($$e," (RoBERTa model)"),$$e.forEach(t),dxo=i(Q),ab=n(Q,"LI",{});var k$e=s(ab);Dfe=n(k$e,"STRONG",{});var kpt=s(Dfe);cxo=r(kpt,"roformer"),kpt.forEach(t),mxo=r(k$e," \u2014 "),qG=n(k$e,"A",{href:!0});var Spt=s(qG);fxo=r(Spt,"RoFormerForCausalLM"),Spt.forEach(t),gxo=r(k$e," (RoFormer model)"),k$e.forEach(t),hxo=i(Q),nb=n(Q,"LI",{});var S$e=s(nb);Gfe=n(S$e,"STRONG",{});var Rpt=s(Gfe);uxo=r(Rpt,"speech_to_text_2"),Rpt.forEach(t),pxo=r(S$e," \u2014 "),jG=n(S$e,"A",{href:!0});var Ppt=s(jG);_xo=r(Ppt,"Speech2Text2ForCausalLM"),Ppt.forEach(t),bxo=r(S$e," (Speech2Text2 model)"),S$e.forEach(t),vxo=i(Q),sb=n(Q,"LI",{});var R$e=s(sb);Ofe=n(R$e,"STRONG",{});var Bpt=s(Ofe);Fxo=r(Bpt,"transfo-xl"),Bpt.forEach(t),Txo=r(R$e," \u2014 "),DG=n(R$e,"A",{href:!0});var Ipt=s(DG);Mxo=r(Ipt,"TransfoXLLMHeadModel"),Ipt.forEach(t),Exo=r(R$e," (Transformer-XL model)"),R$e.forEach(t),Cxo=i(Q),lb=n(Q,"LI",{});var P$e=s(lb);Vfe=n(P$e,"STRONG",{});var Npt=s(Vfe);wxo=r(Npt,"trocr"),Npt.forEach(t),Axo=r(P$e," \u2014 "),GG=n(P$e,"A",{href:!0});var qpt=s(GG);Lxo=r(qpt,"TrOCRForCausalLM"),qpt.forEach(t),yxo=r(P$e," (TrOCR model)"),P$e.forEach(t),xxo=i(Q),ib=n(Q,"LI",{});var B$e=s(ib);Xfe=n(B$e,"STRONG",{});var jpt=s(Xfe);$xo=r(jpt,"xglm"),jpt.forEach(t),kxo=r(B$e," \u2014 "),OG=n(B$e,"A",{href:!0});var Dpt=s(OG);Sxo=r(Dpt,"XGLMForCausalLM"),Dpt.forEach(t),Rxo=r(B$e," (XGLM model)"),B$e.forEach(t),Pxo=i(Q),db=n(Q,"LI",{});var I$e=s(db);zfe=n(I$e,"STRONG",{});var Gpt=s(zfe);Bxo=r(Gpt,"xlm"),Gpt.forEach(t),Ixo=r(I$e," \u2014 "),VG=n(I$e,"A",{href:!0});var Opt=s(VG);Nxo=r(Opt,"XLMWithLMHeadModel"),Opt.forEach(t),qxo=r(I$e," (XLM model)"),I$e.forEach(t),jxo=i(Q),cb=n(Q,"LI",{});var N$e=s(cb);Qfe=n(N$e,"STRONG",{});var Vpt=s(Qfe);Dxo=r(Vpt,"xlm-prophetnet"),Vpt.forEach(t),Gxo=r(N$e," \u2014 "),XG=n(N$e,"A",{href:!0});var Xpt=s(XG);Oxo=r(Xpt,"XLMProphetNetForCausalLM"),Xpt.forEach(t),Vxo=r(N$e," (XLM-ProphetNet model)"),N$e.forEach(t),Xxo=i(Q),mb=n(Q,"LI",{});var q$e=s(mb);Wfe=n(q$e,"STRONG",{});var zpt=s(Wfe);zxo=r(zpt,"xlm-roberta"),zpt.forEach(t),Qxo=r(q$e," \u2014 "),zG=n(q$e,"A",{href:!0});var Qpt=s(zG);Wxo=r(Qpt,"XLMRobertaForCausalLM"),Qpt.forEach(t),Hxo=r(q$e," (XLM-RoBERTa model)"),q$e.forEach(t),Uxo=i(Q),fb=n(Q,"LI",{});var j$e=s(fb);Hfe=n(j$e,"STRONG",{});var Wpt=s(Hfe);Jxo=r(Wpt,"xlm-roberta-xl"),Wpt.forEach(t),Yxo=r(j$e," \u2014 "),QG=n(j$e,"A",{href:!0});var Hpt=s(QG);Kxo=r(Hpt,"XLMRobertaXLForCausalLM"),Hpt.forEach(t),Zxo=r(j$e," (XLM-RoBERTa-XL model)"),j$e.forEach(t),e$o=i(Q),gb=n(Q,"LI",{});var D$e=s(gb);Ufe=n(D$e,"STRONG",{});var Upt=s(Ufe);o$o=r(Upt,"xlnet"),Upt.forEach(t),r$o=r(D$e," \u2014 "),WG=n(D$e,"A",{href:!0});var Jpt=s(WG);t$o=r(Jpt,"XLNetLMHeadModel"),Jpt.forEach(t),a$o=r(D$e," (XLNet model)"),D$e.forEach(t),Q.forEach(t),n$o=i(sa),hb=n(sa,"P",{});var G$e=s(hb);s$o=r(G$e,"The model is set in evaluation mode by default using "),Jfe=n(G$e,"CODE",{});var Ypt=s(Jfe);l$o=r(Ypt,"model.eval()"),Ypt.forEach(t),i$o=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yfe=n(G$e,"CODE",{});var Kpt=s(Yfe);d$o=r(Kpt,"model.train()"),Kpt.forEach(t),G$e.forEach(t),c$o=i(sa),T(ub.$$.fragment,sa),sa.forEach(t),el.forEach(t),TOe=i(m),zi=n(m,"H2",{class:!0});var LXe=s(zi);pb=n(LXe,"A",{id:!0,class:!0,href:!0});var Zpt=s(pb);Kfe=n(Zpt,"SPAN",{});var e_t=s(Kfe);T(Fy.$$.fragment,e_t),e_t.forEach(t),Zpt.forEach(t),m$o=i(LXe),Zfe=n(LXe,"SPAN",{});var o_t=s(Zfe);f$o=r(o_t,"AutoModelForMaskedLM"),o_t.forEach(t),LXe.forEach(t),MOe=i(m),So=n(m,"DIV",{class:!0});var ol=s(So);T(Ty.$$.fragment,ol),g$o=i(ol),Qi=n(ol,"P",{});var Boe=s(Qi);h$o=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HG=n(Boe,"A",{href:!0});var r_t=s(HG);u$o=r(r_t,"from_pretrained()"),r_t.forEach(t),p$o=r(Boe," class method or the "),UG=n(Boe,"A",{href:!0});var t_t=s(UG);_$o=r(t_t,"from_config()"),t_t.forEach(t),b$o=r(Boe,` class
method.`),Boe.forEach(t),v$o=i(ol),My=n(ol,"P",{});var yXe=s(My);F$o=r(yXe,"This class cannot be instantiated directly using "),ege=n(yXe,"CODE",{});var a_t=s(ege);T$o=r(a_t,"__init__()"),a_t.forEach(t),M$o=r(yXe," (throws an error)."),yXe.forEach(t),E$o=i(ol),it=n(ol,"DIV",{class:!0});var G6=s(it);T(Ey.$$.fragment,G6),C$o=i(G6),oge=n(G6,"P",{});var n_t=s(oge);w$o=r(n_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),n_t.forEach(t),A$o=i(G6),Wi=n(G6,"P",{});var Ioe=s(Wi);L$o=r(Ioe,`Note:
Loading a model from its configuration file does `),rge=n(Ioe,"STRONG",{});var s_t=s(rge);y$o=r(s_t,"not"),s_t.forEach(t),x$o=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(Ioe,"A",{href:!0});var l_t=s(JG);$$o=r(l_t,"from_pretrained()"),l_t.forEach(t),k$o=r(Ioe," to load the model weights."),Ioe.forEach(t),S$o=i(G6),T(_b.$$.fragment,G6),G6.forEach(t),R$o=i(ol),Ze=n(ol,"DIV",{class:!0});var la=s(Ze);T(Cy.$$.fragment,la),P$o=i(la),tge=n(la,"P",{});var i_t=s(tge);B$o=r(i_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i_t.forEach(t),I$o=i(la),Ia=n(la,"P",{});var O6=s(Ia);N$o=r(O6,"The model class to instantiate is selected based on the "),age=n(O6,"CODE",{});var d_t=s(age);q$o=r(d_t,"model_type"),d_t.forEach(t),j$o=r(O6,` property of the config object (either
passed as an argument or loaded from `),nge=n(O6,"CODE",{});var c_t=s(nge);D$o=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),G$o=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=n(O6,"CODE",{});var m_t=s(sge);O$o=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),V$o=r(O6,":"),O6.forEach(t),X$o=i(la),W=n(la,"UL",{});var U=s(W);bb=n(U,"LI",{});var O$e=s(bb);lge=n(O$e,"STRONG",{});var f_t=s(lge);z$o=r(f_t,"albert"),f_t.forEach(t),Q$o=r(O$e," \u2014 "),YG=n(O$e,"A",{href:!0});var g_t=s(YG);W$o=r(g_t,"AlbertForMaskedLM"),g_t.forEach(t),H$o=r(O$e," (ALBERT model)"),O$e.forEach(t),U$o=i(U),vb=n(U,"LI",{});var V$e=s(vb);ige=n(V$e,"STRONG",{});var h_t=s(ige);J$o=r(h_t,"bart"),h_t.forEach(t),Y$o=r(V$e," \u2014 "),KG=n(V$e,"A",{href:!0});var u_t=s(KG);K$o=r(u_t,"BartForConditionalGeneration"),u_t.forEach(t),Z$o=r(V$e," (BART model)"),V$e.forEach(t),eko=i(U),Fb=n(U,"LI",{});var X$e=s(Fb);dge=n(X$e,"STRONG",{});var p_t=s(dge);oko=r(p_t,"bert"),p_t.forEach(t),rko=r(X$e," \u2014 "),ZG=n(X$e,"A",{href:!0});var __t=s(ZG);tko=r(__t,"BertForMaskedLM"),__t.forEach(t),ako=r(X$e," (BERT model)"),X$e.forEach(t),nko=i(U),Tb=n(U,"LI",{});var z$e=s(Tb);cge=n(z$e,"STRONG",{});var b_t=s(cge);sko=r(b_t,"big_bird"),b_t.forEach(t),lko=r(z$e," \u2014 "),eO=n(z$e,"A",{href:!0});var v_t=s(eO);iko=r(v_t,"BigBirdForMaskedLM"),v_t.forEach(t),dko=r(z$e," (BigBird model)"),z$e.forEach(t),cko=i(U),Mb=n(U,"LI",{});var Q$e=s(Mb);mge=n(Q$e,"STRONG",{});var F_t=s(mge);mko=r(F_t,"camembert"),F_t.forEach(t),fko=r(Q$e," \u2014 "),oO=n(Q$e,"A",{href:!0});var T_t=s(oO);gko=r(T_t,"CamembertForMaskedLM"),T_t.forEach(t),hko=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),uko=i(U),Eb=n(U,"LI",{});var W$e=s(Eb);fge=n(W$e,"STRONG",{});var M_t=s(fge);pko=r(M_t,"convbert"),M_t.forEach(t),_ko=r(W$e," \u2014 "),rO=n(W$e,"A",{href:!0});var E_t=s(rO);bko=r(E_t,"ConvBertForMaskedLM"),E_t.forEach(t),vko=r(W$e," (ConvBERT model)"),W$e.forEach(t),Fko=i(U),Cb=n(U,"LI",{});var H$e=s(Cb);gge=n(H$e,"STRONG",{});var C_t=s(gge);Tko=r(C_t,"data2vec-text"),C_t.forEach(t),Mko=r(H$e," \u2014 "),tO=n(H$e,"A",{href:!0});var w_t=s(tO);Eko=r(w_t,"Data2VecTextForMaskedLM"),w_t.forEach(t),Cko=r(H$e," (Data2VecText model)"),H$e.forEach(t),wko=i(U),wb=n(U,"LI",{});var U$e=s(wb);hge=n(U$e,"STRONG",{});var A_t=s(hge);Ako=r(A_t,"deberta"),A_t.forEach(t),Lko=r(U$e," \u2014 "),aO=n(U$e,"A",{href:!0});var L_t=s(aO);yko=r(L_t,"DebertaForMaskedLM"),L_t.forEach(t),xko=r(U$e," (DeBERTa model)"),U$e.forEach(t),$ko=i(U),Ab=n(U,"LI",{});var J$e=s(Ab);uge=n(J$e,"STRONG",{});var y_t=s(uge);kko=r(y_t,"deberta-v2"),y_t.forEach(t),Sko=r(J$e," \u2014 "),nO=n(J$e,"A",{href:!0});var x_t=s(nO);Rko=r(x_t,"DebertaV2ForMaskedLM"),x_t.forEach(t),Pko=r(J$e," (DeBERTa-v2 model)"),J$e.forEach(t),Bko=i(U),Lb=n(U,"LI",{});var Y$e=s(Lb);pge=n(Y$e,"STRONG",{});var $_t=s(pge);Iko=r($_t,"distilbert"),$_t.forEach(t),Nko=r(Y$e," \u2014 "),sO=n(Y$e,"A",{href:!0});var k_t=s(sO);qko=r(k_t,"DistilBertForMaskedLM"),k_t.forEach(t),jko=r(Y$e," (DistilBERT model)"),Y$e.forEach(t),Dko=i(U),yb=n(U,"LI",{});var K$e=s(yb);_ge=n(K$e,"STRONG",{});var S_t=s(_ge);Gko=r(S_t,"electra"),S_t.forEach(t),Oko=r(K$e," \u2014 "),lO=n(K$e,"A",{href:!0});var R_t=s(lO);Vko=r(R_t,"ElectraForMaskedLM"),R_t.forEach(t),Xko=r(K$e," (ELECTRA model)"),K$e.forEach(t),zko=i(U),xb=n(U,"LI",{});var Z$e=s(xb);bge=n(Z$e,"STRONG",{});var P_t=s(bge);Qko=r(P_t,"flaubert"),P_t.forEach(t),Wko=r(Z$e," \u2014 "),iO=n(Z$e,"A",{href:!0});var B_t=s(iO);Hko=r(B_t,"FlaubertWithLMHeadModel"),B_t.forEach(t),Uko=r(Z$e," (FlauBERT model)"),Z$e.forEach(t),Jko=i(U),$b=n(U,"LI",{});var eke=s($b);vge=n(eke,"STRONG",{});var I_t=s(vge);Yko=r(I_t,"fnet"),I_t.forEach(t),Kko=r(eke," \u2014 "),dO=n(eke,"A",{href:!0});var N_t=s(dO);Zko=r(N_t,"FNetForMaskedLM"),N_t.forEach(t),eSo=r(eke," (FNet model)"),eke.forEach(t),oSo=i(U),kb=n(U,"LI",{});var oke=s(kb);Fge=n(oke,"STRONG",{});var q_t=s(Fge);rSo=r(q_t,"funnel"),q_t.forEach(t),tSo=r(oke," \u2014 "),cO=n(oke,"A",{href:!0});var j_t=s(cO);aSo=r(j_t,"FunnelForMaskedLM"),j_t.forEach(t),nSo=r(oke," (Funnel Transformer model)"),oke.forEach(t),sSo=i(U),Sb=n(U,"LI",{});var rke=s(Sb);Tge=n(rke,"STRONG",{});var D_t=s(Tge);lSo=r(D_t,"ibert"),D_t.forEach(t),iSo=r(rke," \u2014 "),mO=n(rke,"A",{href:!0});var G_t=s(mO);dSo=r(G_t,"IBertForMaskedLM"),G_t.forEach(t),cSo=r(rke," (I-BERT model)"),rke.forEach(t),mSo=i(U),Rb=n(U,"LI",{});var tke=s(Rb);Mge=n(tke,"STRONG",{});var O_t=s(Mge);fSo=r(O_t,"layoutlm"),O_t.forEach(t),gSo=r(tke," \u2014 "),fO=n(tke,"A",{href:!0});var V_t=s(fO);hSo=r(V_t,"LayoutLMForMaskedLM"),V_t.forEach(t),uSo=r(tke," (LayoutLM model)"),tke.forEach(t),pSo=i(U),Pb=n(U,"LI",{});var ake=s(Pb);Ege=n(ake,"STRONG",{});var X_t=s(Ege);_So=r(X_t,"longformer"),X_t.forEach(t),bSo=r(ake," \u2014 "),gO=n(ake,"A",{href:!0});var z_t=s(gO);vSo=r(z_t,"LongformerForMaskedLM"),z_t.forEach(t),FSo=r(ake," (Longformer model)"),ake.forEach(t),TSo=i(U),Bb=n(U,"LI",{});var nke=s(Bb);Cge=n(nke,"STRONG",{});var Q_t=s(Cge);MSo=r(Q_t,"luke"),Q_t.forEach(t),ESo=r(nke," \u2014 "),hO=n(nke,"A",{href:!0});var W_t=s(hO);CSo=r(W_t,"LukeForMaskedLM"),W_t.forEach(t),wSo=r(nke," (LUKE model)"),nke.forEach(t),ASo=i(U),Ib=n(U,"LI",{});var ske=s(Ib);wge=n(ske,"STRONG",{});var H_t=s(wge);LSo=r(H_t,"mbart"),H_t.forEach(t),ySo=r(ske," \u2014 "),uO=n(ske,"A",{href:!0});var U_t=s(uO);xSo=r(U_t,"MBartForConditionalGeneration"),U_t.forEach(t),$So=r(ske," (mBART model)"),ske.forEach(t),kSo=i(U),Nb=n(U,"LI",{});var lke=s(Nb);Age=n(lke,"STRONG",{});var J_t=s(Age);SSo=r(J_t,"megatron-bert"),J_t.forEach(t),RSo=r(lke," \u2014 "),pO=n(lke,"A",{href:!0});var Y_t=s(pO);PSo=r(Y_t,"MegatronBertForMaskedLM"),Y_t.forEach(t),BSo=r(lke," (Megatron-BERT model)"),lke.forEach(t),ISo=i(U),qb=n(U,"LI",{});var ike=s(qb);Lge=n(ike,"STRONG",{});var K_t=s(Lge);NSo=r(K_t,"mobilebert"),K_t.forEach(t),qSo=r(ike," \u2014 "),_O=n(ike,"A",{href:!0});var Z_t=s(_O);jSo=r(Z_t,"MobileBertForMaskedLM"),Z_t.forEach(t),DSo=r(ike," (MobileBERT model)"),ike.forEach(t),GSo=i(U),jb=n(U,"LI",{});var dke=s(jb);yge=n(dke,"STRONG",{});var e2t=s(yge);OSo=r(e2t,"mpnet"),e2t.forEach(t),VSo=r(dke," \u2014 "),bO=n(dke,"A",{href:!0});var o2t=s(bO);XSo=r(o2t,"MPNetForMaskedLM"),o2t.forEach(t),zSo=r(dke," (MPNet model)"),dke.forEach(t),QSo=i(U),Db=n(U,"LI",{});var cke=s(Db);xge=n(cke,"STRONG",{});var r2t=s(xge);WSo=r(r2t,"nezha"),r2t.forEach(t),HSo=r(cke," \u2014 "),vO=n(cke,"A",{href:!0});var t2t=s(vO);USo=r(t2t,"NezhaForMaskedLM"),t2t.forEach(t),JSo=r(cke," (Nezha model)"),cke.forEach(t),YSo=i(U),Gb=n(U,"LI",{});var mke=s(Gb);$ge=n(mke,"STRONG",{});var a2t=s($ge);KSo=r(a2t,"nystromformer"),a2t.forEach(t),ZSo=r(mke," \u2014 "),FO=n(mke,"A",{href:!0});var n2t=s(FO);eRo=r(n2t,"NystromformerForMaskedLM"),n2t.forEach(t),oRo=r(mke," (Nystr\xF6mformer model)"),mke.forEach(t),rRo=i(U),Ob=n(U,"LI",{});var fke=s(Ob);kge=n(fke,"STRONG",{});var s2t=s(kge);tRo=r(s2t,"perceiver"),s2t.forEach(t),aRo=r(fke," \u2014 "),TO=n(fke,"A",{href:!0});var l2t=s(TO);nRo=r(l2t,"PerceiverForMaskedLM"),l2t.forEach(t),sRo=r(fke," (Perceiver model)"),fke.forEach(t),lRo=i(U),Vb=n(U,"LI",{});var gke=s(Vb);Sge=n(gke,"STRONG",{});var i2t=s(Sge);iRo=r(i2t,"qdqbert"),i2t.forEach(t),dRo=r(gke," \u2014 "),MO=n(gke,"A",{href:!0});var d2t=s(MO);cRo=r(d2t,"QDQBertForMaskedLM"),d2t.forEach(t),mRo=r(gke," (QDQBert model)"),gke.forEach(t),fRo=i(U),Xb=n(U,"LI",{});var hke=s(Xb);Rge=n(hke,"STRONG",{});var c2t=s(Rge);gRo=r(c2t,"reformer"),c2t.forEach(t),hRo=r(hke," \u2014 "),EO=n(hke,"A",{href:!0});var m2t=s(EO);uRo=r(m2t,"ReformerForMaskedLM"),m2t.forEach(t),pRo=r(hke," (Reformer model)"),hke.forEach(t),_Ro=i(U),zb=n(U,"LI",{});var uke=s(zb);Pge=n(uke,"STRONG",{});var f2t=s(Pge);bRo=r(f2t,"rembert"),f2t.forEach(t),vRo=r(uke," \u2014 "),CO=n(uke,"A",{href:!0});var g2t=s(CO);FRo=r(g2t,"RemBertForMaskedLM"),g2t.forEach(t),TRo=r(uke," (RemBERT model)"),uke.forEach(t),MRo=i(U),Qb=n(U,"LI",{});var pke=s(Qb);Bge=n(pke,"STRONG",{});var h2t=s(Bge);ERo=r(h2t,"roberta"),h2t.forEach(t),CRo=r(pke," \u2014 "),wO=n(pke,"A",{href:!0});var u2t=s(wO);wRo=r(u2t,"RobertaForMaskedLM"),u2t.forEach(t),ARo=r(pke," (RoBERTa model)"),pke.forEach(t),LRo=i(U),Wb=n(U,"LI",{});var _ke=s(Wb);Ige=n(_ke,"STRONG",{});var p2t=s(Ige);yRo=r(p2t,"roformer"),p2t.forEach(t),xRo=r(_ke," \u2014 "),AO=n(_ke,"A",{href:!0});var _2t=s(AO);$Ro=r(_2t,"RoFormerForMaskedLM"),_2t.forEach(t),kRo=r(_ke," (RoFormer model)"),_ke.forEach(t),SRo=i(U),Hb=n(U,"LI",{});var bke=s(Hb);Nge=n(bke,"STRONG",{});var b2t=s(Nge);RRo=r(b2t,"squeezebert"),b2t.forEach(t),PRo=r(bke," \u2014 "),LO=n(bke,"A",{href:!0});var v2t=s(LO);BRo=r(v2t,"SqueezeBertForMaskedLM"),v2t.forEach(t),IRo=r(bke," (SqueezeBERT model)"),bke.forEach(t),NRo=i(U),Ub=n(U,"LI",{});var vke=s(Ub);qge=n(vke,"STRONG",{});var F2t=s(qge);qRo=r(F2t,"tapas"),F2t.forEach(t),jRo=r(vke," \u2014 "),yO=n(vke,"A",{href:!0});var T2t=s(yO);DRo=r(T2t,"TapasForMaskedLM"),T2t.forEach(t),GRo=r(vke," (TAPAS model)"),vke.forEach(t),ORo=i(U),Jb=n(U,"LI",{});var Fke=s(Jb);jge=n(Fke,"STRONG",{});var M2t=s(jge);VRo=r(M2t,"wav2vec2"),M2t.forEach(t),XRo=r(Fke," \u2014 "),Dge=n(Fke,"CODE",{});var E2t=s(Dge);zRo=r(E2t,"Wav2Vec2ForMaskedLM"),E2t.forEach(t),QRo=r(Fke," (Wav2Vec2 model)"),Fke.forEach(t),WRo=i(U),Yb=n(U,"LI",{});var Tke=s(Yb);Gge=n(Tke,"STRONG",{});var C2t=s(Gge);HRo=r(C2t,"xlm"),C2t.forEach(t),URo=r(Tke," \u2014 "),xO=n(Tke,"A",{href:!0});var w2t=s(xO);JRo=r(w2t,"XLMWithLMHeadModel"),w2t.forEach(t),YRo=r(Tke," (XLM model)"),Tke.forEach(t),KRo=i(U),Kb=n(U,"LI",{});var Mke=s(Kb);Oge=n(Mke,"STRONG",{});var A2t=s(Oge);ZRo=r(A2t,"xlm-roberta"),A2t.forEach(t),ePo=r(Mke," \u2014 "),$O=n(Mke,"A",{href:!0});var L2t=s($O);oPo=r(L2t,"XLMRobertaForMaskedLM"),L2t.forEach(t),rPo=r(Mke," (XLM-RoBERTa model)"),Mke.forEach(t),tPo=i(U),Zb=n(U,"LI",{});var Eke=s(Zb);Vge=n(Eke,"STRONG",{});var y2t=s(Vge);aPo=r(y2t,"xlm-roberta-xl"),y2t.forEach(t),nPo=r(Eke," \u2014 "),kO=n(Eke,"A",{href:!0});var x2t=s(kO);sPo=r(x2t,"XLMRobertaXLForMaskedLM"),x2t.forEach(t),lPo=r(Eke," (XLM-RoBERTa-XL model)"),Eke.forEach(t),iPo=i(U),ev=n(U,"LI",{});var Cke=s(ev);Xge=n(Cke,"STRONG",{});var $2t=s(Xge);dPo=r($2t,"yoso"),$2t.forEach(t),cPo=r(Cke," \u2014 "),SO=n(Cke,"A",{href:!0});var k2t=s(SO);mPo=r(k2t,"YosoForMaskedLM"),k2t.forEach(t),fPo=r(Cke," (YOSO model)"),Cke.forEach(t),U.forEach(t),gPo=i(la),ov=n(la,"P",{});var wke=s(ov);hPo=r(wke,"The model is set in evaluation mode by default using "),zge=n(wke,"CODE",{});var S2t=s(zge);uPo=r(S2t,"model.eval()"),S2t.forEach(t),pPo=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(wke,"CODE",{});var R2t=s(Qge);_Po=r(R2t,"model.train()"),R2t.forEach(t),wke.forEach(t),bPo=i(la),T(rv.$$.fragment,la),la.forEach(t),ol.forEach(t),EOe=i(m),Hi=n(m,"H2",{class:!0});var xXe=s(Hi);tv=n(xXe,"A",{id:!0,class:!0,href:!0});var P2t=s(tv);Wge=n(P2t,"SPAN",{});var B2t=s(Wge);T(wy.$$.fragment,B2t),B2t.forEach(t),P2t.forEach(t),vPo=i(xXe),Hge=n(xXe,"SPAN",{});var I2t=s(Hge);FPo=r(I2t,"AutoModelForSeq2SeqLM"),I2t.forEach(t),xXe.forEach(t),COe=i(m),Ro=n(m,"DIV",{class:!0});var rl=s(Ro);T(Ay.$$.fragment,rl),TPo=i(rl),Ui=n(rl,"P",{});var Noe=s(Ui);MPo=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RO=n(Noe,"A",{href:!0});var N2t=s(RO);EPo=r(N2t,"from_pretrained()"),N2t.forEach(t),CPo=r(Noe," class method or the "),PO=n(Noe,"A",{href:!0});var q2t=s(PO);wPo=r(q2t,"from_config()"),q2t.forEach(t),APo=r(Noe,` class
method.`),Noe.forEach(t),LPo=i(rl),Ly=n(rl,"P",{});var $Xe=s(Ly);yPo=r($Xe,"This class cannot be instantiated directly using "),Uge=n($Xe,"CODE",{});var j2t=s(Uge);xPo=r(j2t,"__init__()"),j2t.forEach(t),$Po=r($Xe," (throws an error)."),$Xe.forEach(t),kPo=i(rl),dt=n(rl,"DIV",{class:!0});var V6=s(dt);T(yy.$$.fragment,V6),SPo=i(V6),Jge=n(V6,"P",{});var D2t=s(Jge);RPo=r(D2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),D2t.forEach(t),PPo=i(V6),Ji=n(V6,"P",{});var qoe=s(Ji);BPo=r(qoe,`Note:
Loading a model from its configuration file does `),Yge=n(qoe,"STRONG",{});var G2t=s(Yge);IPo=r(G2t,"not"),G2t.forEach(t),NPo=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=n(qoe,"A",{href:!0});var O2t=s(BO);qPo=r(O2t,"from_pretrained()"),O2t.forEach(t),jPo=r(qoe," to load the model weights."),qoe.forEach(t),DPo=i(V6),T(av.$$.fragment,V6),V6.forEach(t),GPo=i(rl),eo=n(rl,"DIV",{class:!0});var ia=s(eo);T(xy.$$.fragment,ia),OPo=i(ia),Kge=n(ia,"P",{});var V2t=s(Kge);VPo=r(V2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V2t.forEach(t),XPo=i(ia),Na=n(ia,"P",{});var X6=s(Na);zPo=r(X6,"The model class to instantiate is selected based on the "),Zge=n(X6,"CODE",{});var X2t=s(Zge);QPo=r(X2t,"model_type"),X2t.forEach(t),WPo=r(X6,` property of the config object (either
passed as an argument or loaded from `),ehe=n(X6,"CODE",{});var z2t=s(ehe);HPo=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),UPo=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=n(X6,"CODE",{});var Q2t=s(ohe);JPo=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),YPo=r(X6,":"),X6.forEach(t),KPo=i(ia),ue=n(ia,"UL",{});var be=s(ue);nv=n(be,"LI",{});var Ake=s(nv);rhe=n(Ake,"STRONG",{});var W2t=s(rhe);ZPo=r(W2t,"bart"),W2t.forEach(t),eBo=r(Ake," \u2014 "),IO=n(Ake,"A",{href:!0});var H2t=s(IO);oBo=r(H2t,"BartForConditionalGeneration"),H2t.forEach(t),rBo=r(Ake," (BART model)"),Ake.forEach(t),tBo=i(be),sv=n(be,"LI",{});var Lke=s(sv);the=n(Lke,"STRONG",{});var U2t=s(the);aBo=r(U2t,"bigbird_pegasus"),U2t.forEach(t),nBo=r(Lke," \u2014 "),NO=n(Lke,"A",{href:!0});var J2t=s(NO);sBo=r(J2t,"BigBirdPegasusForConditionalGeneration"),J2t.forEach(t),lBo=r(Lke," (BigBird-Pegasus model)"),Lke.forEach(t),iBo=i(be),lv=n(be,"LI",{});var yke=s(lv);ahe=n(yke,"STRONG",{});var Y2t=s(ahe);dBo=r(Y2t,"blenderbot"),Y2t.forEach(t),cBo=r(yke," \u2014 "),qO=n(yke,"A",{href:!0});var K2t=s(qO);mBo=r(K2t,"BlenderbotForConditionalGeneration"),K2t.forEach(t),fBo=r(yke," (Blenderbot model)"),yke.forEach(t),gBo=i(be),iv=n(be,"LI",{});var xke=s(iv);nhe=n(xke,"STRONG",{});var Z2t=s(nhe);hBo=r(Z2t,"blenderbot-small"),Z2t.forEach(t),uBo=r(xke," \u2014 "),jO=n(xke,"A",{href:!0});var ebt=s(jO);pBo=r(ebt,"BlenderbotSmallForConditionalGeneration"),ebt.forEach(t),_Bo=r(xke," (BlenderbotSmall model)"),xke.forEach(t),bBo=i(be),dv=n(be,"LI",{});var $ke=s(dv);she=n($ke,"STRONG",{});var obt=s(she);vBo=r(obt,"encoder-decoder"),obt.forEach(t),FBo=r($ke," \u2014 "),DO=n($ke,"A",{href:!0});var rbt=s(DO);TBo=r(rbt,"EncoderDecoderModel"),rbt.forEach(t),MBo=r($ke," (Encoder decoder model)"),$ke.forEach(t),EBo=i(be),cv=n(be,"LI",{});var kke=s(cv);lhe=n(kke,"STRONG",{});var tbt=s(lhe);CBo=r(tbt,"fsmt"),tbt.forEach(t),wBo=r(kke," \u2014 "),GO=n(kke,"A",{href:!0});var abt=s(GO);ABo=r(abt,"FSMTForConditionalGeneration"),abt.forEach(t),LBo=r(kke," (FairSeq Machine-Translation model)"),kke.forEach(t),yBo=i(be),mv=n(be,"LI",{});var Ske=s(mv);ihe=n(Ske,"STRONG",{});var nbt=s(ihe);xBo=r(nbt,"led"),nbt.forEach(t),$Bo=r(Ske," \u2014 "),OO=n(Ske,"A",{href:!0});var sbt=s(OO);kBo=r(sbt,"LEDForConditionalGeneration"),sbt.forEach(t),SBo=r(Ske," (LED model)"),Ske.forEach(t),RBo=i(be),fv=n(be,"LI",{});var Rke=s(fv);dhe=n(Rke,"STRONG",{});var lbt=s(dhe);PBo=r(lbt,"longt5"),lbt.forEach(t),BBo=r(Rke," \u2014 "),VO=n(Rke,"A",{href:!0});var ibt=s(VO);IBo=r(ibt,"LongT5ForConditionalGeneration"),ibt.forEach(t),NBo=r(Rke," (LongT5 model)"),Rke.forEach(t),qBo=i(be),gv=n(be,"LI",{});var Pke=s(gv);che=n(Pke,"STRONG",{});var dbt=s(che);jBo=r(dbt,"m2m_100"),dbt.forEach(t),DBo=r(Pke," \u2014 "),XO=n(Pke,"A",{href:!0});var cbt=s(XO);GBo=r(cbt,"M2M100ForConditionalGeneration"),cbt.forEach(t),OBo=r(Pke," (M2M100 model)"),Pke.forEach(t),VBo=i(be),hv=n(be,"LI",{});var Bke=s(hv);mhe=n(Bke,"STRONG",{});var mbt=s(mhe);XBo=r(mbt,"marian"),mbt.forEach(t),zBo=r(Bke," \u2014 "),zO=n(Bke,"A",{href:!0});var fbt=s(zO);QBo=r(fbt,"MarianMTModel"),fbt.forEach(t),WBo=r(Bke," (Marian model)"),Bke.forEach(t),HBo=i(be),uv=n(be,"LI",{});var Ike=s(uv);fhe=n(Ike,"STRONG",{});var gbt=s(fhe);UBo=r(gbt,"mbart"),gbt.forEach(t),JBo=r(Ike," \u2014 "),QO=n(Ike,"A",{href:!0});var hbt=s(QO);YBo=r(hbt,"MBartForConditionalGeneration"),hbt.forEach(t),KBo=r(Ike," (mBART model)"),Ike.forEach(t),ZBo=i(be),pv=n(be,"LI",{});var Nke=s(pv);ghe=n(Nke,"STRONG",{});var ubt=s(ghe);eIo=r(ubt,"mt5"),ubt.forEach(t),oIo=r(Nke," \u2014 "),WO=n(Nke,"A",{href:!0});var pbt=s(WO);rIo=r(pbt,"MT5ForConditionalGeneration"),pbt.forEach(t),tIo=r(Nke," (MT5 model)"),Nke.forEach(t),aIo=i(be),_v=n(be,"LI",{});var qke=s(_v);hhe=n(qke,"STRONG",{});var _bt=s(hhe);nIo=r(_bt,"pegasus"),_bt.forEach(t),sIo=r(qke," \u2014 "),HO=n(qke,"A",{href:!0});var bbt=s(HO);lIo=r(bbt,"PegasusForConditionalGeneration"),bbt.forEach(t),iIo=r(qke," (Pegasus model)"),qke.forEach(t),dIo=i(be),bv=n(be,"LI",{});var jke=s(bv);uhe=n(jke,"STRONG",{});var vbt=s(uhe);cIo=r(vbt,"plbart"),vbt.forEach(t),mIo=r(jke," \u2014 "),UO=n(jke,"A",{href:!0});var Fbt=s(UO);fIo=r(Fbt,"PLBartForConditionalGeneration"),Fbt.forEach(t),gIo=r(jke," (PLBart model)"),jke.forEach(t),hIo=i(be),vv=n(be,"LI",{});var Dke=s(vv);phe=n(Dke,"STRONG",{});var Tbt=s(phe);uIo=r(Tbt,"prophetnet"),Tbt.forEach(t),pIo=r(Dke," \u2014 "),JO=n(Dke,"A",{href:!0});var Mbt=s(JO);_Io=r(Mbt,"ProphetNetForConditionalGeneration"),Mbt.forEach(t),bIo=r(Dke," (ProphetNet model)"),Dke.forEach(t),vIo=i(be),Fv=n(be,"LI",{});var Gke=s(Fv);_he=n(Gke,"STRONG",{});var Ebt=s(_he);FIo=r(Ebt,"t5"),Ebt.forEach(t),TIo=r(Gke," \u2014 "),YO=n(Gke,"A",{href:!0});var Cbt=s(YO);MIo=r(Cbt,"T5ForConditionalGeneration"),Cbt.forEach(t),EIo=r(Gke," (T5 model)"),Gke.forEach(t),CIo=i(be),Tv=n(be,"LI",{});var Oke=s(Tv);bhe=n(Oke,"STRONG",{});var wbt=s(bhe);wIo=r(wbt,"xlm-prophetnet"),wbt.forEach(t),AIo=r(Oke," \u2014 "),KO=n(Oke,"A",{href:!0});var Abt=s(KO);LIo=r(Abt,"XLMProphetNetForConditionalGeneration"),Abt.forEach(t),yIo=r(Oke," (XLM-ProphetNet model)"),Oke.forEach(t),be.forEach(t),xIo=i(ia),Mv=n(ia,"P",{});var Vke=s(Mv);$Io=r(Vke,"The model is set in evaluation mode by default using "),vhe=n(Vke,"CODE",{});var Lbt=s(vhe);kIo=r(Lbt,"model.eval()"),Lbt.forEach(t),SIo=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=n(Vke,"CODE",{});var ybt=s(Fhe);RIo=r(ybt,"model.train()"),ybt.forEach(t),Vke.forEach(t),PIo=i(ia),T(Ev.$$.fragment,ia),ia.forEach(t),rl.forEach(t),wOe=i(m),Yi=n(m,"H2",{class:!0});var kXe=s(Yi);Cv=n(kXe,"A",{id:!0,class:!0,href:!0});var xbt=s(Cv);The=n(xbt,"SPAN",{});var $bt=s(The);T($y.$$.fragment,$bt),$bt.forEach(t),xbt.forEach(t),BIo=i(kXe),Mhe=n(kXe,"SPAN",{});var kbt=s(Mhe);IIo=r(kbt,"AutoModelForSequenceClassification"),kbt.forEach(t),kXe.forEach(t),AOe=i(m),Po=n(m,"DIV",{class:!0});var tl=s(Po);T(ky.$$.fragment,tl),NIo=i(tl),Ki=n(tl,"P",{});var joe=s(Ki);qIo=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZO=n(joe,"A",{href:!0});var Sbt=s(ZO);jIo=r(Sbt,"from_pretrained()"),Sbt.forEach(t),DIo=r(joe," class method or the "),eV=n(joe,"A",{href:!0});var Rbt=s(eV);GIo=r(Rbt,"from_config()"),Rbt.forEach(t),OIo=r(joe,` class
method.`),joe.forEach(t),VIo=i(tl),Sy=n(tl,"P",{});var SXe=s(Sy);XIo=r(SXe,"This class cannot be instantiated directly using "),Ehe=n(SXe,"CODE",{});var Pbt=s(Ehe);zIo=r(Pbt,"__init__()"),Pbt.forEach(t),QIo=r(SXe," (throws an error)."),SXe.forEach(t),WIo=i(tl),ct=n(tl,"DIV",{class:!0});var z6=s(ct);T(Ry.$$.fragment,z6),HIo=i(z6),Che=n(z6,"P",{});var Bbt=s(Che);UIo=r(Bbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bbt.forEach(t),JIo=i(z6),Zi=n(z6,"P",{});var Doe=s(Zi);YIo=r(Doe,`Note:
Loading a model from its configuration file does `),whe=n(Doe,"STRONG",{});var Ibt=s(whe);KIo=r(Ibt,"not"),Ibt.forEach(t),ZIo=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=n(Doe,"A",{href:!0});var Nbt=s(oV);eNo=r(Nbt,"from_pretrained()"),Nbt.forEach(t),oNo=r(Doe," to load the model weights."),Doe.forEach(t),rNo=i(z6),T(wv.$$.fragment,z6),z6.forEach(t),tNo=i(tl),oo=n(tl,"DIV",{class:!0});var da=s(oo);T(Py.$$.fragment,da),aNo=i(da),Ahe=n(da,"P",{});var qbt=s(Ahe);nNo=r(qbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qbt.forEach(t),sNo=i(da),qa=n(da,"P",{});var Q6=s(qa);lNo=r(Q6,"The model class to instantiate is selected based on the "),Lhe=n(Q6,"CODE",{});var jbt=s(Lhe);iNo=r(jbt,"model_type"),jbt.forEach(t),dNo=r(Q6,` property of the config object (either
passed as an argument or loaded from `),yhe=n(Q6,"CODE",{});var Dbt=s(yhe);cNo=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),mNo=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=n(Q6,"CODE",{});var Gbt=s(xhe);fNo=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),gNo=r(Q6,":"),Q6.forEach(t),hNo=i(da),N=n(da,"UL",{});var q=s(N);Av=n(q,"LI",{});var Xke=s(Av);$he=n(Xke,"STRONG",{});var Obt=s($he);uNo=r(Obt,"albert"),Obt.forEach(t),pNo=r(Xke," \u2014 "),rV=n(Xke,"A",{href:!0});var Vbt=s(rV);_No=r(Vbt,"AlbertForSequenceClassification"),Vbt.forEach(t),bNo=r(Xke," (ALBERT model)"),Xke.forEach(t),vNo=i(q),Lv=n(q,"LI",{});var zke=s(Lv);khe=n(zke,"STRONG",{});var Xbt=s(khe);FNo=r(Xbt,"bart"),Xbt.forEach(t),TNo=r(zke," \u2014 "),tV=n(zke,"A",{href:!0});var zbt=s(tV);MNo=r(zbt,"BartForSequenceClassification"),zbt.forEach(t),ENo=r(zke," (BART model)"),zke.forEach(t),CNo=i(q),yv=n(q,"LI",{});var Qke=s(yv);She=n(Qke,"STRONG",{});var Qbt=s(She);wNo=r(Qbt,"bert"),Qbt.forEach(t),ANo=r(Qke," \u2014 "),aV=n(Qke,"A",{href:!0});var Wbt=s(aV);LNo=r(Wbt,"BertForSequenceClassification"),Wbt.forEach(t),yNo=r(Qke," (BERT model)"),Qke.forEach(t),xNo=i(q),xv=n(q,"LI",{});var Wke=s(xv);Rhe=n(Wke,"STRONG",{});var Hbt=s(Rhe);$No=r(Hbt,"big_bird"),Hbt.forEach(t),kNo=r(Wke," \u2014 "),nV=n(Wke,"A",{href:!0});var Ubt=s(nV);SNo=r(Ubt,"BigBirdForSequenceClassification"),Ubt.forEach(t),RNo=r(Wke," (BigBird model)"),Wke.forEach(t),PNo=i(q),$v=n(q,"LI",{});var Hke=s($v);Phe=n(Hke,"STRONG",{});var Jbt=s(Phe);BNo=r(Jbt,"bigbird_pegasus"),Jbt.forEach(t),INo=r(Hke," \u2014 "),sV=n(Hke,"A",{href:!0});var Ybt=s(sV);NNo=r(Ybt,"BigBirdPegasusForSequenceClassification"),Ybt.forEach(t),qNo=r(Hke," (BigBird-Pegasus model)"),Hke.forEach(t),jNo=i(q),kv=n(q,"LI",{});var Uke=s(kv);Bhe=n(Uke,"STRONG",{});var Kbt=s(Bhe);DNo=r(Kbt,"bloom"),Kbt.forEach(t),GNo=r(Uke," \u2014 "),lV=n(Uke,"A",{href:!0});var Zbt=s(lV);ONo=r(Zbt,"BloomForSequenceClassification"),Zbt.forEach(t),VNo=r(Uke," (BLOOM model)"),Uke.forEach(t),XNo=i(q),Sv=n(q,"LI",{});var Jke=s(Sv);Ihe=n(Jke,"STRONG",{});var evt=s(Ihe);zNo=r(evt,"camembert"),evt.forEach(t),QNo=r(Jke," \u2014 "),iV=n(Jke,"A",{href:!0});var ovt=s(iV);WNo=r(ovt,"CamembertForSequenceClassification"),ovt.forEach(t),HNo=r(Jke," (CamemBERT model)"),Jke.forEach(t),UNo=i(q),Rv=n(q,"LI",{});var Yke=s(Rv);Nhe=n(Yke,"STRONG",{});var rvt=s(Nhe);JNo=r(rvt,"canine"),rvt.forEach(t),YNo=r(Yke," \u2014 "),dV=n(Yke,"A",{href:!0});var tvt=s(dV);KNo=r(tvt,"CanineForSequenceClassification"),tvt.forEach(t),ZNo=r(Yke," (CANINE model)"),Yke.forEach(t),eqo=i(q),Pv=n(q,"LI",{});var Kke=s(Pv);qhe=n(Kke,"STRONG",{});var avt=s(qhe);oqo=r(avt,"convbert"),avt.forEach(t),rqo=r(Kke," \u2014 "),cV=n(Kke,"A",{href:!0});var nvt=s(cV);tqo=r(nvt,"ConvBertForSequenceClassification"),nvt.forEach(t),aqo=r(Kke," (ConvBERT model)"),Kke.forEach(t),nqo=i(q),Bv=n(q,"LI",{});var Zke=s(Bv);jhe=n(Zke,"STRONG",{});var svt=s(jhe);sqo=r(svt,"ctrl"),svt.forEach(t),lqo=r(Zke," \u2014 "),mV=n(Zke,"A",{href:!0});var lvt=s(mV);iqo=r(lvt,"CTRLForSequenceClassification"),lvt.forEach(t),dqo=r(Zke," (CTRL model)"),Zke.forEach(t),cqo=i(q),Iv=n(q,"LI",{});var eSe=s(Iv);Dhe=n(eSe,"STRONG",{});var ivt=s(Dhe);mqo=r(ivt,"data2vec-text"),ivt.forEach(t),fqo=r(eSe," \u2014 "),fV=n(eSe,"A",{href:!0});var dvt=s(fV);gqo=r(dvt,"Data2VecTextForSequenceClassification"),dvt.forEach(t),hqo=r(eSe," (Data2VecText model)"),eSe.forEach(t),uqo=i(q),Nv=n(q,"LI",{});var oSe=s(Nv);Ghe=n(oSe,"STRONG",{});var cvt=s(Ghe);pqo=r(cvt,"deberta"),cvt.forEach(t),_qo=r(oSe," \u2014 "),gV=n(oSe,"A",{href:!0});var mvt=s(gV);bqo=r(mvt,"DebertaForSequenceClassification"),mvt.forEach(t),vqo=r(oSe," (DeBERTa model)"),oSe.forEach(t),Fqo=i(q),qv=n(q,"LI",{});var rSe=s(qv);Ohe=n(rSe,"STRONG",{});var fvt=s(Ohe);Tqo=r(fvt,"deberta-v2"),fvt.forEach(t),Mqo=r(rSe," \u2014 "),hV=n(rSe,"A",{href:!0});var gvt=s(hV);Eqo=r(gvt,"DebertaV2ForSequenceClassification"),gvt.forEach(t),Cqo=r(rSe," (DeBERTa-v2 model)"),rSe.forEach(t),wqo=i(q),jv=n(q,"LI",{});var tSe=s(jv);Vhe=n(tSe,"STRONG",{});var hvt=s(Vhe);Aqo=r(hvt,"distilbert"),hvt.forEach(t),Lqo=r(tSe," \u2014 "),uV=n(tSe,"A",{href:!0});var uvt=s(uV);yqo=r(uvt,"DistilBertForSequenceClassification"),uvt.forEach(t),xqo=r(tSe," (DistilBERT model)"),tSe.forEach(t),$qo=i(q),Dv=n(q,"LI",{});var aSe=s(Dv);Xhe=n(aSe,"STRONG",{});var pvt=s(Xhe);kqo=r(pvt,"electra"),pvt.forEach(t),Sqo=r(aSe," \u2014 "),pV=n(aSe,"A",{href:!0});var _vt=s(pV);Rqo=r(_vt,"ElectraForSequenceClassification"),_vt.forEach(t),Pqo=r(aSe," (ELECTRA model)"),aSe.forEach(t),Bqo=i(q),Gv=n(q,"LI",{});var nSe=s(Gv);zhe=n(nSe,"STRONG",{});var bvt=s(zhe);Iqo=r(bvt,"flaubert"),bvt.forEach(t),Nqo=r(nSe," \u2014 "),_V=n(nSe,"A",{href:!0});var vvt=s(_V);qqo=r(vvt,"FlaubertForSequenceClassification"),vvt.forEach(t),jqo=r(nSe," (FlauBERT model)"),nSe.forEach(t),Dqo=i(q),Ov=n(q,"LI",{});var sSe=s(Ov);Qhe=n(sSe,"STRONG",{});var Fvt=s(Qhe);Gqo=r(Fvt,"fnet"),Fvt.forEach(t),Oqo=r(sSe," \u2014 "),bV=n(sSe,"A",{href:!0});var Tvt=s(bV);Vqo=r(Tvt,"FNetForSequenceClassification"),Tvt.forEach(t),Xqo=r(sSe," (FNet model)"),sSe.forEach(t),zqo=i(q),Vv=n(q,"LI",{});var lSe=s(Vv);Whe=n(lSe,"STRONG",{});var Mvt=s(Whe);Qqo=r(Mvt,"funnel"),Mvt.forEach(t),Wqo=r(lSe," \u2014 "),vV=n(lSe,"A",{href:!0});var Evt=s(vV);Hqo=r(Evt,"FunnelForSequenceClassification"),Evt.forEach(t),Uqo=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),Jqo=i(q),Xv=n(q,"LI",{});var iSe=s(Xv);Hhe=n(iSe,"STRONG",{});var Cvt=s(Hhe);Yqo=r(Cvt,"gpt2"),Cvt.forEach(t),Kqo=r(iSe," \u2014 "),FV=n(iSe,"A",{href:!0});var wvt=s(FV);Zqo=r(wvt,"GPT2ForSequenceClassification"),wvt.forEach(t),ejo=r(iSe," (OpenAI GPT-2 model)"),iSe.forEach(t),ojo=i(q),zv=n(q,"LI",{});var dSe=s(zv);Uhe=n(dSe,"STRONG",{});var Avt=s(Uhe);rjo=r(Avt,"gpt_neo"),Avt.forEach(t),tjo=r(dSe," \u2014 "),TV=n(dSe,"A",{href:!0});var Lvt=s(TV);ajo=r(Lvt,"GPTNeoForSequenceClassification"),Lvt.forEach(t),njo=r(dSe," (GPT Neo model)"),dSe.forEach(t),sjo=i(q),Qv=n(q,"LI",{});var cSe=s(Qv);Jhe=n(cSe,"STRONG",{});var yvt=s(Jhe);ljo=r(yvt,"gptj"),yvt.forEach(t),ijo=r(cSe," \u2014 "),MV=n(cSe,"A",{href:!0});var xvt=s(MV);djo=r(xvt,"GPTJForSequenceClassification"),xvt.forEach(t),cjo=r(cSe," (GPT-J model)"),cSe.forEach(t),mjo=i(q),Wv=n(q,"LI",{});var mSe=s(Wv);Yhe=n(mSe,"STRONG",{});var $vt=s(Yhe);fjo=r($vt,"ibert"),$vt.forEach(t),gjo=r(mSe," \u2014 "),EV=n(mSe,"A",{href:!0});var kvt=s(EV);hjo=r(kvt,"IBertForSequenceClassification"),kvt.forEach(t),ujo=r(mSe," (I-BERT model)"),mSe.forEach(t),pjo=i(q),Hv=n(q,"LI",{});var fSe=s(Hv);Khe=n(fSe,"STRONG",{});var Svt=s(Khe);_jo=r(Svt,"layoutlm"),Svt.forEach(t),bjo=r(fSe," \u2014 "),CV=n(fSe,"A",{href:!0});var Rvt=s(CV);vjo=r(Rvt,"LayoutLMForSequenceClassification"),Rvt.forEach(t),Fjo=r(fSe," (LayoutLM model)"),fSe.forEach(t),Tjo=i(q),Uv=n(q,"LI",{});var gSe=s(Uv);Zhe=n(gSe,"STRONG",{});var Pvt=s(Zhe);Mjo=r(Pvt,"layoutlmv2"),Pvt.forEach(t),Ejo=r(gSe," \u2014 "),wV=n(gSe,"A",{href:!0});var Bvt=s(wV);Cjo=r(Bvt,"LayoutLMv2ForSequenceClassification"),Bvt.forEach(t),wjo=r(gSe," (LayoutLMv2 model)"),gSe.forEach(t),Ajo=i(q),Jv=n(q,"LI",{});var hSe=s(Jv);eue=n(hSe,"STRONG",{});var Ivt=s(eue);Ljo=r(Ivt,"layoutlmv3"),Ivt.forEach(t),yjo=r(hSe," \u2014 "),AV=n(hSe,"A",{href:!0});var Nvt=s(AV);xjo=r(Nvt,"LayoutLMv3ForSequenceClassification"),Nvt.forEach(t),$jo=r(hSe," (LayoutLMv3 model)"),hSe.forEach(t),kjo=i(q),Yv=n(q,"LI",{});var uSe=s(Yv);oue=n(uSe,"STRONG",{});var qvt=s(oue);Sjo=r(qvt,"led"),qvt.forEach(t),Rjo=r(uSe," \u2014 "),LV=n(uSe,"A",{href:!0});var jvt=s(LV);Pjo=r(jvt,"LEDForSequenceClassification"),jvt.forEach(t),Bjo=r(uSe," (LED model)"),uSe.forEach(t),Ijo=i(q),Kv=n(q,"LI",{});var pSe=s(Kv);rue=n(pSe,"STRONG",{});var Dvt=s(rue);Njo=r(Dvt,"longformer"),Dvt.forEach(t),qjo=r(pSe," \u2014 "),yV=n(pSe,"A",{href:!0});var Gvt=s(yV);jjo=r(Gvt,"LongformerForSequenceClassification"),Gvt.forEach(t),Djo=r(pSe," (Longformer model)"),pSe.forEach(t),Gjo=i(q),Zv=n(q,"LI",{});var _Se=s(Zv);tue=n(_Se,"STRONG",{});var Ovt=s(tue);Ojo=r(Ovt,"mbart"),Ovt.forEach(t),Vjo=r(_Se," \u2014 "),xV=n(_Se,"A",{href:!0});var Vvt=s(xV);Xjo=r(Vvt,"MBartForSequenceClassification"),Vvt.forEach(t),zjo=r(_Se," (mBART model)"),_Se.forEach(t),Qjo=i(q),eF=n(q,"LI",{});var bSe=s(eF);aue=n(bSe,"STRONG",{});var Xvt=s(aue);Wjo=r(Xvt,"megatron-bert"),Xvt.forEach(t),Hjo=r(bSe," \u2014 "),$V=n(bSe,"A",{href:!0});var zvt=s($V);Ujo=r(zvt,"MegatronBertForSequenceClassification"),zvt.forEach(t),Jjo=r(bSe," (Megatron-BERT model)"),bSe.forEach(t),Yjo=i(q),oF=n(q,"LI",{});var vSe=s(oF);nue=n(vSe,"STRONG",{});var Qvt=s(nue);Kjo=r(Qvt,"mobilebert"),Qvt.forEach(t),Zjo=r(vSe," \u2014 "),kV=n(vSe,"A",{href:!0});var Wvt=s(kV);eDo=r(Wvt,"MobileBertForSequenceClassification"),Wvt.forEach(t),oDo=r(vSe," (MobileBERT model)"),vSe.forEach(t),rDo=i(q),rF=n(q,"LI",{});var FSe=s(rF);sue=n(FSe,"STRONG",{});var Hvt=s(sue);tDo=r(Hvt,"mpnet"),Hvt.forEach(t),aDo=r(FSe," \u2014 "),SV=n(FSe,"A",{href:!0});var Uvt=s(SV);nDo=r(Uvt,"MPNetForSequenceClassification"),Uvt.forEach(t),sDo=r(FSe," (MPNet model)"),FSe.forEach(t),lDo=i(q),tF=n(q,"LI",{});var TSe=s(tF);lue=n(TSe,"STRONG",{});var Jvt=s(lue);iDo=r(Jvt,"nezha"),Jvt.forEach(t),dDo=r(TSe," \u2014 "),RV=n(TSe,"A",{href:!0});var Yvt=s(RV);cDo=r(Yvt,"NezhaForSequenceClassification"),Yvt.forEach(t),mDo=r(TSe," (Nezha model)"),TSe.forEach(t),fDo=i(q),aF=n(q,"LI",{});var MSe=s(aF);iue=n(MSe,"STRONG",{});var Kvt=s(iue);gDo=r(Kvt,"nystromformer"),Kvt.forEach(t),hDo=r(MSe," \u2014 "),PV=n(MSe,"A",{href:!0});var Zvt=s(PV);uDo=r(Zvt,"NystromformerForSequenceClassification"),Zvt.forEach(t),pDo=r(MSe," (Nystr\xF6mformer model)"),MSe.forEach(t),_Do=i(q),nF=n(q,"LI",{});var ESe=s(nF);due=n(ESe,"STRONG",{});var eFt=s(due);bDo=r(eFt,"openai-gpt"),eFt.forEach(t),vDo=r(ESe," \u2014 "),BV=n(ESe,"A",{href:!0});var oFt=s(BV);FDo=r(oFt,"OpenAIGPTForSequenceClassification"),oFt.forEach(t),TDo=r(ESe," (OpenAI GPT model)"),ESe.forEach(t),MDo=i(q),sF=n(q,"LI",{});var CSe=s(sF);cue=n(CSe,"STRONG",{});var rFt=s(cue);EDo=r(rFt,"perceiver"),rFt.forEach(t),CDo=r(CSe," \u2014 "),IV=n(CSe,"A",{href:!0});var tFt=s(IV);wDo=r(tFt,"PerceiverForSequenceClassification"),tFt.forEach(t),ADo=r(CSe," (Perceiver model)"),CSe.forEach(t),LDo=i(q),lF=n(q,"LI",{});var wSe=s(lF);mue=n(wSe,"STRONG",{});var aFt=s(mue);yDo=r(aFt,"plbart"),aFt.forEach(t),xDo=r(wSe," \u2014 "),NV=n(wSe,"A",{href:!0});var nFt=s(NV);$Do=r(nFt,"PLBartForSequenceClassification"),nFt.forEach(t),kDo=r(wSe," (PLBart model)"),wSe.forEach(t),SDo=i(q),iF=n(q,"LI",{});var ASe=s(iF);fue=n(ASe,"STRONG",{});var sFt=s(fue);RDo=r(sFt,"qdqbert"),sFt.forEach(t),PDo=r(ASe," \u2014 "),qV=n(ASe,"A",{href:!0});var lFt=s(qV);BDo=r(lFt,"QDQBertForSequenceClassification"),lFt.forEach(t),IDo=r(ASe," (QDQBert model)"),ASe.forEach(t),NDo=i(q),dF=n(q,"LI",{});var LSe=s(dF);gue=n(LSe,"STRONG",{});var iFt=s(gue);qDo=r(iFt,"reformer"),iFt.forEach(t),jDo=r(LSe," \u2014 "),jV=n(LSe,"A",{href:!0});var dFt=s(jV);DDo=r(dFt,"ReformerForSequenceClassification"),dFt.forEach(t),GDo=r(LSe," (Reformer model)"),LSe.forEach(t),ODo=i(q),cF=n(q,"LI",{});var ySe=s(cF);hue=n(ySe,"STRONG",{});var cFt=s(hue);VDo=r(cFt,"rembert"),cFt.forEach(t),XDo=r(ySe," \u2014 "),DV=n(ySe,"A",{href:!0});var mFt=s(DV);zDo=r(mFt,"RemBertForSequenceClassification"),mFt.forEach(t),QDo=r(ySe," (RemBERT model)"),ySe.forEach(t),WDo=i(q),mF=n(q,"LI",{});var xSe=s(mF);uue=n(xSe,"STRONG",{});var fFt=s(uue);HDo=r(fFt,"roberta"),fFt.forEach(t),UDo=r(xSe," \u2014 "),GV=n(xSe,"A",{href:!0});var gFt=s(GV);JDo=r(gFt,"RobertaForSequenceClassification"),gFt.forEach(t),YDo=r(xSe," (RoBERTa model)"),xSe.forEach(t),KDo=i(q),fF=n(q,"LI",{});var $Se=s(fF);pue=n($Se,"STRONG",{});var hFt=s(pue);ZDo=r(hFt,"roformer"),hFt.forEach(t),eGo=r($Se," \u2014 "),OV=n($Se,"A",{href:!0});var uFt=s(OV);oGo=r(uFt,"RoFormerForSequenceClassification"),uFt.forEach(t),rGo=r($Se," (RoFormer model)"),$Se.forEach(t),tGo=i(q),gF=n(q,"LI",{});var kSe=s(gF);_ue=n(kSe,"STRONG",{});var pFt=s(_ue);aGo=r(pFt,"squeezebert"),pFt.forEach(t),nGo=r(kSe," \u2014 "),VV=n(kSe,"A",{href:!0});var _Ft=s(VV);sGo=r(_Ft,"SqueezeBertForSequenceClassification"),_Ft.forEach(t),lGo=r(kSe," (SqueezeBERT model)"),kSe.forEach(t),iGo=i(q),hF=n(q,"LI",{});var SSe=s(hF);bue=n(SSe,"STRONG",{});var bFt=s(bue);dGo=r(bFt,"tapas"),bFt.forEach(t),cGo=r(SSe," \u2014 "),XV=n(SSe,"A",{href:!0});var vFt=s(XV);mGo=r(vFt,"TapasForSequenceClassification"),vFt.forEach(t),fGo=r(SSe," (TAPAS model)"),SSe.forEach(t),gGo=i(q),uF=n(q,"LI",{});var RSe=s(uF);vue=n(RSe,"STRONG",{});var FFt=s(vue);hGo=r(FFt,"transfo-xl"),FFt.forEach(t),uGo=r(RSe," \u2014 "),zV=n(RSe,"A",{href:!0});var TFt=s(zV);pGo=r(TFt,"TransfoXLForSequenceClassification"),TFt.forEach(t),_Go=r(RSe," (Transformer-XL model)"),RSe.forEach(t),bGo=i(q),pF=n(q,"LI",{});var PSe=s(pF);Fue=n(PSe,"STRONG",{});var MFt=s(Fue);vGo=r(MFt,"xlm"),MFt.forEach(t),FGo=r(PSe," \u2014 "),QV=n(PSe,"A",{href:!0});var EFt=s(QV);TGo=r(EFt,"XLMForSequenceClassification"),EFt.forEach(t),MGo=r(PSe," (XLM model)"),PSe.forEach(t),EGo=i(q),_F=n(q,"LI",{});var BSe=s(_F);Tue=n(BSe,"STRONG",{});var CFt=s(Tue);CGo=r(CFt,"xlm-roberta"),CFt.forEach(t),wGo=r(BSe," \u2014 "),WV=n(BSe,"A",{href:!0});var wFt=s(WV);AGo=r(wFt,"XLMRobertaForSequenceClassification"),wFt.forEach(t),LGo=r(BSe," (XLM-RoBERTa model)"),BSe.forEach(t),yGo=i(q),bF=n(q,"LI",{});var ISe=s(bF);Mue=n(ISe,"STRONG",{});var AFt=s(Mue);xGo=r(AFt,"xlm-roberta-xl"),AFt.forEach(t),$Go=r(ISe," \u2014 "),HV=n(ISe,"A",{href:!0});var LFt=s(HV);kGo=r(LFt,"XLMRobertaXLForSequenceClassification"),LFt.forEach(t),SGo=r(ISe," (XLM-RoBERTa-XL model)"),ISe.forEach(t),RGo=i(q),vF=n(q,"LI",{});var NSe=s(vF);Eue=n(NSe,"STRONG",{});var yFt=s(Eue);PGo=r(yFt,"xlnet"),yFt.forEach(t),BGo=r(NSe," \u2014 "),UV=n(NSe,"A",{href:!0});var xFt=s(UV);IGo=r(xFt,"XLNetForSequenceClassification"),xFt.forEach(t),NGo=r(NSe," (XLNet model)"),NSe.forEach(t),qGo=i(q),FF=n(q,"LI",{});var qSe=s(FF);Cue=n(qSe,"STRONG",{});var $Ft=s(Cue);jGo=r($Ft,"yoso"),$Ft.forEach(t),DGo=r(qSe," \u2014 "),JV=n(qSe,"A",{href:!0});var kFt=s(JV);GGo=r(kFt,"YosoForSequenceClassification"),kFt.forEach(t),OGo=r(qSe," (YOSO model)"),qSe.forEach(t),q.forEach(t),VGo=i(da),TF=n(da,"P",{});var jSe=s(TF);XGo=r(jSe,"The model is set in evaluation mode by default using "),wue=n(jSe,"CODE",{});var SFt=s(wue);zGo=r(SFt,"model.eval()"),SFt.forEach(t),QGo=r(jSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(jSe,"CODE",{});var RFt=s(Aue);WGo=r(RFt,"model.train()"),RFt.forEach(t),jSe.forEach(t),HGo=i(da),T(MF.$$.fragment,da),da.forEach(t),tl.forEach(t),LOe=i(m),ed=n(m,"H2",{class:!0});var RXe=s(ed);EF=n(RXe,"A",{id:!0,class:!0,href:!0});var PFt=s(EF);Lue=n(PFt,"SPAN",{});var BFt=s(Lue);T(By.$$.fragment,BFt),BFt.forEach(t),PFt.forEach(t),UGo=i(RXe),yue=n(RXe,"SPAN",{});var IFt=s(yue);JGo=r(IFt,"AutoModelForMultipleChoice"),IFt.forEach(t),RXe.forEach(t),yOe=i(m),Bo=n(m,"DIV",{class:!0});var al=s(Bo);T(Iy.$$.fragment,al),YGo=i(al),od=n(al,"P",{});var Goe=s(od);KGo=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YV=n(Goe,"A",{href:!0});var NFt=s(YV);ZGo=r(NFt,"from_pretrained()"),NFt.forEach(t),eOo=r(Goe," class method or the "),KV=n(Goe,"A",{href:!0});var qFt=s(KV);oOo=r(qFt,"from_config()"),qFt.forEach(t),rOo=r(Goe,` class
method.`),Goe.forEach(t),tOo=i(al),Ny=n(al,"P",{});var PXe=s(Ny);aOo=r(PXe,"This class cannot be instantiated directly using "),xue=n(PXe,"CODE",{});var jFt=s(xue);nOo=r(jFt,"__init__()"),jFt.forEach(t),sOo=r(PXe," (throws an error)."),PXe.forEach(t),lOo=i(al),mt=n(al,"DIV",{class:!0});var W6=s(mt);T(qy.$$.fragment,W6),iOo=i(W6),$ue=n(W6,"P",{});var DFt=s($ue);dOo=r(DFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),DFt.forEach(t),cOo=i(W6),rd=n(W6,"P",{});var Ooe=s(rd);mOo=r(Ooe,`Note:
Loading a model from its configuration file does `),kue=n(Ooe,"STRONG",{});var GFt=s(kue);fOo=r(GFt,"not"),GFt.forEach(t),gOo=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(Ooe,"A",{href:!0});var OFt=s(ZV);hOo=r(OFt,"from_pretrained()"),OFt.forEach(t),uOo=r(Ooe," to load the model weights."),Ooe.forEach(t),pOo=i(W6),T(CF.$$.fragment,W6),W6.forEach(t),_Oo=i(al),ro=n(al,"DIV",{class:!0});var ca=s(ro);T(jy.$$.fragment,ca),bOo=i(ca),Sue=n(ca,"P",{});var VFt=s(Sue);vOo=r(VFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VFt.forEach(t),FOo=i(ca),ja=n(ca,"P",{});var H6=s(ja);TOo=r(H6,"The model class to instantiate is selected based on the "),Rue=n(H6,"CODE",{});var XFt=s(Rue);MOo=r(XFt,"model_type"),XFt.forEach(t),EOo=r(H6,` property of the config object (either
passed as an argument or loaded from `),Pue=n(H6,"CODE",{});var zFt=s(Pue);COo=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),wOo=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(H6,"CODE",{});var QFt=s(Bue);AOo=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),LOo=r(H6,":"),H6.forEach(t),yOo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);wF=n(ee,"LI",{});var DSe=s(wF);Iue=n(DSe,"STRONG",{});var WFt=s(Iue);xOo=r(WFt,"albert"),WFt.forEach(t),$Oo=r(DSe," \u2014 "),eX=n(DSe,"A",{href:!0});var HFt=s(eX);kOo=r(HFt,"AlbertForMultipleChoice"),HFt.forEach(t),SOo=r(DSe," (ALBERT model)"),DSe.forEach(t),ROo=i(ee),AF=n(ee,"LI",{});var GSe=s(AF);Nue=n(GSe,"STRONG",{});var UFt=s(Nue);POo=r(UFt,"bert"),UFt.forEach(t),BOo=r(GSe," \u2014 "),oX=n(GSe,"A",{href:!0});var JFt=s(oX);IOo=r(JFt,"BertForMultipleChoice"),JFt.forEach(t),NOo=r(GSe," (BERT model)"),GSe.forEach(t),qOo=i(ee),LF=n(ee,"LI",{});var OSe=s(LF);que=n(OSe,"STRONG",{});var YFt=s(que);jOo=r(YFt,"big_bird"),YFt.forEach(t),DOo=r(OSe," \u2014 "),rX=n(OSe,"A",{href:!0});var KFt=s(rX);GOo=r(KFt,"BigBirdForMultipleChoice"),KFt.forEach(t),OOo=r(OSe," (BigBird model)"),OSe.forEach(t),VOo=i(ee),yF=n(ee,"LI",{});var VSe=s(yF);jue=n(VSe,"STRONG",{});var ZFt=s(jue);XOo=r(ZFt,"camembert"),ZFt.forEach(t),zOo=r(VSe," \u2014 "),tX=n(VSe,"A",{href:!0});var e1t=s(tX);QOo=r(e1t,"CamembertForMultipleChoice"),e1t.forEach(t),WOo=r(VSe," (CamemBERT model)"),VSe.forEach(t),HOo=i(ee),xF=n(ee,"LI",{});var XSe=s(xF);Due=n(XSe,"STRONG",{});var o1t=s(Due);UOo=r(o1t,"canine"),o1t.forEach(t),JOo=r(XSe," \u2014 "),aX=n(XSe,"A",{href:!0});var r1t=s(aX);YOo=r(r1t,"CanineForMultipleChoice"),r1t.forEach(t),KOo=r(XSe," (CANINE model)"),XSe.forEach(t),ZOo=i(ee),$F=n(ee,"LI",{});var zSe=s($F);Gue=n(zSe,"STRONG",{});var t1t=s(Gue);eVo=r(t1t,"convbert"),t1t.forEach(t),oVo=r(zSe," \u2014 "),nX=n(zSe,"A",{href:!0});var a1t=s(nX);rVo=r(a1t,"ConvBertForMultipleChoice"),a1t.forEach(t),tVo=r(zSe," (ConvBERT model)"),zSe.forEach(t),aVo=i(ee),kF=n(ee,"LI",{});var QSe=s(kF);Oue=n(QSe,"STRONG",{});var n1t=s(Oue);nVo=r(n1t,"data2vec-text"),n1t.forEach(t),sVo=r(QSe," \u2014 "),sX=n(QSe,"A",{href:!0});var s1t=s(sX);lVo=r(s1t,"Data2VecTextForMultipleChoice"),s1t.forEach(t),iVo=r(QSe," (Data2VecText model)"),QSe.forEach(t),dVo=i(ee),SF=n(ee,"LI",{});var WSe=s(SF);Vue=n(WSe,"STRONG",{});var l1t=s(Vue);cVo=r(l1t,"deberta-v2"),l1t.forEach(t),mVo=r(WSe," \u2014 "),lX=n(WSe,"A",{href:!0});var i1t=s(lX);fVo=r(i1t,"DebertaV2ForMultipleChoice"),i1t.forEach(t),gVo=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),hVo=i(ee),RF=n(ee,"LI",{});var HSe=s(RF);Xue=n(HSe,"STRONG",{});var d1t=s(Xue);uVo=r(d1t,"distilbert"),d1t.forEach(t),pVo=r(HSe," \u2014 "),iX=n(HSe,"A",{href:!0});var c1t=s(iX);_Vo=r(c1t,"DistilBertForMultipleChoice"),c1t.forEach(t),bVo=r(HSe," (DistilBERT model)"),HSe.forEach(t),vVo=i(ee),PF=n(ee,"LI",{});var USe=s(PF);zue=n(USe,"STRONG",{});var m1t=s(zue);FVo=r(m1t,"electra"),m1t.forEach(t),TVo=r(USe," \u2014 "),dX=n(USe,"A",{href:!0});var f1t=s(dX);MVo=r(f1t,"ElectraForMultipleChoice"),f1t.forEach(t),EVo=r(USe," (ELECTRA model)"),USe.forEach(t),CVo=i(ee),BF=n(ee,"LI",{});var JSe=s(BF);Que=n(JSe,"STRONG",{});var g1t=s(Que);wVo=r(g1t,"flaubert"),g1t.forEach(t),AVo=r(JSe," \u2014 "),cX=n(JSe,"A",{href:!0});var h1t=s(cX);LVo=r(h1t,"FlaubertForMultipleChoice"),h1t.forEach(t),yVo=r(JSe," (FlauBERT model)"),JSe.forEach(t),xVo=i(ee),IF=n(ee,"LI",{});var YSe=s(IF);Wue=n(YSe,"STRONG",{});var u1t=s(Wue);$Vo=r(u1t,"fnet"),u1t.forEach(t),kVo=r(YSe," \u2014 "),mX=n(YSe,"A",{href:!0});var p1t=s(mX);SVo=r(p1t,"FNetForMultipleChoice"),p1t.forEach(t),RVo=r(YSe," (FNet model)"),YSe.forEach(t),PVo=i(ee),NF=n(ee,"LI",{});var KSe=s(NF);Hue=n(KSe,"STRONG",{});var _1t=s(Hue);BVo=r(_1t,"funnel"),_1t.forEach(t),IVo=r(KSe," \u2014 "),fX=n(KSe,"A",{href:!0});var b1t=s(fX);NVo=r(b1t,"FunnelForMultipleChoice"),b1t.forEach(t),qVo=r(KSe," (Funnel Transformer model)"),KSe.forEach(t),jVo=i(ee),qF=n(ee,"LI",{});var ZSe=s(qF);Uue=n(ZSe,"STRONG",{});var v1t=s(Uue);DVo=r(v1t,"ibert"),v1t.forEach(t),GVo=r(ZSe," \u2014 "),gX=n(ZSe,"A",{href:!0});var F1t=s(gX);OVo=r(F1t,"IBertForMultipleChoice"),F1t.forEach(t),VVo=r(ZSe," (I-BERT model)"),ZSe.forEach(t),XVo=i(ee),jF=n(ee,"LI",{});var eRe=s(jF);Jue=n(eRe,"STRONG",{});var T1t=s(Jue);zVo=r(T1t,"longformer"),T1t.forEach(t),QVo=r(eRe," \u2014 "),hX=n(eRe,"A",{href:!0});var M1t=s(hX);WVo=r(M1t,"LongformerForMultipleChoice"),M1t.forEach(t),HVo=r(eRe," (Longformer model)"),eRe.forEach(t),UVo=i(ee),DF=n(ee,"LI",{});var oRe=s(DF);Yue=n(oRe,"STRONG",{});var E1t=s(Yue);JVo=r(E1t,"megatron-bert"),E1t.forEach(t),YVo=r(oRe," \u2014 "),uX=n(oRe,"A",{href:!0});var C1t=s(uX);KVo=r(C1t,"MegatronBertForMultipleChoice"),C1t.forEach(t),ZVo=r(oRe," (Megatron-BERT model)"),oRe.forEach(t),eXo=i(ee),GF=n(ee,"LI",{});var rRe=s(GF);Kue=n(rRe,"STRONG",{});var w1t=s(Kue);oXo=r(w1t,"mobilebert"),w1t.forEach(t),rXo=r(rRe," \u2014 "),pX=n(rRe,"A",{href:!0});var A1t=s(pX);tXo=r(A1t,"MobileBertForMultipleChoice"),A1t.forEach(t),aXo=r(rRe," (MobileBERT model)"),rRe.forEach(t),nXo=i(ee),OF=n(ee,"LI",{});var tRe=s(OF);Zue=n(tRe,"STRONG",{});var L1t=s(Zue);sXo=r(L1t,"mpnet"),L1t.forEach(t),lXo=r(tRe," \u2014 "),_X=n(tRe,"A",{href:!0});var y1t=s(_X);iXo=r(y1t,"MPNetForMultipleChoice"),y1t.forEach(t),dXo=r(tRe," (MPNet model)"),tRe.forEach(t),cXo=i(ee),VF=n(ee,"LI",{});var aRe=s(VF);epe=n(aRe,"STRONG",{});var x1t=s(epe);mXo=r(x1t,"nezha"),x1t.forEach(t),fXo=r(aRe," \u2014 "),bX=n(aRe,"A",{href:!0});var $1t=s(bX);gXo=r($1t,"NezhaForMultipleChoice"),$1t.forEach(t),hXo=r(aRe," (Nezha model)"),aRe.forEach(t),uXo=i(ee),XF=n(ee,"LI",{});var nRe=s(XF);ope=n(nRe,"STRONG",{});var k1t=s(ope);pXo=r(k1t,"nystromformer"),k1t.forEach(t),_Xo=r(nRe," \u2014 "),vX=n(nRe,"A",{href:!0});var S1t=s(vX);bXo=r(S1t,"NystromformerForMultipleChoice"),S1t.forEach(t),vXo=r(nRe," (Nystr\xF6mformer model)"),nRe.forEach(t),FXo=i(ee),zF=n(ee,"LI",{});var sRe=s(zF);rpe=n(sRe,"STRONG",{});var R1t=s(rpe);TXo=r(R1t,"qdqbert"),R1t.forEach(t),MXo=r(sRe," \u2014 "),FX=n(sRe,"A",{href:!0});var P1t=s(FX);EXo=r(P1t,"QDQBertForMultipleChoice"),P1t.forEach(t),CXo=r(sRe," (QDQBert model)"),sRe.forEach(t),wXo=i(ee),QF=n(ee,"LI",{});var lRe=s(QF);tpe=n(lRe,"STRONG",{});var B1t=s(tpe);AXo=r(B1t,"rembert"),B1t.forEach(t),LXo=r(lRe," \u2014 "),TX=n(lRe,"A",{href:!0});var I1t=s(TX);yXo=r(I1t,"RemBertForMultipleChoice"),I1t.forEach(t),xXo=r(lRe," (RemBERT model)"),lRe.forEach(t),$Xo=i(ee),WF=n(ee,"LI",{});var iRe=s(WF);ape=n(iRe,"STRONG",{});var N1t=s(ape);kXo=r(N1t,"roberta"),N1t.forEach(t),SXo=r(iRe," \u2014 "),MX=n(iRe,"A",{href:!0});var q1t=s(MX);RXo=r(q1t,"RobertaForMultipleChoice"),q1t.forEach(t),PXo=r(iRe," (RoBERTa model)"),iRe.forEach(t),BXo=i(ee),HF=n(ee,"LI",{});var dRe=s(HF);npe=n(dRe,"STRONG",{});var j1t=s(npe);IXo=r(j1t,"roformer"),j1t.forEach(t),NXo=r(dRe," \u2014 "),EX=n(dRe,"A",{href:!0});var D1t=s(EX);qXo=r(D1t,"RoFormerForMultipleChoice"),D1t.forEach(t),jXo=r(dRe," (RoFormer model)"),dRe.forEach(t),DXo=i(ee),UF=n(ee,"LI",{});var cRe=s(UF);spe=n(cRe,"STRONG",{});var G1t=s(spe);GXo=r(G1t,"squeezebert"),G1t.forEach(t),OXo=r(cRe," \u2014 "),CX=n(cRe,"A",{href:!0});var O1t=s(CX);VXo=r(O1t,"SqueezeBertForMultipleChoice"),O1t.forEach(t),XXo=r(cRe," (SqueezeBERT model)"),cRe.forEach(t),zXo=i(ee),JF=n(ee,"LI",{});var mRe=s(JF);lpe=n(mRe,"STRONG",{});var V1t=s(lpe);QXo=r(V1t,"xlm"),V1t.forEach(t),WXo=r(mRe," \u2014 "),wX=n(mRe,"A",{href:!0});var X1t=s(wX);HXo=r(X1t,"XLMForMultipleChoice"),X1t.forEach(t),UXo=r(mRe," (XLM model)"),mRe.forEach(t),JXo=i(ee),YF=n(ee,"LI",{});var fRe=s(YF);ipe=n(fRe,"STRONG",{});var z1t=s(ipe);YXo=r(z1t,"xlm-roberta"),z1t.forEach(t),KXo=r(fRe," \u2014 "),AX=n(fRe,"A",{href:!0});var Q1t=s(AX);ZXo=r(Q1t,"XLMRobertaForMultipleChoice"),Q1t.forEach(t),ezo=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),ozo=i(ee),KF=n(ee,"LI",{});var gRe=s(KF);dpe=n(gRe,"STRONG",{});var W1t=s(dpe);rzo=r(W1t,"xlm-roberta-xl"),W1t.forEach(t),tzo=r(gRe," \u2014 "),LX=n(gRe,"A",{href:!0});var H1t=s(LX);azo=r(H1t,"XLMRobertaXLForMultipleChoice"),H1t.forEach(t),nzo=r(gRe," (XLM-RoBERTa-XL model)"),gRe.forEach(t),szo=i(ee),ZF=n(ee,"LI",{});var hRe=s(ZF);cpe=n(hRe,"STRONG",{});var U1t=s(cpe);lzo=r(U1t,"xlnet"),U1t.forEach(t),izo=r(hRe," \u2014 "),yX=n(hRe,"A",{href:!0});var J1t=s(yX);dzo=r(J1t,"XLNetForMultipleChoice"),J1t.forEach(t),czo=r(hRe," (XLNet model)"),hRe.forEach(t),mzo=i(ee),e1=n(ee,"LI",{});var uRe=s(e1);mpe=n(uRe,"STRONG",{});var Y1t=s(mpe);fzo=r(Y1t,"yoso"),Y1t.forEach(t),gzo=r(uRe," \u2014 "),xX=n(uRe,"A",{href:!0});var K1t=s(xX);hzo=r(K1t,"YosoForMultipleChoice"),K1t.forEach(t),uzo=r(uRe," (YOSO model)"),uRe.forEach(t),ee.forEach(t),pzo=i(ca),o1=n(ca,"P",{});var pRe=s(o1);_zo=r(pRe,"The model is set in evaluation mode by default using "),fpe=n(pRe,"CODE",{});var Z1t=s(fpe);bzo=r(Z1t,"model.eval()"),Z1t.forEach(t),vzo=r(pRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=n(pRe,"CODE",{});var eTt=s(gpe);Fzo=r(eTt,"model.train()"),eTt.forEach(t),pRe.forEach(t),Tzo=i(ca),T(r1.$$.fragment,ca),ca.forEach(t),al.forEach(t),xOe=i(m),td=n(m,"H2",{class:!0});var BXe=s(td);t1=n(BXe,"A",{id:!0,class:!0,href:!0});var oTt=s(t1);hpe=n(oTt,"SPAN",{});var rTt=s(hpe);T(Dy.$$.fragment,rTt),rTt.forEach(t),oTt.forEach(t),Mzo=i(BXe),upe=n(BXe,"SPAN",{});var tTt=s(upe);Ezo=r(tTt,"AutoModelForNextSentencePrediction"),tTt.forEach(t),BXe.forEach(t),$Oe=i(m),Io=n(m,"DIV",{class:!0});var nl=s(Io);T(Gy.$$.fragment,nl),Czo=i(nl),ad=n(nl,"P",{});var Voe=s(ad);wzo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$X=n(Voe,"A",{href:!0});var aTt=s($X);Azo=r(aTt,"from_pretrained()"),aTt.forEach(t),Lzo=r(Voe," class method or the "),kX=n(Voe,"A",{href:!0});var nTt=s(kX);yzo=r(nTt,"from_config()"),nTt.forEach(t),xzo=r(Voe,` class
method.`),Voe.forEach(t),$zo=i(nl),Oy=n(nl,"P",{});var IXe=s(Oy);kzo=r(IXe,"This class cannot be instantiated directly using "),ppe=n(IXe,"CODE",{});var sTt=s(ppe);Szo=r(sTt,"__init__()"),sTt.forEach(t),Rzo=r(IXe," (throws an error)."),IXe.forEach(t),Pzo=i(nl),ft=n(nl,"DIV",{class:!0});var U6=s(ft);T(Vy.$$.fragment,U6),Bzo=i(U6),_pe=n(U6,"P",{});var lTt=s(_pe);Izo=r(lTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lTt.forEach(t),Nzo=i(U6),nd=n(U6,"P",{});var Xoe=s(nd);qzo=r(Xoe,`Note:
Loading a model from its configuration file does `),bpe=n(Xoe,"STRONG",{});var iTt=s(bpe);jzo=r(iTt,"not"),iTt.forEach(t),Dzo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(Xoe,"A",{href:!0});var dTt=s(SX);Gzo=r(dTt,"from_pretrained()"),dTt.forEach(t),Ozo=r(Xoe," to load the model weights."),Xoe.forEach(t),Vzo=i(U6),T(a1.$$.fragment,U6),U6.forEach(t),Xzo=i(nl),to=n(nl,"DIV",{class:!0});var ma=s(to);T(Xy.$$.fragment,ma),zzo=i(ma),vpe=n(ma,"P",{});var cTt=s(vpe);Qzo=r(cTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cTt.forEach(t),Wzo=i(ma),Da=n(ma,"P",{});var J6=s(Da);Hzo=r(J6,"The model class to instantiate is selected based on the "),Fpe=n(J6,"CODE",{});var mTt=s(Fpe);Uzo=r(mTt,"model_type"),mTt.forEach(t),Jzo=r(J6,` property of the config object (either
passed as an argument or loaded from `),Tpe=n(J6,"CODE",{});var fTt=s(Tpe);Yzo=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),Kzo=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=n(J6,"CODE",{});var gTt=s(Mpe);Zzo=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),eQo=r(J6,":"),J6.forEach(t),oQo=i(ma),No=n(ma,"UL",{});var fa=s(No);n1=n(fa,"LI",{});var _Re=s(n1);Epe=n(_Re,"STRONG",{});var hTt=s(Epe);rQo=r(hTt,"bert"),hTt.forEach(t),tQo=r(_Re," \u2014 "),RX=n(_Re,"A",{href:!0});var uTt=s(RX);aQo=r(uTt,"BertForNextSentencePrediction"),uTt.forEach(t),nQo=r(_Re," (BERT model)"),_Re.forEach(t),sQo=i(fa),s1=n(fa,"LI",{});var bRe=s(s1);Cpe=n(bRe,"STRONG",{});var pTt=s(Cpe);lQo=r(pTt,"fnet"),pTt.forEach(t),iQo=r(bRe," \u2014 "),PX=n(bRe,"A",{href:!0});var _Tt=s(PX);dQo=r(_Tt,"FNetForNextSentencePrediction"),_Tt.forEach(t),cQo=r(bRe," (FNet model)"),bRe.forEach(t),mQo=i(fa),l1=n(fa,"LI",{});var vRe=s(l1);wpe=n(vRe,"STRONG",{});var bTt=s(wpe);fQo=r(bTt,"megatron-bert"),bTt.forEach(t),gQo=r(vRe," \u2014 "),BX=n(vRe,"A",{href:!0});var vTt=s(BX);hQo=r(vTt,"MegatronBertForNextSentencePrediction"),vTt.forEach(t),uQo=r(vRe," (Megatron-BERT model)"),vRe.forEach(t),pQo=i(fa),i1=n(fa,"LI",{});var FRe=s(i1);Ape=n(FRe,"STRONG",{});var FTt=s(Ape);_Qo=r(FTt,"mobilebert"),FTt.forEach(t),bQo=r(FRe," \u2014 "),IX=n(FRe,"A",{href:!0});var TTt=s(IX);vQo=r(TTt,"MobileBertForNextSentencePrediction"),TTt.forEach(t),FQo=r(FRe," (MobileBERT model)"),FRe.forEach(t),TQo=i(fa),d1=n(fa,"LI",{});var TRe=s(d1);Lpe=n(TRe,"STRONG",{});var MTt=s(Lpe);MQo=r(MTt,"nezha"),MTt.forEach(t),EQo=r(TRe," \u2014 "),NX=n(TRe,"A",{href:!0});var ETt=s(NX);CQo=r(ETt,"NezhaForNextSentencePrediction"),ETt.forEach(t),wQo=r(TRe," (Nezha model)"),TRe.forEach(t),AQo=i(fa),c1=n(fa,"LI",{});var MRe=s(c1);ype=n(MRe,"STRONG",{});var CTt=s(ype);LQo=r(CTt,"qdqbert"),CTt.forEach(t),yQo=r(MRe," \u2014 "),qX=n(MRe,"A",{href:!0});var wTt=s(qX);xQo=r(wTt,"QDQBertForNextSentencePrediction"),wTt.forEach(t),$Qo=r(MRe," (QDQBert model)"),MRe.forEach(t),fa.forEach(t),kQo=i(ma),m1=n(ma,"P",{});var ERe=s(m1);SQo=r(ERe,"The model is set in evaluation mode by default using "),xpe=n(ERe,"CODE",{});var ATt=s(xpe);RQo=r(ATt,"model.eval()"),ATt.forEach(t),PQo=r(ERe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(ERe,"CODE",{});var LTt=s($pe);BQo=r(LTt,"model.train()"),LTt.forEach(t),ERe.forEach(t),IQo=i(ma),T(f1.$$.fragment,ma),ma.forEach(t),nl.forEach(t),kOe=i(m),sd=n(m,"H2",{class:!0});var NXe=s(sd);g1=n(NXe,"A",{id:!0,class:!0,href:!0});var yTt=s(g1);kpe=n(yTt,"SPAN",{});var xTt=s(kpe);T(zy.$$.fragment,xTt),xTt.forEach(t),yTt.forEach(t),NQo=i(NXe),Spe=n(NXe,"SPAN",{});var $Tt=s(Spe);qQo=r($Tt,"AutoModelForTokenClassification"),$Tt.forEach(t),NXe.forEach(t),SOe=i(m),qo=n(m,"DIV",{class:!0});var sl=s(qo);T(Qy.$$.fragment,sl),jQo=i(sl),ld=n(sl,"P",{});var zoe=s(ld);DQo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jX=n(zoe,"A",{href:!0});var kTt=s(jX);GQo=r(kTt,"from_pretrained()"),kTt.forEach(t),OQo=r(zoe," class method or the "),DX=n(zoe,"A",{href:!0});var STt=s(DX);VQo=r(STt,"from_config()"),STt.forEach(t),XQo=r(zoe,` class
method.`),zoe.forEach(t),zQo=i(sl),Wy=n(sl,"P",{});var qXe=s(Wy);QQo=r(qXe,"This class cannot be instantiated directly using "),Rpe=n(qXe,"CODE",{});var RTt=s(Rpe);WQo=r(RTt,"__init__()"),RTt.forEach(t),HQo=r(qXe," (throws an error)."),qXe.forEach(t),UQo=i(sl),gt=n(sl,"DIV",{class:!0});var Y6=s(gt);T(Hy.$$.fragment,Y6),JQo=i(Y6),Ppe=n(Y6,"P",{});var PTt=s(Ppe);YQo=r(PTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PTt.forEach(t),KQo=i(Y6),id=n(Y6,"P",{});var Qoe=s(id);ZQo=r(Qoe,`Note:
Loading a model from its configuration file does `),Bpe=n(Qoe,"STRONG",{});var BTt=s(Bpe);eWo=r(BTt,"not"),BTt.forEach(t),oWo=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(Qoe,"A",{href:!0});var ITt=s(GX);rWo=r(ITt,"from_pretrained()"),ITt.forEach(t),tWo=r(Qoe," to load the model weights."),Qoe.forEach(t),aWo=i(Y6),T(h1.$$.fragment,Y6),Y6.forEach(t),nWo=i(sl),ao=n(sl,"DIV",{class:!0});var ga=s(ao);T(Uy.$$.fragment,ga),sWo=i(ga),Ipe=n(ga,"P",{});var NTt=s(Ipe);lWo=r(NTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NTt.forEach(t),iWo=i(ga),Ga=n(ga,"P",{});var K6=s(Ga);dWo=r(K6,"The model class to instantiate is selected based on the "),Npe=n(K6,"CODE",{});var qTt=s(Npe);cWo=r(qTt,"model_type"),qTt.forEach(t),mWo=r(K6,` property of the config object (either
passed as an argument or loaded from `),qpe=n(K6,"CODE",{});var jTt=s(qpe);fWo=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),gWo=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(K6,"CODE",{});var DTt=s(jpe);hWo=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),uWo=r(K6,":"),K6.forEach(t),pWo=i(ga),H=n(ga,"UL",{});var J=s(H);u1=n(J,"LI",{});var CRe=s(u1);Dpe=n(CRe,"STRONG",{});var GTt=s(Dpe);_Wo=r(GTt,"albert"),GTt.forEach(t),bWo=r(CRe," \u2014 "),OX=n(CRe,"A",{href:!0});var OTt=s(OX);vWo=r(OTt,"AlbertForTokenClassification"),OTt.forEach(t),FWo=r(CRe," (ALBERT model)"),CRe.forEach(t),TWo=i(J),p1=n(J,"LI",{});var wRe=s(p1);Gpe=n(wRe,"STRONG",{});var VTt=s(Gpe);MWo=r(VTt,"bert"),VTt.forEach(t),EWo=r(wRe," \u2014 "),VX=n(wRe,"A",{href:!0});var XTt=s(VX);CWo=r(XTt,"BertForTokenClassification"),XTt.forEach(t),wWo=r(wRe," (BERT model)"),wRe.forEach(t),AWo=i(J),_1=n(J,"LI",{});var ARe=s(_1);Ope=n(ARe,"STRONG",{});var zTt=s(Ope);LWo=r(zTt,"big_bird"),zTt.forEach(t),yWo=r(ARe," \u2014 "),XX=n(ARe,"A",{href:!0});var QTt=s(XX);xWo=r(QTt,"BigBirdForTokenClassification"),QTt.forEach(t),$Wo=r(ARe," (BigBird model)"),ARe.forEach(t),kWo=i(J),b1=n(J,"LI",{});var LRe=s(b1);Vpe=n(LRe,"STRONG",{});var WTt=s(Vpe);SWo=r(WTt,"bloom"),WTt.forEach(t),RWo=r(LRe," \u2014 "),zX=n(LRe,"A",{href:!0});var HTt=s(zX);PWo=r(HTt,"BloomForTokenClassification"),HTt.forEach(t),BWo=r(LRe," (BLOOM model)"),LRe.forEach(t),IWo=i(J),v1=n(J,"LI",{});var yRe=s(v1);Xpe=n(yRe,"STRONG",{});var UTt=s(Xpe);NWo=r(UTt,"camembert"),UTt.forEach(t),qWo=r(yRe," \u2014 "),QX=n(yRe,"A",{href:!0});var JTt=s(QX);jWo=r(JTt,"CamembertForTokenClassification"),JTt.forEach(t),DWo=r(yRe," (CamemBERT model)"),yRe.forEach(t),GWo=i(J),F1=n(J,"LI",{});var xRe=s(F1);zpe=n(xRe,"STRONG",{});var YTt=s(zpe);OWo=r(YTt,"canine"),YTt.forEach(t),VWo=r(xRe," \u2014 "),WX=n(xRe,"A",{href:!0});var KTt=s(WX);XWo=r(KTt,"CanineForTokenClassification"),KTt.forEach(t),zWo=r(xRe," (CANINE model)"),xRe.forEach(t),QWo=i(J),T1=n(J,"LI",{});var $Re=s(T1);Qpe=n($Re,"STRONG",{});var ZTt=s(Qpe);WWo=r(ZTt,"convbert"),ZTt.forEach(t),HWo=r($Re," \u2014 "),HX=n($Re,"A",{href:!0});var eMt=s(HX);UWo=r(eMt,"ConvBertForTokenClassification"),eMt.forEach(t),JWo=r($Re," (ConvBERT model)"),$Re.forEach(t),YWo=i(J),M1=n(J,"LI",{});var kRe=s(M1);Wpe=n(kRe,"STRONG",{});var oMt=s(Wpe);KWo=r(oMt,"data2vec-text"),oMt.forEach(t),ZWo=r(kRe," \u2014 "),UX=n(kRe,"A",{href:!0});var rMt=s(UX);eHo=r(rMt,"Data2VecTextForTokenClassification"),rMt.forEach(t),oHo=r(kRe," (Data2VecText model)"),kRe.forEach(t),rHo=i(J),E1=n(J,"LI",{});var SRe=s(E1);Hpe=n(SRe,"STRONG",{});var tMt=s(Hpe);tHo=r(tMt,"deberta"),tMt.forEach(t),aHo=r(SRe," \u2014 "),JX=n(SRe,"A",{href:!0});var aMt=s(JX);nHo=r(aMt,"DebertaForTokenClassification"),aMt.forEach(t),sHo=r(SRe," (DeBERTa model)"),SRe.forEach(t),lHo=i(J),C1=n(J,"LI",{});var RRe=s(C1);Upe=n(RRe,"STRONG",{});var nMt=s(Upe);iHo=r(nMt,"deberta-v2"),nMt.forEach(t),dHo=r(RRe," \u2014 "),YX=n(RRe,"A",{href:!0});var sMt=s(YX);cHo=r(sMt,"DebertaV2ForTokenClassification"),sMt.forEach(t),mHo=r(RRe," (DeBERTa-v2 model)"),RRe.forEach(t),fHo=i(J),w1=n(J,"LI",{});var PRe=s(w1);Jpe=n(PRe,"STRONG",{});var lMt=s(Jpe);gHo=r(lMt,"distilbert"),lMt.forEach(t),hHo=r(PRe," \u2014 "),KX=n(PRe,"A",{href:!0});var iMt=s(KX);uHo=r(iMt,"DistilBertForTokenClassification"),iMt.forEach(t),pHo=r(PRe," (DistilBERT model)"),PRe.forEach(t),_Ho=i(J),A1=n(J,"LI",{});var BRe=s(A1);Ype=n(BRe,"STRONG",{});var dMt=s(Ype);bHo=r(dMt,"electra"),dMt.forEach(t),vHo=r(BRe," \u2014 "),ZX=n(BRe,"A",{href:!0});var cMt=s(ZX);FHo=r(cMt,"ElectraForTokenClassification"),cMt.forEach(t),THo=r(BRe," (ELECTRA model)"),BRe.forEach(t),MHo=i(J),L1=n(J,"LI",{});var IRe=s(L1);Kpe=n(IRe,"STRONG",{});var mMt=s(Kpe);EHo=r(mMt,"flaubert"),mMt.forEach(t),CHo=r(IRe," \u2014 "),ez=n(IRe,"A",{href:!0});var fMt=s(ez);wHo=r(fMt,"FlaubertForTokenClassification"),fMt.forEach(t),AHo=r(IRe," (FlauBERT model)"),IRe.forEach(t),LHo=i(J),y1=n(J,"LI",{});var NRe=s(y1);Zpe=n(NRe,"STRONG",{});var gMt=s(Zpe);yHo=r(gMt,"fnet"),gMt.forEach(t),xHo=r(NRe," \u2014 "),oz=n(NRe,"A",{href:!0});var hMt=s(oz);$Ho=r(hMt,"FNetForTokenClassification"),hMt.forEach(t),kHo=r(NRe," (FNet model)"),NRe.forEach(t),SHo=i(J),x1=n(J,"LI",{});var qRe=s(x1);e_e=n(qRe,"STRONG",{});var uMt=s(e_e);RHo=r(uMt,"funnel"),uMt.forEach(t),PHo=r(qRe," \u2014 "),rz=n(qRe,"A",{href:!0});var pMt=s(rz);BHo=r(pMt,"FunnelForTokenClassification"),pMt.forEach(t),IHo=r(qRe," (Funnel Transformer model)"),qRe.forEach(t),NHo=i(J),$1=n(J,"LI",{});var jRe=s($1);o_e=n(jRe,"STRONG",{});var _Mt=s(o_e);qHo=r(_Mt,"gpt2"),_Mt.forEach(t),jHo=r(jRe," \u2014 "),tz=n(jRe,"A",{href:!0});var bMt=s(tz);DHo=r(bMt,"GPT2ForTokenClassification"),bMt.forEach(t),GHo=r(jRe," (OpenAI GPT-2 model)"),jRe.forEach(t),OHo=i(J),k1=n(J,"LI",{});var DRe=s(k1);r_e=n(DRe,"STRONG",{});var vMt=s(r_e);VHo=r(vMt,"ibert"),vMt.forEach(t),XHo=r(DRe," \u2014 "),az=n(DRe,"A",{href:!0});var FMt=s(az);zHo=r(FMt,"IBertForTokenClassification"),FMt.forEach(t),QHo=r(DRe," (I-BERT model)"),DRe.forEach(t),WHo=i(J),S1=n(J,"LI",{});var GRe=s(S1);t_e=n(GRe,"STRONG",{});var TMt=s(t_e);HHo=r(TMt,"layoutlm"),TMt.forEach(t),UHo=r(GRe," \u2014 "),nz=n(GRe,"A",{href:!0});var MMt=s(nz);JHo=r(MMt,"LayoutLMForTokenClassification"),MMt.forEach(t),YHo=r(GRe," (LayoutLM model)"),GRe.forEach(t),KHo=i(J),R1=n(J,"LI",{});var ORe=s(R1);a_e=n(ORe,"STRONG",{});var EMt=s(a_e);ZHo=r(EMt,"layoutlmv2"),EMt.forEach(t),eUo=r(ORe," \u2014 "),sz=n(ORe,"A",{href:!0});var CMt=s(sz);oUo=r(CMt,"LayoutLMv2ForTokenClassification"),CMt.forEach(t),rUo=r(ORe," (LayoutLMv2 model)"),ORe.forEach(t),tUo=i(J),P1=n(J,"LI",{});var VRe=s(P1);n_e=n(VRe,"STRONG",{});var wMt=s(n_e);aUo=r(wMt,"layoutlmv3"),wMt.forEach(t),nUo=r(VRe," \u2014 "),lz=n(VRe,"A",{href:!0});var AMt=s(lz);sUo=r(AMt,"LayoutLMv3ForTokenClassification"),AMt.forEach(t),lUo=r(VRe," (LayoutLMv3 model)"),VRe.forEach(t),iUo=i(J),B1=n(J,"LI",{});var XRe=s(B1);s_e=n(XRe,"STRONG",{});var LMt=s(s_e);dUo=r(LMt,"longformer"),LMt.forEach(t),cUo=r(XRe," \u2014 "),iz=n(XRe,"A",{href:!0});var yMt=s(iz);mUo=r(yMt,"LongformerForTokenClassification"),yMt.forEach(t),fUo=r(XRe," (Longformer model)"),XRe.forEach(t),gUo=i(J),I1=n(J,"LI",{});var zRe=s(I1);l_e=n(zRe,"STRONG",{});var xMt=s(l_e);hUo=r(xMt,"megatron-bert"),xMt.forEach(t),uUo=r(zRe," \u2014 "),dz=n(zRe,"A",{href:!0});var $Mt=s(dz);pUo=r($Mt,"MegatronBertForTokenClassification"),$Mt.forEach(t),_Uo=r(zRe," (Megatron-BERT model)"),zRe.forEach(t),bUo=i(J),N1=n(J,"LI",{});var QRe=s(N1);i_e=n(QRe,"STRONG",{});var kMt=s(i_e);vUo=r(kMt,"mobilebert"),kMt.forEach(t),FUo=r(QRe," \u2014 "),cz=n(QRe,"A",{href:!0});var SMt=s(cz);TUo=r(SMt,"MobileBertForTokenClassification"),SMt.forEach(t),MUo=r(QRe," (MobileBERT model)"),QRe.forEach(t),EUo=i(J),q1=n(J,"LI",{});var WRe=s(q1);d_e=n(WRe,"STRONG",{});var RMt=s(d_e);CUo=r(RMt,"mpnet"),RMt.forEach(t),wUo=r(WRe," \u2014 "),mz=n(WRe,"A",{href:!0});var PMt=s(mz);AUo=r(PMt,"MPNetForTokenClassification"),PMt.forEach(t),LUo=r(WRe," (MPNet model)"),WRe.forEach(t),yUo=i(J),j1=n(J,"LI",{});var HRe=s(j1);c_e=n(HRe,"STRONG",{});var BMt=s(c_e);xUo=r(BMt,"nezha"),BMt.forEach(t),$Uo=r(HRe," \u2014 "),fz=n(HRe,"A",{href:!0});var IMt=s(fz);kUo=r(IMt,"NezhaForTokenClassification"),IMt.forEach(t),SUo=r(HRe," (Nezha model)"),HRe.forEach(t),RUo=i(J),D1=n(J,"LI",{});var URe=s(D1);m_e=n(URe,"STRONG",{});var NMt=s(m_e);PUo=r(NMt,"nystromformer"),NMt.forEach(t),BUo=r(URe," \u2014 "),gz=n(URe,"A",{href:!0});var qMt=s(gz);IUo=r(qMt,"NystromformerForTokenClassification"),qMt.forEach(t),NUo=r(URe," (Nystr\xF6mformer model)"),URe.forEach(t),qUo=i(J),G1=n(J,"LI",{});var JRe=s(G1);f_e=n(JRe,"STRONG",{});var jMt=s(f_e);jUo=r(jMt,"qdqbert"),jMt.forEach(t),DUo=r(JRe," \u2014 "),hz=n(JRe,"A",{href:!0});var DMt=s(hz);GUo=r(DMt,"QDQBertForTokenClassification"),DMt.forEach(t),OUo=r(JRe," (QDQBert model)"),JRe.forEach(t),VUo=i(J),O1=n(J,"LI",{});var YRe=s(O1);g_e=n(YRe,"STRONG",{});var GMt=s(g_e);XUo=r(GMt,"rembert"),GMt.forEach(t),zUo=r(YRe," \u2014 "),uz=n(YRe,"A",{href:!0});var OMt=s(uz);QUo=r(OMt,"RemBertForTokenClassification"),OMt.forEach(t),WUo=r(YRe," (RemBERT model)"),YRe.forEach(t),HUo=i(J),V1=n(J,"LI",{});var KRe=s(V1);h_e=n(KRe,"STRONG",{});var VMt=s(h_e);UUo=r(VMt,"roberta"),VMt.forEach(t),JUo=r(KRe," \u2014 "),pz=n(KRe,"A",{href:!0});var XMt=s(pz);YUo=r(XMt,"RobertaForTokenClassification"),XMt.forEach(t),KUo=r(KRe," (RoBERTa model)"),KRe.forEach(t),ZUo=i(J),X1=n(J,"LI",{});var ZRe=s(X1);u_e=n(ZRe,"STRONG",{});var zMt=s(u_e);eJo=r(zMt,"roformer"),zMt.forEach(t),oJo=r(ZRe," \u2014 "),_z=n(ZRe,"A",{href:!0});var QMt=s(_z);rJo=r(QMt,"RoFormerForTokenClassification"),QMt.forEach(t),tJo=r(ZRe," (RoFormer model)"),ZRe.forEach(t),aJo=i(J),z1=n(J,"LI",{});var ePe=s(z1);p_e=n(ePe,"STRONG",{});var WMt=s(p_e);nJo=r(WMt,"squeezebert"),WMt.forEach(t),sJo=r(ePe," \u2014 "),bz=n(ePe,"A",{href:!0});var HMt=s(bz);lJo=r(HMt,"SqueezeBertForTokenClassification"),HMt.forEach(t),iJo=r(ePe," (SqueezeBERT model)"),ePe.forEach(t),dJo=i(J),Q1=n(J,"LI",{});var oPe=s(Q1);__e=n(oPe,"STRONG",{});var UMt=s(__e);cJo=r(UMt,"xlm"),UMt.forEach(t),mJo=r(oPe," \u2014 "),vz=n(oPe,"A",{href:!0});var JMt=s(vz);fJo=r(JMt,"XLMForTokenClassification"),JMt.forEach(t),gJo=r(oPe," (XLM model)"),oPe.forEach(t),hJo=i(J),W1=n(J,"LI",{});var rPe=s(W1);b_e=n(rPe,"STRONG",{});var YMt=s(b_e);uJo=r(YMt,"xlm-roberta"),YMt.forEach(t),pJo=r(rPe," \u2014 "),Fz=n(rPe,"A",{href:!0});var KMt=s(Fz);_Jo=r(KMt,"XLMRobertaForTokenClassification"),KMt.forEach(t),bJo=r(rPe," (XLM-RoBERTa model)"),rPe.forEach(t),vJo=i(J),H1=n(J,"LI",{});var tPe=s(H1);v_e=n(tPe,"STRONG",{});var ZMt=s(v_e);FJo=r(ZMt,"xlm-roberta-xl"),ZMt.forEach(t),TJo=r(tPe," \u2014 "),Tz=n(tPe,"A",{href:!0});var eEt=s(Tz);MJo=r(eEt,"XLMRobertaXLForTokenClassification"),eEt.forEach(t),EJo=r(tPe," (XLM-RoBERTa-XL model)"),tPe.forEach(t),CJo=i(J),U1=n(J,"LI",{});var aPe=s(U1);F_e=n(aPe,"STRONG",{});var oEt=s(F_e);wJo=r(oEt,"xlnet"),oEt.forEach(t),AJo=r(aPe," \u2014 "),Mz=n(aPe,"A",{href:!0});var rEt=s(Mz);LJo=r(rEt,"XLNetForTokenClassification"),rEt.forEach(t),yJo=r(aPe," (XLNet model)"),aPe.forEach(t),xJo=i(J),J1=n(J,"LI",{});var nPe=s(J1);T_e=n(nPe,"STRONG",{});var tEt=s(T_e);$Jo=r(tEt,"yoso"),tEt.forEach(t),kJo=r(nPe," \u2014 "),Ez=n(nPe,"A",{href:!0});var aEt=s(Ez);SJo=r(aEt,"YosoForTokenClassification"),aEt.forEach(t),RJo=r(nPe," (YOSO model)"),nPe.forEach(t),J.forEach(t),PJo=i(ga),Y1=n(ga,"P",{});var sPe=s(Y1);BJo=r(sPe,"The model is set in evaluation mode by default using "),M_e=n(sPe,"CODE",{});var nEt=s(M_e);IJo=r(nEt,"model.eval()"),nEt.forEach(t),NJo=r(sPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=n(sPe,"CODE",{});var sEt=s(E_e);qJo=r(sEt,"model.train()"),sEt.forEach(t),sPe.forEach(t),jJo=i(ga),T(K1.$$.fragment,ga),ga.forEach(t),sl.forEach(t),ROe=i(m),dd=n(m,"H2",{class:!0});var jXe=s(dd);Z1=n(jXe,"A",{id:!0,class:!0,href:!0});var lEt=s(Z1);C_e=n(lEt,"SPAN",{});var iEt=s(C_e);T(Jy.$$.fragment,iEt),iEt.forEach(t),lEt.forEach(t),DJo=i(jXe),w_e=n(jXe,"SPAN",{});var dEt=s(w_e);GJo=r(dEt,"AutoModelForQuestionAnswering"),dEt.forEach(t),jXe.forEach(t),POe=i(m),jo=n(m,"DIV",{class:!0});var ll=s(jo);T(Yy.$$.fragment,ll),OJo=i(ll),cd=n(ll,"P",{});var Woe=s(cd);VJo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cz=n(Woe,"A",{href:!0});var cEt=s(Cz);XJo=r(cEt,"from_pretrained()"),cEt.forEach(t),zJo=r(Woe," class method or the "),wz=n(Woe,"A",{href:!0});var mEt=s(wz);QJo=r(mEt,"from_config()"),mEt.forEach(t),WJo=r(Woe,` class
method.`),Woe.forEach(t),HJo=i(ll),Ky=n(ll,"P",{});var DXe=s(Ky);UJo=r(DXe,"This class cannot be instantiated directly using "),A_e=n(DXe,"CODE",{});var fEt=s(A_e);JJo=r(fEt,"__init__()"),fEt.forEach(t),YJo=r(DXe," (throws an error)."),DXe.forEach(t),KJo=i(ll),ht=n(ll,"DIV",{class:!0});var Z6=s(ht);T(Zy.$$.fragment,Z6),ZJo=i(Z6),L_e=n(Z6,"P",{});var gEt=s(L_e);eYo=r(gEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gEt.forEach(t),oYo=i(Z6),md=n(Z6,"P",{});var Hoe=s(md);rYo=r(Hoe,`Note:
Loading a model from its configuration file does `),y_e=n(Hoe,"STRONG",{});var hEt=s(y_e);tYo=r(hEt,"not"),hEt.forEach(t),aYo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(Hoe,"A",{href:!0});var uEt=s(Az);nYo=r(uEt,"from_pretrained()"),uEt.forEach(t),sYo=r(Hoe," to load the model weights."),Hoe.forEach(t),lYo=i(Z6),T(eT.$$.fragment,Z6),Z6.forEach(t),iYo=i(ll),no=n(ll,"DIV",{class:!0});var ha=s(no);T(e8.$$.fragment,ha),dYo=i(ha),x_e=n(ha,"P",{});var pEt=s(x_e);cYo=r(pEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pEt.forEach(t),mYo=i(ha),Oa=n(ha,"P",{});var eL=s(Oa);fYo=r(eL,"The model class to instantiate is selected based on the "),$_e=n(eL,"CODE",{});var _Et=s($_e);gYo=r(_Et,"model_type"),_Et.forEach(t),hYo=r(eL,` property of the config object (either
passed as an argument or loaded from `),k_e=n(eL,"CODE",{});var bEt=s(k_e);uYo=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),pYo=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(eL,"CODE",{});var vEt=s(S_e);_Yo=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),bYo=r(eL,":"),eL.forEach(t),vYo=i(ha),V=n(ha,"UL",{});var X=s(V);oT=n(X,"LI",{});var lPe=s(oT);R_e=n(lPe,"STRONG",{});var FEt=s(R_e);FYo=r(FEt,"albert"),FEt.forEach(t),TYo=r(lPe," \u2014 "),Lz=n(lPe,"A",{href:!0});var TEt=s(Lz);MYo=r(TEt,"AlbertForQuestionAnswering"),TEt.forEach(t),EYo=r(lPe," (ALBERT model)"),lPe.forEach(t),CYo=i(X),rT=n(X,"LI",{});var iPe=s(rT);P_e=n(iPe,"STRONG",{});var MEt=s(P_e);wYo=r(MEt,"bart"),MEt.forEach(t),AYo=r(iPe," \u2014 "),yz=n(iPe,"A",{href:!0});var EEt=s(yz);LYo=r(EEt,"BartForQuestionAnswering"),EEt.forEach(t),yYo=r(iPe," (BART model)"),iPe.forEach(t),xYo=i(X),tT=n(X,"LI",{});var dPe=s(tT);B_e=n(dPe,"STRONG",{});var CEt=s(B_e);$Yo=r(CEt,"bert"),CEt.forEach(t),kYo=r(dPe," \u2014 "),xz=n(dPe,"A",{href:!0});var wEt=s(xz);SYo=r(wEt,"BertForQuestionAnswering"),wEt.forEach(t),RYo=r(dPe," (BERT model)"),dPe.forEach(t),PYo=i(X),aT=n(X,"LI",{});var cPe=s(aT);I_e=n(cPe,"STRONG",{});var AEt=s(I_e);BYo=r(AEt,"big_bird"),AEt.forEach(t),IYo=r(cPe," \u2014 "),$z=n(cPe,"A",{href:!0});var LEt=s($z);NYo=r(LEt,"BigBirdForQuestionAnswering"),LEt.forEach(t),qYo=r(cPe," (BigBird model)"),cPe.forEach(t),jYo=i(X),nT=n(X,"LI",{});var mPe=s(nT);N_e=n(mPe,"STRONG",{});var yEt=s(N_e);DYo=r(yEt,"bigbird_pegasus"),yEt.forEach(t),GYo=r(mPe," \u2014 "),kz=n(mPe,"A",{href:!0});var xEt=s(kz);OYo=r(xEt,"BigBirdPegasusForQuestionAnswering"),xEt.forEach(t),VYo=r(mPe," (BigBird-Pegasus model)"),mPe.forEach(t),XYo=i(X),sT=n(X,"LI",{});var fPe=s(sT);q_e=n(fPe,"STRONG",{});var $Et=s(q_e);zYo=r($Et,"camembert"),$Et.forEach(t),QYo=r(fPe," \u2014 "),Sz=n(fPe,"A",{href:!0});var kEt=s(Sz);WYo=r(kEt,"CamembertForQuestionAnswering"),kEt.forEach(t),HYo=r(fPe," (CamemBERT model)"),fPe.forEach(t),UYo=i(X),lT=n(X,"LI",{});var gPe=s(lT);j_e=n(gPe,"STRONG",{});var SEt=s(j_e);JYo=r(SEt,"canine"),SEt.forEach(t),YYo=r(gPe," \u2014 "),Rz=n(gPe,"A",{href:!0});var REt=s(Rz);KYo=r(REt,"CanineForQuestionAnswering"),REt.forEach(t),ZYo=r(gPe," (CANINE model)"),gPe.forEach(t),eKo=i(X),iT=n(X,"LI",{});var hPe=s(iT);D_e=n(hPe,"STRONG",{});var PEt=s(D_e);oKo=r(PEt,"convbert"),PEt.forEach(t),rKo=r(hPe," \u2014 "),Pz=n(hPe,"A",{href:!0});var BEt=s(Pz);tKo=r(BEt,"ConvBertForQuestionAnswering"),BEt.forEach(t),aKo=r(hPe," (ConvBERT model)"),hPe.forEach(t),nKo=i(X),dT=n(X,"LI",{});var uPe=s(dT);G_e=n(uPe,"STRONG",{});var IEt=s(G_e);sKo=r(IEt,"data2vec-text"),IEt.forEach(t),lKo=r(uPe," \u2014 "),Bz=n(uPe,"A",{href:!0});var NEt=s(Bz);iKo=r(NEt,"Data2VecTextForQuestionAnswering"),NEt.forEach(t),dKo=r(uPe," (Data2VecText model)"),uPe.forEach(t),cKo=i(X),cT=n(X,"LI",{});var pPe=s(cT);O_e=n(pPe,"STRONG",{});var qEt=s(O_e);mKo=r(qEt,"deberta"),qEt.forEach(t),fKo=r(pPe," \u2014 "),Iz=n(pPe,"A",{href:!0});var jEt=s(Iz);gKo=r(jEt,"DebertaForQuestionAnswering"),jEt.forEach(t),hKo=r(pPe," (DeBERTa model)"),pPe.forEach(t),uKo=i(X),mT=n(X,"LI",{});var _Pe=s(mT);V_e=n(_Pe,"STRONG",{});var DEt=s(V_e);pKo=r(DEt,"deberta-v2"),DEt.forEach(t),_Ko=r(_Pe," \u2014 "),Nz=n(_Pe,"A",{href:!0});var GEt=s(Nz);bKo=r(GEt,"DebertaV2ForQuestionAnswering"),GEt.forEach(t),vKo=r(_Pe," (DeBERTa-v2 model)"),_Pe.forEach(t),FKo=i(X),fT=n(X,"LI",{});var bPe=s(fT);X_e=n(bPe,"STRONG",{});var OEt=s(X_e);TKo=r(OEt,"distilbert"),OEt.forEach(t),MKo=r(bPe," \u2014 "),qz=n(bPe,"A",{href:!0});var VEt=s(qz);EKo=r(VEt,"DistilBertForQuestionAnswering"),VEt.forEach(t),CKo=r(bPe," (DistilBERT model)"),bPe.forEach(t),wKo=i(X),gT=n(X,"LI",{});var vPe=s(gT);z_e=n(vPe,"STRONG",{});var XEt=s(z_e);AKo=r(XEt,"electra"),XEt.forEach(t),LKo=r(vPe," \u2014 "),jz=n(vPe,"A",{href:!0});var zEt=s(jz);yKo=r(zEt,"ElectraForQuestionAnswering"),zEt.forEach(t),xKo=r(vPe," (ELECTRA model)"),vPe.forEach(t),$Ko=i(X),hT=n(X,"LI",{});var FPe=s(hT);Q_e=n(FPe,"STRONG",{});var QEt=s(Q_e);kKo=r(QEt,"flaubert"),QEt.forEach(t),SKo=r(FPe," \u2014 "),Dz=n(FPe,"A",{href:!0});var WEt=s(Dz);RKo=r(WEt,"FlaubertForQuestionAnsweringSimple"),WEt.forEach(t),PKo=r(FPe," (FlauBERT model)"),FPe.forEach(t),BKo=i(X),uT=n(X,"LI",{});var TPe=s(uT);W_e=n(TPe,"STRONG",{});var HEt=s(W_e);IKo=r(HEt,"fnet"),HEt.forEach(t),NKo=r(TPe," \u2014 "),Gz=n(TPe,"A",{href:!0});var UEt=s(Gz);qKo=r(UEt,"FNetForQuestionAnswering"),UEt.forEach(t),jKo=r(TPe," (FNet model)"),TPe.forEach(t),DKo=i(X),pT=n(X,"LI",{});var MPe=s(pT);H_e=n(MPe,"STRONG",{});var JEt=s(H_e);GKo=r(JEt,"funnel"),JEt.forEach(t),OKo=r(MPe," \u2014 "),Oz=n(MPe,"A",{href:!0});var YEt=s(Oz);VKo=r(YEt,"FunnelForQuestionAnswering"),YEt.forEach(t),XKo=r(MPe," (Funnel Transformer model)"),MPe.forEach(t),zKo=i(X),_T=n(X,"LI",{});var EPe=s(_T);U_e=n(EPe,"STRONG",{});var KEt=s(U_e);QKo=r(KEt,"gptj"),KEt.forEach(t),WKo=r(EPe," \u2014 "),Vz=n(EPe,"A",{href:!0});var ZEt=s(Vz);HKo=r(ZEt,"GPTJForQuestionAnswering"),ZEt.forEach(t),UKo=r(EPe," (GPT-J model)"),EPe.forEach(t),JKo=i(X),bT=n(X,"LI",{});var CPe=s(bT);J_e=n(CPe,"STRONG",{});var e4t=s(J_e);YKo=r(e4t,"ibert"),e4t.forEach(t),KKo=r(CPe," \u2014 "),Xz=n(CPe,"A",{href:!0});var o4t=s(Xz);ZKo=r(o4t,"IBertForQuestionAnswering"),o4t.forEach(t),eZo=r(CPe," (I-BERT model)"),CPe.forEach(t),oZo=i(X),vT=n(X,"LI",{});var wPe=s(vT);Y_e=n(wPe,"STRONG",{});var r4t=s(Y_e);rZo=r(r4t,"layoutlmv2"),r4t.forEach(t),tZo=r(wPe," \u2014 "),zz=n(wPe,"A",{href:!0});var t4t=s(zz);aZo=r(t4t,"LayoutLMv2ForQuestionAnswering"),t4t.forEach(t),nZo=r(wPe," (LayoutLMv2 model)"),wPe.forEach(t),sZo=i(X),FT=n(X,"LI",{});var APe=s(FT);K_e=n(APe,"STRONG",{});var a4t=s(K_e);lZo=r(a4t,"layoutlmv3"),a4t.forEach(t),iZo=r(APe," \u2014 "),Qz=n(APe,"A",{href:!0});var n4t=s(Qz);dZo=r(n4t,"LayoutLMv3ForQuestionAnswering"),n4t.forEach(t),cZo=r(APe," (LayoutLMv3 model)"),APe.forEach(t),mZo=i(X),TT=n(X,"LI",{});var LPe=s(TT);Z_e=n(LPe,"STRONG",{});var s4t=s(Z_e);fZo=r(s4t,"led"),s4t.forEach(t),gZo=r(LPe," \u2014 "),Wz=n(LPe,"A",{href:!0});var l4t=s(Wz);hZo=r(l4t,"LEDForQuestionAnswering"),l4t.forEach(t),uZo=r(LPe," (LED model)"),LPe.forEach(t),pZo=i(X),MT=n(X,"LI",{});var yPe=s(MT);e2e=n(yPe,"STRONG",{});var i4t=s(e2e);_Zo=r(i4t,"longformer"),i4t.forEach(t),bZo=r(yPe," \u2014 "),Hz=n(yPe,"A",{href:!0});var d4t=s(Hz);vZo=r(d4t,"LongformerForQuestionAnswering"),d4t.forEach(t),FZo=r(yPe," (Longformer model)"),yPe.forEach(t),TZo=i(X),ET=n(X,"LI",{});var xPe=s(ET);o2e=n(xPe,"STRONG",{});var c4t=s(o2e);MZo=r(c4t,"lxmert"),c4t.forEach(t),EZo=r(xPe," \u2014 "),Uz=n(xPe,"A",{href:!0});var m4t=s(Uz);CZo=r(m4t,"LxmertForQuestionAnswering"),m4t.forEach(t),wZo=r(xPe," (LXMERT model)"),xPe.forEach(t),AZo=i(X),CT=n(X,"LI",{});var $Pe=s(CT);r2e=n($Pe,"STRONG",{});var f4t=s(r2e);LZo=r(f4t,"mbart"),f4t.forEach(t),yZo=r($Pe," \u2014 "),Jz=n($Pe,"A",{href:!0});var g4t=s(Jz);xZo=r(g4t,"MBartForQuestionAnswering"),g4t.forEach(t),$Zo=r($Pe," (mBART model)"),$Pe.forEach(t),kZo=i(X),wT=n(X,"LI",{});var kPe=s(wT);t2e=n(kPe,"STRONG",{});var h4t=s(t2e);SZo=r(h4t,"megatron-bert"),h4t.forEach(t),RZo=r(kPe," \u2014 "),Yz=n(kPe,"A",{href:!0});var u4t=s(Yz);PZo=r(u4t,"MegatronBertForQuestionAnswering"),u4t.forEach(t),BZo=r(kPe," (Megatron-BERT model)"),kPe.forEach(t),IZo=i(X),AT=n(X,"LI",{});var SPe=s(AT);a2e=n(SPe,"STRONG",{});var p4t=s(a2e);NZo=r(p4t,"mobilebert"),p4t.forEach(t),qZo=r(SPe," \u2014 "),Kz=n(SPe,"A",{href:!0});var _4t=s(Kz);jZo=r(_4t,"MobileBertForQuestionAnswering"),_4t.forEach(t),DZo=r(SPe," (MobileBERT model)"),SPe.forEach(t),GZo=i(X),LT=n(X,"LI",{});var RPe=s(LT);n2e=n(RPe,"STRONG",{});var b4t=s(n2e);OZo=r(b4t,"mpnet"),b4t.forEach(t),VZo=r(RPe," \u2014 "),Zz=n(RPe,"A",{href:!0});var v4t=s(Zz);XZo=r(v4t,"MPNetForQuestionAnswering"),v4t.forEach(t),zZo=r(RPe," (MPNet model)"),RPe.forEach(t),QZo=i(X),yT=n(X,"LI",{});var PPe=s(yT);s2e=n(PPe,"STRONG",{});var F4t=s(s2e);WZo=r(F4t,"nezha"),F4t.forEach(t),HZo=r(PPe," \u2014 "),eQ=n(PPe,"A",{href:!0});var T4t=s(eQ);UZo=r(T4t,"NezhaForQuestionAnswering"),T4t.forEach(t),JZo=r(PPe," (Nezha model)"),PPe.forEach(t),YZo=i(X),xT=n(X,"LI",{});var BPe=s(xT);l2e=n(BPe,"STRONG",{});var M4t=s(l2e);KZo=r(M4t,"nystromformer"),M4t.forEach(t),ZZo=r(BPe," \u2014 "),oQ=n(BPe,"A",{href:!0});var E4t=s(oQ);eer=r(E4t,"NystromformerForQuestionAnswering"),E4t.forEach(t),oer=r(BPe," (Nystr\xF6mformer model)"),BPe.forEach(t),rer=i(X),$T=n(X,"LI",{});var IPe=s($T);i2e=n(IPe,"STRONG",{});var C4t=s(i2e);ter=r(C4t,"qdqbert"),C4t.forEach(t),aer=r(IPe," \u2014 "),rQ=n(IPe,"A",{href:!0});var w4t=s(rQ);ner=r(w4t,"QDQBertForQuestionAnswering"),w4t.forEach(t),ser=r(IPe," (QDQBert model)"),IPe.forEach(t),ler=i(X),kT=n(X,"LI",{});var NPe=s(kT);d2e=n(NPe,"STRONG",{});var A4t=s(d2e);ier=r(A4t,"reformer"),A4t.forEach(t),der=r(NPe," \u2014 "),tQ=n(NPe,"A",{href:!0});var L4t=s(tQ);cer=r(L4t,"ReformerForQuestionAnswering"),L4t.forEach(t),mer=r(NPe," (Reformer model)"),NPe.forEach(t),fer=i(X),ST=n(X,"LI",{});var qPe=s(ST);c2e=n(qPe,"STRONG",{});var y4t=s(c2e);ger=r(y4t,"rembert"),y4t.forEach(t),her=r(qPe," \u2014 "),aQ=n(qPe,"A",{href:!0});var x4t=s(aQ);uer=r(x4t,"RemBertForQuestionAnswering"),x4t.forEach(t),per=r(qPe," (RemBERT model)"),qPe.forEach(t),_er=i(X),RT=n(X,"LI",{});var jPe=s(RT);m2e=n(jPe,"STRONG",{});var $4t=s(m2e);ber=r($4t,"roberta"),$4t.forEach(t),ver=r(jPe," \u2014 "),nQ=n(jPe,"A",{href:!0});var k4t=s(nQ);Fer=r(k4t,"RobertaForQuestionAnswering"),k4t.forEach(t),Ter=r(jPe," (RoBERTa model)"),jPe.forEach(t),Mer=i(X),PT=n(X,"LI",{});var DPe=s(PT);f2e=n(DPe,"STRONG",{});var S4t=s(f2e);Eer=r(S4t,"roformer"),S4t.forEach(t),Cer=r(DPe," \u2014 "),sQ=n(DPe,"A",{href:!0});var R4t=s(sQ);wer=r(R4t,"RoFormerForQuestionAnswering"),R4t.forEach(t),Aer=r(DPe," (RoFormer model)"),DPe.forEach(t),Ler=i(X),BT=n(X,"LI",{});var GPe=s(BT);g2e=n(GPe,"STRONG",{});var P4t=s(g2e);yer=r(P4t,"splinter"),P4t.forEach(t),xer=r(GPe," \u2014 "),lQ=n(GPe,"A",{href:!0});var B4t=s(lQ);$er=r(B4t,"SplinterForQuestionAnswering"),B4t.forEach(t),ker=r(GPe," (Splinter model)"),GPe.forEach(t),Ser=i(X),IT=n(X,"LI",{});var OPe=s(IT);h2e=n(OPe,"STRONG",{});var I4t=s(h2e);Rer=r(I4t,"squeezebert"),I4t.forEach(t),Per=r(OPe," \u2014 "),iQ=n(OPe,"A",{href:!0});var N4t=s(iQ);Ber=r(N4t,"SqueezeBertForQuestionAnswering"),N4t.forEach(t),Ier=r(OPe," (SqueezeBERT model)"),OPe.forEach(t),Ner=i(X),NT=n(X,"LI",{});var VPe=s(NT);u2e=n(VPe,"STRONG",{});var q4t=s(u2e);qer=r(q4t,"xlm"),q4t.forEach(t),jer=r(VPe," \u2014 "),dQ=n(VPe,"A",{href:!0});var j4t=s(dQ);Der=r(j4t,"XLMForQuestionAnsweringSimple"),j4t.forEach(t),Ger=r(VPe," (XLM model)"),VPe.forEach(t),Oer=i(X),qT=n(X,"LI",{});var XPe=s(qT);p2e=n(XPe,"STRONG",{});var D4t=s(p2e);Ver=r(D4t,"xlm-roberta"),D4t.forEach(t),Xer=r(XPe," \u2014 "),cQ=n(XPe,"A",{href:!0});var G4t=s(cQ);zer=r(G4t,"XLMRobertaForQuestionAnswering"),G4t.forEach(t),Qer=r(XPe," (XLM-RoBERTa model)"),XPe.forEach(t),Wer=i(X),jT=n(X,"LI",{});var zPe=s(jT);_2e=n(zPe,"STRONG",{});var O4t=s(_2e);Her=r(O4t,"xlm-roberta-xl"),O4t.forEach(t),Uer=r(zPe," \u2014 "),mQ=n(zPe,"A",{href:!0});var V4t=s(mQ);Jer=r(V4t,"XLMRobertaXLForQuestionAnswering"),V4t.forEach(t),Yer=r(zPe," (XLM-RoBERTa-XL model)"),zPe.forEach(t),Ker=i(X),DT=n(X,"LI",{});var QPe=s(DT);b2e=n(QPe,"STRONG",{});var X4t=s(b2e);Zer=r(X4t,"xlnet"),X4t.forEach(t),eor=r(QPe," \u2014 "),fQ=n(QPe,"A",{href:!0});var z4t=s(fQ);oor=r(z4t,"XLNetForQuestionAnsweringSimple"),z4t.forEach(t),ror=r(QPe," (XLNet model)"),QPe.forEach(t),tor=i(X),GT=n(X,"LI",{});var WPe=s(GT);v2e=n(WPe,"STRONG",{});var Q4t=s(v2e);aor=r(Q4t,"yoso"),Q4t.forEach(t),nor=r(WPe," \u2014 "),gQ=n(WPe,"A",{href:!0});var W4t=s(gQ);sor=r(W4t,"YosoForQuestionAnswering"),W4t.forEach(t),lor=r(WPe," (YOSO model)"),WPe.forEach(t),X.forEach(t),ior=i(ha),OT=n(ha,"P",{});var HPe=s(OT);dor=r(HPe,"The model is set in evaluation mode by default using "),F2e=n(HPe,"CODE",{});var H4t=s(F2e);cor=r(H4t,"model.eval()"),H4t.forEach(t),mor=r(HPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(HPe,"CODE",{});var U4t=s(T2e);gor=r(U4t,"model.train()"),U4t.forEach(t),HPe.forEach(t),hor=i(ha),T(VT.$$.fragment,ha),ha.forEach(t),ll.forEach(t),BOe=i(m),fd=n(m,"H2",{class:!0});var GXe=s(fd);XT=n(GXe,"A",{id:!0,class:!0,href:!0});var J4t=s(XT);M2e=n(J4t,"SPAN",{});var Y4t=s(M2e);T(o8.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),uor=i(GXe),E2e=n(GXe,"SPAN",{});var K4t=s(E2e);por=r(K4t,"AutoModelForTableQuestionAnswering"),K4t.forEach(t),GXe.forEach(t),IOe=i(m),Do=n(m,"DIV",{class:!0});var il=s(Do);T(r8.$$.fragment,il),_or=i(il),gd=n(il,"P",{});var Uoe=s(gd);bor=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hQ=n(Uoe,"A",{href:!0});var Z4t=s(hQ);vor=r(Z4t,"from_pretrained()"),Z4t.forEach(t),For=r(Uoe," class method or the "),uQ=n(Uoe,"A",{href:!0});var eCt=s(uQ);Tor=r(eCt,"from_config()"),eCt.forEach(t),Mor=r(Uoe,` class
method.`),Uoe.forEach(t),Eor=i(il),t8=n(il,"P",{});var OXe=s(t8);Cor=r(OXe,"This class cannot be instantiated directly using "),C2e=n(OXe,"CODE",{});var oCt=s(C2e);wor=r(oCt,"__init__()"),oCt.forEach(t),Aor=r(OXe," (throws an error)."),OXe.forEach(t),Lor=i(il),ut=n(il,"DIV",{class:!0});var oL=s(ut);T(a8.$$.fragment,oL),yor=i(oL),w2e=n(oL,"P",{});var rCt=s(w2e);xor=r(rCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rCt.forEach(t),$or=i(oL),hd=n(oL,"P",{});var Joe=s(hd);kor=r(Joe,`Note:
Loading a model from its configuration file does `),A2e=n(Joe,"STRONG",{});var tCt=s(A2e);Sor=r(tCt,"not"),tCt.forEach(t),Ror=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(Joe,"A",{href:!0});var aCt=s(pQ);Por=r(aCt,"from_pretrained()"),aCt.forEach(t),Bor=r(Joe," to load the model weights."),Joe.forEach(t),Ior=i(oL),T(zT.$$.fragment,oL),oL.forEach(t),Nor=i(il),so=n(il,"DIV",{class:!0});var ua=s(so);T(n8.$$.fragment,ua),qor=i(ua),L2e=n(ua,"P",{});var nCt=s(L2e);jor=r(nCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nCt.forEach(t),Dor=i(ua),Va=n(ua,"P",{});var rL=s(Va);Gor=r(rL,"The model class to instantiate is selected based on the "),y2e=n(rL,"CODE",{});var sCt=s(y2e);Oor=r(sCt,"model_type"),sCt.forEach(t),Vor=r(rL,` property of the config object (either
passed as an argument or loaded from `),x2e=n(rL,"CODE",{});var lCt=s(x2e);Xor=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),zor=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(rL,"CODE",{});var iCt=s($2e);Qor=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),Wor=r(rL,":"),rL.forEach(t),Hor=i(ua),k2e=n(ua,"UL",{});var dCt=s(k2e);QT=n(dCt,"LI",{});var UPe=s(QT);S2e=n(UPe,"STRONG",{});var cCt=s(S2e);Uor=r(cCt,"tapas"),cCt.forEach(t),Jor=r(UPe," \u2014 "),_Q=n(UPe,"A",{href:!0});var mCt=s(_Q);Yor=r(mCt,"TapasForQuestionAnswering"),mCt.forEach(t),Kor=r(UPe," (TAPAS model)"),UPe.forEach(t),dCt.forEach(t),Zor=i(ua),WT=n(ua,"P",{});var JPe=s(WT);err=r(JPe,"The model is set in evaluation mode by default using "),R2e=n(JPe,"CODE",{});var fCt=s(R2e);orr=r(fCt,"model.eval()"),fCt.forEach(t),rrr=r(JPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=n(JPe,"CODE",{});var gCt=s(P2e);trr=r(gCt,"model.train()"),gCt.forEach(t),JPe.forEach(t),arr=i(ua),T(HT.$$.fragment,ua),ua.forEach(t),il.forEach(t),NOe=i(m),ud=n(m,"H2",{class:!0});var VXe=s(ud);UT=n(VXe,"A",{id:!0,class:!0,href:!0});var hCt=s(UT);B2e=n(hCt,"SPAN",{});var uCt=s(B2e);T(s8.$$.fragment,uCt),uCt.forEach(t),hCt.forEach(t),nrr=i(VXe),I2e=n(VXe,"SPAN",{});var pCt=s(I2e);srr=r(pCt,"AutoModelForImageClassification"),pCt.forEach(t),VXe.forEach(t),qOe=i(m),Go=n(m,"DIV",{class:!0});var dl=s(Go);T(l8.$$.fragment,dl),lrr=i(dl),pd=n(dl,"P",{});var Yoe=s(pd);irr=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bQ=n(Yoe,"A",{href:!0});var _Ct=s(bQ);drr=r(_Ct,"from_pretrained()"),_Ct.forEach(t),crr=r(Yoe," class method or the "),vQ=n(Yoe,"A",{href:!0});var bCt=s(vQ);mrr=r(bCt,"from_config()"),bCt.forEach(t),frr=r(Yoe,` class
method.`),Yoe.forEach(t),grr=i(dl),i8=n(dl,"P",{});var XXe=s(i8);hrr=r(XXe,"This class cannot be instantiated directly using "),N2e=n(XXe,"CODE",{});var vCt=s(N2e);urr=r(vCt,"__init__()"),vCt.forEach(t),prr=r(XXe," (throws an error)."),XXe.forEach(t),_rr=i(dl),pt=n(dl,"DIV",{class:!0});var tL=s(pt);T(d8.$$.fragment,tL),brr=i(tL),q2e=n(tL,"P",{});var FCt=s(q2e);vrr=r(FCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FCt.forEach(t),Frr=i(tL),_d=n(tL,"P",{});var Koe=s(_d);Trr=r(Koe,`Note:
Loading a model from its configuration file does `),j2e=n(Koe,"STRONG",{});var TCt=s(j2e);Mrr=r(TCt,"not"),TCt.forEach(t),Err=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(Koe,"A",{href:!0});var MCt=s(FQ);Crr=r(MCt,"from_pretrained()"),MCt.forEach(t),wrr=r(Koe," to load the model weights."),Koe.forEach(t),Arr=i(tL),T(JT.$$.fragment,tL),tL.forEach(t),Lrr=i(dl),lo=n(dl,"DIV",{class:!0});var pa=s(lo);T(c8.$$.fragment,pa),yrr=i(pa),D2e=n(pa,"P",{});var ECt=s(D2e);xrr=r(ECt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ECt.forEach(t),$rr=i(pa),Xa=n(pa,"P",{});var aL=s(Xa);krr=r(aL,"The model class to instantiate is selected based on the "),G2e=n(aL,"CODE",{});var CCt=s(G2e);Srr=r(CCt,"model_type"),CCt.forEach(t),Rrr=r(aL,` property of the config object (either
passed as an argument or loaded from `),O2e=n(aL,"CODE",{});var wCt=s(O2e);Prr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),Brr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(aL,"CODE",{});var ACt=s(V2e);Irr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),Nrr=r(aL,":"),aL.forEach(t),qrr=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);YT=n(Te,"LI",{});var YPe=s(YT);X2e=n(YPe,"STRONG",{});var LCt=s(X2e);jrr=r(LCt,"beit"),LCt.forEach(t),Drr=r(YPe," \u2014 "),TQ=n(YPe,"A",{href:!0});var yCt=s(TQ);Grr=r(yCt,"BeitForImageClassification"),yCt.forEach(t),Orr=r(YPe," (BEiT model)"),YPe.forEach(t),Vrr=i(Te),KT=n(Te,"LI",{});var KPe=s(KT);z2e=n(KPe,"STRONG",{});var xCt=s(z2e);Xrr=r(xCt,"convnext"),xCt.forEach(t),zrr=r(KPe," \u2014 "),MQ=n(KPe,"A",{href:!0});var $Ct=s(MQ);Qrr=r($Ct,"ConvNextForImageClassification"),$Ct.forEach(t),Wrr=r(KPe," (ConvNeXT model)"),KPe.forEach(t),Hrr=i(Te),ZT=n(Te,"LI",{});var ZPe=s(ZT);Q2e=n(ZPe,"STRONG",{});var kCt=s(Q2e);Urr=r(kCt,"cvt"),kCt.forEach(t),Jrr=r(ZPe," \u2014 "),EQ=n(ZPe,"A",{href:!0});var SCt=s(EQ);Yrr=r(SCt,"CvtForImageClassification"),SCt.forEach(t),Krr=r(ZPe," (CvT model)"),ZPe.forEach(t),Zrr=i(Te),eM=n(Te,"LI",{});var eBe=s(eM);W2e=n(eBe,"STRONG",{});var RCt=s(W2e);etr=r(RCt,"data2vec-vision"),RCt.forEach(t),otr=r(eBe," \u2014 "),CQ=n(eBe,"A",{href:!0});var PCt=s(CQ);rtr=r(PCt,"Data2VecVisionForImageClassification"),PCt.forEach(t),ttr=r(eBe," (Data2VecVision model)"),eBe.forEach(t),atr=i(Te),zs=n(Te,"LI",{});var aS=s(zs);H2e=n(aS,"STRONG",{});var BCt=s(H2e);ntr=r(BCt,"deit"),BCt.forEach(t),str=r(aS," \u2014 "),wQ=n(aS,"A",{href:!0});var ICt=s(wQ);ltr=r(ICt,"DeiTForImageClassification"),ICt.forEach(t),itr=r(aS," or "),AQ=n(aS,"A",{href:!0});var NCt=s(AQ);dtr=r(NCt,"DeiTForImageClassificationWithTeacher"),NCt.forEach(t),ctr=r(aS," (DeiT model)"),aS.forEach(t),mtr=i(Te),oM=n(Te,"LI",{});var oBe=s(oM);U2e=n(oBe,"STRONG",{});var qCt=s(U2e);ftr=r(qCt,"imagegpt"),qCt.forEach(t),gtr=r(oBe," \u2014 "),LQ=n(oBe,"A",{href:!0});var jCt=s(LQ);htr=r(jCt,"ImageGPTForImageClassification"),jCt.forEach(t),utr=r(oBe," (ImageGPT model)"),oBe.forEach(t),ptr=i(Te),Qs=n(Te,"LI",{});var nS=s(Qs);J2e=n(nS,"STRONG",{});var DCt=s(J2e);_tr=r(DCt,"levit"),DCt.forEach(t),btr=r(nS," \u2014 "),yQ=n(nS,"A",{href:!0});var GCt=s(yQ);vtr=r(GCt,"LevitForImageClassification"),GCt.forEach(t),Ftr=r(nS," or "),xQ=n(nS,"A",{href:!0});var OCt=s(xQ);Ttr=r(OCt,"LevitForImageClassificationWithTeacher"),OCt.forEach(t),Mtr=r(nS," (LeViT model)"),nS.forEach(t),Etr=i(Te),_t=n(Te,"LI",{});var Lm=s(_t);Y2e=n(Lm,"STRONG",{});var VCt=s(Y2e);Ctr=r(VCt,"perceiver"),VCt.forEach(t),wtr=r(Lm," \u2014 "),$Q=n(Lm,"A",{href:!0});var XCt=s($Q);Atr=r(XCt,"PerceiverForImageClassificationLearned"),XCt.forEach(t),Ltr=r(Lm," or "),kQ=n(Lm,"A",{href:!0});var zCt=s(kQ);ytr=r(zCt,"PerceiverForImageClassificationFourier"),zCt.forEach(t),xtr=r(Lm," or "),SQ=n(Lm,"A",{href:!0});var QCt=s(SQ);$tr=r(QCt,"PerceiverForImageClassificationConvProcessing"),QCt.forEach(t),ktr=r(Lm," (Perceiver model)"),Lm.forEach(t),Str=i(Te),rM=n(Te,"LI",{});var rBe=s(rM);K2e=n(rBe,"STRONG",{});var WCt=s(K2e);Rtr=r(WCt,"poolformer"),WCt.forEach(t),Ptr=r(rBe," \u2014 "),RQ=n(rBe,"A",{href:!0});var HCt=s(RQ);Btr=r(HCt,"PoolFormerForImageClassification"),HCt.forEach(t),Itr=r(rBe," (PoolFormer model)"),rBe.forEach(t),Ntr=i(Te),tM=n(Te,"LI",{});var tBe=s(tM);Z2e=n(tBe,"STRONG",{});var UCt=s(Z2e);qtr=r(UCt,"regnet"),UCt.forEach(t),jtr=r(tBe," \u2014 "),PQ=n(tBe,"A",{href:!0});var JCt=s(PQ);Dtr=r(JCt,"RegNetForImageClassification"),JCt.forEach(t),Gtr=r(tBe," (RegNet model)"),tBe.forEach(t),Otr=i(Te),aM=n(Te,"LI",{});var aBe=s(aM);ebe=n(aBe,"STRONG",{});var YCt=s(ebe);Vtr=r(YCt,"resnet"),YCt.forEach(t),Xtr=r(aBe," \u2014 "),BQ=n(aBe,"A",{href:!0});var KCt=s(BQ);ztr=r(KCt,"ResNetForImageClassification"),KCt.forEach(t),Qtr=r(aBe," (ResNet model)"),aBe.forEach(t),Wtr=i(Te),nM=n(Te,"LI",{});var nBe=s(nM);obe=n(nBe,"STRONG",{});var ZCt=s(obe);Htr=r(ZCt,"segformer"),ZCt.forEach(t),Utr=r(nBe," \u2014 "),IQ=n(nBe,"A",{href:!0});var e5t=s(IQ);Jtr=r(e5t,"SegformerForImageClassification"),e5t.forEach(t),Ytr=r(nBe," (SegFormer model)"),nBe.forEach(t),Ktr=i(Te),sM=n(Te,"LI",{});var sBe=s(sM);rbe=n(sBe,"STRONG",{});var o5t=s(rbe);Ztr=r(o5t,"swin"),o5t.forEach(t),ear=r(sBe," \u2014 "),NQ=n(sBe,"A",{href:!0});var r5t=s(NQ);oar=r(r5t,"SwinForImageClassification"),r5t.forEach(t),rar=r(sBe," (Swin Transformer model)"),sBe.forEach(t),tar=i(Te),lM=n(Te,"LI",{});var lBe=s(lM);tbe=n(lBe,"STRONG",{});var t5t=s(tbe);aar=r(t5t,"van"),t5t.forEach(t),nar=r(lBe," \u2014 "),qQ=n(lBe,"A",{href:!0});var a5t=s(qQ);sar=r(a5t,"VanForImageClassification"),a5t.forEach(t),lar=r(lBe," (VAN model)"),lBe.forEach(t),iar=i(Te),iM=n(Te,"LI",{});var iBe=s(iM);abe=n(iBe,"STRONG",{});var n5t=s(abe);dar=r(n5t,"vit"),n5t.forEach(t),car=r(iBe," \u2014 "),jQ=n(iBe,"A",{href:!0});var s5t=s(jQ);mar=r(s5t,"ViTForImageClassification"),s5t.forEach(t),far=r(iBe," (ViT model)"),iBe.forEach(t),Te.forEach(t),gar=i(pa),dM=n(pa,"P",{});var dBe=s(dM);har=r(dBe,"The model is set in evaluation mode by default using "),nbe=n(dBe,"CODE",{});var l5t=s(nbe);uar=r(l5t,"model.eval()"),l5t.forEach(t),par=r(dBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=n(dBe,"CODE",{});var i5t=s(sbe);_ar=r(i5t,"model.train()"),i5t.forEach(t),dBe.forEach(t),bar=i(pa),T(cM.$$.fragment,pa),pa.forEach(t),dl.forEach(t),jOe=i(m),bd=n(m,"H2",{class:!0});var zXe=s(bd);mM=n(zXe,"A",{id:!0,class:!0,href:!0});var d5t=s(mM);lbe=n(d5t,"SPAN",{});var c5t=s(lbe);T(m8.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),Far=i(zXe),ibe=n(zXe,"SPAN",{});var m5t=s(ibe);Tar=r(m5t,"AutoModelForVision2Seq"),m5t.forEach(t),zXe.forEach(t),DOe=i(m),Oo=n(m,"DIV",{class:!0});var cl=s(Oo);T(f8.$$.fragment,cl),Mar=i(cl),vd=n(cl,"P",{});var Zoe=s(vd);Ear=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=n(Zoe,"A",{href:!0});var f5t=s(DQ);Car=r(f5t,"from_pretrained()"),f5t.forEach(t),war=r(Zoe," class method or the "),GQ=n(Zoe,"A",{href:!0});var g5t=s(GQ);Aar=r(g5t,"from_config()"),g5t.forEach(t),Lar=r(Zoe,` class
method.`),Zoe.forEach(t),yar=i(cl),g8=n(cl,"P",{});var QXe=s(g8);xar=r(QXe,"This class cannot be instantiated directly using "),dbe=n(QXe,"CODE",{});var h5t=s(dbe);$ar=r(h5t,"__init__()"),h5t.forEach(t),kar=r(QXe," (throws an error)."),QXe.forEach(t),Sar=i(cl),bt=n(cl,"DIV",{class:!0});var nL=s(bt);T(h8.$$.fragment,nL),Rar=i(nL),cbe=n(nL,"P",{});var u5t=s(cbe);Par=r(u5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),u5t.forEach(t),Bar=i(nL),Fd=n(nL,"P",{});var ere=s(Fd);Iar=r(ere,`Note:
Loading a model from its configuration file does `),mbe=n(ere,"STRONG",{});var p5t=s(mbe);Nar=r(p5t,"not"),p5t.forEach(t),qar=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(ere,"A",{href:!0});var _5t=s(OQ);jar=r(_5t,"from_pretrained()"),_5t.forEach(t),Dar=r(ere," to load the model weights."),ere.forEach(t),Gar=i(nL),T(fM.$$.fragment,nL),nL.forEach(t),Oar=i(cl),io=n(cl,"DIV",{class:!0});var _a=s(io);T(u8.$$.fragment,_a),Var=i(_a),fbe=n(_a,"P",{});var b5t=s(fbe);Xar=r(b5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b5t.forEach(t),zar=i(_a),za=n(_a,"P",{});var sL=s(za);Qar=r(sL,"The model class to instantiate is selected based on the "),gbe=n(sL,"CODE",{});var v5t=s(gbe);War=r(v5t,"model_type"),v5t.forEach(t),Har=r(sL,` property of the config object (either
passed as an argument or loaded from `),hbe=n(sL,"CODE",{});var F5t=s(hbe);Uar=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),Jar=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(sL,"CODE",{});var T5t=s(ube);Yar=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),Kar=r(sL,":"),sL.forEach(t),Zar=i(_a),pbe=n(_a,"UL",{});var M5t=s(pbe);gM=n(M5t,"LI",{});var cBe=s(gM);_be=n(cBe,"STRONG",{});var E5t=s(_be);enr=r(E5t,"vision-encoder-decoder"),E5t.forEach(t),onr=r(cBe," \u2014 "),VQ=n(cBe,"A",{href:!0});var C5t=s(VQ);rnr=r(C5t,"VisionEncoderDecoderModel"),C5t.forEach(t),tnr=r(cBe," (Vision Encoder decoder model)"),cBe.forEach(t),M5t.forEach(t),anr=i(_a),hM=n(_a,"P",{});var mBe=s(hM);nnr=r(mBe,"The model is set in evaluation mode by default using "),bbe=n(mBe,"CODE",{});var w5t=s(bbe);snr=r(w5t,"model.eval()"),w5t.forEach(t),lnr=r(mBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vbe=n(mBe,"CODE",{});var A5t=s(vbe);inr=r(A5t,"model.train()"),A5t.forEach(t),mBe.forEach(t),dnr=i(_a),T(uM.$$.fragment,_a),_a.forEach(t),cl.forEach(t),GOe=i(m),Td=n(m,"H2",{class:!0});var WXe=s(Td);pM=n(WXe,"A",{id:!0,class:!0,href:!0});var L5t=s(pM);Fbe=n(L5t,"SPAN",{});var y5t=s(Fbe);T(p8.$$.fragment,y5t),y5t.forEach(t),L5t.forEach(t),cnr=i(WXe),Tbe=n(WXe,"SPAN",{});var x5t=s(Tbe);mnr=r(x5t,"AutoModelForVisualQuestionAnswering"),x5t.forEach(t),WXe.forEach(t),OOe=i(m),Vo=n(m,"DIV",{class:!0});var ml=s(Vo);T(_8.$$.fragment,ml),fnr=i(ml),Md=n(ml,"P",{});var ore=s(Md);gnr=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),XQ=n(ore,"A",{href:!0});var $5t=s(XQ);hnr=r($5t,"from_pretrained()"),$5t.forEach(t),unr=r(ore," class method or the "),zQ=n(ore,"A",{href:!0});var k5t=s(zQ);pnr=r(k5t,"from_config()"),k5t.forEach(t),_nr=r(ore,` class
method.`),ore.forEach(t),bnr=i(ml),b8=n(ml,"P",{});var HXe=s(b8);vnr=r(HXe,"This class cannot be instantiated directly using "),Mbe=n(HXe,"CODE",{});var S5t=s(Mbe);Fnr=r(S5t,"__init__()"),S5t.forEach(t),Tnr=r(HXe," (throws an error)."),HXe.forEach(t),Mnr=i(ml),vt=n(ml,"DIV",{class:!0});var lL=s(vt);T(v8.$$.fragment,lL),Enr=i(lL),Ebe=n(lL,"P",{});var R5t=s(Ebe);Cnr=r(R5t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),R5t.forEach(t),wnr=i(lL),Ed=n(lL,"P",{});var rre=s(Ed);Anr=r(rre,`Note:
Loading a model from its configuration file does `),Cbe=n(rre,"STRONG",{});var P5t=s(Cbe);Lnr=r(P5t,"not"),P5t.forEach(t),ynr=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(rre,"A",{href:!0});var B5t=s(QQ);xnr=r(B5t,"from_pretrained()"),B5t.forEach(t),$nr=r(rre," to load the model weights."),rre.forEach(t),knr=i(lL),T(_M.$$.fragment,lL),lL.forEach(t),Snr=i(ml),co=n(ml,"DIV",{class:!0});var ba=s(co);T(F8.$$.fragment,ba),Rnr=i(ba),wbe=n(ba,"P",{});var I5t=s(wbe);Pnr=r(I5t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),I5t.forEach(t),Bnr=i(ba),Qa=n(ba,"P",{});var iL=s(Qa);Inr=r(iL,"The model class to instantiate is selected based on the "),Abe=n(iL,"CODE",{});var N5t=s(Abe);Nnr=r(N5t,"model_type"),N5t.forEach(t),qnr=r(iL,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(iL,"CODE",{});var q5t=s(Lbe);jnr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),Dnr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(iL,"CODE",{});var j5t=s(ybe);Gnr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),Onr=r(iL,":"),iL.forEach(t),Vnr=i(ba),xbe=n(ba,"UL",{});var D5t=s(xbe);bM=n(D5t,"LI",{});var fBe=s(bM);$be=n(fBe,"STRONG",{});var G5t=s($be);Xnr=r(G5t,"vilt"),G5t.forEach(t),znr=r(fBe," \u2014 "),WQ=n(fBe,"A",{href:!0});var O5t=s(WQ);Qnr=r(O5t,"ViltForQuestionAnswering"),O5t.forEach(t),Wnr=r(fBe," (ViLT model)"),fBe.forEach(t),D5t.forEach(t),Hnr=i(ba),vM=n(ba,"P",{});var gBe=s(vM);Unr=r(gBe,"The model is set in evaluation mode by default using "),kbe=n(gBe,"CODE",{});var V5t=s(kbe);Jnr=r(V5t,"model.eval()"),V5t.forEach(t),Ynr=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=n(gBe,"CODE",{});var X5t=s(Sbe);Knr=r(X5t,"model.train()"),X5t.forEach(t),gBe.forEach(t),Znr=i(ba),T(FM.$$.fragment,ba),ba.forEach(t),ml.forEach(t),VOe=i(m),Cd=n(m,"H2",{class:!0});var UXe=s(Cd);TM=n(UXe,"A",{id:!0,class:!0,href:!0});var z5t=s(TM);Rbe=n(z5t,"SPAN",{});var Q5t=s(Rbe);T(T8.$$.fragment,Q5t),Q5t.forEach(t),z5t.forEach(t),esr=i(UXe),Pbe=n(UXe,"SPAN",{});var W5t=s(Pbe);osr=r(W5t,"AutoModelForAudioClassification"),W5t.forEach(t),UXe.forEach(t),XOe=i(m),Xo=n(m,"DIV",{class:!0});var fl=s(Xo);T(M8.$$.fragment,fl),rsr=i(fl),wd=n(fl,"P",{});var tre=s(wd);tsr=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HQ=n(tre,"A",{href:!0});var H5t=s(HQ);asr=r(H5t,"from_pretrained()"),H5t.forEach(t),nsr=r(tre," class method or the "),UQ=n(tre,"A",{href:!0});var U5t=s(UQ);ssr=r(U5t,"from_config()"),U5t.forEach(t),lsr=r(tre,` class
method.`),tre.forEach(t),isr=i(fl),E8=n(fl,"P",{});var JXe=s(E8);dsr=r(JXe,"This class cannot be instantiated directly using "),Bbe=n(JXe,"CODE",{});var J5t=s(Bbe);csr=r(J5t,"__init__()"),J5t.forEach(t),msr=r(JXe," (throws an error)."),JXe.forEach(t),fsr=i(fl),Ft=n(fl,"DIV",{class:!0});var dL=s(Ft);T(C8.$$.fragment,dL),gsr=i(dL),Ibe=n(dL,"P",{});var Y5t=s(Ibe);hsr=r(Y5t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Y5t.forEach(t),usr=i(dL),Ad=n(dL,"P",{});var are=s(Ad);psr=r(are,`Note:
Loading a model from its configuration file does `),Nbe=n(are,"STRONG",{});var K5t=s(Nbe);_sr=r(K5t,"not"),K5t.forEach(t),bsr=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(are,"A",{href:!0});var Z5t=s(JQ);vsr=r(Z5t,"from_pretrained()"),Z5t.forEach(t),Fsr=r(are," to load the model weights."),are.forEach(t),Tsr=i(dL),T(MM.$$.fragment,dL),dL.forEach(t),Msr=i(fl),mo=n(fl,"DIV",{class:!0});var va=s(mo);T(w8.$$.fragment,va),Esr=i(va),qbe=n(va,"P",{});var e3t=s(qbe);Csr=r(e3t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),e3t.forEach(t),wsr=i(va),Wa=n(va,"P",{});var cL=s(Wa);Asr=r(cL,"The model class to instantiate is selected based on the "),jbe=n(cL,"CODE",{});var o3t=s(jbe);Lsr=r(o3t,"model_type"),o3t.forEach(t),ysr=r(cL,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(cL,"CODE",{});var r3t=s(Dbe);xsr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),$sr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(cL,"CODE",{});var t3t=s(Gbe);ksr=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),Ssr=r(cL,":"),cL.forEach(t),Rsr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);EM=n(ze,"LI",{});var hBe=s(EM);Obe=n(hBe,"STRONG",{});var a3t=s(Obe);Psr=r(a3t,"data2vec-audio"),a3t.forEach(t),Bsr=r(hBe," \u2014 "),YQ=n(hBe,"A",{href:!0});var n3t=s(YQ);Isr=r(n3t,"Data2VecAudioForSequenceClassification"),n3t.forEach(t),Nsr=r(hBe," (Data2VecAudio model)"),hBe.forEach(t),qsr=i(ze),CM=n(ze,"LI",{});var uBe=s(CM);Vbe=n(uBe,"STRONG",{});var s3t=s(Vbe);jsr=r(s3t,"hubert"),s3t.forEach(t),Dsr=r(uBe," \u2014 "),KQ=n(uBe,"A",{href:!0});var l3t=s(KQ);Gsr=r(l3t,"HubertForSequenceClassification"),l3t.forEach(t),Osr=r(uBe," (Hubert model)"),uBe.forEach(t),Vsr=i(ze),wM=n(ze,"LI",{});var pBe=s(wM);Xbe=n(pBe,"STRONG",{});var i3t=s(Xbe);Xsr=r(i3t,"sew"),i3t.forEach(t),zsr=r(pBe," \u2014 "),ZQ=n(pBe,"A",{href:!0});var d3t=s(ZQ);Qsr=r(d3t,"SEWForSequenceClassification"),d3t.forEach(t),Wsr=r(pBe," (SEW model)"),pBe.forEach(t),Hsr=i(ze),AM=n(ze,"LI",{});var _Be=s(AM);zbe=n(_Be,"STRONG",{});var c3t=s(zbe);Usr=r(c3t,"sew-d"),c3t.forEach(t),Jsr=r(_Be," \u2014 "),eW=n(_Be,"A",{href:!0});var m3t=s(eW);Ysr=r(m3t,"SEWDForSequenceClassification"),m3t.forEach(t),Ksr=r(_Be," (SEW-D model)"),_Be.forEach(t),Zsr=i(ze),LM=n(ze,"LI",{});var bBe=s(LM);Qbe=n(bBe,"STRONG",{});var f3t=s(Qbe);elr=r(f3t,"unispeech"),f3t.forEach(t),olr=r(bBe," \u2014 "),oW=n(bBe,"A",{href:!0});var g3t=s(oW);rlr=r(g3t,"UniSpeechForSequenceClassification"),g3t.forEach(t),tlr=r(bBe," (UniSpeech model)"),bBe.forEach(t),alr=i(ze),yM=n(ze,"LI",{});var vBe=s(yM);Wbe=n(vBe,"STRONG",{});var h3t=s(Wbe);nlr=r(h3t,"unispeech-sat"),h3t.forEach(t),slr=r(vBe," \u2014 "),rW=n(vBe,"A",{href:!0});var u3t=s(rW);llr=r(u3t,"UniSpeechSatForSequenceClassification"),u3t.forEach(t),ilr=r(vBe," (UniSpeechSat model)"),vBe.forEach(t),dlr=i(ze),xM=n(ze,"LI",{});var FBe=s(xM);Hbe=n(FBe,"STRONG",{});var p3t=s(Hbe);clr=r(p3t,"wav2vec2"),p3t.forEach(t),mlr=r(FBe," \u2014 "),tW=n(FBe,"A",{href:!0});var _3t=s(tW);flr=r(_3t,"Wav2Vec2ForSequenceClassification"),_3t.forEach(t),glr=r(FBe," (Wav2Vec2 model)"),FBe.forEach(t),hlr=i(ze),$M=n(ze,"LI",{});var TBe=s($M);Ube=n(TBe,"STRONG",{});var b3t=s(Ube);ulr=r(b3t,"wav2vec2-conformer"),b3t.forEach(t),plr=r(TBe," \u2014 "),aW=n(TBe,"A",{href:!0});var v3t=s(aW);_lr=r(v3t,"Wav2Vec2ConformerForSequenceClassification"),v3t.forEach(t),blr=r(TBe," (Wav2Vec2-Conformer model)"),TBe.forEach(t),vlr=i(ze),kM=n(ze,"LI",{});var MBe=s(kM);Jbe=n(MBe,"STRONG",{});var F3t=s(Jbe);Flr=r(F3t,"wavlm"),F3t.forEach(t),Tlr=r(MBe," \u2014 "),nW=n(MBe,"A",{href:!0});var T3t=s(nW);Mlr=r(T3t,"WavLMForSequenceClassification"),T3t.forEach(t),Elr=r(MBe," (WavLM model)"),MBe.forEach(t),ze.forEach(t),Clr=i(va),SM=n(va,"P",{});var EBe=s(SM);wlr=r(EBe,"The model is set in evaluation mode by default using "),Ybe=n(EBe,"CODE",{});var M3t=s(Ybe);Alr=r(M3t,"model.eval()"),M3t.forEach(t),Llr=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=n(EBe,"CODE",{});var E3t=s(Kbe);ylr=r(E3t,"model.train()"),E3t.forEach(t),EBe.forEach(t),xlr=i(va),T(RM.$$.fragment,va),va.forEach(t),fl.forEach(t),zOe=i(m),Ld=n(m,"H2",{class:!0});var YXe=s(Ld);PM=n(YXe,"A",{id:!0,class:!0,href:!0});var C3t=s(PM);Zbe=n(C3t,"SPAN",{});var w3t=s(Zbe);T(A8.$$.fragment,w3t),w3t.forEach(t),C3t.forEach(t),$lr=i(YXe),eve=n(YXe,"SPAN",{});var A3t=s(eve);klr=r(A3t,"AutoModelForAudioFrameClassification"),A3t.forEach(t),YXe.forEach(t),QOe=i(m),zo=n(m,"DIV",{class:!0});var gl=s(zo);T(L8.$$.fragment,gl),Slr=i(gl),yd=n(gl,"P",{});var nre=s(yd);Rlr=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sW=n(nre,"A",{href:!0});var L3t=s(sW);Plr=r(L3t,"from_pretrained()"),L3t.forEach(t),Blr=r(nre," class method or the "),lW=n(nre,"A",{href:!0});var y3t=s(lW);Ilr=r(y3t,"from_config()"),y3t.forEach(t),Nlr=r(nre,` class
method.`),nre.forEach(t),qlr=i(gl),y8=n(gl,"P",{});var KXe=s(y8);jlr=r(KXe,"This class cannot be instantiated directly using "),ove=n(KXe,"CODE",{});var x3t=s(ove);Dlr=r(x3t,"__init__()"),x3t.forEach(t),Glr=r(KXe," (throws an error)."),KXe.forEach(t),Olr=i(gl),Tt=n(gl,"DIV",{class:!0});var mL=s(Tt);T(x8.$$.fragment,mL),Vlr=i(mL),rve=n(mL,"P",{});var $3t=s(rve);Xlr=r($3t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$3t.forEach(t),zlr=i(mL),xd=n(mL,"P",{});var sre=s(xd);Qlr=r(sre,`Note:
Loading a model from its configuration file does `),tve=n(sre,"STRONG",{});var k3t=s(tve);Wlr=r(k3t,"not"),k3t.forEach(t),Hlr=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(sre,"A",{href:!0});var S3t=s(iW);Ulr=r(S3t,"from_pretrained()"),S3t.forEach(t),Jlr=r(sre," to load the model weights."),sre.forEach(t),Ylr=i(mL),T(BM.$$.fragment,mL),mL.forEach(t),Klr=i(gl),fo=n(gl,"DIV",{class:!0});var Fa=s(fo);T($8.$$.fragment,Fa),Zlr=i(Fa),ave=n(Fa,"P",{});var R3t=s(ave);eir=r(R3t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),R3t.forEach(t),oir=i(Fa),Ha=n(Fa,"P",{});var fL=s(Ha);rir=r(fL,"The model class to instantiate is selected based on the "),nve=n(fL,"CODE",{});var P3t=s(nve);tir=r(P3t,"model_type"),P3t.forEach(t),air=r(fL,` property of the config object (either
passed as an argument or loaded from `),sve=n(fL,"CODE",{});var B3t=s(sve);nir=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),sir=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(fL,"CODE",{});var I3t=s(lve);lir=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),iir=r(fL,":"),fL.forEach(t),dir=i(Fa),et=n(Fa,"UL",{});var hl=s(et);IM=n(hl,"LI",{});var CBe=s(IM);ive=n(CBe,"STRONG",{});var N3t=s(ive);cir=r(N3t,"data2vec-audio"),N3t.forEach(t),mir=r(CBe," \u2014 "),dW=n(CBe,"A",{href:!0});var q3t=s(dW);fir=r(q3t,"Data2VecAudioForAudioFrameClassification"),q3t.forEach(t),gir=r(CBe," (Data2VecAudio model)"),CBe.forEach(t),hir=i(hl),NM=n(hl,"LI",{});var wBe=s(NM);dve=n(wBe,"STRONG",{});var j3t=s(dve);uir=r(j3t,"unispeech-sat"),j3t.forEach(t),pir=r(wBe," \u2014 "),cW=n(wBe,"A",{href:!0});var D3t=s(cW);_ir=r(D3t,"UniSpeechSatForAudioFrameClassification"),D3t.forEach(t),bir=r(wBe," (UniSpeechSat model)"),wBe.forEach(t),vir=i(hl),qM=n(hl,"LI",{});var ABe=s(qM);cve=n(ABe,"STRONG",{});var G3t=s(cve);Fir=r(G3t,"wav2vec2"),G3t.forEach(t),Tir=r(ABe," \u2014 "),mW=n(ABe,"A",{href:!0});var O3t=s(mW);Mir=r(O3t,"Wav2Vec2ForAudioFrameClassification"),O3t.forEach(t),Eir=r(ABe," (Wav2Vec2 model)"),ABe.forEach(t),Cir=i(hl),jM=n(hl,"LI",{});var LBe=s(jM);mve=n(LBe,"STRONG",{});var V3t=s(mve);wir=r(V3t,"wav2vec2-conformer"),V3t.forEach(t),Air=r(LBe," \u2014 "),fW=n(LBe,"A",{href:!0});var X3t=s(fW);Lir=r(X3t,"Wav2Vec2ConformerForAudioFrameClassification"),X3t.forEach(t),yir=r(LBe," (Wav2Vec2-Conformer model)"),LBe.forEach(t),xir=i(hl),DM=n(hl,"LI",{});var yBe=s(DM);fve=n(yBe,"STRONG",{});var z3t=s(fve);$ir=r(z3t,"wavlm"),z3t.forEach(t),kir=r(yBe," \u2014 "),gW=n(yBe,"A",{href:!0});var Q3t=s(gW);Sir=r(Q3t,"WavLMForAudioFrameClassification"),Q3t.forEach(t),Rir=r(yBe," (WavLM model)"),yBe.forEach(t),hl.forEach(t),Pir=i(Fa),GM=n(Fa,"P",{});var xBe=s(GM);Bir=r(xBe,"The model is set in evaluation mode by default using "),gve=n(xBe,"CODE",{});var W3t=s(gve);Iir=r(W3t,"model.eval()"),W3t.forEach(t),Nir=r(xBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hve=n(xBe,"CODE",{});var H3t=s(hve);qir=r(H3t,"model.train()"),H3t.forEach(t),xBe.forEach(t),jir=i(Fa),T(OM.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),WOe=i(m),$d=n(m,"H2",{class:!0});var ZXe=s($d);VM=n(ZXe,"A",{id:!0,class:!0,href:!0});var U3t=s(VM);uve=n(U3t,"SPAN",{});var J3t=s(uve);T(k8.$$.fragment,J3t),J3t.forEach(t),U3t.forEach(t),Dir=i(ZXe),pve=n(ZXe,"SPAN",{});var Y3t=s(pve);Gir=r(Y3t,"AutoModelForCTC"),Y3t.forEach(t),ZXe.forEach(t),HOe=i(m),Qo=n(m,"DIV",{class:!0});var ul=s(Qo);T(S8.$$.fragment,ul),Oir=i(ul),kd=n(ul,"P",{});var lre=s(kd);Vir=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hW=n(lre,"A",{href:!0});var K3t=s(hW);Xir=r(K3t,"from_pretrained()"),K3t.forEach(t),zir=r(lre," class method or the "),uW=n(lre,"A",{href:!0});var Z3t=s(uW);Qir=r(Z3t,"from_config()"),Z3t.forEach(t),Wir=r(lre,` class
method.`),lre.forEach(t),Hir=i(ul),R8=n(ul,"P",{});var eze=s(R8);Uir=r(eze,"This class cannot be instantiated directly using "),_ve=n(eze,"CODE",{});var e0t=s(_ve);Jir=r(e0t,"__init__()"),e0t.forEach(t),Yir=r(eze," (throws an error)."),eze.forEach(t),Kir=i(ul),Mt=n(ul,"DIV",{class:!0});var gL=s(Mt);T(P8.$$.fragment,gL),Zir=i(gL),bve=n(gL,"P",{});var o0t=s(bve);edr=r(o0t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),o0t.forEach(t),odr=i(gL),Sd=n(gL,"P",{});var ire=s(Sd);rdr=r(ire,`Note:
Loading a model from its configuration file does `),vve=n(ire,"STRONG",{});var r0t=s(vve);tdr=r(r0t,"not"),r0t.forEach(t),adr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(ire,"A",{href:!0});var t0t=s(pW);ndr=r(t0t,"from_pretrained()"),t0t.forEach(t),sdr=r(ire," to load the model weights."),ire.forEach(t),ldr=i(gL),T(XM.$$.fragment,gL),gL.forEach(t),idr=i(ul),go=n(ul,"DIV",{class:!0});var Ta=s(go);T(B8.$$.fragment,Ta),ddr=i(Ta),Fve=n(Ta,"P",{});var a0t=s(Fve);cdr=r(a0t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),a0t.forEach(t),mdr=i(Ta),Ua=n(Ta,"P",{});var hL=s(Ua);fdr=r(hL,"The model class to instantiate is selected based on the "),Tve=n(hL,"CODE",{});var n0t=s(Tve);gdr=r(n0t,"model_type"),n0t.forEach(t),hdr=r(hL,` property of the config object (either
passed as an argument or loaded from `),Mve=n(hL,"CODE",{});var s0t=s(Mve);udr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),pdr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(hL,"CODE",{});var l0t=s(Eve);_dr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),bdr=r(hL,":"),hL.forEach(t),vdr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);zM=n(Be,"LI",{});var $Be=s(zM);Cve=n($Be,"STRONG",{});var i0t=s(Cve);Fdr=r(i0t,"data2vec-audio"),i0t.forEach(t),Tdr=r($Be," \u2014 "),_W=n($Be,"A",{href:!0});var d0t=s(_W);Mdr=r(d0t,"Data2VecAudioForCTC"),d0t.forEach(t),Edr=r($Be," (Data2VecAudio model)"),$Be.forEach(t),Cdr=i(Be),QM=n(Be,"LI",{});var kBe=s(QM);wve=n(kBe,"STRONG",{});var c0t=s(wve);wdr=r(c0t,"hubert"),c0t.forEach(t),Adr=r(kBe," \u2014 "),bW=n(kBe,"A",{href:!0});var m0t=s(bW);Ldr=r(m0t,"HubertForCTC"),m0t.forEach(t),ydr=r(kBe," (Hubert model)"),kBe.forEach(t),xdr=i(Be),WM=n(Be,"LI",{});var SBe=s(WM);Ave=n(SBe,"STRONG",{});var f0t=s(Ave);$dr=r(f0t,"mctct"),f0t.forEach(t),kdr=r(SBe," \u2014 "),vW=n(SBe,"A",{href:!0});var g0t=s(vW);Sdr=r(g0t,"MCTCTForCTC"),g0t.forEach(t),Rdr=r(SBe," (M-CTC-T model)"),SBe.forEach(t),Pdr=i(Be),HM=n(Be,"LI",{});var RBe=s(HM);Lve=n(RBe,"STRONG",{});var h0t=s(Lve);Bdr=r(h0t,"sew"),h0t.forEach(t),Idr=r(RBe," \u2014 "),FW=n(RBe,"A",{href:!0});var u0t=s(FW);Ndr=r(u0t,"SEWForCTC"),u0t.forEach(t),qdr=r(RBe," (SEW model)"),RBe.forEach(t),jdr=i(Be),UM=n(Be,"LI",{});var PBe=s(UM);yve=n(PBe,"STRONG",{});var p0t=s(yve);Ddr=r(p0t,"sew-d"),p0t.forEach(t),Gdr=r(PBe," \u2014 "),TW=n(PBe,"A",{href:!0});var _0t=s(TW);Odr=r(_0t,"SEWDForCTC"),_0t.forEach(t),Vdr=r(PBe," (SEW-D model)"),PBe.forEach(t),Xdr=i(Be),JM=n(Be,"LI",{});var BBe=s(JM);xve=n(BBe,"STRONG",{});var b0t=s(xve);zdr=r(b0t,"unispeech"),b0t.forEach(t),Qdr=r(BBe," \u2014 "),MW=n(BBe,"A",{href:!0});var v0t=s(MW);Wdr=r(v0t,"UniSpeechForCTC"),v0t.forEach(t),Hdr=r(BBe," (UniSpeech model)"),BBe.forEach(t),Udr=i(Be),YM=n(Be,"LI",{});var IBe=s(YM);$ve=n(IBe,"STRONG",{});var F0t=s($ve);Jdr=r(F0t,"unispeech-sat"),F0t.forEach(t),Ydr=r(IBe," \u2014 "),EW=n(IBe,"A",{href:!0});var T0t=s(EW);Kdr=r(T0t,"UniSpeechSatForCTC"),T0t.forEach(t),Zdr=r(IBe," (UniSpeechSat model)"),IBe.forEach(t),ecr=i(Be),KM=n(Be,"LI",{});var NBe=s(KM);kve=n(NBe,"STRONG",{});var M0t=s(kve);ocr=r(M0t,"wav2vec2"),M0t.forEach(t),rcr=r(NBe," \u2014 "),CW=n(NBe,"A",{href:!0});var E0t=s(CW);tcr=r(E0t,"Wav2Vec2ForCTC"),E0t.forEach(t),acr=r(NBe," (Wav2Vec2 model)"),NBe.forEach(t),ncr=i(Be),ZM=n(Be,"LI",{});var qBe=s(ZM);Sve=n(qBe,"STRONG",{});var C0t=s(Sve);scr=r(C0t,"wav2vec2-conformer"),C0t.forEach(t),lcr=r(qBe," \u2014 "),wW=n(qBe,"A",{href:!0});var w0t=s(wW);icr=r(w0t,"Wav2Vec2ConformerForCTC"),w0t.forEach(t),dcr=r(qBe," (Wav2Vec2-Conformer model)"),qBe.forEach(t),ccr=i(Be),eE=n(Be,"LI",{});var jBe=s(eE);Rve=n(jBe,"STRONG",{});var A0t=s(Rve);mcr=r(A0t,"wavlm"),A0t.forEach(t),fcr=r(jBe," \u2014 "),AW=n(jBe,"A",{href:!0});var L0t=s(AW);gcr=r(L0t,"WavLMForCTC"),L0t.forEach(t),hcr=r(jBe," (WavLM model)"),jBe.forEach(t),Be.forEach(t),ucr=i(Ta),oE=n(Ta,"P",{});var DBe=s(oE);pcr=r(DBe,"The model is set in evaluation mode by default using "),Pve=n(DBe,"CODE",{});var y0t=s(Pve);_cr=r(y0t,"model.eval()"),y0t.forEach(t),bcr=r(DBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=n(DBe,"CODE",{});var x0t=s(Bve);vcr=r(x0t,"model.train()"),x0t.forEach(t),DBe.forEach(t),Fcr=i(Ta),T(rE.$$.fragment,Ta),Ta.forEach(t),ul.forEach(t),UOe=i(m),Rd=n(m,"H2",{class:!0});var oze=s(Rd);tE=n(oze,"A",{id:!0,class:!0,href:!0});var $0t=s(tE);Ive=n($0t,"SPAN",{});var k0t=s(Ive);T(I8.$$.fragment,k0t),k0t.forEach(t),$0t.forEach(t),Tcr=i(oze),Nve=n(oze,"SPAN",{});var S0t=s(Nve);Mcr=r(S0t,"AutoModelForSpeechSeq2Seq"),S0t.forEach(t),oze.forEach(t),JOe=i(m),Wo=n(m,"DIV",{class:!0});var pl=s(Wo);T(N8.$$.fragment,pl),Ecr=i(pl),Pd=n(pl,"P",{});var dre=s(Pd);Ccr=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LW=n(dre,"A",{href:!0});var R0t=s(LW);wcr=r(R0t,"from_pretrained()"),R0t.forEach(t),Acr=r(dre," class method or the "),yW=n(dre,"A",{href:!0});var P0t=s(yW);Lcr=r(P0t,"from_config()"),P0t.forEach(t),ycr=r(dre,` class
method.`),dre.forEach(t),xcr=i(pl),q8=n(pl,"P",{});var rze=s(q8);$cr=r(rze,"This class cannot be instantiated directly using "),qve=n(rze,"CODE",{});var B0t=s(qve);kcr=r(B0t,"__init__()"),B0t.forEach(t),Scr=r(rze," (throws an error)."),rze.forEach(t),Rcr=i(pl),Et=n(pl,"DIV",{class:!0});var uL=s(Et);T(j8.$$.fragment,uL),Pcr=i(uL),jve=n(uL,"P",{});var I0t=s(jve);Bcr=r(I0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I0t.forEach(t),Icr=i(uL),Bd=n(uL,"P",{});var cre=s(Bd);Ncr=r(cre,`Note:
Loading a model from its configuration file does `),Dve=n(cre,"STRONG",{});var N0t=s(Dve);qcr=r(N0t,"not"),N0t.forEach(t),jcr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(cre,"A",{href:!0});var q0t=s(xW);Dcr=r(q0t,"from_pretrained()"),q0t.forEach(t),Gcr=r(cre," to load the model weights."),cre.forEach(t),Ocr=i(uL),T(aE.$$.fragment,uL),uL.forEach(t),Vcr=i(pl),ho=n(pl,"DIV",{class:!0});var Ma=s(ho);T(D8.$$.fragment,Ma),Xcr=i(Ma),Gve=n(Ma,"P",{});var j0t=s(Gve);zcr=r(j0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),j0t.forEach(t),Qcr=i(Ma),Ja=n(Ma,"P",{});var pL=s(Ja);Wcr=r(pL,"The model class to instantiate is selected based on the "),Ove=n(pL,"CODE",{});var D0t=s(Ove);Hcr=r(D0t,"model_type"),D0t.forEach(t),Ucr=r(pL,` property of the config object (either
passed as an argument or loaded from `),Vve=n(pL,"CODE",{});var G0t=s(Vve);Jcr=r(G0t,"pretrained_model_name_or_path"),G0t.forEach(t),Ycr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(pL,"CODE",{});var O0t=s(Xve);Kcr=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),Zcr=r(pL,":"),pL.forEach(t),emr=i(Ma),G8=n(Ma,"UL",{});var tze=s(G8);nE=n(tze,"LI",{});var GBe=s(nE);zve=n(GBe,"STRONG",{});var V0t=s(zve);omr=r(V0t,"speech-encoder-decoder"),V0t.forEach(t),rmr=r(GBe," \u2014 "),$W=n(GBe,"A",{href:!0});var X0t=s($W);tmr=r(X0t,"SpeechEncoderDecoderModel"),X0t.forEach(t),amr=r(GBe," (Speech Encoder decoder model)"),GBe.forEach(t),nmr=i(tze),sE=n(tze,"LI",{});var OBe=s(sE);Qve=n(OBe,"STRONG",{});var z0t=s(Qve);smr=r(z0t,"speech_to_text"),z0t.forEach(t),lmr=r(OBe," \u2014 "),kW=n(OBe,"A",{href:!0});var Q0t=s(kW);imr=r(Q0t,"Speech2TextForConditionalGeneration"),Q0t.forEach(t),dmr=r(OBe," (Speech2Text model)"),OBe.forEach(t),tze.forEach(t),cmr=i(Ma),lE=n(Ma,"P",{});var VBe=s(lE);mmr=r(VBe,"The model is set in evaluation mode by default using "),Wve=n(VBe,"CODE",{});var W0t=s(Wve);fmr=r(W0t,"model.eval()"),W0t.forEach(t),gmr=r(VBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hve=n(VBe,"CODE",{});var H0t=s(Hve);hmr=r(H0t,"model.train()"),H0t.forEach(t),VBe.forEach(t),umr=i(Ma),T(iE.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),YOe=i(m),Id=n(m,"H2",{class:!0});var aze=s(Id);dE=n(aze,"A",{id:!0,class:!0,href:!0});var U0t=s(dE);Uve=n(U0t,"SPAN",{});var J0t=s(Uve);T(O8.$$.fragment,J0t),J0t.forEach(t),U0t.forEach(t),pmr=i(aze),Jve=n(aze,"SPAN",{});var Y0t=s(Jve);_mr=r(Y0t,"AutoModelForAudioXVector"),Y0t.forEach(t),aze.forEach(t),KOe=i(m),Ho=n(m,"DIV",{class:!0});var _l=s(Ho);T(V8.$$.fragment,_l),bmr=i(_l),Nd=n(_l,"P",{});var mre=s(Nd);vmr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),SW=n(mre,"A",{href:!0});var K0t=s(SW);Fmr=r(K0t,"from_pretrained()"),K0t.forEach(t),Tmr=r(mre," class method or the "),RW=n(mre,"A",{href:!0});var Z0t=s(RW);Mmr=r(Z0t,"from_config()"),Z0t.forEach(t),Emr=r(mre,` class
method.`),mre.forEach(t),Cmr=i(_l),X8=n(_l,"P",{});var nze=s(X8);wmr=r(nze,"This class cannot be instantiated directly using "),Yve=n(nze,"CODE",{});var ewt=s(Yve);Amr=r(ewt,"__init__()"),ewt.forEach(t),Lmr=r(nze," (throws an error)."),nze.forEach(t),ymr=i(_l),Ct=n(_l,"DIV",{class:!0});var _L=s(Ct);T(z8.$$.fragment,_L),xmr=i(_L),Kve=n(_L,"P",{});var owt=s(Kve);$mr=r(owt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),owt.forEach(t),kmr=i(_L),qd=n(_L,"P",{});var fre=s(qd);Smr=r(fre,`Note:
Loading a model from its configuration file does `),Zve=n(fre,"STRONG",{});var rwt=s(Zve);Rmr=r(rwt,"not"),rwt.forEach(t),Pmr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(fre,"A",{href:!0});var twt=s(PW);Bmr=r(twt,"from_pretrained()"),twt.forEach(t),Imr=r(fre," to load the model weights."),fre.forEach(t),Nmr=i(_L),T(cE.$$.fragment,_L),_L.forEach(t),qmr=i(_l),uo=n(_l,"DIV",{class:!0});var Ea=s(uo);T(Q8.$$.fragment,Ea),jmr=i(Ea),eFe=n(Ea,"P",{});var awt=s(eFe);Dmr=r(awt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),awt.forEach(t),Gmr=i(Ea),Ya=n(Ea,"P",{});var bL=s(Ya);Omr=r(bL,"The model class to instantiate is selected based on the "),oFe=n(bL,"CODE",{});var nwt=s(oFe);Vmr=r(nwt,"model_type"),nwt.forEach(t),Xmr=r(bL,` property of the config object (either
passed as an argument or loaded from `),rFe=n(bL,"CODE",{});var swt=s(rFe);zmr=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),Qmr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(bL,"CODE",{});var lwt=s(tFe);Wmr=r(lwt,"pretrained_model_name_or_path"),lwt.forEach(t),Hmr=r(bL,":"),bL.forEach(t),Umr=i(Ea),ot=n(Ea,"UL",{});var bl=s(ot);mE=n(bl,"LI",{});var XBe=s(mE);aFe=n(XBe,"STRONG",{});var iwt=s(aFe);Jmr=r(iwt,"data2vec-audio"),iwt.forEach(t),Ymr=r(XBe," \u2014 "),BW=n(XBe,"A",{href:!0});var dwt=s(BW);Kmr=r(dwt,"Data2VecAudioForXVector"),dwt.forEach(t),Zmr=r(XBe," (Data2VecAudio model)"),XBe.forEach(t),efr=i(bl),fE=n(bl,"LI",{});var zBe=s(fE);nFe=n(zBe,"STRONG",{});var cwt=s(nFe);ofr=r(cwt,"unispeech-sat"),cwt.forEach(t),rfr=r(zBe," \u2014 "),IW=n(zBe,"A",{href:!0});var mwt=s(IW);tfr=r(mwt,"UniSpeechSatForXVector"),mwt.forEach(t),afr=r(zBe," (UniSpeechSat model)"),zBe.forEach(t),nfr=i(bl),gE=n(bl,"LI",{});var QBe=s(gE);sFe=n(QBe,"STRONG",{});var fwt=s(sFe);sfr=r(fwt,"wav2vec2"),fwt.forEach(t),lfr=r(QBe," \u2014 "),NW=n(QBe,"A",{href:!0});var gwt=s(NW);ifr=r(gwt,"Wav2Vec2ForXVector"),gwt.forEach(t),dfr=r(QBe," (Wav2Vec2 model)"),QBe.forEach(t),cfr=i(bl),hE=n(bl,"LI",{});var WBe=s(hE);lFe=n(WBe,"STRONG",{});var hwt=s(lFe);mfr=r(hwt,"wav2vec2-conformer"),hwt.forEach(t),ffr=r(WBe," \u2014 "),qW=n(WBe,"A",{href:!0});var uwt=s(qW);gfr=r(uwt,"Wav2Vec2ConformerForXVector"),uwt.forEach(t),hfr=r(WBe," (Wav2Vec2-Conformer model)"),WBe.forEach(t),ufr=i(bl),uE=n(bl,"LI",{});var HBe=s(uE);iFe=n(HBe,"STRONG",{});var pwt=s(iFe);pfr=r(pwt,"wavlm"),pwt.forEach(t),_fr=r(HBe," \u2014 "),jW=n(HBe,"A",{href:!0});var _wt=s(jW);bfr=r(_wt,"WavLMForXVector"),_wt.forEach(t),vfr=r(HBe," (WavLM model)"),HBe.forEach(t),bl.forEach(t),Ffr=i(Ea),pE=n(Ea,"P",{});var UBe=s(pE);Tfr=r(UBe,"The model is set in evaluation mode by default using "),dFe=n(UBe,"CODE",{});var bwt=s(dFe);Mfr=r(bwt,"model.eval()"),bwt.forEach(t),Efr=r(UBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cFe=n(UBe,"CODE",{});var vwt=s(cFe);Cfr=r(vwt,"model.train()"),vwt.forEach(t),UBe.forEach(t),wfr=i(Ea),T(_E.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),ZOe=i(m),jd=n(m,"H2",{class:!0});var sze=s(jd);bE=n(sze,"A",{id:!0,class:!0,href:!0});var Fwt=s(bE);mFe=n(Fwt,"SPAN",{});var Twt=s(mFe);T(W8.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),Afr=i(sze),fFe=n(sze,"SPAN",{});var Mwt=s(fFe);Lfr=r(Mwt,"AutoModelForMaskedImageModeling"),Mwt.forEach(t),sze.forEach(t),eVe=i(m),Uo=n(m,"DIV",{class:!0});var vl=s(Uo);T(H8.$$.fragment,vl),yfr=i(vl),Dd=n(vl,"P",{});var gre=s(Dd);xfr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DW=n(gre,"A",{href:!0});var Ewt=s(DW);$fr=r(Ewt,"from_pretrained()"),Ewt.forEach(t),kfr=r(gre," class method or the "),GW=n(gre,"A",{href:!0});var Cwt=s(GW);Sfr=r(Cwt,"from_config()"),Cwt.forEach(t),Rfr=r(gre,` class
method.`),gre.forEach(t),Pfr=i(vl),U8=n(vl,"P",{});var lze=s(U8);Bfr=r(lze,"This class cannot be instantiated directly using "),gFe=n(lze,"CODE",{});var wwt=s(gFe);Ifr=r(wwt,"__init__()"),wwt.forEach(t),Nfr=r(lze," (throws an error)."),lze.forEach(t),qfr=i(vl),wt=n(vl,"DIV",{class:!0});var vL=s(wt);T(J8.$$.fragment,vL),jfr=i(vL),hFe=n(vL,"P",{});var Awt=s(hFe);Dfr=r(Awt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Awt.forEach(t),Gfr=i(vL),Gd=n(vL,"P",{});var hre=s(Gd);Ofr=r(hre,`Note:
Loading a model from its configuration file does `),uFe=n(hre,"STRONG",{});var Lwt=s(uFe);Vfr=r(Lwt,"not"),Lwt.forEach(t),Xfr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(hre,"A",{href:!0});var ywt=s(OW);zfr=r(ywt,"from_pretrained()"),ywt.forEach(t),Qfr=r(hre," to load the model weights."),hre.forEach(t),Wfr=i(vL),T(vE.$$.fragment,vL),vL.forEach(t),Hfr=i(vl),po=n(vl,"DIV",{class:!0});var Ca=s(po);T(Y8.$$.fragment,Ca),Ufr=i(Ca),pFe=n(Ca,"P",{});var xwt=s(pFe);Jfr=r(xwt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xwt.forEach(t),Yfr=i(Ca),Ka=n(Ca,"P",{});var FL=s(Ka);Kfr=r(FL,"The model class to instantiate is selected based on the "),_Fe=n(FL,"CODE",{});var $wt=s(_Fe);Zfr=r($wt,"model_type"),$wt.forEach(t),egr=r(FL,` property of the config object (either
passed as an argument or loaded from `),bFe=n(FL,"CODE",{});var kwt=s(bFe);ogr=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),rgr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(FL,"CODE",{});var Swt=s(vFe);tgr=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),agr=r(FL,":"),FL.forEach(t),ngr=i(Ca),Od=n(Ca,"UL",{});var ure=s(Od);FE=n(ure,"LI",{});var JBe=s(FE);FFe=n(JBe,"STRONG",{});var Rwt=s(FFe);sgr=r(Rwt,"deit"),Rwt.forEach(t),lgr=r(JBe," \u2014 "),VW=n(JBe,"A",{href:!0});var Pwt=s(VW);igr=r(Pwt,"DeiTForMaskedImageModeling"),Pwt.forEach(t),dgr=r(JBe," (DeiT model)"),JBe.forEach(t),cgr=i(ure),TE=n(ure,"LI",{});var YBe=s(TE);TFe=n(YBe,"STRONG",{});var Bwt=s(TFe);mgr=r(Bwt,"swin"),Bwt.forEach(t),fgr=r(YBe," \u2014 "),XW=n(YBe,"A",{href:!0});var Iwt=s(XW);ggr=r(Iwt,"SwinForMaskedImageModeling"),Iwt.forEach(t),hgr=r(YBe," (Swin Transformer model)"),YBe.forEach(t),ugr=i(ure),ME=n(ure,"LI",{});var KBe=s(ME);MFe=n(KBe,"STRONG",{});var Nwt=s(MFe);pgr=r(Nwt,"vit"),Nwt.forEach(t),_gr=r(KBe," \u2014 "),zW=n(KBe,"A",{href:!0});var qwt=s(zW);bgr=r(qwt,"ViTForMaskedImageModeling"),qwt.forEach(t),vgr=r(KBe," (ViT model)"),KBe.forEach(t),ure.forEach(t),Fgr=i(Ca),EE=n(Ca,"P",{});var ZBe=s(EE);Tgr=r(ZBe,"The model is set in evaluation mode by default using "),EFe=n(ZBe,"CODE",{});var jwt=s(EFe);Mgr=r(jwt,"model.eval()"),jwt.forEach(t),Egr=r(ZBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CFe=n(ZBe,"CODE",{});var Dwt=s(CFe);Cgr=r(Dwt,"model.train()"),Dwt.forEach(t),ZBe.forEach(t),wgr=i(Ca),T(CE.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),oVe=i(m),Vd=n(m,"H2",{class:!0});var ize=s(Vd);wE=n(ize,"A",{id:!0,class:!0,href:!0});var Gwt=s(wE);wFe=n(Gwt,"SPAN",{});var Owt=s(wFe);T(K8.$$.fragment,Owt),Owt.forEach(t),Gwt.forEach(t),Agr=i(ize),AFe=n(ize,"SPAN",{});var Vwt=s(AFe);Lgr=r(Vwt,"AutoModelForObjectDetection"),Vwt.forEach(t),ize.forEach(t),rVe=i(m),Jo=n(m,"DIV",{class:!0});var Fl=s(Jo);T(Z8.$$.fragment,Fl),ygr=i(Fl),Xd=n(Fl,"P",{});var pre=s(Xd);xgr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QW=n(pre,"A",{href:!0});var Xwt=s(QW);$gr=r(Xwt,"from_pretrained()"),Xwt.forEach(t),kgr=r(pre," class method or the "),WW=n(pre,"A",{href:!0});var zwt=s(WW);Sgr=r(zwt,"from_config()"),zwt.forEach(t),Rgr=r(pre,` class
method.`),pre.forEach(t),Pgr=i(Fl),e9=n(Fl,"P",{});var dze=s(e9);Bgr=r(dze,"This class cannot be instantiated directly using "),LFe=n(dze,"CODE",{});var Qwt=s(LFe);Igr=r(Qwt,"__init__()"),Qwt.forEach(t),Ngr=r(dze," (throws an error)."),dze.forEach(t),qgr=i(Fl),At=n(Fl,"DIV",{class:!0});var TL=s(At);T(o9.$$.fragment,TL),jgr=i(TL),yFe=n(TL,"P",{});var Wwt=s(yFe);Dgr=r(Wwt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wwt.forEach(t),Ggr=i(TL),zd=n(TL,"P",{});var _re=s(zd);Ogr=r(_re,`Note:
Loading a model from its configuration file does `),xFe=n(_re,"STRONG",{});var Hwt=s(xFe);Vgr=r(Hwt,"not"),Hwt.forEach(t),Xgr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(_re,"A",{href:!0});var Uwt=s(HW);zgr=r(Uwt,"from_pretrained()"),Uwt.forEach(t),Qgr=r(_re," to load the model weights."),_re.forEach(t),Wgr=i(TL),T(AE.$$.fragment,TL),TL.forEach(t),Hgr=i(Fl),_o=n(Fl,"DIV",{class:!0});var wa=s(_o);T(r9.$$.fragment,wa),Ugr=i(wa),$Fe=n(wa,"P",{});var Jwt=s($Fe);Jgr=r(Jwt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jwt.forEach(t),Ygr=i(wa),Za=n(wa,"P",{});var ML=s(Za);Kgr=r(ML,"The model class to instantiate is selected based on the "),kFe=n(ML,"CODE",{});var Ywt=s(kFe);Zgr=r(Ywt,"model_type"),Ywt.forEach(t),ehr=r(ML,` property of the config object (either
passed as an argument or loaded from `),SFe=n(ML,"CODE",{});var Kwt=s(SFe);ohr=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),rhr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(ML,"CODE",{});var Zwt=s(RFe);thr=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),ahr=r(ML,":"),ML.forEach(t),nhr=i(wa),t9=n(wa,"UL",{});var cze=s(t9);LE=n(cze,"LI",{});var eIe=s(LE);PFe=n(eIe,"STRONG",{});var eAt=s(PFe);shr=r(eAt,"detr"),eAt.forEach(t),lhr=r(eIe," \u2014 "),UW=n(eIe,"A",{href:!0});var oAt=s(UW);ihr=r(oAt,"DetrForObjectDetection"),oAt.forEach(t),dhr=r(eIe," (DETR model)"),eIe.forEach(t),chr=i(cze),yE=n(cze,"LI",{});var oIe=s(yE);BFe=n(oIe,"STRONG",{});var rAt=s(BFe);mhr=r(rAt,"yolos"),rAt.forEach(t),fhr=r(oIe," \u2014 "),JW=n(oIe,"A",{href:!0});var tAt=s(JW);ghr=r(tAt,"YolosForObjectDetection"),tAt.forEach(t),hhr=r(oIe," (YOLOS model)"),oIe.forEach(t),cze.forEach(t),uhr=i(wa),xE=n(wa,"P",{});var rIe=s(xE);phr=r(rIe,"The model is set in evaluation mode by default using "),IFe=n(rIe,"CODE",{});var aAt=s(IFe);_hr=r(aAt,"model.eval()"),aAt.forEach(t),bhr=r(rIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NFe=n(rIe,"CODE",{});var nAt=s(NFe);vhr=r(nAt,"model.train()"),nAt.forEach(t),rIe.forEach(t),Fhr=i(wa),T($E.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),tVe=i(m),Qd=n(m,"H2",{class:!0});var mze=s(Qd);kE=n(mze,"A",{id:!0,class:!0,href:!0});var sAt=s(kE);qFe=n(sAt,"SPAN",{});var lAt=s(qFe);T(a9.$$.fragment,lAt),lAt.forEach(t),sAt.forEach(t),Thr=i(mze),jFe=n(mze,"SPAN",{});var iAt=s(jFe);Mhr=r(iAt,"AutoModelForImageSegmentation"),iAt.forEach(t),mze.forEach(t),aVe=i(m),Yo=n(m,"DIV",{class:!0});var Tl=s(Yo);T(n9.$$.fragment,Tl),Ehr=i(Tl),Wd=n(Tl,"P",{});var bre=s(Wd);Chr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YW=n(bre,"A",{href:!0});var dAt=s(YW);whr=r(dAt,"from_pretrained()"),dAt.forEach(t),Ahr=r(bre," class method or the "),KW=n(bre,"A",{href:!0});var cAt=s(KW);Lhr=r(cAt,"from_config()"),cAt.forEach(t),yhr=r(bre,` class
method.`),bre.forEach(t),xhr=i(Tl),s9=n(Tl,"P",{});var fze=s(s9);$hr=r(fze,"This class cannot be instantiated directly using "),DFe=n(fze,"CODE",{});var mAt=s(DFe);khr=r(mAt,"__init__()"),mAt.forEach(t),Shr=r(fze," (throws an error)."),fze.forEach(t),Rhr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var EL=s(Lt);T(l9.$$.fragment,EL),Phr=i(EL),GFe=n(EL,"P",{});var fAt=s(GFe);Bhr=r(fAt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fAt.forEach(t),Ihr=i(EL),Hd=n(EL,"P",{});var vre=s(Hd);Nhr=r(vre,`Note:
Loading a model from its configuration file does `),OFe=n(vre,"STRONG",{});var gAt=s(OFe);qhr=r(gAt,"not"),gAt.forEach(t),jhr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(vre,"A",{href:!0});var hAt=s(ZW);Dhr=r(hAt,"from_pretrained()"),hAt.forEach(t),Ghr=r(vre," to load the model weights."),vre.forEach(t),Ohr=i(EL),T(SE.$$.fragment,EL),EL.forEach(t),Vhr=i(Tl),bo=n(Tl,"DIV",{class:!0});var Aa=s(bo);T(i9.$$.fragment,Aa),Xhr=i(Aa),VFe=n(Aa,"P",{});var uAt=s(VFe);zhr=r(uAt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),uAt.forEach(t),Qhr=i(Aa),en=n(Aa,"P",{});var CL=s(en);Whr=r(CL,"The model class to instantiate is selected based on the "),XFe=n(CL,"CODE",{});var pAt=s(XFe);Hhr=r(pAt,"model_type"),pAt.forEach(t),Uhr=r(CL,` property of the config object (either
passed as an argument or loaded from `),zFe=n(CL,"CODE",{});var _At=s(zFe);Jhr=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),Yhr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(CL,"CODE",{});var bAt=s(QFe);Khr=r(bAt,"pretrained_model_name_or_path"),bAt.forEach(t),Zhr=r(CL,":"),CL.forEach(t),eur=i(Aa),WFe=n(Aa,"UL",{});var vAt=s(WFe);RE=n(vAt,"LI",{});var tIe=s(RE);HFe=n(tIe,"STRONG",{});var FAt=s(HFe);our=r(FAt,"detr"),FAt.forEach(t),rur=r(tIe," \u2014 "),eH=n(tIe,"A",{href:!0});var TAt=s(eH);tur=r(TAt,"DetrForSegmentation"),TAt.forEach(t),aur=r(tIe," (DETR model)"),tIe.forEach(t),vAt.forEach(t),nur=i(Aa),PE=n(Aa,"P",{});var aIe=s(PE);sur=r(aIe,"The model is set in evaluation mode by default using "),UFe=n(aIe,"CODE",{});var MAt=s(UFe);lur=r(MAt,"model.eval()"),MAt.forEach(t),iur=r(aIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=n(aIe,"CODE",{});var EAt=s(JFe);dur=r(EAt,"model.train()"),EAt.forEach(t),aIe.forEach(t),cur=i(Aa),T(BE.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),nVe=i(m),Ud=n(m,"H2",{class:!0});var gze=s(Ud);IE=n(gze,"A",{id:!0,class:!0,href:!0});var CAt=s(IE);YFe=n(CAt,"SPAN",{});var wAt=s(YFe);T(d9.$$.fragment,wAt),wAt.forEach(t),CAt.forEach(t),mur=i(gze),KFe=n(gze,"SPAN",{});var AAt=s(KFe);fur=r(AAt,"AutoModelForSemanticSegmentation"),AAt.forEach(t),gze.forEach(t),sVe=i(m),Ko=n(m,"DIV",{class:!0});var Ml=s(Ko);T(c9.$$.fragment,Ml),gur=i(Ml),Jd=n(Ml,"P",{});var Fre=s(Jd);hur=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oH=n(Fre,"A",{href:!0});var LAt=s(oH);uur=r(LAt,"from_pretrained()"),LAt.forEach(t),pur=r(Fre," class method or the "),rH=n(Fre,"A",{href:!0});var yAt=s(rH);_ur=r(yAt,"from_config()"),yAt.forEach(t),bur=r(Fre,` class
method.`),Fre.forEach(t),vur=i(Ml),m9=n(Ml,"P",{});var hze=s(m9);Fur=r(hze,"This class cannot be instantiated directly using "),ZFe=n(hze,"CODE",{});var xAt=s(ZFe);Tur=r(xAt,"__init__()"),xAt.forEach(t),Mur=r(hze," (throws an error)."),hze.forEach(t),Eur=i(Ml),yt=n(Ml,"DIV",{class:!0});var wL=s(yt);T(f9.$$.fragment,wL),Cur=i(wL),e1e=n(wL,"P",{});var $At=s(e1e);wur=r($At,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$At.forEach(t),Aur=i(wL),Yd=n(wL,"P",{});var Tre=s(Yd);Lur=r(Tre,`Note:
Loading a model from its configuration file does `),o1e=n(Tre,"STRONG",{});var kAt=s(o1e);yur=r(kAt,"not"),kAt.forEach(t),xur=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(Tre,"A",{href:!0});var SAt=s(tH);$ur=r(SAt,"from_pretrained()"),SAt.forEach(t),kur=r(Tre," to load the model weights."),Tre.forEach(t),Sur=i(wL),T(NE.$$.fragment,wL),wL.forEach(t),Rur=i(Ml),vo=n(Ml,"DIV",{class:!0});var La=s(vo);T(g9.$$.fragment,La),Pur=i(La),r1e=n(La,"P",{});var RAt=s(r1e);Bur=r(RAt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),RAt.forEach(t),Iur=i(La),on=n(La,"P",{});var AL=s(on);Nur=r(AL,"The model class to instantiate is selected based on the "),t1e=n(AL,"CODE",{});var PAt=s(t1e);qur=r(PAt,"model_type"),PAt.forEach(t),jur=r(AL,` property of the config object (either
passed as an argument or loaded from `),a1e=n(AL,"CODE",{});var BAt=s(a1e);Dur=r(BAt,"pretrained_model_name_or_path"),BAt.forEach(t),Gur=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(AL,"CODE",{});var IAt=s(n1e);Our=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),Vur=r(AL,":"),AL.forEach(t),Xur=i(La),rn=n(La,"UL",{});var LL=s(rn);qE=n(LL,"LI",{});var nIe=s(qE);s1e=n(nIe,"STRONG",{});var NAt=s(s1e);zur=r(NAt,"beit"),NAt.forEach(t),Qur=r(nIe," \u2014 "),aH=n(nIe,"A",{href:!0});var qAt=s(aH);Wur=r(qAt,"BeitForSemanticSegmentation"),qAt.forEach(t),Hur=r(nIe," (BEiT model)"),nIe.forEach(t),Uur=i(LL),jE=n(LL,"LI",{});var sIe=s(jE);l1e=n(sIe,"STRONG",{});var jAt=s(l1e);Jur=r(jAt,"data2vec-vision"),jAt.forEach(t),Yur=r(sIe," \u2014 "),nH=n(sIe,"A",{href:!0});var DAt=s(nH);Kur=r(DAt,"Data2VecVisionForSemanticSegmentation"),DAt.forEach(t),Zur=r(sIe," (Data2VecVision model)"),sIe.forEach(t),epr=i(LL),DE=n(LL,"LI",{});var lIe=s(DE);i1e=n(lIe,"STRONG",{});var GAt=s(i1e);opr=r(GAt,"dpt"),GAt.forEach(t),rpr=r(lIe," \u2014 "),sH=n(lIe,"A",{href:!0});var OAt=s(sH);tpr=r(OAt,"DPTForSemanticSegmentation"),OAt.forEach(t),apr=r(lIe," (DPT model)"),lIe.forEach(t),npr=i(LL),GE=n(LL,"LI",{});var iIe=s(GE);d1e=n(iIe,"STRONG",{});var VAt=s(d1e);spr=r(VAt,"segformer"),VAt.forEach(t),lpr=r(iIe," \u2014 "),lH=n(iIe,"A",{href:!0});var XAt=s(lH);ipr=r(XAt,"SegformerForSemanticSegmentation"),XAt.forEach(t),dpr=r(iIe," (SegFormer model)"),iIe.forEach(t),LL.forEach(t),cpr=i(La),OE=n(La,"P",{});var dIe=s(OE);mpr=r(dIe,"The model is set in evaluation mode by default using "),c1e=n(dIe,"CODE",{});var zAt=s(c1e);fpr=r(zAt,"model.eval()"),zAt.forEach(t),gpr=r(dIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=n(dIe,"CODE",{});var QAt=s(m1e);hpr=r(QAt,"model.train()"),QAt.forEach(t),dIe.forEach(t),upr=i(La),T(VE.$$.fragment,La),La.forEach(t),Ml.forEach(t),lVe=i(m),Kd=n(m,"H2",{class:!0});var uze=s(Kd);XE=n(uze,"A",{id:!0,class:!0,href:!0});var WAt=s(XE);f1e=n(WAt,"SPAN",{});var HAt=s(f1e);T(h9.$$.fragment,HAt),HAt.forEach(t),WAt.forEach(t),ppr=i(uze),g1e=n(uze,"SPAN",{});var UAt=s(g1e);_pr=r(UAt,"AutoModelForInstanceSegmentation"),UAt.forEach(t),uze.forEach(t),iVe=i(m),Zo=n(m,"DIV",{class:!0});var El=s(Zo);T(u9.$$.fragment,El),bpr=i(El),Zd=n(El,"P",{});var Mre=s(Zd);vpr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iH=n(Mre,"A",{href:!0});var JAt=s(iH);Fpr=r(JAt,"from_pretrained()"),JAt.forEach(t),Tpr=r(Mre," class method or the "),dH=n(Mre,"A",{href:!0});var YAt=s(dH);Mpr=r(YAt,"from_config()"),YAt.forEach(t),Epr=r(Mre,` class
method.`),Mre.forEach(t),Cpr=i(El),p9=n(El,"P",{});var pze=s(p9);wpr=r(pze,"This class cannot be instantiated directly using "),h1e=n(pze,"CODE",{});var KAt=s(h1e);Apr=r(KAt,"__init__()"),KAt.forEach(t),Lpr=r(pze," (throws an error)."),pze.forEach(t),ypr=i(El),xt=n(El,"DIV",{class:!0});var yL=s(xt);T(_9.$$.fragment,yL),xpr=i(yL),u1e=n(yL,"P",{});var ZAt=s(u1e);$pr=r(ZAt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ZAt.forEach(t),kpr=i(yL),ec=n(yL,"P",{});var Ere=s(ec);Spr=r(Ere,`Note:
Loading a model from its configuration file does `),p1e=n(Ere,"STRONG",{});var e6t=s(p1e);Rpr=r(e6t,"not"),e6t.forEach(t),Ppr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(Ere,"A",{href:!0});var o6t=s(cH);Bpr=r(o6t,"from_pretrained()"),o6t.forEach(t),Ipr=r(Ere," to load the model weights."),Ere.forEach(t),Npr=i(yL),T(zE.$$.fragment,yL),yL.forEach(t),qpr=i(El),Fo=n(El,"DIV",{class:!0});var ya=s(Fo);T(b9.$$.fragment,ya),jpr=i(ya),_1e=n(ya,"P",{});var r6t=s(_1e);Dpr=r(r6t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),r6t.forEach(t),Gpr=i(ya),tn=n(ya,"P",{});var xL=s(tn);Opr=r(xL,"The model class to instantiate is selected based on the "),b1e=n(xL,"CODE",{});var t6t=s(b1e);Vpr=r(t6t,"model_type"),t6t.forEach(t),Xpr=r(xL,` property of the config object (either
passed as an argument or loaded from `),v1e=n(xL,"CODE",{});var a6t=s(v1e);zpr=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),Qpr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(xL,"CODE",{});var n6t=s(F1e);Wpr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),Hpr=r(xL,":"),xL.forEach(t),Upr=i(ya),T1e=n(ya,"UL",{});var s6t=s(T1e);QE=n(s6t,"LI",{});var cIe=s(QE);M1e=n(cIe,"STRONG",{});var l6t=s(M1e);Jpr=r(l6t,"maskformer"),l6t.forEach(t),Ypr=r(cIe," \u2014 "),mH=n(cIe,"A",{href:!0});var i6t=s(mH);Kpr=r(i6t,"MaskFormerForInstanceSegmentation"),i6t.forEach(t),Zpr=r(cIe," (MaskFormer model)"),cIe.forEach(t),s6t.forEach(t),e_r=i(ya),WE=n(ya,"P",{});var mIe=s(WE);o_r=r(mIe,"The model is set in evaluation mode by default using "),E1e=n(mIe,"CODE",{});var d6t=s(E1e);r_r=r(d6t,"model.eval()"),d6t.forEach(t),t_r=r(mIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=n(mIe,"CODE",{});var c6t=s(C1e);a_r=r(c6t,"model.train()"),c6t.forEach(t),mIe.forEach(t),n_r=i(ya),T(HE.$$.fragment,ya),ya.forEach(t),El.forEach(t),dVe=i(m),oc=n(m,"H2",{class:!0});var _ze=s(oc);UE=n(_ze,"A",{id:!0,class:!0,href:!0});var m6t=s(UE);w1e=n(m6t,"SPAN",{});var f6t=s(w1e);T(v9.$$.fragment,f6t),f6t.forEach(t),m6t.forEach(t),s_r=i(_ze),A1e=n(_ze,"SPAN",{});var g6t=s(A1e);l_r=r(g6t,"TFAutoModel"),g6t.forEach(t),_ze.forEach(t),cVe=i(m),er=n(m,"DIV",{class:!0});var Cl=s(er);T(F9.$$.fragment,Cl),i_r=i(Cl),rc=n(Cl,"P",{});var Cre=s(rc);d_r=r(Cre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fH=n(Cre,"A",{href:!0});var h6t=s(fH);c_r=r(h6t,"from_pretrained()"),h6t.forEach(t),m_r=r(Cre," class method or the "),gH=n(Cre,"A",{href:!0});var u6t=s(gH);f_r=r(u6t,"from_config()"),u6t.forEach(t),g_r=r(Cre,` class
method.`),Cre.forEach(t),h_r=i(Cl),T9=n(Cl,"P",{});var bze=s(T9);u_r=r(bze,"This class cannot be instantiated directly using "),L1e=n(bze,"CODE",{});var p6t=s(L1e);p_r=r(p6t,"__init__()"),p6t.forEach(t),__r=r(bze," (throws an error)."),bze.forEach(t),b_r=i(Cl),$t=n(Cl,"DIV",{class:!0});var $L=s($t);T(M9.$$.fragment,$L),v_r=i($L),y1e=n($L,"P",{});var _6t=s(y1e);F_r=r(_6t,"Instantiates one of the base model classes of the library from a configuration."),_6t.forEach(t),T_r=i($L),tc=n($L,"P",{});var wre=s(tc);M_r=r(wre,`Note:
Loading a model from its configuration file does `),x1e=n(wre,"STRONG",{});var b6t=s(x1e);E_r=r(b6t,"not"),b6t.forEach(t),C_r=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(wre,"A",{href:!0});var v6t=s(hH);w_r=r(v6t,"from_pretrained()"),v6t.forEach(t),A_r=r(wre," to load the model weights."),wre.forEach(t),L_r=i($L),T(JE.$$.fragment,$L),$L.forEach(t),y_r=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(E9.$$.fragment,wl),x_r=i(wl),$1e=n(wl,"P",{});var F6t=s($1e);$_r=r(F6t,"Instantiate one of the base model classes of the library from a pretrained model."),F6t.forEach(t),k_r=i(wl),an=n(wl,"P",{});var kL=s(an);S_r=r(kL,"The model class to instantiate is selected based on the "),k1e=n(kL,"CODE",{});var T6t=s(k1e);R_r=r(T6t,"model_type"),T6t.forEach(t),P_r=r(kL,` property of the config object (either
passed as an argument or loaded from `),S1e=n(kL,"CODE",{});var M6t=s(S1e);B_r=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),I_r=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(kL,"CODE",{});var E6t=s(R1e);N_r=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),q_r=r(kL,":"),kL.forEach(t),j_r=i(wl),j=n(wl,"UL",{});var D=s(j);YE=n(D,"LI",{});var fIe=s(YE);P1e=n(fIe,"STRONG",{});var C6t=s(P1e);D_r=r(C6t,"albert"),C6t.forEach(t),G_r=r(fIe," \u2014 "),uH=n(fIe,"A",{href:!0});var w6t=s(uH);O_r=r(w6t,"TFAlbertModel"),w6t.forEach(t),V_r=r(fIe," (ALBERT model)"),fIe.forEach(t),X_r=i(D),KE=n(D,"LI",{});var gIe=s(KE);B1e=n(gIe,"STRONG",{});var A6t=s(B1e);z_r=r(A6t,"bart"),A6t.forEach(t),Q_r=r(gIe," \u2014 "),pH=n(gIe,"A",{href:!0});var L6t=s(pH);W_r=r(L6t,"TFBartModel"),L6t.forEach(t),H_r=r(gIe," (BART model)"),gIe.forEach(t),U_r=i(D),ZE=n(D,"LI",{});var hIe=s(ZE);I1e=n(hIe,"STRONG",{});var y6t=s(I1e);J_r=r(y6t,"bert"),y6t.forEach(t),Y_r=r(hIe," \u2014 "),_H=n(hIe,"A",{href:!0});var x6t=s(_H);K_r=r(x6t,"TFBertModel"),x6t.forEach(t),Z_r=r(hIe," (BERT model)"),hIe.forEach(t),e2r=i(D),e4=n(D,"LI",{});var uIe=s(e4);N1e=n(uIe,"STRONG",{});var $6t=s(N1e);o2r=r($6t,"blenderbot"),$6t.forEach(t),r2r=r(uIe," \u2014 "),bH=n(uIe,"A",{href:!0});var k6t=s(bH);t2r=r(k6t,"TFBlenderbotModel"),k6t.forEach(t),a2r=r(uIe," (Blenderbot model)"),uIe.forEach(t),n2r=i(D),o4=n(D,"LI",{});var pIe=s(o4);q1e=n(pIe,"STRONG",{});var S6t=s(q1e);s2r=r(S6t,"blenderbot-small"),S6t.forEach(t),l2r=r(pIe," \u2014 "),vH=n(pIe,"A",{href:!0});var R6t=s(vH);i2r=r(R6t,"TFBlenderbotSmallModel"),R6t.forEach(t),d2r=r(pIe," (BlenderbotSmall model)"),pIe.forEach(t),c2r=i(D),r4=n(D,"LI",{});var _Ie=s(r4);j1e=n(_Ie,"STRONG",{});var P6t=s(j1e);m2r=r(P6t,"camembert"),P6t.forEach(t),f2r=r(_Ie," \u2014 "),FH=n(_Ie,"A",{href:!0});var B6t=s(FH);g2r=r(B6t,"TFCamembertModel"),B6t.forEach(t),h2r=r(_Ie," (CamemBERT model)"),_Ie.forEach(t),u2r=i(D),t4=n(D,"LI",{});var bIe=s(t4);D1e=n(bIe,"STRONG",{});var I6t=s(D1e);p2r=r(I6t,"clip"),I6t.forEach(t),_2r=r(bIe," \u2014 "),TH=n(bIe,"A",{href:!0});var N6t=s(TH);b2r=r(N6t,"TFCLIPModel"),N6t.forEach(t),v2r=r(bIe," (CLIP model)"),bIe.forEach(t),F2r=i(D),a4=n(D,"LI",{});var vIe=s(a4);G1e=n(vIe,"STRONG",{});var q6t=s(G1e);T2r=r(q6t,"convbert"),q6t.forEach(t),M2r=r(vIe," \u2014 "),MH=n(vIe,"A",{href:!0});var j6t=s(MH);E2r=r(j6t,"TFConvBertModel"),j6t.forEach(t),C2r=r(vIe," (ConvBERT model)"),vIe.forEach(t),w2r=i(D),n4=n(D,"LI",{});var FIe=s(n4);O1e=n(FIe,"STRONG",{});var D6t=s(O1e);A2r=r(D6t,"convnext"),D6t.forEach(t),L2r=r(FIe," \u2014 "),EH=n(FIe,"A",{href:!0});var G6t=s(EH);y2r=r(G6t,"TFConvNextModel"),G6t.forEach(t),x2r=r(FIe," (ConvNeXT model)"),FIe.forEach(t),$2r=i(D),s4=n(D,"LI",{});var TIe=s(s4);V1e=n(TIe,"STRONG",{});var O6t=s(V1e);k2r=r(O6t,"ctrl"),O6t.forEach(t),S2r=r(TIe," \u2014 "),CH=n(TIe,"A",{href:!0});var V6t=s(CH);R2r=r(V6t,"TFCTRLModel"),V6t.forEach(t),P2r=r(TIe," (CTRL model)"),TIe.forEach(t),B2r=i(D),l4=n(D,"LI",{});var MIe=s(l4);X1e=n(MIe,"STRONG",{});var X6t=s(X1e);I2r=r(X6t,"data2vec-vision"),X6t.forEach(t),N2r=r(MIe," \u2014 "),wH=n(MIe,"A",{href:!0});var z6t=s(wH);q2r=r(z6t,"TFData2VecVisionModel"),z6t.forEach(t),j2r=r(MIe," (Data2VecVision model)"),MIe.forEach(t),D2r=i(D),i4=n(D,"LI",{});var EIe=s(i4);z1e=n(EIe,"STRONG",{});var Q6t=s(z1e);G2r=r(Q6t,"deberta"),Q6t.forEach(t),O2r=r(EIe," \u2014 "),AH=n(EIe,"A",{href:!0});var W6t=s(AH);V2r=r(W6t,"TFDebertaModel"),W6t.forEach(t),X2r=r(EIe," (DeBERTa model)"),EIe.forEach(t),z2r=i(D),d4=n(D,"LI",{});var CIe=s(d4);Q1e=n(CIe,"STRONG",{});var H6t=s(Q1e);Q2r=r(H6t,"deberta-v2"),H6t.forEach(t),W2r=r(CIe," \u2014 "),LH=n(CIe,"A",{href:!0});var U6t=s(LH);H2r=r(U6t,"TFDebertaV2Model"),U6t.forEach(t),U2r=r(CIe," (DeBERTa-v2 model)"),CIe.forEach(t),J2r=i(D),c4=n(D,"LI",{});var wIe=s(c4);W1e=n(wIe,"STRONG",{});var J6t=s(W1e);Y2r=r(J6t,"distilbert"),J6t.forEach(t),K2r=r(wIe," \u2014 "),yH=n(wIe,"A",{href:!0});var Y6t=s(yH);Z2r=r(Y6t,"TFDistilBertModel"),Y6t.forEach(t),ebr=r(wIe," (DistilBERT model)"),wIe.forEach(t),obr=i(D),m4=n(D,"LI",{});var AIe=s(m4);H1e=n(AIe,"STRONG",{});var K6t=s(H1e);rbr=r(K6t,"dpr"),K6t.forEach(t),tbr=r(AIe," \u2014 "),xH=n(AIe,"A",{href:!0});var Z6t=s(xH);abr=r(Z6t,"TFDPRQuestionEncoder"),Z6t.forEach(t),nbr=r(AIe," (DPR model)"),AIe.forEach(t),sbr=i(D),f4=n(D,"LI",{});var LIe=s(f4);U1e=n(LIe,"STRONG",{});var eLt=s(U1e);lbr=r(eLt,"electra"),eLt.forEach(t),ibr=r(LIe," \u2014 "),$H=n(LIe,"A",{href:!0});var oLt=s($H);dbr=r(oLt,"TFElectraModel"),oLt.forEach(t),cbr=r(LIe," (ELECTRA model)"),LIe.forEach(t),mbr=i(D),g4=n(D,"LI",{});var yIe=s(g4);J1e=n(yIe,"STRONG",{});var rLt=s(J1e);fbr=r(rLt,"flaubert"),rLt.forEach(t),gbr=r(yIe," \u2014 "),kH=n(yIe,"A",{href:!0});var tLt=s(kH);hbr=r(tLt,"TFFlaubertModel"),tLt.forEach(t),ubr=r(yIe," (FlauBERT model)"),yIe.forEach(t),pbr=i(D),Ws=n(D,"LI",{});var sS=s(Ws);Y1e=n(sS,"STRONG",{});var aLt=s(Y1e);_br=r(aLt,"funnel"),aLt.forEach(t),bbr=r(sS," \u2014 "),SH=n(sS,"A",{href:!0});var nLt=s(SH);vbr=r(nLt,"TFFunnelModel"),nLt.forEach(t),Fbr=r(sS," or "),RH=n(sS,"A",{href:!0});var sLt=s(RH);Tbr=r(sLt,"TFFunnelBaseModel"),sLt.forEach(t),Mbr=r(sS," (Funnel Transformer model)"),sS.forEach(t),Ebr=i(D),h4=n(D,"LI",{});var xIe=s(h4);K1e=n(xIe,"STRONG",{});var lLt=s(K1e);Cbr=r(lLt,"gpt2"),lLt.forEach(t),wbr=r(xIe," \u2014 "),PH=n(xIe,"A",{href:!0});var iLt=s(PH);Abr=r(iLt,"TFGPT2Model"),iLt.forEach(t),Lbr=r(xIe," (OpenAI GPT-2 model)"),xIe.forEach(t),ybr=i(D),u4=n(D,"LI",{});var $Ie=s(u4);Z1e=n($Ie,"STRONG",{});var dLt=s(Z1e);xbr=r(dLt,"gptj"),dLt.forEach(t),$br=r($Ie," \u2014 "),BH=n($Ie,"A",{href:!0});var cLt=s(BH);kbr=r(cLt,"TFGPTJModel"),cLt.forEach(t),Sbr=r($Ie," (GPT-J model)"),$Ie.forEach(t),Rbr=i(D),p4=n(D,"LI",{});var kIe=s(p4);eTe=n(kIe,"STRONG",{});var mLt=s(eTe);Pbr=r(mLt,"hubert"),mLt.forEach(t),Bbr=r(kIe," \u2014 "),IH=n(kIe,"A",{href:!0});var fLt=s(IH);Ibr=r(fLt,"TFHubertModel"),fLt.forEach(t),Nbr=r(kIe," (Hubert model)"),kIe.forEach(t),qbr=i(D),_4=n(D,"LI",{});var SIe=s(_4);oTe=n(SIe,"STRONG",{});var gLt=s(oTe);jbr=r(gLt,"layoutlm"),gLt.forEach(t),Dbr=r(SIe," \u2014 "),NH=n(SIe,"A",{href:!0});var hLt=s(NH);Gbr=r(hLt,"TFLayoutLMModel"),hLt.forEach(t),Obr=r(SIe," (LayoutLM model)"),SIe.forEach(t),Vbr=i(D),b4=n(D,"LI",{});var RIe=s(b4);rTe=n(RIe,"STRONG",{});var uLt=s(rTe);Xbr=r(uLt,"led"),uLt.forEach(t),zbr=r(RIe," \u2014 "),qH=n(RIe,"A",{href:!0});var pLt=s(qH);Qbr=r(pLt,"TFLEDModel"),pLt.forEach(t),Wbr=r(RIe," (LED model)"),RIe.forEach(t),Hbr=i(D),v4=n(D,"LI",{});var PIe=s(v4);tTe=n(PIe,"STRONG",{});var _Lt=s(tTe);Ubr=r(_Lt,"longformer"),_Lt.forEach(t),Jbr=r(PIe," \u2014 "),jH=n(PIe,"A",{href:!0});var bLt=s(jH);Ybr=r(bLt,"TFLongformerModel"),bLt.forEach(t),Kbr=r(PIe," (Longformer model)"),PIe.forEach(t),Zbr=i(D),F4=n(D,"LI",{});var BIe=s(F4);aTe=n(BIe,"STRONG",{});var vLt=s(aTe);evr=r(vLt,"lxmert"),vLt.forEach(t),ovr=r(BIe," \u2014 "),DH=n(BIe,"A",{href:!0});var FLt=s(DH);rvr=r(FLt,"TFLxmertModel"),FLt.forEach(t),tvr=r(BIe," (LXMERT model)"),BIe.forEach(t),avr=i(D),T4=n(D,"LI",{});var IIe=s(T4);nTe=n(IIe,"STRONG",{});var TLt=s(nTe);nvr=r(TLt,"marian"),TLt.forEach(t),svr=r(IIe," \u2014 "),GH=n(IIe,"A",{href:!0});var MLt=s(GH);lvr=r(MLt,"TFMarianModel"),MLt.forEach(t),ivr=r(IIe," (Marian model)"),IIe.forEach(t),dvr=i(D),M4=n(D,"LI",{});var NIe=s(M4);sTe=n(NIe,"STRONG",{});var ELt=s(sTe);cvr=r(ELt,"mbart"),ELt.forEach(t),mvr=r(NIe," \u2014 "),OH=n(NIe,"A",{href:!0});var CLt=s(OH);fvr=r(CLt,"TFMBartModel"),CLt.forEach(t),gvr=r(NIe," (mBART model)"),NIe.forEach(t),hvr=i(D),E4=n(D,"LI",{});var qIe=s(E4);lTe=n(qIe,"STRONG",{});var wLt=s(lTe);uvr=r(wLt,"mobilebert"),wLt.forEach(t),pvr=r(qIe," \u2014 "),VH=n(qIe,"A",{href:!0});var ALt=s(VH);_vr=r(ALt,"TFMobileBertModel"),ALt.forEach(t),bvr=r(qIe," (MobileBERT model)"),qIe.forEach(t),vvr=i(D),C4=n(D,"LI",{});var jIe=s(C4);iTe=n(jIe,"STRONG",{});var LLt=s(iTe);Fvr=r(LLt,"mpnet"),LLt.forEach(t),Tvr=r(jIe," \u2014 "),XH=n(jIe,"A",{href:!0});var yLt=s(XH);Mvr=r(yLt,"TFMPNetModel"),yLt.forEach(t),Evr=r(jIe," (MPNet model)"),jIe.forEach(t),Cvr=i(D),w4=n(D,"LI",{});var DIe=s(w4);dTe=n(DIe,"STRONG",{});var xLt=s(dTe);wvr=r(xLt,"mt5"),xLt.forEach(t),Avr=r(DIe," \u2014 "),zH=n(DIe,"A",{href:!0});var $Lt=s(zH);Lvr=r($Lt,"TFMT5Model"),$Lt.forEach(t),yvr=r(DIe," (MT5 model)"),DIe.forEach(t),xvr=i(D),A4=n(D,"LI",{});var GIe=s(A4);cTe=n(GIe,"STRONG",{});var kLt=s(cTe);$vr=r(kLt,"openai-gpt"),kLt.forEach(t),kvr=r(GIe," \u2014 "),QH=n(GIe,"A",{href:!0});var SLt=s(QH);Svr=r(SLt,"TFOpenAIGPTModel"),SLt.forEach(t),Rvr=r(GIe," (OpenAI GPT model)"),GIe.forEach(t),Pvr=i(D),L4=n(D,"LI",{});var OIe=s(L4);mTe=n(OIe,"STRONG",{});var RLt=s(mTe);Bvr=r(RLt,"opt"),RLt.forEach(t),Ivr=r(OIe," \u2014 "),WH=n(OIe,"A",{href:!0});var PLt=s(WH);Nvr=r(PLt,"TFOPTModel"),PLt.forEach(t),qvr=r(OIe," (OPT model)"),OIe.forEach(t),jvr=i(D),y4=n(D,"LI",{});var VIe=s(y4);fTe=n(VIe,"STRONG",{});var BLt=s(fTe);Dvr=r(BLt,"pegasus"),BLt.forEach(t),Gvr=r(VIe," \u2014 "),HH=n(VIe,"A",{href:!0});var ILt=s(HH);Ovr=r(ILt,"TFPegasusModel"),ILt.forEach(t),Vvr=r(VIe," (Pegasus model)"),VIe.forEach(t),Xvr=i(D),x4=n(D,"LI",{});var XIe=s(x4);gTe=n(XIe,"STRONG",{});var NLt=s(gTe);zvr=r(NLt,"rembert"),NLt.forEach(t),Qvr=r(XIe," \u2014 "),UH=n(XIe,"A",{href:!0});var qLt=s(UH);Wvr=r(qLt,"TFRemBertModel"),qLt.forEach(t),Hvr=r(XIe," (RemBERT model)"),XIe.forEach(t),Uvr=i(D),$4=n(D,"LI",{});var zIe=s($4);hTe=n(zIe,"STRONG",{});var jLt=s(hTe);Jvr=r(jLt,"roberta"),jLt.forEach(t),Yvr=r(zIe," \u2014 "),JH=n(zIe,"A",{href:!0});var DLt=s(JH);Kvr=r(DLt,"TFRobertaModel"),DLt.forEach(t),Zvr=r(zIe," (RoBERTa model)"),zIe.forEach(t),eFr=i(D),k4=n(D,"LI",{});var QIe=s(k4);uTe=n(QIe,"STRONG",{});var GLt=s(uTe);oFr=r(GLt,"roformer"),GLt.forEach(t),rFr=r(QIe," \u2014 "),YH=n(QIe,"A",{href:!0});var OLt=s(YH);tFr=r(OLt,"TFRoFormerModel"),OLt.forEach(t),aFr=r(QIe," (RoFormer model)"),QIe.forEach(t),nFr=i(D),S4=n(D,"LI",{});var WIe=s(S4);pTe=n(WIe,"STRONG",{});var VLt=s(pTe);sFr=r(VLt,"speech_to_text"),VLt.forEach(t),lFr=r(WIe," \u2014 "),KH=n(WIe,"A",{href:!0});var XLt=s(KH);iFr=r(XLt,"TFSpeech2TextModel"),XLt.forEach(t),dFr=r(WIe," (Speech2Text model)"),WIe.forEach(t),cFr=i(D),R4=n(D,"LI",{});var HIe=s(R4);_Te=n(HIe,"STRONG",{});var zLt=s(_Te);mFr=r(zLt,"swin"),zLt.forEach(t),fFr=r(HIe," \u2014 "),ZH=n(HIe,"A",{href:!0});var QLt=s(ZH);gFr=r(QLt,"TFSwinModel"),QLt.forEach(t),hFr=r(HIe," (Swin Transformer model)"),HIe.forEach(t),uFr=i(D),P4=n(D,"LI",{});var UIe=s(P4);bTe=n(UIe,"STRONG",{});var WLt=s(bTe);pFr=r(WLt,"t5"),WLt.forEach(t),_Fr=r(UIe," \u2014 "),eU=n(UIe,"A",{href:!0});var HLt=s(eU);bFr=r(HLt,"TFT5Model"),HLt.forEach(t),vFr=r(UIe," (T5 model)"),UIe.forEach(t),FFr=i(D),B4=n(D,"LI",{});var JIe=s(B4);vTe=n(JIe,"STRONG",{});var ULt=s(vTe);TFr=r(ULt,"tapas"),ULt.forEach(t),MFr=r(JIe," \u2014 "),oU=n(JIe,"A",{href:!0});var JLt=s(oU);EFr=r(JLt,"TFTapasModel"),JLt.forEach(t),CFr=r(JIe," (TAPAS model)"),JIe.forEach(t),wFr=i(D),I4=n(D,"LI",{});var YIe=s(I4);FTe=n(YIe,"STRONG",{});var YLt=s(FTe);AFr=r(YLt,"transfo-xl"),YLt.forEach(t),LFr=r(YIe," \u2014 "),rU=n(YIe,"A",{href:!0});var KLt=s(rU);yFr=r(KLt,"TFTransfoXLModel"),KLt.forEach(t),xFr=r(YIe," (Transformer-XL model)"),YIe.forEach(t),$Fr=i(D),N4=n(D,"LI",{});var KIe=s(N4);TTe=n(KIe,"STRONG",{});var ZLt=s(TTe);kFr=r(ZLt,"vit"),ZLt.forEach(t),SFr=r(KIe," \u2014 "),tU=n(KIe,"A",{href:!0});var e7t=s(tU);RFr=r(e7t,"TFViTModel"),e7t.forEach(t),PFr=r(KIe," (ViT model)"),KIe.forEach(t),BFr=i(D),q4=n(D,"LI",{});var ZIe=s(q4);MTe=n(ZIe,"STRONG",{});var o7t=s(MTe);IFr=r(o7t,"vit_mae"),o7t.forEach(t),NFr=r(ZIe," \u2014 "),aU=n(ZIe,"A",{href:!0});var r7t=s(aU);qFr=r(r7t,"TFViTMAEModel"),r7t.forEach(t),jFr=r(ZIe," (ViTMAE model)"),ZIe.forEach(t),DFr=i(D),j4=n(D,"LI",{});var eNe=s(j4);ETe=n(eNe,"STRONG",{});var t7t=s(ETe);GFr=r(t7t,"wav2vec2"),t7t.forEach(t),OFr=r(eNe," \u2014 "),nU=n(eNe,"A",{href:!0});var a7t=s(nU);VFr=r(a7t,"TFWav2Vec2Model"),a7t.forEach(t),XFr=r(eNe," (Wav2Vec2 model)"),eNe.forEach(t),zFr=i(D),D4=n(D,"LI",{});var oNe=s(D4);CTe=n(oNe,"STRONG",{});var n7t=s(CTe);QFr=r(n7t,"xlm"),n7t.forEach(t),WFr=r(oNe," \u2014 "),sU=n(oNe,"A",{href:!0});var s7t=s(sU);HFr=r(s7t,"TFXLMModel"),s7t.forEach(t),UFr=r(oNe," (XLM model)"),oNe.forEach(t),JFr=i(D),G4=n(D,"LI",{});var rNe=s(G4);wTe=n(rNe,"STRONG",{});var l7t=s(wTe);YFr=r(l7t,"xlm-roberta"),l7t.forEach(t),KFr=r(rNe," \u2014 "),lU=n(rNe,"A",{href:!0});var i7t=s(lU);ZFr=r(i7t,"TFXLMRobertaModel"),i7t.forEach(t),e1r=r(rNe," (XLM-RoBERTa model)"),rNe.forEach(t),o1r=i(D),O4=n(D,"LI",{});var tNe=s(O4);ATe=n(tNe,"STRONG",{});var d7t=s(ATe);r1r=r(d7t,"xlnet"),d7t.forEach(t),t1r=r(tNe," \u2014 "),iU=n(tNe,"A",{href:!0});var c7t=s(iU);a1r=r(c7t,"TFXLNetModel"),c7t.forEach(t),n1r=r(tNe," (XLNet model)"),tNe.forEach(t),D.forEach(t),s1r=i(wl),T(V4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),mVe=i(m),ac=n(m,"H2",{class:!0});var vze=s(ac);X4=n(vze,"A",{id:!0,class:!0,href:!0});var m7t=s(X4);LTe=n(m7t,"SPAN",{});var f7t=s(LTe);T(C9.$$.fragment,f7t),f7t.forEach(t),m7t.forEach(t),l1r=i(vze),yTe=n(vze,"SPAN",{});var g7t=s(yTe);i1r=r(g7t,"TFAutoModelForPreTraining"),g7t.forEach(t),vze.forEach(t),fVe=i(m),or=n(m,"DIV",{class:!0});var Al=s(or);T(w9.$$.fragment,Al),d1r=i(Al),nc=n(Al,"P",{});var Are=s(nc);c1r=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dU=n(Are,"A",{href:!0});var h7t=s(dU);m1r=r(h7t,"from_pretrained()"),h7t.forEach(t),f1r=r(Are," class method or the "),cU=n(Are,"A",{href:!0});var u7t=s(cU);g1r=r(u7t,"from_config()"),u7t.forEach(t),h1r=r(Are,` class
method.`),Are.forEach(t),u1r=i(Al),A9=n(Al,"P",{});var Fze=s(A9);p1r=r(Fze,"This class cannot be instantiated directly using "),xTe=n(Fze,"CODE",{});var p7t=s(xTe);_1r=r(p7t,"__init__()"),p7t.forEach(t),b1r=r(Fze," (throws an error)."),Fze.forEach(t),v1r=i(Al),kt=n(Al,"DIV",{class:!0});var SL=s(kt);T(L9.$$.fragment,SL),F1r=i(SL),$Te=n(SL,"P",{});var _7t=s($Te);T1r=r(_7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_7t.forEach(t),M1r=i(SL),sc=n(SL,"P",{});var Lre=s(sc);E1r=r(Lre,`Note:
Loading a model from its configuration file does `),kTe=n(Lre,"STRONG",{});var b7t=s(kTe);C1r=r(b7t,"not"),b7t.forEach(t),w1r=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(Lre,"A",{href:!0});var v7t=s(mU);A1r=r(v7t,"from_pretrained()"),v7t.forEach(t),L1r=r(Lre," to load the model weights."),Lre.forEach(t),y1r=i(SL),T(z4.$$.fragment,SL),SL.forEach(t),x1r=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(y9.$$.fragment,Ll),$1r=i(Ll),STe=n(Ll,"P",{});var F7t=s(STe);k1r=r(F7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F7t.forEach(t),S1r=i(Ll),nn=n(Ll,"P",{});var RL=s(nn);R1r=r(RL,"The model class to instantiate is selected based on the "),RTe=n(RL,"CODE",{});var T7t=s(RTe);P1r=r(T7t,"model_type"),T7t.forEach(t),B1r=r(RL,` property of the config object (either
passed as an argument or loaded from `),PTe=n(RL,"CODE",{});var M7t=s(PTe);I1r=r(M7t,"pretrained_model_name_or_path"),M7t.forEach(t),N1r=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(RL,"CODE",{});var E7t=s(BTe);q1r=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),j1r=r(RL,":"),RL.forEach(t),D1r=i(Ll),se=n(Ll,"UL",{});var le=s(se);Q4=n(le,"LI",{});var aNe=s(Q4);ITe=n(aNe,"STRONG",{});var C7t=s(ITe);G1r=r(C7t,"albert"),C7t.forEach(t),O1r=r(aNe," \u2014 "),fU=n(aNe,"A",{href:!0});var w7t=s(fU);V1r=r(w7t,"TFAlbertForPreTraining"),w7t.forEach(t),X1r=r(aNe," (ALBERT model)"),aNe.forEach(t),z1r=i(le),W4=n(le,"LI",{});var nNe=s(W4);NTe=n(nNe,"STRONG",{});var A7t=s(NTe);Q1r=r(A7t,"bart"),A7t.forEach(t),W1r=r(nNe," \u2014 "),gU=n(nNe,"A",{href:!0});var L7t=s(gU);H1r=r(L7t,"TFBartForConditionalGeneration"),L7t.forEach(t),U1r=r(nNe," (BART model)"),nNe.forEach(t),J1r=i(le),H4=n(le,"LI",{});var sNe=s(H4);qTe=n(sNe,"STRONG",{});var y7t=s(qTe);Y1r=r(y7t,"bert"),y7t.forEach(t),K1r=r(sNe," \u2014 "),hU=n(sNe,"A",{href:!0});var x7t=s(hU);Z1r=r(x7t,"TFBertForPreTraining"),x7t.forEach(t),eTr=r(sNe," (BERT model)"),sNe.forEach(t),oTr=i(le),U4=n(le,"LI",{});var lNe=s(U4);jTe=n(lNe,"STRONG",{});var $7t=s(jTe);rTr=r($7t,"camembert"),$7t.forEach(t),tTr=r(lNe," \u2014 "),uU=n(lNe,"A",{href:!0});var k7t=s(uU);aTr=r(k7t,"TFCamembertForMaskedLM"),k7t.forEach(t),nTr=r(lNe," (CamemBERT model)"),lNe.forEach(t),sTr=i(le),J4=n(le,"LI",{});var iNe=s(J4);DTe=n(iNe,"STRONG",{});var S7t=s(DTe);lTr=r(S7t,"ctrl"),S7t.forEach(t),iTr=r(iNe," \u2014 "),pU=n(iNe,"A",{href:!0});var R7t=s(pU);dTr=r(R7t,"TFCTRLLMHeadModel"),R7t.forEach(t),cTr=r(iNe," (CTRL model)"),iNe.forEach(t),mTr=i(le),Y4=n(le,"LI",{});var dNe=s(Y4);GTe=n(dNe,"STRONG",{});var P7t=s(GTe);fTr=r(P7t,"distilbert"),P7t.forEach(t),gTr=r(dNe," \u2014 "),_U=n(dNe,"A",{href:!0});var B7t=s(_U);hTr=r(B7t,"TFDistilBertForMaskedLM"),B7t.forEach(t),uTr=r(dNe," (DistilBERT model)"),dNe.forEach(t),pTr=i(le),K4=n(le,"LI",{});var cNe=s(K4);OTe=n(cNe,"STRONG",{});var I7t=s(OTe);_Tr=r(I7t,"electra"),I7t.forEach(t),bTr=r(cNe," \u2014 "),bU=n(cNe,"A",{href:!0});var N7t=s(bU);vTr=r(N7t,"TFElectraForPreTraining"),N7t.forEach(t),FTr=r(cNe," (ELECTRA model)"),cNe.forEach(t),TTr=i(le),Z4=n(le,"LI",{});var mNe=s(Z4);VTe=n(mNe,"STRONG",{});var q7t=s(VTe);MTr=r(q7t,"flaubert"),q7t.forEach(t),ETr=r(mNe," \u2014 "),vU=n(mNe,"A",{href:!0});var j7t=s(vU);CTr=r(j7t,"TFFlaubertWithLMHeadModel"),j7t.forEach(t),wTr=r(mNe," (FlauBERT model)"),mNe.forEach(t),ATr=i(le),eC=n(le,"LI",{});var fNe=s(eC);XTe=n(fNe,"STRONG",{});var D7t=s(XTe);LTr=r(D7t,"funnel"),D7t.forEach(t),yTr=r(fNe," \u2014 "),FU=n(fNe,"A",{href:!0});var G7t=s(FU);xTr=r(G7t,"TFFunnelForPreTraining"),G7t.forEach(t),$Tr=r(fNe," (Funnel Transformer model)"),fNe.forEach(t),kTr=i(le),oC=n(le,"LI",{});var gNe=s(oC);zTe=n(gNe,"STRONG",{});var O7t=s(zTe);STr=r(O7t,"gpt2"),O7t.forEach(t),RTr=r(gNe," \u2014 "),TU=n(gNe,"A",{href:!0});var V7t=s(TU);PTr=r(V7t,"TFGPT2LMHeadModel"),V7t.forEach(t),BTr=r(gNe," (OpenAI GPT-2 model)"),gNe.forEach(t),ITr=i(le),rC=n(le,"LI",{});var hNe=s(rC);QTe=n(hNe,"STRONG",{});var X7t=s(QTe);NTr=r(X7t,"layoutlm"),X7t.forEach(t),qTr=r(hNe," \u2014 "),MU=n(hNe,"A",{href:!0});var z7t=s(MU);jTr=r(z7t,"TFLayoutLMForMaskedLM"),z7t.forEach(t),DTr=r(hNe," (LayoutLM model)"),hNe.forEach(t),GTr=i(le),tC=n(le,"LI",{});var uNe=s(tC);WTe=n(uNe,"STRONG",{});var Q7t=s(WTe);OTr=r(Q7t,"lxmert"),Q7t.forEach(t),VTr=r(uNe," \u2014 "),EU=n(uNe,"A",{href:!0});var W7t=s(EU);XTr=r(W7t,"TFLxmertForPreTraining"),W7t.forEach(t),zTr=r(uNe," (LXMERT model)"),uNe.forEach(t),QTr=i(le),aC=n(le,"LI",{});var pNe=s(aC);HTe=n(pNe,"STRONG",{});var H7t=s(HTe);WTr=r(H7t,"mobilebert"),H7t.forEach(t),HTr=r(pNe," \u2014 "),CU=n(pNe,"A",{href:!0});var U7t=s(CU);UTr=r(U7t,"TFMobileBertForPreTraining"),U7t.forEach(t),JTr=r(pNe," (MobileBERT model)"),pNe.forEach(t),YTr=i(le),nC=n(le,"LI",{});var _Ne=s(nC);UTe=n(_Ne,"STRONG",{});var J7t=s(UTe);KTr=r(J7t,"mpnet"),J7t.forEach(t),ZTr=r(_Ne," \u2014 "),wU=n(_Ne,"A",{href:!0});var Y7t=s(wU);eMr=r(Y7t,"TFMPNetForMaskedLM"),Y7t.forEach(t),oMr=r(_Ne," (MPNet model)"),_Ne.forEach(t),rMr=i(le),sC=n(le,"LI",{});var bNe=s(sC);JTe=n(bNe,"STRONG",{});var K7t=s(JTe);tMr=r(K7t,"openai-gpt"),K7t.forEach(t),aMr=r(bNe," \u2014 "),AU=n(bNe,"A",{href:!0});var Z7t=s(AU);nMr=r(Z7t,"TFOpenAIGPTLMHeadModel"),Z7t.forEach(t),sMr=r(bNe," (OpenAI GPT model)"),bNe.forEach(t),lMr=i(le),lC=n(le,"LI",{});var vNe=s(lC);YTe=n(vNe,"STRONG",{});var eyt=s(YTe);iMr=r(eyt,"roberta"),eyt.forEach(t),dMr=r(vNe," \u2014 "),LU=n(vNe,"A",{href:!0});var oyt=s(LU);cMr=r(oyt,"TFRobertaForMaskedLM"),oyt.forEach(t),mMr=r(vNe," (RoBERTa model)"),vNe.forEach(t),fMr=i(le),iC=n(le,"LI",{});var FNe=s(iC);KTe=n(FNe,"STRONG",{});var ryt=s(KTe);gMr=r(ryt,"t5"),ryt.forEach(t),hMr=r(FNe," \u2014 "),yU=n(FNe,"A",{href:!0});var tyt=s(yU);uMr=r(tyt,"TFT5ForConditionalGeneration"),tyt.forEach(t),pMr=r(FNe," (T5 model)"),FNe.forEach(t),_Mr=i(le),dC=n(le,"LI",{});var TNe=s(dC);ZTe=n(TNe,"STRONG",{});var ayt=s(ZTe);bMr=r(ayt,"tapas"),ayt.forEach(t),vMr=r(TNe," \u2014 "),xU=n(TNe,"A",{href:!0});var nyt=s(xU);FMr=r(nyt,"TFTapasForMaskedLM"),nyt.forEach(t),TMr=r(TNe," (TAPAS model)"),TNe.forEach(t),MMr=i(le),cC=n(le,"LI",{});var MNe=s(cC);eMe=n(MNe,"STRONG",{});var syt=s(eMe);EMr=r(syt,"transfo-xl"),syt.forEach(t),CMr=r(MNe," \u2014 "),$U=n(MNe,"A",{href:!0});var lyt=s($U);wMr=r(lyt,"TFTransfoXLLMHeadModel"),lyt.forEach(t),AMr=r(MNe," (Transformer-XL model)"),MNe.forEach(t),LMr=i(le),mC=n(le,"LI",{});var ENe=s(mC);oMe=n(ENe,"STRONG",{});var iyt=s(oMe);yMr=r(iyt,"vit_mae"),iyt.forEach(t),xMr=r(ENe," \u2014 "),kU=n(ENe,"A",{href:!0});var dyt=s(kU);$Mr=r(dyt,"TFViTMAEForPreTraining"),dyt.forEach(t),kMr=r(ENe," (ViTMAE model)"),ENe.forEach(t),SMr=i(le),fC=n(le,"LI",{});var CNe=s(fC);rMe=n(CNe,"STRONG",{});var cyt=s(rMe);RMr=r(cyt,"xlm"),cyt.forEach(t),PMr=r(CNe," \u2014 "),SU=n(CNe,"A",{href:!0});var myt=s(SU);BMr=r(myt,"TFXLMWithLMHeadModel"),myt.forEach(t),IMr=r(CNe," (XLM model)"),CNe.forEach(t),NMr=i(le),gC=n(le,"LI",{});var wNe=s(gC);tMe=n(wNe,"STRONG",{});var fyt=s(tMe);qMr=r(fyt,"xlm-roberta"),fyt.forEach(t),jMr=r(wNe," \u2014 "),RU=n(wNe,"A",{href:!0});var gyt=s(RU);DMr=r(gyt,"TFXLMRobertaForMaskedLM"),gyt.forEach(t),GMr=r(wNe," (XLM-RoBERTa model)"),wNe.forEach(t),OMr=i(le),hC=n(le,"LI",{});var ANe=s(hC);aMe=n(ANe,"STRONG",{});var hyt=s(aMe);VMr=r(hyt,"xlnet"),hyt.forEach(t),XMr=r(ANe," \u2014 "),PU=n(ANe,"A",{href:!0});var uyt=s(PU);zMr=r(uyt,"TFXLNetLMHeadModel"),uyt.forEach(t),QMr=r(ANe," (XLNet model)"),ANe.forEach(t),le.forEach(t),WMr=i(Ll),T(uC.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),gVe=i(m),lc=n(m,"H2",{class:!0});var Tze=s(lc);pC=n(Tze,"A",{id:!0,class:!0,href:!0});var pyt=s(pC);nMe=n(pyt,"SPAN",{});var _yt=s(nMe);T(x9.$$.fragment,_yt),_yt.forEach(t),pyt.forEach(t),HMr=i(Tze),sMe=n(Tze,"SPAN",{});var byt=s(sMe);UMr=r(byt,"TFAutoModelForCausalLM"),byt.forEach(t),Tze.forEach(t),hVe=i(m),rr=n(m,"DIV",{class:!0});var yl=s(rr);T($9.$$.fragment,yl),JMr=i(yl),ic=n(yl,"P",{});var yre=s(ic);YMr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BU=n(yre,"A",{href:!0});var vyt=s(BU);KMr=r(vyt,"from_pretrained()"),vyt.forEach(t),ZMr=r(yre," class method or the "),IU=n(yre,"A",{href:!0});var Fyt=s(IU);eEr=r(Fyt,"from_config()"),Fyt.forEach(t),oEr=r(yre,` class
method.`),yre.forEach(t),rEr=i(yl),k9=n(yl,"P",{});var Mze=s(k9);tEr=r(Mze,"This class cannot be instantiated directly using "),lMe=n(Mze,"CODE",{});var Tyt=s(lMe);aEr=r(Tyt,"__init__()"),Tyt.forEach(t),nEr=r(Mze," (throws an error)."),Mze.forEach(t),sEr=i(yl),St=n(yl,"DIV",{class:!0});var PL=s(St);T(S9.$$.fragment,PL),lEr=i(PL),iMe=n(PL,"P",{});var Myt=s(iMe);iEr=r(Myt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Myt.forEach(t),dEr=i(PL),dc=n(PL,"P",{});var xre=s(dc);cEr=r(xre,`Note:
Loading a model from its configuration file does `),dMe=n(xre,"STRONG",{});var Eyt=s(dMe);mEr=r(Eyt,"not"),Eyt.forEach(t),fEr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(xre,"A",{href:!0});var Cyt=s(NU);gEr=r(Cyt,"from_pretrained()"),Cyt.forEach(t),hEr=r(xre," to load the model weights."),xre.forEach(t),uEr=i(PL),T(_C.$$.fragment,PL),PL.forEach(t),pEr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(R9.$$.fragment,xl),_Er=i(xl),cMe=n(xl,"P",{});var wyt=s(cMe);bEr=r(wyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wyt.forEach(t),vEr=i(xl),sn=n(xl,"P",{});var BL=s(sn);FEr=r(BL,"The model class to instantiate is selected based on the "),mMe=n(BL,"CODE",{});var Ayt=s(mMe);TEr=r(Ayt,"model_type"),Ayt.forEach(t),MEr=r(BL,` property of the config object (either
passed as an argument or loaded from `),fMe=n(BL,"CODE",{});var Lyt=s(fMe);EEr=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),CEr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=n(BL,"CODE",{});var yyt=s(gMe);wEr=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),AEr=r(BL,":"),BL.forEach(t),LEr=i(xl),Me=n(xl,"UL",{});var Ce=s(Me);bC=n(Ce,"LI",{});var LNe=s(bC);hMe=n(LNe,"STRONG",{});var xyt=s(hMe);yEr=r(xyt,"bert"),xyt.forEach(t),xEr=r(LNe," \u2014 "),qU=n(LNe,"A",{href:!0});var $yt=s(qU);$Er=r($yt,"TFBertLMHeadModel"),$yt.forEach(t),kEr=r(LNe," (BERT model)"),LNe.forEach(t),SEr=i(Ce),vC=n(Ce,"LI",{});var yNe=s(vC);uMe=n(yNe,"STRONG",{});var kyt=s(uMe);REr=r(kyt,"camembert"),kyt.forEach(t),PEr=r(yNe," \u2014 "),jU=n(yNe,"A",{href:!0});var Syt=s(jU);BEr=r(Syt,"TFCamembertForCausalLM"),Syt.forEach(t),IEr=r(yNe," (CamemBERT model)"),yNe.forEach(t),NEr=i(Ce),FC=n(Ce,"LI",{});var xNe=s(FC);pMe=n(xNe,"STRONG",{});var Ryt=s(pMe);qEr=r(Ryt,"ctrl"),Ryt.forEach(t),jEr=r(xNe," \u2014 "),DU=n(xNe,"A",{href:!0});var Pyt=s(DU);DEr=r(Pyt,"TFCTRLLMHeadModel"),Pyt.forEach(t),GEr=r(xNe," (CTRL model)"),xNe.forEach(t),OEr=i(Ce),TC=n(Ce,"LI",{});var $Ne=s(TC);_Me=n($Ne,"STRONG",{});var Byt=s(_Me);VEr=r(Byt,"gpt2"),Byt.forEach(t),XEr=r($Ne," \u2014 "),GU=n($Ne,"A",{href:!0});var Iyt=s(GU);zEr=r(Iyt,"TFGPT2LMHeadModel"),Iyt.forEach(t),QEr=r($Ne," (OpenAI GPT-2 model)"),$Ne.forEach(t),WEr=i(Ce),MC=n(Ce,"LI",{});var kNe=s(MC);bMe=n(kNe,"STRONG",{});var Nyt=s(bMe);HEr=r(Nyt,"gptj"),Nyt.forEach(t),UEr=r(kNe," \u2014 "),OU=n(kNe,"A",{href:!0});var qyt=s(OU);JEr=r(qyt,"TFGPTJForCausalLM"),qyt.forEach(t),YEr=r(kNe," (GPT-J model)"),kNe.forEach(t),KEr=i(Ce),EC=n(Ce,"LI",{});var SNe=s(EC);vMe=n(SNe,"STRONG",{});var jyt=s(vMe);ZEr=r(jyt,"openai-gpt"),jyt.forEach(t),e4r=r(SNe," \u2014 "),VU=n(SNe,"A",{href:!0});var Dyt=s(VU);o4r=r(Dyt,"TFOpenAIGPTLMHeadModel"),Dyt.forEach(t),r4r=r(SNe," (OpenAI GPT model)"),SNe.forEach(t),t4r=i(Ce),CC=n(Ce,"LI",{});var RNe=s(CC);FMe=n(RNe,"STRONG",{});var Gyt=s(FMe);a4r=r(Gyt,"opt"),Gyt.forEach(t),n4r=r(RNe," \u2014 "),XU=n(RNe,"A",{href:!0});var Oyt=s(XU);s4r=r(Oyt,"TFOPTForCausalLM"),Oyt.forEach(t),l4r=r(RNe," (OPT model)"),RNe.forEach(t),i4r=i(Ce),wC=n(Ce,"LI",{});var PNe=s(wC);TMe=n(PNe,"STRONG",{});var Vyt=s(TMe);d4r=r(Vyt,"rembert"),Vyt.forEach(t),c4r=r(PNe," \u2014 "),zU=n(PNe,"A",{href:!0});var Xyt=s(zU);m4r=r(Xyt,"TFRemBertForCausalLM"),Xyt.forEach(t),f4r=r(PNe," (RemBERT model)"),PNe.forEach(t),g4r=i(Ce),AC=n(Ce,"LI",{});var BNe=s(AC);MMe=n(BNe,"STRONG",{});var zyt=s(MMe);h4r=r(zyt,"roberta"),zyt.forEach(t),u4r=r(BNe," \u2014 "),QU=n(BNe,"A",{href:!0});var Qyt=s(QU);p4r=r(Qyt,"TFRobertaForCausalLM"),Qyt.forEach(t),_4r=r(BNe," (RoBERTa model)"),BNe.forEach(t),b4r=i(Ce),LC=n(Ce,"LI",{});var INe=s(LC);EMe=n(INe,"STRONG",{});var Wyt=s(EMe);v4r=r(Wyt,"roformer"),Wyt.forEach(t),F4r=r(INe," \u2014 "),WU=n(INe,"A",{href:!0});var Hyt=s(WU);T4r=r(Hyt,"TFRoFormerForCausalLM"),Hyt.forEach(t),M4r=r(INe," (RoFormer model)"),INe.forEach(t),E4r=i(Ce),yC=n(Ce,"LI",{});var NNe=s(yC);CMe=n(NNe,"STRONG",{});var Uyt=s(CMe);C4r=r(Uyt,"transfo-xl"),Uyt.forEach(t),w4r=r(NNe," \u2014 "),HU=n(NNe,"A",{href:!0});var Jyt=s(HU);A4r=r(Jyt,"TFTransfoXLLMHeadModel"),Jyt.forEach(t),L4r=r(NNe," (Transformer-XL model)"),NNe.forEach(t),y4r=i(Ce),xC=n(Ce,"LI",{});var qNe=s(xC);wMe=n(qNe,"STRONG",{});var Yyt=s(wMe);x4r=r(Yyt,"xlm"),Yyt.forEach(t),$4r=r(qNe," \u2014 "),UU=n(qNe,"A",{href:!0});var Kyt=s(UU);k4r=r(Kyt,"TFXLMWithLMHeadModel"),Kyt.forEach(t),S4r=r(qNe," (XLM model)"),qNe.forEach(t),R4r=i(Ce),$C=n(Ce,"LI",{});var jNe=s($C);AMe=n(jNe,"STRONG",{});var Zyt=s(AMe);P4r=r(Zyt,"xlnet"),Zyt.forEach(t),B4r=r(jNe," \u2014 "),JU=n(jNe,"A",{href:!0});var e8t=s(JU);I4r=r(e8t,"TFXLNetLMHeadModel"),e8t.forEach(t),N4r=r(jNe," (XLNet model)"),jNe.forEach(t),Ce.forEach(t),q4r=i(xl),T(kC.$$.fragment,xl),xl.forEach(t),yl.forEach(t),uVe=i(m),cc=n(m,"H2",{class:!0});var Eze=s(cc);SC=n(Eze,"A",{id:!0,class:!0,href:!0});var o8t=s(SC);LMe=n(o8t,"SPAN",{});var r8t=s(LMe);T(P9.$$.fragment,r8t),r8t.forEach(t),o8t.forEach(t),j4r=i(Eze),yMe=n(Eze,"SPAN",{});var t8t=s(yMe);D4r=r(t8t,"TFAutoModelForImageClassification"),t8t.forEach(t),Eze.forEach(t),pVe=i(m),tr=n(m,"DIV",{class:!0});var $l=s(tr);T(B9.$$.fragment,$l),G4r=i($l),mc=n($l,"P",{});var $re=s(mc);O4r=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YU=n($re,"A",{href:!0});var a8t=s(YU);V4r=r(a8t,"from_pretrained()"),a8t.forEach(t),X4r=r($re," class method or the "),KU=n($re,"A",{href:!0});var n8t=s(KU);z4r=r(n8t,"from_config()"),n8t.forEach(t),Q4r=r($re,` class
method.`),$re.forEach(t),W4r=i($l),I9=n($l,"P",{});var Cze=s(I9);H4r=r(Cze,"This class cannot be instantiated directly using "),xMe=n(Cze,"CODE",{});var s8t=s(xMe);U4r=r(s8t,"__init__()"),s8t.forEach(t),J4r=r(Cze," (throws an error)."),Cze.forEach(t),Y4r=i($l),Rt=n($l,"DIV",{class:!0});var IL=s(Rt);T(N9.$$.fragment,IL),K4r=i(IL),$Me=n(IL,"P",{});var l8t=s($Me);Z4r=r(l8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),l8t.forEach(t),eCr=i(IL),fc=n(IL,"P",{});var kre=s(fc);oCr=r(kre,`Note:
Loading a model from its configuration file does `),kMe=n(kre,"STRONG",{});var i8t=s(kMe);rCr=r(i8t,"not"),i8t.forEach(t),tCr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(kre,"A",{href:!0});var d8t=s(ZU);aCr=r(d8t,"from_pretrained()"),d8t.forEach(t),nCr=r(kre," to load the model weights."),kre.forEach(t),sCr=i(IL),T(RC.$$.fragment,IL),IL.forEach(t),lCr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(q9.$$.fragment,kl),iCr=i(kl),SMe=n(kl,"P",{});var c8t=s(SMe);dCr=r(c8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),c8t.forEach(t),cCr=i(kl),ln=n(kl,"P",{});var NL=s(ln);mCr=r(NL,"The model class to instantiate is selected based on the "),RMe=n(NL,"CODE",{});var m8t=s(RMe);fCr=r(m8t,"model_type"),m8t.forEach(t),gCr=r(NL,` property of the config object (either
passed as an argument or loaded from `),PMe=n(NL,"CODE",{});var f8t=s(PMe);hCr=r(f8t,"pretrained_model_name_or_path"),f8t.forEach(t),uCr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(NL,"CODE",{});var g8t=s(BMe);pCr=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),_Cr=r(NL,":"),NL.forEach(t),bCr=i(kl),dn=n(kl,"UL",{});var qL=s(dn);PC=n(qL,"LI",{});var DNe=s(PC);IMe=n(DNe,"STRONG",{});var h8t=s(IMe);vCr=r(h8t,"convnext"),h8t.forEach(t),FCr=r(DNe," \u2014 "),eJ=n(DNe,"A",{href:!0});var u8t=s(eJ);TCr=r(u8t,"TFConvNextForImageClassification"),u8t.forEach(t),MCr=r(DNe," (ConvNeXT model)"),DNe.forEach(t),ECr=i(qL),BC=n(qL,"LI",{});var GNe=s(BC);NMe=n(GNe,"STRONG",{});var p8t=s(NMe);CCr=r(p8t,"data2vec-vision"),p8t.forEach(t),wCr=r(GNe," \u2014 "),oJ=n(GNe,"A",{href:!0});var _8t=s(oJ);ACr=r(_8t,"TFData2VecVisionForImageClassification"),_8t.forEach(t),LCr=r(GNe," (Data2VecVision model)"),GNe.forEach(t),yCr=i(qL),IC=n(qL,"LI",{});var ONe=s(IC);qMe=n(ONe,"STRONG",{});var b8t=s(qMe);xCr=r(b8t,"swin"),b8t.forEach(t),$Cr=r(ONe," \u2014 "),rJ=n(ONe,"A",{href:!0});var v8t=s(rJ);kCr=r(v8t,"TFSwinForImageClassification"),v8t.forEach(t),SCr=r(ONe," (Swin Transformer model)"),ONe.forEach(t),RCr=i(qL),NC=n(qL,"LI",{});var VNe=s(NC);jMe=n(VNe,"STRONG",{});var F8t=s(jMe);PCr=r(F8t,"vit"),F8t.forEach(t),BCr=r(VNe," \u2014 "),tJ=n(VNe,"A",{href:!0});var T8t=s(tJ);ICr=r(T8t,"TFViTForImageClassification"),T8t.forEach(t),NCr=r(VNe," (ViT model)"),VNe.forEach(t),qL.forEach(t),qCr=i(kl),T(qC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),_Ve=i(m),gc=n(m,"H2",{class:!0});var wze=s(gc);jC=n(wze,"A",{id:!0,class:!0,href:!0});var M8t=s(jC);DMe=n(M8t,"SPAN",{});var E8t=s(DMe);T(j9.$$.fragment,E8t),E8t.forEach(t),M8t.forEach(t),jCr=i(wze),GMe=n(wze,"SPAN",{});var C8t=s(GMe);DCr=r(C8t,"TFAutoModelForMaskedLM"),C8t.forEach(t),wze.forEach(t),bVe=i(m),ar=n(m,"DIV",{class:!0});var Sl=s(ar);T(D9.$$.fragment,Sl),GCr=i(Sl),hc=n(Sl,"P",{});var Sre=s(hc);OCr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aJ=n(Sre,"A",{href:!0});var w8t=s(aJ);VCr=r(w8t,"from_pretrained()"),w8t.forEach(t),XCr=r(Sre," class method or the "),nJ=n(Sre,"A",{href:!0});var A8t=s(nJ);zCr=r(A8t,"from_config()"),A8t.forEach(t),QCr=r(Sre,` class
method.`),Sre.forEach(t),WCr=i(Sl),G9=n(Sl,"P",{});var Aze=s(G9);HCr=r(Aze,"This class cannot be instantiated directly using "),OMe=n(Aze,"CODE",{});var L8t=s(OMe);UCr=r(L8t,"__init__()"),L8t.forEach(t),JCr=r(Aze," (throws an error)."),Aze.forEach(t),YCr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var jL=s(Pt);T(O9.$$.fragment,jL),KCr=i(jL),VMe=n(jL,"P",{});var y8t=s(VMe);ZCr=r(y8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y8t.forEach(t),e5r=i(jL),uc=n(jL,"P",{});var Rre=s(uc);o5r=r(Rre,`Note:
Loading a model from its configuration file does `),XMe=n(Rre,"STRONG",{});var x8t=s(XMe);r5r=r(x8t,"not"),x8t.forEach(t),t5r=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(Rre,"A",{href:!0});var $8t=s(sJ);a5r=r($8t,"from_pretrained()"),$8t.forEach(t),n5r=r(Rre," to load the model weights."),Rre.forEach(t),s5r=i(jL),T(DC.$$.fragment,jL),jL.forEach(t),l5r=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(V9.$$.fragment,Rl),i5r=i(Rl),zMe=n(Rl,"P",{});var k8t=s(zMe);d5r=r(k8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k8t.forEach(t),c5r=i(Rl),cn=n(Rl,"P",{});var DL=s(cn);m5r=r(DL,"The model class to instantiate is selected based on the "),QMe=n(DL,"CODE",{});var S8t=s(QMe);f5r=r(S8t,"model_type"),S8t.forEach(t),g5r=r(DL,` property of the config object (either
passed as an argument or loaded from `),WMe=n(DL,"CODE",{});var R8t=s(WMe);h5r=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),u5r=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=n(DL,"CODE",{});var P8t=s(HMe);p5r=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),_5r=r(DL,":"),DL.forEach(t),b5r=i(Rl),ie=n(Rl,"UL",{});var me=s(ie);GC=n(me,"LI",{});var XNe=s(GC);UMe=n(XNe,"STRONG",{});var B8t=s(UMe);v5r=r(B8t,"albert"),B8t.forEach(t),F5r=r(XNe," \u2014 "),lJ=n(XNe,"A",{href:!0});var I8t=s(lJ);T5r=r(I8t,"TFAlbertForMaskedLM"),I8t.forEach(t),M5r=r(XNe," (ALBERT model)"),XNe.forEach(t),E5r=i(me),OC=n(me,"LI",{});var zNe=s(OC);JMe=n(zNe,"STRONG",{});var N8t=s(JMe);C5r=r(N8t,"bert"),N8t.forEach(t),w5r=r(zNe," \u2014 "),iJ=n(zNe,"A",{href:!0});var q8t=s(iJ);A5r=r(q8t,"TFBertForMaskedLM"),q8t.forEach(t),L5r=r(zNe," (BERT model)"),zNe.forEach(t),y5r=i(me),VC=n(me,"LI",{});var QNe=s(VC);YMe=n(QNe,"STRONG",{});var j8t=s(YMe);x5r=r(j8t,"camembert"),j8t.forEach(t),$5r=r(QNe," \u2014 "),dJ=n(QNe,"A",{href:!0});var D8t=s(dJ);k5r=r(D8t,"TFCamembertForMaskedLM"),D8t.forEach(t),S5r=r(QNe," (CamemBERT model)"),QNe.forEach(t),R5r=i(me),XC=n(me,"LI",{});var WNe=s(XC);KMe=n(WNe,"STRONG",{});var G8t=s(KMe);P5r=r(G8t,"convbert"),G8t.forEach(t),B5r=r(WNe," \u2014 "),cJ=n(WNe,"A",{href:!0});var O8t=s(cJ);I5r=r(O8t,"TFConvBertForMaskedLM"),O8t.forEach(t),N5r=r(WNe," (ConvBERT model)"),WNe.forEach(t),q5r=i(me),zC=n(me,"LI",{});var HNe=s(zC);ZMe=n(HNe,"STRONG",{});var V8t=s(ZMe);j5r=r(V8t,"deberta"),V8t.forEach(t),D5r=r(HNe," \u2014 "),mJ=n(HNe,"A",{href:!0});var X8t=s(mJ);G5r=r(X8t,"TFDebertaForMaskedLM"),X8t.forEach(t),O5r=r(HNe," (DeBERTa model)"),HNe.forEach(t),V5r=i(me),QC=n(me,"LI",{});var UNe=s(QC);eEe=n(UNe,"STRONG",{});var z8t=s(eEe);X5r=r(z8t,"deberta-v2"),z8t.forEach(t),z5r=r(UNe," \u2014 "),fJ=n(UNe,"A",{href:!0});var Q8t=s(fJ);Q5r=r(Q8t,"TFDebertaV2ForMaskedLM"),Q8t.forEach(t),W5r=r(UNe," (DeBERTa-v2 model)"),UNe.forEach(t),H5r=i(me),WC=n(me,"LI",{});var JNe=s(WC);oEe=n(JNe,"STRONG",{});var W8t=s(oEe);U5r=r(W8t,"distilbert"),W8t.forEach(t),J5r=r(JNe," \u2014 "),gJ=n(JNe,"A",{href:!0});var H8t=s(gJ);Y5r=r(H8t,"TFDistilBertForMaskedLM"),H8t.forEach(t),K5r=r(JNe," (DistilBERT model)"),JNe.forEach(t),Z5r=i(me),HC=n(me,"LI",{});var YNe=s(HC);rEe=n(YNe,"STRONG",{});var U8t=s(rEe);e3r=r(U8t,"electra"),U8t.forEach(t),o3r=r(YNe," \u2014 "),hJ=n(YNe,"A",{href:!0});var J8t=s(hJ);r3r=r(J8t,"TFElectraForMaskedLM"),J8t.forEach(t),t3r=r(YNe," (ELECTRA model)"),YNe.forEach(t),a3r=i(me),UC=n(me,"LI",{});var KNe=s(UC);tEe=n(KNe,"STRONG",{});var Y8t=s(tEe);n3r=r(Y8t,"flaubert"),Y8t.forEach(t),s3r=r(KNe," \u2014 "),uJ=n(KNe,"A",{href:!0});var K8t=s(uJ);l3r=r(K8t,"TFFlaubertWithLMHeadModel"),K8t.forEach(t),i3r=r(KNe," (FlauBERT model)"),KNe.forEach(t),d3r=i(me),JC=n(me,"LI",{});var ZNe=s(JC);aEe=n(ZNe,"STRONG",{});var Z8t=s(aEe);c3r=r(Z8t,"funnel"),Z8t.forEach(t),m3r=r(ZNe," \u2014 "),pJ=n(ZNe,"A",{href:!0});var e9t=s(pJ);f3r=r(e9t,"TFFunnelForMaskedLM"),e9t.forEach(t),g3r=r(ZNe," (Funnel Transformer model)"),ZNe.forEach(t),h3r=i(me),YC=n(me,"LI",{});var eqe=s(YC);nEe=n(eqe,"STRONG",{});var o9t=s(nEe);u3r=r(o9t,"layoutlm"),o9t.forEach(t),p3r=r(eqe," \u2014 "),_J=n(eqe,"A",{href:!0});var r9t=s(_J);_3r=r(r9t,"TFLayoutLMForMaskedLM"),r9t.forEach(t),b3r=r(eqe," (LayoutLM model)"),eqe.forEach(t),v3r=i(me),KC=n(me,"LI",{});var oqe=s(KC);sEe=n(oqe,"STRONG",{});var t9t=s(sEe);F3r=r(t9t,"longformer"),t9t.forEach(t),T3r=r(oqe," \u2014 "),bJ=n(oqe,"A",{href:!0});var a9t=s(bJ);M3r=r(a9t,"TFLongformerForMaskedLM"),a9t.forEach(t),E3r=r(oqe," (Longformer model)"),oqe.forEach(t),C3r=i(me),ZC=n(me,"LI",{});var rqe=s(ZC);lEe=n(rqe,"STRONG",{});var n9t=s(lEe);w3r=r(n9t,"mobilebert"),n9t.forEach(t),A3r=r(rqe," \u2014 "),vJ=n(rqe,"A",{href:!0});var s9t=s(vJ);L3r=r(s9t,"TFMobileBertForMaskedLM"),s9t.forEach(t),y3r=r(rqe," (MobileBERT model)"),rqe.forEach(t),x3r=i(me),e5=n(me,"LI",{});var tqe=s(e5);iEe=n(tqe,"STRONG",{});var l9t=s(iEe);$3r=r(l9t,"mpnet"),l9t.forEach(t),k3r=r(tqe," \u2014 "),FJ=n(tqe,"A",{href:!0});var i9t=s(FJ);S3r=r(i9t,"TFMPNetForMaskedLM"),i9t.forEach(t),R3r=r(tqe," (MPNet model)"),tqe.forEach(t),P3r=i(me),o5=n(me,"LI",{});var aqe=s(o5);dEe=n(aqe,"STRONG",{});var d9t=s(dEe);B3r=r(d9t,"rembert"),d9t.forEach(t),I3r=r(aqe," \u2014 "),TJ=n(aqe,"A",{href:!0});var c9t=s(TJ);N3r=r(c9t,"TFRemBertForMaskedLM"),c9t.forEach(t),q3r=r(aqe," (RemBERT model)"),aqe.forEach(t),j3r=i(me),r5=n(me,"LI",{});var nqe=s(r5);cEe=n(nqe,"STRONG",{});var m9t=s(cEe);D3r=r(m9t,"roberta"),m9t.forEach(t),G3r=r(nqe," \u2014 "),MJ=n(nqe,"A",{href:!0});var f9t=s(MJ);O3r=r(f9t,"TFRobertaForMaskedLM"),f9t.forEach(t),V3r=r(nqe," (RoBERTa model)"),nqe.forEach(t),X3r=i(me),t5=n(me,"LI",{});var sqe=s(t5);mEe=n(sqe,"STRONG",{});var g9t=s(mEe);z3r=r(g9t,"roformer"),g9t.forEach(t),Q3r=r(sqe," \u2014 "),EJ=n(sqe,"A",{href:!0});var h9t=s(EJ);W3r=r(h9t,"TFRoFormerForMaskedLM"),h9t.forEach(t),H3r=r(sqe," (RoFormer model)"),sqe.forEach(t),U3r=i(me),a5=n(me,"LI",{});var lqe=s(a5);fEe=n(lqe,"STRONG",{});var u9t=s(fEe);J3r=r(u9t,"tapas"),u9t.forEach(t),Y3r=r(lqe," \u2014 "),CJ=n(lqe,"A",{href:!0});var p9t=s(CJ);K3r=r(p9t,"TFTapasForMaskedLM"),p9t.forEach(t),Z3r=r(lqe," (TAPAS model)"),lqe.forEach(t),e0r=i(me),n5=n(me,"LI",{});var iqe=s(n5);gEe=n(iqe,"STRONG",{});var _9t=s(gEe);o0r=r(_9t,"xlm"),_9t.forEach(t),r0r=r(iqe," \u2014 "),wJ=n(iqe,"A",{href:!0});var b9t=s(wJ);t0r=r(b9t,"TFXLMWithLMHeadModel"),b9t.forEach(t),a0r=r(iqe," (XLM model)"),iqe.forEach(t),n0r=i(me),s5=n(me,"LI",{});var dqe=s(s5);hEe=n(dqe,"STRONG",{});var v9t=s(hEe);s0r=r(v9t,"xlm-roberta"),v9t.forEach(t),l0r=r(dqe," \u2014 "),AJ=n(dqe,"A",{href:!0});var F9t=s(AJ);i0r=r(F9t,"TFXLMRobertaForMaskedLM"),F9t.forEach(t),d0r=r(dqe," (XLM-RoBERTa model)"),dqe.forEach(t),me.forEach(t),c0r=i(Rl),T(l5.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),vVe=i(m),pc=n(m,"H2",{class:!0});var Lze=s(pc);i5=n(Lze,"A",{id:!0,class:!0,href:!0});var T9t=s(i5);uEe=n(T9t,"SPAN",{});var M9t=s(uEe);T(X9.$$.fragment,M9t),M9t.forEach(t),T9t.forEach(t),m0r=i(Lze),pEe=n(Lze,"SPAN",{});var E9t=s(pEe);f0r=r(E9t,"TFAutoModelForSeq2SeqLM"),E9t.forEach(t),Lze.forEach(t),FVe=i(m),nr=n(m,"DIV",{class:!0});var Pl=s(nr);T(z9.$$.fragment,Pl),g0r=i(Pl),_c=n(Pl,"P",{});var Pre=s(_c);h0r=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LJ=n(Pre,"A",{href:!0});var C9t=s(LJ);u0r=r(C9t,"from_pretrained()"),C9t.forEach(t),p0r=r(Pre," class method or the "),yJ=n(Pre,"A",{href:!0});var w9t=s(yJ);_0r=r(w9t,"from_config()"),w9t.forEach(t),b0r=r(Pre,` class
method.`),Pre.forEach(t),v0r=i(Pl),Q9=n(Pl,"P",{});var yze=s(Q9);F0r=r(yze,"This class cannot be instantiated directly using "),_Ee=n(yze,"CODE",{});var A9t=s(_Ee);T0r=r(A9t,"__init__()"),A9t.forEach(t),M0r=r(yze," (throws an error)."),yze.forEach(t),E0r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var GL=s(Bt);T(W9.$$.fragment,GL),C0r=i(GL),bEe=n(GL,"P",{});var L9t=s(bEe);w0r=r(L9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),L9t.forEach(t),A0r=i(GL),bc=n(GL,"P",{});var Bre=s(bc);L0r=r(Bre,`Note:
Loading a model from its configuration file does `),vEe=n(Bre,"STRONG",{});var y9t=s(vEe);y0r=r(y9t,"not"),y9t.forEach(t),x0r=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(Bre,"A",{href:!0});var x9t=s(xJ);$0r=r(x9t,"from_pretrained()"),x9t.forEach(t),k0r=r(Bre," to load the model weights."),Bre.forEach(t),S0r=i(GL),T(d5.$$.fragment,GL),GL.forEach(t),R0r=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(H9.$$.fragment,Bl),P0r=i(Bl),FEe=n(Bl,"P",{});var $9t=s(FEe);B0r=r($9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$9t.forEach(t),I0r=i(Bl),mn=n(Bl,"P",{});var OL=s(mn);N0r=r(OL,"The model class to instantiate is selected based on the "),TEe=n(OL,"CODE",{});var k9t=s(TEe);q0r=r(k9t,"model_type"),k9t.forEach(t),j0r=r(OL,` property of the config object (either
passed as an argument or loaded from `),MEe=n(OL,"CODE",{});var S9t=s(MEe);D0r=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),G0r=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(OL,"CODE",{});var R9t=s(EEe);O0r=r(R9t,"pretrained_model_name_or_path"),R9t.forEach(t),V0r=r(OL,":"),OL.forEach(t),X0r=i(Bl),ye=n(Bl,"UL",{});var Ie=s(ye);c5=n(Ie,"LI",{});var cqe=s(c5);CEe=n(cqe,"STRONG",{});var P9t=s(CEe);z0r=r(P9t,"bart"),P9t.forEach(t),Q0r=r(cqe," \u2014 "),$J=n(cqe,"A",{href:!0});var B9t=s($J);W0r=r(B9t,"TFBartForConditionalGeneration"),B9t.forEach(t),H0r=r(cqe," (BART model)"),cqe.forEach(t),U0r=i(Ie),m5=n(Ie,"LI",{});var mqe=s(m5);wEe=n(mqe,"STRONG",{});var I9t=s(wEe);J0r=r(I9t,"blenderbot"),I9t.forEach(t),Y0r=r(mqe," \u2014 "),kJ=n(mqe,"A",{href:!0});var N9t=s(kJ);K0r=r(N9t,"TFBlenderbotForConditionalGeneration"),N9t.forEach(t),Z0r=r(mqe," (Blenderbot model)"),mqe.forEach(t),ewr=i(Ie),f5=n(Ie,"LI",{});var fqe=s(f5);AEe=n(fqe,"STRONG",{});var q9t=s(AEe);owr=r(q9t,"blenderbot-small"),q9t.forEach(t),rwr=r(fqe," \u2014 "),SJ=n(fqe,"A",{href:!0});var j9t=s(SJ);twr=r(j9t,"TFBlenderbotSmallForConditionalGeneration"),j9t.forEach(t),awr=r(fqe," (BlenderbotSmall model)"),fqe.forEach(t),nwr=i(Ie),g5=n(Ie,"LI",{});var gqe=s(g5);LEe=n(gqe,"STRONG",{});var D9t=s(LEe);swr=r(D9t,"encoder-decoder"),D9t.forEach(t),lwr=r(gqe," \u2014 "),RJ=n(gqe,"A",{href:!0});var G9t=s(RJ);iwr=r(G9t,"TFEncoderDecoderModel"),G9t.forEach(t),dwr=r(gqe," (Encoder decoder model)"),gqe.forEach(t),cwr=i(Ie),h5=n(Ie,"LI",{});var hqe=s(h5);yEe=n(hqe,"STRONG",{});var O9t=s(yEe);mwr=r(O9t,"led"),O9t.forEach(t),fwr=r(hqe," \u2014 "),PJ=n(hqe,"A",{href:!0});var V9t=s(PJ);gwr=r(V9t,"TFLEDForConditionalGeneration"),V9t.forEach(t),hwr=r(hqe," (LED model)"),hqe.forEach(t),uwr=i(Ie),u5=n(Ie,"LI",{});var uqe=s(u5);xEe=n(uqe,"STRONG",{});var X9t=s(xEe);pwr=r(X9t,"marian"),X9t.forEach(t),_wr=r(uqe," \u2014 "),BJ=n(uqe,"A",{href:!0});var z9t=s(BJ);bwr=r(z9t,"TFMarianMTModel"),z9t.forEach(t),vwr=r(uqe," (Marian model)"),uqe.forEach(t),Fwr=i(Ie),p5=n(Ie,"LI",{});var pqe=s(p5);$Ee=n(pqe,"STRONG",{});var Q9t=s($Ee);Twr=r(Q9t,"mbart"),Q9t.forEach(t),Mwr=r(pqe," \u2014 "),IJ=n(pqe,"A",{href:!0});var W9t=s(IJ);Ewr=r(W9t,"TFMBartForConditionalGeneration"),W9t.forEach(t),Cwr=r(pqe," (mBART model)"),pqe.forEach(t),wwr=i(Ie),_5=n(Ie,"LI",{});var _qe=s(_5);kEe=n(_qe,"STRONG",{});var H9t=s(kEe);Awr=r(H9t,"mt5"),H9t.forEach(t),Lwr=r(_qe," \u2014 "),NJ=n(_qe,"A",{href:!0});var U9t=s(NJ);ywr=r(U9t,"TFMT5ForConditionalGeneration"),U9t.forEach(t),xwr=r(_qe," (MT5 model)"),_qe.forEach(t),$wr=i(Ie),b5=n(Ie,"LI",{});var bqe=s(b5);SEe=n(bqe,"STRONG",{});var J9t=s(SEe);kwr=r(J9t,"pegasus"),J9t.forEach(t),Swr=r(bqe," \u2014 "),qJ=n(bqe,"A",{href:!0});var Y9t=s(qJ);Rwr=r(Y9t,"TFPegasusForConditionalGeneration"),Y9t.forEach(t),Pwr=r(bqe," (Pegasus model)"),bqe.forEach(t),Bwr=i(Ie),v5=n(Ie,"LI",{});var vqe=s(v5);REe=n(vqe,"STRONG",{});var K9t=s(REe);Iwr=r(K9t,"t5"),K9t.forEach(t),Nwr=r(vqe," \u2014 "),jJ=n(vqe,"A",{href:!0});var Z9t=s(jJ);qwr=r(Z9t,"TFT5ForConditionalGeneration"),Z9t.forEach(t),jwr=r(vqe," (T5 model)"),vqe.forEach(t),Ie.forEach(t),Dwr=i(Bl),T(F5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),TVe=i(m),vc=n(m,"H2",{class:!0});var xze=s(vc);T5=n(xze,"A",{id:!0,class:!0,href:!0});var ext=s(T5);PEe=n(ext,"SPAN",{});var oxt=s(PEe);T(U9.$$.fragment,oxt),oxt.forEach(t),ext.forEach(t),Gwr=i(xze),BEe=n(xze,"SPAN",{});var rxt=s(BEe);Owr=r(rxt,"TFAutoModelForSequenceClassification"),rxt.forEach(t),xze.forEach(t),MVe=i(m),sr=n(m,"DIV",{class:!0});var Il=s(sr);T(J9.$$.fragment,Il),Vwr=i(Il),Fc=n(Il,"P",{});var Ire=s(Fc);Xwr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DJ=n(Ire,"A",{href:!0});var txt=s(DJ);zwr=r(txt,"from_pretrained()"),txt.forEach(t),Qwr=r(Ire," class method or the "),GJ=n(Ire,"A",{href:!0});var axt=s(GJ);Wwr=r(axt,"from_config()"),axt.forEach(t),Hwr=r(Ire,` class
method.`),Ire.forEach(t),Uwr=i(Il),Y9=n(Il,"P",{});var $ze=s(Y9);Jwr=r($ze,"This class cannot be instantiated directly using "),IEe=n($ze,"CODE",{});var nxt=s(IEe);Ywr=r(nxt,"__init__()"),nxt.forEach(t),Kwr=r($ze," (throws an error)."),$ze.forEach(t),Zwr=i(Il),It=n(Il,"DIV",{class:!0});var VL=s(It);T(K9.$$.fragment,VL),eAr=i(VL),NEe=n(VL,"P",{});var sxt=s(NEe);oAr=r(sxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sxt.forEach(t),rAr=i(VL),Tc=n(VL,"P",{});var Nre=s(Tc);tAr=r(Nre,`Note:
Loading a model from its configuration file does `),qEe=n(Nre,"STRONG",{});var lxt=s(qEe);aAr=r(lxt,"not"),lxt.forEach(t),nAr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(Nre,"A",{href:!0});var ixt=s(OJ);sAr=r(ixt,"from_pretrained()"),ixt.forEach(t),lAr=r(Nre," to load the model weights."),Nre.forEach(t),iAr=i(VL),T(M5.$$.fragment,VL),VL.forEach(t),dAr=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(Z9.$$.fragment,Nl),cAr=i(Nl),jEe=n(Nl,"P",{});var dxt=s(jEe);mAr=r(dxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dxt.forEach(t),fAr=i(Nl),fn=n(Nl,"P",{});var XL=s(fn);gAr=r(XL,"The model class to instantiate is selected based on the "),DEe=n(XL,"CODE",{});var cxt=s(DEe);hAr=r(cxt,"model_type"),cxt.forEach(t),uAr=r(XL,` property of the config object (either
passed as an argument or loaded from `),GEe=n(XL,"CODE",{});var mxt=s(GEe);pAr=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),_Ar=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(XL,"CODE",{});var fxt=s(OEe);bAr=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),vAr=r(XL,":"),XL.forEach(t),FAr=i(Nl),te=n(Nl,"UL",{});var ne=s(te);E5=n(ne,"LI",{});var Fqe=s(E5);VEe=n(Fqe,"STRONG",{});var gxt=s(VEe);TAr=r(gxt,"albert"),gxt.forEach(t),MAr=r(Fqe," \u2014 "),VJ=n(Fqe,"A",{href:!0});var hxt=s(VJ);EAr=r(hxt,"TFAlbertForSequenceClassification"),hxt.forEach(t),CAr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),wAr=i(ne),C5=n(ne,"LI",{});var Tqe=s(C5);XEe=n(Tqe,"STRONG",{});var uxt=s(XEe);AAr=r(uxt,"bert"),uxt.forEach(t),LAr=r(Tqe," \u2014 "),XJ=n(Tqe,"A",{href:!0});var pxt=s(XJ);yAr=r(pxt,"TFBertForSequenceClassification"),pxt.forEach(t),xAr=r(Tqe," (BERT model)"),Tqe.forEach(t),$Ar=i(ne),w5=n(ne,"LI",{});var Mqe=s(w5);zEe=n(Mqe,"STRONG",{});var _xt=s(zEe);kAr=r(_xt,"camembert"),_xt.forEach(t),SAr=r(Mqe," \u2014 "),zJ=n(Mqe,"A",{href:!0});var bxt=s(zJ);RAr=r(bxt,"TFCamembertForSequenceClassification"),bxt.forEach(t),PAr=r(Mqe," (CamemBERT model)"),Mqe.forEach(t),BAr=i(ne),A5=n(ne,"LI",{});var Eqe=s(A5);QEe=n(Eqe,"STRONG",{});var vxt=s(QEe);IAr=r(vxt,"convbert"),vxt.forEach(t),NAr=r(Eqe," \u2014 "),QJ=n(Eqe,"A",{href:!0});var Fxt=s(QJ);qAr=r(Fxt,"TFConvBertForSequenceClassification"),Fxt.forEach(t),jAr=r(Eqe," (ConvBERT model)"),Eqe.forEach(t),DAr=i(ne),L5=n(ne,"LI",{});var Cqe=s(L5);WEe=n(Cqe,"STRONG",{});var Txt=s(WEe);GAr=r(Txt,"ctrl"),Txt.forEach(t),OAr=r(Cqe," \u2014 "),WJ=n(Cqe,"A",{href:!0});var Mxt=s(WJ);VAr=r(Mxt,"TFCTRLForSequenceClassification"),Mxt.forEach(t),XAr=r(Cqe," (CTRL model)"),Cqe.forEach(t),zAr=i(ne),y5=n(ne,"LI",{});var wqe=s(y5);HEe=n(wqe,"STRONG",{});var Ext=s(HEe);QAr=r(Ext,"deberta"),Ext.forEach(t),WAr=r(wqe," \u2014 "),HJ=n(wqe,"A",{href:!0});var Cxt=s(HJ);HAr=r(Cxt,"TFDebertaForSequenceClassification"),Cxt.forEach(t),UAr=r(wqe," (DeBERTa model)"),wqe.forEach(t),JAr=i(ne),x5=n(ne,"LI",{});var Aqe=s(x5);UEe=n(Aqe,"STRONG",{});var wxt=s(UEe);YAr=r(wxt,"deberta-v2"),wxt.forEach(t),KAr=r(Aqe," \u2014 "),UJ=n(Aqe,"A",{href:!0});var Axt=s(UJ);ZAr=r(Axt,"TFDebertaV2ForSequenceClassification"),Axt.forEach(t),e6r=r(Aqe," (DeBERTa-v2 model)"),Aqe.forEach(t),o6r=i(ne),$5=n(ne,"LI",{});var Lqe=s($5);JEe=n(Lqe,"STRONG",{});var Lxt=s(JEe);r6r=r(Lxt,"distilbert"),Lxt.forEach(t),t6r=r(Lqe," \u2014 "),JJ=n(Lqe,"A",{href:!0});var yxt=s(JJ);a6r=r(yxt,"TFDistilBertForSequenceClassification"),yxt.forEach(t),n6r=r(Lqe," (DistilBERT model)"),Lqe.forEach(t),s6r=i(ne),k5=n(ne,"LI",{});var yqe=s(k5);YEe=n(yqe,"STRONG",{});var xxt=s(YEe);l6r=r(xxt,"electra"),xxt.forEach(t),i6r=r(yqe," \u2014 "),YJ=n(yqe,"A",{href:!0});var $xt=s(YJ);d6r=r($xt,"TFElectraForSequenceClassification"),$xt.forEach(t),c6r=r(yqe," (ELECTRA model)"),yqe.forEach(t),m6r=i(ne),S5=n(ne,"LI",{});var xqe=s(S5);KEe=n(xqe,"STRONG",{});var kxt=s(KEe);f6r=r(kxt,"flaubert"),kxt.forEach(t),g6r=r(xqe," \u2014 "),KJ=n(xqe,"A",{href:!0});var Sxt=s(KJ);h6r=r(Sxt,"TFFlaubertForSequenceClassification"),Sxt.forEach(t),u6r=r(xqe," (FlauBERT model)"),xqe.forEach(t),p6r=i(ne),R5=n(ne,"LI",{});var $qe=s(R5);ZEe=n($qe,"STRONG",{});var Rxt=s(ZEe);_6r=r(Rxt,"funnel"),Rxt.forEach(t),b6r=r($qe," \u2014 "),ZJ=n($qe,"A",{href:!0});var Pxt=s(ZJ);v6r=r(Pxt,"TFFunnelForSequenceClassification"),Pxt.forEach(t),F6r=r($qe," (Funnel Transformer model)"),$qe.forEach(t),T6r=i(ne),P5=n(ne,"LI",{});var kqe=s(P5);e4e=n(kqe,"STRONG",{});var Bxt=s(e4e);M6r=r(Bxt,"gpt2"),Bxt.forEach(t),E6r=r(kqe," \u2014 "),eY=n(kqe,"A",{href:!0});var Ixt=s(eY);C6r=r(Ixt,"TFGPT2ForSequenceClassification"),Ixt.forEach(t),w6r=r(kqe," (OpenAI GPT-2 model)"),kqe.forEach(t),A6r=i(ne),B5=n(ne,"LI",{});var Sqe=s(B5);o4e=n(Sqe,"STRONG",{});var Nxt=s(o4e);L6r=r(Nxt,"gptj"),Nxt.forEach(t),y6r=r(Sqe," \u2014 "),oY=n(Sqe,"A",{href:!0});var qxt=s(oY);x6r=r(qxt,"TFGPTJForSequenceClassification"),qxt.forEach(t),$6r=r(Sqe," (GPT-J model)"),Sqe.forEach(t),k6r=i(ne),I5=n(ne,"LI",{});var Rqe=s(I5);r4e=n(Rqe,"STRONG",{});var jxt=s(r4e);S6r=r(jxt,"layoutlm"),jxt.forEach(t),R6r=r(Rqe," \u2014 "),rY=n(Rqe,"A",{href:!0});var Dxt=s(rY);P6r=r(Dxt,"TFLayoutLMForSequenceClassification"),Dxt.forEach(t),B6r=r(Rqe," (LayoutLM model)"),Rqe.forEach(t),I6r=i(ne),N5=n(ne,"LI",{});var Pqe=s(N5);t4e=n(Pqe,"STRONG",{});var Gxt=s(t4e);N6r=r(Gxt,"longformer"),Gxt.forEach(t),q6r=r(Pqe," \u2014 "),tY=n(Pqe,"A",{href:!0});var Oxt=s(tY);j6r=r(Oxt,"TFLongformerForSequenceClassification"),Oxt.forEach(t),D6r=r(Pqe," (Longformer model)"),Pqe.forEach(t),G6r=i(ne),q5=n(ne,"LI",{});var Bqe=s(q5);a4e=n(Bqe,"STRONG",{});var Vxt=s(a4e);O6r=r(Vxt,"mobilebert"),Vxt.forEach(t),V6r=r(Bqe," \u2014 "),aY=n(Bqe,"A",{href:!0});var Xxt=s(aY);X6r=r(Xxt,"TFMobileBertForSequenceClassification"),Xxt.forEach(t),z6r=r(Bqe," (MobileBERT model)"),Bqe.forEach(t),Q6r=i(ne),j5=n(ne,"LI",{});var Iqe=s(j5);n4e=n(Iqe,"STRONG",{});var zxt=s(n4e);W6r=r(zxt,"mpnet"),zxt.forEach(t),H6r=r(Iqe," \u2014 "),nY=n(Iqe,"A",{href:!0});var Qxt=s(nY);U6r=r(Qxt,"TFMPNetForSequenceClassification"),Qxt.forEach(t),J6r=r(Iqe," (MPNet model)"),Iqe.forEach(t),Y6r=i(ne),D5=n(ne,"LI",{});var Nqe=s(D5);s4e=n(Nqe,"STRONG",{});var Wxt=s(s4e);K6r=r(Wxt,"openai-gpt"),Wxt.forEach(t),Z6r=r(Nqe," \u2014 "),sY=n(Nqe,"A",{href:!0});var Hxt=s(sY);eLr=r(Hxt,"TFOpenAIGPTForSequenceClassification"),Hxt.forEach(t),oLr=r(Nqe," (OpenAI GPT model)"),Nqe.forEach(t),rLr=i(ne),G5=n(ne,"LI",{});var qqe=s(G5);l4e=n(qqe,"STRONG",{});var Uxt=s(l4e);tLr=r(Uxt,"rembert"),Uxt.forEach(t),aLr=r(qqe," \u2014 "),lY=n(qqe,"A",{href:!0});var Jxt=s(lY);nLr=r(Jxt,"TFRemBertForSequenceClassification"),Jxt.forEach(t),sLr=r(qqe," (RemBERT model)"),qqe.forEach(t),lLr=i(ne),O5=n(ne,"LI",{});var jqe=s(O5);i4e=n(jqe,"STRONG",{});var Yxt=s(i4e);iLr=r(Yxt,"roberta"),Yxt.forEach(t),dLr=r(jqe," \u2014 "),iY=n(jqe,"A",{href:!0});var Kxt=s(iY);cLr=r(Kxt,"TFRobertaForSequenceClassification"),Kxt.forEach(t),mLr=r(jqe," (RoBERTa model)"),jqe.forEach(t),fLr=i(ne),V5=n(ne,"LI",{});var Dqe=s(V5);d4e=n(Dqe,"STRONG",{});var Zxt=s(d4e);gLr=r(Zxt,"roformer"),Zxt.forEach(t),hLr=r(Dqe," \u2014 "),dY=n(Dqe,"A",{href:!0});var e$t=s(dY);uLr=r(e$t,"TFRoFormerForSequenceClassification"),e$t.forEach(t),pLr=r(Dqe," (RoFormer model)"),Dqe.forEach(t),_Lr=i(ne),X5=n(ne,"LI",{});var Gqe=s(X5);c4e=n(Gqe,"STRONG",{});var o$t=s(c4e);bLr=r(o$t,"tapas"),o$t.forEach(t),vLr=r(Gqe," \u2014 "),cY=n(Gqe,"A",{href:!0});var r$t=s(cY);FLr=r(r$t,"TFTapasForSequenceClassification"),r$t.forEach(t),TLr=r(Gqe," (TAPAS model)"),Gqe.forEach(t),MLr=i(ne),z5=n(ne,"LI",{});var Oqe=s(z5);m4e=n(Oqe,"STRONG",{});var t$t=s(m4e);ELr=r(t$t,"transfo-xl"),t$t.forEach(t),CLr=r(Oqe," \u2014 "),mY=n(Oqe,"A",{href:!0});var a$t=s(mY);wLr=r(a$t,"TFTransfoXLForSequenceClassification"),a$t.forEach(t),ALr=r(Oqe," (Transformer-XL model)"),Oqe.forEach(t),LLr=i(ne),Q5=n(ne,"LI",{});var Vqe=s(Q5);f4e=n(Vqe,"STRONG",{});var n$t=s(f4e);yLr=r(n$t,"xlm"),n$t.forEach(t),xLr=r(Vqe," \u2014 "),fY=n(Vqe,"A",{href:!0});var s$t=s(fY);$Lr=r(s$t,"TFXLMForSequenceClassification"),s$t.forEach(t),kLr=r(Vqe," (XLM model)"),Vqe.forEach(t),SLr=i(ne),W5=n(ne,"LI",{});var Xqe=s(W5);g4e=n(Xqe,"STRONG",{});var l$t=s(g4e);RLr=r(l$t,"xlm-roberta"),l$t.forEach(t),PLr=r(Xqe," \u2014 "),gY=n(Xqe,"A",{href:!0});var i$t=s(gY);BLr=r(i$t,"TFXLMRobertaForSequenceClassification"),i$t.forEach(t),ILr=r(Xqe," (XLM-RoBERTa model)"),Xqe.forEach(t),NLr=i(ne),H5=n(ne,"LI",{});var zqe=s(H5);h4e=n(zqe,"STRONG",{});var d$t=s(h4e);qLr=r(d$t,"xlnet"),d$t.forEach(t),jLr=r(zqe," \u2014 "),hY=n(zqe,"A",{href:!0});var c$t=s(hY);DLr=r(c$t,"TFXLNetForSequenceClassification"),c$t.forEach(t),GLr=r(zqe," (XLNet model)"),zqe.forEach(t),ne.forEach(t),OLr=i(Nl),T(U5.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),EVe=i(m),Mc=n(m,"H2",{class:!0});var kze=s(Mc);J5=n(kze,"A",{id:!0,class:!0,href:!0});var m$t=s(J5);u4e=n(m$t,"SPAN",{});var f$t=s(u4e);T(ex.$$.fragment,f$t),f$t.forEach(t),m$t.forEach(t),VLr=i(kze),p4e=n(kze,"SPAN",{});var g$t=s(p4e);XLr=r(g$t,"TFAutoModelForMultipleChoice"),g$t.forEach(t),kze.forEach(t),CVe=i(m),lr=n(m,"DIV",{class:!0});var ql=s(lr);T(ox.$$.fragment,ql),zLr=i(ql),Ec=n(ql,"P",{});var qre=s(Ec);QLr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uY=n(qre,"A",{href:!0});var h$t=s(uY);WLr=r(h$t,"from_pretrained()"),h$t.forEach(t),HLr=r(qre," class method or the "),pY=n(qre,"A",{href:!0});var u$t=s(pY);ULr=r(u$t,"from_config()"),u$t.forEach(t),JLr=r(qre,` class
method.`),qre.forEach(t),YLr=i(ql),rx=n(ql,"P",{});var Sze=s(rx);KLr=r(Sze,"This class cannot be instantiated directly using "),_4e=n(Sze,"CODE",{});var p$t=s(_4e);ZLr=r(p$t,"__init__()"),p$t.forEach(t),e7r=r(Sze," (throws an error)."),Sze.forEach(t),o7r=i(ql),Nt=n(ql,"DIV",{class:!0});var zL=s(Nt);T(tx.$$.fragment,zL),r7r=i(zL),b4e=n(zL,"P",{});var _$t=s(b4e);t7r=r(_$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_$t.forEach(t),a7r=i(zL),Cc=n(zL,"P",{});var jre=s(Cc);n7r=r(jre,`Note:
Loading a model from its configuration file does `),v4e=n(jre,"STRONG",{});var b$t=s(v4e);s7r=r(b$t,"not"),b$t.forEach(t),l7r=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=n(jre,"A",{href:!0});var v$t=s(_Y);i7r=r(v$t,"from_pretrained()"),v$t.forEach(t),d7r=r(jre," to load the model weights."),jre.forEach(t),c7r=i(zL),T(Y5.$$.fragment,zL),zL.forEach(t),m7r=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(ax.$$.fragment,jl),f7r=i(jl),F4e=n(jl,"P",{});var F$t=s(F4e);g7r=r(F$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F$t.forEach(t),h7r=i(jl),gn=n(jl,"P",{});var QL=s(gn);u7r=r(QL,"The model class to instantiate is selected based on the "),T4e=n(QL,"CODE",{});var T$t=s(T4e);p7r=r(T$t,"model_type"),T$t.forEach(t),_7r=r(QL,` property of the config object (either
passed as an argument or loaded from `),M4e=n(QL,"CODE",{});var M$t=s(M4e);b7r=r(M$t,"pretrained_model_name_or_path"),M$t.forEach(t),v7r=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(QL,"CODE",{});var E$t=s(E4e);F7r=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),T7r=r(QL,":"),QL.forEach(t),M7r=i(jl),pe=n(jl,"UL",{});var ve=s(pe);K5=n(ve,"LI",{});var Qqe=s(K5);C4e=n(Qqe,"STRONG",{});var C$t=s(C4e);E7r=r(C$t,"albert"),C$t.forEach(t),C7r=r(Qqe," \u2014 "),bY=n(Qqe,"A",{href:!0});var w$t=s(bY);w7r=r(w$t,"TFAlbertForMultipleChoice"),w$t.forEach(t),A7r=r(Qqe," (ALBERT model)"),Qqe.forEach(t),L7r=i(ve),Z5=n(ve,"LI",{});var Wqe=s(Z5);w4e=n(Wqe,"STRONG",{});var A$t=s(w4e);y7r=r(A$t,"bert"),A$t.forEach(t),x7r=r(Wqe," \u2014 "),vY=n(Wqe,"A",{href:!0});var L$t=s(vY);$7r=r(L$t,"TFBertForMultipleChoice"),L$t.forEach(t),k7r=r(Wqe," (BERT model)"),Wqe.forEach(t),S7r=i(ve),e3=n(ve,"LI",{});var Hqe=s(e3);A4e=n(Hqe,"STRONG",{});var y$t=s(A4e);R7r=r(y$t,"camembert"),y$t.forEach(t),P7r=r(Hqe," \u2014 "),FY=n(Hqe,"A",{href:!0});var x$t=s(FY);B7r=r(x$t,"TFCamembertForMultipleChoice"),x$t.forEach(t),I7r=r(Hqe," (CamemBERT model)"),Hqe.forEach(t),N7r=i(ve),o3=n(ve,"LI",{});var Uqe=s(o3);L4e=n(Uqe,"STRONG",{});var $$t=s(L4e);q7r=r($$t,"convbert"),$$t.forEach(t),j7r=r(Uqe," \u2014 "),TY=n(Uqe,"A",{href:!0});var k$t=s(TY);D7r=r(k$t,"TFConvBertForMultipleChoice"),k$t.forEach(t),G7r=r(Uqe," (ConvBERT model)"),Uqe.forEach(t),O7r=i(ve),r3=n(ve,"LI",{});var Jqe=s(r3);y4e=n(Jqe,"STRONG",{});var S$t=s(y4e);V7r=r(S$t,"distilbert"),S$t.forEach(t),X7r=r(Jqe," \u2014 "),MY=n(Jqe,"A",{href:!0});var R$t=s(MY);z7r=r(R$t,"TFDistilBertForMultipleChoice"),R$t.forEach(t),Q7r=r(Jqe," (DistilBERT model)"),Jqe.forEach(t),W7r=i(ve),t3=n(ve,"LI",{});var Yqe=s(t3);x4e=n(Yqe,"STRONG",{});var P$t=s(x4e);H7r=r(P$t,"electra"),P$t.forEach(t),U7r=r(Yqe," \u2014 "),EY=n(Yqe,"A",{href:!0});var B$t=s(EY);J7r=r(B$t,"TFElectraForMultipleChoice"),B$t.forEach(t),Y7r=r(Yqe," (ELECTRA model)"),Yqe.forEach(t),K7r=i(ve),a3=n(ve,"LI",{});var Kqe=s(a3);$4e=n(Kqe,"STRONG",{});var I$t=s($4e);Z7r=r(I$t,"flaubert"),I$t.forEach(t),eyr=r(Kqe," \u2014 "),CY=n(Kqe,"A",{href:!0});var N$t=s(CY);oyr=r(N$t,"TFFlaubertForMultipleChoice"),N$t.forEach(t),ryr=r(Kqe," (FlauBERT model)"),Kqe.forEach(t),tyr=i(ve),n3=n(ve,"LI",{});var Zqe=s(n3);k4e=n(Zqe,"STRONG",{});var q$t=s(k4e);ayr=r(q$t,"funnel"),q$t.forEach(t),nyr=r(Zqe," \u2014 "),wY=n(Zqe,"A",{href:!0});var j$t=s(wY);syr=r(j$t,"TFFunnelForMultipleChoice"),j$t.forEach(t),lyr=r(Zqe," (Funnel Transformer model)"),Zqe.forEach(t),iyr=i(ve),s3=n(ve,"LI",{});var eje=s(s3);S4e=n(eje,"STRONG",{});var D$t=s(S4e);dyr=r(D$t,"longformer"),D$t.forEach(t),cyr=r(eje," \u2014 "),AY=n(eje,"A",{href:!0});var G$t=s(AY);myr=r(G$t,"TFLongformerForMultipleChoice"),G$t.forEach(t),fyr=r(eje," (Longformer model)"),eje.forEach(t),gyr=i(ve),l3=n(ve,"LI",{});var oje=s(l3);R4e=n(oje,"STRONG",{});var O$t=s(R4e);hyr=r(O$t,"mobilebert"),O$t.forEach(t),uyr=r(oje," \u2014 "),LY=n(oje,"A",{href:!0});var V$t=s(LY);pyr=r(V$t,"TFMobileBertForMultipleChoice"),V$t.forEach(t),_yr=r(oje," (MobileBERT model)"),oje.forEach(t),byr=i(ve),i3=n(ve,"LI",{});var rje=s(i3);P4e=n(rje,"STRONG",{});var X$t=s(P4e);vyr=r(X$t,"mpnet"),X$t.forEach(t),Fyr=r(rje," \u2014 "),yY=n(rje,"A",{href:!0});var z$t=s(yY);Tyr=r(z$t,"TFMPNetForMultipleChoice"),z$t.forEach(t),Myr=r(rje," (MPNet model)"),rje.forEach(t),Eyr=i(ve),d3=n(ve,"LI",{});var tje=s(d3);B4e=n(tje,"STRONG",{});var Q$t=s(B4e);Cyr=r(Q$t,"rembert"),Q$t.forEach(t),wyr=r(tje," \u2014 "),xY=n(tje,"A",{href:!0});var W$t=s(xY);Ayr=r(W$t,"TFRemBertForMultipleChoice"),W$t.forEach(t),Lyr=r(tje," (RemBERT model)"),tje.forEach(t),yyr=i(ve),c3=n(ve,"LI",{});var aje=s(c3);I4e=n(aje,"STRONG",{});var H$t=s(I4e);xyr=r(H$t,"roberta"),H$t.forEach(t),$yr=r(aje," \u2014 "),$Y=n(aje,"A",{href:!0});var U$t=s($Y);kyr=r(U$t,"TFRobertaForMultipleChoice"),U$t.forEach(t),Syr=r(aje," (RoBERTa model)"),aje.forEach(t),Ryr=i(ve),m3=n(ve,"LI",{});var nje=s(m3);N4e=n(nje,"STRONG",{});var J$t=s(N4e);Pyr=r(J$t,"roformer"),J$t.forEach(t),Byr=r(nje," \u2014 "),kY=n(nje,"A",{href:!0});var Y$t=s(kY);Iyr=r(Y$t,"TFRoFormerForMultipleChoice"),Y$t.forEach(t),Nyr=r(nje," (RoFormer model)"),nje.forEach(t),qyr=i(ve),f3=n(ve,"LI",{});var sje=s(f3);q4e=n(sje,"STRONG",{});var K$t=s(q4e);jyr=r(K$t,"xlm"),K$t.forEach(t),Dyr=r(sje," \u2014 "),SY=n(sje,"A",{href:!0});var Z$t=s(SY);Gyr=r(Z$t,"TFXLMForMultipleChoice"),Z$t.forEach(t),Oyr=r(sje," (XLM model)"),sje.forEach(t),Vyr=i(ve),g3=n(ve,"LI",{});var lje=s(g3);j4e=n(lje,"STRONG",{});var ekt=s(j4e);Xyr=r(ekt,"xlm-roberta"),ekt.forEach(t),zyr=r(lje," \u2014 "),RY=n(lje,"A",{href:!0});var okt=s(RY);Qyr=r(okt,"TFXLMRobertaForMultipleChoice"),okt.forEach(t),Wyr=r(lje," (XLM-RoBERTa model)"),lje.forEach(t),Hyr=i(ve),h3=n(ve,"LI",{});var ije=s(h3);D4e=n(ije,"STRONG",{});var rkt=s(D4e);Uyr=r(rkt,"xlnet"),rkt.forEach(t),Jyr=r(ije," \u2014 "),PY=n(ije,"A",{href:!0});var tkt=s(PY);Yyr=r(tkt,"TFXLNetForMultipleChoice"),tkt.forEach(t),Kyr=r(ije," (XLNet model)"),ije.forEach(t),ve.forEach(t),Zyr=i(jl),T(u3.$$.fragment,jl),jl.forEach(t),ql.forEach(t),wVe=i(m),wc=n(m,"H2",{class:!0});var Rze=s(wc);p3=n(Rze,"A",{id:!0,class:!0,href:!0});var akt=s(p3);G4e=n(akt,"SPAN",{});var nkt=s(G4e);T(nx.$$.fragment,nkt),nkt.forEach(t),akt.forEach(t),e8r=i(Rze),O4e=n(Rze,"SPAN",{});var skt=s(O4e);o8r=r(skt,"TFAutoModelForNextSentencePrediction"),skt.forEach(t),Rze.forEach(t),AVe=i(m),ir=n(m,"DIV",{class:!0});var Dl=s(ir);T(sx.$$.fragment,Dl),r8r=i(Dl),Ac=n(Dl,"P",{});var Dre=s(Ac);t8r=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BY=n(Dre,"A",{href:!0});var lkt=s(BY);a8r=r(lkt,"from_pretrained()"),lkt.forEach(t),n8r=r(Dre," class method or the "),IY=n(Dre,"A",{href:!0});var ikt=s(IY);s8r=r(ikt,"from_config()"),ikt.forEach(t),l8r=r(Dre,` class
method.`),Dre.forEach(t),i8r=i(Dl),lx=n(Dl,"P",{});var Pze=s(lx);d8r=r(Pze,"This class cannot be instantiated directly using "),V4e=n(Pze,"CODE",{});var dkt=s(V4e);c8r=r(dkt,"__init__()"),dkt.forEach(t),m8r=r(Pze," (throws an error)."),Pze.forEach(t),f8r=i(Dl),qt=n(Dl,"DIV",{class:!0});var WL=s(qt);T(ix.$$.fragment,WL),g8r=i(WL),X4e=n(WL,"P",{});var ckt=s(X4e);h8r=r(ckt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ckt.forEach(t),u8r=i(WL),Lc=n(WL,"P",{});var Gre=s(Lc);p8r=r(Gre,`Note:
Loading a model from its configuration file does `),z4e=n(Gre,"STRONG",{});var mkt=s(z4e);_8r=r(mkt,"not"),mkt.forEach(t),b8r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(Gre,"A",{href:!0});var fkt=s(NY);v8r=r(fkt,"from_pretrained()"),fkt.forEach(t),F8r=r(Gre," to load the model weights."),Gre.forEach(t),T8r=i(WL),T(_3.$$.fragment,WL),WL.forEach(t),M8r=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(dx.$$.fragment,Gl),E8r=i(Gl),Q4e=n(Gl,"P",{});var gkt=s(Q4e);C8r=r(gkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gkt.forEach(t),w8r=i(Gl),hn=n(Gl,"P",{});var HL=s(hn);A8r=r(HL,"The model class to instantiate is selected based on the "),W4e=n(HL,"CODE",{});var hkt=s(W4e);L8r=r(hkt,"model_type"),hkt.forEach(t),y8r=r(HL,` property of the config object (either
passed as an argument or loaded from `),H4e=n(HL,"CODE",{});var ukt=s(H4e);x8r=r(ukt,"pretrained_model_name_or_path"),ukt.forEach(t),$8r=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=n(HL,"CODE",{});var pkt=s(U4e);k8r=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),S8r=r(HL,":"),HL.forEach(t),R8r=i(Gl),cx=n(Gl,"UL",{});var Bze=s(cx);b3=n(Bze,"LI",{});var dje=s(b3);J4e=n(dje,"STRONG",{});var _kt=s(J4e);P8r=r(_kt,"bert"),_kt.forEach(t),B8r=r(dje," \u2014 "),qY=n(dje,"A",{href:!0});var bkt=s(qY);I8r=r(bkt,"TFBertForNextSentencePrediction"),bkt.forEach(t),N8r=r(dje," (BERT model)"),dje.forEach(t),q8r=i(Bze),v3=n(Bze,"LI",{});var cje=s(v3);Y4e=n(cje,"STRONG",{});var vkt=s(Y4e);j8r=r(vkt,"mobilebert"),vkt.forEach(t),D8r=r(cje," \u2014 "),jY=n(cje,"A",{href:!0});var Fkt=s(jY);G8r=r(Fkt,"TFMobileBertForNextSentencePrediction"),Fkt.forEach(t),O8r=r(cje," (MobileBERT model)"),cje.forEach(t),Bze.forEach(t),V8r=i(Gl),T(F3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),LVe=i(m),yc=n(m,"H2",{class:!0});var Ize=s(yc);T3=n(Ize,"A",{id:!0,class:!0,href:!0});var Tkt=s(T3);K4e=n(Tkt,"SPAN",{});var Mkt=s(K4e);T(mx.$$.fragment,Mkt),Mkt.forEach(t),Tkt.forEach(t),X8r=i(Ize),Z4e=n(Ize,"SPAN",{});var Ekt=s(Z4e);z8r=r(Ekt,"TFAutoModelForTableQuestionAnswering"),Ekt.forEach(t),Ize.forEach(t),yVe=i(m),dr=n(m,"DIV",{class:!0});var Ol=s(dr);T(fx.$$.fragment,Ol),Q8r=i(Ol),xc=n(Ol,"P",{});var Ore=s(xc);W8r=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DY=n(Ore,"A",{href:!0});var Ckt=s(DY);H8r=r(Ckt,"from_pretrained()"),Ckt.forEach(t),U8r=r(Ore," class method or the "),GY=n(Ore,"A",{href:!0});var wkt=s(GY);J8r=r(wkt,"from_config()"),wkt.forEach(t),Y8r=r(Ore,` class
method.`),Ore.forEach(t),K8r=i(Ol),gx=n(Ol,"P",{});var Nze=s(gx);Z8r=r(Nze,"This class cannot be instantiated directly using "),eCe=n(Nze,"CODE",{});var Akt=s(eCe);e9r=r(Akt,"__init__()"),Akt.forEach(t),o9r=r(Nze," (throws an error)."),Nze.forEach(t),r9r=i(Ol),jt=n(Ol,"DIV",{class:!0});var UL=s(jt);T(hx.$$.fragment,UL),t9r=i(UL),oCe=n(UL,"P",{});var Lkt=s(oCe);a9r=r(Lkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lkt.forEach(t),n9r=i(UL),$c=n(UL,"P",{});var Vre=s($c);s9r=r(Vre,`Note:
Loading a model from its configuration file does `),rCe=n(Vre,"STRONG",{});var ykt=s(rCe);l9r=r(ykt,"not"),ykt.forEach(t),i9r=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Vre,"A",{href:!0});var xkt=s(OY);d9r=r(xkt,"from_pretrained()"),xkt.forEach(t),c9r=r(Vre," to load the model weights."),Vre.forEach(t),m9r=i(UL),T(M3.$$.fragment,UL),UL.forEach(t),f9r=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(ux.$$.fragment,Vl),g9r=i(Vl),tCe=n(Vl,"P",{});var $kt=s(tCe);h9r=r($kt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$kt.forEach(t),u9r=i(Vl),un=n(Vl,"P",{});var JL=s(un);p9r=r(JL,"The model class to instantiate is selected based on the "),aCe=n(JL,"CODE",{});var kkt=s(aCe);_9r=r(kkt,"model_type"),kkt.forEach(t),b9r=r(JL,` property of the config object (either
passed as an argument or loaded from `),nCe=n(JL,"CODE",{});var Skt=s(nCe);v9r=r(Skt,"pretrained_model_name_or_path"),Skt.forEach(t),F9r=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=n(JL,"CODE",{});var Rkt=s(sCe);T9r=r(Rkt,"pretrained_model_name_or_path"),Rkt.forEach(t),M9r=r(JL,":"),JL.forEach(t),E9r=i(Vl),lCe=n(Vl,"UL",{});var Pkt=s(lCe);E3=n(Pkt,"LI",{});var mje=s(E3);iCe=n(mje,"STRONG",{});var Bkt=s(iCe);C9r=r(Bkt,"tapas"),Bkt.forEach(t),w9r=r(mje," \u2014 "),VY=n(mje,"A",{href:!0});var Ikt=s(VY);A9r=r(Ikt,"TFTapasForQuestionAnswering"),Ikt.forEach(t),L9r=r(mje," (TAPAS model)"),mje.forEach(t),Pkt.forEach(t),y9r=i(Vl),T(C3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),xVe=i(m),kc=n(m,"H2",{class:!0});var qze=s(kc);w3=n(qze,"A",{id:!0,class:!0,href:!0});var Nkt=s(w3);dCe=n(Nkt,"SPAN",{});var qkt=s(dCe);T(px.$$.fragment,qkt),qkt.forEach(t),Nkt.forEach(t),x9r=i(qze),cCe=n(qze,"SPAN",{});var jkt=s(cCe);$9r=r(jkt,"TFAutoModelForTokenClassification"),jkt.forEach(t),qze.forEach(t),$Ve=i(m),cr=n(m,"DIV",{class:!0});var Xl=s(cr);T(_x.$$.fragment,Xl),k9r=i(Xl),Sc=n(Xl,"P",{});var Xre=s(Sc);S9r=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XY=n(Xre,"A",{href:!0});var Dkt=s(XY);R9r=r(Dkt,"from_pretrained()"),Dkt.forEach(t),P9r=r(Xre," class method or the "),zY=n(Xre,"A",{href:!0});var Gkt=s(zY);B9r=r(Gkt,"from_config()"),Gkt.forEach(t),I9r=r(Xre,` class
method.`),Xre.forEach(t),N9r=i(Xl),bx=n(Xl,"P",{});var jze=s(bx);q9r=r(jze,"This class cannot be instantiated directly using "),mCe=n(jze,"CODE",{});var Okt=s(mCe);j9r=r(Okt,"__init__()"),Okt.forEach(t),D9r=r(jze," (throws an error)."),jze.forEach(t),G9r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var YL=s(Dt);T(vx.$$.fragment,YL),O9r=i(YL),fCe=n(YL,"P",{});var Vkt=s(fCe);V9r=r(Vkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vkt.forEach(t),X9r=i(YL),Rc=n(YL,"P",{});var zre=s(Rc);z9r=r(zre,`Note:
Loading a model from its configuration file does `),gCe=n(zre,"STRONG",{});var Xkt=s(gCe);Q9r=r(Xkt,"not"),Xkt.forEach(t),W9r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(zre,"A",{href:!0});var zkt=s(QY);H9r=r(zkt,"from_pretrained()"),zkt.forEach(t),U9r=r(zre," to load the model weights."),zre.forEach(t),J9r=i(YL),T(A3.$$.fragment,YL),YL.forEach(t),Y9r=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(Fx.$$.fragment,zl),K9r=i(zl),hCe=n(zl,"P",{});var Qkt=s(hCe);Z9r=r(Qkt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qkt.forEach(t),exr=i(zl),pn=n(zl,"P",{});var KL=s(pn);oxr=r(KL,"The model class to instantiate is selected based on the "),uCe=n(KL,"CODE",{});var Wkt=s(uCe);rxr=r(Wkt,"model_type"),Wkt.forEach(t),txr=r(KL,` property of the config object (either
passed as an argument or loaded from `),pCe=n(KL,"CODE",{});var Hkt=s(pCe);axr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),nxr=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(KL,"CODE",{});var Ukt=s(_Ce);sxr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),lxr=r(KL,":"),KL.forEach(t),ixr=i(zl),de=n(zl,"UL",{});var fe=s(de);L3=n(fe,"LI",{});var fje=s(L3);bCe=n(fje,"STRONG",{});var Jkt=s(bCe);dxr=r(Jkt,"albert"),Jkt.forEach(t),cxr=r(fje," \u2014 "),WY=n(fje,"A",{href:!0});var Ykt=s(WY);mxr=r(Ykt,"TFAlbertForTokenClassification"),Ykt.forEach(t),fxr=r(fje," (ALBERT model)"),fje.forEach(t),gxr=i(fe),y3=n(fe,"LI",{});var gje=s(y3);vCe=n(gje,"STRONG",{});var Kkt=s(vCe);hxr=r(Kkt,"bert"),Kkt.forEach(t),uxr=r(gje," \u2014 "),HY=n(gje,"A",{href:!0});var Zkt=s(HY);pxr=r(Zkt,"TFBertForTokenClassification"),Zkt.forEach(t),_xr=r(gje," (BERT model)"),gje.forEach(t),bxr=i(fe),x3=n(fe,"LI",{});var hje=s(x3);FCe=n(hje,"STRONG",{});var eSt=s(FCe);vxr=r(eSt,"camembert"),eSt.forEach(t),Fxr=r(hje," \u2014 "),UY=n(hje,"A",{href:!0});var oSt=s(UY);Txr=r(oSt,"TFCamembertForTokenClassification"),oSt.forEach(t),Mxr=r(hje," (CamemBERT model)"),hje.forEach(t),Exr=i(fe),$3=n(fe,"LI",{});var uje=s($3);TCe=n(uje,"STRONG",{});var rSt=s(TCe);Cxr=r(rSt,"convbert"),rSt.forEach(t),wxr=r(uje," \u2014 "),JY=n(uje,"A",{href:!0});var tSt=s(JY);Axr=r(tSt,"TFConvBertForTokenClassification"),tSt.forEach(t),Lxr=r(uje," (ConvBERT model)"),uje.forEach(t),yxr=i(fe),k3=n(fe,"LI",{});var pje=s(k3);MCe=n(pje,"STRONG",{});var aSt=s(MCe);xxr=r(aSt,"deberta"),aSt.forEach(t),$xr=r(pje," \u2014 "),YY=n(pje,"A",{href:!0});var nSt=s(YY);kxr=r(nSt,"TFDebertaForTokenClassification"),nSt.forEach(t),Sxr=r(pje," (DeBERTa model)"),pje.forEach(t),Rxr=i(fe),S3=n(fe,"LI",{});var _je=s(S3);ECe=n(_je,"STRONG",{});var sSt=s(ECe);Pxr=r(sSt,"deberta-v2"),sSt.forEach(t),Bxr=r(_je," \u2014 "),KY=n(_je,"A",{href:!0});var lSt=s(KY);Ixr=r(lSt,"TFDebertaV2ForTokenClassification"),lSt.forEach(t),Nxr=r(_je," (DeBERTa-v2 model)"),_je.forEach(t),qxr=i(fe),R3=n(fe,"LI",{});var bje=s(R3);CCe=n(bje,"STRONG",{});var iSt=s(CCe);jxr=r(iSt,"distilbert"),iSt.forEach(t),Dxr=r(bje," \u2014 "),ZY=n(bje,"A",{href:!0});var dSt=s(ZY);Gxr=r(dSt,"TFDistilBertForTokenClassification"),dSt.forEach(t),Oxr=r(bje," (DistilBERT model)"),bje.forEach(t),Vxr=i(fe),P3=n(fe,"LI",{});var vje=s(P3);wCe=n(vje,"STRONG",{});var cSt=s(wCe);Xxr=r(cSt,"electra"),cSt.forEach(t),zxr=r(vje," \u2014 "),eK=n(vje,"A",{href:!0});var mSt=s(eK);Qxr=r(mSt,"TFElectraForTokenClassification"),mSt.forEach(t),Wxr=r(vje," (ELECTRA model)"),vje.forEach(t),Hxr=i(fe),B3=n(fe,"LI",{});var Fje=s(B3);ACe=n(Fje,"STRONG",{});var fSt=s(ACe);Uxr=r(fSt,"flaubert"),fSt.forEach(t),Jxr=r(Fje," \u2014 "),oK=n(Fje,"A",{href:!0});var gSt=s(oK);Yxr=r(gSt,"TFFlaubertForTokenClassification"),gSt.forEach(t),Kxr=r(Fje," (FlauBERT model)"),Fje.forEach(t),Zxr=i(fe),I3=n(fe,"LI",{});var Tje=s(I3);LCe=n(Tje,"STRONG",{});var hSt=s(LCe);e$r=r(hSt,"funnel"),hSt.forEach(t),o$r=r(Tje," \u2014 "),rK=n(Tje,"A",{href:!0});var uSt=s(rK);r$r=r(uSt,"TFFunnelForTokenClassification"),uSt.forEach(t),t$r=r(Tje," (Funnel Transformer model)"),Tje.forEach(t),a$r=i(fe),N3=n(fe,"LI",{});var Mje=s(N3);yCe=n(Mje,"STRONG",{});var pSt=s(yCe);n$r=r(pSt,"layoutlm"),pSt.forEach(t),s$r=r(Mje," \u2014 "),tK=n(Mje,"A",{href:!0});var _St=s(tK);l$r=r(_St,"TFLayoutLMForTokenClassification"),_St.forEach(t),i$r=r(Mje," (LayoutLM model)"),Mje.forEach(t),d$r=i(fe),q3=n(fe,"LI",{});var Eje=s(q3);xCe=n(Eje,"STRONG",{});var bSt=s(xCe);c$r=r(bSt,"longformer"),bSt.forEach(t),m$r=r(Eje," \u2014 "),aK=n(Eje,"A",{href:!0});var vSt=s(aK);f$r=r(vSt,"TFLongformerForTokenClassification"),vSt.forEach(t),g$r=r(Eje," (Longformer model)"),Eje.forEach(t),h$r=i(fe),j3=n(fe,"LI",{});var Cje=s(j3);$Ce=n(Cje,"STRONG",{});var FSt=s($Ce);u$r=r(FSt,"mobilebert"),FSt.forEach(t),p$r=r(Cje," \u2014 "),nK=n(Cje,"A",{href:!0});var TSt=s(nK);_$r=r(TSt,"TFMobileBertForTokenClassification"),TSt.forEach(t),b$r=r(Cje," (MobileBERT model)"),Cje.forEach(t),v$r=i(fe),D3=n(fe,"LI",{});var wje=s(D3);kCe=n(wje,"STRONG",{});var MSt=s(kCe);F$r=r(MSt,"mpnet"),MSt.forEach(t),T$r=r(wje," \u2014 "),sK=n(wje,"A",{href:!0});var ESt=s(sK);M$r=r(ESt,"TFMPNetForTokenClassification"),ESt.forEach(t),E$r=r(wje," (MPNet model)"),wje.forEach(t),C$r=i(fe),G3=n(fe,"LI",{});var Aje=s(G3);SCe=n(Aje,"STRONG",{});var CSt=s(SCe);w$r=r(CSt,"rembert"),CSt.forEach(t),A$r=r(Aje," \u2014 "),lK=n(Aje,"A",{href:!0});var wSt=s(lK);L$r=r(wSt,"TFRemBertForTokenClassification"),wSt.forEach(t),y$r=r(Aje," (RemBERT model)"),Aje.forEach(t),x$r=i(fe),O3=n(fe,"LI",{});var Lje=s(O3);RCe=n(Lje,"STRONG",{});var ASt=s(RCe);$$r=r(ASt,"roberta"),ASt.forEach(t),k$r=r(Lje," \u2014 "),iK=n(Lje,"A",{href:!0});var LSt=s(iK);S$r=r(LSt,"TFRobertaForTokenClassification"),LSt.forEach(t),R$r=r(Lje," (RoBERTa model)"),Lje.forEach(t),P$r=i(fe),V3=n(fe,"LI",{});var yje=s(V3);PCe=n(yje,"STRONG",{});var ySt=s(PCe);B$r=r(ySt,"roformer"),ySt.forEach(t),I$r=r(yje," \u2014 "),dK=n(yje,"A",{href:!0});var xSt=s(dK);N$r=r(xSt,"TFRoFormerForTokenClassification"),xSt.forEach(t),q$r=r(yje," (RoFormer model)"),yje.forEach(t),j$r=i(fe),X3=n(fe,"LI",{});var xje=s(X3);BCe=n(xje,"STRONG",{});var $St=s(BCe);D$r=r($St,"xlm"),$St.forEach(t),G$r=r(xje," \u2014 "),cK=n(xje,"A",{href:!0});var kSt=s(cK);O$r=r(kSt,"TFXLMForTokenClassification"),kSt.forEach(t),V$r=r(xje," (XLM model)"),xje.forEach(t),X$r=i(fe),z3=n(fe,"LI",{});var $je=s(z3);ICe=n($je,"STRONG",{});var SSt=s(ICe);z$r=r(SSt,"xlm-roberta"),SSt.forEach(t),Q$r=r($je," \u2014 "),mK=n($je,"A",{href:!0});var RSt=s(mK);W$r=r(RSt,"TFXLMRobertaForTokenClassification"),RSt.forEach(t),H$r=r($je," (XLM-RoBERTa model)"),$je.forEach(t),U$r=i(fe),Q3=n(fe,"LI",{});var kje=s(Q3);NCe=n(kje,"STRONG",{});var PSt=s(NCe);J$r=r(PSt,"xlnet"),PSt.forEach(t),Y$r=r(kje," \u2014 "),fK=n(kje,"A",{href:!0});var BSt=s(fK);K$r=r(BSt,"TFXLNetForTokenClassification"),BSt.forEach(t),Z$r=r(kje," (XLNet model)"),kje.forEach(t),fe.forEach(t),ekr=i(zl),T(W3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),kVe=i(m),Pc=n(m,"H2",{class:!0});var Dze=s(Pc);H3=n(Dze,"A",{id:!0,class:!0,href:!0});var ISt=s(H3);qCe=n(ISt,"SPAN",{});var NSt=s(qCe);T(Tx.$$.fragment,NSt),NSt.forEach(t),ISt.forEach(t),okr=i(Dze),jCe=n(Dze,"SPAN",{});var qSt=s(jCe);rkr=r(qSt,"TFAutoModelForQuestionAnswering"),qSt.forEach(t),Dze.forEach(t),SVe=i(m),mr=n(m,"DIV",{class:!0});var Ql=s(mr);T(Mx.$$.fragment,Ql),tkr=i(Ql),Bc=n(Ql,"P",{});var Qre=s(Bc);akr=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gK=n(Qre,"A",{href:!0});var jSt=s(gK);nkr=r(jSt,"from_pretrained()"),jSt.forEach(t),skr=r(Qre," class method or the "),hK=n(Qre,"A",{href:!0});var DSt=s(hK);lkr=r(DSt,"from_config()"),DSt.forEach(t),ikr=r(Qre,` class
method.`),Qre.forEach(t),dkr=i(Ql),Ex=n(Ql,"P",{});var Gze=s(Ex);ckr=r(Gze,"This class cannot be instantiated directly using "),DCe=n(Gze,"CODE",{});var GSt=s(DCe);mkr=r(GSt,"__init__()"),GSt.forEach(t),fkr=r(Gze," (throws an error)."),Gze.forEach(t),gkr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var ZL=s(Gt);T(Cx.$$.fragment,ZL),hkr=i(ZL),GCe=n(ZL,"P",{});var OSt=s(GCe);ukr=r(OSt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OSt.forEach(t),pkr=i(ZL),Ic=n(ZL,"P",{});var Wre=s(Ic);_kr=r(Wre,`Note:
Loading a model from its configuration file does `),OCe=n(Wre,"STRONG",{});var VSt=s(OCe);bkr=r(VSt,"not"),VSt.forEach(t),vkr=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Wre,"A",{href:!0});var XSt=s(uK);Fkr=r(XSt,"from_pretrained()"),XSt.forEach(t),Tkr=r(Wre," to load the model weights."),Wre.forEach(t),Mkr=i(ZL),T(U3.$$.fragment,ZL),ZL.forEach(t),Ekr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Wl=s(jr);T(wx.$$.fragment,Wl),Ckr=i(Wl),VCe=n(Wl,"P",{});var zSt=s(VCe);wkr=r(zSt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zSt.forEach(t),Akr=i(Wl),_n=n(Wl,"P",{});var e7=s(_n);Lkr=r(e7,"The model class to instantiate is selected based on the "),XCe=n(e7,"CODE",{});var QSt=s(XCe);ykr=r(QSt,"model_type"),QSt.forEach(t),xkr=r(e7,` property of the config object (either
passed as an argument or loaded from `),zCe=n(e7,"CODE",{});var WSt=s(zCe);$kr=r(WSt,"pretrained_model_name_or_path"),WSt.forEach(t),kkr=r(e7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=n(e7,"CODE",{});var HSt=s(QCe);Skr=r(HSt,"pretrained_model_name_or_path"),HSt.forEach(t),Rkr=r(e7,":"),e7.forEach(t),Pkr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);J3=n(ge,"LI",{});var Sje=s(J3);WCe=n(Sje,"STRONG",{});var USt=s(WCe);Bkr=r(USt,"albert"),USt.forEach(t),Ikr=r(Sje," \u2014 "),pK=n(Sje,"A",{href:!0});var JSt=s(pK);Nkr=r(JSt,"TFAlbertForQuestionAnswering"),JSt.forEach(t),qkr=r(Sje," (ALBERT model)"),Sje.forEach(t),jkr=i(ge),Y3=n(ge,"LI",{});var Rje=s(Y3);HCe=n(Rje,"STRONG",{});var YSt=s(HCe);Dkr=r(YSt,"bert"),YSt.forEach(t),Gkr=r(Rje," \u2014 "),_K=n(Rje,"A",{href:!0});var KSt=s(_K);Okr=r(KSt,"TFBertForQuestionAnswering"),KSt.forEach(t),Vkr=r(Rje," (BERT model)"),Rje.forEach(t),Xkr=i(ge),K3=n(ge,"LI",{});var Pje=s(K3);UCe=n(Pje,"STRONG",{});var ZSt=s(UCe);zkr=r(ZSt,"camembert"),ZSt.forEach(t),Qkr=r(Pje," \u2014 "),bK=n(Pje,"A",{href:!0});var eRt=s(bK);Wkr=r(eRt,"TFCamembertForQuestionAnswering"),eRt.forEach(t),Hkr=r(Pje," (CamemBERT model)"),Pje.forEach(t),Ukr=i(ge),Z3=n(ge,"LI",{});var Bje=s(Z3);JCe=n(Bje,"STRONG",{});var oRt=s(JCe);Jkr=r(oRt,"convbert"),oRt.forEach(t),Ykr=r(Bje," \u2014 "),vK=n(Bje,"A",{href:!0});var rRt=s(vK);Kkr=r(rRt,"TFConvBertForQuestionAnswering"),rRt.forEach(t),Zkr=r(Bje," (ConvBERT model)"),Bje.forEach(t),eSr=i(ge),e0=n(ge,"LI",{});var Ije=s(e0);YCe=n(Ije,"STRONG",{});var tRt=s(YCe);oSr=r(tRt,"deberta"),tRt.forEach(t),rSr=r(Ije," \u2014 "),FK=n(Ije,"A",{href:!0});var aRt=s(FK);tSr=r(aRt,"TFDebertaForQuestionAnswering"),aRt.forEach(t),aSr=r(Ije," (DeBERTa model)"),Ije.forEach(t),nSr=i(ge),o0=n(ge,"LI",{});var Nje=s(o0);KCe=n(Nje,"STRONG",{});var nRt=s(KCe);sSr=r(nRt,"deberta-v2"),nRt.forEach(t),lSr=r(Nje," \u2014 "),TK=n(Nje,"A",{href:!0});var sRt=s(TK);iSr=r(sRt,"TFDebertaV2ForQuestionAnswering"),sRt.forEach(t),dSr=r(Nje," (DeBERTa-v2 model)"),Nje.forEach(t),cSr=i(ge),r0=n(ge,"LI",{});var qje=s(r0);ZCe=n(qje,"STRONG",{});var lRt=s(ZCe);mSr=r(lRt,"distilbert"),lRt.forEach(t),fSr=r(qje," \u2014 "),MK=n(qje,"A",{href:!0});var iRt=s(MK);gSr=r(iRt,"TFDistilBertForQuestionAnswering"),iRt.forEach(t),hSr=r(qje," (DistilBERT model)"),qje.forEach(t),uSr=i(ge),t0=n(ge,"LI",{});var jje=s(t0);e5e=n(jje,"STRONG",{});var dRt=s(e5e);pSr=r(dRt,"electra"),dRt.forEach(t),_Sr=r(jje," \u2014 "),EK=n(jje,"A",{href:!0});var cRt=s(EK);bSr=r(cRt,"TFElectraForQuestionAnswering"),cRt.forEach(t),vSr=r(jje," (ELECTRA model)"),jje.forEach(t),FSr=i(ge),a0=n(ge,"LI",{});var Dje=s(a0);o5e=n(Dje,"STRONG",{});var mRt=s(o5e);TSr=r(mRt,"flaubert"),mRt.forEach(t),MSr=r(Dje," \u2014 "),CK=n(Dje,"A",{href:!0});var fRt=s(CK);ESr=r(fRt,"TFFlaubertForQuestionAnsweringSimple"),fRt.forEach(t),CSr=r(Dje," (FlauBERT model)"),Dje.forEach(t),wSr=i(ge),n0=n(ge,"LI",{});var Gje=s(n0);r5e=n(Gje,"STRONG",{});var gRt=s(r5e);ASr=r(gRt,"funnel"),gRt.forEach(t),LSr=r(Gje," \u2014 "),wK=n(Gje,"A",{href:!0});var hRt=s(wK);ySr=r(hRt,"TFFunnelForQuestionAnswering"),hRt.forEach(t),xSr=r(Gje," (Funnel Transformer model)"),Gje.forEach(t),$Sr=i(ge),s0=n(ge,"LI",{});var Oje=s(s0);t5e=n(Oje,"STRONG",{});var uRt=s(t5e);kSr=r(uRt,"gptj"),uRt.forEach(t),SSr=r(Oje," \u2014 "),AK=n(Oje,"A",{href:!0});var pRt=s(AK);RSr=r(pRt,"TFGPTJForQuestionAnswering"),pRt.forEach(t),PSr=r(Oje," (GPT-J model)"),Oje.forEach(t),BSr=i(ge),l0=n(ge,"LI",{});var Vje=s(l0);a5e=n(Vje,"STRONG",{});var _Rt=s(a5e);ISr=r(_Rt,"longformer"),_Rt.forEach(t),NSr=r(Vje," \u2014 "),LK=n(Vje,"A",{href:!0});var bRt=s(LK);qSr=r(bRt,"TFLongformerForQuestionAnswering"),bRt.forEach(t),jSr=r(Vje," (Longformer model)"),Vje.forEach(t),DSr=i(ge),i0=n(ge,"LI",{});var Xje=s(i0);n5e=n(Xje,"STRONG",{});var vRt=s(n5e);GSr=r(vRt,"mobilebert"),vRt.forEach(t),OSr=r(Xje," \u2014 "),yK=n(Xje,"A",{href:!0});var FRt=s(yK);VSr=r(FRt,"TFMobileBertForQuestionAnswering"),FRt.forEach(t),XSr=r(Xje," (MobileBERT model)"),Xje.forEach(t),zSr=i(ge),d0=n(ge,"LI",{});var zje=s(d0);s5e=n(zje,"STRONG",{});var TRt=s(s5e);QSr=r(TRt,"mpnet"),TRt.forEach(t),WSr=r(zje," \u2014 "),xK=n(zje,"A",{href:!0});var MRt=s(xK);HSr=r(MRt,"TFMPNetForQuestionAnswering"),MRt.forEach(t),USr=r(zje," (MPNet model)"),zje.forEach(t),JSr=i(ge),c0=n(ge,"LI",{});var Qje=s(c0);l5e=n(Qje,"STRONG",{});var ERt=s(l5e);YSr=r(ERt,"rembert"),ERt.forEach(t),KSr=r(Qje," \u2014 "),$K=n(Qje,"A",{href:!0});var CRt=s($K);ZSr=r(CRt,"TFRemBertForQuestionAnswering"),CRt.forEach(t),eRr=r(Qje," (RemBERT model)"),Qje.forEach(t),oRr=i(ge),m0=n(ge,"LI",{});var Wje=s(m0);i5e=n(Wje,"STRONG",{});var wRt=s(i5e);rRr=r(wRt,"roberta"),wRt.forEach(t),tRr=r(Wje," \u2014 "),kK=n(Wje,"A",{href:!0});var ARt=s(kK);aRr=r(ARt,"TFRobertaForQuestionAnswering"),ARt.forEach(t),nRr=r(Wje," (RoBERTa model)"),Wje.forEach(t),sRr=i(ge),f0=n(ge,"LI",{});var Hje=s(f0);d5e=n(Hje,"STRONG",{});var LRt=s(d5e);lRr=r(LRt,"roformer"),LRt.forEach(t),iRr=r(Hje," \u2014 "),SK=n(Hje,"A",{href:!0});var yRt=s(SK);dRr=r(yRt,"TFRoFormerForQuestionAnswering"),yRt.forEach(t),cRr=r(Hje," (RoFormer model)"),Hje.forEach(t),mRr=i(ge),g0=n(ge,"LI",{});var Uje=s(g0);c5e=n(Uje,"STRONG",{});var xRt=s(c5e);fRr=r(xRt,"xlm"),xRt.forEach(t),gRr=r(Uje," \u2014 "),RK=n(Uje,"A",{href:!0});var $Rt=s(RK);hRr=r($Rt,"TFXLMForQuestionAnsweringSimple"),$Rt.forEach(t),uRr=r(Uje," (XLM model)"),Uje.forEach(t),pRr=i(ge),h0=n(ge,"LI",{});var Jje=s(h0);m5e=n(Jje,"STRONG",{});var kRt=s(m5e);_Rr=r(kRt,"xlm-roberta"),kRt.forEach(t),bRr=r(Jje," \u2014 "),PK=n(Jje,"A",{href:!0});var SRt=s(PK);vRr=r(SRt,"TFXLMRobertaForQuestionAnswering"),SRt.forEach(t),FRr=r(Jje," (XLM-RoBERTa model)"),Jje.forEach(t),TRr=i(ge),u0=n(ge,"LI",{});var Yje=s(u0);f5e=n(Yje,"STRONG",{});var RRt=s(f5e);MRr=r(RRt,"xlnet"),RRt.forEach(t),ERr=r(Yje," \u2014 "),BK=n(Yje,"A",{href:!0});var PRt=s(BK);CRr=r(PRt,"TFXLNetForQuestionAnsweringSimple"),PRt.forEach(t),wRr=r(Yje," (XLNet model)"),Yje.forEach(t),ge.forEach(t),ARr=i(Wl),T(p0.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),RVe=i(m),Nc=n(m,"H2",{class:!0});var Oze=s(Nc);_0=n(Oze,"A",{id:!0,class:!0,href:!0});var BRt=s(_0);g5e=n(BRt,"SPAN",{});var IRt=s(g5e);T(Ax.$$.fragment,IRt),IRt.forEach(t),BRt.forEach(t),LRr=i(Oze),h5e=n(Oze,"SPAN",{});var NRt=s(h5e);yRr=r(NRt,"TFAutoModelForVision2Seq"),NRt.forEach(t),Oze.forEach(t),PVe=i(m),fr=n(m,"DIV",{class:!0});var Hl=s(fr);T(Lx.$$.fragment,Hl),xRr=i(Hl),qc=n(Hl,"P",{});var Hre=s(qc);$Rr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IK=n(Hre,"A",{href:!0});var qRt=s(IK);kRr=r(qRt,"from_pretrained()"),qRt.forEach(t),SRr=r(Hre," class method or the "),NK=n(Hre,"A",{href:!0});var jRt=s(NK);RRr=r(jRt,"from_config()"),jRt.forEach(t),PRr=r(Hre,` class
method.`),Hre.forEach(t),BRr=i(Hl),yx=n(Hl,"P",{});var Vze=s(yx);IRr=r(Vze,"This class cannot be instantiated directly using "),u5e=n(Vze,"CODE",{});var DRt=s(u5e);NRr=r(DRt,"__init__()"),DRt.forEach(t),qRr=r(Vze," (throws an error)."),Vze.forEach(t),jRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var o7=s(Ot);T(xx.$$.fragment,o7),DRr=i(o7),p5e=n(o7,"P",{});var GRt=s(p5e);GRr=r(GRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GRt.forEach(t),ORr=i(o7),jc=n(o7,"P",{});var Ure=s(jc);VRr=r(Ure,`Note:
Loading a model from its configuration file does `),_5e=n(Ure,"STRONG",{});var ORt=s(_5e);XRr=r(ORt,"not"),ORt.forEach(t),zRr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Ure,"A",{href:!0});var VRt=s(qK);QRr=r(VRt,"from_pretrained()"),VRt.forEach(t),WRr=r(Ure," to load the model weights."),Ure.forEach(t),HRr=i(o7),T(b0.$$.fragment,o7),o7.forEach(t),URr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T($x.$$.fragment,Ul),JRr=i(Ul),b5e=n(Ul,"P",{});var XRt=s(b5e);YRr=r(XRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XRt.forEach(t),KRr=i(Ul),bn=n(Ul,"P",{});var r7=s(bn);ZRr=r(r7,"The model class to instantiate is selected based on the "),v5e=n(r7,"CODE",{});var zRt=s(v5e);ePr=r(zRt,"model_type"),zRt.forEach(t),oPr=r(r7,` property of the config object (either
passed as an argument or loaded from `),F5e=n(r7,"CODE",{});var QRt=s(F5e);rPr=r(QRt,"pretrained_model_name_or_path"),QRt.forEach(t),tPr=r(r7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=n(r7,"CODE",{});var WRt=s(T5e);aPr=r(WRt,"pretrained_model_name_or_path"),WRt.forEach(t),nPr=r(r7,":"),r7.forEach(t),sPr=i(Ul),M5e=n(Ul,"UL",{});var HRt=s(M5e);v0=n(HRt,"LI",{});var Kje=s(v0);E5e=n(Kje,"STRONG",{});var URt=s(E5e);lPr=r(URt,"vision-encoder-decoder"),URt.forEach(t),iPr=r(Kje," \u2014 "),jK=n(Kje,"A",{href:!0});var JRt=s(jK);dPr=r(JRt,"TFVisionEncoderDecoderModel"),JRt.forEach(t),cPr=r(Kje," (Vision Encoder decoder model)"),Kje.forEach(t),HRt.forEach(t),mPr=i(Ul),T(F0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),BVe=i(m),Dc=n(m,"H2",{class:!0});var Xze=s(Dc);T0=n(Xze,"A",{id:!0,class:!0,href:!0});var YRt=s(T0);C5e=n(YRt,"SPAN",{});var KRt=s(C5e);T(kx.$$.fragment,KRt),KRt.forEach(t),YRt.forEach(t),fPr=i(Xze),w5e=n(Xze,"SPAN",{});var ZRt=s(w5e);gPr=r(ZRt,"TFAutoModelForSpeechSeq2Seq"),ZRt.forEach(t),Xze.forEach(t),IVe=i(m),gr=n(m,"DIV",{class:!0});var Jl=s(gr);T(Sx.$$.fragment,Jl),hPr=i(Jl),Gc=n(Jl,"P",{});var Jre=s(Gc);uPr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DK=n(Jre,"A",{href:!0});var ePt=s(DK);pPr=r(ePt,"from_pretrained()"),ePt.forEach(t),_Pr=r(Jre," class method or the "),GK=n(Jre,"A",{href:!0});var oPt=s(GK);bPr=r(oPt,"from_config()"),oPt.forEach(t),vPr=r(Jre,` class
method.`),Jre.forEach(t),FPr=i(Jl),Rx=n(Jl,"P",{});var zze=s(Rx);TPr=r(zze,"This class cannot be instantiated directly using "),A5e=n(zze,"CODE",{});var rPt=s(A5e);MPr=r(rPt,"__init__()"),rPt.forEach(t),EPr=r(zze," (throws an error)."),zze.forEach(t),CPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var t7=s(Vt);T(Px.$$.fragment,t7),wPr=i(t7),L5e=n(t7,"P",{});var tPt=s(L5e);APr=r(tPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tPt.forEach(t),LPr=i(t7),Oc=n(t7,"P",{});var Yre=s(Oc);yPr=r(Yre,`Note:
Loading a model from its configuration file does `),y5e=n(Yre,"STRONG",{});var aPt=s(y5e);xPr=r(aPt,"not"),aPt.forEach(t),$Pr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Yre,"A",{href:!0});var nPt=s(OK);kPr=r(nPt,"from_pretrained()"),nPt.forEach(t),SPr=r(Yre," to load the model weights."),Yre.forEach(t),RPr=i(t7),T(M0.$$.fragment,t7),t7.forEach(t),PPr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Bx.$$.fragment,Yl),BPr=i(Yl),x5e=n(Yl,"P",{});var sPt=s(x5e);IPr=r(sPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sPt.forEach(t),NPr=i(Yl),vn=n(Yl,"P",{});var a7=s(vn);qPr=r(a7,"The model class to instantiate is selected based on the "),$5e=n(a7,"CODE",{});var lPt=s($5e);jPr=r(lPt,"model_type"),lPt.forEach(t),DPr=r(a7,` property of the config object (either
passed as an argument or loaded from `),k5e=n(a7,"CODE",{});var iPt=s(k5e);GPr=r(iPt,"pretrained_model_name_or_path"),iPt.forEach(t),OPr=r(a7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(a7,"CODE",{});var dPt=s(S5e);VPr=r(dPt,"pretrained_model_name_or_path"),dPt.forEach(t),XPr=r(a7,":"),a7.forEach(t),zPr=i(Yl),R5e=n(Yl,"UL",{});var cPt=s(R5e);E0=n(cPt,"LI",{});var Zje=s(E0);P5e=n(Zje,"STRONG",{});var mPt=s(P5e);QPr=r(mPt,"speech_to_text"),mPt.forEach(t),WPr=r(Zje," \u2014 "),VK=n(Zje,"A",{href:!0});var fPt=s(VK);HPr=r(fPt,"TFSpeech2TextForConditionalGeneration"),fPt.forEach(t),UPr=r(Zje," (Speech2Text model)"),Zje.forEach(t),cPt.forEach(t),JPr=i(Yl),T(C0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),NVe=i(m),Vc=n(m,"H2",{class:!0});var Qze=s(Vc);w0=n(Qze,"A",{id:!0,class:!0,href:!0});var gPt=s(w0);B5e=n(gPt,"SPAN",{});var hPt=s(B5e);T(Ix.$$.fragment,hPt),hPt.forEach(t),gPt.forEach(t),YPr=i(Qze),I5e=n(Qze,"SPAN",{});var uPt=s(I5e);KPr=r(uPt,"FlaxAutoModel"),uPt.forEach(t),Qze.forEach(t),qVe=i(m),hr=n(m,"DIV",{class:!0});var Kl=s(hr);T(Nx.$$.fragment,Kl),ZPr=i(Kl),Xc=n(Kl,"P",{});var Kre=s(Xc);eBr=r(Kre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XK=n(Kre,"A",{href:!0});var pPt=s(XK);oBr=r(pPt,"from_pretrained()"),pPt.forEach(t),rBr=r(Kre," class method or the "),zK=n(Kre,"A",{href:!0});var _Pt=s(zK);tBr=r(_Pt,"from_config()"),_Pt.forEach(t),aBr=r(Kre,` class
method.`),Kre.forEach(t),nBr=i(Kl),qx=n(Kl,"P",{});var Wze=s(qx);sBr=r(Wze,"This class cannot be instantiated directly using "),N5e=n(Wze,"CODE",{});var bPt=s(N5e);lBr=r(bPt,"__init__()"),bPt.forEach(t),iBr=r(Wze," (throws an error)."),Wze.forEach(t),dBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var n7=s(Xt);T(jx.$$.fragment,n7),cBr=i(n7),q5e=n(n7,"P",{});var vPt=s(q5e);mBr=r(vPt,"Instantiates one of the base model classes of the library from a configuration."),vPt.forEach(t),fBr=i(n7),zc=n(n7,"P",{});var Zre=s(zc);gBr=r(Zre,`Note:
Loading a model from its configuration file does `),j5e=n(Zre,"STRONG",{});var FPt=s(j5e);hBr=r(FPt,"not"),FPt.forEach(t),uBr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(Zre,"A",{href:!0});var TPt=s(QK);pBr=r(TPt,"from_pretrained()"),TPt.forEach(t),_Br=r(Zre," to load the model weights."),Zre.forEach(t),bBr=i(n7),T(A0.$$.fragment,n7),n7.forEach(t),vBr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Dx.$$.fragment,Zl),FBr=i(Zl),D5e=n(Zl,"P",{});var MPt=s(D5e);TBr=r(MPt,"Instantiate one of the base model classes of the library from a pretrained model."),MPt.forEach(t),MBr=i(Zl),Fn=n(Zl,"P",{});var s7=s(Fn);EBr=r(s7,"The model class to instantiate is selected based on the "),G5e=n(s7,"CODE",{});var EPt=s(G5e);CBr=r(EPt,"model_type"),EPt.forEach(t),wBr=r(s7,` property of the config object (either
passed as an argument or loaded from `),O5e=n(s7,"CODE",{});var CPt=s(O5e);ABr=r(CPt,"pretrained_model_name_or_path"),CPt.forEach(t),LBr=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n(s7,"CODE",{});var wPt=s(V5e);yBr=r(wPt,"pretrained_model_name_or_path"),wPt.forEach(t),xBr=r(s7,":"),s7.forEach(t),$Br=i(Zl),oe=n(Zl,"UL",{});var ae=s(oe);L0=n(ae,"LI",{});var eDe=s(L0);X5e=n(eDe,"STRONG",{});var APt=s(X5e);kBr=r(APt,"albert"),APt.forEach(t),SBr=r(eDe," \u2014 "),WK=n(eDe,"A",{href:!0});var LPt=s(WK);RBr=r(LPt,"FlaxAlbertModel"),LPt.forEach(t),PBr=r(eDe," (ALBERT model)"),eDe.forEach(t),BBr=i(ae),y0=n(ae,"LI",{});var oDe=s(y0);z5e=n(oDe,"STRONG",{});var yPt=s(z5e);IBr=r(yPt,"bart"),yPt.forEach(t),NBr=r(oDe," \u2014 "),HK=n(oDe,"A",{href:!0});var xPt=s(HK);qBr=r(xPt,"FlaxBartModel"),xPt.forEach(t),jBr=r(oDe," (BART model)"),oDe.forEach(t),DBr=i(ae),x0=n(ae,"LI",{});var rDe=s(x0);Q5e=n(rDe,"STRONG",{});var $Pt=s(Q5e);GBr=r($Pt,"beit"),$Pt.forEach(t),OBr=r(rDe," \u2014 "),UK=n(rDe,"A",{href:!0});var kPt=s(UK);VBr=r(kPt,"FlaxBeitModel"),kPt.forEach(t),XBr=r(rDe," (BEiT model)"),rDe.forEach(t),zBr=i(ae),$0=n(ae,"LI",{});var tDe=s($0);W5e=n(tDe,"STRONG",{});var SPt=s(W5e);QBr=r(SPt,"bert"),SPt.forEach(t),WBr=r(tDe," \u2014 "),JK=n(tDe,"A",{href:!0});var RPt=s(JK);HBr=r(RPt,"FlaxBertModel"),RPt.forEach(t),UBr=r(tDe," (BERT model)"),tDe.forEach(t),JBr=i(ae),k0=n(ae,"LI",{});var aDe=s(k0);H5e=n(aDe,"STRONG",{});var PPt=s(H5e);YBr=r(PPt,"big_bird"),PPt.forEach(t),KBr=r(aDe," \u2014 "),YK=n(aDe,"A",{href:!0});var BPt=s(YK);ZBr=r(BPt,"FlaxBigBirdModel"),BPt.forEach(t),eIr=r(aDe," (BigBird model)"),aDe.forEach(t),oIr=i(ae),S0=n(ae,"LI",{});var nDe=s(S0);U5e=n(nDe,"STRONG",{});var IPt=s(U5e);rIr=r(IPt,"blenderbot"),IPt.forEach(t),tIr=r(nDe," \u2014 "),KK=n(nDe,"A",{href:!0});var NPt=s(KK);aIr=r(NPt,"FlaxBlenderbotModel"),NPt.forEach(t),nIr=r(nDe," (Blenderbot model)"),nDe.forEach(t),sIr=i(ae),R0=n(ae,"LI",{});var sDe=s(R0);J5e=n(sDe,"STRONG",{});var qPt=s(J5e);lIr=r(qPt,"blenderbot-small"),qPt.forEach(t),iIr=r(sDe," \u2014 "),ZK=n(sDe,"A",{href:!0});var jPt=s(ZK);dIr=r(jPt,"FlaxBlenderbotSmallModel"),jPt.forEach(t),cIr=r(sDe," (BlenderbotSmall model)"),sDe.forEach(t),mIr=i(ae),P0=n(ae,"LI",{});var lDe=s(P0);Y5e=n(lDe,"STRONG",{});var DPt=s(Y5e);fIr=r(DPt,"clip"),DPt.forEach(t),gIr=r(lDe," \u2014 "),eZ=n(lDe,"A",{href:!0});var GPt=s(eZ);hIr=r(GPt,"FlaxCLIPModel"),GPt.forEach(t),uIr=r(lDe," (CLIP model)"),lDe.forEach(t),pIr=i(ae),B0=n(ae,"LI",{});var iDe=s(B0);K5e=n(iDe,"STRONG",{});var OPt=s(K5e);_Ir=r(OPt,"distilbert"),OPt.forEach(t),bIr=r(iDe," \u2014 "),oZ=n(iDe,"A",{href:!0});var VPt=s(oZ);vIr=r(VPt,"FlaxDistilBertModel"),VPt.forEach(t),FIr=r(iDe," (DistilBERT model)"),iDe.forEach(t),TIr=i(ae),I0=n(ae,"LI",{});var dDe=s(I0);Z5e=n(dDe,"STRONG",{});var XPt=s(Z5e);MIr=r(XPt,"electra"),XPt.forEach(t),EIr=r(dDe," \u2014 "),rZ=n(dDe,"A",{href:!0});var zPt=s(rZ);CIr=r(zPt,"FlaxElectraModel"),zPt.forEach(t),wIr=r(dDe," (ELECTRA model)"),dDe.forEach(t),AIr=i(ae),N0=n(ae,"LI",{});var cDe=s(N0);e3e=n(cDe,"STRONG",{});var QPt=s(e3e);LIr=r(QPt,"gpt2"),QPt.forEach(t),yIr=r(cDe," \u2014 "),tZ=n(cDe,"A",{href:!0});var WPt=s(tZ);xIr=r(WPt,"FlaxGPT2Model"),WPt.forEach(t),$Ir=r(cDe," (OpenAI GPT-2 model)"),cDe.forEach(t),kIr=i(ae),q0=n(ae,"LI",{});var mDe=s(q0);o3e=n(mDe,"STRONG",{});var HPt=s(o3e);SIr=r(HPt,"gpt_neo"),HPt.forEach(t),RIr=r(mDe," \u2014 "),aZ=n(mDe,"A",{href:!0});var UPt=s(aZ);PIr=r(UPt,"FlaxGPTNeoModel"),UPt.forEach(t),BIr=r(mDe," (GPT Neo model)"),mDe.forEach(t),IIr=i(ae),j0=n(ae,"LI",{});var fDe=s(j0);r3e=n(fDe,"STRONG",{});var JPt=s(r3e);NIr=r(JPt,"gptj"),JPt.forEach(t),qIr=r(fDe," \u2014 "),nZ=n(fDe,"A",{href:!0});var YPt=s(nZ);jIr=r(YPt,"FlaxGPTJModel"),YPt.forEach(t),DIr=r(fDe," (GPT-J model)"),fDe.forEach(t),GIr=i(ae),D0=n(ae,"LI",{});var gDe=s(D0);t3e=n(gDe,"STRONG",{});var KPt=s(t3e);OIr=r(KPt,"longt5"),KPt.forEach(t),VIr=r(gDe," \u2014 "),sZ=n(gDe,"A",{href:!0});var ZPt=s(sZ);XIr=r(ZPt,"FlaxLongT5Model"),ZPt.forEach(t),zIr=r(gDe," (LongT5 model)"),gDe.forEach(t),QIr=i(ae),G0=n(ae,"LI",{});var hDe=s(G0);a3e=n(hDe,"STRONG",{});var eBt=s(a3e);WIr=r(eBt,"marian"),eBt.forEach(t),HIr=r(hDe," \u2014 "),lZ=n(hDe,"A",{href:!0});var oBt=s(lZ);UIr=r(oBt,"FlaxMarianModel"),oBt.forEach(t),JIr=r(hDe," (Marian model)"),hDe.forEach(t),YIr=i(ae),O0=n(ae,"LI",{});var uDe=s(O0);n3e=n(uDe,"STRONG",{});var rBt=s(n3e);KIr=r(rBt,"mbart"),rBt.forEach(t),ZIr=r(uDe," \u2014 "),iZ=n(uDe,"A",{href:!0});var tBt=s(iZ);eNr=r(tBt,"FlaxMBartModel"),tBt.forEach(t),oNr=r(uDe," (mBART model)"),uDe.forEach(t),rNr=i(ae),V0=n(ae,"LI",{});var pDe=s(V0);s3e=n(pDe,"STRONG",{});var aBt=s(s3e);tNr=r(aBt,"mt5"),aBt.forEach(t),aNr=r(pDe," \u2014 "),dZ=n(pDe,"A",{href:!0});var nBt=s(dZ);nNr=r(nBt,"FlaxMT5Model"),nBt.forEach(t),sNr=r(pDe," (MT5 model)"),pDe.forEach(t),lNr=i(ae),X0=n(ae,"LI",{});var _De=s(X0);l3e=n(_De,"STRONG",{});var sBt=s(l3e);iNr=r(sBt,"opt"),sBt.forEach(t),dNr=r(_De," \u2014 "),cZ=n(_De,"A",{href:!0});var lBt=s(cZ);cNr=r(lBt,"FlaxOPTModel"),lBt.forEach(t),mNr=r(_De," (OPT model)"),_De.forEach(t),fNr=i(ae),z0=n(ae,"LI",{});var bDe=s(z0);i3e=n(bDe,"STRONG",{});var iBt=s(i3e);gNr=r(iBt,"pegasus"),iBt.forEach(t),hNr=r(bDe," \u2014 "),mZ=n(bDe,"A",{href:!0});var dBt=s(mZ);uNr=r(dBt,"FlaxPegasusModel"),dBt.forEach(t),pNr=r(bDe," (Pegasus model)"),bDe.forEach(t),_Nr=i(ae),Q0=n(ae,"LI",{});var vDe=s(Q0);d3e=n(vDe,"STRONG",{});var cBt=s(d3e);bNr=r(cBt,"roberta"),cBt.forEach(t),vNr=r(vDe," \u2014 "),fZ=n(vDe,"A",{href:!0});var mBt=s(fZ);FNr=r(mBt,"FlaxRobertaModel"),mBt.forEach(t),TNr=r(vDe," (RoBERTa model)"),vDe.forEach(t),MNr=i(ae),W0=n(ae,"LI",{});var FDe=s(W0);c3e=n(FDe,"STRONG",{});var fBt=s(c3e);ENr=r(fBt,"roformer"),fBt.forEach(t),CNr=r(FDe," \u2014 "),gZ=n(FDe,"A",{href:!0});var gBt=s(gZ);wNr=r(gBt,"FlaxRoFormerModel"),gBt.forEach(t),ANr=r(FDe," (RoFormer model)"),FDe.forEach(t),LNr=i(ae),H0=n(ae,"LI",{});var TDe=s(H0);m3e=n(TDe,"STRONG",{});var hBt=s(m3e);yNr=r(hBt,"t5"),hBt.forEach(t),xNr=r(TDe," \u2014 "),hZ=n(TDe,"A",{href:!0});var uBt=s(hZ);$Nr=r(uBt,"FlaxT5Model"),uBt.forEach(t),kNr=r(TDe," (T5 model)"),TDe.forEach(t),SNr=i(ae),U0=n(ae,"LI",{});var MDe=s(U0);f3e=n(MDe,"STRONG",{});var pBt=s(f3e);RNr=r(pBt,"vision-text-dual-encoder"),pBt.forEach(t),PNr=r(MDe," \u2014 "),uZ=n(MDe,"A",{href:!0});var _Bt=s(uZ);BNr=r(_Bt,"FlaxVisionTextDualEncoderModel"),_Bt.forEach(t),INr=r(MDe," (VisionTextDualEncoder model)"),MDe.forEach(t),NNr=i(ae),J0=n(ae,"LI",{});var EDe=s(J0);g3e=n(EDe,"STRONG",{});var bBt=s(g3e);qNr=r(bBt,"vit"),bBt.forEach(t),jNr=r(EDe," \u2014 "),pZ=n(EDe,"A",{href:!0});var vBt=s(pZ);DNr=r(vBt,"FlaxViTModel"),vBt.forEach(t),GNr=r(EDe," (ViT model)"),EDe.forEach(t),ONr=i(ae),Y0=n(ae,"LI",{});var CDe=s(Y0);h3e=n(CDe,"STRONG",{});var FBt=s(h3e);VNr=r(FBt,"wav2vec2"),FBt.forEach(t),XNr=r(CDe," \u2014 "),_Z=n(CDe,"A",{href:!0});var TBt=s(_Z);zNr=r(TBt,"FlaxWav2Vec2Model"),TBt.forEach(t),QNr=r(CDe," (Wav2Vec2 model)"),CDe.forEach(t),WNr=i(ae),K0=n(ae,"LI",{});var wDe=s(K0);u3e=n(wDe,"STRONG",{});var MBt=s(u3e);HNr=r(MBt,"xglm"),MBt.forEach(t),UNr=r(wDe," \u2014 "),bZ=n(wDe,"A",{href:!0});var EBt=s(bZ);JNr=r(EBt,"FlaxXGLMModel"),EBt.forEach(t),YNr=r(wDe," (XGLM model)"),wDe.forEach(t),KNr=i(ae),Z0=n(ae,"LI",{});var ADe=s(Z0);p3e=n(ADe,"STRONG",{});var CBt=s(p3e);ZNr=r(CBt,"xlm-roberta"),CBt.forEach(t),eqr=r(ADe," \u2014 "),vZ=n(ADe,"A",{href:!0});var wBt=s(vZ);oqr=r(wBt,"FlaxXLMRobertaModel"),wBt.forEach(t),rqr=r(ADe," (XLM-RoBERTa model)"),ADe.forEach(t),ae.forEach(t),tqr=i(Zl),T(ew.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),jVe=i(m),Qc=n(m,"H2",{class:!0});var Hze=s(Qc);ow=n(Hze,"A",{id:!0,class:!0,href:!0});var ABt=s(ow);_3e=n(ABt,"SPAN",{});var LBt=s(_3e);T(Gx.$$.fragment,LBt),LBt.forEach(t),ABt.forEach(t),aqr=i(Hze),b3e=n(Hze,"SPAN",{});var yBt=s(b3e);nqr=r(yBt,"FlaxAutoModelForCausalLM"),yBt.forEach(t),Hze.forEach(t),DVe=i(m),ur=n(m,"DIV",{class:!0});var ei=s(ur);T(Ox.$$.fragment,ei),sqr=i(ei),Wc=n(ei,"P",{});var ete=s(Wc);lqr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FZ=n(ete,"A",{href:!0});var xBt=s(FZ);iqr=r(xBt,"from_pretrained()"),xBt.forEach(t),dqr=r(ete," class method or the "),TZ=n(ete,"A",{href:!0});var $Bt=s(TZ);cqr=r($Bt,"from_config()"),$Bt.forEach(t),mqr=r(ete,` class
method.`),ete.forEach(t),fqr=i(ei),Vx=n(ei,"P",{});var Uze=s(Vx);gqr=r(Uze,"This class cannot be instantiated directly using "),v3e=n(Uze,"CODE",{});var kBt=s(v3e);hqr=r(kBt,"__init__()"),kBt.forEach(t),uqr=r(Uze," (throws an error)."),Uze.forEach(t),pqr=i(ei),zt=n(ei,"DIV",{class:!0});var l7=s(zt);T(Xx.$$.fragment,l7),_qr=i(l7),F3e=n(l7,"P",{});var SBt=s(F3e);bqr=r(SBt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SBt.forEach(t),vqr=i(l7),Hc=n(l7,"P",{});var ote=s(Hc);Fqr=r(ote,`Note:
Loading a model from its configuration file does `),T3e=n(ote,"STRONG",{});var RBt=s(T3e);Tqr=r(RBt,"not"),RBt.forEach(t),Mqr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(ote,"A",{href:!0});var PBt=s(MZ);Eqr=r(PBt,"from_pretrained()"),PBt.forEach(t),Cqr=r(ote," to load the model weights."),ote.forEach(t),wqr=i(l7),T(rw.$$.fragment,l7),l7.forEach(t),Aqr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(zx.$$.fragment,oi),Lqr=i(oi),M3e=n(oi,"P",{});var BBt=s(M3e);yqr=r(BBt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BBt.forEach(t),xqr=i(oi),Tn=n(oi,"P",{});var i7=s(Tn);$qr=r(i7,"The model class to instantiate is selected based on the "),E3e=n(i7,"CODE",{});var IBt=s(E3e);kqr=r(IBt,"model_type"),IBt.forEach(t),Sqr=r(i7,` property of the config object (either
passed as an argument or loaded from `),C3e=n(i7,"CODE",{});var NBt=s(C3e);Rqr=r(NBt,"pretrained_model_name_or_path"),NBt.forEach(t),Pqr=r(i7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(i7,"CODE",{});var qBt=s(w3e);Bqr=r(qBt,"pretrained_model_name_or_path"),qBt.forEach(t),Iqr=r(i7,":"),i7.forEach(t),Nqr=i(oi),xe=n(oi,"UL",{});var Ne=s(xe);tw=n(Ne,"LI",{});var LDe=s(tw);A3e=n(LDe,"STRONG",{});var jBt=s(A3e);qqr=r(jBt,"bart"),jBt.forEach(t),jqr=r(LDe," \u2014 "),EZ=n(LDe,"A",{href:!0});var DBt=s(EZ);Dqr=r(DBt,"FlaxBartForCausalLM"),DBt.forEach(t),Gqr=r(LDe," (BART model)"),LDe.forEach(t),Oqr=i(Ne),aw=n(Ne,"LI",{});var yDe=s(aw);L3e=n(yDe,"STRONG",{});var GBt=s(L3e);Vqr=r(GBt,"bert"),GBt.forEach(t),Xqr=r(yDe," \u2014 "),CZ=n(yDe,"A",{href:!0});var OBt=s(CZ);zqr=r(OBt,"FlaxBertForCausalLM"),OBt.forEach(t),Qqr=r(yDe," (BERT model)"),yDe.forEach(t),Wqr=i(Ne),nw=n(Ne,"LI",{});var xDe=s(nw);y3e=n(xDe,"STRONG",{});var VBt=s(y3e);Hqr=r(VBt,"big_bird"),VBt.forEach(t),Uqr=r(xDe," \u2014 "),wZ=n(xDe,"A",{href:!0});var XBt=s(wZ);Jqr=r(XBt,"FlaxBigBirdForCausalLM"),XBt.forEach(t),Yqr=r(xDe," (BigBird model)"),xDe.forEach(t),Kqr=i(Ne),sw=n(Ne,"LI",{});var $De=s(sw);x3e=n($De,"STRONG",{});var zBt=s(x3e);Zqr=r(zBt,"electra"),zBt.forEach(t),ejr=r($De," \u2014 "),AZ=n($De,"A",{href:!0});var QBt=s(AZ);ojr=r(QBt,"FlaxElectraForCausalLM"),QBt.forEach(t),rjr=r($De," (ELECTRA model)"),$De.forEach(t),tjr=i(Ne),lw=n(Ne,"LI",{});var kDe=s(lw);$3e=n(kDe,"STRONG",{});var WBt=s($3e);ajr=r(WBt,"gpt2"),WBt.forEach(t),njr=r(kDe," \u2014 "),LZ=n(kDe,"A",{href:!0});var HBt=s(LZ);sjr=r(HBt,"FlaxGPT2LMHeadModel"),HBt.forEach(t),ljr=r(kDe," (OpenAI GPT-2 model)"),kDe.forEach(t),ijr=i(Ne),iw=n(Ne,"LI",{});var SDe=s(iw);k3e=n(SDe,"STRONG",{});var UBt=s(k3e);djr=r(UBt,"gpt_neo"),UBt.forEach(t),cjr=r(SDe," \u2014 "),yZ=n(SDe,"A",{href:!0});var JBt=s(yZ);mjr=r(JBt,"FlaxGPTNeoForCausalLM"),JBt.forEach(t),fjr=r(SDe," (GPT Neo model)"),SDe.forEach(t),gjr=i(Ne),dw=n(Ne,"LI",{});var RDe=s(dw);S3e=n(RDe,"STRONG",{});var YBt=s(S3e);hjr=r(YBt,"gptj"),YBt.forEach(t),ujr=r(RDe," \u2014 "),xZ=n(RDe,"A",{href:!0});var KBt=s(xZ);pjr=r(KBt,"FlaxGPTJForCausalLM"),KBt.forEach(t),_jr=r(RDe," (GPT-J model)"),RDe.forEach(t),bjr=i(Ne),cw=n(Ne,"LI",{});var PDe=s(cw);R3e=n(PDe,"STRONG",{});var ZBt=s(R3e);vjr=r(ZBt,"opt"),ZBt.forEach(t),Fjr=r(PDe," \u2014 "),$Z=n(PDe,"A",{href:!0});var eIt=s($Z);Tjr=r(eIt,"FlaxOPTForCausalLM"),eIt.forEach(t),Mjr=r(PDe," (OPT model)"),PDe.forEach(t),Ejr=i(Ne),mw=n(Ne,"LI",{});var BDe=s(mw);P3e=n(BDe,"STRONG",{});var oIt=s(P3e);Cjr=r(oIt,"roberta"),oIt.forEach(t),wjr=r(BDe," \u2014 "),kZ=n(BDe,"A",{href:!0});var rIt=s(kZ);Ajr=r(rIt,"FlaxRobertaForCausalLM"),rIt.forEach(t),Ljr=r(BDe," (RoBERTa model)"),BDe.forEach(t),yjr=i(Ne),fw=n(Ne,"LI",{});var IDe=s(fw);B3e=n(IDe,"STRONG",{});var tIt=s(B3e);xjr=r(tIt,"xglm"),tIt.forEach(t),$jr=r(IDe," \u2014 "),SZ=n(IDe,"A",{href:!0});var aIt=s(SZ);kjr=r(aIt,"FlaxXGLMForCausalLM"),aIt.forEach(t),Sjr=r(IDe," (XGLM model)"),IDe.forEach(t),Ne.forEach(t),Rjr=i(oi),T(gw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),GVe=i(m),Uc=n(m,"H2",{class:!0});var Jze=s(Uc);hw=n(Jze,"A",{id:!0,class:!0,href:!0});var nIt=s(hw);I3e=n(nIt,"SPAN",{});var sIt=s(I3e);T(Qx.$$.fragment,sIt),sIt.forEach(t),nIt.forEach(t),Pjr=i(Jze),N3e=n(Jze,"SPAN",{});var lIt=s(N3e);Bjr=r(lIt,"FlaxAutoModelForPreTraining"),lIt.forEach(t),Jze.forEach(t),OVe=i(m),pr=n(m,"DIV",{class:!0});var ri=s(pr);T(Wx.$$.fragment,ri),Ijr=i(ri),Jc=n(ri,"P",{});var rte=s(Jc);Njr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RZ=n(rte,"A",{href:!0});var iIt=s(RZ);qjr=r(iIt,"from_pretrained()"),iIt.forEach(t),jjr=r(rte," class method or the "),PZ=n(rte,"A",{href:!0});var dIt=s(PZ);Djr=r(dIt,"from_config()"),dIt.forEach(t),Gjr=r(rte,` class
method.`),rte.forEach(t),Ojr=i(ri),Hx=n(ri,"P",{});var Yze=s(Hx);Vjr=r(Yze,"This class cannot be instantiated directly using "),q3e=n(Yze,"CODE",{});var cIt=s(q3e);Xjr=r(cIt,"__init__()"),cIt.forEach(t),zjr=r(Yze," (throws an error)."),Yze.forEach(t),Qjr=i(ri),Qt=n(ri,"DIV",{class:!0});var d7=s(Qt);T(Ux.$$.fragment,d7),Wjr=i(d7),j3e=n(d7,"P",{});var mIt=s(j3e);Hjr=r(mIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mIt.forEach(t),Ujr=i(d7),Yc=n(d7,"P",{});var tte=s(Yc);Jjr=r(tte,`Note:
Loading a model from its configuration file does `),D3e=n(tte,"STRONG",{});var fIt=s(D3e);Yjr=r(fIt,"not"),fIt.forEach(t),Kjr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=n(tte,"A",{href:!0});var gIt=s(BZ);Zjr=r(gIt,"from_pretrained()"),gIt.forEach(t),eDr=r(tte," to load the model weights."),tte.forEach(t),oDr=i(d7),T(uw.$$.fragment,d7),d7.forEach(t),rDr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Jx.$$.fragment,ti),tDr=i(ti),G3e=n(ti,"P",{});var hIt=s(G3e);aDr=r(hIt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hIt.forEach(t),nDr=i(ti),Mn=n(ti,"P",{});var c7=s(Mn);sDr=r(c7,"The model class to instantiate is selected based on the "),O3e=n(c7,"CODE",{});var uIt=s(O3e);lDr=r(uIt,"model_type"),uIt.forEach(t),iDr=r(c7,` property of the config object (either
passed as an argument or loaded from `),V3e=n(c7,"CODE",{});var pIt=s(V3e);dDr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),cDr=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(c7,"CODE",{});var _It=s(X3e);mDr=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),fDr=r(c7,":"),c7.forEach(t),gDr=i(ti),Ee=n(ti,"UL",{});var we=s(Ee);pw=n(we,"LI",{});var NDe=s(pw);z3e=n(NDe,"STRONG",{});var bIt=s(z3e);hDr=r(bIt,"albert"),bIt.forEach(t),uDr=r(NDe," \u2014 "),IZ=n(NDe,"A",{href:!0});var vIt=s(IZ);pDr=r(vIt,"FlaxAlbertForPreTraining"),vIt.forEach(t),_Dr=r(NDe," (ALBERT model)"),NDe.forEach(t),bDr=i(we),_w=n(we,"LI",{});var qDe=s(_w);Q3e=n(qDe,"STRONG",{});var FIt=s(Q3e);vDr=r(FIt,"bart"),FIt.forEach(t),FDr=r(qDe," \u2014 "),NZ=n(qDe,"A",{href:!0});var TIt=s(NZ);TDr=r(TIt,"FlaxBartForConditionalGeneration"),TIt.forEach(t),MDr=r(qDe," (BART model)"),qDe.forEach(t),EDr=i(we),bw=n(we,"LI",{});var jDe=s(bw);W3e=n(jDe,"STRONG",{});var MIt=s(W3e);CDr=r(MIt,"bert"),MIt.forEach(t),wDr=r(jDe," \u2014 "),qZ=n(jDe,"A",{href:!0});var EIt=s(qZ);ADr=r(EIt,"FlaxBertForPreTraining"),EIt.forEach(t),LDr=r(jDe," (BERT model)"),jDe.forEach(t),yDr=i(we),vw=n(we,"LI",{});var DDe=s(vw);H3e=n(DDe,"STRONG",{});var CIt=s(H3e);xDr=r(CIt,"big_bird"),CIt.forEach(t),$Dr=r(DDe," \u2014 "),jZ=n(DDe,"A",{href:!0});var wIt=s(jZ);kDr=r(wIt,"FlaxBigBirdForPreTraining"),wIt.forEach(t),SDr=r(DDe," (BigBird model)"),DDe.forEach(t),RDr=i(we),Fw=n(we,"LI",{});var GDe=s(Fw);U3e=n(GDe,"STRONG",{});var AIt=s(U3e);PDr=r(AIt,"electra"),AIt.forEach(t),BDr=r(GDe," \u2014 "),DZ=n(GDe,"A",{href:!0});var LIt=s(DZ);IDr=r(LIt,"FlaxElectraForPreTraining"),LIt.forEach(t),NDr=r(GDe," (ELECTRA model)"),GDe.forEach(t),qDr=i(we),Tw=n(we,"LI",{});var ODe=s(Tw);J3e=n(ODe,"STRONG",{});var yIt=s(J3e);jDr=r(yIt,"longt5"),yIt.forEach(t),DDr=r(ODe," \u2014 "),GZ=n(ODe,"A",{href:!0});var xIt=s(GZ);GDr=r(xIt,"FlaxLongT5ForConditionalGeneration"),xIt.forEach(t),ODr=r(ODe," (LongT5 model)"),ODe.forEach(t),VDr=i(we),Mw=n(we,"LI",{});var VDe=s(Mw);Y3e=n(VDe,"STRONG",{});var $It=s(Y3e);XDr=r($It,"mbart"),$It.forEach(t),zDr=r(VDe," \u2014 "),OZ=n(VDe,"A",{href:!0});var kIt=s(OZ);QDr=r(kIt,"FlaxMBartForConditionalGeneration"),kIt.forEach(t),WDr=r(VDe," (mBART model)"),VDe.forEach(t),HDr=i(we),Ew=n(we,"LI",{});var XDe=s(Ew);K3e=n(XDe,"STRONG",{});var SIt=s(K3e);UDr=r(SIt,"mt5"),SIt.forEach(t),JDr=r(XDe," \u2014 "),VZ=n(XDe,"A",{href:!0});var RIt=s(VZ);YDr=r(RIt,"FlaxMT5ForConditionalGeneration"),RIt.forEach(t),KDr=r(XDe," (MT5 model)"),XDe.forEach(t),ZDr=i(we),Cw=n(we,"LI",{});var zDe=s(Cw);Z3e=n(zDe,"STRONG",{});var PIt=s(Z3e);eGr=r(PIt,"roberta"),PIt.forEach(t),oGr=r(zDe," \u2014 "),XZ=n(zDe,"A",{href:!0});var BIt=s(XZ);rGr=r(BIt,"FlaxRobertaForMaskedLM"),BIt.forEach(t),tGr=r(zDe," (RoBERTa model)"),zDe.forEach(t),aGr=i(we),ww=n(we,"LI",{});var QDe=s(ww);e0e=n(QDe,"STRONG",{});var IIt=s(e0e);nGr=r(IIt,"roformer"),IIt.forEach(t),sGr=r(QDe," \u2014 "),zZ=n(QDe,"A",{href:!0});var NIt=s(zZ);lGr=r(NIt,"FlaxRoFormerForMaskedLM"),NIt.forEach(t),iGr=r(QDe," (RoFormer model)"),QDe.forEach(t),dGr=i(we),Aw=n(we,"LI",{});var WDe=s(Aw);o0e=n(WDe,"STRONG",{});var qIt=s(o0e);cGr=r(qIt,"t5"),qIt.forEach(t),mGr=r(WDe," \u2014 "),QZ=n(WDe,"A",{href:!0});var jIt=s(QZ);fGr=r(jIt,"FlaxT5ForConditionalGeneration"),jIt.forEach(t),gGr=r(WDe," (T5 model)"),WDe.forEach(t),hGr=i(we),Lw=n(we,"LI",{});var HDe=s(Lw);r0e=n(HDe,"STRONG",{});var DIt=s(r0e);uGr=r(DIt,"wav2vec2"),DIt.forEach(t),pGr=r(HDe," \u2014 "),WZ=n(HDe,"A",{href:!0});var GIt=s(WZ);_Gr=r(GIt,"FlaxWav2Vec2ForPreTraining"),GIt.forEach(t),bGr=r(HDe," (Wav2Vec2 model)"),HDe.forEach(t),vGr=i(we),yw=n(we,"LI",{});var UDe=s(yw);t0e=n(UDe,"STRONG",{});var OIt=s(t0e);FGr=r(OIt,"xlm-roberta"),OIt.forEach(t),TGr=r(UDe," \u2014 "),HZ=n(UDe,"A",{href:!0});var VIt=s(HZ);MGr=r(VIt,"FlaxXLMRobertaForMaskedLM"),VIt.forEach(t),EGr=r(UDe," (XLM-RoBERTa model)"),UDe.forEach(t),we.forEach(t),CGr=i(ti),T(xw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),VVe=i(m),Kc=n(m,"H2",{class:!0});var Kze=s(Kc);$w=n(Kze,"A",{id:!0,class:!0,href:!0});var XIt=s($w);a0e=n(XIt,"SPAN",{});var zIt=s(a0e);T(Yx.$$.fragment,zIt),zIt.forEach(t),XIt.forEach(t),wGr=i(Kze),n0e=n(Kze,"SPAN",{});var QIt=s(n0e);AGr=r(QIt,"FlaxAutoModelForMaskedLM"),QIt.forEach(t),Kze.forEach(t),XVe=i(m),_r=n(m,"DIV",{class:!0});var ai=s(_r);T(Kx.$$.fragment,ai),LGr=i(ai),Zc=n(ai,"P",{});var ate=s(Zc);yGr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UZ=n(ate,"A",{href:!0});var WIt=s(UZ);xGr=r(WIt,"from_pretrained()"),WIt.forEach(t),$Gr=r(ate," class method or the "),JZ=n(ate,"A",{href:!0});var HIt=s(JZ);kGr=r(HIt,"from_config()"),HIt.forEach(t),SGr=r(ate,` class
method.`),ate.forEach(t),RGr=i(ai),Zx=n(ai,"P",{});var Zze=s(Zx);PGr=r(Zze,"This class cannot be instantiated directly using "),s0e=n(Zze,"CODE",{});var UIt=s(s0e);BGr=r(UIt,"__init__()"),UIt.forEach(t),IGr=r(Zze," (throws an error)."),Zze.forEach(t),NGr=i(ai),Wt=n(ai,"DIV",{class:!0});var m7=s(Wt);T(e$.$$.fragment,m7),qGr=i(m7),l0e=n(m7,"P",{});var JIt=s(l0e);jGr=r(JIt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JIt.forEach(t),DGr=i(m7),em=n(m7,"P",{});var nte=s(em);GGr=r(nte,`Note:
Loading a model from its configuration file does `),i0e=n(nte,"STRONG",{});var YIt=s(i0e);OGr=r(YIt,"not"),YIt.forEach(t),VGr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=n(nte,"A",{href:!0});var KIt=s(YZ);XGr=r(KIt,"from_pretrained()"),KIt.forEach(t),zGr=r(nte," to load the model weights."),nte.forEach(t),QGr=i(m7),T(kw.$$.fragment,m7),m7.forEach(t),WGr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(o$.$$.fragment,ni),HGr=i(ni),d0e=n(ni,"P",{});var ZIt=s(d0e);UGr=r(ZIt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZIt.forEach(t),JGr=i(ni),En=n(ni,"P",{});var f7=s(En);YGr=r(f7,"The model class to instantiate is selected based on the "),c0e=n(f7,"CODE",{});var eNt=s(c0e);KGr=r(eNt,"model_type"),eNt.forEach(t),ZGr=r(f7,` property of the config object (either
passed as an argument or loaded from `),m0e=n(f7,"CODE",{});var oNt=s(m0e);eOr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),oOr=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=n(f7,"CODE",{});var rNt=s(f0e);rOr=r(rNt,"pretrained_model_name_or_path"),rNt.forEach(t),tOr=r(f7,":"),f7.forEach(t),aOr=i(ni),$e=n(ni,"UL",{});var qe=s($e);Sw=n(qe,"LI",{});var JDe=s(Sw);g0e=n(JDe,"STRONG",{});var tNt=s(g0e);nOr=r(tNt,"albert"),tNt.forEach(t),sOr=r(JDe," \u2014 "),KZ=n(JDe,"A",{href:!0});var aNt=s(KZ);lOr=r(aNt,"FlaxAlbertForMaskedLM"),aNt.forEach(t),iOr=r(JDe," (ALBERT model)"),JDe.forEach(t),dOr=i(qe),Rw=n(qe,"LI",{});var YDe=s(Rw);h0e=n(YDe,"STRONG",{});var nNt=s(h0e);cOr=r(nNt,"bart"),nNt.forEach(t),mOr=r(YDe," \u2014 "),ZZ=n(YDe,"A",{href:!0});var sNt=s(ZZ);fOr=r(sNt,"FlaxBartForConditionalGeneration"),sNt.forEach(t),gOr=r(YDe," (BART model)"),YDe.forEach(t),hOr=i(qe),Pw=n(qe,"LI",{});var KDe=s(Pw);u0e=n(KDe,"STRONG",{});var lNt=s(u0e);uOr=r(lNt,"bert"),lNt.forEach(t),pOr=r(KDe," \u2014 "),eee=n(KDe,"A",{href:!0});var iNt=s(eee);_Or=r(iNt,"FlaxBertForMaskedLM"),iNt.forEach(t),bOr=r(KDe," (BERT model)"),KDe.forEach(t),vOr=i(qe),Bw=n(qe,"LI",{});var ZDe=s(Bw);p0e=n(ZDe,"STRONG",{});var dNt=s(p0e);FOr=r(dNt,"big_bird"),dNt.forEach(t),TOr=r(ZDe," \u2014 "),oee=n(ZDe,"A",{href:!0});var cNt=s(oee);MOr=r(cNt,"FlaxBigBirdForMaskedLM"),cNt.forEach(t),EOr=r(ZDe," (BigBird model)"),ZDe.forEach(t),COr=i(qe),Iw=n(qe,"LI",{});var eGe=s(Iw);_0e=n(eGe,"STRONG",{});var mNt=s(_0e);wOr=r(mNt,"distilbert"),mNt.forEach(t),AOr=r(eGe," \u2014 "),ree=n(eGe,"A",{href:!0});var fNt=s(ree);LOr=r(fNt,"FlaxDistilBertForMaskedLM"),fNt.forEach(t),yOr=r(eGe," (DistilBERT model)"),eGe.forEach(t),xOr=i(qe),Nw=n(qe,"LI",{});var oGe=s(Nw);b0e=n(oGe,"STRONG",{});var gNt=s(b0e);$Or=r(gNt,"electra"),gNt.forEach(t),kOr=r(oGe," \u2014 "),tee=n(oGe,"A",{href:!0});var hNt=s(tee);SOr=r(hNt,"FlaxElectraForMaskedLM"),hNt.forEach(t),ROr=r(oGe," (ELECTRA model)"),oGe.forEach(t),POr=i(qe),qw=n(qe,"LI",{});var rGe=s(qw);v0e=n(rGe,"STRONG",{});var uNt=s(v0e);BOr=r(uNt,"mbart"),uNt.forEach(t),IOr=r(rGe," \u2014 "),aee=n(rGe,"A",{href:!0});var pNt=s(aee);NOr=r(pNt,"FlaxMBartForConditionalGeneration"),pNt.forEach(t),qOr=r(rGe," (mBART model)"),rGe.forEach(t),jOr=i(qe),jw=n(qe,"LI",{});var tGe=s(jw);F0e=n(tGe,"STRONG",{});var _Nt=s(F0e);DOr=r(_Nt,"roberta"),_Nt.forEach(t),GOr=r(tGe," \u2014 "),nee=n(tGe,"A",{href:!0});var bNt=s(nee);OOr=r(bNt,"FlaxRobertaForMaskedLM"),bNt.forEach(t),VOr=r(tGe," (RoBERTa model)"),tGe.forEach(t),XOr=i(qe),Dw=n(qe,"LI",{});var aGe=s(Dw);T0e=n(aGe,"STRONG",{});var vNt=s(T0e);zOr=r(vNt,"roformer"),vNt.forEach(t),QOr=r(aGe," \u2014 "),see=n(aGe,"A",{href:!0});var FNt=s(see);WOr=r(FNt,"FlaxRoFormerForMaskedLM"),FNt.forEach(t),HOr=r(aGe," (RoFormer model)"),aGe.forEach(t),UOr=i(qe),Gw=n(qe,"LI",{});var nGe=s(Gw);M0e=n(nGe,"STRONG",{});var TNt=s(M0e);JOr=r(TNt,"xlm-roberta"),TNt.forEach(t),YOr=r(nGe," \u2014 "),lee=n(nGe,"A",{href:!0});var MNt=s(lee);KOr=r(MNt,"FlaxXLMRobertaForMaskedLM"),MNt.forEach(t),ZOr=r(nGe," (XLM-RoBERTa model)"),nGe.forEach(t),qe.forEach(t),eVr=i(ni),T(Ow.$$.fragment,ni),ni.forEach(t),ai.forEach(t),zVe=i(m),om=n(m,"H2",{class:!0});var eQe=s(om);Vw=n(eQe,"A",{id:!0,class:!0,href:!0});var ENt=s(Vw);E0e=n(ENt,"SPAN",{});var CNt=s(E0e);T(r$.$$.fragment,CNt),CNt.forEach(t),ENt.forEach(t),oVr=i(eQe),C0e=n(eQe,"SPAN",{});var wNt=s(C0e);rVr=r(wNt,"FlaxAutoModelForSeq2SeqLM"),wNt.forEach(t),eQe.forEach(t),QVe=i(m),br=n(m,"DIV",{class:!0});var si=s(br);T(t$.$$.fragment,si),tVr=i(si),rm=n(si,"P",{});var ste=s(rm);aVr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iee=n(ste,"A",{href:!0});var ANt=s(iee);nVr=r(ANt,"from_pretrained()"),ANt.forEach(t),sVr=r(ste," class method or the "),dee=n(ste,"A",{href:!0});var LNt=s(dee);lVr=r(LNt,"from_config()"),LNt.forEach(t),iVr=r(ste,` class
method.`),ste.forEach(t),dVr=i(si),a$=n(si,"P",{});var oQe=s(a$);cVr=r(oQe,"This class cannot be instantiated directly using "),w0e=n(oQe,"CODE",{});var yNt=s(w0e);mVr=r(yNt,"__init__()"),yNt.forEach(t),fVr=r(oQe," (throws an error)."),oQe.forEach(t),gVr=i(si),Ht=n(si,"DIV",{class:!0});var g7=s(Ht);T(n$.$$.fragment,g7),hVr=i(g7),A0e=n(g7,"P",{});var xNt=s(A0e);uVr=r(xNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xNt.forEach(t),pVr=i(g7),tm=n(g7,"P",{});var lte=s(tm);_Vr=r(lte,`Note:
Loading a model from its configuration file does `),L0e=n(lte,"STRONG",{});var $Nt=s(L0e);bVr=r($Nt,"not"),$Nt.forEach(t),vVr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=n(lte,"A",{href:!0});var kNt=s(cee);FVr=r(kNt,"from_pretrained()"),kNt.forEach(t),TVr=r(lte," to load the model weights."),lte.forEach(t),MVr=i(g7),T(Xw.$$.fragment,g7),g7.forEach(t),EVr=i(si),Qr=n(si,"DIV",{class:!0});var li=s(Qr);T(s$.$$.fragment,li),CVr=i(li),y0e=n(li,"P",{});var SNt=s(y0e);wVr=r(SNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SNt.forEach(t),AVr=i(li),Cn=n(li,"P",{});var h7=s(Cn);LVr=r(h7,"The model class to instantiate is selected based on the "),x0e=n(h7,"CODE",{});var RNt=s(x0e);yVr=r(RNt,"model_type"),RNt.forEach(t),xVr=r(h7,` property of the config object (either
passed as an argument or loaded from `),$0e=n(h7,"CODE",{});var PNt=s($0e);$Vr=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),kVr=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=n(h7,"CODE",{});var BNt=s(k0e);SVr=r(BNt,"pretrained_model_name_or_path"),BNt.forEach(t),RVr=r(h7,":"),h7.forEach(t),PVr=i(li),ke=n(li,"UL",{});var je=s(ke);zw=n(je,"LI",{});var sGe=s(zw);S0e=n(sGe,"STRONG",{});var INt=s(S0e);BVr=r(INt,"bart"),INt.forEach(t),IVr=r(sGe," \u2014 "),mee=n(sGe,"A",{href:!0});var NNt=s(mee);NVr=r(NNt,"FlaxBartForConditionalGeneration"),NNt.forEach(t),qVr=r(sGe," (BART model)"),sGe.forEach(t),jVr=i(je),Qw=n(je,"LI",{});var lGe=s(Qw);R0e=n(lGe,"STRONG",{});var qNt=s(R0e);DVr=r(qNt,"blenderbot"),qNt.forEach(t),GVr=r(lGe," \u2014 "),fee=n(lGe,"A",{href:!0});var jNt=s(fee);OVr=r(jNt,"FlaxBlenderbotForConditionalGeneration"),jNt.forEach(t),VVr=r(lGe," (Blenderbot model)"),lGe.forEach(t),XVr=i(je),Ww=n(je,"LI",{});var iGe=s(Ww);P0e=n(iGe,"STRONG",{});var DNt=s(P0e);zVr=r(DNt,"blenderbot-small"),DNt.forEach(t),QVr=r(iGe," \u2014 "),gee=n(iGe,"A",{href:!0});var GNt=s(gee);WVr=r(GNt,"FlaxBlenderbotSmallForConditionalGeneration"),GNt.forEach(t),HVr=r(iGe," (BlenderbotSmall model)"),iGe.forEach(t),UVr=i(je),Hw=n(je,"LI",{});var dGe=s(Hw);B0e=n(dGe,"STRONG",{});var ONt=s(B0e);JVr=r(ONt,"encoder-decoder"),ONt.forEach(t),YVr=r(dGe," \u2014 "),hee=n(dGe,"A",{href:!0});var VNt=s(hee);KVr=r(VNt,"FlaxEncoderDecoderModel"),VNt.forEach(t),ZVr=r(dGe," (Encoder decoder model)"),dGe.forEach(t),eXr=i(je),Uw=n(je,"LI",{});var cGe=s(Uw);I0e=n(cGe,"STRONG",{});var XNt=s(I0e);oXr=r(XNt,"longt5"),XNt.forEach(t),rXr=r(cGe," \u2014 "),uee=n(cGe,"A",{href:!0});var zNt=s(uee);tXr=r(zNt,"FlaxLongT5ForConditionalGeneration"),zNt.forEach(t),aXr=r(cGe," (LongT5 model)"),cGe.forEach(t),nXr=i(je),Jw=n(je,"LI",{});var mGe=s(Jw);N0e=n(mGe,"STRONG",{});var QNt=s(N0e);sXr=r(QNt,"marian"),QNt.forEach(t),lXr=r(mGe," \u2014 "),pee=n(mGe,"A",{href:!0});var WNt=s(pee);iXr=r(WNt,"FlaxMarianMTModel"),WNt.forEach(t),dXr=r(mGe," (Marian model)"),mGe.forEach(t),cXr=i(je),Yw=n(je,"LI",{});var fGe=s(Yw);q0e=n(fGe,"STRONG",{});var HNt=s(q0e);mXr=r(HNt,"mbart"),HNt.forEach(t),fXr=r(fGe," \u2014 "),_ee=n(fGe,"A",{href:!0});var UNt=s(_ee);gXr=r(UNt,"FlaxMBartForConditionalGeneration"),UNt.forEach(t),hXr=r(fGe," (mBART model)"),fGe.forEach(t),uXr=i(je),Kw=n(je,"LI",{});var gGe=s(Kw);j0e=n(gGe,"STRONG",{});var JNt=s(j0e);pXr=r(JNt,"mt5"),JNt.forEach(t),_Xr=r(gGe," \u2014 "),bee=n(gGe,"A",{href:!0});var YNt=s(bee);bXr=r(YNt,"FlaxMT5ForConditionalGeneration"),YNt.forEach(t),vXr=r(gGe," (MT5 model)"),gGe.forEach(t),FXr=i(je),Zw=n(je,"LI",{});var hGe=s(Zw);D0e=n(hGe,"STRONG",{});var KNt=s(D0e);TXr=r(KNt,"pegasus"),KNt.forEach(t),MXr=r(hGe," \u2014 "),vee=n(hGe,"A",{href:!0});var ZNt=s(vee);EXr=r(ZNt,"FlaxPegasusForConditionalGeneration"),ZNt.forEach(t),CXr=r(hGe," (Pegasus model)"),hGe.forEach(t),wXr=i(je),eA=n(je,"LI",{});var uGe=s(eA);G0e=n(uGe,"STRONG",{});var eqt=s(G0e);AXr=r(eqt,"t5"),eqt.forEach(t),LXr=r(uGe," \u2014 "),Fee=n(uGe,"A",{href:!0});var oqt=s(Fee);yXr=r(oqt,"FlaxT5ForConditionalGeneration"),oqt.forEach(t),xXr=r(uGe," (T5 model)"),uGe.forEach(t),je.forEach(t),$Xr=i(li),T(oA.$$.fragment,li),li.forEach(t),si.forEach(t),WVe=i(m),am=n(m,"H2",{class:!0});var rQe=s(am);rA=n(rQe,"A",{id:!0,class:!0,href:!0});var rqt=s(rA);O0e=n(rqt,"SPAN",{});var tqt=s(O0e);T(l$.$$.fragment,tqt),tqt.forEach(t),rqt.forEach(t),kXr=i(rQe),V0e=n(rQe,"SPAN",{});var aqt=s(V0e);SXr=r(aqt,"FlaxAutoModelForSequenceClassification"),aqt.forEach(t),rQe.forEach(t),HVe=i(m),vr=n(m,"DIV",{class:!0});var ii=s(vr);T(i$.$$.fragment,ii),RXr=i(ii),nm=n(ii,"P",{});var ite=s(nm);PXr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Tee=n(ite,"A",{href:!0});var nqt=s(Tee);BXr=r(nqt,"from_pretrained()"),nqt.forEach(t),IXr=r(ite," class method or the "),Mee=n(ite,"A",{href:!0});var sqt=s(Mee);NXr=r(sqt,"from_config()"),sqt.forEach(t),qXr=r(ite,` class
method.`),ite.forEach(t),jXr=i(ii),d$=n(ii,"P",{});var tQe=s(d$);DXr=r(tQe,"This class cannot be instantiated directly using "),X0e=n(tQe,"CODE",{});var lqt=s(X0e);GXr=r(lqt,"__init__()"),lqt.forEach(t),OXr=r(tQe," (throws an error)."),tQe.forEach(t),VXr=i(ii),Ut=n(ii,"DIV",{class:!0});var u7=s(Ut);T(c$.$$.fragment,u7),XXr=i(u7),z0e=n(u7,"P",{});var iqt=s(z0e);zXr=r(iqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iqt.forEach(t),QXr=i(u7),sm=n(u7,"P",{});var dte=s(sm);WXr=r(dte,`Note:
Loading a model from its configuration file does `),Q0e=n(dte,"STRONG",{});var dqt=s(Q0e);HXr=r(dqt,"not"),dqt.forEach(t),UXr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=n(dte,"A",{href:!0});var cqt=s(Eee);JXr=r(cqt,"from_pretrained()"),cqt.forEach(t),YXr=r(dte," to load the model weights."),dte.forEach(t),KXr=i(u7),T(tA.$$.fragment,u7),u7.forEach(t),ZXr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(m$.$$.fragment,di),ezr=i(di),W0e=n(di,"P",{});var mqt=s(W0e);ozr=r(mqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mqt.forEach(t),rzr=i(di),wn=n(di,"P",{});var p7=s(wn);tzr=r(p7,"The model class to instantiate is selected based on the "),H0e=n(p7,"CODE",{});var fqt=s(H0e);azr=r(fqt,"model_type"),fqt.forEach(t),nzr=r(p7,` property of the config object (either
passed as an argument or loaded from `),U0e=n(p7,"CODE",{});var gqt=s(U0e);szr=r(gqt,"pretrained_model_name_or_path"),gqt.forEach(t),lzr=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(p7,"CODE",{});var hqt=s(J0e);izr=r(hqt,"pretrained_model_name_or_path"),hqt.forEach(t),dzr=r(p7,":"),p7.forEach(t),czr=i(di),Se=n(di,"UL",{});var De=s(Se);aA=n(De,"LI",{});var pGe=s(aA);Y0e=n(pGe,"STRONG",{});var uqt=s(Y0e);mzr=r(uqt,"albert"),uqt.forEach(t),fzr=r(pGe," \u2014 "),Cee=n(pGe,"A",{href:!0});var pqt=s(Cee);gzr=r(pqt,"FlaxAlbertForSequenceClassification"),pqt.forEach(t),hzr=r(pGe," (ALBERT model)"),pGe.forEach(t),uzr=i(De),nA=n(De,"LI",{});var _Ge=s(nA);K0e=n(_Ge,"STRONG",{});var _qt=s(K0e);pzr=r(_qt,"bart"),_qt.forEach(t),_zr=r(_Ge," \u2014 "),wee=n(_Ge,"A",{href:!0});var bqt=s(wee);bzr=r(bqt,"FlaxBartForSequenceClassification"),bqt.forEach(t),vzr=r(_Ge," (BART model)"),_Ge.forEach(t),Fzr=i(De),sA=n(De,"LI",{});var bGe=s(sA);Z0e=n(bGe,"STRONG",{});var vqt=s(Z0e);Tzr=r(vqt,"bert"),vqt.forEach(t),Mzr=r(bGe," \u2014 "),Aee=n(bGe,"A",{href:!0});var Fqt=s(Aee);Ezr=r(Fqt,"FlaxBertForSequenceClassification"),Fqt.forEach(t),Czr=r(bGe," (BERT model)"),bGe.forEach(t),wzr=i(De),lA=n(De,"LI",{});var vGe=s(lA);ewe=n(vGe,"STRONG",{});var Tqt=s(ewe);Azr=r(Tqt,"big_bird"),Tqt.forEach(t),Lzr=r(vGe," \u2014 "),Lee=n(vGe,"A",{href:!0});var Mqt=s(Lee);yzr=r(Mqt,"FlaxBigBirdForSequenceClassification"),Mqt.forEach(t),xzr=r(vGe," (BigBird model)"),vGe.forEach(t),$zr=i(De),iA=n(De,"LI",{});var FGe=s(iA);owe=n(FGe,"STRONG",{});var Eqt=s(owe);kzr=r(Eqt,"distilbert"),Eqt.forEach(t),Szr=r(FGe," \u2014 "),yee=n(FGe,"A",{href:!0});var Cqt=s(yee);Rzr=r(Cqt,"FlaxDistilBertForSequenceClassification"),Cqt.forEach(t),Pzr=r(FGe," (DistilBERT model)"),FGe.forEach(t),Bzr=i(De),dA=n(De,"LI",{});var TGe=s(dA);rwe=n(TGe,"STRONG",{});var wqt=s(rwe);Izr=r(wqt,"electra"),wqt.forEach(t),Nzr=r(TGe," \u2014 "),xee=n(TGe,"A",{href:!0});var Aqt=s(xee);qzr=r(Aqt,"FlaxElectraForSequenceClassification"),Aqt.forEach(t),jzr=r(TGe," (ELECTRA model)"),TGe.forEach(t),Dzr=i(De),cA=n(De,"LI",{});var MGe=s(cA);twe=n(MGe,"STRONG",{});var Lqt=s(twe);Gzr=r(Lqt,"mbart"),Lqt.forEach(t),Ozr=r(MGe," \u2014 "),$ee=n(MGe,"A",{href:!0});var yqt=s($ee);Vzr=r(yqt,"FlaxMBartForSequenceClassification"),yqt.forEach(t),Xzr=r(MGe," (mBART model)"),MGe.forEach(t),zzr=i(De),mA=n(De,"LI",{});var EGe=s(mA);awe=n(EGe,"STRONG",{});var xqt=s(awe);Qzr=r(xqt,"roberta"),xqt.forEach(t),Wzr=r(EGe," \u2014 "),kee=n(EGe,"A",{href:!0});var $qt=s(kee);Hzr=r($qt,"FlaxRobertaForSequenceClassification"),$qt.forEach(t),Uzr=r(EGe," (RoBERTa model)"),EGe.forEach(t),Jzr=i(De),fA=n(De,"LI",{});var CGe=s(fA);nwe=n(CGe,"STRONG",{});var kqt=s(nwe);Yzr=r(kqt,"roformer"),kqt.forEach(t),Kzr=r(CGe," \u2014 "),See=n(CGe,"A",{href:!0});var Sqt=s(See);Zzr=r(Sqt,"FlaxRoFormerForSequenceClassification"),Sqt.forEach(t),eQr=r(CGe," (RoFormer model)"),CGe.forEach(t),oQr=i(De),gA=n(De,"LI",{});var wGe=s(gA);swe=n(wGe,"STRONG",{});var Rqt=s(swe);rQr=r(Rqt,"xlm-roberta"),Rqt.forEach(t),tQr=r(wGe," \u2014 "),Ree=n(wGe,"A",{href:!0});var Pqt=s(Ree);aQr=r(Pqt,"FlaxXLMRobertaForSequenceClassification"),Pqt.forEach(t),nQr=r(wGe," (XLM-RoBERTa model)"),wGe.forEach(t),De.forEach(t),sQr=i(di),T(hA.$$.fragment,di),di.forEach(t),ii.forEach(t),UVe=i(m),lm=n(m,"H2",{class:!0});var aQe=s(lm);uA=n(aQe,"A",{id:!0,class:!0,href:!0});var Bqt=s(uA);lwe=n(Bqt,"SPAN",{});var Iqt=s(lwe);T(f$.$$.fragment,Iqt),Iqt.forEach(t),Bqt.forEach(t),lQr=i(aQe),iwe=n(aQe,"SPAN",{});var Nqt=s(iwe);iQr=r(Nqt,"FlaxAutoModelForQuestionAnswering"),Nqt.forEach(t),aQe.forEach(t),JVe=i(m),Fr=n(m,"DIV",{class:!0});var ci=s(Fr);T(g$.$$.fragment,ci),dQr=i(ci),im=n(ci,"P",{});var cte=s(im);cQr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Pee=n(cte,"A",{href:!0});var qqt=s(Pee);mQr=r(qqt,"from_pretrained()"),qqt.forEach(t),fQr=r(cte," class method or the "),Bee=n(cte,"A",{href:!0});var jqt=s(Bee);gQr=r(jqt,"from_config()"),jqt.forEach(t),hQr=r(cte,` class
method.`),cte.forEach(t),uQr=i(ci),h$=n(ci,"P",{});var nQe=s(h$);pQr=r(nQe,"This class cannot be instantiated directly using "),dwe=n(nQe,"CODE",{});var Dqt=s(dwe);_Qr=r(Dqt,"__init__()"),Dqt.forEach(t),bQr=r(nQe," (throws an error)."),nQe.forEach(t),vQr=i(ci),Jt=n(ci,"DIV",{class:!0});var _7=s(Jt);T(u$.$$.fragment,_7),FQr=i(_7),cwe=n(_7,"P",{});var Gqt=s(cwe);TQr=r(Gqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gqt.forEach(t),MQr=i(_7),dm=n(_7,"P",{});var mte=s(dm);EQr=r(mte,`Note:
Loading a model from its configuration file does `),mwe=n(mte,"STRONG",{});var Oqt=s(mwe);CQr=r(Oqt,"not"),Oqt.forEach(t),wQr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=n(mte,"A",{href:!0});var Vqt=s(Iee);AQr=r(Vqt,"from_pretrained()"),Vqt.forEach(t),LQr=r(mte," to load the model weights."),mte.forEach(t),yQr=i(_7),T(pA.$$.fragment,_7),_7.forEach(t),xQr=i(ci),Hr=n(ci,"DIV",{class:!0});var mi=s(Hr);T(p$.$$.fragment,mi),$Qr=i(mi),fwe=n(mi,"P",{});var Xqt=s(fwe);kQr=r(Xqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xqt.forEach(t),SQr=i(mi),An=n(mi,"P",{});var b7=s(An);RQr=r(b7,"The model class to instantiate is selected based on the "),gwe=n(b7,"CODE",{});var zqt=s(gwe);PQr=r(zqt,"model_type"),zqt.forEach(t),BQr=r(b7,` property of the config object (either
passed as an argument or loaded from `),hwe=n(b7,"CODE",{});var Qqt=s(hwe);IQr=r(Qqt,"pretrained_model_name_or_path"),Qqt.forEach(t),NQr=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uwe=n(b7,"CODE",{});var Wqt=s(uwe);qQr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),jQr=r(b7,":"),b7.forEach(t),DQr=i(mi),Re=n(mi,"UL",{});var Ge=s(Re);_A=n(Ge,"LI",{});var AGe=s(_A);pwe=n(AGe,"STRONG",{});var Hqt=s(pwe);GQr=r(Hqt,"albert"),Hqt.forEach(t),OQr=r(AGe," \u2014 "),Nee=n(AGe,"A",{href:!0});var Uqt=s(Nee);VQr=r(Uqt,"FlaxAlbertForQuestionAnswering"),Uqt.forEach(t),XQr=r(AGe," (ALBERT model)"),AGe.forEach(t),zQr=i(Ge),bA=n(Ge,"LI",{});var LGe=s(bA);_we=n(LGe,"STRONG",{});var Jqt=s(_we);QQr=r(Jqt,"bart"),Jqt.forEach(t),WQr=r(LGe," \u2014 "),qee=n(LGe,"A",{href:!0});var Yqt=s(qee);HQr=r(Yqt,"FlaxBartForQuestionAnswering"),Yqt.forEach(t),UQr=r(LGe," (BART model)"),LGe.forEach(t),JQr=i(Ge),vA=n(Ge,"LI",{});var yGe=s(vA);bwe=n(yGe,"STRONG",{});var Kqt=s(bwe);YQr=r(Kqt,"bert"),Kqt.forEach(t),KQr=r(yGe," \u2014 "),jee=n(yGe,"A",{href:!0});var Zqt=s(jee);ZQr=r(Zqt,"FlaxBertForQuestionAnswering"),Zqt.forEach(t),eWr=r(yGe," (BERT model)"),yGe.forEach(t),oWr=i(Ge),FA=n(Ge,"LI",{});var xGe=s(FA);vwe=n(xGe,"STRONG",{});var ejt=s(vwe);rWr=r(ejt,"big_bird"),ejt.forEach(t),tWr=r(xGe," \u2014 "),Dee=n(xGe,"A",{href:!0});var ojt=s(Dee);aWr=r(ojt,"FlaxBigBirdForQuestionAnswering"),ojt.forEach(t),nWr=r(xGe," (BigBird model)"),xGe.forEach(t),sWr=i(Ge),TA=n(Ge,"LI",{});var $Ge=s(TA);Fwe=n($Ge,"STRONG",{});var rjt=s(Fwe);lWr=r(rjt,"distilbert"),rjt.forEach(t),iWr=r($Ge," \u2014 "),Gee=n($Ge,"A",{href:!0});var tjt=s(Gee);dWr=r(tjt,"FlaxDistilBertForQuestionAnswering"),tjt.forEach(t),cWr=r($Ge," (DistilBERT model)"),$Ge.forEach(t),mWr=i(Ge),MA=n(Ge,"LI",{});var kGe=s(MA);Twe=n(kGe,"STRONG",{});var ajt=s(Twe);fWr=r(ajt,"electra"),ajt.forEach(t),gWr=r(kGe," \u2014 "),Oee=n(kGe,"A",{href:!0});var njt=s(Oee);hWr=r(njt,"FlaxElectraForQuestionAnswering"),njt.forEach(t),uWr=r(kGe," (ELECTRA model)"),kGe.forEach(t),pWr=i(Ge),EA=n(Ge,"LI",{});var SGe=s(EA);Mwe=n(SGe,"STRONG",{});var sjt=s(Mwe);_Wr=r(sjt,"mbart"),sjt.forEach(t),bWr=r(SGe," \u2014 "),Vee=n(SGe,"A",{href:!0});var ljt=s(Vee);vWr=r(ljt,"FlaxMBartForQuestionAnswering"),ljt.forEach(t),FWr=r(SGe," (mBART model)"),SGe.forEach(t),TWr=i(Ge),CA=n(Ge,"LI",{});var RGe=s(CA);Ewe=n(RGe,"STRONG",{});var ijt=s(Ewe);MWr=r(ijt,"roberta"),ijt.forEach(t),EWr=r(RGe," \u2014 "),Xee=n(RGe,"A",{href:!0});var djt=s(Xee);CWr=r(djt,"FlaxRobertaForQuestionAnswering"),djt.forEach(t),wWr=r(RGe," (RoBERTa model)"),RGe.forEach(t),AWr=i(Ge),wA=n(Ge,"LI",{});var PGe=s(wA);Cwe=n(PGe,"STRONG",{});var cjt=s(Cwe);LWr=r(cjt,"roformer"),cjt.forEach(t),yWr=r(PGe," \u2014 "),zee=n(PGe,"A",{href:!0});var mjt=s(zee);xWr=r(mjt,"FlaxRoFormerForQuestionAnswering"),mjt.forEach(t),$Wr=r(PGe," (RoFormer model)"),PGe.forEach(t),kWr=i(Ge),AA=n(Ge,"LI",{});var BGe=s(AA);wwe=n(BGe,"STRONG",{});var fjt=s(wwe);SWr=r(fjt,"xlm-roberta"),fjt.forEach(t),RWr=r(BGe," \u2014 "),Qee=n(BGe,"A",{href:!0});var gjt=s(Qee);PWr=r(gjt,"FlaxXLMRobertaForQuestionAnswering"),gjt.forEach(t),BWr=r(BGe," (XLM-RoBERTa model)"),BGe.forEach(t),Ge.forEach(t),IWr=i(mi),T(LA.$$.fragment,mi),mi.forEach(t),ci.forEach(t),YVe=i(m),cm=n(m,"H2",{class:!0});var sQe=s(cm);yA=n(sQe,"A",{id:!0,class:!0,href:!0});var hjt=s(yA);Awe=n(hjt,"SPAN",{});var ujt=s(Awe);T(_$.$$.fragment,ujt),ujt.forEach(t),hjt.forEach(t),NWr=i(sQe),Lwe=n(sQe,"SPAN",{});var pjt=s(Lwe);qWr=r(pjt,"FlaxAutoModelForTokenClassification"),pjt.forEach(t),sQe.forEach(t),KVe=i(m),Tr=n(m,"DIV",{class:!0});var fi=s(Tr);T(b$.$$.fragment,fi),jWr=i(fi),mm=n(fi,"P",{});var fte=s(mm);DWr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Wee=n(fte,"A",{href:!0});var _jt=s(Wee);GWr=r(_jt,"from_pretrained()"),_jt.forEach(t),OWr=r(fte," class method or the "),Hee=n(fte,"A",{href:!0});var bjt=s(Hee);VWr=r(bjt,"from_config()"),bjt.forEach(t),XWr=r(fte,` class
method.`),fte.forEach(t),zWr=i(fi),v$=n(fi,"P",{});var lQe=s(v$);QWr=r(lQe,"This class cannot be instantiated directly using "),ywe=n(lQe,"CODE",{});var vjt=s(ywe);WWr=r(vjt,"__init__()"),vjt.forEach(t),HWr=r(lQe," (throws an error)."),lQe.forEach(t),UWr=i(fi),Yt=n(fi,"DIV",{class:!0});var v7=s(Yt);T(F$.$$.fragment,v7),JWr=i(v7),xwe=n(v7,"P",{});var Fjt=s(xwe);YWr=r(Fjt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fjt.forEach(t),KWr=i(v7),fm=n(v7,"P",{});var gte=s(fm);ZWr=r(gte,`Note:
Loading a model from its configuration file does `),$we=n(gte,"STRONG",{});var Tjt=s($we);eHr=r(Tjt,"not"),Tjt.forEach(t),oHr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(gte,"A",{href:!0});var Mjt=s(Uee);rHr=r(Mjt,"from_pretrained()"),Mjt.forEach(t),tHr=r(gte," to load the model weights."),gte.forEach(t),aHr=i(v7),T(xA.$$.fragment,v7),v7.forEach(t),nHr=i(fi),Ur=n(fi,"DIV",{class:!0});var gi=s(Ur);T(T$.$$.fragment,gi),sHr=i(gi),kwe=n(gi,"P",{});var Ejt=s(kwe);lHr=r(Ejt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ejt.forEach(t),iHr=i(gi),Ln=n(gi,"P",{});var F7=s(Ln);dHr=r(F7,"The model class to instantiate is selected based on the "),Swe=n(F7,"CODE",{});var Cjt=s(Swe);cHr=r(Cjt,"model_type"),Cjt.forEach(t),mHr=r(F7,` property of the config object (either
passed as an argument or loaded from `),Rwe=n(F7,"CODE",{});var wjt=s(Rwe);fHr=r(wjt,"pretrained_model_name_or_path"),wjt.forEach(t),gHr=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pwe=n(F7,"CODE",{});var Ajt=s(Pwe);hHr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),uHr=r(F7,":"),F7.forEach(t),pHr=i(gi),Ve=n(gi,"UL",{});var To=s(Ve);$A=n(To,"LI",{});var IGe=s($A);Bwe=n(IGe,"STRONG",{});var Ljt=s(Bwe);_Hr=r(Ljt,"albert"),Ljt.forEach(t),bHr=r(IGe," \u2014 "),Jee=n(IGe,"A",{href:!0});var yjt=s(Jee);vHr=r(yjt,"FlaxAlbertForTokenClassification"),yjt.forEach(t),FHr=r(IGe," (ALBERT model)"),IGe.forEach(t),THr=i(To),kA=n(To,"LI",{});var NGe=s(kA);Iwe=n(NGe,"STRONG",{});var xjt=s(Iwe);MHr=r(xjt,"bert"),xjt.forEach(t),EHr=r(NGe," \u2014 "),Yee=n(NGe,"A",{href:!0});var $jt=s(Yee);CHr=r($jt,"FlaxBertForTokenClassification"),$jt.forEach(t),wHr=r(NGe," (BERT model)"),NGe.forEach(t),AHr=i(To),SA=n(To,"LI",{});var qGe=s(SA);Nwe=n(qGe,"STRONG",{});var kjt=s(Nwe);LHr=r(kjt,"big_bird"),kjt.forEach(t),yHr=r(qGe," \u2014 "),Kee=n(qGe,"A",{href:!0});var Sjt=s(Kee);xHr=r(Sjt,"FlaxBigBirdForTokenClassification"),Sjt.forEach(t),$Hr=r(qGe," (BigBird model)"),qGe.forEach(t),kHr=i(To),RA=n(To,"LI",{});var jGe=s(RA);qwe=n(jGe,"STRONG",{});var Rjt=s(qwe);SHr=r(Rjt,"distilbert"),Rjt.forEach(t),RHr=r(jGe," \u2014 "),Zee=n(jGe,"A",{href:!0});var Pjt=s(Zee);PHr=r(Pjt,"FlaxDistilBertForTokenClassification"),Pjt.forEach(t),BHr=r(jGe," (DistilBERT model)"),jGe.forEach(t),IHr=i(To),PA=n(To,"LI",{});var DGe=s(PA);jwe=n(DGe,"STRONG",{});var Bjt=s(jwe);NHr=r(Bjt,"electra"),Bjt.forEach(t),qHr=r(DGe," \u2014 "),eoe=n(DGe,"A",{href:!0});var Ijt=s(eoe);jHr=r(Ijt,"FlaxElectraForTokenClassification"),Ijt.forEach(t),DHr=r(DGe," (ELECTRA model)"),DGe.forEach(t),GHr=i(To),BA=n(To,"LI",{});var GGe=s(BA);Dwe=n(GGe,"STRONG",{});var Njt=s(Dwe);OHr=r(Njt,"roberta"),Njt.forEach(t),VHr=r(GGe," \u2014 "),ooe=n(GGe,"A",{href:!0});var qjt=s(ooe);XHr=r(qjt,"FlaxRobertaForTokenClassification"),qjt.forEach(t),zHr=r(GGe," (RoBERTa model)"),GGe.forEach(t),QHr=i(To),IA=n(To,"LI",{});var OGe=s(IA);Gwe=n(OGe,"STRONG",{});var jjt=s(Gwe);WHr=r(jjt,"roformer"),jjt.forEach(t),HHr=r(OGe," \u2014 "),roe=n(OGe,"A",{href:!0});var Djt=s(roe);UHr=r(Djt,"FlaxRoFormerForTokenClassification"),Djt.forEach(t),JHr=r(OGe," (RoFormer model)"),OGe.forEach(t),YHr=i(To),NA=n(To,"LI",{});var VGe=s(NA);Owe=n(VGe,"STRONG",{});var Gjt=s(Owe);KHr=r(Gjt,"xlm-roberta"),Gjt.forEach(t),ZHr=r(VGe," \u2014 "),toe=n(VGe,"A",{href:!0});var Ojt=s(toe);eUr=r(Ojt,"FlaxXLMRobertaForTokenClassification"),Ojt.forEach(t),oUr=r(VGe," (XLM-RoBERTa model)"),VGe.forEach(t),To.forEach(t),rUr=i(gi),T(qA.$$.fragment,gi),gi.forEach(t),fi.forEach(t),ZVe=i(m),gm=n(m,"H2",{class:!0});var iQe=s(gm);jA=n(iQe,"A",{id:!0,class:!0,href:!0});var Vjt=s(jA);Vwe=n(Vjt,"SPAN",{});var Xjt=s(Vwe);T(M$.$$.fragment,Xjt),Xjt.forEach(t),Vjt.forEach(t),tUr=i(iQe),Xwe=n(iQe,"SPAN",{});var zjt=s(Xwe);aUr=r(zjt,"FlaxAutoModelForMultipleChoice"),zjt.forEach(t),iQe.forEach(t),eXe=i(m),Mr=n(m,"DIV",{class:!0});var hi=s(Mr);T(E$.$$.fragment,hi),nUr=i(hi),hm=n(hi,"P",{});var hte=s(hm);sUr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aoe=n(hte,"A",{href:!0});var Qjt=s(aoe);lUr=r(Qjt,"from_pretrained()"),Qjt.forEach(t),iUr=r(hte," class method or the "),noe=n(hte,"A",{href:!0});var Wjt=s(noe);dUr=r(Wjt,"from_config()"),Wjt.forEach(t),cUr=r(hte,` class
method.`),hte.forEach(t),mUr=i(hi),C$=n(hi,"P",{});var dQe=s(C$);fUr=r(dQe,"This class cannot be instantiated directly using "),zwe=n(dQe,"CODE",{});var Hjt=s(zwe);gUr=r(Hjt,"__init__()"),Hjt.forEach(t),hUr=r(dQe," (throws an error)."),dQe.forEach(t),uUr=i(hi),Kt=n(hi,"DIV",{class:!0});var T7=s(Kt);T(w$.$$.fragment,T7),pUr=i(T7),Qwe=n(T7,"P",{});var Ujt=s(Qwe);_Ur=r(Ujt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ujt.forEach(t),bUr=i(T7),um=n(T7,"P",{});var ute=s(um);vUr=r(ute,`Note:
Loading a model from its configuration file does `),Wwe=n(ute,"STRONG",{});var Jjt=s(Wwe);FUr=r(Jjt,"not"),Jjt.forEach(t),TUr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=n(ute,"A",{href:!0});var Yjt=s(soe);MUr=r(Yjt,"from_pretrained()"),Yjt.forEach(t),EUr=r(ute," to load the model weights."),ute.forEach(t),CUr=i(T7),T(DA.$$.fragment,T7),T7.forEach(t),wUr=i(hi),Jr=n(hi,"DIV",{class:!0});var ui=s(Jr);T(A$.$$.fragment,ui),AUr=i(ui),Hwe=n(ui,"P",{});var Kjt=s(Hwe);LUr=r(Kjt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kjt.forEach(t),yUr=i(ui),yn=n(ui,"P",{});var M7=s(yn);xUr=r(M7,"The model class to instantiate is selected based on the "),Uwe=n(M7,"CODE",{});var Zjt=s(Uwe);$Ur=r(Zjt,"model_type"),Zjt.forEach(t),kUr=r(M7,` property of the config object (either
passed as an argument or loaded from `),Jwe=n(M7,"CODE",{});var eDt=s(Jwe);SUr=r(eDt,"pretrained_model_name_or_path"),eDt.forEach(t),RUr=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=n(M7,"CODE",{});var oDt=s(Ywe);PUr=r(oDt,"pretrained_model_name_or_path"),oDt.forEach(t),BUr=r(M7,":"),M7.forEach(t),IUr=i(ui),Xe=n(ui,"UL",{});var Mo=s(Xe);GA=n(Mo,"LI",{});var XGe=s(GA);Kwe=n(XGe,"STRONG",{});var rDt=s(Kwe);NUr=r(rDt,"albert"),rDt.forEach(t),qUr=r(XGe," \u2014 "),loe=n(XGe,"A",{href:!0});var tDt=s(loe);jUr=r(tDt,"FlaxAlbertForMultipleChoice"),tDt.forEach(t),DUr=r(XGe," (ALBERT model)"),XGe.forEach(t),GUr=i(Mo),OA=n(Mo,"LI",{});var zGe=s(OA);Zwe=n(zGe,"STRONG",{});var aDt=s(Zwe);OUr=r(aDt,"bert"),aDt.forEach(t),VUr=r(zGe," \u2014 "),ioe=n(zGe,"A",{href:!0});var nDt=s(ioe);XUr=r(nDt,"FlaxBertForMultipleChoice"),nDt.forEach(t),zUr=r(zGe," (BERT model)"),zGe.forEach(t),QUr=i(Mo),VA=n(Mo,"LI",{});var QGe=s(VA);eAe=n(QGe,"STRONG",{});var sDt=s(eAe);WUr=r(sDt,"big_bird"),sDt.forEach(t),HUr=r(QGe," \u2014 "),doe=n(QGe,"A",{href:!0});var lDt=s(doe);UUr=r(lDt,"FlaxBigBirdForMultipleChoice"),lDt.forEach(t),JUr=r(QGe," (BigBird model)"),QGe.forEach(t),YUr=i(Mo),XA=n(Mo,"LI",{});var WGe=s(XA);oAe=n(WGe,"STRONG",{});var iDt=s(oAe);KUr=r(iDt,"distilbert"),iDt.forEach(t),ZUr=r(WGe," \u2014 "),coe=n(WGe,"A",{href:!0});var dDt=s(coe);eJr=r(dDt,"FlaxDistilBertForMultipleChoice"),dDt.forEach(t),oJr=r(WGe," (DistilBERT model)"),WGe.forEach(t),rJr=i(Mo),zA=n(Mo,"LI",{});var HGe=s(zA);rAe=n(HGe,"STRONG",{});var cDt=s(rAe);tJr=r(cDt,"electra"),cDt.forEach(t),aJr=r(HGe," \u2014 "),moe=n(HGe,"A",{href:!0});var mDt=s(moe);nJr=r(mDt,"FlaxElectraForMultipleChoice"),mDt.forEach(t),sJr=r(HGe," (ELECTRA model)"),HGe.forEach(t),lJr=i(Mo),QA=n(Mo,"LI",{});var UGe=s(QA);tAe=n(UGe,"STRONG",{});var fDt=s(tAe);iJr=r(fDt,"roberta"),fDt.forEach(t),dJr=r(UGe," \u2014 "),foe=n(UGe,"A",{href:!0});var gDt=s(foe);cJr=r(gDt,"FlaxRobertaForMultipleChoice"),gDt.forEach(t),mJr=r(UGe," (RoBERTa model)"),UGe.forEach(t),fJr=i(Mo),WA=n(Mo,"LI",{});var JGe=s(WA);aAe=n(JGe,"STRONG",{});var hDt=s(aAe);gJr=r(hDt,"roformer"),hDt.forEach(t),hJr=r(JGe," \u2014 "),goe=n(JGe,"A",{href:!0});var uDt=s(goe);uJr=r(uDt,"FlaxRoFormerForMultipleChoice"),uDt.forEach(t),pJr=r(JGe," (RoFormer model)"),JGe.forEach(t),_Jr=i(Mo),HA=n(Mo,"LI",{});var YGe=s(HA);nAe=n(YGe,"STRONG",{});var pDt=s(nAe);bJr=r(pDt,"xlm-roberta"),pDt.forEach(t),vJr=r(YGe," \u2014 "),hoe=n(YGe,"A",{href:!0});var _Dt=s(hoe);FJr=r(_Dt,"FlaxXLMRobertaForMultipleChoice"),_Dt.forEach(t),TJr=r(YGe," (XLM-RoBERTa model)"),YGe.forEach(t),Mo.forEach(t),MJr=i(ui),T(UA.$$.fragment,ui),ui.forEach(t),hi.forEach(t),oXe=i(m),pm=n(m,"H2",{class:!0});var cQe=s(pm);JA=n(cQe,"A",{id:!0,class:!0,href:!0});var bDt=s(JA);sAe=n(bDt,"SPAN",{});var vDt=s(sAe);T(L$.$$.fragment,vDt),vDt.forEach(t),bDt.forEach(t),EJr=i(cQe),lAe=n(cQe,"SPAN",{});var FDt=s(lAe);CJr=r(FDt,"FlaxAutoModelForNextSentencePrediction"),FDt.forEach(t),cQe.forEach(t),rXe=i(m),Er=n(m,"DIV",{class:!0});var pi=s(Er);T(y$.$$.fragment,pi),wJr=i(pi),_m=n(pi,"P",{});var pte=s(_m);AJr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uoe=n(pte,"A",{href:!0});var TDt=s(uoe);LJr=r(TDt,"from_pretrained()"),TDt.forEach(t),yJr=r(pte," class method or the "),poe=n(pte,"A",{href:!0});var MDt=s(poe);xJr=r(MDt,"from_config()"),MDt.forEach(t),$Jr=r(pte,` class
method.`),pte.forEach(t),kJr=i(pi),x$=n(pi,"P",{});var mQe=s(x$);SJr=r(mQe,"This class cannot be instantiated directly using "),iAe=n(mQe,"CODE",{});var EDt=s(iAe);RJr=r(EDt,"__init__()"),EDt.forEach(t),PJr=r(mQe," (throws an error)."),mQe.forEach(t),BJr=i(pi),Zt=n(pi,"DIV",{class:!0});var E7=s(Zt);T($$.$$.fragment,E7),IJr=i(E7),dAe=n(E7,"P",{});var CDt=s(dAe);NJr=r(CDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CDt.forEach(t),qJr=i(E7),bm=n(E7,"P",{});var _te=s(bm);jJr=r(_te,`Note:
Loading a model from its configuration file does `),cAe=n(_te,"STRONG",{});var wDt=s(cAe);DJr=r(wDt,"not"),wDt.forEach(t),GJr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=n(_te,"A",{href:!0});var ADt=s(_oe);OJr=r(ADt,"from_pretrained()"),ADt.forEach(t),VJr=r(_te," to load the model weights."),_te.forEach(t),XJr=i(E7),T(YA.$$.fragment,E7),E7.forEach(t),zJr=i(pi),Yr=n(pi,"DIV",{class:!0});var _i=s(Yr);T(k$.$$.fragment,_i),QJr=i(_i),mAe=n(_i,"P",{});var LDt=s(mAe);WJr=r(LDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LDt.forEach(t),HJr=i(_i),xn=n(_i,"P",{});var C7=s(xn);UJr=r(C7,"The model class to instantiate is selected based on the "),fAe=n(C7,"CODE",{});var yDt=s(fAe);JJr=r(yDt,"model_type"),yDt.forEach(t),YJr=r(C7,` property of the config object (either
passed as an argument or loaded from `),gAe=n(C7,"CODE",{});var xDt=s(gAe);KJr=r(xDt,"pretrained_model_name_or_path"),xDt.forEach(t),ZJr=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=n(C7,"CODE",{});var $Dt=s(hAe);eYr=r($Dt,"pretrained_model_name_or_path"),$Dt.forEach(t),oYr=r(C7,":"),C7.forEach(t),rYr=i(_i),uAe=n(_i,"UL",{});var kDt=s(uAe);KA=n(kDt,"LI",{});var KGe=s(KA);pAe=n(KGe,"STRONG",{});var SDt=s(pAe);tYr=r(SDt,"bert"),SDt.forEach(t),aYr=r(KGe," \u2014 "),boe=n(KGe,"A",{href:!0});var RDt=s(boe);nYr=r(RDt,"FlaxBertForNextSentencePrediction"),RDt.forEach(t),sYr=r(KGe," (BERT model)"),KGe.forEach(t),kDt.forEach(t),lYr=i(_i),T(ZA.$$.fragment,_i),_i.forEach(t),pi.forEach(t),tXe=i(m),vm=n(m,"H2",{class:!0});var fQe=s(vm);e6=n(fQe,"A",{id:!0,class:!0,href:!0});var PDt=s(e6);_Ae=n(PDt,"SPAN",{});var BDt=s(_Ae);T(S$.$$.fragment,BDt),BDt.forEach(t),PDt.forEach(t),iYr=i(fQe),bAe=n(fQe,"SPAN",{});var IDt=s(bAe);dYr=r(IDt,"FlaxAutoModelForImageClassification"),IDt.forEach(t),fQe.forEach(t),aXe=i(m),Cr=n(m,"DIV",{class:!0});var bi=s(Cr);T(R$.$$.fragment,bi),cYr=i(bi),Fm=n(bi,"P",{});var bte=s(Fm);mYr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),voe=n(bte,"A",{href:!0});var NDt=s(voe);fYr=r(NDt,"from_pretrained()"),NDt.forEach(t),gYr=r(bte," class method or the "),Foe=n(bte,"A",{href:!0});var qDt=s(Foe);hYr=r(qDt,"from_config()"),qDt.forEach(t),uYr=r(bte,` class
method.`),bte.forEach(t),pYr=i(bi),P$=n(bi,"P",{});var gQe=s(P$);_Yr=r(gQe,"This class cannot be instantiated directly using "),vAe=n(gQe,"CODE",{});var jDt=s(vAe);bYr=r(jDt,"__init__()"),jDt.forEach(t),vYr=r(gQe," (throws an error)."),gQe.forEach(t),FYr=i(bi),ea=n(bi,"DIV",{class:!0});var w7=s(ea);T(B$.$$.fragment,w7),TYr=i(w7),FAe=n(w7,"P",{});var DDt=s(FAe);MYr=r(DDt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DDt.forEach(t),EYr=i(w7),Tm=n(w7,"P",{});var vte=s(Tm);CYr=r(vte,`Note:
Loading a model from its configuration file does `),TAe=n(vte,"STRONG",{});var GDt=s(TAe);wYr=r(GDt,"not"),GDt.forEach(t),AYr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(vte,"A",{href:!0});var ODt=s(Toe);LYr=r(ODt,"from_pretrained()"),ODt.forEach(t),yYr=r(vte," to load the model weights."),vte.forEach(t),xYr=i(w7),T(o6.$$.fragment,w7),w7.forEach(t),$Yr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(I$.$$.fragment,vi),kYr=i(vi),MAe=n(vi,"P",{});var VDt=s(MAe);SYr=r(VDt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VDt.forEach(t),RYr=i(vi),$n=n(vi,"P",{});var A7=s($n);PYr=r(A7,"The model class to instantiate is selected based on the "),EAe=n(A7,"CODE",{});var XDt=s(EAe);BYr=r(XDt,"model_type"),XDt.forEach(t),IYr=r(A7,` property of the config object (either
passed as an argument or loaded from `),CAe=n(A7,"CODE",{});var zDt=s(CAe);NYr=r(zDt,"pretrained_model_name_or_path"),zDt.forEach(t),qYr=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wAe=n(A7,"CODE",{});var QDt=s(wAe);jYr=r(QDt,"pretrained_model_name_or_path"),QDt.forEach(t),DYr=r(A7,":"),A7.forEach(t),GYr=i(vi),N$=n(vi,"UL",{});var hQe=s(N$);r6=n(hQe,"LI",{});var ZGe=s(r6);AAe=n(ZGe,"STRONG",{});var WDt=s(AAe);OYr=r(WDt,"beit"),WDt.forEach(t),VYr=r(ZGe," \u2014 "),Moe=n(ZGe,"A",{href:!0});var HDt=s(Moe);XYr=r(HDt,"FlaxBeitForImageClassification"),HDt.forEach(t),zYr=r(ZGe," (BEiT model)"),ZGe.forEach(t),QYr=i(hQe),t6=n(hQe,"LI",{});var eOe=s(t6);LAe=n(eOe,"STRONG",{});var UDt=s(LAe);WYr=r(UDt,"vit"),UDt.forEach(t),HYr=r(eOe," \u2014 "),Eoe=n(eOe,"A",{href:!0});var JDt=s(Eoe);UYr=r(JDt,"FlaxViTForImageClassification"),JDt.forEach(t),JYr=r(eOe," (ViT model)"),eOe.forEach(t),hQe.forEach(t),YYr=i(vi),T(a6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),nXe=i(m),Mm=n(m,"H2",{class:!0});var uQe=s(Mm);n6=n(uQe,"A",{id:!0,class:!0,href:!0});var YDt=s(n6);yAe=n(YDt,"SPAN",{});var KDt=s(yAe);T(q$.$$.fragment,KDt),KDt.forEach(t),YDt.forEach(t),KYr=i(uQe),xAe=n(uQe,"SPAN",{});var ZDt=s(xAe);ZYr=r(ZDt,"FlaxAutoModelForVision2Seq"),ZDt.forEach(t),uQe.forEach(t),sXe=i(m),wr=n(m,"DIV",{class:!0});var Fi=s(wr);T(j$.$$.fragment,Fi),eKr=i(Fi),Em=n(Fi,"P",{});var Fte=s(Em);oKr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Coe=n(Fte,"A",{href:!0});var eGt=s(Coe);rKr=r(eGt,"from_pretrained()"),eGt.forEach(t),tKr=r(Fte," class method or the "),woe=n(Fte,"A",{href:!0});var oGt=s(woe);aKr=r(oGt,"from_config()"),oGt.forEach(t),nKr=r(Fte,` class
method.`),Fte.forEach(t),sKr=i(Fi),D$=n(Fi,"P",{});var pQe=s(D$);lKr=r(pQe,"This class cannot be instantiated directly using "),$Ae=n(pQe,"CODE",{});var rGt=s($Ae);iKr=r(rGt,"__init__()"),rGt.forEach(t),dKr=r(pQe," (throws an error)."),pQe.forEach(t),cKr=i(Fi),oa=n(Fi,"DIV",{class:!0});var L7=s(oa);T(G$.$$.fragment,L7),mKr=i(L7),kAe=n(L7,"P",{});var tGt=s(kAe);fKr=r(tGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tGt.forEach(t),gKr=i(L7),Cm=n(L7,"P",{});var Tte=s(Cm);hKr=r(Tte,`Note:
Loading a model from its configuration file does `),SAe=n(Tte,"STRONG",{});var aGt=s(SAe);uKr=r(aGt,"not"),aGt.forEach(t),pKr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(Tte,"A",{href:!0});var nGt=s(Aoe);_Kr=r(nGt,"from_pretrained()"),nGt.forEach(t),bKr=r(Tte," to load the model weights."),Tte.forEach(t),vKr=i(L7),T(s6.$$.fragment,L7),L7.forEach(t),FKr=i(Fi),Zr=n(Fi,"DIV",{class:!0});var Ti=s(Zr);T(O$.$$.fragment,Ti),TKr=i(Ti),RAe=n(Ti,"P",{});var sGt=s(RAe);MKr=r(sGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sGt.forEach(t),EKr=i(Ti),kn=n(Ti,"P",{});var y7=s(kn);CKr=r(y7,"The model class to instantiate is selected based on the "),PAe=n(y7,"CODE",{});var lGt=s(PAe);wKr=r(lGt,"model_type"),lGt.forEach(t),AKr=r(y7,` property of the config object (either
passed as an argument or loaded from `),BAe=n(y7,"CODE",{});var iGt=s(BAe);LKr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),yKr=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=n(y7,"CODE",{});var dGt=s(IAe);xKr=r(dGt,"pretrained_model_name_or_path"),dGt.forEach(t),$Kr=r(y7,":"),y7.forEach(t),kKr=i(Ti),NAe=n(Ti,"UL",{});var cGt=s(NAe);l6=n(cGt,"LI",{});var oOe=s(l6);qAe=n(oOe,"STRONG",{});var mGt=s(qAe);SKr=r(mGt,"vision-encoder-decoder"),mGt.forEach(t),RKr=r(oOe," \u2014 "),Loe=n(oOe,"A",{href:!0});var fGt=s(Loe);PKr=r(fGt,"FlaxVisionEncoderDecoderModel"),fGt.forEach(t),BKr=r(oOe," (Vision Encoder decoder model)"),oOe.forEach(t),cGt.forEach(t),IKr=i(Ti),T(i6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(bVt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Rn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(yi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Sm,"id","extending-the-auto-classes"),c(Sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sm,"href","#extending-the-auto-classes"),c(xi,"class","relative group"),c(Pm,"id","transformers.AutoConfig"),c(Pm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pm,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(gS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(hS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c($S,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(RS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(NS,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(US,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(KS,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(sR,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(lR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(mR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(hR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(uR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(pR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(bR,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(TR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(MR,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(ER,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(AR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(LR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(xR,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c($R,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(kR,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(SR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(RR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(BR,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(IR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(NR,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(DR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(VR,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(zR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(WR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(HR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(UR,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(JR,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(YR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(KR,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(eP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(oP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(rP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(tP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(aP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(nP,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(sP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(mP,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zg,"id","transformers.AutoTokenizer"),c(zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zg,"href","#transformers.AutoTokenizer"),c(Si,"class","relative group"),c(TP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(MP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(wP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(AP,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(LP,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(yP,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(xP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c($P,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(kP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(SP,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(RP,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(PP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(BP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(IP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(NP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(qP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(jP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(DP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(OP,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(VP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(zP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(HP,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(UP,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(JP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(KP,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(eB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(dB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(mB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(gB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(pB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(EB,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(CB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(yB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(BB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(NB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(GB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(XB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(zB,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(WB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(HB,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(UB,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(JB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(YB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(KB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(eI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(oI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(rI,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(iI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(dI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(cI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(mI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(fI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(hI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(uI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(_I,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(vI,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(FI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(TI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(MI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(EI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(CI,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(wI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(AI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(LI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(yI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(xI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c($I,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(kI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(SI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(RI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(II,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(NI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(qI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(DI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(GI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(OI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(VI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(XI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(zI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(QI,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(HI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(UI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(JI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(KI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(ZI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eN,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(oN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(rN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(tN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(nN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(lN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(cN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(fN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoFeatureExtractor"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoFeatureExtractor"),c(Ri,"class","relative group"),c(gN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(hN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(pN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_N,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(TN,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(MN,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(EN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(CN,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(wN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(LN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(yN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(xN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c($N,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(kN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(SN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(RN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(PN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(NN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(qN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(jN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(GN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ON,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zN,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(du,"id","transformers.AutoProcessor"),c(du,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(du,"href","#transformers.AutoProcessor"),c(Pi,"class","relative group"),c(QN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(WN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(HN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(UN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(JN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(YN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(eq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(oq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(rq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(nq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(sq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($u,"id","transformers.AutoModel"),c($u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($u,"href","#transformers.AutoModel"),c(Ii,"class","relative group"),c(dq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(gq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(hq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(uq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(pq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(_q,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(bq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(vq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(wq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(yq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(xq,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c($q,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(kq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Bq,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(qq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(jq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Dq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(zq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(Jq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(ej,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(oj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(rj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(tj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(aj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(nj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(sj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(lj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(ij,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(dj,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(cj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(mj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(fj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(gj,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(hj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(uj,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(pj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(_j,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(bj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(vj,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(Fj,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(Cj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(wj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(yj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(xj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c($j,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(kj,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(Pj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(qj,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(jj,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(Dj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Gj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(Oj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Vj,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(Xj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(zj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(Qj,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Wj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Hj,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Uj,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(Yj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(Kj,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Zj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(eD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(oD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(rD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(tD,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(aD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(nD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(sD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(lD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(iD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(dD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(cD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(mD,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(fD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R_,"id","transformers.AutoModelForPreTraining"),c(R_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R_,"href","#transformers.AutoModelForPreTraining"),c(ji,"class","relative group"),c(gD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(_D,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(vD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(FD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(TD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(MD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ED,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(CD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(wD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(AD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(LD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(yD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(xD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c($D,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(kD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(SD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(RD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(PD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(BD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ID,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ND,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(qD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(jD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(DD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(GD,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(OD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(VD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(XD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(QD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(WD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(HD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(JD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(YD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(KD,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ZD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(eG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(oG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(rG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L2,"id","transformers.AutoModelForCausalLM"),c(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L2,"href","#transformers.AutoModelForCausalLM"),c(Oi,"class","relative group"),c(sG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(cG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(mG,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(fG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(gG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(hG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(uG,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(pG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(_G,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(bG,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(vG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(FG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(TG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(MG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(CG,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(wG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(AG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(LG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(yG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(xG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($G,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(kG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(SG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(RG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(PG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(BG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(IG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(NG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(qG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(jG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(DG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(GG,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(OG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(VG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(zG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(QG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(WG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pb,"id","transformers.AutoModelForMaskedLM"),c(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pb,"href","#transformers.AutoModelForMaskedLM"),c(zi,"class","relative group"),c(HG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(KG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(eO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(oO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(tO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(iO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(mO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hO,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(uO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(_O,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(bO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vO,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(FO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(TO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(MO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(EO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(CO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(wO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(LO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(yO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($O,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(SO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForSeq2SeqLM"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForSeq2SeqLM"),c(Hi,"class","relative group"),c(RO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(NO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(qO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(jO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(DO,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(GO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(OO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(VO,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(XO,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(zO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(QO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(WO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(HO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(UO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(JO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(YO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(KO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForSequenceClassification"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForSequenceClassification"),c(Yi,"class","relative group"),c(ZO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(lV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(dV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(cV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(mV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(fV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(gV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(uV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(bV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(vV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(FV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(TV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(MV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(EV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(CV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(wV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(AV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(yV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(xV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c($V,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(kV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(SV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(RV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(PV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(BV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(IV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(NV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(jV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(DV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(GV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(OV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(VV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(XV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(zV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(QV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForMultipleChoice"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForMultipleChoice"),c(ed,"class","relative group"),c(YV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(oX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(rX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(tX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(aX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(nX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(sX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(lX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(iX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(dX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(cX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(mX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(fX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(gX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(hX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(pX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(_X,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(bX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(vX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(FX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(TX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(MX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(EX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(CX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(wX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(AX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(LX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(yX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(xX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t1,"id","transformers.AutoModelForNextSentencePrediction"),c(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t1,"href","#transformers.AutoModelForNextSentencePrediction"),c(td,"class","relative group"),c($X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(PX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(BX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(IX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(NX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(qX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g1,"id","transformers.AutoModelForTokenClassification"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForTokenClassification"),c(sd,"class","relative group"),c(jX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(VX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(XX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(zX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(QX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(WX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(HX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(UX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(JX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(YX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(KX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(ZX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(ez,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(oz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(rz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(tz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(az,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(nz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(sz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(lz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(iz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(dz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(cz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(mz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(fz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(gz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(hz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(pz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(_z,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(bz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(vz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Fz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Tz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Mz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Ez,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z1,"id","transformers.AutoModelForQuestionAnswering"),c(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z1,"href","#transformers.AutoModelForQuestionAnswering"),c(dd,"class","relative group"),c(Cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(yz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(xz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c($z,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(kz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Sz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Rz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Pz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Bz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Iz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Nz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(qz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(jz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Dz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Gz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Oz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Vz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Xz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(zz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Qz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Wz,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Hz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Uz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Jz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Yz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Kz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Zz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(eQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(oQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(mQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(fQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForTableQuestionAnswering"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(fd,"class","relative group"),c(hQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForImageClassification"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForImageClassification"),c(ud,"class","relative group"),c(bQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(MQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EQ,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(CQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(wQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(AQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(LQ,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(yQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(xQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c($Q,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(kQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(SQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(RQ,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PQ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(BQ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(IQ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(qQ,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(jQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.AutoModelForVision2Seq"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.AutoModelForVision2Seq"),c(bd,"class","relative group"),c(DQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Td,"class","relative group"),c(XQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.AutoModelForAudioClassification"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.AutoModelForAudioClassification"),c(Cd,"class","relative group"),c(HQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(nW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.AutoModelForAudioFrameClassification"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.AutoModelForCTC"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.AutoModelForCTC"),c($d,"class","relative group"),c(hW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(bW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(vW,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(FW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(TW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(MW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(EW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(CW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(wW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(AW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.AutoModelForSpeechSeq2Seq"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Rd,"class","relative group"),c(LW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(kW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.AutoModelForAudioXVector"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.AutoModelForAudioXVector"),c(Id,"class","relative group"),c(SW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(IW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(NW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(qW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(jW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.AutoModelForMaskedImageModeling"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.AutoModelForMaskedImageModeling"),c(jd,"class","relative group"),c(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(XW,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(zW,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.AutoModelForObjectDetection"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.AutoModelForObjectDetection"),c(Vd,"class","relative group"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(JW,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.AutoModelForImageSegmentation"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.AutoModelForImageSegmentation"),c(Qd,"class","relative group"),c(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.AutoModelForSemanticSegmentation"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ud,"class","relative group"),c(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(nH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(sH,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(lH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.AutoModelForInstanceSegmentation"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.AutoModelForInstanceSegmentation"),c(Kd,"class","relative group"),c(iH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModel"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(fH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(pH,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(_H,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(bH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(vH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(FH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(TH,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(MH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(EH,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(CH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(wH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(AH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(LH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(yH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xH,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($H,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(kH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(SH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(RH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(PH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(BH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(IH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(NH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(qH,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(jH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(DH,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(GH,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(OH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(VH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(XH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(zH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(QH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(WH,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(HH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(UH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(JH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(YH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(KH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(ZH,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(eU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(oU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(rU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(tU,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(aU,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(nU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(sU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(lU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(iU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.TFAutoModelForPreTraining"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(gU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(uU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(pU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(_U,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(vU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(TU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(MU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(CU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(wU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($U,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kU,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(SU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(PU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForCausalLM"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(BU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(jU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(DU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(GU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(VU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(XU,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(zU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(QU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(WU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(HU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(JU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.TFAutoModelForImageClassification"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForMaskedLM"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(iJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(dJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(mJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(fJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(gJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(uJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(_J,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(vJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(FJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(TJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(MJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(EJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(CJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.TFAutoModelForSeq2SeqLM"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(pc,"class","relative group"),c(LJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(kJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(SJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(RJ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(PJ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(BJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(IJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(qJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(jJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.TFAutoModelForSequenceClassification"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(DJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(XJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(zJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(QJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(WJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(HJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(UJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(JJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(YJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(KJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(ZJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(eY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(oY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(rY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(tY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(aY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForMultipleChoice"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForMultipleChoice"),c(Mc,"class","relative group"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(vY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(FY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(TY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(MY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(EY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(CY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(wY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(AY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(LY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(yY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(xY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c($Y,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(kY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(SY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(RY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(PY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.TFAutoModelForNextSentencePrediction"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(wc,"class","relative group"),c(BY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(jY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(DY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.TFAutoModelForTokenClassification"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.TFAutoModelForTokenClassification"),c(kc,"class","relative group"),c(XY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(HY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(UY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(JY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(YY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(KY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(ZY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(eK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.TFAutoModelForQuestionAnswering"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(gK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(_K,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(bK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(vK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(FK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(TK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(MK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(EK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(CK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(wK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(AK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(LK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(xK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c($K,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(kK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(SK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(RK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(PK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(BK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.TFAutoModelForVision2Seq"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.TFAutoModelForVision2Seq"),c(Nc,"class","relative group"),c(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Dc,"class","relative group"),c(DK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.FlaxAutoModel"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.FlaxAutoModel"),c(Vc,"class","relative group"),c(XK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(HK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(UK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(JK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(YK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(KK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(ZK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(eZ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(oZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(rZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(tZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(aZ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(nZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(sZ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(lZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(iZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(dZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(cZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(mZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(fZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(gZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(hZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(uZ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(pZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(_Z,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(bZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(vZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForCausalLM"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForCausalLM"),c(Qc,"class","relative group"),c(FZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(CZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(wZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(AZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(LZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(yZ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(xZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c($Z,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(kZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(SZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.FlaxAutoModelForPreTraining"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Uc,"class","relative group"),c(RZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(NZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(jZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(DZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(GZ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(OZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(VZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(XZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(zZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(QZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(WZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(HZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForMaskedLM"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Kc,"class","relative group"),c(UZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(ZZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(oee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ree,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(tee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(aee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(nee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(see,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(om,"class","relative group"),c(iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(gee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(hee,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(pee,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(_ee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Fee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(rA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(am,"class","relative group"),c(Tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(wee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Aee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Lee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(yee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($ee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(kee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(See,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Ree,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(uA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(lm,"class","relative group"),c(Pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(qee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(jee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Dee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Gee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Oee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Vee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Xee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Qee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yA,"id","transformers.FlaxAutoModelForTokenClassification"),c(yA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(cm,"class","relative group"),c(Wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Yee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Kee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Zee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(eoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ooe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(roe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(toe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(jA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(gm,"class","relative group"),c(aoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(loe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(ioe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(doe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(coe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(moe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(foe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(goe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(JA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pm,"class","relative group"),c(uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(boe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.FlaxAutoModelForImageClassification"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.FlaxAutoModelForImageClassification"),c(vm,"class","relative group"),c(voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Eoe,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n6,"id","transformers.FlaxAutoModelForVision2Seq"),c(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Mm,"class","relative group"),c(Coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(woe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Loe,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Eo),e(Eo,Mi),b(m,ym,_),b(m,at,_),e(at,Ei),e(at,Ci),e(Ci,x7),e(at,xm),b(m,Oe,_),b(m,Qe,_),e(Qe,wi),e(Qe,Rn),e(Rn,$7),e(Qe,Pn),e(Qe,Bn),e(Bn,k7),e(Qe,Ai),e(Qe,In),e(In,S7),e(Qe,Li),b(m,$m,_),M(xa,m,_),b(m,We,_),b(m,Ae,_),e(Ae,lS),e(Ae,yi),e(yi,iS),e(Ae,dS),b(m,Co,_),b(m,$a,_),e($a,cS),e($a,km),e(km,mS),e($a,_Qe),b(m,rOe,_),b(m,xi,_),e(xi,Sm),e(Sm,Mte),M(R7,Mte,null),e(xi,bQe),e(xi,Ete),e(Ete,vQe),b(m,tOe,_),b(m,Nn,_),e(Nn,FQe),e(Nn,Cte),e(Cte,TQe),e(Nn,MQe),e(Nn,wte),e(wte,EQe),e(Nn,CQe),b(m,aOe,_),M(P7,m,_),b(m,nOe,_),b(m,fS,_),e(fS,wQe),b(m,sOe,_),M(Rm,m,_),b(m,lOe,_),b(m,$i,_),e($i,Pm),e(Pm,Ate),M(B7,Ate,null),e($i,AQe),e($i,Lte),e(Lte,LQe),b(m,iOe,_),b(m,wo,_),M(I7,wo,null),e(wo,yQe),e(wo,N7),e(N7,xQe),e(N7,gS),e(gS,$Qe),e(N7,kQe),e(wo,SQe),e(wo,q7),e(q7,RQe),e(q7,yte),e(yte,PQe),e(q7,BQe),e(wo,IQe),e(wo,Ar),M(j7,Ar,null),e(Ar,NQe),e(Ar,xte),e(xte,qQe),e(Ar,jQe),e(Ar,ki),e(ki,DQe),e(ki,$te),e($te,GQe),e(ki,OQe),e(ki,kte),e(kte,VQe),e(ki,XQe),e(Ar,zQe),e(Ar,A),e(A,Bm),e(Bm,Ste),e(Ste,QQe),e(Bm,WQe),e(Bm,hS),e(hS,HQe),e(Bm,UQe),e(A,JQe),e(A,Im),e(Im,Rte),e(Rte,YQe),e(Im,KQe),e(Im,uS),e(uS,ZQe),e(Im,eWe),e(A,oWe),e(A,Nm),e(Nm,Pte),e(Pte,rWe),e(Nm,tWe),e(Nm,pS),e(pS,aWe),e(Nm,nWe),e(A,sWe),e(A,qm),e(qm,Bte),e(Bte,lWe),e(qm,iWe),e(qm,_S),e(_S,dWe),e(qm,cWe),e(A,mWe),e(A,jm),e(jm,Ite),e(Ite,fWe),e(jm,gWe),e(jm,bS),e(bS,hWe),e(jm,uWe),e(A,pWe),e(A,Dm),e(Dm,Nte),e(Nte,_We),e(Dm,bWe),e(Dm,vS),e(vS,vWe),e(Dm,FWe),e(A,TWe),e(A,Gm),e(Gm,qte),e(qte,MWe),e(Gm,EWe),e(Gm,FS),e(FS,CWe),e(Gm,wWe),e(A,AWe),e(A,Om),e(Om,jte),e(jte,LWe),e(Om,yWe),e(Om,TS),e(TS,xWe),e(Om,$We),e(A,kWe),e(A,Vm),e(Vm,Dte),e(Dte,SWe),e(Vm,RWe),e(Vm,MS),e(MS,PWe),e(Vm,BWe),e(A,IWe),e(A,Xm),e(Xm,Gte),e(Gte,NWe),e(Xm,qWe),e(Xm,ES),e(ES,jWe),e(Xm,DWe),e(A,GWe),e(A,zm),e(zm,Ote),e(Ote,OWe),e(zm,VWe),e(zm,CS),e(CS,XWe),e(zm,zWe),e(A,QWe),e(A,Qm),e(Qm,Vte),e(Vte,WWe),e(Qm,HWe),e(Qm,wS),e(wS,UWe),e(Qm,JWe),e(A,YWe),e(A,Wm),e(Wm,Xte),e(Xte,KWe),e(Wm,ZWe),e(Wm,AS),e(AS,eHe),e(Wm,oHe),e(A,rHe),e(A,Hm),e(Hm,zte),e(zte,tHe),e(Hm,aHe),e(Hm,LS),e(LS,nHe),e(Hm,sHe),e(A,lHe),e(A,Um),e(Um,Qte),e(Qte,iHe),e(Um,dHe),e(Um,yS),e(yS,cHe),e(Um,mHe),e(A,fHe),e(A,Jm),e(Jm,Wte),e(Wte,gHe),e(Jm,hHe),e(Jm,xS),e(xS,uHe),e(Jm,pHe),e(A,_He),e(A,Ym),e(Ym,Hte),e(Hte,bHe),e(Ym,vHe),e(Ym,$S),e($S,FHe),e(Ym,THe),e(A,MHe),e(A,Km),e(Km,Ute),e(Ute,EHe),e(Km,CHe),e(Km,kS),e(kS,wHe),e(Km,AHe),e(A,LHe),e(A,Zm),e(Zm,Jte),e(Jte,yHe),e(Zm,xHe),e(Zm,SS),e(SS,$He),e(Zm,kHe),e(A,SHe),e(A,ef),e(ef,Yte),e(Yte,RHe),e(ef,PHe),e(ef,RS),e(RS,BHe),e(ef,IHe),e(A,NHe),e(A,of),e(of,Kte),e(Kte,qHe),e(of,jHe),e(of,PS),e(PS,DHe),e(of,GHe),e(A,OHe),e(A,rf),e(rf,Zte),e(Zte,VHe),e(rf,XHe),e(rf,BS),e(BS,zHe),e(rf,QHe),e(A,WHe),e(A,tf),e(tf,eae),e(eae,HHe),e(tf,UHe),e(tf,IS),e(IS,JHe),e(tf,YHe),e(A,KHe),e(A,af),e(af,oae),e(oae,ZHe),e(af,eUe),e(af,NS),e(NS,oUe),e(af,rUe),e(A,tUe),e(A,nf),e(nf,rae),e(rae,aUe),e(nf,nUe),e(nf,qS),e(qS,sUe),e(nf,lUe),e(A,iUe),e(A,sf),e(sf,tae),e(tae,dUe),e(sf,cUe),e(sf,jS),e(jS,mUe),e(sf,fUe),e(A,gUe),e(A,lf),e(lf,aae),e(aae,hUe),e(lf,uUe),e(lf,DS),e(DS,pUe),e(lf,_Ue),e(A,bUe),e(A,df),e(df,nae),e(nae,vUe),e(df,FUe),e(df,GS),e(GS,TUe),e(df,MUe),e(A,EUe),e(A,cf),e(cf,sae),e(sae,CUe),e(cf,wUe),e(cf,OS),e(OS,AUe),e(cf,LUe),e(A,yUe),e(A,mf),e(mf,lae),e(lae,xUe),e(mf,$Ue),e(mf,VS),e(VS,kUe),e(mf,SUe),e(A,RUe),e(A,ff),e(ff,iae),e(iae,PUe),e(ff,BUe),e(ff,XS),e(XS,IUe),e(ff,NUe),e(A,qUe),e(A,gf),e(gf,dae),e(dae,jUe),e(gf,DUe),e(gf,zS),e(zS,GUe),e(gf,OUe),e(A,VUe),e(A,hf),e(hf,cae),e(cae,XUe),e(hf,zUe),e(hf,QS),e(QS,QUe),e(hf,WUe),e(A,HUe),e(A,uf),e(uf,mae),e(mae,UUe),e(uf,JUe),e(uf,WS),e(WS,YUe),e(uf,KUe),e(A,ZUe),e(A,pf),e(pf,fae),e(fae,eJe),e(pf,oJe),e(pf,HS),e(HS,rJe),e(pf,tJe),e(A,aJe),e(A,_f),e(_f,gae),e(gae,nJe),e(_f,sJe),e(_f,US),e(US,lJe),e(_f,iJe),e(A,dJe),e(A,bf),e(bf,hae),e(hae,cJe),e(bf,mJe),e(bf,JS),e(JS,fJe),e(bf,gJe),e(A,hJe),e(A,vf),e(vf,uae),e(uae,uJe),e(vf,pJe),e(vf,YS),e(YS,_Je),e(vf,bJe),e(A,vJe),e(A,Ff),e(Ff,pae),e(pae,FJe),e(Ff,TJe),e(Ff,KS),e(KS,MJe),e(Ff,EJe),e(A,CJe),e(A,Tf),e(Tf,_ae),e(_ae,wJe),e(Tf,AJe),e(Tf,ZS),e(ZS,LJe),e(Tf,yJe),e(A,xJe),e(A,Mf),e(Mf,bae),e(bae,$Je),e(Mf,kJe),e(Mf,eR),e(eR,SJe),e(Mf,RJe),e(A,PJe),e(A,Ef),e(Ef,vae),e(vae,BJe),e(Ef,IJe),e(Ef,oR),e(oR,NJe),e(Ef,qJe),e(A,jJe),e(A,Cf),e(Cf,Fae),e(Fae,DJe),e(Cf,GJe),e(Cf,rR),e(rR,OJe),e(Cf,VJe),e(A,XJe),e(A,wf),e(wf,Tae),e(Tae,zJe),e(wf,QJe),e(wf,tR),e(tR,WJe),e(wf,HJe),e(A,UJe),e(A,Af),e(Af,Mae),e(Mae,JJe),e(Af,YJe),e(Af,aR),e(aR,KJe),e(Af,ZJe),e(A,eYe),e(A,Lf),e(Lf,Eae),e(Eae,oYe),e(Lf,rYe),e(Lf,nR),e(nR,tYe),e(Lf,aYe),e(A,nYe),e(A,yf),e(yf,Cae),e(Cae,sYe),e(yf,lYe),e(yf,sR),e(sR,iYe),e(yf,dYe),e(A,cYe),e(A,xf),e(xf,wae),e(wae,mYe),e(xf,fYe),e(xf,lR),e(lR,gYe),e(xf,hYe),e(A,uYe),e(A,$f),e($f,Aae),e(Aae,pYe),e($f,_Ye),e($f,iR),e(iR,bYe),e($f,vYe),e(A,FYe),e(A,kf),e(kf,Lae),e(Lae,TYe),e(kf,MYe),e(kf,dR),e(dR,EYe),e(kf,CYe),e(A,wYe),e(A,Sf),e(Sf,yae),e(yae,AYe),e(Sf,LYe),e(Sf,cR),e(cR,yYe),e(Sf,xYe),e(A,$Ye),e(A,Rf),e(Rf,xae),e(xae,kYe),e(Rf,SYe),e(Rf,mR),e(mR,RYe),e(Rf,PYe),e(A,BYe),e(A,Pf),e(Pf,$ae),e($ae,IYe),e(Pf,NYe),e(Pf,fR),e(fR,qYe),e(Pf,jYe),e(A,DYe),e(A,Bf),e(Bf,kae),e(kae,GYe),e(Bf,OYe),e(Bf,gR),e(gR,VYe),e(Bf,XYe),e(A,zYe),e(A,If),e(If,Sae),e(Sae,QYe),e(If,WYe),e(If,hR),e(hR,HYe),e(If,UYe),e(A,JYe),e(A,Nf),e(Nf,Rae),e(Rae,YYe),e(Nf,KYe),e(Nf,uR),e(uR,ZYe),e(Nf,eKe),e(A,oKe),e(A,qf),e(qf,Pae),e(Pae,rKe),e(qf,tKe),e(qf,pR),e(pR,aKe),e(qf,nKe),e(A,sKe),e(A,jf),e(jf,Bae),e(Bae,lKe),e(jf,iKe),e(jf,_R),e(_R,dKe),e(jf,cKe),e(A,mKe),e(A,Df),e(Df,Iae),e(Iae,fKe),e(Df,gKe),e(Df,bR),e(bR,hKe),e(Df,uKe),e(A,pKe),e(A,Gf),e(Gf,Nae),e(Nae,_Ke),e(Gf,bKe),e(Gf,vR),e(vR,vKe),e(Gf,FKe),e(A,TKe),e(A,Of),e(Of,qae),e(qae,MKe),e(Of,EKe),e(Of,FR),e(FR,CKe),e(Of,wKe),e(A,AKe),e(A,Vf),e(Vf,jae),e(jae,LKe),e(Vf,yKe),e(Vf,TR),e(TR,xKe),e(Vf,$Ke),e(A,kKe),e(A,Xf),e(Xf,Dae),e(Dae,SKe),e(Xf,RKe),e(Xf,MR),e(MR,PKe),e(Xf,BKe),e(A,IKe),e(A,zf),e(zf,Gae),e(Gae,NKe),e(zf,qKe),e(zf,ER),e(ER,jKe),e(zf,DKe),e(A,GKe),e(A,Qf),e(Qf,Oae),e(Oae,OKe),e(Qf,VKe),e(Qf,CR),e(CR,XKe),e(Qf,zKe),e(A,QKe),e(A,Wf),e(Wf,Vae),e(Vae,WKe),e(Wf,HKe),e(Wf,wR),e(wR,UKe),e(Wf,JKe),e(A,YKe),e(A,Hf),e(Hf,Xae),e(Xae,KKe),e(Hf,ZKe),e(Hf,AR),e(AR,eZe),e(Hf,oZe),e(A,rZe),e(A,Uf),e(Uf,zae),e(zae,tZe),e(Uf,aZe),e(Uf,LR),e(LR,nZe),e(Uf,sZe),e(A,lZe),e(A,Jf),e(Jf,Qae),e(Qae,iZe),e(Jf,dZe),e(Jf,yR),e(yR,cZe),e(Jf,mZe),e(A,fZe),e(A,Yf),e(Yf,Wae),e(Wae,gZe),e(Yf,hZe),e(Yf,xR),e(xR,uZe),e(Yf,pZe),e(A,_Ze),e(A,Kf),e(Kf,Hae),e(Hae,bZe),e(Kf,vZe),e(Kf,$R),e($R,FZe),e(Kf,TZe),e(A,MZe),e(A,Zf),e(Zf,Uae),e(Uae,EZe),e(Zf,CZe),e(Zf,kR),e(kR,wZe),e(Zf,AZe),e(A,LZe),e(A,eg),e(eg,Jae),e(Jae,yZe),e(eg,xZe),e(eg,SR),e(SR,$Ze),e(eg,kZe),e(A,SZe),e(A,og),e(og,Yae),e(Yae,RZe),e(og,PZe),e(og,RR),e(RR,BZe),e(og,IZe),e(A,NZe),e(A,rg),e(rg,Kae),e(Kae,qZe),e(rg,jZe),e(rg,PR),e(PR,DZe),e(rg,GZe),e(A,OZe),e(A,tg),e(tg,Zae),e(Zae,VZe),e(tg,XZe),e(tg,BR),e(BR,zZe),e(tg,QZe),e(A,WZe),e(A,ag),e(ag,ene),e(ene,HZe),e(ag,UZe),e(ag,IR),e(IR,JZe),e(ag,YZe),e(A,KZe),e(A,ng),e(ng,one),e(one,ZZe),e(ng,eeo),e(ng,NR),e(NR,oeo),e(ng,reo),e(A,teo),e(A,sg),e(sg,rne),e(rne,aeo),e(sg,neo),e(sg,qR),e(qR,seo),e(sg,leo),e(A,ieo),e(A,lg),e(lg,tne),e(tne,deo),e(lg,ceo),e(lg,jR),e(jR,meo),e(lg,feo),e(A,geo),e(A,ig),e(ig,ane),e(ane,heo),e(ig,ueo),e(ig,DR),e(DR,peo),e(ig,_eo),e(A,beo),e(A,dg),e(dg,nne),e(nne,veo),e(dg,Feo),e(dg,GR),e(GR,Teo),e(dg,Meo),e(A,Eeo),e(A,cg),e(cg,sne),e(sne,Ceo),e(cg,weo),e(cg,OR),e(OR,Aeo),e(cg,Leo),e(A,yeo),e(A,mg),e(mg,lne),e(lne,xeo),e(mg,$eo),e(mg,VR),e(VR,keo),e(mg,Seo),e(A,Reo),e(A,fg),e(fg,ine),e(ine,Peo),e(fg,Beo),e(fg,XR),e(XR,Ieo),e(fg,Neo),e(A,qeo),e(A,gg),e(gg,dne),e(dne,jeo),e(gg,Deo),e(gg,zR),e(zR,Geo),e(gg,Oeo),e(A,Veo),e(A,hg),e(hg,cne),e(cne,Xeo),e(hg,zeo),e(hg,QR),e(QR,Qeo),e(hg,Weo),e(A,Heo),e(A,ug),e(ug,mne),e(mne,Ueo),e(ug,Jeo),e(ug,WR),e(WR,Yeo),e(ug,Keo),e(A,Zeo),e(A,pg),e(pg,fne),e(fne,eoo),e(pg,ooo),e(pg,HR),e(HR,roo),e(pg,too),e(A,aoo),e(A,_g),e(_g,gne),e(gne,noo),e(_g,soo),e(_g,UR),e(UR,loo),e(_g,ioo),e(A,doo),e(A,bg),e(bg,hne),e(hne,coo),e(bg,moo),e(bg,JR),e(JR,foo),e(bg,goo),e(A,hoo),e(A,vg),e(vg,une),e(une,uoo),e(vg,poo),e(vg,YR),e(YR,_oo),e(vg,boo),e(A,voo),e(A,Fg),e(Fg,pne),e(pne,Foo),e(Fg,Too),e(Fg,KR),e(KR,Moo),e(Fg,Eoo),e(A,Coo),e(A,Tg),e(Tg,_ne),e(_ne,woo),e(Tg,Aoo),e(Tg,ZR),e(ZR,Loo),e(Tg,yoo),e(A,xoo),e(A,Mg),e(Mg,bne),e(bne,$oo),e(Mg,koo),e(Mg,eP),e(eP,Soo),e(Mg,Roo),e(A,Poo),e(A,Eg),e(Eg,vne),e(vne,Boo),e(Eg,Ioo),e(Eg,oP),e(oP,Noo),e(Eg,qoo),e(A,joo),e(A,Cg),e(Cg,Fne),e(Fne,Doo),e(Cg,Goo),e(Cg,rP),e(rP,Ooo),e(Cg,Voo),e(A,Xoo),e(A,wg),e(wg,Tne),e(Tne,zoo),e(wg,Qoo),e(wg,tP),e(tP,Woo),e(wg,Hoo),e(A,Uoo),e(A,Ag),e(Ag,Mne),e(Mne,Joo),e(Ag,Yoo),e(Ag,aP),e(aP,Koo),e(Ag,Zoo),e(A,ero),e(A,Lg),e(Lg,Ene),e(Ene,oro),e(Lg,rro),e(Lg,nP),e(nP,tro),e(Lg,aro),e(A,nro),e(A,yg),e(yg,Cne),e(Cne,sro),e(yg,lro),e(yg,sP),e(sP,iro),e(yg,dro),e(A,cro),e(A,xg),e(xg,wne),e(wne,mro),e(xg,fro),e(xg,lP),e(lP,gro),e(xg,hro),e(A,uro),e(A,$g),e($g,Ane),e(Ane,pro),e($g,_ro),e($g,iP),e(iP,bro),e($g,vro),e(A,Fro),e(A,kg),e(kg,Lne),e(Lne,Tro),e(kg,Mro),e(kg,dP),e(dP,Ero),e(kg,Cro),e(A,wro),e(A,Sg),e(Sg,yne),e(yne,Aro),e(Sg,Lro),e(Sg,cP),e(cP,yro),e(Sg,xro),e(A,$ro),e(A,Rg),e(Rg,xne),e(xne,kro),e(Rg,Sro),e(Rg,mP),e(mP,Rro),e(Rg,Pro),e(A,Bro),e(A,Pg),e(Pg,$ne),e($ne,Iro),e(Pg,Nro),e(Pg,fP),e(fP,qro),e(Pg,jro),e(A,Dro),e(A,Bg),e(Bg,kne),e(kne,Gro),e(Bg,Oro),e(Bg,gP),e(gP,Vro),e(Bg,Xro),e(A,zro),e(A,Ig),e(Ig,Sne),e(Sne,Qro),e(Ig,Wro),e(Ig,hP),e(hP,Hro),e(Ig,Uro),e(A,Jro),e(A,Ng),e(Ng,Rne),e(Rne,Yro),e(Ng,Kro),e(Ng,uP),e(uP,Zro),e(Ng,eto),e(A,oto),e(A,qg),e(qg,Pne),e(Pne,rto),e(qg,tto),e(qg,pP),e(pP,ato),e(qg,nto),e(A,sto),e(A,jg),e(jg,Bne),e(Bne,lto),e(jg,ito),e(jg,_P),e(_P,dto),e(jg,cto),e(A,mto),e(A,Dg),e(Dg,Ine),e(Ine,fto),e(Dg,gto),e(Dg,bP),e(bP,hto),e(Dg,uto),e(A,pto),e(A,Gg),e(Gg,Nne),e(Nne,_to),e(Gg,bto),e(Gg,vP),e(vP,vto),e(Gg,Fto),e(A,Tto),e(A,Og),e(Og,qne),e(qne,Mto),e(Og,Eto),e(Og,FP),e(FP,Cto),e(Og,wto),e(Ar,Ato),M(Vg,Ar,null),e(wo,Lto),e(wo,Xg),M(D7,Xg,null),e(Xg,yto),e(Xg,jne),e(jne,xto),b(m,dOe,_),b(m,Si,_),e(Si,zg),e(zg,Dne),M(G7,Dne,null),e(Si,$to),e(Si,Gne),e(Gne,kto),b(m,cOe,_),b(m,Ao,_),M(O7,Ao,null),e(Ao,Sto),e(Ao,V7),e(V7,Rto),e(V7,TP),e(TP,Pto),e(V7,Bto),e(Ao,Ito),e(Ao,X7),e(X7,Nto),e(X7,One),e(One,qto),e(X7,jto),e(Ao,Dto),e(Ao,Lr),M(z7,Lr,null),e(Lr,Gto),e(Lr,Vne),e(Vne,Oto),e(Lr,Vto),e(Lr,ka),e(ka,Xto),e(ka,Xne),e(Xne,zto),e(ka,Qto),e(ka,zne),e(zne,Wto),e(ka,Hto),e(ka,Qne),e(Qne,Uto),e(ka,Jto),e(Lr,Yto),e(Lr,k),e(k,qn),e(qn,Wne),e(Wne,Kto),e(qn,Zto),e(qn,MP),e(MP,eao),e(qn,oao),e(qn,EP),e(EP,rao),e(qn,tao),e(k,aao),e(k,jn),e(jn,Hne),e(Hne,nao),e(jn,sao),e(jn,CP),e(CP,lao),e(jn,iao),e(jn,wP),e(wP,dao),e(jn,cao),e(k,mao),e(k,Dn),e(Dn,Une),e(Une,fao),e(Dn,gao),e(Dn,AP),e(AP,hao),e(Dn,uao),e(Dn,LP),e(LP,pao),e(Dn,_ao),e(k,bao),e(k,Qg),e(Qg,Jne),e(Jne,vao),e(Qg,Fao),e(Qg,yP),e(yP,Tao),e(Qg,Mao),e(k,Eao),e(k,Gn),e(Gn,Yne),e(Yne,Cao),e(Gn,wao),e(Gn,xP),e(xP,Aao),e(Gn,Lao),e(Gn,$P),e($P,yao),e(Gn,xao),e(k,$ao),e(k,Wg),e(Wg,Kne),e(Kne,kao),e(Wg,Sao),e(Wg,kP),e(kP,Rao),e(Wg,Pao),e(k,Bao),e(k,Hg),e(Hg,Zne),e(Zne,Iao),e(Hg,Nao),e(Hg,SP),e(SP,qao),e(Hg,jao),e(k,Dao),e(k,Ug),e(Ug,ese),e(ese,Gao),e(Ug,Oao),e(Ug,RP),e(RP,Vao),e(Ug,Xao),e(k,zao),e(k,On),e(On,ose),e(ose,Qao),e(On,Wao),e(On,PP),e(PP,Hao),e(On,Uao),e(On,BP),e(BP,Jao),e(On,Yao),e(k,Kao),e(k,Vn),e(Vn,rse),e(rse,Zao),e(Vn,eno),e(Vn,IP),e(IP,ono),e(Vn,rno),e(Vn,NP),e(NP,tno),e(Vn,ano),e(k,nno),e(k,Xn),e(Xn,tse),e(tse,sno),e(Xn,lno),e(Xn,qP),e(qP,ino),e(Xn,dno),e(Xn,jP),e(jP,cno),e(Xn,mno),e(k,fno),e(k,Jg),e(Jg,ase),e(ase,gno),e(Jg,hno),e(Jg,DP),e(DP,uno),e(Jg,pno),e(k,_no),e(k,Yg),e(Yg,nse),e(nse,bno),e(Yg,vno),e(Yg,GP),e(GP,Fno),e(Yg,Tno),e(k,Mno),e(k,Kg),e(Kg,sse),e(sse,Eno),e(Kg,Cno),e(Kg,OP),e(OP,wno),e(Kg,Ano),e(k,Lno),e(k,zn),e(zn,lse),e(lse,yno),e(zn,xno),e(zn,VP),e(VP,$no),e(zn,kno),e(zn,XP),e(XP,Sno),e(zn,Rno),e(k,Pno),e(k,Zg),e(Zg,ise),e(ise,Bno),e(Zg,Ino),e(Zg,zP),e(zP,Nno),e(Zg,qno),e(k,jno),e(k,Qn),e(Qn,dse),e(dse,Dno),e(Qn,Gno),e(Qn,QP),e(QP,Ono),e(Qn,Vno),e(Qn,WP),e(WP,Xno),e(Qn,zno),e(k,Qno),e(k,Wn),e(Wn,cse),e(cse,Wno),e(Wn,Hno),e(Wn,HP),e(HP,Uno),e(Wn,Jno),e(Wn,UP),e(UP,Yno),e(Wn,Kno),e(k,Zno),e(k,Hn),e(Hn,mse),e(mse,eso),e(Hn,oso),e(Hn,JP),e(JP,rso),e(Hn,tso),e(Hn,YP),e(YP,aso),e(Hn,nso),e(k,sso),e(k,Un),e(Un,fse),e(fse,lso),e(Un,iso),e(Un,KP),e(KP,dso),e(Un,cso),e(Un,ZP),e(ZP,mso),e(Un,fso),e(k,gso),e(k,eh),e(eh,gse),e(gse,hso),e(eh,uso),e(eh,eB),e(eB,pso),e(eh,_so),e(k,bso),e(k,Jn),e(Jn,hse),e(hse,vso),e(Jn,Fso),e(Jn,oB),e(oB,Tso),e(Jn,Mso),e(Jn,rB),e(rB,Eso),e(Jn,Cso),e(k,wso),e(k,Yn),e(Yn,use),e(use,Aso),e(Yn,Lso),e(Yn,tB),e(tB,yso),e(Yn,xso),e(Yn,aB),e(aB,$so),e(Yn,kso),e(k,Sso),e(k,Kn),e(Kn,pse),e(pse,Rso),e(Kn,Pso),e(Kn,nB),e(nB,Bso),e(Kn,Iso),e(Kn,sB),e(sB,Nso),e(Kn,qso),e(k,jso),e(k,Zn),e(Zn,_se),e(_se,Dso),e(Zn,Gso),e(Zn,lB),e(lB,Oso),e(Zn,Vso),e(Zn,iB),e(iB,Xso),e(Zn,zso),e(k,Qso),e(k,es),e(es,bse),e(bse,Wso),e(es,Hso),e(es,dB),e(dB,Uso),e(es,Jso),e(es,cB),e(cB,Yso),e(es,Kso),e(k,Zso),e(k,os),e(os,vse),e(vse,elo),e(os,olo),e(os,mB),e(mB,rlo),e(os,tlo),e(os,fB),e(fB,alo),e(os,nlo),e(k,slo),e(k,oh),e(oh,Fse),e(Fse,llo),e(oh,ilo),e(oh,gB),e(gB,dlo),e(oh,clo),e(k,mlo),e(k,rs),e(rs,Tse),e(Tse,flo),e(rs,glo),e(rs,hB),e(hB,hlo),e(rs,ulo),e(rs,uB),e(uB,plo),e(rs,_lo),e(k,blo),e(k,rh),e(rh,Mse),e(Mse,vlo),e(rh,Flo),e(rh,pB),e(pB,Tlo),e(rh,Mlo),e(k,Elo),e(k,ts),e(ts,Ese),e(Ese,Clo),e(ts,wlo),e(ts,_B),e(_B,Alo),e(ts,Llo),e(ts,bB),e(bB,ylo),e(ts,xlo),e(k,$lo),e(k,as),e(as,Cse),e(Cse,klo),e(as,Slo),e(as,vB),e(vB,Rlo),e(as,Plo),e(as,FB),e(FB,Blo),e(as,Ilo),e(k,Nlo),e(k,ns),e(ns,wse),e(wse,qlo),e(ns,jlo),e(ns,TB),e(TB,Dlo),e(ns,Glo),e(ns,MB),e(MB,Olo),e(ns,Vlo),e(k,Xlo),e(k,th),e(th,Ase),e(Ase,zlo),e(th,Qlo),e(th,EB),e(EB,Wlo),e(th,Hlo),e(k,Ulo),e(k,ss),e(ss,Lse),e(Lse,Jlo),e(ss,Ylo),e(ss,CB),e(CB,Klo),e(ss,Zlo),e(ss,wB),e(wB,eio),e(ss,oio),e(k,rio),e(k,ls),e(ls,yse),e(yse,tio),e(ls,aio),e(ls,AB),e(AB,nio),e(ls,sio),e(ls,LB),e(LB,lio),e(ls,iio),e(k,dio),e(k,ah),e(ah,xse),e(xse,cio),e(ah,mio),e(ah,yB),e(yB,fio),e(ah,gio),e(k,hio),e(k,is),e(is,$se),e($se,uio),e(is,pio),e(is,xB),e(xB,_io),e(is,bio),e(is,$B),e($B,vio),e(is,Fio),e(k,Tio),e(k,ds),e(ds,kse),e(kse,Mio),e(ds,Eio),e(ds,kB),e(kB,Cio),e(ds,wio),e(ds,SB),e(SB,Aio),e(ds,Lio),e(k,yio),e(k,cs),e(cs,Sse),e(Sse,xio),e(cs,$io),e(cs,RB),e(RB,kio),e(cs,Sio),e(cs,PB),e(PB,Rio),e(cs,Pio),e(k,Bio),e(k,ms),e(ms,Rse),e(Rse,Iio),e(ms,Nio),e(ms,BB),e(BB,qio),e(ms,jio),e(ms,IB),e(IB,Dio),e(ms,Gio),e(k,Oio),e(k,fs),e(fs,Pse),e(Pse,Vio),e(fs,Xio),e(fs,NB),e(NB,zio),e(fs,Qio),e(fs,qB),e(qB,Wio),e(fs,Hio),e(k,Uio),e(k,gs),e(gs,Bse),e(Bse,Jio),e(gs,Yio),e(gs,jB),e(jB,Kio),e(gs,Zio),e(gs,DB),e(DB,edo),e(gs,odo),e(k,rdo),e(k,hs),e(hs,Ise),e(Ise,tdo),e(hs,ado),e(hs,GB),e(GB,ndo),e(hs,sdo),e(hs,OB),e(OB,ldo),e(hs,ido),e(k,ddo),e(k,us),e(us,Nse),e(Nse,cdo),e(us,mdo),e(us,VB),e(VB,fdo),e(us,gdo),e(us,XB),e(XB,hdo),e(us,udo),e(k,pdo),e(k,nh),e(nh,qse),e(qse,_do),e(nh,bdo),e(nh,zB),e(zB,vdo),e(nh,Fdo),e(k,Tdo),e(k,ps),e(ps,jse),e(jse,Mdo),e(ps,Edo),e(ps,QB),e(QB,Cdo),e(ps,wdo),e(ps,WB),e(WB,Ado),e(ps,Ldo),e(k,ydo),e(k,sh),e(sh,Dse),e(Dse,xdo),e(sh,$do),e(sh,HB),e(HB,kdo),e(sh,Sdo),e(k,Rdo),e(k,lh),e(lh,Gse),e(Gse,Pdo),e(lh,Bdo),e(lh,UB),e(UB,Ido),e(lh,Ndo),e(k,qdo),e(k,_s),e(_s,Ose),e(Ose,jdo),e(_s,Ddo),e(_s,JB),e(JB,Gdo),e(_s,Odo),e(_s,YB),e(YB,Vdo),e(_s,Xdo),e(k,zdo),e(k,bs),e(bs,Vse),e(Vse,Qdo),e(bs,Wdo),e(bs,KB),e(KB,Hdo),e(bs,Udo),e(bs,ZB),e(ZB,Jdo),e(bs,Ydo),e(k,Kdo),e(k,vs),e(vs,Xse),e(Xse,Zdo),e(vs,eco),e(vs,eI),e(eI,oco),e(vs,rco),e(vs,oI),e(oI,tco),e(vs,aco),e(k,nco),e(k,ih),e(ih,zse),e(zse,sco),e(ih,lco),e(ih,rI),e(rI,ico),e(ih,dco),e(k,cco),e(k,Fs),e(Fs,Qse),e(Qse,mco),e(Fs,fco),e(Fs,tI),e(tI,gco),e(Fs,hco),e(Fs,aI),e(aI,uco),e(Fs,pco),e(k,_co),e(k,Ts),e(Ts,Wse),e(Wse,bco),e(Ts,vco),e(Ts,nI),e(nI,Fco),e(Ts,Tco),e(Ts,sI),e(sI,Mco),e(Ts,Eco),e(k,Cco),e(k,Ms),e(Ms,Hse),e(Hse,wco),e(Ms,Aco),e(Ms,lI),e(lI,Lco),e(Ms,yco),e(Ms,iI),e(iI,xco),e(Ms,$co),e(k,kco),e(k,Es),e(Es,Use),e(Use,Sco),e(Es,Rco),e(Es,dI),e(dI,Pco),e(Es,Bco),e(Es,cI),e(cI,Ico),e(Es,Nco),e(k,qco),e(k,Cs),e(Cs,Jse),e(Jse,jco),e(Cs,Dco),e(Cs,mI),e(mI,Gco),e(Cs,Oco),e(Cs,fI),e(fI,Vco),e(Cs,Xco),e(k,zco),e(k,ws),e(ws,Yse),e(Yse,Qco),e(ws,Wco),e(ws,gI),e(gI,Hco),e(ws,Uco),e(ws,hI),e(hI,Jco),e(ws,Yco),e(k,Kco),e(k,dh),e(dh,Kse),e(Kse,Zco),e(dh,emo),e(dh,uI),e(uI,omo),e(dh,rmo),e(k,tmo),e(k,As),e(As,Zse),e(Zse,amo),e(As,nmo),e(As,pI),e(pI,smo),e(As,lmo),e(As,_I),e(_I,imo),e(As,dmo),e(k,cmo),e(k,ch),e(ch,ele),e(ele,mmo),e(ch,fmo),e(ch,bI),e(bI,gmo),e(ch,hmo),e(k,umo),e(k,mh),e(mh,ole),e(ole,pmo),e(mh,_mo),e(mh,vI),e(vI,bmo),e(mh,vmo),e(k,Fmo),e(k,fh),e(fh,rle),e(rle,Tmo),e(fh,Mmo),e(fh,FI),e(FI,Emo),e(fh,Cmo),e(k,wmo),e(k,gh),e(gh,tle),e(tle,Amo),e(gh,Lmo),e(gh,TI),e(TI,ymo),e(gh,xmo),e(k,$mo),e(k,Ls),e(Ls,ale),e(ale,kmo),e(Ls,Smo),e(Ls,MI),e(MI,Rmo),e(Ls,Pmo),e(Ls,EI),e(EI,Bmo),e(Ls,Imo),e(k,Nmo),e(k,hh),e(hh,nle),e(nle,qmo),e(hh,jmo),e(hh,CI),e(CI,Dmo),e(hh,Gmo),e(k,Omo),e(k,ys),e(ys,sle),e(sle,Vmo),e(ys,Xmo),e(ys,wI),e(wI,zmo),e(ys,Qmo),e(ys,AI),e(AI,Wmo),e(ys,Hmo),e(k,Umo),e(k,xs),e(xs,lle),e(lle,Jmo),e(xs,Ymo),e(xs,LI),e(LI,Kmo),e(xs,Zmo),e(xs,yI),e(yI,efo),e(xs,ofo),e(k,rfo),e(k,$s),e($s,ile),e(ile,tfo),e($s,afo),e($s,xI),e(xI,nfo),e($s,sfo),e($s,$I),e($I,lfo),e($s,ifo),e(k,dfo),e(k,ks),e(ks,dle),e(dle,cfo),e(ks,mfo),e(ks,kI),e(kI,ffo),e(ks,gfo),e(ks,SI),e(SI,hfo),e(ks,ufo),e(k,pfo),e(k,Ss),e(Ss,cle),e(cle,_fo),e(Ss,bfo),e(Ss,RI),e(RI,vfo),e(Ss,Ffo),e(Ss,PI),e(PI,Tfo),e(Ss,Mfo),e(k,Efo),e(k,Rs),e(Rs,mle),e(mle,Cfo),e(Rs,wfo),e(Rs,BI),e(BI,Afo),e(Rs,Lfo),e(Rs,II),e(II,yfo),e(Rs,xfo),e(k,$fo),e(k,uh),e(uh,fle),e(fle,kfo),e(uh,Sfo),e(uh,NI),e(NI,Rfo),e(uh,Pfo),e(k,Bfo),e(k,ph),e(ph,gle),e(gle,Ifo),e(ph,Nfo),e(ph,qI),e(qI,qfo),e(ph,jfo),e(k,Dfo),e(k,Ps),e(Ps,hle),e(hle,Gfo),e(Ps,Ofo),e(Ps,jI),e(jI,Vfo),e(Ps,Xfo),e(Ps,DI),e(DI,zfo),e(Ps,Qfo),e(k,Wfo),e(k,Bs),e(Bs,ule),e(ule,Hfo),e(Bs,Ufo),e(Bs,GI),e(GI,Jfo),e(Bs,Yfo),e(Bs,OI),e(OI,Kfo),e(Bs,Zfo),e(k,ego),e(k,Is),e(Is,ple),e(ple,ogo),e(Is,rgo),e(Is,VI),e(VI,tgo),e(Is,ago),e(Is,XI),e(XI,ngo),e(Is,sgo),e(k,lgo),e(k,_h),e(_h,_le),e(_le,igo),e(_h,dgo),e(_h,zI),e(zI,cgo),e(_h,mgo),e(k,fgo),e(k,bh),e(bh,ble),e(ble,ggo),e(bh,hgo),e(bh,QI),e(QI,ugo),e(bh,pgo),e(k,_go),e(k,vh),e(vh,vle),e(vle,bgo),e(vh,vgo),e(vh,WI),e(WI,Fgo),e(vh,Tgo),e(k,Mgo),e(k,Ns),e(Ns,Fle),e(Fle,Ego),e(Ns,Cgo),e(Ns,HI),e(HI,wgo),e(Ns,Ago),e(Ns,UI),e(UI,Lgo),e(Ns,ygo),e(k,xgo),e(k,qs),e(qs,Tle),e(Tle,$go),e(qs,kgo),e(qs,JI),e(JI,Sgo),e(qs,Rgo),e(qs,YI),e(YI,Pgo),e(qs,Bgo),e(k,Igo),e(k,Fh),e(Fh,Mle),e(Mle,Ngo),e(Fh,qgo),e(Fh,KI),e(KI,jgo),e(Fh,Dgo),e(k,Ggo),e(k,Th),e(Th,Ele),e(Ele,Ogo),e(Th,Vgo),e(Th,ZI),e(ZI,Xgo),e(Th,zgo),e(k,Qgo),e(k,Mh),e(Mh,Cle),e(Cle,Wgo),e(Mh,Hgo),e(Mh,eN),e(eN,Ugo),e(Mh,Jgo),e(k,Ygo),e(k,js),e(js,wle),e(wle,Kgo),e(js,Zgo),e(js,oN),e(oN,eho),e(js,oho),e(js,rN),e(rN,rho),e(js,tho),e(k,aho),e(k,Eh),e(Eh,Ale),e(Ale,nho),e(Eh,sho),e(Eh,tN),e(tN,lho),e(Eh,iho),e(k,dho),e(k,Ch),e(Ch,Lle),e(Lle,cho),e(Ch,mho),e(Ch,aN),e(aN,fho),e(Ch,gho),e(k,hho),e(k,Ds),e(Ds,yle),e(yle,uho),e(Ds,pho),e(Ds,nN),e(nN,_ho),e(Ds,bho),e(Ds,sN),e(sN,vho),e(Ds,Fho),e(k,Tho),e(k,Gs),e(Gs,xle),e(xle,Mho),e(Gs,Eho),e(Gs,lN),e(lN,Cho),e(Gs,who),e(Gs,iN),e(iN,Aho),e(Gs,Lho),e(k,yho),e(k,Os),e(Os,$le),e($le,xho),e(Os,$ho),e(Os,dN),e(dN,kho),e(Os,Sho),e(Os,cN),e(cN,Rho),e(Os,Pho),e(k,Bho),e(k,Vs),e(Vs,kle),e(kle,Iho),e(Vs,Nho),e(Vs,mN),e(mN,qho),e(Vs,jho),e(Vs,fN),e(fN,Dho),e(Vs,Gho),e(Lr,Oho),M(wh,Lr,null),e(Ao,Vho),e(Ao,Ah),M(Q7,Ah,null),e(Ah,Xho),e(Ah,Sle),e(Sle,zho),b(m,mOe,_),b(m,Ri,_),e(Ri,Lh),e(Lh,Rle),M(W7,Rle,null),e(Ri,Qho),e(Ri,Ple),e(Ple,Who),b(m,fOe,_),b(m,Lo,_),M(H7,Lo,null),e(Lo,Hho),e(Lo,U7),e(U7,Uho),e(U7,gN),e(gN,Jho),e(U7,Yho),e(Lo,Kho),e(Lo,J7),e(J7,Zho),e(J7,Ble),e(Ble,euo),e(J7,ouo),e(Lo,ruo),e(Lo,He),M(Y7,He,null),e(He,tuo),e(He,Ile),e(Ile,auo),e(He,nuo),e(He,Sa),e(Sa,suo),e(Sa,Nle),e(Nle,luo),e(Sa,iuo),e(Sa,qle),e(qle,duo),e(Sa,cuo),e(Sa,jle),e(jle,muo),e(Sa,fuo),e(He,guo),e(He,Y),e(Y,yh),e(yh,Dle),e(Dle,huo),e(yh,uuo),e(yh,hN),e(hN,puo),e(yh,_uo),e(Y,buo),e(Y,xh),e(xh,Gle),e(Gle,vuo),e(xh,Fuo),e(xh,uN),e(uN,Tuo),e(xh,Muo),e(Y,Euo),e(Y,$h),e($h,Ole),e(Ole,Cuo),e($h,wuo),e($h,pN),e(pN,Auo),e($h,Luo),e(Y,yuo),e(Y,kh),e(kh,Vle),e(Vle,xuo),e(kh,$uo),e(kh,_N),e(_N,kuo),e(kh,Suo),e(Y,Ruo),e(Y,Sh),e(Sh,Xle),e(Xle,Puo),e(Sh,Buo),e(Sh,bN),e(bN,Iuo),e(Sh,Nuo),e(Y,quo),e(Y,Rh),e(Rh,zle),e(zle,juo),e(Rh,Duo),e(Rh,vN),e(vN,Guo),e(Rh,Ouo),e(Y,Vuo),e(Y,Ph),e(Ph,Qle),e(Qle,Xuo),e(Ph,zuo),e(Ph,FN),e(FN,Quo),e(Ph,Wuo),e(Y,Huo),e(Y,Bh),e(Bh,Wle),e(Wle,Uuo),e(Bh,Juo),e(Bh,TN),e(TN,Yuo),e(Bh,Kuo),e(Y,Zuo),e(Y,Ih),e(Ih,Hle),e(Hle,epo),e(Ih,opo),e(Ih,MN),e(MN,rpo),e(Ih,tpo),e(Y,apo),e(Y,Nh),e(Nh,Ule),e(Ule,npo),e(Nh,spo),e(Nh,EN),e(EN,lpo),e(Nh,ipo),e(Y,dpo),e(Y,qh),e(qh,Jle),e(Jle,cpo),e(qh,mpo),e(qh,CN),e(CN,fpo),e(qh,gpo),e(Y,hpo),e(Y,jh),e(jh,Yle),e(Yle,upo),e(jh,ppo),e(jh,wN),e(wN,_po),e(jh,bpo),e(Y,vpo),e(Y,Dh),e(Dh,Kle),e(Kle,Fpo),e(Dh,Tpo),e(Dh,AN),e(AN,Mpo),e(Dh,Epo),e(Y,Cpo),e(Y,Gh),e(Gh,Zle),e(Zle,wpo),e(Gh,Apo),e(Gh,LN),e(LN,Lpo),e(Gh,ypo),e(Y,xpo),e(Y,Oh),e(Oh,eie),e(eie,$po),e(Oh,kpo),e(Oh,yN),e(yN,Spo),e(Oh,Rpo),e(Y,Ppo),e(Y,Vh),e(Vh,oie),e(oie,Bpo),e(Vh,Ipo),e(Vh,xN),e(xN,Npo),e(Vh,qpo),e(Y,jpo),e(Y,Xh),e(Xh,rie),e(rie,Dpo),e(Xh,Gpo),e(Xh,$N),e($N,Opo),e(Xh,Vpo),e(Y,Xpo),e(Y,zh),e(zh,tie),e(tie,zpo),e(zh,Qpo),e(zh,kN),e(kN,Wpo),e(zh,Hpo),e(Y,Upo),e(Y,Qh),e(Qh,aie),e(aie,Jpo),e(Qh,Ypo),e(Qh,SN),e(SN,Kpo),e(Qh,Zpo),e(Y,e_o),e(Y,Wh),e(Wh,nie),e(nie,o_o),e(Wh,r_o),e(Wh,RN),e(RN,t_o),e(Wh,a_o),e(Y,n_o),e(Y,Hh),e(Hh,sie),e(sie,s_o),e(Hh,l_o),e(Hh,PN),e(PN,i_o),e(Hh,d_o),e(Y,c_o),e(Y,Uh),e(Uh,lie),e(lie,m_o),e(Uh,f_o),e(Uh,BN),e(BN,g_o),e(Uh,h_o),e(Y,u_o),e(Y,Jh),e(Jh,iie),e(iie,p_o),e(Jh,__o),e(Jh,IN),e(IN,b_o),e(Jh,v_o),e(Y,F_o),e(Y,Yh),e(Yh,die),e(die,T_o),e(Yh,M_o),e(Yh,NN),e(NN,E_o),e(Yh,C_o),e(Y,w_o),e(Y,Kh),e(Kh,cie),e(cie,A_o),e(Kh,L_o),e(Kh,qN),e(qN,y_o),e(Kh,x_o),e(Y,$_o),e(Y,Zh),e(Zh,mie),e(mie,k_o),e(Zh,S_o),e(Zh,jN),e(jN,R_o),e(Zh,P_o),e(Y,B_o),e(Y,eu),e(eu,fie),e(fie,I_o),e(eu,N_o),e(eu,DN),e(DN,q_o),e(eu,j_o),e(Y,D_o),e(Y,ou),e(ou,gie),e(gie,G_o),e(ou,O_o),e(ou,GN),e(GN,V_o),e(ou,X_o),e(Y,z_o),e(Y,ru),e(ru,hie),e(hie,Q_o),e(ru,W_o),e(ru,ON),e(ON,H_o),e(ru,U_o),e(Y,J_o),e(Y,tu),e(tu,uie),e(uie,Y_o),e(tu,K_o),e(tu,VN),e(VN,Z_o),e(tu,e2o),e(Y,o2o),e(Y,au),e(au,pie),e(pie,r2o),e(au,t2o),e(au,XN),e(XN,a2o),e(au,n2o),e(Y,s2o),e(Y,nu),e(nu,_ie),e(_ie,l2o),e(nu,i2o),e(nu,zN),e(zN,d2o),e(nu,c2o),e(He,m2o),M(su,He,null),e(He,f2o),M(lu,He,null),e(Lo,g2o),e(Lo,iu),M(K7,iu,null),e(iu,h2o),e(iu,bie),e(bie,u2o),b(m,gOe,_),b(m,Pi,_),e(Pi,du),e(du,vie),M(Z7,vie,null),e(Pi,p2o),e(Pi,Fie),e(Fie,_2o),b(m,hOe,_),b(m,yo,_),M(ey,yo,null),e(yo,b2o),e(yo,oy),e(oy,v2o),e(oy,QN),e(QN,F2o),e(oy,T2o),e(yo,M2o),e(yo,ry),e(ry,E2o),e(ry,Tie),e(Tie,C2o),e(ry,w2o),e(yo,A2o),e(yo,Ue),M(ty,Ue,null),e(Ue,L2o),e(Ue,Mie),e(Mie,y2o),e(Ue,x2o),e(Ue,Bi),e(Bi,$2o),e(Bi,Eie),e(Eie,k2o),e(Bi,S2o),e(Bi,Cie),e(Cie,R2o),e(Bi,P2o),e(Ue,B2o),e(Ue,he),e(he,cu),e(cu,wie),e(wie,I2o),e(cu,N2o),e(cu,WN),e(WN,q2o),e(cu,j2o),e(he,D2o),e(he,mu),e(mu,Aie),e(Aie,G2o),e(mu,O2o),e(mu,Lie),e(Lie,V2o),e(mu,X2o),e(he,z2o),e(he,fu),e(fu,yie),e(yie,Q2o),e(fu,W2o),e(fu,HN),e(HN,H2o),e(fu,U2o),e(he,J2o),e(he,gu),e(gu,xie),e(xie,Y2o),e(gu,K2o),e(gu,UN),e(UN,Z2o),e(gu,ebo),e(he,obo),e(he,hu),e(hu,$ie),e($ie,rbo),e(hu,tbo),e(hu,JN),e(JN,abo),e(hu,nbo),e(he,sbo),e(he,uu),e(uu,kie),e(kie,lbo),e(uu,ibo),e(uu,YN),e(YN,dbo),e(uu,cbo),e(he,mbo),e(he,pu),e(pu,Sie),e(Sie,fbo),e(pu,gbo),e(pu,KN),e(KN,hbo),e(pu,ubo),e(he,pbo),e(he,_u),e(_u,Rie),e(Rie,_bo),e(_u,bbo),e(_u,ZN),e(ZN,vbo),e(_u,Fbo),e(he,Tbo),e(he,bu),e(bu,Pie),e(Pie,Mbo),e(bu,Ebo),e(bu,eq),e(eq,Cbo),e(bu,wbo),e(he,Abo),e(he,vu),e(vu,Bie),e(Bie,Lbo),e(vu,ybo),e(vu,oq),e(oq,xbo),e(vu,$bo),e(he,kbo),e(he,Fu),e(Fu,Iie),e(Iie,Sbo),e(Fu,Rbo),e(Fu,rq),e(rq,Pbo),e(Fu,Bbo),e(he,Ibo),e(he,Tu),e(Tu,Nie),e(Nie,Nbo),e(Tu,qbo),e(Tu,tq),e(tq,jbo),e(Tu,Dbo),e(he,Gbo),e(he,Mu),e(Mu,qie),e(qie,Obo),e(Mu,Vbo),e(Mu,aq),e(aq,Xbo),e(Mu,zbo),e(he,Qbo),e(he,Eu),e(Eu,jie),e(jie,Wbo),e(Eu,Hbo),e(Eu,nq),e(nq,Ubo),e(Eu,Jbo),e(he,Ybo),e(he,Cu),e(Cu,Die),e(Die,Kbo),e(Cu,Zbo),e(Cu,sq),e(sq,evo),e(Cu,ovo),e(he,rvo),e(he,wu),e(wu,Gie),e(Gie,tvo),e(wu,avo),e(wu,lq),e(lq,nvo),e(wu,svo),e(he,lvo),e(he,Au),e(Au,Oie),e(Oie,ivo),e(Au,dvo),e(Au,iq),e(iq,cvo),e(Au,mvo),e(Ue,fvo),M(Lu,Ue,null),e(Ue,gvo),M(yu,Ue,null),e(yo,hvo),e(yo,xu),M(ay,xu,null),e(xu,uvo),e(xu,Vie),e(Vie,pvo),b(m,uOe,_),b(m,Ii,_),e(Ii,$u),e($u,Xie),M(ny,Xie,null),e(Ii,_vo),e(Ii,zie),e(zie,bvo),b(m,pOe,_),b(m,xo,_),M(sy,xo,null),e(xo,vvo),e(xo,Ni),e(Ni,Fvo),e(Ni,dq),e(dq,Tvo),e(Ni,Mvo),e(Ni,cq),e(cq,Evo),e(Ni,Cvo),e(xo,wvo),e(xo,ly),e(ly,Avo),e(ly,Qie),e(Qie,Lvo),e(ly,yvo),e(xo,xvo),e(xo,nt),M(iy,nt,null),e(nt,$vo),e(nt,Wie),e(Wie,kvo),e(nt,Svo),e(nt,qi),e(qi,Rvo),e(qi,Hie),e(Hie,Pvo),e(qi,Bvo),e(qi,mq),e(mq,Ivo),e(qi,Nvo),e(nt,qvo),M(ku,nt,null),e(xo,jvo),e(xo,Je),M(dy,Je,null),e(Je,Dvo),e(Je,Uie),e(Uie,Gvo),e(Je,Ovo),e(Je,Ra),e(Ra,Vvo),e(Ra,Jie),e(Jie,Xvo),e(Ra,zvo),e(Ra,Yie),e(Yie,Qvo),e(Ra,Wvo),e(Ra,Kie),e(Kie,Hvo),e(Ra,Uvo),e(Je,Jvo),e(Je,y),e(y,Su),e(Su,Zie),e(Zie,Yvo),e(Su,Kvo),e(Su,fq),e(fq,Zvo),e(Su,eFo),e(y,oFo),e(y,Ru),e(Ru,ede),e(ede,rFo),e(Ru,tFo),e(Ru,gq),e(gq,aFo),e(Ru,nFo),e(y,sFo),e(y,Pu),e(Pu,ode),e(ode,lFo),e(Pu,iFo),e(Pu,hq),e(hq,dFo),e(Pu,cFo),e(y,mFo),e(y,Bu),e(Bu,rde),e(rde,fFo),e(Bu,gFo),e(Bu,uq),e(uq,hFo),e(Bu,uFo),e(y,pFo),e(y,Iu),e(Iu,tde),e(tde,_Fo),e(Iu,bFo),e(Iu,pq),e(pq,vFo),e(Iu,FFo),e(y,TFo),e(y,Nu),e(Nu,ade),e(ade,MFo),e(Nu,EFo),e(Nu,_q),e(_q,CFo),e(Nu,wFo),e(y,AFo),e(y,qu),e(qu,nde),e(nde,LFo),e(qu,yFo),e(qu,bq),e(bq,xFo),e(qu,$Fo),e(y,kFo),e(y,ju),e(ju,sde),e(sde,SFo),e(ju,RFo),e(ju,vq),e(vq,PFo),e(ju,BFo),e(y,IFo),e(y,Du),e(Du,lde),e(lde,NFo),e(Du,qFo),e(Du,Fq),e(Fq,jFo),e(Du,DFo),e(y,GFo),e(y,Gu),e(Gu,ide),e(ide,OFo),e(Gu,VFo),e(Gu,Tq),e(Tq,XFo),e(Gu,zFo),e(y,QFo),e(y,Ou),e(Ou,dde),e(dde,WFo),e(Ou,HFo),e(Ou,Mq),e(Mq,UFo),e(Ou,JFo),e(y,YFo),e(y,Vu),e(Vu,cde),e(cde,KFo),e(Vu,ZFo),e(Vu,Eq),e(Eq,e1o),e(Vu,o1o),e(y,r1o),e(y,Xu),e(Xu,mde),e(mde,t1o),e(Xu,a1o),e(Xu,Cq),e(Cq,n1o),e(Xu,s1o),e(y,l1o),e(y,zu),e(zu,fde),e(fde,i1o),e(zu,d1o),e(zu,wq),e(wq,c1o),e(zu,m1o),e(y,f1o),e(y,Qu),e(Qu,gde),e(gde,g1o),e(Qu,h1o),e(Qu,Aq),e(Aq,u1o),e(Qu,p1o),e(y,_1o),e(y,Wu),e(Wu,hde),e(hde,b1o),e(Wu,v1o),e(Wu,Lq),e(Lq,F1o),e(Wu,T1o),e(y,M1o),e(y,Hu),e(Hu,ude),e(ude,E1o),e(Hu,C1o),e(Hu,yq),e(yq,w1o),e(Hu,A1o),e(y,L1o),e(y,Uu),e(Uu,pde),e(pde,y1o),e(Uu,x1o),e(Uu,xq),e(xq,$1o),e(Uu,k1o),e(y,S1o),e(y,Ju),e(Ju,_de),e(_de,R1o),e(Ju,P1o),e(Ju,$q),e($q,B1o),e(Ju,I1o),e(y,N1o),e(y,Yu),e(Yu,bde),e(bde,q1o),e(Yu,j1o),e(Yu,kq),e(kq,D1o),e(Yu,G1o),e(y,O1o),e(y,Ku),e(Ku,vde),e(vde,V1o),e(Ku,X1o),e(Ku,Sq),e(Sq,z1o),e(Ku,Q1o),e(y,W1o),e(y,Zu),e(Zu,Fde),e(Fde,H1o),e(Zu,U1o),e(Zu,Rq),e(Rq,J1o),e(Zu,Y1o),e(y,K1o),e(y,ep),e(ep,Tde),e(Tde,Z1o),e(ep,eTo),e(ep,Pq),e(Pq,oTo),e(ep,rTo),e(y,tTo),e(y,op),e(op,Mde),e(Mde,aTo),e(op,nTo),e(op,Bq),e(Bq,sTo),e(op,lTo),e(y,iTo),e(y,rp),e(rp,Ede),e(Ede,dTo),e(rp,cTo),e(rp,Iq),e(Iq,mTo),e(rp,fTo),e(y,gTo),e(y,tp),e(tp,Cde),e(Cde,hTo),e(tp,uTo),e(tp,Nq),e(Nq,pTo),e(tp,_To),e(y,bTo),e(y,ap),e(ap,wde),e(wde,vTo),e(ap,FTo),e(ap,qq),e(qq,TTo),e(ap,MTo),e(y,ETo),e(y,np),e(np,Ade),e(Ade,CTo),e(np,wTo),e(np,jq),e(jq,ATo),e(np,LTo),e(y,yTo),e(y,sp),e(sp,Lde),e(Lde,xTo),e(sp,$To),e(sp,Dq),e(Dq,kTo),e(sp,STo),e(y,RTo),e(y,lp),e(lp,yde),e(yde,PTo),e(lp,BTo),e(lp,Gq),e(Gq,ITo),e(lp,NTo),e(y,qTo),e(y,ip),e(ip,xde),e(xde,jTo),e(ip,DTo),e(ip,Oq),e(Oq,GTo),e(ip,OTo),e(y,VTo),e(y,dp),e(dp,$de),e($de,XTo),e(dp,zTo),e(dp,Vq),e(Vq,QTo),e(dp,WTo),e(y,HTo),e(y,cp),e(cp,kde),e(kde,UTo),e(cp,JTo),e(cp,Xq),e(Xq,YTo),e(cp,KTo),e(y,ZTo),e(y,mp),e(mp,Sde),e(Sde,eMo),e(mp,oMo),e(mp,zq),e(zq,rMo),e(mp,tMo),e(y,aMo),e(y,Xs),e(Xs,Rde),e(Rde,nMo),e(Xs,sMo),e(Xs,Qq),e(Qq,lMo),e(Xs,iMo),e(Xs,Wq),e(Wq,dMo),e(Xs,cMo),e(y,mMo),e(y,fp),e(fp,Pde),e(Pde,fMo),e(fp,gMo),e(fp,Hq),e(Hq,hMo),e(fp,uMo),e(y,pMo),e(y,gp),e(gp,Bde),e(Bde,_Mo),e(gp,bMo),e(gp,Uq),e(Uq,vMo),e(gp,FMo),e(y,TMo),e(y,hp),e(hp,Ide),e(Ide,MMo),e(hp,EMo),e(hp,Jq),e(Jq,CMo),e(hp,wMo),e(y,AMo),e(y,up),e(up,Nde),e(Nde,LMo),e(up,yMo),e(up,Yq),e(Yq,xMo),e(up,$Mo),e(y,kMo),e(y,pp),e(pp,qde),e(qde,SMo),e(pp,RMo),e(pp,Kq),e(Kq,PMo),e(pp,BMo),e(y,IMo),e(y,_p),e(_p,jde),e(jde,NMo),e(_p,qMo),e(_p,Zq),e(Zq,jMo),e(_p,DMo),e(y,GMo),e(y,bp),e(bp,Dde),e(Dde,OMo),e(bp,VMo),e(bp,ej),e(ej,XMo),e(bp,zMo),e(y,QMo),e(y,vp),e(vp,Gde),e(Gde,WMo),e(vp,HMo),e(vp,oj),e(oj,UMo),e(vp,JMo),e(y,YMo),e(y,Fp),e(Fp,Ode),e(Ode,KMo),e(Fp,ZMo),e(Fp,rj),e(rj,eEo),e(Fp,oEo),e(y,rEo),e(y,Tp),e(Tp,Vde),e(Vde,tEo),e(Tp,aEo),e(Tp,tj),e(tj,nEo),e(Tp,sEo),e(y,lEo),e(y,Mp),e(Mp,Xde),e(Xde,iEo),e(Mp,dEo),e(Mp,aj),e(aj,cEo),e(Mp,mEo),e(y,fEo),e(y,Ep),e(Ep,zde),e(zde,gEo),e(Ep,hEo),e(Ep,nj),e(nj,uEo),e(Ep,pEo),e(y,_Eo),e(y,Cp),e(Cp,Qde),e(Qde,bEo),e(Cp,vEo),e(Cp,sj),e(sj,FEo),e(Cp,TEo),e(y,MEo),e(y,wp),e(wp,Wde),e(Wde,EEo),e(wp,CEo),e(wp,lj),e(lj,wEo),e(wp,AEo),e(y,LEo),e(y,Ap),e(Ap,Hde),e(Hde,yEo),e(Ap,xEo),e(Ap,ij),e(ij,$Eo),e(Ap,kEo),e(y,SEo),e(y,Lp),e(Lp,Ude),e(Ude,REo),e(Lp,PEo),e(Lp,dj),e(dj,BEo),e(Lp,IEo),e(y,NEo),e(y,yp),e(yp,Jde),e(Jde,qEo),e(yp,jEo),e(yp,cj),e(cj,DEo),e(yp,GEo),e(y,OEo),e(y,xp),e(xp,Yde),e(Yde,VEo),e(xp,XEo),e(xp,mj),e(mj,zEo),e(xp,QEo),e(y,WEo),e(y,$p),e($p,Kde),e(Kde,HEo),e($p,UEo),e($p,fj),e(fj,JEo),e($p,YEo),e(y,KEo),e(y,kp),e(kp,Zde),e(Zde,ZEo),e(kp,e4o),e(kp,gj),e(gj,o4o),e(kp,r4o),e(y,t4o),e(y,Sp),e(Sp,ece),e(ece,a4o),e(Sp,n4o),e(Sp,hj),e(hj,s4o),e(Sp,l4o),e(y,i4o),e(y,Rp),e(Rp,oce),e(oce,d4o),e(Rp,c4o),e(Rp,uj),e(uj,m4o),e(Rp,f4o),e(y,g4o),e(y,Pp),e(Pp,rce),e(rce,h4o),e(Pp,u4o),e(Pp,pj),e(pj,p4o),e(Pp,_4o),e(y,b4o),e(y,Bp),e(Bp,tce),e(tce,v4o),e(Bp,F4o),e(Bp,_j),e(_j,T4o),e(Bp,M4o),e(y,E4o),e(y,Ip),e(Ip,ace),e(ace,C4o),e(Ip,w4o),e(Ip,bj),e(bj,A4o),e(Ip,L4o),e(y,y4o),e(y,Np),e(Np,nce),e(nce,x4o),e(Np,$4o),e(Np,vj),e(vj,k4o),e(Np,S4o),e(y,R4o),e(y,qp),e(qp,sce),e(sce,P4o),e(qp,B4o),e(qp,Fj),e(Fj,I4o),e(qp,N4o),e(y,q4o),e(y,jp),e(jp,lce),e(lce,j4o),e(jp,D4o),e(jp,Tj),e(Tj,G4o),e(jp,O4o),e(y,V4o),e(y,Dp),e(Dp,ice),e(ice,X4o),e(Dp,z4o),e(Dp,Mj),e(Mj,Q4o),e(Dp,W4o),e(y,H4o),e(y,Gp),e(Gp,dce),e(dce,U4o),e(Gp,J4o),e(Gp,Ej),e(Ej,Y4o),e(Gp,K4o),e(y,Z4o),e(y,Op),e(Op,cce),e(cce,eCo),e(Op,oCo),e(Op,Cj),e(Cj,rCo),e(Op,tCo),e(y,aCo),e(y,Vp),e(Vp,mce),e(mce,nCo),e(Vp,sCo),e(Vp,wj),e(wj,lCo),e(Vp,iCo),e(y,dCo),e(y,Xp),e(Xp,fce),e(fce,cCo),e(Xp,mCo),e(Xp,Aj),e(Aj,fCo),e(Xp,gCo),e(y,hCo),e(y,zp),e(zp,gce),e(gce,uCo),e(zp,pCo),e(zp,Lj),e(Lj,_Co),e(zp,bCo),e(y,vCo),e(y,Qp),e(Qp,hce),e(hce,FCo),e(Qp,TCo),e(Qp,yj),e(yj,MCo),e(Qp,ECo),e(y,CCo),e(y,Wp),e(Wp,uce),e(uce,wCo),e(Wp,ACo),e(Wp,xj),e(xj,LCo),e(Wp,yCo),e(y,xCo),e(y,Hp),e(Hp,pce),e(pce,$Co),e(Hp,kCo),e(Hp,$j),e($j,SCo),e(Hp,RCo),e(y,PCo),e(y,Up),e(Up,_ce),e(_ce,BCo),e(Up,ICo),e(Up,kj),e(kj,NCo),e(Up,qCo),e(y,jCo),e(y,Jp),e(Jp,bce),e(bce,DCo),e(Jp,GCo),e(Jp,Sj),e(Sj,OCo),e(Jp,VCo),e(y,XCo),e(y,Yp),e(Yp,vce),e(vce,zCo),e(Yp,QCo),e(Yp,Rj),e(Rj,WCo),e(Yp,HCo),e(y,UCo),e(y,Kp),e(Kp,Fce),e(Fce,JCo),e(Kp,YCo),e(Kp,Pj),e(Pj,KCo),e(Kp,ZCo),e(y,e5o),e(y,Zp),e(Zp,Tce),e(Tce,o5o),e(Zp,r5o),e(Zp,Bj),e(Bj,t5o),e(Zp,a5o),e(y,n5o),e(y,e_),e(e_,Mce),e(Mce,s5o),e(e_,l5o),e(e_,Ij),e(Ij,i5o),e(e_,d5o),e(y,c5o),e(y,o_),e(o_,Ece),e(Ece,m5o),e(o_,f5o),e(o_,Nj),e(Nj,g5o),e(o_,h5o),e(y,u5o),e(y,r_),e(r_,Cce),e(Cce,p5o),e(r_,_5o),e(r_,qj),e(qj,b5o),e(r_,v5o),e(y,F5o),e(y,t_),e(t_,wce),e(wce,T5o),e(t_,M5o),e(t_,jj),e(jj,E5o),e(t_,C5o),e(y,w5o),e(y,a_),e(a_,Ace),e(Ace,A5o),e(a_,L5o),e(a_,Dj),e(Dj,y5o),e(a_,x5o),e(y,$5o),e(y,n_),e(n_,Lce),e(Lce,k5o),e(n_,S5o),e(n_,Gj),e(Gj,R5o),e(n_,P5o),e(y,B5o),e(y,s_),e(s_,yce),e(yce,I5o),e(s_,N5o),e(s_,Oj),e(Oj,q5o),e(s_,j5o),e(y,D5o),e(y,l_),e(l_,xce),e(xce,G5o),e(l_,O5o),e(l_,Vj),e(Vj,V5o),e(l_,X5o),e(y,z5o),e(y,i_),e(i_,$ce),e($ce,Q5o),e(i_,W5o),e(i_,Xj),e(Xj,H5o),e(i_,U5o),e(y,J5o),e(y,d_),e(d_,kce),e(kce,Y5o),e(d_,K5o),e(d_,zj),e(zj,Z5o),e(d_,e3o),e(y,o3o),e(y,c_),e(c_,Sce),e(Sce,r3o),e(c_,t3o),e(c_,Qj),e(Qj,a3o),e(c_,n3o),e(y,s3o),e(y,m_),e(m_,Rce),e(Rce,l3o),e(m_,i3o),e(m_,Wj),e(Wj,d3o),e(m_,c3o),e(y,m3o),e(y,f_),e(f_,Pce),e(Pce,f3o),e(f_,g3o),e(f_,Hj),e(Hj,h3o),e(f_,u3o),e(y,p3o),e(y,g_),e(g_,Bce),e(Bce,_3o),e(g_,b3o),e(g_,Uj),e(Uj,v3o),e(g_,F3o),e(y,T3o),e(y,h_),e(h_,Ice),e(Ice,M3o),e(h_,E3o),e(h_,Jj),e(Jj,C3o),e(h_,w3o),e(y,A3o),e(y,u_),e(u_,Nce),e(Nce,L3o),e(u_,y3o),e(u_,Yj),e(Yj,x3o),e(u_,$3o),e(y,k3o),e(y,p_),e(p_,qce),e(qce,S3o),e(p_,R3o),e(p_,Kj),e(Kj,P3o),e(p_,B3o),e(y,I3o),e(y,__),e(__,jce),e(jce,N3o),e(__,q3o),e(__,Zj),e(Zj,j3o),e(__,D3o),e(y,G3o),e(y,b_),e(b_,Dce),e(Dce,O3o),e(b_,V3o),e(b_,eD),e(eD,X3o),e(b_,z3o),e(y,Q3o),e(y,v_),e(v_,Gce),e(Gce,W3o),e(v_,H3o),e(v_,oD),e(oD,U3o),e(v_,J3o),e(y,Y3o),e(y,F_),e(F_,Oce),e(Oce,K3o),e(F_,Z3o),e(F_,rD),e(rD,e0o),e(F_,o0o),e(y,r0o),e(y,T_),e(T_,Vce),e(Vce,t0o),e(T_,a0o),e(T_,tD),e(tD,n0o),e(T_,s0o),e(y,l0o),e(y,M_),e(M_,Xce),e(Xce,i0o),e(M_,d0o),e(M_,aD),e(aD,c0o),e(M_,m0o),e(y,f0o),e(y,E_),e(E_,zce),e(zce,g0o),e(E_,h0o),e(E_,nD),e(nD,u0o),e(E_,p0o),e(y,_0o),e(y,C_),e(C_,Qce),e(Qce,b0o),e(C_,v0o),e(C_,sD),e(sD,F0o),e(C_,T0o),e(y,M0o),e(y,w_),e(w_,Wce),e(Wce,E0o),e(w_,C0o),e(w_,lD),e(lD,w0o),e(w_,A0o),e(y,L0o),e(y,A_),e(A_,Hce),e(Hce,y0o),e(A_,x0o),e(A_,iD),e(iD,$0o),e(A_,k0o),e(y,S0o),e(y,L_),e(L_,Uce),e(Uce,R0o),e(L_,P0o),e(L_,dD),e(dD,B0o),e(L_,I0o),e(y,N0o),e(y,y_),e(y_,Jce),e(Jce,q0o),e(y_,j0o),e(y_,cD),e(cD,D0o),e(y_,G0o),e(y,O0o),e(y,x_),e(x_,Yce),e(Yce,V0o),e(x_,X0o),e(x_,mD),e(mD,z0o),e(x_,Q0o),e(y,W0o),e(y,$_),e($_,Kce),e(Kce,H0o),e($_,U0o),e($_,fD),e(fD,J0o),e($_,Y0o),e(Je,K0o),e(Je,k_),e(k_,Z0o),e(k_,Zce),e(Zce,ewo),e(k_,owo),e(k_,eme),e(eme,rwo),e(Je,two),M(S_,Je,null),b(m,_Oe,_),b(m,ji,_),e(ji,R_),e(R_,ome),M(cy,ome,null),e(ji,awo),e(ji,rme),e(rme,nwo),b(m,bOe,_),b(m,$o,_),M(my,$o,null),e($o,swo),e($o,Di),e(Di,lwo),e(Di,gD),e(gD,iwo),e(Di,dwo),e(Di,hD),e(hD,cwo),e(Di,mwo),e($o,fwo),e($o,fy),e(fy,gwo),e(fy,tme),e(tme,hwo),e(fy,uwo),e($o,pwo),e($o,st),M(gy,st,null),e(st,_wo),e(st,ame),e(ame,bwo),e(st,vwo),e(st,Gi),e(Gi,Fwo),e(Gi,nme),e(nme,Two),e(Gi,Mwo),e(Gi,uD),e(uD,Ewo),e(Gi,Cwo),e(st,wwo),M(P_,st,null),e($o,Awo),e($o,Ye),M(hy,Ye,null),e(Ye,Lwo),e(Ye,sme),e(sme,ywo),e(Ye,xwo),e(Ye,Pa),e(Pa,$wo),e(Pa,lme),e(lme,kwo),e(Pa,Swo),e(Pa,ime),e(ime,Rwo),e(Pa,Pwo),e(Pa,dme),e(dme,Bwo),e(Pa,Iwo),e(Ye,Nwo),e(Ye,G),e(G,B_),e(B_,cme),e(cme,qwo),e(B_,jwo),e(B_,pD),e(pD,Dwo),e(B_,Gwo),e(G,Owo),e(G,I_),e(I_,mme),e(mme,Vwo),e(I_,Xwo),e(I_,_D),e(_D,zwo),e(I_,Qwo),e(G,Wwo),e(G,N_),e(N_,fme),e(fme,Hwo),e(N_,Uwo),e(N_,bD),e(bD,Jwo),e(N_,Ywo),e(G,Kwo),e(G,q_),e(q_,gme),e(gme,Zwo),e(q_,eAo),e(q_,vD),e(vD,oAo),e(q_,rAo),e(G,tAo),e(G,j_),e(j_,hme),e(hme,aAo),e(j_,nAo),e(j_,FD),e(FD,sAo),e(j_,lAo),e(G,iAo),e(G,D_),e(D_,ume),e(ume,dAo),e(D_,cAo),e(D_,TD),e(TD,mAo),e(D_,fAo),e(G,gAo),e(G,G_),e(G_,pme),e(pme,hAo),e(G_,uAo),e(G_,MD),e(MD,pAo),e(G_,_Ao),e(G,bAo),e(G,O_),e(O_,_me),e(_me,vAo),e(O_,FAo),e(O_,ED),e(ED,TAo),e(O_,MAo),e(G,EAo),e(G,V_),e(V_,bme),e(bme,CAo),e(V_,wAo),e(V_,CD),e(CD,AAo),e(V_,LAo),e(G,yAo),e(G,X_),e(X_,vme),e(vme,xAo),e(X_,$Ao),e(X_,wD),e(wD,kAo),e(X_,SAo),e(G,RAo),e(G,z_),e(z_,Fme),e(Fme,PAo),e(z_,BAo),e(z_,AD),e(AD,IAo),e(z_,NAo),e(G,qAo),e(G,Q_),e(Q_,Tme),e(Tme,jAo),e(Q_,DAo),e(Q_,LD),e(LD,GAo),e(Q_,OAo),e(G,VAo),e(G,W_),e(W_,Mme),e(Mme,XAo),e(W_,zAo),e(W_,yD),e(yD,QAo),e(W_,WAo),e(G,HAo),e(G,H_),e(H_,Eme),e(Eme,UAo),e(H_,JAo),e(H_,xD),e(xD,YAo),e(H_,KAo),e(G,ZAo),e(G,U_),e(U_,Cme),e(Cme,e6o),e(U_,o6o),e(U_,$D),e($D,r6o),e(U_,t6o),e(G,a6o),e(G,J_),e(J_,wme),e(wme,n6o),e(J_,s6o),e(J_,kD),e(kD,l6o),e(J_,i6o),e(G,d6o),e(G,Y_),e(Y_,Ame),e(Ame,c6o),e(Y_,m6o),e(Y_,SD),e(SD,f6o),e(Y_,g6o),e(G,h6o),e(G,K_),e(K_,Lme),e(Lme,u6o),e(K_,p6o),e(K_,RD),e(RD,_6o),e(K_,b6o),e(G,v6o),e(G,Z_),e(Z_,yme),e(yme,F6o),e(Z_,T6o),e(Z_,PD),e(PD,M6o),e(Z_,E6o),e(G,C6o),e(G,e2),e(e2,xme),e(xme,w6o),e(e2,A6o),e(e2,BD),e(BD,L6o),e(e2,y6o),e(G,x6o),e(G,o2),e(o2,$me),e($me,$6o),e(o2,k6o),e(o2,ID),e(ID,S6o),e(o2,R6o),e(G,P6o),e(G,r2),e(r2,kme),e(kme,B6o),e(r2,I6o),e(r2,ND),e(ND,N6o),e(r2,q6o),e(G,j6o),e(G,t2),e(t2,Sme),e(Sme,D6o),e(t2,G6o),e(t2,qD),e(qD,O6o),e(t2,V6o),e(G,X6o),e(G,a2),e(a2,Rme),e(Rme,z6o),e(a2,Q6o),e(a2,jD),e(jD,W6o),e(a2,H6o),e(G,U6o),e(G,n2),e(n2,Pme),e(Pme,J6o),e(n2,Y6o),e(n2,DD),e(DD,K6o),e(n2,Z6o),e(G,eLo),e(G,s2),e(s2,Bme),e(Bme,oLo),e(s2,rLo),e(s2,GD),e(GD,tLo),e(s2,aLo),e(G,nLo),e(G,l2),e(l2,Ime),e(Ime,sLo),e(l2,lLo),e(l2,OD),e(OD,iLo),e(l2,dLo),e(G,cLo),e(G,i2),e(i2,Nme),e(Nme,mLo),e(i2,fLo),e(i2,VD),e(VD,gLo),e(i2,hLo),e(G,uLo),e(G,d2),e(d2,qme),e(qme,pLo),e(d2,_Lo),e(d2,XD),e(XD,bLo),e(d2,vLo),e(G,FLo),e(G,c2),e(c2,jme),e(jme,TLo),e(c2,MLo),e(c2,zD),e(zD,ELo),e(c2,CLo),e(G,wLo),e(G,m2),e(m2,Dme),e(Dme,ALo),e(m2,LLo),e(m2,QD),e(QD,yLo),e(m2,xLo),e(G,$Lo),e(G,f2),e(f2,Gme),e(Gme,kLo),e(f2,SLo),e(f2,WD),e(WD,RLo),e(f2,PLo),e(G,BLo),e(G,g2),e(g2,Ome),e(Ome,ILo),e(g2,NLo),e(g2,HD),e(HD,qLo),e(g2,jLo),e(G,DLo),e(G,h2),e(h2,Vme),e(Vme,GLo),e(h2,OLo),e(h2,UD),e(UD,VLo),e(h2,XLo),e(G,zLo),e(G,u2),e(u2,Xme),e(Xme,QLo),e(u2,WLo),e(u2,JD),e(JD,HLo),e(u2,ULo),e(G,JLo),e(G,p2),e(p2,zme),e(zme,YLo),e(p2,KLo),e(p2,YD),e(YD,ZLo),e(p2,e7o),e(G,o7o),e(G,_2),e(_2,Qme),e(Qme,r7o),e(_2,t7o),e(_2,KD),e(KD,a7o),e(_2,n7o),e(G,s7o),e(G,b2),e(b2,Wme),e(Wme,l7o),e(b2,i7o),e(b2,ZD),e(ZD,d7o),e(b2,c7o),e(G,m7o),e(G,v2),e(v2,Hme),e(Hme,f7o),e(v2,g7o),e(v2,eG),e(eG,h7o),e(v2,u7o),e(G,p7o),e(G,F2),e(F2,Ume),e(Ume,_7o),e(F2,b7o),e(F2,oG),e(oG,v7o),e(F2,F7o),e(G,T7o),e(G,T2),e(T2,Jme),e(Jme,M7o),e(T2,E7o),e(T2,rG),e(rG,C7o),e(T2,w7o),e(G,A7o),e(G,M2),e(M2,Yme),e(Yme,L7o),e(M2,y7o),e(M2,tG),e(tG,x7o),e(M2,$7o),e(G,k7o),e(G,E2),e(E2,Kme),e(Kme,S7o),e(E2,R7o),e(E2,aG),e(aG,P7o),e(E2,B7o),e(G,I7o),e(G,C2),e(C2,Zme),e(Zme,N7o),e(C2,q7o),e(C2,nG),e(nG,j7o),e(C2,D7o),e(Ye,G7o),e(Ye,w2),e(w2,O7o),e(w2,efe),e(efe,V7o),e(w2,X7o),e(w2,ofe),e(ofe,z7o),e(Ye,Q7o),M(A2,Ye,null),b(m,vOe,_),b(m,Oi,_),e(Oi,L2),e(L2,rfe),M(uy,rfe,null),e(Oi,W7o),e(Oi,tfe),e(tfe,H7o),b(m,FOe,_),b(m,ko,_),M(py,ko,null),e(ko,U7o),e(ko,Vi),e(Vi,J7o),e(Vi,sG),e(sG,Y7o),e(Vi,K7o),e(Vi,lG),e(lG,Z7o),e(Vi,eyo),e(ko,oyo),e(ko,_y),e(_y,ryo),e(_y,afe),e(afe,tyo),e(_y,ayo),e(ko,nyo),e(ko,lt),M(by,lt,null),e(lt,syo),e(lt,nfe),e(nfe,lyo),e(lt,iyo),e(lt,Xi),e(Xi,dyo),e(Xi,sfe),e(sfe,cyo),e(Xi,myo),e(Xi,iG),e(iG,fyo),e(Xi,gyo),e(lt,hyo),M(y2,lt,null),e(ko,uyo),e(ko,Ke),M(vy,Ke,null),e(Ke,pyo),e(Ke,lfe),e(lfe,_yo),e(Ke,byo),e(Ke,Ba),e(Ba,vyo),e(Ba,ife),e(ife,Fyo),e(Ba,Tyo),e(Ba,dfe),e(dfe,Myo),e(Ba,Eyo),e(Ba,cfe),e(cfe,Cyo),e(Ba,wyo),e(Ke,Ayo),e(Ke,z),e(z,x2),e(x2,mfe),e(mfe,Lyo),e(x2,yyo),e(x2,dG),e(dG,xyo),e(x2,$yo),e(z,kyo),e(z,$2),e($2,ffe),e(ffe,Syo),e($2,Ryo),e($2,cG),e(cG,Pyo),e($2,Byo),e(z,Iyo),e(z,k2),e(k2,gfe),e(gfe,Nyo),e(k2,qyo),e(k2,mG),e(mG,jyo),e(k2,Dyo),e(z,Gyo),e(z,S2),e(S2,hfe),e(hfe,Oyo),e(S2,Vyo),e(S2,fG),e(fG,Xyo),e(S2,zyo),e(z,Qyo),e(z,R2),e(R2,ufe),e(ufe,Wyo),e(R2,Hyo),e(R2,gG),e(gG,Uyo),e(R2,Jyo),e(z,Yyo),e(z,P2),e(P2,pfe),e(pfe,Kyo),e(P2,Zyo),e(P2,hG),e(hG,e8o),e(P2,o8o),e(z,r8o),e(z,B2),e(B2,_fe),e(_fe,t8o),e(B2,a8o),e(B2,uG),e(uG,n8o),e(B2,s8o),e(z,l8o),e(z,I2),e(I2,bfe),e(bfe,i8o),e(I2,d8o),e(I2,pG),e(pG,c8o),e(I2,m8o),e(z,f8o),e(z,N2),e(N2,vfe),e(vfe,g8o),e(N2,h8o),e(N2,_G),e(_G,u8o),e(N2,p8o),e(z,_8o),e(z,q2),e(q2,Ffe),e(Ffe,b8o),e(q2,v8o),e(q2,bG),e(bG,F8o),e(q2,T8o),e(z,M8o),e(z,j2),e(j2,Tfe),e(Tfe,E8o),e(j2,C8o),e(j2,vG),e(vG,w8o),e(j2,A8o),e(z,L8o),e(z,D2),e(D2,Mfe),e(Mfe,y8o),e(D2,x8o),e(D2,FG),e(FG,$8o),e(D2,k8o),e(z,S8o),e(z,G2),e(G2,Efe),e(Efe,R8o),e(G2,P8o),e(G2,TG),e(TG,B8o),e(G2,I8o),e(z,N8o),e(z,O2),e(O2,Cfe),e(Cfe,q8o),e(O2,j8o),e(O2,MG),e(MG,D8o),e(O2,G8o),e(z,O8o),e(z,V2),e(V2,wfe),e(wfe,V8o),e(V2,X8o),e(V2,EG),e(EG,z8o),e(V2,Q8o),e(z,W8o),e(z,X2),e(X2,Afe),e(Afe,H8o),e(X2,U8o),e(X2,CG),e(CG,J8o),e(X2,Y8o),e(z,K8o),e(z,z2),e(z2,Lfe),e(Lfe,Z8o),e(z2,e9o),e(z2,wG),e(wG,o9o),e(z2,r9o),e(z,t9o),e(z,Q2),e(Q2,yfe),e(yfe,a9o),e(Q2,n9o),e(Q2,AG),e(AG,s9o),e(Q2,l9o),e(z,i9o),e(z,W2),e(W2,xfe),e(xfe,d9o),e(W2,c9o),e(W2,LG),e(LG,m9o),e(W2,f9o),e(z,g9o),e(z,H2),e(H2,$fe),e($fe,h9o),e(H2,u9o),e(H2,yG),e(yG,p9o),e(H2,_9o),e(z,b9o),e(z,U2),e(U2,kfe),e(kfe,v9o),e(U2,F9o),e(U2,xG),e(xG,T9o),e(U2,M9o),e(z,E9o),e(z,J2),e(J2,Sfe),e(Sfe,C9o),e(J2,w9o),e(J2,$G),e($G,A9o),e(J2,L9o),e(z,y9o),e(z,Y2),e(Y2,Rfe),e(Rfe,x9o),e(Y2,$9o),e(Y2,kG),e(kG,k9o),e(Y2,S9o),e(z,R9o),e(z,K2),e(K2,Pfe),e(Pfe,P9o),e(K2,B9o),e(K2,SG),e(SG,I9o),e(K2,N9o),e(z,q9o),e(z,Z2),e(Z2,Bfe),e(Bfe,j9o),e(Z2,D9o),e(Z2,RG),e(RG,G9o),e(Z2,O9o),e(z,V9o),e(z,eb),e(eb,Ife),e(Ife,X9o),e(eb,z9o),e(eb,PG),e(PG,Q9o),e(eb,W9o),e(z,H9o),e(z,ob),e(ob,Nfe),e(Nfe,U9o),e(ob,J9o),e(ob,BG),e(BG,Y9o),e(ob,K9o),e(z,Z9o),e(z,rb),e(rb,qfe),e(qfe,exo),e(rb,oxo),e(rb,IG),e(IG,rxo),e(rb,txo),e(z,axo),e(z,tb),e(tb,jfe),e(jfe,nxo),e(tb,sxo),e(tb,NG),e(NG,lxo),e(tb,ixo),e(z,dxo),e(z,ab),e(ab,Dfe),e(Dfe,cxo),e(ab,mxo),e(ab,qG),e(qG,fxo),e(ab,gxo),e(z,hxo),e(z,nb),e(nb,Gfe),e(Gfe,uxo),e(nb,pxo),e(nb,jG),e(jG,_xo),e(nb,bxo),e(z,vxo),e(z,sb),e(sb,Ofe),e(Ofe,Fxo),e(sb,Txo),e(sb,DG),e(DG,Mxo),e(sb,Exo),e(z,Cxo),e(z,lb),e(lb,Vfe),e(Vfe,wxo),e(lb,Axo),e(lb,GG),e(GG,Lxo),e(lb,yxo),e(z,xxo),e(z,ib),e(ib,Xfe),e(Xfe,$xo),e(ib,kxo),e(ib,OG),e(OG,Sxo),e(ib,Rxo),e(z,Pxo),e(z,db),e(db,zfe),e(zfe,Bxo),e(db,Ixo),e(db,VG),e(VG,Nxo),e(db,qxo),e(z,jxo),e(z,cb),e(cb,Qfe),e(Qfe,Dxo),e(cb,Gxo),e(cb,XG),e(XG,Oxo),e(cb,Vxo),e(z,Xxo),e(z,mb),e(mb,Wfe),e(Wfe,zxo),e(mb,Qxo),e(mb,zG),e(zG,Wxo),e(mb,Hxo),e(z,Uxo),e(z,fb),e(fb,Hfe),e(Hfe,Jxo),e(fb,Yxo),e(fb,QG),e(QG,Kxo),e(fb,Zxo),e(z,e$o),e(z,gb),e(gb,Ufe),e(Ufe,o$o),e(gb,r$o),e(gb,WG),e(WG,t$o),e(gb,a$o),e(Ke,n$o),e(Ke,hb),e(hb,s$o),e(hb,Jfe),e(Jfe,l$o),e(hb,i$o),e(hb,Yfe),e(Yfe,d$o),e(Ke,c$o),M(ub,Ke,null),b(m,TOe,_),b(m,zi,_),e(zi,pb),e(pb,Kfe),M(Fy,Kfe,null),e(zi,m$o),e(zi,Zfe),e(Zfe,f$o),b(m,MOe,_),b(m,So,_),M(Ty,So,null),e(So,g$o),e(So,Qi),e(Qi,h$o),e(Qi,HG),e(HG,u$o),e(Qi,p$o),e(Qi,UG),e(UG,_$o),e(Qi,b$o),e(So,v$o),e(So,My),e(My,F$o),e(My,ege),e(ege,T$o),e(My,M$o),e(So,E$o),e(So,it),M(Ey,it,null),e(it,C$o),e(it,oge),e(oge,w$o),e(it,A$o),e(it,Wi),e(Wi,L$o),e(Wi,rge),e(rge,y$o),e(Wi,x$o),e(Wi,JG),e(JG,$$o),e(Wi,k$o),e(it,S$o),M(_b,it,null),e(So,R$o),e(So,Ze),M(Cy,Ze,null),e(Ze,P$o),e(Ze,tge),e(tge,B$o),e(Ze,I$o),e(Ze,Ia),e(Ia,N$o),e(Ia,age),e(age,q$o),e(Ia,j$o),e(Ia,nge),e(nge,D$o),e(Ia,G$o),e(Ia,sge),e(sge,O$o),e(Ia,V$o),e(Ze,X$o),e(Ze,W),e(W,bb),e(bb,lge),e(lge,z$o),e(bb,Q$o),e(bb,YG),e(YG,W$o),e(bb,H$o),e(W,U$o),e(W,vb),e(vb,ige),e(ige,J$o),e(vb,Y$o),e(vb,KG),e(KG,K$o),e(vb,Z$o),e(W,eko),e(W,Fb),e(Fb,dge),e(dge,oko),e(Fb,rko),e(Fb,ZG),e(ZG,tko),e(Fb,ako),e(W,nko),e(W,Tb),e(Tb,cge),e(cge,sko),e(Tb,lko),e(Tb,eO),e(eO,iko),e(Tb,dko),e(W,cko),e(W,Mb),e(Mb,mge),e(mge,mko),e(Mb,fko),e(Mb,oO),e(oO,gko),e(Mb,hko),e(W,uko),e(W,Eb),e(Eb,fge),e(fge,pko),e(Eb,_ko),e(Eb,rO),e(rO,bko),e(Eb,vko),e(W,Fko),e(W,Cb),e(Cb,gge),e(gge,Tko),e(Cb,Mko),e(Cb,tO),e(tO,Eko),e(Cb,Cko),e(W,wko),e(W,wb),e(wb,hge),e(hge,Ako),e(wb,Lko),e(wb,aO),e(aO,yko),e(wb,xko),e(W,$ko),e(W,Ab),e(Ab,uge),e(uge,kko),e(Ab,Sko),e(Ab,nO),e(nO,Rko),e(Ab,Pko),e(W,Bko),e(W,Lb),e(Lb,pge),e(pge,Iko),e(Lb,Nko),e(Lb,sO),e(sO,qko),e(Lb,jko),e(W,Dko),e(W,yb),e(yb,_ge),e(_ge,Gko),e(yb,Oko),e(yb,lO),e(lO,Vko),e(yb,Xko),e(W,zko),e(W,xb),e(xb,bge),e(bge,Qko),e(xb,Wko),e(xb,iO),e(iO,Hko),e(xb,Uko),e(W,Jko),e(W,$b),e($b,vge),e(vge,Yko),e($b,Kko),e($b,dO),e(dO,Zko),e($b,eSo),e(W,oSo),e(W,kb),e(kb,Fge),e(Fge,rSo),e(kb,tSo),e(kb,cO),e(cO,aSo),e(kb,nSo),e(W,sSo),e(W,Sb),e(Sb,Tge),e(Tge,lSo),e(Sb,iSo),e(Sb,mO),e(mO,dSo),e(Sb,cSo),e(W,mSo),e(W,Rb),e(Rb,Mge),e(Mge,fSo),e(Rb,gSo),e(Rb,fO),e(fO,hSo),e(Rb,uSo),e(W,pSo),e(W,Pb),e(Pb,Ege),e(Ege,_So),e(Pb,bSo),e(Pb,gO),e(gO,vSo),e(Pb,FSo),e(W,TSo),e(W,Bb),e(Bb,Cge),e(Cge,MSo),e(Bb,ESo),e(Bb,hO),e(hO,CSo),e(Bb,wSo),e(W,ASo),e(W,Ib),e(Ib,wge),e(wge,LSo),e(Ib,ySo),e(Ib,uO),e(uO,xSo),e(Ib,$So),e(W,kSo),e(W,Nb),e(Nb,Age),e(Age,SSo),e(Nb,RSo),e(Nb,pO),e(pO,PSo),e(Nb,BSo),e(W,ISo),e(W,qb),e(qb,Lge),e(Lge,NSo),e(qb,qSo),e(qb,_O),e(_O,jSo),e(qb,DSo),e(W,GSo),e(W,jb),e(jb,yge),e(yge,OSo),e(jb,VSo),e(jb,bO),e(bO,XSo),e(jb,zSo),e(W,QSo),e(W,Db),e(Db,xge),e(xge,WSo),e(Db,HSo),e(Db,vO),e(vO,USo),e(Db,JSo),e(W,YSo),e(W,Gb),e(Gb,$ge),e($ge,KSo),e(Gb,ZSo),e(Gb,FO),e(FO,eRo),e(Gb,oRo),e(W,rRo),e(W,Ob),e(Ob,kge),e(kge,tRo),e(Ob,aRo),e(Ob,TO),e(TO,nRo),e(Ob,sRo),e(W,lRo),e(W,Vb),e(Vb,Sge),e(Sge,iRo),e(Vb,dRo),e(Vb,MO),e(MO,cRo),e(Vb,mRo),e(W,fRo),e(W,Xb),e(Xb,Rge),e(Rge,gRo),e(Xb,hRo),e(Xb,EO),e(EO,uRo),e(Xb,pRo),e(W,_Ro),e(W,zb),e(zb,Pge),e(Pge,bRo),e(zb,vRo),e(zb,CO),e(CO,FRo),e(zb,TRo),e(W,MRo),e(W,Qb),e(Qb,Bge),e(Bge,ERo),e(Qb,CRo),e(Qb,wO),e(wO,wRo),e(Qb,ARo),e(W,LRo),e(W,Wb),e(Wb,Ige),e(Ige,yRo),e(Wb,xRo),e(Wb,AO),e(AO,$Ro),e(Wb,kRo),e(W,SRo),e(W,Hb),e(Hb,Nge),e(Nge,RRo),e(Hb,PRo),e(Hb,LO),e(LO,BRo),e(Hb,IRo),e(W,NRo),e(W,Ub),e(Ub,qge),e(qge,qRo),e(Ub,jRo),e(Ub,yO),e(yO,DRo),e(Ub,GRo),e(W,ORo),e(W,Jb),e(Jb,jge),e(jge,VRo),e(Jb,XRo),e(Jb,Dge),e(Dge,zRo),e(Jb,QRo),e(W,WRo),e(W,Yb),e(Yb,Gge),e(Gge,HRo),e(Yb,URo),e(Yb,xO),e(xO,JRo),e(Yb,YRo),e(W,KRo),e(W,Kb),e(Kb,Oge),e(Oge,ZRo),e(Kb,ePo),e(Kb,$O),e($O,oPo),e(Kb,rPo),e(W,tPo),e(W,Zb),e(Zb,Vge),e(Vge,aPo),e(Zb,nPo),e(Zb,kO),e(kO,sPo),e(Zb,lPo),e(W,iPo),e(W,ev),e(ev,Xge),e(Xge,dPo),e(ev,cPo),e(ev,SO),e(SO,mPo),e(ev,fPo),e(Ze,gPo),e(Ze,ov),e(ov,hPo),e(ov,zge),e(zge,uPo),e(ov,pPo),e(ov,Qge),e(Qge,_Po),e(Ze,bPo),M(rv,Ze,null),b(m,EOe,_),b(m,Hi,_),e(Hi,tv),e(tv,Wge),M(wy,Wge,null),e(Hi,vPo),e(Hi,Hge),e(Hge,FPo),b(m,COe,_),b(m,Ro,_),M(Ay,Ro,null),e(Ro,TPo),e(Ro,Ui),e(Ui,MPo),e(Ui,RO),e(RO,EPo),e(Ui,CPo),e(Ui,PO),e(PO,wPo),e(Ui,APo),e(Ro,LPo),e(Ro,Ly),e(Ly,yPo),e(Ly,Uge),e(Uge,xPo),e(Ly,$Po),e(Ro,kPo),e(Ro,dt),M(yy,dt,null),e(dt,SPo),e(dt,Jge),e(Jge,RPo),e(dt,PPo),e(dt,Ji),e(Ji,BPo),e(Ji,Yge),e(Yge,IPo),e(Ji,NPo),e(Ji,BO),e(BO,qPo),e(Ji,jPo),e(dt,DPo),M(av,dt,null),e(Ro,GPo),e(Ro,eo),M(xy,eo,null),e(eo,OPo),e(eo,Kge),e(Kge,VPo),e(eo,XPo),e(eo,Na),e(Na,zPo),e(Na,Zge),e(Zge,QPo),e(Na,WPo),e(Na,ehe),e(ehe,HPo),e(Na,UPo),e(Na,ohe),e(ohe,JPo),e(Na,YPo),e(eo,KPo),e(eo,ue),e(ue,nv),e(nv,rhe),e(rhe,ZPo),e(nv,eBo),e(nv,IO),e(IO,oBo),e(nv,rBo),e(ue,tBo),e(ue,sv),e(sv,the),e(the,aBo),e(sv,nBo),e(sv,NO),e(NO,sBo),e(sv,lBo),e(ue,iBo),e(ue,lv),e(lv,ahe),e(ahe,dBo),e(lv,cBo),e(lv,qO),e(qO,mBo),e(lv,fBo),e(ue,gBo),e(ue,iv),e(iv,nhe),e(nhe,hBo),e(iv,uBo),e(iv,jO),e(jO,pBo),e(iv,_Bo),e(ue,bBo),e(ue,dv),e(dv,she),e(she,vBo),e(dv,FBo),e(dv,DO),e(DO,TBo),e(dv,MBo),e(ue,EBo),e(ue,cv),e(cv,lhe),e(lhe,CBo),e(cv,wBo),e(cv,GO),e(GO,ABo),e(cv,LBo),e(ue,yBo),e(ue,mv),e(mv,ihe),e(ihe,xBo),e(mv,$Bo),e(mv,OO),e(OO,kBo),e(mv,SBo),e(ue,RBo),e(ue,fv),e(fv,dhe),e(dhe,PBo),e(fv,BBo),e(fv,VO),e(VO,IBo),e(fv,NBo),e(ue,qBo),e(ue,gv),e(gv,che),e(che,jBo),e(gv,DBo),e(gv,XO),e(XO,GBo),e(gv,OBo),e(ue,VBo),e(ue,hv),e(hv,mhe),e(mhe,XBo),e(hv,zBo),e(hv,zO),e(zO,QBo),e(hv,WBo),e(ue,HBo),e(ue,uv),e(uv,fhe),e(fhe,UBo),e(uv,JBo),e(uv,QO),e(QO,YBo),e(uv,KBo),e(ue,ZBo),e(ue,pv),e(pv,ghe),e(ghe,eIo),e(pv,oIo),e(pv,WO),e(WO,rIo),e(pv,tIo),e(ue,aIo),e(ue,_v),e(_v,hhe),e(hhe,nIo),e(_v,sIo),e(_v,HO),e(HO,lIo),e(_v,iIo),e(ue,dIo),e(ue,bv),e(bv,uhe),e(uhe,cIo),e(bv,mIo),e(bv,UO),e(UO,fIo),e(bv,gIo),e(ue,hIo),e(ue,vv),e(vv,phe),e(phe,uIo),e(vv,pIo),e(vv,JO),e(JO,_Io),e(vv,bIo),e(ue,vIo),e(ue,Fv),e(Fv,_he),e(_he,FIo),e(Fv,TIo),e(Fv,YO),e(YO,MIo),e(Fv,EIo),e(ue,CIo),e(ue,Tv),e(Tv,bhe),e(bhe,wIo),e(Tv,AIo),e(Tv,KO),e(KO,LIo),e(Tv,yIo),e(eo,xIo),e(eo,Mv),e(Mv,$Io),e(Mv,vhe),e(vhe,kIo),e(Mv,SIo),e(Mv,Fhe),e(Fhe,RIo),e(eo,PIo),M(Ev,eo,null),b(m,wOe,_),b(m,Yi,_),e(Yi,Cv),e(Cv,The),M($y,The,null),e(Yi,BIo),e(Yi,Mhe),e(Mhe,IIo),b(m,AOe,_),b(m,Po,_),M(ky,Po,null),e(Po,NIo),e(Po,Ki),e(Ki,qIo),e(Ki,ZO),e(ZO,jIo),e(Ki,DIo),e(Ki,eV),e(eV,GIo),e(Ki,OIo),e(Po,VIo),e(Po,Sy),e(Sy,XIo),e(Sy,Ehe),e(Ehe,zIo),e(Sy,QIo),e(Po,WIo),e(Po,ct),M(Ry,ct,null),e(ct,HIo),e(ct,Che),e(Che,UIo),e(ct,JIo),e(ct,Zi),e(Zi,YIo),e(Zi,whe),e(whe,KIo),e(Zi,ZIo),e(Zi,oV),e(oV,eNo),e(Zi,oNo),e(ct,rNo),M(wv,ct,null),e(Po,tNo),e(Po,oo),M(Py,oo,null),e(oo,aNo),e(oo,Ahe),e(Ahe,nNo),e(oo,sNo),e(oo,qa),e(qa,lNo),e(qa,Lhe),e(Lhe,iNo),e(qa,dNo),e(qa,yhe),e(yhe,cNo),e(qa,mNo),e(qa,xhe),e(xhe,fNo),e(qa,gNo),e(oo,hNo),e(oo,N),e(N,Av),e(Av,$he),e($he,uNo),e(Av,pNo),e(Av,rV),e(rV,_No),e(Av,bNo),e(N,vNo),e(N,Lv),e(Lv,khe),e(khe,FNo),e(Lv,TNo),e(Lv,tV),e(tV,MNo),e(Lv,ENo),e(N,CNo),e(N,yv),e(yv,She),e(She,wNo),e(yv,ANo),e(yv,aV),e(aV,LNo),e(yv,yNo),e(N,xNo),e(N,xv),e(xv,Rhe),e(Rhe,$No),e(xv,kNo),e(xv,nV),e(nV,SNo),e(xv,RNo),e(N,PNo),e(N,$v),e($v,Phe),e(Phe,BNo),e($v,INo),e($v,sV),e(sV,NNo),e($v,qNo),e(N,jNo),e(N,kv),e(kv,Bhe),e(Bhe,DNo),e(kv,GNo),e(kv,lV),e(lV,ONo),e(kv,VNo),e(N,XNo),e(N,Sv),e(Sv,Ihe),e(Ihe,zNo),e(Sv,QNo),e(Sv,iV),e(iV,WNo),e(Sv,HNo),e(N,UNo),e(N,Rv),e(Rv,Nhe),e(Nhe,JNo),e(Rv,YNo),e(Rv,dV),e(dV,KNo),e(Rv,ZNo),e(N,eqo),e(N,Pv),e(Pv,qhe),e(qhe,oqo),e(Pv,rqo),e(Pv,cV),e(cV,tqo),e(Pv,aqo),e(N,nqo),e(N,Bv),e(Bv,jhe),e(jhe,sqo),e(Bv,lqo),e(Bv,mV),e(mV,iqo),e(Bv,dqo),e(N,cqo),e(N,Iv),e(Iv,Dhe),e(Dhe,mqo),e(Iv,fqo),e(Iv,fV),e(fV,gqo),e(Iv,hqo),e(N,uqo),e(N,Nv),e(Nv,Ghe),e(Ghe,pqo),e(Nv,_qo),e(Nv,gV),e(gV,bqo),e(Nv,vqo),e(N,Fqo),e(N,qv),e(qv,Ohe),e(Ohe,Tqo),e(qv,Mqo),e(qv,hV),e(hV,Eqo),e(qv,Cqo),e(N,wqo),e(N,jv),e(jv,Vhe),e(Vhe,Aqo),e(jv,Lqo),e(jv,uV),e(uV,yqo),e(jv,xqo),e(N,$qo),e(N,Dv),e(Dv,Xhe),e(Xhe,kqo),e(Dv,Sqo),e(Dv,pV),e(pV,Rqo),e(Dv,Pqo),e(N,Bqo),e(N,Gv),e(Gv,zhe),e(zhe,Iqo),e(Gv,Nqo),e(Gv,_V),e(_V,qqo),e(Gv,jqo),e(N,Dqo),e(N,Ov),e(Ov,Qhe),e(Qhe,Gqo),e(Ov,Oqo),e(Ov,bV),e(bV,Vqo),e(Ov,Xqo),e(N,zqo),e(N,Vv),e(Vv,Whe),e(Whe,Qqo),e(Vv,Wqo),e(Vv,vV),e(vV,Hqo),e(Vv,Uqo),e(N,Jqo),e(N,Xv),e(Xv,Hhe),e(Hhe,Yqo),e(Xv,Kqo),e(Xv,FV),e(FV,Zqo),e(Xv,ejo),e(N,ojo),e(N,zv),e(zv,Uhe),e(Uhe,rjo),e(zv,tjo),e(zv,TV),e(TV,ajo),e(zv,njo),e(N,sjo),e(N,Qv),e(Qv,Jhe),e(Jhe,ljo),e(Qv,ijo),e(Qv,MV),e(MV,djo),e(Qv,cjo),e(N,mjo),e(N,Wv),e(Wv,Yhe),e(Yhe,fjo),e(Wv,gjo),e(Wv,EV),e(EV,hjo),e(Wv,ujo),e(N,pjo),e(N,Hv),e(Hv,Khe),e(Khe,_jo),e(Hv,bjo),e(Hv,CV),e(CV,vjo),e(Hv,Fjo),e(N,Tjo),e(N,Uv),e(Uv,Zhe),e(Zhe,Mjo),e(Uv,Ejo),e(Uv,wV),e(wV,Cjo),e(Uv,wjo),e(N,Ajo),e(N,Jv),e(Jv,eue),e(eue,Ljo),e(Jv,yjo),e(Jv,AV),e(AV,xjo),e(Jv,$jo),e(N,kjo),e(N,Yv),e(Yv,oue),e(oue,Sjo),e(Yv,Rjo),e(Yv,LV),e(LV,Pjo),e(Yv,Bjo),e(N,Ijo),e(N,Kv),e(Kv,rue),e(rue,Njo),e(Kv,qjo),e(Kv,yV),e(yV,jjo),e(Kv,Djo),e(N,Gjo),e(N,Zv),e(Zv,tue),e(tue,Ojo),e(Zv,Vjo),e(Zv,xV),e(xV,Xjo),e(Zv,zjo),e(N,Qjo),e(N,eF),e(eF,aue),e(aue,Wjo),e(eF,Hjo),e(eF,$V),e($V,Ujo),e(eF,Jjo),e(N,Yjo),e(N,oF),e(oF,nue),e(nue,Kjo),e(oF,Zjo),e(oF,kV),e(kV,eDo),e(oF,oDo),e(N,rDo),e(N,rF),e(rF,sue),e(sue,tDo),e(rF,aDo),e(rF,SV),e(SV,nDo),e(rF,sDo),e(N,lDo),e(N,tF),e(tF,lue),e(lue,iDo),e(tF,dDo),e(tF,RV),e(RV,cDo),e(tF,mDo),e(N,fDo),e(N,aF),e(aF,iue),e(iue,gDo),e(aF,hDo),e(aF,PV),e(PV,uDo),e(aF,pDo),e(N,_Do),e(N,nF),e(nF,due),e(due,bDo),e(nF,vDo),e(nF,BV),e(BV,FDo),e(nF,TDo),e(N,MDo),e(N,sF),e(sF,cue),e(cue,EDo),e(sF,CDo),e(sF,IV),e(IV,wDo),e(sF,ADo),e(N,LDo),e(N,lF),e(lF,mue),e(mue,yDo),e(lF,xDo),e(lF,NV),e(NV,$Do),e(lF,kDo),e(N,SDo),e(N,iF),e(iF,fue),e(fue,RDo),e(iF,PDo),e(iF,qV),e(qV,BDo),e(iF,IDo),e(N,NDo),e(N,dF),e(dF,gue),e(gue,qDo),e(dF,jDo),e(dF,jV),e(jV,DDo),e(dF,GDo),e(N,ODo),e(N,cF),e(cF,hue),e(hue,VDo),e(cF,XDo),e(cF,DV),e(DV,zDo),e(cF,QDo),e(N,WDo),e(N,mF),e(mF,uue),e(uue,HDo),e(mF,UDo),e(mF,GV),e(GV,JDo),e(mF,YDo),e(N,KDo),e(N,fF),e(fF,pue),e(pue,ZDo),e(fF,eGo),e(fF,OV),e(OV,oGo),e(fF,rGo),e(N,tGo),e(N,gF),e(gF,_ue),e(_ue,aGo),e(gF,nGo),e(gF,VV),e(VV,sGo),e(gF,lGo),e(N,iGo),e(N,hF),e(hF,bue),e(bue,dGo),e(hF,cGo),e(hF,XV),e(XV,mGo),e(hF,fGo),e(N,gGo),e(N,uF),e(uF,vue),e(vue,hGo),e(uF,uGo),e(uF,zV),e(zV,pGo),e(uF,_Go),e(N,bGo),e(N,pF),e(pF,Fue),e(Fue,vGo),e(pF,FGo),e(pF,QV),e(QV,TGo),e(pF,MGo),e(N,EGo),e(N,_F),e(_F,Tue),e(Tue,CGo),e(_F,wGo),e(_F,WV),e(WV,AGo),e(_F,LGo),e(N,yGo),e(N,bF),e(bF,Mue),e(Mue,xGo),e(bF,$Go),e(bF,HV),e(HV,kGo),e(bF,SGo),e(N,RGo),e(N,vF),e(vF,Eue),e(Eue,PGo),e(vF,BGo),e(vF,UV),e(UV,IGo),e(vF,NGo),e(N,qGo),e(N,FF),e(FF,Cue),e(Cue,jGo),e(FF,DGo),e(FF,JV),e(JV,GGo),e(FF,OGo),e(oo,VGo),e(oo,TF),e(TF,XGo),e(TF,wue),e(wue,zGo),e(TF,QGo),e(TF,Aue),e(Aue,WGo),e(oo,HGo),M(MF,oo,null),b(m,LOe,_),b(m,ed,_),e(ed,EF),e(EF,Lue),M(By,Lue,null),e(ed,UGo),e(ed,yue),e(yue,JGo),b(m,yOe,_),b(m,Bo,_),M(Iy,Bo,null),e(Bo,YGo),e(Bo,od),e(od,KGo),e(od,YV),e(YV,ZGo),e(od,eOo),e(od,KV),e(KV,oOo),e(od,rOo),e(Bo,tOo),e(Bo,Ny),e(Ny,aOo),e(Ny,xue),e(xue,nOo),e(Ny,sOo),e(Bo,lOo),e(Bo,mt),M(qy,mt,null),e(mt,iOo),e(mt,$ue),e($ue,dOo),e(mt,cOo),e(mt,rd),e(rd,mOo),e(rd,kue),e(kue,fOo),e(rd,gOo),e(rd,ZV),e(ZV,hOo),e(rd,uOo),e(mt,pOo),M(CF,mt,null),e(Bo,_Oo),e(Bo,ro),M(jy,ro,null),e(ro,bOo),e(ro,Sue),e(Sue,vOo),e(ro,FOo),e(ro,ja),e(ja,TOo),e(ja,Rue),e(Rue,MOo),e(ja,EOo),e(ja,Pue),e(Pue,COo),e(ja,wOo),e(ja,Bue),e(Bue,AOo),e(ja,LOo),e(ro,yOo),e(ro,Z),e(Z,wF),e(wF,Iue),e(Iue,xOo),e(wF,$Oo),e(wF,eX),e(eX,kOo),e(wF,SOo),e(Z,ROo),e(Z,AF),e(AF,Nue),e(Nue,POo),e(AF,BOo),e(AF,oX),e(oX,IOo),e(AF,NOo),e(Z,qOo),e(Z,LF),e(LF,que),e(que,jOo),e(LF,DOo),e(LF,rX),e(rX,GOo),e(LF,OOo),e(Z,VOo),e(Z,yF),e(yF,jue),e(jue,XOo),e(yF,zOo),e(yF,tX),e(tX,QOo),e(yF,WOo),e(Z,HOo),e(Z,xF),e(xF,Due),e(Due,UOo),e(xF,JOo),e(xF,aX),e(aX,YOo),e(xF,KOo),e(Z,ZOo),e(Z,$F),e($F,Gue),e(Gue,eVo),e($F,oVo),e($F,nX),e(nX,rVo),e($F,tVo),e(Z,aVo),e(Z,kF),e(kF,Oue),e(Oue,nVo),e(kF,sVo),e(kF,sX),e(sX,lVo),e(kF,iVo),e(Z,dVo),e(Z,SF),e(SF,Vue),e(Vue,cVo),e(SF,mVo),e(SF,lX),e(lX,fVo),e(SF,gVo),e(Z,hVo),e(Z,RF),e(RF,Xue),e(Xue,uVo),e(RF,pVo),e(RF,iX),e(iX,_Vo),e(RF,bVo),e(Z,vVo),e(Z,PF),e(PF,zue),e(zue,FVo),e(PF,TVo),e(PF,dX),e(dX,MVo),e(PF,EVo),e(Z,CVo),e(Z,BF),e(BF,Que),e(Que,wVo),e(BF,AVo),e(BF,cX),e(cX,LVo),e(BF,yVo),e(Z,xVo),e(Z,IF),e(IF,Wue),e(Wue,$Vo),e(IF,kVo),e(IF,mX),e(mX,SVo),e(IF,RVo),e(Z,PVo),e(Z,NF),e(NF,Hue),e(Hue,BVo),e(NF,IVo),e(NF,fX),e(fX,NVo),e(NF,qVo),e(Z,jVo),e(Z,qF),e(qF,Uue),e(Uue,DVo),e(qF,GVo),e(qF,gX),e(gX,OVo),e(qF,VVo),e(Z,XVo),e(Z,jF),e(jF,Jue),e(Jue,zVo),e(jF,QVo),e(jF,hX),e(hX,WVo),e(jF,HVo),e(Z,UVo),e(Z,DF),e(DF,Yue),e(Yue,JVo),e(DF,YVo),e(DF,uX),e(uX,KVo),e(DF,ZVo),e(Z,eXo),e(Z,GF),e(GF,Kue),e(Kue,oXo),e(GF,rXo),e(GF,pX),e(pX,tXo),e(GF,aXo),e(Z,nXo),e(Z,OF),e(OF,Zue),e(Zue,sXo),e(OF,lXo),e(OF,_X),e(_X,iXo),e(OF,dXo),e(Z,cXo),e(Z,VF),e(VF,epe),e(epe,mXo),e(VF,fXo),e(VF,bX),e(bX,gXo),e(VF,hXo),e(Z,uXo),e(Z,XF),e(XF,ope),e(ope,pXo),e(XF,_Xo),e(XF,vX),e(vX,bXo),e(XF,vXo),e(Z,FXo),e(Z,zF),e(zF,rpe),e(rpe,TXo),e(zF,MXo),e(zF,FX),e(FX,EXo),e(zF,CXo),e(Z,wXo),e(Z,QF),e(QF,tpe),e(tpe,AXo),e(QF,LXo),e(QF,TX),e(TX,yXo),e(QF,xXo),e(Z,$Xo),e(Z,WF),e(WF,ape),e(ape,kXo),e(WF,SXo),e(WF,MX),e(MX,RXo),e(WF,PXo),e(Z,BXo),e(Z,HF),e(HF,npe),e(npe,IXo),e(HF,NXo),e(HF,EX),e(EX,qXo),e(HF,jXo),e(Z,DXo),e(Z,UF),e(UF,spe),e(spe,GXo),e(UF,OXo),e(UF,CX),e(CX,VXo),e(UF,XXo),e(Z,zXo),e(Z,JF),e(JF,lpe),e(lpe,QXo),e(JF,WXo),e(JF,wX),e(wX,HXo),e(JF,UXo),e(Z,JXo),e(Z,YF),e(YF,ipe),e(ipe,YXo),e(YF,KXo),e(YF,AX),e(AX,ZXo),e(YF,ezo),e(Z,ozo),e(Z,KF),e(KF,dpe),e(dpe,rzo),e(KF,tzo),e(KF,LX),e(LX,azo),e(KF,nzo),e(Z,szo),e(Z,ZF),e(ZF,cpe),e(cpe,lzo),e(ZF,izo),e(ZF,yX),e(yX,dzo),e(ZF,czo),e(Z,mzo),e(Z,e1),e(e1,mpe),e(mpe,fzo),e(e1,gzo),e(e1,xX),e(xX,hzo),e(e1,uzo),e(ro,pzo),e(ro,o1),e(o1,_zo),e(o1,fpe),e(fpe,bzo),e(o1,vzo),e(o1,gpe),e(gpe,Fzo),e(ro,Tzo),M(r1,ro,null),b(m,xOe,_),b(m,td,_),e(td,t1),e(t1,hpe),M(Dy,hpe,null),e(td,Mzo),e(td,upe),e(upe,Ezo),b(m,$Oe,_),b(m,Io,_),M(Gy,Io,null),e(Io,Czo),e(Io,ad),e(ad,wzo),e(ad,$X),e($X,Azo),e(ad,Lzo),e(ad,kX),e(kX,yzo),e(ad,xzo),e(Io,$zo),e(Io,Oy),e(Oy,kzo),e(Oy,ppe),e(ppe,Szo),e(Oy,Rzo),e(Io,Pzo),e(Io,ft),M(Vy,ft,null),e(ft,Bzo),e(ft,_pe),e(_pe,Izo),e(ft,Nzo),e(ft,nd),e(nd,qzo),e(nd,bpe),e(bpe,jzo),e(nd,Dzo),e(nd,SX),e(SX,Gzo),e(nd,Ozo),e(ft,Vzo),M(a1,ft,null),e(Io,Xzo),e(Io,to),M(Xy,to,null),e(to,zzo),e(to,vpe),e(vpe,Qzo),e(to,Wzo),e(to,Da),e(Da,Hzo),e(Da,Fpe),e(Fpe,Uzo),e(Da,Jzo),e(Da,Tpe),e(Tpe,Yzo),e(Da,Kzo),e(Da,Mpe),e(Mpe,Zzo),e(Da,eQo),e(to,oQo),e(to,No),e(No,n1),e(n1,Epe),e(Epe,rQo),e(n1,tQo),e(n1,RX),e(RX,aQo),e(n1,nQo),e(No,sQo),e(No,s1),e(s1,Cpe),e(Cpe,lQo),e(s1,iQo),e(s1,PX),e(PX,dQo),e(s1,cQo),e(No,mQo),e(No,l1),e(l1,wpe),e(wpe,fQo),e(l1,gQo),e(l1,BX),e(BX,hQo),e(l1,uQo),e(No,pQo),e(No,i1),e(i1,Ape),e(Ape,_Qo),e(i1,bQo),e(i1,IX),e(IX,vQo),e(i1,FQo),e(No,TQo),e(No,d1),e(d1,Lpe),e(Lpe,MQo),e(d1,EQo),e(d1,NX),e(NX,CQo),e(d1,wQo),e(No,AQo),e(No,c1),e(c1,ype),e(ype,LQo),e(c1,yQo),e(c1,qX),e(qX,xQo),e(c1,$Qo),e(to,kQo),e(to,m1),e(m1,SQo),e(m1,xpe),e(xpe,RQo),e(m1,PQo),e(m1,$pe),e($pe,BQo),e(to,IQo),M(f1,to,null),b(m,kOe,_),b(m,sd,_),e(sd,g1),e(g1,kpe),M(zy,kpe,null),e(sd,NQo),e(sd,Spe),e(Spe,qQo),b(m,SOe,_),b(m,qo,_),M(Qy,qo,null),e(qo,jQo),e(qo,ld),e(ld,DQo),e(ld,jX),e(jX,GQo),e(ld,OQo),e(ld,DX),e(DX,VQo),e(ld,XQo),e(qo,zQo),e(qo,Wy),e(Wy,QQo),e(Wy,Rpe),e(Rpe,WQo),e(Wy,HQo),e(qo,UQo),e(qo,gt),M(Hy,gt,null),e(gt,JQo),e(gt,Ppe),e(Ppe,YQo),e(gt,KQo),e(gt,id),e(id,ZQo),e(id,Bpe),e(Bpe,eWo),e(id,oWo),e(id,GX),e(GX,rWo),e(id,tWo),e(gt,aWo),M(h1,gt,null),e(qo,nWo),e(qo,ao),M(Uy,ao,null),e(ao,sWo),e(ao,Ipe),e(Ipe,lWo),e(ao,iWo),e(ao,Ga),e(Ga,dWo),e(Ga,Npe),e(Npe,cWo),e(Ga,mWo),e(Ga,qpe),e(qpe,fWo),e(Ga,gWo),e(Ga,jpe),e(jpe,hWo),e(Ga,uWo),e(ao,pWo),e(ao,H),e(H,u1),e(u1,Dpe),e(Dpe,_Wo),e(u1,bWo),e(u1,OX),e(OX,vWo),e(u1,FWo),e(H,TWo),e(H,p1),e(p1,Gpe),e(Gpe,MWo),e(p1,EWo),e(p1,VX),e(VX,CWo),e(p1,wWo),e(H,AWo),e(H,_1),e(_1,Ope),e(Ope,LWo),e(_1,yWo),e(_1,XX),e(XX,xWo),e(_1,$Wo),e(H,kWo),e(H,b1),e(b1,Vpe),e(Vpe,SWo),e(b1,RWo),e(b1,zX),e(zX,PWo),e(b1,BWo),e(H,IWo),e(H,v1),e(v1,Xpe),e(Xpe,NWo),e(v1,qWo),e(v1,QX),e(QX,jWo),e(v1,DWo),e(H,GWo),e(H,F1),e(F1,zpe),e(zpe,OWo),e(F1,VWo),e(F1,WX),e(WX,XWo),e(F1,zWo),e(H,QWo),e(H,T1),e(T1,Qpe),e(Qpe,WWo),e(T1,HWo),e(T1,HX),e(HX,UWo),e(T1,JWo),e(H,YWo),e(H,M1),e(M1,Wpe),e(Wpe,KWo),e(M1,ZWo),e(M1,UX),e(UX,eHo),e(M1,oHo),e(H,rHo),e(H,E1),e(E1,Hpe),e(Hpe,tHo),e(E1,aHo),e(E1,JX),e(JX,nHo),e(E1,sHo),e(H,lHo),e(H,C1),e(C1,Upe),e(Upe,iHo),e(C1,dHo),e(C1,YX),e(YX,cHo),e(C1,mHo),e(H,fHo),e(H,w1),e(w1,Jpe),e(Jpe,gHo),e(w1,hHo),e(w1,KX),e(KX,uHo),e(w1,pHo),e(H,_Ho),e(H,A1),e(A1,Ype),e(Ype,bHo),e(A1,vHo),e(A1,ZX),e(ZX,FHo),e(A1,THo),e(H,MHo),e(H,L1),e(L1,Kpe),e(Kpe,EHo),e(L1,CHo),e(L1,ez),e(ez,wHo),e(L1,AHo),e(H,LHo),e(H,y1),e(y1,Zpe),e(Zpe,yHo),e(y1,xHo),e(y1,oz),e(oz,$Ho),e(y1,kHo),e(H,SHo),e(H,x1),e(x1,e_e),e(e_e,RHo),e(x1,PHo),e(x1,rz),e(rz,BHo),e(x1,IHo),e(H,NHo),e(H,$1),e($1,o_e),e(o_e,qHo),e($1,jHo),e($1,tz),e(tz,DHo),e($1,GHo),e(H,OHo),e(H,k1),e(k1,r_e),e(r_e,VHo),e(k1,XHo),e(k1,az),e(az,zHo),e(k1,QHo),e(H,WHo),e(H,S1),e(S1,t_e),e(t_e,HHo),e(S1,UHo),e(S1,nz),e(nz,JHo),e(S1,YHo),e(H,KHo),e(H,R1),e(R1,a_e),e(a_e,ZHo),e(R1,eUo),e(R1,sz),e(sz,oUo),e(R1,rUo),e(H,tUo),e(H,P1),e(P1,n_e),e(n_e,aUo),e(P1,nUo),e(P1,lz),e(lz,sUo),e(P1,lUo),e(H,iUo),e(H,B1),e(B1,s_e),e(s_e,dUo),e(B1,cUo),e(B1,iz),e(iz,mUo),e(B1,fUo),e(H,gUo),e(H,I1),e(I1,l_e),e(l_e,hUo),e(I1,uUo),e(I1,dz),e(dz,pUo),e(I1,_Uo),e(H,bUo),e(H,N1),e(N1,i_e),e(i_e,vUo),e(N1,FUo),e(N1,cz),e(cz,TUo),e(N1,MUo),e(H,EUo),e(H,q1),e(q1,d_e),e(d_e,CUo),e(q1,wUo),e(q1,mz),e(mz,AUo),e(q1,LUo),e(H,yUo),e(H,j1),e(j1,c_e),e(c_e,xUo),e(j1,$Uo),e(j1,fz),e(fz,kUo),e(j1,SUo),e(H,RUo),e(H,D1),e(D1,m_e),e(m_e,PUo),e(D1,BUo),e(D1,gz),e(gz,IUo),e(D1,NUo),e(H,qUo),e(H,G1),e(G1,f_e),e(f_e,jUo),e(G1,DUo),e(G1,hz),e(hz,GUo),e(G1,OUo),e(H,VUo),e(H,O1),e(O1,g_e),e(g_e,XUo),e(O1,zUo),e(O1,uz),e(uz,QUo),e(O1,WUo),e(H,HUo),e(H,V1),e(V1,h_e),e(h_e,UUo),e(V1,JUo),e(V1,pz),e(pz,YUo),e(V1,KUo),e(H,ZUo),e(H,X1),e(X1,u_e),e(u_e,eJo),e(X1,oJo),e(X1,_z),e(_z,rJo),e(X1,tJo),e(H,aJo),e(H,z1),e(z1,p_e),e(p_e,nJo),e(z1,sJo),e(z1,bz),e(bz,lJo),e(z1,iJo),e(H,dJo),e(H,Q1),e(Q1,__e),e(__e,cJo),e(Q1,mJo),e(Q1,vz),e(vz,fJo),e(Q1,gJo),e(H,hJo),e(H,W1),e(W1,b_e),e(b_e,uJo),e(W1,pJo),e(W1,Fz),e(Fz,_Jo),e(W1,bJo),e(H,vJo),e(H,H1),e(H1,v_e),e(v_e,FJo),e(H1,TJo),e(H1,Tz),e(Tz,MJo),e(H1,EJo),e(H,CJo),e(H,U1),e(U1,F_e),e(F_e,wJo),e(U1,AJo),e(U1,Mz),e(Mz,LJo),e(U1,yJo),e(H,xJo),e(H,J1),e(J1,T_e),e(T_e,$Jo),e(J1,kJo),e(J1,Ez),e(Ez,SJo),e(J1,RJo),e(ao,PJo),e(ao,Y1),e(Y1,BJo),e(Y1,M_e),e(M_e,IJo),e(Y1,NJo),e(Y1,E_e),e(E_e,qJo),e(ao,jJo),M(K1,ao,null),b(m,ROe,_),b(m,dd,_),e(dd,Z1),e(Z1,C_e),M(Jy,C_e,null),e(dd,DJo),e(dd,w_e),e(w_e,GJo),b(m,POe,_),b(m,jo,_),M(Yy,jo,null),e(jo,OJo),e(jo,cd),e(cd,VJo),e(cd,Cz),e(Cz,XJo),e(cd,zJo),e(cd,wz),e(wz,QJo),e(cd,WJo),e(jo,HJo),e(jo,Ky),e(Ky,UJo),e(Ky,A_e),e(A_e,JJo),e(Ky,YJo),e(jo,KJo),e(jo,ht),M(Zy,ht,null),e(ht,ZJo),e(ht,L_e),e(L_e,eYo),e(ht,oYo),e(ht,md),e(md,rYo),e(md,y_e),e(y_e,tYo),e(md,aYo),e(md,Az),e(Az,nYo),e(md,sYo),e(ht,lYo),M(eT,ht,null),e(jo,iYo),e(jo,no),M(e8,no,null),e(no,dYo),e(no,x_e),e(x_e,cYo),e(no,mYo),e(no,Oa),e(Oa,fYo),e(Oa,$_e),e($_e,gYo),e(Oa,hYo),e(Oa,k_e),e(k_e,uYo),e(Oa,pYo),e(Oa,S_e),e(S_e,_Yo),e(Oa,bYo),e(no,vYo),e(no,V),e(V,oT),e(oT,R_e),e(R_e,FYo),e(oT,TYo),e(oT,Lz),e(Lz,MYo),e(oT,EYo),e(V,CYo),e(V,rT),e(rT,P_e),e(P_e,wYo),e(rT,AYo),e(rT,yz),e(yz,LYo),e(rT,yYo),e(V,xYo),e(V,tT),e(tT,B_e),e(B_e,$Yo),e(tT,kYo),e(tT,xz),e(xz,SYo),e(tT,RYo),e(V,PYo),e(V,aT),e(aT,I_e),e(I_e,BYo),e(aT,IYo),e(aT,$z),e($z,NYo),e(aT,qYo),e(V,jYo),e(V,nT),e(nT,N_e),e(N_e,DYo),e(nT,GYo),e(nT,kz),e(kz,OYo),e(nT,VYo),e(V,XYo),e(V,sT),e(sT,q_e),e(q_e,zYo),e(sT,QYo),e(sT,Sz),e(Sz,WYo),e(sT,HYo),e(V,UYo),e(V,lT),e(lT,j_e),e(j_e,JYo),e(lT,YYo),e(lT,Rz),e(Rz,KYo),e(lT,ZYo),e(V,eKo),e(V,iT),e(iT,D_e),e(D_e,oKo),e(iT,rKo),e(iT,Pz),e(Pz,tKo),e(iT,aKo),e(V,nKo),e(V,dT),e(dT,G_e),e(G_e,sKo),e(dT,lKo),e(dT,Bz),e(Bz,iKo),e(dT,dKo),e(V,cKo),e(V,cT),e(cT,O_e),e(O_e,mKo),e(cT,fKo),e(cT,Iz),e(Iz,gKo),e(cT,hKo),e(V,uKo),e(V,mT),e(mT,V_e),e(V_e,pKo),e(mT,_Ko),e(mT,Nz),e(Nz,bKo),e(mT,vKo),e(V,FKo),e(V,fT),e(fT,X_e),e(X_e,TKo),e(fT,MKo),e(fT,qz),e(qz,EKo),e(fT,CKo),e(V,wKo),e(V,gT),e(gT,z_e),e(z_e,AKo),e(gT,LKo),e(gT,jz),e(jz,yKo),e(gT,xKo),e(V,$Ko),e(V,hT),e(hT,Q_e),e(Q_e,kKo),e(hT,SKo),e(hT,Dz),e(Dz,RKo),e(hT,PKo),e(V,BKo),e(V,uT),e(uT,W_e),e(W_e,IKo),e(uT,NKo),e(uT,Gz),e(Gz,qKo),e(uT,jKo),e(V,DKo),e(V,pT),e(pT,H_e),e(H_e,GKo),e(pT,OKo),e(pT,Oz),e(Oz,VKo),e(pT,XKo),e(V,zKo),e(V,_T),e(_T,U_e),e(U_e,QKo),e(_T,WKo),e(_T,Vz),e(Vz,HKo),e(_T,UKo),e(V,JKo),e(V,bT),e(bT,J_e),e(J_e,YKo),e(bT,KKo),e(bT,Xz),e(Xz,ZKo),e(bT,eZo),e(V,oZo),e(V,vT),e(vT,Y_e),e(Y_e,rZo),e(vT,tZo),e(vT,zz),e(zz,aZo),e(vT,nZo),e(V,sZo),e(V,FT),e(FT,K_e),e(K_e,lZo),e(FT,iZo),e(FT,Qz),e(Qz,dZo),e(FT,cZo),e(V,mZo),e(V,TT),e(TT,Z_e),e(Z_e,fZo),e(TT,gZo),e(TT,Wz),e(Wz,hZo),e(TT,uZo),e(V,pZo),e(V,MT),e(MT,e2e),e(e2e,_Zo),e(MT,bZo),e(MT,Hz),e(Hz,vZo),e(MT,FZo),e(V,TZo),e(V,ET),e(ET,o2e),e(o2e,MZo),e(ET,EZo),e(ET,Uz),e(Uz,CZo),e(ET,wZo),e(V,AZo),e(V,CT),e(CT,r2e),e(r2e,LZo),e(CT,yZo),e(CT,Jz),e(Jz,xZo),e(CT,$Zo),e(V,kZo),e(V,wT),e(wT,t2e),e(t2e,SZo),e(wT,RZo),e(wT,Yz),e(Yz,PZo),e(wT,BZo),e(V,IZo),e(V,AT),e(AT,a2e),e(a2e,NZo),e(AT,qZo),e(AT,Kz),e(Kz,jZo),e(AT,DZo),e(V,GZo),e(V,LT),e(LT,n2e),e(n2e,OZo),e(LT,VZo),e(LT,Zz),e(Zz,XZo),e(LT,zZo),e(V,QZo),e(V,yT),e(yT,s2e),e(s2e,WZo),e(yT,HZo),e(yT,eQ),e(eQ,UZo),e(yT,JZo),e(V,YZo),e(V,xT),e(xT,l2e),e(l2e,KZo),e(xT,ZZo),e(xT,oQ),e(oQ,eer),e(xT,oer),e(V,rer),e(V,$T),e($T,i2e),e(i2e,ter),e($T,aer),e($T,rQ),e(rQ,ner),e($T,ser),e(V,ler),e(V,kT),e(kT,d2e),e(d2e,ier),e(kT,der),e(kT,tQ),e(tQ,cer),e(kT,mer),e(V,fer),e(V,ST),e(ST,c2e),e(c2e,ger),e(ST,her),e(ST,aQ),e(aQ,uer),e(ST,per),e(V,_er),e(V,RT),e(RT,m2e),e(m2e,ber),e(RT,ver),e(RT,nQ),e(nQ,Fer),e(RT,Ter),e(V,Mer),e(V,PT),e(PT,f2e),e(f2e,Eer),e(PT,Cer),e(PT,sQ),e(sQ,wer),e(PT,Aer),e(V,Ler),e(V,BT),e(BT,g2e),e(g2e,yer),e(BT,xer),e(BT,lQ),e(lQ,$er),e(BT,ker),e(V,Ser),e(V,IT),e(IT,h2e),e(h2e,Rer),e(IT,Per),e(IT,iQ),e(iQ,Ber),e(IT,Ier),e(V,Ner),e(V,NT),e(NT,u2e),e(u2e,qer),e(NT,jer),e(NT,dQ),e(dQ,Der),e(NT,Ger),e(V,Oer),e(V,qT),e(qT,p2e),e(p2e,Ver),e(qT,Xer),e(qT,cQ),e(cQ,zer),e(qT,Qer),e(V,Wer),e(V,jT),e(jT,_2e),e(_2e,Her),e(jT,Uer),e(jT,mQ),e(mQ,Jer),e(jT,Yer),e(V,Ker),e(V,DT),e(DT,b2e),e(b2e,Zer),e(DT,eor),e(DT,fQ),e(fQ,oor),e(DT,ror),e(V,tor),e(V,GT),e(GT,v2e),e(v2e,aor),e(GT,nor),e(GT,gQ),e(gQ,sor),e(GT,lor),e(no,ior),e(no,OT),e(OT,dor),e(OT,F2e),e(F2e,cor),e(OT,mor),e(OT,T2e),e(T2e,gor),e(no,hor),M(VT,no,null),b(m,BOe,_),b(m,fd,_),e(fd,XT),e(XT,M2e),M(o8,M2e,null),e(fd,uor),e(fd,E2e),e(E2e,por),b(m,IOe,_),b(m,Do,_),M(r8,Do,null),e(Do,_or),e(Do,gd),e(gd,bor),e(gd,hQ),e(hQ,vor),e(gd,For),e(gd,uQ),e(uQ,Tor),e(gd,Mor),e(Do,Eor),e(Do,t8),e(t8,Cor),e(t8,C2e),e(C2e,wor),e(t8,Aor),e(Do,Lor),e(Do,ut),M(a8,ut,null),e(ut,yor),e(ut,w2e),e(w2e,xor),e(ut,$or),e(ut,hd),e(hd,kor),e(hd,A2e),e(A2e,Sor),e(hd,Ror),e(hd,pQ),e(pQ,Por),e(hd,Bor),e(ut,Ior),M(zT,ut,null),e(Do,Nor),e(Do,so),M(n8,so,null),e(so,qor),e(so,L2e),e(L2e,jor),e(so,Dor),e(so,Va),e(Va,Gor),e(Va,y2e),e(y2e,Oor),e(Va,Vor),e(Va,x2e),e(x2e,Xor),e(Va,zor),e(Va,$2e),e($2e,Qor),e(Va,Wor),e(so,Hor),e(so,k2e),e(k2e,QT),e(QT,S2e),e(S2e,Uor),e(QT,Jor),e(QT,_Q),e(_Q,Yor),e(QT,Kor),e(so,Zor),e(so,WT),e(WT,err),e(WT,R2e),e(R2e,orr),e(WT,rrr),e(WT,P2e),e(P2e,trr),e(so,arr),M(HT,so,null),b(m,NOe,_),b(m,ud,_),e(ud,UT),e(UT,B2e),M(s8,B2e,null),e(ud,nrr),e(ud,I2e),e(I2e,srr),b(m,qOe,_),b(m,Go,_),M(l8,Go,null),e(Go,lrr),e(Go,pd),e(pd,irr),e(pd,bQ),e(bQ,drr),e(pd,crr),e(pd,vQ),e(vQ,mrr),e(pd,frr),e(Go,grr),e(Go,i8),e(i8,hrr),e(i8,N2e),e(N2e,urr),e(i8,prr),e(Go,_rr),e(Go,pt),M(d8,pt,null),e(pt,brr),e(pt,q2e),e(q2e,vrr),e(pt,Frr),e(pt,_d),e(_d,Trr),e(_d,j2e),e(j2e,Mrr),e(_d,Err),e(_d,FQ),e(FQ,Crr),e(_d,wrr),e(pt,Arr),M(JT,pt,null),e(Go,Lrr),e(Go,lo),M(c8,lo,null),e(lo,yrr),e(lo,D2e),e(D2e,xrr),e(lo,$rr),e(lo,Xa),e(Xa,krr),e(Xa,G2e),e(G2e,Srr),e(Xa,Rrr),e(Xa,O2e),e(O2e,Prr),e(Xa,Brr),e(Xa,V2e),e(V2e,Irr),e(Xa,Nrr),e(lo,qrr),e(lo,Fe),e(Fe,YT),e(YT,X2e),e(X2e,jrr),e(YT,Drr),e(YT,TQ),e(TQ,Grr),e(YT,Orr),e(Fe,Vrr),e(Fe,KT),e(KT,z2e),e(z2e,Xrr),e(KT,zrr),e(KT,MQ),e(MQ,Qrr),e(KT,Wrr),e(Fe,Hrr),e(Fe,ZT),e(ZT,Q2e),e(Q2e,Urr),e(ZT,Jrr),e(ZT,EQ),e(EQ,Yrr),e(ZT,Krr),e(Fe,Zrr),e(Fe,eM),e(eM,W2e),e(W2e,etr),e(eM,otr),e(eM,CQ),e(CQ,rtr),e(eM,ttr),e(Fe,atr),e(Fe,zs),e(zs,H2e),e(H2e,ntr),e(zs,str),e(zs,wQ),e(wQ,ltr),e(zs,itr),e(zs,AQ),e(AQ,dtr),e(zs,ctr),e(Fe,mtr),e(Fe,oM),e(oM,U2e),e(U2e,ftr),e(oM,gtr),e(oM,LQ),e(LQ,htr),e(oM,utr),e(Fe,ptr),e(Fe,Qs),e(Qs,J2e),e(J2e,_tr),e(Qs,btr),e(Qs,yQ),e(yQ,vtr),e(Qs,Ftr),e(Qs,xQ),e(xQ,Ttr),e(Qs,Mtr),e(Fe,Etr),e(Fe,_t),e(_t,Y2e),e(Y2e,Ctr),e(_t,wtr),e(_t,$Q),e($Q,Atr),e(_t,Ltr),e(_t,kQ),e(kQ,ytr),e(_t,xtr),e(_t,SQ),e(SQ,$tr),e(_t,ktr),e(Fe,Str),e(Fe,rM),e(rM,K2e),e(K2e,Rtr),e(rM,Ptr),e(rM,RQ),e(RQ,Btr),e(rM,Itr),e(Fe,Ntr),e(Fe,tM),e(tM,Z2e),e(Z2e,qtr),e(tM,jtr),e(tM,PQ),e(PQ,Dtr),e(tM,Gtr),e(Fe,Otr),e(Fe,aM),e(aM,ebe),e(ebe,Vtr),e(aM,Xtr),e(aM,BQ),e(BQ,ztr),e(aM,Qtr),e(Fe,Wtr),e(Fe,nM),e(nM,obe),e(obe,Htr),e(nM,Utr),e(nM,IQ),e(IQ,Jtr),e(nM,Ytr),e(Fe,Ktr),e(Fe,sM),e(sM,rbe),e(rbe,Ztr),e(sM,ear),e(sM,NQ),e(NQ,oar),e(sM,rar),e(Fe,tar),e(Fe,lM),e(lM,tbe),e(tbe,aar),e(lM,nar),e(lM,qQ),e(qQ,sar),e(lM,lar),e(Fe,iar),e(Fe,iM),e(iM,abe),e(abe,dar),e(iM,car),e(iM,jQ),e(jQ,mar),e(iM,far),e(lo,gar),e(lo,dM),e(dM,har),e(dM,nbe),e(nbe,uar),e(dM,par),e(dM,sbe),e(sbe,_ar),e(lo,bar),M(cM,lo,null),b(m,jOe,_),b(m,bd,_),e(bd,mM),e(mM,lbe),M(m8,lbe,null),e(bd,Far),e(bd,ibe),e(ibe,Tar),b(m,DOe,_),b(m,Oo,_),M(f8,Oo,null),e(Oo,Mar),e(Oo,vd),e(vd,Ear),e(vd,DQ),e(DQ,Car),e(vd,war),e(vd,GQ),e(GQ,Aar),e(vd,Lar),e(Oo,yar),e(Oo,g8),e(g8,xar),e(g8,dbe),e(dbe,$ar),e(g8,kar),e(Oo,Sar),e(Oo,bt),M(h8,bt,null),e(bt,Rar),e(bt,cbe),e(cbe,Par),e(bt,Bar),e(bt,Fd),e(Fd,Iar),e(Fd,mbe),e(mbe,Nar),e(Fd,qar),e(Fd,OQ),e(OQ,jar),e(Fd,Dar),e(bt,Gar),M(fM,bt,null),e(Oo,Oar),e(Oo,io),M(u8,io,null),e(io,Var),e(io,fbe),e(fbe,Xar),e(io,zar),e(io,za),e(za,Qar),e(za,gbe),e(gbe,War),e(za,Har),e(za,hbe),e(hbe,Uar),e(za,Jar),e(za,ube),e(ube,Yar),e(za,Kar),e(io,Zar),e(io,pbe),e(pbe,gM),e(gM,_be),e(_be,enr),e(gM,onr),e(gM,VQ),e(VQ,rnr),e(gM,tnr),e(io,anr),e(io,hM),e(hM,nnr),e(hM,bbe),e(bbe,snr),e(hM,lnr),e(hM,vbe),e(vbe,inr),e(io,dnr),M(uM,io,null),b(m,GOe,_),b(m,Td,_),e(Td,pM),e(pM,Fbe),M(p8,Fbe,null),e(Td,cnr),e(Td,Tbe),e(Tbe,mnr),b(m,OOe,_),b(m,Vo,_),M(_8,Vo,null),e(Vo,fnr),e(Vo,Md),e(Md,gnr),e(Md,XQ),e(XQ,hnr),e(Md,unr),e(Md,zQ),e(zQ,pnr),e(Md,_nr),e(Vo,bnr),e(Vo,b8),e(b8,vnr),e(b8,Mbe),e(Mbe,Fnr),e(b8,Tnr),e(Vo,Mnr),e(Vo,vt),M(v8,vt,null),e(vt,Enr),e(vt,Ebe),e(Ebe,Cnr),e(vt,wnr),e(vt,Ed),e(Ed,Anr),e(Ed,Cbe),e(Cbe,Lnr),e(Ed,ynr),e(Ed,QQ),e(QQ,xnr),e(Ed,$nr),e(vt,knr),M(_M,vt,null),e(Vo,Snr),e(Vo,co),M(F8,co,null),e(co,Rnr),e(co,wbe),e(wbe,Pnr),e(co,Bnr),e(co,Qa),e(Qa,Inr),e(Qa,Abe),e(Abe,Nnr),e(Qa,qnr),e(Qa,Lbe),e(Lbe,jnr),e(Qa,Dnr),e(Qa,ybe),e(ybe,Gnr),e(Qa,Onr),e(co,Vnr),e(co,xbe),e(xbe,bM),e(bM,$be),e($be,Xnr),e(bM,znr),e(bM,WQ),e(WQ,Qnr),e(bM,Wnr),e(co,Hnr),e(co,vM),e(vM,Unr),e(vM,kbe),e(kbe,Jnr),e(vM,Ynr),e(vM,Sbe),e(Sbe,Knr),e(co,Znr),M(FM,co,null),b(m,VOe,_),b(m,Cd,_),e(Cd,TM),e(TM,Rbe),M(T8,Rbe,null),e(Cd,esr),e(Cd,Pbe),e(Pbe,osr),b(m,XOe,_),b(m,Xo,_),M(M8,Xo,null),e(Xo,rsr),e(Xo,wd),e(wd,tsr),e(wd,HQ),e(HQ,asr),e(wd,nsr),e(wd,UQ),e(UQ,ssr),e(wd,lsr),e(Xo,isr),e(Xo,E8),e(E8,dsr),e(E8,Bbe),e(Bbe,csr),e(E8,msr),e(Xo,fsr),e(Xo,Ft),M(C8,Ft,null),e(Ft,gsr),e(Ft,Ibe),e(Ibe,hsr),e(Ft,usr),e(Ft,Ad),e(Ad,psr),e(Ad,Nbe),e(Nbe,_sr),e(Ad,bsr),e(Ad,JQ),e(JQ,vsr),e(Ad,Fsr),e(Ft,Tsr),M(MM,Ft,null),e(Xo,Msr),e(Xo,mo),M(w8,mo,null),e(mo,Esr),e(mo,qbe),e(qbe,Csr),e(mo,wsr),e(mo,Wa),e(Wa,Asr),e(Wa,jbe),e(jbe,Lsr),e(Wa,ysr),e(Wa,Dbe),e(Dbe,xsr),e(Wa,$sr),e(Wa,Gbe),e(Gbe,ksr),e(Wa,Ssr),e(mo,Rsr),e(mo,Pe),e(Pe,EM),e(EM,Obe),e(Obe,Psr),e(EM,Bsr),e(EM,YQ),e(YQ,Isr),e(EM,Nsr),e(Pe,qsr),e(Pe,CM),e(CM,Vbe),e(Vbe,jsr),e(CM,Dsr),e(CM,KQ),e(KQ,Gsr),e(CM,Osr),e(Pe,Vsr),e(Pe,wM),e(wM,Xbe),e(Xbe,Xsr),e(wM,zsr),e(wM,ZQ),e(ZQ,Qsr),e(wM,Wsr),e(Pe,Hsr),e(Pe,AM),e(AM,zbe),e(zbe,Usr),e(AM,Jsr),e(AM,eW),e(eW,Ysr),e(AM,Ksr),e(Pe,Zsr),e(Pe,LM),e(LM,Qbe),e(Qbe,elr),e(LM,olr),e(LM,oW),e(oW,rlr),e(LM,tlr),e(Pe,alr),e(Pe,yM),e(yM,Wbe),e(Wbe,nlr),e(yM,slr),e(yM,rW),e(rW,llr),e(yM,ilr),e(Pe,dlr),e(Pe,xM),e(xM,Hbe),e(Hbe,clr),e(xM,mlr),e(xM,tW),e(tW,flr),e(xM,glr),e(Pe,hlr),e(Pe,$M),e($M,Ube),e(Ube,ulr),e($M,plr),e($M,aW),e(aW,_lr),e($M,blr),e(Pe,vlr),e(Pe,kM),e(kM,Jbe),e(Jbe,Flr),e(kM,Tlr),e(kM,nW),e(nW,Mlr),e(kM,Elr),e(mo,Clr),e(mo,SM),e(SM,wlr),e(SM,Ybe),e(Ybe,Alr),e(SM,Llr),e(SM,Kbe),e(Kbe,ylr),e(mo,xlr),M(RM,mo,null),b(m,zOe,_),b(m,Ld,_),e(Ld,PM),e(PM,Zbe),M(A8,Zbe,null),e(Ld,$lr),e(Ld,eve),e(eve,klr),b(m,QOe,_),b(m,zo,_),M(L8,zo,null),e(zo,Slr),e(zo,yd),e(yd,Rlr),e(yd,sW),e(sW,Plr),e(yd,Blr),e(yd,lW),e(lW,Ilr),e(yd,Nlr),e(zo,qlr),e(zo,y8),e(y8,jlr),e(y8,ove),e(ove,Dlr),e(y8,Glr),e(zo,Olr),e(zo,Tt),M(x8,Tt,null),e(Tt,Vlr),e(Tt,rve),e(rve,Xlr),e(Tt,zlr),e(Tt,xd),e(xd,Qlr),e(xd,tve),e(tve,Wlr),e(xd,Hlr),e(xd,iW),e(iW,Ulr),e(xd,Jlr),e(Tt,Ylr),M(BM,Tt,null),e(zo,Klr),e(zo,fo),M($8,fo,null),e(fo,Zlr),e(fo,ave),e(ave,eir),e(fo,oir),e(fo,Ha),e(Ha,rir),e(Ha,nve),e(nve,tir),e(Ha,air),e(Ha,sve),e(sve,nir),e(Ha,sir),e(Ha,lve),e(lve,lir),e(Ha,iir),e(fo,dir),e(fo,et),e(et,IM),e(IM,ive),e(ive,cir),e(IM,mir),e(IM,dW),e(dW,fir),e(IM,gir),e(et,hir),e(et,NM),e(NM,dve),e(dve,uir),e(NM,pir),e(NM,cW),e(cW,_ir),e(NM,bir),e(et,vir),e(et,qM),e(qM,cve),e(cve,Fir),e(qM,Tir),e(qM,mW),e(mW,Mir),e(qM,Eir),e(et,Cir),e(et,jM),e(jM,mve),e(mve,wir),e(jM,Air),e(jM,fW),e(fW,Lir),e(jM,yir),e(et,xir),e(et,DM),e(DM,fve),e(fve,$ir),e(DM,kir),e(DM,gW),e(gW,Sir),e(DM,Rir),e(fo,Pir),e(fo,GM),e(GM,Bir),e(GM,gve),e(gve,Iir),e(GM,Nir),e(GM,hve),e(hve,qir),e(fo,jir),M(OM,fo,null),b(m,WOe,_),b(m,$d,_),e($d,VM),e(VM,uve),M(k8,uve,null),e($d,Dir),e($d,pve),e(pve,Gir),b(m,HOe,_),b(m,Qo,_),M(S8,Qo,null),e(Qo,Oir),e(Qo,kd),e(kd,Vir),e(kd,hW),e(hW,Xir),e(kd,zir),e(kd,uW),e(uW,Qir),e(kd,Wir),e(Qo,Hir),e(Qo,R8),e(R8,Uir),e(R8,_ve),e(_ve,Jir),e(R8,Yir),e(Qo,Kir),e(Qo,Mt),M(P8,Mt,null),e(Mt,Zir),e(Mt,bve),e(bve,edr),e(Mt,odr),e(Mt,Sd),e(Sd,rdr),e(Sd,vve),e(vve,tdr),e(Sd,adr),e(Sd,pW),e(pW,ndr),e(Sd,sdr),e(Mt,ldr),M(XM,Mt,null),e(Qo,idr),e(Qo,go),M(B8,go,null),e(go,ddr),e(go,Fve),e(Fve,cdr),e(go,mdr),e(go,Ua),e(Ua,fdr),e(Ua,Tve),e(Tve,gdr),e(Ua,hdr),e(Ua,Mve),e(Mve,udr),e(Ua,pdr),e(Ua,Eve),e(Eve,_dr),e(Ua,bdr),e(go,vdr),e(go,Le),e(Le,zM),e(zM,Cve),e(Cve,Fdr),e(zM,Tdr),e(zM,_W),e(_W,Mdr),e(zM,Edr),e(Le,Cdr),e(Le,QM),e(QM,wve),e(wve,wdr),e(QM,Adr),e(QM,bW),e(bW,Ldr),e(QM,ydr),e(Le,xdr),e(Le,WM),e(WM,Ave),e(Ave,$dr),e(WM,kdr),e(WM,vW),e(vW,Sdr),e(WM,Rdr),e(Le,Pdr),e(Le,HM),e(HM,Lve),e(Lve,Bdr),e(HM,Idr),e(HM,FW),e(FW,Ndr),e(HM,qdr),e(Le,jdr),e(Le,UM),e(UM,yve),e(yve,Ddr),e(UM,Gdr),e(UM,TW),e(TW,Odr),e(UM,Vdr),e(Le,Xdr),e(Le,JM),e(JM,xve),e(xve,zdr),e(JM,Qdr),e(JM,MW),e(MW,Wdr),e(JM,Hdr),e(Le,Udr),e(Le,YM),e(YM,$ve),e($ve,Jdr),e(YM,Ydr),e(YM,EW),e(EW,Kdr),e(YM,Zdr),e(Le,ecr),e(Le,KM),e(KM,kve),e(kve,ocr),e(KM,rcr),e(KM,CW),e(CW,tcr),e(KM,acr),e(Le,ncr),e(Le,ZM),e(ZM,Sve),e(Sve,scr),e(ZM,lcr),e(ZM,wW),e(wW,icr),e(ZM,dcr),e(Le,ccr),e(Le,eE),e(eE,Rve),e(Rve,mcr),e(eE,fcr),e(eE,AW),e(AW,gcr),e(eE,hcr),e(go,ucr),e(go,oE),e(oE,pcr),e(oE,Pve),e(Pve,_cr),e(oE,bcr),e(oE,Bve),e(Bve,vcr),e(go,Fcr),M(rE,go,null),b(m,UOe,_),b(m,Rd,_),e(Rd,tE),e(tE,Ive),M(I8,Ive,null),e(Rd,Tcr),e(Rd,Nve),e(Nve,Mcr),b(m,JOe,_),b(m,Wo,_),M(N8,Wo,null),e(Wo,Ecr),e(Wo,Pd),e(Pd,Ccr),e(Pd,LW),e(LW,wcr),e(Pd,Acr),e(Pd,yW),e(yW,Lcr),e(Pd,ycr),e(Wo,xcr),e(Wo,q8),e(q8,$cr),e(q8,qve),e(qve,kcr),e(q8,Scr),e(Wo,Rcr),e(Wo,Et),M(j8,Et,null),e(Et,Pcr),e(Et,jve),e(jve,Bcr),e(Et,Icr),e(Et,Bd),e(Bd,Ncr),e(Bd,Dve),e(Dve,qcr),e(Bd,jcr),e(Bd,xW),e(xW,Dcr),e(Bd,Gcr),e(Et,Ocr),M(aE,Et,null),e(Wo,Vcr),e(Wo,ho),M(D8,ho,null),e(ho,Xcr),e(ho,Gve),e(Gve,zcr),e(ho,Qcr),e(ho,Ja),e(Ja,Wcr),e(Ja,Ove),e(Ove,Hcr),e(Ja,Ucr),e(Ja,Vve),e(Vve,Jcr),e(Ja,Ycr),e(Ja,Xve),e(Xve,Kcr),e(Ja,Zcr),e(ho,emr),e(ho,G8),e(G8,nE),e(nE,zve),e(zve,omr),e(nE,rmr),e(nE,$W),e($W,tmr),e(nE,amr),e(G8,nmr),e(G8,sE),e(sE,Qve),e(Qve,smr),e(sE,lmr),e(sE,kW),e(kW,imr),e(sE,dmr),e(ho,cmr),e(ho,lE),e(lE,mmr),e(lE,Wve),e(Wve,fmr),e(lE,gmr),e(lE,Hve),e(Hve,hmr),e(ho,umr),M(iE,ho,null),b(m,YOe,_),b(m,Id,_),e(Id,dE),e(dE,Uve),M(O8,Uve,null),e(Id,pmr),e(Id,Jve),e(Jve,_mr),b(m,KOe,_),b(m,Ho,_),M(V8,Ho,null),e(Ho,bmr),e(Ho,Nd),e(Nd,vmr),e(Nd,SW),e(SW,Fmr),e(Nd,Tmr),e(Nd,RW),e(RW,Mmr),e(Nd,Emr),e(Ho,Cmr),e(Ho,X8),e(X8,wmr),e(X8,Yve),e(Yve,Amr),e(X8,Lmr),e(Ho,ymr),e(Ho,Ct),M(z8,Ct,null),e(Ct,xmr),e(Ct,Kve),e(Kve,$mr),e(Ct,kmr),e(Ct,qd),e(qd,Smr),e(qd,Zve),e(Zve,Rmr),e(qd,Pmr),e(qd,PW),e(PW,Bmr),e(qd,Imr),e(Ct,Nmr),M(cE,Ct,null),e(Ho,qmr),e(Ho,uo),M(Q8,uo,null),e(uo,jmr),e(uo,eFe),e(eFe,Dmr),e(uo,Gmr),e(uo,Ya),e(Ya,Omr),e(Ya,oFe),e(oFe,Vmr),e(Ya,Xmr),e(Ya,rFe),e(rFe,zmr),e(Ya,Qmr),e(Ya,tFe),e(tFe,Wmr),e(Ya,Hmr),e(uo,Umr),e(uo,ot),e(ot,mE),e(mE,aFe),e(aFe,Jmr),e(mE,Ymr),e(mE,BW),e(BW,Kmr),e(mE,Zmr),e(ot,efr),e(ot,fE),e(fE,nFe),e(nFe,ofr),e(fE,rfr),e(fE,IW),e(IW,tfr),e(fE,afr),e(ot,nfr),e(ot,gE),e(gE,sFe),e(sFe,sfr),e(gE,lfr),e(gE,NW),e(NW,ifr),e(gE,dfr),e(ot,cfr),e(ot,hE),e(hE,lFe),e(lFe,mfr),e(hE,ffr),e(hE,qW),e(qW,gfr),e(hE,hfr),e(ot,ufr),e(ot,uE),e(uE,iFe),e(iFe,pfr),e(uE,_fr),e(uE,jW),e(jW,bfr),e(uE,vfr),e(uo,Ffr),e(uo,pE),e(pE,Tfr),e(pE,dFe),e(dFe,Mfr),e(pE,Efr),e(pE,cFe),e(cFe,Cfr),e(uo,wfr),M(_E,uo,null),b(m,ZOe,_),b(m,jd,_),e(jd,bE),e(bE,mFe),M(W8,mFe,null),e(jd,Afr),e(jd,fFe),e(fFe,Lfr),b(m,eVe,_),b(m,Uo,_),M(H8,Uo,null),e(Uo,yfr),e(Uo,Dd),e(Dd,xfr),e(Dd,DW),e(DW,$fr),e(Dd,kfr),e(Dd,GW),e(GW,Sfr),e(Dd,Rfr),e(Uo,Pfr),e(Uo,U8),e(U8,Bfr),e(U8,gFe),e(gFe,Ifr),e(U8,Nfr),e(Uo,qfr),e(Uo,wt),M(J8,wt,null),e(wt,jfr),e(wt,hFe),e(hFe,Dfr),e(wt,Gfr),e(wt,Gd),e(Gd,Ofr),e(Gd,uFe),e(uFe,Vfr),e(Gd,Xfr),e(Gd,OW),e(OW,zfr),e(Gd,Qfr),e(wt,Wfr),M(vE,wt,null),e(Uo,Hfr),e(Uo,po),M(Y8,po,null),e(po,Ufr),e(po,pFe),e(pFe,Jfr),e(po,Yfr),e(po,Ka),e(Ka,Kfr),e(Ka,_Fe),e(_Fe,Zfr),e(Ka,egr),e(Ka,bFe),e(bFe,ogr),e(Ka,rgr),e(Ka,vFe),e(vFe,tgr),e(Ka,agr),e(po,ngr),e(po,Od),e(Od,FE),e(FE,FFe),e(FFe,sgr),e(FE,lgr),e(FE,VW),e(VW,igr),e(FE,dgr),e(Od,cgr),e(Od,TE),e(TE,TFe),e(TFe,mgr),e(TE,fgr),e(TE,XW),e(XW,ggr),e(TE,hgr),e(Od,ugr),e(Od,ME),e(ME,MFe),e(MFe,pgr),e(ME,_gr),e(ME,zW),e(zW,bgr),e(ME,vgr),e(po,Fgr),e(po,EE),e(EE,Tgr),e(EE,EFe),e(EFe,Mgr),e(EE,Egr),e(EE,CFe),e(CFe,Cgr),e(po,wgr),M(CE,po,null),b(m,oVe,_),b(m,Vd,_),e(Vd,wE),e(wE,wFe),M(K8,wFe,null),e(Vd,Agr),e(Vd,AFe),e(AFe,Lgr),b(m,rVe,_),b(m,Jo,_),M(Z8,Jo,null),e(Jo,ygr),e(Jo,Xd),e(Xd,xgr),e(Xd,QW),e(QW,$gr),e(Xd,kgr),e(Xd,WW),e(WW,Sgr),e(Xd,Rgr),e(Jo,Pgr),e(Jo,e9),e(e9,Bgr),e(e9,LFe),e(LFe,Igr),e(e9,Ngr),e(Jo,qgr),e(Jo,At),M(o9,At,null),e(At,jgr),e(At,yFe),e(yFe,Dgr),e(At,Ggr),e(At,zd),e(zd,Ogr),e(zd,xFe),e(xFe,Vgr),e(zd,Xgr),e(zd,HW),e(HW,zgr),e(zd,Qgr),e(At,Wgr),M(AE,At,null),e(Jo,Hgr),e(Jo,_o),M(r9,_o,null),e(_o,Ugr),e(_o,$Fe),e($Fe,Jgr),e(_o,Ygr),e(_o,Za),e(Za,Kgr),e(Za,kFe),e(kFe,Zgr),e(Za,ehr),e(Za,SFe),e(SFe,ohr),e(Za,rhr),e(Za,RFe),e(RFe,thr),e(Za,ahr),e(_o,nhr),e(_o,t9),e(t9,LE),e(LE,PFe),e(PFe,shr),e(LE,lhr),e(LE,UW),e(UW,ihr),e(LE,dhr),e(t9,chr),e(t9,yE),e(yE,BFe),e(BFe,mhr),e(yE,fhr),e(yE,JW),e(JW,ghr),e(yE,hhr),e(_o,uhr),e(_o,xE),e(xE,phr),e(xE,IFe),e(IFe,_hr),e(xE,bhr),e(xE,NFe),e(NFe,vhr),e(_o,Fhr),M($E,_o,null),b(m,tVe,_),b(m,Qd,_),e(Qd,kE),e(kE,qFe),M(a9,qFe,null),e(Qd,Thr),e(Qd,jFe),e(jFe,Mhr),b(m,aVe,_),b(m,Yo,_),M(n9,Yo,null),e(Yo,Ehr),e(Yo,Wd),e(Wd,Chr),e(Wd,YW),e(YW,whr),e(Wd,Ahr),e(Wd,KW),e(KW,Lhr),e(Wd,yhr),e(Yo,xhr),e(Yo,s9),e(s9,$hr),e(s9,DFe),e(DFe,khr),e(s9,Shr),e(Yo,Rhr),e(Yo,Lt),M(l9,Lt,null),e(Lt,Phr),e(Lt,GFe),e(GFe,Bhr),e(Lt,Ihr),e(Lt,Hd),e(Hd,Nhr),e(Hd,OFe),e(OFe,qhr),e(Hd,jhr),e(Hd,ZW),e(ZW,Dhr),e(Hd,Ghr),e(Lt,Ohr),M(SE,Lt,null),e(Yo,Vhr),e(Yo,bo),M(i9,bo,null),e(bo,Xhr),e(bo,VFe),e(VFe,zhr),e(bo,Qhr),e(bo,en),e(en,Whr),e(en,XFe),e(XFe,Hhr),e(en,Uhr),e(en,zFe),e(zFe,Jhr),e(en,Yhr),e(en,QFe),e(QFe,Khr),e(en,Zhr),e(bo,eur),e(bo,WFe),e(WFe,RE),e(RE,HFe),e(HFe,our),e(RE,rur),e(RE,eH),e(eH,tur),e(RE,aur),e(bo,nur),e(bo,PE),e(PE,sur),e(PE,UFe),e(UFe,lur),e(PE,iur),e(PE,JFe),e(JFe,dur),e(bo,cur),M(BE,bo,null),b(m,nVe,_),b(m,Ud,_),e(Ud,IE),e(IE,YFe),M(d9,YFe,null),e(Ud,mur),e(Ud,KFe),e(KFe,fur),b(m,sVe,_),b(m,Ko,_),M(c9,Ko,null),e(Ko,gur),e(Ko,Jd),e(Jd,hur),e(Jd,oH),e(oH,uur),e(Jd,pur),e(Jd,rH),e(rH,_ur),e(Jd,bur),e(Ko,vur),e(Ko,m9),e(m9,Fur),e(m9,ZFe),e(ZFe,Tur),e(m9,Mur),e(Ko,Eur),e(Ko,yt),M(f9,yt,null),e(yt,Cur),e(yt,e1e),e(e1e,wur),e(yt,Aur),e(yt,Yd),e(Yd,Lur),e(Yd,o1e),e(o1e,yur),e(Yd,xur),e(Yd,tH),e(tH,$ur),e(Yd,kur),e(yt,Sur),M(NE,yt,null),e(Ko,Rur),e(Ko,vo),M(g9,vo,null),e(vo,Pur),e(vo,r1e),e(r1e,Bur),e(vo,Iur),e(vo,on),e(on,Nur),e(on,t1e),e(t1e,qur),e(on,jur),e(on,a1e),e(a1e,Dur),e(on,Gur),e(on,n1e),e(n1e,Our),e(on,Vur),e(vo,Xur),e(vo,rn),e(rn,qE),e(qE,s1e),e(s1e,zur),e(qE,Qur),e(qE,aH),e(aH,Wur),e(qE,Hur),e(rn,Uur),e(rn,jE),e(jE,l1e),e(l1e,Jur),e(jE,Yur),e(jE,nH),e(nH,Kur),e(jE,Zur),e(rn,epr),e(rn,DE),e(DE,i1e),e(i1e,opr),e(DE,rpr),e(DE,sH),e(sH,tpr),e(DE,apr),e(rn,npr),e(rn,GE),e(GE,d1e),e(d1e,spr),e(GE,lpr),e(GE,lH),e(lH,ipr),e(GE,dpr),e(vo,cpr),e(vo,OE),e(OE,mpr),e(OE,c1e),e(c1e,fpr),e(OE,gpr),e(OE,m1e),e(m1e,hpr),e(vo,upr),M(VE,vo,null),b(m,lVe,_),b(m,Kd,_),e(Kd,XE),e(XE,f1e),M(h9,f1e,null),e(Kd,ppr),e(Kd,g1e),e(g1e,_pr),b(m,iVe,_),b(m,Zo,_),M(u9,Zo,null),e(Zo,bpr),e(Zo,Zd),e(Zd,vpr),e(Zd,iH),e(iH,Fpr),e(Zd,Tpr),e(Zd,dH),e(dH,Mpr),e(Zd,Epr),e(Zo,Cpr),e(Zo,p9),e(p9,wpr),e(p9,h1e),e(h1e,Apr),e(p9,Lpr),e(Zo,ypr),e(Zo,xt),M(_9,xt,null),e(xt,xpr),e(xt,u1e),e(u1e,$pr),e(xt,kpr),e(xt,ec),e(ec,Spr),e(ec,p1e),e(p1e,Rpr),e(ec,Ppr),e(ec,cH),e(cH,Bpr),e(ec,Ipr),e(xt,Npr),M(zE,xt,null),e(Zo,qpr),e(Zo,Fo),M(b9,Fo,null),e(Fo,jpr),e(Fo,_1e),e(_1e,Dpr),e(Fo,Gpr),e(Fo,tn),e(tn,Opr),e(tn,b1e),e(b1e,Vpr),e(tn,Xpr),e(tn,v1e),e(v1e,zpr),e(tn,Qpr),e(tn,F1e),e(F1e,Wpr),e(tn,Hpr),e(Fo,Upr),e(Fo,T1e),e(T1e,QE),e(QE,M1e),e(M1e,Jpr),e(QE,Ypr),e(QE,mH),e(mH,Kpr),e(QE,Zpr),e(Fo,e_r),e(Fo,WE),e(WE,o_r),e(WE,E1e),e(E1e,r_r),e(WE,t_r),e(WE,C1e),e(C1e,a_r),e(Fo,n_r),M(HE,Fo,null),b(m,dVe,_),b(m,oc,_),e(oc,UE),e(UE,w1e),M(v9,w1e,null),e(oc,s_r),e(oc,A1e),e(A1e,l_r),b(m,cVe,_),b(m,er,_),M(F9,er,null),e(er,i_r),e(er,rc),e(rc,d_r),e(rc,fH),e(fH,c_r),e(rc,m_r),e(rc,gH),e(gH,f_r),e(rc,g_r),e(er,h_r),e(er,T9),e(T9,u_r),e(T9,L1e),e(L1e,p_r),e(T9,__r),e(er,b_r),e(er,$t),M(M9,$t,null),e($t,v_r),e($t,y1e),e(y1e,F_r),e($t,T_r),e($t,tc),e(tc,M_r),e(tc,x1e),e(x1e,E_r),e(tc,C_r),e(tc,hH),e(hH,w_r),e(tc,A_r),e($t,L_r),M(JE,$t,null),e(er,y_r),e(er,yr),M(E9,yr,null),e(yr,x_r),e(yr,$1e),e($1e,$_r),e(yr,k_r),e(yr,an),e(an,S_r),e(an,k1e),e(k1e,R_r),e(an,P_r),e(an,S1e),e(S1e,B_r),e(an,I_r),e(an,R1e),e(R1e,N_r),e(an,q_r),e(yr,j_r),e(yr,j),e(j,YE),e(YE,P1e),e(P1e,D_r),e(YE,G_r),e(YE,uH),e(uH,O_r),e(YE,V_r),e(j,X_r),e(j,KE),e(KE,B1e),e(B1e,z_r),e(KE,Q_r),e(KE,pH),e(pH,W_r),e(KE,H_r),e(j,U_r),e(j,ZE),e(ZE,I1e),e(I1e,J_r),e(ZE,Y_r),e(ZE,_H),e(_H,K_r),e(ZE,Z_r),e(j,e2r),e(j,e4),e(e4,N1e),e(N1e,o2r),e(e4,r2r),e(e4,bH),e(bH,t2r),e(e4,a2r),e(j,n2r),e(j,o4),e(o4,q1e),e(q1e,s2r),e(o4,l2r),e(o4,vH),e(vH,i2r),e(o4,d2r),e(j,c2r),e(j,r4),e(r4,j1e),e(j1e,m2r),e(r4,f2r),e(r4,FH),e(FH,g2r),e(r4,h2r),e(j,u2r),e(j,t4),e(t4,D1e),e(D1e,p2r),e(t4,_2r),e(t4,TH),e(TH,b2r),e(t4,v2r),e(j,F2r),e(j,a4),e(a4,G1e),e(G1e,T2r),e(a4,M2r),e(a4,MH),e(MH,E2r),e(a4,C2r),e(j,w2r),e(j,n4),e(n4,O1e),e(O1e,A2r),e(n4,L2r),e(n4,EH),e(EH,y2r),e(n4,x2r),e(j,$2r),e(j,s4),e(s4,V1e),e(V1e,k2r),e(s4,S2r),e(s4,CH),e(CH,R2r),e(s4,P2r),e(j,B2r),e(j,l4),e(l4,X1e),e(X1e,I2r),e(l4,N2r),e(l4,wH),e(wH,q2r),e(l4,j2r),e(j,D2r),e(j,i4),e(i4,z1e),e(z1e,G2r),e(i4,O2r),e(i4,AH),e(AH,V2r),e(i4,X2r),e(j,z2r),e(j,d4),e(d4,Q1e),e(Q1e,Q2r),e(d4,W2r),e(d4,LH),e(LH,H2r),e(d4,U2r),e(j,J2r),e(j,c4),e(c4,W1e),e(W1e,Y2r),e(c4,K2r),e(c4,yH),e(yH,Z2r),e(c4,ebr),e(j,obr),e(j,m4),e(m4,H1e),e(H1e,rbr),e(m4,tbr),e(m4,xH),e(xH,abr),e(m4,nbr),e(j,sbr),e(j,f4),e(f4,U1e),e(U1e,lbr),e(f4,ibr),e(f4,$H),e($H,dbr),e(f4,cbr),e(j,mbr),e(j,g4),e(g4,J1e),e(J1e,fbr),e(g4,gbr),e(g4,kH),e(kH,hbr),e(g4,ubr),e(j,pbr),e(j,Ws),e(Ws,Y1e),e(Y1e,_br),e(Ws,bbr),e(Ws,SH),e(SH,vbr),e(Ws,Fbr),e(Ws,RH),e(RH,Tbr),e(Ws,Mbr),e(j,Ebr),e(j,h4),e(h4,K1e),e(K1e,Cbr),e(h4,wbr),e(h4,PH),e(PH,Abr),e(h4,Lbr),e(j,ybr),e(j,u4),e(u4,Z1e),e(Z1e,xbr),e(u4,$br),e(u4,BH),e(BH,kbr),e(u4,Sbr),e(j,Rbr),e(j,p4),e(p4,eTe),e(eTe,Pbr),e(p4,Bbr),e(p4,IH),e(IH,Ibr),e(p4,Nbr),e(j,qbr),e(j,_4),e(_4,oTe),e(oTe,jbr),e(_4,Dbr),e(_4,NH),e(NH,Gbr),e(_4,Obr),e(j,Vbr),e(j,b4),e(b4,rTe),e(rTe,Xbr),e(b4,zbr),e(b4,qH),e(qH,Qbr),e(b4,Wbr),e(j,Hbr),e(j,v4),e(v4,tTe),e(tTe,Ubr),e(v4,Jbr),e(v4,jH),e(jH,Ybr),e(v4,Kbr),e(j,Zbr),e(j,F4),e(F4,aTe),e(aTe,evr),e(F4,ovr),e(F4,DH),e(DH,rvr),e(F4,tvr),e(j,avr),e(j,T4),e(T4,nTe),e(nTe,nvr),e(T4,svr),e(T4,GH),e(GH,lvr),e(T4,ivr),e(j,dvr),e(j,M4),e(M4,sTe),e(sTe,cvr),e(M4,mvr),e(M4,OH),e(OH,fvr),e(M4,gvr),e(j,hvr),e(j,E4),e(E4,lTe),e(lTe,uvr),e(E4,pvr),e(E4,VH),e(VH,_vr),e(E4,bvr),e(j,vvr),e(j,C4),e(C4,iTe),e(iTe,Fvr),e(C4,Tvr),e(C4,XH),e(XH,Mvr),e(C4,Evr),e(j,Cvr),e(j,w4),e(w4,dTe),e(dTe,wvr),e(w4,Avr),e(w4,zH),e(zH,Lvr),e(w4,yvr),e(j,xvr),e(j,A4),e(A4,cTe),e(cTe,$vr),e(A4,kvr),e(A4,QH),e(QH,Svr),e(A4,Rvr),e(j,Pvr),e(j,L4),e(L4,mTe),e(mTe,Bvr),e(L4,Ivr),e(L4,WH),e(WH,Nvr),e(L4,qvr),e(j,jvr),e(j,y4),e(y4,fTe),e(fTe,Dvr),e(y4,Gvr),e(y4,HH),e(HH,Ovr),e(y4,Vvr),e(j,Xvr),e(j,x4),e(x4,gTe),e(gTe,zvr),e(x4,Qvr),e(x4,UH),e(UH,Wvr),e(x4,Hvr),e(j,Uvr),e(j,$4),e($4,hTe),e(hTe,Jvr),e($4,Yvr),e($4,JH),e(JH,Kvr),e($4,Zvr),e(j,eFr),e(j,k4),e(k4,uTe),e(uTe,oFr),e(k4,rFr),e(k4,YH),e(YH,tFr),e(k4,aFr),e(j,nFr),e(j,S4),e(S4,pTe),e(pTe,sFr),e(S4,lFr),e(S4,KH),e(KH,iFr),e(S4,dFr),e(j,cFr),e(j,R4),e(R4,_Te),e(_Te,mFr),e(R4,fFr),e(R4,ZH),e(ZH,gFr),e(R4,hFr),e(j,uFr),e(j,P4),e(P4,bTe),e(bTe,pFr),e(P4,_Fr),e(P4,eU),e(eU,bFr),e(P4,vFr),e(j,FFr),e(j,B4),e(B4,vTe),e(vTe,TFr),e(B4,MFr),e(B4,oU),e(oU,EFr),e(B4,CFr),e(j,wFr),e(j,I4),e(I4,FTe),e(FTe,AFr),e(I4,LFr),e(I4,rU),e(rU,yFr),e(I4,xFr),e(j,$Fr),e(j,N4),e(N4,TTe),e(TTe,kFr),e(N4,SFr),e(N4,tU),e(tU,RFr),e(N4,PFr),e(j,BFr),e(j,q4),e(q4,MTe),e(MTe,IFr),e(q4,NFr),e(q4,aU),e(aU,qFr),e(q4,jFr),e(j,DFr),e(j,j4),e(j4,ETe),e(ETe,GFr),e(j4,OFr),e(j4,nU),e(nU,VFr),e(j4,XFr),e(j,zFr),e(j,D4),e(D4,CTe),e(CTe,QFr),e(D4,WFr),e(D4,sU),e(sU,HFr),e(D4,UFr),e(j,JFr),e(j,G4),e(G4,wTe),e(wTe,YFr),e(G4,KFr),e(G4,lU),e(lU,ZFr),e(G4,e1r),e(j,o1r),e(j,O4),e(O4,ATe),e(ATe,r1r),e(O4,t1r),e(O4,iU),e(iU,a1r),e(O4,n1r),e(yr,s1r),M(V4,yr,null),b(m,mVe,_),b(m,ac,_),e(ac,X4),e(X4,LTe),M(C9,LTe,null),e(ac,l1r),e(ac,yTe),e(yTe,i1r),b(m,fVe,_),b(m,or,_),M(w9,or,null),e(or,d1r),e(or,nc),e(nc,c1r),e(nc,dU),e(dU,m1r),e(nc,f1r),e(nc,cU),e(cU,g1r),e(nc,h1r),e(or,u1r),e(or,A9),e(A9,p1r),e(A9,xTe),e(xTe,_1r),e(A9,b1r),e(or,v1r),e(or,kt),M(L9,kt,null),e(kt,F1r),e(kt,$Te),e($Te,T1r),e(kt,M1r),e(kt,sc),e(sc,E1r),e(sc,kTe),e(kTe,C1r),e(sc,w1r),e(sc,mU),e(mU,A1r),e(sc,L1r),e(kt,y1r),M(z4,kt,null),e(or,x1r),e(or,xr),M(y9,xr,null),e(xr,$1r),e(xr,STe),e(STe,k1r),e(xr,S1r),e(xr,nn),e(nn,R1r),e(nn,RTe),e(RTe,P1r),e(nn,B1r),e(nn,PTe),e(PTe,I1r),e(nn,N1r),e(nn,BTe),e(BTe,q1r),e(nn,j1r),e(xr,D1r),e(xr,se),e(se,Q4),e(Q4,ITe),e(ITe,G1r),e(Q4,O1r),e(Q4,fU),e(fU,V1r),e(Q4,X1r),e(se,z1r),e(se,W4),e(W4,NTe),e(NTe,Q1r),e(W4,W1r),e(W4,gU),e(gU,H1r),e(W4,U1r),e(se,J1r),e(se,H4),e(H4,qTe),e(qTe,Y1r),e(H4,K1r),e(H4,hU),e(hU,Z1r),e(H4,eTr),e(se,oTr),e(se,U4),e(U4,jTe),e(jTe,rTr),e(U4,tTr),e(U4,uU),e(uU,aTr),e(U4,nTr),e(se,sTr),e(se,J4),e(J4,DTe),e(DTe,lTr),e(J4,iTr),e(J4,pU),e(pU,dTr),e(J4,cTr),e(se,mTr),e(se,Y4),e(Y4,GTe),e(GTe,fTr),e(Y4,gTr),e(Y4,_U),e(_U,hTr),e(Y4,uTr),e(se,pTr),e(se,K4),e(K4,OTe),e(OTe,_Tr),e(K4,bTr),e(K4,bU),e(bU,vTr),e(K4,FTr),e(se,TTr),e(se,Z4),e(Z4,VTe),e(VTe,MTr),e(Z4,ETr),e(Z4,vU),e(vU,CTr),e(Z4,wTr),e(se,ATr),e(se,eC),e(eC,XTe),e(XTe,LTr),e(eC,yTr),e(eC,FU),e(FU,xTr),e(eC,$Tr),e(se,kTr),e(se,oC),e(oC,zTe),e(zTe,STr),e(oC,RTr),e(oC,TU),e(TU,PTr),e(oC,BTr),e(se,ITr),e(se,rC),e(rC,QTe),e(QTe,NTr),e(rC,qTr),e(rC,MU),e(MU,jTr),e(rC,DTr),e(se,GTr),e(se,tC),e(tC,WTe),e(WTe,OTr),e(tC,VTr),e(tC,EU),e(EU,XTr),e(tC,zTr),e(se,QTr),e(se,aC),e(aC,HTe),e(HTe,WTr),e(aC,HTr),e(aC,CU),e(CU,UTr),e(aC,JTr),e(se,YTr),e(se,nC),e(nC,UTe),e(UTe,KTr),e(nC,ZTr),e(nC,wU),e(wU,eMr),e(nC,oMr),e(se,rMr),e(se,sC),e(sC,JTe),e(JTe,tMr),e(sC,aMr),e(sC,AU),e(AU,nMr),e(sC,sMr),e(se,lMr),e(se,lC),e(lC,YTe),e(YTe,iMr),e(lC,dMr),e(lC,LU),e(LU,cMr),e(lC,mMr),e(se,fMr),e(se,iC),e(iC,KTe),e(KTe,gMr),e(iC,hMr),e(iC,yU),e(yU,uMr),e(iC,pMr),e(se,_Mr),e(se,dC),e(dC,ZTe),e(ZTe,bMr),e(dC,vMr),e(dC,xU),e(xU,FMr),e(dC,TMr),e(se,MMr),e(se,cC),e(cC,eMe),e(eMe,EMr),e(cC,CMr),e(cC,$U),e($U,wMr),e(cC,AMr),e(se,LMr),e(se,mC),e(mC,oMe),e(oMe,yMr),e(mC,xMr),e(mC,kU),e(kU,$Mr),e(mC,kMr),e(se,SMr),e(se,fC),e(fC,rMe),e(rMe,RMr),e(fC,PMr),e(fC,SU),e(SU,BMr),e(fC,IMr),e(se,NMr),e(se,gC),e(gC,tMe),e(tMe,qMr),e(gC,jMr),e(gC,RU),e(RU,DMr),e(gC,GMr),e(se,OMr),e(se,hC),e(hC,aMe),e(aMe,VMr),e(hC,XMr),e(hC,PU),e(PU,zMr),e(hC,QMr),e(xr,WMr),M(uC,xr,null),b(m,gVe,_),b(m,lc,_),e(lc,pC),e(pC,nMe),M(x9,nMe,null),e(lc,HMr),e(lc,sMe),e(sMe,UMr),b(m,hVe,_),b(m,rr,_),M($9,rr,null),e(rr,JMr),e(rr,ic),e(ic,YMr),e(ic,BU),e(BU,KMr),e(ic,ZMr),e(ic,IU),e(IU,eEr),e(ic,oEr),e(rr,rEr),e(rr,k9),e(k9,tEr),e(k9,lMe),e(lMe,aEr),e(k9,nEr),e(rr,sEr),e(rr,St),M(S9,St,null),e(St,lEr),e(St,iMe),e(iMe,iEr),e(St,dEr),e(St,dc),e(dc,cEr),e(dc,dMe),e(dMe,mEr),e(dc,fEr),e(dc,NU),e(NU,gEr),e(dc,hEr),e(St,uEr),M(_C,St,null),e(rr,pEr),e(rr,$r),M(R9,$r,null),e($r,_Er),e($r,cMe),e(cMe,bEr),e($r,vEr),e($r,sn),e(sn,FEr),e(sn,mMe),e(mMe,TEr),e(sn,MEr),e(sn,fMe),e(fMe,EEr),e(sn,CEr),e(sn,gMe),e(gMe,wEr),e(sn,AEr),e($r,LEr),e($r,Me),e(Me,bC),e(bC,hMe),e(hMe,yEr),e(bC,xEr),e(bC,qU),e(qU,$Er),e(bC,kEr),e(Me,SEr),e(Me,vC),e(vC,uMe),e(uMe,REr),e(vC,PEr),e(vC,jU),e(jU,BEr),e(vC,IEr),e(Me,NEr),e(Me,FC),e(FC,pMe),e(pMe,qEr),e(FC,jEr),e(FC,DU),e(DU,DEr),e(FC,GEr),e(Me,OEr),e(Me,TC),e(TC,_Me),e(_Me,VEr),e(TC,XEr),e(TC,GU),e(GU,zEr),e(TC,QEr),e(Me,WEr),e(Me,MC),e(MC,bMe),e(bMe,HEr),e(MC,UEr),e(MC,OU),e(OU,JEr),e(MC,YEr),e(Me,KEr),e(Me,EC),e(EC,vMe),e(vMe,ZEr),e(EC,e4r),e(EC,VU),e(VU,o4r),e(EC,r4r),e(Me,t4r),e(Me,CC),e(CC,FMe),e(FMe,a4r),e(CC,n4r),e(CC,XU),e(XU,s4r),e(CC,l4r),e(Me,i4r),e(Me,wC),e(wC,TMe),e(TMe,d4r),e(wC,c4r),e(wC,zU),e(zU,m4r),e(wC,f4r),e(Me,g4r),e(Me,AC),e(AC,MMe),e(MMe,h4r),e(AC,u4r),e(AC,QU),e(QU,p4r),e(AC,_4r),e(Me,b4r),e(Me,LC),e(LC,EMe),e(EMe,v4r),e(LC,F4r),e(LC,WU),e(WU,T4r),e(LC,M4r),e(Me,E4r),e(Me,yC),e(yC,CMe),e(CMe,C4r),e(yC,w4r),e(yC,HU),e(HU,A4r),e(yC,L4r),e(Me,y4r),e(Me,xC),e(xC,wMe),e(wMe,x4r),e(xC,$4r),e(xC,UU),e(UU,k4r),e(xC,S4r),e(Me,R4r),e(Me,$C),e($C,AMe),e(AMe,P4r),e($C,B4r),e($C,JU),e(JU,I4r),e($C,N4r),e($r,q4r),M(kC,$r,null),b(m,uVe,_),b(m,cc,_),e(cc,SC),e(SC,LMe),M(P9,LMe,null),e(cc,j4r),e(cc,yMe),e(yMe,D4r),b(m,pVe,_),b(m,tr,_),M(B9,tr,null),e(tr,G4r),e(tr,mc),e(mc,O4r),e(mc,YU),e(YU,V4r),e(mc,X4r),e(mc,KU),e(KU,z4r),e(mc,Q4r),e(tr,W4r),e(tr,I9),e(I9,H4r),e(I9,xMe),e(xMe,U4r),e(I9,J4r),e(tr,Y4r),e(tr,Rt),M(N9,Rt,null),e(Rt,K4r),e(Rt,$Me),e($Me,Z4r),e(Rt,eCr),e(Rt,fc),e(fc,oCr),e(fc,kMe),e(kMe,rCr),e(fc,tCr),e(fc,ZU),e(ZU,aCr),e(fc,nCr),e(Rt,sCr),M(RC,Rt,null),e(tr,lCr),e(tr,kr),M(q9,kr,null),e(kr,iCr),e(kr,SMe),e(SMe,dCr),e(kr,cCr),e(kr,ln),e(ln,mCr),e(ln,RMe),e(RMe,fCr),e(ln,gCr),e(ln,PMe),e(PMe,hCr),e(ln,uCr),e(ln,BMe),e(BMe,pCr),e(ln,_Cr),e(kr,bCr),e(kr,dn),e(dn,PC),e(PC,IMe),e(IMe,vCr),e(PC,FCr),e(PC,eJ),e(eJ,TCr),e(PC,MCr),e(dn,ECr),e(dn,BC),e(BC,NMe),e(NMe,CCr),e(BC,wCr),e(BC,oJ),e(oJ,ACr),e(BC,LCr),e(dn,yCr),e(dn,IC),e(IC,qMe),e(qMe,xCr),e(IC,$Cr),e(IC,rJ),e(rJ,kCr),e(IC,SCr),e(dn,RCr),e(dn,NC),e(NC,jMe),e(jMe,PCr),e(NC,BCr),e(NC,tJ),e(tJ,ICr),e(NC,NCr),e(kr,qCr),M(qC,kr,null),b(m,_Ve,_),b(m,gc,_),e(gc,jC),e(jC,DMe),M(j9,DMe,null),e(gc,jCr),e(gc,GMe),e(GMe,DCr),b(m,bVe,_),b(m,ar,_),M(D9,ar,null),e(ar,GCr),e(ar,hc),e(hc,OCr),e(hc,aJ),e(aJ,VCr),e(hc,XCr),e(hc,nJ),e(nJ,zCr),e(hc,QCr),e(ar,WCr),e(ar,G9),e(G9,HCr),e(G9,OMe),e(OMe,UCr),e(G9,JCr),e(ar,YCr),e(ar,Pt),M(O9,Pt,null),e(Pt,KCr),e(Pt,VMe),e(VMe,ZCr),e(Pt,e5r),e(Pt,uc),e(uc,o5r),e(uc,XMe),e(XMe,r5r),e(uc,t5r),e(uc,sJ),e(sJ,a5r),e(uc,n5r),e(Pt,s5r),M(DC,Pt,null),e(ar,l5r),e(ar,Sr),M(V9,Sr,null),e(Sr,i5r),e(Sr,zMe),e(zMe,d5r),e(Sr,c5r),e(Sr,cn),e(cn,m5r),e(cn,QMe),e(QMe,f5r),e(cn,g5r),e(cn,WMe),e(WMe,h5r),e(cn,u5r),e(cn,HMe),e(HMe,p5r),e(cn,_5r),e(Sr,b5r),e(Sr,ie),e(ie,GC),e(GC,UMe),e(UMe,v5r),e(GC,F5r),e(GC,lJ),e(lJ,T5r),e(GC,M5r),e(ie,E5r),e(ie,OC),e(OC,JMe),e(JMe,C5r),e(OC,w5r),e(OC,iJ),e(iJ,A5r),e(OC,L5r),e(ie,y5r),e(ie,VC),e(VC,YMe),e(YMe,x5r),e(VC,$5r),e(VC,dJ),e(dJ,k5r),e(VC,S5r),e(ie,R5r),e(ie,XC),e(XC,KMe),e(KMe,P5r),e(XC,B5r),e(XC,cJ),e(cJ,I5r),e(XC,N5r),e(ie,q5r),e(ie,zC),e(zC,ZMe),e(ZMe,j5r),e(zC,D5r),e(zC,mJ),e(mJ,G5r),e(zC,O5r),e(ie,V5r),e(ie,QC),e(QC,eEe),e(eEe,X5r),e(QC,z5r),e(QC,fJ),e(fJ,Q5r),e(QC,W5r),e(ie,H5r),e(ie,WC),e(WC,oEe),e(oEe,U5r),e(WC,J5r),e(WC,gJ),e(gJ,Y5r),e(WC,K5r),e(ie,Z5r),e(ie,HC),e(HC,rEe),e(rEe,e3r),e(HC,o3r),e(HC,hJ),e(hJ,r3r),e(HC,t3r),e(ie,a3r),e(ie,UC),e(UC,tEe),e(tEe,n3r),e(UC,s3r),e(UC,uJ),e(uJ,l3r),e(UC,i3r),e(ie,d3r),e(ie,JC),e(JC,aEe),e(aEe,c3r),e(JC,m3r),e(JC,pJ),e(pJ,f3r),e(JC,g3r),e(ie,h3r),e(ie,YC),e(YC,nEe),e(nEe,u3r),e(YC,p3r),e(YC,_J),e(_J,_3r),e(YC,b3r),e(ie,v3r),e(ie,KC),e(KC,sEe),e(sEe,F3r),e(KC,T3r),e(KC,bJ),e(bJ,M3r),e(KC,E3r),e(ie,C3r),e(ie,ZC),e(ZC,lEe),e(lEe,w3r),e(ZC,A3r),e(ZC,vJ),e(vJ,L3r),e(ZC,y3r),e(ie,x3r),e(ie,e5),e(e5,iEe),e(iEe,$3r),e(e5,k3r),e(e5,FJ),e(FJ,S3r),e(e5,R3r),e(ie,P3r),e(ie,o5),e(o5,dEe),e(dEe,B3r),e(o5,I3r),e(o5,TJ),e(TJ,N3r),e(o5,q3r),e(ie,j3r),e(ie,r5),e(r5,cEe),e(cEe,D3r),e(r5,G3r),e(r5,MJ),e(MJ,O3r),e(r5,V3r),e(ie,X3r),e(ie,t5),e(t5,mEe),e(mEe,z3r),e(t5,Q3r),e(t5,EJ),e(EJ,W3r),e(t5,H3r),e(ie,U3r),e(ie,a5),e(a5,fEe),e(fEe,J3r),e(a5,Y3r),e(a5,CJ),e(CJ,K3r),e(a5,Z3r),e(ie,e0r),e(ie,n5),e(n5,gEe),e(gEe,o0r),e(n5,r0r),e(n5,wJ),e(wJ,t0r),e(n5,a0r),e(ie,n0r),e(ie,s5),e(s5,hEe),e(hEe,s0r),e(s5,l0r),e(s5,AJ),e(AJ,i0r),e(s5,d0r),e(Sr,c0r),M(l5,Sr,null),b(m,vVe,_),b(m,pc,_),e(pc,i5),e(i5,uEe),M(X9,uEe,null),e(pc,m0r),e(pc,pEe),e(pEe,f0r),b(m,FVe,_),b(m,nr,_),M(z9,nr,null),e(nr,g0r),e(nr,_c),e(_c,h0r),e(_c,LJ),e(LJ,u0r),e(_c,p0r),e(_c,yJ),e(yJ,_0r),e(_c,b0r),e(nr,v0r),e(nr,Q9),e(Q9,F0r),e(Q9,_Ee),e(_Ee,T0r),e(Q9,M0r),e(nr,E0r),e(nr,Bt),M(W9,Bt,null),e(Bt,C0r),e(Bt,bEe),e(bEe,w0r),e(Bt,A0r),e(Bt,bc),e(bc,L0r),e(bc,vEe),e(vEe,y0r),e(bc,x0r),e(bc,xJ),e(xJ,$0r),e(bc,k0r),e(Bt,S0r),M(d5,Bt,null),e(nr,R0r),e(nr,Rr),M(H9,Rr,null),e(Rr,P0r),e(Rr,FEe),e(FEe,B0r),e(Rr,I0r),e(Rr,mn),e(mn,N0r),e(mn,TEe),e(TEe,q0r),e(mn,j0r),e(mn,MEe),e(MEe,D0r),e(mn,G0r),e(mn,EEe),e(EEe,O0r),e(mn,V0r),e(Rr,X0r),e(Rr,ye),e(ye,c5),e(c5,CEe),e(CEe,z0r),e(c5,Q0r),e(c5,$J),e($J,W0r),e(c5,H0r),e(ye,U0r),e(ye,m5),e(m5,wEe),e(wEe,J0r),e(m5,Y0r),e(m5,kJ),e(kJ,K0r),e(m5,Z0r),e(ye,ewr),e(ye,f5),e(f5,AEe),e(AEe,owr),e(f5,rwr),e(f5,SJ),e(SJ,twr),e(f5,awr),e(ye,nwr),e(ye,g5),e(g5,LEe),e(LEe,swr),e(g5,lwr),e(g5,RJ),e(RJ,iwr),e(g5,dwr),e(ye,cwr),e(ye,h5),e(h5,yEe),e(yEe,mwr),e(h5,fwr),e(h5,PJ),e(PJ,gwr),e(h5,hwr),e(ye,uwr),e(ye,u5),e(u5,xEe),e(xEe,pwr),e(u5,_wr),e(u5,BJ),e(BJ,bwr),e(u5,vwr),e(ye,Fwr),e(ye,p5),e(p5,$Ee),e($Ee,Twr),e(p5,Mwr),e(p5,IJ),e(IJ,Ewr),e(p5,Cwr),e(ye,wwr),e(ye,_5),e(_5,kEe),e(kEe,Awr),e(_5,Lwr),e(_5,NJ),e(NJ,ywr),e(_5,xwr),e(ye,$wr),e(ye,b5),e(b5,SEe),e(SEe,kwr),e(b5,Swr),e(b5,qJ),e(qJ,Rwr),e(b5,Pwr),e(ye,Bwr),e(ye,v5),e(v5,REe),e(REe,Iwr),e(v5,Nwr),e(v5,jJ),e(jJ,qwr),e(v5,jwr),e(Rr,Dwr),M(F5,Rr,null),b(m,TVe,_),b(m,vc,_),e(vc,T5),e(T5,PEe),M(U9,PEe,null),e(vc,Gwr),e(vc,BEe),e(BEe,Owr),b(m,MVe,_),b(m,sr,_),M(J9,sr,null),e(sr,Vwr),e(sr,Fc),e(Fc,Xwr),e(Fc,DJ),e(DJ,zwr),e(Fc,Qwr),e(Fc,GJ),e(GJ,Wwr),e(Fc,Hwr),e(sr,Uwr),e(sr,Y9),e(Y9,Jwr),e(Y9,IEe),e(IEe,Ywr),e(Y9,Kwr),e(sr,Zwr),e(sr,It),M(K9,It,null),e(It,eAr),e(It,NEe),e(NEe,oAr),e(It,rAr),e(It,Tc),e(Tc,tAr),e(Tc,qEe),e(qEe,aAr),e(Tc,nAr),e(Tc,OJ),e(OJ,sAr),e(Tc,lAr),e(It,iAr),M(M5,It,null),e(sr,dAr),e(sr,Pr),M(Z9,Pr,null),e(Pr,cAr),e(Pr,jEe),e(jEe,mAr),e(Pr,fAr),e(Pr,fn),e(fn,gAr),e(fn,DEe),e(DEe,hAr),e(fn,uAr),e(fn,GEe),e(GEe,pAr),e(fn,_Ar),e(fn,OEe),e(OEe,bAr),e(fn,vAr),e(Pr,FAr),e(Pr,te),e(te,E5),e(E5,VEe),e(VEe,TAr),e(E5,MAr),e(E5,VJ),e(VJ,EAr),e(E5,CAr),e(te,wAr),e(te,C5),e(C5,XEe),e(XEe,AAr),e(C5,LAr),e(C5,XJ),e(XJ,yAr),e(C5,xAr),e(te,$Ar),e(te,w5),e(w5,zEe),e(zEe,kAr),e(w5,SAr),e(w5,zJ),e(zJ,RAr),e(w5,PAr),e(te,BAr),e(te,A5),e(A5,QEe),e(QEe,IAr),e(A5,NAr),e(A5,QJ),e(QJ,qAr),e(A5,jAr),e(te,DAr),e(te,L5),e(L5,WEe),e(WEe,GAr),e(L5,OAr),e(L5,WJ),e(WJ,VAr),e(L5,XAr),e(te,zAr),e(te,y5),e(y5,HEe),e(HEe,QAr),e(y5,WAr),e(y5,HJ),e(HJ,HAr),e(y5,UAr),e(te,JAr),e(te,x5),e(x5,UEe),e(UEe,YAr),e(x5,KAr),e(x5,UJ),e(UJ,ZAr),e(x5,e6r),e(te,o6r),e(te,$5),e($5,JEe),e(JEe,r6r),e($5,t6r),e($5,JJ),e(JJ,a6r),e($5,n6r),e(te,s6r),e(te,k5),e(k5,YEe),e(YEe,l6r),e(k5,i6r),e(k5,YJ),e(YJ,d6r),e(k5,c6r),e(te,m6r),e(te,S5),e(S5,KEe),e(KEe,f6r),e(S5,g6r),e(S5,KJ),e(KJ,h6r),e(S5,u6r),e(te,p6r),e(te,R5),e(R5,ZEe),e(ZEe,_6r),e(R5,b6r),e(R5,ZJ),e(ZJ,v6r),e(R5,F6r),e(te,T6r),e(te,P5),e(P5,e4e),e(e4e,M6r),e(P5,E6r),e(P5,eY),e(eY,C6r),e(P5,w6r),e(te,A6r),e(te,B5),e(B5,o4e),e(o4e,L6r),e(B5,y6r),e(B5,oY),e(oY,x6r),e(B5,$6r),e(te,k6r),e(te,I5),e(I5,r4e),e(r4e,S6r),e(I5,R6r),e(I5,rY),e(rY,P6r),e(I5,B6r),e(te,I6r),e(te,N5),e(N5,t4e),e(t4e,N6r),e(N5,q6r),e(N5,tY),e(tY,j6r),e(N5,D6r),e(te,G6r),e(te,q5),e(q5,a4e),e(a4e,O6r),e(q5,V6r),e(q5,aY),e(aY,X6r),e(q5,z6r),e(te,Q6r),e(te,j5),e(j5,n4e),e(n4e,W6r),e(j5,H6r),e(j5,nY),e(nY,U6r),e(j5,J6r),e(te,Y6r),e(te,D5),e(D5,s4e),e(s4e,K6r),e(D5,Z6r),e(D5,sY),e(sY,eLr),e(D5,oLr),e(te,rLr),e(te,G5),e(G5,l4e),e(l4e,tLr),e(G5,aLr),e(G5,lY),e(lY,nLr),e(G5,sLr),e(te,lLr),e(te,O5),e(O5,i4e),e(i4e,iLr),e(O5,dLr),e(O5,iY),e(iY,cLr),e(O5,mLr),e(te,fLr),e(te,V5),e(V5,d4e),e(d4e,gLr),e(V5,hLr),e(V5,dY),e(dY,uLr),e(V5,pLr),e(te,_Lr),e(te,X5),e(X5,c4e),e(c4e,bLr),e(X5,vLr),e(X5,cY),e(cY,FLr),e(X5,TLr),e(te,MLr),e(te,z5),e(z5,m4e),e(m4e,ELr),e(z5,CLr),e(z5,mY),e(mY,wLr),e(z5,ALr),e(te,LLr),e(te,Q5),e(Q5,f4e),e(f4e,yLr),e(Q5,xLr),e(Q5,fY),e(fY,$Lr),e(Q5,kLr),e(te,SLr),e(te,W5),e(W5,g4e),e(g4e,RLr),e(W5,PLr),e(W5,gY),e(gY,BLr),e(W5,ILr),e(te,NLr),e(te,H5),e(H5,h4e),e(h4e,qLr),e(H5,jLr),e(H5,hY),e(hY,DLr),e(H5,GLr),e(Pr,OLr),M(U5,Pr,null),b(m,EVe,_),b(m,Mc,_),e(Mc,J5),e(J5,u4e),M(ex,u4e,null),e(Mc,VLr),e(Mc,p4e),e(p4e,XLr),b(m,CVe,_),b(m,lr,_),M(ox,lr,null),e(lr,zLr),e(lr,Ec),e(Ec,QLr),e(Ec,uY),e(uY,WLr),e(Ec,HLr),e(Ec,pY),e(pY,ULr),e(Ec,JLr),e(lr,YLr),e(lr,rx),e(rx,KLr),e(rx,_4e),e(_4e,ZLr),e(rx,e7r),e(lr,o7r),e(lr,Nt),M(tx,Nt,null),e(Nt,r7r),e(Nt,b4e),e(b4e,t7r),e(Nt,a7r),e(Nt,Cc),e(Cc,n7r),e(Cc,v4e),e(v4e,s7r),e(Cc,l7r),e(Cc,_Y),e(_Y,i7r),e(Cc,d7r),e(Nt,c7r),M(Y5,Nt,null),e(lr,m7r),e(lr,Br),M(ax,Br,null),e(Br,f7r),e(Br,F4e),e(F4e,g7r),e(Br,h7r),e(Br,gn),e(gn,u7r),e(gn,T4e),e(T4e,p7r),e(gn,_7r),e(gn,M4e),e(M4e,b7r),e(gn,v7r),e(gn,E4e),e(E4e,F7r),e(gn,T7r),e(Br,M7r),e(Br,pe),e(pe,K5),e(K5,C4e),e(C4e,E7r),e(K5,C7r),e(K5,bY),e(bY,w7r),e(K5,A7r),e(pe,L7r),e(pe,Z5),e(Z5,w4e),e(w4e,y7r),e(Z5,x7r),e(Z5,vY),e(vY,$7r),e(Z5,k7r),e(pe,S7r),e(pe,e3),e(e3,A4e),e(A4e,R7r),e(e3,P7r),e(e3,FY),e(FY,B7r),e(e3,I7r),e(pe,N7r),e(pe,o3),e(o3,L4e),e(L4e,q7r),e(o3,j7r),e(o3,TY),e(TY,D7r),e(o3,G7r),e(pe,O7r),e(pe,r3),e(r3,y4e),e(y4e,V7r),e(r3,X7r),e(r3,MY),e(MY,z7r),e(r3,Q7r),e(pe,W7r),e(pe,t3),e(t3,x4e),e(x4e,H7r),e(t3,U7r),e(t3,EY),e(EY,J7r),e(t3,Y7r),e(pe,K7r),e(pe,a3),e(a3,$4e),e($4e,Z7r),e(a3,eyr),e(a3,CY),e(CY,oyr),e(a3,ryr),e(pe,tyr),e(pe,n3),e(n3,k4e),e(k4e,ayr),e(n3,nyr),e(n3,wY),e(wY,syr),e(n3,lyr),e(pe,iyr),e(pe,s3),e(s3,S4e),e(S4e,dyr),e(s3,cyr),e(s3,AY),e(AY,myr),e(s3,fyr),e(pe,gyr),e(pe,l3),e(l3,R4e),e(R4e,hyr),e(l3,uyr),e(l3,LY),e(LY,pyr),e(l3,_yr),e(pe,byr),e(pe,i3),e(i3,P4e),e(P4e,vyr),e(i3,Fyr),e(i3,yY),e(yY,Tyr),e(i3,Myr),e(pe,Eyr),e(pe,d3),e(d3,B4e),e(B4e,Cyr),e(d3,wyr),e(d3,xY),e(xY,Ayr),e(d3,Lyr),e(pe,yyr),e(pe,c3),e(c3,I4e),e(I4e,xyr),e(c3,$yr),e(c3,$Y),e($Y,kyr),e(c3,Syr),e(pe,Ryr),e(pe,m3),e(m3,N4e),e(N4e,Pyr),e(m3,Byr),e(m3,kY),e(kY,Iyr),e(m3,Nyr),e(pe,qyr),e(pe,f3),e(f3,q4e),e(q4e,jyr),e(f3,Dyr),e(f3,SY),e(SY,Gyr),e(f3,Oyr),e(pe,Vyr),e(pe,g3),e(g3,j4e),e(j4e,Xyr),e(g3,zyr),e(g3,RY),e(RY,Qyr),e(g3,Wyr),e(pe,Hyr),e(pe,h3),e(h3,D4e),e(D4e,Uyr),e(h3,Jyr),e(h3,PY),e(PY,Yyr),e(h3,Kyr),e(Br,Zyr),M(u3,Br,null),b(m,wVe,_),b(m,wc,_),e(wc,p3),e(p3,G4e),M(nx,G4e,null),e(wc,e8r),e(wc,O4e),e(O4e,o8r),b(m,AVe,_),b(m,ir,_),M(sx,ir,null),e(ir,r8r),e(ir,Ac),e(Ac,t8r),e(Ac,BY),e(BY,a8r),e(Ac,n8r),e(Ac,IY),e(IY,s8r),e(Ac,l8r),e(ir,i8r),e(ir,lx),e(lx,d8r),e(lx,V4e),e(V4e,c8r),e(lx,m8r),e(ir,f8r),e(ir,qt),M(ix,qt,null),e(qt,g8r),e(qt,X4e),e(X4e,h8r),e(qt,u8r),e(qt,Lc),e(Lc,p8r),e(Lc,z4e),e(z4e,_8r),e(Lc,b8r),e(Lc,NY),e(NY,v8r),e(Lc,F8r),e(qt,T8r),M(_3,qt,null),e(ir,M8r),e(ir,Ir),M(dx,Ir,null),e(Ir,E8r),e(Ir,Q4e),e(Q4e,C8r),e(Ir,w8r),e(Ir,hn),e(hn,A8r),e(hn,W4e),e(W4e,L8r),e(hn,y8r),e(hn,H4e),e(H4e,x8r),e(hn,$8r),e(hn,U4e),e(U4e,k8r),e(hn,S8r),e(Ir,R8r),e(Ir,cx),e(cx,b3),e(b3,J4e),e(J4e,P8r),e(b3,B8r),e(b3,qY),e(qY,I8r),e(b3,N8r),e(cx,q8r),e(cx,v3),e(v3,Y4e),e(Y4e,j8r),e(v3,D8r),e(v3,jY),e(jY,G8r),e(v3,O8r),e(Ir,V8r),M(F3,Ir,null),b(m,LVe,_),b(m,yc,_),e(yc,T3),e(T3,K4e),M(mx,K4e,null),e(yc,X8r),e(yc,Z4e),e(Z4e,z8r),b(m,yVe,_),b(m,dr,_),M(fx,dr,null),e(dr,Q8r),e(dr,xc),e(xc,W8r),e(xc,DY),e(DY,H8r),e(xc,U8r),e(xc,GY),e(GY,J8r),e(xc,Y8r),e(dr,K8r),e(dr,gx),e(gx,Z8r),e(gx,eCe),e(eCe,e9r),e(gx,o9r),e(dr,r9r),e(dr,jt),M(hx,jt,null),e(jt,t9r),e(jt,oCe),e(oCe,a9r),e(jt,n9r),e(jt,$c),e($c,s9r),e($c,rCe),e(rCe,l9r),e($c,i9r),e($c,OY),e(OY,d9r),e($c,c9r),e(jt,m9r),M(M3,jt,null),e(dr,f9r),e(dr,Nr),M(ux,Nr,null),e(Nr,g9r),e(Nr,tCe),e(tCe,h9r),e(Nr,u9r),e(Nr,un),e(un,p9r),e(un,aCe),e(aCe,_9r),e(un,b9r),e(un,nCe),e(nCe,v9r),e(un,F9r),e(un,sCe),e(sCe,T9r),e(un,M9r),e(Nr,E9r),e(Nr,lCe),e(lCe,E3),e(E3,iCe),e(iCe,C9r),e(E3,w9r),e(E3,VY),e(VY,A9r),e(E3,L9r),e(Nr,y9r),M(C3,Nr,null),b(m,xVe,_),b(m,kc,_),e(kc,w3),e(w3,dCe),M(px,dCe,null),e(kc,x9r),e(kc,cCe),e(cCe,$9r),b(m,$Ve,_),b(m,cr,_),M(_x,cr,null),e(cr,k9r),e(cr,Sc),e(Sc,S9r),e(Sc,XY),e(XY,R9r),e(Sc,P9r),e(Sc,zY),e(zY,B9r),e(Sc,I9r),e(cr,N9r),e(cr,bx),e(bx,q9r),e(bx,mCe),e(mCe,j9r),e(bx,D9r),e(cr,G9r),e(cr,Dt),M(vx,Dt,null),e(Dt,O9r),e(Dt,fCe),e(fCe,V9r),e(Dt,X9r),e(Dt,Rc),e(Rc,z9r),e(Rc,gCe),e(gCe,Q9r),e(Rc,W9r),e(Rc,QY),e(QY,H9r),e(Rc,U9r),e(Dt,J9r),M(A3,Dt,null),e(cr,Y9r),e(cr,qr),M(Fx,qr,null),e(qr,K9r),e(qr,hCe),e(hCe,Z9r),e(qr,exr),e(qr,pn),e(pn,oxr),e(pn,uCe),e(uCe,rxr),e(pn,txr),e(pn,pCe),e(pCe,axr),e(pn,nxr),e(pn,_Ce),e(_Ce,sxr),e(pn,lxr),e(qr,ixr),e(qr,de),e(de,L3),e(L3,bCe),e(bCe,dxr),e(L3,cxr),e(L3,WY),e(WY,mxr),e(L3,fxr),e(de,gxr),e(de,y3),e(y3,vCe),e(vCe,hxr),e(y3,uxr),e(y3,HY),e(HY,pxr),e(y3,_xr),e(de,bxr),e(de,x3),e(x3,FCe),e(FCe,vxr),e(x3,Fxr),e(x3,UY),e(UY,Txr),e(x3,Mxr),e(de,Exr),e(de,$3),e($3,TCe),e(TCe,Cxr),e($3,wxr),e($3,JY),e(JY,Axr),e($3,Lxr),e(de,yxr),e(de,k3),e(k3,MCe),e(MCe,xxr),e(k3,$xr),e(k3,YY),e(YY,kxr),e(k3,Sxr),e(de,Rxr),e(de,S3),e(S3,ECe),e(ECe,Pxr),e(S3,Bxr),e(S3,KY),e(KY,Ixr),e(S3,Nxr),e(de,qxr),e(de,R3),e(R3,CCe),e(CCe,jxr),e(R3,Dxr),e(R3,ZY),e(ZY,Gxr),e(R3,Oxr),e(de,Vxr),e(de,P3),e(P3,wCe),e(wCe,Xxr),e(P3,zxr),e(P3,eK),e(eK,Qxr),e(P3,Wxr),e(de,Hxr),e(de,B3),e(B3,ACe),e(ACe,Uxr),e(B3,Jxr),e(B3,oK),e(oK,Yxr),e(B3,Kxr),e(de,Zxr),e(de,I3),e(I3,LCe),e(LCe,e$r),e(I3,o$r),e(I3,rK),e(rK,r$r),e(I3,t$r),e(de,a$r),e(de,N3),e(N3,yCe),e(yCe,n$r),e(N3,s$r),e(N3,tK),e(tK,l$r),e(N3,i$r),e(de,d$r),e(de,q3),e(q3,xCe),e(xCe,c$r),e(q3,m$r),e(q3,aK),e(aK,f$r),e(q3,g$r),e(de,h$r),e(de,j3),e(j3,$Ce),e($Ce,u$r),e(j3,p$r),e(j3,nK),e(nK,_$r),e(j3,b$r),e(de,v$r),e(de,D3),e(D3,kCe),e(kCe,F$r),e(D3,T$r),e(D3,sK),e(sK,M$r),e(D3,E$r),e(de,C$r),e(de,G3),e(G3,SCe),e(SCe,w$r),e(G3,A$r),e(G3,lK),e(lK,L$r),e(G3,y$r),e(de,x$r),e(de,O3),e(O3,RCe),e(RCe,$$r),e(O3,k$r),e(O3,iK),e(iK,S$r),e(O3,R$r),e(de,P$r),e(de,V3),e(V3,PCe),e(PCe,B$r),e(V3,I$r),e(V3,dK),e(dK,N$r),e(V3,q$r),e(de,j$r),e(de,X3),e(X3,BCe),e(BCe,D$r),e(X3,G$r),e(X3,cK),e(cK,O$r),e(X3,V$r),e(de,X$r),e(de,z3),e(z3,ICe),e(ICe,z$r),e(z3,Q$r),e(z3,mK),e(mK,W$r),e(z3,H$r),e(de,U$r),e(de,Q3),e(Q3,NCe),e(NCe,J$r),e(Q3,Y$r),e(Q3,fK),e(fK,K$r),e(Q3,Z$r),e(qr,ekr),M(W3,qr,null),b(m,kVe,_),b(m,Pc,_),e(Pc,H3),e(H3,qCe),M(Tx,qCe,null),e(Pc,okr),e(Pc,jCe),e(jCe,rkr),b(m,SVe,_),b(m,mr,_),M(Mx,mr,null),e(mr,tkr),e(mr,Bc),e(Bc,akr),e(Bc,gK),e(gK,nkr),e(Bc,skr),e(Bc,hK),e(hK,lkr),e(Bc,ikr),e(mr,dkr),e(mr,Ex),e(Ex,ckr),e(Ex,DCe),e(DCe,mkr),e(Ex,fkr),e(mr,gkr),e(mr,Gt),M(Cx,Gt,null),e(Gt,hkr),e(Gt,GCe),e(GCe,ukr),e(Gt,pkr),e(Gt,Ic),e(Ic,_kr),e(Ic,OCe),e(OCe,bkr),e(Ic,vkr),e(Ic,uK),e(uK,Fkr),e(Ic,Tkr),e(Gt,Mkr),M(U3,Gt,null),e(mr,Ekr),e(mr,jr),M(wx,jr,null),e(jr,Ckr),e(jr,VCe),e(VCe,wkr),e(jr,Akr),e(jr,_n),e(_n,Lkr),e(_n,XCe),e(XCe,ykr),e(_n,xkr),e(_n,zCe),e(zCe,$kr),e(_n,kkr),e(_n,QCe),e(QCe,Skr),e(_n,Rkr),e(jr,Pkr),e(jr,ce),e(ce,J3),e(J3,WCe),e(WCe,Bkr),e(J3,Ikr),e(J3,pK),e(pK,Nkr),e(J3,qkr),e(ce,jkr),e(ce,Y3),e(Y3,HCe),e(HCe,Dkr),e(Y3,Gkr),e(Y3,_K),e(_K,Okr),e(Y3,Vkr),e(ce,Xkr),e(ce,K3),e(K3,UCe),e(UCe,zkr),e(K3,Qkr),e(K3,bK),e(bK,Wkr),e(K3,Hkr),e(ce,Ukr),e(ce,Z3),e(Z3,JCe),e(JCe,Jkr),e(Z3,Ykr),e(Z3,vK),e(vK,Kkr),e(Z3,Zkr),e(ce,eSr),e(ce,e0),e(e0,YCe),e(YCe,oSr),e(e0,rSr),e(e0,FK),e(FK,tSr),e(e0,aSr),e(ce,nSr),e(ce,o0),e(o0,KCe),e(KCe,sSr),e(o0,lSr),e(o0,TK),e(TK,iSr),e(o0,dSr),e(ce,cSr),e(ce,r0),e(r0,ZCe),e(ZCe,mSr),e(r0,fSr),e(r0,MK),e(MK,gSr),e(r0,hSr),e(ce,uSr),e(ce,t0),e(t0,e5e),e(e5e,pSr),e(t0,_Sr),e(t0,EK),e(EK,bSr),e(t0,vSr),e(ce,FSr),e(ce,a0),e(a0,o5e),e(o5e,TSr),e(a0,MSr),e(a0,CK),e(CK,ESr),e(a0,CSr),e(ce,wSr),e(ce,n0),e(n0,r5e),e(r5e,ASr),e(n0,LSr),e(n0,wK),e(wK,ySr),e(n0,xSr),e(ce,$Sr),e(ce,s0),e(s0,t5e),e(t5e,kSr),e(s0,SSr),e(s0,AK),e(AK,RSr),e(s0,PSr),e(ce,BSr),e(ce,l0),e(l0,a5e),e(a5e,ISr),e(l0,NSr),e(l0,LK),e(LK,qSr),e(l0,jSr),e(ce,DSr),e(ce,i0),e(i0,n5e),e(n5e,GSr),e(i0,OSr),e(i0,yK),e(yK,VSr),e(i0,XSr),e(ce,zSr),e(ce,d0),e(d0,s5e),e(s5e,QSr),e(d0,WSr),e(d0,xK),e(xK,HSr),e(d0,USr),e(ce,JSr),e(ce,c0),e(c0,l5e),e(l5e,YSr),e(c0,KSr),e(c0,$K),e($K,ZSr),e(c0,eRr),e(ce,oRr),e(ce,m0),e(m0,i5e),e(i5e,rRr),e(m0,tRr),e(m0,kK),e(kK,aRr),e(m0,nRr),e(ce,sRr),e(ce,f0),e(f0,d5e),e(d5e,lRr),e(f0,iRr),e(f0,SK),e(SK,dRr),e(f0,cRr),e(ce,mRr),e(ce,g0),e(g0,c5e),e(c5e,fRr),e(g0,gRr),e(g0,RK),e(RK,hRr),e(g0,uRr),e(ce,pRr),e(ce,h0),e(h0,m5e),e(m5e,_Rr),e(h0,bRr),e(h0,PK),e(PK,vRr),e(h0,FRr),e(ce,TRr),e(ce,u0),e(u0,f5e),e(f5e,MRr),e(u0,ERr),e(u0,BK),e(BK,CRr),e(u0,wRr),e(jr,ARr),M(p0,jr,null),b(m,RVe,_),b(m,Nc,_),e(Nc,_0),e(_0,g5e),M(Ax,g5e,null),e(Nc,LRr),e(Nc,h5e),e(h5e,yRr),b(m,PVe,_),b(m,fr,_),M(Lx,fr,null),e(fr,xRr),e(fr,qc),e(qc,$Rr),e(qc,IK),e(IK,kRr),e(qc,SRr),e(qc,NK),e(NK,RRr),e(qc,PRr),e(fr,BRr),e(fr,yx),e(yx,IRr),e(yx,u5e),e(u5e,NRr),e(yx,qRr),e(fr,jRr),e(fr,Ot),M(xx,Ot,null),e(Ot,DRr),e(Ot,p5e),e(p5e,GRr),e(Ot,ORr),e(Ot,jc),e(jc,VRr),e(jc,_5e),e(_5e,XRr),e(jc,zRr),e(jc,qK),e(qK,QRr),e(jc,WRr),e(Ot,HRr),M(b0,Ot,null),e(fr,URr),e(fr,Dr),M($x,Dr,null),e(Dr,JRr),e(Dr,b5e),e(b5e,YRr),e(Dr,KRr),e(Dr,bn),e(bn,ZRr),e(bn,v5e),e(v5e,ePr),e(bn,oPr),e(bn,F5e),e(F5e,rPr),e(bn,tPr),e(bn,T5e),e(T5e,aPr),e(bn,nPr),e(Dr,sPr),e(Dr,M5e),e(M5e,v0),e(v0,E5e),e(E5e,lPr),e(v0,iPr),e(v0,jK),e(jK,dPr),e(v0,cPr),e(Dr,mPr),M(F0,Dr,null),b(m,BVe,_),b(m,Dc,_),e(Dc,T0),e(T0,C5e),M(kx,C5e,null),e(Dc,fPr),e(Dc,w5e),e(w5e,gPr),b(m,IVe,_),b(m,gr,_),M(Sx,gr,null),e(gr,hPr),e(gr,Gc),e(Gc,uPr),e(Gc,DK),e(DK,pPr),e(Gc,_Pr),e(Gc,GK),e(GK,bPr),e(Gc,vPr),e(gr,FPr),e(gr,Rx),e(Rx,TPr),e(Rx,A5e),e(A5e,MPr),e(Rx,EPr),e(gr,CPr),e(gr,Vt),M(Px,Vt,null),e(Vt,wPr),e(Vt,L5e),e(L5e,APr),e(Vt,LPr),e(Vt,Oc),e(Oc,yPr),e(Oc,y5e),e(y5e,xPr),e(Oc,$Pr),e(Oc,OK),e(OK,kPr),e(Oc,SPr),e(Vt,RPr),M(M0,Vt,null),e(gr,PPr),e(gr,Gr),M(Bx,Gr,null),e(Gr,BPr),e(Gr,x5e),e(x5e,IPr),e(Gr,NPr),e(Gr,vn),e(vn,qPr),e(vn,$5e),e($5e,jPr),e(vn,DPr),e(vn,k5e),e(k5e,GPr),e(vn,OPr),e(vn,S5e),e(S5e,VPr),e(vn,XPr),e(Gr,zPr),e(Gr,R5e),e(R5e,E0),e(E0,P5e),e(P5e,QPr),e(E0,WPr),e(E0,VK),e(VK,HPr),e(E0,UPr),e(Gr,JPr),M(C0,Gr,null),b(m,NVe,_),b(m,Vc,_),e(Vc,w0),e(w0,B5e),M(Ix,B5e,null),e(Vc,YPr),e(Vc,I5e),e(I5e,KPr),b(m,qVe,_),b(m,hr,_),M(Nx,hr,null),e(hr,ZPr),e(hr,Xc),e(Xc,eBr),e(Xc,XK),e(XK,oBr),e(Xc,rBr),e(Xc,zK),e(zK,tBr),e(Xc,aBr),e(hr,nBr),e(hr,qx),e(qx,sBr),e(qx,N5e),e(N5e,lBr),e(qx,iBr),e(hr,dBr),e(hr,Xt),M(jx,Xt,null),e(Xt,cBr),e(Xt,q5e),e(q5e,mBr),e(Xt,fBr),e(Xt,zc),e(zc,gBr),e(zc,j5e),e(j5e,hBr),e(zc,uBr),e(zc,QK),e(QK,pBr),e(zc,_Br),e(Xt,bBr),M(A0,Xt,null),e(hr,vBr),e(hr,Or),M(Dx,Or,null),e(Or,FBr),e(Or,D5e),e(D5e,TBr),e(Or,MBr),e(Or,Fn),e(Fn,EBr),e(Fn,G5e),e(G5e,CBr),e(Fn,wBr),e(Fn,O5e),e(O5e,ABr),e(Fn,LBr),e(Fn,V5e),e(V5e,yBr),e(Fn,xBr),e(Or,$Br),e(Or,oe),e(oe,L0),e(L0,X5e),e(X5e,kBr),e(L0,SBr),e(L0,WK),e(WK,RBr),e(L0,PBr),e(oe,BBr),e(oe,y0),e(y0,z5e),e(z5e,IBr),e(y0,NBr),e(y0,HK),e(HK,qBr),e(y0,jBr),e(oe,DBr),e(oe,x0),e(x0,Q5e),e(Q5e,GBr),e(x0,OBr),e(x0,UK),e(UK,VBr),e(x0,XBr),e(oe,zBr),e(oe,$0),e($0,W5e),e(W5e,QBr),e($0,WBr),e($0,JK),e(JK,HBr),e($0,UBr),e(oe,JBr),e(oe,k0),e(k0,H5e),e(H5e,YBr),e(k0,KBr),e(k0,YK),e(YK,ZBr),e(k0,eIr),e(oe,oIr),e(oe,S0),e(S0,U5e),e(U5e,rIr),e(S0,tIr),e(S0,KK),e(KK,aIr),e(S0,nIr),e(oe,sIr),e(oe,R0),e(R0,J5e),e(J5e,lIr),e(R0,iIr),e(R0,ZK),e(ZK,dIr),e(R0,cIr),e(oe,mIr),e(oe,P0),e(P0,Y5e),e(Y5e,fIr),e(P0,gIr),e(P0,eZ),e(eZ,hIr),e(P0,uIr),e(oe,pIr),e(oe,B0),e(B0,K5e),e(K5e,_Ir),e(B0,bIr),e(B0,oZ),e(oZ,vIr),e(B0,FIr),e(oe,TIr),e(oe,I0),e(I0,Z5e),e(Z5e,MIr),e(I0,EIr),e(I0,rZ),e(rZ,CIr),e(I0,wIr),e(oe,AIr),e(oe,N0),e(N0,e3e),e(e3e,LIr),e(N0,yIr),e(N0,tZ),e(tZ,xIr),e(N0,$Ir),e(oe,kIr),e(oe,q0),e(q0,o3e),e(o3e,SIr),e(q0,RIr),e(q0,aZ),e(aZ,PIr),e(q0,BIr),e(oe,IIr),e(oe,j0),e(j0,r3e),e(r3e,NIr),e(j0,qIr),e(j0,nZ),e(nZ,jIr),e(j0,DIr),e(oe,GIr),e(oe,D0),e(D0,t3e),e(t3e,OIr),e(D0,VIr),e(D0,sZ),e(sZ,XIr),e(D0,zIr),e(oe,QIr),e(oe,G0),e(G0,a3e),e(a3e,WIr),e(G0,HIr),e(G0,lZ),e(lZ,UIr),e(G0,JIr),e(oe,YIr),e(oe,O0),e(O0,n3e),e(n3e,KIr),e(O0,ZIr),e(O0,iZ),e(iZ,eNr),e(O0,oNr),e(oe,rNr),e(oe,V0),e(V0,s3e),e(s3e,tNr),e(V0,aNr),e(V0,dZ),e(dZ,nNr),e(V0,sNr),e(oe,lNr),e(oe,X0),e(X0,l3e),e(l3e,iNr),e(X0,dNr),e(X0,cZ),e(cZ,cNr),e(X0,mNr),e(oe,fNr),e(oe,z0),e(z0,i3e),e(i3e,gNr),e(z0,hNr),e(z0,mZ),e(mZ,uNr),e(z0,pNr),e(oe,_Nr),e(oe,Q0),e(Q0,d3e),e(d3e,bNr),e(Q0,vNr),e(Q0,fZ),e(fZ,FNr),e(Q0,TNr),e(oe,MNr),e(oe,W0),e(W0,c3e),e(c3e,ENr),e(W0,CNr),e(W0,gZ),e(gZ,wNr),e(W0,ANr),e(oe,LNr),e(oe,H0),e(H0,m3e),e(m3e,yNr),e(H0,xNr),e(H0,hZ),e(hZ,$Nr),e(H0,kNr),e(oe,SNr),e(oe,U0),e(U0,f3e),e(f3e,RNr),e(U0,PNr),e(U0,uZ),e(uZ,BNr),e(U0,INr),e(oe,NNr),e(oe,J0),e(J0,g3e),e(g3e,qNr),e(J0,jNr),e(J0,pZ),e(pZ,DNr),e(J0,GNr),e(oe,ONr),e(oe,Y0),e(Y0,h3e),e(h3e,VNr),e(Y0,XNr),e(Y0,_Z),e(_Z,zNr),e(Y0,QNr),e(oe,WNr),e(oe,K0),e(K0,u3e),e(u3e,HNr),e(K0,UNr),e(K0,bZ),e(bZ,JNr),e(K0,YNr),e(oe,KNr),e(oe,Z0),e(Z0,p3e),e(p3e,ZNr),e(Z0,eqr),e(Z0,vZ),e(vZ,oqr),e(Z0,rqr),e(Or,tqr),M(ew,Or,null),b(m,jVe,_),b(m,Qc,_),e(Qc,ow),e(ow,_3e),M(Gx,_3e,null),e(Qc,aqr),e(Qc,b3e),e(b3e,nqr),b(m,DVe,_),b(m,ur,_),M(Ox,ur,null),e(ur,sqr),e(ur,Wc),e(Wc,lqr),e(Wc,FZ),e(FZ,iqr),e(Wc,dqr),e(Wc,TZ),e(TZ,cqr),e(Wc,mqr),e(ur,fqr),e(ur,Vx),e(Vx,gqr),e(Vx,v3e),e(v3e,hqr),e(Vx,uqr),e(ur,pqr),e(ur,zt),M(Xx,zt,null),e(zt,_qr),e(zt,F3e),e(F3e,bqr),e(zt,vqr),e(zt,Hc),e(Hc,Fqr),e(Hc,T3e),e(T3e,Tqr),e(Hc,Mqr),e(Hc,MZ),e(MZ,Eqr),e(Hc,Cqr),e(zt,wqr),M(rw,zt,null),e(ur,Aqr),e(ur,Vr),M(zx,Vr,null),e(Vr,Lqr),e(Vr,M3e),e(M3e,yqr),e(Vr,xqr),e(Vr,Tn),e(Tn,$qr),e(Tn,E3e),e(E3e,kqr),e(Tn,Sqr),e(Tn,C3e),e(C3e,Rqr),e(Tn,Pqr),e(Tn,w3e),e(w3e,Bqr),e(Tn,Iqr),e(Vr,Nqr),e(Vr,xe),e(xe,tw),e(tw,A3e),e(A3e,qqr),e(tw,jqr),e(tw,EZ),e(EZ,Dqr),e(tw,Gqr),e(xe,Oqr),e(xe,aw),e(aw,L3e),e(L3e,Vqr),e(aw,Xqr),e(aw,CZ),e(CZ,zqr),e(aw,Qqr),e(xe,Wqr),e(xe,nw),e(nw,y3e),e(y3e,Hqr),e(nw,Uqr),e(nw,wZ),e(wZ,Jqr),e(nw,Yqr),e(xe,Kqr),e(xe,sw),e(sw,x3e),e(x3e,Zqr),e(sw,ejr),e(sw,AZ),e(AZ,ojr),e(sw,rjr),e(xe,tjr),e(xe,lw),e(lw,$3e),e($3e,ajr),e(lw,njr),e(lw,LZ),e(LZ,sjr),e(lw,ljr),e(xe,ijr),e(xe,iw),e(iw,k3e),e(k3e,djr),e(iw,cjr),e(iw,yZ),e(yZ,mjr),e(iw,fjr),e(xe,gjr),e(xe,dw),e(dw,S3e),e(S3e,hjr),e(dw,ujr),e(dw,xZ),e(xZ,pjr),e(dw,_jr),e(xe,bjr),e(xe,cw),e(cw,R3e),e(R3e,vjr),e(cw,Fjr),e(cw,$Z),e($Z,Tjr),e(cw,Mjr),e(xe,Ejr),e(xe,mw),e(mw,P3e),e(P3e,Cjr),e(mw,wjr),e(mw,kZ),e(kZ,Ajr),e(mw,Ljr),e(xe,yjr),e(xe,fw),e(fw,B3e),e(B3e,xjr),e(fw,$jr),e(fw,SZ),e(SZ,kjr),e(fw,Sjr),e(Vr,Rjr),M(gw,Vr,null),b(m,GVe,_),b(m,Uc,_),e(Uc,hw),e(hw,I3e),M(Qx,I3e,null),e(Uc,Pjr),e(Uc,N3e),e(N3e,Bjr),b(m,OVe,_),b(m,pr,_),M(Wx,pr,null),e(pr,Ijr),e(pr,Jc),e(Jc,Njr),e(Jc,RZ),e(RZ,qjr),e(Jc,jjr),e(Jc,PZ),e(PZ,Djr),e(Jc,Gjr),e(pr,Ojr),e(pr,Hx),e(Hx,Vjr),e(Hx,q3e),e(q3e,Xjr),e(Hx,zjr),e(pr,Qjr),e(pr,Qt),M(Ux,Qt,null),e(Qt,Wjr),e(Qt,j3e),e(j3e,Hjr),e(Qt,Ujr),e(Qt,Yc),e(Yc,Jjr),e(Yc,D3e),e(D3e,Yjr),e(Yc,Kjr),e(Yc,BZ),e(BZ,Zjr),e(Yc,eDr),e(Qt,oDr),M(uw,Qt,null),e(pr,rDr),e(pr,Xr),M(Jx,Xr,null),e(Xr,tDr),e(Xr,G3e),e(G3e,aDr),e(Xr,nDr),e(Xr,Mn),e(Mn,sDr),e(Mn,O3e),e(O3e,lDr),e(Mn,iDr),e(Mn,V3e),e(V3e,dDr),e(Mn,cDr),e(Mn,X3e),e(X3e,mDr),e(Mn,fDr),e(Xr,gDr),e(Xr,Ee),e(Ee,pw),e(pw,z3e),e(z3e,hDr),e(pw,uDr),e(pw,IZ),e(IZ,pDr),e(pw,_Dr),e(Ee,bDr),e(Ee,_w),e(_w,Q3e),e(Q3e,vDr),e(_w,FDr),e(_w,NZ),e(NZ,TDr),e(_w,MDr),e(Ee,EDr),e(Ee,bw),e(bw,W3e),e(W3e,CDr),e(bw,wDr),e(bw,qZ),e(qZ,ADr),e(bw,LDr),e(Ee,yDr),e(Ee,vw),e(vw,H3e),e(H3e,xDr),e(vw,$Dr),e(vw,jZ),e(jZ,kDr),e(vw,SDr),e(Ee,RDr),e(Ee,Fw),e(Fw,U3e),e(U3e,PDr),e(Fw,BDr),e(Fw,DZ),e(DZ,IDr),e(Fw,NDr),e(Ee,qDr),e(Ee,Tw),e(Tw,J3e),e(J3e,jDr),e(Tw,DDr),e(Tw,GZ),e(GZ,GDr),e(Tw,ODr),e(Ee,VDr),e(Ee,Mw),e(Mw,Y3e),e(Y3e,XDr),e(Mw,zDr),e(Mw,OZ),e(OZ,QDr),e(Mw,WDr),e(Ee,HDr),e(Ee,Ew),e(Ew,K3e),e(K3e,UDr),e(Ew,JDr),e(Ew,VZ),e(VZ,YDr),e(Ew,KDr),e(Ee,ZDr),e(Ee,Cw),e(Cw,Z3e),e(Z3e,eGr),e(Cw,oGr),e(Cw,XZ),e(XZ,rGr),e(Cw,tGr),e(Ee,aGr),e(Ee,ww),e(ww,e0e),e(e0e,nGr),e(ww,sGr),e(ww,zZ),e(zZ,lGr),e(ww,iGr),e(Ee,dGr),e(Ee,Aw),e(Aw,o0e),e(o0e,cGr),e(Aw,mGr),e(Aw,QZ),e(QZ,fGr),e(Aw,gGr),e(Ee,hGr),e(Ee,Lw),e(Lw,r0e),e(r0e,uGr),e(Lw,pGr),e(Lw,WZ),e(WZ,_Gr),e(Lw,bGr),e(Ee,vGr),e(Ee,yw),e(yw,t0e),e(t0e,FGr),e(yw,TGr),e(yw,HZ),e(HZ,MGr),e(yw,EGr),e(Xr,CGr),M(xw,Xr,null),b(m,VVe,_),b(m,Kc,_),e(Kc,$w),e($w,a0e),M(Yx,a0e,null),e(Kc,wGr),e(Kc,n0e),e(n0e,AGr),b(m,XVe,_),b(m,_r,_),M(Kx,_r,null),e(_r,LGr),e(_r,Zc),e(Zc,yGr),e(Zc,UZ),e(UZ,xGr),e(Zc,$Gr),e(Zc,JZ),e(JZ,kGr),e(Zc,SGr),e(_r,RGr),e(_r,Zx),e(Zx,PGr),e(Zx,s0e),e(s0e,BGr),e(Zx,IGr),e(_r,NGr),e(_r,Wt),M(e$,Wt,null),e(Wt,qGr),e(Wt,l0e),e(l0e,jGr),e(Wt,DGr),e(Wt,em),e(em,GGr),e(em,i0e),e(i0e,OGr),e(em,VGr),e(em,YZ),e(YZ,XGr),e(em,zGr),e(Wt,QGr),M(kw,Wt,null),e(_r,WGr),e(_r,zr),M(o$,zr,null),e(zr,HGr),e(zr,d0e),e(d0e,UGr),e(zr,JGr),e(zr,En),e(En,YGr),e(En,c0e),e(c0e,KGr),e(En,ZGr),e(En,m0e),e(m0e,eOr),e(En,oOr),e(En,f0e),e(f0e,rOr),e(En,tOr),e(zr,aOr),e(zr,$e),e($e,Sw),e(Sw,g0e),e(g0e,nOr),e(Sw,sOr),e(Sw,KZ),e(KZ,lOr),e(Sw,iOr),e($e,dOr),e($e,Rw),e(Rw,h0e),e(h0e,cOr),e(Rw,mOr),e(Rw,ZZ),e(ZZ,fOr),e(Rw,gOr),e($e,hOr),e($e,Pw),e(Pw,u0e),e(u0e,uOr),e(Pw,pOr),e(Pw,eee),e(eee,_Or),e(Pw,bOr),e($e,vOr),e($e,Bw),e(Bw,p0e),e(p0e,FOr),e(Bw,TOr),e(Bw,oee),e(oee,MOr),e(Bw,EOr),e($e,COr),e($e,Iw),e(Iw,_0e),e(_0e,wOr),e(Iw,AOr),e(Iw,ree),e(ree,LOr),e(Iw,yOr),e($e,xOr),e($e,Nw),e(Nw,b0e),e(b0e,$Or),e(Nw,kOr),e(Nw,tee),e(tee,SOr),e(Nw,ROr),e($e,POr),e($e,qw),e(qw,v0e),e(v0e,BOr),e(qw,IOr),e(qw,aee),e(aee,NOr),e(qw,qOr),e($e,jOr),e($e,jw),e(jw,F0e),e(F0e,DOr),e(jw,GOr),e(jw,nee),e(nee,OOr),e(jw,VOr),e($e,XOr),e($e,Dw),e(Dw,T0e),e(T0e,zOr),e(Dw,QOr),e(Dw,see),e(see,WOr),e(Dw,HOr),e($e,UOr),e($e,Gw),e(Gw,M0e),e(M0e,JOr),e(Gw,YOr),e(Gw,lee),e(lee,KOr),e(Gw,ZOr),e(zr,eVr),M(Ow,zr,null),b(m,zVe,_),b(m,om,_),e(om,Vw),e(Vw,E0e),M(r$,E0e,null),e(om,oVr),e(om,C0e),e(C0e,rVr),b(m,QVe,_),b(m,br,_),M(t$,br,null),e(br,tVr),e(br,rm),e(rm,aVr),e(rm,iee),e(iee,nVr),e(rm,sVr),e(rm,dee),e(dee,lVr),e(rm,iVr),e(br,dVr),e(br,a$),e(a$,cVr),e(a$,w0e),e(w0e,mVr),e(a$,fVr),e(br,gVr),e(br,Ht),M(n$,Ht,null),e(Ht,hVr),e(Ht,A0e),e(A0e,uVr),e(Ht,pVr),e(Ht,tm),e(tm,_Vr),e(tm,L0e),e(L0e,bVr),e(tm,vVr),e(tm,cee),e(cee,FVr),e(tm,TVr),e(Ht,MVr),M(Xw,Ht,null),e(br,EVr),e(br,Qr),M(s$,Qr,null),e(Qr,CVr),e(Qr,y0e),e(y0e,wVr),e(Qr,AVr),e(Qr,Cn),e(Cn,LVr),e(Cn,x0e),e(x0e,yVr),e(Cn,xVr),e(Cn,$0e),e($0e,$Vr),e(Cn,kVr),e(Cn,k0e),e(k0e,SVr),e(Cn,RVr),e(Qr,PVr),e(Qr,ke),e(ke,zw),e(zw,S0e),e(S0e,BVr),e(zw,IVr),e(zw,mee),e(mee,NVr),e(zw,qVr),e(ke,jVr),e(ke,Qw),e(Qw,R0e),e(R0e,DVr),e(Qw,GVr),e(Qw,fee),e(fee,OVr),e(Qw,VVr),e(ke,XVr),e(ke,Ww),e(Ww,P0e),e(P0e,zVr),e(Ww,QVr),e(Ww,gee),e(gee,WVr),e(Ww,HVr),e(ke,UVr),e(ke,Hw),e(Hw,B0e),e(B0e,JVr),e(Hw,YVr),e(Hw,hee),e(hee,KVr),e(Hw,ZVr),e(ke,eXr),e(ke,Uw),e(Uw,I0e),e(I0e,oXr),e(Uw,rXr),e(Uw,uee),e(uee,tXr),e(Uw,aXr),e(ke,nXr),e(ke,Jw),e(Jw,N0e),e(N0e,sXr),e(Jw,lXr),e(Jw,pee),e(pee,iXr),e(Jw,dXr),e(ke,cXr),e(ke,Yw),e(Yw,q0e),e(q0e,mXr),e(Yw,fXr),e(Yw,_ee),e(_ee,gXr),e(Yw,hXr),e(ke,uXr),e(ke,Kw),e(Kw,j0e),e(j0e,pXr),e(Kw,_Xr),e(Kw,bee),e(bee,bXr),e(Kw,vXr),e(ke,FXr),e(ke,Zw),e(Zw,D0e),e(D0e,TXr),e(Zw,MXr),e(Zw,vee),e(vee,EXr),e(Zw,CXr),e(ke,wXr),e(ke,eA),e(eA,G0e),e(G0e,AXr),e(eA,LXr),e(eA,Fee),e(Fee,yXr),e(eA,xXr),e(Qr,$Xr),M(oA,Qr,null),b(m,WVe,_),b(m,am,_),e(am,rA),e(rA,O0e),M(l$,O0e,null),e(am,kXr),e(am,V0e),e(V0e,SXr),b(m,HVe,_),b(m,vr,_),M(i$,vr,null),e(vr,RXr),e(vr,nm),e(nm,PXr),e(nm,Tee),e(Tee,BXr),e(nm,IXr),e(nm,Mee),e(Mee,NXr),e(nm,qXr),e(vr,jXr),e(vr,d$),e(d$,DXr),e(d$,X0e),e(X0e,GXr),e(d$,OXr),e(vr,VXr),e(vr,Ut),M(c$,Ut,null),e(Ut,XXr),e(Ut,z0e),e(z0e,zXr),e(Ut,QXr),e(Ut,sm),e(sm,WXr),e(sm,Q0e),e(Q0e,HXr),e(sm,UXr),e(sm,Eee),e(Eee,JXr),e(sm,YXr),e(Ut,KXr),M(tA,Ut,null),e(vr,ZXr),e(vr,Wr),M(m$,Wr,null),e(Wr,ezr),e(Wr,W0e),e(W0e,ozr),e(Wr,rzr),e(Wr,wn),e(wn,tzr),e(wn,H0e),e(H0e,azr),e(wn,nzr),e(wn,U0e),e(U0e,szr),e(wn,lzr),e(wn,J0e),e(J0e,izr),e(wn,dzr),e(Wr,czr),e(Wr,Se),e(Se,aA),e(aA,Y0e),e(Y0e,mzr),e(aA,fzr),e(aA,Cee),e(Cee,gzr),e(aA,hzr),e(Se,uzr),e(Se,nA),e(nA,K0e),e(K0e,pzr),e(nA,_zr),e(nA,wee),e(wee,bzr),e(nA,vzr),e(Se,Fzr),e(Se,sA),e(sA,Z0e),e(Z0e,Tzr),e(sA,Mzr),e(sA,Aee),e(Aee,Ezr),e(sA,Czr),e(Se,wzr),e(Se,lA),e(lA,ewe),e(ewe,Azr),e(lA,Lzr),e(lA,Lee),e(Lee,yzr),e(lA,xzr),e(Se,$zr),e(Se,iA),e(iA,owe),e(owe,kzr),e(iA,Szr),e(iA,yee),e(yee,Rzr),e(iA,Pzr),e(Se,Bzr),e(Se,dA),e(dA,rwe),e(rwe,Izr),e(dA,Nzr),e(dA,xee),e(xee,qzr),e(dA,jzr),e(Se,Dzr),e(Se,cA),e(cA,twe),e(twe,Gzr),e(cA,Ozr),e(cA,$ee),e($ee,Vzr),e(cA,Xzr),e(Se,zzr),e(Se,mA),e(mA,awe),e(awe,Qzr),e(mA,Wzr),e(mA,kee),e(kee,Hzr),e(mA,Uzr),e(Se,Jzr),e(Se,fA),e(fA,nwe),e(nwe,Yzr),e(fA,Kzr),e(fA,See),e(See,Zzr),e(fA,eQr),e(Se,oQr),e(Se,gA),e(gA,swe),e(swe,rQr),e(gA,tQr),e(gA,Ree),e(Ree,aQr),e(gA,nQr),e(Wr,sQr),M(hA,Wr,null),b(m,UVe,_),b(m,lm,_),e(lm,uA),e(uA,lwe),M(f$,lwe,null),e(lm,lQr),e(lm,iwe),e(iwe,iQr),b(m,JVe,_),b(m,Fr,_),M(g$,Fr,null),e(Fr,dQr),e(Fr,im),e(im,cQr),e(im,Pee),e(Pee,mQr),e(im,fQr),e(im,Bee),e(Bee,gQr),e(im,hQr),e(Fr,uQr),e(Fr,h$),e(h$,pQr),e(h$,dwe),e(dwe,_Qr),e(h$,bQr),e(Fr,vQr),e(Fr,Jt),M(u$,Jt,null),e(Jt,FQr),e(Jt,cwe),e(cwe,TQr),e(Jt,MQr),e(Jt,dm),e(dm,EQr),e(dm,mwe),e(mwe,CQr),e(dm,wQr),e(dm,Iee),e(Iee,AQr),e(dm,LQr),e(Jt,yQr),M(pA,Jt,null),e(Fr,xQr),e(Fr,Hr),M(p$,Hr,null),e(Hr,$Qr),e(Hr,fwe),e(fwe,kQr),e(Hr,SQr),e(Hr,An),e(An,RQr),e(An,gwe),e(gwe,PQr),e(An,BQr),e(An,hwe),e(hwe,IQr),e(An,NQr),e(An,uwe),e(uwe,qQr),e(An,jQr),e(Hr,DQr),e(Hr,Re),e(Re,_A),e(_A,pwe),e(pwe,GQr),e(_A,OQr),e(_A,Nee),e(Nee,VQr),e(_A,XQr),e(Re,zQr),e(Re,bA),e(bA,_we),e(_we,QQr),e(bA,WQr),e(bA,qee),e(qee,HQr),e(bA,UQr),e(Re,JQr),e(Re,vA),e(vA,bwe),e(bwe,YQr),e(vA,KQr),e(vA,jee),e(jee,ZQr),e(vA,eWr),e(Re,oWr),e(Re,FA),e(FA,vwe),e(vwe,rWr),e(FA,tWr),e(FA,Dee),e(Dee,aWr),e(FA,nWr),e(Re,sWr),e(Re,TA),e(TA,Fwe),e(Fwe,lWr),e(TA,iWr),e(TA,Gee),e(Gee,dWr),e(TA,cWr),e(Re,mWr),e(Re,MA),e(MA,Twe),e(Twe,fWr),e(MA,gWr),e(MA,Oee),e(Oee,hWr),e(MA,uWr),e(Re,pWr),e(Re,EA),e(EA,Mwe),e(Mwe,_Wr),e(EA,bWr),e(EA,Vee),e(Vee,vWr),e(EA,FWr),e(Re,TWr),e(Re,CA),e(CA,Ewe),e(Ewe,MWr),e(CA,EWr),e(CA,Xee),e(Xee,CWr),e(CA,wWr),e(Re,AWr),e(Re,wA),e(wA,Cwe),e(Cwe,LWr),e(wA,yWr),e(wA,zee),e(zee,xWr),e(wA,$Wr),e(Re,kWr),e(Re,AA),e(AA,wwe),e(wwe,SWr),e(AA,RWr),e(AA,Qee),e(Qee,PWr),e(AA,BWr),e(Hr,IWr),M(LA,Hr,null),b(m,YVe,_),b(m,cm,_),e(cm,yA),e(yA,Awe),M(_$,Awe,null),e(cm,NWr),e(cm,Lwe),e(Lwe,qWr),b(m,KVe,_),b(m,Tr,_),M(b$,Tr,null),e(Tr,jWr),e(Tr,mm),e(mm,DWr),e(mm,Wee),e(Wee,GWr),e(mm,OWr),e(mm,Hee),e(Hee,VWr),e(mm,XWr),e(Tr,zWr),e(Tr,v$),e(v$,QWr),e(v$,ywe),e(ywe,WWr),e(v$,HWr),e(Tr,UWr),e(Tr,Yt),M(F$,Yt,null),e(Yt,JWr),e(Yt,xwe),e(xwe,YWr),e(Yt,KWr),e(Yt,fm),e(fm,ZWr),e(fm,$we),e($we,eHr),e(fm,oHr),e(fm,Uee),e(Uee,rHr),e(fm,tHr),e(Yt,aHr),M(xA,Yt,null),e(Tr,nHr),e(Tr,Ur),M(T$,Ur,null),e(Ur,sHr),e(Ur,kwe),e(kwe,lHr),e(Ur,iHr),e(Ur,Ln),e(Ln,dHr),e(Ln,Swe),e(Swe,cHr),e(Ln,mHr),e(Ln,Rwe),e(Rwe,fHr),e(Ln,gHr),e(Ln,Pwe),e(Pwe,hHr),e(Ln,uHr),e(Ur,pHr),e(Ur,Ve),e(Ve,$A),e($A,Bwe),e(Bwe,_Hr),e($A,bHr),e($A,Jee),e(Jee,vHr),e($A,FHr),e(Ve,THr),e(Ve,kA),e(kA,Iwe),e(Iwe,MHr),e(kA,EHr),e(kA,Yee),e(Yee,CHr),e(kA,wHr),e(Ve,AHr),e(Ve,SA),e(SA,Nwe),e(Nwe,LHr),e(SA,yHr),e(SA,Kee),e(Kee,xHr),e(SA,$Hr),e(Ve,kHr),e(Ve,RA),e(RA,qwe),e(qwe,SHr),e(RA,RHr),e(RA,Zee),e(Zee,PHr),e(RA,BHr),e(Ve,IHr),e(Ve,PA),e(PA,jwe),e(jwe,NHr),e(PA,qHr),e(PA,eoe),e(eoe,jHr),e(PA,DHr),e(Ve,GHr),e(Ve,BA),e(BA,Dwe),e(Dwe,OHr),e(BA,VHr),e(BA,ooe),e(ooe,XHr),e(BA,zHr),e(Ve,QHr),e(Ve,IA),e(IA,Gwe),e(Gwe,WHr),e(IA,HHr),e(IA,roe),e(roe,UHr),e(IA,JHr),e(Ve,YHr),e(Ve,NA),e(NA,Owe),e(Owe,KHr),e(NA,ZHr),e(NA,toe),e(toe,eUr),e(NA,oUr),e(Ur,rUr),M(qA,Ur,null),b(m,ZVe,_),b(m,gm,_),e(gm,jA),e(jA,Vwe),M(M$,Vwe,null),e(gm,tUr),e(gm,Xwe),e(Xwe,aUr),b(m,eXe,_),b(m,Mr,_),M(E$,Mr,null),e(Mr,nUr),e(Mr,hm),e(hm,sUr),e(hm,aoe),e(aoe,lUr),e(hm,iUr),e(hm,noe),e(noe,dUr),e(hm,cUr),e(Mr,mUr),e(Mr,C$),e(C$,fUr),e(C$,zwe),e(zwe,gUr),e(C$,hUr),e(Mr,uUr),e(Mr,Kt),M(w$,Kt,null),e(Kt,pUr),e(Kt,Qwe),e(Qwe,_Ur),e(Kt,bUr),e(Kt,um),e(um,vUr),e(um,Wwe),e(Wwe,FUr),e(um,TUr),e(um,soe),e(soe,MUr),e(um,EUr),e(Kt,CUr),M(DA,Kt,null),e(Mr,wUr),e(Mr,Jr),M(A$,Jr,null),e(Jr,AUr),e(Jr,Hwe),e(Hwe,LUr),e(Jr,yUr),e(Jr,yn),e(yn,xUr),e(yn,Uwe),e(Uwe,$Ur),e(yn,kUr),e(yn,Jwe),e(Jwe,SUr),e(yn,RUr),e(yn,Ywe),e(Ywe,PUr),e(yn,BUr),e(Jr,IUr),e(Jr,Xe),e(Xe,GA),e(GA,Kwe),e(Kwe,NUr),e(GA,qUr),e(GA,loe),e(loe,jUr),e(GA,DUr),e(Xe,GUr),e(Xe,OA),e(OA,Zwe),e(Zwe,OUr),e(OA,VUr),e(OA,ioe),e(ioe,XUr),e(OA,zUr),e(Xe,QUr),e(Xe,VA),e(VA,eAe),e(eAe,WUr),e(VA,HUr),e(VA,doe),e(doe,UUr),e(VA,JUr),e(Xe,YUr),e(Xe,XA),e(XA,oAe),e(oAe,KUr),e(XA,ZUr),e(XA,coe),e(coe,eJr),e(XA,oJr),e(Xe,rJr),e(Xe,zA),e(zA,rAe),e(rAe,tJr),e(zA,aJr),e(zA,moe),e(moe,nJr),e(zA,sJr),e(Xe,lJr),e(Xe,QA),e(QA,tAe),e(tAe,iJr),e(QA,dJr),e(QA,foe),e(foe,cJr),e(QA,mJr),e(Xe,fJr),e(Xe,WA),e(WA,aAe),e(aAe,gJr),e(WA,hJr),e(WA,goe),e(goe,uJr),e(WA,pJr),e(Xe,_Jr),e(Xe,HA),e(HA,nAe),e(nAe,bJr),e(HA,vJr),e(HA,hoe),e(hoe,FJr),e(HA,TJr),e(Jr,MJr),M(UA,Jr,null),b(m,oXe,_),b(m,pm,_),e(pm,JA),e(JA,sAe),M(L$,sAe,null),e(pm,EJr),e(pm,lAe),e(lAe,CJr),b(m,rXe,_),b(m,Er,_),M(y$,Er,null),e(Er,wJr),e(Er,_m),e(_m,AJr),e(_m,uoe),e(uoe,LJr),e(_m,yJr),e(_m,poe),e(poe,xJr),e(_m,$Jr),e(Er,kJr),e(Er,x$),e(x$,SJr),e(x$,iAe),e(iAe,RJr),e(x$,PJr),e(Er,BJr),e(Er,Zt),M($$,Zt,null),e(Zt,IJr),e(Zt,dAe),e(dAe,NJr),e(Zt,qJr),e(Zt,bm),e(bm,jJr),e(bm,cAe),e(cAe,DJr),e(bm,GJr),e(bm,_oe),e(_oe,OJr),e(bm,VJr),e(Zt,XJr),M(YA,Zt,null),e(Er,zJr),e(Er,Yr),M(k$,Yr,null),e(Yr,QJr),e(Yr,mAe),e(mAe,WJr),e(Yr,HJr),e(Yr,xn),e(xn,UJr),e(xn,fAe),e(fAe,JJr),e(xn,YJr),e(xn,gAe),e(gAe,KJr),e(xn,ZJr),e(xn,hAe),e(hAe,eYr),e(xn,oYr),e(Yr,rYr),e(Yr,uAe),e(uAe,KA),e(KA,pAe),e(pAe,tYr),e(KA,aYr),e(KA,boe),e(boe,nYr),e(KA,sYr),e(Yr,lYr),M(ZA,Yr,null),b(m,tXe,_),b(m,vm,_),e(vm,e6),e(e6,_Ae),M(S$,_Ae,null),e(vm,iYr),e(vm,bAe),e(bAe,dYr),b(m,aXe,_),b(m,Cr,_),M(R$,Cr,null),e(Cr,cYr),e(Cr,Fm),e(Fm,mYr),e(Fm,voe),e(voe,fYr),e(Fm,gYr),e(Fm,Foe),e(Foe,hYr),e(Fm,uYr),e(Cr,pYr),e(Cr,P$),e(P$,_Yr),e(P$,vAe),e(vAe,bYr),e(P$,vYr),e(Cr,FYr),e(Cr,ea),M(B$,ea,null),e(ea,TYr),e(ea,FAe),e(FAe,MYr),e(ea,EYr),e(ea,Tm),e(Tm,CYr),e(Tm,TAe),e(TAe,wYr),e(Tm,AYr),e(Tm,Toe),e(Toe,LYr),e(Tm,yYr),e(ea,xYr),M(o6,ea,null),e(Cr,$Yr),e(Cr,Kr),M(I$,Kr,null),e(Kr,kYr),e(Kr,MAe),e(MAe,SYr),e(Kr,RYr),e(Kr,$n),e($n,PYr),e($n,EAe),e(EAe,BYr),e($n,IYr),e($n,CAe),e(CAe,NYr),e($n,qYr),e($n,wAe),e(wAe,jYr),e($n,DYr),e(Kr,GYr),e(Kr,N$),e(N$,r6),e(r6,AAe),e(AAe,OYr),e(r6,VYr),e(r6,Moe),e(Moe,XYr),e(r6,zYr),e(N$,QYr),e(N$,t6),e(t6,LAe),e(LAe,WYr),e(t6,HYr),e(t6,Eoe),e(Eoe,UYr),e(t6,JYr),e(Kr,YYr),M(a6,Kr,null),b(m,nXe,_),b(m,Mm,_),e(Mm,n6),e(n6,yAe),M(q$,yAe,null),e(Mm,KYr),e(Mm,xAe),e(xAe,ZYr),b(m,sXe,_),b(m,wr,_),M(j$,wr,null),e(wr,eKr),e(wr,Em),e(Em,oKr),e(Em,Coe),e(Coe,rKr),e(Em,tKr),e(Em,woe),e(woe,aKr),e(Em,nKr),e(wr,sKr),e(wr,D$),e(D$,lKr),e(D$,$Ae),e($Ae,iKr),e(D$,dKr),e(wr,cKr),e(wr,oa),M(G$,oa,null),e(oa,mKr),e(oa,kAe),e(kAe,fKr),e(oa,gKr),e(oa,Cm),e(Cm,hKr),e(Cm,SAe),e(SAe,uKr),e(Cm,pKr),e(Cm,Aoe),e(Aoe,_Kr),e(Cm,bKr),e(oa,vKr),M(s6,oa,null),e(wr,FKr),e(wr,Zr),M(O$,Zr,null),e(Zr,TKr),e(Zr,RAe),e(RAe,MKr),e(Zr,EKr),e(Zr,kn),e(kn,CKr),e(kn,PAe),e(PAe,wKr),e(kn,AKr),e(kn,BAe),e(BAe,LKr),e(kn,yKr),e(kn,IAe),e(IAe,xKr),e(kn,$Kr),e(Zr,kKr),e(Zr,NAe),e(NAe,l6),e(l6,qAe),e(qAe,SKr),e(l6,RKr),e(l6,Loe),e(Loe,PKr),e(l6,BKr),e(Zr,IKr),M(i6,Zr,null),lXe=!0},p(m,[_]){const V$={};_&2&&(V$.$$scope={dirty:_,ctx:m}),Rm.$set(V$);const jAe={};_&2&&(jAe.$$scope={dirty:_,ctx:m}),Vg.$set(jAe);const DAe={};_&2&&(DAe.$$scope={dirty:_,ctx:m}),wh.$set(DAe);const GAe={};_&2&&(GAe.$$scope={dirty:_,ctx:m}),su.$set(GAe);const X$={};_&2&&(X$.$$scope={dirty:_,ctx:m}),lu.$set(X$);const OAe={};_&2&&(OAe.$$scope={dirty:_,ctx:m}),Lu.$set(OAe);const Sn={};_&2&&(Sn.$$scope={dirty:_,ctx:m}),yu.$set(Sn);const VAe={};_&2&&(VAe.$$scope={dirty:_,ctx:m}),ku.$set(VAe);const XAe={};_&2&&(XAe.$$scope={dirty:_,ctx:m}),S_.$set(XAe);const zAe={};_&2&&(zAe.$$scope={dirty:_,ctx:m}),P_.$set(zAe);const z$={};_&2&&(z$.$$scope={dirty:_,ctx:m}),A2.$set(z$);const QAe={};_&2&&(QAe.$$scope={dirty:_,ctx:m}),y2.$set(QAe);const Q$={};_&2&&(Q$.$$scope={dirty:_,ctx:m}),ub.$set(Q$);const WAe={};_&2&&(WAe.$$scope={dirty:_,ctx:m}),_b.$set(WAe);const W$={};_&2&&(W$.$$scope={dirty:_,ctx:m}),rv.$set(W$);const HAe={};_&2&&(HAe.$$scope={dirty:_,ctx:m}),av.$set(HAe);const UAe={};_&2&&(UAe.$$scope={dirty:_,ctx:m}),Ev.$set(UAe);const JAe={};_&2&&(JAe.$$scope={dirty:_,ctx:m}),wv.$set(JAe);const wm={};_&2&&(wm.$$scope={dirty:_,ctx:m}),MF.$set(wm);const YAe={};_&2&&(YAe.$$scope={dirty:_,ctx:m}),CF.$set(YAe);const KAe={};_&2&&(KAe.$$scope={dirty:_,ctx:m}),r1.$set(KAe);const ZAe={};_&2&&(ZAe.$$scope={dirty:_,ctx:m}),a1.$set(ZAe);const H$={};_&2&&(H$.$$scope={dirty:_,ctx:m}),f1.$set(H$);const e6e={};_&2&&(e6e.$$scope={dirty:_,ctx:m}),h1.$set(e6e);const o6e={};_&2&&(o6e.$$scope={dirty:_,ctx:m}),K1.$set(o6e);const r6e={};_&2&&(r6e.$$scope={dirty:_,ctx:m}),eT.$set(r6e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:m}),VT.$set(rt);const U$={};_&2&&(U$.$$scope={dirty:_,ctx:m}),zT.$set(U$);const t6e={};_&2&&(t6e.$$scope={dirty:_,ctx:m}),HT.$set(t6e);const J$={};_&2&&(J$.$$scope={dirty:_,ctx:m}),JT.$set(J$);const a6e={};_&2&&(a6e.$$scope={dirty:_,ctx:m}),cM.$set(a6e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:m}),fM.$set(tt);const n6e={};_&2&&(n6e.$$scope={dirty:_,ctx:m}),uM.$set(n6e);const Am={};_&2&&(Am.$$scope={dirty:_,ctx:m}),_M.$set(Am);const s6e={};_&2&&(s6e.$$scope={dirty:_,ctx:m}),FM.$set(s6e);const l6e={};_&2&&(l6e.$$scope={dirty:_,ctx:m}),MM.$set(l6e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),RM.$set(L);const d6={};_&2&&(d6.$$scope={dirty:_,ctx:m}),BM.$set(d6);const i6e={};_&2&&(i6e.$$scope={dirty:_,ctx:m}),OM.$set(i6e);const d6e={};_&2&&(d6e.$$scope={dirty:_,ctx:m}),XM.$set(d6e);const c6={};_&2&&(c6.$$scope={dirty:_,ctx:m}),rE.$set(c6);const c6e={};_&2&&(c6e.$$scope={dirty:_,ctx:m}),aE.$set(c6e);const m6e={};_&2&&(m6e.$$scope={dirty:_,ctx:m}),iE.$set(m6e);const m6={};_&2&&(m6.$$scope={dirty:_,ctx:m}),cE.$set(m6);const f6e={};_&2&&(f6e.$$scope={dirty:_,ctx:m}),_E.$set(f6e);const g6e={};_&2&&(g6e.$$scope={dirty:_,ctx:m}),vE.$set(g6e);const f6={};_&2&&(f6.$$scope={dirty:_,ctx:m}),CE.$set(f6);const h6e={};_&2&&(h6e.$$scope={dirty:_,ctx:m}),AE.$set(h6e);const u6e={};_&2&&(u6e.$$scope={dirty:_,ctx:m}),$E.$set(u6e);const g6={};_&2&&(g6.$$scope={dirty:_,ctx:m}),SE.$set(g6);const p6e={};_&2&&(p6e.$$scope={dirty:_,ctx:m}),BE.$set(p6e);const _6e={};_&2&&(_6e.$$scope={dirty:_,ctx:m}),NE.$set(_6e);const h6={};_&2&&(h6.$$scope={dirty:_,ctx:m}),VE.$set(h6);const b6e={};_&2&&(b6e.$$scope={dirty:_,ctx:m}),zE.$set(b6e);const v6e={};_&2&&(v6e.$$scope={dirty:_,ctx:m}),HE.$set(v6e);const u6={};_&2&&(u6.$$scope={dirty:_,ctx:m}),JE.$set(u6);const F6e={};_&2&&(F6e.$$scope={dirty:_,ctx:m}),V4.$set(F6e);const T6e={};_&2&&(T6e.$$scope={dirty:_,ctx:m}),z4.$set(T6e);const p6={};_&2&&(p6.$$scope={dirty:_,ctx:m}),uC.$set(p6);const M6e={};_&2&&(M6e.$$scope={dirty:_,ctx:m}),_C.$set(M6e);const E6e={};_&2&&(E6e.$$scope={dirty:_,ctx:m}),kC.$set(E6e);const _6={};_&2&&(_6.$$scope={dirty:_,ctx:m}),RC.$set(_6);const C6e={};_&2&&(C6e.$$scope={dirty:_,ctx:m}),qC.$set(C6e);const w6e={};_&2&&(w6e.$$scope={dirty:_,ctx:m}),DC.$set(w6e);const b6={};_&2&&(b6.$$scope={dirty:_,ctx:m}),l5.$set(b6);const A6e={};_&2&&(A6e.$$scope={dirty:_,ctx:m}),d5.$set(A6e);const L6e={};_&2&&(L6e.$$scope={dirty:_,ctx:m}),F5.$set(L6e);const v6={};_&2&&(v6.$$scope={dirty:_,ctx:m}),M5.$set(v6);const y6e={};_&2&&(y6e.$$scope={dirty:_,ctx:m}),U5.$set(y6e);const x6e={};_&2&&(x6e.$$scope={dirty:_,ctx:m}),Y5.$set(x6e);const F6={};_&2&&(F6.$$scope={dirty:_,ctx:m}),u3.$set(F6);const $6e={};_&2&&($6e.$$scope={dirty:_,ctx:m}),_3.$set($6e);const k6e={};_&2&&(k6e.$$scope={dirty:_,ctx:m}),F3.$set(k6e);const T6={};_&2&&(T6.$$scope={dirty:_,ctx:m}),M3.$set(T6);const S6e={};_&2&&(S6e.$$scope={dirty:_,ctx:m}),C3.$set(S6e);const R6e={};_&2&&(R6e.$$scope={dirty:_,ctx:m}),A3.$set(R6e);const M6={};_&2&&(M6.$$scope={dirty:_,ctx:m}),W3.$set(M6);const P6e={};_&2&&(P6e.$$scope={dirty:_,ctx:m}),U3.$set(P6e);const B6e={};_&2&&(B6e.$$scope={dirty:_,ctx:m}),p0.$set(B6e);const E6={};_&2&&(E6.$$scope={dirty:_,ctx:m}),b0.$set(E6);const I6e={};_&2&&(I6e.$$scope={dirty:_,ctx:m}),F0.$set(I6e);const N6e={};_&2&&(N6e.$$scope={dirty:_,ctx:m}),M0.$set(N6e);const C6={};_&2&&(C6.$$scope={dirty:_,ctx:m}),C0.$set(C6);const q6e={};_&2&&(q6e.$$scope={dirty:_,ctx:m}),A0.$set(q6e);const j6e={};_&2&&(j6e.$$scope={dirty:_,ctx:m}),ew.$set(j6e);const w6={};_&2&&(w6.$$scope={dirty:_,ctx:m}),rw.$set(w6);const D6e={};_&2&&(D6e.$$scope={dirty:_,ctx:m}),gw.$set(D6e);const G6e={};_&2&&(G6e.$$scope={dirty:_,ctx:m}),uw.$set(G6e);const A6={};_&2&&(A6.$$scope={dirty:_,ctx:m}),xw.$set(A6);const O6e={};_&2&&(O6e.$$scope={dirty:_,ctx:m}),kw.$set(O6e);const V6e={};_&2&&(V6e.$$scope={dirty:_,ctx:m}),Ow.$set(V6e);const L6={};_&2&&(L6.$$scope={dirty:_,ctx:m}),Xw.$set(L6);const X6e={};_&2&&(X6e.$$scope={dirty:_,ctx:m}),oA.$set(X6e);const z6e={};_&2&&(z6e.$$scope={dirty:_,ctx:m}),tA.$set(z6e);const y6={};_&2&&(y6.$$scope={dirty:_,ctx:m}),hA.$set(y6);const Q6e={};_&2&&(Q6e.$$scope={dirty:_,ctx:m}),pA.$set(Q6e);const W6e={};_&2&&(W6e.$$scope={dirty:_,ctx:m}),LA.$set(W6e);const x6={};_&2&&(x6.$$scope={dirty:_,ctx:m}),xA.$set(x6);const H6e={};_&2&&(H6e.$$scope={dirty:_,ctx:m}),qA.$set(H6e);const U6e={};_&2&&(U6e.$$scope={dirty:_,ctx:m}),DA.$set(U6e);const $6={};_&2&&($6.$$scope={dirty:_,ctx:m}),UA.$set($6);const J6e={};_&2&&(J6e.$$scope={dirty:_,ctx:m}),YA.$set(J6e);const Y6e={};_&2&&(Y6e.$$scope={dirty:_,ctx:m}),ZA.$set(Y6e);const k6={};_&2&&(k6.$$scope={dirty:_,ctx:m}),o6.$set(k6);const K6e={};_&2&&(K6e.$$scope={dirty:_,ctx:m}),a6.$set(K6e);const Z6e={};_&2&&(Z6e.$$scope={dirty:_,ctx:m}),s6.$set(Z6e);const S6={};_&2&&(S6.$$scope={dirty:_,ctx:m}),i6.$set(S6)},i(m){lXe||(E(d.$$.fragment,m),E(xa.$$.fragment,m),E(R7.$$.fragment,m),E(P7.$$.fragment,m),E(Rm.$$.fragment,m),E(B7.$$.fragment,m),E(I7.$$.fragment,m),E(j7.$$.fragment,m),E(Vg.$$.fragment,m),E(D7.$$.fragment,m),E(G7.$$.fragment,m),E(O7.$$.fragment,m),E(z7.$$.fragment,m),E(wh.$$.fragment,m),E(Q7.$$.fragment,m),E(W7.$$.fragment,m),E(H7.$$.fragment,m),E(Y7.$$.fragment,m),E(su.$$.fragment,m),E(lu.$$.fragment,m),E(K7.$$.fragment,m),E(Z7.$$.fragment,m),E(ey.$$.fragment,m),E(ty.$$.fragment,m),E(Lu.$$.fragment,m),E(yu.$$.fragment,m),E(ay.$$.fragment,m),E(ny.$$.fragment,m),E(sy.$$.fragment,m),E(iy.$$.fragment,m),E(ku.$$.fragment,m),E(dy.$$.fragment,m),E(S_.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(gy.$$.fragment,m),E(P_.$$.fragment,m),E(hy.$$.fragment,m),E(A2.$$.fragment,m),E(uy.$$.fragment,m),E(py.$$.fragment,m),E(by.$$.fragment,m),E(y2.$$.fragment,m),E(vy.$$.fragment,m),E(ub.$$.fragment,m),E(Fy.$$.fragment,m),E(Ty.$$.fragment,m),E(Ey.$$.fragment,m),E(_b.$$.fragment,m),E(Cy.$$.fragment,m),E(rv.$$.fragment,m),E(wy.$$.fragment,m),E(Ay.$$.fragment,m),E(yy.$$.fragment,m),E(av.$$.fragment,m),E(xy.$$.fragment,m),E(Ev.$$.fragment,m),E($y.$$.fragment,m),E(ky.$$.fragment,m),E(Ry.$$.fragment,m),E(wv.$$.fragment,m),E(Py.$$.fragment,m),E(MF.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(qy.$$.fragment,m),E(CF.$$.fragment,m),E(jy.$$.fragment,m),E(r1.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Vy.$$.fragment,m),E(a1.$$.fragment,m),E(Xy.$$.fragment,m),E(f1.$$.fragment,m),E(zy.$$.fragment,m),E(Qy.$$.fragment,m),E(Hy.$$.fragment,m),E(h1.$$.fragment,m),E(Uy.$$.fragment,m),E(K1.$$.fragment,m),E(Jy.$$.fragment,m),E(Yy.$$.fragment,m),E(Zy.$$.fragment,m),E(eT.$$.fragment,m),E(e8.$$.fragment,m),E(VT.$$.fragment,m),E(o8.$$.fragment,m),E(r8.$$.fragment,m),E(a8.$$.fragment,m),E(zT.$$.fragment,m),E(n8.$$.fragment,m),E(HT.$$.fragment,m),E(s8.$$.fragment,m),E(l8.$$.fragment,m),E(d8.$$.fragment,m),E(JT.$$.fragment,m),E(c8.$$.fragment,m),E(cM.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(h8.$$.fragment,m),E(fM.$$.fragment,m),E(u8.$$.fragment,m),E(uM.$$.fragment,m),E(p8.$$.fragment,m),E(_8.$$.fragment,m),E(v8.$$.fragment,m),E(_M.$$.fragment,m),E(F8.$$.fragment,m),E(FM.$$.fragment,m),E(T8.$$.fragment,m),E(M8.$$.fragment,m),E(C8.$$.fragment,m),E(MM.$$.fragment,m),E(w8.$$.fragment,m),E(RM.$$.fragment,m),E(A8.$$.fragment,m),E(L8.$$.fragment,m),E(x8.$$.fragment,m),E(BM.$$.fragment,m),E($8.$$.fragment,m),E(OM.$$.fragment,m),E(k8.$$.fragment,m),E(S8.$$.fragment,m),E(P8.$$.fragment,m),E(XM.$$.fragment,m),E(B8.$$.fragment,m),E(rE.$$.fragment,m),E(I8.$$.fragment,m),E(N8.$$.fragment,m),E(j8.$$.fragment,m),E(aE.$$.fragment,m),E(D8.$$.fragment,m),E(iE.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(z8.$$.fragment,m),E(cE.$$.fragment,m),E(Q8.$$.fragment,m),E(_E.$$.fragment,m),E(W8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(vE.$$.fragment,m),E(Y8.$$.fragment,m),E(CE.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(o9.$$.fragment,m),E(AE.$$.fragment,m),E(r9.$$.fragment,m),E($E.$$.fragment,m),E(a9.$$.fragment,m),E(n9.$$.fragment,m),E(l9.$$.fragment,m),E(SE.$$.fragment,m),E(i9.$$.fragment,m),E(BE.$$.fragment,m),E(d9.$$.fragment,m),E(c9.$$.fragment,m),E(f9.$$.fragment,m),E(NE.$$.fragment,m),E(g9.$$.fragment,m),E(VE.$$.fragment,m),E(h9.$$.fragment,m),E(u9.$$.fragment,m),E(_9.$$.fragment,m),E(zE.$$.fragment,m),E(b9.$$.fragment,m),E(HE.$$.fragment,m),E(v9.$$.fragment,m),E(F9.$$.fragment,m),E(M9.$$.fragment,m),E(JE.$$.fragment,m),E(E9.$$.fragment,m),E(V4.$$.fragment,m),E(C9.$$.fragment,m),E(w9.$$.fragment,m),E(L9.$$.fragment,m),E(z4.$$.fragment,m),E(y9.$$.fragment,m),E(uC.$$.fragment,m),E(x9.$$.fragment,m),E($9.$$.fragment,m),E(S9.$$.fragment,m),E(_C.$$.fragment,m),E(R9.$$.fragment,m),E(kC.$$.fragment,m),E(P9.$$.fragment,m),E(B9.$$.fragment,m),E(N9.$$.fragment,m),E(RC.$$.fragment,m),E(q9.$$.fragment,m),E(qC.$$.fragment,m),E(j9.$$.fragment,m),E(D9.$$.fragment,m),E(O9.$$.fragment,m),E(DC.$$.fragment,m),E(V9.$$.fragment,m),E(l5.$$.fragment,m),E(X9.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(d5.$$.fragment,m),E(H9.$$.fragment,m),E(F5.$$.fragment,m),E(U9.$$.fragment,m),E(J9.$$.fragment,m),E(K9.$$.fragment,m),E(M5.$$.fragment,m),E(Z9.$$.fragment,m),E(U5.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(tx.$$.fragment,m),E(Y5.$$.fragment,m),E(ax.$$.fragment,m),E(u3.$$.fragment,m),E(nx.$$.fragment,m),E(sx.$$.fragment,m),E(ix.$$.fragment,m),E(_3.$$.fragment,m),E(dx.$$.fragment,m),E(F3.$$.fragment,m),E(mx.$$.fragment,m),E(fx.$$.fragment,m),E(hx.$$.fragment,m),E(M3.$$.fragment,m),E(ux.$$.fragment,m),E(C3.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(vx.$$.fragment,m),E(A3.$$.fragment,m),E(Fx.$$.fragment,m),E(W3.$$.fragment,m),E(Tx.$$.fragment,m),E(Mx.$$.fragment,m),E(Cx.$$.fragment,m),E(U3.$$.fragment,m),E(wx.$$.fragment,m),E(p0.$$.fragment,m),E(Ax.$$.fragment,m),E(Lx.$$.fragment,m),E(xx.$$.fragment,m),E(b0.$$.fragment,m),E($x.$$.fragment,m),E(F0.$$.fragment,m),E(kx.$$.fragment,m),E(Sx.$$.fragment,m),E(Px.$$.fragment,m),E(M0.$$.fragment,m),E(Bx.$$.fragment,m),E(C0.$$.fragment,m),E(Ix.$$.fragment,m),E(Nx.$$.fragment,m),E(jx.$$.fragment,m),E(A0.$$.fragment,m),E(Dx.$$.fragment,m),E(ew.$$.fragment,m),E(Gx.$$.fragment,m),E(Ox.$$.fragment,m),E(Xx.$$.fragment,m),E(rw.$$.fragment,m),E(zx.$$.fragment,m),E(gw.$$.fragment,m),E(Qx.$$.fragment,m),E(Wx.$$.fragment,m),E(Ux.$$.fragment,m),E(uw.$$.fragment,m),E(Jx.$$.fragment,m),E(xw.$$.fragment,m),E(Yx.$$.fragment,m),E(Kx.$$.fragment,m),E(e$.$$.fragment,m),E(kw.$$.fragment,m),E(o$.$$.fragment,m),E(Ow.$$.fragment,m),E(r$.$$.fragment,m),E(t$.$$.fragment,m),E(n$.$$.fragment,m),E(Xw.$$.fragment,m),E(s$.$$.fragment,m),E(oA.$$.fragment,m),E(l$.$$.fragment,m),E(i$.$$.fragment,m),E(c$.$$.fragment,m),E(tA.$$.fragment,m),E(m$.$$.fragment,m),E(hA.$$.fragment,m),E(f$.$$.fragment,m),E(g$.$$.fragment,m),E(u$.$$.fragment,m),E(pA.$$.fragment,m),E(p$.$$.fragment,m),E(LA.$$.fragment,m),E(_$.$$.fragment,m),E(b$.$$.fragment,m),E(F$.$$.fragment,m),E(xA.$$.fragment,m),E(T$.$$.fragment,m),E(qA.$$.fragment,m),E(M$.$$.fragment,m),E(E$.$$.fragment,m),E(w$.$$.fragment,m),E(DA.$$.fragment,m),E(A$.$$.fragment,m),E(UA.$$.fragment,m),E(L$.$$.fragment,m),E(y$.$$.fragment,m),E($$.$$.fragment,m),E(YA.$$.fragment,m),E(k$.$$.fragment,m),E(ZA.$$.fragment,m),E(S$.$$.fragment,m),E(R$.$$.fragment,m),E(B$.$$.fragment,m),E(o6.$$.fragment,m),E(I$.$$.fragment,m),E(a6.$$.fragment,m),E(q$.$$.fragment,m),E(j$.$$.fragment,m),E(G$.$$.fragment,m),E(s6.$$.fragment,m),E(O$.$$.fragment,m),E(i6.$$.fragment,m),lXe=!0)},o(m){C(d.$$.fragment,m),C(xa.$$.fragment,m),C(R7.$$.fragment,m),C(P7.$$.fragment,m),C(Rm.$$.fragment,m),C(B7.$$.fragment,m),C(I7.$$.fragment,m),C(j7.$$.fragment,m),C(Vg.$$.fragment,m),C(D7.$$.fragment,m),C(G7.$$.fragment,m),C(O7.$$.fragment,m),C(z7.$$.fragment,m),C(wh.$$.fragment,m),C(Q7.$$.fragment,m),C(W7.$$.fragment,m),C(H7.$$.fragment,m),C(Y7.$$.fragment,m),C(su.$$.fragment,m),C(lu.$$.fragment,m),C(K7.$$.fragment,m),C(Z7.$$.fragment,m),C(ey.$$.fragment,m),C(ty.$$.fragment,m),C(Lu.$$.fragment,m),C(yu.$$.fragment,m),C(ay.$$.fragment,m),C(ny.$$.fragment,m),C(sy.$$.fragment,m),C(iy.$$.fragment,m),C(ku.$$.fragment,m),C(dy.$$.fragment,m),C(S_.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(gy.$$.fragment,m),C(P_.$$.fragment,m),C(hy.$$.fragment,m),C(A2.$$.fragment,m),C(uy.$$.fragment,m),C(py.$$.fragment,m),C(by.$$.fragment,m),C(y2.$$.fragment,m),C(vy.$$.fragment,m),C(ub.$$.fragment,m),C(Fy.$$.fragment,m),C(Ty.$$.fragment,m),C(Ey.$$.fragment,m),C(_b.$$.fragment,m),C(Cy.$$.fragment,m),C(rv.$$.fragment,m),C(wy.$$.fragment,m),C(Ay.$$.fragment,m),C(yy.$$.fragment,m),C(av.$$.fragment,m),C(xy.$$.fragment,m),C(Ev.$$.fragment,m),C($y.$$.fragment,m),C(ky.$$.fragment,m),C(Ry.$$.fragment,m),C(wv.$$.fragment,m),C(Py.$$.fragment,m),C(MF.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(qy.$$.fragment,m),C(CF.$$.fragment,m),C(jy.$$.fragment,m),C(r1.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Vy.$$.fragment,m),C(a1.$$.fragment,m),C(Xy.$$.fragment,m),C(f1.$$.fragment,m),C(zy.$$.fragment,m),C(Qy.$$.fragment,m),C(Hy.$$.fragment,m),C(h1.$$.fragment,m),C(Uy.$$.fragment,m),C(K1.$$.fragment,m),C(Jy.$$.fragment,m),C(Yy.$$.fragment,m),C(Zy.$$.fragment,m),C(eT.$$.fragment,m),C(e8.$$.fragment,m),C(VT.$$.fragment,m),C(o8.$$.fragment,m),C(r8.$$.fragment,m),C(a8.$$.fragment,m),C(zT.$$.fragment,m),C(n8.$$.fragment,m),C(HT.$$.fragment,m),C(s8.$$.fragment,m),C(l8.$$.fragment,m),C(d8.$$.fragment,m),C(JT.$$.fragment,m),C(c8.$$.fragment,m),C(cM.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(h8.$$.fragment,m),C(fM.$$.fragment,m),C(u8.$$.fragment,m),C(uM.$$.fragment,m),C(p8.$$.fragment,m),C(_8.$$.fragment,m),C(v8.$$.fragment,m),C(_M.$$.fragment,m),C(F8.$$.fragment,m),C(FM.$$.fragment,m),C(T8.$$.fragment,m),C(M8.$$.fragment,m),C(C8.$$.fragment,m),C(MM.$$.fragment,m),C(w8.$$.fragment,m),C(RM.$$.fragment,m),C(A8.$$.fragment,m),C(L8.$$.fragment,m),C(x8.$$.fragment,m),C(BM.$$.fragment,m),C($8.$$.fragment,m),C(OM.$$.fragment,m),C(k8.$$.fragment,m),C(S8.$$.fragment,m),C(P8.$$.fragment,m),C(XM.$$.fragment,m),C(B8.$$.fragment,m),C(rE.$$.fragment,m),C(I8.$$.fragment,m),C(N8.$$.fragment,m),C(j8.$$.fragment,m),C(aE.$$.fragment,m),C(D8.$$.fragment,m),C(iE.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(z8.$$.fragment,m),C(cE.$$.fragment,m),C(Q8.$$.fragment,m),C(_E.$$.fragment,m),C(W8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(vE.$$.fragment,m),C(Y8.$$.fragment,m),C(CE.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(o9.$$.fragment,m),C(AE.$$.fragment,m),C(r9.$$.fragment,m),C($E.$$.fragment,m),C(a9.$$.fragment,m),C(n9.$$.fragment,m),C(l9.$$.fragment,m),C(SE.$$.fragment,m),C(i9.$$.fragment,m),C(BE.$$.fragment,m),C(d9.$$.fragment,m),C(c9.$$.fragment,m),C(f9.$$.fragment,m),C(NE.$$.fragment,m),C(g9.$$.fragment,m),C(VE.$$.fragment,m),C(h9.$$.fragment,m),C(u9.$$.fragment,m),C(_9.$$.fragment,m),C(zE.$$.fragment,m),C(b9.$$.fragment,m),C(HE.$$.fragment,m),C(v9.$$.fragment,m),C(F9.$$.fragment,m),C(M9.$$.fragment,m),C(JE.$$.fragment,m),C(E9.$$.fragment,m),C(V4.$$.fragment,m),C(C9.$$.fragment,m),C(w9.$$.fragment,m),C(L9.$$.fragment,m),C(z4.$$.fragment,m),C(y9.$$.fragment,m),C(uC.$$.fragment,m),C(x9.$$.fragment,m),C($9.$$.fragment,m),C(S9.$$.fragment,m),C(_C.$$.fragment,m),C(R9.$$.fragment,m),C(kC.$$.fragment,m),C(P9.$$.fragment,m),C(B9.$$.fragment,m),C(N9.$$.fragment,m),C(RC.$$.fragment,m),C(q9.$$.fragment,m),C(qC.$$.fragment,m),C(j9.$$.fragment,m),C(D9.$$.fragment,m),C(O9.$$.fragment,m),C(DC.$$.fragment,m),C(V9.$$.fragment,m),C(l5.$$.fragment,m),C(X9.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(d5.$$.fragment,m),C(H9.$$.fragment,m),C(F5.$$.fragment,m),C(U9.$$.fragment,m),C(J9.$$.fragment,m),C(K9.$$.fragment,m),C(M5.$$.fragment,m),C(Z9.$$.fragment,m),C(U5.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(tx.$$.fragment,m),C(Y5.$$.fragment,m),C(ax.$$.fragment,m),C(u3.$$.fragment,m),C(nx.$$.fragment,m),C(sx.$$.fragment,m),C(ix.$$.fragment,m),C(_3.$$.fragment,m),C(dx.$$.fragment,m),C(F3.$$.fragment,m),C(mx.$$.fragment,m),C(fx.$$.fragment,m),C(hx.$$.fragment,m),C(M3.$$.fragment,m),C(ux.$$.fragment,m),C(C3.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(vx.$$.fragment,m),C(A3.$$.fragment,m),C(Fx.$$.fragment,m),C(W3.$$.fragment,m),C(Tx.$$.fragment,m),C(Mx.$$.fragment,m),C(Cx.$$.fragment,m),C(U3.$$.fragment,m),C(wx.$$.fragment,m),C(p0.$$.fragment,m),C(Ax.$$.fragment,m),C(Lx.$$.fragment,m),C(xx.$$.fragment,m),C(b0.$$.fragment,m),C($x.$$.fragment,m),C(F0.$$.fragment,m),C(kx.$$.fragment,m),C(Sx.$$.fragment,m),C(Px.$$.fragment,m),C(M0.$$.fragment,m),C(Bx.$$.fragment,m),C(C0.$$.fragment,m),C(Ix.$$.fragment,m),C(Nx.$$.fragment,m),C(jx.$$.fragment,m),C(A0.$$.fragment,m),C(Dx.$$.fragment,m),C(ew.$$.fragment,m),C(Gx.$$.fragment,m),C(Ox.$$.fragment,m),C(Xx.$$.fragment,m),C(rw.$$.fragment,m),C(zx.$$.fragment,m),C(gw.$$.fragment,m),C(Qx.$$.fragment,m),C(Wx.$$.fragment,m),C(Ux.$$.fragment,m),C(uw.$$.fragment,m),C(Jx.$$.fragment,m),C(xw.$$.fragment,m),C(Yx.$$.fragment,m),C(Kx.$$.fragment,m),C(e$.$$.fragment,m),C(kw.$$.fragment,m),C(o$.$$.fragment,m),C(Ow.$$.fragment,m),C(r$.$$.fragment,m),C(t$.$$.fragment,m),C(n$.$$.fragment,m),C(Xw.$$.fragment,m),C(s$.$$.fragment,m),C(oA.$$.fragment,m),C(l$.$$.fragment,m),C(i$.$$.fragment,m),C(c$.$$.fragment,m),C(tA.$$.fragment,m),C(m$.$$.fragment,m),C(hA.$$.fragment,m),C(f$.$$.fragment,m),C(g$.$$.fragment,m),C(u$.$$.fragment,m),C(pA.$$.fragment,m),C(p$.$$.fragment,m),C(LA.$$.fragment,m),C(_$.$$.fragment,m),C(b$.$$.fragment,m),C(F$.$$.fragment,m),C(xA.$$.fragment,m),C(T$.$$.fragment,m),C(qA.$$.fragment,m),C(M$.$$.fragment,m),C(E$.$$.fragment,m),C(w$.$$.fragment,m),C(DA.$$.fragment,m),C(A$.$$.fragment,m),C(UA.$$.fragment,m),C(L$.$$.fragment,m),C(y$.$$.fragment,m),C($$.$$.fragment,m),C(YA.$$.fragment,m),C(k$.$$.fragment,m),C(ZA.$$.fragment,m),C(S$.$$.fragment,m),C(R$.$$.fragment,m),C(B$.$$.fragment,m),C(o6.$$.fragment,m),C(I$.$$.fragment,m),C(a6.$$.fragment,m),C(q$.$$.fragment,m),C(j$.$$.fragment,m),C(G$.$$.fragment,m),C(s6.$$.fragment,m),C(O$.$$.fragment,m),C(i6.$$.fragment,m),lXe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(ym),m&&t(at),m&&t(Oe),m&&t(Qe),m&&t($m),w(xa,m),m&&t(We),m&&t(Ae),m&&t(Co),m&&t($a),m&&t(rOe),m&&t(xi),w(R7),m&&t(tOe),m&&t(Nn),m&&t(aOe),w(P7,m),m&&t(nOe),m&&t(fS),m&&t(sOe),w(Rm,m),m&&t(lOe),m&&t($i),w(B7),m&&t(iOe),m&&t(wo),w(I7),w(j7),w(Vg),w(D7),m&&t(dOe),m&&t(Si),w(G7),m&&t(cOe),m&&t(Ao),w(O7),w(z7),w(wh),w(Q7),m&&t(mOe),m&&t(Ri),w(W7),m&&t(fOe),m&&t(Lo),w(H7),w(Y7),w(su),w(lu),w(K7),m&&t(gOe),m&&t(Pi),w(Z7),m&&t(hOe),m&&t(yo),w(ey),w(ty),w(Lu),w(yu),w(ay),m&&t(uOe),m&&t(Ii),w(ny),m&&t(pOe),m&&t(xo),w(sy),w(iy),w(ku),w(dy),w(S_),m&&t(_Oe),m&&t(ji),w(cy),m&&t(bOe),m&&t($o),w(my),w(gy),w(P_),w(hy),w(A2),m&&t(vOe),m&&t(Oi),w(uy),m&&t(FOe),m&&t(ko),w(py),w(by),w(y2),w(vy),w(ub),m&&t(TOe),m&&t(zi),w(Fy),m&&t(MOe),m&&t(So),w(Ty),w(Ey),w(_b),w(Cy),w(rv),m&&t(EOe),m&&t(Hi),w(wy),m&&t(COe),m&&t(Ro),w(Ay),w(yy),w(av),w(xy),w(Ev),m&&t(wOe),m&&t(Yi),w($y),m&&t(AOe),m&&t(Po),w(ky),w(Ry),w(wv),w(Py),w(MF),m&&t(LOe),m&&t(ed),w(By),m&&t(yOe),m&&t(Bo),w(Iy),w(qy),w(CF),w(jy),w(r1),m&&t(xOe),m&&t(td),w(Dy),m&&t($Oe),m&&t(Io),w(Gy),w(Vy),w(a1),w(Xy),w(f1),m&&t(kOe),m&&t(sd),w(zy),m&&t(SOe),m&&t(qo),w(Qy),w(Hy),w(h1),w(Uy),w(K1),m&&t(ROe),m&&t(dd),w(Jy),m&&t(POe),m&&t(jo),w(Yy),w(Zy),w(eT),w(e8),w(VT),m&&t(BOe),m&&t(fd),w(o8),m&&t(IOe),m&&t(Do),w(r8),w(a8),w(zT),w(n8),w(HT),m&&t(NOe),m&&t(ud),w(s8),m&&t(qOe),m&&t(Go),w(l8),w(d8),w(JT),w(c8),w(cM),m&&t(jOe),m&&t(bd),w(m8),m&&t(DOe),m&&t(Oo),w(f8),w(h8),w(fM),w(u8),w(uM),m&&t(GOe),m&&t(Td),w(p8),m&&t(OOe),m&&t(Vo),w(_8),w(v8),w(_M),w(F8),w(FM),m&&t(VOe),m&&t(Cd),w(T8),m&&t(XOe),m&&t(Xo),w(M8),w(C8),w(MM),w(w8),w(RM),m&&t(zOe),m&&t(Ld),w(A8),m&&t(QOe),m&&t(zo),w(L8),w(x8),w(BM),w($8),w(OM),m&&t(WOe),m&&t($d),w(k8),m&&t(HOe),m&&t(Qo),w(S8),w(P8),w(XM),w(B8),w(rE),m&&t(UOe),m&&t(Rd),w(I8),m&&t(JOe),m&&t(Wo),w(N8),w(j8),w(aE),w(D8),w(iE),m&&t(YOe),m&&t(Id),w(O8),m&&t(KOe),m&&t(Ho),w(V8),w(z8),w(cE),w(Q8),w(_E),m&&t(ZOe),m&&t(jd),w(W8),m&&t(eVe),m&&t(Uo),w(H8),w(J8),w(vE),w(Y8),w(CE),m&&t(oVe),m&&t(Vd),w(K8),m&&t(rVe),m&&t(Jo),w(Z8),w(o9),w(AE),w(r9),w($E),m&&t(tVe),m&&t(Qd),w(a9),m&&t(aVe),m&&t(Yo),w(n9),w(l9),w(SE),w(i9),w(BE),m&&t(nVe),m&&t(Ud),w(d9),m&&t(sVe),m&&t(Ko),w(c9),w(f9),w(NE),w(g9),w(VE),m&&t(lVe),m&&t(Kd),w(h9),m&&t(iVe),m&&t(Zo),w(u9),w(_9),w(zE),w(b9),w(HE),m&&t(dVe),m&&t(oc),w(v9),m&&t(cVe),m&&t(er),w(F9),w(M9),w(JE),w(E9),w(V4),m&&t(mVe),m&&t(ac),w(C9),m&&t(fVe),m&&t(or),w(w9),w(L9),w(z4),w(y9),w(uC),m&&t(gVe),m&&t(lc),w(x9),m&&t(hVe),m&&t(rr),w($9),w(S9),w(_C),w(R9),w(kC),m&&t(uVe),m&&t(cc),w(P9),m&&t(pVe),m&&t(tr),w(B9),w(N9),w(RC),w(q9),w(qC),m&&t(_Ve),m&&t(gc),w(j9),m&&t(bVe),m&&t(ar),w(D9),w(O9),w(DC),w(V9),w(l5),m&&t(vVe),m&&t(pc),w(X9),m&&t(FVe),m&&t(nr),w(z9),w(W9),w(d5),w(H9),w(F5),m&&t(TVe),m&&t(vc),w(U9),m&&t(MVe),m&&t(sr),w(J9),w(K9),w(M5),w(Z9),w(U5),m&&t(EVe),m&&t(Mc),w(ex),m&&t(CVe),m&&t(lr),w(ox),w(tx),w(Y5),w(ax),w(u3),m&&t(wVe),m&&t(wc),w(nx),m&&t(AVe),m&&t(ir),w(sx),w(ix),w(_3),w(dx),w(F3),m&&t(LVe),m&&t(yc),w(mx),m&&t(yVe),m&&t(dr),w(fx),w(hx),w(M3),w(ux),w(C3),m&&t(xVe),m&&t(kc),w(px),m&&t($Ve),m&&t(cr),w(_x),w(vx),w(A3),w(Fx),w(W3),m&&t(kVe),m&&t(Pc),w(Tx),m&&t(SVe),m&&t(mr),w(Mx),w(Cx),w(U3),w(wx),w(p0),m&&t(RVe),m&&t(Nc),w(Ax),m&&t(PVe),m&&t(fr),w(Lx),w(xx),w(b0),w($x),w(F0),m&&t(BVe),m&&t(Dc),w(kx),m&&t(IVe),m&&t(gr),w(Sx),w(Px),w(M0),w(Bx),w(C0),m&&t(NVe),m&&t(Vc),w(Ix),m&&t(qVe),m&&t(hr),w(Nx),w(jx),w(A0),w(Dx),w(ew),m&&t(jVe),m&&t(Qc),w(Gx),m&&t(DVe),m&&t(ur),w(Ox),w(Xx),w(rw),w(zx),w(gw),m&&t(GVe),m&&t(Uc),w(Qx),m&&t(OVe),m&&t(pr),w(Wx),w(Ux),w(uw),w(Jx),w(xw),m&&t(VVe),m&&t(Kc),w(Yx),m&&t(XVe),m&&t(_r),w(Kx),w(e$),w(kw),w(o$),w(Ow),m&&t(zVe),m&&t(om),w(r$),m&&t(QVe),m&&t(br),w(t$),w(n$),w(Xw),w(s$),w(oA),m&&t(WVe),m&&t(am),w(l$),m&&t(HVe),m&&t(vr),w(i$),w(c$),w(tA),w(m$),w(hA),m&&t(UVe),m&&t(lm),w(f$),m&&t(JVe),m&&t(Fr),w(g$),w(u$),w(pA),w(p$),w(LA),m&&t(YVe),m&&t(cm),w(_$),m&&t(KVe),m&&t(Tr),w(b$),w(F$),w(xA),w(T$),w(qA),m&&t(ZVe),m&&t(gm),w(M$),m&&t(eXe),m&&t(Mr),w(E$),w(w$),w(DA),w(A$),w(UA),m&&t(oXe),m&&t(pm),w(L$),m&&t(rXe),m&&t(Er),w(y$),w($$),w(YA),w(k$),w(ZA),m&&t(tXe),m&&t(vm),w(S$),m&&t(aXe),m&&t(Cr),w(R$),w(B$),w(o6),w(I$),w(a6),m&&t(nXe),m&&t(Mm),w(q$),m&&t(sXe),m&&t(wr),w(j$),w(G$),w(s6),w(O$),w(i6)}}}const bVt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function vVt(x){return _Gt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class AVt extends gGt{constructor(g){super();hGt(this,g,vVt,_Vt,uGt,{})}}export{AVt as default,bVt as metadata};
